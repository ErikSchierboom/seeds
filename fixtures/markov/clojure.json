{"Nodes":[{"Key":" ","Fragments":["Neat!","Cool!",":)","Great!","Nice!","What","aaaand","interesting,","Thanks,","Also","I","Sure","Nice!","not","do","I","I","Perhaps","-","-","If","This","Nice","One","hmm...","Hmm,","This","Nice","What","For","`(defn-","good","oh","i","Thanks","Would","Check","Hmm,","Nice!","One","Neat!","yeah,","Nice!","Would","Would","Nice!","Would","Is","Oh,","Thanks!","I","nice","Had","Thanks","Nice!","Yes,","Nice","looking","Oh","Nice!","Nice!","Rubysolo,","How","Would","Excellent","Can","Should","it","Thanks","Those","higher-order","Thanks,","Their",":D","You","Oh","yeah,","sounds","pardon","Yes,","Good","Likewise!","Sorry","I","I","In","I'm","I","In","By","I","maybe.","I","using","Also,","Can","Would","I","Aha,","Hmm,","In","Robustness","Yeah,","How","Also,","One","Thanks!","I","Checking","This","As","Nice,","Weird,","Aha,","`assert_equal","However,","Thanks","I","Nice.","your","-","-","Very","Cool,","I","They","Hi,","Would","Great!","Ok,","Would","This","Looks","I","Despite","That","I","moving","It's","This","-","-","-","Er,","It","Also,","I'm","Hmm,","Very","You","Apparently","This","would","I","I","I've","I","In","I","I've","As","According","Thanks","What","I","Hi","First","I","Second","Ok,","The","(also,","The","It's","(although,","You've","FWIW,","The","You","Other","So","In","`silent?`","@geovanni","Thanks","I","\"you","I","I","(assert","I","Looks","Would","For","hmm,","very","That's","Wow,","In","I","or","sorry,","(or","chrome","nil","(defn-","(or","For","I","Maybe","Do","This","Ok","HAHA,","Have","Thanks!","I","Awesome!","Looks","Ok","Good","I","Have","Looks","Looks","You've","I","Thanks,","Oh,","Sure,","Thanks","Any","Have","Have","What","Looks","That's","Thanks","PS:","I","sweet,","Great","Have","I","Good","Thanks!","What","Do","Great","Thanks!","yeah","The","Nice.","Yeah,","Thoughtful!","Very","This","Good","Ah,","yes,","Have","Good","Want","Yeah",":)","I","Nice!","Good","Nice!","Looks","Ok.","Nice!","One","Otherwise,","Ah,","Anyway,","Looks","Thanks","Thanks","I","Formatting","It","Thanks","Note","This","Looks","Neat!","Have","I","turns","i","Neat!","Very","haha,","I","Have","Was","I","ha,","This","Is","Totally","Very","Nice!","Although","Looks","Looks","Thanks,","I","Is","hmm...","@mortimer","Looks","Good","Very","I","To","I","It","Cool,","To","Nope,","It","This","May","I","Hi,","The","I","Lastly,","Oh","Awesome!","Great!!","What","Instead","And","How","Also,","Yay,","However,","This","I","String","I","```clojure","(ns","```","However","Pretty","What","Thanks","```clojure","(ns","(:require","```","or","```clojure","(ns","(:require","```","This","Did","`:else","How","Otherwise","Encoding","I","Looks","Only","I","```clojure","(replace","```","That","I","The","I","I've","This","About","More","My","That's","If","Ah,","Both","So,","(str/upper-case","...which","(-\u003e","Which","The","It","I'm","Did","I","Looks","I","Is","I","On","How","Nice","You","I","Have","Other","Can","Other","It's","This","Nice","Maybe","You","In","If","Have","Moving","Maybe","Maybe","Moving","That","I","I","Feel","If","You're","It","Basically,","Then,","Since","Thank","In","I","I","Nice","I","(And","I","Do","Yeah,","I","Looks","Regexes","I","Would","Check","This","Nice","Would","I","Thanks!","Ok.","Hi","Thanks","I","Hi,","Nice","Why","I","Also","It's","Just","Ok,","Nice!","Excellent!","Nice!","what","Thanks,","Fair","Should","You","Hey,","Also,","I'm","Great","The","Well,","Great","Are","The","Would","Have","Looks","Oh,","On","reusable","super","More","Because","In","TL;DR","On","*","*","More","Ah,","Hey","A","I'm","Alternatively,","```","(ns","(require","```","and","Here's","```","(ns","(require","```","Then,","Didn't","Nice.","I","I","I","Hey","Good","1.","2.","3.","`(ns","(:use","...or","`(ns","(:require","I","Ok,","I've","In","I","Great","Why","Also,","I","I","I","The","Would","This","Looks","Nope,","An","(defn-","(clojure.string/blank?","which","I'm","I'm","Thanks,","Nice,","I","I","Is","That's","Nice!","Very","About","LGTM","Awesome.","Looks","Check","Do","This","Have","Well,","Probably","It","This","This","This","Also,","Love","Very","Hi,","P.S.","I","Good","It","Great!","Good","A","Are","And","I","Would",":)","I","I","As","Hadn't","Why","Nice!","This","Also,","I","I","Thanks","Nice!","Something","It","Ah,","A","-","-","-","This","Thanks","Nice,","Does","Great!","Looking","The","I","Moving","Did","Also,","Any","Thank","Thanks","Looks","Ha","Can","Looks","Agreed.","Try","Can","Looks","Good","@alfreda-ee,","The","Instead","Looks","I","Nice","You","(Accidental","Thanks","Thank","Can","Why","Edit:","You","Submitted","ah,","Maybe","Have","Nothing","Very","Yes.","Done","Thanks!","I","If","Thanks!","Have","well,","Sweet!","Very","I","Thanks","Neat!","Thanks,","You","And","I","Please","Thanks","what","Cool!","So","Answering","Awesome.","I've","It's","Oh","Clojure","The","Accidental","I","(=","Thanks","Nothing","But","Looking","Love","Ah,","Thanks!","Nope,","Looks","Good","Yeah,","Neat,","Thanks","Woops,","Great","What","Agreed","Thanks.","You","Looks","For","Alright,","Neat.","I","Looking","Sweet,","haha,","To","This","Nice!","I","Whoops,","Nice!","What's","Yup,","This","Looks","Good","This","Your","You","Nice!","I","I","Possibly","Thanks!","Hmm,","I","My","This","Yeah","Nice","In","I","For","A","I","Hard","The","Oops.","This","I","Looks","I","What","I","I","Otherwise,","Maybe","Hmm,","I","Otherwise,","Actually,","I","@emmy","@justine","You're","This","For","It","Overall","In","As","````","(defn-","(=","````","Other","Neat!","We've","I","Assuming","Performed","This","I","Everything","A","I","This","This","Typically","Hiya,","Here's","-","-","Sorry","I","```clj","(=","```","So","```clojure","(map","{:T","(map","(comp","\"GATTACA\"))",";","```","This","Would","It","Looks","The","Well,","The","Also,","Otherwise,","I've","```clojure","(defn","(=","```","looks","It","Thanks.","Nice","Do","Also","Looks","Very","I","I’m","I'm","The","Other","PS:","Maybe","Ah","Neat","Reads","`blank?`","Nice","It","Also","Great!","One","```","(def","```","I","Thanks,","I'll","Looks","Thanks","I","I","Interesting","I","You","Also,","Otherwise,","Great!","I","Fully","Hmm,","Ok,","\u0026gt;","Putting","Thank","I","Also,","Otherwise,","Looking","Have","That's","Cool!","This","That","Very","I","On","Thanks!","Pretty","I","But","Speaking","Pretty","Why","Shout","Haven’t","Very","So","```clj","(defn","(empty?","```","Looks","This","-","-","Nice.","\u003e","Yes,","Also,","Otherwise,","Thanks","For","I","Yes,","The","My","The","How","It","That's","I","Oops,","Instead","Would","I've","I","Thank","I'm","One","Have","Looks","Are","Have","If","I'm","But","I","Would","I","I","`use`","Adding","I","I","I","Using","`let`","Otherwise","Thanks","I've","I","Hey,","You","Nice","Does","I","Thank","Sorry","That's","*","*","Also,","I'm","It's","Getting:","Since","Also,","This","Honestly","```clojure","(ns","(:use","```","instead","Ok,","This","Looks","This","Do","Yup,","How","This","Also,","```clojure","(defn-","```","Thanks","To","No.","Thanks!","normalize","Interesting,","I","Nice!","Looks","Maybe","Looks","I","Hmm,","Thank","-","-","-","I'm","If","In","Sure,","I","Your","Looks","Great!","2","There","I","https://github.com/bbatsov/clojure-style-guide","Finding","Great!","Yeah,","Let","Good","Great!","Good","Clear","Neat,","There","Nice.","What","Please","A","Nice","Ouch,","Remember","Consider","Great!","I","I","Ah,","I","/me","Honestly,","Also,","Great","You","Did","That's","Don't","I","There","I'm","It","Very","Pretty","Great!","Looks","What","Could","Ah,","It's","Great!","Nice.","Looks","If","I","Good","Is","That's","Good","Hmm,","I'm","But","Decided","But","`(=","You","Looks","###","-","-","One","Great.","Thanks","Thanks,","I","Thanks,","Looks","@maybelle","@taryn","Ouch,","@emelia","Must","Looks","@orpha","Regarding","Hint:","I","Submitted","Spacing","Props","you're","Great!","I've","-","You're","Great","Good.","Have","Thanks","Good!","I","Is","Would","Are","Cool","valid","Thank","Looks","@elmore","Use","You","`\\w+`","Top","Try","It","Thanks!","One","Ok.","Ignore","Thanks.","My","Keep","Hard","Ok,","Thank","Ooh,","`blank?`","Thanks","frequencies,","It's","I'm","I","Very","Very","Forgot","@faye","Looks","Thanks","I","Awesome","Nice!","Check","Nice","Actually","Much","Agreed.","Have","The","Love","It's","I","I'd","No","I'll","Aha!","No","Is","Thanks!","Not","Can","I","I'm","Good","It´s","You","good","With","Whoops...wrong","O_O","Looks","Definitely","Damn.","Only","Formatting","Also","Formatting","Hmm","Since","Counting","`letfn`","The","Great","There","Indeed,","Having","Maybe","```","(apply","```","I","Ah,","The","You","Isn't","That","I'd","I","Regarding","I","Thank","What","Ok,","Is","Thank","What","```clojure","(join","(for","(str","```","This","I","`range`","There's","I","My","Agreed","@kylie","Don't","Take","Zoldar","Although","Hey,","Can't","What,","Hint:","Higher","Good","Looks","jgdavey","Updated","Updated","This","Wouldn't","Man","Regarding","I'm","Hey,","Now","Not","How",":D","Use","I","I","I","This","Feel","*","*","*","I'm","That","`re-seq`","Right,","Interesting.","```","$","Testing","Ran","0","```","It's","\u003cpre\u003e","user=\u0026gt;","#'user/add","user=\u0026gt;","2","user=\u0026gt;","nil","user=\u0026gt;","#'user/silence?","user=\u0026gt;","true","\u003c/pre\u003e","Either","```","(ns","(:require",":rename","```","This","Okay,","Moving","Nah","In","This","Thank","What","I","Very","I","From","Thanks","Why","Sure,","Basically","In","Would","Very","That's","That","Yeah","This","Happens","This","Now,","I","You","That","Looks","This","I","You","Looks","I","`bob/yelling?`","`(apply","It'd","So","How","That's","Of","I","Also,","Not","Would","Looks","I","Felbit:","Etrepum:","That's","(defn-","(let","(fn","Then","You","Sorry","I","Yeah","You","If","Can","Destructuring","Importing","I","You","Thanks!","Hi.","Good","I'm","This","Thank","Btw,","Would","I","Yeah.","Yeah,","I","Beautiful!","I'd","I","Looks","(I'm","I","Another","Have","Hint:","oups","Thanks","Your","Also,","CamelCased","1.","2.","Yeah","You","Some","1.","2.","3.","Good","If","**But**","Hey,","Besides","Oh,","Did","And","I","I","I","`:use`","Sorry","You","Would","One","```","(def","(let",";","```","Aw","I'd","If","You're","@rossie","That","I","Really","Agreed","I","While","Due","The","Duh,","http://clojuredocs.org/clojure_core/clojure.core/require","Thanks","@cristina","Well","As","The","Joining","In","@dorothea","Regex","@antonette","Should","It's","@pete","You","Did","I","I","Is","There's","One","@jeramy","However,","The","@dorris","`shouty?`","That","I","@vernice","In","clojure.string/blank?","And","I","The","Added","Given","I","As","What","Otherwise,","If","I've","Looks","While","Is","I","_Note,","It's","You're","Do","I've","I","But","I've","-","-","-","what","Please","Please","Both","Have","FWIW,","```","(ns","(:use","(:refer-clojure","```","...","With","There","So","Ok,","I'm","So","I","(I","So","Hey,","Maybe","```clojure","(re-seq","```","over","```clojure","(str/split","```","I","IMO,","I","I've","It's","Now","How","1.","2.","Sure.","Thank","You","I've","Clojure","Again","@guadalupe","I've","Some","Instead","@gus","Last","I","I'm","Also,","I","Have","I","2","1)","2)","@jaclyn","Interesting","Also,","Looks","What","LOL,","I","Looks","I","Very","Check","Also,","`cond`","I've","Cool.","Maybe","I","It's","Okay,","I","Clean,","It's","I","```clojure","(defn","[dna-string]","(apply","```","but","It's","I","You","@matilde:","Something","```clojure","(ns","(:use","(defn","[s]","(=","(defn","[s]","(=","(defn","[s]","(cond","(empty?","(shouting?","(question?",":else","```","That's","Also","I'm","Nice","I","Shorthand","It","I","ooh","Perhaps","Or","That","`:use`","I","@orpha","@orpha","Oops","But","Are","Can","It","Are","@jacinthe","@jacinthe","Oh","Too","Can","Can","Are","Sorry,","I","`(def","I","(e.g.","I","IMO,","The","Do","I'd","You","But","You","I","For","@juston","1.","I","Maybe","Now","Also,","This","#\"\\W+\"","Yeah.","I","Have","Also,","I'd","Ah,","Good!","Using","Might","I","Are","Is","Yay!","Unfortunately","Better","Good.","Will","Alright,","Can","What","I","Sorry,","I","My","Btw:","Better?","Mainly","String","Looks","Ah,","Looks","Hard","Would","Noted,","`let`","Only","Another","Again,","Looks","Thanks","Yup.","You","Great!","remove","Thank","That's","Looks","That's","Thanks","do","You","Great!","How","I","Hopefully","Looks","Yes,","Ignore","Thanks","I","Parentheses","Ah,","Succint","Consider","Thanks!","`format`!!","Better,","Try","Very","Thanks,","You","Does","Your","\u0026gt;","So","I'm","I","You","You","You","You","I'm","Please","A","Maintainability","Also,","Consider","I","It","You're","Smart","I","Also","I","I","This","Perhaps","I","Specifically","Or","Two","I","While","Attempt","`(update-in","Maybe","Version","*","*","*","*","I'd","Ah","I","What","My","Although","This","Here's","```clojure","(defn-","(=","```","That's","Remember","```clojure","({\\a",";;","({\\a",";;","```","Yeah,","Since","Would","Is","`random-string-range`","Good","(partial","It","Thanks","Also","Resubmitted.","The","user=\u0026gt;","(fn*","user=\u0026gt;","(inc","As","Other","Formatting","Looking","I","```","(-\u0026gt;","(range","(map","#(interleave","(apply","```","Are","Naming","You","You","Beyond","(ns","(:require","is","That's","About","Looks","There","Going","Thanks","Compiler","When","`ns`","No","```digest```","Smart","I","You","Changed","Making","We","This","You","Beyond","(ns","(:require","Actually","Looks","Even","Formatting","Optionally,","The","`clojure.string/join`","As","The","That","There","I'm","Could","Very","Have","It","Thank","Looks","Thank","You're","In","Ah,","I","Besides:","Is","Actually,","```clojure","let","(#{adenosine","```","it","Argh","And","Give","With","First,","EDIT:","Don't","It","As","With","I","Ah,","Alternatively,","Oh","I","Looks","`use`","(ns","(:require","I","Other","Based","1.","2.","Good","Yeah,","Thanks","\u0026gt;","Silly","\u0026gt;","Ah,","You","You","You're","Try","Code","Yeah,","Too","Do","Anyway,","Sorry!","```","(ns","(:require","```","Here's","The","Or","I'm","I'm","Remember","Hey,","Zipping","Dont","I'm","I","I","Oh,","There's","It's","Okay,","If","Count","I'm","Yeah,","One","I","I","Besides","Looks","Two","The","Edit:","Isn't","```clojure","(=","```","It's","What","I","How","Or","Wow,","As","Howdy,","Instead","Observe","Looks","Enough","Would","`get`","I","I'm","Sort","https://gist.github.com/zoldar/6425609","EDIT:","Good","What","It","Very","Looks","user=\u0026gt;","#'user/word","user=\u0026gt;","\"Elapsed","nil","user=\u0026gt;","\"Elapsed","nil","user=\u0026gt;","\"Elapsed","nil","user=\u0026gt;","\"Elapsed","nil","user=\u0026gt;","\"Elapsed","nil","user=\u0026gt;","\"Elapsed","Any","It","@roxanne","Ah,","The","Good.","Why","`ref`","Aliasing","@manley","@micheal","@mckayla","Try","I","Yeah,","After","On","You","```","(defn","(update-in","```","This","Thanks","`and`","Ah,","I","Damn,","I","Could","`ref`s","Makes","You","Used","Yeah,","You","Improved","@joesph","Thanks","@mario","@nicolette","@nicolette","Apparently","Thanks,","You","I","Agreed","I","Indeed","Thanks.","Yes,","A","You","Thanks","Tests","Regarding","EDIT:","@garrison,","Good","Thanks","Looks","Seems","`seq`","Thanks","That's","This","What","I","The","Is","Closing","You","That's","I","Thanks",":use","You're","Thank","(","Wow,","Using","Saved","It","You","For","https://github.com/bbatsov/clojure-style-guide","Think","Shortest","The","For","@gay","is","also,","the","Simplify","`lower-case`","Give","Good!","I'd","My","What","What","I","I'd","Two","1.","2.","Naming","If","Great","Thanks!","I'm","It","`merge-with`","Nothing","Oh,","A","Take","I","Wow!","`seq`s","Those","It","Ok,","(ns","(require","(def","(defmacro","`(do","(alter-var-root","(defn-","(-\u0026gt;","(not","*checks*)","first","(defmulti","(defmacro","`(defmethod","(defcheck","(=","(defcheck","(and","(=","(defcheck","(and","(=","(defresponse","(defresponse","(defresponse","(defresponse","(defn","(bob","The","Moved","The","Remember","Perhaps","Also,","One","Ouch,","Looks","Yeah,","Sweet.","Is","Much","String","OK,","This","```clojure","(=","```","(and","How","Looks",":)","There's","Yeah,","You're","Yeah","Would","You","Is","Also,","You're","Looking","I","```clojure","(def","(def","(def","```","Ah,","I","user=\u0026gt;","\\a","user=\u0026gt;","nil","Exploit","It's","Not","Definitely","`valid-nucleotide?`","Saw","Just","I","I","Ah","@melba","Am","Remember","It","That's","You","Good.","`if-let`!!","Then","New","starting","Ok,","`when-not`","Maybe","Could","It's","Wasn't","Great","Great","Have","I've","BTW:","@rafael,","If","Nice","Thanks","While","Thanks","Perfect!","No","Great","It's","It","There's","user=\u0026gt;","\\a","user=\u0026gt;","nil","Consider","Formatting","While","Overall,","I","Frequencies","I","user=\u0026gt;","\\a","user=\u0026gt;","nil","Think","Helper","Please","Helped","Consider","Consider","Oh","Thanks","I","`merge-with`","No","Good.","@treva","They","Now","I","Remember","Good","Hi..thanks","When","You","OK","Outstanding","I'm","Because","I'm","I'm","You","Nice","You","Great","I","I'm","(defn-","I","It","What's","Looks","While","That","Darn.","Sure.","Is","I","Tiny,","```dna_string```","You","`invaild-number`","Clojure","Why","I","Nicely","Would","Thank","Bravo,","```","(defn","[s]","(case","(\\m","(\\T","\\e","\"Fine.","```","The","Well","Clever","###","*","###","*","*","Good","Thanks","You","Oh","I","This","Neat","Does","Is","Check","There's","For","@jo","Any","This","command","Do","Convinced","Sorry","The","This","Accidental","I","While","Consider","Also","Nice","have","Thanks","Indeed","Which","-","or","-","One","How","For","Would","(basically,","Made","Think","I","You","[The","[worst]:","@jessy","Your","Thanks","No,","You","Fair","Thank","Also,","This","Quite","Thanks,","It","I","@evie","For","I","The","Have","Thank","Regarding","I'll","Memoize","Made","Looks","reduce-kv","I","A","1.","2.","3.","4.","Just","No,","If","Version","Where","Oh,","I'm","I","Yes,","I","I'm","Don't","```clojure","(:refer-clojure","```","to","Nice,","In","Personally","Looks","@karlie","Clojure","I","```clojure","(defn-","(let","[word-lc","```","Is","Also,","```clj","(str/replace",";;=\u0026gt;","```","One","Oops,","A","This","Sorry,","OMG,","@karl","If","This","I","In","```clojure","(defn-","(let","(and","```","We","No","Not","Very","I","If","While","+1","Picked","Don't","Looks","```clojure","(re-seq","```","Ah,","I","```clojure","(cond","(silence?","(shouting?","(question?",":else","```","...but","Is","Can","Did","```clojure","(cond","(clojure.string/blank?","(=","...)","```","Like","```clojure","(defn","[greeting]","(=","```","Then","```clojure","(cond","(clojure.string/blank?","(shouting?","...)","```","Think","You","Looks","Well,","`(repeatedly","I'm","Check","I","I","This","Yes,","What","I","The","As","I","If","It","I","@osborne","I","Minor","This","Yep,","I","Interesting","I","Pretty","Thanks","I'll","I'd","I","I'm","I","+1","If","@lupe","I","There","Pretty","@marion","Updated","Clojure's","I","You","I'm","I","Ah","Might","There","Thanks","I","Thanks!","I","This","\u003cpre\u003e","(defn","(frequencies","\u003c/pre\u003e","Much","Is","\u003cpre\u003e","(defn","[phrase]","(frequencies","\u003c/pre\u003e","@floyd","Accidental","Can","`q`","If","All","This","Great","Other","@christina","Good","Brilliant.","Would","Thanks","Looks","A","```clojure","(ns","(:require","```","This","You","Generally","What","I","You","I","Instead","Small","I","However","I","@moses","`char-to-rna`?","I","Why","I","I'm","Regarding","Also,","@ibrahim:","Rename","Also,","I","However,","Whitespace","Thanks,","Finally,","`(not","Doesn't","I","You","```clojure","(=","```","will","It","Thanks","I","You","English-related,","`say`","Nice!","@roy","I","Good","I","Looks","Please","As","An","The","-","Thanks","I've","http://stackoverflow.com/questions/10358149/in-clojure-1-4-what-is-the-use-of-refer-within-require","http://dev.clojure.org/jira/browse/CLJ-879","It's","You","It","`(first","I","I","Did","Looks","Coming","I'm","@cristian:","That's","@anika","Thank","\u003e","Done.","\u003e","Done.","\u003e","Done.","\u003e","Done.","\u003e","Done.","The","I","It","Clojure","You","You","```","(ns","(:require","```","Then","Can","You","It","http://stackoverflow.com/questions/10358149/in-clojure-1-4-what-is-the-use-of-refer-within-require","http://dev.clojure.org/jira/browse/CLJ-879","Pretty","You","Thanks","1.","2:","You","thanks,","\u003e","Done.","6:","7:","8:","@madisen","Thank","I","You","@jarod","Thank","Nice","Thanks","Can","I","Check","Most","ohh","This","Good","One","Also","Finally","two","1.","2.","I","I","@danika","Thank","My","I","Nice","*","*","I","Also,","@alexie","@clemmie","Agreed","Also","Consider","Take","Consider","I","`zip`","Nice","A","@alexie","The","Not","You","You","One","@uriah,","You","There","You","Generally","This","I'd","My","Try","Interesting.","Although","Thanks!","It","Instead","You","The","You","In","`(blank?","I","Another","I'd","It's","This","sweet","This","@emilie","@josianne","@josianne","@josianne","A","Thanks","I'm","The","And","three","1.","2.","3.","Does","If","One","\"we","Since","And","Two","I","One","The","No","I","@jamar","Is","EDIT:","Super","You","I","There's","You","If","Your","You","Instead","```clojure","(ns","(:require",";;","```","You","`response-for`","You","The","In","Also,","This","You","You","Great","clojure.string","The","From","Your","Your","`is-silent`","You","Your","This","You","Thanks","Now","Looking","You","Regarding","Thanks","Hi,","thank","messing","Will","Thanks,","1)","2)","3)","Aside","Ah,","Your","You","It's","This","What",":)","Have","Yeah,",":)","Thanks","@mittie","Trying","@jaiden","@tobin","Yeah","Thanks","Being","You","@kayden","You","This","Thanks","I","Good","Some","1)","2)","Looks","1.","2.","3.","4.","`#\"\\w+\"`","@michele","Re:","HOWEVER.","...there","It's","1.","2.","3.","4.","5.","(ns","(:require","6.","Looks","1.","2.","3.","`(map","@therese","I'd","It's","You","It's","@esteban","Wanted","I","I","Is","I","I","I","I","Yes","I","Thanks","@amely","That","Re:","Re:","I","Lowercasing","I","(defn-","\"Calculate","[lower-word]","(sort","(defn-","\"Given","that","[word]","(let","alpha","#(let","(and","(=","@leopold","Fixed.","According","The","Having","It","Great","I","The","Some","```clojure","(cond","predicate-1?","predicate-2?","predicate-3?",":else","```","(But","You","You","Why","I","1.","2.","3.","4.","After","1.","2.","Looks","Also","1.","2.","@esperanza","You","```:require","You","Thanks!","`reduce-kv`","Transforming","\u003e","True","\u003eThere's","Good","Thanks","I","When","I","Inside","With","EDIT:","Generally,","One","@marlene:","I'm","Instead","(defn","(let","(fn","Then,","One","Don't","The","I","I","The","```","#\"[A-Z0-9\\s\\p{Punct}]+[\\!\\?]?$\"","```","instead","```","(?:[A-Z0-9\\s\\p{Punct}]+)(?:[\\!\\?]?)$","```","Yup.","One","Wow!","In","Only","There's","`strand-compare`","Also,","Thank","1.","Maybe","2.","This:","```",":else","))","```","should","```",":else","```","Apart","I","It","```clojure","({\\T","```","But","I","1.","2.","Don't","Woah,","But,","I","1.","2.","3.","4.","You","Thanks!","Thanks","Lots","Sorry","1.","2.","The","If","Your","Please","(:require","`universe`","Also","Even","`(seq","Thanks!","But","I","`split`","Another","`left`","You","Thanks","Yes,","Just","@wilhelmine","Anyway...","Thank","@elwyn","1)","2)","Neat!","Edit:","Unfortunately,","You're","The","That's","Breaking","An","```","(and","(=","(not=","```","or","```","(and","(=","(not=","```","Where","Thanks","One","In","@charlotte","1)","2)","But","ad","ad","EDIT:","(or","Awesome.","Nice","You","That's","`frequencies`","Yeah,","Thanks","Nice","I","You","`merge`","I","I'm","Nice,","`(def","Thanks","That","EDIT:","I","This","Any","Thanks!","Ah","Thanks","You","Ok","This","There","I","`clojure.string`","There's","You","Nailed","Ha","Yes","Well,","Looks","(str","Ok","Partial","EDIT:","The","(:require","or","(:require","When","These","The","`blank?`","Thanks","Feels","@kobe","Just","As","That","You","There","It","Explicit","Consider","For","It","I","You","`frequencies`","`clojure.string`","Thanks","I'm","There's","I've","I'm","I","The","Full","Thanks","Predicates","There's","Solution","Alternatively,","Why","I","Argument","This","And","Nice!","I","It","*quietly","I","Thanks","I","I'm","Hi,","a","You","Think","One","Alternative","Alternatively","In","You","I","Nice","Question:","Making","@kaitlyn:","Equivalent","Ahh,","Valid","Define","(defn","Then","Of","Splitting","I","By","Yes,","I've","A","Nice.","Looks","Hi.","My","When","I'm","@omari:","@omari:","Another","Yes,","I","1.","2.","Wow,","This","(fn","You","You","How","Agreed","I'm","Looking","Err...","Yes,","Yeah,","What","Ok","You","@turner","thanks","By","Ooo!","Well,","Also,","Well,","So","```clojure","(defn-","(case","0","(-","```","I","```clojure","(defmulti","(defmethod","(defmethod","```","I","I","One","Not","Ta","I'd","Calling","Manually","You","I","I","On","That's","Not","Unsure","Best","You","The","And","There's","`reset!`","Thanks","The","Nice","This","I","There","I","Maybe","You","I","This","I","Nice","What","Here's","(ns","(defn","(let","[lowerA","(defn","(let","(and","(defn","(vec","Comparison","Does","Heh.","`is-yelling?`","`(if","I","This","The","Great","Oh,","This","+1","I'm","There","Nice","But","I","I","Eventually","After","I","It's","It","`(get","Another","`reduce-kv`","In","This","It's","The","Thanks","Still","Using","Used","Despite","@nico","I'd","Thanks.","That's","A","You","The","Functions","```clojure","(defn","(apply","```","Notice","You","Appreciate","like",";;","(defn","[x]","(bar","cond","(and","Would","Pretty","Try","One","I'm","clojure.string/blank?","I'd","default-respnse","Other","@cristopher","@miles","I","If","```","(ns","(:require","(def","(def","(defn","[dna]","(str/replace","```","The","Looks","There's","The","The","```","(defn","(cond","(=",";;",":else","```","Using","Pretty","The","\u003e","Do","@orville,","@betsy:","@betsy:","It","On","Whoops!","Oops,","The","You","And","Ohhh","Thanks!","Looks","Also,","I","I","I","This","Using","Simpler","Hey,","You're","Yeah","My","Have","I","I","Does","I","This","Why","The","You","On","I","Thanks","There's","Still","I","Still","I","To","Regarding","How","I","And","Thanks!","The","```clojure","(and","(some","(not-any?","```","but","```clojure","(and","(some","(=","```","Personally","\\*cough\\*","Much","`question?`","Looks","You","This","Two","I","Had","Can","This","There","1.","2.","3.","This","You","One","Nice","geofflane,","hanmoi-choi,","and","Creating","You","For","The","Yeah,","```clojure","(def","(comp","string/lower-case))","```","but","I","Agreed.","I","Nice","Based","I","It's","You","I'd","@ambrose","-","-","-","And","Nice","Nice","It","It","1.","2.","Thanks","@brendon","1.","2.","3.","Looks","I","I","Thank","The","*","*","simplified","I","+1","For","There","I","Hey","*","*","In","I","*","*","```","(ns","(:require","```","*","```","(defn","```","rather","```","(defn","```","Instead","Started","I","awesome","The","There","The","The","Thelast","As","`(and","Not","Hi","Thanks!","Clean","Also,","(defn","(clojure.string/replace","I","Speaking","Style:","*","*","Thanks","Can","Took","@cheyanne","EDIT:","The","Also,","Maybe","Reduce","@mitchell","This","Hey","The","If","Thanks!","Looks","You","This","After","Any","This","First,","I","I","Naturally,","I","```","(def","(fn","(this)))","```","Speaking","For","Those","I","You","Use","In","The","-","-","Added","Thanks,","I","I","Done","I","Other","Good","Thanks,","I'm","Ordinarily","I","So","\u003e","You","@lynn","[`defn-`](http://clojuredocs.org/clojure_core/1.2.0/clojure.core/defn-)","oh","Trying","Are","I","Looks","Seems","Okay,","Sorry,","All","Played","My","I've","I","I'd","Overall","Instead","`(rand-int","This","I'm","Have","Have","Joining","My","Ah","```clojure","dna\u003e","#'dna/dna-seq","dna\u003e","\"Elapsed","#'dna/r","dna\u003e","\"Elapsed","#'dna/r","dna\u003e","\"Elapsed","#'dna/r",";","user\u003e","#'user/dna-seq","user\u003e","\"Elapsed","#'user/r","user\u003e","\"Elapsed","#'user/r","user\u003e","\"Elapsed","#'user/r","```","The","You","**[Edit]","```clojure","dna\u003e","#'dna/dna-seq","dna\u003e","\"Elapsed","#'dna/r","dna\u003e","\"Elapsed","#'dna/r","dna\u003e","\"Elapsed","#'dna/r","dna\u003e",";","user\u003e","#'user/dna-seq","user\u003e","\"Elapsed","#'user/r","user\u003e","\"Elapsed","#'user/r","user\u003e","\"Elapsed","#'user/r","user\u003e","```","I","You","BTW,","```clojure","user\u003e","\"ACTG\"","```","Just","No","Have","For","```clojure","user\u003e","true","```","Have","I","Ok,","One","`defn`","```","user=\u003e","(def","```","And","@mackenzie","Looks","A","One","Rewrote","Sure","Also,","I've","This","Thanks","Here,","Great","About","Refs","Generate","That's","Ah,","think","I","I","You","Feel","This","I","your","Good","for","(=","Had","This","1.","2.","3.","I","Tried","No","I","Thanks","I","Much","That's","Very","I","```clojure","(ns","(:require","```","The","That's","```clojure","user\u003e","#'user/strand","user\u003e","\"Elapsed","true","user\u003e","\"Elapsed","```","I'm","@katheryn","The","`pretty-print`","The","much","`format`","think","I","First","Second,","```clojure","(ns","(:require","```","Third","Like","You've","Is","Java's","This","Thanks","I","Did","A","Thanks","Should","Is","Are","Fairly","As","\u003e","This","Take","Looks","Did","mlakewood,","Great","After","It","Will","Used","An","```","(defn-","(and","(apply","```","but","Fair","Nice","This","Just","Did","This","Did","Also","Aha","Note","Putting","I","I","Bob","Experience","So","The","This","Interesting","However,","This","I'm","I'm","used","Interesting","Curious:","Initially","Realized","good","This","Literally","Hi,","So","I've","This","1.","2.",";;","({:a",";=",";;","({:a",";=","There","First,","({:a",";=","({:a",";=","Second,","What","While","Try","\u003e","I've","http://exercism.io/submissions/3b18ee424306e0e82871a62e","Awesome.","You","You","Absolutely","Fixed","made","It","-","```clojure","(clojure.string/split","```","-","```clojure","(-\u003e","```","1.","2.","Looks","Also,","@lizeth","@deanna,","Have","@reynold","and","This","Furthermore,","One","Thanks","Maybe","This","Super","line","I'm","I","You're","Some","line","line","line","line","line","line","line","line","```","(-\u003e\u003e","letters","(map","(map","(reduce","(apply","```","To","```","(-\u003e\u003e","letters","(map","(map","(reduce","(apply","```","line","line","line","You","Can","Thank","I","When","I","I","I","I","I","I","I'm","```clojure","(defn-","(and","(=","(not","```","This","Perhaps","Right","I","I","```clojure","(defn-","```","The","I","You","@lupe","Thank","But","Yes,","I've","I'm","I","@daryl","Indefinite","This","I've","I","```clojure","(cond","(silence?","...","```","Cool!","```","(defn","(frequencies","```","It's","```","(-\u003e","prepare","frequencies)","```","Interesting.","```clojure","(=","```","But","Cool!","Have","I","Thanks","I","@melisa:","@melisa:","`(remove","`clojure.string/lower-case`","You","I'm","Looks","You","You","Most","Also,","Good","Based","Looks","Based","Use","Use","Make","\"-\u003e\u003e\"","I'm","Failures:","```","Testing","FAIL","expected:","actual:","FAIL","expected:","actual:","Ran","2","```","I","Looks","Thanks","Thanks","This","Glad","Well","There's","Thansk","You","I'd","\"Must","AUGC","Thanks","What","Looks","```clojure","(defn","{:pre","(clojure.string/replace","```","I","This","1.","2.","Looks","Maybe","But","This","Looks","I'm","Did","Oh,","First","Still","You're","While","Exercism","But...","I","`(defn","(if","Your","That's","It","This","As","Cool!","I","Awesome,","Using","string/replace","Thanks","```clojure","(and","(=","(=","(subs","```","I've","Thanks","This","Thanks","I'm","Thank","Woops,","This","New","The","You","```clojure","(ns","(:use","(defn","(-\u003e","(lower-case)","(split","(frequencies)))","```","Line","Line","```clojure","(ns","(:use","```","Line","```clojure","(defn","(-\u003e","lower-case","(split","frequencies))","```","If","Great!","line","line","line","line","I","Line","Line","Line","It","```clojure","(defn","(defn","(and","(=","```","If","```clojure","(ns","(:use","```","Great","Your","```clojure","(defn","(=","...","(defn","(cond","...","```","WHOA!","I","I","You","I","Interesting","Could","As","Very","I'm","Line","Thanks","Clojure","This","I've","Argh,","This","I've","###","-","Learned","You","```clojure","(ns","(:require","```","Where","```clojure","(str/capitalize","```","Nice","Duly","```","(ns","(defn","(cond","(blank?","(and","(=",":else","```","Wasn't","```","(assert","```","oops,","A","I","I","[1]:","This","I","Re-write","In","```clojure","(defn","{:pre",":post","function","```","If","The","Your","[1]:","There","It","And","[1]:","`(def","That","Awesome!","I","You're","However","Using","While","But","I","```clojure","(let","(assert","(apply","```","Still","```clojure","(defn",";","{:pre",";","(apply","(map","{\\A","message)))","```","What","[1]:","Line","Than","It","[1]:","You","[1]:","Oh,","Ah,","I'd","Or","Concise","To","I","@kaden,","@kaden,","Thank","The","You","```clojure","(defn","(letfn","(anagram?","(not=","(filter","````","Neat,","Another","```clojure","(filter","```","And","You","There","Thank","While","The","```","(=","```","Thank","Curiously","Your","That","This","So,","I","Were","Currently","Made","This","*","*","*","The","The","silence?","Awesome.","\u003e","I","```","java.lang.RuntimeException:","```","Haha,","I","How","I","```","(ns","(:use",")","```","I","sweet!","One","Using","Whenever","Also,","Quite","Alternatively,","but","I","I","I","Right","I","This","I","I","`(ns","On","I","1.","2.","1.","That","2.","thanks","The","One","That's","Thank","I","Instead","I","As","Since","Relying","If","As","9:","Or","15:","Implementation","(some","It's","My","@ashleigh","Is","@maud","(condp","shouting?","silence?","question?","\"Whatever.\")","One","I","Thanks!","Thank","`:use`","Can","PS:","@alexandre","I","I","@darron","Thanks","@rosella","I","@verlie","You","also,","There","Also","Yeah,","Your","There","btw,","normalise","You","Looks","Overall,","```clojure","(defn","(letfn","(or","(and","(not","```","Macros","def","Example:","```","user=\u003e","#_=\u003e","#'user/scope-test","user=\u003e","#'user/my-value","user=\u003e","1","user=\u003e","#_=\u003e","#'user/scope-test","user=\u003e","nil","user=\u003e","CompilerException","```","The","Rather","I","I","The","I","You","This","I","I","While","Have","I","Ug.","Good","Another","Looks","This","I'm","@freida","I","Good","Using","Not","The","This","I","@pearl","Thanks","This","sort-by,","I","Thank","Rather","I","Ha!","Added","In","That","I","The","I","Fixed","This","Renamed","Thanks,","A","The","Converted","Another","(def","You","Took","1.","2.","4.","5.","6.","You","Items","Item","Thanks.","Addressed","You","In","my","next","TIL:","new","Personally,","(-\u003e","sanitize-number","drop-us-prefix","validate-length)","Returning","Regarding","(defn","\"Does","[x]","(some-body","Nice","Not","I","I","[1]","As","Incorporated","Simplified","By","Per","That's","Yep","Fixed","Per","For","Another","`defn-`","Your","You","Have","There's","I","The","Although","`let`","Right","Good","No","Clojure","user=\u003e","\"\"","\"xyz\"","\"\"","user=\u003e","(\"\"","You","In","Looks","This","I","bob=\u003e","false","In","clojure.string/blank?","Nice","Algorithm","(assoc","Using","using","Thanks.","And","there","Please","Looks","Possibly","I","Thanks","I","It","I","I","Clojure","Three","Also","Also","clojure.string","You","Likewise,","Check","Also,","Check","Also,","```","user=\u003e",":yes","```","Take","Also,","```","user=\u003e",":true","```","Any","In","This","I'm","I'm","I","One","(defn-","(if-let","rchar","(throw","Just","Awesome!","blcooley's","```clojure","(defn-","(cond","(some","(=",":else","````","Also","i","Yeah,","I","Yes,","Still","Thanks","Thank","I","my","So","perhaps","You","There's","Fixed","Even","Are","Take","Thank","holy","Macro","Tried","`zero?`","`cond`","Your","Nice","The","The","It","I","Converted","Since","The","Check","Rather","One","e.g.","As","Good","`interleave`","It's","I","For","With","(-\u003eRobot","`total`","You","Overall","`(+","Multiple","e.g.:","`(doseq","Why","If","It","First","The","I","The","`join","There","Looks","Map","You","`total`","Subtracting","Isn't","In","In","The","You","Other","I","Looks","I","You","It's","`(not","The","Overall","`(not","`(=","It's","Looks","I","`(not","Good","Strings","You","When","When","Thanks","I","Overall","`re-find`","You","This","If","Keep","One","Characters","`join","When","Looks","You","A","`re-find`","There","This","I've","This","`(fn","You","This","You","There's","@wilfred","Think","thanks","I","changed","Thanks","My","I","Good","It's","It","Overall","just","you","Another","`(defn","It","I","There","Strings","Interesting","Calling","There's","Uses","For","`matches","`[response","Those","Overall","Since","Calling","The","I'm","This","`if-not","might","only","I","TIL:","mine","I","In","For","`(defn","`(def","So","`(defn-","You","`(def","Hope","This","Style","Code","I'm","From:","\"Prefer","`:require","Looks","You","This","It's","Calling","Overall","Looks","It","`:require","I","You","Looks","`(range","The","Calling","Good","Looks","In","You","This","My","If","Geofflane,","Thank","It","I","In","is","This","You","It's","I'm","I","I","Thanks","cleaned","i'm","For","(defn","lower-case","(defn","(lower-case","I","After","Hope","@bethany,","My","@ramona","It's","The","@tracy,","@tracy,","nice.","Use","Thanks","The","And","Use","Agreed,","Now","It's","Characters","You","Strings","`join","You","I","Thank","What","It","And","Cheers.","GregorianCalendar","But","I","I","However,","By","And","Just","Nice","I","Could","It","Very","Rather","```","(defn","(def","(bar",";","@velma","I","Questions:","*","*","It's","nice","i","Thanks","Sorry","sgrimm,","twillis,","PS:","If","```","(rand-nth","```","Not","I","However,","Nice","I've","Good","Strings","`doall`","If","While","@jaquan","Using","There","Overall","Looks","I","Your","Thx","Overall","Using","`range`","Thanks,","This","The","You","Great","Good","If","`(defn-","`sorted`","That's","I","In","It","Nested","I","upper-case","There's","Thank","In","I'd","Yes,","```","ERROR","expected:","actual:","(valid-nucleotides?","at","```","take","@dylan","Thinking","I'd","@lavada","Thanks","`cond`","You","`(seq","Keep","You","(defn-","(or","This","Also,","(#{\\C","is","(some","Just","user\u003e","\"Elapsed","nil","user\u003e","\"Elapsed","nil","Obviously","Not","@martin","Changed","Thanks","`sort`","You","I","I'm","Minor","I","`(take","It","Thanks!","I","The","`(and","(not","I","And","I","Look","I","If","`(not","In","`question`","`silence`","If","With","changed","pretty","Thanks,","@hazel","Ahh,","I","`if`","`(if","`(-","Pre-calculating","And","But","@alysha","For","Clojure","My","In","Terminating","I","A","Characters","Strings","Maps","Another","Good","On","@jaylen,","@myrtie","@kyle-choi","Looks","You","`(def","If","When","e.g.","Similarly","Switched","Hate","3,","As","Overall","As","`if`","The","Overall","You","`pair-up`","There","Thanks","You","There","Wow,","Thank","I","#1:","#2:","so","@taryn,","Thank","I","Cheers","Below","-----","A","Characters","Strings","Maps","Another","----","Thank","I","One","Switched","dont","not","I","Basically","Could","using","I","though","the","The","As","It's","Next","Then","Hint","It","`(-","`(=","Way","`(-","`(=","`nucleotide-counts`","I","If","One","Thanks","Looks","One","Much","Take","`blank?`","`(re-find","I","@connie,","@alvena","Thanks,","removed","with","removed","replaced","moved","((frequencies","Looks","Extracting","good","I","It","At","Also,","I","It","I","That's","Didn't","Great","Your","I'm","To","I","My","I","If","For","-","```clojure","(dna-to-rna-lut","```","-","As","It's","`generate-name`","`swap!`","This","One","In","I","The","Thanks","Putting","```clojure","(-\u003e\u003e","(remove","(reduce","```","Overall","I","First","It's","\"I","It","Using","Extracting","@dylan","@sydney","A","Overall,","You","I'm","I'm","Awesome!","Aye,","I","In","My","I","Though","yep","the","i","(join","how","Definitely","Cheers","much","I","I'd","The","Looks","You","I","It","You","Relying","I","Looks","That's","From","\u003e","`(some","The","`Sets`","Yeah,","@marlin","I","@burley","Looks","I","The","You","While","`name`","That","Thanks!","I","@kirk","I","Is","You","You","In","Looks","You","Looks","`require`","There","`(-","`","Overall","You","The","You","Nil","You","In","Good","There","It's","`upper-cased-and-letter?`","It","You","Thank","I","@cecilia:","Yes,","```no-quiet?```","I'm","```clojure","FAIL","expected:","actual:","FAIL","expected:","actual:","FAIL","expected:","actual:","FAIL","expected:","actual:","FAIL","expected:","actual:","FAIL","expected:","actual:","FAIL","expected:","actual:","FAIL","expected:","actual:","```","I","The","shouting","You","In","Thanks","Intent","noise","I","Thanks","Once","I","You","Trimming","The","Looking","There","Firstly,","Secondly,","Hi","Revision","Overall","You","I","Your","The","```clojure","([\"apple\"","```","And","@dawn,","I","Take","The","You","It's","Some","I","String","You","Yeah,","Couple","````clojure","(-\u003e\u003e","reverse","...)","````","could","````clojure","(-\u003e\u003e","...)","`````","And","I","Strings","Your","I","As","Check","You","`(int","You","range","Your","@lilian","I","@enola,","I","Got","Thanks","I","@lura","@mary","Can","Hi,","looks","*","*","*","My","Hi,","You","(question?","I","@darien","As","Cheers","I","@adaline","Thank","I","there's","Ah,","made","Looks","Next","I","I","And","Hi,","you're","(could","I","yes","not","There","You","Also","Looks","Ah","look","This","I","I","Here's","You","~~~~","(=","~~~~","and","~~~~","(.endsWith","~~~~","In","Typically,","```clojure","(ns","(:require","```","If","```clojure","(ns","(:require","```","Then","Since","I","There's","```clojure","(defn","(=","```","This","`(fn","I'm","As","Additionally,","Finally,","I","Great","Latest","That","The","`(:require","then","`(str/trim`","You","http://clojuredocs.org/clojure_core/1.2.0/clojure.core/require","Your","The","I","I","The","```clojure","(-\u003e\u003e","(split","(split","(partition","...)","```","First,","```clojure","(-\u003e\u003e","(partition","...",")","```","Then","`matching?`","```clojure","(defn","(=","```","your","your","The","It","```clojure","(defn-","(-\u003e\u003e","```","This","```clojure","(defn","[raw_string]","(-\u003e\u003e","(drop_and_show","(defn","[phone_number]","(format","(drop_and_show","(drop_and_show","```","Oh,","For","Your","Hi","thanks","If","a","Cheers.","I","So","```","(deftest","(is","```","Very","Whoops...","Yes,","`yell?`","It","You","I","A","Also","Check","Also,","Looks","Very","1.","2.","3.","Lower-case","I","I","Thanks","Removes","Checking","Have","I","I","Really","I","`shouting?`","My","This","I","The","Try","Tried","Is","The","Oh","It's","Since","The","Simplified","Nice.","OK","If","Why","Generally","...but","So","```clojure","(let","(filter","(group-by","(\u003e","```","In","In","`((apply","```clojure","(defn","(first","```","But","```clojure","(cond","(is-question?","(is-yelling?","```","Is","`rnas`","Are","That's","Is","1.","2.","The","It","In","For","The","@milo","1.","2.","Next","Thanks","Event","Also,","Assertion","Even","This","I","The","Alright","Here's","...","(def","(defn-","[nucleotide]","{:pre",";;",")","If","Thanks","Wow,","Just","Also","Ok,","Thanks","You","It","I","Attempt","A","As","-","-","-","I","Thanks","*","*","@noble","I'm","Please","Hi","Although","What","(get-last-generated-name","(swap!","Of","Anyway,","You","`#(anagram","Try","As","All","Code","Nice,","To","(ns","(:refer-clojure","`map`","@linnie","@alvena","Thanks","`(into","Thanks,","@dena","Looks","OK","@isaiah","Thanks","@rose","IMHO","Good","One","One","Good","I","Looking","No","re-seq","1.","(apply","You","2.","I","I","find-equals","Simplifies","Found","into","I","First","If","Nice","Could","*","*","Ran","6","Using","I","Notice","If","-","-","-","Can","simplified","Oh,","There's","Hi,","Thanks","Very","As","Cheers,","__","s","trying","The","Didn't","Unfortunately,","Instead,","simplified","using","There's","You","adds","I","It","Hi","Thanks","This","+","+","+","There's","Those","Thanks.","You","There","My","`-\u003ewords`","i","You","```clojure","(def","[chr]","(some","(nucleotide?","```","Any","Also","check","Looks","Very","Is","In","You","e.g.","```clojure","(map",";","```","This","```clojure","(map",";","```","Using","[identity]:","```clojure","(filter",";","```","And","```clojure","(count",";","```","Throwing","```clojure","(count",";","```","Thanks","In","Similarly,","In","If","Edit:","In","Thanks","I","Overriding","The","Thanks","Overall,","+","+","Thanks","This","No","http://exercism.io/teams/bangalore-clj","The","```","(def","```","Also,","Looks","Yup.","Exactly.","Thanks","Re:","Since","Just","[1]","The","May","Like","A","So,","For","The","Thanks","Ha","+","+","+","I","You","```clojure","(count","```","(apologies","@jesus,","Since","This","I","This","I","I","`clojure.string/trim`","s/sentense/sentence/","Also,","I","In","Updated","*","*","I","I'm","Super.","Updated","Your","If","I","Interesting","Moving","I","I","The","@owen","I'm","Small","Checkout","Not","Looks","In","I'm","I","To","After","This","After","I","Looks","-","-","-","Straight","As","With","This","By","The","```","(((((respondIf","(respondIf","(respondIf","(respondIf",")","```","So","The","```","(cond","(=",":else","```","can","Clojure","For","The","This","I","As","Beyond","The","Originally","(This","Well,","```","silent?","shouting?","questioning?","```","Looks","Please","Was","Really","Your","In","That","I","\"Great\"","A","(`=","Thoughts?","(for","Is","`(filter","For","Looks","Think","I","@cierra","So,","One","I","1.","2.","Within","In","Within","There","I","@lloyd","1)","2)",":D","This","I","This","I'm","This","I","Generally","Also","Otherwise","Looks","As","Also","Nice","Cleaning","You","I","Your","A","This","Perhaps","not","steps","angarams-for","an","character","The","Why'd","Also,","Nice","Great","That","Good","One","This","1.","2.","3.","I","I","Using","I","Looking","I","I'm","Now","One","Looks","Good","1.","2.","Someone","Two","1.","2.","I","The","Looks","You","See","Looks","I","```clojure","(filter","```","The","*","*","*","*","*","Thanks","I","@johnny","So","Thanks","I've","Right,","I","You've","http://clojuredocs.org/clojure_core/1.2.0/clojure.core/cond","I","Looks","Strictly","This","I","\"SAT","or","That's","you","```","(case","0","1","2","\"...\")","```","Since","The","Smaller","I","Nice","re-seq","Your","Man,","Also,","Thank","This","...right?","Fine.","This","A","It","I","I","Replaced","Renamed","I","Added","See","But","I","The","This","Very","That's","May","I","But","Very","One","Directly","Two","1.","2.","I","You","```clojure","(defn","(.endsWith","```","instead","Other","Thanks","Performance","I","It","I'm","Apart","A","+1","Personally,","I","Also,","Very","I","Since","Also,","+1","Does","Looks","I","Looks","If","Nice","Nice","+1","In","Also,","You","For","I","+1","It's","I","Nice","+1","Interestingly,","Once","Good","I","You","Unsure","@katrine","Why","I","Or","Thanks,","..","Made","Oh,","Good","I'm","`use`","1.","(ns","(:require","2.","3.","This","Somehow","I","'sorted'","Learned","You","I","```clojure","(-\u003e\u003e","(map","(into","```","There's","Looks","Can","Also,","Nice.","I","True,","@emmett,","Once","I","```clojure","(defn","([start","([start]","```","But","Thanks","Is","I","Apart","+1","Nice","I'd","Great","I","There","Also,","Other","If","Since","Thanks","So","Personally,","I","Line","There","Cool.","My","I","Nice","Two","-","-","Great","The","Good","The","First,","```clojure","(defn","(cond",":else",")",")","```","From","Nice.","For","After","\u003ccode\u003e(ns","Nice.","Other","@macy","This","I","The","I","Concerning","```clojure","(let","(println","(println","```","(lines","Decided","Is","Any","You","Maybe","ok,","I","@walter,","The","I","I","Also,","I","You","The","Yes,","I","```clojure","(ns","(require","```","Usages","```clojure","(str/trim","```","Nice,","I","Since","Line","Line","```clojure","(defn","(find-letters","```","But","Line","So,","Nice","Regarding","+1","+1","I","Very","You","Very","Line","I'd","`(not","You","Line","Nice","Overall,","Another","@tre","I'm","```","(defn","(let","words","(-\u003e","(#(map","(frequencies)","(dissoc","```","I'm","Great","(note","I","This","Need","Wonder","In","(-\u003e","frequencies","(dissoc","Sometimes","(as-\u003e","(map","(frequencies","(dissoc","Or...","It","Great","I","And,","I","Try","Mr","Line","I","In","+1","I","```","(defn","(let","normalized-other","(and","(not=","(=","(defn","(filter","```","The","Weird,","`CompilerException","compiling:([...]\\gigasecond.clj:3:36)`","I","```clojure","(ns","(:import","[java.util.Date])","```","and","Why","hm),","You","didn't","This","*","*","@aisha","Like","I'm","(def","(def","(def","(def","(def","(def","(def","There","More","Playing","All","Hello","I","I","I'd","Best","Manuel","This","My","Assuming","Wow!","I","I","how","Hello","Thank","Best","Manuel","`transform`","I","```","(defn-","(let","(str","```","I'd","I'd","I","Overall","PS.","Hello","I","Also","Best","Manuel","Agreed.","I","Using","I","`(-\u003e","Tiny","I","Enumerating","Obviously","You","In","Would","You're","Yes","Great","Very","Shortest","Looks","A","+1","Great","I","Short,","It","No","The","Perfect","In","(cond","(yell?","(question?",":else","This","Compact","Separate","(anagram?)","According","`(is","How","I","````","(defn","\"Same","(and","(=","````","Haha,","Fair","The","The","I'm","Ah,","My","Hey","That's","I","The","thanks","You","I","In","No,","You","````","(ns","(require","````","So","I","I","I","You","``````","(-\u003e\u003e","(map","(s/join","```````","The","Why","If","It's","I'm","Instead","`````","(-\u003e\u003e","(map","(merge))","`````","I","And","\"Nitpick\"","This","This","Let's","A","Why","You","use","You","I","I","Agreed.","I'll","I","For","`````","(filter","`````","which","In","`````","Words","[\"ACCAGGG\"","Map","(true","Filter","(false","Count","2","`````","Of","Thanks!","Haha,","Have","Woops,","You've","I","Line","+1","Could","Ah,","To","I'm","But","`````","(for","b","(*","=\u003e","Oh,","I","Lines","I","Your","Personally","I","Line","Silly","\\*investigates...\\*","Ok","I","Lines","Fixed","Obviously","Nice","FYI,","made","Heh,","Take","Very","\u003e","I","\u003e","Sorry,","\u003e","Thanks,","I","I'm","Clojure","I","Ok,","Wow,","Haha,","I","Because","Once","I","@herman:","@austen","http://clojuredocs.org/quickref/Clojure%20Core","the","Here","http://clojure.org/cheatsheet","http://grimoire.arrdem.com/","Personally","It's","There","Took","I've","more","I've","I'm","If","Ever","Which","Thank","rewrote","Also,","now","also","zipmap,","Hey","You","using","Now","Thanks","@stefan","@toni","Wow,","I'd","aaaa","Looks","\u003e","Can","You're","I'm","Other","OK,","Now","Thanks","See","Hm,","Surely","Also,","Automated","Do","`intern`","I","(One,",":-)","After","Simplified","Not","Using","Line","I","I","Macros","`select`","I","I","Thanks","I","You","Hi","(I","Unless","line","line","line","line","line","Also,","My","I","I","Looks","See","Sets","For","There's","Strings","Welcome","`use`","What","@chelsie","1.","2.","3.","4.","The","I'm","Making","clojure.string","Thanks","Using","@jess","I","Thanks","1.","2.","4.","`(let","parts","(frequencies","Improved","Just","`intern`...","Oh,","I","`````","(defn","(-\u003e\u003e","(iterate","(map","`````","And","I","1.","2.","3.","Thanks","Line","+1","I","fyi","I","I","I","I","I","@waylon","I","Qualifying","At","I","Is","In","Thanks.","I've","That's","this","You're","Specifically,","```","(def","(one-to-four","(one-to-four","(def","(num-map","(num-map","```","I","Now,","Much","As","No","Added","This","So","As","Lines","Looks","The","Neither","Hi","Why","I","Good","I","Overall","The","How","```clojure","(let","upper?","(upper?",";;","```","This","Like","Instead","```clojure","(:require","```","In","Further,","Hi","I","You","I","In","What","You're","Thanks","Best","I'm","Cool","First","I'm","Thanks","The","Otherwise","As","You","I","It's","Accidentally","well...","syntax","```clojure","(defn","```","The","For","Clojure","Another","```","(defn","(let","(or","(and","```","I","I","http://exercism.io/submissions/3de5593c27a09bf1c2fa73f8","An","For","The","The","On","```","FAIL","expected:","actual:","```","**Disclaimer:**","The","I","I","@gisselle","Nice.","Look","(last","Good","I'm","@ruth","@anjali","@annalise","If","So","```bash","cd","git","git","git","```","and","```bash","rm","~/.local/bin/exercism","git","```","@darius","Looks","`(not","Is","You","Love","You","I'm","`action`","I","I","This","How","The","I","Hey,","You","I","I'm","I","The","For","And","And","I","I'm","A","1.","2.","3.","4.","Nice","The","Discovered","It","This","I","I","@mustafa","There","Great!","Now","P.S.","Pretty","I","But","First","And","In","However","Yes,","I","Hey","Could","Thanks","Could","Just","I","This","I","Thanks,","1.","2.","Wouldn't","If","P.S.","Can","@matilde","I","Thanks,","What","`(=","Though","I","You","(ends-with-questionmark?","with","(.endsWith","-","-","-","-","-","I","Instead","@rosemarie","@gaetano","Another","Take","@brianne","I","It","Very","Thanks","Best","Instead","It","clojure.string/blank?","\\W","I'll","Thanks!","You","Interesting","I","@alycia,","Looks","1.","2.","The","I","The","Did","Good","my","Instead","I","I","(first","user:","(first-str","user:","Which","Oh","On","Looks","Looks","@garland","For","Seems","Well,","I","I","It's","Clojure,","yeah,","`is-shouting-char`","Hey,","comments","functions","(defn","Clojure","Hope","Yeah,","First","Try","You","Overall,","This","````clojure","(defn","\"Generates","the","[stmt]","(cond","(silence?","(shouting?","(question?",":else","````","versus","````clojure","(defn","\"Generates","the","[stmt]","(cond","(silence?","(question?","(shouting?",":else","````","This","I","Thanks!","This","````clojure","(defn","[s]","(cond","(string/blank?","(all-upper-case?","(ends-with-q?",":else","````","versus","````clojure","(defn","[s]","(cond","(string/blank?","(ends-with-q?","(all-upper-case?",":else","````","Hey,","Bit","The","Ooh,","Just","You","(do","(assert","nuc-comp)","instead","Edit:","Seems","I'm","\"CGTAX\",","*","*","*","In","The","In","Also,","Thank","Could","Mostly","I","Testing","Hmm.","Considered","I","Looking","Shouts","For","I","You","Just","Is","Tried","Much","I'm","Really","and","Gonna","Yes,","Another","Thanks","Finally","One","What","Well,","Having","Not","Running","The","(Note","I","But","That","\u003e","In","I","`(require)`","Maps","Strings","I","Thanks","In","##","Concise.","##","Take","```clj","(ns","(:require","```","Then","```clj","...","(cond","(blank?","...","```","##","Functions","Inside","##","Inside","```clj","(when","(every?","```","If","Secondly,","```clj","(when","(every?","```","We","```clj","(when-let","(every?","```","##","With","```clj","(ns","(:require","(defn","(when-let","(every?","(defn","(cond","(blank?","(all-uppercase?","(=",":else","```","`clojure.string/join`","Maybe","There's","`every-pred`","Decided","Oops,","Ignore","Dat","Just","```clojure","(defn","{:pre","(apply","```","It","There","```clojure","(defn","```","@cortez","You","Did","`(=","The","@jeramie","There's","`every-pred`","Using","Instead","All","My","I've","Haskell","Oh!","EDIT:","```","(do","nuc-comp)","```","I","I","Thanks","After","@trenton","`get`","I'm","I","You","I","Thanks!","One","```","(def","```","However,","The","You","A","I","Nice!","Thanks","Followed","Two","This","Dang,","One","Thanks","-","-","-","-","-","```Clojure","(defn","(-\u003e\u003e","(map","(apply","```",":refer","This","This","I","I","`(clojure.string/join","Interesting.","`not=`","Now","That","(Anyway,","yelling?","The","You","`(str","I'm","There's","How","You're","What","You're","It","I","Is","I","The","`letters-match?`","(http://en.wikipedia.org/wiki/Alphagram)","`same-word?`","`partial`","What","`(:use`","Passing","I","I","@nya","The","I","*","*","I","I","I'm","I","@audie","I","I","I","Yeah","I","`cond`","`(=","`create`","Functions","Really","Anonymous","Good","To","You","As","I","That","My","I","```","(get","```","I","I","Looking","Also","Tightened","@tevin","You","A","You","```clojure","(get-or-fail","(if-let","v","(thow","(get-or-fail","```","Not","Thanks","Should","@cristian","Once","@prudence","@preston","You're","@lyric","Based","@kristy","Sets","@houston","You","Maybe","Looks","Awesome!","If","https://github.com/clojure/clojure/blob/clojure-1.6.0/src/clj/clojure/core.clj#L6617","It's","Good","@burley","@rolando","`refer`ed","get","Nice","assert","line","`(assert","Check","You","If","`#(dna-to-rna","This","`(range","You","If","@narciso","@aric","I","```(or","However,","You","Wow,","It's","The","Also,","A","Until","`nucleotide-counts`","`frequencies`","I","I","Seems","e.g.","Yep,","Thanks!","For","```clojure","(defn","{:pre","(other-forms-here))","```","Makes","First,","Still,","And","Simple","@bridget","Still","Naming","Maybe","Might","@paris","I","@otis","The","I"]},{"Key":" What","Fragments":["would","would","do","about","do","about","about","about","do","if","if","do","about","is","do","happens","@anjali","if","about","has","is","is","are","about","about","to","about","about","does","about","that","I","you","if","I","would","if","would","if"]},{"Key":"What would","Fragments":["happen","you","you","a","you","the"]},{"Key":"would happen","Fragments":["if","if","if","if","if","if"]},{"Key":"happen if","Fragments":["I","the","none","the","an","the"]},{"Key":"if I","Fragments":["asked","should","like","asked","have","had","could","hand","could","do","get","could","input","were","can","were","want","just","could","were","was","had","could","can","could","could","have","had"]},{"Key":"I asked","Fragments":["Bob","Bob,"]},{"Key":"asked Bob","Fragments":["a"]},{"Key":"Bob a","Fragments":["different"]},{"Key":"a different","Fragments":["question,","regex","function","way.","line?","definition","level","one","approach","way","abstraction,","order","approach.","email","regex","function","conditional","way","regex","choice","choice","binding","approach:","approach:","\"anagram","one.","way","regex"]},{"Key":"different question,","Fragments":["or"]},{"Key":"question, or","Fragments":["yelled","shouting,","shouting,"]},{"Key":"or yelled","Fragments":["a"]},{"Key":"yelled a","Fragments":["statement?"]},{"Key":" aaaand","Fragments":["I"]},{"Key":"aaaand I","Fragments":["did"]},{"Key":"I did","Fragments":["it,","not","the","not","see","not","something","first","use","it","have","a","the","a","the","that","some","consider","this","everything","for","two","not","not","notice,","the","it.","it","that","this","but","in","this",":)","some","consider","this","not,","forget","combine","not","the","find","some","find","to","that","without","notice","that","not","not","something","it","not"]},{"Key":"did it,","Fragments":["and"]},{"Key":"it, and","Fragments":["it","I","also","only"]},{"Key":"and it","Fragments":["went","is","was","was","can","doesn't","reminds","may","will","would","took","works","even","doesn't","doesn't","your","will","would","seems","was","would","didn't","being","took","should","makes"]},{"Key":"it went","Fragments":["to"]},{"Key":"went to","Fragments":["the","[`map`](http://clojuredocs.org/clojure_core/clojure.core/map),","the"]},{"Key":"to the","Fragments":["RNA","spec.","string","docs","next","functions","characters?","next","next","symbols","line","Java","\"T\"","current","Java","responses,","point.","`anagram?`","binding","nucleotide","implementor).","question","Java","word","fact","Ruby","reader","definitive","code's","string","symbols","whole","string","store","store...\".","Java","bare","point.","problem","reasons","first","`nil-to-zero`-function.","surrounding","`\\T`","cases","functions","point.","mystery","opposite","first","end,","strangeness","`ns`","test","top","string","end","`shouting?`","literal","literal\"","end","cond).","same","same","`defn`","conclusion","amount","shout","conditionals?","next","macro","`response-for`","validation.","style","function","regular","language","one","words","code.","sort","sorted","assert","top","full","pipeline.","mechanics","following","reduce.","tokenize","standard.","to-seq.","parameter:","regular","tests),","namespace","next","use","`:use`","reader","mathematical","other","two","set","slightly","original","given","examples","test","`into`","test","problem.","README.","function","db.","`set`","use","definition","result","map","syntax,","readability","readability","new","bob","text","result","point!","point,","99","one","same","other","language","uppercased","Bob","threading","first","three",":private","problem","-\u003e","next","input.","function/method","spec","given","@vince","shouts?","correct","whole","function.","exercises","exercises.","`response-matches`","map","bob-question","caller","name,","`ns`","exercise","docs.","reader","smallest"]},{"Key":"the RNA","Fragments":["transcription","and","strand."]},{"Key":"RNA transcription","Fragments":["assignment."]},{"Key":"transcription assignment.","Fragments":["How"]},{"Key":"assignment. How","Fragments":["do"]},{"Key":"How do","Fragments":["we","I","we","you","you","you"]},{"Key":"do we","Fragments":["fix?","address"]},{"Key":" interesting,","Fragments":["yes,"]},{"Key":"interesting, yes,","Fragments":["I'll"]},{"Key":"yes, I'll","Fragments":["do"]},{"Key":"I'll do","Fragments":["that.","that."]},{"Key":" Thanks,","Fragments":["that","I","that's","updating.","I","I","arr-ee,","didn't","you","good","I","that","@jayson.","I","@rosetta.","soapie.","soapie,","resubmitted","I'm","I","I","that","I","I","I","will"]},{"Key":"Thanks, that","Fragments":["looks","makes","makes"]},{"Key":"that looks","Fragments":["so","much","good.","nice","much","good.","really","up","much"]},{"Key":"looks so","Fragments":["much","wrong"]},{"Key":"so much","Fragments":["simpler!","about","of","royal","nicer","for","simpler","about","for","easier","more","massaged"]},{"Key":" Also","Fragments":["for","I'm","maybe","consider","putting","I","there","nice","check","purists","consider","-","think","I","feels","there","nesting","a","I","on","replaced","there","you","I","creating","now"]},{"Key":"Also for","Fragments":["completely"]},{"Key":"for completely","Fragments":["missing"]},{"Key":"completely missing","Fragments":["the"]},{"Key":"missing the","Fragments":["README","point?"]},{"Key":"the README","Fragments":["file,","/","(\"yelling\"),","and","so","again.","and"]},{"Key":"README file,","Fragments":["ha."]},{"Key":" I","Fragments":["like","see","see","really","see","think","thought","think","like","like","thought","admit","will","can","like","think","like","think","think","do","don't","agree","had","think","like","would","think","like","like","had","know","think","love","don't","have","like","saw","like","think","guess","don't","would","was","would","had","see","will","didn't","think","*love*","seem","do","think","don't","had","think","think","agree,","would","fixed","don't","will","bet","agree","disagree","did","hope","disagree","don't","think","don't","updated","originally","think","like","think","had't","wish","think","would","prefer","like","added","think","fixed","dig","would","think","like","didn't","thought","think","agree","feel","wonder","think","think","think","made","wonder","added","could,","don’t","wasn't","tried","have","think","don't","would","have","second","suggest","didn't","like","was","think","don't","disagree","went","could","tried","was","would","would","agree","like","also","know","wonder","think","don't","like","haven't","usually","think","like","think","think","was","got","guess","could","like","agree.","much","wonder","personally","think","had","can't","do","think","like","don't","would","agree","find","just","have,","just","am","look","really","think","agree","see.","think,","think","really","think","have.","don't","am","do","think","really","initially","like","think","keep","restrained","guess","agree","wonder","think","know","like","would","have","don´t","thought","wonder","would","find","did","feel","do","like","will","really","wonder","admire","find","got","would","tried","returned","think","extracted","got","don't","assume","guess","agree","think","think","will","agree","had","wouldn't","don't","don't","think","lurk","think","got","don't","would","was","worry","know","gave","got","don't","also","think","had","think","thing","don't","agree","appreciate","think","found","was","like","like","find","think","considered","usually","think","think","think","also","like","would","think","like","like","think","like","like","like","not","think","agree","like","considered","am","haven't","love","always","assume","am","struggled","feel","would","like","have","found","wasn't","like","agree","can't","decided","think","chose","don't","like","don't","think","realize","also","also","like","don't","thought","don't","was","don't","think","think","might","was","kept","have","thought","submitted","don't","would","prefer","had","understand","guess","was","like","debated","actually","have","did","still","think","did:","was","definitely","can't","know!","am","really","think","like","like","initially","then","simplified","think","was","somehow","didn't","know","like","wasn't","am","could","could","actually","tried","actually","discovered","don't","am","haven't","decided","was","like","like","like","decided","also","think","think","didn't","still","think","added","agree","got","started","see","removed","haven't","like","find","see","like","only","don't","like","learned","don't","like","didn't","like","thought","really","seriously","don't","just","found","just","would","like","think","like","did","updated","went","think","did","need","love","very","like","expanded","don't","would","actually","realize","like","went","couldn't","like","tried","was","have","went","may","decided","also","like","have","also","also","think","don't","had","always","found","used","realize","can","like","disagree","like","briefly","included","am","reconsidered","reused","noticed","think","think","find","avoided","used","can","will","think","discovered","moved","like","like","tried","find","think","think","did","like","never","wonder","think","understand","wonder","have","also","fixed","wouldn't","think","find","was","think","am","don't","think","kind","think","think","like","wanted","love","am","think","would","normally","don't","will","have","know","forgot","think","think","like","love","think","keep","think","started","think","was","do","like","think","coded","like","find","made","could","agree","like","think","find","could","think","think","like","think","explicitly","totally","wasn't","think","like","try","like","spot","also","considered","believe","like","hope","guess","like","think","like","used","found","like","think","wanted","like","was","actually","don't","found","think","think","feel","like","like","guess","wish","like","thought","am","started","like","don't","like","like","was","am","am","spent","thought","love","feel","only","would","reused","considered","was","am","enjoyed","would","don't","didn't","wish","really","didn't","like","was","don't","really","get","should","should","like","don't","would","think","like","wonder","don't","think","think","don't","agree","tried","personally","could","like","wanted","don't","thought","like","guess","like","think","would","would","would","found","agree,","feel","love","don't","modified","really","would","like","could","like","found","think","talked","wanted","decided","don't","think","shall","wouldn't","don't","love","changed","think","shall","don't","don't","find","don't","would","agree,","didn't","just","have","just","really","must","chose","think","haven't","think","considered","used","wrote","also","should","find","like","think","don't","like","remembered","realized","had","like","like","did","think","started","wanted","commented","guess","totally","did","like","you","notice","love","also","tried","really","like","explained","explained","am","extracted","wanted","think","struggled","like","think","really","considered","like","have","built","disagree","have","don't","feel","think","originally","did","did","find","needed","hadn't","love","am","did","learned","like","like","find","wanted","could","decided","guess","know,","make","imported","replaced","used","also","had","was","can","was","used","actually","am","was","don't"]},{"Key":"I like","Fragments":["that","the","that.","that","it.","that","it.","how","it","the","your","the","this.","the","what","that.","that","the","them","it!","to","my","your","the","the","the","how","this.","that","the","that","the","it.","where","the","the","the","the","the","it.","it.","the","that","that","this","it.","how","in","that","this","it","the","version","your","your","that","the","the","that","the","the","the","how","what","how","having","to","that","the","this","that","it","how","the","`trim-stuff`,","how","the","how","your","the","it!","how","the","the","your","your","the","it!","how","it.","the","that","the","the","the","the","it","the","the","it.","that","practicing","the","it!","the","how","the","the","your","to","the","the","the","the","the","the","the","the","your","the","phrase.","your","the","the","this","short","the","that","how","the","what","more","it!","the","the","this","how","the","regexes","exercism:","your","it!","the","how","how","it!","how","the","the","how","your","splitting","-\u003e\u003e","to","yours","your","your","the","the","the","how","the","the","that","how","how","doing","the","the","where","the","that","that.","the"]},{"Key":"like that","Fragments":["idea.","could","this","the","was","better","on","a","you","very","in","using","you","the","which","you","you","if","you've","would","you","you","better","the","you","means","you","are","be","every","`robot-name`","this","it","you","you","a"]},{"Key":"that idea.","Fragments":["Instead"]},{"Key":"idea. Instead","Fragments":["of"]},{"Key":"Instead of","Fragments":["\"Whatever\",","\u003ccode\u003eletfn\u003c/code\u003e","using","resorting","nested","weeding","splitting","```(.trim","using","`question?","writing","passing","lifting","`(into","`(range","nested","replacing","converting","using","`(re-find","(not","`for`","(not","thinking","':use',","using","naming","using","directly","the"]},{"Key":"of \"Whatever\",","Fragments":["I'm"]},{"Key":"\"Whatever\", I'm","Fragments":["adding"]},{"Key":"I'm adding","Fragments":["another"]},{"Key":"adding another","Fragments":["response"]},{"Key":"another response","Fragments":["as"]},{"Key":"response as","Fragments":["the"]},{"Key":"as the","Fragments":["default.","default","start","other","other","first","other","end","others","private","function","input?","last","argument","regular","descriptions","return","new","technical","question","first","repeated","top","predicates","input","previous","previous","option","function","ns","alphagram","word","assumption","`and`)","function","filter","length","let.","results,","last","result","parameter","third","first","last","others?","unique","judge","first","[Readme](http://exercism.io/exercises/clojure/bob/readme)","initial","test","error."]},{"Key":" Sure","Fragments":["--","enough."]},{"Key":"Sure --","Fragments":["I"]},{"Key":"-- I","Fragments":["was","definitely","think","did","think","might","think","might","like","think","hadn't","can","like"]},{"Key":"I was","Fragments":["unsure","thinking","not","not","in","trying","going","reading","searching","wondering","actually","thinking","actually","going","just","thinking","hiding","very","using","looking","mostly","looking","trying","thinking","sleepy.","not","trying","getting","blinded","having","trying","getting","surprised","creating","wrong.","thinking","originally","also","wondering","trying","going","understanding","pleasantly","consciously","wondering","missing","seeing","so","thinking","divided","just","pleasantly","bewildered","working","interested","surprised","using","testing","calculating","handling","hoping","reading","able","going","mapping","inconsistent","typing","wrong","actually","using","pushed","supprized","separating","introducing","on","originally","to","just","working","talking","happy","a","immediately","surprised","doing","just","mainly","not","wondering","able","able","struggling","really","able","trying","able","looking","looking","disappointed","looking","supposed","also","able","proposing"]},{"Key":"was unsure","Fragments":["if"]},{"Key":"unsure if","Fragments":["people"]},{"Key":"if people","Fragments":["would"]},{"Key":"people would","Fragments":["want","argue"]},{"Key":"would want","Fragments":["a","to"]},{"Key":"want a","Fragments":["default","look"]},{"Key":"a default","Fragments":["case","response","response,","value","value","value,","value","condition","value","expression","value","value."]},{"Key":"default case","Fragments":["or","to","(\"Whatever.\")"]},{"Key":"case or","Fragments":["if","lower"]},{"Key":"or if","Fragments":["I","I","anyone","`bottles-of-beer`","I've"]},{"Key":"I should","Fragments":["stick","do","be","have","really","have","have","have","have","be","be","revisit","export","be","use","be","have","be","have","start","probably","have","have","possibly"]},{"Key":"should stick","Fragments":["strictly"]},{"Key":"stick strictly","Fragments":["to"]},{"Key":"strictly to","Fragments":["the"]},{"Key":"the spec.","Fragments":[":)","So"]},{"Key":" not","Fragments":["a","sure","sure","sure"]},{"Key":"not a","Fragments":["bad","function","true","moderator.","large","function","list","collision.","problem","fan","fan","fan","fan","bad","good","domain","fan","big","huge","clojurist(?)","native","consideration","big","fan","boolean","language","clojure","string)","big","big"]},{"Key":"a bad","Fragments":["idea.","joke)","thing,","idea,","thing","hint,","name"]},{"Key":"bad idea.","Fragments":["That'd"]},{"Key":"idea. That'd","Fragments":["take"]},{"Key":"That'd take","Fragments":["away"]},{"Key":"take away","Fragments":["the"]},{"Key":"away the","Fragments":["need"]},{"Key":"the need","Fragments":["for","to","for","be),","for","for","to","for","for","for","for","for","for","for","to","for","for"]},{"Key":"need for","Fragments":["the","strip","it,","wrapping","`ifnil?`.","some","a","comments.","such","the","`do`","special","a","second","\"not\".","filter-words","the","anonymous","the","the","the","`cond`","a","a","something","the","my"]},{"Key":"for the","Fragments":["comments,","other","feedback!","win!","feedback.","input!","reminder","feedback.","case","tip","approval!","tip.","tips,","conditional","`true`","example...","T","`:else`","feedback.","heads","advice,","general/default","ns","tip!","else","catch-all","shouting","feedback.","feedback.","feedback.","awesome","tip","latest","tip,","feedback.","final","intent","last","purposes","other","misleading","last","advice.","feedback!","last","feedback!","last","feedback.","feedback.","responses.","hints","function","tip.","pointer!","advice","T","hint","sake","\"replace","nucleotides","drill.","language,","pointer","nitpick,","tip","one","silent/shouting/question","sake","feedback.","sake","feedback.","constants","hint.","review","question?","clojure.string","whole","T?","next","future","anonymous","last","last","excellent","feedback.","responses.","first","pointers!","hint!","feedback!","long","suggestions,","digits.","feedback.","bit","process","feedback","same","first","tip,","info","enlightment,","reminder!","predicates","feedback.","T","points.","anagram","feedback.","first","size","help.","data","feedback.","`:require`","feedback!","question,","first","feedback.","last","advice.","conditions","express","other","else","suggestion","feedback!","reminder!","tips","gentle","greater","cond","two","string","response-for","feedback.","job","job,","feedback!","length","advice.","hint","use","feedback!","pointers;","trees","tips","feedback,","eyes,","prompt","lcase","comments.","time","feedback","delimiter)","awesome","feedback!","`string/split`","predicates","pointers.","inspiration!","`frequencies`","feedback","moment:","top","regular","link","sequences.","first","above","feedback","assertion?","help","`words`","\"frequencies\"","parameter","delay.","tip.","insight.","tip.","function","caller","split.","tips!","validation,","last","responses","feedback.","make-anagram-checker","comments,","counting.","suggestion,","feedback!","char","style","version","argument","comment,","information","`body`","first","tip","case","actual","feedback","`cond`","unwanted","map","nitpick.","tip.","hint.","feedback.","performance","split","kind","feedback,","translation.","question","feedback.","feedback","feedback!","`verse`","equality","\"thread","`verse`","golf","given","3","replace","pointer.","feedback,","purpose","comment,","supplied","tip!","extra","review.","`atleast-one-ascii?`","`ascii-letter?`","argument","suggestions.","shouting","fn","suggestion!","function","word","word,","verses","tests.","feedback.","previous","word","reader;","feedback!","comment.","review","'as-\u003e'","idea","usage","nit!","exercise.","empty","comment.","\"inner","recommendation!","feedback--I","given","tip.","verse","unique","first","recommendation.","meetup","suggestions,","constructive","feedback.","question","feedback.","nitpick","`merge-with`","same","regexp","task.","exact","explanation","instructions.","method.","final","checks","feedback.","Brave","Shouting!","input","detailed","Brave","purists!","`cond`","chain?","most","advice.","yelling","computer","blanks"]},{"Key":"the comments,","Fragments":["to","@george!"]},{"Key":"comments, to","Fragments":["some"]},{"Key":"to some","Fragments":["extent.","feedback","external","or"]},{"Key":" do","Fragments":["a","you"]},{"Key":"do a","Fragments":["exercism","\"simple\"","case","string","`cond`","check","`present?`","(not","replace.","literal","single","lot","get"]},{"Key":"a exercism","Fragments":["submit"]},{"Key":"exercism submit","Fragments":["bob.clj"]},{"Key":"submit bob.clj","Fragments":["again"]},{"Key":"bob.clj again","Fragments":["with"]},{"Key":"again with","Fragments":["the","your","the"]},{"Key":"with the","Fragments":["right","same","other","result","present","embedded","doc","namespace","?","appropriate","last","fact","rest","uracil.","context","one-character","same","last.","two","clojure.string/split","same","help","pipeline","pipeline","pipeline","shorthand","80","context","same","other","dry","first","Integer","`word`","program?","Clojure","zero","same","built-in","reversed","possibility","other","anonymous","most","more-readable","formatting.","display","method","repeated,","help","relative","pre-calculations?","same","variable","letters","original","change","regex","help","opening","library","help","same","usefulness","`(not","multimethod","results","argument","if-soup.","`replace`","partial","characters","pre","additional","markdown","empty","inbuilt","```join```?","addition","current","[`Classname.`","thread-last","rest","end","limited","way","regex","pre","year","-\u003e","current","infinite","protocol","value","guts","for","update-in","string","README.","part","wrong","tests...","following","rest,","derived","empty","explicit","decision.","negation","and'ed","same","particular","same","actual","last","existing","existing","expression","`ns`","(hopefully)","`is`","help","let","result.","same","string","`map`","`(or","letters","not-forceful-talking","Regex","result","`valid`","current","all","built","***shouting***","else","conversion","readable","instructions/test:","`-\u003e`","repetition,","default"]},{"Key":"the right","Fragments":["bob.clj","name","thing","solution","types","thing","track.","thing.","thing.(The","thing","paren.","paren","answer","answer","date.","word","direction","incantation.","construct.","direction.","balance...","direction","track","thing"]},{"Key":"right bob.clj","Fragments":["file,"]},{"Key":"bob.clj file,","Fragments":["it"]},{"Key":"file, it","Fragments":["overwrites"]},{"Key":"it overwrites","Fragments":["this"]},{"Key":"overwrites this","Fragments":["one."]},{"Key":"I see","Fragments":["now","now","and","it","something","the","people","the","this","I","your","that","that","also","you","that","I","here","more","now","what","that","people","that"]},{"Key":"see now","Fragments":["what","what","how"]},{"Key":"now what","Fragments":["is","is"]},{"Key":"what is","Fragments":["intended","intended","called","being","going","has","better)","the","```defn-```?","the","returned","idiomatic","going"]},{"Key":"is intended","Fragments":["by","by","to"]},{"Key":"intended by","Fragments":["the","the"]},{"Key":"by the","Fragments":["tests.","tests.","whole","tests,","keywords","trial-and-error","usage","community:","name).","tests:","tests","later","set","`put-name`.","time","given","user,","double","`response-for`","given","partial","score-word","cost","tests","test?","similar","tests","clearer","expression","macro.","way.","specification."]},{"Key":"the tests.","Fragments":["That's","That's","Ignore","If","Not","Some"]},{"Key":"tests. That's","Fragments":["what","what"]},{"Key":"That's what","Fragments":["I","I","I","I","I"]},{"Key":"what I","Fragments":["get","get","accept,","came","have","required.","have,","mentioned.","can","can","can","did","mean.","wanted.","need","thought","needed,","have","wanted","comprehend","ended","understand,","have","submitted.","did","submitted","get","wanted.","feel","have","was","did","would","coded","tried","kinda","was","needed","was"]},{"Key":"I get","Fragments":["for","for","your","back","the","(or","it...","for","the"]},{"Key":"get for","Fragments":["reading","reading","a","doing"]},{"Key":"for reading","Fragments":["them","them"]},{"Key":"reading them","Fragments":["literally","literally"]},{"Key":"them literally","Fragments":["in","in"]},{"Key":"literally in","Fragments":["the","the"]},{"Key":"in the","Fragments":["absence","absence","simplest","cond","ruby","JavaScript","4th","sequence","middle","string.","instructions;","cond","`ns`","ns","ns","limited","domain","ns","first","body","argument","clojure.string","function's","type","`bob`","two","regex.","ruby","code","`let`","provided","`ns`","repl,","ns","previous","let","string","list.","REPL.","realm","function?","functional","word-count","past","`format`","new","code","next","`ns`","scope","namespace","shape","way","body","same","Clojure","Clojure","bob","Clojure","string","future,","next","community,","private","`ns`","bob","Javascript","ns","`sing`","Javascript","same","REPL,","context","narrowest","end,","cond","code.","function","ass,","Python","`ns`","namespace","cond","specification","yell?","problem","list","way","domain.","domain","namespace","code.","beginning,","closure","README.","problem","back","`assoc`.","Maps","string","decompose","input","public","tests.","shortness","`not=`","terms","README","code.","README","names","regular","process.","Maps","feedback","order","last","Clojure","`ns`.","cond","habit","`(ns","ns","`ns`","ns","```is-empty?```","```is-empty?```","wild,","code","code","`question?`","new","code.","ns","correct","Clojure","`filter`","habit","elixir","phrase\"","end","function.","same","```clojure.string```","regular","context","current","form","scope","whole","REPL.","core","word;","cond","end,","method.","atom.","`is-yelling?`","implicit","various","implementation","style","```to-rna```","```to-rna```","second","second","```dna-nucleotide```","next","same","threading","system.","namespace,","point-free","`*-response`","`ns`","namespace","pre","future.","most","pre","return","community","context","example","repl","future.","cond","same","hope","style","function","REPL","map","use","longest","conditions","next","dna","post","places","bob","README.","category","main","regex.","list.","next","regular","split","function","map-index?","past,","past,","Readme.","wild","cond.","commented","same","second","difference.","case","`question?`","ns","requirements","next","middle","chain","next","defn.","clojure","scope","given","clojure.string","wild,","file.","community,","90's","same","record","last","let","right","ns","let","`response-for`","other","repl.","empty","cond","repl.","namespace","repl.","repl.","`dosync`","project.clj","namespace.","signature","repl.","reduce","wrong","same","test","set","set,","defn.","pretty-print","repl.","meantime","`let`","future.","reduction","spirit","sentiment","1,","verses.","end.","sequence,","map.","Repl.","match","functional","second","filter-words","process","`robot-name-generator`.","README...","string,","string.","next","second","regexes","last","`ns`","`seq`","next","else.","first","P","time","context","readme","core","function","code","list,","`atleast-one-ascii?`","Ruby","Clojure","meetup","mapping.","`asking?`","strings,","\"bonus","resulting","core","following","README).","README.","word","process","bob","'spec'","reduce","map's","order","\"cond","tests?)","tests,","way","planet","planet","`cond`","string?","case","REPL:","let","false","predicates","2nd","right","middle","Lisp","original","process.","first","argument","`dna`","Collections","spirit","code","top","second","methods","end.","tests","right","`meetup`","previous","`bob`","string","cond,","future.","request.","future","code","function","namespace.","`to-rna`","same.","transcribe","problem","implementation.","comments.","cond","`(:require)`","repl.","future,","language","word-count","case","domain","word-list","tests,","documentation.","`verse`","same","first","set.","same","filter","map.","core","`transcription-map`."]},{"Key":"the absence","Fragments":["of","of"]},{"Key":"absence of","Fragments":["any","any"]},{"Key":"of any","Fragments":["explication.","explication.","performance","other"]},{"Key":" Perhaps","Fragments":["you","wrapping","you","you","your","the"]},{"Key":"Perhaps you","Fragments":["should","could","could","could","could","could","could"]},{"Key":"you should","Fragments":["think","be","be","try","put","have","have","consider","consider","use","indent","look","consider","create","leave","use","try","check","put","prefer","look","check","prefer","replace","at","throw","return","think","look","go"]},{"Key":"should think","Fragments":["about","about"]},{"Key":"think about","Fragments":["what","adding","moving","using","it,","wrapping","things","it.","the","those","my","things","using","visibility","it.","it","diactrics.","(private)","a","it,","hiding","reusing","it","a","improving","which","how","extracting","reducing","using","letting","using","it","a","translate","adding","just","bringing","creating","splitting","trimming","mapping","filtering","a"]},{"Key":"about what","Fragments":["happens","transforming","it"]},{"Key":"what happens","Fragments":["for","if","if","if","if","if","if"]},{"Key":"happens for","Fragments":["more"]},{"Key":"for more","Fragments":["inputs","information:","than"]},{"Key":"more inputs","Fragments":["than"]},{"Key":"inputs than","Fragments":["just"]},{"Key":"than just","Fragments":["the","yourself","using","the","concise.","listing"]},{"Key":"just the","Fragments":["test","symbols","functions","lowercased","encoding","word","core","same","once).","API?","straight","first","call","name","other","functions"]},{"Key":"the test","Fragments":["cases","cases","instead.","suite.","functions","suite?)","for","suite?",".clj","contract.","suite.","data.","cases","again","suite","suite","for","while","code","suite","so","locally","suite","script.","suite,","case","cases","cases.","cases.","case:","wanted","suite,","case.","case,","to:","into","suite?","suite.","suite,","for","data","file","without","cases,","suite","suite","suite,","file","suite,","suite","of"]},{"Key":"test cases","Fragments":["provide:","receives","must","don't","of"]},{"Key":" -","Fragments":["\"WHERE","\"I'm","This","There's","Would","Why","`str`","you","Would","`pronoun`","There","IMO","What","Is","I","That","I",":use","some","Removed","transcribe","seq-to-rna","to-rna","When","When","I","Prefer","Require","Extract","putting","moving","To","To","second","dna-to-rna-lut","i","In","Rename","While","sets,","we","`complement`","s","n","coll","Put","Consider","I","I","I","I","I","I","Also","rather","the","I"]},{"Key":"- \"WHERE","Fragments":["IS"]},{"Key":"\"WHERE IS","Fragments":["SHE?\""]},{"Key":"IS SHE?\"","Fragments":["(which"]},{"Key":"SHE?\" (which","Fragments":["would"]},{"Key":"(which would","Fragments":["be"]},{"Key":"would be","Fragments":["yelling,","worth","better","the","accepted.","to","a","interpreted","much","worthwhile","worthwhile","cleaner.","easier","as","easier","interested","doing","the","using","any","better","to","nice.","normally","much","to","clearer.","great.","simpler","interested","very","more","good","better?","a","overkill.","good","appreciated.","using","much","good","familiar","pretty","*real","better","more","nice","useless","worth","to","good","to","clearer","slightly","clearer","worthwhile","overkill","shown","a","whether","if","increased","good","good","better","good","copying","good","the","that","the","(last","sequential","to","a","to","pretty","good","more","good","more","a","enough","a","a","clearer","better","also","much","less","splitting","expected","more","exactly","a","to","more","one","the","more","worth","rubbish!","good","a","better","to","enough","read.","simple","good","`#{\\A","using","more","supposed","reduced","`response-for`.","worth","to","more","a","in","better","appreciated!","more","a","something","seen","useful.","more","considered","idiomatic","more","on","to","enough.","highly","a","clearer","to","a","helpful","good","more","more","verbose.","precise.","simple","returned,","good","a","a","the","much","nil","called","needed","better","considered","a","a","the","neither","a","more","clearer","more","helpful.","better","more","simply","more","more","called","a","`if","more","more","in","better","better","very","able","great!","worse","surpised","more","to","a","clearer.","more","an","to","well","more","nicer","keen","to","better","good","another","more","come:","to","at","great."]},{"Key":"be yelling,","Fragments":["IMO)"]},{"Key":"- \"I'm","Fragments":["Batman.\""]},{"Key":"\"I'm Batman.\"","Fragments":["(a"]},{"Key":"Batman.\" (a","Fragments":["terrifying"]},{"Key":"(a terrifying","Fragments":["statement)"]},{"Key":" If","Fragments":["I","you","I","you","you","you","I'm","I","you","this","you","you","feel","you","I","I","you","this","you","you'd","you'd","you","you","you","we","you","you","your","one","you","you","you","you","you","you","you","you","you're","you","you're","anyone","you're","you're","you're","the","using","you'd","you're","you","you","you","you","it's","you","you","`(not","you","the","you"]},{"Key":"If I","Fragments":["sent","were","keep","hadn't","just","try","understand","had","am","wanted","understand","follow"]},{"Key":"I sent","Fragments":["Bob"]},{"Key":"sent Bob","Fragments":["the"]},{"Key":"Bob the","Fragments":["message"]},{"Key":"the message","Fragments":["\"DUDE!\",","into","didn't","was","is","matched","wasn't","is","is"]},{"Key":"message \"DUDE!\",","Fragments":["he"]},{"Key":"\"DUDE!\", he","Fragments":["should"]},{"Key":"he should","Fragments":["respond"]},{"Key":"should respond","Fragments":["with"]},{"Key":"respond with","Fragments":["\"Woah,","\"Woah,","\"Woah,","\"Woah,","the"]},{"Key":"with \"Woah,","Fragments":["chill","chill","chill","chill","chill"]},{"Key":"\"Woah, chill","Fragments":["out!\"","out!\"","out!\")","out!\"","out!\"","out!\"","out!\"","out!\"","out!\"","out!\"","out!\"","out!\",","out!\")`.","out!\"","out!\"","out!\"))","out!\"","out!\"","out!\"","out!\"))","out\"","out!\"","out!\"","out!\"","out!\""]},{"Key":"chill out!\"","Fragments":["since","because","if","(bob/response-for","\"Sure.\"))"]},{"Key":"out!\" since","Fragments":["I'm"]},{"Key":"since I'm","Fragments":["shouting,"]},{"Key":"I'm shouting,","Fragments":["but"]},{"Key":"shouting, but","Fragments":["with"]},{"Key":"but with","Fragments":["this","many","no","the","my","nice"]},{"Key":"with this","Fragments":["implementation","change.","approach","yet.","one.","later.","exercise?","code.)","one.","implementation.","is","alternative","implementation","style,","one,","but","one","submission.","now,","code:","approach,","in","second"]},{"Key":"this implementation","Fragments":["he","has","is","makes","is","of"]},{"Key":"implementation he","Fragments":["doesn't."]},{"Key":"he doesn't.","Fragments":["Can"]},{"Key":"doesn't. Can","Fragments":["you"]},{"Key":"Can you","Fragments":["find","come","think","think","think","think","think","think","clarify?","clarify?","use","offer","please","find","think","think","think","think","optimize","find","make","clarify?","think","suggest","give","clarify","give","make","get","please","avoid","just","check","do","explain","think","modify","generalize"]},{"Key":"you find","Fragments":["a","my","a","a","it","an","it","some"]},{"Key":"find a","Fragments":["way","minute","clojure","````last````","function","better","way","way","way","`cond`","unique","library","pattern","more","different"]},{"Key":"a way","Fragments":["to","to","to","to","you","to","you","to","to","you","to","that","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","of","to","to","that","to","with","of","I","to","to","of","to","to","to","to","to","that","to","to","to","to"]},{"Key":"way to","Fragments":["make","handle","pass","change","check","implement","check","handle","avoid","avoid","clean","do","get","do","do","have","do","do","only","let","factorize","DRY","DRY","DRY","check","submit.","do","make","check","import","skip","do","do","sort","implement","accomplish","do","have","do","simplify","DRY","check","factorize","avoid","separate","obfuscate","use","check","use","do","handle","keep","do","make","handle","avoid","resolve","do","test","avoid","manage","do","do","use","go.","do","get","use","achieve","detect","write","make","shorten","implement","approach","do","define","get","make","ensure","end","test","define","check","format","fix","handle","use","simplify","do","build","calculate","check","test","do","throw","avoid","do","roll","implement","implement","implement","implement","implement","make","write","do","simplify","see","make","do","convert","create","express","solve","dynamically","do","solve","find","solve","partially","do","do","fetch","do","make","go","go.","write","lay","do","do","stop","\"avoid\"","get","make","express","do","test"]},{"Key":"to make","Fragments":["an","sure","the","it","a","this","the","the","the","your","those","it","that","it","`question?`","it","response-for","the","all","the","helper","this","it","use","sure","the","checks","sure","your","a","code","the","a","the","the","it","less","the","the","it","the","this","it","the","the","checks","things","it","`response-for`","out","the","things","your","the","`anagram-of?`","it","the","that","those","them","the","that","idiomatic","that","this","their","the","sure","it","it","a","this","it","it","`response-for`","the","the","them","it","`leiningen`","the","better","the","them","it","those","it","it","it","it","the","the","code","a","this","it","it","it","sure","clear","this","the","it","it","sure","it","it","functions","up","it","about","use","program","`yelled?`","it","`sorted`","your","it","sure","`def-`","an","this"]},{"Key":"make an","Fragments":["implementation","atom","`anagram?`"]},{"Key":"an implementation","Fragments":["that","detail","detail.)","detail,"]},{"Key":"implementation that","Fragments":["will","simply"]},{"Key":"that will","Fragments":["recognize","fall","make","do","still","give","make","cover","make","make","simplify","be","get","gracefully","be","work","remove"]},{"Key":"will recognize","Fragments":["any"]},{"Key":"recognize any","Fragments":["all-caps"]},{"Key":"any all-caps","Fragments":["input"]},{"Key":"all-caps input","Fragments":["as"]},{"Key":"input as","Fragments":["shouting"]},{"Key":"as shouting","Fragments":["(and","and"]},{"Key":"shouting (and","Fragments":["similarly"]},{"Key":"(and similarly","Fragments":["for"]},{"Key":"similarly for","Fragments":["the"]},{"Key":"the other","Fragments":["statement","end","function","two","comment","cases,","two","two","information","helpers?","way","two","two","functions.","hand,","two","way","cases.","functions","way,","hand,","explains","hand,","hand,","nits","cases.","methods.","hand,","exercises","predicates","hand,","languages,","hand","requirements","requirements","day","implementations","places?","one.","functions","submissions","applies","reviewers","way","extreme","day","2","version"]},{"Key":"other statement","Fragments":["types,"]},{"Key":"statement types,","Fragments":["too)?"]},{"Key":" This","Fragments":["makes","is","looks","is","is","works","looks","looks","looks","is","is","is","is","is","seems","is","is","looks","looks","is","looks","works","is","is","looks","is","looks","is","replacement","is","looks","looks","is","is","works,","looks","is","definitely","looks","looks","is","might","doesn't","looks","one","looks","is","is","looks","adheres","makes","is","was","was","doesn't","is","solution","looks","definitely","is","looks","would","one","is","is","looks","looks","looks","solution","is","is","is","looks","does","is","is","is","is","last","code","still","is","seems","is","exercise","is","code","looks","I","is","is","limits","is","one","one","is","revision","is","is","solution","I","is","code","looks","might","is","is","solution","looks","looks","cuts","was","particular","is","is","is","is","is","iteration","looks","looks","one","is","was","is","would","looks","looks","looks","looks","can","looks","is","is","looks","looks","is","has","submissions","will","will","version","version","solution","is","is","was","is","is","is","time","looks","was","is","is","looks","is","is","is","is","doesn't","is","is","looks","is","way,","removes","removes","is","was","is","solution","is","code","seemed","will","looks","seems","doesn't","looks"]},{"Key":"This makes","Fragments":["the","it","the","it"]},{"Key":"makes the","Fragments":["tests","whole","input","code","`transcribe`","tests","code","program","intent","program","definitions","logic","intent","function","intent","code","`response-for`","one","code","code","`cond`","flow","code","code","code","valid","```assert```","overall"]},{"Key":"the tests","Fragments":["pass,","in","instead","extracted","and","so","but","are","pass,","in","are","you","would","for","themselves.","(the","without","don't","into","pass.","pass,","to","don't","to","force","correct","and","would","over","since","in","don't","pass.","fail","so","that","don't","against","as","passed.","don't","should","use,","represents","don't","was","use","pass"]},{"Key":"tests pass,","Fragments":["but","but","I"]},{"Key":"pass, but","Fragments":["it","the","should"]},{"Key":"but it","Fragments":["won't","still","would","can","usually","sounds","is","looks","didn't","didn't","all","looks","would","has","would","would","would","looked","reads","would","looked","might","works.","made","just","still","looks","never","did","looked","certainly","was","ended","gets","is","seems","actually","works.","could","is","may","would","works","seemed","is","seems","is","would","works.","was","felt","was","certainly","is","looks","also","mirrors","also","feels","does","returns","still","doesn't","works."]},{"Key":"it won't","Fragments":["handle","get"]},{"Key":"won't handle","Fragments":["more"]},{"Key":"handle more","Fragments":["general"]},{"Key":"more general","Fragments":["cases.","set","random","than","expression","purpose","solution","solution"]},{"Key":"general cases.","Fragments":["Can"]},{"Key":"cases. Can","Fragments":["you"]},{"Key":"you come","Fragments":["up","across"]},{"Key":"come up","Fragments":["with","with","with","with","with","with","with","with","with.","with","with","with"]},{"Key":"up with","Fragments":["a","`dna/dna-to-rna`","a","native","after","a","YET","it","this","a","`(defn-","(=","the","that","the","empty","the","this","`frequencies`","duplicated","the",":)","it,","`all-dows-in-month`.","descriptive","at","anything"]},{"Key":"with a","Fragments":["way","list","trailing","vector/list","RegEx","question","`let`","question","question","default","`def`","'?'.","core","namespace","map","better","new","map-destructuring","core","new","replacement","string","function","more","comparison","default","huge","shorter","base","recourse","map","nucleotide","solution","single","shorter","?\"*","new","`for`","concrete","`cond`","different","40","defmacro.","space","count","`?`.","vowel","slight","predicate","call","somewhat","small","small","U","single","small","little","question","Clojure","regular","smaller","function","question","real","slightly","function","new","question","slightly","few","`:require`.","question","let","mutable","different","pre-calculated","certain","90","different","clear","single","regexp,","function","regexp,","straight","optional","negated","`?`,","`?`","map.","`map`","translate","?.","really,","call","function","\"case\"","map","`map`,","function.","more","certain","call","set","question","semicolon","simpler","range","`cond`","`case`"]},{"Key":"to handle","Fragments":["arbitrary","this","but","that),","the","the","mutability,","questions"]},{"Key":"handle arbitrary","Fragments":["inputs?"]},{"Key":" Nice","Fragments":["--","--","work!","solution.",":)","work","and","solution!",";)","that","solution!","conditions!","use","suggestions!","one!",":)","touch","solution!",",","to","!!","solution!","and","doc","idea.","solution!","short","work!","use","and","concise","use","work!","catch","use","solution.","tip","overall","and","use","use","use","solution","concept,","handling","documentation.","use","solution","ideas,",":-)","thing","concise"]},{"Key":"Nice --","Fragments":["I","this"]},{"Key":"I definitely","Fragments":["like","agree.","think","went"]},{"Key":"definitely like","Fragments":["the"]},{"Key":"like the","Fragments":["intention-revealing","function","`anagram-match?`","use","`(into","responses","way","most","most","idea","declarative","use","use","`cond`","names","other","`is-`","way","use","idea","`condp`!","special","use","`intro/outro`","use","Elixir","`seq`","re-find","`plural`","consumer","solutions","new","complexity","default","use","repetition","use","shortness","separation","approach.","way","use","kind","`type-responses`","underlying","idea","good","`response-for`","way","code.","decoupling","appropriate","clean","idea.","pre","long,","simplicity","third","convention","use","names","use","precondition","definition","deep","use","solutions","brute-force","usage","usage","name","str/replace","use","aesthetics","building","`letfn`","use","requirements","use","overall","multiple","name","ability","way","`endsWith`","name","fact","expressiveness","use","predicate","fact","fact","destructuring","conciseness","use","correct","individual","name","idea","(=","test","verbosity","hard-coded","implicitness","overall","conciseness","definition","problem","part","way","alignment","fact","way","recursive","substring","overall","use","neatness/readability","readability","string","theory","following:","integer","use","case","`blank?`","composable","partial","use"]},{"Key":"the intention-revealing","Fragments":["names."]},{"Key":" One","Fragments":["more","minor","(super","tiny","little","minor","of","of","other","last","thing","thing","explains","small","thing","more","last","thing","more","more","of","question","way","problem","function","other","possible","other","more","tiny","that","should","thing","thing","thing","tip","hint:","minor","thing","small","other","way","thing","thing","small","thought","possible","tiny"]},{"Key":"One more","Fragments":["minor","thing","really","thing","little","thing.","nit.","thing:"]},{"Key":"more minor","Fragments":["thing"]},{"Key":"minor thing","Fragments":["--","--","--"]},{"Key":"thing --","Fragments":["what","what","I"]},{"Key":"-- what","Fragments":["would","happens","do","would","would"]},{"Key":"what would","Fragments":["happen","happen","happen","happen","you","you","be","`-r`","happen","otherwise"]},{"Key":"if the","Fragments":["statement","input","message","strands","functions","currently","upper-case","string","DNA","`sorted`","input","inline","number","string","`any-word-pattern`","name","return","condition","Queens","requirements","data","value","items","non-trivial","checks","value","entries","normalisation","`testFn`","word","nested","robots","sentence","exercise","test","sequence","key","result","target"]},{"Key":"the statement","Fragments":["didn't","patterns","patterns"]},{"Key":"statement didn't","Fragments":["match"]},{"Key":"didn't match","Fragments":["any","any","any"]},{"Key":"match any","Fragments":["of","of","of","of","of"]},{"Key":"any of","Fragments":["your","your","the","your","the","the","the","the","the"]},{"Key":"of your","Fragments":["checks?","tests?","check","checks?","\"approved\"","`last_char`.","function","past","past","past","past","past","past","past","code","past","past","past","past","past","past","work","`and`","checks","implementation","internal","random","solutions?","```to-rna```","helper","functions","\u003ccode\u003eresponse-for\u003c/code\u003e","parameters?","wrapper.","function","checks","cases","feedback.","declare's","solution!","code.","higher-order"]},{"Key":"your checks?","Fragments":["I"]},{"Key":"checks? I","Fragments":["would"]},{"Key":"I would","Fragments":["argue","argue","suspect","argue","at","drop","probably","add","name","highly","also","say","mention","probably","be","be","suggest","have","personally","argue","suggest","love","not","probably","think","probably","probably","say","replace","be","consider","be","get","prefer","be","probably","treat","probably","probably","remove","argue","be","prefer","change","add","rather","suggest","change","prefer","rather","try","just","expect","use","have","end","need","like","suggest","rename","describe","have","just","call","try","recommend","need","comment","just","consider","mutate","just","be","usually","expect","still","say","just","prefer","prefer","leverage","also","say","append","have","like","suggest","however","make","consider","call","just","expect","definitely","prefer","expect","totally","not","put","rather","say.","push","love","still","do","throw","decompose","prefer","decompose","change","change,","change:","give","change","extract","go","insert","put","use","remove","interpret","use","probably","love","include","put","have","go","suggest","replace","rather","be","expect","try","maybe","rather","appreciate","love","personally","say.","have","sugges","rather","put","probably","privatize","expect","prefer","usually","certainly"]},{"Key":"would argue","Fragments":["that","that","that","that","that","that"]},{"Key":"argue that","Fragments":["\"Whatever\"","\"Whatever.\"","one","based","splitting","the","nucleotides","it","the"]},{"Key":"that \"Whatever\"","Fragments":["should"]},{"Key":"\"Whatever\" should","Fragments":["be"]},{"Key":"should be","Fragments":["the","his","default,","more","able","private","public","(defn-","the","private?","able","one","Bob's","for","private,","looking","considered","private.","more","with","aligned","on","on","a","for","on","done","on","in","available","indented","part","able","given","indented","part","on","part","as","based","first","generated","moved","(:require","`\\U","part","```dna-string```","private.","`(defn-","able","breaking","random","indented","adequate.","using","reserved","stacked","on","lowercase","more","explanation","a","doing,","obvious.","an","remedying","less","added,","no","on","added","added","using","empty","particularly","in","\"an","in","a","able","of","a","reserved","able","the","fixed,","able","able","overshadowed","able","able","a","inlined","removed","extracted","very","encapsulated","something","stored","broken","defined","defined","moved","a","'private',","failing:","a","separated","separate?"]},{"Key":"be the","Fragments":["default","same","\"default\"","same","same","most","responsible","wrong","use","one","one","way","idiomatic","first","more","style","period","better","most","same","best","hanging","case","same.","clearest","preferred"]},{"Key":"the default","Fragments":["response,","but","behavior","behavior","response.","is","should","map","value","case","case"]},{"Key":"default response,","Fragments":["at","based","but"]},{"Key":"response, at","Fragments":["least"]},{"Key":"at least","Fragments":["based","you","define","less","so","original","explicit","tell","the","one","to","not","this","per","one","one","what","give","as","about","not","one","one","in","one","there's","a","1","change","the","two","one","according","-","one","it's","one"]},{"Key":"least based","Fragments":["on"]},{"Key":"based on","Fragments":["the","the","the","the","my","zoldar's","`empty-dna-frequencies`","the","etrepum's","spoken","your","your","`equal-length`,","value,","type.","length.","feedback","simple","@valentin's","the"]},{"Key":"on the","Fragments":["readme.","readme.","idea","exact","end","last","last","following","same","kind","return","fence","value","part","last","predicate","readme","JVM,","line","`:require`,","references","way.","javascript","same","same","fence.","Haskell","same","`.endsWith`,","same","same","`:only`","same","\"less","wall.\")`","naming","string","wall,","order","same","feedback","wall,","matter","first","same","style","Clojure","last","fence","name","feed","negative","other","size","`String`","cond","right","eyes.","next","input,","same","top","end","assignment","business","fence","current","input","[Clojure","hanging","implicit","test","way","last","line","`(\u003e","word.","subject,","full","input","order,","\"recognizes","same","same","comment,","empty","individual","same","support","top","page.","final","last","control","same","use","input,","same","next","namespace","same","[coding","unused","low","tests.","same","next","interwebs...","same","last","last","last","same","commandline","mapping","right-hand","same","same","literal","result","borderline","boolean","Strings.","generators","atom","vector.","same","same","remainder.","wall\".","wall","`-\u003ewords`","next","`anagrams-for`","exercises","replace","usage","uppercase","same","namespace","result","last","website","repl.","right","RNA","DNA","filesystem.","variable","same","input.","ordering","collection.","value.","same","string).","whole"]},{"Key":" hmm...","Fragments":["it","I"]},{"Key":"hmm... it","Fragments":["doesn't"]},{"Key":"it doesn't","Fragments":["actually","matter","consolidate","contribute","end","matter","really","comply","improve","seem","make","have","appear","help","work","really","make","match?","matter","capture","need","import","feel"]},{"Key":"doesn't actually","Fragments":["discard"]},{"Key":"actually discard","Fragments":["invalid"]},{"Key":"discard invalid","Fragments":["nucleotides,"]},{"Key":"invalid nucleotides,","Fragments":["it"]},{"Key":"nucleotides, it","Fragments":["would"]},{"Key":"it would","Fragments":["just","be","result","be","be","be","be","be","help","be","probably","be","become","give","be","be","be","evaluate","be","make","be","be","be","be","be","be","be","be","do","be","be","be","be","respond","be","reduce","be","already","be","already","be","have","be","be","better","generate","also","make","be","look","already","never","have","use","first","be","fail","be","simplify","be","be","make","look","be","be","not","look","make","be","be","certainly","be","be","be","be","feel","be","help","be","be"]},{"Key":"would just","Fragments":["replace","take","put","name","remove","store","extract","use","have","need"]},{"Key":"just replace","Fragments":["them","`(str","`\\T`","the"]},{"Key":"replace them","Fragments":["with","with"]},{"Key":"them with","Fragments":["nil.","their","`:^private`","`(declare","native","such"]},{"Key":"with nil.","Fragments":["If"]},{"Key":"nil. If","Fragments":["it"]},{"Key":"If it","Fragments":["weren't"]},{"Key":"it weren't","Fragments":["making"]},{"Key":"weren't making","Fragments":["a"]},{"Key":"making a","Fragments":["string","true","helper","function","bunch","range"]},{"Key":"a string","Fragments":["out","ends","from","function","is","is","can","a","to","(/sequence)?","of","instead","can","is","directly","using","being","or","on","literal","in","is","is","and","replace","when","here,","(or","replace","replace","and","into","based","like","which","output","to","into","into","results","(shudder)","in","into","has","end","end"]},{"Key":"string out","Fragments":["of"]},{"Key":"out of","Fragments":["them","the","it,","response-for:","`response-for`:","searches.","date.","`response-for`","my","the","the","response-for,","`response-for`","the","the","my","the","control.","the","my","the","date.","`response-for`","the","the","the"]},{"Key":"of them","Fragments":["they","would","are","and","this","are","fits","has","are","is","more","could","that","can"]},{"Key":"them they","Fragments":["would"]},{"Key":"they would","Fragments":["still","appear","have"]},{"Key":"would still","Fragments":["be","give","do"]},{"Key":"still be","Fragments":["there.","an","just"]},{"Key":" Hmm,","Fragments":["it","this","I","yeah","I'm","full","I","strip-leading-one?","fair"]},{"Key":"Hmm, it","Fragments":["almost"]},{"Key":"it almost","Fragments":["feels"]},{"Key":"almost feels","Fragments":["like"]},{"Key":"feels like","Fragments":["overkill","it's","it","a","the","this","a","you're","the","this"]},{"Key":"like overkill","Fragments":["for"]},{"Key":"overkill for","Fragments":["these","that","this","this."]},{"Key":"for these","Fragments":["short","problems","types","cases","predicates,","sort"]},{"Key":"these short","Fragments":["checks,"]},{"Key":"short checks,","Fragments":["but"]},{"Key":"checks, but","Fragments":["maybe"]},{"Key":"but maybe","Fragments":["having","it","there","harder","the","that's","that's","that's","useful?"]},{"Key":"maybe having","Fragments":["an"]},{"Key":"having an","Fragments":["intention-revealing"]},{"Key":"an intention-revealing","Fragments":["name"]},{"Key":"intention-revealing name","Fragments":["for"]},{"Key":"name for","Fragments":["each","what","that","a","`q`","a","the","the","what","an","the","the","that"]},{"Key":"for each","Fragments":["of","chunk?","entry","candidate?","type","choice","string,","word","candidate,","of","of","of","marker","test","candidate.","candidate.","test","specific","gender.","of","type","comparison."]},{"Key":"each of","Fragments":["them","the","the","`c`.","the","those","the","the","the","the","those","them.","the","the","the"]},{"Key":"them would","Fragments":["be"]},{"Key":"be worth","Fragments":["it.","it","it","using","making","the","making","the","a","the","the","checking","looking"]},{"Key":"worth it.","Fragments":["Might"]},{"Key":"it. Might","Fragments":["be"]},{"Key":"Might be","Fragments":["better","nice","cool","useful"]},{"Key":"be better","Fragments":["room","to","\"default\"","to","to","than","to","in","for","off","to","for","than","to","to","like:","to","in","to","off","to","to","to","to","with","written","for","to","to","to","parameter","than","as"]},{"Key":"better room","Fragments":["for"]},{"Key":"room for","Fragments":["growth","improvement...","improvement","improvement!","improvement"]},{"Key":"for growth","Fragments":["too."]},{"Key":"This is","Fragments":["cool.","word-count,","a","nice","very","a","great!","great!","great!","even","admittedly","pretty","the","pretty","annoyingly","weird","really","called","fantastic,","literally","nice.","actually","super","very","a","a","too","based","what","the","a","very","much","_not_","pretty","perfectly","my","some","a","my","small,","a","my","probably","one","my","my","by","also","short","already","sort","definitely","a","my","my","very","described","great","looking","a","a","more","a","a","a","shorter","my","an","near","the","the","a","one","bit","the","pretty","my","a","so","fine,","a","pretty","my","the","fairly"]},{"Key":"is cool.","Fragments":["I"]},{"Key":"cool. I","Fragments":["went"]},{"Key":"I went","Fragments":["with","back","about","with","the","and","with","ahead","back","to","with","through.","for","for","the","through"]},{"Key":"went with","Fragments":["`clojure.string/replace`,","a","comment","the","that"]},{"Key":"with `clojure.string/replace`,","Fragments":["but"]},{"Key":"`clojure.string/replace`, but","Fragments":["your"]},{"Key":"but your","Fragments":["solution","first","alignment","way","assert"]},{"Key":"your solution","Fragments":["has","works,","is","much","is","more","also","really",":-)","works","using","of","is","as"]},{"Key":"solution has","Fragments":["the","a"]},{"Key":"has the","Fragments":["added","very","benefit","advantage","advantage","combination","benefit","property","advantages"]},{"Key":"the added","Fragments":["benefit","benefit"]},{"Key":"added benefit","Fragments":["of","of","is"]},{"Key":"benefit of","Fragments":["scrubbing","explicitly","returning","meaning","consistency,","reuse"]},{"Key":"of scrubbing","Fragments":["invalid"]},{"Key":"scrubbing invalid","Fragments":["nucleotides"]},{"Key":"invalid nucleotides","Fragments":["from"]},{"Key":"nucleotides from","Fragments":["the"]},{"Key":"from the","Fragments":["strand.","other","beginning..","docs.","function","language","domain","domain.","site","domain","Foray","implementation,","same","inside","string","conditionals","same","responses,","front","hash","string","problem","domain","public","outside.","logic/algorithm.","memoize","candidates.","if","response","best","list.","phrase","word","code.","current","Calendar","meaning","function","```yelling?```","test","domain","`clojure.string`","problem","phrase.","previous","habit","prime","readme","`this`","conversion.","\"combine\"","transcription","transformation.","map.","transcription","comparable","`response-for`.","perspective","first","%c's","Ruby","previous,","name","initial","Ruby","`core`","`clojure.core`","string","exception.","Readme"]},{"Key":"-- this","Fragments":["is"]},{"Key":"this is","Fragments":["definitely","a","great","fine.","fine.","my","a","very","looking","really","very","really","looking","very","idioms","not","necessary,","looking","a","a","better.","still","the","more","about","very","very","mostly","pretty","pretty","really","definitely","my","exactly","still","a","how","much","a","that","an","programming.","partly","oversight?","such","a","necessary","significantly","a","we","my","not","almost","relatively","idiomatic","pretty","great.","fixed","good","the","perfect","a","just","already","my","probably","the","clearer","avoided","no","the","idiomatic","idiomatic","unreadable...","a","pretty","why","a","good","generally","already","because","rather","basically","much","a","just","better","a","now","good;","going.","my","a"]},{"Key":"is definitely","Fragments":["more","getting","missing","going","not","in","preferred","a","not","idiomatic","simpler","readable,"]},{"Key":"definitely more","Fragments":["readable!"]},{"Key":"would you","Fragments":["think","expect","think","prefer","think","trade","support","have","refactor","break","use","make"]},{"Key":"you think","Fragments":["about","of","of","it's","is","--","about","it","it","about","it's","about","of","you","the","moving","a","of","that's","of","of","of","of","that","there's","about","that","about","about","about","about","about","of","it","--","of","of","of","it","of","giving","it","of","of","of","there's","again:","you","```anagram?```","it's","of","about","about","about","that","about","of","about","about"]},{"Key":"about adding","Fragments":["descriptive","function"]},{"Key":"adding descriptive","Fragments":["private"]},{"Key":"descriptive private","Fragments":["functions?"]},{"Key":" For","Fragments":["example:","the","the","the","this","the","the","example","future","bigger","the","example,","some","the","`nucleotide-counts`,","rev","private","example,","future","`move`","example,","example.","example","this","my","fun,","`sorted`,","extra","the","reference,","my","style,","a","more:","the","this","`blank?`,","example,","V2","example:"]},{"Key":" `(defn-","Fragments":["silent?","on-planet","shouting?)`"]},{"Key":"`(defn- silent?","Fragments":["[str]"]},{"Key":"silent? [str]","Fragments":["..."]},{"Key":"[str] ...","Fragments":["your"]},{"Key":"... your","Fragments":["check"]},{"Key":"your check","Fragments":["for","functions","of"]},{"Key":"check for","Fragments":["silence","questions.","it,","something","the","an","the","the","the","anagram","anagrams","one","a","the","the","`(=","identical","`yell?`","duplicates.","that,","`all-caps`","`question?`","the","all","questions","at","a","that","an","good","a","you","letters","if","`?`","uppercase","presence","validity","yelling/shouting","letters","an","the","capitalized","`\"Let's\"`?","letters","any"]},{"Key":"for silence","Fragments":["...)`"]},{"Key":" oh","Fragments":["yeah!","thank"]},{"Key":"oh yeah!","Fragments":["whoops."]},{"Key":"yeah! whoops.","Fragments":["currently"]},{"Key":"whoops. currently","Fragments":["this"]},{"Key":"currently this","Fragments":["would"]},{"Key":"this would","Fragments":["return","be","bit","be","probably","be","be","make","be","be","look","be"]},{"Key":"would return","Fragments":["nil.","`\\?`","the","the","true","true"]},{"Key":" i","Fragments":["also","can","think","have","want","don't"]},{"Key":"i also","Fragments":["probably"]},{"Key":"also probably","Fragments":["want","just"]},{"Key":"probably want","Fragments":["to","to","to"]},{"Key":"want to","Fragments":["consider","make","pick:","be","define","have","point","encourage","have","have","permit","refer","have","do","encourage","think","test","stick","match","look","use","use","use","take","create","do","use","enforce","be","narrow","do","add","express","have","read","change","change.","take","add","export,","export","export.","export","look","put","look","change","be","look","look","do","go","drop","use","have","look","include","have","look","type","force","look","provide","try","consider","make","look","negate","consider","at","try","play","experiment","look","look","shorten","look","incur","*keep*","remove.","become","try","look","join","keep","skip","see","export","export","export","try)","say,","add","use","transfer","have","take","consider","detect","remove","look","use","look","try","look","define","be","check"]},{"Key":"to consider","Fragments":["some","would","the","is","is","is","is"]},{"Key":"consider some","Fragments":["cases"]},{"Key":"some cases","Fragments":["where","a"]},{"Key":"cases where","Fragments":["the","atomic"]},{"Key":"where the","Fragments":["input","macro","value","scope","thread-last","value","bindings'","result","thread","key","functions","argument","argument","value","magic","`AssertionError`","beginning","functions","same"]},{"Key":"the input","Fragments":["is","message","message","into","checking","string","checking","text","validation","domain","to","word","string.","for","twice","was","with","types.","`word`","word","word","string","and","is","to","and","validity","are:","actually","string","validation","validation","validation","prior","string","before","string","and","with","was","validation","string","beforehand?","to","mixed"]},{"Key":"input is","Fragments":["mostly","piped","valid","a","validated."]},{"Key":"is mostly","Fragments":["empty","matter","used"]},{"Key":"mostly empty","Fragments":["[\".\""]},{"Key":"empty [\".\"","Fragments":["\"?\"]"]},{"Key":"[\".\" \"?\"]","Fragments":[".."]},{"Key":"\"?\"] ..","Fragments":["might"]},{"Key":".. might","Fragments":["be"]},{"Key":"might be","Fragments":["better","a","able","a","a","the","that","a","missing","overkill,","to","correct.","nicer","a","better","doing","helpful.","missing","helpful.","useful","setup","overkill.","a","a","able","to","to","clearer","a","a","a","a","misleading.","able","my","a","worth","nice.","a","neat","to","more","faster","bad.","worth","easier","slightly","clearer","easier","more","some","simplified","a","useful?","easier","better","used","better.","nice","possible","a","clearer.","improved","clearer","clearer","a","a","more","interesting","easier","more","a","nice","better","more","to","able","able","fun","better","helpful","something","more","a","a","using","some","a","a","faster","a","beneficial","of","just","a","more","interesting","different.","able","nice."]},{"Key":"better to","Fragments":["make","`lower-case`","check","just","use","me.","either","format","use","align","use","leave","inflect","use","use","use","use","pick","explicitly","declare","reference","separate","break","clean","use","name","test","spell","organize"]},{"Key":"make sure","Fragments":["there's","if","bob","the","to","that","the","there","that","yelling"]},{"Key":"sure there's","Fragments":["something"]},{"Key":"there's something","Fragments":["there"]},{"Key":"something there","Fragments":["beside"]},{"Key":"there beside","Fragments":["punctuation."]},{"Key":" Thanks","Fragments":["for","rubysolo,",":)","for","for","for",":)","Mike.","for","for","for","for","!","for","for","n1k0","for","for","for","for","for","!","for","@richmond,","for","!","for","for","to","for","for","for","@patrick!","for","for","again,","for","for","in","for","for","@angelica!","for","for","for","for","for","that","@danial","@courtney.","@aidan.","a","@birdie,","@vicky,","a","for","for","to","for","for","for","@chelsie","again.","for","for","@ruthie","@mckayla","for","again","for","for","for","to","for","@shane","for","for","@amara","for","@forrest","@brooke!","@niko,","again,","for","@ariane.","@julio.","@brody.","for","for","Geoff.","for","@darius!","for","for","for","about","sgrimm.","@garrick,","Geoff","for","for","for","for","for","for","for","@gracie","for","for","again,","zoldar.","for","for","for","@esmeralda.","for","@nicola","for","@bethany!","to","@rashad!","@marvin","@jett!","for","for","for","for","for","for","to","a","for","for","@ciara","for","for","reedlaw","for","Anthony!","for","to","for","a","rcolinray!"]},{"Key":"Thanks for","Fragments":["the","pointing","the","the","the","the","the","the","clarifying,","the","the","the","the","letting","letting","the","the","the","the","the","all","feedback.","the","the","the","the","the","the","the","the","the","the","the","taking","the","your","nitpicking!","the","actually","the","the","the","feedback.","the","the","the","all","the","taking","the","the","that,","the","the","looking","feedback,","the","the","comments","the","feedback","the","the","the","the","the","the","the","bringing","your","the","the","the","asking.","the","the","the","the","the","the","the","taking","the","your","the","the","your","the","the","nitpicking!","the","the","calling","the","the","brining","the","your","the","the","your","a","the","the","your","the","the","the","the","the","taking","the","the","the","the","all","nitpicking","discover","your","that.","the"]},{"Key":" Would","Fragments":["it","it","it","it","it","it","it","there","it","it","it","it","it","it","it","be","it","it","you","defining","you","it","it","it","it","it","like","your","it","be","`(map"]},{"Key":"Would it","Fragments":["be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be"]},{"Key":"it be","Fragments":["worthwhile","worthwhile","worthwhile","worthwhile","worthwhile","worthwhile","clearer","worthwhile","worth","clear","clearer","the","beneficial","worthwhile","worthwhile","worth","worthwhile","better","worthwhile","worthwhile","a","clearer","worthwhile","worthwhile","done","clearer","worthwhile","worthwhile","worthwhile","worthwhile","worthwhile","worth","better","separated","worthwhile","better","better","better","clearer","simpler","that","before"]},{"Key":"be worthwhile","Fragments":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"worthwhile to","Fragments":["extract","extract","extract","extract","extract","use","extract","extract","extract","extract","extract","extract","extract","split","define","assign","extract","assign","extract","extract","extract","assign","extract","extract","consider"]},{"Key":"to extract","Fragments":["the","the","the","the","the","the","your","the","the","the","the","the","the","the","the","the","the","the","repeated","the","a","to","the","some","the"]},{"Key":"extract the","Fragments":["logic","checks","phrase","checks","logic","string","individual","individual","conditional","conditional","conditional","expressions","string","logic","logic","logic","string","logic","logic","steps","function","conditions","functions","counting","condition"]},{"Key":"the logic","Fragments":["for","checks","of","checks","into","from","checks","checks","checks","of","on","checks","is","of","of","a","in","behind","described","to","is","as"]},{"Key":"logic for","Fragments":["testing","lines"]},{"Key":"for testing","Fragments":["your","if"]},{"Key":"testing your","Fragments":["inputs"]},{"Key":"your inputs","Fragments":["into"]},{"Key":"inputs into","Fragments":["private"]},{"Key":"into private","Fragments":["functions","methods","functions","methods","functions","functions.","methods","functions","functions","functions","functions","functions","functions","functions","methods","function","functions","functions","functions","functions","functions","functions"]},{"Key":"private functions","Fragments":["with","with","with","to","with","with","with","with",":)","(`defn-`)","and","for","with","with","with","by","or","make","sounds","in","with","with","with","with","with","with","at","are","but","that","above"]},{"Key":"functions with","Fragments":["descriptive","descriptive","intention-revealing","intention-revealing","intention-revealing","intention","an","intention-revealing","intention-revealing","names","intention-revealing","intention-revealing","no","intention-revealing","arity","intention-revealing","name","descriptive","intention-revealing","intention-revealing","intention-revealing","multiple","intention-revealing","more","the","meaningful","meaningful","names","great","5","multiple","meaningful","`defn-`."]},{"Key":"with descriptive","Fragments":["names?","names?","names?","names?","names.","names","names","names."]},{"Key":" Check","Fragments":["out","out","out","out","out","out","out","out","out","out","out","out","out","out"]},{"Key":"Check out","Fragments":["`cond`","`last`","the","`frequencies`","`frequencies`","the","http://clojuredocs.org/clojure_core/clojure.core/atom","`blank?`","`frequencies`.","`frequencies`.","\"alphagrams\"","my","clojure.string/blank?","clojure.string/blank?","the","the","the","a","the","`frequencies`"]},{"Key":"out `cond`","Fragments":["--"]},{"Key":"`cond` --","Fragments":["I"]},{"Key":"I think","Fragments":["it","I","what","what","this","this","this","your","that","this","you're","what","I","question?","this","for","this","about","the","it's","it's","there","this","it","it’s","the","`screaming?`","it's","it's","you're","it","comments","I'm","you","you","this","it's","it","you","it's","you","I'd","I","something","the","assigning","`split`ting","you","it's","this","it","about","it","the","of","the","this","your","this","this","that","we","private","I","that","I","the","it's","I","it","it","only","requiring","your","it's","it's","my","only","you're","we're","`long-word-count`","it","that","they","it's","it","about","the","makes","transcribing","the","they","that","I","it","`defn-`","the","in","not.","this","you","that","its","I","I","using","I","it","I'll","this","I","a","it's","you've","it","it","there","that's","this","that's","it","for","`defn-`","I'll","it's","depending","that's","knowing","the","I","it's","you","the","it","we're","this","of","I","this","I'll","implementing","I'd","I","such","`:refer`ring","you","you","`anagram-of?`","your","I","it's","the","there","there's","it's","that","in","I","the","there","you","it","using","that's","the","you","the","the","the","it","I","this","it's","the","is","you","letter","the","the","there","you","I","this","you","that","the","that","that","things","the","the","it","you","your","I'm","putting","that","that","you","this","there's","there","it's","`sorted-chars`","it's","use","you","pre-calculating","that","I","most","with","it's","`require`","it","taking","`:require","is","it's","that's","`count`","you're","your","there","this","with","the","the","you're","I","does","you","the","if","that","a","trying","you've","you're","the","is-","this","this","using","the","it","that","that","this","it","it","I'm","it","prepared-words","the","it'll","is","this","it","this","in","that","I","it","I'm","fn-literals","\"assert","the","there","using","you","that","'grade'","this","the","is","a","they","the","that","your","of","it's","I","this","this","it's","it'll","they","I","having","I","pulling","/has-words?,","your","your","that","switch","you","I","the","you","using","`(comp","declaring","this","it","that","the","it","you","string","you're","you","it's","I've","I","it's","I've","this","my","it","it"]},{"Key":"think it","Fragments":["could","would","would","would","reads","would","could","looks","is","could","more","would","would","should","could","would","would","would","would","might","will","is","won't","would","would","still","makes","wins","would","might","would","works","will","can","would","loses","removes","would","is","looks","looks","makes","would","should","is","is"]},{"Key":"it could","Fragments":["help","be","help","be","be","matter.","greatly","be.","be","do","be","make","make","make","be","be","be","be","be,","just","be","be","help."]},{"Key":"could help","Fragments":["you","simplify","with","separate","in","you"]},{"Key":"help you","Fragments":["get","in","preserve",":)","with","with","with","with","simplify","simplify","simplify","reduce","get","to","if","keep"]},{"Key":"you get","Fragments":["to","cleaner","cleaner","by","rid","warning","warnings","used","rid","to","by","in","rid"]},{"Key":"get to","Fragments":["a","the","something","really","the","know","know","word-like"]},{"Key":"to a","Fragments":["better","string,","string","`(defn","URL","simple","name","given","dynamic","multi-method","decision","string,","solution","suggestion","matter","question.","version","docstring","regexp","docstring.","local","composition","lower","collection","given","string.","count","good","wrapper","reader","`let`","separate","simple","nested","more","single","string.","string.","2-D","string","Calendar","concrete","`str`.","function","string","common","given","more","single","given","value","beautiful","separate","different","named","`anagram-of?`","list","string","name","function.","string","string.","local.","single","given","given","keyword.","string\".","name","constant","comment"]},{"Key":"a better","Fragments":["implementation","way","solution.\"","solution.","name","naming,","name,","or","choice","solution.","way.","solution.","choice","algorithm","algorithm","algorithm","chance","algorithm","name?","regex","normalization","way","name,","way","conceptual","way","way","one!","way","name","name.","use","alternative,","function","name","name?","name","direction.","name","name,","way","understanding","solution","name?","way","comprehension.","way","way","choice","way.","name","term","name?","name?","way","choice","idea.","solution","choice","approach,","way","source","way","or","way","way","way","way","stack","way"]},{"Key":"better implementation","Fragments":["of"]},{"Key":"implementation of","Fragments":["`response-for`","the","DNA/RNA.","`default-hash-map`:","Bob","`sorted`.","`sorted`","`clojure.string/lower-case`","`silence?`","`word-count`","`add`","`combine-map-with`","the","the","blank?","`only-numbers?`","`number`","`rand-char`","a","the","`verse`","`sing`!","this"]},{"Key":"Hmm, this","Fragments":["got"]},{"Key":"this got","Fragments":["submitted","submitted"]},{"Key":"got submitted","Fragments":["to","early,"]},{"Key":"submitted to","Fragments":["\"bob\""]},{"Key":"to \"bob\"","Fragments":["by"]},{"Key":"\"bob\" by","Fragments":["mistake."]},{"Key":"by mistake.","Fragments":["I'm"]},{"Key":"mistake. I'm","Fragments":["going"]},{"Key":"I'm going","Fragments":["to","to","to","to","to","to","to","to","to","to"]},{"Key":"going to","Fragments":["approve","do.","work,","be","be","take","just","keep","suggest","focus","evaluate","try","spoil","be","understand","have","write","make","a","revise","submit","do","try","slightly","inline","use","leave","be","try","be"]},{"Key":"to approve","Fragments":["your","here"]},{"Key":"approve your","Fragments":["latest"]},{"Key":"your latest","Fragments":["bob,","submission","submission."]},{"Key":"latest bob,","Fragments":["then"]},{"Key":"bob, then","Fragments":["can"]},{"Key":"then can","Fragments":["your"]},{"Key":"can your","Fragments":["resubmit"]},{"Key":"your resubmit","Fragments":["this?"]},{"Key":"One minor","Fragments":["consideration","thing","thing:","thing:","thing,"]},{"Key":"minor consideration","Fragments":["--"]},{"Key":"consideration --","Fragments":["what","what"]},{"Key":"happens if","Fragments":["the","you","none","a","your","we","you"]},{"Key":"input message","Fragments":["doesn't","into"]},{"Key":"message doesn't","Fragments":["match"]},{"Key":"doesn't match","Fragments":["any","the","the","the","any","the"]},{"Key":"your tests?","Fragments":["I"]},{"Key":"tests? I","Fragments":["would"]},{"Key":"that \"Whatever.\"","Fragments":["should"]},{"Key":"\"Whatever.\" should","Fragments":["be","be"]},{"Key":"be his","Fragments":["default"]},{"Key":"his default","Fragments":["response,"]},{"Key":"response, based","Fragments":["on"]},{"Key":" Neat!","Fragments":["I","I"]},{"Key":"Neat! I","Fragments":["like","like"]},{"Key":"the function","Fragments":["generator.","since","name,",".","`response-for`.","I","multiple","question2","names","names","much","in","definition","domain","can","names","is","body","given","from","anymore.","arguments","except","is","definition,","you","itself.","in","is","name","does.","should","inside","name","of","responsible","in","name.","was","multiple","`string-\u003esorted-chars`,","where","precondition","descriptions.","call","**to-rna**.","makes","expects","declation","name","definitions","name","at","read","to","more","passed.","descriptions","returns","passed.","itself.","executed,","does,","like","checks.","at","along","more","from","name.","name","more","that","you","body","head","could","from","count.","zero?","metadata.","body,","definition","once","returns"]},{"Key":" yeah,","Fragments":["what","either","but"]},{"Key":"yeah, what","Fragments":["he"]},{"Key":"what he","Fragments":["said."]},{"Key":"he said.","Fragments":[";)"]},{"Key":"the checks","Fragments":["against","against","would","into","more","in","are","were","into","in","for"]},{"Key":"checks against","Fragments":["the","the"]},{"Key":"against the","Fragments":["input","input","uppercased","string","uppercased","uppercased","sorted","spirit"]},{"Key":"message into","Fragments":["private","chunks"]},{"Key":"private methods","Fragments":["with","with","with","with","though.","that","for","via","via"]},{"Key":"methods with","Fragments":["descriptive","descriptive","intention-revealing","intent","a","explanatory"]},{"Key":"the phrase","Fragments":["checks","before","instead","is","from","-","through","string","case","?","data"]},{"Key":"phrase checks","Fragments":["into","into"]},{"Key":"checks into","Fragments":["private","methods","private","private","private","private","private","private","private","private","private","separate"]},{"Key":" Nice!","Fragments":["Would","I","I","I","I've","`frequencies`","clojure.string"]},{"Key":"Nice! Would","Fragments":["it"]},{"Key":"input into","Fragments":["private","some"]},{"Key":"logic checks","Fragments":["into","into","be","into","into","into","into","into"]},{"Key":"into methods","Fragments":["and","with"]},{"Key":"methods and","Fragments":["give"]},{"Key":"and give","Fragments":["them"]},{"Key":"give them","Fragments":["descriptive","intention-revealing","a","a","some","interesting"]},{"Key":"them descriptive","Fragments":["names?"]},{"Key":" Is","Fragments":["it","there","there","there","there","there","there","it","the","this","closing","there","there","must","there","there","it","there","the","`w12req`","there","not","there","this","there","the","there","this","there","the","there","converting","there","the","it","there","it","that","`rna-to-dna`"]},{"Key":"Is it","Fragments":["necessary","common","too","worthwhile","a","worth","possible","to","not","good","good"]},{"Key":"it necessary","Fragments":["to","to"]},{"Key":"necessary to","Fragments":["split","understand","check","name"]},{"Key":"to split","Fragments":["the","out","out","the","on,","the","the","on.","into"]},{"Key":"split the","Fragments":["message","response-for","logic","task","clauses","phrase.","string,"]},{"Key":"into chunks","Fragments":["and"]},{"Key":"chunks and","Fragments":["compare"]},{"Key":"and compare","Fragments":["against","to","to","that,"]},{"Key":"compare against","Fragments":["the","-","over","over","along","along"]},{"Key":"the uppercased","Fragments":["version","version","version","version"]},{"Key":"uppercased version","Fragments":["for","of","of","of","of","of","of","of","of"]},{"Key":"version for","Fragments":["each","vectors."]},{"Key":"each chunk?","Fragments":["It"]},{"Key":"chunk? It","Fragments":["seems"]},{"Key":"It seems","Fragments":["like","a","like","a","I","to","like","that","ugly","at","like","like","like","a","like","to","like","like"]},{"Key":"seems like","Fragments":["that","the","both","cheating","all","an","I'm","that","nucleotide-counts","most","an","a","i","the","this","a","there","surprisingly","the"]},{"Key":"that could","Fragments":["be","reduce","potentially","replace","be","be","be","be","be","work","be","happen","help","be","just"]},{"Key":"could be","Fragments":["simpler.","interpreted","a","reused","shortenedup.","cases","simpler?","extracted","more","a","done","a","even","improved","a","improved","reduced","confusing,","a","used","still","moved","`update-in`","hidden","processed","given","a","inlined","done","expressed","made","swapped","laid","useful","extracted","then","moving","accomplished","just","to","reused","solved","beta","used","slimmed","simplified","both","used","expanded","improved.","pulled","simplified","written","split","just","removed","simplified","replaced","done","reduced","split","used","combined","simpler","derived","simpler","simplifed","named","used","done","implemented","significant.","negative.","just","simplified.","`(=","done","simpler.","simplified","done","simplified","factored","simplified","on","more","also","simplified.","done:","a","a","accessed","avoided","called","changed","combined","removed","done","replaced","done","written","`(not=","avoided","simplified","simplified","`(pos?","dealt","reduced,","all","removed,","replaced","done","done","solved","a","as","written","simplified."]},{"Key":" Oh,","Fragments":["I","and","just","perfect!","right!","just","I","wow!","and","thanks,","neat!","sorry","right,","forgot","the"]},{"Key":"Oh, I","Fragments":["think","know"]},{"Key":"think I","Fragments":["understand","will","was","know","like","like","don't","like","drowned","would","got","could","prefer","could","would","could","can","would","should","might","agree","would","handled","like","came","could","would","could","would"]},{"Key":"I understand","Fragments":["what","it","the","correctly,","there","that","that","why","what","correctly,","the"]},{"Key":"understand what","Fragments":["you're","you","the","your","they","the","you","`dec-each-value`","you're","you","this","you"]},{"Key":"what you're","Fragments":["getting","testing","getting","trying","trying","saying","doing"]},{"Key":"you're getting","Fragments":["at.","at","extra"]},{"Key":"getting at.","Fragments":["Cool,"]},{"Key":"at. Cool,","Fragments":["I'll"]},{"Key":"Cool, I'll","Fragments":["try"]},{"Key":"I'll try","Fragments":["that.","what","your","it.","a","to","to"]},{"Key":"I really","Fragments":["like","like","like","like","like","appreciate","like","like","think,","like","like","like","wanted","would","like","like","want","like","don't","like","wish","wish","don't","like","don't","like","like","like","like","it.","appreciate","like","like","prefer"]},{"Key":"really like","Fragments":["the","this","the","to","tying","`string/blank?`,","the","this","how","that","the","where","resorting","this","the","your","the","to","the","the","the","the","how","the","the","it.","how","that","the","the"]},{"Key":"the `anagram-match?`","Fragments":["`let`"]},{"Key":"`anagram-match?` `let`","Fragments":["variable!"]},{"Key":" nice","Fragments":["'n","explanation."]},{"Key":"nice 'n","Fragments":["clear!"]},{"Key":" Had","Fragments":["to","a","to"]},{"Key":"Had to","Fragments":["look","ask"]},{"Key":"to look","Fragments":["up","into","from.","great,","for","at.","for.","at","a","more","at","further","at","at","at;","at","at","at","at","at.","into","into","at","into","into","at","up","into","into","more","at","at","stuff","at","into","at","at"]},{"Key":"look up","Fragments":["the","the","a"]},{"Key":"up the","Fragments":["docs","operation","threading.","repetition","parts","domain","whole","chain","sentence","first","`pretty-print`","wrong","clauses","function","\"use\"","strings","strings.","validation","if","`cond`","shortening","`shouting`","code","code."]},{"Key":"the docs","Fragments":["on","(http://clojuredocs.org/clojure_core/clojure.string/blank_q),","for","and"]},{"Key":"docs on","Fragments":["that."]},{"Key":"on that.","Fragments":["Yes,","I","It"]},{"Key":"that. Yes,","Fragments":["it"]},{"Key":"Yes, it","Fragments":["seems"]},{"Key":"it seems","Fragments":["it","natural","that","to","to","to","like","like","like","a","straightforward","that","that","that"]},{"Key":"seems it","Fragments":["would!"]},{"Key":"Thanks rubysolo,","Fragments":["good"]},{"Key":"rubysolo, good","Fragments":["idea."]},{"Key":" Yes,","Fragments":["that's","I","using","`(last","it's","of","that","I","that","I","I","a","indeed.","thank","but","the","all","I","that","I"]},{"Key":"Yes, that's","Fragments":["why"]},{"Key":"that's why","Fragments":["I","I","I","many","I"]},{"Key":"why I","Fragments":["said","frustratingly","should","didn't","didn't","used","didnt'","like","was","liked","did"]},{"Key":"I said","Fragments":["it.","before:"]},{"Key":" looking","Fragments":["good!"]},{"Key":" Oh","Fragments":["good","right,","of","no,","hey,","beer","I","here's","and","nice!"]},{"Key":"Oh good","Fragments":["catch"]},{"Key":"good catch","Fragments":[":)"]},{"Key":" How","Fragments":["did","about","about","about","about","about","about","about","about","about","about","about","do","would","about","can","do","would","about","come","would"]},{"Key":"How did","Fragments":["you"]},{"Key":"did you","Fragments":["find","know","just","choose","mean"]},{"Key":"find my","Fragments":["solution?","[\"improved\""]},{"Key":"my solution?","Fragments":["I"]},{"Key":"solution? I","Fragments":["can't"]},{"Key":"I can't","Fragments":["find","remember","figure","reason","find","interpret","figure","quite","figure","really","help","image","check","justify","work","think","see","figure","say","comment","quite","believe","believe","believe","tell","see"]},{"Key":"can't find","Fragments":["other","much","much"]},{"Key":"find other","Fragments":["solutions"]},{"Key":"other solutions","Fragments":["to","it","to","the","and","I","using"]},{"Key":"solutions to","Fragments":["read","this;","that","the"]},{"Key":"to read","Fragments":["or","backwards","\"map","aloud","because","because","the","because","and","and","using","using","becomes","the","the","if","until","the","each","and","very","up","and","each","better","if","and","a","up","it","in","and","is","if","more","since","than","and","between"]},{"Key":"read or","Fragments":["provide"]},{"Key":"or provide","Fragments":["feedback."]},{"Key":"to use","Fragments":["a","a","`last`","`re-seq`","the","`:else`","upper-case.","the","basic","\"native\"","a","pure","the","the","the","character","`clojure.string/upper-case`","the","use","`seq`","`last`","a","them.","the","`(require","defn-","`seq`","clojure.string/blank?","instead","`foo?`","`-`","`foo-\u0026gt;bar`","`last`","`let`","non-abbreviated","some","`mapv`","seq","clojure.string/lower-case","-\u0026gt;\u0026gt;","the","a","the","the","count","the","the","vars","one","authenticated","the","the","it","a","`map`","`join`.","nested","``cond``,","that","a","it","it,","`memoize`","your","`frequencies`","character","require/refer","`clojure.string/upper-case`","`nil`","```subs```","`clojure.string`","`defn-`","`defn-`","it","dashes","the","only","```clojure.string```.","a","`alphagram`","`:refer","the","keyword","the","idiomatic","pattern","`some-\u003e`","`when`.","full","constant","the","the","`swap!`","`\\p{javaLowerCase}`","`merge-with`","commas","it","a","a","a","multiple","it","`(def","`:require`","`not=`","`a-\u003eb`","macros,","the","your","it.","`-\u003e`","the","that","the","`defn-`","`frequencies`,","let,","a","condition","it","the","given","the","the","\"let\"","the","it.","(zero?","native","the","the","`case`","very","them","the","the","recur","the","the","an","`recur`","Atoms","the",":require.","the","simple","core","`condp`.","`:require`","`:require`","the","the","[`case`](http://clojuredocs.org/clojure_core/clojure.core/case).","the","a","`some`","a","the","a","more","`repeatedly`","the","`cond`","functions","the","it","`update-in`","an","`not=`","different","the","entire","string/blank?","a","`clojure.string/blank?`","`silence?`","nested","`defn-`","the","defonce","regular","assert","it","`reset!`","a","a","`case`","`letfn`","`zipmap`","list","an","\"sort\"","the","Clojure's","a","didn't","`frequencies`","it.","in","`:refer`","cond","the","`when`","`clojure.string/replace`.","the","`cond`","a","the","indentation",":pre"]},{"Key":"use a","Fragments":["`let`","`let`","more","more","string","regex","single","bad","simple","`cond`","let","property","better","`ns`","positive","case","single","String","language","different","function","map","`frequencies`","pre","function","couple","case","lot","set","symbol","`case`","require","counter","simple","following","`filter`","set","let","namespace","hash","hash","function","`:pre`","map","map","partial"]},{"Key":"a `let`","Fragments":["or","here,","isn't","with","feels","clause","block","form.","(or","block","and"]},{"Key":"`let` or","Fragments":["define"]},{"Key":"or define","Fragments":["vars"]},{"Key":"define vars","Fragments":["to","to","to","and"]},{"Key":"vars to","Fragments":["represent","represent","reference","give"]},{"Key":"to represent","Fragments":["the","the","individual","the"]},{"Key":"represent the","Fragments":["raw","characters","filtered"]},{"Key":"the raw","Fragments":["characters","strings"]},{"Key":"raw characters","Fragments":["so"]},{"Key":"characters so","Fragments":["that","that","that"]},{"Key":"so that","Fragments":["their","the","at","you","would","you","the","`\"AGC\"`","representation","future","is","a","I","future","they","it","the","the","the","when","they're","it","you","the","the","reversing","code","it","the","their","the","their","code","you","they","I","can","the","the","every","there","the","your","the","it's","they","your","it","your","there's","the","by","comments","the","you","there","there","it","the","`is-yelling?`","made","it","the","you"]},{"Key":"that their","Fragments":["meanings","order","order","name"]},{"Key":"their meanings","Fragments":["are"]},{"Key":"meanings are","Fragments":["more"]},{"Key":"are more","Fragments":["clear?","idiomatic.","than","complex","concise"]},{"Key":" Excellent","Fragments":["use"]},{"Key":"Excellent use","Fragments":["of","of"]},{"Key":"use of","Fragments":["`frequencies`","a","clojure.string/blank?.","every?,","private","condp","\"heard\",","a","`memoize`","`partial`","intention-revealing","clojure\"","`partial`!","regular","re-seq.","`frequencies`","`reduce`","`-›`","a","`reduce`.","that.","recursion","frequencies.","partial","a","`partial`","native","`get`","`zero?`.","destructuring","destructuring.","transients","(first","libraries.","`frequencies`","-\u0026gt;\u0026gt;","the","65","clojure.string","`merge`","`reductions`","`apply`.","`some`.","`ns`","`:require/:refer`","the","preconditions.","the","cond","`java.lang.Character`","reduce.","list","`except-self`","`some`","the","clojure.string.","`:pre`,","a","the","`frequencies`","`frequencies`.","`frequencies`.","`atom`.","```str```","something","frequencies.","more","regex","[`defn-`](http://clojuredocs.org/clojure_core/clojure.core/defn-)","`seq`","the","the","`condp`","`cond`","let","`mapv`","apply","`partition","`let`","assert","parens","defmacro","`(zero?","the","vectors","a","regular","`declare`.","`some`","the","the","the","problem-specific","the","regular","the","`empty?`","regex","the","`every-pred`","`use`","`fnil`","the","the","them.","`reverse`,","regex","str/trim","string/blank?","the","a","a","methods",":pre","standard","if-let,","Clojure's","converting","the",":else","functions.","map","string","`frequencies`","cond,","let,","a","an","the","`letfn`","`juxt`","last","'blank?'","the","chaining.","Java","`assert`","a","the"]},{"Key":"of `frequencies`","Fragments":["--","here?","here!","also","and","by","function"]},{"Key":"`frequencies` --","Fragments":["I","it","it"]},{"Key":"did not","Fragments":["know","know","know","write","\"feel\"","rearrange","pay","add","have","know","reflect","test","think","see","know","know","realize"]},{"Key":"not know","Fragments":["that","about","about","about","what","about","about"]},{"Key":"know that","Fragments":["function!","the","sort","you","organization","method","you","`\\W`","require","`set`s","`some`","could","the"]},{"Key":" Can","Fragments":["you","you","you","you","you","you","someone","you","you","you","you","you","you","you","you","you","you","you","you","you","you","those","you","you","the"]},{"Key":"think of","Fragments":["a","a","a","alanpeabody's","a","a","a","is","the","coding","a","it.","a","new","getting","chaining","a","a","a","using","a","a","a","a","a","a","doing","a","defining","`anagrams-for`","a","to","that!","`juxt`","a","`join`!","a","a","at","a","a"]},{"Key":"of a","Fragments":["different","seq.","way","RegEx","`cond`.","mystery","newbie","magic","simpler","`cond`","single","regular","`cond`.","set","regular","more","string?","way","string?","way","string?","string?","string?","string.","string?","way","given","clojure.core","string","fact","core","hash-map.","string.","strand.","fn),","regex","given","better","personal","way","shorter","word,","string","string","way","better","function","public","way","public","way","way","bigger","public","great","better","form","function,","way","sequence.","hint?","deal,","concept.","difference","function","threading","contract,","pause","tiny","generated","private","better","piece","hash-map","good","particular","map.","nucleotide","conversation","small","more","regular","(US)","(US)","set","RE","current","role","comparable","lazy","given","`doseq`","double","`for`","`cond`","character.","bigint.","good","string.","full-on","way","way","premature","given","`ref`","string,","similar","catch-all","different","protocol","private","tiny","grade,","useful,","pun.","random","better","`#(...)`","nasty","specific","recursive","higher","better","better"]},{"Key":"different regex","Fragments":["to","or","you","to","that"]},{"Key":"regex to","Fragments":["`split`","replace","cover","split","do","solve","solve","split"]},{"Key":"to `split`","Fragments":["on"]},{"Key":"`split` on","Fragments":["that"]},{"Key":"on that","Fragments":["might","path.","function","one.","false","in"]},{"Key":"that might","Fragments":["simplify","be","be","be","be","useful","be","makes","make","be","help","help","be","simplify","be"]},{"Key":"might simplify","Fragments":["the","your","a","things","things","your"]},{"Key":"simplify the","Fragments":["whole","check","expression","implementation","solution","solution.","various","code","solution.","silence","implementation","code.","`yelled?`","`all-upper?`","validation","`atom`","grade","add","`anagram-insensitive`"]},{"Key":"the whole","Fragments":["thing?","namespace?","thing","namespace","thing.","program.","thing","string.","sequence","namespace,","`and`","point","point","string","string","logic","program","thing","cond","string.","test","thing","thing","thing","lowercase","message","`when`","input","exercise","this","thing"]},{"Key":" Should","Fragments":["the","the","that","`random-string`","have"]},{"Key":"Should the","Fragments":["input","logic"]},{"Key":"input checking","Fragments":["functions","functions"]},{"Key":"checking functions","Fragments":["be","should","private."]},{"Key":"functions be","Fragments":["public","external."]},{"Key":"be public","Fragments":["or","if","is","or"]},{"Key":"public or","Fragments":["private?","private?"]},{"Key":" it","Fragments":["makes","throws"]},{"Key":"it makes","Fragments":["sense","a","things","more","the","it","very","sense","sense","me","more","your","the","it","it","the","sense","it","the","the","the","sense.","for","sense"]},{"Key":"makes sense","Fragments":["to","for","to","for","because","to","to","to","in"]},{"Key":"sense to","Fragments":["use","make","use","confine","do","break","have","talk","compare","introduce","add","just","stick"]},{"Key":"`let` here,","Fragments":["since"]},{"Key":"here, since","Fragments":["those"]},{"Key":"since those","Fragments":["two"]},{"Key":"those two","Fragments":["are"]},{"Key":"two are","Fragments":["private."]},{"Key":" Those","Fragments":["were","are","right","look","are"]},{"Key":"Those were","Fragments":["the"]},{"Key":"were the","Fragments":["names"]},{"Key":"the names","Fragments":["I","of","of","of","within","of","should","for","of","of","at","that","for","in"]},{"Key":"names I","Fragments":["was"]},{"Key":"was thinking","Fragments":["of!","about","that","what","about","about"]},{"Key":"thinking of!","Fragments":[":)"]},{"Key":" higher-order","Fragments":["functions"]},{"Key":"higher-order functions","Fragments":["for","may","that"]},{"Key":"functions for","Fragments":["the","the","many","conditions","the","incrementing","checking","working","this.","the","these","replacing","converting","your","what","my","the","each","is-question","all","everything"]},{"Key":"Thanks, I","Fragments":["didn't","submitted","meant","wasn't","had","had","would","will.","totally","had","didn't","discovered"]},{"Key":"I didn't","Fragments":["know","see","go","read","consider","make","know","get","know","knew","know","really","even","get","have","quite","know","know","mean","know","find","do","think","really","consider","really","think","like","go","know","know","notice","know","want","need","notice","know","know","know","find","know","know","think","explain","mean","know","even","know","end","go","mean","make","explore","notice","know.","know","recognize","do","know","test","like","find","make","need","think","need","realize","know","look","know"]},{"Key":"didn't know","Fragments":["about","about","about","about","about","about","that","that","about","about","about","about","about","about","that","about","what","it","about","about","better.","about","about","about","about","the","about"]},{"Key":"know about","Fragments":["re-seq","that","`clojure.string/upper-case`","thymidine","frequencies,","the","`frequencies`","the","re-seq","clojure.string/blank?,","it!","the","the","`cond`.","the","Java's","it.","`declare`,","`\\p{L}`,","[`re-seq`](http://clojuredocs.org/clojure_core/clojure.core/re-seq).","frequencies.","`defn-`.","```defn```,","that","frequencies","the","the","`assert`?","performance,","that,","the","\"blank?\"","biginteger,","Ruby","the","blank?","`re-seq`,","re-req","this."]},{"Key":" Their","Fragments":["scientific"]},{"Key":"Their scientific","Fragments":["names"]},{"Key":"scientific names","Fragments":["are"]},{"Key":"names are","Fragments":["uracil","very","generally","preferred","generally","more","actions","reserved","so","standard","generally","fantastic,","unique","unique.","changed","just"]},{"Key":"are uracil","Fragments":["and"]},{"Key":"uracil and","Fragments":["thymidine."]},{"Key":" :D","Fragments":["Thanks.","About"]},{"Key":" You","Fragments":["could","could","can","make","could","mean","could","should","can","probably","could","could","can","might","are","may","are","can","could","could","can","wrote:","don't","don't","still","could","could","could","could","could","mean","could","still","maybe","could","could","should","can","can","can","could","can","could","might","can","probably","don't","could","could","can","might","mean","can","maybe","could","can","may","might","can","could","import","should","can","can","don't","should","can","could","have","could","don't","could","could","could","might","might","could","are","solution","may","might","could","may","should","could","trim","may","have","could","could","could","may","repeat","might","might","could","can","could","are","can","could","still","can","could","can","could","might","could","could","can","could","can","could","taught","can","are","could","could","can","should","could","can","make","can","can","might","don't","could","might","are","might","can","could","can.","could","can","don't","could","might","are","should","can","got","could","can","could","could","can","could","can","could","could","could","don't","repeat","could","can","might","could","could","could","might","could","don't","could","might","could","might","don't","should","can","do","shouldn't","might","might","might","might","can","could","can","can","might","might","can","can","can","could","should","can","shouldn't","could","could","can","might","can","could","could","could","can","might","could","can","can","can","are","could","could","could","don't","can","could","could","could","could","could","could","could","could","last","could","have","don't","are","can","don't","comment","could","might","could","can","might","can","could","might","could","can","should","still","could","could","and","could","can","could"]},{"Key":"You could","Fragments":["also","define","consider","probably","probably","probably","make","probably","use","require","spare","actually","use","also","put","spare","make","write","use","drop","use","improve","blend","make","create","also","create","make","create","split","get","also","do","also","declare","consider","consider","probably","make","also","also","just","make","reduce","consider","reduce","make","also","probably","clear","maintain","reuse","consider","extract","consider","make","use","just","imagine","group","make","also","check","try","extract","make","extract","use","think","eliminate","also","consider","also","also","simplify","eliminate","use","also","also","use","spare","use","actually","use","avoid","use","`reduce`","use","also","also","create","also","also","also","also","also","do","look","just","also","then","try","look","get","normalize","use","simplify","still","try","always","get","use","drop","also","use:","use","remove","use","use","include","include","avoid","even","use","do","even","use","use","replace","use","avoid","define","look","refer","always","also","also"]},{"Key":"could also","Fragments":["use","help","think","be","reverse","reduce","use","use","give","reorder","use","take","try","do","use","get","apply","use","use","just","fold","use","look","try","use","try","look","then","use","be","create","be","look","bundle","probably","replace","use"]},{"Key":"also use","Fragments":["defn-","destructuring","clojure.string/blank?","`refer`.","`frequencies`.","the","`(students","`clojure.string/upper-case`","string","the","the","Refs","`case`.","Refs","boolean","`apply`"]},{"Key":"use defn-","Fragments":["which","for"]},{"Key":"defn- which","Fragments":["is","let"]},{"Key":"which is","Fragments":["the","not","prefered.","given","ugly","a","in","csharp,","the","response-for","obviously","unlike","currently","what's","the","generally","pretty","nice","the","not","so","pretty","more","way","meant","a","variadic","probably","a","evaluated","not","the","more","maybe","probably","`-\u003e\u003e`","the","just","what","then","probably","required","why"]},{"Key":"is the","Fragments":["short","additional","only","second","first","trailing/hanging","idiomatic","result","result","choice","same","rule","same.","response.","response","idiomatic","necessity","real","necessity","answer","use","more","example:","most","best","\"proper\"","side","result","same","usual","better","case.","intent","only","main","structural","function","first","different","main","put","trailing","more","only","ideia,","use","ability","only","basis","community","last","difference","return","\"step\",","same","same","advice","\"step\"","range.","general","first","*step*.","things","clojure","exact","first","question","first","idea","first","filtered","right","function","first","under-appreciated","normalization","anagram-ish","best","first","first","check","(seq","only"]},{"Key":"the short","Fragments":["form"]},{"Key":"short form","Fragments":["for","for"]},{"Key":"form for","Fragments":["defn","binding","functions.","that).","making","anonymous"]},{"Key":"for defn","Fragments":["^:private"]},{"Key":"Oh right,","Fragments":["might"]},{"Key":"right, might","Fragments":["be"]},{"Key":"be a","Fragments":["good","way","better","regular","plain","little","bit","plain","third","good","clear","workaround,","bit","good","hint","regex?","bit","little","whole","bit","non-public","nitpick.","bug.","good","word-count","top","great","better","matter","vector","better","better","better","bit","pain","more","say-nothing?","matter","bit","better","problem","good","case-insensitive","method","bug.","good","little","little","sledge","little","feature","better","better","matter","comment","preference.","lot","particularly","regex,","one-liner","good","lazy","better","bit","good","good","public","more","little","matter","docstring","matter","little","bit","little","nice","little","bit","bit","need","little","need","little","good","simpler","lot","little","bit","good","much","bit","little","bit","bit","more","lot","bit","case","good","right","matter","set.","map,","bit","bit","lot","fine","better","simpler","function","bit","less","trend","reasonable","good","way","single-recurse","little","good","bit"]},{"Key":"a good","Fragments":["idea","compromise.)","compromise.","idea.","idea","question,","solution","argument,","idea","fit","point","point,","practice.","idea.","plan","idea","way","trick.","way","one.","thing","chunk","editor","idea.","practice","idea","job","thing.","learning","idea","idea.","reason","practice","case","docstring","name.","thing","call;","learning","sort","experiment.","start","idea.","alternative","practice","question.","idea?","opportunity.","time","indicator","idea","case","reason","time","sign","time","start!","Clojure","example","time","name,","idea","regex","fit","reason","idea,","level","idea","explanation.","thing.","name","point","sign"]},{"Key":"good idea","Fragments":["to","to","to","to","to","for","to","to","to"]},{"Key":"idea to","Fragments":["actually","`use`","make","communicate","use","encourage","start","add","reduce","add"]},{"Key":"to actually","Fragments":["read","properly"]},{"Key":"actually read","Fragments":["the"]},{"Key":"read the","Fragments":["README.","spec","fn","code","code,","same","code","code","docs","code","README,","list","README."]},{"Key":"yeah, either","Fragments":["way"]},{"Key":"either way","Fragments":["works.","still.","(and","--","so","with","and"]},{"Key":"way works.","Fragments":["It's"]},{"Key":"works. It's","Fragments":["good"]},{"Key":"It's good","Fragments":["you","functional","to"]},{"Key":"good you","Fragments":["thought"]},{"Key":"you thought","Fragments":["about","about","about","about","about","about","about"]},{"Key":"thought about","Fragments":["the","using","turning","creating","that","that","making","defining","that","returning","expanding","using","checking","using","using","where","putting","it","rearranging"]},{"Key":"about the","Fragments":["edge","\"base","`frequencies`","\"magic","clojure","variable","naming","nested","guard","namespace","various","strange","readability.","existence","constants,","extra",":require","?","`verse`","`not=`","language.","use","name","special-case","function","thing","fact","if","implementation","whitespace","way","right","choice","order","use","naming","language,","language.","difference","idiomatic","\u003ccode\u003e#\u003c/code\u003e","`transcribe`","names","let","use","\u003ccode\u003e#pattern\u003c/code\u003e","input","\"4?\"","reminder","\"?\"","`for`","case","identity","score","names","\"forced","clojure","all-uppercase","instructions.","regex","line","parameter",":pre","efficiency","amount","as-\u003e","frequencies","\"if\"","`sing`","fact"]},{"Key":"the edge","Fragments":["case."]},{"Key":" sounds","Fragments":["good"]},{"Key":"sounds good","Fragments":["to","to"]},{"Key":"good to","Fragments":["me.","see","me.","me.","me.","me!","me!","me.","me.","see","see","me.","me.","me.","me.","me","me.","go,","me.","me.","know.","go:","know.","go.","spread","put","put","keep","see","me,","me.","me,","know.","me.","use","me,","me.","me.","me!","me.","me.","bind","me.","extract","me.","get","me.","know","me.","avoid","know","check","understand"]},{"Key":" pardon","Fragments":["me,"]},{"Key":"pardon me,","Fragments":["that's"]},{"Key":"me, that's","Fragments":["`clojure.string/blank?`"]},{"Key":"Yes, I","Fragments":["agree.","know,","think","thought","meant","definitely","think"]},{"Key":"I agree.","Fragments":["Thanks!","It","```blank?```","However,"]},{"Key":" Good","Fragments":["idea,","call.","point.","point,","call,","call.","point!","work,","idea,","first","point.","call!","call.","point.","points,","point.","one.","first","enough","points","catch,",":)","to","call,","point","enough","stuff:","catch!","work!","feedback,","to","catch.","use","readability.","point,","call","catch","point,","use","calls","start.","use","use","point.","call","overall","point","tip","overall","overall","points.","point,","effort;","Job!","luck!","point.","job","reuse"]},{"Key":"Good idea,","Fragments":["I","thanks!"]},{"Key":"idea, I","Fragments":["like"]},{"Key":" Sorry","Fragments":["guys","for","about","everyone,","for","about","for","twillis,"]},{"Key":"Sorry guys","Fragments":["--"]},{"Key":"guys --","Fragments":["Language"]},{"Key":"-- Language","Fragments":["barrier!"]},{"Key":"see and","Fragments":["agree."]},{"Key":"and agree.","Fragments":["Usually"]},{"Key":"agree. Usually","Fragments":["I"]},{"Key":"Usually I","Fragments":["aim"]},{"Key":"I aim","Fragments":["to"]},{"Key":"aim to","Fragments":["code"]},{"Key":"to code","Fragments":["and","outside","points.","generation"]},{"Key":"code and","Fragments":["manipulate","it","bikesheds","know","you'll","I","move","(hopefully)"]},{"Key":"and manipulate","Fragments":["collections"]},{"Key":"manipulate collections","Fragments":["based"]},{"Key":"collections based","Fragments":["on"]},{"Key":"the idea","Fragments":["we","of","of","is","of","of","that","of","of"]},{"Key":"idea we","Fragments":["should"]},{"Key":"we should","Fragments":["all"]},{"Key":"should all","Fragments":["do"]},{"Key":"all do","Fragments":["to"]},{"Key":"do to","Fragments":["that","convert","make","avoid"]},{"Key":"to that","Fragments":["of","value*.","`fn`","set","point,","particular","of","(^c^)"]},{"Key":"that of","Fragments":["a","course.","the","idiomaticity"]},{"Key":"a seq.","Fragments":["The","There"]},{"Key":"seq. The","Fragments":["question"]},{"Key":"The question","Fragments":["of","check","mark"]},{"Key":"question of","Fragments":["performance","performance","familiarity.","testability...)","style,"]},{"Key":"of performance","Fragments":["is","versus"]},{"Key":"performance is","Fragments":["probably","an"]},{"Key":"is probably","Fragments":["what","fine.","faster","a","more","better","a","to","a","overkill","more","much","the","not","up","overkill","a","on","where","overkill.","better","less","the","more","going"]},{"Key":"probably what","Fragments":["hunts"]},{"Key":"what hunts","Fragments":["most"]},{"Key":"hunts most","Fragments":["clojureans"]},{"Key":"most clojureans","Fragments":["and,"]},{"Key":"clojureans and,","Fragments":["even"]},{"Key":"and, even","Fragments":["in"]},{"Key":"even in","Fragments":["the","short","the"]},{"Key":"the simplest","Fragments":["cases","things"]},{"Key":"simplest cases","Fragments":["I"]},{"Key":"cases I","Fragments":["believe"]},{"Key":"I believe","Fragments":["we","it's","the","the","it","using","my","the","that","is","that","`join`","it","to","you'll","it's"]},{"Key":"believe we","Fragments":["don't"]},{"Key":"we don't","Fragments":["even","have","have","have"]},{"Key":"don't even","Fragments":["consider","get","need"]},{"Key":"even consider","Fragments":["the","this."]},{"Key":"consider the","Fragments":["option","case","visibility","use"]},{"Key":"the option","Fragments":["to","that"]},{"Key":"option to","Fragments":["access"]},{"Key":"to access","Fragments":["the","the","an","an","the"]},{"Key":"access the","Fragments":["last","correct","current"]},{"Key":"the last","Fragments":["element","whereas","line.","line","argument","position","line","character","line","character","character","two","character","chacacter","character","character","pair.","line","parenthesis","binding","time","element","form","character","time","character","two","line","character","/non-whitespace/","comment","character:","ten","character","line","element","line","character.","character","line","point","week,","line","4","value","version,","function","day","7","expression","element.","argument","line.","generated","time).","statement","element","argument.","test,","nitpick","block","test","of","base","character","clause."]},{"Key":"last element","Fragments":["like","of","of","in"]},{"Key":"element like","Fragments":["that."]},{"Key":"like that.","Fragments":["We've","Thanks!","Similarly"]},{"Key":"that. We've","Fragments":["been"]},{"Key":"We've been","Fragments":["blinded","through"]},{"Key":"been blinded","Fragments":["by"]},{"Key":"blinded by","Fragments":["them","my"]},{"Key":"by them","Fragments":["to"]},{"Key":"them to","Fragments":["avoid","make","the","Maps."]},{"Key":"to avoid","Fragments":["accessing","using","it?","regexp","it","calling","the","processing","a","using","repeating","repeating","repeating","doing","this?","the","nesting.","problems","all","using","additional","all","importing","nested","converting","consuming","consuming","converting","implementing","Java","doing","doing","repeating","the","the","mapping","having","overhead","it","getting","processing","processing","filtering","exporting","exporting","magic","these","regexes","code","surprise,","a","the","avoid","recomputing","calling","repeatedly","passing"]},{"Key":"avoid accessing","Fragments":["collections"]},{"Key":"accessing collections","Fragments":["from"]},{"Key":"collections from","Fragments":["the"]},{"Key":"other end","Fragments":["like"]},{"Key":"end like","Fragments":["that!"]},{"Key":"like that!","Fragments":[";)"]},{"Key":"think what","Fragments":["BrianHicks","rubysolo","you've"]},{"Key":"what BrianHicks","Fragments":["is"]},{"Key":"BrianHicks is","Fragments":["getting"]},{"Key":"is getting","Fragments":["at","a"]},{"Key":"getting at","Fragments":["is","(finding"]},{"Key":"at is","Fragments":["that","not"]},{"Key":"is that","Fragments":["out","normal","it","for","in","this","you","it","you","the","it's","they","you","you","it","the","I","it's","I","you","\"is_\"","the","when","`is-all-uppercase?`","reversed.","currently","my","`lowerA`","you","if","requiring","I","your","it's","'prefix'","the","you","now","a","each","Atoms","the","each","it's","`seq`s","there","maps","the","what","the","you","conditions","all","you","this","in","`yelling?`","you","`.endsWith`","Clojure","you","`nil`"]},{"Key":"that out","Fragments":["of","tonight","would","with"]},{"Key":"of the","Fragments":["four","options","responses","test","latter,","tests?","specs","domain,","conditions","string?","other","methods","string.","string","\"?\"","string","last","characters","parameter",".toUpperCase","functions","two","scope","exercise.","domain","reader.","sequence","risk","code,","habit","argument","check?","same","conditions.","predicates.","module's","implementation.","Seq","current","last","differences","transformation","`recur`","expected","domain.","`clojure.core`","work","initial","code.","`(remove","`require`,","primary","problem.","type-responses","conditional.","submission...","function?","nucleobases","symbol","last","`letfn`","test","`default-nucleotide-counts`","exception","nucleotide","clutter","set","processing","code","function","anonymous","type","previous","filter","same","tests","bob","code","processing","regex","tradeoff","defn","assignments","empty","clojure.string","testing","law","function","no-op","more","response","verse","way","forms","`contains?`","java","fully","result","starting","raw","name","deprecation.","number","Java","string","input.","function,","function","shortest","nested","trimmed","last","fn","solution,","conventions?","name.","(pesky)","problem","special","phrase","`normalizations`","solution","expressiveness","`(remove","duplicate","problem.","tests","output.","comments","Clojure","solution","source","string","logic.","library","number","phrase","duplication","problem.","functions","very","cond","include","other,","code.","sing","`reduce`","functions","file","function","words","initial","code.","name","code","two","public","conditionals","same","public","last","regular","regular","problems","regular","conditions.","expressions","`get`","time,","public","feature","public","problem","input","song,","declarations","things","namespace","other","fact","function","if","intent.","function.","`word-count`","`not`","(sub)intentions","site.","box","other","checks.","many","whitespace","input","cases","double","implementation","previous","input","definition","problem.","java.util.Calendar","work","first","phrase","map-reduce","`cond`","Clojure","helper","`word`","books","`word-count`","word,","differences.","method","time","tests","function","DNA","Clojure","specification?","specification?","time","above.","options,","string.","correct","namespace,","`let`","interleaved","values","month","work","functions","standard","blank?","file","hack","\"default","work","required","program.","code","original","`other-words`?","`if`","`new`","implementation","file?","string?","function","file.","split","Java","input","letters","closing","previous","two.","characters.","domain's","transformation.","function.","format","expression","function.","function","function","`and`-ed","responses","first","code","built","threading","function.","README.","explicit","DNA","poor","robot","form.","code?","forms","-\u003e\u003e","shortest","other","namespace","regular","string.","fact","string","visual","board","fact","simpler","thread","Protocol.","month","month.","level","Character","levels","sorted/upper-cased","thought","`if`","string","partial","test","test","existing","ASCII","Atoms","calls","last","code","formatting","Java","previous","(.endsWith)","binding","time,","thread","Atoms","calls","macro!","functions","fact","invalids","map","box,","incoming","number","values","same","conditions","`grade`","`or`.","contains?","translation)","good","atom","same","macros,","text","atom","thrush","function","function","`cond`,","clojure","`reduce`","`remove","\"thread","features","A","`reverse`.","isYelling","functions","recur","reference","type","object","application","seq","long","DNA","digits","regex","conditions","`map`","given","function","code","fact","fact","function","shortest","method","other","REPL,","set:","`(=","collections","problem.","chaining","lot.","phrase","empty?","intermediate","standard","line.","naming","submissions,","logic","public","statements","`not`.","strands.","code.","candidate.","for","condition.","word-count","file","input.","\\U","test","symbol.","[k","statements","tests:","\u003ccode\u003econd\u003c/code\u003e","\u003ccode\u003e(not","string,","letters","predicates","main","domain","string.","string","`-\u003e`","`as-\u003e`","sorted","order","solution.","`case`","interpose","function","cond.","trade-offs","chain.","case.","`case`,","methods","`cond`","-\u003e\u003e.","`for`","code","API","idioms","docstring","call","spec.","`wednesteenth-*`","response","file.","feedback!","\"lookup\"","re-req,","\"Clojure","conditions,","static","code.","sentence","function","function","language.","`(apply)`","conditional","exercise.","conditional","line","regexes","number","code","specific","lines,","code","input","`when`","target","regex","nested","library.","last","input","main","yelling","big","`let`","dots","special","\"idiomatic\"","sets"]},{"Key":"the four","Fragments":["test"]},{"Key":"four test","Fragments":["cases,"]},{"Key":"test cases,","Fragments":["three","but"]},{"Key":"cases, three","Fragments":["of"]},{"Key":"three of","Fragments":["them"]},{"Key":"them are","Fragments":["very","questions.","'safe',"]},{"Key":"are very","Fragments":["specific.","minor","readable","slow,","similar.","clear","easy"]},{"Key":"very specific.","Fragments":["One"]},{"Key":"specific. One","Fragments":["covers"]},{"Key":"One covers","Fragments":["silence,"]},{"Key":"covers silence,","Fragments":["one"]},{"Key":"silence, one","Fragments":["covers"]},{"Key":"one covers","Fragments":["shouting,"]},{"Key":"covers shouting,","Fragments":["a"]},{"Key":"shouting, a","Fragments":["third"]},{"Key":"a third","Fragments":["covers","way!","strategy","argument"]},{"Key":"third covers","Fragments":["questions."]},{"Key":"covers questions.","Fragments":["The"]},{"Key":"questions. The","Fragments":["fourth"]},{"Key":"The fourth","Fragments":["one"]},{"Key":"fourth one","Fragments":["is"]},{"Key":"one is","Fragments":["described","mapping","correct.","`:else`.","more","private","better?","much","ugly","better","simpler","very","definitely","easier","naming","about","private,","actually","more","only","invalid,"]},{"Key":"is described","Fragments":["in","in"]},{"Key":"described in","Fragments":["a","more","the"]},{"Key":"in a","Fragments":["much","dialog","bit","private","rush","single","cond","top","REPL:","```ends-with?```","function","real","sequence","REPL","current","previous","TDD","harder","single","single","given","function.","more","non-deterministic","separate","case","bigger","small","`let`","bunch","ns","better","`letfn`","string.","string...\"","new","collection","way","several","functional","form","collection","private","function","different","real","namespace?","much","let","`let`","bunch","loop","multi-threaded","transaction","single","namespace","for","`let`","major","phase,","good","way","more","hash","function","new","namespace.","dictionary.","given","later","`let`","record.","`cond`","closure.","non-concurrent","non-concurrent","set.","let,","namespace.","more","real","letfn","collection","let.","hot","CPU","`set`","`cond`","less","`ref`","transaction","`dosync`","list:","map","moment","question","sequence,","sequence","way","rather","let.","real","generic","(yell?)","normal","map.","threading","while","single","`for`","git","more","[new","single","throughly","'?',","list.","short-hand","comment","map"]},{"Key":"a much","Fragments":["more","better","wider","simpler","better","cleaner","nicer","more","simpler","shorter","more","too","better"]},{"Key":"much more","Fragments":["generic","obvious.","readable,","cleaner.","natural","readable.","efficient","code","efficient","effective","people","efficient","readable.","simply.","effective","effective","effective","effective","complication","effective","idiomatic","clear.","readable,","complicated.","concise","significant","clojure-y","readable","but","straightforward.","readable:","readable","idiomatic.","readable,","terse","succinct.","elegantly.","complex."]},{"Key":"more generic","Fragments":["manner,","for","with","functions","to"]},{"Key":"generic manner,","Fragments":["and"]},{"Key":"manner, and","Fragments":["makes"]},{"Key":"and makes","Fragments":["a","the","the","the","good"]},{"Key":"makes a","Fragments":["great","significant","private","much","lot","difference,"]},{"Key":"a great","Fragments":["catch-all.","solution.","nit!","\u0026amp;","Lisp","construct","learning","tool","case","learning","exercise","deal","combination","suggestion.","name","tool","name","interactive"]},{"Key":" In","Fragments":["regards","the","your","general,","addition,","something","the","particular","this","what","your","the","other","that","your","`require`","answer","theory,","terms","terms","a","Clojure,","Clojure,","general,","this","`random-robot-name`","normalization","my","clojure","context","case","normalize-sentence,","(add),","the","`bottle-phrase`","`first-line`","terms","`line2`","general,","this","case","`anagrams-for`","either","terms","my","terms","the","my","general,","calculate-response,","this","case","the","`grade`:","essence,","fact,","this","this","clojure","these","terms","reference","the","reality,","terms","the","fact","this","'contains-some-letter?'","Clojure","general","my","the","other","rna-complement,"]},{"Key":"In regards","Fragments":["to"]},{"Key":"regards to","Fragments":["```.endsWith```","making","development","`nil-to-zero`","you","the","uniqueness,"]},{"Key":"to ```.endsWith```","Fragments":["vs."]},{"Key":"```.endsWith``` vs.","Fragments":["```(="]},{"Key":"vs. ```(=","Fragments":["(last"]},{"Key":"```(= (last","Fragments":["...```,","utterance)","utterance)","convo)"]},{"Key":"(last ...```,","Fragments":["I"]},{"Key":"...```, I","Fragments":["believe"]},{"Key":"believe it's","Fragments":["more","idiomatic"]},{"Key":"it's more","Fragments":["that","readable","idiomatic","idiomatic","idiomatic.","readable","of","idiomatic","clear","common","idiomatic","self-explanatory","readable","idiomatic","idiomatic"]},{"Key":"more that","Fragments":["the"]},{"Key":"that the","Fragments":["latter","`(sort","submission","code","'?'","constants","intention","first","stuff","problem","two","square","more","recursion","counts","caller","input","message","argument","tests","last","base","response","new","initial","code","name","whole","range","function","bindings","highest","third","counts","goal","requirements","from","name","only","library","public","message","input","order","extra","lack","alphanumeric","public","usage","same.","person","admittedly","`let`","requirements","order","fact","candidates","partial","logic","code","code","`example.clj`","message",":require","pre","intent?","input","changes","second","source","input","tests","whole","reader","semantics","names","whole","entire","functions","regex","only","step","final","lets","condition","board-string","function","string","logic","generic","literal","DNA","only","robot","tests","check","operations","change","beer",":use","DNA","tests","tests","`question?`","first","`(some","global","message","keys","tests","functions","filter","SHOUTING!","best","test","way","way","conversion","question"]},{"Key":"the latter","Fragments":["form","seemed","comes","returns","-"]},{"Key":"latter form","Fragments":["allows"]},{"Key":"form allows","Fragments":["you"]},{"Key":"allows you","Fragments":["to","to","to","(or","to","to","to","to","to"]},{"Key":"you to","Fragments":["avoid","use","use","is","think","inconsistent","take","use","call","know","remove","explicitly","have","specify","explicitly","find","always","get","avoid","convert","make","generate","avoid","use","simplify","avoid","substring.","construct","simplify","avoid","simplify","get","get","have","do).","make","put","create","call","create","refer","call","make","simplify"]},{"Key":"avoid using","Fragments":["type-specific","`first`/`second`.","one","`ns-resolve`.","`reset!`,"]},{"Key":"using type-specific","Fragments":["functions."]},{"Key":"type-specific functions.","Fragments":["I"]},{"Key":"functions. I","Fragments":["would","would","think","still","finally","also","think","could","tried","took"]},{"Key":"would suspect","Fragments":["that"]},{"Key":"suspect that","Fragments":["```.endsWith```,","might"]},{"Key":"that ```.endsWith```,","Fragments":["by"]},{"Key":"```.endsWith```, by","Fragments":["necessity,"]},{"Key":"by necessity,","Fragments":["must"]},{"Key":"necessity, must","Fragments":["execute"]},{"Key":"must execute","Fragments":["in"]},{"Key":"execute in","Fragments":["linear"]},{"Key":"in linear","Fragments":["time"]},{"Key":"linear time","Fragments":["as"]},{"Key":"time as","Fragments":["well.","a","if"]},{"Key":" I'm","Fragments":["not","not","a","not","on","not","sure","always","going","finding","nominating","curious","not","struggling","hoping","sure","posting","a","not","somehow","always","getting","not","not","especially","working","very","not","not","definitely","playing","not","wondering","not","not","not","not","pretty","not","not","not","not","not","new","kind","aware","not","not","now","not","not","not","not","getting","finding","not","aware","definitely","still","unsure","having","still","curious","not","curious","not","using","not","not","going","not","also","not","not","also","a","not","new","not","_sure_","not","not","not","by","a","not","really","not","trying","really","not","not","getting","not","not","a","a","pretty","not","a","not","wondering","not","still","not","using"]},{"Key":"I'm not","Fragments":["sure","too","sure","sure","sure","particularly","sure","sure","sure","sure","sure","sure","really","too","sure","sure","a","sure","sure","worthy","100%","sure","aware","really","aware","sure","excited","sure","familiar","in","sure","overly","sure","too","seeing","a","going","happy","quite","sure","sure","sure","completely","sure","sure","sure","a","entirely","convinced","sure","certain","sure","a","much","sure","sure","very","sure","sure.","sure.","really","sure","sure","far","sure","sure","too","a","crazy","seeing","sure","sure","sure","sure","sure","sure","sure","sure","completely","sure","entirely","sure","sure","a","convinced","sure","sure","sure","yet","happy","sure","sure","a","happy","happy","a","sure","sure","sure","sure","sure","sure","sure","sure","happy","mad","all","sure","happy","a","a","sure","that","sure","familiar"]},{"Key":"not sure","Fragments":["what","it","why.","I","what","that","if","it","what","how","I","about","why","it","I","I","about","I","how","it's","if","if","about","if","what's","you","about","how","I","how","\"histogram\"","`#(not-same?","if","if","about","how","that","I","how).","if","stands","that","if","how","about","why","if","when","what's","that","that","how","how","why","what","you","I","that's","if","whether","it","that","if","this","at","about","if","if","if","I'm","how","if","about","if","how","what","how","whether","what","as","what's","I've","how","how","about","that","about","it's","if","about"]},{"Key":"sure what","Fragments":["you","to","the","`\\?`","the","you","you're","to","it","you","I","part","is"]},{"Key":"what you","Fragments":["mean","do,","accept","want","don't.","mean,","have.","need:","need?","think","think.","mean","are","think","need","are","need.","think.","said","said","intended","gain","have.","mean","have","are","pass","mean,","expected","want.","need","mean","want.","have","want","intend","really","could","mean","are","mean?","do","think.","want","intend.","were","intended?","want","want","mean","want","were","are","mean.","describe","are","want","want:","had","had"]},{"Key":"you mean","Fragments":["with","by","by","that","a","```frequencies```","like","`w2freq`.","changing","by","by","to","to","by","?"]},{"Key":"mean with","Fragments":["robust."]},{"Key":"I thought","Fragments":["of","of","that","```.endsWith```","a","it","about","about","I’d","of","of","clojure","it","I","about","it","that","the","about","I'd","it","clojure","I","submitting","about","of","that","that","of","it","I","about","that","that","it","I'd","that","I'd","that","about","it","you","it"]},{"Key":"thought of","Fragments":["using","the","that!","\"hasher\"","is","that.","as","expressing","it","passing","this","a","a","that","that.","that"]},{"Key":"of using","Fragments":["`last`","clojure.string/upper-case.","the","the","an","set","`clojure.string/replace`","explicit","`fn`,","`frequencies`.","`java.lang.Math`.","the","the","`condp`.","a","letfn,","`every?`","`is-silence?`","Clojure!","`assert`,","a"]},{"Key":"using `last`","Fragments":["and","to","over","to","and","rather"]},{"Key":"`last` and","Fragments":["I","`=`","the"]},{"Key":"and I","Fragments":["understand","assumed","need","think","believe","like","have","should","like","will","guess","think","would","totally","wouldn't","figured","originally","think","wanted","think","like","suppose","dislike","have","don't","do","couldn't","do","think","specifically","should","haven't","don't","can't","would","left","therefore","also","might","noted","had","refactored","don't","considered","need","think","did","would","don't","ended","thought","see","know","could","must","was","wanted"]},{"Key":"understand it","Fragments":["does","for","like",";)","but"]},{"Key":"it does","Fragments":["not","make","to","not","not","in","in","the","than","work,","look","this","say","combine"]},{"Key":"does not","Fragments":["affect","use","include","tell","have","have","really","make","depend","reflect","work","change","describe","really","make","solve","make","handle","work","lexically","use","allow","make","handle","equal","support","guarantee"]},{"Key":"not affect","Fragments":["here"]},{"Key":"affect here","Fragments":["but"]},{"Key":"here but","Fragments":["if"]},{"Key":"but if","Fragments":["you","it","you","it","you","you","one","it's","you","the","you"]},{"Key":"if you","Fragments":["use","defined","send","couldn't","couldn't","lowercased","ask","think","just","prefer.","port","gave","create","couldn't","use","used","don't","couldn't","put","really","can","can","can't","know,","gave","could","just","stick","need","extracted","think","`map","map","will","have","imagine","used","have","are","wanted","will","re-order","made","ignore","did","had","actually","use","koved","extract","inlined","extract","feel","will","call","make","just","don't","consider","will","have","moved","pulled","want","basically","made","wanted.","wanted","know","search","can","want","wanted","wrap","wanted","throw","used","like.","are","refactored","incorporated","like.","see","don't","separated","need","reorder","like.","go","want","had:","extract","can","can","extract","want","tried","keep","do","give","want","want.","implement","were","do",":refer","do","wanted","first","end","can","change","find","are","really","created","split","used","want","don't","want","were","were","look","cleaned","extract","don't","change","change","wanted","didn't","need","used","lower","could","inverted","want"]},{"Key":"you use","Fragments":["it","(in","a","the","predicate","`ns`","a","only","a","the","`\\w+`","elsewhere,","`defn-`,","the","in","zero?","one","an","clojure.string","a","`\\W+`","the","it","expressions,","`for`","instead","separate","functions","`f`"]},{"Key":"use it","Fragments":["the","here","here","in","that","all","in","for","is","in","that","in","like","in","directly?","-","in","as"]},{"Key":"it the","Fragments":["language","same"]},{"Key":"the language","Fragments":["goes","of","of","I've","itself,","of","is"]},{"Key":"language goes","Fragments":["through"]},{"Key":"goes through","Fragments":["all"]},{"Key":"through all","Fragments":["the","the","the"]},{"Key":"all the","Fragments":["elements","string","feedback","strings,","help.","parenthesis?","Java","closing","work","time","tests?","tests,","nucleotides,","functions","`ns`","commas","bindings","test","non-numeric","great","tests","time","other","pieces","checks","tests.","other","other","results","manual","possible","conditions","closing","non-word","defns","string","letters","functions","sentiment","tests","regexes,","functions","tests?","characters","feedback","ascii","clojure","state","code.","very","terms","rest.","duplication,","requested","functions","(cond)","tests;","possible","changes","tests.","intermediate","string","way,"]},{"Key":"the elements","Fragments":["to"]},{"Key":"elements to","Fragments":["get"]},{"Key":"to get","Fragments":["the","regexes","the","on","to","used","away","approved?","at","the","even","shorter","the","rid","the","the","the","overly","rid","me","at","quite","rid","around","my","something","used","a","by","some","rid","towards.","too","a","the","used","a","on","the","rid","rid","people","the","this","rid","the","rid","by","at","some","rid","the","some","to","into","non-empty","this","to","cleaner","to","the","it","it","away","the","wrong.","rid","this","this","that","something","the","one","around"]},{"Key":"get the","Fragments":["last","last","last","second","count","`partial`","last","context","words","tests","new","coordinates","`response-for`","right","ASCII","distance.","impression","code","last","count"]},{"Key":"last whereas","Fragments":[".endsWith"]},{"Key":"whereas .endsWith","Fragments":["gets"]},{"Key":".endsWith gets","Fragments":["the"]},{"Key":"gets the","Fragments":["character","job","argument."]},{"Key":"the character","Fragments":["quicker?","representation,","code","literals","to","values.","sequence"]},{"Key":"In the","Fragments":["previous","context","silence","end,","context","new","Clojure","spirit","end","case","sense","case","end","end","main"]},{"Key":"the previous","Fragments":["iteration","iteration.","iteration.","version","one","definitions!","line","iteration.","version.","version.","version.","value,","line","line.","iteration,","comment","iterations","solution.","version.","5","version,","iteration"]},{"Key":"previous iteration","Fragments":["it","where","and"]},{"Key":"iteration it","Fragments":["responded"]},{"Key":"it responded","Fragments":["with"]},{"Key":"responded with","Fragments":["\"Fine,"]},{"Key":"with \"Fine,","Fragments":["be"]},{"Key":"\"Fine, be","Fragments":["that","that","that","that","that"]},{"Key":"be that","Fragments":["way.\"","way.\"","way.\"","a","way.\"","protocol","way.\")","simple","simple."]},{"Key":"that way.\"","Fragments":["as","as"]},{"Key":"way.\" as","Fragments":["the","well."]},{"Key":"default but","Fragments":["got"]},{"Key":"but got","Fragments":["a","a"]},{"Key":"got a","Fragments":["nitckpick","point:","warning","bit","little","`case`","little","`let`,"]},{"Key":"a nitckpick","Fragments":["saying"]},{"Key":"nitckpick saying","Fragments":["it"]},{"Key":"saying it","Fragments":["would"]},{"Key":"better \"default\"","Fragments":["instead."]},{"Key":"\"default\" instead.","Fragments":["Even"]},{"Key":"instead. Even","Fragments":["though"]},{"Key":"Even though","Fragments":["I","`true`","the"]},{"Key":"though I","Fragments":["believe","finally","think","could","don't","would","think"]},{"Key":"believe the","Fragments":["empty","standard","Clojure","(:require"]},{"Key":"the empty","Fragments":["string","string.","count","string.","check","regex?","string","case","string","string","db"]},{"Key":"empty string","Fragments":["would","feels","the","in","key."]},{"Key":"string would","Fragments":["be","not"]},{"Key":"the same","Fragments":["as","sort","runtime","approach:","approach:","as","thing,","as","thing.","position","time.","line","problem!","way","with","thing?","line","line","piece","line","way","contents","word","line","line","as","case.","as","namespace).","thing","time:","when","as","contents","line","point.","can","way","thing,","about","line","time","way.","effect","contents","line","arguments","happens","line","word","way","function","as","result.","time.","result.","word","word","way.","inputs.","in","problem","letters","alphagram.","line,","\"equality","\"equality","type","type","collection","result","level","as","function","way","as","argument","value","thing","thing.","way","since","repl.","length","structure","structure","word,","goal","line:","line","construct.","line","data.","tests","thing.","way.","thing","time.","line:","effect,","thing,","method","line","line","list.","line,","row,","map","is","line.","time,","effect","`letfn`","comparison","line","line","as","and","as","value","as","as","arguments.","things.","thing","atom","value.","value","abstraction","level","technique","indentation","link","word","line","function","length,","name","`input`","\"weigh","info","line","line","(verbatim)","word\"","code","line","transformations","names","macro.","things.","as","time.","lines","word.","sort","way","manner.","exact"]},{"Key":"same as","Fragments":["passing","silence?","silence,","iteration","the","the","the","`(not","yours.","`(repeat","`(when","`nothing?`","`vector`","a","`is-alphabetic`"]},{"Key":"as passing","Fragments":["something"]},{"Key":"passing something","Fragments":["else"]},{"Key":"something else","Fragments":["not","would","I'm","in","instead","has"]},{"Key":"else not","Fragments":["covered","previously"]},{"Key":"not covered","Fragments":["by"]},{"Key":"covered by","Fragments":["Bob"]},{"Key":"by Bob","Fragments":["answers"]},{"Key":"Bob answers","Fragments":["to."]},{"Key":" By","Fragments":["robust","the","the","partial","using","making"]},{"Key":"By robust","Fragments":["I"]},{"Key":"robust I","Fragments":["mean"]},{"Key":"I mean","Fragments":["accepting","just","would","in"]},{"Key":"mean accepting","Fragments":["of"]},{"Key":"accepting of","Fragments":["values"]},{"Key":"of values","Fragments":["such","inside","when","instead"]},{"Key":"values such","Fragments":["as"]},{"Key":"such as","Fragments":["`nil`","ClojureScript.","`silence?`,","that","`\"42\"`","to","`filter`.","\"4?\".","wanting","\"shouty-question?\"","blank?","`(silent?","RX837","Scheme"]},{"Key":"as `nil`","Fragments":["(which"]},{"Key":"`nil` (which","Fragments":["obviously"]},{"Key":"(which obviously","Fragments":["doesn't"]},{"Key":"obviously doesn't","Fragments":["have"]},{"Key":"doesn't have","Fragments":["`endsWith`.)","any","a","to","either","to","any","to","it.","an","to","to"]},{"Key":"have `endsWith`.)","Fragments":["This"]},{"Key":"`endsWith`.) This","Fragments":["way"]},{"Key":"This way","Fragments":["is","the","it","you","you","if","the","it","you","I"]},{"Key":"way is","Fragments":["probably","that","to","to","to","to","precisely"]},{"Key":"probably fine.","Fragments":["You're"]},{"Key":"fine. You're","Fragments":["right"]},{"Key":"You're right","Fragments":["that","about","about","with","-","it's"]},{"Key":"right that","Fragments":["it's","it's","shouting"]},{"Key":"that it's","Fragments":["a","more","more","not","your","the","(probably)","that","worth","easy","not","a","some","not","testing","not","better","clear","single","not","a","just","one","worth","also","more","dead","not"]},{"Key":"it's a","Fragments":["question","big","good","name","matter","truthy","single","no","better","matter","clever","documented","good","bit","bit","different","generalization","day","bit","bit","lot","better","nice","yelling.","really"]},{"Key":"a question","Fragments":["of","already.","mark?","mark","mark.","-","mark","can","be","mark","mark","mark","mark.","of","mark","mark.","mark,","isn't","that","mark","?)","with","mark."]},{"Key":"performance versus","Fragments":["input"]},{"Key":"versus input","Fragments":["acceptance."]},{"Key":"what rubysolo","Fragments":["meant"]},{"Key":"rubysolo meant","Fragments":["was"]},{"Key":"meant was","Fragments":["one","to"]},{"Key":"was one","Fragments":["of"]},{"Key":"one of","Fragments":["the","the","the","the","the","the","the","the","you","your","your","your","your","your","your","your","your","your","your","your","the","your","your","the","the","my","the","them","those","the","the","the","them.","the","the","those","the","the","those","the","the","my","the"]},{"Key":"the options","Fragments":["you"]},{"Key":"options you","Fragments":["already","might"]},{"Key":"you already","Fragments":["had","know","have","alias"]},{"Key":"already had","Fragments":["should"]},{"Key":"had should","Fragments":["be"]},{"Key":"be default,","Fragments":["not"]},{"Key":"default, not","Fragments":["the"]},{"Key":"not the","Fragments":["string","`last`","domain.","only","*why*.","higher-level","intention.","function","best","public","mutated","same","domain","`(apply","acids","encolsing,","best","built","most","shortest","same","DRYest"]},{"Key":"the string","Fragments":["\"default\".","tests","check","-","matches","matches","*is*?","checking","namespace.","namespace.","once,","not","tests","and","representation","namespace","and","functions.","or","rather","checks","literals","literals?","functions","is","and","in","is","namespace,","parameter","literals","among","as","on","as","against","against","representation","is","versions","on","unnecessarily,","`\"U\"`","replace","replace","methods.","would","replace","into","cases","formatting/templating","inside","function","library","with","namespace","namespace","to","to","for","before","is","\"I?\"","that","to","conversion","and","returned","import.","functions,","namespace.","literal"]},{"Key":"string \"default\".","Fragments":["You"]},{"Key":"\"default\". You","Fragments":["don't"]},{"Key":"You don't","Fragments":["get","need","try","have","need","need","need","need","have","need","need","have","actually","actually","need","need","need","need","need","need"]},{"Key":"don't get","Fragments":["many","it.","DRY","out"]},{"Key":"get many","Fragments":["people"]},{"Key":"many people","Fragments":["saying","as","use"]},{"Key":"people saying","Fragments":["\"default\""]},{"Key":"saying \"default\"","Fragments":["when"]},{"Key":"\"default\" when","Fragments":["Paul"]},{"Key":"when Paul","Fragments":["Revere"]},{"Key":"Paul Revere","Fragments":["comes"]},{"Key":"Revere comes","Fragments":["through"]},{"Key":"comes through","Fragments":["with"]},{"Key":"through with","Fragments":["\"The"]},{"Key":"with \"The","Fragments":["British"]},{"Key":"\"The British","Fragments":["are"]},{"Key":"British are","Fragments":["coming!\"."]},{"Key":"are coming!\".","Fragments":["IMO"]},{"Key":"coming!\". IMO","Fragments":["Bob"]},{"Key":"IMO Bob","Fragments":["is"]},{"Key":"Bob is","Fragments":["blasé","limited.","responding"]},{"Key":"is blasé","Fragments":["enough"]},{"Key":"blasé enough","Fragments":["that"]},{"Key":"enough that","Fragments":["it","```(=","you"]},{"Key":"that it","Fragments":["wouldn't","would","is","might","works","limited","looks","would","has","makes","maps","reads","will","flows","didn't","would","looks","is","looks","would","can","would","wasn't","would","makes","is","doesn't","makes","comes","looks","would","doesn't","can","would","is","would","obfuscates","will","wouldn't","looks","would","looks","read","is","enables","doesn't","describes","should","might.","was","should"]},{"Key":"it wouldn't","Fragments":["faze","be","be","be","do","hurt","be","really"]},{"Key":"wouldn't faze","Fragments":["him."]},{"Key":"faze him.","Fragments":["He'd"]},{"Key":"him. He'd","Fragments":["probably"]},{"Key":"He'd probably","Fragments":["treat"]},{"Key":"probably treat","Fragments":["it"]},{"Key":"treat it","Fragments":["as"]},{"Key":"it as","Fragments":["a","shouting","a","a","well,","great","a","nested","a","read","you","\u003ccode\u003ebob/response-for\u003c/code\u003e?","the","an","just","readable?","a","simple","a","efficient","a"]},{"Key":"as a","Fragments":["statement.","word?","rna-transcription.","question","var","\"magic","pipeline","sequence.","variable","recalcitrant","list","sequence","string.","sequence","possible","list","sequence","last","sequence","first","function","function.","functions.","boolean","list","function,","function","function","function","sequence","function","logical","sequence","REPL","function","coder...","transient","sequence","sequence","shrinking","sequence","series","metadata","sequences","function","visual","low-level","sequence","whole","function","possibility.","sequence","vector,","`let`,","fuction","variable","warning","first","first","literal","first","case","predicate","simple","function","public","fn.","function,","way","seq","sequence","map","`reduce`","function","function","group.","method","simple","collection","reduce","key","key","loop/recur","`reduce`","function","function:","reader.","function","hint","`reduce`","result.","seq","function),","namespace","function","function","whole","function.","bit","composition","function","function","requirement","map","private","question.","function","sentence","function,","list","question","parameter.","first","side,","function,","choirboy's","function.","function.","function"]},{"Key":" maybe.","Fragments":["I"]},{"Key":"maybe. I","Fragments":["know","prefer"]},{"Key":"I know","Fragments":["there",":)","I","that","what","it","that","it's","I","it.","I","the","this","you'll","is","how","what","what","about"]},{"Key":"know there","Fragments":["are","were"]},{"Key":"there are","Fragments":["some","quite","better,","no","contexts","more","some","a","no","2","quite","some","any).","extra","a","`:leap-year`","some","two","functions","any","two","cleaner","performance","a","duplicate","many","ways","other","better","also","subtle","no","at","upper","any","some","more","no","some"]},{"Key":"are some","Fragments":["type","characters","small","redundant","things","quite","other","benefits","other","built-in","more","other","more","impressive","clever"]},{"Key":"some type","Fragments":["systems","conversion"]},{"Key":"type systems","Fragments":["for"]},{"Key":"systems for","Fragments":["Clojure"]},{"Key":"for Clojure","Fragments":["that","..."]},{"Key":"Clojure that","Fragments":["look","I'm","is"]},{"Key":"that look","Fragments":["interesting.","a"]},{"Key":"look interesting.","Fragments":["However,"]},{"Key":"interesting. However,","Fragments":["robustness"]},{"Key":"However, robustness","Fragments":["principle!"]},{"Key":"that this","Fragments":["sorts","code","does","could","was","was","stuff","would","very","method","implementation","got","little","is","could","function","recomputes","is","is","would","implementation","didn't"]},{"Key":"this sorts","Fragments":["as"]},{"Key":"sorts as","Fragments":["little"]},{"Key":"as little","Fragments":["as"]},{"Key":"little as","Fragments":["possible."]},{"Key":"as possible.","Fragments":["That","Would","Good"]},{"Key":"possible. That","Fragments":["said,"]},{"Key":"That said,","Fragments":["would","I","I","the","overloading","if","I","@wilton","I'm","I"]},{"Key":"said, would","Fragments":["there"]},{"Key":"would there","Fragments":["be"]},{"Key":"there be","Fragments":["a","a"]},{"Key":"to pass","Fragments":["the","those","`message`","in?","in","message","along.","all","and","the","the","`text`","the","\"currval\"","the","month","those","it"]},{"Key":"pass the","Fragments":["same","test","test","`sorted-school`","the","output","test","test,","argument","nth","for","whole","test","test","turkish","test","value","year","unit","test","tests.","test","test?","argument"]},{"Key":"same sort","Fragments":["of","of"]},{"Key":"sort of","Fragments":["argument","one-way","incremental","cache,","fusion)","a","early","implementation","state","the","artifact.","stumbled","interesting","way).","NLP","thing.","thing.","just","duplication","thing","because","operation"]},{"Key":"of argument","Fragments":["for"]},{"Key":"argument for","Fragments":["both","keeping","doing","the","\"not"]},{"Key":"for both","Fragments":["positions","of","adding","brevity"]},{"Key":"both positions","Fragments":["of"]},{"Key":"positions of","Fragments":["`alphabetizes-to?`"]},{"Key":"of `alphabetizes-to?`","Fragments":["with"]},{"Key":"`alphabetizes-to?` with","Fragments":["the"]},{"Key":"same runtime","Fragments":["performance?"]},{"Key":"runtime performance?","Fragments":["(Hint:"]},{"Key":"performance? (Hint:","Fragments":["higher-order"]},{"Key":"(Hint: higher-order","Fragments":["functions"]},{"Key":"functions may","Fragments":["be","return"]},{"Key":"may be","Fragments":["useful)","faster,","a","generally","overkill","interested","a","a","just","worth","personal","taste.","a","overdoing","a","a","worth","a","confusing","my","done","a","a","also","better","need","a","better","of","lost","present","replaced"]},{"Key":" using","Fragments":["the","`string`","grade","Java,","briefer"]},{"Key":"using the","Fragments":["Java","name","built-in","threading","Java","namespace","macro","`:require`","constant","-\u0026gt;","variable","same","`-›`or","shorter","`-›`","`-›`","map","same","bound","shorthand","`:as`","`-\u003e\u003e`","[thread-last","```defn-```","methods","`#(…)`","map","threading","fact","[`upper-case`](http://clojure.github.io/clojure/clojure.string-api.html#clojure.string/upper-case)","dot","character","`if`","nucleotide","argument","`frequencies`","namespace","[anonymous",":pre","map","-\u003e\u003e","-\u003e\u003e","`partial`","anonymous","string","`assert`","\"frequencies\"","time","require","`assert`","assert","`#()`","else","`-\u003e\u003e`","`or`","map","default","string","let","function","`-\u003e`"]},{"Key":"the Java","Fragments":["integration","API,","API","underlying.","API.","API,","methods.","well","API",".toLowerCase","interop,","interop","documentation","standard","stuff","String","methods","Calendar","calendar","number","Calendar","Calendar","API.","functions","String","endsWith."]},{"Key":"Java integration","Fragments":["is"]},{"Key":"integration is","Fragments":["OK"]},{"Key":"is OK","Fragments":["here,"]},{"Key":"OK here,","Fragments":["but"]},{"Key":"here, but","Fragments":["would","is","it's","here's","it's","that's","`robot-name`","didn't","it","I"]},{"Key":"but would","Fragments":["it","it","`rest`","be","separating"]},{"Key":"would it","Fragments":["be","be","maybe","be","look","make","make","compare","be","be","be"]},{"Key":"be clearer","Fragments":["to","to","to","in","for","for","still","than","to","to","if","than","and","by","to","to","if"]},{"Key":"clearer to","Fragments":["use","use","have","use","declare","understand","use","me.","filter"]},{"Key":"use `last`","Fragments":["and","to","in","instead","to","thanks","instead"]},{"Key":"and `=`","Fragments":["to"]},{"Key":"`=` to","Fragments":["make"]},{"Key":"make the","Fragments":["accepted","intent","code","predicates","conditionals","predicate","input","jump","code","transform","code","regex","function","code","`blank?`","check","intent","operation","method","code","program","program","code","program","code","code","helpers","first","checks","code","solution","helper","namespace","encapsulation","code","bulk","intent","branches","root","more","code","intent","`silent?`,","implementation","tests","intent","purpose","connection","anonymous","implementation","tests","ascii","validation","actual","reduce","whole","cond-part","intent","code","intent","intent","intent","code","code","code","function","code","solution","`change-letter`","solution","case"]},{"Key":"the accepted","Fragments":["input"]},{"Key":"accepted input","Fragments":["more"]},{"Key":"input more","Fragments":["robust?"]},{"Key":" Also,","Fragments":["what","I'd","do","while","you","don't","would","IMO","what","something","it's","I'd","you","now","some","what","you","how","instead","you","have","have","maybe","you","imagine","you","you","I","the","are","I","I","strings","`zip`","you","this","you","instead","not","I'm","should","`frequencies`","all-caps?","you","in","I","you","with","there's","it","it","I'm","you","IMHO,","reloading","although","you","take","props","I'm","individual","I'm","is","the"]},{"Key":"Also, what","Fragments":["should","would","happens","do"]},{"Key":"what should","Fragments":["the"]},{"Key":"should the","Fragments":["default","body"]},{"Key":"default behavior","Fragments":["really","is","would"]},{"Key":"behavior really","Fragments":["be?"]},{"Key":"really be?","Fragments":["What"]},{"Key":"be? What","Fragments":["does"]},{"Key":"What does","Fragments":["Bob","the","that"]},{"Key":"does Bob","Fragments":["already"]},{"Key":"Bob already","Fragments":["do"]},{"Key":"already do","Fragments":["for"]},{"Key":"do for","Fragments":["input","me"]},{"Key":"for input","Fragments":["that","validation"]},{"Key":"input that","Fragments":["he","meets","fits","fits"]},{"Key":"that he","Fragments":["can't"]},{"Key":"he can't","Fragments":["understand?"]},{"Key":"to change","Fragments":["the","T.","independently.","that.","that","more","any","more","now?","the","`db`","`bob_test.clj`.","it."]},{"Key":"change the","Fragments":["implementation","true","order","way","structure","tests,","underlying","value,","`names`","order","underscore.","code","order","order"]},{"Key":"the implementation","Fragments":["so","down","is","which","of","of","is","and","details","of","of","of","in","code","detail,","a","a","of","was","of","of"]},{"Key":"implementation so","Fragments":["that"]},{"Key":"the `(sort","Fragments":["source)`"]},{"Key":"`(sort source)`","Fragments":["only"]},{"Key":"source)` only","Fragments":["happens"]},{"Key":"only happens","Fragments":["once"]},{"Key":"happens once","Fragments":["without"]},{"Key":"once without","Fragments":["sacrificing","sacrificing"]},{"Key":"without sacrificing","Fragments":["too","clarity?","too","too"]},{"Key":"sacrificing too","Fragments":["much","much","much"]},{"Key":"too much","Fragments":["readability?","type","readability?","readability?","clarity?","time","about","things","more","work","into","on","reg-ex=fu.","separation","readability.","nesting","for","indent"]},{"Key":"string tests","Fragments":["into","into"]},{"Key":"tests into","Fragments":["private","private","their","their","smaller"]},{"Key":"with intention-revealing","Fragments":["names?","names?","names?","names?","names?","names?","names?","names","names?","names?","names?","names?","names?","names?"]},{"Key":"like it.","Fragments":["You","It","Do","Let's","One"]},{"Key":"it. You","Fragments":["might","did"]},{"Key":"You might","Fragments":["be","even","want","double-check","compare","also","consider","be","consider","also","consider","want","be","think","consider","want","want","want","use","look","consider","want","want","consider","find","consider","consider","want","try","want","be","be","want","want","want","also","also","want","want","look","want","try","use","have","want","want","want","want","be","want"]},{"Key":"be able","Fragments":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"able to","Fragments":["simplify","see","review","get","use","understand","get","guess","use","better","find","find","understand","understand","easily","if","say","understand","use","solve","reduce","split","find","be","remove","remove","use","do","get","just","access","make","roll","combine","simplify","remove","handle","do","normalize","cut","shout","find","finally","do","realize"]},{"Key":"to simplify","Fragments":["`stringify-keys`","your","and","this","matters","predicates","`shouting?`","`shouting?`","the","the","the","`cond`,","that","things","them","things","the","the","`valid-dna?`","things.","or","the","your","`response-for`","`(first","the","that"]},{"Key":"simplify `stringify-keys`","Fragments":["a"]},{"Key":"`stringify-keys` a","Fragments":["bit"]},{"Key":"a bit","Fragments":["with","limiting.","more","more","confusing","of","unclear","faster","misleading.","more","excessive","inconsistent","of","surprised","unsure","nicer","more",":)","more","more","of","off.","about","of","too.","here?","misleading.","weird","quirky...","of","which","more","desperate","easier","more","on","dated,","better","off.","confusing","too","noisy","crazy.","off","of","of","cleaner.","simple.","of","better","(!)","wonky,","off","simpler.","off.","with","obscured.","more","awkward","baroque,","from","terse.","more","shorter","easier","to","that","ugly.","strangely","I","hard","complex","messy.","non-standard,","shorter","more","better","busy","verb-y","non-standard","more","more","of","misleading.","off","by","nicer:","is","more,","when","prettier","more","more","overkill.","more","too","over","ugly,","to","out","like","easier","more","more.","in","more","new","clearer.","clearer.","slow","more","because","more","to","of","more","procedural.","mysterious","shorter","shorter","over","understanding","to","misleading:","of","more","more","more","as","clearer.","simpler.","more","awkward.","simpler?","awkward.","more","more","less","more","simpler.","hard","odd","of","more","tricky.","(and","too","by","more","to","hard","more","more","to","more","though,","lost","more","too","differently.","clearer.","simpler.","simpler.","hard","of","like","more","misleading,","further","off,","faster.","of","tricky.","mask..","was","the","more","better.","hard","more","more","less","instead","more","more","about","(strings","tidier.","long,","in","more","over","of","here:","more","against","ugly.","stumped,","cleaner.","gratuitous","more","puzzling","simpler.","inefficient","more","too)","more","with","afraid"]},{"Key":"bit with","Fragments":["a","Clojure","the"]},{"Key":"a list","Fragments":["comprehension","of","of","of","zipper","-","back","of","of","requires","of","of","of","of","for","to","of","into"]},{"Key":"list comprehension","Fragments":["--","to","I've","is"]},{"Key":"comprehension --","Fragments":["what"]},{"Key":"what do","Fragments":["you","they","you","other","you","you","you","people"]},{"Key":"do you","Fragments":["think?","think","think","think","think","think?","think","think","mean","prefer","think","think","feel?","have","think","think","think?","think","think?","think?","think?","think","mean","think?","think?","think","mean","put","put","think","mean","think","think","have","organize","think?","think?","think?","think","need","feel","think?","still","think,","need","think?","think","think,","need","need","feel","feel"]},{"Key":" Aha,","Fragments":["I","in"]},{"Key":"Aha, I","Fragments":["didn't"]},{"Key":"didn't see","Fragments":["that","that.","that."]},{"Key":"see that","Fragments":["the","certain","you","the","this","`split`","there","this","```clojure.string/replace```","since","might","I","yours","`re-find`","I"]},{"Key":"the submission","Fragments":["had","didn't","if","is"]},{"Key":"submission had","Fragments":["been"]},{"Key":"had been","Fragments":["nominated","wondering","calculated,"]},{"Key":"been nominated","Fragments":["for"]},{"Key":"nominated for","Fragments":["approval."]},{"Key":"for approval.","Fragments":["Sorry"]},{"Key":"approval. Sorry","Fragments":["about"]},{"Key":"Sorry about","Fragments":["that.","that,","that,","some","my"]},{"Key":"Hmm, I","Fragments":["might","had"]},{"Key":"I might","Fragments":["have","have","tweak","be","have","get","to","be","inline","have","have","have","rewrite","have","like","have","put","come"]},{"Key":"might have","Fragments":["misunderstood","to","to","trampled","a","another","to","been","read","gone","unintended","been","want","instance"]},{"Key":"have misunderstood","Fragments":["you"]},{"Key":"misunderstood you","Fragments":["from"]},{"Key":"you from","Fragments":["the"]},{"Key":"the beginning..","Fragments":[":P"]},{"Key":"In your","Fragments":["first","predicate","opninion,"]},{"Key":"your first","Fragments":["nit","example","Clojure","iteration","submission.","try.","version","iteration,","iteration","`sort`","`cond`"]},{"Key":"first nit","Fragments":["you"]},{"Key":"nit you","Fragments":["mention"]},{"Key":"you mention","Fragments":["my","some"]},{"Key":"mention my","Fragments":["usage"]},{"Key":"my usage","Fragments":["of","of"]},{"Key":"usage of","Fragments":["`clojure.string/blank?`","google","python","types","`condp`","threading","chaining","`atom`","`frequencies`,","`let`,","`clojure.string`","case.","map","re-seq","preconditions.","a","higher-order-functions"]},{"Key":"of `clojure.string/blank?`","Fragments":["and"]},{"Key":"`clojure.string/blank?` and","Fragments":["I"]},{"Key":"I assumed","Fragments":["that","the","the","I","yelling"]},{"Key":"assumed that","Fragments":["you","the"]},{"Key":"that you","Fragments":["meant","can","use","to","can","don't","took","don't","moved","extract","can","can","can","have","can","have","can","can","can","really","thought","don't","can","have","can","can","have","can","*could*","managed","wanted","would","used","gave","may","preemptively","can","can","rely","don't","don't","are","are","don't","potentially","can","can","want","want","mean?)","managed","are","could","have","know","or","have","don't","don't","don't","don't","don't","can","have","included","could","have","referenced,","needed","only","could","know","could","could","can","don't","used","could","might","used.","can","used","can","have","care","feel","still","may","add","can","could","don't","don't","had","can","need","need","`merge`","need","might","wanted?","included","can","don't","use","use","look","can","wanted","can","can","used","want","got","implemented","add","should"]},{"Key":"you meant","Fragments":["that","your"]},{"Key":"meant that","Fragments":["I","the"]},{"Key":"that I","Fragments":["should","have","look","was","use","look,","frame","don't","could","have","agreed","forgot","could","was","like","went","can","disagree","can't","got","wanted","tend","had","don't","need","could","you","_know_","wanted","would","didn't","found","used","like","might","take","don't","just","wasn't","had","had","ran","can","would","could","was","would","was","could","will","didn't","think","can","don't","basically","had","needed","had","can","tried","missed","haven't","overlooked","like","don't","learnt","had","was","can","had"]},{"Key":"should do","Fragments":["something","the","the"]},{"Key":"do something","Fragments":["about","like","useful","about","like","like","else","like","with","like"]},{"Key":"something about","Fragments":["it,","the","it.","punctuation.","`let`"]},{"Key":"about it,","Fragments":["since","the","but","still","I","and"]},{"Key":"it, since","Fragments":["the","it"]},{"Key":"since the","Fragments":["submission","word","stuff","text","purpose","problem","JVM","JVM","result","question","name","input","last","assert"]},{"Key":"submission didn't","Fragments":["get"]},{"Key":"didn't get","Fragments":["approved.","how","a","it).","back"]},{"Key":"get approved.","Fragments":["But"]},{"Key":"approved. But","Fragments":["now"]},{"Key":"But now","Fragments":["we"]},{"Key":"now we","Fragments":["seem"]},{"Key":"we seem","Fragments":["to"]},{"Key":"seem to","Fragments":["agree..","be","see","like","be","be","know","improve","work.","emphasize","fit","prefer","be","be","find","be","be","forget","have","trim"]},{"Key":"to agree..","Fragments":["I"]},{"Key":"agree.. I","Fragments":["must"]},{"Key":"I must","Fragments":["be","say,","admit","have","learn","say"]},{"Key":"must be","Fragments":["missing","a","a","an","out","a","something","some","made","some","some","of","true","true","true","better","a","much","something"]},{"Key":"be missing","Fragments":["something.","out","something"]},{"Key":" Robustness","Fragments":["principle"]},{"Key":"Robustness principle","Fragments":["as"]},{"Key":"principle as","Fragments":["in"]},{"Key":"as in","Fragments":["\"Be","`subject-char-freq`","the","the","my","'add'"]},{"Key":"in \"Be","Fragments":["conservative"]},{"Key":"\"Be conservative","Fragments":["in"]},{"Key":"conservative in","Fragments":["what","its"]},{"Key":"in what","Fragments":["you","you","I","empty","I"]},{"Key":"you do,","Fragments":["be"]},{"Key":"do, be","Fragments":["liberal"]},{"Key":"be liberal","Fragments":["in"]},{"Key":"liberal in","Fragments":["what","what"]},{"Key":"you accept","Fragments":["from","the"]},{"Key":"accept from","Fragments":["others\"?"]},{"Key":"from others\"?","Fragments":["I'm"]},{"Key":"others\"? I'm","Fragments":["liberal"]},{"Key":"I'm liberal","Fragments":["in"]},{"Key":"I accept,","Fragments":["yes?"]},{"Key":" Yeah,","Fragments":["I","I've","I've","I","I","matter","both","I","if","I'd","embarrassing","I","tend","it","the","right?","I","this'd","good","thanks.","I've","`Math/pow`","everything"]},{"Key":"Yeah, I","Fragments":["would","guess","thought","tried","don't","thought"]},{"Key":"that one","Fragments":["of","uses","cannot","of","out."]},{"Key":"the responses","Fragments":["should","map!","to","string","-","becomes"]},{"Key":"responses should","Fragments":["probably"]},{"Key":"should probably","Fragments":["be","be","be","be","be","be","validate","be","look"]},{"Key":"probably be","Fragments":["the","private.","extracted","private.","private.","the","reduced","simplified","overkill","the","a","a","extracted","inlined,","like"]},{"Key":"the \"default\"","Fragments":["via"]},{"Key":"\"default\" via","Fragments":["an"]},{"Key":"via an","Fragments":[":else"]},{"Key":"an :else","Fragments":["clause.","clause"]},{"Key":"How about","Fragments":["`silent?`","extracting","making","making","making","now?","doing","making","extracting","extracting","visibility","precomputing","extracting","when","reducing","using","this?"]},{"Key":"about `silent?`","Fragments":["to"]},{"Key":"`silent?` to","Fragments":["match"]},{"Key":"to match","Fragments":["the","every","all","a","the","yelling.","a"]},{"Key":"match the","Fragments":["other","other","domain","domain","domain","scenario.","whole","mathematical"]},{"Key":"other function","Fragments":["names?"]},{"Key":"Also, I'd","Fragments":["probably","make","have"]},{"Key":"I'd probably","Fragments":["make","go","put","use","just","use","think"]},{"Key":"probably make","Fragments":["all","more","those","this","that"]},{"Key":"make all","Fragments":["the","words"]},{"Key":"string check","Fragments":["functions"]},{"Key":"check functions","Fragments":["private.","matched"]},{"Key":"One (super","Fragments":["nitpicky)"]},{"Key":"(super nitpicky)","Fragments":["consideration"]},{"Key":"nitpicky) consideration","Fragments":["--"]},{"Key":"if none","Fragments":["of","of","were"]},{"Key":"none of","Fragments":["your","these","them","the","predicates"]},{"Key":"functions matched","Fragments":["the"]},{"Key":"matched the","Fragments":["input?","wrong"]},{"Key":" Thanks!","Fragments":["I","The","I","Could","I","I","Those","BTW","I","It","I","I","I've","Should","I",":)","I","I","Using","geofflane.","Didn't","The","A"]},{"Key":"Thanks! I","Fragments":["wasn't","pushed","was","appreciate","will","can","might","didn't","didn't","improved","could've","treated"]},{"Key":"I wasn't","Fragments":["sure","sure","able","aware","sure","aware","aware","sure","familiar","aware","using","aware","aware","sure","as","familiar","sure"]},{"Key":"wasn't sure","Fragments":["what","what","how.","about","what","about","if"]},{"Key":"what to","Fragments":["name","look","do","return."]},{"Key":"to name","Fragments":["the","these","my","the","predicates","the","it","conversion","a","it.","these","functions","it."]},{"Key":"name the","Fragments":["function","predicate","two","idea.","anonymous"]},{"Key":"function since","Fragments":["one"]},{"Key":"since one","Fragments":["of"]},{"Key":"cases receives","Fragments":["as"]},{"Key":"receives as","Fragments":["input"]},{"Key":"as input","Fragments":["the","I","but"]},{"Key":"input the","Fragments":["empty"]},{"Key":"the latter,","Fragments":["too."]},{"Key":"latter, too.","Fragments":["I"]},{"Key":"too. I","Fragments":["didn't","was","realized"]},{"Key":"didn't go","Fragments":["further","this","with"]},{"Key":"go further","Fragments":["since"]},{"Key":"further since","Fragments":["I"]},{"Key":"since I","Fragments":["wrote","am","have","have","only","thought","think","did","was","did","believe","had"]},{"Key":"I wrote","Fragments":["just","the",":)","it","above","to","a"]},{"Key":"wrote just","Fragments":["enough"]},{"Key":"just enough","Fragments":["to","knowledge","Clojure"]},{"Key":"enough to","Fragments":["pass","move","me,","leave","be","make","me.","show,","me.","me.","me.","make","do","be","indicate","pre-calculate","justify","merit","pass","say.","make","make","me","extract","do","figure","say","either"]},{"Key":"pass those","Fragments":["tests.","tests,"]},{"Key":"those tests.","Fragments":["I"]},{"Key":"tests. I","Fragments":["guess","believe"]},{"Key":"I guess","Fragments":["I","it","leaving","it’s","I","I","it's","I","one","I","it’s","there's","I","I","I","using","I","all-caps?","this","that's","this","it's","I'm","it"]},{"Key":"guess I","Fragments":["could","could","could","could","could","missed","see","like","don't"]},{"Key":"I could","Fragments":["add","change","use","suggest","check","see","replace","go","use","add","create","wrap","have","delete","inline","suggest","write","improve","not","really","`filter`","go","get","introduce","have","have","implement","apply","not","get","have","have","immediately","use","do.","contain","Code","try","try","use","return","(it","look","figure","have","do","have","use","define","learn","guess","guess","learn","have","simply","ditch","help.","use","get","certainly","have","use","very","use","say","have","use","not","have","probably","do","do","extract","see","do","use","go","just","get","do","have","probably","use","handle"]},{"Key":"could add","Fragments":["an","some","another"]},{"Key":"add an","Fragments":[":else","extra"]},{"Key":":else clause","Fragments":["in"]},{"Key":"clause in","Fragments":["the","`second-line`.","the","the"]},{"Key":"the cond","Fragments":["form.","docs","with","before.","so,","ordering","order","but","expression","in","block","is.","take","clearer","with","tests.","to","would","is","ordering,","form."]},{"Key":" Checking","Fragments":["for","if"]},{"Key":"Checking for","Fragments":["nil"]},{"Key":"for nil","Fragments":["values"]},{"Key":"nil values","Fragments":["bothers"]},{"Key":"values bothers","Fragments":["me"]},{"Key":"bothers me","Fragments":["too.","is","a"]},{"Key":"This looks","Fragments":["good.","good.","very","good","good,","great!","really","great,","great,","great,","great,","good.","nice.","wrong","nice,","very","good","good","good","good","great,","good.","pretty","good.","good.","pretty","good.","good.","clean.","generally","good","good.","good.","good.","great.","good","nice","very","great","fine","great","good!","good."]},{"Key":"looks good.","Fragments":["A","Do","+1","Additionally,","The","The","Ah,","Personally","Optionally,","I","The","I","One","It's",":)","Regex","Mapping","Maybe"]},{"Key":"good. A","Fragments":["couple","few"]},{"Key":"A couple","Fragments":["of","of","observations:","of","of","questions","of","things","of","of","of"]},{"Key":"couple of","Fragments":["minor","minor","features","extras","reasons","styling","minor","people","functions.","observations","small","key","things","suggestions,","suggestions:","\"declarative\"","calls","nested","things","other","things","things","them","nits","nits","quick","stray","them","others,"]},{"Key":"of minor","Fragments":["points:","points:","improvements:"]},{"Key":"minor points:","Fragments":["Is","you"]},{"Key":"points: Is","Fragments":["`dont-know?`"]},{"Key":"Is `dont-know?`","Fragments":["the"]},{"Key":"`dont-know?` the","Fragments":["right"]},{"Key":"right name","Fragments":["for"]},{"Key":"for what","Fragments":["you're","you","it","that's","would"]},{"Key":"you're testing","Fragments":["for?","if"]},{"Key":"testing for?","Fragments":["Also,"]},{"Key":"for? Also,","Fragments":["what"]},{"Key":"message didn't","Fragments":["match"]},{"Key":" As","Fragments":["a","long","for","noted","for","for","you","far","I","an","an","always,","with","for","with","pointed","another","for","when","a","I","much","a","for","@nels","for","your","an","the","currently","soon","suggested","for","far","I","for","for","someone"]},{"Key":"As a","Fragments":["general","result","long-time","next","newcomer,"]},{"Key":"a general","Fragments":["rule,","rand-chars","purpose"]},{"Key":"general rule,","Fragments":["it's"]},{"Key":"rule, it's","Fragments":["easier"]},{"Key":"it's easier","Fragments":["to"]},{"Key":"easier to","Fragments":["specify","understand","compose.","read","read","see","compose","read","read","read.","read","read,","handle.","read","read.","read.","read","read.","read,","do","understand,","drop","read","decode","understand","understand.","understand","understand.","read?","comprehend","see","read","lean","follow.","read","follow.","read","follow.","read","send","read.","understand.","implement.","read.","read,","read","check","concatenate","read."]},{"Key":"to specify","Fragments":["what","both","a","the"]},{"Key":"specify what","Fragments":["you"]},{"Key":"you want","Fragments":["than","characters","the","here,","to","to","to","it","to","to","to","out","by","to","here.","to","to","concurrency-safety","to","to","to","to","to","in","to","to","is","to","local","to","to","to","to","to","to","to","better.","from","to","to","to"]},{"Key":"want than","Fragments":["what"]},{"Key":"than what","Fragments":["you","I","I","I","you","I","you","it's"]},{"Key":"you don't.","Fragments":["In"]},{"Key":"don't. In","Fragments":["this"]},{"Key":"In this","Fragments":["case,","particular","simple","case,","iteration","case,","problem,","case,","case","case,","case","iteration","case,","case","exercise","exercise","version"]},{"Key":"this case,","Fragments":["you","the","it's","I","the","you'd","but","the","the","but","I","moving"]},{"Key":"case, you","Fragments":["want","should","immediately"]},{"Key":"want characters","Fragments":["in"]},{"Key":"characters in","Fragments":["words","the","the","the","names,","names,","symbols","a","a","the","the","the"]},{"Key":"in words","Fragments":["(hope"]},{"Key":"words (hope","Fragments":["that's"]},{"Key":"(hope that's","Fragments":["enough"]},{"Key":"that's enough","Fragments":["to"]},{"Key":"to move","Fragments":["forward","on,","`(fn","the","your","away","it"]},{"Key":"move forward","Fragments":["on.)"]},{"Key":" Nice,","Fragments":["although","looking","I","readable","thanks!","although","apart"]},{"Key":"Nice, although","Fragments":["(and","conversion"]},{"Key":"although (and","Fragments":["we're"]},{"Key":"(and we're","Fragments":["really"]},{"Key":"we're really","Fragments":["getting"]},{"Key":"really getting","Fragments":["nitpicky"]},{"Key":"getting nitpicky","Fragments":["now)"]},{"Key":"nitpicky now)","Fragments":["the"]},{"Key":"now) the","Fragments":["regex"]},{"Key":"the regex","Fragments":["matches","needs","\"positive\"","clauses?","a","approach.","to","matching?","based","pattern.","matches.","in","for","in","and","`\\s+`","another","pushed","with","route","on"]},{"Key":"regex matches","Fragments":["just"]},{"Key":"matches just","Fragments":["one"]},{"Key":"just one","Fragments":["class","function","argument","question","thread-first","character.","regular"]},{"Key":"one class","Fragments":["but"]},{"Key":"class but","Fragments":["specifies"]},{"Key":"but specifies","Fragments":["a"]},{"Key":"specifies a","Fragments":["range."]},{"Key":"a range.","Fragments":["Could"]},{"Key":"range. Could","Fragments":["be"]},{"Key":"Could be","Fragments":["just","implemented"]},{"Key":"be just","Fragments":["`\\w+`.","'%'.","`%`.","as","put","due","a","the","one"]},{"Key":" Weird,","Fragments":["tests","with"]},{"Key":"Weird, tests","Fragments":["are"]},{"Key":"tests are","Fragments":["all","pretty","green,","all"]},{"Key":"are all","Fragments":["passing.","capital","fair","good","private","the","good"]},{"Key":"all passing.","Fragments":["But"]},{"Key":"passing. But","Fragments":["if"]},{"Key":"But if","Fragments":["there","I","you"]},{"Key":"if there","Fragments":["really","is","would","was","was","are","are","is","was","was","is","are","is","was","are","are","are","are","are","are","is"]},{"Key":"there really","Fragments":["is"]},{"Key":"really is","Fragments":["something"]},{"Key":"is something","Fragments":["wrong","that","like","I"]},{"Key":"something wrong","Fragments":["I'll","and"]},{"Key":"wrong I'll","Fragments":["take"]},{"Key":"I'll take","Fragments":["the","the","a"]},{"Key":"take the","Fragments":["time","first","opportunity","argument","conditional"]},{"Key":"the time","Fragments":["to","to","to","to","to","required","when","I","being.","you'll","without","it","of","macro,","between","to","come"]},{"Key":"time to","Fragments":["fix","get","find","me","clarify","get","switch","check","understand","use","use","use","use","remove","nitpick."]},{"Key":"to fix","Fragments":["it","the","this","that?","that."]},{"Key":"fix it","Fragments":["since"]},{"Key":"it since","Fragments":["I","function"]},{"Key":"I am","Fragments":["bad","completely","no","new","happy","a","not","a","learning","not","new","sure","absolutely","at","myself","still","almost","saying","new","less","familiar","glad","using,","new","going","not","not","sure","waiting","not","brand","still","not","trying","not","particularly","a","learning","lest","undecided","going","not","just","happier","not","also","not","confused","very","quite","a","a","not","a"]},{"Key":"am bad","Fragments":["at"]},{"Key":"bad at","Fragments":["regex","naming"]},{"Key":"at regex","Fragments":["and"]},{"Key":"regex and","Fragments":["I","see"]},{"Key":"I need","Fragments":["to","to","to","the","to","to","some","to"]},{"Key":"need to","Fragments":["learn","be","know","have","be","use","find","prefix","do","guard","call","pass","resort","refer","change","get","stay","build","use","come","read","call","take","do","join","use","play","convert","use","bring","do","check","trim","fix","replace","do.","be","use","assemble","finish","require","be","define","repeat","be","use","`(:use","use","write","pass","return","explicitly","invoke","cast","look","get","convert","turn","explicitly","convert","trim","drop","explicitly","cast","return","be","turn","trim","convert","use","remove","explicitly","write","turn","use","familiarize","call","reapply","call","referring","wrap","validate","be","use","apply","wrap","create","'seq'","'seq'","pass","consult","be","do","duplicate","require","require","compose","explicitly","replace","drop","re-use","turn","reset","pass","`(apply","check","call","make","convert","add","compare","take","change","figure","check"]},{"Key":"to learn","Fragments":["it","more","how","and","something","from","about","about","Clojure","about","Clojure.","Clojure","new","about"]},{"Key":"learn it","Fragments":["for"]},{"Key":"it for","Fragments":["real.","approval?","me.","comparison?*","comparison?","each","me.","clarity.","this","some","clarity.","the","silence?","you.","every","what","every"]},{"Key":"Aha, in","Fragments":["the"]},{"Key":"the ruby","Fragments":["version","language","version"]},{"Key":"ruby version","Fragments":["of","of"]},{"Key":"version of","Fragments":["the","itself.","the","the","`dna`","this","the","this","nucleotide-counts","the","`is-questions`","`word`","itself.","itself.","string","the","your","Java's","Bob","blank?,","determining","`sing`","the","frequencies","the","the","the","the","make-on-planet-function","shout?.","split.","an","an","exercise,","this,","`word`"]},{"Key":"the specs","Fragments":["there"]},{"Key":"specs there","Fragments":["is"]},{"Key":"there is","Fragments":["a","really","`upper`","no","no","a","no","an","very","a","such","no","any","not","anyone","a","a","no","a","more","a","a","a","a","a","a","a","a","probably","no","a","a","nothing","no","no","alphabet","a","just","a","really","a","a","one","an","a","a","a","no","a","usually","a","no","no","no","no","a","an","a","some"]},{"Key":"is a","Fragments":["test","lot","lot","built","good","better","useful","better","\"bob\"","Java","really","bit","better","broader","pretty","bit","good","nice","native","bit","matter","really","much","great","better","bit","built-in","`blank?`","riddle","*word*","bit","justified","good","pretty","bit","left","bit","better","set","waste","small","really","lexical","generalization","bit","better","simple","bit","bit","bit","pretty","bit","much","vector,","bit","slight","matter","character.","more","matter","bit","bit","keyword","bit","better","lot","good","valid","long","great","pretty","bit","way","reasonable","bit","non-sensing","little","CSS","core","simpler","more","Clojure","bit","bit","function","cost","good","great","protocol","little","performance","matter","bit","great","rough","bit","great","letter.","nice","`not-any?`","better","predicate","stark","mad","lexical","fairly","longer","subset","very","`yelling?`","shouting","lot","valid","valid","case","lazy-sequence","better","subset","better","little","generic","lot","simpler","[declare","totally","tried","good","well-structured","built","required","built-in","lot","nice","better","core","case","`true?`","little","little","thing","good","bounded","bounded","discussion","really","more","bit","function.","factor","function.","function","little","re-implementation","valid","bit","function.","declarative","`clojure.string/blank?`","good","good","built","built","good","step","bit","possibility","misleading","common","function","function","bit","tiny","function","fn","canonical","function","better","function","confusing","better","slightly","sort","little","nice","touch","first","bit","much","tad","functional","rather","leftover","little","naive","great","function.","beauty.","slight","bit","higher","re-match","function","SHOUT,","great","bit","little","non-word","shout.","big","function","last","function","mashup","function.","failure","test","constant","good","good"]},{"Key":"a test","Fragments":["that","case","case,","case","in","where","for","should","should","inconsistency.","for","zero?"]},{"Key":"test that","Fragments":["provides","the","the"]},{"Key":"that provides","Fragments":["`nil`:"]},{"Key":" `assert_equal","Fragments":["'Fine."]},{"Key":"`assert_equal 'Fine.","Fragments":["Be"]},{"Key":"'Fine. Be","Fragments":["that"]},{"Key":"Be that","Fragments":["way.',","way!\"))","way!\"","way!\"","way!\"","way.\"","way!\"","way!\"","way!\"))","way!","way!\"","way!\"","way!\"","way!\"","way!\"","way!\"","way!\"","way!\"","way!\")`"]},{"Key":"that way.',","Fragments":["teenager.hey(nil)`"]},{"Key":" However,","Fragments":["I","there’s","with","I'd","I","I","having","you","@maye"]},{"Key":"However, I","Fragments":["like","suggest","always","think","went","don't"]},{"Key":"the code","Fragments":["behaves","clearer.","I","when","clearer.","now","a","accordingly","as","as","doesn't","much","?","to","is","carefully.","look","to","-","harder","less","is","here","a","crystal","better","a","is","a","and","reads","determine","that","extremely","accordingly.","would","so","I","-","-","is","would","more","for","can","back","written.","in","greatly","greatly?","I","should","more","small","100%","concise.","first.","to","from","drops.","less","more","terribly","more","more","more","cleaner.","to","more","using","is","is","to","a","for","clearer.","longer,","is","very","is","must","elegant","after","to","though.","by","easier.","to","beginning","is","gets","at","working.","is","after","is","what","clearer.","within","and","after"]},{"Key":"code behaves","Fragments":["this"]},{"Key":"behaves this","Fragments":["way"]},{"Key":"this way","Fragments":["for","but","of","was","is","is"]},{"Key":"way for","Fragments":["empty"]},{"Key":"for empty","Fragments":["values","sequences,","match","or","strings"]},{"Key":"empty values","Fragments":["-","it","in"]},{"Key":"values -","Fragments":["being"]},{"Key":"- being","Fragments":["permissive"]},{"Key":"being permissive","Fragments":["in"]},{"Key":"permissive in","Fragments":["what"]},{"Key":"what empty","Fragments":["values"]},{"Key":"values it","Fragments":["accepts."]},{"Key":"it accepts.","Fragments":["Do"]},{"Key":"accepts. Do","Fragments":["you"]},{"Key":"Do you","Fragments":["think","think","think","think","think","think","think","know","feel","think","need","really","think","think","know","mean","think","have","think","know","have","have","accept","find","really","think","prefer"]},{"Key":"think it's","Fragments":["a","a","common","fine","that","probably","outside","really","assumed","common","necessary","still","equivalent.","silly","worth","also","worth","worth","more","appropriate","worth","clearer","a","important","pretty","an","better","just","too","just","just","a","just","probably"]},{"Key":"a big","Fragments":["issue?","deal,","improvement.","deal","part","fan","clump","fan","deal,"]},{"Key":"big issue?","Fragments":["(Maybe"]},{"Key":"issue? (Maybe","Fragments":["code"]},{"Key":"(Maybe code","Fragments":["in"]},{"Key":"code in","Fragments":["clojure","the","the","iteration","the","it","Clojure","the"]},{"Key":"in clojure","Fragments":["generally","and","yet.","(like","was","with","is","core,","could","because","works","as","it","is","functions.","like","functions?","we","to","start","to","there"]},{"Key":"clojure generally","Fragments":["should"]},{"Key":"generally should","Fragments":["be"]},{"Key":"be more","Fragments":["strict?)","explicit","readable.","descriptively","convenient.","small-screen/mobile","effective","idomatic.","idiomatic","clear.","explicit,","readable","readable","reasonable","evident","efficient","idiomatic","idiomatic","readable,","descriptive,","self-documenting.","composable","clear","readable","straightforward.","idiomatic","accepted","appropriate?","clear","idiomatic","readable","fitting","idiomatic.","appropriate.","idiomatic","efficient.","specific","complex?).","difficult","difficult","clear","idiomatic.","readable","accurate.","clojure","readable","profitable","performant","idiomatic","functional","readable.","careful","appropriate.","succinctly","idiomatic","idiomatic","clojure-y,","common"]},{"Key":"for pointing","Fragments":["both","out","out","me","them","me","this"]},{"Key":"pointing both","Fragments":["of"]},{"Key":"both of","Fragments":["those","them.","those"]},{"Key":"of those","Fragments":["things","conditions","methods?","extra","languages","predicates","Clojure","might","conditions","is","collections","into","options.","things"]},{"Key":"those things","Fragments":["out!","just"]},{"Key":"things out!","Fragments":["The"]},{"Key":"out! The","Fragments":["```frequencies```"]},{"Key":"The ```frequencies```","Fragments":["function"]},{"Key":"```frequencies``` function","Fragments":["looks"]},{"Key":"function looks","Fragments":["to","good."]},{"Key":"looks to","Fragments":["be"]},{"Key":"to be","Fragments":["exactly","counted","consistent","public?","a","private?)","a","dealing","more","as","preferable","language","part","DRYer?","a","very","really","smart","exported","public","called","used.","a","explicit","a","clear","a","a","comparable","space","accurate","idiomatic","an","more","too","more","concerned","cleaner,","able","fully","honest","little","more","to","public,","an","the","a","persistent","pretty","expressive.","exported","able","quite","able","pretty","more","independent.","explicit","very","careful","a","one-liners.","in","checked,","called","the","working","consistent","too","worth","called","considered","true.","faster","different","the","much","explicitly","completely","dangerous.","a","shouting","either","a","desired,","toplevel","upper","idiomatic,","(`nucleotide`,","publicly","more","able","read","some","defined","very","a","reduced.","the","the","a","a","more","called","unexpected.","a","lazy.","in","lower-case","just","a","evaluated","prime","modified","changed","a","set","a","named","to","a","switched.","added","\"prepared\",","a","written","made","counting.","canonical.","about","used.","used","pretty","the","6","a","like","using","handy","the","private","more","added","all","able","too","self-contained","slow.","less","more","a","used","to"]},{"Key":"be exactly","Fragments":["what","reverse"]},{"Key":"exactly what","Fragments":["is","```dna/to-rna```","you","I","I","I","is","you","you","exactly","i","the","I","you've","my"]},{"Key":"is called","Fragments":["for.","nitpicking","alphagram","and","to","when","then","a"]},{"Key":"I admit","Fragments":["I","`beer-song`","that"]},{"Key":"admit I","Fragments":["didn't","struggled"]},{"Key":"didn't read","Fragments":["the"]},{"Key":"the spec","Fragments":["very","(shouldn't","and"]},{"Key":"spec very","Fragments":["carefully,"]},{"Key":"very carefully,","Fragments":["as"]},{"Key":"carefully, as","Fragments":["far"]},{"Key":"as far","Fragments":["as","as","as"]},{"Key":"far as","Fragments":["numbers","the","building","Clojure","is","indentation","case,"]},{"Key":"as numbers","Fragments":["go."]},{"Key":"numbers go.","Fragments":["I"]},{"Key":"go. I","Fragments":["just","just"]},{"Key":"I just","Fragments":["recalled","had","started","didn't","started","did","tried","wanted","saw","noticed","end","learned","use","forgot","managed","got","wanted","learned","ran","read","wanted","used","cheated","did","learned","learned","learned","learned","learned","wouldn't","wanted","realized","can't","learned","have","decided","realized","pushed","used","started","don't"]},{"Key":"just recalled","Fragments":["that"]},{"Key":"recalled that","Fragments":["in"]},{"Key":"that in","Fragments":["the","shout?","Elixir","your","my","mind.","`anagram?`","the","a","this","my","this","fourth","some","order","mind,","the","your"]},{"Key":"the JavaScript","Fragments":["and"]},{"Key":"JavaScript and","Fragments":["Ruby"]},{"Key":"and Ruby","Fragments":["versions,"]},{"Key":"Ruby versions,","Fragments":["numbers"]},{"Key":"versions, numbers","Fragments":["did"]},{"Key":"numbers did","Fragments":["in"]},{"Key":"did in","Fragments":["fact","Haskell."]},{"Key":"in fact","Fragments":["count","I","not"]},{"Key":"fact count","Fragments":["as"]},{"Key":"count as","Fragments":["words.","yelling","true","true,"]},{"Key":"as words.","Fragments":["Not"]},{"Key":"words. Not","Fragments":["so","sure"]},{"Key":"Not so","Fragments":["the","important","sure"]},{"Key":"so the","Fragments":["Clojure","opening","call","call","feedback","work","functions","order","eye","code","`response-for`","point"]},{"Key":"the Clojure","Fragments":["version.","community.","docs","community","solutions","community,","way.","Cheatsheet","list","style","cheatsheet:","ecosystem.","cheatsheet","community","APIs.","compiler","function","version","exercises.","string","code","builtin","style","world.","koans"]},{"Key":" Nice.","Fragments":["Using","I","One","Would","Alternatively","With","The","Only"]},{"Key":"Nice. Using","Fragments":["`clojure.string/blank?`"]},{"Key":"Using `clojure.string/blank?`","Fragments":["allows"]},{"Key":"`clojure.string/blank?` allows","Fragments":["for"]},{"Key":"allows for","Fragments":["passing","\"?\")","parallelism","a"]},{"Key":"for passing","Fragments":["`nil`"]},{"Key":"passing `nil`","Fragments":["and"]},{"Key":"`nil` and","Fragments":["other","other","`false`","`false`","`false`","`false`"]},{"Key":"and other","Fragments":["empty","behavior","constructs","languages."]},{"Key":"other empty","Fragments":["values"]},{"Key":"values in","Fragments":["as","the","the","maps","maps","your","a","a"]},{"Key":"in as","Fragments":["well.","lets"]},{"Key":" your","Fragments":["approach","silence","implementation","let"]},{"Key":"your approach","Fragments":["here","was","to"]},{"Key":"approach here","Fragments":["works,"]},{"Key":"here works,","Fragments":["but","yet;"]},{"Key":"works, but","Fragments":["the","is","a","clojure.string/blank?","there","you","it's"]},{"Key":"but the","Fragments":["regex","checks","others","layer","symmetry","naming","idea","process","exercise","shouting?","default","latter","cost","regular","first","`not-any?`","tests","answer","name","result","same","thing","string","thing","test","“WHAT","work","total","previous","standard","result","\"is-yelling\"","rules","other"]},{"Key":"regex needs","Fragments":["a"]},{"Key":"needs a","Fragments":["little"]},{"Key":"a little","Fragments":["work.","too","unclear","harder","awkward","slow,","nicer","simpler","while,","DRYer.","perplexed","shorter","by","duplication","too","bit","confused","more","more","overkill","shorter","clearer","recursion","bit","more","bit","convoluted","undecided","bit","while","smaller.","clumsy,","nonsensical,","heavy-handed.","less","clearer","bit","bit","bit","more","cleaner.","funny.","bit","cleaner?","simpler.","bit","nicer","more","cleaner","more","bit","janky,","more","more","weird","bit","simpler","unclear,","more","by","awkward","over-engineered","lost","unclear","more","confused","bit,","convenience","bit","more","ambiguous","bit","easier","bit","more...","dense.","long","bit","more","further.","bit","more","more","annoying"]},{"Key":"little work.","Fragments":["The"]},{"Key":"work. The","Fragments":["colons","naming"]},{"Key":"The colons","Fragments":["and"]},{"Key":"colons and","Fragments":["extra"]},{"Key":"and extra","Fragments":["characters"]},{"Key":"extra characters","Fragments":["in"]},{"Key":"the 4th","Fragments":["unit","submission"]},{"Key":"4th unit","Fragments":["test"]},{"Key":"unit test","Fragments":["would"]},{"Key":"test would","Fragments":["be"]},{"Key":"- This","Fragments":["is","test"]},{"Key":"is word-count,","Fragments":["would"]},{"Key":"word-count, would","Fragments":["you"]},{"Key":"you expect","Fragments":["\"5\""]},{"Key":"expect \"5\"","Fragments":["to"]},{"Key":"\"5\" to","Fragments":["be"]},{"Key":"be counted","Fragments":["as"]},{"Key":"counted as","Fragments":["a"]},{"Key":"a word?","Fragments":["Your","Can't"]},{"Key":"word? Your","Fragments":["regex"]},{"Key":"Your regex","Fragments":["suggests","looks"]},{"Key":"regex suggests","Fragments":["it"]},{"Key":"suggests it","Fragments":["is."]},{"Key":"- There's","Fragments":["a"]},{"Key":"There's a","Fragments":["function","bit","little","static","really","subtle","simpler","core","blank","redundant","less","lot","missing","fair","lot","name","function","simpler","lot","fair","simpler","little","lot","function","great","domain","domain","concept","predicate"]},{"Key":"a function","Fragments":["in","named","declaration,","that","would","from","that","which","that","that","like","that","that","that","works","that","too","or","(as","for","in","working","for","accepting","for","that","for","accepting","like","in","on","like","with","that","like","that","with","that","with","returning","with","to","instead","for","like","to","that","named","`clojure.string/join`","in","for","that","than","you'd","that","precondition","to","with","call.","which","can","(either","call","is","for","that","when","that","name.","so","`clojure.string/join`.","that","is","to","even","is","that","in","of","to","with","we","which","returns","converts","in","named","in","between","of","in","that's","to","is","called","name.","there","does","that","called","called","each","that","using","to","like","now.","as","that","that","that","`check`","that","and"]},{"Key":"function in","Fragments":["clojure.core","this","the","place","the","question","very","you","the","`bottles`","core","the","core.","a","a","the","the","`clojure.string`","a","addition","clojure.core;","clojure.core;","Clojure.","clojure.core","clojure.core","add-unique-name.","clojure.core","clojure.core","the","`map`","'translate","`question?`","the","the"]},{"Key":"in clojure.core","Fragments":["called","if","that","to","if","that","to"]},{"Key":"clojure.core called","Fragments":["\"frequencies\""]},{"Key":"called \"frequencies\"","Fragments":["that"]},{"Key":"\"frequencies\" that","Fragments":["may"]},{"Key":"that may","Fragments":["help","be","be","be","be","help","look","come","just","be"]},{"Key":"may help","Fragments":["you","```response-for```","understand","you","you","with"]},{"Key":"you in","Fragments":["simplifying"]},{"Key":"in simplifying","Fragments":["`word-count`."]},{"Key":" Very","Fragments":["nice","nice.","valid","nice!","clean","nice.","nice.","nice!","nice","nice","concise!","nice.","cool!","nice.","nice","nice","creative","cool.","nice!","nice,","nice","tiny","nice.","clear","straight","minor","minor,","nice","busy","concise","concise!","simple","close","nice","clean.","short","nice!","beautiful"]},{"Key":"Very nice","Fragments":[":)",":)",":)",":)",":)",":)","code","observations!","otherwise."]},{"Key":" Cool,","Fragments":["I","I"]},{"Key":"Cool, I","Fragments":["think","really"]},{"Key":"think this","Fragments":["is","works","is","is","is","looks","can","is","submission","reads","alone","is","is","is","has","looks","one","makes","solution","one","exercise","is","can","would","looks","solution","would","function","is","looks","is","is","is","is","could","is"]},{"Key":"a lot","Fragments":["more","clearer.","of","more","more.","going","of","easier.","of","of","to","by","cleaner.","--","of","though.","of","of","better","of","of","shorter","@shania!","of","of","of","of","more","more","more","of","in","about","of","I","simpler","of","harder","nicer.","and","with","to","to","easier","of","clearer...","of","of","simpler","simpler","more","and","easier","better.","nicer.","to","of","in","for","of","of","to","of","of","of","simpler","of","of","(and","of","of","of","for"]},{"Key":"lot more","Fragments":["readable.","readable.","complicated","clear","happening","readable","sense."]},{"Key":"more readable.","Fragments":["One","*Do","Is","Also:","I","Also,"]},{"Key":"readable. One","Fragments":["minor"]},{"Key":"if an","Fragments":["input","item"]},{"Key":"an input","Fragments":["didn't","phrase"]},{"Key":"input didn't","Fragments":["match"]},{"Key":"I will","Fragments":["approve","stick","mark","nominate.","fix","submit","take","add","think","happily","take","go","look","be","review","probably","clarify","consider","organize","fix","fix","try","move","stay","probably","grant","find","change","probably","revise","be","now","try","improve","rework","consider"]},{"Key":"will approve","Fragments":["this,"]},{"Key":"approve this,","Fragments":["and"]},{"Key":"this, and","Fragments":["then","the","you"]},{"Key":"and then","Fragments":["you","count","you","referring","just","just","use","comparing","constructed","a","you","additionally","let","convert","use","scanning","reversing","recreating","the","it","wait","merge","will","the","use","recursing","run","filtering","matching","it","I","back","negated","saw","combine","used"]},{"Key":"then you","Fragments":["should","can","can","have","don't","won't","wouldn't","will","will","could","can","don't"]},{"Key":"to see","Fragments":["other","you","a","`-\u003e`","people","if","you","you","the","if","if","the","what","what","somebody","the","if","if","if","you","if","`(int","how","the","the","that","what","you","how","a","`[word","the","`sorted-word`","a","if","that","if","if","whether","if","if","it","people","if","the","what's","`clojure.test`","functions","clojure.string/","if","if","`replace`","if","if","those","if","if","`(last","if","how","how"]},{"Key":"see other","Fragments":["\"bob\""]},{"Key":"other \"bob\"","Fragments":["solutions"]},{"Key":"\"bob\" solutions","Fragments":["in"]},{"Key":"solutions in","Fragments":["clojure","other"]},{"Key":"clojure and","Fragments":["provide","didn't","this"]},{"Key":"and provide","Fragments":["feedback."]},{"Key":"provide feedback.","Fragments":["When"]},{"Key":"feedback. When","Fragments":["you"]},{"Key":"When you","Fragments":["submit","suggested","define","see"]},{"Key":"you submit","Fragments":["the"]},{"Key":"submit the","Fragments":["next"]},{"Key":"the next","Fragments":["exercise","problem!","one.","one.","exercise.","one","line","revision!","submission.","assignment.","line?","line","line:","iterations.","step","iteration,","iteration","unless","iteration","one.","form.","line","line","one.","iteration.","iteration).","line.","line","submission"]},{"Key":"next exercise","Fragments":["and"]},{"Key":"exercise and","Fragments":["it"]},{"Key":"it is","Fragments":["approved,","a","the","common","preference,","easy","better","certainly","clear","more","not","private),","less","a","important","not","now,","such","this","somewhat","so","in","stated","doing,","used","contained","or","a","doing.","possible","far","*content*","too","because","making","more","quite","a","simple","a","doing","upper","to","trying","already","rna-codes","appropriate","yet.","likely","only","more","the","much","slightly","more","in","not.","used","used","solved","better","more","probably","pretty","unusual","ok","better.","good","better","not","specified","used","a","for","pretty","empty.","empty,",":)","what","better","more"]},{"Key":"is approved,","Fragments":["you'll"]},{"Key":"approved, you'll","Fragments":["be"]},{"Key":"you'll be","Fragments":["able","reading"]},{"Key":"to review","Fragments":["submissions"]},{"Key":"review submissions","Fragments":["for"]},{"Key":"submissions for","Fragments":["that"]},{"Key":"for that","Fragments":["exercise","writeup","function.","but","but","use","-","instead","if","in","in","one.","to","statement.","method.","kind"]},{"Key":"that exercise","Fragments":["as"]},{"Key":"exercise as","Fragments":["well,","purely"]},{"Key":"as well,","Fragments":["and","the","and","thank","but","so","but","so","but","then"]},{"Key":"well, and","Fragments":["so","it's","see"]},{"Key":"and so","Fragments":["on.","can","I'm","on","on.","descriptive."]},{"Key":" They","Fragments":["should","helped"]},{"Key":"They should","Fragments":["be","be","only"]},{"Key":"be private","Fragments":["if","functions?","to"]},{"Key":"private if","Fragments":["this"]},{"Key":"if this","Fragments":["specific","was","is","code","would","is","is","is","is","approach"]},{"Key":"this specific","Fragments":["problem","case."]},{"Key":"specific problem","Fragments":["is"]},{"Key":"problem is","Fragments":["all","in","working","arranging","using","the"]},{"Key":"is all","Fragments":["we","caps,","about"]},{"Key":"all we","Fragments":["need."]},{"Key":"we need.","Fragments":["They"]},{"Key":"need. They","Fragments":["should"]},{"Key":"public if","Fragments":["this"]},{"Key":"this was","Fragments":["a","approved","already","supposed","an","weirdly","prettier.","my","a","to","also","basically","the","trivial"]},{"Key":"was a","Fragments":["library","huge","question,","one","`private`","hypothetical","slip","more","great","pain","specific","nice","good","symbol","name","good","valid","fraction","science","good","mistake","custom","way","poor","long","little","bit","little","tricky","default","contraption","map","thing","little"]},{"Key":"a library","Fragments":["to","function","function"]},{"Key":"library to","Fragments":["analyze"]},{"Key":"to analyze","Fragments":["statements"]},{"Key":"analyze statements","Fragments":["in"]},{"Key":"statements in","Fragments":["a","the","its"]},{"Key":"a dialog","Fragments":["for"]},{"Key":"dialog for","Fragments":["example."]},{"Key":"for example.","Fragments":["Thanks","That"]},{"Key":"example. Thanks","Fragments":["for"]},{"Key":" Hi,","Fragments":["good","this","good","What"]},{"Key":"Hi, good","Fragments":["to","to"]},{"Key":"see you","Fragments":["on","too!!","on","on","here.","haven't"]},{"Key":"you on","Fragments":["here!","here!","the","it","your","that","here!"]},{"Key":"on here!","Fragments":[":)"]},{"Key":"worth it","Fragments":["to","or","to","in","to","for","to","but"]},{"Key":"it to","Fragments":["create","work","define","be","the","be","heed.","you...","make","make","use","see","look","vector.","vectors","be","a","compare","compare","get","just","implement","assert","just","a","a","a","read","be","make","avoid","the","```acc```","make","`join`","boolean.","string.","work.","`seq`.","a","a"]},{"Key":"to create","Fragments":["a","a","defines","a","a","private","a","a","separate","_private_","a","a","\"on-planet\"","new","array","anonymous","a","some","a","a"]},{"Key":"create a","Fragments":["private","helper","so","module","really","separate","private","more","lazy","function","general","set","new","new","Var","function","separate","new","new","solution","new","private","more","more","function"]},{"Key":"a private","Fragments":["function","function.","helpers","`question?`","function","function","helper","function,","function","method.","method","function","function,","function.","function,","`responses`","method","method","function"]},{"Key":"private function","Fragments":["that","to","useful","`anagram?`","for","could","to","to"]},{"Key":"function that","Fragments":["does","needs","is","needs","you","does","can","you've","already","can","came","would","you're","returns","you","encapsulated","you","returns","returns","returns","closes","could","you","isn't","saves","can","just","tests","could","would","takes","does","does","allows","handles","takes","uses","I","returns","split","returns","does","can","takes","you","takes","tests","would"]},{"Key":"that does","Fragments":["your","not","it,","only","what","what","to","the","the","look","to","both"]},{"Key":"does your","Fragments":["blank"]},{"Key":"your blank","Fragments":["check"]},{"Key":"blank check","Fragments":["to"]},{"Key":"check to","Fragments":["be","see","another","`anagram?`","see","see","see","`anagram?`"]},{"Key":"be consistent","Fragments":["with","with"]},{"Key":"consistent with","Fragments":["the","naming","your","treating","the","what's"]},{"Key":"other two","Fragments":["checks?","fn","fn","function","functions","function"]},{"Key":" Ok,","Fragments":["this","is","thanks.","I've","after","I'll","I","now","so","I've","I","so","this","I've"]},{"Key":"Ok, this","Fragments":["is","one"]},{"Key":"is great","Fragments":[":)","feedback.","if"]},{"Key":"Would there","Fragments":["be"]},{"Key":"better way","Fragments":["to","to","of","in","in","to","to","to","of","to","to","of","to","to","to","to","to","to","to","but"]},{"Key":"to check","Fragments":["against","to","for","for","for","if","for","for","invariants","for","for","for","for","out","their","for","the","for","for","if","explicitly","for","for","for","for","for","for","for","for","whether","for","all","that","for","for","if","for","if","out"]},{"Key":"check against","Fragments":["this"]},{"Key":"against this","Fragments":["than"]},{"Key":"this than","Fragments":["to"]},{"Key":"than to","Fragments":["break","rely","partially"]},{"Key":"to break","Fragments":["out","it","them","the","up","things","apart","the","out","each"]},{"Key":"break out","Fragments":["the","another"]},{"Key":"out the","Fragments":["regular","preferred","conditions","`subs`","checks","conditions","three","tests","next","sorting","\u003ccode\u003e:use\u003c/code\u003e","implementation","Clojure","same","possibility","[nth](http://clojuredocs.org/clojure_core/clojure.core/nth)","splitting","ones","conditions","documentation","solution","namespace","\"frequencies\"","\"frequencies\"","input","commas","empty","issue","`sentiment`","`not=","README","following.","area","conditions","pluralization","filter,","particular","validation","punctuation.","more","Clojure?","threading","logic","difference","next"]},{"Key":"the regular","Fragments":["expressions","expression","expression","expression.","expression?","expression","expression.","expression","expression","expressions.","expressions","expressions","expressions?","expression","expressions?","expression","expression"]},{"Key":"regular expressions","Fragments":["right","to","to","also.","I","were","to","for","don't","since","but","and","makes","for","-","were","is","in","as","than"]},{"Key":"expressions right","Fragments":["away?"]},{"Key":"lot clearer.","Fragments":["`(frequencies"]},{"Key":"clearer. `(frequencies","Fragments":["(words"]},{"Key":"`(frequencies (words","Fragments":["input))`"]},{"Key":"(words input))`","Fragments":["is"]},{"Key":"input))` is","Fragments":["pretty","likely"]},{"Key":"is pretty","Fragments":["descriptive!","snazzy","neat.","cool.","compact","clean.","much","hard","much","compact","easy","low","much","much","long.","rubbish.","much","rare","limiting.","simple?","concise","gross,","concise,","sh*tty","easy"]},{"Key":" Looks","Fragments":["good.","great!","good","good","good.","great!","good!","good!","great","good","good","like","good.","good","great!","good.","better.","good","great","like","nice!","good!","nice,","good","good!","great!","good,","quite","good.","good","pretty","good,","great!","good!","great!","great!","nice!","good.","like","good.","good.","great!","cool.","good","good,","good.","great","great!","good.","good.","very","great.","like","good","good.","good","good.","good.","so","good","good.","pretty","like","like","nice,","OK.","effective.","great!","better","good,","like","great,","good!","nice,","pretty","good.","great","nice.","good.","like","good!","good","good.","good","good.","pretty","pretty","nice","good,","generally","good.","good,","great","really","good.","pretty","reasonable","good!","good,","good.","good","good.","good","good.","good","good.","good","good","great.","great!","really","clean","just","good","good","good.","good","great.","great.","good,","great!","good.","good,","very","good.","good.","very","great!","great.","fine.","good!","good!","like","good","good,","good.","great","good.","good","pretty","good,","great."]},{"Key":"I can","Fragments":["see","see","make","see","think","certainly","do","improve","do","tell,","see","then","follow","see","only","point","try","find.","think","think","figure","think","tell","see","dig","avoid","pass","say","totally","do","dynamically","rework","make","think","get","kind","recommend","make","learn","find","break","appreciate","find","see","make","get","use","use","improve","motivate","get","throw","learn","get","refactor","think","see","always","redo"]},{"Key":"can see","Fragments":["arguments","how","the","arguments","arguments","the","that","that","where","that","that","the","jumping","if","line","my","why"]},{"Key":"see arguments","Fragments":["either","for","for"]},{"Key":"arguments either","Fragments":["way."]},{"Key":"either way.","Fragments":["Another",":-)"]},{"Key":"way. Another","Fragments":["option"]},{"Key":"Another option","Fragments":["would","would","is"]},{"Key":"option would","Fragments":["be","be"]},{"Key":"be to","Fragments":["define","match","support","just","re-use","automate","use","just","read","rename","use","define","introduce","give","use","pull","use","include","use","solve","only","use","use","look","reduce"]},{"Key":"to define","Fragments":["vars","(maybe","vars","a","some","variables","the","them","functions","things","`dna/count`","the","it","`count`","function","local","separate","local","the","than","the","a"]},{"Key":"the characters","Fragments":["so","mean.","\\T","to","with","as","in","instead","in","though?","are","in","GCTA,"]},{"Key":"that at","Fragments":["least","some"]},{"Key":"least you","Fragments":["know"]},{"Key":"you know","Fragments":["what","about","Java?","is","about","I","already","that","if","that","about","nothing","about","you","that","`frequencies`?","about","it's","a","the","it's"]},{"Key":"know what","Fragments":["the","I'm","function","`\\T`","you","\"some\"","is","to","is","it","`x`","the","else","it","I'm","I","`defmacro`"]},{"Key":"what the","Fragments":["characters","intent","```str/replace```","string","right","`(first","behaviour","dependencies","benefit","program","software","usual","code","singular","exercise","function","if","code","function","function","right","performance","function","heck","intent","implementation","function","code","last","constraints"]},{"Key":"characters mean.","Fragments":["Which"]},{"Key":"mean. Which","Fragments":["do"]},{"Key":"Which do","Fragments":["you"]},{"Key":"think is","Fragments":["better?","debatable","a","a","conflating"]},{"Key":" Despite","Fragments":["your","being"]},{"Key":"Despite your","Fragments":["comment,"]},{"Key":"your comment,","Fragments":["I"]},{"Key":"comment, I","Fragments":["think"]},{"Key":"this works","Fragments":["pretty"]},{"Key":"works pretty","Fragments":["well.","well,","well,"]},{"Key":"pretty well.","Fragments":["It's"]},{"Key":"well. It's","Fragments":["clear"]},{"Key":"It's clear","Fragments":["what","the"]},{"Key":"clear what","Fragments":["operation","that","happens.","you","each","they","`ws`","the"]},{"Key":"what operation","Fragments":["is"]},{"Key":"operation is","Fragments":["happening","being","being"]},{"Key":"is happening","Fragments":["to"]},{"Key":"happening to","Fragments":["the"]},{"Key":"string -","Fragments":["\"replace"]},{"Key":"- \"replace","Fragments":["thymidine"]},{"Key":"\"replace thymidine","Fragments":["with"]},{"Key":"thymidine with","Fragments":["uracil","uracil"]},{"Key":"with uracil","Fragments":["in","**AND**"]},{"Key":"uracil in","Fragments":["dna-string\"."]},{"Key":" That","Fragments":["looks","said,","being","being","means","looks","really","may","being","said,","made","-1","aside","is","may","obviously","assert","said,","said,","does","being","was","allows","does","looks","`case`","case"]},{"Key":"That looks","Fragments":["more","like","fine"]},{"Key":"looks more","Fragments":["intuitive,","natural."]},{"Key":"more intuitive,","Fragments":["but"]},{"Key":"intuitive, but","Fragments":["it"]},{"Key":"it still","Fragments":["might","gives","is","can","doesn't"]},{"Key":"still might","Fragments":["benefit"]},{"Key":"might benefit","Fragments":["by"]},{"Key":"benefit by","Fragments":["moving"]},{"Key":"by moving","Fragments":["functionality","checks"]},{"Key":"moving functionality","Fragments":["out"]},{"Key":"functionality out","Fragments":["into"]},{"Key":"out into","Fragments":["new","it's","private","functions","separate","more","more","it's","clearly","separate","a","a","a","predicates,"]},{"Key":"into new","Fragments":["functions."]},{"Key":"new functions.","Fragments":["(the"]},{"Key":"functions. (the","Fragments":["form"]},{"Key":"(the form","Fragments":["from"]},{"Key":"form from","Fragments":["`re-seq`"]},{"Key":"from `re-seq`","Fragments":["inward,"]},{"Key":"`re-seq` inward,","Fragments":["perhaps?)"]},{"Key":"it. It","Fragments":["describes","seemed","didn't"]},{"Key":"It describes","Fragments":["in"]},{"Key":"describes in","Fragments":["domain"]},{"Key":"in domain","Fragments":["language"]},{"Key":"domain language","Fragments":["exactly","as","as","the"]},{"Key":"language exactly","Fragments":["what"]},{"Key":"what ```dna/to-rna```","Fragments":["is"]},{"Key":"```dna/to-rna``` is","Fragments":["accomplishing.","very"]},{"Key":"is accomplishing.","Fragments":["If"]},{"Key":"accomplishing. If","Fragments":["we"]},{"Key":"If we","Fragments":["omitted","did"]},{"Key":"we omitted","Fragments":["the"]},{"Key":"omitted the","Fragments":["extra"]},{"Key":"the extra","Fragments":["function,","line.","`in-range`","check","checks","glue","complexity","`:last`","code.","effort,"]},{"Key":"extra function,","Fragments":["and"]},{"Key":"function, and","Fragments":["the","naming","whether","I","a","I","I"]},{"Key":"and the","Fragments":["reader","string/replace","contained","related","last","`thyidine?`","only","responses","statement-types:","validation","base","helpers","other","character","previous","comparison","keys","data","processed","fact","program","latter","use","plural","arguments","sorted","characters-of","test","call","nucleotide","`.*`","value","args","set","reader","require/use/import","individual","result","result","value","names","value","transcription.","structure.","replace.","whole","fact","`else`","core","associated","loop-recur","tests","`:else`","general","characters","function","usage","lack","rand-nth","logic","tests.","lines","code.","non-empty","conditional","`map`","```IFn```","string","[Clojure","validation","check","`letters-match?`","exact","separate","transcription"]},{"Key":"the reader","Fragments":["had","scan","of","should","for","recognize","is","from","will","where","that"]},{"Key":"reader had","Fragments":["little"]},{"Key":"had little","Fragments":["knowledge"]},{"Key":"little knowledge","Fragments":["of"]},{"Key":"knowledge of","Fragments":["the","1986","the","the","idiomatic","Emacs-Lisp","Clojure","the"]},{"Key":"the domain,","Fragments":["would"]},{"Key":"domain, would","Fragments":["it"]},{"Key":"be clear","Fragments":["to","in"]},{"Key":"clear to","Fragments":["said","check","the","me.","understand","the","me.","the"]},{"Key":"to said","Fragments":["reader"]},{"Key":"said reader","Fragments":["why"]},{"Key":"reader why","Fragments":["swapping"]},{"Key":"why swapping","Fragments":["Ts"]},{"Key":"swapping Ts","Fragments":["with"]},{"Key":"Ts with","Fragments":["Us"]},{"Key":"with Us","Fragments":["makes"]},{"Key":"Us makes","Fragments":["DNA"]},{"Key":"makes DNA","Fragments":["into"]},{"Key":"DNA into","Fragments":["RNA?"]},{"Key":" moving","Fragments":["the"]},{"Key":"moving the","Fragments":["conversion","logic","conditionals","conditional","lower","argument","require","map"]},{"Key":"the conversion","Fragments":["into","in","to","of","also","(private"]},{"Key":"conversion into","Fragments":["a"]},{"Key":"into a","Fragments":["different","private","tail","`let`?","word","sequence","sequence","string.","single","helper","count,","language","single","separate","series","`anagram?`","lot","named","hash","single","function?","couple","string","separate,","module","named","string:","set","single","named","helper","separate","reduce","sequence","few","string.","simple","single","function.","character","`letfn`?","seq.","`seq`","single","non-test","sequence","few","Map.","sequence.","`let`","separate","position","method","map","single","named","sequence","letter-counter.","separate","separate","single","map.","sequence","function","simple","single","single","single","single","varargs"]},{"Key":"different function","Fragments":["seems"]},{"Key":"function seems","Fragments":["good","like"]},{"Key":"seems good","Fragments":["at"]},{"Key":"good at","Fragments":["first","all...","expressing"]},{"Key":"at first","Fragments":["glance","even","glance","sight.",":)","this"]},{"Key":"first glance","Fragments":["here,","-"]},{"Key":"glance here,","Fragments":["but"]},{"Key":"but is","Fragments":["the","there","it","`sanatize`","it","it"]},{"Key":"the additional","Fragments":["level","regex","scenario","test"]},{"Key":"additional level","Fragments":["of"]},{"Key":"level of","Fragments":["indirection","abstraction","abstraction","abstraction","abstraction.","abstraction","indentation","abstraction","abstraction","the","abstraction","abstraction","the","abstraction","abstraction","readability","accuracy","abstraction?","granularity.","detail.","nitpicking.","detail,","nitpicking"]},{"Key":"of indirection","Fragments":["really"]},{"Key":"indirection really","Fragments":["necessary"]},{"Key":"really necessary","Fragments":["to","is"]},{"Key":"to understand","Fragments":["the","and","or","what","what","because","it","the","what","why","and","it","either","every","this","what","the","it","rather","as","as","`drop_and_show`.","immediately","what","apply.","it"]},{"Key":"understand the","Fragments":["function?","threading","full","code","full","difference.","condition","problem","code","task","reason","rationale","prime","code","basics"]},{"Key":" It's","Fragments":["pretty","a","native","a","also","only","`frequencies`","probably","too","definitely","not","really","a","hard","almost","fine","a","actually","not","the","more","generally","a","always","the","also","possible","longer","not","typical","overkill","a","also","pretty","often","probably","great","also","not","recommended","worth","a","not","interesting,","idiomatic","common","difficult","sufficient","subjective,","good","not","amazing","a","interesting"]},{"Key":"It's pretty","Fragments":["clear","simple,","common"]},{"Key":"pretty clear","Fragments":["what's"]},{"Key":"clear what's","Fragments":["happening","going","going"]},{"Key":"what's happening","Fragments":["here,"]},{"Key":"happening here,","Fragments":["defining"]},{"Key":"here, defining","Fragments":["`thymine`"]},{"Key":"defining `thymine`","Fragments":["and"]},{"Key":"`thymine` and","Fragments":["`uracil`"]},{"Key":"and `uracil`","Fragments":["makes"]},{"Key":"`uracil` makes","Fragments":["it"]},{"Key":"makes it","Fragments":["explicit","a","more","obvious","easier","harder","much","very","easy","clear","immediately","clean","harder","more","more","appear","harder","much","possible","somewhat","a","dead","more","more","easy","very","more","a"]},{"Key":"it explicit","Fragments":["what","that"]},{"Key":"explicit what","Fragments":["transcription"]},{"Key":"what transcription","Fragments":["is"]},{"Key":"transcription is","Fragments":["happening."]},{"Key":"is nice","Fragments":["and","to","-","at","since"]},{"Key":"nice and","Fragments":["concise!","clean.","concise,"]},{"Key":"and concise!","Fragments":["It's"]},{"Key":"concise! It's","Fragments":["clear"]},{"Key":"clear the","Fragments":["only","word","`anagrams-for`"]},{"Key":"the only","Fragments":["thing","implementation","thing","thing","thing","thing","function","function","nitpick","thing","remaining","thing","way","pieces","values","thing","language","values","real","way","thing","way","other","thing","clojure","comment","difference","method","thing","lazy","function","difference","place","thing","“nitpick”","good","function","two"]},{"Key":"only thing","Fragments":["to","I","that","that","I","I","I","I","I'd","I","I","we","these","that","I","unique","changing","I'd","that","that","I","I'd","I"]},{"Key":"thing to","Fragments":["do","discuss","solve","consider","consider:","do","do,","do","do,","do.","do","remember","consider","recognize","just","recognize","words","consider:","point"]},{"Key":"to do","Fragments":["to","it,","efficiently","this","it.","without","it.","when","split-words","(.endsWith","the","the","this?","just","accomplish","that","the","with","the","so","something","it","this.","it","the","with","this","`#(=","it","that.","some","this","-","is","things","conditional","it","it","it","this","with","it","in","what","something","the","a","this.","this","forward","that.","this","one","it","if","that","this.","that","or","since","this","simple","so","it","so.","this","once,","a","it","anything","with","what","it","it","this.","it","almost","dynamically","most","it.","that.","with","it","and","a","is","it.","it","branching","the","that","the","is","some","like","it,","at","the","something","regex,","a","a","this.","a","into.","assert","it","it","an","just","this.","it","it...","so.","everything","the","it","an","more","`last`,","some","(=","this","it","it.","it","it.","assertions","something","it.","the","that","this","this,"]},{"Key":"to convert","Fragments":["is","each","nil","a","strings","DNA","result","the","without","back","it","it","booleans","to","collections","it"]},{"Key":"convert is","Fragments":["to"]},{"Key":"is to","Fragments":["swap","stack","tweak","use","look","place","vertically","use","try","use","using","use","group","account","possibly","transcribe","put","name","write","make","simply","put","upcase","reduce","use","suggest","squash","ignore","see","wrap","use","use","hack","return","separate","use","refer","create","use","use","force","use","use","convert","use","simply","simplify","have","sort","use","replace","namespace","get","replace","use"]},{"Key":"to swap","Fragments":["those","one"]},{"Key":"swap those","Fragments":["characters."]},{"Key":"- Would","Fragments":["it","it"]},{"Key":"use `re-seq`","Fragments":["to","with","for"]},{"Key":"`re-seq` to","Fragments":["select","filter","grab"]},{"Key":"to select","Fragments":["the","only"]},{"Key":"select the","Fragments":["words,"]},{"Key":"the words,","Fragments":["instead"]},{"Key":"words, instead","Fragments":["of"]},{"Key":"instead of","Fragments":["splitting","lower-casing","`(anything?","binding","the","using",".endsWith.","letters?","responding","a","Java.","empty?","`defn`?","a","splitting","the","nested","`true`","Java's","`(string/join","running","defn","function","direct","`.endsWith`.","negative.","mapping","the","`_`.",":use/:only?","regular","nested","testing,","`sort`","underscore","duplicating","processing","underscore","`def`","resorting","`clojure.string/split`?","`default?`","a","using","having","`map`","O(n","O(n","O(n","indexOf","mapping","nested","`-\u0026gt;`","a","(fn","`.toLowerCase`,","`sort`?","```sort```?","exploding","fn","an","eliminating","recreating","nesting","the","the","nesting","`or`","`for`.","the","`merge-with`.","ref","`join`.","anonymous","`trim`.","`clojure.string/join`","`(=","`48`","functions,","underscores","the","just","`(int","`:as","`(last","the","ints.","`:use`","java","```split```",":use","strings","(compare)","empty?","```:use```.","using","upper-case).","```subs```","`(\\w+)`,","\"is\"","calling","`[word,","`anagrams`.","this:","the","`apply`,","what","`:use`","`get`.","`cond`","two","simply","repeat","multiple","stopping","a","using","matching","get-then-add-or-update.","having","(def","def","`re-seq`","`--\u003e`.","using","`last`","4.","`string/split`","counting","`sort`,","O(n","strings.","adding","trying","using","`(def","`def`","having","'t-to-u'.","splitting","joining","`cond`","defining","tackling","`not`","\"s\"?","`if`","nesting","using","re-seq","`endsWith`.","the","a","conditionals.","```(split","a",".isEmpty,","just","mixing","map.","having","square","defn.","`(if","`(=","`if`","mapping","a","these","duplicating","the","the","calling","the","`%1`","the","`(BigInteger.","`.pow`","mapping","recursion","direct","recursion","direct","explicitly","dereferencing","needing","functions","passing","repeating","the","the","a","`.endsWith`.","needing","anchors","```empty?```","a","the","loop/recur.","a","the","`string/split`.","manual","the","comparing","raw","using","(BigInteger.","replace","creating","`cond`.","`s`","splitting","evaluating","`is-anagram`.","on","`Exception`.","empty","a","`(=","using","`(empty?","`#(anagram?","`=","`is_anagram?`","calling","`cond`?","`(\u003e","`clojure.string/trim`.","_m,","looping.","parsing","top-level","`(=","the","`cond`?","`concat`","multi-arity","`\\space`","\"frequencies\".","`(is-asking-question?","`cond`","doing","two.","endwith?","regex.","calling","my","my","nested","`if`.","the","recursion?","string","\"converting","a","`clojure.string/join`","character","the"]},{"Key":"of splitting","Fragments":["on","up","on","each","the","on"]},{"Key":"splitting on","Fragments":["everything","the","non-word","that,","one","that,","every","non-word","whitespace","`#\"\\s+\"`,"]},{"Key":"on everything","Fragments":["else?","that"]},{"Key":"- Why","Fragments":["are"]},{"Key":"Why are","Fragments":["you","we"]},{"Key":"are you","Fragments":["mapping","testing","checking","suggesting","familiar","using?","using","saying","saying","suppose","?"]},{"Key":"you mapping","Fragments":["`lower-case`"]},{"Key":"mapping `lower-case`","Fragments":["to","on"]},{"Key":"`lower-case` to","Fragments":["every","the"]},{"Key":"to every","Fragments":["item","call"]},{"Key":"every item","Fragments":["in"]},{"Key":"item in","Fragments":["the","the","the"]},{"Key":"the sequence","Fragments":["instead","functions","related","of","you"]},{"Key":"sequence instead","Fragments":["of","of"]},{"Key":"of lower-casing","Fragments":["the"]},{"Key":"lower-casing the","Fragments":["input","candidate"]},{"Key":"input string","Fragments":["itself?","into","may","looking","before","four","through","to"]},{"Key":"- `str`","Fragments":["is"]},{"Key":"`str` is","Fragments":["a"]},{"Key":"a built","Fragments":["function,","in","in","in","in","in"]},{"Key":"built function,","Fragments":["so"]},{"Key":"function, so","Fragments":["you","I","loading","`(get"]},{"Key":"so you","Fragments":["might","don't","can","don't","can","don't","don't","don't","can","could","should","can","could","don't","could","can","can't","can","could","can","wouldn't","might","don't","probably","may","don't","can","probably","probably","don't","don't","can","can","shouldn't","could","shouldn't","shouldn't","don't","don't","can","don't","don't","often","don't","don't","could","could","could"]},{"Key":"you might","Fragments":["wanna","make","consider","implement","choose","be","consider","do","in","consider","find","want","want","consider","want","like","like:","want","think","want","consider","not","want","want","want","want","check","not","want","like.","want","expect.","change:","want","find","possibly","consider","have"]},{"Key":"might wanna","Fragments":["rename"]},{"Key":"wanna rename","Fragments":["your"]},{"Key":"rename your","Fragments":["argument.","val"]},{"Key":" Er,","Fragments":["checking"]},{"Key":"Er, checking","Fragments":["```drivel```"]},{"Key":"checking ```drivel```","Fragments":["against"]},{"Key":"```drivel``` against","Fragments":["an"]},{"Key":"against an","Fragments":["upper-cased"]},{"Key":"an upper-cased","Fragments":["version"]},{"Key":"upper-cased version","Fragments":["of"]},{"Key":" It","Fragments":["doesn't","does","doesn’t","may","might","is","works","might","took","might","feels","also","might","was","does","seems","would","might","rocks","feels","may","leads","just","looks","generates","seems","is","feels","doesn't","wasn't","came","would","might","might","looks","seems","turns","looks","also","would","would","looks","seemed","still","looks","works","seems","looks","was","might","would","is","made","should","would","might","looks","might","helped","helped","seems","might","might","might","feels","looks","might","can","looks","took","doesn't","would","always","looks","feels","surely","passes","might","seems","feels","would","looks","seems"]},{"Key":"It doesn't","Fragments":["appear","seem","look","tell","look","look","seem"]},{"Key":"doesn't appear","Fragments":["that","that"]},{"Key":"appear that","Fragments":["your","there's"]},{"Key":"that your","Fragments":["```shouting?```","methods","words","helper","suggestion","reader","`cond`","helper"]},{"Key":"your ```shouting?```","Fragments":["method"]},{"Key":"```shouting?``` method","Fragments":["will"]},{"Key":"method will","Fragments":["match"]},{"Key":"will match","Fragments":["anything"]},{"Key":"match anything","Fragments":["with"]},{"Key":"anything with","Fragments":["spaces."]},{"Key":"with spaces.","Fragments":["Have"]},{"Key":"spaces. Have","Fragments":["you"]},{"Key":"Have you","Fragments":["considered","considered","looked","considered","considered","considered","looked","considered","thought","considered","considered","considered","considered","considered","tried","considered","considered","considered","looked","seen","investigated","considered","considered","considered","considered","thought","considered","considered","tried","considered","considered","looked","thought","thought","looked","considered","considered","decided","considered","seen","run","considered","run","considered","considered","considered","tried","tried"]},{"Key":"you considered","Fragments":["simply","private","moving","defining","breaking","defining","moving","defining","looking","defining","using","dropping","```clojure.core/re-seq```?","normalizing","normalizing","defining","using","that","using","requiring","using","using","using","requiring","using","letting","defining","other","alternatives","using","the","alternatives","interpolating","iteratively","using"]},{"Key":"considered simply","Fragments":["upper-casing"]},{"Key":"simply upper-casing","Fragments":["the"]},{"Key":"upper-casing the","Fragments":["entire"]},{"Key":"the entire","Fragments":["message?","`clojure.string`","namespace","string","library","clojure.string","string","string.","string","input","input"]},{"Key":"Also, do","Fragments":["the","you"]},{"Key":"do the","Fragments":["conditional","transformation,","trim","same","work.","conversion","same","same","work","job?","same","last","bulk","validation","validation","transformation.","split","split,","number","trick,","tedious","same!","assert."]},{"Key":"the conditional","Fragments":["methods","logic?","logic","logic","logic","logic","logic","logic?","and","in","apart","switched","checks.","checks","checks."]},{"Key":"conditional methods","Fragments":["need"]},{"Key":"methods need","Fragments":["to"]},{"Key":"not too","Fragments":["familiar","hung","fond","happy","nit-picky","unfamiliar","sure","sure","fast."]},{"Key":"too familiar","Fragments":["with"]},{"Key":"familiar with","Fragments":["Clojure","`^:const`,","lisp.","`re-seq`?","the","the","the","the","`replace`,","```clojure.string/replace```?","\\p","it.","`clojure.string`","that","`:refer","all"]},{"Key":"with Clojure","Fragments":["but","I","Programming","thus","during","so","fns","built-ins","1.7)"]},{"Key":"Clojure but","Fragments":["I'll","i've","it"]},{"Key":"but I'll","Fragments":["definitely","see","have","dig","attempt","use"]},{"Key":"I'll definitely","Fragments":["look"]},{"Key":"definitely look","Fragments":["into"]},{"Key":"look into","Fragments":["splitting","using","those!","that.","that.","the","this","`memoize`","that,","it.","the","some","the","the","`eval`","the","partial","the","the","the","are","how","the","that.","the","isLetter","`case`","the","`partial`"]},{"Key":"into splitting","Fragments":["the"]},{"Key":"splitting the","Fragments":["conditions","input","initial","filter","process","string","predicates","string"]},{"Key":"the conditions","Fragments":["off","out","into","to","need","inside","in","in","to","into","into","in","you","into","that","for","means","makes","up"]},{"Key":"conditions off","Fragments":["into"]},{"Key":"off into","Fragments":["private","a"]},{"Key":"private functions.","Fragments":["Thanks","I'm"]},{"Key":"functions. Thanks","Fragments":["for"]},{"Key":"Hmm, yeah","Fragments":["-"]},{"Key":"yeah -","Fragments":["made"]},{"Key":"- made","Fragments":["some"]},{"Key":"made some","Fragments":["small","changes"]},{"Key":"some small","Fragments":["improvements","nits","things"]},{"Key":"small improvements","Fragments":["to"]},{"Key":"improvements to","Fragments":["my"]},{"Key":"to my","Fragments":["bob","function","eye.","original","unfamiliarity","eye.","next","solution!","mind.","solution,","lack","predicate","solution."]},{"Key":"my bob","Fragments":["solution"]},{"Key":"bob solution","Fragments":["before"]},{"Key":"solution before","Fragments":["fetching"]},{"Key":"before fetching","Fragments":["rna-transcription"]},{"Key":"fetching rna-transcription","Fragments":["and"]},{"Key":"rna-transcription and","Fragments":["resubmitted."]},{"Key":"and resubmitted.","Fragments":["Seems"]},{"Key":"resubmitted. Seems","Fragments":["exercism"]},{"Key":"Seems exercism","Fragments":["handles"]},{"Key":"exercism handles","Fragments":["this"]},{"Key":"handles this","Fragments":["as"]},{"Key":"this as","Fragments":["a","an","done,","portable","well.","Strings","a","concisely"]},{"Key":"Very nice.","Fragments":["I","I","I","Have","Final"]},{"Key":"nice. I","Fragments":["hadn't","find","did","used"]},{"Key":"I hadn't","Fragments":["thought","been","realized","done","worked","realized.","thought","come"]},{"Key":"hadn't thought","Fragments":["to","to"]},{"Key":"thought to","Fragments":["use","look","use"]},{"Key":"use the","Fragments":["```.endsWith```","symbol","`str/`","keyword","keyword","built-in","helper","native","other?","keys","thread","#(…)",":use","suffix","reduce","`last-letter`","functions","excluded","cond","predicates","set","`defn-`method.","```statement```","`recur`","`require`","Java","multi-arity","proper","Java","character","[`upper-case`](http://clojure.github.io/clojure/clojure.string-api.html#clojure.string/upper-case)","characters","name","slightly","built-in","`:gen-class`","following","clojure's","**#\"...\"**",":use","threaded","thread-first","`s`","functions","thread","original","`assert`","Clojure","namespace","data-driven","namespace","namespace","`cond`","board","namespace","`swap!`","return","`^:private`","function","`when`","`in?`","threading","more","namespace","anonymous","suggestion","Java","same","two","dna-to-rna","`truthyness`","-\u003e","whole","whole","clojure","`-\u003e\u003e`","`frequencies`","original","Java","interpose","parse-phrase","$","threading","original","'thrush'","string","map","core"]},{"Key":"the ```.endsWith```","Fragments":["method."]},{"Key":"```.endsWith``` method.","Fragments":["Have"]},{"Key":"method. Have","Fragments":["you"]},{"Key":"considered private","Fragments":["functions"]},{"Key":"functions to","Fragments":["denote","give","be","avoid","replace","be","get","make","make","gain","a","ensure","reduce","perform","better","end","define"]},{"Key":"to denote","Fragments":["the","that"]},{"Key":"denote the","Fragments":["conditions?"]},{"Key":"could define","Fragments":["`\\T`","a","\u003ccode\u003everify-dna\u003c/code\u003e","`to-rna-nucleotid`"]},{"Key":"define `\\T`","Fragments":["and"]},{"Key":"`\\T` and","Fragments":["`\\U`","`\\U`","`\\U`","`\\U`.","`\\U`","`\\U`","`\\U`"]},{"Key":"and `\\U`","Fragments":["as","descriptive","signify?","actually","characters","in"]},{"Key":"`\\U` as","Fragments":["vars"]},{"Key":"as vars","Fragments":["with","so"]},{"Key":"vars with","Fragments":["descriptive","intention","intention","revealing","more"]},{"Key":"descriptive names.","Fragments":["What","Take"]},{"Key":"names. What","Fragments":["do","you"]},{"Key":"What do","Fragments":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","nucleotides","you","you","you","you","you","you","you","you","you"]},{"Key":"think --","Fragments":["worth","too"]},{"Key":"-- worth","Fragments":["it"]},{"Key":"it or","Fragments":["overkill?"]},{"Key":" Apparently","Fragments":["not.","I"]},{"Key":"Apparently not.","Fragments":[":)"]},{"Key":"not. :)","Fragments":["I"]},{"Key":":) I","Fragments":["lifted","wouldn't","think","am","was"]},{"Key":"I lifted","Fragments":["the"]},{"Key":"lifted the","Fragments":["use"]},{"Key":"the use","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","case,","of","of","of","of","part","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","call)","declaration","of","of","of","of","of","of","of","of","of","of"]},{"Key":"a RegEx","Fragments":["straight","there,"]},{"Key":"RegEx straight","Fragments":["from"]},{"Key":"straight from","Fragments":["the"]},{"Key":"the docs.","Fragments":["Characters"]},{"Key":"docs. Characters","Fragments":["work"]},{"Key":"Characters work","Fragments":["just"]},{"Key":"work just","Fragments":["as","as","fine","in"]},{"Key":"just as","Fragments":["well.","valid","well","readable).","simple","well","easy","if"]},{"Key":"This works","Fragments":["pretty","pretty","as"]},{"Key":"pretty well,","Fragments":["and","but"]},{"Key":"and it's","Fragments":["clear","quite","nice","much","written","really","preferred","in","some","after","only"]},{"Key":"it's clear","Fragments":["what's","to"]},{"Key":"what's going","Fragments":["on!","on","on.","on,","on","on.","on.","on.","on.","on"]},{"Key":" would","Fragments":["this"]},{"Key":"would this","Fragments":["really","work"]},{"Key":"this really","Fragments":["have"]},{"Key":"really have","Fragments":["to"]},{"Key":"have to","Fragments":["be","steal","reference","read","use","steal^H^H^H^H^H","define","be","use","use","confess","be","say","stop","convert","do","check","get","think","admit","squint","be","take","referred","do","seek","resort","wrap","change?","little","resort","try","swap","convert","assure","be","concede","compare","call","balance","worry","maintain","decipher","wonder","pass","dive","pass","use","say","respectfully","be","build","write","check","admit","do","make","do","resort","go","do","change","add","change","switch","be","play","use","check","declare","remove","link","get","read","map","convert","mention","read","append","repeat","do","recheck","prefix","pass","be","calculate","map","check","rewrite","implement","do","break","jump","`depunctuate`","change,","write","write","use","first","do","make","test","do","run","pass","namespace","look","find","lowercase","count"]},{"Key":"a regular","Fragments":["expression","expression,","expression","expression","hammer.","string\")```","\u003ccode\u003econd\u003c/code\u003e","expression","expression.","expression","expression","expression,"]},{"Key":"regular expression","Fragments":["to","to","for","checking","goes,","version","to","and","version.","for","for","are","in","for","comment.","in","instead","would","for","for"]},{"Key":"expression to","Fragments":["work?","test","this:","calculate","match"]},{"Key":"is fine.","Fragments":["I","I","It's"]},{"Key":"fine. I","Fragments":["took","took","just"]},{"Key":"I took","Fragments":["the","the","was","a","a","advice","it","a","this","this"]},{"Key":"took the","Fragments":["same","same","time"]},{"Key":"same approach:","Fragments":["\"if","\"if"]},{"Key":"approach: \"if","Fragments":["it's","it's"]},{"Key":"\"if it's","Fragments":["not","not"]},{"Key":"it's not","Fragments":["silence,","silence,","super","going","a","something","perfect)","that","calculated","reflected","clear,","an","technically","executable","the","possible","already","clear","straightforward.","totally","immediately","being","necessarily","complete.","used","idiomatic","LISP","being","a"]},{"Key":"not silence,","Fragments":["a","a"]},{"Key":"silence, a","Fragments":["question,","question,"]},{"Key":"a question,","Fragments":["or","or","but"]},{"Key":"or shouting,","Fragments":["then","then"]},{"Key":"shouting, then","Fragments":["it","it"]},{"Key":"then it","Fragments":["must","must","starts","sort","worked."]},{"Key":"it must","Fragments":["be","be","be"]},{"Key":"a plain","Fragments":["statement\".","statement\".","Exception."]},{"Key":"like how","Fragments":["you're","you","concise","concise","the","you've","simple","the","readable","repetitive","clear","you","closures","you","it","you","you","-","the","you've","you","you","short","you","everything","the"]},{"Key":"how you're","Fragments":["using"]},{"Key":"you're using","Fragments":["`anagram-matcher`","clojure","a","`#lastIndexOf`","all","a","in","multimethods","the","(declare)","a"]},{"Key":"using `anagram-matcher`","Fragments":["to"]},{"Key":"`anagram-matcher` to","Fragments":["generate"]},{"Key":"to generate","Fragments":["the","the","the","the","the","it.","all","documentation","good,","the","all","the","the","the","the"]},{"Key":"generate the","Fragments":["filter","hash","filter","empty","\"99","\"99","word","functions","bottle","methods","functions","name.","counts."]},{"Key":"the filter","Fragments":["function","function!","function","into","predicate.","part.","function"]},{"Key":"filter function","Fragments":["--","-","may"]},{"Key":"function --","Fragments":["very","that's"]},{"Key":"-- very","Fragments":["nifty!","clever!"]},{"Key":" I've","Fragments":["split","also","updated","resubmitted.","been","never","been","submitted","changed","created","updated","split","imported","rewritten","moved","never","tried","also","used","tried","still","submitted","seen","made","added","never","only","had","had","also","mentioned","submitted","also","thrown","made","often"]},{"Key":"I've split","Fragments":["the","the"]},{"Key":"the response-for","Fragments":["logic","expression","method","function","to","breaks"]},{"Key":"response-for logic","Fragments":["in"]},{"Key":"logic in","Fragments":["functions.","the","the","auxiliary","4","one"]},{"Key":"in functions.","Fragments":["Unsure","What","I"]},{"Key":"functions. Unsure","Fragments":["if"]},{"Key":"Unsure if","Fragments":["I"]},{"Key":"like it","Fragments":["better","like","should","was","more.","where","where","fits","might"]},{"Key":"it better","Fragments":["now,","to","in"]},{"Key":"better now,","Fragments":["since"]},{"Key":"now, since","Fragments":["it's"]},{"Key":"since it's","Fragments":["longer","a","a","the","the","always","the","just","not"]},{"Key":"it's longer","Fragments":["for"]},{"Key":"longer for","Fragments":["minimal"]},{"Key":"for minimal","Fragments":["clarity"]},{"Key":"minimal clarity","Fragments":["gain."]},{"Key":"think your","Fragments":["shout","code","implementation","`is-x?`","`nucleotide-counts`","`[from","code","using","implementation"]},{"Key":"your shout","Fragments":["matcher"]},{"Key":"shout matcher","Fragments":["might"]},{"Key":"matcher might","Fragments":["be"]},{"Key":"little too","Fragments":["eager.","much"]},{"Key":"too eager.","Fragments":["As"]},{"Key":"eager. As","Fragments":["an"]},{"Key":"As an","Fragments":["example,","afterthought,","aside,","alternative"]},{"Key":"an example,","Fragments":["if"]},{"Key":"example, if","Fragments":["I"]},{"Key":"asked Bob,","Fragments":["\"Do"]},{"Key":"Bob, \"Do","Fragments":["you"]},{"Key":"\"Do you","Fragments":["talk","like"]},{"Key":"you talk","Fragments":["to"]},{"Key":"talk to","Fragments":["your","them","seem"]},{"Key":"to your","Fragments":["friends","nit","suggested","question","latest","functions.","```question?```","code?","suggestions","advantage","regex","code.","namespace.","Regex","other","code.","REPL","code","`(ns"]},{"Key":"your friends","Fragments":["on"]},{"Key":"friends on","Fragments":["IM?\","]},{"Key":"on IM?\",","Fragments":["he"]},{"Key":"IM?\", he","Fragments":["would"]},{"Key":"he would","Fragments":["interpret"]},{"Key":"would interpret","Fragments":["it","the"]},{"Key":"interpret it","Fragments":["as"]},{"Key":"shouting and","Fragments":["tell"]},{"Key":"and tell","Fragments":["me","me"]},{"Key":"tell me","Fragments":["to","yet!","what","the","if",":D"]},{"Key":"me to","Fragments":["chill","learn","believe","just","realize","solve.","dive","move","bind","the","read.","think","do","be","useful","`clojure.string`.","resolve","scan","look","read.","use","write","follow.","the","eliminate","think","print","use","use","understand","do","the","use","understand"]},{"Key":"to chill","Fragments":["out."]},{"Key":"In general,","Fragments":["I","I'd","I","metadata","using","I"]},{"Key":"general, I","Fragments":["think","prefer","agree.","like"]},{"Key":"think that","Fragments":["relying","naming","bare","is","this","you","extracting","this","this","is","it","using","using","maybe","cond","multimethods","it","in","in","`if`","fact","the","it","will","the","if","boolean","will","it","using","code","was"]},{"Key":"that relying","Fragments":["on","solely"]},{"Key":"relying on","Fragments":["regular","regexps"]},{"Key":"on regular","Fragments":["expressions","expressions.","expressions","expressions"]},{"Key":"expressions to","Fragments":["match","do","do","the","minimize"]},{"Key":"match every","Fragments":["possible"]},{"Key":"every possible","Fragments":["statement"]},{"Key":"possible statement","Fragments":["might"]},{"Key":"statement might","Fragments":["be"]},{"Key":"bit limiting.","Fragments":["If"]},{"Key":"limiting. If","Fragments":["you"]},{"Key":"If you","Fragments":["do","don't","wanted","name","`(require","used","mean","want","re-ordered","are","would","were","think","change","go","want","can,","still","get","use","want","want","have","have","change","use","shamelessly","do","use","don't","treat","wanted","inlined","just","separate","want","assume","want","don't","want","capture","define","lowercase","want","swap","use","lower-case","replace","use","think","look","want","want","don't","look","look","want","want","try","used","want","set"]},{"Key":"you do","Fragments":["stick","not","on","not","not","things","in","everything","`[^\\w]+`","in","the","that.","`remove-consecutive-space`,","I'd","both","require","on"]},{"Key":"do stick","Fragments":["with"]},{"Key":"stick with","Fragments":["them,","the","regular","using","the","convention"]},{"Key":"with them,","Fragments":["I"]},{"Key":"them, I","Fragments":["would"]},{"Key":"would at","Fragments":["least"]},{"Key":"least define","Fragments":["them"]},{"Key":"define them","Fragments":["as","*inside*","like","using"]},{"Key":"them as","Fragments":["vars","private","it","it","inner","you"]},{"Key":"vars so","Fragments":["that"]},{"Key":"you can","Fragments":["give","use","make","resubmit","treat","avoid","collapse","call","have","have","use","use","generalise","make","do","use","safely","use","just","come","pipeline","test","just","only","make","replace","make","make","treat","think","make","simply","reduce","get","use","also","even","post","overflow","tell","create","make","use","just","check","get","provide","make","make","make","make","consider","make","either","`filter`","just","avoid","remove","make","easily","use","refer","resolve","use","keep","directly","omit","always","use","create","get","count","not","use","encode","just","give","use","use","see","reorder","make","use.","create","use","call","use","use","also","define","also","use","tell","pick","use","simplify","easily","use","get","whittle","simplify","see","use","use","use","find","also","see","define","use","have","in","specify","shorten","combine","give","try","take","leave","eliminate","define","also","use","just","just","remove","write:","describe","pass","just","use","use","drop","make","use","use","take","use","always","generally","write","take","use","make","do","use:","also","do","use","use","always","spare","spare","shorten","avoid","write","use","omit","do","take","simplify","use","get","make","make","just","see,","use","use","use","just","drop","leverage","call","declare","also","use","use","replace","remove","get","simplify","remove","try","avoid","use","use","then","use","shorten","see","use","then","use","use.","use","keep","call","apply","visualize","say","use","`merge`","call","see","also","only","use","use","check","replace","only","just","use","simplify","use","use","use","just","treat","treat","take","define","any"]},{"Key":"can give","Fragments":["them","more","a","them"]},{"Key":"them intention-revealing","Fragments":["names."]},{"Key":"I've also","Fragments":["seen","gotten","seen","seen","updated","seen","seen","been"]},{"Key":"also seen","Fragments":["people","some","people","nice","good"]},{"Key":"seen people","Fragments":["using","refer"]},{"Key":"people using","Fragments":["a","`:as`"]},{"Key":"using a","Fragments":["regular","native","more","character","Java","regex","`string/replace`,","function","threading","constant","function","hash-map","variadic","default","character","different","sort","closure.","closure","`cond`","private","default","regex","regular","set","regex.","`multimethod`","handful","map","map","range","transient","range","different","lamba","negative","`for`","regex","combination","hash-map","combination","good","combination","pre-condition","comma","let","`case`,","map","multimethod,","regex,","very","lot","for","single","char","`let`?"]},{"Key":"regular expression,","Fragments":["so","which"]},{"Key":"expression, so","Fragments":["that"]},{"Key":"that would","Fragments":["be","reveal","be","flow","let","flow","return","return","be","work,","work?","help","steer","suggest","have","make","be","result","work","allow","force","replace","allow","make","allow","be","be","allow","be","be","work","work","be","display","do","look"]},{"Key":"third way!","Fragments":[":)"]},{"Key":"As long","Fragments":["as"]},{"Key":"long as","Fragments":["it's","the","I"]},{"Key":"as it's","Fragments":["clearly","mostly","implied","the"]},{"Key":"it's clearly","Fragments":["understandable,"]},{"Key":"clearly understandable,","Fragments":["we're"]},{"Key":"understandable, we're","Fragments":["not"]},{"Key":"we're not","Fragments":["too","code","manipulating"]},{"Key":"too hung","Fragments":["up"]},{"Key":"hung up","Fragments":["on"]},{"Key":"up on","Fragments":["the","that","things","comments","the","the","the","it","`condp`","`nil`","the"]},{"Key":"the exact","Fragments":["implementation.","opposite","words.","progression","same","solution"]},{"Key":"exact implementation.","Fragments":["It's"]},{"Key":"implementation. It's","Fragments":["great"]},{"Key":"It's great","Fragments":["to","for","to"]},{"Key":"great to","Fragments":["see","keep","me.","try","me.","me,","me."]},{"Key":"see a","Fragments":["variety","real","lot","bit","function","lot"]},{"Key":"a variety","Fragments":["of"]},{"Key":"variety of","Fragments":["solutions."]},{"Key":" According","Fragments":["to","to","to"]},{"Key":"According to","Fragments":["the","\"shouting\".","your"]},{"Key":"docs (http://clojuredocs.org/clojure_core/clojure.string/blank_q),","Fragments":["```clojure.string/blank```"]},{"Key":"(http://clojuredocs.org/clojure_core/clojure.string/blank_q), ```clojure.string/blank```","Fragments":["is"]},{"Key":"```clojure.string/blank``` is","Fragments":["truthy"]},{"Key":"is truthy","Fragments":["for"]},{"Key":"truthy for","Fragments":["```nil```."]},{"Key":"the reminder","Fragments":["re:","about"]},{"Key":"reminder re:","Fragments":["private"]},{"Key":"re: private","Fragments":["functions."]},{"Key":"functions. I'm","Fragments":["new","not"]},{"Key":"I'm new","Fragments":["to","at","to","to","to","to","to","to","to"]},{"Key":"new to","Fragments":["Clojure,","Clojure.","Clojure,","Clojure","FP","clojure","Lisp-like","Clojure","Clojure,","Clojure,","Clojure","Clojure,","Clojure,","me","clojure","Clojure","Clojure","Clojure","functional","Clojure","Clojure,","Clojure,","clojure","clojure.","lisps),","Clojure","Clojure.","clojure,","Clojure.","Clojure","Clojure","Clojure.","clojure,","functional","me"]},{"Key":"to Clojure,","Fragments":["so","so","where","and","and","so","this","but","so","so","so"]},{"Key":"Clojure, so","Fragments":["just","I","`map`","that's","I","`(not","I'd","I'd","there","I"]},{"Key":"so just","Fragments":["getting","passing"]},{"Key":"just getting","Fragments":["it","the","into","the"]},{"Key":"getting it","Fragments":["to","in"]},{"Key":"to work","Fragments":["is","before,","with","on","for","with","just","on","in","through","that","with"]},{"Key":"work is","Fragments":["pretty","not","now"]},{"Key":"pretty snazzy","Fragments":["to"]},{"Key":"snazzy to","Fragments":["me!"]},{"Key":"about moving","Fragments":["the","checks"]},{"Key":"logic of","Fragments":["the","cond","the","the","lowercasing"]},{"Key":"conditions out","Fragments":["to"]},{"Key":"out to","Fragments":["private","me.","Java-land?","understand,","make","me!","Java","generate","@jeanie","me","Java.","me.","Java","be."]},{"Key":"to private","Fragments":["functions?","methods"]},{"Key":"private functions?","Fragments":["That","Or","Also,"]},{"Key":"functions? That","Fragments":["could"]},{"Key":"That could","Fragments":["possibly","possibly"]},{"Key":"could possibly","Fragments":["make","allow","get"]},{"Key":"possibly make","Fragments":["`response-for`"]},{"Key":"make `response-for`","Fragments":["clearer","cleaner?","less","read"]},{"Key":"`response-for` clearer","Fragments":["(or"]},{"Key":"clearer (or","Fragments":["at"]},{"Key":"(or at","Fragments":["least","least"]},{"Key":"least less","Fragments":["noisy)"]},{"Key":"I do","Fragments":["like","think","think","want","think","not","not","see","have","prefer","know","think","not","not","consider","have","prefer","agree","use","take","have","have","like"]},{"Key":"do like","Fragments":["`contains-char?`,","you've","that"]},{"Key":"like `contains-char?`,","Fragments":["but"]},{"Key":"`contains-char?`, but","Fragments":["why"]},{"Key":"but why","Fragments":["are","have","have","didn't"]},{"Key":"why are","Fragments":["you","you"]},{"Key":"you testing","Fragments":["for"]},{"Key":"testing for","Fragments":["characters","a","`not-same-word?`"]},{"Key":"for characters","Fragments":["in"]},{"Key":"the middle","Fragments":["of","of","of"]},{"Key":"middle of","Fragments":["the","threading","the"]},{"Key":"the string?","Fragments":["\"Do","That"]},{"Key":"string? \"Do","Fragments":["you"]},{"Key":"you like","Fragments":["Mr.","better.","it!","that?","the"]},{"Key":"like Mr.","Fragments":["Rogers?\","]},{"Key":"Mr. Rogers?\",","Fragments":["for"]},{"Key":"Rogers?\", for","Fragments":["example,"]},{"Key":"for example,","Fragments":["would","interpreting","it","some","`anagram-checker-for`.","`(reduce","to","which"]},{"Key":"example, would","Fragments":["be"]},{"Key":"be interpreted","Fragments":["as","as","as"]},{"Key":"interpreted as","Fragments":["a","anything",":T.","a"]},{"Key":" Hi","Fragments":[":)","camdez,","@kyla,","and","Andrean,","zoldar,","@lucinda","there.","Manuel,","Sergi,"]},{"Key":" First","Fragments":["Comment:","of","pass.","solution","time","time","of","of","thing"]},{"Key":"I don't","Fragments":["understand","agree","know","think","think","know","actually","see","know","see","think","like","worry","have","see","think","exactly","see","exactly","feel","think","believe","actually","really","think","see","think","really","know","personally","much","get","know","really","know","know).","see","feel","know","really","really","really","know","know","think","fully","know","know","think","know","get","think","call","have","like","need","see","see","use","really","think","like","always","know","need","like","know","feel","like","fully","believe","agree","believe","have","see","exactly","see","mind","think","feel","like,","like.","really","know","really","like","know","think","think.","like","really","see","think","need","think","think","like","really","use","think","know","think.","think","think","like","really","like","know","quite","know","understand","think","know","think","think","know","find","think","quite","like","quite","like","really","see","particularly","like","know","think","think","understand","need","know","know","understand","know","know.","use","think","think","think","see","know","know","think","think","know","know","know","know","like"]},{"Key":"don't understand","Fragments":["what","why","why","what","the"]},{"Key":"you mean,","Fragments":["could","but"]},{"Key":"mean, could","Fragments":["you"]},{"Key":"could you","Fragments":["elaborate","get","minimize","bit","make","consider","please","go","please","make","call"]},{"Key":"you elaborate","Fragments":["on"]},{"Key":"elaborate on","Fragments":["that?","what","why"]},{"Key":" Second","Fragments":["Question:"]},{"Key":"Ok, is","Fragments":["done"]},{"Key":"is done","Fragments":["locally","really"]},{"Key":"done locally","Fragments":[":)"]},{"Key":"locally :)","Fragments":["Will"]},{"Key":":) Will","Fragments":["push"]},{"Key":"Will push","Fragments":["it"]},{"Key":"push it","Fragments":["together","so"]},{"Key":"it together","Fragments":["with"]},{"Key":"together with","Fragments":["the","str,","`\\n`","keywords"]},{"Key":"the result","Fragments":["of","of","of","of","but","is","works","of","is","of","on","are","would","of","of","is","would","you","of","assigned","of","is","I","of"]},{"Key":"result of","Fragments":["the","thinking","submitting","evaluating","that","one","the","trim","(anagram?).","each","the","`re-find`"]},{"Key":"other comment","Fragments":[";)"]},{"Key":"comment ;)","Fragments":["Didn't"]},{"Key":";) Didn't","Fragments":["know"]},{"Key":"Didn't know","Fragments":["there","about","about","about"]},{"Key":"there were","Fragments":["private"]},{"Key":"were private","Fragments":["defn's"]},{"Key":"private defn's","Fragments":["–"]},{"Key":"defn's –","Fragments":["this"]},{"Key":"– this","Fragments":["is"]},{"Key":"is my","Fragments":["second","first","very","limit","attempt","own","least","first","initial","first","first","first","first","first","goto","first","first","very","first","first"]},{"Key":"my second","Fragments":["ever"]},{"Key":"second ever","Fragments":["Clojure"]},{"Key":"ever Clojure","Fragments":["program","module,","code,"]},{"Key":"Clojure program","Fragments":[":)"]},{"Key":" The","Fragments":["default","spec","\"other\"","more","first","`.endsWith`","difference","only","first","syntax","test","(seq","`input`","code","private","`defn`","parentheses","`last`","`allchars`","people","formatting","approach","example","guide","tests","Elixir","mapping","problem","exercism","string","`challenge`","operations","use","trailing","most","downside","trade","regexp","`let`","only","code","`rev-subs`","composition","```(if","placement","reason","very","README","README","term","README","commented","hardest","code","threading","way","only","tiny","word","downside","code","downside","solution","nice","logic","problem","customer","use","advantage","only","merge-with","idea","only","first","second","pre","code","main","results","other","nested","logic","silence?","\u003ccode\u003edefn-\u003c/code\u003e","`cond`","test","use","question","shouting","Clojure","'frequencies'","string","code","tests","interesting","simulate","first","`can-attack`","`board-string`","actual","\"teenth\"","cond","string","recursive","nested","use","first","funny","use","code","short","other","`defn`","function","important","double-negative","solution","intent","else","for","tests","first","scalene","work","same","duplicate","regexp","other","approach","check","code","indentation","explanation","conversion","need","`process-word`","`.*`","`-\u003e\u003e`","comparison","implementation","only","recursive","only","code","long","frequencies","only","only","only","spec","most","indirection","complex","problem","upside","prime","result","basic","only","code","(not","\"Fine.","`-\u003e\u003e`","implementation","U","way","only","`hamming-distance-seq`","logic","only","only","is-cap-or-nonalpha","`lower-case-all-words`","threading","`(re-seq","nested","validation","'true","list","obvious"]},{"Key":"The default","Fragments":["condition"]},{"Key":"default condition","Fragments":["here","in"]},{"Key":"condition here","Fragments":["might"]},{"Key":"here might","Fragments":["work"]},{"Key":"might work","Fragments":["(since","for"]},{"Key":"work (since","Fragments":["it's"]},{"Key":"(since it's","Fragments":["undefined)"]},{"Key":"it's undefined)","Fragments":["but"]},{"Key":"undefined) but","Fragments":["would"]},{"Key":"it maybe","Fragments":["be"]},{"Key":"maybe be","Fragments":["clearer"]},{"Key":"to have","Fragments":["it","paid","functions","the","closing","the","\\T","nucleobases","the","a","constants","escaped","a","`clojure.string/replace`","this","more","a","a","them","to","what","commas,","question","to","to","written","a","this","found","a","it","the","the","a","the","them","the","separate","`digits`","a","`?`","a","a","an","a","not","sentence","the"]},{"Key":"have it","Fragments":["be","return","inside,","be"]},{"Key":" (also,","Fragments":["would"]},{"Key":"(also, would","Fragments":["it"]},{"Key":"be beneficial","Fragments":["for","to"]},{"Key":"beneficial for","Fragments":["`is-question`"]},{"Key":"for `is-question`","Fragments":["et."]},{"Key":"`is-question` et.","Fragments":["al."]},{"Key":"et. al.","Fragments":["to"]},{"Key":"al. to","Fragments":["be"]},{"Key":"The spec","Fragments":["\"if","is","if"]},{"Key":"spec \"if","Fragments":["you"]},{"Key":"\"if you","Fragments":["tell"]},{"Key":"you tell","Fragments":["him"]},{"Key":"tell him","Fragments":["something\""]},{"Key":"him something\"","Fragments":["in"]},{"Key":"something\" in","Fragments":["README.md"]},{"Key":"in README.md","Fragments":["could"]},{"Key":"README.md could","Fragments":["be"]},{"Key":"as anything","Fragments":["that"]},{"Key":"anything that","Fragments":["doesn't","needs","you"]},{"Key":"that doesn't","Fragments":["match","have","express","seem","use","produce","conflate"]},{"Key":"other cases,","Fragments":["I"]},{"Key":"cases, I","Fragments":["guess,","would"]},{"Key":"I guess,","Fragments":["in","I'm","it's"]},{"Key":"guess, in","Fragments":["which"]},{"Key":"in which","Fragments":["case","nil","the","new","case","`(apply"]},{"Key":"which case","Fragments":["I","I've","you'd","I"]},{"Key":"case I","Fragments":["would","tend","think","felt","could","think","would","could"]},{"Key":"would drop","Fragments":["the"]},{"Key":"drop the","Fragments":["`statement?`","`get`","intermediate","`let`","splits,","first","`bob/`","threading"]},{"Key":"the `statement?`","Fragments":["function"]},{"Key":"`statement?` function","Fragments":["and"]},{"Key":"function and","Fragments":["just","rename","somewhat","I","tried","then","reset-name","call","used","refactored","\"count\"","realized","see","moved","moved","explicitly","the","pre-compute","bind","pass"]},{"Key":"and just","Fragments":["make","use","start","use","getting","check","passing","use","learning","match","define"]},{"Key":"just make","Fragments":["\"Whatever.\"","a","a","the","those","an","it"]},{"Key":"make \"Whatever.\"","Fragments":["the"]},{"Key":"\"Whatever.\" the","Fragments":["value"]},{"Key":"the value","Fragments":["for","you're","of","and","of","or","had","at","gets","on","is","for","could","of","could","is","is","matching","is","they're","explicitly","bound"]},{"Key":"value for","Fragments":["`:else`.","when","a","invalid"]},{"Key":"It's a","Fragments":["little","character","little","pleasure","small","lot","bit","very","good","logical","test","good","matter","hell","very","more","simple","bit"]},{"Key":"little unclear","Fragments":["why","about"]},{"Key":"unclear why","Fragments":["the"]},{"Key":"why the","Fragments":["default","`?`).","code","binding","operation"]},{"Key":"behavior is","Fragments":["\"Whatever.\"","also","not"]},{"Key":"is \"Whatever.\"","Fragments":["It"]},{"Key":"\"Whatever.\" It","Fragments":["doesn't"]},{"Key":"doesn't seem","Fragments":["explicit","to","like","to","as","to","quite","that","necessary,","to","that","to","like","to","too","quite"]},{"Key":"seem explicit","Fragments":["enough"]},{"Key":"explicit enough","Fragments":["to","and"]},{"Key":"to me,","Fragments":["would","for","but","but","`blank?`","but","but","because","if","well","requiring","well","great","I","I","which","I","not"]},{"Key":"me, would","Fragments":["it"]},{"Key":"it look","Fragments":["better","a"]},{"Key":"look better","Fragments":["if","when","overall"]},{"Key":"better if","Fragments":["you","function","you","we"]},{"Key":"you defined","Fragments":["a","what","shouldn't"]},{"Key":"defined a","Fragments":["`statement?`?"]},{"Key":" (although,","Fragments":["the"]},{"Key":"(although, the","Fragments":["`nil`"]},{"Key":"the `nil`","Fragments":["and"]},{"Key":"other behavior","Fragments":["here"]},{"Key":"behavior here","Fragments":["isn't"]},{"Key":"here isn't","Fragments":["defined,"]},{"Key":"isn't defined,","Fragments":["so"]},{"Key":"defined, so","Fragments":["this"]},{"Key":"so this","Fragments":["could","is","is","is","is","is","was"]},{"Key":"this could","Fragments":["be","be","be","be","help","be","be","be","be"]},{"Key":" You've","Fragments":["submitted","convinced","elegantly","probably","motivated"]},{"Key":"You've submitted","Fragments":["the"]},{"Key":"submitted the","Fragments":["rna","tests"]},{"Key":"the rna","Fragments":["transcription"]},{"Key":"rna transcription","Fragments":["assignment"]},{"Key":"transcription assignment","Fragments":["for"]},{"Key":"assignment for","Fragments":["this"]},{"Key":"for this","Fragments":["somehow.","and","to","kind","namespace.","problem","data","submission","that","that","that","submission","assignment","exercise.","purpose,","problem.","exercise","exercise","purpose","kind","problem.","to","function","specific","exercise,","problem.","one.","example.","problem.","simple","solution.","task.","iteration.","was","exercise.","purpose.","problem"]},{"Key":"this somehow.","Fragments":["I"]},{"Key":"somehow. I","Fragments":["did"]},{"Key":"did the","Fragments":["same","exercise","javascript","**Refactor","same"]},{"Key":"same thing,","Fragments":["currently","right?.","it"]},{"Key":"thing, currently","Fragments":["you're"]},{"Key":"currently you're","Fragments":["unable"]},{"Key":"you're unable","Fragments":["to"]},{"Key":"unable to","Fragments":["to"]},{"Key":"to to","Fragments":["submit"]},{"Key":"to submit","Fragments":["ahead","it","this","a"]},{"Key":"submit ahead","Fragments":["of"]},{"Key":"ahead of","Fragments":["your"]},{"Key":"your \"approved\"","Fragments":["submission."]},{"Key":"\"approved\" submission.","Fragments":["Try"]},{"Key":"submission. Try","Fragments":["submitting"]},{"Key":"Try submitting","Fragments":["\"bob\""]},{"Key":"submitting \"bob\"","Fragments":["again"]},{"Key":"\"bob\" again","Fragments":["for"]},{"Key":"again for","Fragments":["this","all","each","```clojure.string```","every"]},{"Key":"this and","Fragments":["once","helper","the"]},{"Key":"and once","Fragments":["it's","in","for"]},{"Key":"once it's","Fragments":["approved,"]},{"Key":"it's approved,","Fragments":["submit"]},{"Key":"approved, submit","Fragments":["this"]},{"Key":"submit this","Fragments":["again.","assignment."]},{"Key":" FWIW,","Fragments":["I","here's"]},{"Key":"FWIW, I","Fragments":["think","prefer"]},{"Key":"think you're","Fragments":["right","right","done","sorting","checking","looking","looking","right,"]},{"Key":"you're right","Fragments":["about","that","again,"]},{"Key":"right about","Fragments":["SHOUTING","joining","the","the","`silence?`","`get`.","using"]},{"Key":"about SHOUTING","Fragments":["taking"]},{"Key":"SHOUTING taking","Fragments":["precedence."]},{"Key":"taking precedence.","Fragments":["\"WHAT"]},{"Key":"precedence. \"WHAT","Fragments":["DID"]},{"Key":"\"WHAT DID","Fragments":["YOU"]},{"Key":"DID YOU","Fragments":["DO?\""]},{"Key":"YOU DO?\"","Fragments":["seems"]},{"Key":"DO?\" seems","Fragments":["more"]},{"Key":"seems more","Fragments":["about","idiomatic."]},{"Key":"more about","Fragments":["shouting","these","clojure.","regular"]},{"Key":"about shouting","Fragments":["than"]},{"Key":"shouting than","Fragments":["questioning"]},{"Key":"than questioning","Fragments":["to"]},{"Key":"questioning to","Fragments":["me,"]},{"Key":"me, for","Fragments":["instance."]},{"Key":"for instance.","Fragments":[";)"]},{"Key":"The \"other\"","Fragments":["behavior"]},{"Key":"\"other\" behavior","Fragments":["is"]},{"Key":"is also","Fragments":["undefined,","usual","a","a","very","a","available","a","handy","falsey,"]},{"Key":"also undefined,","Fragments":["I"]},{"Key":"undefined, I","Fragments":["think"]},{"Key":"what you've","Fragments":["chosen","done","done","done","done"]},{"Key":"you've chosen","Fragments":["is"]},{"Key":"chosen is","Fragments":["a"]},{"Key":"You can","Fragments":["simplify","even","now","eliminate","just","map","often","try","create","do","use","refer","use","find","make","find","probably","just","take","put","use","use","achieve","use","use","use","use","probably","make","make","simplify","see","use","get","eliminate","simplify","streamline","see","save","maintain","drop","use","reduce","optimise","also","also","avoid","reference","replace","perform","see","treat","use","also","use","limit","either","even","just","also","always","also","still","also","also","also","shorten","use","also","name","re-arrange","also","use","replace","write","also","get","write","use","also","shorten","simplify","use","simplify","supply","do","compare","ignore","do","use","look","say","see","also","also","just","instead","pass","do","actually"]},{"Key":"can simplify","Fragments":["`uppercase?`","the","this","this","the","this","things","this","these","this","you"]},{"Key":"simplify `uppercase?`","Fragments":["further"]},{"Key":"`uppercase?` further","Fragments":["by"]},{"Key":"further by","Fragments":["checking"]},{"Key":"by checking","Fragments":["for","the","alphagrams,","that","if","if"]},{"Key":"checking for","Fragments":["equality","silence.","a","that","anagrams","capital","containment,","prolonged","-","valid","shouting","all-caps","any","updates","membership."]},{"Key":"for equality","Fragments":["against","between","test.","you"]},{"Key":"equality against","Fragments":["one"]},{"Key":"against one","Fragments":["of"]},{"Key":"the methods","Fragments":["in","\u003ccode\u003erequest-type\u003c/code\u003e","provided","from","in","in","directly"]},{"Key":"methods in","Fragments":["clojure.string","the","there."]},{"Key":"in clojure.string","Fragments":["-","for","do."]},{"Key":"clojure.string -","Fragments":["I'll"]},{"Key":"- I'll","Fragments":["let","try","be"]},{"Key":"I'll let","Fragments":["you"]},{"Key":"let you","Fragments":["guess","avoid","move","tighten"]},{"Key":"you guess","Fragments":["which"]},{"Key":"guess which","Fragments":["one."]},{"Key":"which one.","Fragments":["Right"]},{"Key":"one. Right","Fragments":["now"]},{"Key":"Right now","Fragments":["it's","the","I"]},{"Key":"now it's","Fragments":["not"]},{"Key":"not super","Fragments":["clear"]},{"Key":"super clear","Fragments":["what"]},{"Key":"what that","Fragments":["code","Java","does","does"]},{"Key":"that code","Fragments":["is","is","once.","will","later.","like","is"]},{"Key":"code is","Fragments":["going","so","good","formatting","putting","starting","doing.","\"not","pretty","doing.","admirably","very","a","hellish,","clear,","very","just","updated","perfectly","doing,","not","still","simple","more","very","more","short","very","not","spaced"]},{"Key":"is going","Fragments":["to","to","to","to","on,","to","on"]},{"Key":"to do.","Fragments":["(plus","Making"]},{"Key":"do. (plus","Fragments":["it's"]},{"Key":"(plus it's","Fragments":["not"]},{"Key":"not going","Fragments":["to","to"]},{"Key":"to work,","Fragments":["since","while"]},{"Key":"work, since","Fragments":["you're"]},{"Key":"since you're","Fragments":["accepting","using","just"]},{"Key":"you're accepting","Fragments":["`s`"]},{"Key":"accepting `s`","Fragments":["but"]},{"Key":"`s` but","Fragments":["comparing"]},{"Key":"but comparing","Fragments":["against"]},{"Key":"comparing against","Fragments":["`x`,","s/split","with","along"]},{"Key":"against `x`,","Fragments":["and"]},{"Key":"`x`, and","Fragments":["you"]},{"Key":"and you","Fragments":["can't","could","will","can","also","want","can","can","can","don't","wouldn't","could","could","made","can","only","see","can't"]},{"Key":"you can't","Fragments":["reduce","assume","get","nest","do","tell","use","really","bit"]},{"Key":"can't reduce","Fragments":["boolean"]},{"Key":"reduce boolean","Fragments":["values"]},{"Key":"boolean values","Fragments":["like","`blank?`,"]},{"Key":"values like","Fragments":["that)"]},{"Key":" Other","Fragments":["than","nitpickers","nitpickers","than","nitpickers","than","than","improvements","than","than","than","than","than","than","than"]},{"Key":"Other than","Fragments":["that,","those","that,","that,","that","that,","that,","that,","that,","that","that,","that,","that,","that,","that","that","that,","that,","that,","that","that,","that","that,","that,","that","that","that,","that,"]},{"Key":"than that,","Fragments":["consider","you","you","does","your","looks","this","looks","looks","it","there's","looks","looks","looks","looks","looks","looks","I","this","looks","maybe","I"]},{"Key":"that, consider","Fragments":["breaking"]},{"Key":"consider breaking","Fragments":["each","up"]},{"Key":"breaking each","Fragments":["condition"]},{"Key":"each condition","Fragments":["out","into","and","into"]},{"Key":"condition out","Fragments":["into"]},{"Key":"into it's","Fragments":["own","own","own","own"]},{"Key":"it's own","Fragments":["private","line.","line","line.","function.","define,","line?","line","independent","independent","function"]},{"Key":"own private","Fragments":["function","function,","functions?"]},{"Key":"function to","Fragments":["clarify","get","do","use","get","be","better","take","do","determine","convert","implement","simplify","simplify","sort","do","break","build","do","use","normalize","be","compare","simplify","map","reduce","\"filter\"","simplify","look","combine","clean","have,","justify","test","abstract","have","generate","find"]},{"Key":"to clarify","Fragments":["what","a","the","intent,"]},{"Key":"clarify what","Fragments":["the"]},{"Key":"the intent","Fragments":["is.","clearer.","of","the","of","here","less","of","more","more","better.","of","more","more","clearer.","would","of","explicit.","of","of","of","of","clearer.","a","of","of","is","clear","even","a","of","of","more","of","a","of","more"]},{"Key":"intent is.","Fragments":[":)"]},{"Key":" So","Fragments":["what","just","were","something","yeah,","there's","there's","there's","what","I","is","instead","```dec-each-value```","maybe,","if","I","something","the","are","did","you","confused","the"]},{"Key":"So what","Fragments":["happens","happens","you","I'm"]},{"Key":"you send","Fragments":["`nil`"]},{"Key":"send `nil`","Fragments":["to"]},{"Key":"`nil` to","Fragments":["`response-for`?"]},{"Key":"to `response-for`?","Fragments":["It's"]},{"Key":"`response-for`? It's","Fragments":["unspecified,"]},{"Key":"It's unspecified,","Fragments":["but"]},{"Key":"unspecified, but","Fragments":["one"]},{"Key":"but one","Fragments":["imagines","of","learning"]},{"Key":"one imagines","Fragments":["Bob"]},{"Key":"imagines Bob","Fragments":["would"]},{"Key":"Bob would","Fragments":["say","describe"]},{"Key":"would say","Fragments":["\"Fine,","it","is","that","that","idiomatic,"]},{"Key":"say \"Fine,","Fragments":["be"]},{"Key":"In addition,","Fragments":["consider","number_length","you"]},{"Key":"addition, consider","Fragments":["breaking"]},{"Key":"breaking up","Fragments":["each","the"]},{"Key":"up each","Fragments":["condition"]},{"Key":"condition into","Fragments":["a","its"]},{"Key":"private function.","Fragments":["It'll"]},{"Key":"function. It'll","Fragments":["make","only"]},{"Key":"It'll make","Fragments":["the"]},{"Key":" `silent?`","Fragments":["could"]},{"Key":"`silent?` could","Fragments":["definitely","be"]},{"Key":"could definitely","Fragments":["use","be"]},{"Key":"definitely use","Fragments":["`clojure.string/blank`."]},{"Key":"use `clojure.string/blank`.","Fragments":["That'd"]},{"Key":"`clojure.string/blank`. That'd","Fragments":["satisfy"]},{"Key":"That'd satisfy","Fragments":["the"]},{"Key":"satisfy the","Fragments":["nil","test"]},{"Key":"the nil","Fragments":["condition"]},{"Key":"nil condition","Fragments":["as"]},{"Key":"condition as","Fragments":["well.","I"]},{"Key":"the feedback.","Fragments":["Much","I'm","I've","I","I","This","Very","I","It's","I","I","I","What's","Both","I","I"]},{"Key":"feedback. Much","Fragments":["appreciated."]},{"Key":"I agree","Fragments":["that","--","with","it","with","that","with","with","with","it","that","with","with","with","with","with","with","with","that","that","on","that","that","to","that","that","with","with","with","with","it","it"]},{"Key":"agree that","Fragments":["question?","adding","predicate","the","reversing","this","`empty?`","shout?","using","the","your","the"]},{"Key":"that question?","Fragments":["and","should"]},{"Key":"question? and","Fragments":["statement?","statement?"]},{"Key":"and statement?","Fragments":["have","both"]},{"Key":"statement? have","Fragments":["a"]},{"Key":"have a","Fragments":["subtle","subtle","biology","test","pore","kind","look","convenience","helper","solution","perennial","look","look","regexp","value","look","list","lot","go","go","dig","problem","look","whole","few","better","go","string","really","conditional","suggestion","look","harder","couple","few","function","couple","common","newline","default","lot","lot","look","name","look","couple","consistent","few","look","go","couple","map","couple","couple","very","look","private","function","`?`","conditional","recurring"]},{"Key":"a subtle","Fragments":["bug.","bug","bug"]},{"Key":"subtle bug.","Fragments":["I"]},{"Key":"bug. I","Fragments":["have","prefer"]},{"Key":"I have","Fragments":["fixed","two","though.","no","seen","seen","significantly","some","seen","I","to","to","my","trouble","is","ever","not.","absolutely","an","to","yet","to","no","to","a","to","used","no","had","a","to","overdone","just","no","to","some","said.","noticed","a","no","found","a","to","some","tried","seen","no","to","any","programmed","added","updated","also","to","this","a","done",":pre","to","to","updated","two","is","is","just","updated","a","addressed","a","just","learned","ignored","found","found","here.","some","to","to","to","more","changed","incorporated","renamed","ever","three","zero","no","are","now","to","updated","come","lots","is","no","no","had","never","reworked","also","long","a"]},{"Key":"have fixed","Fragments":["it","length"]},{"Key":"fixed it","Fragments":["by"]},{"Key":"it by","Fragments":["changing","using","doing","simply","comparing","calling"]},{"Key":"by changing","Fragments":["the","your"]},{"Key":"changing the","Fragments":["regexp","`pluralize`","indentation","representation","`load-file`"]},{"Key":"the regexp","Fragments":["to","to"]},{"Key":"regexp to","Fragments":["require","the","account"]},{"Key":"to require","Fragments":["that","`clojure.string`,","`clojure.test`","clojure.core"]},{"Key":"require that","Fragments":["the","your"]},{"Key":"the '?'","Fragments":["or"]},{"Key":"'?' or","Fragments":["'.'"]},{"Key":"or '.'","Fragments":["be"]},{"Key":"'.' be","Fragments":["at"]},{"Key":"be at","Fragments":["the","the"]},{"Key":"at the","Fragments":["end","names","same","last","end","API","same","moment","IO","functions","functions","functions","`clojure.string`","example.","key","same","end.","[format](http://clojuredocs.org/clojure_core/clojure.core/format)","Clojure","top","same","top","top.","[frequencies](http://clojuredocs.org/clojure_core/clojure.core/frequencies)","top","very","top","top","beginning.","same","top.","sequences","```frequencies```","top","top","`frequencies`","tests","top","same","`core`","end","top","end","end","`frequencies`","[`Threading","multi-collection","beginning","end","multiple","time.","end","length","global","rest","end.","`update-in`","same","square","`:require`","given","last","README.","`assert`","same","same","input","top","same","end.","intermediate","length","end.","end","beginning","end","clj-time","end","bottom","end","end.","point","README","following:","re-xxx","tests.","`frequencies`","pipeline","same","moment","very","small","unit","end","`cond`","built-in","`trim`,","time","`update-in`","end.","top","`frequencies`","source","end.","`format`"]},{"Key":"the end","Fragments":["of","of","bracket","of","of","of","of","of","decided","of","of","seems","of","of","of","of","they","of","of","of","of","I","I","you","of"]},{"Key":"end of","Fragments":["the","the","the","a","a","`map`","the","the","the","line","the","the","[this","`set-name`","the","the","their","the","the"]},{"Key":" \"you","Fragments":["may"]},{"Key":"\"you may","Fragments":["get"]},{"Key":"may get","Fragments":["feedback","feedback"]},{"Key":"get feedback","Fragments":["that","that"]},{"Key":"feedback that","Fragments":["checking","checking","I","will"]},{"Key":"that checking","Fragments":["that","that"]},{"Key":"checking that","Fragments":["an","an","a","input","`(set","a"]},{"Key":"that an","Fragments":["uppercased","uppercased","alphagram","unequal","anonymous","normal"]},{"Key":"an uppercased","Fragments":["version","version","version"]},{"Key":"string matches","Fragments":["the","the","you"]},{"Key":"matches the","Fragments":["original","original","tests","readme,","arity","test"]},{"Key":"the original","Fragments":["string","string","test.","and","pull","`word`","function.","function.","and","namespace","`s`","after"]},{"Key":"original string","Fragments":["is","is"]},{"Key":"string is","Fragments":["a","a","not","treated","unnecessary.","more","giving","out","nil,","not","treated","already","empty","blank?","valid","redundant,","cool","capitalized."]},{"Key":"I had","Fragments":["not","done","used","any","considered","never","to","smoother","in","thought","destructuring","on","some","a","my","when","to","no","trouble","been","stopped","```cond```","to","to","to","to","never","it","to","committed","screwed","forgotten","thought","a","accidentally","to","only","all","figured","thought","to","thought","instead","just","to","missed","to","read","`(=","to","a","the","originally","a","to","trouble","hoped.","an","known","to","used"]},{"Key":"had not","Fragments":["thought"]},{"Key":"not thought","Fragments":["of"]},{"Key":"of that!","Fragments":["Now"]},{"Key":"that! Now","Fragments":["that"]},{"Key":"Now that","Fragments":["I","I","all","you","you","you've"]},{"Key":"have two","Fragments":["ways","small"]},{"Key":"two ways","Fragments":["to"]},{"Key":"ways to","Fragments":["do","achieve","work","think","separate","implement","do","map","use","try","write","get","do","explain","look"]},{"Key":"do it,","Fragments":["I","but"]},{"Key":"it, I","Fragments":["think","do","would","did","essentially"]},{"Key":"will stick","Fragments":["with"]},{"Key":"the present","Fragments":["implementation,"]},{"Key":"present implementation,","Fragments":["since"]},{"Key":"implementation, since","Fragments":["there"]},{"Key":"since there","Fragments":["doesn't","is"]},{"Key":"there doesn't","Fragments":["seem"]},{"Key":"a clear","Fragments":["gain","separation","structure"]},{"Key":"clear gain","Fragments":["in"]},{"Key":"gain in","Fragments":["readability.","leaving"]},{"Key":"think question?","Fragments":["and"]},{"Key":"statement? both","Fragments":["have"]},{"Key":"both have","Fragments":["a"]},{"Key":"subtle bug","Fragments":["regarding","in","in"]},{"Key":"bug regarding","Fragments":["the"]},{"Key":"regarding the","Fragments":["position","default","order","simple"]},{"Key":"the position","Fragments":["of"]},{"Key":"position of","Fragments":["the"]},{"Key":"the \"?\"","Fragments":["or","as"]},{"Key":"\"?\" or","Fragments":["\".\""]},{"Key":"or \".\"","Fragments":["in"]},{"Key":"\".\" in","Fragments":["the"]},{"Key":"the string.","Fragments":["Here's","You","Possibly","This"]},{"Key":"string. Here's","Fragments":["a"]},{"Key":"Here's a","Fragments":["failing","few","hint:","hint:","hint:","version","concrete"]},{"Key":"a failing","Fragments":["test:"]},{"Key":" (assert","Fragments":["(=","(re-matches","(not","(nil?"]},{"Key":"(assert (=","Fragments":["\"Whatever.\""]},{"Key":"(= \"Whatever.\"","Fragments":["(bob/response-for","(bob/response-for","\"Woah,"]},{"Key":"\"Whatever.\" (bob/response-for","Fragments":["\"The","\"1,"]},{"Key":"(bob/response-for \"The","Fragments":["question"]},{"Key":"\"The question","Fragments":["mark"]},{"Key":"question mark","Fragments":["'?'","(e.g.","or","is","as","at","to","is","indicating","e.g.","at","already","at","would"]},{"Key":"mark '?'","Fragments":["is"]},{"Key":"'?' is","Fragments":["a"]},{"Key":"a useful","Fragments":["character.\")))"]},{"Key":"of clojure.string/blank?.","Fragments":["I"]},{"Key":"clojure.string/blank?. I","Fragments":["also"]},{"Key":"I also","Fragments":["like","happen","removed","did","wonder","see","played","wonder","took","did","normally","expected","try","changed","had","noticed","separated","like","decided","got","assigned","feel","like","extracted","managed","realized","added","changed","thought","thought","replaced","like","like","think","didn't","like","did","wanted","see"]},{"Key":"also like","Fragments":["your","the","how","the","your","how"]},{"Key":"like your","Fragments":["use","way","use","introduction","`on`","solution!","first","use","definition","```re-matches```","use","`all`","`:else`","use","attempt","'shouting'","variable","`n-bottles`","use","sequence","solution","\"assert","`to-rna`"]},{"Key":"your use","Fragments":["of","of","of","of","of","of","of","of","of"]},{"Key":"of every?,","Fragments":["although"]},{"Key":"every?, although","Fragments":["you"]},{"Key":"although you","Fragments":["may"]},{"Key":"you may","Fragments":["get","have","only","well","be","want","want","possibly","find","want","achieve","be","use","use","well"]},{"Key":"better solution.","Fragments":["I","The","I"]},{"Key":"solution. I","Fragments":["like","am","think","submitted","think","really","decided","used","like","also"]},{"Key":"your way","Fragments":["better.","-","seems"]},{"Key":"extract your","Fragments":["phrase","conditions","conditions"]},{"Key":"your phrase","Fragments":["checks"]},{"Key":"For the","Fragments":["purposes","bracket,","`cond`,","purposes","`.endsWith`","most","second","trivial","first","\"Woah,","other"]},{"Key":"the purposes","Fragments":["of","of","of"]},{"Key":"purposes of","Fragments":["exercism,","this","this"]},{"Key":"of exercism,","Fragments":["I"]},{"Key":"exercism, I","Fragments":["would"]},{"Key":"would probably","Fragments":["define","look","make","try","also","make","be","go","declare","go","still","make","help","be","be","work.","simplify","be","just","make"]},{"Key":"probably define","Fragments":["vars"]},{"Key":"to reference","Fragments":["the","upper-case","what","an"]},{"Key":"reference the","Fragments":["strings","built-in"]},{"Key":"the strings","Fragments":["\"T\"","with","through","using","after","you","themselves.","for"]},{"Key":"strings \"T\"","Fragments":["and"]},{"Key":"\"T\" and","Fragments":["\"U\".","\"U\"?","\"U\"","\"U\"","\"U\"","\"U\"","\"U\"","\"U\""]},{"Key":" hmm,","Fragments":["this"]},{"Key":"hmm, this","Fragments":["is"]},{"Key":"a \"bob\"","Fragments":["solution,"]},{"Key":"\"bob\" solution,","Fragments":["must"]},{"Key":"solution, must","Fragments":["have"]},{"Key":"must have","Fragments":["been","fixed","the","an"]},{"Key":"have been","Fragments":["posted","more","obvious.","made","helpful.","a","the","trying","changed","more","written","easily","used,","more","much","inserted."]},{"Key":"been posted","Fragments":["to"]},{"Key":"posted to","Fragments":["\"rna-transcription\""]},{"Key":"to \"rna-transcription\"","Fragments":["by"]},{"Key":"\"rna-transcription\" by","Fragments":["mistake?"]},{"Key":" very","Fragments":["nice!"]},{"Key":"very nice!","Fragments":["I"]},{"Key":"nice! I","Fragments":["like","prefer"]},{"Key":"the `(into","Fragments":["{}"]},{"Key":"`(into {}","Fragments":["...`","seq)`","(for...`"]},{"Key":"{} ...`","Fragments":["bit"]},{"Key":"...` bit","Fragments":["--"]},{"Key":"bit --","Fragments":["it's"]},{"Key":"-- it's","Fragments":["better","a"]},{"Key":"it's better","Fragments":["than","\u0026","if","to","for","to","to","to","to","because","than"]},{"Key":"better than","Fragments":["what","`(.endsWith","what","`drop","```(=","/[a-z]/.","making","(=","Haskell,","\u003ccode\u003elast\u003c/code\u003e.","being","regex.","`(=","I","the","a"]},{"Key":"I came","Fragments":["up","up","up","across","across","across","up","up","up","up"]},{"Key":"came up","Fragments":["with!","with","already","with","with","with","with","with"]},{"Key":" That's","Fragments":["interesting","very","a","not","an","almost","a","a","a","a","my","true.","actually","an","good.","very","a","quite","because","how","a","entirely","just","the","a","good","a","what","a","much","completely","a","great","a","completely","an","a","REALLY","quite"]},{"Key":"That's interesting","Fragments":["-"]},{"Key":"interesting -","Fragments":["it"]},{"Key":"- it","Fragments":["would","reads","really","would","should","will","doesn't","will","will","maps","just","isn't","can","could","is","stops","accepts","makes","made"]},{"Key":"would result","Fragments":["in","in","in","in"]},{"Key":"result in","Fragments":["a","actually","it’s","having"]},{"Key":"bit more","Fragments":["code","readable.","idiomatic","direct","in","idiomatic.","verbose,","the","specific,","specific?","meaningful","forgiving","data-driven","whitespace","DRY.","DRY.","explicit","readable","with","effort","DRY.","comfortable.","clear.","easy","readable","verbose","idiomatic.","clear.","complex","natural","efficient.","idiomatic.","intentional","generic","complex","clojure","idiomatic","literate.","efficient","compact.","clear","readable:","idiomatic.","concise","descriptive","idiomatic","work","readable.","tricky.","clearly.","advanced","specific"]},{"Key":"more code","Fragments":["but","(diminishing","at","and"]},{"Key":"code but","Fragments":["the","not","I"]},{"Key":"checks would","Fragments":["be"]},{"Key":"be much","Fragments":["more","better","easier","difference.","easier","faster","quicker","concise","cleaner"]},{"Key":" Wow,","Fragments":["I","that","I","this","This","pretty","a","looking","I"]},{"Key":"Wow, I","Fragments":["think","really","wish"]},{"Key":"is very","Fragments":["well","expressive","good!","helpful.","first","gross,","much","clear,","much","useful,","nice,","straight-forward","readable","jarring.","clear","straightforward","helpful.","clean","good","clean","welcome.","apt","readable,","similar","similar,","simple,"]},{"Key":"very well","Fragments":["done.","suited","be","explained","for"]},{"Key":"well done.","Fragments":["I"]},{"Key":"done. I","Fragments":["learnt"]},{"Key":"I learnt","Fragments":["a","about"]},{"Key":"learnt a","Fragments":["few"]},{"Key":"a few","Fragments":["things","tweaks","options","arguments","functions.","nits","iterations,","of","implementation","chars","points","options","examples","big","of","observations:","weeks","suggestions","`doseq`s","characters","minor","saved","times","smaller","more","ways","things","of","regexps","exercises","of","more","workarounds","linebreaks","things","of","seconds"]},{"Key":"few things","Fragments":["from","you've","can","you"]},{"Key":"things from","Fragments":["your"]},{"Key":"from your","Fragments":["code!","data","previous","single","proposal;","first","namespace","`day-names`","function."]},{"Key":"In something","Fragments":["with"]},{"Key":"something with","Fragments":["so","multimethods.","`(condp","frequencies...","it,"]},{"Key":"with so","Fragments":["few"]},{"Key":"so few","Fragments":["and"]},{"Key":"few and","Fragments":["such"]},{"Key":"and such","Fragments":["simple"]},{"Key":"such simple","Fragments":["conditions,","translations."]},{"Key":"simple conditions,","Fragments":["I'm"]},{"Key":"conditions, I'm","Fragments":["not"]},{"Key":"sure it","Fragments":["makes","is","makes","could","passes","terminates."]},{"Key":"a significant","Fragments":["difference,"]},{"Key":"significant difference,","Fragments":["but"]},{"Key":"difference, but","Fragments":["it's","I","you"]},{"Key":"but it's","Fragments":["probably","also","still","usually","(to","really","faster","pretty","less","very","also","not","kind","a","hard","generally","very","a","not","overkill","way","a","a)","not","the","fine","usually","also","also","more","pretty","more","succinct!","a"]},{"Key":"it's probably","Fragments":["good","fine,","straightforward","better","about","OK","more","a"]},{"Key":"probably good","Fragments":["practice"]},{"Key":"good practice","Fragments":["anyway.","in","to","to","to","for","to","or","for","to"]},{"Key":"practice anyway.","Fragments":[":)"]},{"Key":"would add","Fragments":["newlines","would","more","a"]},{"Key":"add newlines","Fragments":["and"]},{"Key":"newlines and","Fragments":["indent"]},{"Key":"and indent","Fragments":["before"]},{"Key":"indent before","Fragments":["the"]},{"Key":"before the","Fragments":["let","defn","args","argument","argument","reduction?","'if'","Eval."]},{"Key":"the let","Fragments":["and","but","for","block)","binding","value","form","makes","is","binding.","means","with"]},{"Key":"let and","Fragments":["the","see"]},{"Key":"the string/replace","Fragments":["forms."]},{"Key":" or","Fragments":["not!","import","any"]},{"Key":"or not!","Fragments":["exercism"]},{"Key":"not! exercism","Fragments":["seems"]},{"Key":"exercism seems","Fragments":["to"]},{"Key":"seems to","Fragments":["be","have","be","be","be","add","place","better","allow","introduce","work","be","be","re-implement","be","be","be","be","lead","be","be","be","be"]},{"Key":"be dealing","Fragments":["badly"]},{"Key":"dealing badly","Fragments":["with"]},{"Key":"badly with","Fragments":["my"]},{"Key":"with my","Fragments":["'or'","naming?","first","syntax","short","current","comment","regular","own","own.","`let`"]},{"Key":"my 'or'","Fragments":["statement"]},{"Key":"'or' statement","Fragments":["and"]},{"Key":"statement and","Fragments":["I'm","laziness?"]},{"Key":"and I'm","Fragments":["not","still","not","not","allocating","a"]},{"Key":" sorry,","Fragments":["that"]},{"Key":"sorry, that","Fragments":["should"]},{"Key":"that should","Fragments":["be","probably","be","make","be"]},{"Key":"be (defn-","Fragments":["silent?"]},{"Key":"(defn- silent?","Fragments":["[input]","[input]","[message]"]},{"Key":" (or","Fragments":["(nil?","(nil?","(some-\u003e","(divisible?","(#{\\C","(and"]},{"Key":"(or (nil?","Fragments":["input)","input)"]},{"Key":"(nil? input)","Fragments":["(=","(="]},{"Key":"input) (=","Fragments":["\"\"","\"\""]},{"Key":"(= \"\"","Fragments":["input)))","input)))","nil)"]},{"Key":" chrome","Fragments":["is"]},{"Key":"chrome is","Fragments":["being"]},{"Key":"is being","Fragments":["weird","discouraged","slowly","able","done.","tested.","evaluated","called.","done"]},{"Key":"being weird","Fragments":["about"]},{"Key":"weird about","Fragments":["copy-paste"]},{"Key":"about copy-paste","Fragments":["today."]},{"Key":" nil","Fragments":["behavior"]},{"Key":"nil behavior","Fragments":["isn't"]},{"Key":"behavior isn't","Fragments":["defined"]},{"Key":"isn't defined","Fragments":["in"]},{"Key":"defined in","Fragments":["the","the","a","terms","the","terms","terms","this"]},{"Key":"the instructions;","Fragments":["if"]},{"Key":"instructions; if","Fragments":["it"]},{"Key":"if it","Fragments":["should","did","helps","ends","is","enhance","improves","had","were","makes","has","is","is","doesn't","were","a","is","turns","is","used","matches","is","is","was","exists","is","wasn't","could","is","is"]},{"Key":"it should","Fragments":["be","be","be","have","be","look","be","return","say","be","be.","be","AssertionError","be,","come","be","help","be","be","work","be,","work","work"]},{"Key":"as silence,","Fragments":["I"]},{"Key":"silence, I","Fragments":["could"]},{"Key":"could change","Fragments":["to","your","the","to"]},{"Key":" (defn-","Fragments":["silent?","silent?","shouting?","question?","anagram-checker-for","question?","classify-response","split","normalizations","anagram?","alphagram","anagram-finder","next-count","anagram-of?","shouting?","only-numbers","transcribe","transcribe","validate","drop_and_show","rna-complement","bottles-of-beer"]},{"Key":"the bracket,","Fragments":["my"]},{"Key":"bracket, my","Fragments":["understanding"]},{"Key":"my understanding","Fragments":["is","of"]},{"Key":"understanding is","Fragments":["that","that","that"]},{"Key":"that normal","Fragments":["clojure"]},{"Key":"normal clojure","Fragments":["style"]},{"Key":"clojure style","Fragments":["is","guide","guide","guide:","guide","to"]},{"Key":"style is","Fragments":["to","not"]},{"Key":"to stack","Fragments":["the"]},{"Key":"stack the","Fragments":["ending"]},{"Key":"the ending","Fragments":["parens"]},{"Key":"ending parens","Fragments":["on","on"]},{"Key":"parens on","Fragments":["the","their","same","the","lines","the","the","a","the"]},{"Key":"last line.","Fragments":["I'm","Now"]},{"Key":"line. I'm","Fragments":["new","going"]},{"Key":"new at","Fragments":["serious","this,"]},{"Key":"at serious","Fragments":["lisp"]},{"Key":"serious lisp","Fragments":["usage,"]},{"Key":"lisp usage,","Fragments":["though."]},{"Key":"usage, though.","Fragments":[":)"]},{"Key":"think for","Fragments":["the","a","Bob"]},{"Key":"the case","Fragments":["in","-","of","statement","statement","where","where","of","of","with","of","where","before","that","statement","of"]},{"Key":"case in","Fragments":["which","`bottles`","`count`.","which","general.","the"]},{"Key":"which nil","Fragments":["is"]},{"Key":"nil is","Fragments":["inputted,","sufficient?","an","returned.","returned.","also"]},{"Key":"is inputted,","Fragments":["the"]},{"Key":"inputted, the","Fragments":["expected"]},{"Key":"the expected","Fragments":["result","input","namespace"]},{"Key":"expected result","Fragments":["is"]},{"Key":"result is","Fragments":["\"Fine,","so","much","the","not"]},{"Key":"is \"Fine,","Fragments":["be"]},{"Key":"as well.","Fragments":["Otherwise,","Unhandled","But","For",":-)","Were","Is","Which","The"]},{"Key":"well. Otherwise,","Fragments":["it"]},{"Key":"Otherwise, it","Fragments":["looks"]},{"Key":"it looks","Fragments":["good","much","nice.","like","good","better","good,","good","like","good.","wrong","like","like","like","good.","great","like","like","great.","better","like","really","really","like","good.","nice.","like","cleaner","god.","like","like","great","alright.","fine,","good","messy","kind","like","much"]},{"Key":"looks good","Fragments":["to","--","to","other","to","except","to","to","to","to","otherwise.","too.","to","to","overall.","though.","overall.","overall.","and","with","aside","to","but","to"]},{"Key":" Maybe","Fragments":["align","scoping","there’s","`dna-to-rna`","you","you","use",":require/:refer","simpler","you","assign","\"normalizer\"","there","input","you","you","instead","consider","the","`case`","try","a","take"]},{"Key":"Maybe align","Fragments":["the"]},{"Key":"align the","Fragments":["end","opening"]},{"Key":"end bracket","Fragments":["with"]},{"Key":"bracket with","Fragments":["same"]},{"Key":"with same","Fragments":["indentation"]},{"Key":"same indentation","Fragments":["as","level,"]},{"Key":"indentation as","Fragments":["the","arguments"]},{"Key":"the start","Fragments":["bracket"]},{"Key":"start bracket","Fragments":["for"]},{"Key":"bracket for","Fragments":["response-for"]},{"Key":"for response-for","Fragments":["and"]},{"Key":"response-for and","Fragments":["the"]},{"Key":"the contained","Fragments":["cond."]},{"Key":" Do","Fragments":["you","you","you","you","you","you","you","you","you","you","you","we"]},{"Key":"the individual","Fragments":["logic","checks","nucleotides","characters","characters","conditions","function","words","fn"]},{"Key":"individual logic","Fragments":["checks"]},{"Key":"good. Do","Fragments":["you"]},{"Key":"individual checks","Fragments":["out"]},{"Key":"checks out","Fragments":["into","into"]},{"Key":"intention-revealing names?","Fragments":["For","Also,"]},{"Key":"names? For","Fragments":["example,"]},{"Key":"For example,","Fragments":["you","I","you","the","```silence?```","in","these","you","it's","you"]},{"Key":"example, you","Fragments":["might","can","can","can"]},{"Key":"might make","Fragments":["a","the","sense","word-count","the","the","sense","it","it","more","that","things","it","the","things","for","`letter-generator`","the","for","for","`valid-dna?`"]},{"Key":"make a","Fragments":["function","good","counter","pull-request!","short","handy","simple","function","binding","case","function","nested","few","mistake","local","measurable","sorted","private","function","function"]},{"Key":"function named","Fragments":["`silent?`","yelling?","validate-something"]},{"Key":"named `silent?`","Fragments":["that"]},{"Key":"`silent?` that","Fragments":["did"]},{"Key":"that did","Fragments":["your","not"]},{"Key":"did your","Fragments":["`(="]},{"Key":"your `(=","Fragments":["\"\""]},{"Key":"`(= \"\"","Fragments":["input)`","m)`,","message)`,","(clojure.string/trim"]},{"Key":"\"\" input)`","Fragments":["check."]},{"Key":" Ok","Fragments":["thanks","-","thanks","thanks","it"]},{"Key":" HAHA,","Fragments":["no,"]},{"Key":"HAHA, no,","Fragments":["I"]},{"Key":"no, I","Fragments":["did","pushed"]},{"Key":"about that","Fragments":["function","consideration,","but","n1k0","it","function.","function.","little","naming","`clojure.core\\frequencies`..."]},{"Key":"that function","Fragments":["until","from","literal,","to","out","contains","down","a"]},{"Key":"function until","Fragments":["now."]},{"Key":"until now.","Fragments":["That'll"]},{"Key":"now. That'll","Fragments":["simplify"]},{"Key":"That'll simplify","Fragments":["things."]},{"Key":" Have","Fragments":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","a","you","you","you","you","a","you","a","a","a","you","you","you","you","you","you","you","you","a","map","you"]},{"Key":"you looked","Fragments":["into","at","into","at","at","at"]},{"Key":"looked into","Fragments":["```clojure.core/frequencies```?","```clojure.core/frequencies```?","writing"]},{"Key":"Thanks! The","Fragments":["fact","reason"]},{"Key":"The fact","Fragments":["that","that"]},{"Key":"fact that","Fragments":["clojure","the","characters","functions","symbols","`map`","`cond`","string","I","you","character","`if`","the","maps","strings","`join`","you","it's","you","it's","you","you","a","`(vec","you","you're","you"]},{"Key":"that clojure","Fragments":["Maps","allows"]},{"Key":"clojure Maps","Fragments":["are"]},{"Key":"Maps are","Fragments":["also"]},{"Key":"are also","Fragments":["functions","totally","a","functions","Collections,","`if-not`","string","clojure","more","functions.","a"]},{"Key":"also functions","Fragments":["makes","and"]},{"Key":"functions makes","Fragments":["this"]},{"Key":"makes this","Fragments":["pretty","solution","much","difficult","so","a"]},{"Key":"this pretty","Fragments":["convenient."]},{"Key":" Awesome!","Fragments":["I","Thanks","This","I","Those","Now"]},{"Key":"Awesome! I","Fragments":["was","should"]},{"Key":"was not","Fragments":["familiar","aware","necessary","previously","needed.","necessary","processing","immediately","a","comfortable","a","so"]},{"Key":"not familiar","Fragments":["with","with)","with","with"]},{"Key":"with `^:const`,","Fragments":["so"]},{"Key":"`^:const`, so","Fragments":["thanks!"]},{"Key":"Looks good","Fragments":["to","to","to","to","to","--","to","to","to","to","enough",":)","enough","enough","to","overall.","overall.","overall.","overall.","overall.","overall.","overall.","overall.","-","but","overall.","overall"]},{"Key":"Good call.","Fragments":["That","I've","I've"]},{"Key":"call. That","Fragments":["would"]},{"Key":"That would","Fragments":["definitely","make","allow","seem","allow","allow","collapse","be","make","work"]},{"Key":"would definitely","Fragments":["tidy","help","prefer","help"]},{"Key":"definitely tidy","Fragments":["things"]},{"Key":"tidy things","Fragments":["up."]},{"Key":"considered moving","Fragments":["the","the"]},{"Key":"the conditionals","Fragments":["into","better","into","spans","in","in"]},{"Key":"conditionals into","Fragments":["private","separate","something","small"]},{"Key":"with intention","Fragments":["revealing","revealing","revealing","revealing"]},{"Key":"intention revealing","Fragments":["names?","names","names","private","named"]},{"Key":"You've convinced","Fragments":["me"]},{"Key":"convinced me","Fragments":[":)"]},{"Key":"me :)","Fragments":["That"]},{"Key":":) That","Fragments":["does"]},{"Key":"That does","Fragments":["read","seem","read"]},{"Key":"does read","Fragments":["nicely.","a"]},{"Key":"had done","Fragments":["that"]},{"Key":"done that","Fragments":["initially","assignment"]},{"Key":"that initially","Fragments":["and"]},{"Key":"initially and","Fragments":["reversed"]},{"Key":"and reversed","Fragments":["it."]},{"Key":"reversed it.","Fragments":["It"]},{"Key":"It seemed","Fragments":["simple","so"]},{"Key":"seemed simple","Fragments":["enough"]},{"Key":"simple enough","Fragments":["to","(and","just","to"]},{"Key":"to leave","Fragments":["it,","it","a","ending","them.","parens","out","them","the"]},{"Key":"leave it,","Fragments":["but"]},{"Key":"it, but","Fragments":["it","you","I","in","I","I","couldn't"]},{"Key":"be cleaner.","Fragments":["I'll"]},{"Key":"cleaner. I'll","Fragments":["do"]},{"Key":"Thanks, that's","Fragments":["really"]},{"Key":"that's really","Fragments":["helpful.","up","good"]},{"Key":"really helpful.","Fragments":["I'm"]},{"Key":"helpful. I'm","Fragments":["still"]},{"Key":"I'm still","Fragments":["sorting","learning","fairly","pretty","pretty","working","unsure","very","fairly","going","somewhat","getting","getting","mulling","adapting","a","getting","learning","digesting","trying","new","not","not","hoping","new","amused","not"]},{"Key":"still sorting","Fragments":["out"]},{"Key":"sorting out","Fragments":["the","idiomatic"]},{"Key":"the preferred","Fragments":["style.","form","way,"]},{"Key":"Oh, and","Fragments":["you","for","I"]},{"Key":"you could","Fragments":["consider","drop","only","`(remove","just","change","then","get","refactor","use","only","probably","use","directly","more","implement","just","do","`def`","do","explain","try","omit","create","make","bind","make","make","make","add","avoid","create","just","just","consider","simplify","specify","build","use","fix","rename","search","break","do","make","reduce","get","declare","make","use","rewrite","define","consider,","implement","break","compose","make","even","arrange","make","make","just","create","either","filter","always","just","refactorize","join","use","use","also","get","get","also","combine","turn","also","use","just","also","use","do","use","write","import","e.g.","use","reduce","get","call","also","look","use","make","use","use","see","easily","use","make","do","also","just","also","use","require","just","use","use","probably","use","remove","possibly","leverage","put","put","try","require","check","use","use","use","make","skip","remove","have","just","change","bring","require","improve","put","then","move","just","use","write","never","use","split","use","rewrite","consider","just","simply","stop","use","take","use","functionally","also","use"]},{"Key":"could consider","Fragments":["making","using","hiding","using","making","making","making","rearranging","using","is"]},{"Key":"consider making","Fragments":["the","the","the","`silence?`","`question?`","the","part","a","functions"]},{"Key":"making the","Fragments":["predicate","helper","vars","helper","helper","reader","helper","`shouting?`","helper","`ends-with-question-mark?`","question","function","string","intent","`.endsWith`"]},{"Key":"the predicate","Fragments":["methods","methods","vars.","methods","on","is","is","names,","tests","tests","functions"]},{"Key":"predicate methods","Fragments":["private","with","(er,","private?","too.","would","like"]},{"Key":"methods private","Fragments":["as","via"]},{"Key":"private as","Fragments":["well."]},{"Key":" Sure,","Fragments":["that's","you","but"]},{"Key":"Sure, that's","Fragments":["a"]},{"Key":"that's a","Fragments":["good","very","matter","nice","matter","bit","bad","matter","good","good","matter","lot","heavily","good","whole"]},{"Key":" Any","Fragments":["reason","chance","reason","thoughts","comments","advice","reason","reason","other"]},{"Key":"Any reason","Fragments":["not","why","you're","you"]},{"Key":"reason not","Fragments":["to","to","to."]},{"Key":"not to","Fragments":["use","pull","make","the","use","do","pass","influence","clutter","mention","so","do","\"DRY\"","use","find","make","change"]},{"Key":"use `:else`","Fragments":["instead","branch","instead","would"]},{"Key":"`:else` instead","Fragments":["of","of"]},{"Key":"of `(anything?","Fragments":["saying)`?"]},{"Key":"considered defining","Fragments":["private","vars","a","vars","a","a","predicates"]},{"Key":"defining private","Fragments":["vars"]},{"Key":"private vars","Fragments":["for"]},{"Key":"vars for","Fragments":["\"T\""]},{"Key":"for \"T\"","Fragments":["and","and"]},{"Key":"considered breaking","Fragments":["`(str/replace"]},{"Key":"breaking `(str/replace","Fragments":["strip-chars"]},{"Key":"`(str/replace strip-chars","Fragments":["\"\")`"]},{"Key":"strip-chars \"\")`","Fragments":["and"]},{"Key":"\"\")` and","Fragments":["`(str/split"]},{"Key":"and `(str/split","Fragments":["#\""]},{"Key":"`(str/split #\"","Fragments":["+\")`"]},{"Key":"#\" +\")`","Fragments":["into"]},{"Key":"+\")` into","Fragments":["private"]},{"Key":"with an","Fragments":["arity","addition,","atom.","error","expression","if-let","`atom`.","atom.","uppercased","anonymous","escaped","escaped"]},{"Key":"an arity","Fragments":["of"]},{"Key":"arity of","Fragments":["1"]},{"Key":"of 1","Fragments":["themselves?"]},{"Key":"What about","Fragments":["giving","name","dropping","using","differently","the","performance","some","using","giving","breaking","`sort`?","using","the","the"]},{"Key":"about giving","Fragments":["some","those","a","some"]},{"Key":"giving some","Fragments":["of","additional"]},{"Key":"some of","Fragments":["those","this","what's","my","them","it","the","that","the","the","them","the","my","the","your","the","those","the","the","the","the","the","the","them","what","the","those"]},{"Key":"those conditions","Fragments":["stronger","some","into"]},{"Key":"conditions stronger","Fragments":["names"]},{"Key":"stronger names","Fragments":["by"]},{"Key":"names by","Fragments":["making"]},{"Key":"by making","Fragments":["them","the","use","`remove-punctuation`"]},{"Key":"making them","Fragments":["private","private?","separate"]},{"Key":"them private","Fragments":["functions?","and"]},{"Key":"functions? Or","Fragments":["binding"]},{"Key":"Or binding","Fragments":["them"]},{"Key":"binding them","Fragments":["within","using"]},{"Key":"them within","Fragments":["the"]},{"Key":"within the","Fragments":["function?","closure,","`let`.","namespace","namespace","split"]},{"Key":"That's very","Fragments":["awesome.","very"]},{"Key":"very awesome.","Fragments":["Thank"]},{"Key":"awesome. Thank","Fragments":["you"]},{"Key":"Thank you","Fragments":["for","for","for","again","for","for","for","for","for","for","for","for","-",";)","for","for","for","@lela","for","for","for","for","@jeanne,","for","for","for","for","for","for","for","for","for","for","for","for","for"]},{"Key":"you for","Fragments":["that","pointing","your","the","the","the","the","your","nice","this","submitting","sharing.","your","feedback.","your","so","the","helping","making","your","the","your","the","your","your","your","your","your","your","your","the","introducing","pointing","the","the","the"]},{"Key":"that writeup","Fragments":[":)"]},{"Key":" PS:","Fragments":["nice","don't","Sorry","Sorry"]},{"Key":"PS: nice","Fragments":["to"]},{"Key":"nice to","Fragments":["meet","have","me.","use","see","realize","see","extract",":refer","figure","extract"]},{"Key":"to meet","Fragments":["you"]},{"Key":"meet you","Fragments":["this"]},{"Key":"you this","Fragments":["weekend!"]},{"Key":"know :)","Fragments":["It"]},{"Key":":) It","Fragments":["was"]},{"Key":"It was","Fragments":["a","suggested","something","a","just","pointed","suggested","a","harder","an","a"]},{"Key":"a huge","Fragments":["eye-opener","chance","regex","difference?"]},{"Key":"huge eye-opener","Fragments":["for"]},{"Key":"eye-opener for","Fragments":["me"]},{"Key":"for me","Fragments":["too.","when","to","here?","but","really","to","at","anyway,","was","to","putting","where","writing","to",":-)","to","makes","at","to","to","how"]},{"Key":" sweet,","Fragments":["who"]},{"Key":"sweet, who","Fragments":["knew"]},{"Key":"who knew","Fragments":["something","the"]},{"Key":"knew something","Fragments":["like"]},{"Key":"something like","Fragments":["that","that?","a","that?","`\\?`","`string-\u0026gt;words`","`word-frequencies`?","that","string/ends-with","that:","\"Lets","this:","`(str","\"BOB","`:unknown`","`str/blank?`.","this?","`split`","`alphagram-from-lower-case`","`for","`(and","`(first","```(to-rna","`asking-politely?`)","`defrecord`","`(=","`#({\\T","[Moby","that.","```(every?","(untested):","`dna-seq`","this:","\"Invalid","this","this?","`(=","this:","`shout?`","the","(=","`partial`","this."]},{"Key":"that was","Fragments":["in","supposed","not","made","my","inattention","a","the","left","just","where"]},{"Key":"was in","Fragments":["core?","a","clojure.","this","my"]},{"Key":" Great","Fragments":["use","solution!","take!","solution!","approach.","point!","one.","point","one!","tip,","tip,",":)","point.","feedback","start!","start!","tips","tips","first","solution!","use","and","balance","start!","code.","code.","point,","suggestions,","and","idea"]},{"Key":"Great use","Fragments":["of","of"]},{"Key":"of private","Fragments":["functions","and"]},{"Key":"looked at","Fragments":["```clojure.core/frequencies```?","Clojure,","the","the","making","the","the"]},{"Key":"this looks","Fragments":["good.","great.","great!","good!","great.","great.","good","good","pretty","pretty","good.","real","correct","like"]},{"Key":"Good point.","Fragments":["Updated.","Done","Also,","Resubmitted","It","I","I"]},{"Key":"about using","Fragments":["private","separate","`:require`","`letfn`","the","nucleotide-count","the","vector","```if```","`reduce`","the","`re-seq`","the","```seq```","external","a","a","shortcut","`case`"]},{"Key":"using private","Fragments":["functions","functions"]},{"Key":"functions (`defn-`)","Fragments":["instead","with"]},{"Key":"(`defn-`) instead","Fragments":["of"]},{"Key":"of binding","Fragments":["them"]},{"Key":"them using","Fragments":["`let`?",":only","`defn-`;"]},{"Key":"using `let`?","Fragments":["My"]},{"Key":"`let`? My","Fragments":["gut"]},{"Key":"My gut","Fragments":["reaction","says"]},{"Key":"gut reaction","Fragments":["is"]},{"Key":"reaction is","Fragments":["that","that"]},{"Key":"be easier","Fragments":["to","only","if","to","to","just"]},{"Key":"understand and","Fragments":["follow.","maintain."]},{"Key":"to `use`","Fragments":["all","`:only`,","it?"]},{"Key":"`use` all","Fragments":["of"]},{"Key":"all of","Fragments":["`clojure.string`","indentation","this","them,","the","the","the","the","the","the","them","those","that","your","your","the","this","them?","the","the"]},{"Key":"of `clojure.string`","Fragments":["when","where"]},{"Key":"`clojure.string` when","Fragments":["only"]},{"Key":"when only","Fragments":["two"]},{"Key":"only two","Fragments":["functions","branches.","or","falsey,"]},{"Key":"two functions","Fragments":["are","you've","shouldn't","when","don't","into","I"]},{"Key":"functions are","Fragments":["needed?","probably","integral","available","a","called","predicates","now","also","worth","free,","declared"]},{"Key":"Great solution!","Fragments":["Very"]},{"Key":"solution! Very","Fragments":["clear,"]},{"Key":"Very clear,","Fragments":["terse"]},{"Key":"clear, terse","Fragments":["and"]},{"Key":"terse and","Fragments":["well-named."]},{"Key":"I pushed","Fragments":["an","a","the"]},{"Key":"pushed an","Fragments":["update,"]},{"Key":"an update,","Fragments":["it"]},{"Key":"update, it","Fragments":["looks"]},{"Key":"looks much","Fragments":["better","more","better.","cleaner!","better.","cleaner","cleaner","better"]},{"Key":"much better","Fragments":["now.","indeed!","pace.","to","name","solution.","examples","solution","using"]},{"Key":" yeah","Fragments":["good"]},{"Key":"yeah good","Fragments":["call."]},{"Key":"good call.","Fragments":["I","This"]},{"Key":"call. I","Fragments":["pushed"]},{"Key":"pushed a","Fragments":["new","new","new"]},{"Key":"a new","Fragments":["version.","version","version","version","version","version","statement","version","version.","version","way","name.","line","version","context","version","revision","approach","set","nucleotide","version","word,","version","version","line","line.","one","iteration","line).","function","function","function","name","string","robot","line","binding","result","uppercased","test","student","name.","revision.","version","version"]},{"Key":"The more","Fragments":["I","correct"]},{"Key":"more I","Fragments":["think","like"]},{"Key":"it, the","Fragments":["more","same"]},{"Key":"the more","Fragments":["I","domain-specific","elegant","appropriate","general","specific","conventional","idiomatic","idiomatically","idiomatic","advanced","idiomatic"]},{"Key":"like what","Fragments":["you","you've","you've"]},{"Key":"you have.","Fragments":["Maybe","However,"]},{"Key":"have. Maybe","Fragments":["a"]},{"Key":"Maybe a","Fragments":["better","bit","style","bit","touch"]},{"Key":"better name","Fragments":["would","than","than","that","will","for","for"]},{"Key":"name would","Fragments":["help","probably","add"]},{"Key":"would help","Fragments":["it,","maintainability","the","if","a","with","explain","readability.","others","here.","reduce","to","people"]},{"Key":"help it,","Fragments":["like"]},{"Key":"it, like","Fragments":["`count-differences`?"]},{"Key":"Nice. I","Fragments":["actually"]},{"Key":"I actually","Fragments":["didn't","don't","meant","like","cancel","removed","was","thought","like","wouldn't","learned","meant","prefer","used","like","learned"]},{"Key":"actually didn't","Fragments":["know"]},{"Key":"Yeah, I've","Fragments":["removed","gotten","experimented"]},{"Key":"I've removed","Fragments":["it"]},{"Key":"removed it","Fragments":["and","to"]},{"Key":"it and","Fragments":["replaced","try","consider","understand"]},{"Key":"and replaced","Fragments":["with","the"]},{"Key":"replaced with","Fragments":["string",":require","`(not-any?","the","a","`last`.","the","`(seq"]},{"Key":"with string","Fragments":["last.","literals.","literals,","literals","literals."]},{"Key":" Thoughtful!","Fragments":["Thanks"]},{"Key":"Thoughtful! Thanks","Fragments":["for"]},{"Key":"the tip","Fragments":[":)",";)","on","about"]},{"Key":"Very valid","Fragments":["point,"]},{"Key":"valid point,","Fragments":["I'm"]},{"Key":"point, I'm","Fragments":["still"]},{"Key":"still learning","Fragments":["Clojure","clojure,"]},{"Key":"learning Clojure","Fragments":["so","too.","by"]},{"Key":"Clojure so","Fragments":["your","all","is","not","this","things"]},{"Key":"so your","Fragments":["kind","regex"]},{"Key":"your kind","Fragments":["feedback","words."]},{"Key":"kind feedback","Fragments":["allowed"]},{"Key":"feedback allowed","Fragments":["me"]},{"Key":"allowed me","Fragments":["to","to"]},{"Key":"learn more","Fragments":["about","about"]},{"Key":"about these","Fragments":["conventions"]},{"Key":"these conventions","Fragments":[":)"]},{"Key":"conventions :)","Fragments":["Thanks!"]},{"Key":"looks very","Fragments":["nice","good.","cool.","cool","nice.","similar","much"]},{"Key":"very nice","Fragments":[":)","solution",":)","solution!","solution"]},{"Key":"nice :)","Fragments":["The","Excellent"]},{"Key":":) The","Fragments":["body","function"]},{"Key":"The body","Fragments":["of","of","of"]},{"Key":"body of","Fragments":["```dna/to-rna```","this","`fn`","the","your","the","the","the","`let`","_find-letters_","the"]},{"Key":"of ```dna/to-rna```","Fragments":["is"]},{"Key":"very expressive","Fragments":[":)",":)"]},{"Key":"Good point,","Fragments":["done.","it's","thanks!","re-submitted.","thanks!"]},{"Key":" Ah,","Fragments":["I","sorry,","indeed,","great,","that's","sure,","this","I've","good","and","sure,","right.","got","interesting","didn't","and","gotcha.","and","`frequencies`...","`frequencies`!","that's","so","I","I","it's"]},{"Key":"Ah, I","Fragments":["like","see!","see"]},{"Key":" yes,","Fragments":["but"]},{"Key":"yes, but","Fragments":["how"]},{"Key":"but how","Fragments":["is","about:","are"]},{"Key":"how is","Fragments":["`(="]},{"Key":"is `(=","Fragments":["(last","(normalize"]},{"Key":"`(= (last","Fragments":["message)","s)","sentence)"]},{"Key":"(last message)","Fragments":["\\?)`","\\?))"]},{"Key":"message) \\?)`","Fragments":["better"]},{"Key":"\\?)` better","Fragments":["than"]},{"Key":"than `(.endsWith","Fragments":["message"]},{"Key":"`(.endsWith message","Fragments":["\"?\")`"]},{"Key":"defining vars","Fragments":["with","with","with"]},{"Key":"revealing names","Fragments":["instead","instead","for"]},{"Key":"names instead","Fragments":["of","of","of"]},{"Key":"characters \\T","Fragments":["and"]},{"Key":"\\T and","Fragments":["\\U?","\\U"]},{"Key":"Good call,","Fragments":["thanks","it"]},{"Key":"call, thanks","Fragments":["Brian."]},{"Key":" Want","Fragments":["to"]},{"Key":"Want to","Fragments":["submit"]},{"Key":"submit it","Fragments":["for","to"]},{"Key":"for approval?","Fragments":[":)"]},{"Key":" Yeah","Fragments":["I","indeed,","...","...","...","I",",","I","I'm"]},{"Key":"Yeah I","Fragments":["guess,","also","think"]},{"Key":"guess, I'm","Fragments":["not"]},{"Key":"sure I","Fragments":["like","follow.","can","agree","understand","should","would","like","see","have"]},{"Key":"that better","Fragments":["than","since"]},{"Key":"have though.","Fragments":["What"]},{"Key":"though. What","Fragments":["do"]},{"Key":"I love","Fragments":["the","the","trimming","the","the","how","the","this","deleting","the","how","the","your","the","that"]},{"Key":"love the","Fragments":["way","individual","way","use","new","use","`:pre`","`clean`","simplicity","terseness"]},{"Key":"the way","Fragments":["```(string/replace","you","it","the","you","you","I've","you've","the","it","of","you","I","to","it","you","you","this","I","your","I","to","I","functions","you","not","that","`?`/`p`","you","you","to","you","that","single","single","I","I"]},{"Key":"way ```(string/replace","Fragments":["nucleotides```"]},{"Key":"```(string/replace nucleotides```","Fragments":["reads."]},{"Key":"call. I've","Fragments":["submitted","submitted"]},{"Key":"I've submitted","Fragments":["a","another","a","a","a","a","this","a"]},{"Key":"submitted a","Fragments":["version","new","work","new","new","new","new","new","new","far","new","new","pull","version","new"]},{"Key":"a version","Fragments":["2.","where","with","that","with","without","with","using","two","with"]},{"Key":" Ok.","Fragments":["Understood.","This"]},{"Key":"Ok. Understood.","Fragments":["Thanks."]},{"Key":"One tiny","Fragments":["pick:","nit-pick","imperfection","nitpick:","nitpick:"]},{"Key":"tiny pick:","Fragments":["you"]},{"Key":"pick: you","Fragments":["could"]},{"Key":"could drop","Fragments":["`str`","the","the"]},{"Key":"drop `str`","Fragments":["and"]},{"Key":"`str` and","Fragments":["compare","create","directly"]},{"Key":"compare to","Fragments":["character","original","the"]},{"Key":"to character","Fragments":["`\\?`"]},{"Key":" Otherwise,","Fragments":["it's","looks","looks","looks","looks","looks","looks","you"]},{"Key":"Otherwise, it's","Fragments":["great."]},{"Key":"Ah, sorry,","Fragments":["I"]},{"Key":"sorry, I","Fragments":["meant"]},{"Key":"I meant","Fragments":["functions.","to","that","to","creating"]},{"Key":" Anyway,","Fragments":["that's","looks","your"]},{"Key":"Anyway, that's","Fragments":["solid."]},{"Key":"that's solid.","Fragments":["Waiting"]},{"Key":"solid. Waiting","Fragments":["for"]},{"Key":"Waiting for","Fragments":["the"]},{"Key":"the tip.","Fragments":["I'm","I","That","Check"]},{"Key":"tip. I'm","Fragments":["updated"]},{"Key":"I'm updated","Fragments":["all-caps?"]},{"Key":"updated all-caps?","Fragments":["to"]},{"Key":"all-caps? to","Fragments":["use"]},{"Key":"for clarifying,","Fragments":["that's"]},{"Key":"clarifying, that's","Fragments":["very"]},{"Key":"that's very","Fragments":["useful","helpful."]},{"Key":"very useful","Fragments":["to","generic","generating","function"]},{"Key":"useful to","Fragments":["know.","you.","alias"]},{"Key":"don't agree","Fragments":["that","that"]},{"Key":"that adding","Fragments":["extra"]},{"Key":"adding extra","Fragments":["code"]},{"Key":"extra code","Fragments":["to"]},{"Key":"code to","Fragments":["name","an","use","read.","about","include","use","use","be","a","know","programmatically","http://exercism.io/submissions/e4d70ea7f904caf9e0c4d7d4","remove","make","get","be","be"]},{"Key":"name these","Fragments":["function","functions"]},{"Key":"these function","Fragments":["calls"]},{"Key":"function calls","Fragments":["makes","the","shorter","like","behind","(string/upper-case","`assoc`","`assoc`"]},{"Key":"calls makes","Fragments":["sense."]},{"Key":"makes sense.","Fragments":["If","But","Thank"]},{"Key":"sense. If","Fragments":["there"]},{"Key":"If there","Fragments":["was"]},{"Key":"there was","Fragments":["intent","a","a","a","some","at","a","already","only","a","a","at","some"]},{"Key":"was intent","Fragments":["to"]},{"Key":"intent to","Fragments":["reuse"]},{"Key":"to reuse","Fragments":["them,","a","the"]},{"Key":"reuse them,","Fragments":["they"]},{"Key":"them, they","Fragments":["wouldn't"]},{"Key":"they wouldn't","Fragments":["be"]},{"Key":"wouldn't be","Fragments":["private.","here.","able","too","obvious","able","much","able","necessary.","exposed","surprised","a","concerned","necessary."]},{"Key":" Formatting","Fragments":["got","is","is","`anagrams-for`","in","is"]},{"Key":"Formatting got","Fragments":["lost,"]},{"Key":"got lost,","Fragments":["sorry"]},{"Key":"It does","Fragments":["seem","keep","not","exactly"]},{"Key":"does seem","Fragments":["clearer.","to"]},{"Key":"the tips,","Fragments":["have"]},{"Key":"tips, have","Fragments":["modified"]},{"Key":"have modified","Fragments":["and"]},{"Key":"modified and","Fragments":["resubmitted"]},{"Key":"and resubmitted","Fragments":[":)"]},{"Key":" Note","Fragments":["that","that"]},{"Key":"Note that","Fragments":["your","you","you","an"]},{"Key":"your methods","Fragments":["are","uniform","return"]},{"Key":"methods are","Fragments":["using","absolutely","public?","one","confusing","now"]},{"Key":"are using","Fragments":["`is-`","mutable","directly.","`partial`","which"]},{"Key":"using `is-`","Fragments":["while"]},{"Key":"`is-` while","Fragments":["the"]},{"Key":"while the","Fragments":["method","\"threaded\"","nucleotides","third","submission","comparison"]},{"Key":"the method","Fragments":["`empty`","names","```to-rna-1```,","`str`.","is","more","arguments","which","extractions"]},{"Key":"method `empty`","Fragments":["uses"]},{"Key":"`empty` uses","Fragments":["`?`."]},{"Key":"uses `?`.","Fragments":["Making"]},{"Key":"`?`. Making","Fragments":["your"]},{"Key":"Making your","Fragments":["methods"]},{"Key":"methods uniform","Fragments":["across"]},{"Key":"uniform across","Fragments":["would"]},{"Key":"across would","Fragments":["improve"]},{"Key":"would improve","Fragments":["readability.","readability."]},{"Key":"good --","Fragments":["I","I"]},{"Key":"think the","Fragments":["\"why\"","approach","string","conditions","conditional","function","bottleneck","common","`get`","*why*","exercise","degree","former","result","case","intent","second","usual","usual","```(:require","new","choice","most","String#endsWith","problem","lambda","next","shout?","second","suggestion","atom","intent","way","regex","fact","named","use","code","more","RE"]},{"Key":"the \"why\"","Fragments":["of"]},{"Key":"\"why\" of","Fragments":["`response-for`"]},{"Key":"of `response-for`","Fragments":["is","on","and","and","or","method,"]},{"Key":"`response-for` is","Fragments":["much","currently","the"]},{"Key":"is much","Fragments":["clearer","more","broader","easier","easier","cleaner","more","nicer","simpler:","easier","cleaner","more","appreciated.","more","too","more","better,"]},{"Key":"much clearer","Fragments":["now.","with"]},{"Key":"Looks great","Fragments":["--",":)",":)",":)","anyway.","though.","-","-","to"]},{"Key":"great --","Fragments":["really"]},{"Key":"-- really","Fragments":["can't"]},{"Key":"really can't","Fragments":["find"]},{"Key":"find much","Fragments":["to","to"]},{"Key":"much to","Fragments":["complain","do","complain","say","the","have"]},{"Key":"to complain","Fragments":["about","about,"]},{"Key":"complain about","Fragments":["here!"]},{"Key":"way you","Fragments":["generate","could","can","could","can","could","can","define","can","passed","could","wouldn't","could","read","could","refer","want","structured","can","don't","lined","built","say.","did"]},{"Key":"you generate","Fragments":["the","the"]},{"Key":"the hash","Fragments":["of","of","in"]},{"Key":"hash of","Fragments":["labelled","all"]},{"Key":"of labelled","Fragments":["number"]},{"Key":"labelled number","Fragments":["parts."]},{"Key":"using separate","Fragments":["functions","map/reduce,"]},{"Key":"separate functions","Fragments":["for","so","for","in","with","instead","for","to","for"]},{"Key":"conditional logic?","Fragments":["Using"]},{"Key":"logic? Using","Fragments":["intention-revealing"]},{"Key":"Using intention-revealing","Fragments":["names"]},{"Key":"intention-revealing names","Fragments":["might","to","to"]},{"Key":"names might","Fragments":["make"]},{"Key":"have no","Fragments":["idea","idea","idea","nit","idea","idea","\"Looks","idea","name',","name.","idea","comment"]},{"Key":"no idea","Fragments":["what","what","what","why","what","about","about","how","what","how"]},{"Key":"idea what","Fragments":["I'm","the","you","the","i'm","this"]},{"Key":"what I'm","Fragments":["doing.","doing","doing","manipulating.","doing"]},{"Key":"I'm doing.","Fragments":["First"]},{"Key":"doing. First","Fragments":["Clojure"]},{"Key":"First Clojure","Fragments":["ever."]},{"Key":" turns","Fragments":["out,"]},{"Key":"turns out,","Fragments":["it"]},{"Key":"out, it","Fragments":["is."]},{"Key":"it is.","Fragments":["I","That's","Otherwise"]},{"Key":"is. I","Fragments":["hadn't"]},{"Key":"hadn't been","Fragments":["able"]},{"Key":"been able","Fragments":["to"]},{"Key":"get regexes","Fragments":["to"]},{"Key":"regexes to","Fragments":["work","the"]},{"Key":"work before,","Fragments":["so"]},{"Key":"before, so","Fragments":["I","I"]},{"Key":"so I","Fragments":["gave","will","might","have","don't","shall","could","don't","have","don't","thought","didn't","don't","have","don't","think","wonder","decided","can","would","will","think","would","might","defaulted","think","used","think","googled","wouldn't","learned","wouldn't","decided","could","could","added","could","can","relied","tried","could","won't","dropped","could","have","have","don't","can","can","missed","changed","came","would","can","was","challenged","tried","started"]},{"Key":"I gave","Fragments":["up","the","into"]},{"Key":"gave up","Fragments":["on"]},{"Key":"that path.","Fragments":["A"]},{"Key":"path. A","Fragments":["little"]},{"Key":"A little","Fragments":["more","string-replacement"]},{"Key":"little more","Fragments":["persistence","common","straightforward.","insight,","efficient.","clear.","efficient","verbose,","clear","familiar","descriptive.","descriptive","idiomatic.","readable","concise."]},{"Key":"more persistence","Fragments":["seems"]},{"Key":"persistence seems","Fragments":["to"]},{"Key":"have paid","Fragments":["off."]},{"Key":"i can","Fragments":["extract","make"]},{"Key":"can extract","Fragments":["cond"]},{"Key":"extract cond","Fragments":["section"]},{"Key":"cond section","Fragments":["in"]},{"Key":"section in","Fragments":["functions","Brian"]},{"Key":" haha,","Fragments":["markdown","nice."]},{"Key":"haha, markdown","Fragments":["fail!"]},{"Key":"like them","Fragments":["both,"]},{"Key":"them both,","Fragments":["made"]},{"Key":"both, made","Fragments":["the"]},{"Key":"made the","Fragments":["suggestions","change","tests","anagram","code","code","perfect","changes","method","appropriate","implementation"]},{"Key":"the suggestions","Fragments":["and"]},{"Key":"suggestions and","Fragments":["resubmitted"]},{"Key":"conditional logic","Fragments":["to","into","into","into","to"]},{"Key":"logic to","Fragments":["private","functions","response-for.","convert","a","get","a","a"]},{"Key":"with intent","Fragments":["revealing"]},{"Key":"intent revealing","Fragments":["names?"]},{"Key":" Was","Fragments":["not","really"]},{"Key":"Was not","Fragments":["aware"]},{"Key":"not aware","Fragments":["I","of","of","of.","of)."]},{"Key":"aware I","Fragments":["could"]},{"Key":"could use","Fragments":["?","some","`last`","`empty?`","the","`n-bottles`","`-\u0026gt;\u0026gt;`","get","`:require`","symbols.","`memoize`?","```first``","`clojure.string/lower-case`.","isLetterOrDigit","a","here","Java","`partial`","reduce","threading","```(split","`1e9`","[`clojure.string/blank?`][1]","clojure.string/blank?","`clojure.string/blank?`","short-circuitring","`case`","clojure.string/blank?","that","a","`(int","with","destructuring",":refer","'?'","names","an","re-match","the","`nucleotide-counts`","a","2N","blank","`clojure.string/blank?`.","`clojure.string/blank?`,","`partial`","`partial`","the","`defn-`","`defn-`","`clojure.string/lower-case`.","`(into","to","Clojure","ratio","`case`","`zero?`","the","(last)","`(not","let","`if-let`"]},{"Key":"use ?","Fragments":["in"]},{"Key":"? in","Fragments":["clojure.","place."]},{"Key":"in clojure.","Fragments":["Will","It","Outermost","What","I","I"]},{"Key":"clojure. Will","Fragments":["fix."]},{"Key":"I saw","Fragments":["'true'","in","so","some","your","your","some","other","that","that"]},{"Key":"saw 'true'","Fragments":["in"]},{"Key":"'true' in","Fragments":["the"]},{"Key":" ha,","Fragments":["thanks!"]},{"Key":"Is there","Fragments":["a","a","a","a","something","a","something","an","any","an","another","a","a","a","any","a","a","any","something","a","a","a","any","nothing","a","a","a","a","a","some","something","some","a","possibly","a","a","a","a","a","a","any","an","a","a","a","are","a","a","a"]},{"Key":"there a","Fragments":["simpler","way","name","reason","way","benefit","way","way","way","way","reason","way","way","function","way","test","way","function","way","better","name","function/idiom","better","better","better","word","more","more","special","way","way","simpler","simpler","particular","benefit","way","simpler"]},{"Key":"a simpler","Fragments":["way","way","way","version","way","way","solution","way","way","way","way","regular","way"]},{"Key":"simpler way","Fragments":["to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"to implement","Fragments":["the","any","it","your","`nothing?`","`sorted`,","this","a","each","`classify-dna`","`count`;","from","a","shouted?","it","shouted?","it","your","here","some","silence?"]},{"Key":"implement the","Fragments":["`is-question`","CharSequence"]},{"Key":"the `is-question`","Fragments":["check?"]},{"Key":" Totally","Fragments":["personal"]},{"Key":"Totally personal","Fragments":["preference,"]},{"Key":"personal preference,","Fragments":["but","but"]},{"Key":"preference, but","Fragments":["I","your","I","it","instead","\"%\""]},{"Key":"but I","Fragments":["would","don't","think","guess","like","couldn't","rather","personally","don't","can't","think","wasn't","really","agree","assume","don't","thought","don't","am","had","would","feel","do","would","won't","found","think","prefer","didn't","don't","am","like","find","can","figured","figured","prefer","was","could","would","don't","suppose","thought","will","have","think","actually","don't","can't","wonder","can't","expect","chose","forgot","decided","don't","preferred","was","have","believe","don't","think","don't","will","made","would","couldn't","limit","believe","didn'","won't","thought","can","found","think","couldn't","couldn't","would","can","can't","think","didn't","thought","think","agree","also","think","couldn't","really","tend","should","think","settled","have","like","don't","would","realized","suppose","can","can","don't","will","really","think","feel","felt","do","didn't","think","think","think","find","think","keep","haven't","know","first","think","thought","personally","thought","thought","think","think","feel","guess","was","think","think","couldn't","think","think","got","actually","didn't","would","find","feel","think","would","thought","was","don't","like","couldn't","would","found","wish","also","remember","think","feel","think","couldn't","don't","find","need","actually","feel","would","decided","think","didn't","learned","saw","wasn't","think"]},{"Key":"would name","Fragments":["the"]},{"Key":"a trailing","Fragments":["\"?\","]},{"Key":"trailing \"?\",","Fragments":["and"]},{"Key":"\"?\", and","Fragments":["I"]},{"Key":"it's common","Fragments":["practice","to","to","to"]},{"Key":"common practice","Fragments":["to","for"]},{"Key":"practice to","Fragments":["use","put","replace","explicitly","order","expose","create","use"]},{"Key":"the symbol","Fragments":["`:else`","in","`c`"]},{"Key":"symbol `:else`","Fragments":["for"]},{"Key":"`:else` for","Fragments":["the","the"]},{"Key":"the `true`","Fragments":["branch"]},{"Key":"`true` branch","Fragments":["of"]},{"Key":"branch of","Fragments":["a"]},{"Key":"Very clean","Fragments":["--"]},{"Key":"clean --","Fragments":["I"]},{"Key":"to steal","Fragments":["some"]},{"Key":"steal some","Fragments":["of"]},{"Key":"of this","Fragments":["for","exercise","function.","exercise","solution","function?","using","is","exercise","exercise","has","helps.","exercise,","exercise","function","implementation.","code.","code","function","prerequisite","site","sort","piece","over","is","kata","later","example","problem","without","as","code","one.","program","code","code.","approach","function?","form.","code.","is","without","function"]},{"Key":"this for","Fragments":["the","approval.","simplifying","any","the","a"]},{"Key":" Although","Fragments":["it","recursion","this","it","using","code"]},{"Key":"Although it","Fragments":["is","feels","isn't"]},{"Key":"a Java","Fragments":["method,","method?"]},{"Key":"Java method,","Fragments":["endsWith"]},{"Key":"method, endsWith","Fragments":["seemed"]},{"Key":"endsWith seemed","Fragments":["like"]},{"Key":"seemed like","Fragments":["the","a","a","a","syntactic","a","overkill,"]},{"Key":"the most","Fragments":["expressive","straight","common","part","idiomatic","important","readable","cases..","standard","readable","straightforward(and","common","preferred.","elegant.","succinct"]},{"Key":"most expressive","Fragments":["choice."]},{"Key":"like it!","Fragments":[":)","Nice","One","I've"]},{"Key":"could only","Fragments":["calculate","compute"]},{"Key":"only calculate","Fragments":["the","`(lower-case"]},{"Key":"calculate the","Fragments":["first","prime"]},{"Key":"the first","Fragments":["word","argument.","argument","position","time","example","thing","level?","thing","applicable","Clojure","one","rule","or","word","one","part","expression.","try","value","match","argument,","one.","rule","word...","thing","item","parameter.","regular","non-nil","example","submission,","argument","that","that","iteration,","option,","times","argument","argument","test,","draft,","time.","batch","program?","Clojure","on","two","one","uppercase","form","two","one","one","solutions","rev...","4","bit","time","value,","in","item","non-null.","of","lines","bit","lisp","matching","time","clojure","Clojure","operation","step","matching.","place","time","line","problem","char","thing","time","three","thing","option","place)"]},{"Key":"first word","Fragments":["once,","only"]},{"Key":"word once,","Fragments":["while","without"]},{"Key":"once, while","Fragments":["still"]},{"Key":"while still","Fragments":["keeping","keeping"]},{"Key":"still keeping","Fragments":["the","a"]},{"Key":"keeping the","Fragments":["clarity?","response-for","code","match","code"]},{"Key":"hmm... I","Fragments":["don't"]},{"Key":"don't know","Fragments":["why","if","of","anything","if","if","if","if","much","that","at","if","if","if","what's","why","of","what","about","how","why","if","what","clojure)","that","-","if","how","how","what","why,","how","Clojure","how","Java","of)","how","a"]},{"Key":"know why","Fragments":["those","I","I"]},{"Key":"why those","Fragments":["nested."]},{"Key":"those nested.","Fragments":["They're"]},{"Key":"nested. They're","Fragments":["three"]},{"Key":"They're three","Fragments":["points."]},{"Key":" @mortimer","Fragments":["Sorry"]},{"Key":"@mortimer Sorry","Fragments":["for"]},{"Key":"Sorry for","Fragments":["so","the","stupid","that.","being","not"]},{"Key":"for so","Fragments":["late.","long"]},{"Key":"so late.","Fragments":["Please"]},{"Key":"late. Please","Fragments":["check"]},{"Key":"Please check","Fragments":["now","out","http://exercism.io/submissions/523f09786fd32d416c00001f","about"]},{"Key":"Looks like","Fragments":["I","you","we're","the","the","you","I'm","you","you're"]},{"Key":"like I","Fragments":["forgot","did","was","could","cheated","was","have","have."]},{"Key":"I forgot","Fragments":["to","here","that","to","to","to","to","that","that.","that.","that","to"]},{"Key":"forgot to","Fragments":["save","balance","save","clean","use","mention","say,","get"]},{"Key":"to save","Fragments":["the","before","a","the"]},{"Key":"save the","Fragments":["file","duplication"]},{"Key":"the file","Fragments":["before","starting","but","leads"]},{"Key":"file before","Fragments":["submitting."]},{"Key":"before submitting.","Fragments":["Rookie"]},{"Key":"submitting. Rookie","Fragments":["error."]},{"Key":"I find","Fragments":["that","it","it","it","the","it","that","the","the","perusing","it","namespace-qualified","this","it","sentences","it","this","the","it","it","it","it","the","the","the","the","the","```(=","the","map","comma-separated","the","the","them","that","that","`dow-\u003esequence`","that","combining","the"]},{"Key":"find that","Fragments":["using","it","awesome.","RegEx's","balance","`(.startsWith","a","the","this","constraint."]},{"Key":"that using","Fragments":["the","more","`frequencies`","them","`xs`","`re-seq`","sort","a","a","an","the","the","something"]},{"Key":"the name","Fragments":["```string```","\u003ccode\u003es\u003c/code\u003e","`replace-thymidine-with-uracil`","\"hasher\"","is","being","of","`pairs-equal`;","should","```to-rna-1```","and","`alphagram`,","`hamming-distance`","`p`","of","\"alphagram\"","\u003ccode\u003enothing?\u003c/code\u003e","of","and","`asking-politely?`","`dna-\u003erna`","`question?`","generation","a","space.","is","_get!_,","choice","`dow-\u003esequence`","space","to"]},{"Key":"name ```string```","Fragments":["makes"]},{"Key":"```string``` makes","Fragments":["it"]},{"Key":"it a","Fragments":["little","different","try.","bit","little.","chromosome?","name","lot","bit","seq:","bit,","good","little","go.","bit","bit","bit","`question?`","whole","little","function","bit","bit","little","bit","little","more","little"]},{"Key":"little harder","Fragments":["to"]},{"Key":"harder to","Fragments":["tell","read.","read","understand","read.","follow","understand.","get","read?","read?","read","refactor","understand.","miss","understand.","read"]},{"Key":"to tell","Fragments":["just","at","what"]},{"Key":"tell just","Fragments":["what"]},{"Key":"just what","Fragments":["the","you"]},{"Key":"the ```str/replace```","Fragments":["sexp"]},{"Key":"```str/replace``` sexp","Fragments":["is"]},{"Key":"sexp is","Fragments":["working"]},{"Key":"is working","Fragments":["to","in"]},{"Key":"working to","Fragments":["change."]},{"Key":"to change.","Fragments":["Is"]},{"Key":"change. Is","Fragments":["there"]},{"Key":"a name","Fragments":["you","from","as","that","like","for","to","change","to","that","that","that","for","inside","by","and","at","clash","at","using"]},{"Key":"name you","Fragments":["can"]},{"Key":"can use","Fragments":["that","`upper-case`","`str/upper-case`.","(last","`:else`","a","`-`","`last`.","them","threading","most","clojure's","`map`","`update-in`","simply","`(:require","wider","wide","`require`","the","`str/blank?`.","the","```Java.String```,","it","a","pre","`repeat`.","`:refer`","Clojure's","`defn-`","`(defn","`defn-`.","`cond`","more","a","either","here","`(boolean","`when`","something","to","to","to","`swap!`","the","that","the","condp","sets","``Character/isLetter```","to","a","it","destructuring","clojure.string/blank?","a","`=`","a","characters","`and`","the","`(partial","for","`(not","to","clojure.string/join","(not-any?","(not-any?","`rest`.","`clojure.string/blank?`","`cond`","that","a","`when-let`","instead","Clojure's"]},{"Key":"use that","Fragments":["describes","line.","(you","method.","fact","return","value","method"]},{"Key":"that describes","Fragments":["what","the"]},{"Key":"describes what","Fragments":["the"]},{"Key":"string *is*?","Fragments":["I"]},{"Key":"*is*? I","Fragments":["personally"]},{"Key":"I personally","Fragments":["like","prefer","prefer","think,","think","would","don't","find","would"]},{"Key":"personally like","Fragments":["```strand```."]},{"Key":"it's fine","Fragments":["where","like"]},{"Key":"fine where","Fragments":["it"]},{"Key":"where it","Fragments":["is.","is.","can","is","is.","is","makes"]},{"Key":"is. That's","Fragments":["something"]},{"Key":"That's something","Fragments":["simple","to"]},{"Key":"something simple","Fragments":["to","like"]},{"Key":"simple to","Fragments":["refactor,","check","do","understand.","just"]},{"Key":"to refactor,","Fragments":["and"]},{"Key":"refactor, and","Fragments":["currently"]},{"Key":"and currently","Fragments":["makes"]},{"Key":"currently makes","Fragments":["perfect"]},{"Key":"makes perfect","Fragments":["sense"]},{"Key":"perfect sense","Fragments":["where"]},{"Key":"sense where","Fragments":["it"]},{"Key":" To","Fragments":["me,","me,","me,","me,","be","make","keep","eliminate","avoid","me","sort","nitpick:"]},{"Key":"To me,","Fragments":["`blank?`","`empty?`","`blank?`","`blank?`","the","the"]},{"Key":"me, `blank?`","Fragments":["doesn't","doesn't","doesn't","and"]},{"Key":"`blank?` doesn't","Fragments":["match","seem","seem"]},{"Key":"the domain","Fragments":["language","language","that","(a","(how","(how","word","to","helps","better:","(which","of","terms","terms","that","construct.","are","we're","of"]},{"Key":"language as","Fragments":["well","well","a"]},{"Key":"as well","Fragments":["as","as","—","without","as","IMO.","since","as","in","as","as","as","as","though","by","which","and",":)","if","as","as","for"]},{"Key":"well as","Fragments":["the","the","the","`split`","no","a","how","how","mark","the","Clojure"]},{"Key":"two fn","Fragments":["names.","names."]},{"Key":"guess it","Fragments":["would","is"]},{"Key":"be as","Fragments":["simple","much","effective","common,","tight"]},{"Key":"as simple","Fragments":["as","and","as","as"]},{"Key":"simple as","Fragments":["replacing","possible,","possible,"]},{"Key":"as replacing","Fragments":["`nucleotides`"]},{"Key":"replacing `nucleotides`","Fragments":["string"]},{"Key":"`nucleotides` string","Fragments":["with"]},{"Key":"string with","Fragments":["a","blank?","an"]},{"Key":"a vector/list","Fragments":["of"]},{"Key":"vector/list of","Fragments":["pretty"]},{"Key":"of pretty","Fragments":["much"]},{"Key":"pretty much","Fragments":["anything.","the","exactly","my","what","exactly","the","the","the","anything,","like"]},{"Key":"It doesn’t","Fragments":["account"]},{"Key":"doesn’t account","Fragments":["for"]},{"Key":"account for","Fragments":["different","strings","cases","the","that,"]},{"Key":"for different","Fragments":["number"]},{"Key":"different number","Fragments":["of"]},{"Key":"number of","Fragments":["nucleotides","the","elements","inputs.","different","functions","things","letters","steps","arguments).","capital","exercises","substitutions","arguments.","arguments","entries","arguments"]},{"Key":"of nucleotides","Fragments":["in","in","in","it"]},{"Key":"nucleotides in","Fragments":["source","two","there","the","the","three"]},{"Key":"in source","Fragments":["and"]},{"Key":"source and","Fragments":["target,"]},{"Key":"and target,","Fragments":["but"]},{"Key":"target, but","Fragments":["it"]},{"Key":"it can","Fragments":["be","be","be","be","be","work","be","produce.","be","be","replace","get","be","be)","check"]},{"Key":"can be","Fragments":["handled","used","used","done","done","used","treated","assumed","insanely","written","treated","ommitted","used","named","handy","sometimes","used","already","solved","found","treated","improved.","achieved","treated","done","used","nicely","alternatively","handled","a","given","inlined","treated","just","treated","found","made","sped","replaced","treated","simply","easily","found","negative.","found","thought","abstracted","easily","negative","used","substituted","made","done","transformed","replaced","used","reasonably","eliminated","opened","used","simplified","used","shortened","anything","replaced","shortened","a","simplified","used","used","a","expressed","used","passed","combined","done","simplified.","simplifed","written","shortened","transactional","written","treated","written","treated","expressed","formed","written","treated","used","treated","written","treated","used","better,","done","used","written","treated","used","used","simplified.","composed","simplified","done","tightened","also","helpful.","used","also","a","used","used","used","simplified","simplified","written","more","\"calculated\"","more","simplified","treated","hard","threaded,","entirely","defined","used","used","removed","more","used","tested.","used","done","written","simplified","applied","passed","done","used"]},{"Key":"be handled","Fragments":["in","by","correctly."]},{"Key":"handled in","Fragments":["respective","a","`score-letter`."]},{"Key":"in respective","Fragments":["source-to-target-collation."]},{"Key":"like this","Fragments":["as","approach!","one","to","one.","version","approach","better","if",":(","in","is",":)","approach","(modulo","can","at",":)","`(partial","triangle","at","solution.","finds","\"))))\"","new","is","is","creates","(untested).",":","help","could","is","sort"]},{"Key":"as an","Fragments":["alternative","ordered","object,","exercise,","argument","argument","(optional)","executable","opportunity","alias","argument.","excercise","argument"]},{"Key":"an alternative","Fragments":["approach.","to","for","`some-\u003e`","to","solution"]},{"Key":"alternative approach.","Fragments":["More"]},{"Key":"approach. More","Fragments":["of"]},{"Key":"More of","Fragments":["it"]},{"Key":"of it","Fragments":["could","is","into","by","either","only","as:","afterwards).","of"]},{"Key":"be reused","Fragments":["if","and"]},{"Key":"reused if","Fragments":["the"]},{"Key":"the strands","Fragments":["were","with","together"]},{"Key":"strands were","Fragments":["represented"]},{"Key":"were represented","Fragments":["by"]},{"Key":"represented by","Fragments":["something","something","upper-case"]},{"Key":"by something","Fragments":["besides","like"]},{"Key":"something besides","Fragments":["strings"]},{"Key":"besides strings","Fragments":["as"]},{"Key":"strings as","Fragments":["well.","lists","seqs","sequences","lists","sequences"]},{"Key":"me, `empty?`","Fragments":["doesn't"]},{"Key":"`empty?` doesn't","Fragments":["match"]},{"Key":" Nope,","Fragments":["I","I","I"]},{"Key":"Nope, I","Fragments":["didn’t.","just","wasn’t"]},{"Key":"It may","Fragments":["be","be","simplify","help","take","manifest"]},{"Key":"be faster,","Fragments":["especially"]},{"Key":"faster, especially","Fragments":["on"]},{"Key":"especially on","Fragments":["large"]},{"Key":"on large","Fragments":["DNAs,"]},{"Key":"large DNAs,","Fragments":["but"]},{"Key":"DNAs, but","Fragments":["I"]},{"Key":"don't think","Fragments":["it's","this","that","it","it's","there's","the","that","this","it's","the","you","you're","it's","`#\"T\"`","`use`","you'll","this","you","`question?`","laziness","that","you","(str","you","it's","you","you","you","you","'Forceful","it's","I","comments"]},{"Key":"it's that","Fragments":["much","much"]},{"Key":"that much","Fragments":["faster,","shorter,","cleaner","here.","-","different."]},{"Key":"much faster,","Fragments":["and"]},{"Key":"faster, and","Fragments":["being"]},{"Key":"and being","Fragments":["able"]},{"Key":"being able","Fragments":["to","to","to"]},{"Key":"use basic","Fragments":["collection"]},{"Key":"basic collection","Fragments":["functions"]},{"Key":"collection functions","Fragments":["justifies"]},{"Key":"functions justifies","Fragments":["it"]},{"Key":"justifies it","Fragments":["for"]},{"Key":"a really","Fragments":["interesting","great","descriptive","nice","convenient","good","mysterious","good","DRY","elegant","cool"]},{"Key":"really interesting","Fragments":["implementation!"]},{"Key":"interesting implementation!","Fragments":["In"]},{"Key":"implementation! In","Fragments":["fact"]},{"Key":"In fact","Fragments":["it","I"]},{"Key":"fact it","Fragments":["is"]},{"Key":"only implementation","Fragments":["I"]},{"Key":"implementation I","Fragments":["have"]},{"Key":"have seen","Fragments":["that","quite","using","in","seems"]},{"Key":"seen that","Fragments":["does","this","\u003ccode\u003e(declare","doesn't"]},{"Key":"not use","Fragments":["string/replace.","a","them","```join```","`.endsWith`","directly","the","just","regexps"]},{"Key":" May","Fragments":["I","be","I"]},{"Key":"May I","Fragments":["ask","blow"]},{"Key":"I ask","Fragments":["why","for"]},{"Key":"ask why","Fragments":["you"]},{"Key":"why you","Fragments":["chose","wrote","wrote","need","used","said","need","chose"]},{"Key":"you chose","Fragments":["to","to"]},{"Key":"chose to","Fragments":["go","go","use","directly"]},{"Key":"to go","Fragments":["this","for","for","with","through","the","backwards","a","about"]},{"Key":"go this","Fragments":["route?","route"]},{"Key":"this route?","Fragments":["Did"]},{"Key":"route? Did","Fragments":["you"]},{"Key":"Did you","Fragments":["consider","consider","consider","consider","consider","consider","consider","consider","consider","consider","know","consider","intentionally","know","feel","know","try","check","know","know","mean","know","think","think"]},{"Key":"you consider","Fragments":["using","using","using","using","using","writing","factoring","using","having","using","using","using","abstracting","it","this"]},{"Key":"consider using","Fragments":["clojure.string/replace?","`:require`","`silent?`","a","a","upcase","`cond`","the","`cond`","`dec`","the","`:require`","`re-seq`","list","`cond`","`last`","str.blank?","(=","(last)","```clojure.string/blank?```","higher","the","2-space","`when-not`","clojure.string/split","the","a","the"]},{"Key":"this can","Fragments":["get","be","be","add","be","also"]},{"Key":"can get","Fragments":["much","much","it","rid","around","rid","away","without","some","any","moody","away","more","`true`","more","rid","to","by"]},{"Key":"get much","Fragments":["better.","out","more","good"]},{"Key":"Hi, this","Fragments":["is"]},{"Key":"is looking","Fragments":["good,","pretty","pretty","good"]},{"Key":"looking good,","Fragments":["a"]},{"Key":"good, a","Fragments":["few"]},{"Key":"few tweaks","Fragments":["and"]},{"Key":"tweaks and","Fragments":["you"]},{"Key":"you will","Fragments":["be","of","need","deign","want","consider","eventually","do","be","have","get","instead","come","produce"]},{"Key":"will be","Fragments":["on","more","able","nice","necessary","worth","evaluated","less","more","a","less","nicer.","cleaner","more","more","read","more","treated.","lower","compared","computed","able","invalid.","private.","raised.","immediately","truthy","a","run","trying","repeated","a","the","placed","fixed","faster.","falsey","in","missed"]},{"Key":"be on","Fragments":["to","the","the","the","the","the","the","the","its'","one","a","its","the"]},{"Key":"on to","Fragments":["the","the"]},{"Key":"The first","Fragments":["thing","version","one","`or`","one","thing","time","was"]},{"Key":"first thing","Fragments":["I","I've","I","that","that","evaluated.","that"]},{"Key":"thing I","Fragments":["would","might","could","would","have","would","should","could","still","would","would","can","don't","can","am","was","would","notice","would","would","would","would","found"]},{"Key":"would highly","Fragments":["recommend"]},{"Key":"highly recommend","Fragments":["doing"]},{"Key":"recommend doing","Fragments":["is"]},{"Key":"doing is","Fragments":["to","reducing"]},{"Key":"to tweak","Fragments":["your"]},{"Key":"tweak your","Fragments":["whitespace;"]},{"Key":"your whitespace;","Fragments":["trailing"]},{"Key":"whitespace; trailing","Fragments":["parenthesis"]},{"Key":"trailing parenthesis","Fragments":["are","on","up.","after"]},{"Key":"parenthesis are","Fragments":["usually"]},{"Key":"are usually","Fragments":["placed","not"]},{"Key":"usually placed","Fragments":["on"]},{"Key":"placed on","Fragments":["the","it's"]},{"Key":"last line","Fragments":["with","of","of","of","of","with","of","with","with","is"]},{"Key":"line with","Fragments":["code.","`letfn`","first","the","first","`(into","actual","an","the","[The"]},{"Key":"with code.","Fragments":["The"]},{"Key":"code. The","Fragments":["arguments","only"]},{"Key":"The arguments","Fragments":["vector"]},{"Key":"arguments vector","Fragments":["is","in"]},{"Key":"vector is","Fragments":["usually","unnecessary"]},{"Key":"is usually","Fragments":["separated","only","no"]},{"Key":"usually separated","Fragments":["by"]},{"Key":"separated by","Fragments":["a","blank"]},{"Key":"by a","Fragments":["space","small","single","constant","constant","client","```(every?","backslash"]},{"Key":"a space","Fragments":["from","on","before"]},{"Key":"space from","Fragments":["the"]},{"Key":"function name,","Fragments":["or"]},{"Key":"name, or","Fragments":["placed","just"]},{"Key":"or placed","Fragments":["on"]},{"Key":"on it's","Fragments":["own","own"]},{"Key":"would also","Fragments":["take","make","be","not","be","suggest","work.","allow","eliminate"]},{"Key":"also take","Fragments":["a","advantage","an","an"]},{"Key":"take a","Fragments":["look","predicate","string.","look","look","look","`:rename`","look","look","look","look","look","look","look","look","look","new","look","look","look","3rd","look","look","default","look","look","look","look","look","look","break.","variable","look"]},{"Key":"a look","Fragments":["at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","`format`","at","at","at","into","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","under","at","at","at","to","at","at","at","at","at","at"]},{"Key":"look at","Fragments":["using","clojure.typed.","it","http://clojuredocs.org/clojure_core/clojure.core/defn","renaming","it.","iteration","`frequencies`","`re-seq`","`require`?","`let`","`frequencies`","`-››`","the","the","the","`frequencies`,","[-\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E)","it.","the","example","https://github.com/vim-scripts/VimClojure","the","if","the","`frequencies`.","my","`frequencies`","this","using","the","[clojure.string](http://clojure.github.io/clojure/clojure.string-api.html)","some","some","`clojure.string/blank?`","`frequencies`.","```blank?```","`core.frequencies`","`not=`","http://ryanverner.com/post/49884705761/clojure-require-vs-use","[clojure.string/replace](http://clojure.github.io/clojure/clojure.string-api.html#clojure.string/replace)","`clj-time`","`cond`,","`clojure.string/blank?`","the","[`every?`](http://clojuredocs.org/clojure_core/clojure.core/every_q)","[`assert`](http://clojuredocs.org/clojure_core/clojure.core/assert)","\u003ccode\u003econd\u003c/code\u003e","the","the","replacing","the","`re-seq`","`frequencies`.","the","clojure.string/blank?","`clojure.core/frequencies`","the","creating","using","frequencies","the","[`case`](http://clojuredocs.org/clojure_core/clojure.core/case).","`GregorianCalendar`,","sets","the","doing","the","some","the","http://www.amazon.com/Implementation-Patterns-Kent-Beck/dp/0321413091","`update-in`",":pre","[the","`merge-with`","the","`str/blank?`.","my","this","`partition-all`","collection","collection","your","the","`partition`.","the","the","a","this.","a","the","the","`case`","that","`comp`","the","the","the","the","it"]},{"Key":"at using","Fragments":["`:require`","partial,","`partial`,","`:refer`","`:require`","a","Refs,"]},{"Key":"using `:require`","Fragments":["in","in","in","to","in","in","instead","in"]},{"Key":"`:require` in","Fragments":["the","the","the","`ns`","the","the","general."]},{"Key":"the `ns`","Fragments":["macro,","macro","macro","macro.","options.","macro.","declaration.","macro","macro,","expression","to","form.","macro,","macro"]},{"Key":"`ns` macro,","Fragments":["there","like","because","there","so"]},{"Key":"macro, there","Fragments":["are","are"]},{"Key":"are quite","Fragments":["a","a"]},{"Key":"quite a","Fragments":["few","few","bit","bit","few","nice","bit.","bit.","bit.","bit","lot.","bit"]},{"Key":"few options","Fragments":["in","in"]},{"Key":"options in","Fragments":["the","the"]},{"Key":"the ns","Fragments":["macro,","macro","macro","form).","special","macro","macro,","macro","declaration","directive","form","form,","declaration."]},{"Key":"ns macro,","Fragments":["but","but"]},{"Key":"macro, but","Fragments":["they","they"]},{"Key":"but they","Fragments":["are","are","might","are"]},{"Key":"they are","Fragments":["really","not","really","both","'private'","not","just","separate","passed,","predicates","easier","the","given","very","only","not"]},{"Key":"are really","Fragments":["helpful","helpful.","helpful","just","only"]},{"Key":"really helpful","Fragments":["to","to"]},{"Key":"helpful to","Fragments":["learn!","learn!"]},{"Key":" Lastly,","Fragments":["have"]},{"Key":"Lastly, have","Fragments":["you"]},{"Key":"have you","Fragments":["considered","tried","considered","considered","used","considered","considered","come","enclosed","looked","checked"]},{"Key":"defining a","Fragments":["var","var","var","function","top","function"]},{"Key":"a var","Fragments":["for","(your","for","for"]},{"Key":"var for","Fragments":["the","the","the","T"]},{"Key":"the T","Fragments":["and","and","and","with"]},{"Key":"T and","Fragments":["U?","U?","U","U?","U?","U","U."]},{"Key":"Oh of","Fragments":["course,"]},{"Key":"of course,","Fragments":["thank","```default?```","any","but","but","I","but"]},{"Key":"course, thank","Fragments":["you"]},{"Key":"thank you","Fragments":[":)","for","not","for","for","@liza","very"]},{"Key":"Awesome! Thanks","Fragments":["for"]},{"Key":"the `:else`","Fragments":["tip.","threw","keyword"]},{"Key":" Great!!","Fragments":["A"]},{"Key":"Great!! A","Fragments":["few"]},{"Key":"A few","Fragments":["points:","minor","comments","points,","style","idiomatic","nits,","nits:","more","things","thoughts","curiosities:"]},{"Key":"few points:","Fragments":["\u003cbr\u003e"]},{"Key":"about name","Fragments":["also"]},{"Key":"name also","Fragments":["\u003ccode\u003eempty?\u003c/code\u003e"]},{"Key":"also \u003ccode\u003eempty?\u003c/code\u003e","Fragments":["like"]},{"Key":"\u003ccode\u003eempty?\u003c/code\u003e like","Fragments":["a"]},{"Key":"like a","Fragments":["helper","pretty","string","lot","good","hash","good","rogue","rogue","raw","pipeline,","maybe","[DFA](http://en.wikipedia.org/wiki/Deterministic_finite_automaton)","distinct","square","bug","pipeline","reasonable","good","pair","good","textbook","great","very","broken","hack.","good"]},{"Key":"a helper","Fragments":["function?\u003cbr\u003e","private","function","function.","function?","function","function","function,","function"]},{"Key":" Instead","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"of \u003ccode\u003eletfn\u003c/code\u003e","Fragments":["functions"]},{"Key":"\u003ccode\u003eletfn\u003c/code\u003e functions","Fragments":[","]},{"Key":"functions ,","Fragments":["Is"]},{"Key":", Is","Fragments":["not"]},{"Key":"Is not","Fragments":["more","necessary"]},{"Key":"not more","Fragments":["readable","trouble","readable","complicated"]},{"Key":"more readable","Fragments":["a","to","on","if","and","in","if","that","if","if","than","by","code.","by","and","than","this","than","format","in","if","in","to","this","to","list","code","after","and","if","and","you","like","if","and","than"]},{"Key":"readable a","Fragments":["private"]},{"Key":"private helpers","Fragments":["functions"]},{"Key":"helpers functions","Fragments":["?\u003cbr\u003e"]},{"Key":" And","Fragments":["name","the","possibly","yes,","one","you","currently,","I","`re-seq`","the","once","I","one","you","is","yes,","I","since","I","yes,","love","macros","you're","should","do","throwing","lastly,","I","for","for","the","now"]},{"Key":"And name","Fragments":["of"]},{"Key":"name of","Fragments":["the","the","the","your"]},{"Key":"the parameter","Fragments":["\u003ccode\u003es\u003c/code\u003e","in","on","to","name.","to","to","validation"]},{"Key":"parameter \u003ccode\u003es\u003c/code\u003e","Fragments":["doesn´t"]},{"Key":"\u003ccode\u003es\u003c/code\u003e doesn´t","Fragments":["say"]},{"Key":"doesn´t say","Fragments":["much.."]},{"Key":"about extracting","Fragments":["some","them","the","test","`count-nucleotides`","the","question?"]},{"Key":"extracting some","Fragments":["private","helper","helper"]},{"Key":"some private","Fragments":["functions","functions"]},{"Key":"functions and","Fragments":["giving","`def","values","responses.","namespaces","`def","regex's?","make","can","the","then","see","sequences","not","conditions","I","what"]},{"Key":"and giving","Fragments":["them","them"]},{"Key":"giving them","Fragments":["useful","meaningful","names."]},{"Key":"them useful","Fragments":["names?"]},{"Key":"Also, while","Fragments":["a"]},{"Key":"while a","Fragments":["regex"]},{"Key":"a regex","Fragments":["works,","to","here","for","as","too,","is","for","just","match?","to","there.","for"]},{"Key":"regex works,","Fragments":["I"]},{"Key":"works, I","Fragments":["think","would"]},{"Key":"think there","Fragments":["are","are","is","should","is","are","has","is"]},{"Key":"are better,","Fragments":["more"]},{"Key":"better, more","Fragments":["readable,","naturally"]},{"Key":"more readable,","Fragments":["ways","don’t","I","but","whether","it's","and"]},{"Key":"readable, ways","Fragments":["to"]},{"Key":"to achieve","Fragments":["the","this,","both","the"]},{"Key":"achieve the","Fragments":["same","same","name"]},{"Key":" Yay,","Fragments":["much"]},{"Key":"Yay, much","Fragments":["more"]},{"Key":"readable, don’t","Fragments":["you"]},{"Key":"don’t you","Fragments":["think?","think?"]},{"Key":"However, there’s","Fragments":["more:"]},{"Key":"there’s more:","Fragments":["what"]},{"Key":"more: what","Fragments":["about"]},{"Key":"what about","Fragments":["giving","when","unusually","using","the"]},{"Key":"giving those","Fragments":["conditions"]},{"Key":"conditions some","Fragments":["names"]},{"Key":"some names","Fragments":["to"]},{"Key":"names to","Fragments":["make","the","make","`T`","maintain","get","the","things","the","the","avoid","the","make","make","make","avoid"]},{"Key":"make it","Fragments":["clear","work","more","clearer","more","more","tail-recursive.","non-public","more","even","more","not","public.","easier","a","less","explicit","a","a","close","more","look","a","prettier","easier","harder","easier","clearer","an","more","more","work.","work.","simple","clear","more","in","a","more","atomic,","atomic,","private","more","more","a","any","any","return","explicit:","more","more","even","even","much","more","into","a","more","a","more","better.","more","work","work","clear","slightly","better.","readable.","clear","nicer"]},{"Key":"it clear","Fragments":["_what_","what","it","where","to"]},{"Key":"clear _what_","Fragments":["do"]},{"Key":"_what_ do","Fragments":["they"]},{"Key":"do they","Fragments":["do,","represent?"]},{"Key":"they do,","Fragments":["not"]},{"Key":"do, not","Fragments":["how?"]},{"Key":"aware of","Fragments":["the","it.","any","the","defn-","`reduce-kv`,","`frequencies`","it","this","clojure.core/frequencies,","condp!","for","that","`letfn`;"]},{"Key":"the .toUpperCase","Fragments":["java"]},{"Key":".toUpperCase java","Fragments":["method,"]},{"Key":"java method,","Fragments":["I"]},{"Key":"method, I","Fragments":["used","chose"]},{"Key":"I used","Fragments":["clojure.string/upper-case.","`last`","it?","it","`clojure.string.blank?`","a","this","it","`sort`,","the","this","```(=","(:require","to","`let","sort-by","`re-seq`","a","let","`true?`","random","`zipmap`","it","a","more","`apply","`or`","a"]},{"Key":"used clojure.string/upper-case.","Fragments":["I"]},{"Key":"clojure.string/upper-case. I","Fragments":["don't"]},{"Key":"know if","Fragments":["there","mine","I've","I","grammar","there's","it's","you","using","there","you'd","that","this","it's","there's","there"]},{"Key":"is really","Fragments":["a","clean.","great","clean","bikeshedding.","nicely","a","the","smelly.","about","when","good","simple.","clear,","more","the","nice","concise"]},{"Key":"really a","Fragments":["preferred","matter","way","nit,","word?","*type*","fan"]},{"Key":"a preferred","Fragments":["choice,"]},{"Key":"preferred choice,","Fragments":["but"]},{"Key":"choice, but","Fragments":["I","I'm"]},{"Key":" String","Fragments":["replace","replace","can","in"]},{"Key":"String replace","Fragments":["seems","seems"]},{"Key":"replace seems","Fragments":["like","like"]},{"Key":"most straight","Fragments":["forward"]},{"Key":"straight forward","Fragments":["way.","and"]},{"Key":"say it","Fragments":["is"]},{"Key":"is common","Fragments":["to"]},{"Key":"common to","Fragments":["either","import","put","use","have","give","convert","start"]},{"Key":"to either","Fragments":["require","pick","well","explicitly","write"]},{"Key":"either require","Fragments":["it"]},{"Key":"require it","Fragments":["as"]},{"Key":"var (your","Fragments":["first"]},{"Key":"(your first","Fragments":["example),"]},{"Key":"first example),","Fragments":["or"]},{"Key":"example), or","Fragments":["sometimes"]},{"Key":"or sometimes","Fragments":["to"]},{"Key":"sometimes to","Fragments":["just"]},{"Key":"to just","Fragments":["refer","say","describe","one","do","change","`defn`","map","the","use","`(ns","call","make","inline","inline","return","directly","constructing","use","filter","stick","flip"]},{"Key":"just refer","Fragments":["exactly","to"]},{"Key":"refer exactly","Fragments":["what"]},{"Key":" (ns","Fragments":["bob","bob","bob","bob","bob","bob","bob","foo","bob","beer","bob","phrase","bob","bob","bob","bob","bob","anagram","anagram","dna","bob","bob","etl","phrase","phrase","bob","beer","bob","bob","bob","bob","dna","bob","bob","gigasecond","anagram","bob","bob"]},{"Key":"(ns bob","Fragments":["(:require","(:require","\"A","(require"]},{"Key":"bob (:require","Fragments":["[clojure.string","...))`","[clojure.string","[clojure.string"]},{"Key":"(:require [clojure.string","Fragments":[":refer",":as",":as",":as",":refer",":refer","refer",":refer",":refer",":refer",":as",":as",":refer",":refer",":as",":refer",":refer",":as",":refer",":refer",":refer",":as",":as",":refer",":refer",":as","as",":refer",":as","as",":refer",":refer",":refer"]},{"Key":"[clojure.string :refer","Fragments":["[upper-case]))","[upper-case]]))","[blank?","(blank?",":all]`).","(capitalize)]))","[lower-case]))","[upper-case","(upper-case","(upper-case","[join","[split]]```","(lower-case)])","(replace)])","[lower-case]]))","[blank?","[lower-case]]))`","[upper-case","[lower-case]]))",":all]))","(upper-case)]])```","[upper-case",":all]`","(upper-case",":all]`","(blank?","(join)]`","(lower-case",":all])","[upper-case])`.","[blank?]])","[blank?]])","[blank?]]))"]},{"Key":" However","Fragments":["I","you","your","since"]},{"Key":"However I","Fragments":["do","understand","disagree"]},{"Key":"do think","Fragments":["a","it","using","that"]},{"Key":"think a","Fragments":["lot","regex-based","word","small","comment"]},{"Key":"lot of","Fragments":["it","room","value","string","duplication","effort","unnecessary","people","syntactic","typing.","whitespace,","XUnit","stuff","closing","nice","benefit","unnecessary","the","overlap","threading","structure","functions","duplication","other","sense.","trouble","calls","string","people","trouble","tutorial","value."]},{"Key":"is preference,","Fragments":["but"]},{"Key":"first example","Fragments":["might","I","in"]},{"Key":"example might","Fragments":["be","be:","be"]},{"Key":"most common","Fragments":["approach.","and"]},{"Key":" Pretty","Fragments":["terse,","nice,","clear","hard","happy","nice!!","minor,","much","much","good"]},{"Key":"Pretty terse,","Fragments":["but"]},{"Key":"terse, but","Fragments":["could"]},{"Key":"but could","Fragments":["use","you","be","make"]},{"Key":"use some","Fragments":["readability","defs"]},{"Key":"some readability","Fragments":["love!","but","may"]},{"Key":"about dropping","Fragments":["regexes?"]},{"Key":"dropping regexes?","Fragments":["I"]},{"Key":"regexes? I","Fragments":["bet"]},{"Key":"I bet","Fragments":["you","you","you"]},{"Key":"bet you","Fragments":["can","can","can"]},{"Key":"can make","Fragments":["it","that","private","it","the","your","use","word-count","it","use","the","your","program","use","this","a","program","your","sense","people","a","your","short","them","by","here.","the","this","the","things","your"]},{"Key":"it work","Fragments":["without","the","earlier."]},{"Key":"work without","Fragments":["them!","any"]},{"Key":"without them!","Fragments":["`clojure.string`"]},{"Key":"them! `clojure.string`","Fragments":["is"]},{"Key":"`clojure.string` is","Fragments":["full"]},{"Key":"is full","Fragments":["of"]},{"Key":"full of","Fragments":["goodies,","zero"]},{"Key":"of goodies,","Fragments":["use"]},{"Key":"goodies, use","Fragments":["them"]},{"Key":"use them","Fragments":["wise.","to","consistent.","again,"]},{"Key":"feedback. I'm","Fragments":["still","probably"]},{"Key":"still fairly","Fragments":["new","concise.","new"]},{"Key":"fairly new","Fragments":["to","to","to"]},{"Key":"to Clojure.","Fragments":["Is","The","Are","I"]},{"Key":"Clojure. Is","Fragments":["it","this"]},{"Key":"it common","Fragments":["to"]},{"Key":"to import","Fragments":["everything","the","symbols","functions","the","the"]},{"Key":"import everything","Fragments":["or"]},{"Key":"everything or","Fragments":["just"]},{"Key":"or just","Fragments":["what","a","clever"]},{"Key":" (:require","Fragments":["[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string]))","[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string"]},{"Key":"[clojure.string :as","Fragments":["str]))","str","str]))","str])`","str])`","str]))","str]))","str]))","str])","str]))","str]))`?","str]))","str]`","string]))","str])`","str","string]))\u003c/code\u003e","string]))\u003c/code\u003e","str]))","str]))\u003c/code\u003e","str]))","s]))"]},{"Key":":as str","Fragments":[":only","...])."]},{"Key":"str :only","Fragments":["[:upper-case]]))"]},{"Key":" Did","Fragments":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you"]},{"Key":"ns macro","Fragments":["so","instead","instead","here.","in"]},{"Key":"macro so","Fragments":["you"]},{"Key":"you don't","Fragments":["have","have","need","have","expose","need","have","need","think","have","end","need","have","need","need","need","have","have","need","have","want","intend","pass","expect","immediately","gain","need","really","need","need","want","want","want","wish","want","need","want","know,","need","use","need","even","want","have","actually","have","actually","need","want","want","use","need","have","need","need","actually","actually","have","end","need","need","like","have","have","want","want","want","need","want","seem","understand","have","use"]},{"Key":"don't have","Fragments":["to","a","a","the","to","problems","to","to","to","to","to","to","a","to","to","to","any","access","to","to","to","to","to","a","a","to","to","any","to","to","to","to"]},{"Key":"reference upper-case","Fragments":["by"]},{"Key":"upper-case by","Fragments":["the"]},{"Key":" `:else","Fragments":["(throw"]},{"Key":"`:else (throw","Fragments":["(Exception."]},{"Key":"(throw (Exception.","Fragments":["\"Unexpected"]},{"Key":"(Exception. \"Unexpected","Fragments":["input\"))`"]},{"Key":"\"Unexpected input\"))`","Fragments":["added"]},{"Key":"input\"))` added","Fragments":["in"]},{"Key":"added in","Fragments":["latest"]},{"Key":"in latest","Fragments":["submission"]},{"Key":"about making","Fragments":["the","them","`shout?`","things","the","your","code","the","macros"]},{"Key":"the helper","Fragments":["functions","functions.","forms.","functions","functions","functions","functions","functions","functions","for"]},{"Key":"helper functions","Fragments":["private?","should","as","private","private?","should","extracted","private","for","private,","private","an","allows","in","to","defined","need","can","to","isSilent?"]},{"Key":" Otherwise","Fragments":["looking","it’s","I","I"]},{"Key":"Otherwise looking","Fragments":["really"]},{"Key":"looking really","Fragments":["good"]},{"Key":"really good","Fragments":["to","point","idea.","though.","way","to","references"]},{"Key":" Encoding","Fragments":["the"]},{"Key":"Encoding the","Fragments":["statement"]},{"Key":"statement patterns","Fragments":["as","and"]},{"Key":"patterns as","Fragments":["an"]},{"Key":"an ordered","Fragments":["map","map"]},{"Key":"ordered map","Fragments":["of","with"]},{"Key":"map of","Fragments":["regexes","sorts,","rebindings:","a","character","regexp","regexp","the","translations,","default"]},{"Key":"of regexes","Fragments":["will"]},{"Key":"regexes will","Fragments":["probably"]},{"Key":"will probably","Fragments":["fall","use","do","try","re-visit"]},{"Key":"probably fall","Fragments":["over"]},{"Key":"fall over","Fragments":["once"]},{"Key":"over once","Fragments":["the"]},{"Key":"once the","Fragments":["rules"]},{"Key":"the rules","Fragments":["better","you"]},{"Key":"rules better","Fragments":["clarify"]},{"Key":"better clarify","Fragments":["the"]},{"Key":"clarify the","Fragments":["distinction","keyword","unicode","intent","intent"]},{"Key":"the distinction","Fragments":["between"]},{"Key":"distinction between","Fragments":["questions"]},{"Key":"between questions","Fragments":["and"]},{"Key":"questions and","Fragments":["exclamations."]},{"Key":"had used","Fragments":["`:else`","some"]},{"Key":"used `:else`","Fragments":["to"]},{"Key":"`:else` to","Fragments":["start"]},{"Key":"to start","Fragments":["but","extracting","bindings","the","(and"]},{"Key":"start but","Fragments":["in"]},{"Key":"but in","Fragments":["an","my","this","general,","Clojure","this","lisp","such","my","this","Haskell","the","this","my","particular","natural","all","this","the","my","this","Ruby"]},{"Key":"in an","Fragments":["effort","advantageous","anonymous","empty","anonymous","Object","`as-\u003e`."]},{"Key":"an effort","Fragments":["to"]},{"Key":"effort to","Fragments":["be","try","read"]},{"Key":"more explicit","Fragments":["about","comparatively","about","concerning",":","that","for","-","to","in"]},{"Key":"explicit about","Fragments":["the","the","what"]},{"Key":"the \"base","Fragments":["case\""]},{"Key":"\"base case\"","Fragments":["I"]},{"Key":"case\" I","Fragments":["switched"]},{"Key":"I switched","Fragments":["it","to","the","the","from","to"]},{"Key":"switched it","Fragments":["back."]},{"Key":"it back.","Fragments":["I"]},{"Key":"back. I","Fragments":["can"]},{"Key":"see how","Fragments":["using","well","you","multimethods","to","that","it","you","the","the","I"]},{"Key":"how using","Fragments":["`:else`"]},{"Key":"using `:else`","Fragments":["here"]},{"Key":"`:else` here","Fragments":["actually"]},{"Key":"here actually","Fragments":["is"]},{"Key":"actually is","Fragments":["more"]},{"Key":"is more","Fragments":["descriptive","idiomatic.","idiomatic","descriptive.","or","widely","readable","verbose,","idiomatic","force","expressive","code.","idiomatic.","standard","appropriate","general","clear","complex","idiomatic:","readable/expresses","interesting,","intention","subjective","appropriate).","explicit","a","common","idiomatic","idiomatic:","concise.","idiomatic","appropriate","compact,","idiomatically","idiomatically","idiomatically","idiomatically","idiomatic","often","idiomatic","clojuresque.","idiomatic.","standard","valuable","readable","in","common","conservative","readable","than","repetitive","idiomatic","idiomatic","verbose","readable"]},{"Key":"more descriptive","Fragments":["after","variable","variable","argument","code.","names","name.","names","names","names?","var","name","than","than","names"]},{"Key":"descriptive after","Fragments":["looking"]},{"Key":"after looking","Fragments":["at","at","at","at"]},{"Key":"looking at","Fragments":["it.","it.","your","it","how","others'","my","yours.","the","as","other","using","it","it","the","niftyn8's","yours,","(a?","it","other's"]},{"Key":"at it.","Fragments":["Thanks","Thanks","This"]},{"Key":"it. Thanks","Fragments":["for","for",":)"]},{"Key":"the heads","Fragments":["up,"]},{"Key":"heads up,","Fragments":["resubmitting."]},{"Key":" Only","Fragments":["things","a","difference","`nil`"]},{"Key":"Only things","Fragments":["I","you"]},{"Key":"things I","Fragments":["would","want","don't","don't","don't","see","would","would"]},{"Key":"would mention","Fragments":["is"]},{"Key":"mention is","Fragments":["using"]},{"Key":"is using","Fragments":["question",":require","such","the","raw","the","the"]},{"Key":"using question","Fragments":["marks"]},{"Key":"question marks","Fragments":["in","in","instead","instead:","in"]},{"Key":"marks in","Fragments":["predicate","ruby","identifiers."]},{"Key":"in predicate","Fragments":["function","for"]},{"Key":"predicate function","Fragments":["names"]},{"Key":"function names","Fragments":["is","do.","are","(from","are","that"]},{"Key":"names is","Fragments":["generally","more"]},{"Key":"is generally","Fragments":["encouraged","agreed","agnostic","deprecated","considered","deprecated.","frowned","because","only","only","only","preferred","frowned","ok,","used"]},{"Key":"generally encouraged","Fragments":["and"]},{"Key":"encouraged and","Fragments":["trailing"]},{"Key":"and trailing","Fragments":["parentheses"]},{"Key":"trailing parentheses","Fragments":["are"]},{"Key":"parentheses are","Fragments":["usually"]},{"Key":"usually not","Fragments":["on","worry","necessary"]},{"Key":"not on","Fragments":["their"]},{"Key":"on their","Fragments":["own","site,","own","own","own","own"]},{"Key":"their own","Fragments":["line.","line.","lines","lines","lines).","lines","line.","private","line.","line.","well-named","lines.","functions","functions.","functions?","functions","functions"]},{"Key":"see it","Fragments":["as","being","twice."]},{"Key":"a \"magic","Fragments":["letter\"."]},{"Key":"\"magic letter\".","Fragments":["While"]},{"Key":"letter\". While","Fragments":["in"]},{"Key":"While in","Fragments":["the"]},{"Key":"the limited","Fragments":["context","collection"]},{"Key":"limited context","Fragments":["of"]},{"Key":"context of","Fragments":["this","biology,","surrounding","surrounding","surrounding","the","fiddling","timezones.","a","exercism.io","hearing","threading,","`number`","Java"]},{"Key":"this exercise","Fragments":["you","I","the","the","doesn't","enough","when","doesn't","is","so","is","to","but","is...","so","to","isn't","was",":)","made","I","I","as","to","(looks",":)","so"]},{"Key":"exercise you","Fragments":["won't"]},{"Key":"you won't","Fragments":["get","need","need"]},{"Key":"won't get","Fragments":["much","any"]},{"Key":"much out","Fragments":["of"]},{"Key":"of it,","Fragments":["I","check"]},{"Key":"help maintainability","Fragments":["inside"]},{"Key":"maintainability inside","Fragments":["a"]},{"Key":"inside a","Fragments":["larger","function.","`let`","vector,","function","map.","function","function"]},{"Key":"a larger","Fragments":["codebase.","refactoring","set"]},{"Key":"larger codebase.","Fragments":["I"]},{"Key":"codebase. I","Fragments":["also"]},{"Key":"also happen","Fragments":["to"]},{"Key":"happen to","Fragments":["think"]},{"Key":"to think","Fragments":["it","in","about","about","about","you","I","about","about:","about","that","the","in","in","of","about","of"]},{"Key":"it reads","Fragments":["really","better.","better.","rather","pretty","better,","quite"]},{"Key":"reads really","Fragments":["nicely:"]},{"Key":" (replace","Fragments":["necleotides"]},{"Key":"(replace necleotides","Fragments":["thymidine"]},{"Key":"necleotides thymidine","Fragments":["uracil)"]},{"Key":"said, I","Fragments":["have","think","appreciate","would","think","think"]},{"Key":"seen quite","Fragments":["a"]},{"Key":"few arguments","Fragments":["against"]},{"Key":"arguments against","Fragments":["it"]},{"Key":"against it","Fragments":["as","because"]},{"Key":"well, the","Fragments":["primary"]},{"Key":"the primary","Fragments":["being","argument","library"]},{"Key":"primary being","Fragments":["that"]},{"Key":"being that","Fragments":["\"T\""]},{"Key":"that \"T\"","Fragments":["and"]},{"Key":"and \"U\"","Fragments":["are","characters?","then","characters","are","into"]},{"Key":"\"U\" are","Fragments":["so","meaninful"]},{"Key":"are so","Fragments":["well","common","well","well"]},{"Key":"so well","Fragments":["recognized","known","known"]},{"Key":"well recognized","Fragments":["in"]},{"Key":"recognized in","Fragments":["the"]},{"Key":"domain that","Fragments":["vars","there","strings","they"]},{"Key":"that vars","Fragments":["are"]},{"Key":"vars are","Fragments":["not"]},{"Key":"are not","Fragments":["needed.","directly","explicitly","methods,","statements,","strings,","obligatory","anagrams","present","necessarily","part","considered","the","in","quite","at","yells!","STM-safe).","part","needed","that"]},{"Key":"will mark","Fragments":["this"]},{"Key":"mark this","Fragments":["as"]},{"Key":"as done,","Fragments":["but"]},{"Key":"done, but","Fragments":["you"]},{"Key":"but you","Fragments":["can","could","have","could","should","actually","then","could","could","could","might","don't","calculate","can","can","could","define","may","actually"]},{"Key":"can resubmit","Fragments":["if"]},{"Key":"resubmit if","Fragments":["I"]},{"Key":"have significantly","Fragments":["swayed"]},{"Key":"significantly swayed","Fragments":["you."]},{"Key":"swayed you.","Fragments":[":)"]},{"Key":"The `.endsWith`","Fragments":["bit"]},{"Key":"`.endsWith` bit","Fragments":["sticks"]},{"Key":"bit sticks","Fragments":["out"]},{"Key":"sticks out","Fragments":["to"]},{"Key":"to me.","Fragments":["What","One","`zero?`","One","Alternatively,","Alternative","But","By","In","A","Normally,","If","What","Could","You","I","The","The",":)","While","It","A","But","I","Only","Maybe","I","`rna-to-dna`","Whenever"]},{"Key":"me. What","Fragments":["do","Editor"]},{"Key":"about wrapping","Fragments":["it"]},{"Key":"wrapping it","Fragments":["in","in"]},{"Key":"it in","Fragments":["a","the","his","wider","a","Clojure","a","other","this","the","Clojure,","a","a","someone","one","previous","word-count","your","the","2","your","this","my","the","this","a","one","into","one","by","symbols/keywords.","a","an","a","a","my","my","the","a","line","your"]},{"Key":"private `question?`","Fragments":["function"]},{"Key":"`question?` function","Fragments":["instead?","and"]},{"Key":"didn't consider","Fragments":["it,","the"]},{"Key":"consider it,","Fragments":["no."]},{"Key":"it, no.","Fragments":["My"]},{"Key":"no. My","Fragments":["initial"]},{"Key":"My initial","Fragments":["reaction"]},{"Key":"initial reaction","Fragments":["is"]},{"Key":"that for","Fragments":["such","me","kicks,","methods","a"]},{"Key":"for such","Fragments":["a","a","a","situations.","simple"]},{"Key":"such a","Fragments":["simple","mapping,","narrow","thing","simple","small","sane","small","simple","simple","long","great","weird"]},{"Key":"a simple","Fragments":["exercise,","`string/replace`","map","keyword.","context","`(sort","problem,","problem","`merge`","alias.","`merge`","core","exercise","operation","`(vec","conditional","`(map","`map`","`if`","`if`","one","`str`","generation","`cond`"]},{"Key":"simple exercise,","Fragments":["it's"]},{"Key":"exercise, it's","Fragments":["overkill"]},{"Key":"it's overkill","Fragments":["and","for"]},{"Key":"overkill and","Fragments":["an","additional"]},{"Key":"and an","Fragments":["unnecessary","if","anonymous"]},{"Key":"an unnecessary","Fragments":["layer","`seq`"]},{"Key":"unnecessary layer","Fragments":["of"]},{"Key":"layer of","Fragments":["indirection.","indirection.","abstraction"]},{"Key":"of indirection.","Fragments":["But"]},{"Key":"indirection. But","Fragments":["maybe"]},{"Key":"But maybe","Fragments":["you","that's","there's"]},{"Key":"maybe you","Fragments":["have","can","could"]},{"Key":"you have","Fragments":["more","to","is","to","`second-part`","observed,","any","already","the","the","used","used","used","used","already","to","already","used","used","used","used","used","used","a","to","seen","any","noticed","used","already","any","now.","already","closed","any","an","to","a","to","moved","doc","a","to","the","on","uncovered","to","here,","to","solved","required","the","used.","an","and","the","invalid","broken","a","observed,","to","to","made","a","to"]},{"Key":"have more","Fragments":["thoughts","meaningful","meaningful","descriptive","time,"]},{"Key":"more thoughts","Fragments":["that'd"]},{"Key":"thoughts that'd","Fragments":["convince"]},{"Key":"that'd convince","Fragments":["me?"]},{"Key":"I've updated","Fragments":["my","the","the","the","the","my","to","the","[my","my","my"]},{"Key":"updated my","Fragments":["code,","solution","code","[latest","solution","code","submission."]},{"Key":"my code,","Fragments":["thanks","but","you'll"]},{"Key":"code, thanks","Fragments":["for"]},{"Key":"thanks for","Fragments":["the","the","the","the","all","the","the","the","the","your","the","correcting","taking","the","the","the","the","the","the","the","the","showing","tip,","the","the","the","pointing","the","your","the","all","the","the","the","your","your","the","the","the"]},{"Key":"the advice,","Fragments":["it's"]},{"Key":"advice, it's","Fragments":["better"]},{"Key":"better \u0026","Fragments":["more"]},{"Key":"\u0026 more","Fragments":["declarative"]},{"Key":"more declarative","Fragments":["indeed",":)"]},{"Key":"declarative indeed","Fragments":[":)"]},{"Key":" About","Fragments":["the","the","the","the"]},{"Key":"About the","Fragments":["only","only","only","`verse`.","parentheses","only","problem","last"]},{"Key":"might tweak","Fragments":["is"]},{"Key":"tweak is","Fragments":["using"]},{"Key":"using :require","Fragments":["(with",":refer"]},{"Key":":require (with","Fragments":["either"]},{"Key":"(with either","Fragments":[":refer"]},{"Key":"either :refer","Fragments":["or"]},{"Key":":refer or","Fragments":[":as)"]},{"Key":"or :as)","Fragments":["in"]},{"Key":":as) in","Fragments":["the"]},{"Key":"macro instead","Fragments":["of","of","of"]},{"Key":" More","Fragments":["on","than","than","readable"]},{"Key":"More on","Fragments":["NS","formatting"]},{"Key":"on NS","Fragments":["and"]},{"Key":"NS and","Fragments":["some"]},{"Key":"and some","Fragments":["examples","rearranging","constants","would","times","requires."]},{"Key":"some examples","Fragments":["here:","of"]},{"Key":"examples here:","Fragments":["http://clojuredocs.org/clojure_core/clojure.core/ns"]},{"Key":" My","Fragments":["only","take","Clojure","wrong.","take","only","problem","only,","use","solution","first","solution","very","above","first","approach","understanding","earlier","understanding","biggest","angry?","2","general","intention","pleasure!","first","eyes","approach","PCRE-fu","first"]},{"Key":"My only","Fragments":["comment","suggestion","nitpick","nitpick","intent","excuse","suggestion","nit,","complaint","nitpick","suggestion"]},{"Key":"only comment","Fragments":["is","I"]},{"Key":"comment is","Fragments":["that","efficiency."]},{"Key":"in shout?","Fragments":["the"]},{"Key":"shout? the","Fragments":["constant"]},{"Key":"the constant","Fragments":["is","is","first","strings"]},{"Key":"constant is","Fragments":["the","in"]},{"Key":"the second","Fragments":["argument","regexp","question:","\"\\n\"","check","iteration.","iteration.","one","solution","iteration.","character","one","part.","iteration","operation).","iteration.","revision."]},{"Key":"second argument","Fragments":["and","returned"]},{"Key":"argument and","Fragments":["in","reused","that","have"]},{"Key":"and in","Fragments":["question?","that","my","the","`response-for`.","list","fact,","turn,","particular","context"]},{"Key":"in question?","Fragments":["the"]},{"Key":"question? the","Fragments":["constant"]},{"Key":"is in","Fragments":["the","no","clojure.core).","clojure.core).","clojure.core).","how","lisps.","`extract-words`","the","the","the","the","your","upper-case,","terms","uppercase","stmt-1"]},{"Key":"first argument.","Fragments":["My"]},{"Key":"argument. My","Fragments":["experience"]},{"Key":"My experience","Fragments":["leads"]},{"Key":"experience leads","Fragments":["me"]},{"Key":"leads me","Fragments":["to"]},{"Key":"to believe","Fragments":["that"]},{"Key":"believe that","Fragments":["the","if","that"]},{"Key":"the constants","Fragments":["should","thymine","`\"T\"`"]},{"Key":"constants should","Fragments":["go"]},{"Key":"should go","Fragments":["first,","all"]},{"Key":"go first,","Fragments":["because"]},{"Key":"first, because","Fragments":["it"]},{"Key":"because it","Fragments":["makes","works","would","returns","makes","demonstrates","seemed","may","violates","normally","just","concise.","seemed","avoids","suggests","reflects","sounds","already","expects","gets"]},{"Key":"makes things","Fragments":["easier","a","easier","quite","a","a","a","more","more"]},{"Key":"things easier","Fragments":["to","to","for","to"]},{"Key":"to compose.","Fragments":["This"]},{"Key":"compose. This","Fragments":["is"]},{"Key":"is even","Fragments":["more","simpler.","used"]},{"Key":"even more","Fragments":["true","shorter","specific","effective","glaring","concise","so.","expressive","functions","clear,","concise.","so"]},{"Key":"more true","Fragments":["in"]},{"Key":"true in","Fragments":["languages","this","both","boolean"]},{"Key":"in languages","Fragments":["where","with"]},{"Key":"languages where","Fragments":["currying","you"]},{"Key":"where currying","Fragments":["happens","is"]},{"Key":"currying happens","Fragments":["automatically,"]},{"Key":"happens automatically,","Fragments":["like"]},{"Key":"automatically, like","Fragments":["Haskell."]},{"Key":"That's a","Fragments":["good","good","great","good","PITA","matter","lot","whole","part","sign","good","neat","good","place","question","bit","nice","bit","nice"]},{"Key":"good question,","Fragments":["if"]},{"Key":"question, if","Fragments":["I"]},{"Key":"had any","Fragments":["deep"]},{"Key":"any deep","Fragments":["Clojure"]},{"Key":"deep Clojure","Fragments":["experience"]},{"Key":"Clojure experience","Fragments":["I"]},{"Key":"experience I","Fragments":["wouldn't"]},{"Key":"I wouldn't","Fragments":["be","be","go","call","be","write","know","use","be","be","say","map","use"]},{"Key":"be here.","Fragments":["I"]},{"Key":"here. I","Fragments":["would","didn't","wonder","don't"]},{"Key":"probably look","Fragments":["at","into"]},{"Key":"at clojure.typed.","Fragments":["It"]},{"Key":"clojure.typed. It","Fragments":["might"]},{"Key":"It might","Fragments":["be","seem","be","also","make","be","simplify","also","make","be","be","be","be","be","make","be","be","be","be","read","be","be","be","be","be","be","allow"]},{"Key":"that a","Fragments":["good","lot","string","particular","string","maintainer","test","function","`case`","list","new","bit","`hash-map`","function","question","big","submission","function","question","lot."]},{"Key":"good solution","Fragments":["to","that","that"]},{"Key":"solution to","Fragments":["this","get","this","help","this","recognizing","the","the","reflect","the","get"]},{"Key":"to this","Fragments":["problem","question:","function/map,","submission","kind","code","point.","problem,","code"]},{"Key":"this problem","Fragments":["simply","to",";)","with","by","several","are","in","begs","and"]},{"Key":"problem simply","Fragments":["isn't"]},{"Key":"simply isn't","Fragments":["possible"]},{"Key":"isn't possible","Fragments":["to"]},{"Key":"possible to","Fragments":["do","solve","bind","be","make","write","maintain","do","set","remove","write","use","simplify","simplify","rely","have","have"]},{"Key":"do efficiently","Fragments":["in"]},{"Key":"efficiently in","Fragments":["Clojure."]},{"Key":"in Clojure.","Fragments":["Macros","Makes","Thanks","Do","So","Please,",":)","In","I","Argh.","You","They"]},{"Key":"Clojure. Macros","Fragments":["might"]},{"Key":"Macros might","Fragments":["be"]},{"Key":"a workaround,","Fragments":["where"]},{"Key":"workaround, where","Fragments":["the"]},{"Key":"the macro","Fragments":["could","over","it","would","is","which","then","expansion","makes","generates."]},{"Key":"macro could","Fragments":["verify"]},{"Key":"could verify","Fragments":["assumptions"]},{"Key":"verify assumptions","Fragments":["and"]},{"Key":"assumptions and","Fragments":["generate"]},{"Key":"and generate","Fragments":["code","names"]},{"Key":"generate code","Fragments":["like"]},{"Key":"code like","Fragments":["this.","`question?`","`"]},{"Key":"like this.","Fragments":["The","And"]},{"Key":"this. The","Fragments":["good"]},{"Key":"The good","Fragments":["news"]},{"Key":"good news","Fragments":["is"]},{"Key":"news is","Fragments":["that"]},{"Key":"this code","Fragments":["is","formatting","later",":)","is","warrants","explain","much","will","doesn't","and","I","is","a","so","can","a","out","on","up.","into","to","is","easier"]},{"Key":"is so","Fragments":["short,","context","useful!","verbose","simple","un-Clojure-like.","baked","simple,","short","good","simple"]},{"Key":"so short,","Fragments":["that"]},{"Key":"short, that","Fragments":["it"]},{"Key":"is easy","Fragments":["to"]},{"Key":"easy to","Fragments":["verify","follow","read","read","follow","avoid","create","understand","read.","do","follow.","follow,","make","understand","understand.","understand.","understand.","understand","read.","follow.","add","do","read","follow.","handle.","read.","understand","tell","get"]},{"Key":"to verify","Fragments":["by"]},{"Key":"verify by","Fragments":["looking"]},{"Key":"by looking","Fragments":["at","at"]},{"Key":"a biology","Fragments":["background,","background,"]},{"Key":"biology background,","Fragments":["you","even"]},{"Key":"background, you","Fragments":["wouldn't"]},{"Key":"you wouldn't","Fragments":["be","have","have","need","have","need","explicitly"]},{"Key":"understand or","Fragments":["debug"]},{"Key":"or debug","Fragments":["the"]},{"Key":"debug the","Fragments":["literally"]},{"Key":"the literally","Fragments":["*one*"]},{"Key":"literally *one*","Fragments":["function"]},{"Key":"*one* function","Fragments":["call"]},{"Key":"function call","Fragments":["in","it","than","(although","I","on","is","will","per"]},{"Key":"call in","Fragments":["the","favor","`question?`"]},{"Key":"the body","Fragments":["of","of","of","of","at","of","of","of"]},{"Key":"this function.","Fragments":["Also,"]},{"Key":"function. Also,","Fragments":["Uracil","someone","`\\s`"]},{"Key":"Also, Uracil","Fragments":["is"]},{"Key":"Uracil is","Fragments":["going"]},{"Key":"as much","Fragments":["of","like","code","intent","as","like","as","as","a"]},{"Key":"much of","Fragments":["a","an","the","a","your","an","the","a"]},{"Key":"a mystery","Fragments":["as","to"]},{"Key":"mystery as","Fragments":["\\U"]},{"Key":"as \\U","Fragments":["to"]},{"Key":"\\U to","Fragments":["someone"]},{"Key":"to someone","Fragments":["that","not"]},{"Key":"someone that","Fragments":["doesn't"]},{"Key":"have any","Fragments":["domain","additional","ideas","cache","ideas","references","advice","experience","suggestions?","idea."]},{"Key":"any domain","Fragments":["knowledge."]},{"Key":"domain knowledge.","Fragments":["Also"]},{"Key":"knowledge. Also","Fragments":["note"]},{"Key":"Also note","Fragments":["that"]},{"Key":"note that","Fragments":["Googling","in","`(apply","other"]},{"Key":"that Googling","Fragments":["for"]},{"Key":"Googling for","Fragments":["RNA,"]},{"Key":"for RNA,","Fragments":["ACGU,"]},{"Key":"RNA, ACGU,","Fragments":["DNA,"]},{"Key":"ACGU, DNA,","Fragments":["or"]},{"Key":"DNA, or","Fragments":["ACGT"]},{"Key":"or ACGT","Fragments":["would"]},{"Key":"ACGT would","Fragments":["all"]},{"Key":"would all","Fragments":["point"]},{"Key":"all point","Fragments":["you"]},{"Key":"point you","Fragments":["at","to:"]},{"Key":"you at","Fragments":["the","least","the"]},{"Key":"names of","Fragments":["these","the","the","the","your","the"]},{"Key":"of these","Fragments":["bases.","things","match?","string","design","`def`s,","if","solutions","are"]},{"Key":"Ah, indeed,","Fragments":["much"]},{"Key":"indeed, much","Fragments":["better"]},{"Key":"better indeed!","Fragments":["Thanks"]},{"Key":"indeed! Thanks","Fragments":[":)"]},{"Key":" Both","Fragments":["`-\u003e\u003e`","are"]},{"Key":"Both `-\u003e\u003e`","Fragments":["and"]},{"Key":"`-\u003e\u003e` and","Fragments":["the"]},{"Key":"the related","Fragments":["`-\u003e`"]},{"Key":"related `-\u003e`","Fragments":["macro"]},{"Key":"`-\u003e` macro","Fragments":["allow","is"]},{"Key":"macro allow","Fragments":["you"]},{"Key":"allow you","Fragments":["write","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"you write","Fragments":["deeply","the"]},{"Key":"write deeply","Fragments":["nested"]},{"Key":"deeply nested","Fragments":["code","function","function"]},{"Key":"nested code","Fragments":["as","is"]},{"Key":"code as","Fragments":["a","is.","well","your","a","you,"]},{"Key":"a pipeline","Fragments":["of","like:"]},{"Key":"pipeline of","Fragments":["steps,"]},{"Key":"of steps,","Fragments":["which"]},{"Key":"steps, which","Fragments":["often"]},{"Key":"which often","Fragments":["makes"]},{"Key":"often makes","Fragments":["things","it"]},{"Key":"things a","Fragments":["lot","little","lot","bit","little","little","bit","bit","bit","bit","little.","lot","bit"]},{"Key":" So,","Fragments":["for","response-for-basic","the","I","_\u003e50-pc-uc_"]},{"Key":"So, for","Fragments":["instance,","example,"]},{"Key":"for instance,","Fragments":["if"]},{"Key":"instance, if","Fragments":["we"]},{"Key":"if we","Fragments":["have","need","wanted","had","were","moved"]},{"Key":"we have","Fragments":["the","had"]},{"Key":"have the","Fragments":["following...","`cond`","time","closing","trailing","original","knowledge","participant","very","problem","added","same","lowercased,","same","`and`","doc","public","functions","condition","same","same","boolean","same","same","atom","one","other","same","return","tests"]},{"Key":" (str/upper-case","Fragments":["(str/reverse"]},{"Key":"(str/upper-case (str/reverse","Fragments":["(str/trim"]},{"Key":"(str/reverse (str/trim","Fragments":["\""]},{"Key":"(str/trim \"","Fragments":["foo"]},{"Key":"\" foo","Fragments":["bar\")))","bar\""]},{"Key":" ...which","Fragments":["you"]},{"Key":"...which you","Fragments":["basically"]},{"Key":"you basically","Fragments":["have","want"]},{"Key":"basically have","Fragments":["to","the","no"]},{"Key":"read backwards","Fragments":["to"]},{"Key":"backwards to","Fragments":["understand...the"]},{"Key":"to understand...the","Fragments":["threading"]},{"Key":"understand...the threading","Fragments":["macros"]},{"Key":"threading macros","Fragments":["allow","it's",":)"]},{"Key":"macros allow","Fragments":["it"]},{"Key":"allow it","Fragments":["we"]},{"Key":"it we","Fragments":["rewritten"]},{"Key":"we rewritten","Fragments":["like"]},{"Key":"rewritten like","Fragments":["this:"]},{"Key":" (-\u003e","Fragments":["\"","args","the_phrase","string","(replace","digits","words","(map"]},{"Key":"(-\u003e \"","Fragments":["foo"]},{"Key":"foo bar\"","Fragments":["str/trim"]},{"Key":"bar\" str/trim","Fragments":["str/reverse"]},{"Key":"str/trim str/reverse","Fragments":["str/upper-case)"]},{"Key":" Which","Fragments":["is","explains","bit","made"]},{"Key":"Which is","Fragments":["a","why"]},{"Key":"readable. *Do","Fragments":["this"]},{"Key":"*Do this","Fragments":["sequence"]},{"Key":"this sequence","Fragments":["of"]},{"Key":"sequence of","Fragments":["these","characters","chars","characters","words.","DNA","RNA","DNA","RNA","characters.","characters.","characters.","words.","characters,","characters","characters","characters).","filters.","characters","many","chars","characters","characters.","chars.","words,","dows,","RNA"]},{"Key":"these things","Fragments":["things","are"]},{"Key":"things things","Fragments":["to"]},{"Key":"things to","Fragments":["that","think","consider:","consider:","make"]},{"Key":"The difference","Fragments":["between","in"]},{"Key":"difference between","Fragments":["the","pipelining","this","string","version","`def`","the","these","your","`$`","`(reduce","`\"?\"`"]},{"Key":"between the","Fragments":["two","two.","declarations","names","`valid-nucleotides`","strings.","set","RNA","function","planets","definition","predicate/body","defn","various","spec","`validate`","previous"]},{"Key":"the two","Fragments":["macros","functions","namespaces.","calls","nitpicks","characters","constants","methods.","steps.","conditions.","functions","mapping","other","step"]},{"Key":"two macros","Fragments":["is"]},{"Key":"macros is","Fragments":["where","that"]},{"Key":"is where","Fragments":["the"]},{"Key":"value you're","Fragments":["threading"]},{"Key":"you're threading","Fragments":["is"]},{"Key":"threading is","Fragments":["inserted","more"]},{"Key":"is inserted","Fragments":["in"]},{"Key":"inserted in","Fragments":["the"]},{"Key":"the argument","Fragments":["list","don´t","for","name","name","shouldn't","`g`","list.","`[[value","array.","vector","vector","lists","for","vector.","name","to","in","passed","passed","through","instead","passed","[s]","list;","given","to"]},{"Key":"argument list","Fragments":["of"]},{"Key":"list of","Fragments":["the","characters","chars","booleans,","45","anonymous","pairs","words","vectors","numbers:","words.","potential","candidates","valid","all","possible","all","chars),","functions","Characters."]},{"Key":"the functions","Fragments":["you're","applied.","only","within","from","you've","you've","you've","should","to","once","from","get","among","with","e.g.","provided","I","non-public","body","to","instead","instead","from","are","in","be","using","come","like","and","as","it","in","the","internally","that","you","would","will","that","like","into","`case`","in","that","you","come"]},{"Key":"functions you're","Fragments":["calling—either","calling"]},{"Key":"you're calling—either","Fragments":["as"]},{"Key":"calling—either as","Fragments":["the"]},{"Key":"first argument","Fragments":["or","(or","when","to","to","there"]},{"Key":"argument or","Fragments":["the"]},{"Key":"or the","Fragments":["last","like.","next","validate"]},{"Key":"last argument","Fragments":["to","to"]},{"Key":"argument to","Fragments":["the","a","them","them","make","`range`","the","`vector`","leap-year?","an","each","`filter`,","\u003ccode\u003eresponse-for\u003c/code\u003e","it"]},{"Key":"functions applied.","Fragments":["So"]},{"Key":"applied. So","Fragments":["it"]},{"Key":"So it","Fragments":["really","should"]},{"Key":"it really","Fragments":["just","hard","makes","the","should","needs"]},{"Key":"really just","Fragments":["depends","use","maps."]},{"Key":"just depends","Fragments":["what"]},{"Key":"depends what","Fragments":["functions"]},{"Key":"what functions","Fragments":["you're","are"]},{"Key":"you're calling","Fragments":["and","`lower-case`","`lower-case`"]},{"Key":"calling and","Fragments":["where"]},{"Key":"and where","Fragments":["they","that"]},{"Key":"where they","Fragments":["need","can"]},{"Key":"they need","Fragments":["their"]},{"Key":"need their","Fragments":["arguments."]},{"Key":"their arguments.","Fragments":["Of"]},{"Key":"arguments. Of","Fragments":["course"]},{"Key":"Of course","Fragments":["if","this","it","there","what","that's","this","you"]},{"Key":"course if","Fragments":["the","you","you"]},{"Key":"functions only","Fragments":["take","be"]},{"Key":"only take","Fragments":["one"]},{"Key":"take one","Fragments":["argument","argument"]},{"Key":"one argument","Fragments":["(like","is","and","functions.","to"]},{"Key":"argument (like","Fragments":["my"]},{"Key":"(like my","Fragments":["example),"]},{"Key":"my example),","Fragments":["the"]},{"Key":"example), the","Fragments":["first"]},{"Key":"first position","Fragments":["and"]},{"Key":"position and","Fragments":["the"]},{"Key":"last position","Fragments":["are"]},{"Key":"position are","Fragments":["the"]},{"Key":"are the","Fragments":["same","square","only","only","same","only","same","whole","whole","benefits","strings","proper","three","only","\"print\"","first","same."]},{"Key":"same position","Fragments":["so"]},{"Key":"position so","Fragments":["it"]},{"Key":"so it","Fragments":["doesn't","is","can","wouldn't","can","could","may","might","might","matches","is","wasn't","calls","might","assumes"]},{"Key":"doesn't matter","Fragments":["which","much","much"]},{"Key":"matter which","Fragments":["macro"]},{"Key":"which macro","Fragments":["you"]},{"Key":"macro you","Fragments":["use"]},{"Key":"use (in","Fragments":["this"]},{"Key":"(in this","Fragments":["case"]},{"Key":"this case","Fragments":["I","I","I","would","though?","it","and","worth","if","I","with","the","you","though,","of","you're","(since","either?","it","you're","it","I'd","this","I","to"]},{"Key":"I tend","Fragments":["to","to","to","to","to"]},{"Key":"tend to","Fragments":["see","do,","only","compare","compare","err","keep","have","see"]},{"Key":"see `-\u003e`","Fragments":["used"]},{"Key":"`-\u003e` used","Fragments":["more)."]},{"Key":"might seem","Fragments":["a"]},{"Key":"seem a","Fragments":["bit"]},{"Key":"bit confusing","Fragments":["but","-"]},{"Key":"confusing but","Fragments":["it"]},{"Key":"it usually","Fragments":["becomes"]},{"Key":"usually becomes","Fragments":["clear"]},{"Key":"becomes clear","Fragments":["fast","that"]},{"Key":"clear fast","Fragments":["once"]},{"Key":"fast once","Fragments":["you"]},{"Key":"once you","Fragments":["try","are","have"]},{"Key":"you try","Fragments":["them","to","out","to"]},{"Key":"try them","Fragments":["out"]},{"Key":"them out","Fragments":["(which","of","is","bravely!","in","via","to"]},{"Key":"out (which","Fragments":["I'd"]},{"Key":"(which I'd","Fragments":["definitely"]},{"Key":"I'd definitely","Fragments":["recommend!).","factorize"]},{"Key":"I'm a","Fragments":["bit","noob","clojure","little","clojure","bit","terrible","total","noob","newbie","little","clojure","bit"]},{"Key":"bit of","Fragments":["a","an","coupling","duplication","duplication","getting","premature","an","inconsistency","experimenting","a","cleverness","noise","code","simplification","math.","math.","an","clojure","a","duplication","duplication","misdirection","clojure","duplication","feedback"]},{"Key":"a newbie","Fragments":["with","..."]},{"Key":"newbie with","Fragments":["clojure;"]},{"Key":"with clojure;","Fragments":["what"]},{"Key":"clojure; what","Fragments":["does"]},{"Key":"what does","Fragments":["the","he"]},{"Key":"does the","Fragments":["```-\u003e\u003e```","right","right","right","factor","symbol","job","comparison","comparison","`db`"]},{"Key":"the ```-\u003e\u003e```","Fragments":["operator"]},{"Key":"```-\u003e\u003e``` operator","Fragments":["accomplish?"]},{"Key":"using `silent?`","Fragments":["or"]},{"Key":"`silent?` or","Fragments":["`shouting?`"]},{"Key":"or `shouting?`","Fragments":["for"]},{"Key":"`shouting?` for","Fragments":["your"]},{"Key":"for your","Fragments":["predicate","predicates?","suggestion.","conditions?","comments","review!","comments.","first","feedback","`divides`","classification,","placeholder.","comments.","helper","feedback.","suggestions,","tips.","private","time","submission","frequency","feedback!","tips.","comments!","helper","time","map","prompt","feedback!","condp","advice.","great","insightful","comments!","review.","kind","review","suggestion.","nested","regexp!","feedback!","comment.","help!","advices!","tips!","input"]},{"Key":"your predicate","Fragments":["functions?","functions?","functions,","methods,","methods","functions"]},{"Key":"predicate functions?","Fragments":["How","It"]},{"Key":"functions? How","Fragments":["about"]},{"Key":"easier only","Fragments":["with"]},{"Key":"only with","Fragments":["one","help"]},{"Key":"with one","Fragments":["related","of","minor","that","branch"]},{"Key":"one related","Fragments":["function"]},{"Key":"related function","Fragments":["in","apply."]},{"Key":"in this","Fragments":["file,","case","case?","case","case.","context.","context.","case.","example.","case.","case","case,","case","case","case)?","situation","line","context","submission","mess","exercise","case.","case.","instance","exercise","case","case","case","case,","context?","case,","case:","case.","case","case.","function.","context,","case","context,","case.","format.","case.","case)","case","case","case.","case","case","case).","case","case?","direction.","case)","case","case,","case,","case","case,","code.","exercise;","exercise","post:","particular","exercise","context","case"]},{"Key":"this file,","Fragments":["but"]},{"Key":"file, but","Fragments":["with"]},{"Key":"with many","Fragments":["private"]},{"Key":"many private","Fragments":["functions"]},{"Key":"for many","Fragments":["other"]},{"Key":"many other","Fragments":["functions","languages)"]},{"Key":"other functions","Fragments":["hiding","should","with","in","as","format","which"]},{"Key":"functions hiding","Fragments":["them"]},{"Key":"hiding them","Fragments":["in"]},{"Key":"them in","Fragments":["function","front","other","narrowest","the","this","`dosync`.","to","most","the"]},{"Key":"in function","Fragments":["implementation","bodies","definitions.","definitions.","which","`re-find`","in","within","names?"]},{"Key":"function implementation","Fragments":["itself"]},{"Key":"implementation itself","Fragments":["is"]},{"Key":"itself is","Fragments":["much"]},{"Key":"me. One","Fragments":["more","more"]},{"Key":"more thing","Fragments":["you","-"]},{"Key":"thing you","Fragments":["might","might","might","can"]},{"Key":"might consider","Fragments":["is","giving","using","`format`","making","making","extracting","using","using","replacing","using","using","moving","renaming"]},{"Key":"consider is","Fragments":["making","replacing","to","using","using","that","to"]},{"Key":"is making","Fragments":["the","use","me"]},{"Key":"the vars","Fragments":["private."]},{"Key":"I *love*","Fragments":["the"]},{"Key":"*love* the","Fragments":["```replace-thyamine-with-uracil```"]},{"Key":"the ```replace-thyamine-with-uracil```","Fragments":["function."]},{"Key":"```replace-thyamine-with-uracil``` function.","Fragments":["Beautifully"]},{"Key":"function. Beautifully","Fragments":["expressive."]},{"Key":"Beautifully expressive.","Fragments":["Does"]},{"Key":"expressive. Does","Fragments":["the"]},{"Key":"Does the","Fragments":["runtime","check"]},{"Key":"the runtime","Fragments":["complain"]},{"Key":"runtime complain","Fragments":["at"]},{"Key":"complain at","Fragments":["you"]},{"Key":"at you","Fragments":["about"]},{"Key":"you about","Fragments":["```replace```?","the"]},{"Key":"about ```replace```?","Fragments":["I"]},{"Key":"```replace```? I","Fragments":["can't"]},{"Key":"can't remember","Fragments":["if","now"]},{"Key":"remember if","Fragments":["it"]},{"Key":"it did","Fragments":["that","not"]},{"Key":"did that","Fragments":["for","in","mainly","by","because"]},{"Key":"me when","Fragments":["I","I","there's"]},{"Key":"when I","Fragments":["tried","see","wrote","can.","solved","use","mean","do!","searched","forgot","learned","tried","did","wrote","was","enter","refactored","found","did","changed","would","have","saw","don't","start","could","found","found"]},{"Key":"I tried","Fragments":["```use","yesterday","`last`","that","to","it","to","not","it","to","writing","the","that,","to","to","to","to","out","to","to","a","a","having","to","to","to","I","to","throwing","several"]},{"Key":"tried ```use","Fragments":[":only```"]},{"Key":"```use :only```","Fragments":["on"]},{"Key":":only``` on","Fragments":["that"]},{"Key":"function from","Fragments":["string","`core`","core","your","version","a","an","`clojure.core`","the","your","the","the","`clojure.string`"]},{"Key":"from string","Fragments":["or","so"]},{"Key":"string or","Fragments":["not.","single","remove","even","inline","statement"]},{"Key":"a reason","Fragments":["you",";)","to"]},{"Key":"reason you","Fragments":["went","might","don't","used","are"]},{"Key":"you went","Fragments":["with"]},{"Key":"RegEx there,","Fragments":["rather"]},{"Key":"there, rather","Fragments":["than"]},{"Key":"rather than","Fragments":["character","on","Java","`toUpperCase`.","resorting","my","generate","strings,","for","calling","the","the","characters","a","string","the","learning","use","`sort`.","`condp`,","the","the","let","calling","\"unknown\"","the","using","using","\"piping","a","the","a","```require```,","`defn`","`anagrams-for`.","`()`","`defn`","use","Clojure.","loop","comments","a","really","explicitly","delegating","a","copy-and-pasting","just","\"def\"","```(.endsWith","leave","a","(=","filtering","putting","nested","inline","a","defn,","what","\"snake_case\"","named","\"def\"","using","`if","in","return","extract","the","`into","falsey","a","what","`(not","':else'."]},{"Key":"than character","Fragments":["primitives?"]},{"Key":"I seem","Fragments":["to"]},{"Key":"see people","Fragments":["closing","using","achieving","coding"]},{"Key":"people closing","Fragments":["out"]},{"Key":"closing out","Fragments":["all","parentheses"]},{"Key":"out all","Fragments":["their","of","the"]},{"Key":"all their","Fragments":["parentheses"]},{"Key":"their parentheses","Fragments":["on"]},{"Key":"parentheses on","Fragments":["the","their","the","one"]},{"Key":"line of","Fragments":["code,","the","code","whitespace","real","the","form/expression.","logic","whatever","the"]},{"Key":"of code,","Fragments":["rather","so"]},{"Key":"code, rather","Fragments":["than"]},{"Key":"than on","Fragments":["the"]},{"Key":"the following","Fragments":["line.","discussion","name","(verified","NS","results:","snippet","expression:"]},{"Key":"following line.","Fragments":["If"]},{"Key":"line. If","Fragments":["that's","you"]},{"Key":"If that's","Fragments":["not","the"]},{"Key":"that's not","Fragments":["clear,","the","that","susceptible","possible","necessary,","a"]},{"Key":"not clear,","Fragments":["see","and"]},{"Key":"clear, see","Fragments":["your"]},{"Key":"see your","Fragments":["line","next","point"]},{"Key":"your line","Fragments":["#2"]},{"Key":"line #2","Fragments":["vs."]},{"Key":"#2 vs.","Fragments":["the"]},{"Key":"vs. the","Fragments":["ends"]},{"Key":"the ends","Fragments":["of"]},{"Key":"ends of","Fragments":["the"]},{"Key":"functions you've","Fragments":["defined","used","used","used"]},{"Key":"you've defined","Fragments":["(The","your"]},{"Key":"defined (The","Fragments":["weird"]},{"Key":"(The weird","Fragments":["alignment"]},{"Key":"weird alignment","Fragments":["issues"]},{"Key":"alignment issues","Fragments":["with"]},{"Key":"issues with","Fragments":["the","code","learning","my","overflows"]},{"Key":"the embedded","Fragments":["code"]},{"Key":"embedded code","Fragments":["block"]},{"Key":"code block","Fragments":["makes"]},{"Key":"block makes","Fragments":["it"]},{"Key":"it more","Fragments":["trouble","readable","idiomatic/personal","efficient","compact","readable.","generic?","useful,","readable","readable","readable.","obscure.","readable.","consistent,","readable(i","readable","readable","litterate.","encapsulated.","idiomatic","readable.","explicit","readable","readable","expressive.","concise:","readable.","succinct","explicit","readable?"]},{"Key":"more trouble","Fragments":["than","than"]},{"Key":"trouble than","Fragments":["it's","it's"]},{"Key":"than it's","Fragments":["worth","worth"]},{"Key":"it's worth","Fragments":["to","to","the","the","giving","putting","doing","it","additional","it","the","it"]},{"Key":"worth to","Fragments":["figure","type"]},{"Key":"to figure","Fragments":["out","what","out","out","out","out","out","out","it","out","out","out","out","out.","out","out","out"]},{"Key":"figure out","Fragments":["what","how","a","how","a","how","how","`[^a-z]`","how","how","`(apply","how","how","exactly","what","a","what","its","the","the","if","the"]},{"Key":"out what","Fragments":["line","you","kind","it","happens","it","each","a"]},{"Key":"what line","Fragments":["numbers"]},{"Key":"line numbers","Fragments":["they"]},{"Key":"numbers they","Fragments":["are..[oddly"]},{"Key":"they are..[oddly","Fragments":["not"]},{"Key":"are..[oddly not","Fragments":["more"]},{"Key":"to type","Fragments":["out","out"]},{"Key":"type out","Fragments":["this","all"]},{"Key":"out this","Fragments":["explanation,","code."]},{"Key":"this explanation,","Fragments":["though?])"]},{"Key":" On","Fragments":["a","moving","moving","the","the","one","the","another","a","the","my","the"]},{"Key":"On a","Fragments":["related","more"]},{"Key":"a related","Fragments":["note,"]},{"Key":"related note,","Fragments":["you're"]},{"Key":"note, you're","Fragments":["mixing"]},{"Key":"you're mixing","Fragments":["styles"]},{"Key":"mixing styles","Fragments":["here,"]},{"Key":"styles here,","Fragments":["when"]},{"Key":"here, when","Fragments":["it"]},{"Key":"when it","Fragments":["comes","is.","comes","comes","is","comes","is","should","doesn't","becomes","only","comes"]},{"Key":"it comes","Fragments":["to","to","to","down","to","from","to"]},{"Key":"comes to","Fragments":["closing","readability.","Clojure","convention","mind","clojure."]},{"Key":"to closing","Fragments":["out"]},{"Key":"out parentheses","Fragments":[";)"]},{"Key":"making `shout?`","Fragments":["and"]},{"Key":"`shout?` and","Fragments":["`question?`","`question?`","`nothing-said?`."]},{"Key":"and `question?`","Fragments":["private","seem","to","private","methods","(with","don't."]},{"Key":"`question?` private","Fragments":["since","methods"]},{"Key":"private since","Fragments":["they"]},{"Key":"since they","Fragments":["are","are","are","aren't","have","have","are"]},{"Key":"not directly","Fragments":["relevant"]},{"Key":"directly relevant","Fragments":["to"]},{"Key":"relevant to","Fragments":["code"]},{"Key":"code outside","Fragments":["the","of"]},{"Key":"outside the","Fragments":["namespace","mentioned","namespace,","range","name"]},{"Key":"the namespace","Fragments":["and","name","name","of","(so","and","(BTW","to","for","declaration:","available","at","symbol","it's","with","declaration,","declaration","in","again","to","anyway.","only.","`:require","as","`:require","`:require","for","where","forms","`:require`","twice.","with","to","in"]},{"Key":"namespace and","Fragments":["are","importing","handling","alias"]},{"Key":"and are","Fragments":["not"]},{"Key":"not explicitly","Fragments":["tested?"]},{"Key":"Nice solution.","Fragments":["easy","I"]},{"Key":"solution. easy","Fragments":["to"]},{"Key":"to follow","Fragments":["and","your","the","a","easier","and"]},{"Key":"follow and","Fragments":["nice","less"]},{"Key":"and nice","Fragments":["use","functional"]},{"Key":"nice use","Fragments":["of","of","of"]},{"Key":"You make","Fragments":["a","sure","very","some"]},{"Key":"good argument,","Fragments":["so"]},{"Key":"argument, so","Fragments":["I","it","you","you"]},{"Key":"will nominate.","Fragments":["While"]},{"Key":"nominate. While","Fragments":["beyond"]},{"Key":"While beyond","Fragments":["the"]},{"Key":"beyond the","Fragments":["scope","first","context"]},{"Key":"the scope","Fragments":["of","of","which","of","of","of","as","of"]},{"Key":"scope of","Fragments":["this","the","functions,","the","the","a","input"]},{"Key":"exercise I","Fragments":["would","tried","tried"]},{"Key":"be interested","Fragments":["to","to","in","to","in"]},{"Key":"interested to","Fragments":["learn","hear","hear"]},{"Key":"learn how","Fragments":["you","to"]},{"Key":"how you","Fragments":["might","solve","require","meant","can","look","do","can","would","decomposed","defined","used","might","like","have","use","coded","and","could","avoided","check"]},{"Key":"might implement","Fragments":["your"]},{"Key":"implement your","Fragments":["suggestions","`yelling?`","idea."]},{"Key":"your suggestions","Fragments":["in","(well,","in","in"]},{"Key":"suggestions in","Fragments":["clojure.","my","the","a"]},{"Key":"do want","Fragments":["to","to"]},{"Key":"a counter","Fragments":["argument","incremented"]},{"Key":"counter argument","Fragments":["that"]},{"Key":"argument that","Fragments":["without","is","could","is"]},{"Key":"that without","Fragments":["a","sacrificing"]},{"Key":"without a","Fragments":["biology","prefix.","`ns`.","newline.","predicate","call","name","name.","separate"]},{"Key":"background, even","Fragments":["with"]},{"Key":"even with","Fragments":["the"]},{"Key":"the doc","Fragments":["string,","string"]},{"Key":"doc string,","Fragments":["it"]},{"Key":"string, it","Fragments":["may","might"]},{"Key":"it may","Fragments":["be","be","be","take","not","not","feel","be"]},{"Key":"bit unclear","Fragments":["what"]},{"Key":"unclear what","Fragments":["this"]},{"Key":"what this","Fragments":["replacing","function","error","does.","would","is;"]},{"Key":"this replacing","Fragments":["means."]},{"Key":"replacing means.","Fragments":["Something"]},{"Key":"means. Something","Fragments":["of"]},{"Key":"Something of","Fragments":["a"]},{"Key":"a magic","Fragments":["letter."]},{"Key":"considered looking","Fragments":["for"]},{"Key":"looking for","Fragments":["functions","is","`declare`.","a","the","any","some","the","a","blanks.)","the","the","missing","an","a","folds","a"]},{"Key":"for functions","Fragments":["in","and","taking","and","that"]},{"Key":"functions in","Fragments":["the","order","Clojure.","clojure.","clojure","threading","this","a","such","one","a","the","the","clojure.core","Clojure.","haskell/erlang/etc","a","the","clojure.string","a","another","Clojure.","a","Clojure","that","some","another","_core_,","clojure.string","Clojure","Clojure.","Clojure."]},{"Key":"the clojure.string","Fragments":["module","require.","prefixes","namespace","namespace","requirement","namespace"]},{"Key":"clojure.string module","Fragments":["(it"]},{"Key":"module (it","Fragments":["seems"]},{"Key":"(it seems","Fragments":["to"]},{"Key":"be preferable","Fragments":["to","to"]},{"Key":"preferable to","Fragments":["use",".toUpperCase?","use","include"]},{"Key":"use \"native\"","Fragments":["clojure"]},{"Key":"\"native\" clojure","Fragments":["functionality"]},{"Key":"clojure functionality","Fragments":["rather"]},{"Key":"functionality rather","Fragments":["than"]},{"Key":"than Java","Fragments":["methods)?"]},{"Key":"Java methods)?","Fragments":["Also,"]},{"Key":"methods)? Also,","Fragments":["have"]},{"Key":"Also, have","Fragments":["you","a","you","you","you"]},{"Key":"you tried","Fragments":["using","considered","it","those?","delving","`diff`,"]},{"Key":"tried using","Fragments":["the"]},{"Key":"the built-in","Fragments":["last","`last`","`str`","`frequencies`","count","assert","`clojure.string`"]},{"Key":"built-in last","Fragments":["function?"]},{"Key":"Other nitpickers","Fragments":["may","may","may"]},{"Key":"nitpickers may","Fragments":["also","also","suggest"]},{"Key":"may also","Fragments":["'suggest'","'suggest'","be"]},{"Key":"also 'suggest'","Fragments":["that","that"]},{"Key":"'suggest' that","Fragments":["you","you"]},{"Key":"a more","Fragments":["descriptive","descriptive","descriptive","concise","minimal,","succint","DRY","structured","real-world","proper","Clojure-ish","general","descriptive","obvious","sane","general","accessible","concise","complex","efficient","specific","idiomatic","appropriate","lispy","readable","of","descriptive","fitting","outside-in","compact","idiomatic","concise","robust","general","functional","general","idiomatic","descriptive","idiomatic","succinct","happy-making","sophisticated","elegant","elegant","concise","clever","meaningful","composable","composable","complete"]},{"Key":"descriptive variable","Fragments":["name,","name,"]},{"Key":"variable name,","Fragments":["and","and"]},{"Key":"name, and","Fragments":["extract","extract"]},{"Key":"and extract","Fragments":["your","your"]},{"Key":"your conditions","Fragments":["into","into","to","into"]},{"Key":"conditions into","Fragments":["intention-revealing","intention-revealing","separate","finely-named","extra","functions","standalone","their","their","descriptively"]},{"Key":"into intention-revealing","Fragments":["named","named"]},{"Key":"intention-revealing named","Fragments":["functions.","functions."]},{"Key":"see if","Fragments":["a","it","I","anything","anyone","it","you","you","it's","that","it's","there's","clojure","the","the","you","value","an","the","they","these","everything","your","a","one","I","I"]},{"Key":"if a","Fragments":["string","language","tricky","string","word","used","given","collection","value","sentence","string","value","sequence"]},{"Key":"string ends","Fragments":["with"]},{"Key":"ends with","Fragments":["a","question","?","a"]},{"Key":"It's native","Fragments":["Clojure,"]},{"Key":"native Clojure,","Fragments":["and"]},{"Key":"Clojure, and","Fragments":["since","I","AFAIK"]},{"Key":"and since","Fragments":["we're","you","set"]},{"Key":"since we're","Fragments":["aiming","allocating"]},{"Key":"we're aiming","Fragments":["for"]},{"Key":"aiming for","Fragments":["readability"]},{"Key":"for readability","Fragments":["here,","to","purpose","to","to","to","if","to"]},{"Key":"readability here,","Fragments":["it"]},{"Key":"here, it","Fragments":["seems","will"]},{"Key":"seems natural","Fragments":["to"]},{"Key":"natural to","Fragments":["prefer","me.","the","me."]},{"Key":"to prefer","Fragments":["native","the"]},{"Key":"prefer native","Fragments":["solutions","Clojure"]},{"Key":"native solutions","Fragments":["over"]},{"Key":"solutions over","Fragments":["“foreign”"]},{"Key":"over “foreign”","Fragments":["interop"]},{"Key":"“foreign” interop","Fragments":["when"]},{"Key":"interop when","Fragments":["possible."]},{"Key":"This seems","Fragments":["awfully","a","like","ok"]},{"Key":"seems awfully","Fragments":["complex."]},{"Key":"awfully complex.","Fragments":["I'm"]},{"Key":"complex. I'm","Fragments":["fairly"]},{"Key":"I'm fairly","Fragments":["new","inexperienced"]},{"Key":"missing out","Fragments":["on","on","on"]},{"Key":"out on","Fragments":["some","the","some"]},{"Key":"on some","Fragments":["of","more","complicated","of"]},{"Key":"of what's","Fragments":["going","going","going"]},{"Key":"going on","Fragments":["here.","in","in","in","with","here:","in","here,","here."]},{"Key":"on here.","Fragments":["Would"]},{"Key":"here. Would","Fragments":["you"]},{"Key":"Would you","Fragments":["care","consider","at","be","rather","recommend","still"]},{"Key":"you care","Fragments":["to","about"]},{"Key":"care to","Fragments":["elucidate","make","elaborate?","COMMENT"]},{"Key":"to elucidate","Fragments":["your"]},{"Key":"elucidate your","Fragments":["approach?"]},{"Key":"Maybe scoping","Fragments":["these"]},{"Key":"scoping these","Fragments":["with"]},{"Key":"these with","Fragments":["a"]},{"Key":"`let` isn't","Fragments":["the"]},{"Key":"isn't the","Fragments":["best","case","case)","right","way"]},{"Key":"the best","Fragments":["choice,","names?","idea","I","answer","way","choice","solution","way","way","link","with","parameter","exercise","I've","way","way","solution."]},{"Key":"best choice,","Fragments":["as"]},{"Key":"choice, as","Fragments":["other"]},{"Key":"as other","Fragments":["dna-namespaced","functions"]},{"Key":"other dna-namespaced","Fragments":["functions"]},{"Key":"dna-namespaced functions","Fragments":["might"]},{"Key":"functions might","Fragments":["also"]},{"Key":"might also","Fragments":["need","be","be","consider","consider","want","experiment"]},{"Key":"also need","Fragments":["to"]},{"Key":"to know","Fragments":["about","quite","what","about","for","you're","what","it).","if","that.","your","about.","the","which","if",":)","that"]},{"Key":"about thymidine","Fragments":["and"]},{"Key":"thymidine and","Fragments":["uracil?","uracil","uracil"]},{"Key":"a native","Fragments":["Clojure","Clojure","C","English"]},{"Key":"native Clojure","Fragments":["function","versions","function","functions,","to","functions."]},{"Key":"Clojure function","Fragments":["to","to","`frequencies`?","like"]},{"Key":"last character","Fragments":["instead","of","of","of","of","of","of","of","from","-","from"]},{"Key":"character instead","Fragments":["of"]},{"Key":"of .endsWith.","Fragments":["A"]},{"Key":".endsWith. A","Fragments":["useful"]},{"Key":"A useful","Fragments":["trick"]},{"Key":"useful trick","Fragments":["is"]},{"Key":"trick is","Fragments":["that"]},{"Key":"can treat","Fragments":["Strings","string","strings","maps","dictionaries"]},{"Key":"treat Strings","Fragments":["as"]},{"Key":"Strings as","Fragments":["a"]},{"Key":"the context","Fragments":["of","of","of","of","right,","of","close.","of","(external","of","here","of","of","of"]},{"Key":"of biology,","Fragments":["and"]},{"Key":"biology, and","Fragments":["given"]},{"Key":"and given","Fragments":["the"]},{"Key":"given the","Fragments":["other","\"let\"","simplicity","JVM.","nature","partial","constraints","regex","first","problem","set","naming"]},{"Key":"other information","Fragments":["available","regarding"]},{"Key":"information available","Fragments":["in"]},{"Key":"available in","Fragments":["the","order","the"]},{"Key":"the function's","Fragments":["docstring,","name"]},{"Key":"function's docstring,","Fragments":["these"]},{"Key":"docstring, these","Fragments":["abbreviations"]},{"Key":"these abbreviations","Fragments":["for"]},{"Key":"abbreviations for","Fragments":["nucleotides"]},{"Key":"for nucleotides","Fragments":["are","enhance"]},{"Key":"nucleotides are","Fragments":["so","represented"]},{"Key":"so common","Fragments":["that"]},{"Key":"common that","Fragments":["the"]},{"Key":"the intention","Fragments":["is","of","of","better."]},{"Key":"intention is","Fragments":["obvious.","that"]},{"Key":"I were","Fragments":["concerned","at","to","running"]},{"Key":"were concerned","Fragments":["with"]},{"Key":"concerned with","Fragments":["writing","code","it."]},{"Key":"with writing","Fragments":["good","the"]},{"Key":"writing good","Fragments":["code"]},{"Key":"good code","Fragments":["that","overall."]},{"Key":"code that","Fragments":["obviously","is","explains","doesn't","you"]},{"Key":"that obviously","Fragments":["works,"]},{"Key":"obviously works,","Fragments":["I"]},{"Key":"be doing","Fragments":["it","`(count"]},{"Key":"doing it","Fragments":["in","--","only","only","all","this","this","as","like"]},{"Key":"the type","Fragments":["system","of","of","used","of"]},{"Key":"type system","Fragments":["and"]},{"Key":"system and","Fragments":["not"]},{"Key":"and not","Fragments":["using","you.","vice","vice","`letfn`","polluting","only","the","necessarily","pulling","type.","too","shared","the","just","choose","have","include"]},{"Key":"not using","Fragments":["strings","Java","them","`empty?`","`last`","conditionals","it","the","let",":"]},{"Key":"using strings","Fragments":["except"]},{"Key":"strings except","Fragments":["for"]},{"Key":"except for","Fragments":["(maybe)"]},{"Key":"for (maybe)","Fragments":["at"]},{"Key":"(maybe) at","Fragments":["IO"]},{"Key":"at IO","Fragments":["boundaries."]},{"Key":" Moving","Fragments":["actual","`zipmap`","the","checks","the"]},{"Key":"Moving actual","Fragments":["`map`"]},{"Key":"actual `map`","Fragments":["into"]},{"Key":"`map` into","Fragments":["`map-to-rna`"]},{"Key":"into `map-to-rna`","Fragments":["would"]},{"Key":"`map-to-rna` would","Fragments":["result"]},{"Key":"in actually","Fragments":["moving"]},{"Key":"actually moving","Fragments":["`zipmap`"]},{"Key":"moving `zipmap`","Fragments":["into"]},{"Key":"`zipmap` into","Fragments":["`to-rna`,","`to-rna`"]},{"Key":"into `to-rna`,","Fragments":["I"]},{"Key":"`to-rna`, I","Fragments":["suppose."]},{"Key":"Maybe there’s","Fragments":["a","a"]},{"Key":"there’s a","Fragments":["better","way","huge"]},{"Key":"better naming,","Fragments":["but"]},{"Key":"naming, but","Fragments":["English"]},{"Key":"but English","Fragments":["is"]},{"Key":"English is","Fragments":["not"]},{"Key":"is not","Fragments":["my","cool","specified","approval","necessary","exported.","a","Ruby).","as","semantically","fully","so","tail-recursive,","as","too","entirely","necessary.","communicated","evaluated.","needed","necessary,","necessary","required","present","a","`\"?\"`","clear","necessary,","an","in","great.","necessary","worth","needed.","within","quite","dependent","part","necessary.","considered","a","what","my","hard","present,","as","really","have","yelling","my","matched.","what","very","necessary","necessary","satisfied,","found.","necessary:","repeated","clear","shorter","only","needed","that","of","very","an","necessary","shouting","pseudo-explicatory,","found,","very","`nil`.","needed"]},{"Key":"not my","Fragments":["native","strongest","favorite."]},{"Key":"my native","Fragments":["language,","tongue,"]},{"Key":"native language,","Fragments":["so"]},{"Key":"language, so","Fragments":["I"]},{"Key":"have some","Fragments":["problems","issues","questions","extra","questions","other","nits","food,"]},{"Key":"some problems","Fragments":["in"]},{"Key":"problems in","Fragments":["that"]},{"Key":"in that","Fragments":["area.","case","case","particular","field.","particular","case.","case.","case)","case.","regard","particular","particular","case.","it","direction.","it's","case?","it","re-find","they're","manner.","case.","instance?","case","way.","line?","might","library.","regard.","part","it"]},{"Key":"that area.","Fragments":["`correspondence-to-rna`?"]},{"Key":"area. `correspondence-to-rna`?","Fragments":["Ugh."]},{"Key":"Maybe `dna-to-rna`","Fragments":["is"]},{"Key":"`dna-to-rna` is","Fragments":["a"]},{"Key":"better name,","Fragments":["but","since","one"]},{"Key":"name, but","Fragments":["then"]},{"Key":"but then","Fragments":["we’d","my","saw","I","you","the","get","is","names","frequencies","how","I","clojure's"]},{"Key":"then we’d","Fragments":["end"]},{"Key":"we’d end","Fragments":["up"]},{"Key":"end up","Fragments":["with","calculating","using","in","rethinking","caching","with","using","with","on","nested","as","with","in","using","throwing"]},{"Key":"with `dna/dna-to-rna`","Fragments":["and"]},{"Key":"`dna/dna-to-rna` and","Fragments":["`dna/to-rna`."]},{"Key":"and `dna/to-rna`.","Fragments":["Daily"]},{"Key":"`dna/to-rna`. Daily","Fragments":["reminder"]},{"Key":"Daily reminder","Fragments":["that"]},{"Key":"reminder that","Fragments":["naming"]},{"Key":"that naming","Fragments":["things","the","convention"]},{"Key":"naming things","Fragments":["is","in"]},{"Key":"things is","Fragments":["_hard_.","hard."]},{"Key":"Moving `zipmap`","Fragments":["into"]},{"Key":"into `to-rna`","Fragments":["(either"]},{"Key":"`to-rna` (either","Fragments":["in"]},{"Key":"(either in","Fragments":["`let`","a"]},{"Key":"in `let`","Fragments":["form"]},{"Key":"`let` form","Fragments":["or","is","example","only","would"]},{"Key":"form or","Fragments":["in"]},{"Key":"or in","Fragments":["closure)","the","case"]},{"Key":"in closure)","Fragments":["would"]},{"Key":"closure) would","Fragments":["result"]},{"Key":"in it’s","Fragments":["recomputation"]},{"Key":"it’s recomputation","Fragments":["every"]},{"Key":"recomputation every","Fragments":["time"]},{"Key":"every time","Fragments":["we","to","a"]},{"Key":"time we","Fragments":["call"]},{"Key":"we call","Fragments":["`to-rna`,"]},{"Key":"call `to-rna`,","Fragments":["which"]},{"Key":"`to-rna`, which","Fragments":["is"]},{"Key":"not cool","Fragments":["since,"]},{"Key":"cool since,","Fragments":["well,"]},{"Key":"since, well,","Fragments":["I"]},{"Key":"well, I","Fragments":["doubt","don't"]},{"Key":"I doubt","Fragments":["that"]},{"Key":"doubt that","Fragments":["that"]},{"Key":"that that","Fragments":["mappings","logic","really","would"]},{"Key":"that mappings","Fragments":["change/update"]},{"Key":"mappings change/update","Fragments":["very"]},{"Key":"change/update very","Fragments":["often."]},{"Key":"That being","Fragments":["said,","said,","said","said","said","said,"]},{"Key":"being said,","Fragments":["I","I'm","I"]},{"Key":"think it’s","Fragments":["“good"]},{"Key":"it’s “good","Fragments":["enough”"]},{"Key":"“good enough”","Fragments":["and"]},{"Key":"enough” and","Fragments":["sincerely"]},{"Key":"and sincerely","Fragments":["hope"]},{"Key":"sincerely hope","Fragments":["I’d"]},{"Key":"hope I’d","Fragments":["be"]},{"Key":"I’d be","Fragments":["proven"]},{"Key":"be proven","Fragments":["wrong"]},{"Key":"proven wrong","Fragments":[":)"]},{"Key":"the approach","Fragments":["of"]},{"Key":"approach of","Fragments":["this","response-for-basic","just","using","parsing"]},{"Key":"this solution","Fragments":["is","would","is.","so","all","is","it","seems"]},{"Key":"solution is","Fragments":["pretty","pretty","smart","more","succint","extremely","based","clear","pretty","a","the","succinct","very","very","very","correct","not","=)","nice"]},{"Key":"pretty neat.","Fragments":["I"]},{"Key":"neat. I","Fragments":["love"]},{"Key":"individual nucleotides","Fragments":["bindings,"]},{"Key":"nucleotides bindings,","Fragments":["they're"]},{"Key":"bindings, they're","Fragments":["very"]},{"Key":"they're very","Fragments":["expressive"]},{"Key":"don't actually","Fragments":["know","know","check","need","need","need","have","need","need","check"]},{"Key":"actually know","Fragments":["the","which"]},{"Key":"know the","Fragments":["answer","sequences","methods","best","input"]},{"Key":"the answer","Fragments":["to","to","here"]},{"Key":"answer to","Fragments":["this","your","the","[this"]},{"Key":"this question:","Fragments":["would"]},{"Key":"question: would","Fragments":["it"]},{"Key":"it make","Fragments":["it","sense"]},{"Key":"readable to","Fragments":["put","me.","have","define"]},{"Key":"to put","Fragments":["the","a","constants","the","parens","the","together","declarations","mapping","them","use/require","lines","require","public","a","these","the","the","a","the","the","the","the","this"]},{"Key":"put the","Fragments":["actual","parameter","last","body","`if`","responses","`conj`","`use`","`require`s","requires","helpers","parens","previous","args","build-finder","checks","code","extra","files","files","input","conditional"]},{"Key":"the actual","Fragments":["```map```","translation","translation.","logic","input"]},{"Key":"actual ```map```","Fragments":["operation"]},{"Key":"```map``` operation","Fragments":["inside"]},{"Key":"operation inside","Fragments":["```map-to-rna```?"]},{"Key":"inside ```map-to-rna```?","Fragments":["It"]},{"Key":"```map-to-rna```? It","Fragments":["seems"]},{"Key":"seems a","Fragments":["little","bit","minor","bit","lot","little","similar","little","bit"]},{"Key":"little awkward","Fragments":["to","when"]},{"Key":"awkward to","Fragments":["read","me,","me,"]},{"Key":"read \"map","Fragments":["map-to-rna\","]},{"Key":"\"map map-to-rna\",","Fragments":["like"]},{"Key":"map-to-rna\", like","Fragments":["one"]},{"Key":"like one","Fragments":["is"]},{"Key":"is mapping","Fragments":["a"]},{"Key":"mapping a","Fragments":["map.","map"]},{"Key":"a map.","Fragments":["(Incidentally,","It","That","An","Applying","`(def","I"]},{"Key":"map. (Incidentally,","Fragments":["one"]},{"Key":"(Incidentally, one","Fragments":["**is**"]},{"Key":"one **is**","Fragments":["mapping"]},{"Key":"**is** mapping","Fragments":["a"]},{"Key":"a map","Fragments":["of","(which","or","of","full","using","of","that","of","of","in","lookup.","are","because","function","and","literal","for","instead","at","is","from","and","by","is","might","(as","of","which","tutorial","by","can","after","from","from","instead.","as"]},{"Key":"of sorts,","Fragments":["but"]},{"Key":"sorts, but","Fragments":["it"]},{"Key":"it sounds","Fragments":["funny","more"]},{"Key":"sounds funny","Fragments":["to"]},{"Key":"funny to","Fragments":["read"]},{"Key":"read aloud","Fragments":[";)"]},{"Key":"aloud ;)","Fragments":[")"]},{"Key":" Feel","Fragments":["free","free","like"]},{"Key":"Feel free","Fragments":["to","to"]},{"Key":"free to","Fragments":["push","ask","suggest","prove","bash","include"]},{"Key":"to push","Fragments":["back","that","me","the"]},{"Key":"push back","Fragments":["on"]},{"Key":"back on","Fragments":["this"]},{"Key":"on this","Fragments":["(and","site;","with","site.","way","one:","I","for","one","one.","exercise,","project.","example","topic"]},{"Key":"this (and","Fragments":["any"]},{"Key":"(and any","Fragments":["other","Lisp-like"]},{"Key":"any other","Fragments":["nitpicks/comments","kind","potential","way","sandwich","approach"]},{"Key":"other nitpicks/comments","Fragments":["on"]},{"Key":"nitpicks/comments on","Fragments":["this"]},{"Key":"this site;","Fragments":["the"]},{"Key":"site; the","Fragments":["goal"]},{"Key":"the goal","Fragments":["is","of"]},{"Key":"goal is","Fragments":["for","to"]},{"Key":"is for","Fragments":["everyone","convencience","defining","the","methods","continuous","Clojure,"]},{"Key":"for everyone","Fragments":["to"]},{"Key":"everyone to","Fragments":["learn","adopt","adopt"]},{"Key":"learn and","Fragments":["your"]},{"Key":"and your","Fragments":["opinions","incrementer","team.","\"apply"]},{"Key":"your opinions","Fragments":["are"]},{"Key":"opinions are","Fragments":["just"]},{"Key":"are just","Fragments":["as","functions.","a","whitespace:","whitespace","functions","stylistic;","`(str"]},{"Key":"as valid","Fragments":["as"]},{"Key":"valid as","Fragments":["anyone"]},{"Key":"as anyone","Fragments":["else's"]},{"Key":"anyone else's","Fragments":["here).","solutions"]},{"Key":"else's here).","Fragments":["I'd"]},{"Key":"here). I'd","Fragments":["love"]},{"Key":"I'd love","Fragments":["to","to","to","a","your","to","to"]},{"Key":"love to","Fragments":["hear","hear","hear","hear","know","get","find"]},{"Key":"to hear","Fragments":["your","if","feedback","them.","them.","feedback.","if","about"]},{"Key":"hear your","Fragments":["thoughts."]},{"Key":"you wanted","Fragments":["to","me","to","to","to","to.","to","to.","to","to?","to","to","to"]},{"Key":"wanted to","Fragments":["make","try","ensure","put","know","learn","keep","do","separate","pull","separate","get","use","try","break","change","use","add:","try","experiment","keep","introduce","show","insert","make","get","point","note","try","define","try","use","implement","write","see","guard","avoid","try","specifically","do","stick","see"]},{"Key":"make this","Fragments":["as","cleaner.","shorter","simpler","design","a","simpler","much","more","tidier.","both","more","clearer.","more","better","more","code"]},{"Key":"as portable","Fragments":["as"]},{"Key":"portable as","Fragments":["possible,"]},{"Key":"as possible,","Fragments":["you","allowing","not","they","and"]},{"Key":"possible, you","Fragments":["might"]},{"Key":"might choose","Fragments":["to"]},{"Key":"choose to","Fragments":["do","`(use","use","do"]},{"Key":"do this","Fragments":["in","would","all","using","that's","with","long","with","for","as","without","using","very","as"]},{"Key":"this in","Fragments":["'pure","the","my","other","or","Elixir","Clojure,","this","a","perspective,","mind,"]},{"Key":"in 'pure","Fragments":["Clojure'"]},{"Key":"'pure Clojure'","Fragments":["without"]},{"Key":"Clojure' without","Fragments":["using"]},{"Key":"without using","Fragments":["Java","a","a","a","regular","'for'.","a"]},{"Key":"using Java","Fragments":["method","interop","interop","functions?","interop","I"]},{"Key":"Java method","Fragments":["calls.","is","which"]},{"Key":" You're","Fragments":["right.","right!","right.","right","still","right","right","using","welcome!","right","using","right,","welcome!","making","so","off","perfectly","right!","definitely","right","lower-casing","lower","get"]},{"Key":"You're right.","Fragments":["I","Updated"]},{"Key":"right. I","Fragments":["will"]},{"Key":"will fix","Fragments":["that","respOnse","that.","in"]},{"Key":"fix that","Fragments":["one."]},{"Key":"It is","Fragments":["complex,","just","a","inconsistent.","a","a","kind","a","idiomatic","distracting","too","clearer","also","preferable","possible","needed","possible","difficult"]},{"Key":"is complex,","Fragments":["I"]},{"Key":"complex, I","Fragments":["probably"]},{"Key":"I probably","Fragments":["should","should","have","would","shouldn't","wouldn't."]},{"Key":"probably should","Fragments":["stop","drop"]},{"Key":"should stop","Fragments":["coding"]},{"Key":"stop coding","Fragments":["at"]},{"Key":"coding at","Fragments":["6"]},{"Key":"at 6","Fragments":["AM."]},{"Key":" Basically,","Fragments":["the"]},{"Key":"Basically, the","Fragments":["only"]},{"Key":"thing that","Fragments":["messes","bothers","I","you","really","I","could","I","I","makes","occurred","threw","you","worked."]},{"Key":"that messes","Fragments":["things"]},{"Key":"messes things","Fragments":["up"]},{"Key":"things up","Fragments":["is","and","a","nicely."]},{"Key":"up is","Fragments":["`map-to`"]},{"Key":"is `map-to`","Fragments":["function"]},{"Key":"`map-to` function","Fragments":["that,"]},{"Key":"function that,","Fragments":["given"]},{"Key":"that, given","Fragments":["target"]},{"Key":"given target","Fragments":["acid’s"]},{"Key":"target acid’s","Fragments":["name,"]},{"Key":"acid’s name,","Fragments":["produces"]},{"Key":"name, produces","Fragments":["a"]},{"Key":"produces a","Fragments":["map","new"]},{"Key":"map (which","Fragments":["is,"]},{"Key":"(which is,","Fragments":["conveniently,"]},{"Key":"is, conveniently,","Fragments":["a"]},{"Key":"conveniently, a","Fragments":["function)"]},{"Key":"a function)","Fragments":["that","so"]},{"Key":"function) that","Fragments":["enables"]},{"Key":"that enables","Fragments":["1-to-1"]},{"Key":"enables 1-to-1","Fragments":["mapping"]},{"Key":"1-to-1 mapping","Fragments":["from"]},{"Key":"mapping from","Fragments":["DNA"]},{"Key":"from DNA","Fragments":["nucleotides"]},{"Key":"DNA nucleotides","Fragments":["to","characters","not","to"]},{"Key":"nucleotides to","Fragments":["target's","RNA","keep"]},{"Key":"to target's","Fragments":["acid"]},{"Key":"target's acid","Fragments":["nucleotides."]},{"Key":" Then,","Fragments":["we","you","what"]},{"Key":"Then, we","Fragments":["just"]},{"Key":"we just","Fragments":["pass"]},{"Key":"just pass","Fragments":["every","it","it","`base`","the","the"]},{"Key":"pass every","Fragments":["nucleotide"]},{"Key":"every nucleotide","Fragments":["from","we"]},{"Key":"nucleotide from","Fragments":["our"]},{"Key":"from our","Fragments":["DNA"]},{"Key":"our DNA","Fragments":["to"]},{"Key":"DNA to","Fragments":["this"]},{"Key":"this function/map,","Fragments":["obtaining"]},{"Key":"function/map, obtaining","Fragments":["corresponding"]},{"Key":"obtaining corresponding","Fragments":["RNA"]},{"Key":"corresponding RNA","Fragments":["nucleotide"]},{"Key":"RNA nucleotide","Fragments":["and"]},{"Key":"nucleotide and","Fragments":["convert"]},{"Key":"and convert","Fragments":["resulting"]},{"Key":"convert resulting","Fragments":["list"]},{"Key":"resulting list","Fragments":["to"]},{"Key":"list to","Fragments":["string.","a"]},{"Key":" Since","Fragments":["I","you're","you","it","everything","this","you're","your","all","you","Clojure","these","convert-nucleotide","regex","you're","you"]},{"Key":"Since I","Fragments":["know"]},{"Key":"know I","Fragments":["_love_","could","was","can"]},{"Key":"I _love_","Fragments":["to"]},{"Key":"_love_ to","Fragments":["over-engineer"]},{"Key":"to over-engineer","Fragments":["things,"]},{"Key":"over-engineer things,","Fragments":["I"]},{"Key":"things, I","Fragments":["probably"]},{"Key":"should drop","Fragments":["factories"]},{"Key":"drop factories","Fragments":["and"]},{"Key":"factories and","Fragments":["move"]},{"Key":"and move","Fragments":["back","`]`","the","it"]},{"Key":"move back","Fragments":["to"]},{"Key":"back to","Fragments":["plain","`toUpperCase`","improving","doing","string","this","normal.","naming","my","regexes","you","myself","Java's","this","`string/replace`","string","update","a","Strings","a","the"]},{"Key":"to plain","Fragments":["and"]},{"Key":"plain and","Fragments":["simple"]},{"Key":"and simple","Fragments":["hardcoded","function,","I'd","solution,"]},{"Key":"simple hardcoded","Fragments":["zipmap"]},{"Key":"hardcoded zipmap","Fragments":["(also,"]},{"Key":"zipmap (also,","Fragments":["it"]},{"Key":"(also, it","Fragments":["would"]},{"Key":"make more","Fragments":["sense","sense.","sense"]},{"Key":"more sense","Fragments":["from","in","to","for","given"]},{"Key":"sense from","Fragments":["target"]},{"Key":"from target","Fragments":["domain"]},{"Key":"target domain","Fragments":["point.)"]},{"Key":" Thank","Fragments":["you","you.","you.","you,","you","you!","you!","you","you,","you.","you","you","you","you","you.","you","you,","you","You.","you","you!","you","you.","you.","you.","you","you","you","you.","you.","you","you.","you.","you","you,","you","you","you.","you","you","you","you","you","you","you!","you","you","you!","you","you","you"]},{"Key":"pointing out","Fragments":["that","the"]},{"Key":"out that","Fragments":["it’s","using","the","it","it's","(fn","doing"]},{"Key":"that it’s","Fragments":["way"]},{"Key":"it’s way","Fragments":["too"]},{"Key":"way too","Fragments":["complex,","much.","many"]},{"Key":"too complex,","Fragments":["hope"]},{"Key":"complex, hope","Fragments":["you’ll"]},{"Key":"hope you’ll","Fragments":["find"]},{"Key":"you’ll find","Fragments":["a"]},{"Key":"a minute","Fragments":["to","to"]},{"Key":"minute to","Fragments":["peek","figure"]},{"Key":"to peek","Fragments":["on","to"]},{"Key":"peek on","Fragments":["simplified"]},{"Key":"on simplified","Fragments":["submission!"]},{"Key":"In particular","Fragments":["there"]},{"Key":"particular there","Fragments":["is"]},{"Key":"is `upper`","Fragments":["in"]},{"Key":"`upper` in","Fragments":["`clojure.string`,"]},{"Key":"in `clojure.string`,","Fragments":["and"]},{"Key":"`clojure.string`, and","Fragments":["since"]},{"Key":"since you","Fragments":["are","do","then","point","are","noticed","declared","have","don't","are","cannot","have"]},{"Key":"you are","Fragments":["already","calling","doing","doing","doing","almost","totally","right,","referring","talking","at","at","processing","right.","doing","new","reinventing","creating","accessing:","also","looking","making","up","providing","counting","reducing","leveraging","talking","only","correct","not","comparing","using","sorting","asking","yelling","using","correct..","comparing","right","splitting","splitting","using","trying","planning","to","defining","doing.","already","using"]},{"Key":"are already","Fragments":["using","seq-able","`seq-able`","char","throwing"]},{"Key":"already using","Fragments":["`blank?`","`into","regexps"]},{"Key":"using `blank?`","Fragments":["it","instead"]},{"Key":"`blank?` it","Fragments":["wouldn't"]},{"Key":"be too","Fragments":["bad","\"noisy\")","DRY","witty"]},{"Key":"too bad","Fragments":["to","we"]},{"Key":"bad to","Fragments":["use","me"]},{"Key":"use pure","Fragments":["Clojure."]},{"Key":"had considered","Fragments":["that"]},{"Key":"considered that","Fragments":["the","option"]},{"Key":"first time","Fragments":["around","working","and","`robot-name`","I","I","you","writing","I've"]},{"Key":"time around","Fragments":["but"]},{"Key":"around but","Fragments":["wanted"]},{"Key":"but wanted","Fragments":["to","to","to"]},{"Key":"to try","Fragments":["it","all","out","and","to","some","writing","it","to","out","for","either","to","and","the","Clojure's","out","and","it","some","looking"]},{"Key":"try it","Fragments":["a","yourself",":)"]},{"Key":"different way.","Fragments":["Now"]},{"Key":"way. Now","Fragments":["that"]},{"Key":"I look","Fragments":["at","forward","up.","forward"]},{"Key":"at it","Fragments":["I","after","to","know","now,","you","I","again","again"]},{"Key":"it I","Fragments":["definitely","suppose.","have","use"]},{"Key":"think `screaming?`","Fragments":["could"]},{"Key":"`screaming?` could","Fragments":["be"]},{"Key":"be shortenedup.","Fragments":["Maybe"]},{"Key":"shortenedup. Maybe","Fragments":["with"]},{"Key":"Maybe with","Fragments":["`String#toUpperCase`?"]},{"Key":"Nice work","Fragments":["with"]},{"Key":"work with","Fragments":["intention","strings","sequence","ASCII,","Clojure","a","characters","it","just","bob_test.clj","map"]},{"Key":"revealing private","Fragments":["methods"]},{"Key":"probably fine,","Fragments":["but"]},{"Key":"fine, but","Fragments":["in","making","I'd","there","I","is"]},{"Key":"in my","Fragments":["submission,","next","intent,","opinion.","next","own","opinion","opinion.","previous","`.vimrc`","head.","first","opinion","nitpick","ruby","opinion.","previous","solution,","craw.","Ruby","next","opinion","function","life...","local","opinion","toolbox!","implementation.","original","code,","opinion","`question?`","solution.","function","own","next","original","muscle","verse","opinion.","opinion,","opinion","previous","exercises","experience","opinion.","book","opinion.","brain.","code","code.","code,","eyes","next","version","third","third","solution.","life","version.)","head"]},{"Key":"my submission,","Fragments":["I"]},{"Key":"submission, I","Fragments":["just","intentionally"]},{"Key":"just had","Fragments":["`:else`","it"]},{"Key":"had `:else`","Fragments":["return"]},{"Key":"`:else` return","Fragments":["\"Whatever.\""]},{"Key":"return \"Whatever.\"","Fragments":["and"]},{"Key":"\"Whatever.\" and","Fragments":["didn't"]},{"Key":"and didn't","Fragments":["try","realize","even"]},{"Key":"didn't try","Fragments":["to"]},{"Key":"try to","Fragments":["parse","follow","`require`","keep","push","sort","make","avoid","come","solve","use","sort","balance","find","use","write","address","remain","use","write","get","do","write","DRY","make","post","pull","do","clear","avoid","you","avoid","rethink","implement","select","memoize","replace","fix","tackle","keep","return"]},{"Key":"to parse","Fragments":["a","parentheses","the","mentally.","is","regex"]},{"Key":"parse a","Fragments":["`telling?`"]},{"Key":"a `telling?`","Fragments":["statement."]},{"Key":"`telling?` statement.","Fragments":["That"]},{"Key":"statement. That","Fragments":["said,"]},{"Key":"I appreciate","Fragments":["your","the","that","you","the","your","that","the","you"]},{"Key":"appreciate your","Fragments":["approach.","input,"]},{"Key":" (And","Fragments":["discussion"]},{"Key":"(And discussion","Fragments":["on"]},{"Key":"discussion on","Fragments":["http://exercism.io/submissions/51fd9cf6df1d8bf5630000e1","http://exercism.io/submissions/51febc6b3f8cb9ba45000108","the","this"]},{"Key":"on http://exercism.io/submissions/51fd9cf6df1d8bf5630000e1","Fragments":["as"]},{"Key":"http://exercism.io/submissions/51fd9cf6df1d8bf5630000e1 as","Fragments":["well"]},{"Key":"well —","Fragments":["nitpickers"]},{"Key":"— nitpickers","Fragments":["don't"]},{"Key":"nitpickers don't","Fragments":["seem"]},{"Key":"don't seem","Fragments":["to","to"]},{"Key":"to like","Fragments":["the"]},{"Key":"idea of","Fragments":["a","using","lifting","treating","\"everything","merging","mapping"]},{"Key":"a `cond`","Fragments":["without","is","function","having","with","and","block.","function,","are","with","instead:"]},{"Key":"`cond` without","Fragments":["an"]},{"Key":"without an","Fragments":["`:else`","import."]},{"Key":"an `:else`","Fragments":["even"]},{"Key":"`:else` even","Fragments":["though"]},{"Key":"even though","Fragments":["we","(last","making","the","you've","I","it","the","we're","I","`(="]},{"Key":"though we","Fragments":["don't"]},{"Key":"test case","Fragments":["for","like","on","pass,","to"]},{"Key":"case for","Fragments":["the","-1","using","taking","the","both"]},{"Key":"the general/default","Fragments":["case.)"]},{"Key":"I agree,","Fragments":["actually.","that","the","it","in","the","that"]},{"Key":"agree, actually.","Fragments":["See"]},{"Key":"actually. See","Fragments":["discussion"]},{"Key":"See discussion","Fragments":["on"]},{"Key":"on http://exercism.io/submissions/51febc6b3f8cb9ba45000108","Fragments":["—"]},{"Key":"http://exercism.io/submissions/51febc6b3f8cb9ba45000108 —","Fragments":["it's"]},{"Key":"— it's","Fragments":["an"]},{"Key":"it's an","Fragments":["unhandled","improvement"]},{"Key":"an unhandled","Fragments":["case,"]},{"Key":"unhandled case,","Fragments":["but"]},{"Key":"case, but","Fragments":["it's","I","you","doesn't","in","was"]},{"Key":"it's also","Fragments":["an","cleaner","preferable","responsible","good","good","possible"]},{"Key":"also an","Fragments":["unspecified","extreme"]},{"Key":"an unspecified","Fragments":["and"]},{"Key":"unspecified and","Fragments":["untested"]},{"Key":"and untested","Fragments":["case,"]},{"Key":"untested case,","Fragments":["so"]},{"Key":"case, so","Fragments":["I"]},{"Key":"don't see","Fragments":["a","an","any","it","the","the","the","what","any.","a","any","regex","anything"]},{"Key":"a real","Fragments":["motivation","brain-teaser","system,","program","sequence","world","application"]},{"Key":"real motivation","Fragments":["for"]},{"Key":"motivation for","Fragments":["an"]},{"Key":"for an","Fragments":["`:else`.","unrecognised","alternative","experienced","explanation","AssertionError","extra","API","accumulator","empty","iterative","iterative","interesting","interesting"]},{"Key":"think you","Fragments":["need","could","might","can","should","are","for","can","need","could","should","can","should","should","have","can","could","could","need","could","can","could","could","need","need","need","could","need","need","can","can","would","can","can"]},{"Key":"you need","Fragments":["the","to.","to.","to.","to","or","dramatically.","a","the","a","to.","to","the","to","to","either","to","it.","to","the","all","is","the","directly,","lambdas","to","verse-8","the","a","to","to","to","to","a","to"]},{"Key":"need the","Fragments":["Unexpected","test","`clojure.string`","`clojure.string`","`concat`","last","`seq`","entire","not-silent","pre","`add-frequency`","`(seq","trim.","call","call","`clojure.string`","\\d","explicit","concat"]},{"Key":"the Unexpected","Fragments":["Input"]},{"Key":"Unexpected Input","Fragments":["bit?"]},{"Key":"Input bit?","Fragments":["Without"]},{"Key":"bit? Without","Fragments":["a"]},{"Key":"Without a","Fragments":["test"]},{"Key":"test case,","Fragments":["I","but"]},{"Key":"case, I","Fragments":["think","really","just"]},{"Key":"it's outside","Fragments":["of"]},{"Key":"outside of","Fragments":["the","`clojure.core`.","`response-for`","the","the","the"]},{"Key":"I've gotten","Fragments":["this","a"]},{"Key":"gotten this","Fragments":["response"]},{"Key":"this response","Fragments":["for"]},{"Key":"response for","Fragments":["my","the","a"]},{"Key":"for my","Fragments":["other","next","first","benefit","first","own","thoughts.","submissions","other"]},{"Key":"my other","Fragments":["language","functions"]},{"Key":"other language","Fragments":["responses"]},{"Key":"language responses","Fragments":["as"]},{"Key":"responses as","Fragments":["well."]},{"Key":"well. Unhandled","Fragments":["cases"]},{"Key":"Unhandled cases","Fragments":["weren't"]},{"Key":"cases weren't","Fragments":["tested"]},{"Key":"weren't tested","Fragments":["or"]},{"Key":"tested or","Fragments":["specified."]},{"Key":"or specified.","Fragments":["Perhaps"]},{"Key":"specified. Perhaps","Fragments":["throwing"]},{"Key":"Perhaps throwing","Fragments":["an"]},{"Key":"throwing an","Fragments":["error","AssertionError.","exception.","exception","error"]},{"Key":"an error","Fragments":["would","message.","if","in","(that's","on"]},{"Key":"error would","Fragments":["be"]},{"Key":"the responsible","Fragments":["way"]},{"Key":"responsible way","Fragments":["to"]},{"Key":"handle this","Fragments":["instead"]},{"Key":"this instead","Fragments":["of"]},{"Key":"of responding","Fragments":["with"]},{"Key":"responding with","Fragments":["nil."]},{"Key":"would suggest","Fragments":["making","is","is","you","that","making","using"]},{"Key":"suggest making","Fragments":["response-for","sure"]},{"Key":"making response-for","Fragments":["a"]},{"Key":"response-for a","Fragments":["total"]},{"Key":"a total","Fragments":["function","beginner)"]},{"Key":"total function","Fragments":["for"]},{"Key":"function for","Fragments":["any","naming","splitting","it","every","choosing","retrieving","retrieval.","checking","checking","determining","retrieving","every","splitting","the","defining","working","performance","the","not-blank?,","updating","updating","the","it.","it.","it.","maps.","`pretty-print`."]},{"Key":"for any","Fragments":["input","of","guidelines","feedback!","lowercase","lower"]},{"Key":"any input","Fragments":["string.","that","that"]},{"Key":"input string.","Fragments":["There"]},{"Key":"string. There","Fragments":["are"]},{"Key":"There are","Fragments":["possible","significantly","still","simpler","some","many","a","other","extra","a","a","a","some","a","functions","a","some","some","string","some","ways","also","some","also","also","some","some","a","multiple","two","much","a","many"]},{"Key":"are possible","Fragments":["inputs"]},{"Key":"possible inputs","Fragments":["that"]},{"Key":"inputs that","Fragments":["will"]},{"Key":"will fall","Fragments":["through","back"]},{"Key":"fall through","Fragments":["cond"]},{"Key":"through cond","Fragments":["and"]},{"Key":"cond and","Fragments":["return","case"]},{"Key":"and return","Fragments":["nil.","the","it,","the","the","values.","a","false","a"]},{"Key":" Regexes","Fragments":["avoided"]},{"Key":"Regexes avoided","Fragments":["in"]},{"Key":"avoided in","Fragments":["newest"]},{"Key":"in newest","Fragments":["submission."]},{"Key":"newest submission.","Fragments":["I"]},{"Key":"submission. I","Fragments":["feel","still","was","will"]},{"Key":"I feel","Fragments":["like","like","the","reluctant","like","like","like","dirty","\"nonsense\"","like","there's","like","the","about","like","like","like","these","like","like","like","like","like","like","about","like","like"]},{"Key":"feel like","Fragments":["`:else`","there","lining","I'm","the","the","I've","there","I'm","there's","I","I","I'm","that'll","this","`response-for`","the","a","`frequencies`","they","it's","this","the","a"]},{"Key":"like `:else`","Fragments":["is"]},{"Key":"`:else` is","Fragments":["a","more","used"]},{"Key":"a broader","Fragments":["response","scope"]},{"Key":"broader response","Fragments":["category"]},{"Key":"response category","Fragments":["than"]},{"Key":"category than","Fragments":["the"]},{"Key":"than the","Fragments":["README","code","single","Java","one","other","prefix","single","nested","previous","regular","reader's:","other.","old","`is-blank`","simple","exact","4th","word","solution","string","one","previous","current","name","original.","previous","equivalent","java","```cond```"]},{"Key":"README /","Fragments":["specification"]},{"Key":"/ specification","Fragments":["requested."]},{"Key":"I fixed","Fragments":["the","the","my","up","that."]},{"Key":"fixed the","Fragments":["`defn-`","indentation,"]},{"Key":"the `defn-`","Fragments":["body"]},{"Key":"`defn-` body","Fragments":["style."]},{"Key":"body style.","Fragments":["I've"]},{"Key":"style. I've","Fragments":["seen"]},{"Key":"I've seen","Fragments":["both,","is","doc-strings","use","the","a","recently","in","in","in","in","in","that","map","so","yet.","it","to","apply","so","that."]},{"Key":"seen both,","Fragments":["but"]},{"Key":"both, but","Fragments":["in"]},{"Key":"readable on","Fragments":["two"]},{"Key":"on two","Fragments":["lines."]},{"Key":"logic into","Fragments":["private","private","private","edible","a"]},{"Key":"out `last`","Fragments":["--"]},{"Key":"`last` --","Fragments":["I"]},{"Key":"help simplify","Fragments":["the","your","some"]},{"Key":"the check","Fragments":["for","than","for","for","for","at","that"]},{"Key":"is admittedly","Fragments":["picky,"]},{"Key":"admittedly picky,","Fragments":["but"]},{"Key":"picky, but","Fragments":["are","to"]},{"Key":"but are","Fragments":["`empty?`","then","all"]},{"Key":"are `empty?`","Fragments":["and"]},{"Key":"`empty?` and","Fragments":["`all-caps?`","`trim`"]},{"Key":"and `all-caps?`","Fragments":["the","are"]},{"Key":"`all-caps?` the","Fragments":["best"]},{"Key":"best names?","Fragments":["`question?`"]},{"Key":"names? `question?`","Fragments":["feels"]},{"Key":"`question?` feels","Fragments":["like"]},{"Key":"like it's","Fragments":["a","easy"]},{"Key":"name from","Fragments":["the","an"]},{"Key":"language of","Fragments":["the","the","the"]},{"Key":"domain (a","Fragments":["teenager's"]},{"Key":"(a teenager's","Fragments":["brain),"]},{"Key":"teenager's brain),","Fragments":["but"]},{"Key":"brain), but","Fragments":["the"]},{"Key":"the others","Fragments":["don't.","and","too:"]},{"Key":"Nice and","Fragments":["straightforward.","readable,","compact.","clean","simple"]},{"Key":"and straightforward.","Fragments":["Would"]},{"Key":"straightforward. Would","Fragments":["it"]},{"Key":"define (maybe","Fragments":["private)"]},{"Key":"(maybe private)","Fragments":["vars"]},{"Key":"private) vars","Fragments":["that"]},{"Key":"vars that","Fragments":["give"]},{"Key":"that give","Fragments":["meaningful","you"]},{"Key":"give meaningful","Fragments":["names"]},{"Key":"meaningful names","Fragments":["to","for","for","for","in","in","to","for","to","like","for"]},{"Key":"know of","Fragments":["a","something","a","a","it"]},{"Key":"a single","Fragments":["builtin","clause.","character.","character.","blank","let","DNA","function","`cond`.","line).","function.","pass","`filter`.","line)","line;","`filter`","function","space","reference.","branch,","argument","one","`clojure.string/replace`","regex,","regex","value","`map`.","map","one.","line.","expression","`apply","`if`","reference.","loop,","thing:","string.","split","value.","function.","\"str\"","str","predicate.","predicate.","use","filter,","function","solution."]},{"Key":"single builtin","Fragments":["that"]},{"Key":"builtin that","Fragments":["does"]},{"Key":"does it,","Fragments":["but"]},{"Key":"could `(remove","Fragments":["identity"]},{"Key":"`(remove identity","Fragments":["coll)`"]},{"Key":"identity coll)`","Fragments":["and"]},{"Key":"coll)` and","Fragments":["then"]},{"Key":"then count","Fragments":["that."]},{"Key":"Thanks! Could","Fragments":["you"]},{"Key":"Could you","Fragments":["mark","please","maybe","use","please","combine","think","think","clarify","put","put","name","elaborate?","only","use","detect","give","check","mention"]},{"Key":"you mark","Fragments":["me"]},{"Key":"mark me","Fragments":["as"]},{"Key":"me as","Fragments":["'done'?","well."]},{"Key":"as 'done'?","Fragments":["I'm"]},{"Key":"'done'? I'm","Fragments":["excited"]},{"Key":"I'm excited","Fragments":["to"]},{"Key":"excited to","Fragments":["get"]},{"Key":"get on","Fragments":["to","exercism."]},{"Key":"Thanks !","Fragments":["I","I"]},{"Key":"! I","Fragments":["am","just","didn't","am"]},{"Key":"am completely","Fragments":["new"]},{"Key":"completely new","Fragments":["in"]},{"Key":"new in","Fragments":["clojure,"]},{"Key":"in clojure,","Fragments":["so","let","the","so"]},{"Key":"clojure, so","Fragments":["this","this","a","I'm","that's","I"]},{"Key":"very helpful.","Fragments":["Especially","I"]},{"Key":"helpful. Especially","Fragments":["the"]},{"Key":"Especially the","Fragments":["part"]},{"Key":"the part","Fragments":["about","of","of","about","that"]},{"Key":"part about","Fragments":["not","this","extracting"]},{"Key":"about not","Fragments":["using","having"]},{"Key":"Java interop","Fragments":["for","(`.charAt`,","in","form","is","calls","as","where"]},{"Key":"interop for","Fragments":["everything"]},{"Key":"for everything","Fragments":[":-)","but"]},{"Key":"will submit","Fragments":["a"]},{"Key":"submit a","Fragments":["version","pull","pull-request","much"]},{"Key":"version where","Fragments":["I"]},{"Key":"where I","Fragments":["try","started","find","originally","had","use","validate","was","used","would"]},{"Key":"I try","Fragments":["to","that","to","to","to","to","to","come"]},{"Key":"follow your","Fragments":["advice","own","reasoning"]},{"Key":"your advice","Fragments":[":-)","and","about","further."]},{"Key":"you too!!","Fragments":["I"]},{"Key":"too!! I","Fragments":["barely"]},{"Key":"I barely","Fragments":["know"]},{"Key":"barely know","Fragments":["what"]},{"Key":"I'm doing","Fragments":["in","one","in","anything","now"]},{"Key":"doing in","Fragments":["clojure,","reset-name,","a","the"]},{"Key":"clojure, let","Fragments":["alone"]},{"Key":"let alone","Fragments":["idiomatic","an"]},{"Key":"alone idiomatic","Fragments":["clojure,"]},{"Key":"idiomatic clojure,","Fragments":["so","as","the","but"]},{"Key":"really great","Fragments":["feedback,","tool!"]},{"Key":"great feedback,","Fragments":["thank"]},{"Key":"feedback, thank","Fragments":["you!"]},{"Key":"thank you!","Fragments":["I","replaced","The","`reduce-kv`"]},{"Key":"you! I","Fragments":["would"]},{"Key":"would have","Fragments":["made","probably","to","functions","to","sanitized/normalized","looked","do","the","used","been","to","to","been","to","to","picked","eliminated","just","to","been","been","used","been","to","used","to"]},{"Key":"have made","Fragments":["these","distinct"]},{"Key":"made these","Fragments":["functions"]},{"Key":"these functions","Fragments":["private","and","in"]},{"Key":"functions private","Fragments":["and","so","with","would","would"]},{"Key":"private and","Fragments":["ending","inaccessible","public"]},{"Key":"and ending","Fragments":["in"]},{"Key":"ending in","Fragments":["question"]},{"Key":"in question","Fragments":["marks","in"]},{"Key":"in ruby","Fragments":["but"]},{"Key":"ruby but","Fragments":["wasn't"]},{"Key":"but wasn't","Fragments":["sure","quite"]},{"Key":"right thing","Fragments":["for","to","to","this"]},{"Key":"thing for","Fragments":["clojure","my"]},{"Key":"for clojure","Fragments":["was.","-","(and","documentation:"]},{"Key":" Why","Fragments":["introduce","using","do","isn't","not","shouldn't","don't","measure","require","name","not","did","the","`replace`","do","calculate","didn't","not","you"]},{"Key":"Why introduce","Fragments":["`telling?`"]},{"Key":"introduce `telling?`","Fragments":["when"]},{"Key":"`telling?` when","Fragments":["you"]},{"Key":"when you","Fragments":["could","can","can","retrieve","scan","shadow","canonicalize","check","can","are","look","only","close","only","really","don't","first","know","call","want","call","don't","want","didn't","use","do","need"]},{"Key":"could just","Fragments":["use","use","bind","settle","use","make","combine","make","use","use","name","make","be","user","make","inline","`(re-seq","walk","keep","use","leave","be"]},{"Key":"just use","Fragments":["`:else`","`blank?`","a","`clojure.string/replace`.","`(apply","`frequencies`","`%`","`(apply","`if`","`re-seq`","a","one.","the","different","`:exclude`","the","`(def","the","`str`.","`group-by`","the","'not-empty',","the","the","`dna-to-rna`","the"]},{"Key":"`:else` branch","Fragments":["in"]},{"Key":"branch in","Fragments":["`cond`?"]},{"Key":"can avoid","Fragments":["regexes","the","it.","the","the","having"]},{"Key":"avoid regexes","Fragments":["and","if"]},{"Key":"regexes and","Fragments":["make"]},{"Key":"and make","Fragments":["things","that","you","those","everything","the","valid","`ham-compare`","the","your","the","different","the","it","a","it"]},{"Key":"make things","Fragments":["clearer","significantly","even","readable.","easier","simpler?","look","a","easier"]},{"Key":"things clearer","Fragments":["at"]},{"Key":"clearer at","Fragments":["the"]},{"Key":"Also I'm","Fragments":["no"]},{"Key":"I'm no","Fragments":["Clojure"]},{"Key":"no Clojure","Fragments":["style"]},{"Key":"Clojure style","Fragments":["pundit,","says","(my","guide","guide","guide,","guide](https://github.com/bbatsov/clojure-style-guide#else-keyword-in-cond)"]},{"Key":"style pundit,","Fragments":["but"]},{"Key":"pundit, but","Fragments":["I"]},{"Key":"guess leaving","Fragments":["function"]},{"Key":"leaving function","Fragments":["body"]},{"Key":"function body","Fragments":["on","in","or","makes"]},{"Key":"body on","Fragments":["the","their"]},{"Key":"same line","Fragments":["as","with","as","or","with","with","a","as","as","with",":)","as","as","as","as","as","as","right","as","as","as"]},{"Key":"line as","Fragments":["defn","the","the","opening","the","the","the","the","`let`.","the","your","you","the","the"]},{"Key":"as defn","Fragments":["isn't"]},{"Key":"defn isn't","Fragments":["a"]},{"Key":"isn't a","Fragments":["best","complete","single","`Set`.","terrible","yell","lot"]},{"Key":"a best","Fragments":["practice."]},{"Key":"a character","Fragments":["(literal),","class","or","is","case","array","array","sequence","is"]},{"Key":"character (literal),","Fragments":["of"]},{"Key":"(literal), of","Fragments":["java.something-something.Character"]},{"Key":" Just","Fragments":["makes","don't","my","minor","throwing","wanted","for","a","realized","doing","found","consulted","did","so","trying","to","as"]},{"Key":"Just makes","Fragments":["code"]},{"Key":"makes code","Fragments":["a"]},{"Key":"code a","Fragments":["tad","little","bit.","little","bit","bit","bit.","tiny","smidge,","great","bit","lot","bit"]},{"Key":"a tad","Fragments":["smaller","too"]},{"Key":"tad smaller","Fragments":["dropping"]},{"Key":"smaller dropping","Fragments":["unnecessary"]},{"Key":"dropping unnecessary","Fragments":["cast."]},{"Key":"Ok, thanks.","Fragments":["What's"]},{"Key":"thanks. What's","Fragments":["the"]},{"Key":"What's the","Fragments":["difference?","matter","better","idiomatic"]},{"Key":"the difference?","Fragments":["I"]},{"Key":"difference? I","Fragments":["assume"]},{"Key":"I assume","Fragments":["`str`","the","`=`","that","that","you're"]},{"Key":"assume `str`","Fragments":["casts"]},{"Key":"`str` casts","Fragments":["to"]},{"Key":"casts to","Fragments":["a"]},{"Key":"a string,","Fragments":["but","leading","and"]},{"Key":"string, but","Fragments":["not","I","I","`f`"]},{"Key":"but not","Fragments":["sure","`first-part`.","all.","its","the","the","*logic*.","the","pretty.","sure","fun","sure","a","clarity.","the","very"]},{"Key":"what `\\?`","Fragments":["is"]},{"Key":"`\\?` is","Fragments":["exactly?"]},{"Key":" what","Fragments":["about","about","do"]},{"Key":"about when","Fragments":["the","an","i"]},{"Key":"when the","Fragments":["word","key","s-exp","only","robot","msg","test","first","char","pupil","key"]},{"Key":"the word","Fragments":["is","once","on","separation","is","with","from","alphagram","you","to","you're","you","and","\"javascriptz\"","count","you","is","has","list,","characters.","you","list","you","you","once","does","are"]},{"Key":"word is","Fragments":["unusually","small.","generally","exactly","on","an","not","fine.","an","an"]},{"Key":"is unusually","Fragments":["cased?"]},{"Key":"unusually cased?","Fragments":["Like"]},{"Key":"cased? Like","Fragments":["\"Hello\""]},{"Key":"Like \"Hello\"","Fragments":["vs"]},{"Key":"\"Hello\" vs","Fragments":["\"hello\"?","\"hello\"?","\"hello\"?"]},{"Key":"I submitted","Fragments":["a","instead","a","a","this!","a","a","because","updated","another","a"]},{"Key":"new version","Fragments":["with","without","of","which","taking","now.","based","is","tomorrow.","what","with","looks","it","submitted.","with","that"]},{"Key":"version with","Fragments":["this","private","a","bindings","`-\u003e`","your","re-evaluation","just","some","some"]},{"Key":" Fair","Fragments":["criticisms!","enough.","warning:","enough"]},{"Key":"Fair criticisms!","Fragments":["Honestly"]},{"Key":"criticisms! Honestly","Fragments":["this"]},{"Key":"Honestly this","Fragments":["one"]},{"Key":"this one","Fragments":["was","being","concise","has","better.","accepted","because","is","lean.","is",":\\",":)","looks","while","actually","got"]},{"Key":"one was","Fragments":["so","tough"]},{"Key":"was so","Fragments":["simple","glad"]},{"Key":"so simple","Fragments":["that","however,","and","and"]},{"Key":"simple that","Fragments":["I"]},{"Key":"a rush","Fragments":["to"]},{"Key":"rush to","Fragments":["get"]},{"Key":"next one.","Fragments":[":)","The","This"]},{"Key":"one. :)","Fragments":["Resubmitting."]},{"Key":"checks be","Fragments":["private"]},{"Key":"functions? Also,","Fragments":["it's"]},{"Key":"Also, it's","Fragments":["a","often","more"]},{"Key":"a matter","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"matter of","Fragments":["personal","preference,","taste,","preference)","context.","familiarity","taste","taste.","taste,","taste","a","preference.","preference.","preference,","personal","preference,","preference.","preference.","preference,","personal","taste","taste...","preference","preference","preference","preference.","convention,","familiarity","implementation)","style","preference.","preference.","taste,","taste.","opinion.","preference"]},{"Key":"of personal","Fragments":["preference,","preference","preference.","preference."]},{"Key":"like to","Fragments":["name","do","encourage","figure","hear","reserve","shorten","find","know","be","get","clean","move","point","have","clean","go","see","call","know","solve"]},{"Key":"name my","Fragments":["predicates"]},{"Key":"my predicates","Fragments":["with"]},{"Key":"predicates with","Fragments":["a","question","cond"]},{"Key":"mark (e.g.","Fragments":["`silent?`)."]},{"Key":"You mean","Fragments":["like","using","line"]},{"Key":"mean like","Fragments":["multimethods,","put"]},{"Key":"like multimethods,","Fragments":["dispatching"]},{"Key":"multimethods, dispatching","Fragments":["on"]},{"Key":"dispatching on","Fragments":["the"]},{"Key":"the kind","Fragments":["of","of","of","words,","of"]},{"Key":"kind of","Fragments":["statement?","transformation","parallelism","situation.","feedback","problem","nitpicking,","confusing,","sort","message","convenient","want","delimiters,","awkward","awkward","message","thing","collection","an","problems","shortcuts,","happy","leaning","use","gross.","see","lost","idiomatic","awkward.","like","awkward","odd","heavy.","stands","double","a","character","inputs","weird.","convoluted.","hangs","reducing","things."]},{"Key":"of statement?","Fragments":["I"]},{"Key":"statement? I","Fragments":["thought"]},{"Key":"thought that","Fragments":["might","2","I","you","I","would","would","regular","using"]},{"Key":"be overkill,","Fragments":["given"]},{"Key":"overkill, given","Fragments":["the"]},{"Key":"the \"let\"","Fragments":["accomplishes"]},{"Key":"\"let\" accomplishes","Fragments":["encapsulation"]},{"Key":"accomplishes encapsulation","Fragments":["through"]},{"Key":"encapsulation through","Fragments":["lexical"]},{"Key":"through lexical","Fragments":["scoping"]},{"Key":"lexical scoping","Fragments":["and"]},{"Key":"scoping and","Fragments":["keeps"]},{"Key":"and keeps","Fragments":["the"]},{"Key":"keeps the","Fragments":["benefit","knowledge","implementation"]},{"Key":"the benefit","Fragments":["of","is","of","of","of"]},{"Key":"of explicitly","Fragments":["naming","throwing"]},{"Key":"explicitly naming","Fragments":["each"]},{"Key":"naming each","Fragments":["category."]},{"Key":" Hey,","Fragments":["this","it's","I","cool!","I","thank","good","now","I","I","code"]},{"Key":"Hey, this","Fragments":["is"]},{"Key":"looking pretty","Fragments":["good.","good."]},{"Key":"pretty good.","Fragments":["How","Nice"]},{"Key":"good. How","Fragments":["come"]},{"Key":"How come","Fragments":["you","you"]},{"Key":"come you","Fragments":["are","didn't"]},{"Key":"are calling","Fragments":["str"]},{"Key":"calling str","Fragments":["on"]},{"Key":"str on","Fragments":["the"]},{"Key":"the return","Fragments":["value(s)","value?","value","value.","to","value.","a","values"]},{"Key":"return value(s)","Fragments":["of"]},{"Key":"value(s) of","Fragments":["this"]},{"Key":"Also, you","Fragments":["can","are","might","could","may","could","can","should","can","might","might","may","can","can","can","can","can","don't","just","could"]},{"Key":"can collapse","Fragments":["the"]},{"Key":"collapse the","Fragments":["require","first"]},{"Key":"the require","Fragments":["into","since","into","form.","call","for"]},{"Key":"require into","Fragments":["your","the"]},{"Key":"into your","Fragments":["namespace","project","code?","code?","namespace.","ns","namespace"]},{"Key":"your namespace","Fragments":["declaration","to:","declaration","to","declaration?","at","(ie","has","declaration","so","by"]},{"Key":"namespace declaration","Fragments":["(see","to:","so","so"]},{"Key":"declaration (see","Fragments":["the"]},{"Key":"(see the","Fragments":["docs"]},{"Key":"docs for","Fragments":["the"]},{"Key":"not particularly","Fragments":["fond","happy","happy"]},{"Key":"particularly fond","Fragments":["of"]},{"Key":"fond of","Fragments":["my","relying","the"]},{"Key":"of my","Fragments":["`count-falsey`","own","very","first","collection","code.","code.","ruby/bob","day-job","head","biggest","first","Python","haskell","depth","code.","helpers","own","head","time","first","code","own","\"throw","clojure.string/join.","solutions!"]},{"Key":"my `count-falsey`","Fragments":["function."]},{"Key":"`count-falsey` function.","Fragments":["I"]},{"Key":"function. I","Fragments":["feel","prefer","am","love","think","didn't","used","rescind","think"]},{"Key":"like there","Fragments":["must","must","should"]},{"Key":"there must","Fragments":["be","be","be","be","be"]},{"Key":"be an","Fragments":["equivalent","impatient","improvement.","anagram","anagram","easier","improvement."]},{"Key":"an equivalent","Fragments":["of"]},{"Key":"equivalent of","Fragments":["Elixir's","you"]},{"Key":"of Elixir's","Fragments":["`Enum.count/2`"]},{"Key":"Elixir's `Enum.count/2`","Fragments":["built"]},{"Key":"`Enum.count/2` built","Fragments":["in,"]},{"Key":"built in,","Fragments":["but"]},{"Key":"in, but","Fragments":["I"]},{"Key":"I couldn't","Fragments":["find","figure","find","get","figure","find","figure","get","find","find","think","get","think"]},{"Key":"couldn't find","Fragments":["it,","any","it.","anything.","the","an","anything"]},{"Key":"find it,","Fragments":["something"]},{"Key":"it, something","Fragments":["which"]},{"Key":"something which","Fragments":["would"]},{"Key":"which would","Fragments":["take","make","otherwise","fit","have","have","be","then","make","contain","be","seem","allow","turn","allow","probably","be","offer","not","make","also","take","allow"]},{"Key":"would take","Fragments":["a","`month`"]},{"Key":"a predicate","Fragments":["and","function.","function","and","before,","like","to","called"]},{"Key":"predicate and","Fragments":["a","takes"]},{"Key":"and a","Fragments":["seq","bit","collection","second","bit","yell?","question?,","list","high","rna","question.","map:","sequence","keyword","reference","bit","newline","normal","regular","place)","set"]},{"Key":"a seq","Fragments":["and","of","instead","of","on"]},{"Key":"seq and","Fragments":["count"]},{"Key":"and count","Fragments":["how","truthy","that","but","part"]},{"Key":"count how","Fragments":["many"]},{"Key":"how many","Fragments":["elements","etc.","lines"]},{"Key":"many elements","Fragments":["satisfy"]},{"Key":"elements satisfy","Fragments":["that"]},{"Key":"satisfy that","Fragments":["predicate."]},{"Key":"that predicate.","Fragments":["Does"]},{"Key":"predicate. Does","Fragments":["anyone"]},{"Key":"Does anyone","Fragments":["know"]},{"Key":"anyone know","Fragments":["of","of"]},{"Key":"of something","Fragments":["like","like"]},{"Key":"Great take!","Fragments":["Nice"]},{"Key":"take! Nice","Fragments":["structure"]},{"Key":"Nice structure","Fragments":["and"]},{"Key":"structure and","Fragments":["naming.","good","use","intent"]},{"Key":"The only","Fragments":["thing","other","function","thing","check","tiny","caveat","things","thing","thing","reason","thing","confusing","thing","suggestion","thing","thing","trade-off","thing","thing","I'd","trouble","other","other","thing","nitpick","solution"]},{"Key":"that bothers","Fragments":["me"]},{"Key":"me is","Fragments":["regexp","news)."]},{"Key":"is regexp","Fragments":["in"]},{"Key":"regexp in","Fragments":["`question?`.","`question?`?"]},{"Key":"in `question?`.","Fragments":["Maybe","Strings"]},{"Key":"`question?`. Maybe","Fragments":["there’s"]},{"Key":" Well,","Fragments":["those","this","this","that's","yes","a","the","I","at","clojure.string/join"]},{"Key":"Well, those","Fragments":["are"]},{"Key":"those are","Fragments":["not","literals.","not","cool!","some"]},{"Key":"not methods,","Fragments":["but"]},{"Key":"methods, but","Fragments":["since","it"]},{"Key":"but since","Fragments":["we’re","I","the","I","we"]},{"Key":"since we’re","Fragments":["not"]},{"Key":"we’re not","Fragments":["using"]},{"Key":"using them","Fragments":["anywhere","will","polymorphically"]},{"Key":"them anywhere","Fragments":["—"]},{"Key":"anywhere —","Fragments":["not"]},{"Key":"— not","Fragments":["bad!"]},{"Key":" Are","Fragments":["you","not","you","you","you","you","you","the","function","the","you","there","you"]},{"Key":"Are you","Fragments":["sure","aware","familiar","thinking","familiar","familiar","familiar","using","saying","sure"]},{"Key":"you sure","Fragments":["there","it"]},{"Key":"sure there","Fragments":["is","must","was","is","was","are"]},{"Key":"is no","Fragments":["way","need","docstring","difference","real","docstring.","need","`def-`.","else","need","longer","need","special","special","`shouting?`.","else"]},{"Key":"no way","Fragments":["to","intuitive"]},{"Key":"avoid regexp","Fragments":["in"]},{"Key":"first version","Fragments":["makes","that"]},{"Key":"version makes","Fragments":["all"]},{"Key":"makes all","Fragments":["functions"]},{"Key":"all functions","Fragments":["from","should","operating","apart","-"]},{"Key":"functions from","Fragments":["clojure.string","inside","clojure.string","string","data.","the","clojure.string,","a"]},{"Key":"from clojure.string","Fragments":["available,","so","into"]},{"Key":"clojure.string available,","Fragments":["but"]},{"Key":"available, but","Fragments":["you"]},{"Key":"the `str/`","Fragments":["prefix"]},{"Key":"`str/` prefix","Fragments":["to"]},{"Key":"prefix to","Fragments":["call"]},{"Key":"to call","Fragments":["them.","its","`seq`","`get`","something","`str`","the","dna-rna","the","out","`contains?`","`assoc`","collections","`upper-case`","triml","the","it"]},{"Key":"call them.","Fragments":["The"]},{"Key":"them. The","Fragments":["second"]},{"Key":"The second","Fragments":["version","one","`or`","expression","macro","condition"]},{"Key":"second version","Fragments":["pulls"]},{"Key":"version pulls","Fragments":["in"]},{"Key":"pulls in","Fragments":["only"]},{"Key":"in only","Fragments":["`upper-case`,"]},{"Key":"only `upper-case`,","Fragments":["and"]},{"Key":"`upper-case`, and","Fragments":["you"]},{"Key":"can call","Fragments":["it","```last```","one","`s/lower-case`.","it"]},{"Key":"call it","Fragments":["without","wouldn't","with","from","again","code","without"]},{"Key":"it without","Fragments":["a","resorting","anonymous","anonymous","any","wrapping"]},{"Key":"to `lower-case`","Fragments":["the","and"]},{"Key":"`lower-case` the","Fragments":["phrase"]},{"Key":"phrase before","Fragments":["splitting"]},{"Key":"before splitting","Fragments":["it?","it;"]},{"Key":"considered using","Fragments":["upper-case","one","`re-seq`","the","`last`","the","the","descriptive","`cond`","```clojure.string/blank?```","a","a","a"]},{"Key":"using upper-case","Fragments":["instead"]},{"Key":"upper-case instead","Fragments":["of"]},{"Key":"to test","Fragments":["all-caps?","it","them","for","against.","for","for","that","either.","for","for,","for","and","not","for","to","whether","for"]},{"Key":"Looks good.","Fragments":["Did","Maybe","What","One","Have","Generally,","In","Some","However,","I'm","There's","Is","I","I've","Have","Have","Minor"]},{"Key":"good. Did","Fragments":["you","you"]},{"Key":"descriptive argument","Fragments":["name?"]},{"Key":"argument name?","Fragments":["The"]},{"Key":"name? The","Fragments":["same"]},{"Key":"The same","Fragments":["for","goes","principle","thing"]},{"Key":"same for","Fragments":["\\T"]},{"Key":"for \\T","Fragments":["and"]},{"Key":"and \\U","Fragments":["what"]},{"Key":"\\U what","Fragments":["do"]},{"Key":"Oh, just","Fragments":["noticed","noticed"]},{"Key":"just noticed","Fragments":["this","that","line"]},{"Key":"noticed this","Fragments":["iteration.","I"]},{"Key":"this iteration.","Fragments":["Moving","Thanks"]},{"Key":"iteration. Moving","Fragments":["my"]},{"Key":"Moving my","Fragments":["comment"]},{"Key":"my comment","Fragments":["here:","on","on"]},{"Key":"On moving","Fragments":["classification","classification"]},{"Key":"moving classification","Fragments":["logic","logic"]},{"Key":"classification logic","Fragments":["out","out"]},{"Key":"logic out","Fragments":["of","of"]},{"Key":"of response-for:","Fragments":["comments"]},{"Key":"response-for: comments","Fragments":["are"]},{"Key":"comments are","Fragments":["great,","great,","probably","welcome"]},{"Key":"are great,","Fragments":["but","but"]},{"Key":"great, but","Fragments":["why","why","`(=","I'm","I","one"]},{"Key":"why have","Fragments":["them","them"]},{"Key":"have them","Fragments":["when","when","do","assume","available","available","on","in"]},{"Key":"them when","Fragments":["you","you"]},{"Key":"can have","Fragments":["aptly","aptly","multiple"]},{"Key":"have aptly","Fragments":["named","named"]},{"Key":"aptly named","Fragments":["methods","methods"]},{"Key":"named methods","Fragments":["that","that"]},{"Key":"methods that","Fragments":["are","are","express","returns","you","you","return","can","are"]},{"Key":" super","Fragments":["easy"]},{"Key":"super easy","Fragments":["to","to"]},{"Key":"More than","Fragments":["that,","that,"]},{"Key":"that, you","Fragments":["get","get","Clojure","can","don't","have","could","can"]},{"Key":"get cleaner","Fragments":["response-for","`response-for`","error"]},{"Key":"cleaner response-for","Fragments":["that"]},{"Key":"response-for that","Fragments":["is"]},{"Key":"that is","Fragments":["easier","easier","left","not","case","represented","a","obscured","completely","a","as","generally","less","less","less","too","good","how","the","already","a","checked","tested","better","applied","the","duplicated","one","desirable.","tested","thousands","the","the","just","the","just","the","a","in","an","addressed"]},{"Key":"is easier","Fragments":["to","to","to"]},{"Key":"read because","Fragments":["comments","comments","of"]},{"Key":"because comments","Fragments":["+","+"]},{"Key":"comments +","Fragments":["conditions","conditions"]},{"Key":"+ conditions","Fragments":["become","become"]},{"Key":"conditions become","Fragments":["just","just"]},{"Key":"become just","Fragments":["method","method"]},{"Key":"just method","Fragments":["names","names"]},{"Key":"method names","Fragments":["—","—","uniform.","are"]},{"Key":"names —","Fragments":["no","no"]},{"Key":"— no","Fragments":["logic","logic"]},{"Key":"no logic","Fragments":["or","or"]},{"Key":"logic or","Fragments":["anything,","anything,"]},{"Key":"or anything,","Fragments":["you","you"]},{"Key":"anything, you","Fragments":["just","just"]},{"Key":"you just","Fragments":["read.","read.","mapped","map","refer","want","skip","check","had","taught"]},{"Key":" Because","Fragments":["it’s","I","I"]},{"Key":"Because it’s","Fragments":["native"]},{"Key":"it’s native","Fragments":["=\u003e"]},{"Key":"native =\u003e","Fragments":["reads"]},{"Key":"=\u003e reads","Fragments":["better?"]},{"Key":"reads better?","Fragments":["I"]},{"Key":"better? I","Fragments":["am"]},{"Key":"am no","Fragments":["Java"]},{"Key":"no Java","Fragments":["programmer"]},{"Key":"Java programmer","Fragments":["and"]},{"Key":"programmer and","Fragments":["when"]},{"Key":"and when","Fragments":["working","you","to","I","to"]},{"Key":"when working","Fragments":["with","in","with"]},{"Key":"working with","Fragments":["Clojure","such","strings","lazy","assert.","associative"]},{"Key":"Clojure I","Fragments":["frown","wrote","guess","ever"]},{"Key":"I frown","Fragments":["hard"]},{"Key":"frown hard","Fragments":["when"]},{"Key":"hard when","Fragments":["I"]},{"Key":"see something","Fragments":["in"]},{"Key":"something in","Fragments":["Java.","the","clojure.core","the","clojure"]},{"Key":"this particular","Fragments":["case","test).","case?"]},{"Key":"particular case","Fragments":["it’s","(logical","won't"]},{"Key":"case it’s","Fragments":["not"]},{"Key":"it’s not","Fragments":["that"]},{"Key":"not that","Fragments":["hard","critical","terribly","exercism","great.","intuitive","happy"]},{"Key":"that hard","Fragments":["to"]},{"Key":"hard to","Fragments":["figure","find","improve","understand.","read.","be","decipher","get","read.","follow.","read","tell","argue","read","follow,","justify","read","follow.","parse","follow","disginguish","understand.","read.","read","avoid"]},{"Key":"figure what","Fragments":["that"]},{"Key":"that Java","Fragments":["method"]},{"Key":"method is","Fragments":["doing,","good.","limited","then","explicit","essentially","not","being"]},{"Key":"is doing,","Fragments":["but","but","but","at"]},{"Key":"doing, but","Fragments":["there","not","it"]},{"Key":"but there","Fragments":["could","is","is","are","is","should","is"]},{"Key":"there could","Fragments":["be"]},{"Key":"be cases","Fragments":["when"]},{"Key":"cases when","Fragments":["it"]},{"Key":" TL;DR","Fragments":["when"]},{"Key":"TL;DR when","Fragments":["writing"]},{"Key":"when writing","Fragments":["Clojure","in"]},{"Key":"writing Clojure","Fragments":["prefer"]},{"Key":"Clojure prefer","Fragments":["using"]},{"Key":"prefer using","Fragments":["Clojure","the"]},{"Key":"using Clojure","Fragments":["instead","language"]},{"Key":"Clojure instead","Fragments":["of"]},{"Key":"of `response-for`:","Fragments":["comments"]},{"Key":"`response-for`: comments","Fragments":["are"]},{"Key":" *","Fragments":["reusable","super","You","Thanks.","`:use`","I","L9:","`defn-`","It","character","there","Might","What","Lastly,","You","Also","Not","Docstrings","I","You","You've","It","Why","I'd","If","It's","Predicate","It's","Is","A","the","is-xxx?","the","You","You","To","clojure/string","Better","Using","`remove`","using","there's","think,","do","That","`re-find`","The","Then","All","Replaced","Removed"]},{"Key":"* super","Fragments":["easy"]},{"Key":"cleaner `response-for`","Fragments":["that"]},{"Key":"`response-for` that","Fragments":["is"]},{"Key":"Ah, great,","Fragments":["thanks"]},{"Key":"great, thanks","Fragments":[":)"]},{"Key":"thanks :)","Fragments":["Does"]},{"Key":":) Does","Fragments":["that"]},{"Key":"Does that","Fragments":["just"]},{"Key":"that just","Fragments":["include","passes","be"]},{"Key":"just include","Fragments":["the"]},{"Key":"include the","Fragments":["`upper-case`","robot"]},{"Key":"the `upper-case`","Fragments":["function"]},{"Key":"`upper-case` function","Fragments":["in","calls"]},{"Key":"the `bob`","Fragments":["namespace?","ns"]},{"Key":" Hey","Fragments":["good","driis,","Shane.",":)","Rich","Rich","this"]},{"Key":"Hey good","Fragments":["to"]},{"Key":" A","Fragments":["few","few","couple","common","slightly","new","good","true","couple","few","bit","lot","minor","couple","straight","better","common","hint","verbose","couple","couple","couple","couple","solution","few","`set`","bit","few","hint","few","quick","little","solution","few","small","`def`","more"]},{"Key":"few minor","Fragments":["things,","consistency"]},{"Key":"minor things,","Fragments":["probably"]},{"Key":"things, probably","Fragments":["personal"]},{"Key":"probably personal","Fragments":["preference:"]},{"Key":"personal preference:","Fragments":["Coming"]},{"Key":"preference: Coming","Fragments":["from"]},{"Key":"Coming from","Fragments":["ruby,","Ruby","a"]},{"Key":"from ruby,","Fragments":["I"]},{"Key":"ruby, I","Fragments":["like"]},{"Key":"like my","Fragments":["predicate","method"]},{"Key":"my predicate","Fragments":["methods","functions."]},{"Key":"methods (er,","Fragments":["functions,"]},{"Key":"(er, functions,","Fragments":["here,"]},{"Key":"functions, here,","Fragments":["I"]},{"Key":"here, I","Fragments":["guess)"]},{"Key":"I guess)","Fragments":["to"]},{"Key":"guess) to","Fragments":["end"]},{"Key":"to end","Fragments":["with","all","predicates'","your","predicates","methods","functions","with","function","up"]},{"Key":"end with","Fragments":["a","in","closing","a","a","a","a","?s.","an","an"]},{"Key":"question mark.","Fragments":["Also,","e.g.","So","I"]},{"Key":"mark. Also,","Fragments":["do"]},{"Key":"string checking","Fragments":["functions"]},{"Key":"functions should","Fragments":["be","probably","probably","assume","be","be","be","return"]},{"Key":"I'm on","Fragments":["the","the","the","the","a"]},{"Key":"the fence","Fragments":["between","about","here."]},{"Key":"fence between","Fragments":["falling"]},{"Key":"between falling","Fragments":["back"]},{"Key":"falling back","Fragments":["to","to"]},{"Key":"to `toUpperCase`","Fragments":["and"]},{"Key":"`toUpperCase` and","Fragments":["importing"]},{"Key":"and importing","Fragments":["`upper-case`","some"]},{"Key":"importing `upper-case`","Fragments":["from"]},{"Key":"`upper-case` from","Fragments":["clojure.string...","`clojure.string`"]},{"Key":" Alternatively,","Fragments":["you","you","you","I"]},{"Key":"Alternatively, you","Fragments":["could","could","could","may","can","can"]},{"Key":"change your","Fragments":["namespace","regex"]},{"Key":" (require","Fragments":["[clojure.string","[clojure.string","[clojure.string","[clojure.string","[clojure.string"]},{"Key":"(require [clojure.string","Fragments":[":refer",":as",":as",":refer",":as",":as",":as",":as",":as",":as"]},{"Key":" and","Fragments":["then","unfortunately,","point","then","checking","your"]},{"Key":"use `upper-case`","Fragments":["without"]},{"Key":"`upper-case` without","Fragments":["any"]},{"Key":"without any","Fragments":["prefix.","needless","hesitation","problems.","explicit","regular","additional","problems.","testing.","regexps."]},{"Key":" Here's","Fragments":["one","a","an","[a","one","my","a"]},{"Key":"Here's one","Fragments":["way","way"]},{"Key":"one way","Fragments":["to","of","to"]},{"Key":"to clean","Fragments":["it","up","up","up","up","stuff","the","this","up","out"]},{"Key":"clean it","Fragments":["up"]},{"Key":"it up","Fragments":["a","dynamically,","by","I","a","a","well","a","as"]},{"Key":"up a","Fragments":["bit:","few","smidge.","few","little.","simplification","key","bit","bit,","bit."]},{"Key":"a bit:","Fragments":["Change"]},{"Key":"bit: Change","Fragments":["your"]},{"Key":"Change your","Fragments":["namespace"]},{"Key":"Then, you","Fragments":["can","can"]},{"Key":" Didn't","Fragments":["know","quite","read"]},{"Key":"about frequencies,","Fragments":["thanks"]},{"Key":"frequencies, thanks","Fragments":["for"]},{"Key":"the tip!","Fragments":["Will","@zita"]},{"Key":"tip! Will","Fragments":["refactor."]},{"Key":"Nice. One","Fragments":["(minor)"]},{"Key":"One (minor)","Fragments":["point"]},{"Key":"(minor) point","Fragments":["--"]},{"Key":"point --","Fragments":["`yelling?`","fixed"]},{"Key":"-- `yelling?`","Fragments":["and"]},{"Key":"`yelling?` and","Fragments":["`question?`","`question?`.","`silence?`","`silence?`","`question?`.","`question?`","`question?`","`question?`,"]},{"Key":"`question?` seem","Fragments":["to"]},{"Key":"be language","Fragments":["from"]},{"Key":"language from","Fragments":["the","the","the"]},{"Key":"domain (how","Fragments":["Bob","a"]},{"Key":"(how Bob","Fragments":["would"]},{"Key":"would describe","Fragments":["a","having"]},{"Key":"describe a","Fragments":["given"]},{"Key":"a given","Fragments":["statement),","statement","string.","language","pattern","statement.","program","API.","word","predicates","predicate","set.","number","sentiment,","nucleotide","grade","grade","stmt.","stmt.","method.","item,"]},{"Key":"given statement),","Fragments":["but"]},{"Key":"statement), but","Fragments":["I'm"]},{"Key":"but I'm","Fragments":["not","sure","curious","not","learning","going","still","confused","not","interested","confused","not","not","not","coming","sure","having","more","thankful","still","not","not","leaving","wondering","not","not","not","certainly","still","looking","not"]},{"Key":"sure that","Fragments":["`empty?`","you","eliminating","the","a","they","the","it'","it's","there","my","I"]},{"Key":"that `empty?`","Fragments":["is.","describes"]},{"Key":"agree --","Fragments":["those"]},{"Key":"-- those","Fragments":["particular"]},{"Key":"those particular","Fragments":["names"]},{"Key":"particular names","Fragments":["don't"]},{"Key":"names don't","Fragments":["speak"]},{"Key":"don't speak","Fragments":["to","the"]},{"Key":"speak to","Fragments":["me,"]},{"Key":"me, but","Fragments":["I","I","i'm","i'm","I"]},{"Key":"I rather","Fragments":["liked","agree","like","like"]},{"Key":"rather liked","Fragments":["one"]},{"Key":"liked one","Fragments":["submitter's"]},{"Key":"one submitter's","Fragments":["use"]},{"Key":"submitter's use","Fragments":["of"]},{"Key":"of \"heard\",","Fragments":["since"]},{"Key":"\"heard\", since","Fragments":["it"]},{"Key":"since it","Fragments":["conveys","is","works","was","does","uses","accomplishes","bit","will","is","didn't,","works","keeps","overrides","could","can","no","counts"]},{"Key":"it conveys","Fragments":["meaning"]},{"Key":"conveys meaning","Fragments":["and"]},{"Key":"meaning and","Fragments":["provenance,"]},{"Key":"and provenance,","Fragments":["but"]},{"Key":"provenance, but","Fragments":["it's"]},{"Key":"it's still","Fragments":["fairly","fine.","a","not"]},{"Key":"I disagree","Fragments":["on","that","about","with","with","with",":-)"]},{"Key":"disagree on","Fragments":["the","this"]},{"Key":"value of","Fragments":["intention-revealing","the","line","the","a","the","the","the","that","the"]},{"Key":"of intention-revealing","Fragments":["names.","names"]},{"Key":"intention-revealing names.","Fragments":["What"]},{"Key":"What you","Fragments":["have","want","said","said"]},{"Key":"have is","Fragments":["readable,","that","that","the","how"]},{"Key":"is readable,","Fragments":["but"]},{"Key":"readable, but","Fragments":["only","I","it"]},{"Key":"but only","Fragments":["*what*","returns","if"]},{"Key":"only *what*","Fragments":["you"]},{"Key":"*what* you","Fragments":["are"]},{"Key":"are doing","Fragments":["or","it.","it","two"]},{"Key":"doing or","Fragments":["*how*"]},{"Key":"or *how*","Fragments":["you"]},{"Key":"*how* you","Fragments":["are"]},{"Key":"doing it.","Fragments":["There"]},{"Key":"it. There","Fragments":["isn't"]},{"Key":"There isn't","Fragments":["much","so","much"]},{"Key":"isn't much","Fragments":["communicated","to"]},{"Key":"much communicated","Fragments":["about"]},{"Key":"communicated about","Fragments":["*why*"]},{"Key":"about *why*","Fragments":["you"]},{"Key":"*why* you","Fragments":["are"]},{"Key":"it --","Fragments":["that"]},{"Key":"-- that","Fragments":["is","feels"]},{"Key":"is left","Fragments":["to","is"]},{"Key":"left to","Fragments":["inference","right,","right"]},{"Key":"to inference","Fragments":["on"]},{"Key":"inference on","Fragments":["the"]},{"Key":"part of","Fragments":["the","the","the","the","FP","the","public","`sing`","a","a","a","a","the","the","stack","the","the","the","the","the","writing","your","the","the","the","variable","Clojure","the","the","the"]},{"Key":"the reader.","Fragments":["In"]},{"Key":"reader. In","Fragments":["this"]},{"Key":"this simple","Fragments":["example,","example","case"]},{"Key":"simple example,","Fragments":["it's"]},{"Key":"example, it's","Fragments":["probably","idiomatic"]},{"Key":"probably straightforward","Fragments":["to"]},{"Key":"straightforward to","Fragments":["reason"]},{"Key":"to reason","Fragments":["through,","about"]},{"Key":"reason through,","Fragments":["but"]},{"Key":"through, but","Fragments":["in"]},{"Key":"in general,","Fragments":["I","though.","I'm","apart"]},{"Key":"I prefer","Fragments":["to","to","native","to","the","statements","the","putting","the","to","your","the","the","to","yelling?","the","shorter","to","your"]},{"Key":"prefer to","Fragments":["have","scope","put","give","use","leave","see","make","have","using","be","supply","alias","see","reserve"]},{"Key":"have functions","Fragments":["with","with","that"]},{"Key":"with names","Fragments":["from","that","meaningful","that","from","that"]},{"Key":"names from","Fragments":["the","the","others.","the"]},{"Key":"the domain.","Fragments":["(Most)","Would","Bob"]},{"Key":"domain. (Most)","Fragments":["teenagers"]},{"Key":"(Most) teenagers","Fragments":["probably"]},{"Key":"teenagers probably","Fragments":["think"]},{"Key":"probably think","Fragments":["about","of"]},{"Key":"about things","Fragments":["in","people"]},{"Key":"things in","Fragments":["terms","clojure.","clojure.","sequence,"]},{"Key":"in terms","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"terms of","Fragments":["`shouting?`","efficiency,","efficiency,","normalized","memory","how","how","`nucleotide-counts`?","each","it.","the","`ends-with?`,","`partial`.","function","separating","the","`translate`,","syntax,","`yell?`,","filtering","partial","readability","successive","`nucleotide-counts`,","where"]},{"Key":"of `shouting?`","Fragments":["rather"]},{"Key":"`shouting?` rather","Fragments":["than"]},{"Key":"did see","Fragments":["your"]},{"Key":"your next","Fragments":["revision,"]},{"Key":"next revision,","Fragments":["and"]},{"Key":"revision, and","Fragments":["comments"]},{"Key":"and comments","Fragments":["can"]},{"Key":"comments can","Fragments":["help"]},{"Key":"can help","Fragments":["with","with","with","here.","you.","simplify"]},{"Key":"help with","Fragments":["communicating","readability.","readability","that.","simplifying","that.","that","eliminating","the","that.","clarity...","readability"]},{"Key":"with communicating","Fragments":["intent,"]},{"Key":"communicating intent,","Fragments":["but"]},{"Key":"intent, but","Fragments":["I","I"]},{"Key":"personally prefer","Fragments":["more","to","to"]},{"Key":"prefer more","Fragments":["descriptive","verbose"]},{"Key":"descriptive code.","Fragments":["If"]},{"Key":"code. If","Fragments":["you're","you"]},{"Key":"If you're","Fragments":["ready","willing","going","trying","going","interested","not","committed"]},{"Key":"you're ready","Fragments":["to"]},{"Key":"ready to","Fragments":["move"]},{"Key":"move on,","Fragments":["I'll","though."]},{"Key":"on, I'll","Fragments":["unlock"]},{"Key":"I'll unlock","Fragments":["the"]},{"Key":"unlock the","Fragments":["next"]},{"Key":"Good work,","Fragments":["but"]},{"Key":"work, but","Fragments":["a","general","you","my"]},{"Key":"but a","Fragments":["couple","couple","list","call"]},{"Key":"a couple","Fragments":["minor","of","things:","of","of","fewer","of","of","keystrokes.","of","useful","of","refactorings","lets","of","of","of","things","of","final","of","of","of","of","more","of","of","more","of","of","of","of"]},{"Key":"couple minor","Fragments":["gripes:"]},{"Key":" 1.","Fragments":["Even","CamelCased","`use`","The","Think","Finds","What","Your","seq:","use","you","You","Line","A","Even","is","I","Does","I","I","That's","I","The","`a`","Agree,","`verse-template`","There","Extracted","The","you","I","Casting","Clojure","`swap!`","Cleaned","apply","Your","Instead","`last-character-of-senctence`","use","I","Aliasing","It","I","Got","I","Indentation","`reduce-kv`"]},{"Key":"1. Even","Fragments":["though","a"]},{"Key":"though `true`","Fragments":["works"]},{"Key":"`true` works","Fragments":["fine,"]},{"Key":"works fine,","Fragments":["idiomatic"]},{"Key":"fine, idiomatic","Fragments":["Clojure"]},{"Key":"idiomatic Clojure","Fragments":["style","mode.","and"]},{"Key":"style says","Fragments":["to","not"]},{"Key":"says to","Fragments":["use"]},{"Key":"the keyword","Fragments":["`:else`","`:else`,","usage","to"]},{"Key":"keyword `:else`","Fragments":["for"]},{"Key":"the else","Fragments":["clause","case.","case.","clause","branch,","clause"]},{"Key":"else clause","Fragments":["of","with","as"]},{"Key":"clause of","Fragments":["a"]},{"Key":" 2.","Fragments":["There","There's","You","`use`","Uses","Give","\"normalize\"","you","you","A","Regarding","Non-public","Creating","I'm","That's","Small","Style:","Do","Regarding","Consider","I","Every","Re:","lots","One","Moved","'suffix'","you","Oops,","No","Hash","To","The","Anonymous","Your","Import","`is-\u003cfunction-name\u003e?`","Put","Clojure","`is-`","I","(and","Your","I","I","`let`"]},{"Key":"2. There","Fragments":["are"]},{"Key":"are significantly","Fragments":["more"]},{"Key":"significantly more","Fragments":["graceful","efficient","readable","challenging"]},{"Key":"more graceful","Fragments":["ways"]},{"Key":"graceful ways","Fragments":["to"]},{"Key":"with strings","Fragments":["than","by","which","directly.","(no"]},{"Key":"strings than","Fragments":["using"]},{"Key":"than using","Fragments":["Java","-\u0026gt;\u0026gt;?","regular","private","`declare`.","frequencies","`re-matches`?","join","the","`let-if`."]},{"Key":"interop (`.charAt`,","Fragments":["`.length`,"]},{"Key":"(`.charAt`, `.length`,","Fragments":["etc.)."]},{"Key":"`.length`, etc.).","Fragments":["For"]},{"Key":"etc.). For","Fragments":["instance,"]},{"Key":"For instance,","Fragments":["a","`question?`","I"]},{"Key":"instance, a","Fragments":["number"]},{"Key":"a number","Fragments":["of","of","of","of"]},{"Key":"sequence functions","Fragments":["work:"]},{"Key":"functions work:","Fragments":["`count`,"]},{"Key":"work: `count`,","Fragments":["`first`,"]},{"Key":"`count`, `first`,","Fragments":["`last`,"]},{"Key":"`first`, `last`,","Fragments":["`get`."]},{"Key":" 3.","Fragments":["It's","Your","Inside","you","I","Please","To","Naming","I","In","Also,","the","Although","Put","Although","My","I","There"]},{"Key":"3. It's","Fragments":["best"]},{"Key":"It's best","Fragments":["not"]},{"Key":"best not","Fragments":["to"]},{"Key":"to pull","Fragments":["the","in","that","out","\"T\"","out"]},{"Key":"pull the","Fragments":["entire","validation"]},{"Key":"entire `clojure.string`","Fragments":["namespace"]},{"Key":"`clojure.string` namespace","Fragments":["into","refering","is","as","in","to","has","contains"]},{"Key":"namespace into","Fragments":["your"]},{"Key":"your project","Fragments":["because"]},{"Key":"project because","Fragments":["of"]},{"Key":"because of","Fragments":["the","the","the","that.","the","the","the","the","the","all","the"]},{"Key":"the risk","Fragments":["of","of"]},{"Key":"risk of","Fragments":["collisions","false"]},{"Key":"of collisions","Fragments":["between"]},{"Key":"collisions between","Fragments":["symbols"]},{"Key":"between symbols","Fragments":["in"]},{"Key":"symbols in","Fragments":["the"]},{"Key":"two namespaces.","Fragments":["Some"]},{"Key":"namespaces. Some","Fragments":["better"]},{"Key":"Some better","Fragments":["options"]},{"Key":"better options","Fragments":["would"]},{"Key":"options would","Fragments":["be"]},{"Key":"be using","Fragments":["`:only`","`re-seq`","one","`frequencies`.","partial","Clojure's","it"]},{"Key":"using `:only`","Fragments":["to"]},{"Key":"`:only` to","Fragments":["pull"]},{"Key":"pull in","Fragments":["just"]},{"Key":"in just","Fragments":["the","the","the"]},{"Key":"the symbols","Fragments":["you","with","directly"]},{"Key":"symbols you","Fragments":["want..."]},{"Key":" `(ns","Fragments":["bob","bob","phrase"]},{"Key":" (:use","Fragments":["[clojure.string","[clojure.string]","[clojure.string","[clojure.string","[clojure.string","[clojure.string]))","[clojure.string]))","[clojure.string"]},{"Key":"(:use [clojure.string","Fragments":[":only",":only",":only",":only",":only",":only"]},{"Key":"[clojure.string :only","Fragments":["[blank?","[blank?]]`.","[replace]])","[upper-case]]))","[split","[upper-case","[lower-case"]},{"Key":":only [blank?","Fragments":["upper-case]])`"]},{"Key":" ...or","Fragments":["using"]},{"Key":"...or using","Fragments":["`:require`,"]},{"Key":"using `:require`,","Fragments":["and"]},{"Key":"`:require`, and","Fragments":["then"]},{"Key":"then referring","Fragments":["to"]},{"Key":"referring to","Fragments":["the","symbols"]},{"Key":"symbols with","Fragments":["the","meaningful","namespace"]},{"Key":"namespace name","Fragments":["prefixed","to"]},{"Key":"name prefixed","Fragments":["(`(clojure.string/blank?"]},{"Key":"prefixed (`(clojure.string/blank?","Fragments":["x)`)."]},{"Key":"(`(clojure.string/blank? x)`).","Fragments":["You"]},{"Key":"x)`). You","Fragments":["can"]},{"Key":"can even","Fragments":["use","do","exploit"]},{"Key":"even use","Fragments":["`:as`","the"]},{"Key":"use `:as`","Fragments":["to"]},{"Key":"`:as` to","Fragments":["alias"]},{"Key":"to alias","Fragments":["the","nucleotide","them:","or"]},{"Key":"alias the","Fragments":["namespace","namespace","string"]},{"Key":"name to","Fragments":["something","explain","the","include","nil"]},{"Key":"to something","Fragments":["shorter,","more","in","like","`reduce`able,","that's","like","more","more","else..","like","short"]},{"Key":"something shorter,","Fragments":["like"]},{"Key":"shorter, like","Fragments":["so:"]},{"Key":"I hope","Fragments":["that's","is","`gene`","this"]},{"Key":"hope that's","Fragments":["helpful!"]},{"Key":"that's helpful!","Fragments":["Happy"]},{"Key":"helpful! Happy","Fragments":["hacking!"]},{"Key":"Ok, I've","Fragments":["refactored","read","gone","improved"]},{"Key":"I've refactored","Fragments":["to"]},{"Key":"refactored to","Fragments":["split","optimise","the","use"]},{"Key":"split out","Fragments":["the","the","`words`"]},{"Key":"into separate","Fragments":["methods.","expressions,","functions.","tests","functions","functions","functions."]},{"Key":"In what","Fragments":["scenario"]},{"Key":"what scenario","Fragments":["would"]},{"Key":"scenario would","Fragments":["clojure.string/upper-case"]},{"Key":"would clojure.string/upper-case","Fragments":["be"]},{"Key":"clojure.string/upper-case be","Fragments":["preferable"]},{"Key":"to .toUpperCase?","Fragments":["I"]},{"Key":".toUpperCase? I","Fragments":["can"]},{"Key":"make that","Fragments":["change,","equivalent.","change","change.","change.","more","work","useful","look","a"]},{"Key":"that change,","Fragments":["but"]},{"Key":"change, but","Fragments":["I","I"]},{"Key":"see an","Fragments":["obvious"]},{"Key":"an obvious","Fragments":["reason","overkill","fit"]},{"Key":"obvious reason","Fragments":["to"]},{"Key":"reason to","Fragments":["do","not","avoid","break","name","use"]},{"Key":"disagree that","Fragments":["using"]},{"Key":"using more","Fragments":["functions"]},{"Key":"more functions","Fragments":["would","by","such"]},{"Key":"functions would","Fragments":["make","make","suffice.","be","only","help"]},{"Key":"would make","Fragments":["this","`response-for`","the","the","things","the","sense","more","sense","much","it","additional","it","it","the","`normalize-digits`","them","the","the","them","the","it","the","`remove-punctuation`","those"]},{"Key":"this cleaner.","Fragments":["The"]},{"Key":"cleaner. The","Fragments":["comments"]},{"Key":"The comments","Fragments":["were"]},{"Key":"comments were","Fragments":["added"]},{"Key":"were added","Fragments":["to"]},{"Key":"added to","Fragments":["show","another.","ensure","the","`unique-name`","`validate`)."]},{"Key":"to show","Fragments":["intent.","you","that","where","intent,"]},{"Key":"show intent.","Fragments":["This"]},{"Key":"intent. This","Fragments":["code"]},{"Key":"This code","Fragments":["does","reads","doesn't","is","feels","is","fails"]},{"Key":"code does","Fragments":["what","too","the"]},{"Key":"does what","Fragments":["it's","your","you"]},{"Key":"what it's","Fragments":["supposed","actually","trying","doing"]},{"Key":"it's supposed","Fragments":["to"]},{"Key":"supposed to","Fragments":["do","be","be","do,","validate","be","nitpick!)","be","learn"]},{"Key":"do without","Fragments":["any"]},{"Key":"any needless","Fragments":["abstractions."]},{"Key":"Why using","Fragments":["Java"]},{"Key":"Also, don't","Fragments":["you"]},{"Key":"don't you","Fragments":["think","wait"]},{"Key":"think moving","Fragments":["inline"]},{"Key":"moving inline","Fragments":["conditions"]},{"Key":"inline conditions","Fragments":["in"]},{"Key":"conditions in","Fragments":["nicely","functions,","one","my","`number`","`count`?","`cond`"]},{"Key":"in nicely","Fragments":["named"]},{"Key":"nicely named","Fragments":["functions"]},{"Key":"named functions","Fragments":["would","adds","clearer,","for","inside","do","could","are","or"]},{"Key":"naming the","Fragments":["variable","variable/docs","components","variable"]},{"Key":"the variable","Fragments":["\"query\"","name","`s`","`s`","to","to","you","`s`,","names.","in","name"]},{"Key":"variable \"query\"","Fragments":["or"]},{"Key":"\"query\" or","Fragments":["\"request\""]},{"Key":"or \"request\"","Fragments":["or"]},{"Key":"\"request\" or","Fragments":["\"string\""]},{"Key":"or \"string\"","Fragments":["or"]},{"Key":"\"string\" or","Fragments":["anything"]},{"Key":"or anything","Fragments":["of","else.","similar."]},{"Key":"anything of","Fragments":["that"]},{"Key":"of that","Fragments":["nature","function.","ugly","process?","bikeshedding","convoluted","word.\"","can","constructor","assignment","call","but","to","exactly,","counter.","test","one!"]},{"Key":"that nature","Fragments":["would"]},{"Key":"nature would","Fragments":["help"]},{"Key":"help the","Fragments":["readability","discussions","user","other"]},{"Key":"the readability","Fragments":["here","of","of","by","at","of","and","of","of","of"]},{"Key":"readability here","Fragments":["at",":)"]},{"Key":"here at","Fragments":["all."]},{"Key":"think comments","Fragments":["are","will"]},{"Key":"are probably","Fragments":["more","a","a","flawed","an"]},{"Key":"probably more","Fragments":["appropriate","idiomatic","idiomatic","readable.","efficient","idiomatic...)"]},{"Key":"more appropriate","Fragments":["here.","one","inside","higher-order","assertion","for"]},{"Key":"appropriate here.","Fragments":["Extracting"]},{"Key":"here. Extracting","Fragments":["the"]},{"Key":"Extracting the","Fragments":["predicates","conditions"]},{"Key":"the predicates","Fragments":["into","private","out","to","to","in","listed","need","names","out","are","would","must","you're","into","in","of","to"]},{"Key":"predicates into","Fragments":["named","helper","functions..","a","separate/named","a"]},{"Key":"into named","Fragments":["functions","constants","constants","functions","functions."]},{"Key":"functions adds","Fragments":["more"]},{"Key":"adds more","Fragments":["code"]},{"Key":"code (diminishing","Fragments":["readability)"]},{"Key":"(diminishing readability)","Fragments":["and"]},{"Key":"readability) and","Fragments":["provides"]},{"Key":"and provides","Fragments":["little"]},{"Key":"provides little","Fragments":["additional"]},{"Key":"little additional","Fragments":["value."]},{"Key":"don't like","Fragments":["`clojure.string/upper-case`,","here","adding","is","my","how","about","this","that","the","this","the","the","the","the","the","the"]},{"Key":"like `clojure.string/upper-case`,","Fragments":["but"]},{"Key":"`clojure.string/upper-case`, but","Fragments":["I"]},{"Key":"can't figure","Fragments":["out","out","out","how"]},{"Key":"out how","Fragments":["to","to","to","it","to","to","to","to","to","to","to","to","to","you"]},{"Key":"how to","Fragments":["import/use","use","get","do","do","improve","do","do","respond.","find","get","make","compare","do","do","think","respond,","name","do","avoid","write","achieve","simplify","do","do","best","do","use","turn","make","do","do","not","put","initialise","handle","make","use","use","indent","improve.","do","make","loop?","use"]},{"Key":"to import/use","Fragments":["a"]},{"Key":"import/use a","Fragments":["namespace"]},{"Key":"a namespace","Fragments":["in","var","name.","(YMMV.)","called","in","that"]},{"Key":"namespace in","Fragments":["Clojure","response-for.","your","the","namespace","your"]},{"Key":"in Clojure","Fragments":[":)","you","-","in","too",":)","led","I","codebase.","usually","to","which","are","to","to","to","but","and","and","can","can","to","which","as","for","can","can","but","I'd","a","code","will","yet.","have","are","can","out","which","already","can"]},{"Key":"The syntax","Fragments":["is"]},{"Key":"syntax is","Fragments":["taking"]},{"Key":"is taking","Fragments":["some"]},{"Key":"taking some","Fragments":["time"]},{"Key":"some time","Fragments":["to","and","ago","to","for"]},{"Key":"get used","Fragments":["to,","to","to","inappropriately","to"]},{"Key":"used to,","Fragments":["but"]},{"Key":"to, but","Fragments":["I","looks"]},{"Key":"think I'm","Fragments":["following","sticking","done","ok"]},{"Key":"I'm following","Fragments":["Clojure-style."]},{"Key":"names? Also,","Fragments":["I"]},{"Key":"Also, I","Fragments":["would","found","would","have","don't","don't","agree","should","think"]},{"Key":"would personally","Fragments":["go","prefer"]},{"Key":"personally go","Fragments":["with","ahead"]},{"Key":"go with","Fragments":["something","more","the","`clojure.string/lower-case`","`is-shouting?`.","the","the","that.","that.","`(int"]},{"Key":"with something","Fragments":["more","like","like","more"]},{"Key":"something more","Fragments":["meaningful","explicit,","like","simple","descriptive.","complicated","domain-specific","substantial).","clojure-esk","procedural."]},{"Key":"more meaningful","Fragments":["than","variables","atoms","variables","variables","names","names.","-","name"]},{"Key":"meaningful than","Fragments":["\"s\""]},{"Key":"than \"s\"","Fragments":["as"]},{"Key":"\"s\" as","Fragments":["a","the"]},{"Key":"a variable","Fragments":["name.","so","number"]},{"Key":"pretty cool.","Fragments":["However,"]},{"Key":"cool. However,","Fragments":["did"]},{"Key":"However, did","Fragments":["you"]},{"Key":"the `frequencies`","Fragments":["function?","line","function","function.","implementation.","function","function","function,","function.","call,","function","function","function."]},{"Key":"just started","Fragments":["with","clojure,","learning","to"]},{"Key":"started with","Fragments":["clojure,","Clojure","a","the"]},{"Key":"with clojure,","Fragments":["will","but","so"]},{"Key":"clojure, will","Fragments":["check"]},{"Key":"will check","Fragments":["for"]},{"Key":"for it,","Fragments":["thanks.","though","but","but"]},{"Key":" An","Fragments":["example","internal","example","alternate","alternative"]},{"Key":"An example","Fragments":["might","might","would"]},{"Key":" (clojure.string/blank?","Fragments":["message))","greeting)","greeting)"]},{"Key":" which","Fragments":["you","expresses"]},{"Key":"which you","Fragments":["could","have","have","have","have","have","have","can","have","have","have","have","have","know","often","usually","could","can","can","should","are.","can","could","may"]},{"Key":"could then","Fragments":["use","pull","use,","use."]},{"Key":"then use","Fragments":["in","those","the","the","`str/replace`."]},{"Key":"use in","Fragments":["your","your","such","a","the","the","the","the"]},{"Key":"in your","Fragments":["`cond`.","`cond`?","question","helper","`calm?`","namespace","`ns`","namespace:","namespace","alternate","case)","previous","code.","character","`cond`,","head","predicate","\"respond\"","two","public","code.","conversion.","alphabet?","function","silence?","ns","bindings","ns","`letter-count`","calls","first","calls","split..","case)","dns","cond","first","first","namespace","namespace","\u003ccode\u003eshout?\u003c/code\u003e","\u003ccode\u003econd\u003c/code\u003e","`is-shouting?`","test","code,","code.","cond.","`:require`","`ns`","first","`cond`","splitting.","words"]},{"Key":"sure if","Fragments":["there","you","there's","there's","this","line","the","it","that","this","the","there's","this","it","you","either","the","using","it","the","they're","that","that","that's","it"]},{"Key":"there would","Fragments":["be","be"]},{"Key":"be any","Fragments":["advantage","clashes"]},{"Key":"any advantage","Fragments":["to"]},{"Key":"advantage to","Fragments":["using","avoiding","using"]},{"Key":"to using","Fragments":["string-specific","clojure.string/upper-case,","the","a","regex,","`-\u003e`","zero?.","first","constant","persistent","regexes,","frequencies","a"]},{"Key":"using string-specific","Fragments":["functions"]},{"Key":"string-specific functions","Fragments":["instead"]},{"Key":"functions instead","Fragments":["of","to","of","of","of","of"]},{"Key":"of empty?","Fragments":["and","and","and"]},{"Key":"empty? and","Fragments":["last.","trim","trim."]},{"Key":"and last.","Fragments":["This"]},{"Key":"last. This","Fragments":["seemed"]},{"Key":"This seemed","Fragments":["like","to"]},{"Key":"a pretty","Fragments":["clean","good","nice","good","short","good","nifty","generic","small","good"]},{"Key":"pretty clean","Fragments":["way"]},{"Key":"clean way","Fragments":["to","to","that"]},{"Key":"I'm sure","Fragments":["your","others","this","@mitchell","there","that","some"]},{"Key":"sure your","Fragments":["solution"]},{"Key":"solution works,","Fragments":["but","but"]},{"Key":"is there","Fragments":["any","a","others","any","a","any","a","value","value","on","a","any","a"]},{"Key":"there any","Fragments":["way","reason","way","reason","way","way","better","better","simple"]},{"Key":"any way","Fragments":["you","to","to","to","to","you"]},{"Key":"can generalise","Fragments":["the"]},{"Key":"generalise the","Fragments":["conditions"]},{"Key":"conditions to","Fragments":["reduce","predicates.","functions","not","be","make","contain"]},{"Key":"to reduce","Fragments":["the","duplication","clutter","code","itself","this","the","duplication","the","repetition","the","complexity","duplication?","duplication.","duplication.","duplication,","nesting.","'from","the","the"]},{"Key":"reduce the","Fragments":["number","processing","amount","amount","amount","time","overhead","amount","overhead","clutter","repetition.","repetition","nesting","number","duplication","repetition.","amount","clear","duplication","amount","problem"]},{"Key":"the number","Fragments":["of","in","and","may","intact","predicates","of","of","of","being","validation/cleaning","of","question"]},{"Key":"of elements","Fragments":["in"]},{"Key":"elements in","Fragments":["your"]},{"Key":"your `cond`?","Fragments":["An"]},{"Key":"`cond`? An","Fragments":["example"]},{"Key":"match all","Fragments":["sentences"]},{"Key":"all sentences","Fragments":["that"]},{"Key":"sentences that","Fragments":["are","had"]},{"Key":"that are","Fragments":["all","*very*","treated","interleaved","not","valid","private","put","not","kind","ambiguous","proper","not","not","anagrams.","upper","pretty"]},{"Key":"all capital","Fragments":["letters","letters,"]},{"Key":"capital letters","Fragments":["in","like","and","to","would","(for"]},{"Key":"letters in","Fragments":["a","alphabetical","the","the","the","Clojure.","the"]},{"Key":"meant to","Fragments":["make","be","define","use","encapsulate"]},{"Key":"predicates private","Fragments":["but"]},{"Key":"private but","Fragments":["I"]},{"Key":"sure how.","Fragments":["I"]},{"Key":"how. I","Fragments":["switched"]},{"Key":"switched to","Fragments":["using","#()","using","`.endsWith`","wanting"]},{"Key":"using clojure.string/upper-case,","Fragments":["I'm"]},{"Key":"clojure.string/upper-case, I'm","Fragments":["not"]},{"Key":"is better","Fragments":["this","naming","than","and","to","than","to",":-)","clojure"]},{"Key":"better this","Fragments":["way"]},{"Key":"way but","Fragments":["it","then"]},{"Key":"is certainly","Fragments":["no","subjective,","more","not"]},{"Key":"certainly no","Fragments":["worse.","expert."]},{"Key":"Nice, looking","Fragments":["good."]},{"Key":"looking good.","Fragments":["Are"]},{"Key":"good. Are","Fragments":["you"]},{"Key":"you aware","Fragments":["you"]},{"Key":"aware you","Fragments":["can"]},{"Key":"make private","Fragments":["functions"]},{"Key":"functions by","Fragments":["using","introducing:"]},{"Key":"by using","Fragments":["`defn-`","`:refer-clojure`","`(map","`re-seq`","`(:refer-clojure","`:refer`.","translation","inline","`map`","a","Clojure's","the","the","the","less","`cond`","a","a","`replace`","a","a","`-\u003e`",":refer","`letfn`",".endsWith.","destructuring.","it's","the","format","`update-in`.","`some`","a","the","map,","my","`Character/isLowerCase`","the","`(and","your"]},{"Key":"using `defn-`","Fragments":["instead","for"]},{"Key":"`defn-` instead","Fragments":["of"]},{"Key":"of `defn`?","Fragments":["Also,"]},{"Key":"`defn`? Also,","Fragments":["generally"]},{"Key":"Also, generally","Fragments":["the","it's"]},{"Key":"generally the","Fragments":["convention"]},{"Key":"the convention","Fragments":["for","to"]},{"Key":"convention for","Fragments":["the","use"]},{"Key":"the catch-all","Fragments":["in"]},{"Key":"catch-all in","Fragments":["a","`cond`."]},{"Key":"a cond","Fragments":["is","will"]},{"Key":"cond is","Fragments":["to","really"]},{"Key":"keyword `:else`,","Fragments":["since"]},{"Key":"`:else`, since","Fragments":["it's"]},{"Key":"a truthy","Fragments":["value"]},{"Key":"truthy value","Fragments":["it"]},{"Key":"value it","Fragments":["will"]},{"Key":"it will","Fragments":["work.","make","make","suit","be","return","be","be","make","look","read","spare","make","lower-case","only","expand","return","take","lower-case","be","expect","be","make","only","perform","be"]},{"Key":"I updated","Fragments":["to","the","my","code","my"]},{"Key":"updated to","Fragments":["use","use","use","latest"]},{"Key":"use character","Fragments":["classes","literals"]},{"Key":"character classes","Fragments":["in","in","like"]},{"Key":"classes in","Fragments":["the","Java."]},{"Key":"I originally","Fragments":["had","had","read","solved","used"]},{"Key":"originally had","Fragments":["sanitize","the"]},{"Key":"had sanitize","Fragments":["and"]},{"Key":"sanitize and","Fragments":["split"]},{"Key":"and split","Fragments":["as"]},{"Key":"split as","Fragments":["one","opposed"]},{"Key":"as one","Fragments":["function,","with","of","is"]},{"Key":"one function,","Fragments":["but","so","since"]},{"Key":"function, but","Fragments":["I","it","I","I","there's","I"]},{"Key":"the declarative","Fragments":["nature"]},{"Key":"declarative nature","Fragments":["of"]},{"Key":"nature of","Fragments":["this","the","the"]},{"Key":"this using","Fragments":["the","a","Java"]},{"Key":"the threading","Fragments":["macro.","functions","macro,","macro","macro","macro","form","macro,","issue,","macro.","macro.","macro","macro."]},{"Key":"there something","Fragments":["you","I'm","else","unusual"]},{"Key":"something you","Fragments":["can","can"]},{"Key":"can do","Fragments":["to","with","for","with","`(partial","about","better","that.","`(range","some","is","that","that","this","something","`(int"]},{"Key":"conditionals better","Fragments":["reveal"]},{"Key":"better reveal","Fragments":["their"]},{"Key":"reveal their","Fragments":["intent?"]},{"Key":"That's not","Fragments":["the"]},{"Key":"the `last`","Fragments":["thing"]},{"Key":"`last` thing","Fragments":["you'll"]},{"Key":"thing you'll","Fragments":["use,"]},{"Key":"you'll use,","Fragments":["I"]},{"Key":"use, I","Fragments":["promise"]},{"Key":"I promise","Fragments":[";)"]},{"Key":"Nice! I","Fragments":["like","like","really"]},{"Key":"a set","Fragments":["to","of","literal","of","that","takes","of","of","as","as","as","in","instead","of","checking"]},{"Key":"set to","Fragments":["store"]},{"Key":"to store","Fragments":["/","the","a"]},{"Key":"store /","Fragments":["validate"]},{"Key":"/ validate","Fragments":["nucleotides"]},{"Key":"validate nucleotides","Fragments":["--"]},{"Key":"nucleotides --","Fragments":["I"]},{"Key":"to steal^H^H^H^H^H","Fragments":["incorporate"]},{"Key":"steal^H^H^H^H^H incorporate","Fragments":["that"]},{"Key":"incorporate that","Fragments":["into"]},{"Key":"that into","Fragments":["the","function","the"]},{"Key":"into the","Fragments":["example...","Java","terriority","threading","macro","`require","namespace","code?","implementation","functions","`merge`","details.","map","same","namespace","tests","`on-planet`","ns","`assert`","`assert`","`:require`","response-for","map?","`assert`","`map`","`assert`","ns","upper","`set`","same","map.","functions","`:pre`","`:requires`","transcribe"]},{"Key":"about `frequencies`","Fragments":["when","being","and"]},{"Key":"`frequencies` when","Fragments":["I"]},{"Key":"wrote the","Fragments":["example","same"]},{"Key":"the example","Fragments":["solution","in","in","and"]},{"Key":"example solution","Fragments":["for"]},{"Key":"solution for","Fragments":["this.","this","this,","matching","cleaning"]},{"Key":"for this.","Fragments":[":)","Is","I'm","You","Thanks!","You"]},{"Key":"could suggest","Fragments":["is","would"]},{"Key":"suggest is","Fragments":["to","to","to"]},{"Key":"into using","Fragments":["a","the"]},{"Key":"character class","Fragments":["to","`\\W+`"]},{"Key":"class to","Fragments":["simplify"]},{"Key":"simplify your","Fragments":["`sanitize`","work","code.","`silence?`","`nucleotide-counts`","string","solution:","solution:","solution.","translate"]},{"Key":"your `sanitize`","Fragments":["regex."]},{"Key":"`sanitize` regex.","Fragments":["You"]},{"Key":"regex. You","Fragments":["might"]},{"Key":"might even","Fragments":["be"]},{"Key":"even be","Fragments":["able"]},{"Key":"get away","Fragments":["with","with","with","with","with"]},{"Key":"away with","Fragments":["combining","that","leaving","a","the","this"]},{"Key":"with combining","Fragments":["sanitizing"]},{"Key":"combining sanitizing","Fragments":["and"]},{"Key":"sanitizing and","Fragments":["splitting...","validating"]},{"Key":" Awesome.","Fragments":["Thanks","Thanks","Thanks"]},{"Key":"Awesome. Thanks","Fragments":["for","for","for"]},{"Key":"for letting","Fragments":["me","me"]},{"Key":"letting me","Fragments":["know.","know."]},{"Key":"of `memoize`","Fragments":["to"]},{"Key":"`memoize` to","Fragments":["wrap"]},{"Key":"to wrap","Fragments":["`sanitize`.","every","their","one's","char","them","my","my","`to-rna-by-char`"]},{"Key":"the `subs`","Fragments":["function,","function"]},{"Key":"`subs` function,","Fragments":["I"]},{"Key":"function, I","Fragments":["think","cannot","think"]},{"Key":"could get","Fragments":["rid","with","rid","working","the","used","the","different","rid","rid","rid","rid","some"]},{"Key":"get rid","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"rid of","Fragments":["some","the","the","the","excessive","that","the","`downcased-phrase`","it","the","the","the","`join`","`sort`.","the","that","`all?`","those","interop","`map`.","line","this","the","`base-word`","the","the","the","the","the","the","the","the","the","the","the","the","the","line","most","clojure.string."]},{"Key":"of some","Fragments":["code.","other","of","sort"]},{"Key":"a regex-based","Fragments":["solution"]},{"Key":"regex-based solution","Fragments":["could"]},{"Key":"solution could","Fragments":["be","be"]},{"Key":"looks good,","Fragments":["however","although","these"]},{"Key":"good, however","Fragments":["I"]},{"Key":"however I","Fragments":["believe","would","would"]},{"Key":"the standard","Fragments":["practice","library.","library","integer"]},{"Key":"standard practice","Fragments":["is"]},{"Key":"practice is","Fragments":["to"]},{"Key":"to place","Fragments":["trailing","the","the"]},{"Key":"place trailing","Fragments":["parenthesis"]},{"Key":"parenthesis on","Fragments":["the"]},{"Key":"the code,","Fragments":["as","to","that's","and","however,"]},{"Key":"code, as","Fragments":["opposed"]},{"Key":"as opposed","Fragments":["to","to","to","to","to","to","to","to"]},{"Key":"opposed to","Fragments":["the","```.endsWith```.","having","as","just","having","comparing","splitting","needing"]},{"Key":"the line","Fragments":["after.","above.","breaks","which","after","8-9.","and"]},{"Key":"considered dropping","Fragments":["the"]},{"Key":"dropping the","Fragments":["is-"]},{"Key":"the is-","Fragments":["prefix"]},{"Key":"is- prefix","Fragments":["on"]},{"Key":"prefix on","Fragments":["your","your"]},{"Key":"on your","Fragments":["predicate","last","latest","code.","last","predicate","comments.","comments.","`cond`","previous","code","parade...","coding"]},{"Key":"functions? It","Fragments":["almost"]},{"Key":"It almost","Fragments":["seems"]},{"Key":"almost seems","Fragments":["redundant"]},{"Key":"seems redundant","Fragments":["with"]},{"Key":"redundant with","Fragments":["the","a","a"]},{"Key":"the ?","Fragments":["in","but"]},{"Key":"Well, this","Fragments":["is","*is*"]},{"Key":"very first","Fragments":["piece","Clojure","Clojure","code","Clojure","clojure","passing","clojure","attempt"]},{"Key":"first piece","Fragments":["of"]},{"Key":"piece of","Fragments":["Clojure","code","code;","code.","code","code","code","functionality","Clojure","code."]},{"Key":"of Clojure","Fragments":["I","code","code.","API","experience.","and","code","I","continues","is","is"]},{"Key":" Probably","Fragments":["it’s"]},{"Key":"Probably it’s","Fragments":["because"]},{"Key":"it’s because","Fragments":["of"]},{"Key":"the habit","Fragments":["I’ve","of","of","of"]},{"Key":"habit I’ve","Fragments":["developed"]},{"Key":"I’ve developed","Fragments":["writing"]},{"Key":"developed writing","Fragments":["Ruby:"]},{"Key":"writing Ruby:","Fragments":["public"]},{"Key":"Ruby: public","Fragments":["methods"]},{"Key":"public methods","Fragments":["on"]},{"Key":"methods on","Fragments":["top,","the"]},{"Key":"on top,","Fragments":["implementation"]},{"Key":"top, implementation","Fragments":["details"]},{"Key":"implementation details","Fragments":["bottom.","if"]},{"Key":"details bottom.","Fragments":["If"]},{"Key":"bottom. If","Fragments":["you"]},{"Key":"you name","Fragments":["things","the"]},{"Key":"name things","Fragments":["well"]},{"Key":"things well","Fragments":["and"]},{"Key":"well and","Fragments":["keep","has","hope"]},{"Key":"and keep","Fragments":["methods/functions"]},{"Key":"keep methods/functions","Fragments":["small,"]},{"Key":"methods/functions small,","Fragments":["you"]},{"Key":"small, you","Fragments":["are"]},{"Key":"are almost","Fragments":["always"]},{"Key":"almost always","Fragments":["able"]},{"Key":"always able","Fragments":["to"]},{"Key":"to guess","Fragments":["what","would"]},{"Key":"guess what","Fragments":["some"]},{"Key":"what some","Fragments":["“internal”"]},{"Key":"some “internal”","Fragments":["function"]},{"Key":"“internal” function","Fragments":["does"]},{"Key":"function does","Fragments":["—","without","not","a","a","when"]},{"Key":"does —","Fragments":["why"]},{"Key":"— why","Fragments":["putting"]},{"Key":"why putting","Fragments":["them"]},{"Key":"putting them","Fragments":["in","into"]},{"Key":"in front","Fragments":["in","in","for"]},{"Key":"front in","Fragments":["this","languages"]},{"Key":"It works","Fragments":["great","but...","roughly","and"]},{"Key":"works great","Fragments":["in"]},{"Key":"great in","Fragments":["Ruby"]},{"Key":"in Ruby","Fragments":["but","I"]},{"Key":"Ruby but","Fragments":["in"]},{"Key":"Clojure you","Fragments":["have"]},{"Key":"vars and","Fragments":["stuff,"]},{"Key":"and stuff,","Fragments":["hence"]},{"Key":"stuff, hence","Fragments":["`declare`"]},{"Key":"example I","Fragments":["have"]},{"Key":"seen using","Fragments":["declare"]},{"Key":"using declare","Fragments":["on"]},{"Key":"declare on","Fragments":["the"]},{"Key":"predicate vars.","Fragments":["Care"]},{"Key":"vars. Care","Fragments":["to"]},{"Key":"Care to","Fragments":["comment"]},{"Key":"to comment","Fragments":["on"]},{"Key":"comment on","Fragments":["why","sets","previous","your","how","the","word-count","another","a"]},{"Key":"on why","Fragments":["you","atom"]},{"Key":"you wrote","Fragments":["it","this"]},{"Key":"wrote it","Fragments":["that","as"]},{"Key":"it that","Fragments":["way?","way.","way","often.","way,","doesn't","allows"]},{"Key":"looks really","Fragments":["good.","crowded","better.","wordy","nice","good."]},{"Key":"really good.","Fragments":["Did","Reads"]},{"Key":"using upcase","Fragments":["instead"]},{"Key":"upcase instead","Fragments":["of"]},{"Key":"expression for","Fragments":["the","the","the","validation.","the","each"]},{"Key":"the shouting","Fragments":["test?","to","check","though."]},{"Key":"Also, would","Fragments":["it"]},{"Key":"make sense","Fragments":["to","to","-","in","to","to","-","of","if","to","to"]},{"Key":" Love","Fragments":["the","it","the","the"]},{"Key":"Love the","Fragments":["use","succinctness","private"]},{"Key":"of `partial`","Fragments":["to","in"]},{"Key":"`partial` to","Fragments":["generate"]},{"Key":"Hi, What","Fragments":["do"]},{"Key":"mean by","Fragments":["exporting","introducing","`(=","simplifying","the"]},{"Key":"by exporting","Fragments":["of"]},{"Key":"exporting of","Fragments":["function?"]},{"Key":" P.S.","Fragments":["I","```(re-match","The"]},{"Key":"P.S. I","Fragments":["am"]},{"Key":"am new","Fragments":["to","to","to","to"]},{"Key":"to Clojure","Fragments":[":)","that","so","and","so","so","_and_","myself,",";-))","as","as","here.)","so"]},{"Key":"be correct.","Fragments":["Thanks"]},{"Key":"correct. Thanks","Fragments":["for"]},{"Key":"be nicer","Fragments":["to","to"]},{"Key":"nicer to","Fragments":["use","apply","work","use","use"]},{"Key":"use `clojure.string/upper-case`","Fragments":["rather","and","instead"]},{"Key":"`clojure.string/upper-case` rather","Fragments":["than"]},{"Key":"than resorting","Fragments":["to"]},{"Key":"resorting to","Fragments":["Java.","the","the","the","clojure.core/count","some"]},{"Key":"Good first","Fragments":["attempt!","attempt!!"]},{"Key":"few comments","Fragments":[":"]},{"Key":"comments :","Fragments":["\u003c/br\u003e"]},{"Key":"Are not","Fragments":["redundant"]},{"Key":"not redundant","Fragments":["the"]},{"Key":"redundant the","Fragments":["methods"]},{"Key":"methods \u003ccode\u003erequest-type\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003erequest-type\u003c/code\u003e and","Fragments":["\u003ccode\u003eresponse\u003c/code\u003e?"]},{"Key":"And the","Fragments":["name","name","code","external","code"]},{"Key":"name \u003ccode\u003es\u003c/code\u003e","Fragments":["of"]},{"Key":"\u003ccode\u003es\u003c/code\u003e of","Fragments":["the"]},{"Key":"argument don´t","Fragments":["say"]},{"Key":"don´t say","Fragments":["much","much..."]},{"Key":"say much","Fragments":["...perhaps"]},{"Key":"much ...perhaps","Fragments":["\u003cstrong\u003emessage\u003c/strong\u003e"]},{"Key":"...perhaps \u003cstrong\u003emessage\u003c/strong\u003e","Fragments":["will"]},{"Key":"\u003cstrong\u003emessage\u003c/strong\u003e will","Fragments":["be"]},{"Key":"make your","Fragments":["`response-for`","life","solution","life","program","code","`pretty-print`","life","solution","code","code","`silent?`","code","code","main","solution","predicate"]},{"Key":"your `response-for`","Fragments":["function","function","and"]},{"Key":"`response-for` function","Fragments":["very","in","does","-","mixes","so","could"]},{"Key":"function very","Fragments":["expressive."]},{"Key":"very expressive.","Fragments":["A"]},{"Key":"expressive. A","Fragments":["couple"]},{"Key":"points: you","Fragments":["should"]},{"Key":"built-in `last`","Fragments":["function"]},{"Key":"`last` function","Fragments":["in","returns"]},{"Key":"in place","Fragments":["of",";)"]},{"Key":"place of","Fragments":["your"]},{"Key":"your `last_char`.","Fragments":["Also,"]},{"Key":"`last_char`. Also,","Fragments":["I'd"]},{"Key":"I'd make","Fragments":["the","the"]},{"Key":"that express","Fragments":["the"]},{"Key":"express the","Fragments":["intent","intent.","(quite"]},{"Key":"intent of","Fragments":["the","the","particular","the","particular","the","the","my","the","the","this","the","the","the","what","the","the"]},{"Key":" :)","Fragments":["that","either","Yeah...","yep"]},{"Key":":) that","Fragments":["behavior"]},{"Key":"that behavior","Fragments":["is"]},{"Key":"not specified","Fragments":["by"]},{"Key":"specified by","Fragments":["the"]},{"Key":"the tests,","Fragments":["so","plus","please","too.","but","but","and"]},{"Key":"tests, so","Fragments":["I"]},{"Key":"I shall","Fragments":["just","use","give","change"]},{"Key":"shall just","Fragments":["come"]},{"Key":"just come","Fragments":["up"]},{"Key":"default response","Fragments":["of"]},{"Key":"response of","Fragments":["\"Say"]},{"Key":"of \"Say","Fragments":["that"]},{"Key":"\"Say that","Fragments":["again..."]},{"Key":"that again...","Fragments":["I"]},{"Key":"again... I","Fragments":["dare"]},{"Key":"I dare","Fragments":["you,"]},{"Key":"dare you,","Fragments":["I"]},{"Key":"you, I","Fragments":["double","appreciate","did"]},{"Key":"I double","Fragments":["dare"]},{"Key":"double dare","Fragments":["you\"."]},{"Key":"this submission","Fragments":["contains","after","-","-","but","a","made"]},{"Key":"submission contains","Fragments":["changes"]},{"Key":"contains changes","Fragments":["from"]},{"Key":"changes from","Fragments":["all"]},{"Key":"from all","Fragments":["the"]},{"Key":"the feedback","Fragments":["I've","I","@russell!","from","@reilly.","@monty.","on","on","geoff.","anyway!","is","and","for"]},{"Key":"feedback I've","Fragments":["had"]},{"Key":"I've had","Fragments":["so","decent","decent","a"]},{"Key":"had so","Fragments":["far"]},{"Key":"so far","Fragments":["-","my","I've",":-)"]},{"Key":"far -","Fragments":["I'm"]},{"Key":"- I'm","Fragments":["pretty","finding","personally","enjoying","now","currently","that","still","focused"]},{"Key":"I'm pretty","Fragments":["happy","sure","new","new","new"]},{"Key":"pretty happy","Fragments":["with"]},{"Key":"happy with","Fragments":["it.","this","this","this.","lines","how","having","`new-robot-name`","my","this.","the","the","it.","as","the","some","the","the","the","using","how","my"]},{"Key":"with it.","Fragments":["It's","It",":)","Maybe"]},{"Key":"it. It's","Fragments":["certainly","also","just"]},{"Key":"It's certainly","Fragments":["more","a"]},{"Key":"certainly more","Fragments":["expressive","succinct,"]},{"Key":"more expressive","Fragments":["than","then","and","and"]},{"Key":"expressive than","Fragments":["the","what"]},{"Key":"code I","Fragments":["started","can","had","wrote","found:","saw"]},{"Key":"I started","Fragments":["with.","out","out","out","splitting","separate","looking","by","with","using","out","with"]},{"Key":"I had't","Fragments":["actually"]},{"Key":"had't actually","Fragments":["seen"]},{"Key":"actually seen","Fragments":["alanpeabody's"]},{"Key":"seen alanpeabody's","Fragments":["latest"]},{"Key":"alanpeabody's latest","Fragments":["suggestion"]},{"Key":"latest suggestion","Fragments":["until"]},{"Key":"suggestion until","Fragments":["you"]},{"Key":"until you","Fragments":["pointed","helped","get","really","actually"]},{"Key":"you pointed","Fragments":["it"]},{"Key":"pointed it","Fragments":["out,","out"]},{"Key":"it out,","Fragments":["but","I","but"]},{"Key":"out, but","Fragments":["now","I","you're"]},{"Key":"but now","Fragments":["I","I'm","I","returns"]},{"Key":"now I","Fragments":["have","think","have","understand","found","see","realize"]},{"Key":"have I","Fragments":["agree","suggested"]},{"Key":"agree with","Fragments":["it","you,","you","using","@stanford","you","the","@benny.","@aliza","zoldar","@garth's","@boyd's","both","@dayton.","@emmitt;","you","the","your","@alex","you:"]},{"Key":"with it","Fragments":["regarding","as-is.","I","for","already."]},{"Key":"it regarding","Fragments":["the"]},{"Key":"As for","Fragments":["evaluating","a","this","`yelling?`","```count-words```,","`range-verses`","testing","word-count","modifying","the","shouting,","the","English:"]},{"Key":"for evaluating","Fragments":["`silent?`"]},{"Key":"evaluating `silent?`","Fragments":["twice,"]},{"Key":"`silent?` twice,","Fragments":["I"]},{"Key":"twice, I","Fragments":["am"]},{"Key":"am happy","Fragments":["with"]},{"Key":"this approach","Fragments":["as","if","-","because","would","is","to"]},{"Key":"approach as","Fragments":["it"]},{"Key":"as it","Fragments":["removes","should","can","is","is","calls","would","would","does","stands.","is","really","would","gives","hurts","will","has","very","removes","tidies","will","might","could","seemed","seems"]},{"Key":"it removes","Fragments":["the","the","the"]},{"Key":"removes the","Fragments":["need","magic","unnecessary","unnecessary","need"]},{"Key":"the `cond`","Fragments":["tests","responses","don't","in","form.","branches,","form","I","tests","very","with","into","statement","in","predicates","outputs,","statement","in"]},{"Key":"`cond` tests","Fragments":["in","better"]},{"Key":"tests in","Fragments":["any","the","Clojure","bob_test.clj?","the"]},{"Key":"in any","Fragments":["particular","language.","language.","language.","case","language.","way.","order","language,"]},{"Key":"any particular","Fragments":["order"]},{"Key":"particular order","Fragments":["(providing"]},{"Key":"order (providing","Fragments":["the"]},{"Key":"(providing the","Fragments":["default"]},{"Key":"default is","Fragments":["last)."]},{"Key":"is last).","Fragments":["It"]},{"Key":"last). It","Fragments":["also"]},{"Key":"It also","Fragments":["means","matches","seems","brings","didn't","works","looks"]},{"Key":"also means","Fragments":["that"]},{"Key":"means that","Fragments":["`shouting?`","you'll","in","it's","their"]},{"Key":"that `shouting?`","Fragments":["can"]},{"Key":"`shouting?` can","Fragments":["be"]},{"Key":"be used","Fragments":["independently","instead","as","in","in","on","here.","on","without","elsewhere.","by","once.","for","as","here.","instead","to","-","for","as","that","to","with","in","as","as","as","as","as","to","as","like","to","to","just","as","as","to","as","directly","on"]},{"Key":"used independently","Fragments":["of"]},{"Key":"independently of","Fragments":["`response-for`"]},{"Key":"`response-for` on","Fragments":["any"]},{"Key":"on any","Fragments":["sentence","sequence"]},{"Key":"any sentence","Fragments":["and","that"]},{"Key":"sentence and","Fragments":["still","identify"]},{"Key":"and still","Fragments":["give","do","pass","choose","highly"]},{"Key":"still give","Fragments":["a","is"]},{"Key":"give a","Fragments":["sensible","function","pause"]},{"Key":"a sensible","Fragments":["answer.","way"]},{"Key":" Hadn't","Fragments":["seen"]},{"Key":"Hadn't seen","Fragments":["this"]},{"Key":"seen this","Fragments":["comment,","code","before,"]},{"Key":"this comment,","Fragments":["but"]},{"Key":"comment, but","Fragments":["on","yes","I"]},{"Key":"but on","Fragments":["balance","the"]},{"Key":"on balance","Fragments":["I"]},{"Key":"balance I","Fragments":["agree."]},{"Key":"agree. It","Fragments":["also"]},{"Key":"also matches","Fragments":["the"]},{"Key":"ruby language","Fragments":["implementation"]},{"Key":"language implementation","Fragments":["of"]},{"Key":"Why do","Fragments":["you","you","you"]},{"Key":"you prefer","Fragments":["`let`","a","to"]},{"Key":"prefer `let`","Fragments":["to"]},{"Key":"`let` to","Fragments":["`defn`","bind","define"]},{"Key":"to `defn`","Fragments":["or"]},{"Key":"`defn` or","Fragments":["`defn-`"]},{"Key":"or `defn-`","Fragments":["for"]},{"Key":"`defn-` for","Fragments":["your","functions","your","those","scoping.","non-public"]},{"Key":"well, but","Fragments":["you're","there","there","I","never","picking"]},{"Key":"but you're","Fragments":["evaluating","repeating","getting"]},{"Key":"you're evaluating","Fragments":["`slient?`"]},{"Key":"evaluating `slient?`","Fragments":["twice"]},{"Key":"`slient?` twice","Fragments":["per"]},{"Key":"twice per","Fragments":["input."]},{"Key":"per input.","Fragments":["Would"]},{"Key":"input. Would","Fragments":["shouting"]},{"Key":"Would shouting","Fragments":["work"]},{"Key":"shouting work","Fragments":["just"]},{"Key":"well without","Fragments":["it?"]},{"Key":"Also, IMO","Fragments":["the"]},{"Key":"IMO the","Fragments":["default","conditions"]},{"Key":"default should","Fragments":["be"]},{"Key":"be one","Fragments":["of","way"]},{"Key":"the conditions.","Fragments":["What","The"]},{"Key":"conditions. What","Fragments":["do","are"]},{"Key":"of alanpeabody's","Fragments":["suggestion"]},{"Key":"alanpeabody's suggestion","Fragments":["on"]},{"Key":"suggestion on","Fragments":["your","`defn-`","last","how"]},{"Key":"your last","Fragments":["submission?","nitpick","hint;"]},{"Key":"I wish","Fragments":["this","I'd","Clojure","I","I'd","there","I'd","I"]},{"Key":"wish this","Fragments":["was"]},{"Key":"was approved","Fragments":["quickly"]},{"Key":"approved quickly","Fragments":["enough"]},{"Key":"quickly enough","Fragments":["at"]},{"Key":"enough at","Fragments":["least"]},{"Key":"least so","Fragments":["I"]},{"Key":"could check","Fragments":["how","out","equality"]},{"Key":"check how","Fragments":["you","the"]},{"Key":"you solve","Fragments":["the"]},{"Key":"solve the","Fragments":["next","problem.","problem","problem.","exercise.","exercise","problem.","problem,"]},{"Key":"next one","Fragments":[";)"]},{"Key":"it's really","Fragments":["a","annoying","easy","needed."]},{"Key":"of preference,","Fragments":["I","but","because","but"]},{"Key":"preference, I","Fragments":["find"]},{"Key":"find it","Fragments":["easier","a","to","much","when","straight","easier","extremely","more","nicer","very","already","descriptive,","easier","takes","in","more","by","yourself.","very"]},{"Key":"it easier","Fragments":["to","to","to","to","to","to","to","to","to","to"]},{"Key":"see the","Fragments":["patterns","argument","tests","intention","point","right","mileage.","need","end","point","authoritative","point","public","separation","name","\"most","big","argument","main","harm.","list"]},{"Key":"the patterns","Fragments":["in"]},{"Key":"patterns in","Fragments":["the","a"]},{"Key":"code when","Fragments":["it's","I"]},{"Key":"when it's","Fragments":["lined","preferred"]},{"Key":"it's lined","Fragments":["up"]},{"Key":"lined up","Fragments":["like","the"]},{"Key":"up like","Fragments":["that,"]},{"Key":"like that,","Fragments":["but","having","and"]},{"Key":"that, but","Fragments":["I'm","then","then","your","it","I'm","I"]},{"Key":"sure others","Fragments":["feel"]},{"Key":"others feel","Fragments":["differently."]},{"Key":"feedback. I've","Fragments":["certainly"]},{"Key":"I've certainly","Fragments":["not"]},{"Key":"certainly not","Fragments":["got","an"]},{"Key":"not got","Fragments":["the"]},{"Key":"got the","Fragments":["hang","domain","following","single"]},{"Key":"the hang","Fragments":["at"]},{"Key":"hang at","Fragments":["all"]},{"Key":"at all","Fragments":["of",":)","costs","here.","times",":)","and",":)","if"]},{"Key":"of indentation","Fragments":["in","as"]},{"Key":"indentation in","Fragments":["clojure","`ns`"]},{"Key":"clojure yet.","Fragments":["In"]},{"Key":"yet. In","Fragments":["other"]},{"Key":"In other","Fragments":["languages","words,","words:","words,","words,","words,"]},{"Key":"other languages","Fragments":["I","on"]},{"Key":"languages I","Fragments":["don't"]},{"Key":"don't worry","Fragments":["so"]},{"Key":"worry so","Fragments":["much"]},{"Key":"much about","Fragments":["making","being","the","the","it","the"]},{"Key":"making things","Fragments":["like"]},{"Key":"things like","Fragments":["the","replacing","the","(count","this","\"yelling\"","this","`cloud9`","the","converting","`(=","uppercase","`angry?`,","this"]},{"Key":"`cond` responses","Fragments":["align"]},{"Key":"responses align","Fragments":["but"]},{"Key":"align but","Fragments":["maybe"]},{"Key":"maybe it","Fragments":["makes","would","is","doesn't","helps","would"]},{"Key":"makes more","Fragments":["sense","sense","sense"]},{"Key":"sense in","Fragments":["clojure?","cases","my"]},{"Key":"the predicates.","Fragments":["Might"]},{"Key":"predicates. Might","Fragments":["it"]},{"Key":"Might it","Fragments":["be","be"]},{"Key":"make those","Fragments":["private?","predicate","non-public.","response","values","a","a"]},{"Key":"those private?","Fragments":["They"]},{"Key":"private? They","Fragments":["don't"]},{"Key":"They don't","Fragments":["really"]},{"Key":"don't really","Fragments":["need","think","see","follow","like","like","understand","know","tell","ever","like","know","know","understand","like","see","matter"]},{"Key":"really need","Fragments":["to","a","it,","to.","a","it.","to","to"]},{"Key":"be part","Fragments":["of","of","of","of","of"]},{"Key":"the module's","Fragments":["interface."]},{"Key":" Something","Fragments":["else","like"]},{"Key":"Something else","Fragments":["I"]},{"Key":"else I","Fragments":["really"]},{"Key":"do when","Fragments":["I'm"]},{"Key":"when I'm","Fragments":["returning","in","working"]},{"Key":"I'm returning","Fragments":["something"]},{"Key":"returning something","Fragments":["like"]},{"Key":"string from","Fragments":["a","the"]},{"Key":"from a","Fragments":["`cond`","function","verse-components","string","single","namespace","map","poor","collection","particular","table.","particular","sequence","map","string.","background"]},{"Key":"`cond` is","Fragments":["to","going","structured,","a","the"]},{"Key":"to vertically","Fragments":["line"]},{"Key":"vertically line","Fragments":["up"]},{"Key":"line up","Fragments":["all","/"]},{"Key":"up all","Fragments":["the","my"]},{"Key":"the strings,","Fragments":["just","but"]},{"Key":"strings, just","Fragments":["because"]},{"Key":"just because","Fragments":["I","of","I'm","I","I"]},{"Key":"because I","Fragments":["think","have","just","haven't","felt:","felt","kept","had","didn't","felt","missed","just","don't","went","find","thought","like","sacrificed","generally","like","didn't","feel","think","had","keep","originally"]},{"Key":"looks nice.","Fragments":["That's","However,","Alternative"]},{"Key":"nice. That's","Fragments":["up"]},{"Key":"That's up","Fragments":["to"]},{"Key":"up to","Fragments":["you","the","line","speed","speed.","this","`word-count`","you","1,000","the","a","the"]},{"Key":"to you","Fragments":["though.","on","at","non-working","for","and","the"]},{"Key":"It took","Fragments":["me","less","me","me","some"]},{"Key":"took me","Fragments":["a","a","some","a","a","longer"]},{"Key":"me a","Fragments":["moment","bit","minute.","while","bit","headache!","bit","bit","little","bit","hint?","minute","thing","loop","moment","lot.","lot.","while","while","while","Regular"]},{"Key":"a moment","Fragments":["to","of","of"]},{"Key":"moment to","Fragments":["understand"]},{"Key":"the `(first","Fragments":["sentence)`"]},{"Key":"`(first sentence)`","Fragments":["line"]},{"Key":"sentence)` line","Fragments":["referred"]},{"Key":"line referred","Fragments":["to."]},{"Key":"referred to.","Fragments":["Since"]},{"Key":"to. Since","Fragments":["the"]},{"Key":"Since the","Fragments":["silent"]},{"Key":"the silent","Fragments":["clause"]},{"Key":"silent clause","Fragments":["comes"]},{"Key":"clause comes","Fragments":["first,"]},{"Key":"comes first,","Fragments":["do"]},{"Key":"first, do","Fragments":["you"]},{"Key":"think that's","Fragments":["necessary?","possible","pretty","the","an","more"]},{"Key":"that's necessary?","Fragments":["I"]},{"Key":"necessary? I","Fragments":["can","think"]},{"Key":"for keeping","Fragments":["it,"]},{"Key":"keeping it,","Fragments":["maybe"]},{"Key":"it, maybe","Fragments":["in"]},{"Key":"maybe in","Fragments":["that"]},{"Key":"that case","Fragments":["it","is","insensitivity","a","the"]},{"Key":"case it","Fragments":["would","makes","doesn't","would"]},{"Key":"for something","Fragments":["more","that","this","simple","different,","like"]},{"Key":"more explicit,","Fragments":["like","for"]},{"Key":"explicit, like","Fragments":["`(not"]},{"Key":"like `(not","Fragments":["(empty?"]},{"Key":"`(not (empty?","Fragments":["sentence))`","letters-in-prompt))`","y))`,","f))`"]},{"Key":"(empty? sentence))`","Fragments":["or"]},{"Key":"sentence))` or","Fragments":["something"]},{"Key":"or something","Fragments":["like","similar.","would","like","would"]},{"Key":"Ah, that's","Fragments":["a","a","how"]},{"Key":"a very","Fragments":["good","good","nice","wide","important","interesting","short","useful","generic","simple","simple"]},{"Key":"very good","Fragments":["point","point","suggestions,","points.","readable","points."]},{"Key":"good point","Fragments":["about","about","—","about","on","--","that"]},{"Key":"point about","Fragments":["`second-part`.","the","`seq`","shortness,","the"]},{"Key":"about `second-part`.","Fragments":["Yes,"]},{"Key":"`second-part`. Yes,","Fragments":["you're"]},{"Key":"Yes, you're","Fragments":["probably"]},{"Key":"you're probably","Fragments":["right"]},{"Key":"probably right","Fragments":["about"]},{"Key":"about joining","Fragments":["the"]},{"Key":"joining the","Fragments":["verses"]},{"Key":"the verses","Fragments":["in","and","fully"]},{"Key":"verses in","Fragments":["`sing`,"]},{"Key":"in `sing`,","Fragments":["and"]},{"Key":"`sing`, and","Fragments":["thanks!"]},{"Key":"- you","Fragments":["have","are","can","would","can","can","could","are","have","don't","work","get","map","don't","are"]},{"Key":"have `second-part`","Fragments":["but"]},{"Key":"`second-part` but","Fragments":["not"]},{"Key":"not `first-part`.","Fragments":["Might"]},{"Key":"`first-part`. Might","Fragments":["that"]},{"Key":"Might that","Fragments":["be"]},{"Key":"that be","Fragments":["a","practive","better,","better,","a","bad"]},{"Key":"a hint","Fragments":["that","of","without"]},{"Key":"hint that","Fragments":["that"]},{"Key":"that logic","Fragments":["could","to","is","multiple"]},{"Key":"logic could","Fragments":["be"]},{"Key":"be extracted","Fragments":["as","out,","into","to","to"]},{"Key":"extracted as","Fragments":["well?"]},{"Key":"clearer in","Fragments":["`sing`","my"]},{"Key":"in `sing`","Fragments":["to","over","seems","is"]},{"Key":"`sing` to","Fragments":["join"]},{"Key":"to join","Fragments":["the","it","with"]},{"Key":"join the","Fragments":["verses","sequences"]},{"Key":"verses and","Fragments":["append"]},{"Key":"and append","Fragments":["a","another"]},{"Key":"append a","Fragments":["newline,","question"]},{"Key":"a newline,","Fragments":["instead"]},{"Key":"newline, instead","Fragments":["of"]},{"Key":"splitting up","Fragments":["the"]},{"Key":"the operation","Fragments":["in","more","is"]},{"Key":"operation in","Fragments":["the","`verse`"]},{"Key":"the `let`","Fragments":["form?","in","in","form","binding","around","closure","is","and","and"]},{"Key":"- `pronoun`","Fragments":["is"]},{"Key":"`pronoun` is","Fragments":["a"]},{"Key":"pretty good","Fragments":["name","to","readable.","sign","sequence","for","to","to","to","otherwise.","idea."]},{"Key":"good name","Fragments":["for","for"]},{"Key":"that function.","Fragments":["Well","Looking"]},{"Key":"function. Well","Fragments":["done!"]},{"Key":"pretty compact","Fragments":["but","but"]},{"Key":"compact but","Fragments":["you're","you"]},{"Key":"you're repeating","Fragments":["strings"]},{"Key":"repeating strings","Fragments":["a"]},{"Key":"strings a","Fragments":["lot.","bit"]},{"Key":"a lot.","Fragments":["Is","No,","I'd","I"]},{"Key":"lot. Is","Fragments":["there"]},{"Key":"could refactor","Fragments":["it","the"]},{"Key":"refactor it","Fragments":["to"]},{"Key":"feedback. I","Fragments":["hadn't","cannot","didn't","do","found","finally","just","routinely"]},{"Key":"hadn't realized","Fragments":["replace"]},{"Key":"realized replace","Fragments":["would"]},{"Key":"replace would","Fragments":["just"]},{"Key":"just take","Fragments":["a"]},{"Key":"a string.","Fragments":["Also,","Most","You","The","Functions","Your","Strings"]},{"Key":"string. Also,","Fragments":["you"]},{"Key":"are totally","Fragments":["right","right"]},{"Key":"totally right","Fragments":["about",":)","about"]},{"Key":"the \"magic","Fragments":["letters\"."]},{"Key":"\"magic letters\".","Fragments":["I"]},{"Key":"letters\". I","Fragments":["often"]},{"Key":"I often","Fragments":["define","overlook"]},{"Key":"often define","Fragments":["\"magic"]},{"Key":"define \"magic","Fragments":["numbers\""]},{"Key":"\"magic numbers\"","Fragments":["but"]},{"Key":"numbers\" but","Fragments":["for"]},{"Key":"but for","Fragments":["some","something","the","such","some","valid"]},{"Key":"for some","Fragments":["reason","definitions","examples","clarification","nitpicking","measly","consistency","reason","feedback.","to","reason"]},{"Key":"some reason","Fragments":["I","this","it","I","I'd"]},{"Key":"reason I","Fragments":["didn't","didn't","used","care","liked"]},{"Key":"didn't make","Fragments":["the","the","it","it","it"]},{"Key":"the jump","Fragments":["to"]},{"Key":"jump to","Fragments":["letters."]},{"Key":"to letters.","Fragments":["Much"]},{"Key":"letters. Much","Fragments":["clearer"]},{"Key":"Much clearer","Fragments":["in"]},{"Key":"my next","Fragments":["iteration.","submit.","revision.","submission","submission.","submission.","iteration.","submission.","point","two"]},{"Key":"Nice, I","Fragments":["like"]},{"Key":"you require","Fragments":["`replace`."]},{"Key":" Does","Fragments":["`T`","wrapping","this","this","the","its","clojure","this"]},{"Key":"Does `T`","Fragments":["have"]},{"Key":"`T` have","Fragments":["to"]},{"Key":"a regex?","Fragments":["Or"]},{"Key":"regex? Or","Fragments":["could"]},{"Key":"Or could","Fragments":["you"]},{"Key":"get by","Fragments":["with","without","using","with","with","with"]},{"Key":"by with","Fragments":["just","calculating","minimal","a"]},{"Key":"with just","Fragments":["a","`map`,","whitespace","one","one"]},{"Key":"just a","Fragments":["string?","four-character","bit","matter","matter","function","thought","matter","name","couple","syntactic","matter","string.","regular","shorthand","subset?","personal","matter","map","couple","style","shortcut","Var","Var","constructor","map,","tutorial","visual","seq?","lot","chain","name!","value"]},{"Key":"a string?","Fragments":["Also,","Hint:",":)"]},{"Key":"string? Also,","Fragments":["you"]},{"Key":"consider giving","Fragments":["names","your"]},{"Key":"giving names","Fragments":["to","to"]},{"Key":"to `T`","Fragments":["and"]},{"Key":"`T` and","Fragments":["`U`"]},{"Key":"and `U`","Fragments":["with"]},{"Key":"`U` with","Fragments":["a"]},{"Key":"a `def`","Fragments":["or"]},{"Key":"`def` or","Fragments":["`let`,"]},{"Key":"or `let`,","Fragments":["to"]},{"Key":"`let`, to","Fragments":["make"]},{"Key":"it clearer","Fragments":["what","especially"]},{"Key":"clearer what","Fragments":["exchange","the"]},{"Key":"what exchange","Fragments":["is"]},{"Key":"exchange is","Fragments":["happening."]},{"Key":" Looking","Fragments":["good,","good!","good!","snazzy","good!","good!","good!","at","good..","over","through","at","at"]},{"Key":"Looking good,","Fragments":["but"]},{"Key":"good, but","Fragments":["it","it","just","could","you","doesn't"]},{"Key":"looks like","Fragments":["you","you","a","clojure","it","here","a","a","this","this","even","you","the","I","clojure","words","your","a","any","configuration.","you","your","your","it","\"drop","idiomatic","your","you","this","you're","`re-matches`"]},{"Key":"like you","Fragments":["may","submitted","have","do","do","lost","repeat","did.","suggested,","have","did,","don't","can","left"]},{"Key":"may have","Fragments":["forgotten","not","to","less","been"]},{"Key":"have forgotten","Fragments":["to"]},{"Key":"forgotten to","Fragments":["hook"]},{"Key":"to hook","Fragments":["up"]},{"Key":"hook up","Fragments":["your"]},{"Key":"up your","Fragments":["new","silence","`clojure.string/*`","`nucleotide?`","expressions.","expressions"]},{"Key":"your new","Fragments":["methods."]},{"Key":"The test","Fragments":["really","suite","expects","suite"]},{"Key":"test really","Fragments":["could"]},{"Key":"really could","Fragments":["benefit"]},{"Key":"could benefit","Fragments":["from","readability.","from","from"]},{"Key":"benefit from","Fragments":["having","`drop-while`.","giving","being"]},{"Key":"from having","Fragments":["a","completed"]},{"Key":"having a","Fragments":["test","\"T\".","tone","map","map","full","ball,","`do`","JVM"]},{"Key":"case like","Fragments":["\"It's","this?"]},{"Key":"like \"It's","Fragments":["raining"]},{"Key":"\"It's raining","Fragments":["out!\""]},{"Key":"raining out!\"","Fragments":["with"]},{"Key":"out!\" with","Fragments":["the"]},{"Key":"the appropriate","Fragments":["behavior","string.","use","response,","function"]},{"Key":"appropriate behavior","Fragments":["defined"]},{"Key":"behavior defined","Fragments":["to"]},{"Key":"defined to","Fragments":["help"]},{"Key":"to help","Fragments":["clarify","differentiate","the","with","me"]},{"Key":"help clarify","Fragments":["this.","the"]},{"Key":"that based","Fragments":["on"]},{"Key":"the readme","Fragments":["(and","for","was","as"]},{"Key":"readme (and","Fragments":["my"]},{"Key":"(and my","Fragments":["own"]},{"Key":"my own","Fragments":["time","refactorings.","implementation","words","opinion","lack","solution.","code.","nits!","education.","version","for","exponent","string","\"primitive-feeling\"","version"]},{"Key":"own time","Fragments":["as"]},{"Key":"a recalcitrant","Fragments":["teenager)"]},{"Key":"recalcitrant teenager)","Fragments":["\"Whatever.\""]},{"Key":"teenager) \"Whatever.\"","Fragments":["should"]},{"Key":"be Bob's","Fragments":["default"]},{"Key":"Bob's default","Fragments":["response."]},{"Key":"Moving the","Fragments":["conditional","mappings"]},{"Key":"to functions","Fragments":["will","that","(even","being","_if_","is"]},{"Key":"functions will","Fragments":["make","be","be"]},{"Key":"will make","Fragments":["the","your","for","your","it","for","your","`verse`","your","the","it","it","for","my","`.trim`","it"]},{"Key":"code clearer.","Fragments":["I'm"]},{"Key":"clearer. I'm","Fragments":["not"]},{"Key":"the behaviour","Fragments":["should"]},{"Key":"behaviour should","Fragments":["be"]},{"Key":"be for","Fragments":["an","public."]},{"Key":"an unrecognised","Fragments":["sentence"]},{"Key":"unrecognised sentence","Fragments":["-"]},{"Key":"sentence -","Fragments":["perhaps"]},{"Key":"- perhaps","Fragments":["returning"]},{"Key":"perhaps returning","Fragments":["nil"]},{"Key":"returning nil","Fragments":["is"]},{"Key":"is sufficient?","Fragments":["I've"]},{"Key":"sufficient? I've","Fragments":["added"]},{"Key":"I've added","Fragments":["a","defined","an","that"]},{"Key":"added a","Fragments":["default","third","more","project.clj"]},{"Key":"response, but","Fragments":["with","that"]},{"Key":"with no","Fragments":["behaviour","(additional)","problems.","lowercase","double","double"]},{"Key":"no behaviour","Fragments":["defined"]},{"Key":"behaviour defined","Fragments":["in"]},{"Key":"the provided","Fragments":["tests"]},{"Key":"provided tests","Fragments":["I'm"]},{"Key":"tests I'm","Fragments":["unsure"]},{"Key":"I'm unsure","Fragments":["about","about"]},{"Key":"unsure about","Fragments":["it.","the","its","the"]},{"Key":"about it.","Fragments":["Thanks","Good","Do","Other","Next"]},{"Key":"consider writing","Fragments":["functions"]},{"Key":"writing functions","Fragments":["with","I"]},{"Key":"to maintain","Fragments":["the","readability","that","order"]},{"Key":"maintain the","Fragments":["conditional","readability","readability"]},{"Key":"Any chance","Fragments":["to"]},{"Key":"chance to","Fragments":["get","work","use"]},{"Key":"get approved?","Fragments":[":)"]},{"Key":"approved? :)","Fragments":["My"]},{"Key":":) My","Fragments":["Python","only"]},{"Key":"My Python","Fragments":["track"]},{"Key":"Python track","Fragments":["is"]},{"Key":"track is","Fragments":["moving"]},{"Key":"is moving","Fragments":["at"]},{"Key":"moving at","Fragments":["much"]},{"Key":"at much","Fragments":["better"]},{"Key":"better pace.","Fragments":["Is"]},{"Key":"pace. Is","Fragments":["there"]},{"Key":"something I'm","Fragments":["missing?"]},{"Key":"Thank you.","Fragments":[":)","Does","I'll","I"]},{"Key":"Thanks n1k0","Fragments":[":)"]},{"Key":" Ha","Fragments":["indeed,","ha","ha,"]},{"Key":"Ha indeed,","Fragments":["how"]},{"Key":"indeed, how","Fragments":["could"]},{"Key":"how could","Fragments":["I"]},{"Key":"could I","Fragments":["miss","not"]},{"Key":"I miss","Fragments":["that?","something?"]},{"Key":"miss that?","Fragments":["Thanks"]},{"Key":"that? Thanks","Fragments":[":)"]},{"Key":"more concise","Fragments":["way","now","and,","way.","implementation","than","solution.",":","and","ways","way","ways"]},{"Key":"concise way","Fragments":["to","expressing"]},{"Key":"get at","Fragments":["the","first","the"]},{"Key":"character of","Fragments":["a","a","a","a","a","a","a","a","a"]},{"Key":"you submitted","Fragments":["the"]},{"Key":"tests instead","Fragments":["of"]},{"Key":" Agreed.","Fragments":["Removed","Looks","You","Thanks","I"]},{"Key":"Agreed. Removed","Fragments":["it."]},{"Key":" Try","Fragments":["using","as","one","using","using","doing","use","factoring","pulling","to","defining","putting"]},{"Key":"Try using","Fragments":["`:require`","`cone`","`cond`","`let`"]},{"Key":"`ns` macro","Fragments":["for","would","can","-","formatting","to","to"]},{"Key":"macro for","Fragments":["loading","**(re-pattern","good"]},{"Key":"for loading","Fragments":["libraries."]},{"Key":"do split-words","Fragments":["without"]},{"Key":"split-words without","Fragments":["needing"]},{"Key":"without needing","Fragments":["strip-chars"]},{"Key":"needing strip-chars","Fragments":["at"]},{"Key":"strip-chars at","Fragments":["all?"]},{"Key":"Looks nice!","Fragments":["Cheers","I"]},{"Key":"nice! Cheers","Fragments":[":)"]},{"Key":"point. Done","Fragments":["and"]},{"Key":"Done and","Fragments":["resubmitted."]},{"Key":" @alfreda-ee,","Fragments":["good"]},{"Key":"@alfreda-ee, good","Fragments":["point,"]},{"Key":"good point,","Fragments":["checkout","I","pushed","done."]},{"Key":"point, checkout","Fragments":["new"]},{"Key":"checkout new","Fragments":["sequence-based"]},{"Key":"new sequence-based","Fragments":["version."]},{"Key":"The (seq","Fragments":["x)"]},{"Key":"(seq x)","Fragments":["is"]},{"Key":"x) is","Fragments":["actually"]},{"Key":"is actually","Fragments":["redundant,","the","the","pretty","2","implement","[`zero?`](http://clojuredocs.org/clojure_core/clojure.core/zero_q)","a","a","testing"]},{"Key":"actually redundant,","Fragments":["you"]},{"Key":"redundant, you","Fragments":["can"]},{"Key":"use (last","Fragments":["x)"]},{"Key":"(last x)","Fragments":["directly."]},{"Key":"x) directly.","Fragments":["Otherwise"]},{"Key":"directly. Otherwise","Fragments":["this"]},{"Key":"Otherwise this","Fragments":["looks","is","looks"]},{"Key":"Java API,","Fragments":["I","why"]},{"Key":"API, I","Fragments":["wonder"]},{"Key":"I wonder","Fragments":["if","how","if","what","if","if","if","if","how","if","if","if","if","about","if","if","what","how","if"]},{"Key":"wonder if","Fragments":["you","you","you","you","using","`format`","I","that's","there's","things","you","there","I"]},{"Key":"you couldn't","Fragments":["use","use","extract","create"]},{"Key":"couldn't use","Fragments":["something","map"]},{"Key":"use something","Fragments":["from","more","like","a","names"]},{"Key":"something from","Fragments":["`clojure.core`"]},{"Key":"from `clojure.core`","Fragments":["to","you"]},{"Key":"`clojure.core` to","Fragments":["get"]},{"Key":"to scope","Fragments":["things"]},{"Key":"scope things","Fragments":["tightly"]},{"Key":"things tightly","Fragments":["when"]},{"Key":"tightly when","Fragments":["I"]},{"Key":"could probably","Fragments":["assign","use","use","declare","use","be","get","vastly","be","just","use","be","be","have"]},{"Key":"probably assign","Fragments":["nucleotide"]},{"Key":"assign nucleotide","Fragments":["characters","characters"]},{"Key":"nucleotide characters","Fragments":["to","to","to"]},{"Key":"characters to","Fragments":["variables","vars,","atoms,","more","represent","more","a","strings"]},{"Key":"to variables","Fragments":["to","`thymidine`"]},{"Key":"variables to","Fragments":["enhance","increase","actual","reuse","encapsulate"]},{"Key":"to enhance","Fragments":["legibility","legibility."]},{"Key":" (Accidental","Fragments":["Submission)"]},{"Key":"the awesome","Fragments":["feedback!","advice!"]},{"Key":"do (.endsWith","Fragments":["message"]},{"Key":"(.endsWith message","Fragments":["\"?\")","\"?\"))"]},{"Key":"message \"?\")","Fragments":["without"]},{"Key":"\"?\") without","Fragments":["using"]},{"Key":"Java method?","Fragments":["The"]},{"Key":"method? The","Fragments":["reason"]},{"Key":"The reason","Fragments":["you","I'd","I","for","was"]},{"Key":"might do","Fragments":["this"]},{"Key":"to support","Fragments":["Clojure","unicode","destructuring"]},{"Key":"support Clojure","Fragments":["dialects"]},{"Key":"Clojure dialects","Fragments":["that"]},{"Key":"dialects that","Fragments":["do"]},{"Key":"that do","Fragments":["not","nothing","a"]},{"Key":"do not","Fragments":["run","need","think","want","use","use","clash.)","look","find","really"]},{"Key":"not run","Fragments":["on"]},{"Key":"run on","Fragments":["the"]},{"Key":"the JVM,","Fragments":["such"]},{"Key":"JVM, such","Fragments":["as"]},{"Key":"Why isn't","Fragments":["`silence?`"]},{"Key":"isn't `silence?`","Fragments":["declared"]},{"Key":"`silence?` declared","Fragments":["as"]},{"Key":"declared as","Fragments":["private"]},{"Key":"as private","Fragments":["like","(using","using","vars).","the"]},{"Key":"private like","Fragments":["the"]},{"Key":"other helpers?","Fragments":[":)"]},{"Key":" Edit:","Fragments":["oh,","scratch","Heh,","typo.","It"]},{"Key":"Edit: oh,","Fragments":["it's"]},{"Key":"oh, it's","Fragments":["not"]},{"Key":"function declaration,","Fragments":["just"]},{"Key":"declaration, just","Fragments":["an"]},{"Key":"just an","Fragments":["alias,","idea","alternative,","equality","alias","idea.","innacurate","option."]},{"Key":"an alias,","Fragments":["sorry."]},{"Key":"You should","Fragments":["consider","consider","miss","also","always","use","refer","use","be","be","be","be","be","use","also","probably"]},{"Key":"should consider","Fragments":["using","making","using","giving","letting"]},{"Key":"using `cond`","Fragments":["instead","instead","couldn't","instead","rather","rather","instead","before."]},{"Key":"`cond` instead","Fragments":["of","of","of","of","of"]},{"Key":"of nested","Fragments":["`if`","`if`s?","`if`","`if`s","ifs,","calls","lists.","calls.","ifs"]},{"Key":"nested `if`","Fragments":["statements","statements","expressions"]},{"Key":"`if` statements","Fragments":[":)","I've"]},{"Key":" Submitted","Fragments":["test","in"]},{"Key":"Submitted test","Fragments":["file"]},{"Key":"test file","Fragments":["by","is","in","uses?"]},{"Key":"file by","Fragments":["mistake"]},{"Key":" ah,","Fragments":["true!"]},{"Key":"ah, true!","Fragments":["thanks"]},{"Key":"true! thanks","Fragments":["for"]},{"Key":"Maybe you","Fragments":["could","check","take","could","could","could","could","can","should","should"]},{"Key":"`last` to","Fragments":["check","check","chec","check","check","grab"]},{"Key":"the latest","Fragments":["character","version","version"]},{"Key":"latest character","Fragments":["of"]},{"Key":"tried considered","Fragments":["using"]},{"Key":"using one","Fragments":["of","helper","of","regular"]},{"Key":"the Seq","Fragments":["functions?"]},{"Key":" Nothing","Fragments":["to","to","beyond"]},{"Key":"Nothing to","Fragments":["declare.","declare,"]},{"Key":"to declare.","Fragments":["Looks"]},{"Key":"declare. Looks","Fragments":["great"]},{"Key":"you `(require","Fragments":["clojure.string))`,"]},{"Key":"`(require clojure.string))`,","Fragments":["you're"]},{"Key":"clojure.string))`, you're","Fragments":["no"]},{"Key":"you're no","Fragments":["more","longer"]},{"Key":"no more","Fragments":["forced","necessary"]},{"Key":"more forced","Fragments":["to"]},{"Key":"forced to","Fragments":["call"]},{"Key":"call its","Fragments":["functions"]},{"Key":"its functions","Fragments":["using"]},{"Key":"functions using","Fragments":["the","the"]},{"Key":"was trying","Fragments":["to","``case``,","to","to","to","to","to"]},{"Key":"trying to","Fragments":["be","teach","push","run","reflect","evaluate","argue,","go","find","take","be","make","get","break","see","exclude","debug","accomplish.","implement.","check.","get","accomplish","preserve","leave","short","golf","use","think","write","implement","write","wrap","achieve..","get","find","think","make","accomplish.","get","do"]},{"Key":"be very","Fragments":["minimal","hesitant","strict","well","easy","brittle","deeply"]},{"Key":"very minimal","Fragments":["in"]},{"Key":"minimal in","Fragments":["what"]},{"Key":" well,","Fragments":["_that_"]},{"Key":"well, _that_","Fragments":["was"]},{"Key":"_that_ was","Fragments":["easy."]},{"Key":"was easy.","Fragments":["Thanks"]},{"Key":"easy. Thanks","Fragments":["for"]},{"Key":"the tip,","Fragments":["@queen.","I"]},{"Key":"I added","Fragments":["require,","a","helper","it","a","some"]},{"Key":"added require,","Fragments":["not"]},{"Key":"require, not","Fragments":["sure"]},{"Key":"sure how","Fragments":["to","I","to","that","the","to","to","readable","appropriate","to","much","i","this","idiomatic","that","I"]},{"Key":"use use","Fragments":["yet."]},{"Key":"Thanks, arr-ee,","Fragments":["I'll"]},{"Key":"arr-ee, I'll","Fragments":["look"]},{"Key":"I'll look","Fragments":["into","that","into","into","into"]},{"Key":"can now","Fragments":["remove","simplify"]},{"Key":"now remove","Fragments":["unused"]},{"Key":"remove unused","Fragments":["code","import"]},{"Key":"unused code","Fragments":["like"]},{"Key":"like `question?`","Fragments":[":)"]},{"Key":"And possibly","Fragments":["try"]},{"Key":"possibly try","Fragments":["to"]},{"Key":"to `require`","Fragments":["or","thanks"]},{"Key":"`require` or","Fragments":["`use`","`use`"]},{"Key":"or `use`","Fragments":["the","the"]},{"Key":"`use` the","Fragments":["`clojure.string","`clojure.string`"]},{"Key":"the `clojure.string","Fragments":["namespace`"]},{"Key":"`clojure.string namespace`","Fragments":["to"]},{"Key":"namespace` to","Fragments":["keep"]},{"Key":"to keep","Fragments":["things","consistent","indentation","name","consistent","binding","the","functions","the","working","this","the","the","public","the","the","in","a","each","your","what","in","it","it","it","all"]},{"Key":"keep things","Fragments":["even","a","a"]},{"Key":"things even","Fragments":["more","messier."]},{"Key":"more shorter","Fragments":[":)"]},{"Key":"can safely","Fragments":["get"]},{"Key":"safely get","Fragments":["rid"]},{"Key":"the current","Fragments":["`question?`","problem.","solution","context","code","value","set","one.","version.","value","values","test"]},{"Key":"current `question?`","Fragments":["function"]},{"Key":"and rename","Fragments":["`question2?`","it:"]},{"Key":"rename `question2?`","Fragments":["to"]},{"Key":"`question2?` to","Fragments":["`question?`."]},{"Key":"to `question?`.","Fragments":["Otherwise"]},{"Key":"`question?`. Otherwise","Fragments":["it"]},{"Key":"Otherwise it","Fragments":["looks","seems"]},{"Key":" Please","Fragments":["ignore","ignore","bear","pay","guide","put","check","use","check","remember","close"]},{"Key":"Please ignore","Fragments":["use","...","this"]},{"Key":"ignore use","Fragments":["6."]},{"Key":"for all","Fragments":["the","the","nucleotides,","the","forms","time","occurrences","screens.","upper","your","the","the","the","of","the","of","caps"]},{"Key":"the help.","Fragments":["Updating"]},{"Key":"help. Updating","Fragments":["the"]},{"Key":"Updating the","Fragments":["code"]},{"Key":"code now","Fragments":["using","(more"]},{"Key":"now using","Fragments":["last","`loop`"]},{"Key":"using last","Fragments":["and"]},{"Key":"last and","Fragments":["removing","then"]},{"Key":"and removing","Fragments":["seq","some","punctuation","other"]},{"Key":"about unusually","Fragments":["cased"]},{"Key":"unusually cased","Fragments":["words?"]},{"Key":"cased words?","Fragments":["\"Hello\"","\"Hello\""]},{"Key":"words? \"Hello\"","Fragments":["vs","vs"]},{"Key":"So just","Fragments":["a"]},{"Key":"a four-character","Fragments":["map"]},{"Key":"four-character map","Fragments":["rather"]},{"Key":"map rather","Fragments":["than"]},{"Key":"than my","Fragments":["translator","initial","first","approach","macro","question"]},{"Key":"my translator","Fragments":["conceit?"]},{"Key":"translator conceit?","Fragments":["I"]},{"Key":"conceit? I","Fragments":["could"]},{"Key":"could see","Fragments":["that.","that","how","myself"]},{"Key":" Answering","Fragments":["to"]},{"Key":"Answering to","Fragments":["myself"]},{"Key":"to myself","Fragments":["to","though,"]},{"Key":"myself to","Fragments":["see","a)","rewrite"]},{"Key":"it helps","Fragments":["making","you."]},{"Key":"helps making","Fragments":["this"]},{"Key":"making this","Fragments":["one","simpler."]},{"Key":"one being","Fragments":["reviewed"]},{"Key":"being reviewed","Fragments":["faster"]},{"Key":"reviewed faster","Fragments":[":p"]},{"Key":"I've been","Fragments":["doing","a","doing.","the","spending","dabbling","taught","trying","following","trying"]},{"Key":"been doing","Fragments":["Java","ruby/javascript"]},{"Key":"doing Java","Fragments":["professionally"]},{"Key":"Java professionally","Fragments":["for"]},{"Key":"professionally for","Fragments":["~2,5"]},{"Key":"for ~2,5","Fragments":["years."]},{"Key":"~2,5 years.","Fragments":["Not"]},{"Key":"years. Not","Fragments":["anymore,"]},{"Key":"Not anymore,","Fragments":["though."]},{"Key":"It's also","Fragments":["worth","not","good","idiomatic","common","common","useful","the"]},{"Key":"also worth","Fragments":["mentioning"]},{"Key":"worth mentioning","Fragments":["that","that"]},{"Key":"mentioning that","Fragments":["you","`letfn`"]},{"Key":"don't need","Fragments":["to","`vec`.","both","to","the","to","the","the","all","`pair-elements`","`clojure.string`","a","to","the","line","the","them","parens","the","to","to","to","to","the","the","to","to","to","to","to","the","to","the","it.","an","to","to","to","to","to","to"]},{"Key":"use `seq`","Fragments":["there.","on"]},{"Key":"Oh no,","Fragments":["I"]},{"Key":"pushed the","Fragments":["test"]},{"Key":" Clojure","Fragments":["is","doesn't,","variables","knows","keywords","+","doesn't","is","is","functions","does","doesn't","uses"]},{"Key":"Clojure is","Fragments":["confusing.","not","normally","that","awesome!!","definitely","reading","a"]},{"Key":"is confusing.","Fragments":["Most"]},{"Key":"confusing. Most","Fragments":["of"]},{"Key":"Most of","Fragments":["this","the","the"]},{"Key":"is idioms","Fragments":["copied"]},{"Key":"idioms copied","Fragments":["out"]},{"Key":"copied out","Fragments":["of"]},{"Key":"of searches.","Fragments":["Please"]},{"Key":"searches. Please","Fragments":["advise"]},{"Key":"Please advise","Fragments":["on"]},{"Key":"advise on","Fragments":["style"]},{"Key":"on style","Fragments":["and","-"]},{"Key":"style and","Fragments":["syntax.","preference."]},{"Key":"and syntax.","Fragments":["Also,"]},{"Key":"syntax. Also,","Fragments":["links"]},{"Key":"Also, links","Fragments":["to"]},{"Key":"links to","Fragments":["tutorials"]},{"Key":"to tutorials","Fragments":["that"]},{"Key":"tutorials that","Fragments":["cover"]},{"Key":"that cover","Fragments":["the"]},{"Key":"cover the","Fragments":["basics","intended","else"]},{"Key":"the basics","Fragments":["would","of"]},{"Key":"basics would","Fragments":["be"]},{"Key":"be nice.","Fragments":["Couldn't","Although"]},{"Key":"nice. Couldn't","Fragments":["find"]},{"Key":"Couldn't find","Fragments":["anything"]},{"Key":"find anything","Fragments":["like","similar"]},{"Key":"anything like","Fragments":["that"]},{"Key":"that on","Fragments":["their"]},{"Key":"their site,","Fragments":["I"]},{"Key":"site, I","Fragments":["think"]},{"Key":"it's assumed","Fragments":["you're"]},{"Key":"assumed you're","Fragments":["familiar"]},{"Key":"you're familiar","Fragments":["with"]},{"Key":"The `input`","Fragments":["variable"]},{"Key":"`input` variable","Fragments":["could"]},{"Key":"variable could","Fragments":["be"]},{"Key":"more descriptively","Fragments":["named."]},{"Key":" Accidental","Fragments":["push?","submit,","submission!"]},{"Key":"the indentation,","Fragments":["I"]},{"Key":"indentation, I","Fragments":["use"]},{"Key":"I use","Fragments":["textmate","last.","that","`partial`","emacs'","it","```clojure.string/replace```.","\"math\"","`:only`),","a"]},{"Key":"use textmate","Fragments":["and"]},{"Key":"textmate and","Fragments":["need"]},{"Key":"and need","Fragments":["to"]},{"Key":"to find","Fragments":["a","myself","documentation","a","anything.","documentation.","`string/replace`","something","something","a","a","functions","more","that","a","dna","the","out","it","a","`group-by`,","and","a","out","the","that","uppercase","more","a","that","that"]},{"Key":"a clojure","Fragments":["beautifier,","n00b,","code","newbie","core","n00b.","expert"]},{"Key":" (=","Fragments":["(last","(string/upper-case","\\?","(last","s","\\?","\\?","\"\"","input","input","(last","(nth","greeting","greeting","candidate-freq","alpha","(clojure.string/upper-case","(clojure.string/upper-case","rna-nucleotide","(str/upper-case","(last","(string/upper-case","(last","(count","(subs","phrase","(last","(last","(last","char","statement","(.trim","char1","a","(sort","(alphagram","\\?"]},{"Key":"(= (last","Fragments":["(seq","message)","input)","msg)","query)","phrase)","input)","sentence)","(seq","input)","msg)","input)"]},{"Key":"(last (seq","Fragments":["x))","x))","input))"]},{"Key":"(seq x))","Fragments":["\"?\")","returns"]},{"Key":"x)) \"?\")","Fragments":["returns"]},{"Key":"\"?\") returns","Fragments":["false"]},{"Key":"to declare,","Fragments":["it's"]},{"Key":"declare, it's","Fragments":["great."]},{"Key":" But","Fragments":["I","hey,","I","of","if","as","I'll","looks","this","could","I","I","isn't","seeing","good","my","yes,","it","actually","I'll","you","that","then,","`for`","I","'reducing'"]},{"Key":"But I","Fragments":["also","kinda","will","personally","won't","can't","would","couldn't","have","may","guess","question","also","do","think","have","probably","don't"]},{"Key":"also removed","Fragments":["the","the","pointless"]},{"Key":"removed the","Fragments":["second","word","require","chaining","double","require"]},{"Key":"second regexp","Fragments":["check,"]},{"Key":"regexp check,","Fragments":["swapping"]},{"Key":"check, swapping","Fragments":["the"]},{"Key":"swapping the","Fragments":["order"]},{"Key":"the order","Fragments":["of","wasn't","of","in","of","they're","of","to","is","of","of","of","in","of","of","they","of","of","of","of","of","to"]},{"Key":"order of","Fragments":["the","constants","definitions","function","the","the","`defn`s","arguments","its","magnitude","the","the","function","the","the","the"]},{"Key":"last two","Fragments":["outcomes.","test"]},{"Key":"Looking good!","Fragments":["About","(I'm","What","Here"]},{"Key":"good! About","Fragments":["the"]},{"Key":"`last` in","Fragments":["your"]},{"Key":"your question","Fragments":["check.","about"]},{"Key":"Love it","Fragments":["when"]},{"Key":"it when","Fragments":["code","I","doing","I"]},{"Key":"when code","Fragments":["melts"]},{"Key":"code melts","Fragments":["away!"]},{"Key":"Ah, sure,","Fragments":["since","indeed!"]},{"Key":"sure, since","Fragments":["I’ve"]},{"Key":"since I’ve","Fragments":["dropped"]},{"Key":"I’ve dropped","Fragments":["the"]},{"Key":"dropped the","Fragments":["negation."]},{"Key":"I wasn’t","Fragments":["aware"]},{"Key":"wasn’t aware","Fragments":["of"]},{"Key":"Looks nice,","Fragments":["thank","however","however"]},{"Key":"nice, thank","Fragments":["you!"]},{"Key":"guess it’s","Fragments":["done.","safe"]},{"Key":" Neat,","Fragments":["thanks!","thanks!","I've"]},{"Key":"I cannot","Fragments":["find","compare","say"]},{"Key":"cannot find","Fragments":["an"]},{"Key":"find an","Fragments":["end","appropriate","invalid","elegant"]},{"Key":"an end","Fragments":["with"]},{"Key":"with in","Fragments":["clojure,"]},{"Key":"clojure, the","Fragments":["other","functions"]},{"Key":"other way","Fragments":["I","around).","to","I","round"]},{"Key":"way I","Fragments":["can","named","did","considered","find","was","was","found","know","wanted:","had"]},{"Key":"can think","Fragments":["of","of","of.","off.","to","of","of"]},{"Key":"of is","Fragments":["Regexp.","something"]},{"Key":" Woops,","Fragments":["erroneously","no","I'm"]},{"Key":"Woops, erroneously","Fragments":["submitted"]},{"Key":"erroneously submitted","Fragments":["while"]},{"Key":"submitted while","Fragments":["toying"]},{"Key":"while toying","Fragments":["around,"]},{"Key":"toying around,","Fragments":["don't"]},{"Key":"around, don't","Fragments":["pay"]},{"Key":"don't pay","Fragments":["attention."]},{"Key":"Great point!","Fragments":["Not"]},{"Key":"point! Not","Fragments":["sure"]},{"Key":"Not sure","Fragments":["how","what","if","how","why","how","if","if","why","what's","if","about","what","whether","if","about","if"]},{"Key":"how I","Fragments":["missed","can","did","respond.","hate","could","was","caught","would","didn't","feel","wanted","could"]},{"Key":"I missed","Fragments":["that.","the","that","that!","this","a"]},{"Key":"missed that.","Fragments":["Plus"]},{"Key":"that. Plus","Fragments":["it"]},{"Key":"Plus it","Fragments":["cleans"]},{"Key":"it cleans","Fragments":["up","up"]},{"Key":"cleans up","Fragments":["the","the","the","`pretty-print`"]},{"Key":"the threading.","Fragments":["Resubmitting!"]},{"Key":"`:require` to","Fragments":["import"]},{"Key":"import the","Fragments":["`string`","string","functions","functions"]},{"Key":"the `string`","Fragments":["namespace?"]},{"Key":" Thanks.","Fragments":["I","I","I"]},{"Key":"Thanks. I","Fragments":["didn't","didn't","overlooked","got","went"]},{"Key":"the clojure","Fragments":["idioms.","style","exercises","code","core","koans","convention","I’ve","environment.","stdlib"]},{"Key":"You probably","Fragments":["shouldn't","could","want","intended","want"]},{"Key":"probably shouldn't","Fragments":["expose","be"]},{"Key":"shouldn't expose","Fragments":["the"]},{"Key":"expose the","Fragments":["helper"]},{"Key":"the `cond`,","Fragments":["you","the","but"]},{"Key":"`cond`, you","Fragments":["can"]},{"Key":"of `true`","Fragments":["for"]},{"Key":"`true` for","Fragments":["the","catch-all","inputs"]},{"Key":"the final","Fragments":["condition.","line","statement","result.","case"]},{"Key":" Alright,","Fragments":["who","I"]},{"Key":"Alright, who","Fragments":["let"]},{"Key":"who let","Fragments":["@delphia"]},{"Key":"let @delphia","Fragments":["in"]},{"Key":"@delphia in","Fragments":["here?"]},{"Key":"in here?","Fragments":[":)"]},{"Key":"I dig","Fragments":["it!"]},{"Key":"good! (I'm","Fragments":["on"]},{"Key":"(I'm on","Fragments":["vacation,"]},{"Key":"on vacation,","Fragments":["so"]},{"Key":"vacation, so","Fragments":["a"]},{"Key":"so a","Fragments":["little","hint","bit","string"]},{"Key":"little slow,","Fragments":["sorry!)"]},{"Key":" Sweet,","Fragments":["I"]},{"Key":"Sweet, I","Fragments":["love"]},{"Key":"love trimming","Fragments":["redundant"]},{"Key":"trimming redundant","Fragments":["functions"]},{"Key":"redundant functions","Fragments":[":)"]},{"Key":"seem like","Fragments":["domain","separate","a","a","it","a"]},{"Key":"like domain","Fragments":["language"]},{"Key":"language the","Fragments":["same"]},{"Key":"same way","Fragments":["the","of","i","as","you","as","and"]},{"Key":"way the","Fragments":["other","```-\u0026gt;\u0026gt;```","code","code","`if`","reduction"]},{"Key":"two function","Fragments":["names","names."]},{"Key":"is annoyingly","Fragments":["minor,"]},{"Key":"annoyingly minor,","Fragments":["but"]},{"Key":"minor, but","Fragments":["would","I"]},{"Key":"would `rest`","Fragments":["be"]},{"Key":"`rest` be","Fragments":["better"]},{"Key":"than `drop","Fragments":["1`?"]},{"Key":"would love","Fragments":["more","to","feedback","to","any"]},{"Key":"love more","Fragments":["feedback"]},{"Key":"more feedback","Fragments":["if"]},{"Key":"feedback if","Fragments":["this"]},{"Key":"not approval","Fragments":["worthy!"]},{"Key":" Whoops,","Fragments":["accidentally"]},{"Key":"Whoops, accidentally","Fragments":["submitted"]},{"Key":"accidentally submitted","Fragments":["a","when"]},{"Key":"a work","Fragments":["in"]},{"Key":"work in","Fragments":["progress","a","terms","a","this","other","Clojure.","any","your","the"]},{"Key":"in progress","Fragments":["test"]},{"Key":"progress test","Fragments":["to"]},{"Key":"test to","Fragments":["see","validate","see"]},{"Key":"could replace","Fragments":["cond","`empty-message?`."]},{"Key":"replace cond","Fragments":["with"]},{"Key":"cond with","Fragments":["case.","`:else","an","(="]},{"Key":" What's","Fragments":["with","the"]},{"Key":"What's with","Fragments":["all"]},{"Key":"with all","Fragments":["the","possible","Clojure","its"]},{"Key":"the parenthesis?","Fragments":["This"]},{"Key":"parenthesis? This","Fragments":["is"]},{"Key":"is weird","Fragments":["Ruby"]},{"Key":"weird Ruby","Fragments":["code..."]},{"Key":" Yup,","Fragments":["I'll","sorry"]},{"Key":"Yup, I'll","Fragments":["move"]},{"Key":"I'll move","Fragments":["them."]},{"Key":"looks great,","Fragments":["my","but","but","I","although","but"]},{"Key":"great, my","Fragments":["only"]},{"Key":"my only","Fragments":["nitpick","nitpick","complaint","bit"]},{"Key":"only nitpick","Fragments":["is","I","left","is","would","is","I"]},{"Key":"nitpick is","Fragments":["the","that","to","that","that","to"]},{"Key":"the trailing/hanging","Fragments":["parentheses"]},{"Key":"trailing/hanging parentheses","Fragments":["would"]},{"Key":"parentheses would","Fragments":["be"]},{"Key":"be normally","Fragments":["be"]},{"Key":"normally be","Fragments":["on","a"]},{"Key":"submitted another","Fragments":["revision.","version.","version","solution."]},{"Key":"really clean","Fragments":["and"]},{"Key":"clean and","Fragments":["nice!","readable.","easy","nice","concise.","looks"]},{"Key":" Your","Fragments":["helper","helper","loop/recur","implementation","point","let","`is-*`","`is-shouting`","solution","usage","solution","dispatch","condition","`seq-contains?`","regex","first","`zipvec`","`radiator`","codes","verse","`for`","`cond`","nitpicks","definition","use","to-rna,","solution","code","lambda","transcribe"]},{"Key":"Your helper","Fragments":["functions","functions"]},{"Key":"be private.","Fragments":["No","No","So,","One"]},{"Key":"private. No","Fragments":["sense","sense"]},{"Key":"No sense","Fragments":["exposing","exposing"]},{"Key":"sense exposing","Fragments":["more","more"]},{"Key":"exposing more","Fragments":["than","than"]},{"Key":"more than","Fragments":["you","you","you","wrap","twice","3/4.","one","one","just","the","this","one","one","one","one","once.","one","once","11","one","50%","5","welcome.","one"]},{"Key":"than you","Fragments":["need","need","need","need.","need."]},{"Key":"probably use","Fragments":["`last`","`last`","`last`","the","something","`clj-time`","`(zero?"]},{"Key":"`last` instead","Fragments":["of","of","of"]},{"Key":"of Java's","Fragments":["`endsWith`","reference"]},{"Key":"should try","Fragments":["a","to"]},{"Key":"try a","Fragments":["version","multimethod","`letfn`","version"]},{"Key":"with private","Fragments":["functions"]},{"Key":"functions or","Fragments":["`letfn`s","seq","simply"]},{"Key":"or `letfn`s","Fragments":["and"]},{"Key":"`letfn`s and","Fragments":["see"]},{"Key":"and see","Fragments":["what","if","if","which","what","if","if","what","how","what","how","what","if","how","about"]},{"Key":"see what","Fragments":["you","the","it","I","other","happens.","it","you","is","that","you","that","you"]},{"Key":"the differences","Fragments":["between"]},{"Key":"differences between","Fragments":["the","each,"]},{"Key":" Possibly","Fragments":["`:require`","could"]},{"Key":"Possibly `:require`","Fragments":["the"]},{"Key":"`:require` the","Fragments":["string"]},{"Key":"string namespace.","Fragments":["Otherwise,","I"]},{"Key":"namespace. Otherwise,","Fragments":["looks"]},{"Key":"Otherwise, looks","Fragments":["great.","neat","nice!","great!","nice!","nice,","pretty","great","good."]},{"Key":"appreciate the","Fragments":["feedback.","input.","guidelines","help!","feedback."]},{"Key":"Hmm, I'm","Fragments":["not"]},{"Key":"I follow.","Fragments":["strip-chars"]},{"Key":"follow. strip-chars","Fragments":["and"]},{"Key":"strip-chars and","Fragments":["split-words"]},{"Key":"and split-words","Fragments":["seem"]},{"Key":"split-words seem","Fragments":["like"]},{"Key":"like separate","Fragments":["concerns"]},{"Key":"separate concerns","Fragments":["to"]},{"Key":"concerns to","Fragments":["me."]},{"Key":"get how","Fragments":["the"]},{"Key":"how the","Fragments":["*admin","process","code","community","API","code","\"slow\"","authors","community","usage","test","code","solution","different"]},{"Key":"the *admin","Fragments":["validation"]},{"Key":"*admin validation","Fragments":["workflow*"]},{"Key":"validation workflow*","Fragments":["works"]},{"Key":"workflow* works","Fragments":["exactly,"]},{"Key":"works exactly,","Fragments":["but"]},{"Key":"exactly, but","Fragments":["I","I"]},{"Key":"agree it","Fragments":["could","is","seemed","looks"]},{"Key":"bit faster","Fragments":[":)","and"]},{"Key":"My take","Fragments":["is","on"]},{"Key":"take is","Fragments":["to"]},{"Key":"try all","Fragments":["language"]},{"Key":"all language","Fragments":["tracks,"]},{"Key":"language tracks,","Fragments":["so"]},{"Key":"tracks, so","Fragments":["I"]},{"Key":"find myself","Fragments":["waiting"]},{"Key":"myself waiting","Fragments":["plus"]},{"Key":"waiting plus","Fragments":["I'm"]},{"Key":"plus I'm","Fragments":["learning"]},{"Key":"I'm learning","Fragments":["tons","Clojure"]},{"Key":"learning tons","Fragments":["of"]},{"Key":"tons of","Fragments":["new"]},{"Key":"of new","Fragments":["things!","other"]},{"Key":"but `(=","Fragments":["true"]},{"Key":"`(= true","Fragments":["…)`"]},{"Key":"true …)`","Fragments":["is"]},{"Key":"…)` is","Fragments":["bad"]},{"Key":"is bad","Fragments":["style","and","in"]},{"Key":"bad style","Fragments":["in"]},{"Key":"style in","Fragments":["any","the","clojure"]},{"Key":"any language.","Fragments":["It","Observe","Bob"]},{"Key":"language. It","Fragments":["would"]},{"Key":"It would","Fragments":["be","help","also","be","be","be","be","be","be","be","simplify","be","be","look","also","be","be","scale","make","look","be","probably","be","be","be","allow"]},{"Key":"just say","Fragments":["`(str/blank?","Bob"]},{"Key":"say `(str/blank?","Fragments":["statement)`."]},{"Key":"Yeah indeed,","Fragments":["it"]},{"Key":"indeed, it","Fragments":["was"]},{"Key":"it was","Fragments":["my","doing.","quite","generally","outside","too","too","worth","almost","noisy","the","much","of","`:all-caps`","because","possible","not","the","a","used","fun.","really","testing,","real","worth","good","good","working,","used","as","kind"]},{"Key":"was my","Fragments":["previous","very","first","first","take-away","ruby","clojure"]},{"Key":"my previous","Fragments":["attempt,","nitpick.","nitpick","comment","submission,","nit:"]},{"Key":"previous attempt,","Fragments":["though"]},{"Key":"attempt, though","Fragments":["I'm"]},{"Key":"though I'm","Fragments":["really"]},{"Key":"I'm really","Fragments":["finding","bad","not","new","Nitpicking"]},{"Key":"really finding","Fragments":["this"]},{"Key":"finding this","Fragments":["one","more"]},{"Key":"one concise","Fragments":["enough"]},{"Key":"concise enough","Fragments":["to"]},{"Key":"be really","Fragments":["legible","hard"]},{"Key":"really legible","Fragments":[":)"]},{"Key":"Nice that","Fragments":["you","whole"]},{"Key":"you took","Fragments":["care"]},{"Key":"took care","Fragments":["of"]},{"Key":"care of","Fragments":["making","the","some","all","that.(TIL)","the"]},{"Key":"of making","Fragments":["fns","the"]},{"Key":"making fns","Fragments":["order"]},{"Key":"fns order","Fragments":["independent."]},{"Key":"order independent.","Fragments":["Looks","Optionally,","Either"]},{"Key":"independent. Looks","Fragments":["good."]},{"Key":"predicate functions,","Fragments":["there","but"]},{"Key":"functions, there","Fragments":["is"]},{"Key":"no need","Fragments":["to","for","for","to","to","to","for","for","(.endsWith","to","to","to","for","to"]},{"Key":"to prefix","Fragments":["with","the"]},{"Key":"prefix with","Fragments":["'is'"]},{"Key":"with 'is'","Fragments":["when"]},{"Key":"'is' when","Fragments":["ending"]},{"Key":"when ending","Fragments":["with"]},{"Key":"ending with","Fragments":["a","!","*endsWith","question"]},{"Key":"a '?'.","Fragments":["Something"]},{"Key":"'?'. Something","Fragments":["like"]},{"Key":"Something like","Fragments":["`foo?`","this?","`(def","`(fn"]},{"Key":"like `foo?`","Fragments":["is"]},{"Key":"`foo?` is","Fragments":["more","the"]},{"Key":"thought ```.endsWith```","Fragments":["scanned"]},{"Key":"```.endsWith``` scanned","Fragments":["better"]},{"Key":"scanned better","Fragments":["than"]},{"Key":"than ```(=","Fragments":["(last"]},{"Key":"(last utterance)","Fragments":["\\?)```.","\\?)```"]},{"Key":"For this","Fragments":["kind","problem,","simple"]},{"Key":"this kind","Fragments":["of","of","of","of","of","of","of"]},{"Key":"of transformation","Fragments":["I"]},{"Key":"transformation I","Fragments":["think"]},{"Key":"think I'd","Fragments":["make","either"]},{"Key":"the transform","Fragments":["char"]},{"Key":"transform char","Fragments":["-\u0026gt;"]},{"Key":"char -\u0026gt;","Fragments":["char"]},{"Key":"-\u0026gt; char","Fragments":["and"]},{"Key":"char and","Fragments":["use"]},{"Key":"and use","Fragments":["`(apply","standard","\\?","these","explicit","a","only","`intern`","it","that","those","of","something"]},{"Key":"use `(apply","Fragments":["str","str","str"]},{"Key":"`(apply str","Fragments":["(map","...)`","...)`","...)`.","collection)`","...)`.",",,,)`","...)`","...)`","(map","some-str)`","coll)`","[...])`?","(sort","...)`","...)`"]},{"Key":"str (map","Fragments":["…))`","#(if","char","...`.","transform","dna-\u003erna"]},{"Key":"(map …))`","Fragments":["instead"]},{"Key":"…))` instead","Fragments":["of"]},{"Key":"of `(string/join","Fragments":["(map"]},{"Key":"`(string/join (map","Fragments":["…))`."]},{"Key":"(map …))`.","Fragments":["Another"]},{"Key":"…))`. Another","Fragments":["simplification"]},{"Key":"Another simplification","Fragments":["would"]},{"Key":"simplification would","Fragments":["be"]},{"Key":"just describe","Fragments":["the"]},{"Key":"describe the","Fragments":["part","real","arguments"]},{"Key":"the transformation","Fragments":["that","more"]},{"Key":"transformation that","Fragments":["isn't"]},{"Key":"that isn't","Fragments":["just","the","caught","`response-for`.","equilateral"]},{"Key":"isn't just","Fragments":["identity"]},{"Key":"just identity","Fragments":["and"]},{"Key":"identity and","Fragments":["end"]},{"Key":"and end","Fragments":["the","with"]},{"Key":"end the","Fragments":["cond"]},{"Key":"with `:else","Fragments":["value`"]},{"Key":"`:else value`","Fragments":["to"]},{"Key":"value` to","Fragments":["cover"]},{"Key":"to cover","Fragments":["everything","the"]},{"Key":"cover everything","Fragments":["else."]},{"Key":"everything else.","Fragments":["There"]},{"Key":"else. There","Fragments":["isn't"]},{"Key":"isn't so","Fragments":["much"]},{"Key":"of an","Fragments":["advantage","obfuscation,","own","empty","overkill","experiment","overkill","authority","argument","explanation","item.","argument","exercise?","exercise","individual"]},{"Key":"an advantage","Fragments":["to","to"]},{"Key":"to avoiding","Fragments":["the"]},{"Key":"avoiding the","Fragments":["\"wildcard","accidental","need","need"]},{"Key":"the \"wildcard","Fragments":["match\""]},{"Key":"\"wildcard match\"","Fragments":["in"]},{"Key":"match\" in","Fragments":["clojure"]},{"Key":"clojure (like","Fragments":["you"]},{"Key":"(like you","Fragments":["might"]},{"Key":"might in","Fragments":["other"]},{"Key":"in other","Fragments":["FP","versions","pieces","languages.","languages.","languages,","languages","solutions","places.","namespaces.","languages,","Lisp","clojure"]},{"Key":"other FP","Fragments":["langs)"]},{"Key":"FP langs)","Fragments":["because"]},{"Key":"langs) because","Fragments":["falling"]},{"Key":"because falling","Fragments":["off"]},{"Key":"falling off","Fragments":["a"]},{"Key":"off a","Fragments":["cond"]},{"Key":"cond will","Fragments":["just"]},{"Key":"will just","Fragments":["return"]},{"Key":"just return","Fragments":["nil","the","the"]},{"Key":"return nil","Fragments":["rather","for","in"]},{"Key":"nil rather","Fragments":["than"]},{"Key":"than generate","Fragments":["a"]},{"Key":"generate a","Fragments":["compile","random"]},{"Key":"a compile","Fragments":["time"]},{"Key":"compile time","Fragments":["or","and"]},{"Key":"time or","Fragments":["localized"]},{"Key":"or localized","Fragments":["runtime"]},{"Key":"localized runtime","Fragments":["error."]},{"Key":"A common","Fragments":["implementation","idiom","naming"]},{"Key":"common implementation","Fragments":["choice"]},{"Key":"implementation choice","Fragments":["I've"]},{"Key":"choice I've","Fragments":["seen"]},{"Key":"seen is","Fragments":["to"]},{"Key":"string function","Fragments":["to","instead"]},{"Key":"the transformation,","Fragments":["which"]},{"Key":"transformation, which","Fragments":["takes"]},{"Key":"which takes","Fragments":["the","the","care"]},{"Key":"takes the","Fragments":["implementation","words","definition","option"]},{"Key":"implementation down","Fragments":["to"]},{"Key":"down to","Fragments":["just","the","context","a","an","see","a","doing","personal","~1","`#\"\\W\"`.","a","one"]},{"Key":"one function","Fragments":["call.","call","to","call","is","call"]},{"Key":"was going","Fragments":["for","to","to","about"]},{"Key":"going for","Fragments":["something","a"]},{"Key":"something that","Fragments":["determines","seemed","would","worked.","should","should","I"]},{"Key":"that determines","Fragments":["whether"]},{"Key":"determines whether","Fragments":["a"]},{"Key":"whether a","Fragments":["given","sentence","character","series","word","word","character","phrase"]},{"Key":"given statement","Fragments":["was"]},{"Key":"statement was","Fragments":["a"]},{"Key":"question, but","Fragments":["yes"]},{"Key":"but yes","Fragments":["I","I"]},{"Key":"yes I","Fragments":["think","agree"]},{"Key":"think something","Fragments":["else"]},{"Key":"else would","Fragments":["be"]},{"Key":"be clearer.","Fragments":["I","Using"]},{"Key":"clearer. I","Fragments":["think","was"]},{"Key":"conditions need","Fragments":["pulling"]},{"Key":"need pulling","Fragments":["out"]},{"Key":"pulling out","Fragments":["too,","the","your","the"]},{"Key":"out too,","Fragments":["don't"]},{"Key":"too, don't","Fragments":["think"]},{"Key":"is clear","Fragments":["enough","but","(but"]},{"Key":"clear enough","Fragments":["that","since"]},{"Key":"that ```(=","Fragments":["\\?"]},{"Key":"```(= \\?","Fragments":["(last","(last"]},{"Key":"\\? (last","Fragments":["statement))```","str))","input))`","\"blah?\"))`","content))`","s)))","utterance)))","q))`.","string))`","msg))","s))`","phrase)))","s))`","statement))","request))``.","statement))```","sentence))`?","input))`","s))"]},{"Key":"(last statement))```","Fragments":["is"]},{"Key":"statement))``` is","Fragments":["testing"]},{"Key":"is testing","Fragments":["for"]},{"Key":"for a","Fragments":["question...","reason","check","silent","little","more","while","Clojure","while","core","core","`?`","somewhat","bit","given","much","namespace","function","much","given","way","word\"","word","word","more","given","moment.","better","`cond`","sorted,","valid","possible","yelled","while","long","little","robot","map","question","bit","nice","few","little","function","functional","regex","concurrent","function","nice","lambda.","lambda","cleaner","cleaner","broader","word","detailed","bit","join.","number.","collection","condition","function","loop.","usage","word","macro.","really","good","nice","given","single-arity","way","given","bit"]},{"Key":" Hard","Fragments":["to","to","to"]},{"Key":"Hard to","Fragments":["implement","get","improve"]},{"Key":"implement any","Fragments":["simpler"]},{"Key":"any simpler","Fragments":["than"]},{"Key":"simpler than","Fragments":["this!","my","regex,","my","my"]},{"Key":"than this!","Fragments":["I'd"]},{"Key":"this! I'd","Fragments":["probably"]},{"Key":"probably go","Fragments":["with","with","with"]},{"Key":"with more","Fragments":["vertical","descriptive","general","elaborate","descriptive","of"]},{"Key":"more vertical","Fragments":["whitespace"]},{"Key":"vertical whitespace","Fragments":["in"]},{"Key":"whitespace in","Fragments":["(-\u0026gt;\u0026gt;","`anagrams`,","clojure)"]},{"Key":"in (-\u0026gt;\u0026gt;","Fragments":["…)"]},{"Key":"(-\u0026gt;\u0026gt; …)","Fragments":["but"]},{"Key":"…) but","Fragments":["for"]},{"Key":"something this","Fragments":["short"]},{"Key":"this short","Fragments":["I"]},{"Key":"short I","Fragments":["don't"]},{"Key":"see any","Fragments":["problem","harm","big"]},{"Key":"any problem","Fragments":["with"]},{"Key":"problem with","Fragments":["it","`(=","that","a","it,","the","this","poor","the","these"]},{"Key":"The code","Fragments":["looks","does","also","doesn't","is","could","is","lives","is","now","ended","for","becomes","is","structure","for"]},{"Key":"code looks","Fragments":["good,","quite","good","like"]},{"Key":"good, although","Fragments":["the","I"]},{"Key":"although the","Fragments":["choice"]},{"Key":"the choice","Fragments":["of","of","of","between","shouldn't"]},{"Key":"choice of","Fragments":["variable","names.","one","predicates","regex.","regex"]},{"Key":"of variable","Fragments":["name","names."]},{"Key":"variable name","Fragments":["is","\"sentence\".","for","`nb-left`"]},{"Key":"name is","Fragments":["a","unique…","a","nulled","so","the","generated,","called","good"]},{"Key":"bit misleading.","Fragments":["Questions","It","Even"]},{"Key":"misleading. Questions","Fragments":["certainly"]},{"Key":"Questions certainly","Fragments":["are"]},{"Key":"certainly are","Fragments":["not"]},{"Key":"not statements,","Fragments":["for"]},{"Key":"statements, for","Fragments":["example."]},{"Key":" Oops.","Fragments":["I"]},{"Key":"Oops. I","Fragments":["submitted"]},{"Key":"submitted instead","Fragments":["of"]},{"Key":"of running","Fragments":["the"]},{"Key":"running the","Fragments":["tests.","fetch"]},{"Key":"tests. Ignore","Fragments":["this"]},{"Key":"Ignore this","Fragments":["one.","...","one."]},{"Key":"called nitpicking","Fragments":["for"]},{"Key":"nitpicking for","Fragments":["a"]},{"Key":"with you,","Fragments":["code"]},{"Key":"you, code","Fragments":["is"]},{"Key":"is good","Fragments":["enough","to","exercise","from","practice","practice,","and","(it"]},{"Key":"good enough","Fragments":["for","to","to","to","to"]},{"Key":"enough for","Fragments":["the","me.","the","this"]},{"Key":"intent the","Fragments":["exercise"]},{"Key":"the exercise","Fragments":["has.","just","uses","really","in","specifies","is).","in","to","files","in"]},{"Key":"feel the","Fragments":["name","need"]},{"Key":"name `replace-thymidine-with-uracil`","Fragments":["indicates"]},{"Key":"`replace-thymidine-with-uracil` indicates","Fragments":["intent"]},{"Key":"indicates intent","Fragments":["clearly"]},{"Key":"intent clearly","Fragments":["enough."]},{"Key":"clearly enough.","Fragments":["If"]},{"Key":"enough. If","Fragments":["the"]},{"Key":"If the","Fragments":["nucleotides","representation","functions","message","second","problem","constraint","same","code","function"]},{"Key":"the nucleotides","Fragments":["were","so","behind","are","in","and"]},{"Key":"nucleotides were","Fragments":["anything"]},{"Key":"were anything","Fragments":["more"]},{"Key":"anything more","Fragments":["fancy"]},{"Key":"more fancy","Fragments":["than"]},{"Key":"fancy than","Fragments":["a"]},{"Key":"than a","Fragments":["char","binary","positive","definition","map","loop","plain","regular","minimum","linear","regex.","declarative","comment"]},{"Key":"a char","Fragments":["then","`\\U`","from","map","back,"]},{"Key":"char then","Fragments":["I"]},{"Key":"then I","Fragments":["take","can","probably","would","found","decided","spotted"]},{"Key":"I take","Fragments":["your","your"]},{"Key":"take your","Fragments":["point,","advice","feedback","advice","point.","point"]},{"Key":"your point,","Fragments":["but"]},{"Key":"point, but","Fragments":["in","you","it's"]},{"Key":"I felt","Fragments":["its","it","that","that","it","Clojure","bad","I"]},{"Key":"felt its","Fragments":["legible"]},{"Key":"its legible","Fragments":["enough"]},{"Key":"legible enough","Fragments":["the"]},{"Key":"enough the","Fragments":["way"]},{"Key":"way it","Fragments":["is.","does","will","is,","becomes"]},{"Key":"wonder how","Fragments":["assigning","would","it"]},{"Key":"how assigning","Fragments":["nucleotides"]},{"Key":"assigning nucleotides","Fragments":["chars"]},{"Key":"nucleotides chars","Fragments":["to"]},{"Key":"chars to","Fragments":["ore","meaningful","more"]},{"Key":"to ore","Fragments":["meaningful"]},{"Key":"ore meaningful","Fragments":["variable"]},{"Key":"meaningful variable","Fragments":["names"]},{"Key":"variable names","Fragments":["would","like","are","n,"]},{"Key":"names would","Fragments":["increase"]},{"Key":"would increase","Fragments":["readability","legibility"]},{"Key":"increase readability","Fragments":["here"]},{"Key":"think assigning","Fragments":["nucleotide"]},{"Key":"assigning nucleotide","Fragments":["chars","chars"]},{"Key":"nucleotide chars","Fragments":["to","to"]},{"Key":"to meaningful","Fragments":["variables"]},{"Key":"meaningful variables","Fragments":["could","could",":)","to","(or"]},{"Key":"variables could","Fragments":["enhance","enhance"]},{"Key":"could enhance","Fragments":["legibility","readability"]},{"Key":"enhance legibility","Fragments":["here.","here."]},{"Key":"looks neat","Fragments":[":)"]},{"Key":"you check","Fragments":["for","for","a","it","what","if","if","out","for"]},{"Key":"alternative to","Fragments":["resorting","the","`(empty?"]},{"Key":"to resorting","Fragments":["to"]},{"Key":"Java API","Fragments":["to","here","in"]},{"Key":"API to","Fragments":["check"]},{"Key":"Hmm, full","Fragments":["regex-based"]},{"Key":"full regex-based","Fragments":["solution,"]},{"Key":"regex-based solution,","Fragments":["why"]},{"Key":"solution, why","Fragments":["not."]},{"Key":"why not.","Fragments":["Though"]},{"Key":"not. Though","Fragments":["I'd"]},{"Key":"Though I'd","Fragments":["be"]},{"Key":"I'd be","Fragments":["happy","happy","tempted","willing","delighted","open","interested"]},{"Key":"be happy","Fragments":["to","about"]},{"Key":"happy to","Fragments":["see","see","find","be"]},{"Key":"tests extracted","Fragments":["to"]},{"Key":"extracted to","Fragments":["dedicated","a","reduce","a"]},{"Key":"to dedicated","Fragments":["functions"]},{"Key":"dedicated functions","Fragments":["in"]},{"Key":"in order","Fragments":["to","and","to","to","for","to","to","to","to","to","to","to","to","to"]},{"Key":"order to","Fragments":["possibly","use","be","define","minimize","make","spare","preserve","`re-seq`","avoid","make","enable","get","know","get","pass","have"]},{"Key":"to possibly","Fragments":["help","inspire","simplify"]},{"Key":"possibly help","Fragments":["further"]},{"Key":"help further","Fragments":["refactoring"]},{"Key":"further refactoring","Fragments":[":)"]},{"Key":"think `split`ting","Fragments":["a"]},{"Key":"`split`ting a","Fragments":["string"]},{"Key":"not necessary","Fragments":["for","for","given","-","\u003ccode\u003e-\u0026gt;\u0026gt;\u003c/code\u003e","if","to","since","if","when"]},{"Key":"necessary for","Fragments":["checking","this"]},{"Key":"for checking","Fragments":["its","for","for","anagrams","containment,","whether","for","uppercase"]},{"Key":"checking its","Fragments":["`last`character."]},{"Key":" Actually,","Fragments":["you","if"]},{"Key":"Actually, you","Fragments":["got"]},{"Key":"you got","Fragments":["a","the"]},{"Key":"a point:","Fragments":["the"]},{"Key":"point: the","Fragments":["other"]},{"Key":"functions shouldn't","Fragments":["be"]},{"Key":"shouldn't be","Fragments":["private,","allowed","on","named","needed","necessary","necessary","a","difficult","trying"]},{"Key":"be private,","Fragments":["there's","don’t"]},{"Key":"private, there's","Fragments":["no"]},{"Key":"there's no","Fragments":["reason","need","*official*","gain","performance","tail-call","real","room","need","big","else","need"]},{"Key":"no reason","Fragments":["why"]},{"Key":"reason why","Fragments":["some","`yell?`","your"]},{"Key":"why some","Fragments":["other"]},{"Key":"some other","Fragments":["piece","lisps","reasoning","test","control","options","submissions:","exercices","regex","string","options","pattern","optimizations"]},{"Key":"other piece","Fragments":["of"]},{"Key":"of code","Fragments":["shouldn't","on","for","developed","you","should","a","I","seriously...","nonetheless!","needed.","into","are","here.","to","needed","I've"]},{"Key":"code shouldn't","Fragments":["be"]},{"Key":"be allowed","Fragments":["to"]},{"Key":"allowed to","Fragments":["use"]},{"Key":"are right,","Fragments":["it","and"]},{"Key":"right, it","Fragments":["looks"]},{"Key":"looks better","Fragments":["and","I","for"]},{"Key":"better and","Fragments":["allows","why.","readability"]},{"Key":"and allows","Fragments":["me","you"]},{"Key":"allows me","Fragments":["to"]},{"Key":"just do","Fragments":["(frequencies","something"]},{"Key":"do (frequencies","Fragments":["words)"]},{"Key":" @emmy","Fragments":["It's"]},{"Key":"@emmy It's","Fragments":["not"]},{"Key":"It's not","Fragments":["specific","really","more","really","clear","about","necessarily","really","covering","about","uncommon","the"]},{"Key":"not specific","Fragments":["to","types"]},{"Key":"specific to","Fragments":["clojure.","Clojure","be"]},{"Key":"to clojure.","Fragments":["Even","I"]},{"Key":"clojure. Even","Fragments":["in"]},{"Key":"Even in","Fragments":["ruby,"]},{"Key":"in ruby,","Fragments":["`foo?`"]},{"Key":"ruby, `foo?`","Fragments":["is"]},{"Key":"the idiomatic","Fragments":["predicate","Closure?","`s`.","part","way"]},{"Key":"idiomatic predicate","Fragments":["method"]},{"Key":"predicate method","Fragments":["name.","that"]},{"Key":" @justine","Fragments":["I'm"]},{"Key":"@justine I'm","Fragments":["am"]},{"Key":"I'm am","Fragments":["not"]},{"Key":"am not","Fragments":["aware","sure","sure","sure","sure","particularly","mistaken,","sure","sure","a","particularly","familiar"]},{"Key":"any performance","Fragments":["benefits."]},{"Key":"performance benefits.","Fragments":["It"]},{"Key":"benefits. It","Fragments":["is"]},{"Key":"is just","Fragments":["a","a","what's","the","a","fine","a","overkill...","a","one","a","as","easier","`(or","a","a","return","fine.","what's","an","a","@madison's"]},{"Key":"more idiomatic","Fragments":["to","to","to","clojure","to","to","in","in","with","to","to","to","style","to","Clojure.","than","to","closing","of","way","to","to","and","to","to","way","to","as","to","and","style.","for","Clojure.","ways","than","style","or","Clojure.","way","to","```(=","to","than","functions","clojure","way","to","ways","to","to","and","and","I","to"]},{"Key":"idiomatic to","Fragments":["use","have","indent","put","use","put","use","use","not","put","use","use","me,","call","write","use","use","leave","use","leave","use","start","use","end","use","use","me.","use","use","pass","older","me."]},{"Key":"helper forms.","Fragments":["Now,"]},{"Key":"forms. Now,","Fragments":["if"]},{"Key":"Now, if","Fragments":["you're"]},{"Key":"if you're","Fragments":["in","aliasing","not","not","overusing","interested.","hoping"]},{"Key":"you're in","Fragments":["the"]},{"Key":"the repl,","Fragments":["you"]},{"Key":"repl, you","Fragments":["will"]},{"Key":"will of","Fragments":["course"]},{"Key":"of course","Fragments":["have","if","if","does","true."]},{"Key":"course have","Fragments":["to"]},{"Key":"use `(require","Fragments":["...)`"]},{"Key":"You're right!","Fragments":["Thanks","Thanks."]},{"Key":"right! Thanks","Fragments":["again,"]},{"Key":"Thanks again,","Fragments":["I","@amparo.","@arlene!","really"]},{"Key":"again, I","Fragments":["submitted","see"]},{"Key":"This replacement","Fragments":["could"]},{"Key":"replacement could","Fragments":["be"]},{"Key":"be done","Fragments":["with","in","via","without","at","in","with","with:","(naming","with","by","with","as","like","as","in","with","shorter/better,","by","on","there?","better?","using","as","as","more"]},{"Key":"done with","Fragments":["characters","this","`apply`","`case`.","this","`dec`","`last`.","`pretty-print`","this"]},{"Key":"with characters","Fragments":["rather","or"]},{"Key":"characters rather","Fragments":["than"]},{"Key":"than strings,","Fragments":["but"]},{"Key":"strings, but","Fragments":["I","should"]},{"Key":"assume the","Fragments":["implementation"]},{"Key":"implementation is","Fragments":["going","in","in","in","naive","the","that","that","pretty","fairly"]},{"Key":"be smart","Fragments":["enough"]},{"Key":"smart enough","Fragments":["to","to"]},{"Key":"that equivalent.","Fragments":["Looks"]},{"Key":"equivalent. Looks","Fragments":["good"]},{"Key":"exercise the","Fragments":["only","only"]},{"Key":"only function","Fragments":["that","that","here","that","left"]},{"Key":"that needs","Fragments":["to","to","explanation.","to"]},{"Key":"needs to","Fragments":["be","be","change","be","be","be","call","be","do","be","exclude"]},{"Key":"be exported","Fragments":["is","in"]},{"Key":"exported is","Fragments":["response-for."]},{"Key":"is response-for.","Fragments":["defn-","It"]},{"Key":"response-for. defn-","Fragments":["can"]},{"Key":"defn- can","Fragments":["be"]},{"Key":"used instead","Fragments":["of","of"]},{"Key":"of defn","Fragments":["to"]},{"Key":"defn to","Fragments":["define"]},{"Key":"define a","Fragments":["function","regex","constant","local","value"]},{"Key":"also be","Fragments":["desirable","simplified.","clearer","given","helpful.","better","more","used","functions,","possible","written","used","done","expressed","nice","done","written","written","written","written","a","scalene.","true","able","shortened","written:","done","written,","written"]},{"Key":"be desirable","Fragments":["to"]},{"Key":"desirable to","Fragments":["explicitly","put","use"]},{"Key":"to explicitly","Fragments":[":use","require","communicate","throw","check","return","name","turn","turn","turn","read"]},{"Key":"explicitly :use","Fragments":["clojure.string,"]},{"Key":":use clojure.string,","Fragments":["which"]},{"Key":"clojure.string, which","Fragments":["can"]},{"Key":"which can","Fragments":["be","partly","also","be","make","use","replace"]},{"Key":"done in","Fragments":["the","O(n)","the","a","the","a"]},{"Key":"ns special","Fragments":["form."]},{"Key":"special form.","Fragments":["This","It"]},{"Key":"form. This","Fragments":["makes"]},{"Key":"it obvious","Fragments":["to"]},{"Key":"obvious to","Fragments":["see","the","a"]},{"Key":"the dependencies","Fragments":["are."]},{"Key":" Overall","Fragments":["everything","looks","looks","very","looks","looks","looks","looks","really","it","the","looks","looks","the","looks","it","I'm"]},{"Key":"Overall everything","Fragments":["else"]},{"Key":"everything else","Fragments":["about","private,","not","in","is"]},{"Key":"else about","Fragments":["it"]},{"Key":"about it","Fragments":["looks","and","this","at","since","when","anyway.","being","but","here:",":-)"]},{"Key":"good, these","Fragments":["are"]},{"Key":"these are","Fragments":["very","equivalent","programs","anagrams?","problems,"]},{"Key":"very minor","Fragments":["nits.","update"]},{"Key":"the silence","Fragments":["function,","predicate."]},{"Key":"silence function,","Fragments":["you"]},{"Key":"function, you","Fragments":["do","can"]},{"Key":"not need","Fragments":["to","a"]},{"Key":"the trim","Fragments":["since"]},{"Key":"trim since","Fragments":["blank"]},{"Key":"since blank","Fragments":["will"]},{"Key":"blank will","Fragments":["return"]},{"Key":"will return","Fragments":["true","`nil`","a","the","the",":fred","the","true","a","`nil`","`nil`","`nil`"]},{"Key":"return true","Fragments":["if","on","*only*","for","for","and","if"]},{"Key":"true if","Fragments":["s","the","the"]},{"Key":"if s","Fragments":["is"]},{"Key":"s is","Fragments":["nil,"]},{"Key":"is nil,","Fragments":["empty,","empty,"]},{"Key":"nil, empty,","Fragments":["or","or"]},{"Key":"empty, or","Fragments":["contains","contains"]},{"Key":"or contains","Fragments":["only","only","whitespace."]},{"Key":"contains only","Fragments":["whitespace.","whitespace."]},{"Key":"As noted","Fragments":["previously,"]},{"Key":"noted previously,","Fragments":["it"]},{"Key":"previously, it","Fragments":["is"]},{"Key":"have closing","Fragments":["parentheses"]},{"Key":"closing parentheses","Fragments":["all","should","in","in","until","on","formatting.","on"]},{"Key":"parentheses all","Fragments":["together."]},{"Key":"(defn- shouting?","Fragments":["[content]","[input]"]},{"Key":"(= (string/upper-case","Fragments":["content)","statement)","input)"]},{"Key":"(string/upper-case content)","Fragments":["content))"]},{"Key":"than those","Fragments":["small"]},{"Key":"those small","Fragments":["nits,"]},{"Key":"small nits,","Fragments":["looks"]},{"Key":"nits, looks","Fragments":["good!"]},{"Key":" We've","Fragments":["been"]},{"Key":"been through","Fragments":["this"]},{"Key":"through this","Fragments":["in","but"]},{"Key":"previous iteration.","Fragments":["I","Please"]},{"Key":"iteration. I","Fragments":["like","agree","liked"]},{"Key":"the `is-`","Fragments":["naming","prefix","like"]},{"Key":"`is-` naming","Fragments":["and"]},{"Key":"naming and","Fragments":["I","typing","hence"]},{"Key":"believe it","Fragments":["reads","is","is","never","never"]},{"Key":"reads better.","Fragments":["Is","With"]},{"Key":"better. Is","Fragments":["this"]},{"Key":"Is this","Fragments":["something","passing","not","a","is","still","an","an","about","what","more"]},{"Key":"this something","Fragments":["specific"]},{"Key":"something specific","Fragments":["to"]},{"Key":"that I'm","Fragments":["unaware","explaining","aware","really","a","using."]},{"Key":"I'm unaware","Fragments":["of?"]},{"Key":"I made","Fragments":["the","a","a","all","the","`fewer`."]},{"Key":"the change","Fragments":["but","in","involves"]},{"Key":"change but","Fragments":["I'm"]},{"Key":"I'm curious","Fragments":["to","how","why","about","what","why"]},{"Key":"curious to","Fragments":["what","see"]},{"Key":"to what","Fragments":["the","I","you","the","it","the"]},{"Key":"benefit is","Fragments":["to","that"]},{"Key":"macro over","Fragments":["the"]},{"Key":"over the","Fragments":["function","words.","place,","characters","chunks","length","strands","board","strings","other,","length","subtle","cascade","train","course","word,","last","string","list.","year","characters","first","place.","place.","nucleotides","phrase"]},{"Key":"function .","Fragments":["Is"]},{"Key":". Is","Fragments":["just"]},{"Key":"Is just","Fragments":["to"]},{"Key":"just to","Fragments":["make","get","test","do","check","inline","use","manipulate","make","(filter)","add","return","challenge","see","get"]},{"Key":"more idiomatic/personal","Fragments":["preference"]},{"Key":"idiomatic/personal preference","Fragments":["or"]},{"Key":"preference or","Fragments":["is"]},{"Key":"or is","Fragments":["there","there","that","there","this","it"]},{"Key":"a benefit","Fragments":["like","to"]},{"Key":"benefit like","Fragments":["performance?"]},{"Key":" Assuming","Fragments":["you're","the"]},{"Key":"Assuming you're","Fragments":["using"]},{"Key":"using clojure","Fragments":["version","functions"]},{"Key":"clojure version","Fragments":["\u0026gt;="]},{"Key":"version \u0026gt;=","Fragments":["1.4,"]},{"Key":"\u0026gt;= 1.4,","Fragments":["consider"]},{"Key":"1.4, consider","Fragments":["using"]},{"Key":"the `:require`","Fragments":["helper","form","namespace"]},{"Key":"`:require` helper","Fragments":["form."]},{"Key":"helper form.","Fragments":["`:use`"]},{"Key":"form. `:use`","Fragments":["will"]},{"Key":"`:use` will","Fragments":["load"]},{"Key":"will load","Fragments":["the","the"]},{"Key":"load the","Fragments":["entire","entire"]},{"Key":"entire namespace","Fragments":["(when"]},{"Key":"namespace (when","Fragments":["you"]},{"Key":"(when you","Fragments":["may"]},{"Key":"may only","Fragments":["need"]},{"Key":"only need","Fragments":["a","a","to","to","to"]},{"Key":"need a","Fragments":["few","vector?","partially","name","year","regexp","conditional","```let```","single","map","string","couple","reduce,","new","trimming"]},{"Key":" Performed","Fragments":["some"]},{"Key":"Performed some","Fragments":["of"]},{"Key":"own refactorings.","Fragments":["Got"]},{"Key":"refactorings. Got","Fragments":["rid"]},{"Key":"Got rid","Fragments":["of"]},{"Key":"the `recur`","Fragments":["call","special"]},{"Key":"`recur` call","Fragments":["in"]},{"Key":"in favor","Fragments":["of","of"]},{"Key":"favor of","Fragments":["`mapv`.","`:require`"]},{"Key":"of `mapv`.","Fragments":["`anagram?`"]},{"Key":"`mapv`. `anagram?`","Fragments":["was"]},{"Key":"`anagram?` was","Fragments":["renamed"]},{"Key":"was renamed","Fragments":["to"]},{"Key":"renamed to","Fragments":["`anagram`","something"]},{"Key":"to `anagram`","Fragments":["since"]},{"Key":"`anagram` since","Fragments":["it"]},{"Key":"a true","Fragments":["predicate.","guarantee"]},{"Key":"is fantastic,","Fragments":["I"]},{"Key":"fantastic, I","Fragments":["didn't"]},{"Key":"about re-seq","Fragments":["when"]},{"Key":"re-seq when","Fragments":["I"]},{"Key":"I solved","Fragments":["this.","in"]},{"Key":"solved this.","Fragments":["My"]},{"Key":"this. My","Fragments":["only"]},{"Key":"only suggestion","Fragments":["is","is","I","is"]},{"Key":"suggestion is","Fragments":["that","to","more","to"]},{"Key":"it might","Fragments":["be","be","not","be","have","be","make","be","be","simplify","be","not","introduce","make","become","be","influence","be","be"]},{"Key":"little nicer","Fragments":["to","for"]},{"Key":"to apply","Fragments":["lower-case","a"]},{"Key":"apply lower-case","Fragments":["before"]},{"Key":"lower-case before","Fragments":["re-seq,"]},{"Key":"before re-seq,","Fragments":["which"]},{"Key":"re-seq, which","Fragments":["would"]},{"Key":"little simpler","Fragments":["(one","than"]},{"Key":"simpler (one","Fragments":["fewer"]},{"Key":"(one fewer","Fragments":["expression)."]},{"Key":"use map","Fragments":["getters"]},{"Key":"map getters","Fragments":["directly,"]},{"Key":"getters directly,","Fragments":["like"]},{"Key":"directly, like","Fragments":["`(:a"]},{"Key":"like `(:a","Fragments":["{:a"]},{"Key":"`(:a {:a","Fragments":["1"]},{"Key":"{:a 1","Fragments":[":b"]},{"Key":"1 :b","Fragments":["2})`","2}","2}","2}","2}","2}"]},{"Key":":b 2})`","Fragments":["to"]},{"Key":"2})` to","Fragments":["directly"]},{"Key":"to directly","Fragments":["access","produce"]},{"Key":"directly access","Fragments":["mapped"]},{"Key":"access mapped","Fragments":["nucleobases?"]},{"Key":" Everything","Fragments":["here"]},{"Key":"Everything here","Fragments":["looks"]},{"Key":"here looks","Fragments":["great,"]},{"Key":"sure about","Fragments":["the","this","the","the","```(not","it","the","the","the","the","the","my","it.","the","the","every-pred"]},{"Key":"name \"sentence\".","Fragments":["Some"]},{"Key":"\"sentence\". Some","Fragments":["of"]},{"Key":"Some of","Fragments":["the","your"]},{"Key":"expected input","Fragments":["actually"]},{"Key":"input actually","Fragments":["isn't","satisfies"]},{"Key":"actually isn't","Fragments":["a"]},{"Key":"a complete","Fragments":["sentence"]},{"Key":"complete sentence","Fragments":["or"]},{"Key":"sentence or","Fragments":["even"]},{"Key":"or even","Fragments":["a","ask","non-public","`dna-\u003erna`","b)","have"]},{"Key":"even a","Fragments":["phrase","simple"]},{"Key":"a phrase","Fragments":["(silence,","is"]},{"Key":"phrase (silence,","Fragments":["for"]},{"Key":"(silence, for","Fragments":["example)."]},{"Key":"A slightly","Fragments":["improved"]},{"Key":"slightly improved","Fragments":["version."]},{"Key":"improved version.","Fragments":["Awaiting"]},{"Key":"version. Awaiting","Fragments":["your"]},{"Key":"Awaiting your","Fragments":["thoughts"]},{"Key":"your thoughts","Fragments":["on"]},{"Key":"thoughts on","Fragments":["that.","```:as```","separating","areas"]},{"Key":"third strategy","Fragments":["to"]},{"Key":"strategy to","Fragments":["this"]},{"Key":"submission after","Fragments":["some"]},{"Key":"after some","Fragments":["back"]},{"Key":"some back","Fragments":["and"]},{"Key":"back and","Fragments":["forth","forth,","do","tidy","reviewed","try"]},{"Key":"and forth","Fragments":["with"]},{"Key":"forth with","Fragments":["@edwina"]},{"Key":"with @edwina","Fragments":["in"]},{"Key":"@edwina in","Fragments":["previous"]},{"Key":"in previous","Fragments":["iterations.","assignments.","exercises","version","nit.","iterations"]},{"Key":"previous iterations.","Fragments":["Comments"]},{"Key":"iterations. Comments","Fragments":["welcome!"]},{"Key":"great, I","Fragments":["think"]},{"Key":"put a","Fragments":["newline","small","lot","bit","message","blank","lot"]},{"Key":"a newline","Fragments":["between","it","and","separating","before"]},{"Key":"newline between","Fragments":["the"]},{"Key":"the declarations","Fragments":["in","to"]},{"Key":"declarations in","Fragments":["the"]},{"Key":"let but","Fragments":["I"]},{"Key":"it's necessary","Fragments":["in"]},{"Key":"necessary in","Fragments":["this","this","the"]},{"Key":"great, although","Fragments":["for"]},{"Key":"although for","Fragments":["the"]},{"Key":"public is","Fragments":["response-for.","your"]},{"Key":"response-for. It","Fragments":["might"]},{"Key":"defn- for","Fragments":["the"]},{"Key":" Typically","Fragments":["I"]},{"Key":"Typically I","Fragments":["would"]},{"Key":"would not","Fragments":["use","be","work","be","create","be","be","go","be"]},{"Key":"to replace","Fragments":["a","something","*some*","more","your","the","`(=","the","that","anything","`apply`"]},{"Key":"replace a","Fragments":["constant"]},{"Key":"a constant","Fragments":["string","in","for","-","(and","in","since"]},{"Key":"constant string","Fragments":["or"]},{"Key":"or single","Fragments":["character."]},{"Key":"single character.","Fragments":["Is","In"]},{"Key":"character. Is","Fragments":["there"]},{"Key":"there an","Fragments":["advantage","intent","idiomatic"]},{"Key":"regex here","Fragments":["in"]},{"Key":"here in","Fragments":["Clojure?","the","clojure","`words`"]},{"Key":"few nits","Fragments":["I"]},{"Key":"nits I","Fragments":["want"]},{"Key":"I want","Fragments":["to","to","to","to","to"]},{"Key":"- There","Fragments":["is"]},{"Key":"There is","Fragments":["no","a","a","a","a","`declare`","a","no","a","a","one","also","a","also","a","a","scope","a","a","a","quite","unnecessary","one","a","some","a"]},{"Key":"no docstring","Fragments":["to"]},{"Key":"docstring to","Fragments":["accompany"]},{"Key":"to accompany","Fragments":["the"]},{"Key":"accompany the","Fragments":["function"]},{"Key":"function `response-for`.","Fragments":["It"]},{"Key":"`response-for`. It","Fragments":["would"]},{"Key":"help if","Fragments":["there"]},{"Key":"a one","Fragments":["liner"]},{"Key":"one liner","Fragments":["mentioning"]},{"Key":"liner mentioning","Fragments":["what"]},{"Key":"mentioning what","Fragments":["this"]},{"Key":"this function","Fragments":["does.","to","would","in","say?","expects","is","seem"]},{"Key":"- IMO","Fragments":["the"]},{"Key":"conditions inside","Fragments":["the"]},{"Key":"inside the","Fragments":["`cond`","namespace.","macro","`response-for`","`cond`","macro","`cond`","`case`","reduce","function","function","let","`valid-dna?`","true"]},{"Key":"`cond` don't","Fragments":["speak"]},{"Key":"speak the","Fragments":["language"]},{"Key":"domain. Would","Fragments":["you"]},{"Key":"consider factoring","Fragments":["the"]},{"Key":"factoring the","Fragments":["predicates"]},{"Key":"predicates out","Fragments":["into","is"]},{"Key":"into functions","Fragments":["whose","with","both"]},{"Key":"functions whose","Fragments":["names","names"]},{"Key":"whose names","Fragments":["clarify","start"]},{"Key":"names clarify","Fragments":["their"]},{"Key":"clarify their","Fragments":["intent?"]},{"Key":"the misleading","Fragments":["comment"]},{"Key":"misleading comment","Fragments":["-"]},{"Key":"comment -","Fragments":["I"]},{"Key":"- I","Fragments":["was","do","think","thought","am","know","forgot","like","feel","keep","have","didn't","wanted","actually","feel","consider","did","wasn't","agree","didn't","was","didn't","think","think","don't","think","know,","just","changed","wish","think","had","feel","just","think","think","think","think","would","would","like","believe","submitted"]},{"Key":"was reading","Fragments":["this","[Library"]},{"Key":"reading this","Fragments":["on","somewhere"]},{"Key":"this on","Fragments":["my",":-)","its"]},{"Key":"on my","Fragments":["phone","knowledge","first","mind","nitpick","Elixir","original","github","use","laptop.","third","third","solution"]},{"Key":"my phone","Fragments":["and","wasn't"]},{"Key":"phone and","Fragments":["didn't","added"]},{"Key":"didn't realize","Fragments":["that","that","you"]},{"Key":"realize that","Fragments":["the","the","submitting","you","the","Clojure's"]},{"Key":"the stuff","Fragments":["about","inside"]},{"Key":"stuff about","Fragments":["design"]},{"Key":"about design","Fragments":["patterns"]},{"Key":"design patterns","Fragments":["and"]},{"Key":"patterns and","Fragments":["\"make","the"]},{"Key":"and \"make","Fragments":["use"]},{"Key":"\"make use","Fragments":["of"]},{"Key":"of clojure\"","Fragments":["was"]},{"Key":"clojure\" was","Fragments":["from"]},{"Key":"was from","Fragments":["the"]},{"Key":"the site","Fragments":["and"]},{"Key":"site and","Fragments":["not"]},{"Key":"I could,","Fragments":["but"]},{"Key":"could, but","Fragments":["I"]},{"Key":"thought a","Fragments":["guiding"]},{"Key":"a guiding","Fragments":["pattern"]},{"Key":"guiding pattern","Fragments":["in"]},{"Key":"pattern in","Fragments":["clojure","the"]},{"Key":"clojure was","Fragments":["you"]},{"Key":"was you","Fragments":["still"]},{"Key":"you still","Fragments":["have","want","need","have","need","pass"]},{"Key":"still have","Fragments":["access","to","the","the","to","multiple"]},{"Key":"have access","Fragments":["to","to"]},{"Key":"access to","Fragments":["all","anything","best"]},{"Key":"to all","Fragments":["the","the","include","of","the"]},{"Key":"Java underlying.","Fragments":["It"]},{"Key":"underlying. It","Fragments":["feels"]},{"Key":"It feels","Fragments":["less","a","cleaner","odd","more","a","kinda","right,","really","powerful","a"]},{"Key":"feels less","Fragments":["direct"]},{"Key":"less direct","Fragments":["to"]},{"Key":"direct to","Fragments":["do:"]},{"Key":"(= \\?","Fragments":["(last","(last","(last","(last","(last","(last","(last"]},{"Key":"So were","Fragments":["you"]},{"Key":"were you","Fragments":["thinking"]},{"Key":"you thinking","Fragments":["something","of","something"]},{"Key":"thinking something","Fragments":["more","along"]},{"Key":"more like","Fragments":["this?","a","a","a","as","pattern"]},{"Key":" {:T","Fragments":[":U"]},{"Key":"{:T :U","Fragments":[":A"]},{"Key":":U :A","Fragments":[":A",":C",":A})"]},{"Key":":A :A","Fragments":[":C"]},{"Key":":A :C","Fragments":[":C",":A)"]},{"Key":":C :C","Fragments":[":G"]},{"Key":":C :G","Fragments":[":G}",":G"]},{"Key":" (comp","Fragments":["keyword","(fn"]},{"Key":"(comp keyword","Fragments":["str)"]},{"Key":" ;","Fragments":["(:G","...","And","And","condition","actual","hello","(true","(true","(true)","1","1"]},{"Key":"; (:G","Fragments":[":A"]},{"Key":"(:G :A","Fragments":[":U"]},{"Key":":A :U","Fragments":[":U"]},{"Key":":U :U","Fragments":[":A"]},{"Key":"is literally","Fragments":["the"]},{"Key":"literally the","Fragments":["first","first"]},{"Key":"thing I've","Fragments":["ever"]},{"Key":"I've ever","Fragments":["tried","written.","written,","written.","written,","seen"]},{"Key":"ever tried","Fragments":["to"]},{"Key":"tried to","Fragments":["write","write","split","write","make","simplify","make","build","keep","keep","make","implement","make","slightly","simplify","extract","extract","implement","remove","also","bit","make","structure"]},{"Key":"to write","Fragments":["in","it","a","the","the","my","the","this","a","from","ends","more","your","that","an","out","the","in","a","them","a","your","the","a","Ruby","`yell?`","a","`s/upper-case`","the","idiomatic","the","it","it","my"]},{"Key":"write in","Fragments":["Clojure","the"]},{"Key":"Clojure -","Fragments":["I'm"]},{"Key":"I'm finding","Fragments":["it","this","Clojure","`zipmap`"]},{"Key":"finding it","Fragments":["really","looks"]},{"Key":"really hard","Fragments":["to","to"]},{"Key":"find documentation","Fragments":["for"]},{"Key":"documentation for","Fragments":["how","regular","you.","the"]},{"Key":"for how","Fragments":["to"]},{"Key":"get even","Fragments":["the"]},{"Key":"even the","Fragments":["simplest"]},{"Key":"simplest things","Fragments":["done!"]},{"Key":"things done!","Fragments":["I'll"]},{"Key":"done! I'll","Fragments":["have"]},{"Key":"I'll have","Fragments":["a","to","to","a","a","to","a","another"]},{"Key":"a pore","Fragments":["over"]},{"Key":"pore over","Fragments":["clojure.core"]},{"Key":"over clojure.core","Fragments":["and"]},{"Key":"clojure.core and","Fragments":["see"]},{"Key":"if anything","Fragments":["jumps"]},{"Key":"anything jumps","Fragments":["out"]},{"Key":"jumps out","Fragments":["at"]},{"Key":"out at","Fragments":["me"]},{"Key":"at me","Fragments":["though"]},{"Key":"me though","Fragments":[":)"]},{"Key":"define some","Fragments":["vars"]},{"Key":"some vars","Fragments":["to"]},{"Key":"to give","Fragments":["meaning","the","your","them","names","specific","them","me","some","me","some"]},{"Key":"give meaning","Fragments":["to"]},{"Key":"meaning to","Fragments":["the"]},{"Key":"the \"T\"","Fragments":["and","and"]},{"Key":"feels a","Fragments":["bit","whole","bit","little","bit","bit","little","little","little","bit"]},{"Key":"bit excessive","Fragments":["to"]},{"Key":"excessive to","Fragments":["specify"]},{"Key":"specify both","Fragments":["`:as`"]},{"Key":"both `:as`","Fragments":["and"]},{"Key":"`:as` and","Fragments":["`:only`"]},{"Key":"and `:only`","Fragments":["on"]},{"Key":"`:only` on","Fragments":["the"]},{"Key":"the `:require`,","Fragments":["but"]},{"Key":"`:require`, but","Fragments":["there's"]},{"Key":"but there's","Fragments":["nothing","a"]},{"Key":"there's nothing","Fragments":["wrong","actually","in","in"]},{"Key":"nothing wrong","Fragments":["with","with"]},{"Key":"wrong with","Fragments":["it","my","this","shadowing"]},{"Key":"I suppose.","Fragments":["Generally"]},{"Key":"suppose. Generally","Fragments":["looks"]},{"Key":"Generally looks","Fragments":["great!"]},{"Key":"Looks good,","Fragments":["the","the","though","but","but","but","just","with","you","but","though"]},{"Key":"good, the","Fragments":["only","only"]},{"Key":"nitpick I","Fragments":["have,","have","have"]},{"Key":"I have,","Fragments":["I","barring","but"]},{"Key":"have, I","Fragments":["think,"]},{"Key":"I think,","Fragments":["is","this","you"]},{"Key":"think, is","Fragments":["that","it"]},{"Key":"`seq` on","Fragments":["line","line","its"]},{"Key":"on line","Fragments":["14,","7,","11.","6.","9","14,","10","13","14.","9!","19","19.","11.","15","24.","5,","19","24.","7","14.","8–9","4.","10","16","4!"]},{"Key":"line 14,","Fragments":["you","the"]},{"Key":"14, you","Fragments":["can"]},{"Key":"can just","Fragments":["`(last","have","use","be","do:","use","pick","pass","replace","call","call","replace","put","be","be","make","replace","call","filter","write","use"]},{"Key":"just `(last","Fragments":["text)`."]},{"Key":"The private","Fragments":["functions"]},{"Key":"functions make","Fragments":["sense."]},{"Key":"make sense.","Fragments":["I"]},{"Key":"sense. I","Fragments":["can't","started"]},{"Key":"can't reason","Fragments":["why"]},{"Key":"why `yell?`","Fragments":["doesn't"]},{"Key":"`yell?` doesn't","Fragments":["work","sit"]},{"Key":"doesn't work","Fragments":["for","as","and","just","as"]},{"Key":"work for","Fragments":["you.","you","either","you.","very","you","you.","you","the","you.","the"]},{"Key":"for you.","Fragments":["Is","Check","(And"]},{"Key":"you. Is","Fragments":["it"]},{"Key":"it too","Fragments":["similar","weak","much.","but","much,"]},{"Key":"too similar","Fragments":["to","functions."]},{"Key":"similar to","Fragments":["another","`.`","atoms","switch","my","the","`nucleotide-count`,","ruby's"]},{"Key":"to another","Fragments":["function's","function.","name","function,","within"]},{"Key":"another function's","Fragments":["name?"]},{"Key":"this *is*","Fragments":["called"]},{"Key":"*is* called","Fragments":["nitpicking,"]},{"Key":"called nitpicking,","Fragments":["so:"]},{"Key":"The `defn`","Fragments":["form","nested"]},{"Key":"`defn` form","Fragments":["exposes"]},{"Key":"form exposes","Fragments":["a"]},{"Key":"exposes a","Fragments":["public"]},{"Key":"a public","Fragments":["interface.","API.","API.","interface.","method","definition.","definition."]},{"Key":"public interface.","Fragments":["Is","Remember","However,"]},{"Key":"interface. Is","Fragments":["there"]},{"Key":"any reason","Fragments":["not","you're"]},{"Key":"make `question?`","Fragments":["and"]},{"Key":"`question?` and","Fragments":["`yell?`","`silence?`","`silence?`","`silence?`.","`silence?`"]},{"Key":"and `yell?`","Fragments":["private"]},{"Key":"`yell?` private","Fragments":["with"]},{"Key":"private with","Fragments":["`defn-`?","`defn-`"]},{"Key":"Also, something","Fragments":["about"]},{"Key":"the naming","Fragments":["of","made","too.","of","scheme","so","restrictions).","scheme","of","here."]},{"Key":"naming of","Fragments":["`yell?`","fns","x","the","validation","'cleaned-options'","vars."]},{"Key":"of `yell?`","Fragments":["doesn't"]},{"Key":"doesn't sit","Fragments":["right"]},{"Key":"sit right","Fragments":["for","with"]},{"Key":"right for","Fragments":["me.","this."]},{"Key":"for me.","Fragments":["Perhaps","I","However","Eventually"]},{"Key":"me. Perhaps","Fragments":["another"]},{"Key":"Perhaps another","Fragments":["nitpicker"]},{"Key":"another nitpicker","Fragments":["will"]},{"Key":"nitpicker will","Fragments":["be"]},{"Key":"to better","Fragments":["express","reflect","explain","fit","state"]},{"Key":"better express","Fragments":["why.","what"]},{"Key":"I've never","Fragments":["seen","written","seen","learned."]},{"Key":"never seen","Fragments":["this","that","the"]},{"Key":"code formatting","Fragments":["before.","in","is","-","is","is"]},{"Key":"formatting before.","Fragments":["Is"]},{"Key":"before. Is","Fragments":["there"]},{"Key":"an intent","Fragments":["behind"]},{"Key":"intent behind","Fragments":["having"]},{"Key":"behind having","Fragments":["arguments"]},{"Key":"having arguments","Fragments":["on"]},{"Key":"arguments on","Fragments":["a"]},{"Key":"on a","Fragments":["different","function.","separate","separate","new","deterministic","predicate","single","string","line","single","different","new","new","`map`,","seldom","single","line","separate","\"word\"","single","personal","new","`cond`.","bigint.","string","string","previous"]},{"Key":" (defn","Fragments":["asking?","nothing?","to-rna","shouting?","question?","response-for","add","response-for","response-for","shouting?","word-count","word-count","constructor-fn","yelling?","lower-sorted","anagram-of?","anagrams-for","foo","foo","to-rna","dna-nucleotide","response-for","response-for","to-rna","word-count","to-rna","word-count","word-count","question?","yelling?","question?","response-for","response-for","function","to-rna","anagrams-for","leap-year?","foo","clean-string","clean-string","foo","silence?","matching?","area-code","pretty-print","calc-response","question?","sing","response-for","has-letters","word-count","anagram?","anagrams-for","anagram?","dow-sequence","helloworld","ascii-letter?","function-name","response-for","response-for","response-for","response-for","all-uppercase?","response-for","to-rna","asking?","to-rna","to-rna"]},{"Key":"(defn asking?","Fragments":["[message]","[msg]"]},{"Key":" looks","Fragments":["much","good"]},{"Key":"more natural","Fragments":["to","duplication,","I","to"]},{"Key":"also seems","Fragments":["a"]},{"Key":"bit inconsistent","Fragments":["to"]},{"Key":"inconsistent to","Fragments":["have"]},{"Key":"the closing","Fragments":["`)`","parens","bracket","parens","parenthesis","parenthesis","parentheses","parens","parens","parens."]},{"Key":"closing `)`","Fragments":["on"]},{"Key":"`)` on","Fragments":["its"]},{"Key":"on its","Fragments":["own","own","own","own","own","own,","\"imperative\"","own","argument,","own.","own","argument","own.","own"]},{"Key":"its own","Fragments":["line","line","line.","private","line","line.","helpfully","line","method","function,","function.","line.","function,","function","as","function","function.","named","predicate","top-level","good,","line"]},{"Key":"own line","Fragments":["for","in","and","to","is","doesn't"]},{"Key":"line for","Fragments":["some","readability."]},{"Key":"some definitions","Fragments":["but","would"]},{"Key":"definitions but","Fragments":["not"]},{"Key":"didn't knew","Fragments":["that"]},{"Key":"knew that","Fragments":[":)",":refer"]},{"Key":"that :)","Fragments":["."]},{"Key":":) .","Fragments":["I"]},{"Key":". I","Fragments":["used","wouldn't"]},{"Key":"used `last`","Fragments":["to"]},{"Key":"check if","Fragments":["it","string","i","i","we","a","everything","a","a","the"]},{"Key":"it ends","Fragments":["with"]},{"Key":"with question","Fragments":["mark","marks","marks."]},{"Key":"mark or","Fragments":["not."]},{"Key":"Nice solution!","Fragments":["I","."]},{"Key":"solution! I","Fragments":["like","came"]},{"Key":"you moved","Fragments":["conditions","the"]},{"Key":"moved conditions","Fragments":["to"]},{"Key":"that bare","Fragments":["Java"]},{"Key":"bare Java","Fragments":["methods"]},{"Key":"Java methods","Fragments":["are","on","obviously","as"]},{"Key":"are absolutely","Fragments":["necessary","right"]},{"Key":"absolutely necessary","Fragments":["here?",":)"]},{"Key":"necessary here?","Fragments":["I"]},{"Key":"here? I","Fragments":["bet"]},{"Key":"can come","Fragments":["up"]},{"Key":"with native","Fragments":["Clojure","Clojure"]},{"Key":"Clojure versions","Fragments":["for"]},{"Key":"versions for","Fragments":["both"]},{"Key":"Also maybe","Fragments":["predicates"]},{"Key":"maybe predicates","Fragments":["should"]},{"Key":"predicates should","Fragments":["be"]},{"Key":"private, don’t","Fragments":["you"]},{"Key":"you think?","Fragments":["It"]},{"Key":"think? It","Fragments":["can"]},{"Key":"It can","Fragments":["be","go.","also","be","be","be"]},{"Key":"done via","Fragments":["`defn-`"]},{"Key":"via `defn-`","Fragments":["for"]},{"Key":"and `def","Fragments":["^:private`","^:private`"]},{"Key":"`def ^:private`","Fragments":["for","for"]},{"Key":"^:private` for","Fragments":["vars.","data"]},{"Key":"Looks quite","Fragments":["readable."]},{"Key":"quite readable.","Fragments":["`condp`"]},{"Key":"readable. `condp`","Fragments":["is"]},{"Key":"`condp` is","Fragments":["a","(I"]},{"Key":"good fit","Fragments":["here","for"]},{"Key":"fit here","Fragments":["-"]},{"Key":"here -","Fragments":["forgot","`atom`","but","this","the","I"]},{"Key":"- forgot","Fragments":["about"]},{"Key":"forgot about","Fragments":["it.","it","dec","this"]},{"Key":"it. Good","Fragments":["job."]},{"Key":"I don’t","Fragments":["really"]},{"Key":"don’t really","Fragments":["like"]},{"Key":"like tying","Fragments":["yourself"]},{"Key":"tying yourself","Fragments":["to"]},{"Key":"yourself to","Fragments":["one"]},{"Key":"to one","Fragments":["concrete","step.","clause","regexp"]},{"Key":"one concrete","Fragments":["implementation"]},{"Key":"concrete implementation","Fragments":["of","of","of"]},{"Key":"of DNA/RNA.","Fragments":["I"]},{"Key":"DNA/RNA. I","Fragments":["mean,"]},{"Key":"I mean,","Fragments":["yes,"]},{"Key":"mean, yes,","Fragments":["it’s"]},{"Key":"yes, it’s","Fragments":["string"]},{"Key":"it’s string","Fragments":["for"]},{"Key":"string for","Fragments":["now,","the"]},{"Key":"for now,","Fragments":["but","appreciate"]},{"Key":"now, but","Fragments":["there’s","it"]},{"Key":"but there’s","Fragments":["a"]},{"Key":"huge chance","Fragments":["it"]},{"Key":"chance it","Fragments":["would"]},{"Key":"would become","Fragments":["a"]},{"Key":"become a","Fragments":["map","function's","little"]},{"Key":"map or","Fragments":["vector","filter"]},{"Key":"or vector","Fragments":["a"]},{"Key":"vector a","Fragments":["couple","b)`."]},{"Key":"of features","Fragments":["later,"]},{"Key":"features later,","Fragments":["and"]},{"Key":"later, and","Fragments":["`string/replace`"]},{"Key":"and `string/replace`","Fragments":["won’t"]},{"Key":"`string/replace` won’t","Fragments":["work,"]},{"Key":"won’t work,","Fragments":["but"]},{"Key":"but general","Fragments":["sequence/collection"]},{"Key":"general sequence/collection","Fragments":["operators"]},{"Key":"sequence/collection operators","Fragments":["would."]},{"Key":" I’m","Fragments":["not"]},{"Key":"I’m not","Fragments":["saying"]},{"Key":"not saying","Fragments":["this"]},{"Key":"saying this","Fragments":["is"]},{"Key":"is necessary,","Fragments":["but","otherwise","as"]},{"Key":"necessary, but","Fragments":["hey,"]},{"Key":"but hey,","Fragments":["maybe"]},{"Key":"hey, maybe","Fragments":["it"]},{"Key":"would give","Fragments":["you","this"]},{"Key":"give you","Fragments":["another","enough","three","a","another"]},{"Key":"you another","Fragments":["perspective","option"]},{"Key":"another perspective","Fragments":["to"]},{"Key":"perspective to","Fragments":["look"]},{"Key":"I'm always","Fragments":["finding","finding","glad"]},{"Key":"always finding","Fragments":["extracting","functions"]},{"Key":"finding extracting","Fragments":["tests"]},{"Key":"extracting tests","Fragments":["to"]},{"Key":"tests to","Fragments":["named","pass.","that","keep","pass","ensure","dictate","drive"]},{"Key":"to named","Fragments":["functions"]},{"Key":"functions clearer,","Fragments":["though"]},{"Key":"clearer, though","Fragments":["it's"]},{"Key":"though it's","Fragments":["definitely"]},{"Key":"it's definitely","Fragments":["not"]},{"Key":"definitely not","Fragments":["necessary","surprised","a","as"]},{"Key":"this to","Fragments":["look","100","say","pass.","be","find","work.","the","be","the","a","its","work,","begin"]},{"Key":"look great,","Fragments":["except"]},{"Key":"great, except","Fragments":["the"]},{"Key":"except the","Fragments":["superfluous","name"]},{"Key":"the superfluous","Fragments":["parenthesis","namespace."]},{"Key":"superfluous parenthesis","Fragments":["mentioned"]},{"Key":"parenthesis mentioned","Fragments":["above."]},{"Key":"mentioned above.","Fragments":["Good"]},{"Key":"above. Good","Fragments":["work!"]},{"Key":"The parentheses","Fragments":["around"]},{"Key":"parentheses around","Fragments":["([x]","functions"]},{"Key":"around ([x]","Fragments":["…)"]},{"Key":"([x] …)","Fragments":["are"]},{"Key":"…) are","Fragments":["superfluous,"]},{"Key":"are superfluous,","Fragments":["take"]},{"Key":"superfluous, take","Fragments":["a"]},{"Key":"at http://clojuredocs.org/clojure_core/clojure.core/defn","Fragments":["for"]},{"Key":"http://clojuredocs.org/clojure_core/clojure.core/defn for","Fragments":["some"]},{"Key":"examples of","Fragments":["how","map","`require`"]},{"Key":"of how","Fragments":["this","the","code","`map`","it's","it's","this","they're","it","the"]},{"Key":"how this","Fragments":["special","could","works:","one"]},{"Key":"this special","Fragments":["form"]},{"Key":"special form","Fragments":["is","using","instead","for","instead","`letfn`"]},{"Key":"form is","Fragments":["typically","slightly","closing","more","a","still","more","more"]},{"Key":"is typically","Fragments":["used"]},{"Key":"typically used","Fragments":["when"]},{"Key":"used when","Fragments":["there's"]},{"Key":"when there's","Fragments":["only","too","no","only","more"]},{"Key":"there's only","Fragments":["one","one","a","2"]},{"Key":"only one","Fragments":["body.","branch","usage;","function","`apply","thread","set","argument,","argument."]},{"Key":"may suggest","Fragments":["that"]},{"Key":"suggest that","Fragments":["you","there","they","the"]},{"Key":"you extract","Fragments":["the","the","`anagram?`","some","the","functions."]},{"Key":"the expressions","Fragments":["in","is"]},{"Key":"expressions in","Fragments":["cond","next","Clojure"]},{"Key":"in cond","Fragments":["into","you"]},{"Key":"cond into","Fragments":["intention"]},{"Key":"into intention","Fragments":["revealing"]},{"Key":"revealing named","Fragments":["functions,"]},{"Key":"named functions,","Fragments":["although"]},{"Key":"functions, although","Fragments":["I","looking"]},{"Key":"although I","Fragments":["think","could","can","wonder","prefer","did","can't","see"]},{"Key":"this reads","Fragments":["perfectly"]},{"Key":"reads perfectly","Fragments":["fine"]},{"Key":"perfectly fine","Fragments":["without","-"]},{"Key":"fine without","Fragments":["that.","the"]},{"Key":"PS: don't","Fragments":["tell"]},{"Key":"don't tell","Fragments":["anyone,"]},{"Key":"tell anyone,","Fragments":["but"]},{"Key":"anyone, but","Fragments":["I'm"]},{"Key":"Maybe use","Fragments":["something"]},{"Key":"more simple","Fragments":["to"]},{"Key":"last chacacter","Fragments":["of"]},{"Key":"chacacter of","Fragments":["a"]},{"Key":"string? Hint:","Fragments":["a"]},{"Key":"Hint: a","Fragments":["string"]},{"Key":"is treated","Fragments":["as","as","by","as"]},{"Key":"treated as","Fragments":["a","a","sequences","sequences","a","a","logical","a","a","a","a","a","a","a","sequences","collections","collections,","a","collections","collections","collections","collections,","collections,","functions","sequences"]},{"Key":"of characters","Fragments":["by","(no","(no","with","can","(I","in","in","by","where","long?","to","instead","where","already.","already.",":)"]},{"Key":"characters by","Fragments":["Clojure.","sequence","explicitely"]},{"Key":" Ah","Fragments":["oops,","we","and","there","that's","whoops,","yes,"]},{"Key":"Ah oops,","Fragments":["commented"]},{"Key":"oops, commented","Fragments":["on"]},{"Key":"commented on","Fragments":["your"]},{"Key":"latest submission","Fragments":["first,","and"]},{"Key":"submission first,","Fragments":["scratch"]},{"Key":"first, scratch","Fragments":["it."]},{"Key":"scratch it.","Fragments":["`last`"]},{"Key":"it. `last`","Fragments":["is"]},{"Key":"`last` is","Fragments":["part"]},{"Key":"is part","Fragments":["of","of"]},{"Key":"the `clojure.core`","Fragments":["namespace,","namespace"]},{"Key":"`clojure.core` namespace,","Fragments":["and"]},{"Key":"namespace, and","Fragments":["works","when","`defn-`"]},{"Key":"and works","Fragments":["simply","perfectly."]},{"Key":"works simply","Fragments":["like"]},{"Key":"simply like","Fragments":["`(last"]},{"Key":"like `(last","Fragments":["\"plop?\")"]},{"Key":"`(last \"plop?\")","Fragments":["→"]},{"Key":"\"plop?\") →","Fragments":["\\?`"]},{"Key":" Neat","Fragments":["solution.","solution!"]},{"Key":"Neat solution.","Fragments":["Slight"]},{"Key":"solution. Slight","Fragments":["overkill"]},{"Key":"Slight overkill","Fragments":["but"]},{"Key":"overkill but","Fragments":["at","I"]},{"Key":"but at","Fragments":["least","least","least"]},{"Key":"least original","Fragments":[":)"]},{"Key":" Reads","Fragments":["good"]},{"Key":"Reads good","Fragments":["to"]},{"Key":"me. `zero?`","Fragments":["is"]},{"Key":"`zero?` is","Fragments":["a"]},{"Key":"a nice","Fragments":["shorthand","pattern.","screencast","symmetry","pattern","trick","functional","consistent","symmetry","touch","choice.","solution.","tip","level","touch,","split.","touch.","way"]},{"Key":"nice shorthand","Fragments":["for"]},{"Key":"shorthand for","Fragments":["a","what","declaring","anonymous"]},{"Key":"a check","Fragments":["but","for","to"]},{"Key":"check but","Fragments":["that's"]},{"Key":"but that's","Fragments":["nothing","mainly","probably","entirely","fine","pretty","it,","probably","just","not","minor.","possibly","what","just","an","a","why","*exactly*","personal","the"]},{"Key":"that's nothing","Fragments":["obligatory.","obligatory."]},{"Key":"nothing obligatory.","Fragments":["Nice."]},{"Key":" `blank?`","Fragments":["is","is","would","checks"]},{"Key":"`blank?` is","Fragments":["fine.","fine,"]},{"Key":"use clojure.string/blank?","Fragments":["when","instead","rather","instead","instead"]},{"Key":"clojure.string/blank? when","Fragments":["checking"]},{"Key":"when checking","Fragments":["for","for"]},{"Key":"Also consider","Fragments":["replacing","if","switching"]},{"Key":"consider replacing","Fragments":["comments","your"]},{"Key":"replacing comments","Fragments":["by"]},{"Key":"comments by","Fragments":["named"]},{"Key":"by named","Fragments":["functions"]},{"Key":"for conditions","Fragments":["checks,","so"]},{"Key":"conditions checks,","Fragments":["such"]},{"Key":"checks, such","Fragments":["as"]},{"Key":"as `silence?`,","Fragments":["`yelling?`"]},{"Key":"`silence?`, `yelling?`","Fragments":["and"]},{"Key":"and `question?`.","Fragments":["It"]},{"Key":"`question?`. It","Fragments":["will","is"]},{"Key":"It will","Fragments":["be","make","make","be"]},{"Key":"be nice","Fragments":["demonstrations","if","to","to","to","to"]},{"Key":"nice demonstrations","Fragments":["of"]},{"Key":"demonstrations of","Fragments":["logic"]},{"Key":"of logic","Fragments":["without","in","to","in"]},{"Key":"logic without","Fragments":["comments."]},{"Key":"One little","Fragments":["thing","pick,"]},{"Key":"little thing","Fragments":["to"]},{"Key":"to discuss","Fragments":["is"]},{"Key":"discuss is","Fragments":["\"unnecessary"]},{"Key":"is \"unnecessary","Fragments":["function"]},{"Key":"\"unnecessary function","Fragments":["wrapping\""]},{"Key":"function wrapping\"","Fragments":["in"]},{"Key":"wrapping\" in","Fragments":["silence?"]},{"Key":"in silence?","Fragments":["definition."]},{"Key":"silence? definition.","Fragments":["Define"]},{"Key":"definition. Define","Fragments":["variable"]},{"Key":"Define variable","Fragments":["instead"]},{"Key":"variable instead","Fragments":["of"]},{"Key":"of function","Fragments":["will","declarations","e.g.","composition","arguments,","name"]},{"Key":"function will","Fragments":["work","make","return","fail","join","return"]},{"Key":"will work","Fragments":["to","on","with","if","with","in"]},{"Key":" (def","Fragments":["^:private","point","^:private","from-zero","to-nine","NUMBERS","dna-to-rna-map","nucleotide-to-replace","words","so","foo","empty-count","bar","valid-nucleotides","nucleotide?","dna-to-rna","monteenth","tuesteenth","wednesteenth","thursteenth","friteenth","saturteenth","sunteenth","one-to-four","num-map","to-rna-nucleotid"]},{"Key":"(def ^:private","Fragments":["silence?","^:dynamic"]},{"Key":"^:private silence?","Fragments":["str/blank?)"]},{"Key":"wasn't able","Fragments":["to","to"]},{"Key":"a ````last````","Fragments":["function"]},{"Key":"````last```` function","Fragments":["in"]},{"Key":"namespace. I","Fragments":["also"]},{"Key":"also did","Fragments":["a","this","some"]},{"Key":"did a","Fragments":["google","frequencies","bit","solution"]},{"Key":"a google","Fragments":["search","for","for","to","for"]},{"Key":"google search","Fragments":["and"]},{"Key":"search and","Fragments":["wasn't"]},{"Key":"and wasn't","Fragments":["able"]},{"Key":"find anything.","Fragments":["Is"]},{"Key":"anything. Is","Fragments":["there"]},{"Key":"there another","Fragments":["class"]},{"Key":"another class","Fragments":["I"]},{"Key":"class I","Fragments":["should"]},{"Key":"be looking","Fragments":["at?"]},{"Key":"looking at?","Fragments":["Thanks!"]},{"Key":"Thanks, didn't","Fragments":["know"]},{"Key":"about clojure.string/blank?,","Fragments":["awesome."]},{"Key":" I'll","Fragments":["factor","look","have","consider","have","take"]},{"Key":"I'll factor","Fragments":["out"]},{"Key":"factor out","Fragments":["the","`(="]},{"Key":"in functions,","Fragments":["thanks"]},{"Key":"functions, thanks","Fragments":["for"]},{"Key":"good. Maybe","Fragments":["assigning","look"]},{"Key":"Maybe assigning","Fragments":["nucleotide"]},{"Key":"to more","Fragments":["meaningful","succint","focused","meaningful","meaningful","readable","complicated"]},{"Key":"enhance readability","Fragments":["though.","a","here?"]},{"Key":"tried yesterday","Fragments":["but"]},{"Key":"yesterday but","Fragments":["couldn't"]},{"Key":"but couldn't","Fragments":["figure","-","quite","find","find","think","at"]},{"Key":"couldn't figure","Fragments":["out","one","out","it"]},{"Key":"out a","Fragments":["clean","solution","private","way","function","protocol","way","level","common","core","way"]},{"Key":"a clean","Fragments":["way"]},{"Key":"have \\T","Fragments":["interpreted"]},{"Key":"\\T interpreted","Fragments":["as"]},{"Key":"as :T.","Fragments":["(keyword"]},{"Key":":T. (keyword","Fragments":["(str"]},{"Key":"(keyword (str","Fragments":["\":\""]},{"Key":"(str \":\"","Fragments":["\\T)))"]},{"Key":"\":\" \\T)))","Fragments":["Didn't"]},{"Key":"\\T))) Didn't","Fragments":["really"]},{"Key":"Didn't really","Fragments":["excite"]},{"Key":"really excite","Fragments":["me."]},{"Key":"excite me.","Fragments":["Spelling"]},{"Key":"me. Spelling","Fragments":["out"]},{"Key":"Spelling out","Fragments":["the"]},{"Key":"the three","Fragments":["untouched","predicates","workhorses","branches"]},{"Key":"three untouched","Fragments":["nucleotides"]},{"Key":"untouched nucleotides","Fragments":["seemed"]},{"Key":"nucleotides seemed","Fragments":["a"]},{"Key":"seemed a","Fragments":["bit"]},{"Key":"an obfuscation,","Fragments":["too."]},{"Key":"obfuscation, too.","Fragments":["This"]},{"Key":"too. This","Fragments":["program"]},{"Key":"This program","Fragments":["only"]},{"Key":"program only","Fragments":["needs"]},{"Key":"only needs","Fragments":["to","to"]},{"Key":"to confess","Fragments":["I'm"]},{"Key":"confess I'm","Fragments":["not"]},{"Key":"not really","Fragments":["following","relevant","that","decrease","up","matter","understand","common","happy","an","sure"]},{"Key":"really following","Fragments":["you"]},{"Key":"following you","Fragments":["on"]},{"Key":"the references","Fragments":["to"]},{"Key":"references to","Fragments":["principles","predicates"]},{"Key":"to principles","Fragments":["and"]},{"Key":"principles and","Fragments":["patterns."]},{"Key":"and patterns.","Fragments":["Could"]},{"Key":"patterns. Could","Fragments":["you"]},{"Key":"you please","Fragments":["name","take","specify,","explain","elaborate","elaborate"]},{"Key":"please name","Fragments":["some"]},{"Key":"name some","Fragments":["of"]},{"Key":"them and","Fragments":["maybe","accumulate"]},{"Key":"and maybe","Fragments":["share","add","give","that"]},{"Key":"maybe share","Fragments":["links?"]},{"Key":"share links?","Fragments":["I"]},{"Key":"links? I","Fragments":["am"]},{"Key":"am a","Fragments":["full-time","bit","rubyist","beginner.","beginner","bit"]},{"Key":"a full-time","Fragments":["Rubyist;"]},{"Key":"full-time Rubyist;","Fragments":["perhaps"]},{"Key":"Rubyist; perhaps","Fragments":["it"]},{"Key":"perhaps it","Fragments":["warps"]},{"Key":"it warps","Fragments":["my"]},{"Key":"warps my","Fragments":["fledgling"]},{"Key":"my fledgling","Fragments":["ability"]},{"Key":"fledgling ability","Fragments":["to"]},{"Key":"ability to","Fragments":["think","use","name","add"]},{"Key":"think in","Fragments":["idiomatic","this","that","this","terms","terms"]},{"Key":"in idiomatic","Fragments":["Clojure."]},{"Key":" Interesting","Fragments":["approach.","use","that","point","...","to","use","to","that"]},{"Key":"Interesting approach.","Fragments":["I'm"]},{"Key":"approach. I'm","Fragments":["personally"]},{"Key":"I'm personally","Fragments":["not","not"]},{"Key":"personally not","Fragments":["too","a"]},{"Key":"too fond","Fragments":["of"]},{"Key":"of relying","Fragments":["on"]},{"Key":"on regexps","Fragments":["where"]},{"Key":"regexps where","Fragments":["traditional"]},{"Key":"where traditional","Fragments":["functional"]},{"Key":"traditional functional","Fragments":["paradigms"]},{"Key":"functional paradigms","Fragments":["apply,"]},{"Key":"paradigms apply,","Fragments":["but"]},{"Key":"apply, but","Fragments":["that's"]},{"Key":"that's mainly","Fragments":["mater"]},{"Key":"mainly mater","Fragments":["of"]},{"Key":"mater of","Fragments":["taste."]},{"Key":"of taste.","Fragments":["Looks",";-)"]},{"Key":"taste. Looks","Fragments":["great."]},{"Key":"a whole","Fragments":["lot","lot","lot","lot","on","lot","and","lot","lot"]},{"Key":"whole lot","Fragments":["simpler","better","to","of","more","about","messier."]},{"Key":"lot simpler","Fragments":["using","for","from","-"]},{"Key":"simpler using","Fragments":["map","iterate"]},{"Key":"using map","Fragments":["getter"]},{"Key":"map getter","Fragments":["functions,"]},{"Key":"getter functions,","Fragments":["eg."]},{"Key":"functions, eg.","Fragments":["`(:T"]},{"Key":"eg. `(:T","Fragments":["{:C"]},{"Key":"`(:T {:C","Fragments":[":C"]},{"Key":"{:C :C","Fragments":[":G"]},{"Key":":G :G","Fragments":[":T"]},{"Key":":G :T","Fragments":[":U"]},{"Key":":T :U","Fragments":[":A"]},{"Key":":A :A})","Fragments":["→"]},{"Key":":A}) →","Fragments":[":U`"]},{"Key":"to chec","Fragments":["for"]},{"Key":"chec for","Fragments":["the"]},{"Key":"it's often","Fragments":["idiomatic","a"]},{"Key":"often idiomatic","Fragments":["to"]},{"Key":"to indent","Fragments":["condition","2","the"]},{"Key":"indent condition","Fragments":["statements"]},{"Key":"condition statements","Fragments":["below"]},{"Key":"statements below","Fragments":["`cond`."]},{"Key":"don't exactly","Fragments":["get","get","understand"]},{"Key":"exactly get","Fragments":["what","what"]},{"Key":"get what","Fragments":["\"order","\"order","`rest`"]},{"Key":"what \"order","Fragments":["of","of"]},{"Key":"\"order of","Fragments":["constants\"","constants\""]},{"Key":"of constants\"","Fragments":["means","means"]},{"Key":"constants\" means","Fragments":["in","in"]},{"Key":"means in","Fragments":["this","this"]},{"Key":"this context.","Fragments":["Can","Can"]},{"Key":"context. Can","Fragments":["you","you"]},{"Key":" Fully","Fragments":["agreed"]},{"Key":"Fully agreed","Fragments":["with"]},{"Key":"agreed with","Fragments":["regards","the"]},{"Key":"with regards","Fragments":["to","to","to"]},{"Key":"to making","Fragments":["helpers","this","the"]},{"Key":"making helpers","Fragments":["private."]},{"Key":"helpers private.","Fragments":["I"]},{"Key":"private. I","Fragments":["just"]},{"Key":"just didn't","Fragments":["bother","get"]},{"Key":"didn't bother","Fragments":["-"]},{"Key":"bother -","Fragments":["wrongly"]},{"Key":"- wrongly","Fragments":["so."]},{"Key":"had never","Fragments":["actually","used"]},{"Key":"never actually","Fragments":["realized"]},{"Key":"actually realized","Fragments":["currying"]},{"Key":"realized currying","Fragments":["was"]},{"Key":"currying was","Fragments":["explicit"]},{"Key":"was explicit","Fragments":["in"]},{"Key":"explicit in","Fragments":["Clojure.","my","the","terms"]},{"Key":"Clojure. Makes","Fragments":["sense"]},{"Key":"Makes sense","Fragments":["indeed"]},{"Key":"sense indeed","Fragments":[":)"]},{"Key":"indeed :)","Fragments":["Thanks","For",")."]},{"Key":":) Thanks","Fragments":["for","for"]},{"Key":"Ok, after","Fragments":["looking"]},{"Key":"at your","Fragments":["submission","disposal.","(very"]},{"Key":"your submission","Fragments":["I","in"]},{"Key":"submission I","Fragments":["get","might"]},{"Key":"get your","Fragments":["point."]},{"Key":"your point.","Fragments":["However,"]},{"Key":"point. However,","Fragments":["as"]},{"Key":"However, as","Fragments":["you"]},{"Key":"as you","Fragments":["have","try","say","said,","suggest,","can","suggest,","suggested.","suggested.","also","have","might","said.","\u003ccode\u003eresponse-for\u003c/code\u003e","so","have.","do","know","mentioned"]},{"Key":"have observed,","Fragments":["the","the"]},{"Key":"observed, the","Fragments":["order","naming"]},{"Key":"order wasn't","Fragments":["relevant"]},{"Key":"wasn't relevant","Fragments":["here."]},{"Key":"relevant here.","Fragments":["It"]},{"Key":"here. It","Fragments":["may","makes"]},{"Key":"be generally","Fragments":["desirable"]},{"Key":"generally desirable","Fragments":["to","to"]},{"Key":"put constants","Fragments":["in"]},{"Key":"constants in","Fragments":["front"]},{"Key":"languages with","Fragments":["implicit"]},{"Key":"with implicit","Fragments":["currying"]},{"Key":"implicit currying","Fragments":["(like"]},{"Key":"currying (like","Fragments":["Haskell,"]},{"Key":"(like Haskell,","Fragments":["as"]},{"Key":"Haskell, as","Fragments":["somebody"]},{"Key":"as somebody","Fragments":["mentioned),"]},{"Key":"somebody mentioned),","Fragments":["but"]},{"Key":"mentioned), but","Fragments":["I"]},{"Key":"it being","Fragments":["applicable","accepted","noisy,","called","`conj`ed"]},{"Key":"being applicable","Fragments":["to"]},{"Key":"applicable to","Fragments":["Clojure,"]},{"Key":"Clojure, where","Fragments":["currying","it's"]},{"Key":"currying is","Fragments":["explicit"]},{"Key":"is explicit","Fragments":["(of","enough"]},{"Key":"explicit (of","Fragments":["course"]},{"Key":"(of course","Fragments":["mindful"]},{"Key":"course mindful","Fragments":["organization"]},{"Key":"mindful organization","Fragments":["of"]},{"Key":"organization of","Fragments":["function's","the"]},{"Key":"of function's","Fragments":["arguments"]},{"Key":"function's arguments","Fragments":["is"]},{"Key":"arguments is","Fragments":["still"]},{"Key":"is still","Fragments":["essential","pretty","off","a","not","a","executed","a","clear","not"]},{"Key":"still essential","Fragments":["for"]},{"Key":"essential for","Fragments":["composability)."]},{"Key":"for composability).","Fragments":["In"]},{"Key":"composability). In","Fragments":["that"]},{"Key":"In that","Fragments":["particular","case,","case","light,"]},{"Key":"that particular","Fragments":["case","case","case.","context,","use.","test."]},{"Key":"case (logical","Fragments":["tests)"]},{"Key":"(logical tests)","Fragments":["I"]},{"Key":"tests) I","Fragments":["personally"]},{"Key":"parameter in","Fragments":["front","shorthand"]},{"Key":"front for","Fragments":["readability."]},{"Key":"for readability.","Fragments":["But"]},{"Key":"readability. But","Fragments":["maybe"]},{"Key":"maybe that's","Fragments":["just","a","just","just"]},{"Key":"that's just","Fragments":["me.","preference,","a","minor,","because","my","the"]},{"Key":" \u0026gt;","Fragments":["I","He","You're","Try"]},{"Key":"\u0026gt; I","Fragments":["don't"]},{"Key":" Putting","Fragments":["constants","it","an"]},{"Key":"Putting constants","Fragments":["first"]},{"Key":"constants first","Fragments":["makes"]},{"Key":"first makes","Fragments":["things","partial"]},{"Key":"to compose","Fragments":["later","existing"]},{"Key":"compose later","Fragments":["on"]},{"Key":"later on","Fragments":[":)","today."]},{"Key":"on :)","Fragments":["It's"]},{"Key":":) It's","Fragments":["not"]},{"Key":"really relevant","Fragments":["here,"]},{"Key":"relevant here,","Fragments":["but"]},{"Key":"it's usually","Fragments":["good","preferred"]},{"Key":"usually good","Fragments":["practice"]},{"Key":"practice in","Fragments":["functional","the"]},{"Key":"in functional","Fragments":["programming","programming","language?,"]},{"Key":"functional programming","Fragments":["and","and","languages,","and","novice","experience,"]},{"Key":"programming and","Fragments":["currying","wanted","don't"]},{"Key":"and currying","Fragments":["in"]},{"Key":"currying in","Fragments":["particular"]},{"Key":"in particular","Fragments":[":)","any","for","the","am"]},{"Key":"Thank you,","Fragments":["`last`","I","zoldar!","I"]},{"Key":"you, `last`","Fragments":["was"]},{"Key":"`last` was","Fragments":["the","OK,"]},{"Key":"was the","Fragments":["function","bad","best","ordering","best","advice","most","wrong","yelling","first","second","first","right"]},{"Key":"function I","Fragments":["was","am","give"]},{"Key":"was searching","Fragments":["for."]},{"Key":"searching for.","Fragments":["I"]},{"Key":"for. I","Fragments":["submitted"]},{"Key":"version without","Fragments":["the","regular"]},{"Key":"without the","Fragments":["Java","translate-nucleotide","extra","`require`","get:","context","pre","need","performance","calls","needing","`is-`","superfluous","(not","first"]},{"Key":"probably try","Fragments":["to"]},{"Key":"keep consistent","Fragments":["regarding","here?"]},{"Key":"consistent regarding","Fragments":["the"]},{"Key":"of constants","Fragments":["use"]},{"Key":"constants use","Fragments":["in"]},{"Key":"your helper","Fragments":["function","methods","methods","functions","functions","functions.","function"]},{"Key":"helper function","Fragments":["bodies;","for","for","so","small","or","wouldn't","for"]},{"Key":"function bodies;","Fragments":["generally"]},{"Key":"bodies; generally","Fragments":["speaking,"]},{"Key":"generally speaking,","Fragments":["using"]},{"Key":"speaking, using","Fragments":["the"]},{"Key":"constant first","Fragments":["makes"]},{"Key":"makes partial","Fragments":["application"]},{"Key":"partial application","Fragments":["easier.","for","problem","of","of","without","to","which","with","there."]},{"Key":"I'd have","Fragments":["declared","to"]},{"Key":"have declared","Fragments":["these"]},{"Key":"declared these","Fragments":["helpers"]},{"Key":"these helpers","Fragments":["as"]},{"Key":"helpers as","Fragments":["private.","well)"]},{"Key":"looks nice,","Fragments":["good","quite"]},{"Key":"nice, good","Fragments":["job"]},{"Key":"good job","Fragments":[":)","to","on"]},{"Key":"Looking snazzy","Fragments":[":)"]},{"Key":"considered normalizing","Fragments":["before","prior"]},{"Key":"normalizing before","Fragments":["you"]},{"Key":"before you","Fragments":["separate","do","split","broke","process"]},{"Key":"you separate","Fragments":["the","the"]},{"Key":"separate the","Fragments":["words?","evaluation","response","input","input","actual","cases"]},{"Key":"the words?","Fragments":["It"]},{"Key":"words? It","Fragments":["means"]},{"Key":"It means","Fragments":["```lower-case```"]},{"Key":"means ```lower-case```","Fragments":["will"]},{"Key":"```lower-case``` will","Fragments":["only"]},{"Key":"will only","Fragments":["have","be","try"]},{"Key":"only have","Fragments":["to","one","to","one","to","2","to","one"]},{"Key":"be called","Fragments":["once,","something","with","just","with","anything","`text-\u003eword-count`,","`-\u003elower-case`.","`\u003cfunction-name\u003e?`.","`shout?`.","twice."]},{"Key":"called once,","Fragments":["rather"]},{"Key":"once, rather","Fragments":["than","than"]},{"Key":"than for","Fragments":["each"]},{"Key":"each entry","Fragments":["in","matches"]},{"Key":"entry in","Fragments":["the"]},{"Key":"That's an","Fragments":["excellent","excellent","*interesting*","error"]},{"Key":"an excellent","Fragments":["suggestion.","idea.","idea."]},{"Key":"excellent suggestion.","Fragments":["Thanks!","I've"]},{"Key":"is nice.","Fragments":["Have","I"]},{"Key":"nice. Have","Fragments":["you","you"]},{"Key":"normalizing prior","Fragments":["to"]},{"Key":"prior to","Fragments":["splitting?","splitting","converting"]},{"Key":"to splitting?","Fragments":["I"]},{"Key":"splitting? I","Fragments":["would"]},{"Key":"would think","Fragments":["it"]},{"Key":"more efficient","Fragments":["to","(nlogn","(nlogn","algorithm.","algorithm","method","than","than","with","way","than","by","(that's","and","and","computation,","(regexes"]},{"Key":"efficient to","Fragments":["run"]},{"Key":"to run","Fragments":["through","the","the","the"]},{"Key":"run through","Fragments":["the"]},{"Key":"through the","Fragments":["string","backlog!","nitpicking.","whole","Java","clojure","exercise.","exercise.","arguments,","use","data","supplied","lens","docs!","whole"]},{"Key":"string once,","Fragments":["rather"]},{"Key":"than calling","Fragments":["the","Java"]},{"Key":"calling the","Fragments":["function","java","whole"]},{"Key":"function multiple","Fragments":["times.","times"]},{"Key":"said, I'm","Fragments":["a","put"]},{"Key":"a noob","Fragments":["to","but"]},{"Key":"noob to","Fragments":["Clojure,"]},{"Key":"the ```-\u0026gt;\u0026gt;```","Fragments":["operator"]},{"Key":"```-\u0026gt;\u0026gt;``` operator","Fragments":["reads."]},{"Key":"operator reads.","Fragments":["I"]},{"Key":"reads. I","Fragments":["love"]},{"Key":"can pipeline","Fragments":["functions"]},{"Key":"pipeline functions","Fragments":["in"]},{"Key":"into ```clojure.core/frequencies```?","Fragments":["It"]},{"Key":"```clojure.core/frequencies```? It","Fragments":["may","might"]},{"Key":"may simplify","Fragments":["much"]},{"Key":"simplify much","Fragments":["of"]},{"Key":"the work","Fragments":["for","you","of","for","for","you're","is","is"]},{"Key":"for you","Fragments":[":)","to",";-)","(like",":)","and","too,"]},{"Key":"to say","Fragments":["I","it's","here,","for","-","`(=","\"Woah,","\"Help","I","the","whether"]},{"Key":"say I","Fragments":["have","still"]},{"Key":"have my","Fragments":["reservations."]},{"Key":"my reservations.","Fragments":["Ignoring"]},{"Key":"reservations. Ignoring","Fragments":["the"]},{"Key":"Ignoring the","Fragments":["fact"]},{"Key":"the fact","Fragments":["that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","(based","that","that","that","that","that","a","that","that","that"]},{"Key":"the problem","Fragments":["didn't","within","with","domain.","of","specification","domain","domain","we're","that","is","into","by","before","as","domain.","at","specification","is","with","specification","definition.","for","starts","domain's","description.","domain","to"]},{"Key":"problem didn't","Fragments":["really"]},{"Key":"didn't really","Fragments":["specify","like","like","care","think","make","make"]},{"Key":"really specify","Fragments":["whether"]},{"Key":"specify whether","Fragments":["capitalization"]},{"Key":"whether capitalization","Fragments":["should"]},{"Key":"capitalization should","Fragments":["be"]},{"Key":"be considered","Fragments":["a","a","shouting.","yelling,"]},{"Key":"considered a","Fragments":["factor","shout.","letter."]},{"Key":"a factor","Fragments":["in","of"]},{"Key":"factor in","Fragments":["if"]},{"Key":"in if","Fragments":["something"]},{"Key":"if something","Fragments":["is","is"]},{"Key":"something is","Fragments":["an","`present?`."]},{"Key":"is an","Fragments":["anagram","*anagram*","easy","adjective.","unequivocal","analog","interesting","implicit","[Alphagram](http://en.wikipedia.org/wiki/Alphagram);","[Alphagram](http://en.wikipedia.org/wiki/Alphagram);","anagram","anagram","already","expression","issue","inverse","implicit","optional","element","improvement,","anagram","anagram","anagram,","interesting","optimisation"]},{"Key":"an anagram","Fragments":["or","of","of","of","(test","of","is.","of","is","of","for","is"]},{"Key":"anagram or","Fragments":["not,"]},{"Key":"or not,","Fragments":["my","but"]},{"Key":"not, my","Fragments":["current"]},{"Key":"my current","Fragments":["implementation","solution."]},{"Key":"current implementation","Fragments":["has"]},{"Key":"implementation has","Fragments":["the","a","the"]},{"Key":"the very","Fragments":["Clojure-ish","same","last","end","similar","moment"]},{"Key":"very Clojure-ish","Fragments":["property"]},{"Key":"Clojure-ish property","Fragments":["that"]},{"Key":"property that","Fragments":["it"]},{"Key":"it works","Fragments":["on","in","like","perfectly","with","but","just","now.","perhaps?","in","now,","with","with"]},{"Key":"works on","Fragments":["any","strings","a"]},{"Key":"any sequence","Fragments":["type,"]},{"Key":"sequence type,","Fragments":["not"]},{"Key":"type, not","Fragments":["just"]},{"Key":"not just","Fragments":["strings.","suffixes?","the","English."]},{"Key":"just strings.","Fragments":["Introducing"]},{"Key":"strings. Introducing","Fragments":["string"]},{"Key":"Introducing string","Fragments":["operations"]},{"Key":"string operations","Fragments":["removes","-"]},{"Key":"operations removes","Fragments":["that"]},{"Key":"removes that","Fragments":["generality."]},{"Key":"On the","Fragments":["other","other","other","other","other","first","other","first","`clean-phrase`","#{a","`is-yelling`"]},{"Key":"other hand,","Fragments":["your","bludgeoning","I","relies","I","you"]},{"Key":"hand, your","Fragments":["comment"]},{"Key":"your comment","Fragments":["did","on","is","strategy"]},{"Key":"comment did","Fragments":["cause"]},{"Key":"did cause","Fragments":["me"]},{"Key":"cause me","Fragments":["to"]},{"Key":"to realize","Fragments":["that","you","that's"]},{"Key":"two calls","Fragments":["to"]},{"Key":"calls to","Fragments":["`sort`","`s/lower-case`","`lower-case`","```canonicalize```?","`declare`","Java","attention","access","access","[`range`](http://clojuredocs.org/clojure_core/clojure.core/range).","modify","`robot-name`","[`map`](http://clojuredocs.org/clojure_core/clojure.core/map)","`drop_and_show`","`char-array`.","Java","`count`","`str`"]},{"Key":"to `sort`","Fragments":["have"]},{"Key":"`sort` have","Fragments":["a"]},{"Key":"a kind","Fragments":["of"]},{"Key":"of parallelism","Fragments":["that"]},{"Key":"parallelism that","Fragments":["should"]},{"Key":"extracted out,","Fragments":["so"]},{"Key":"out, so","Fragments":["I'm"]},{"Key":"so I'm","Fragments":["resubmitted","avoiding","very","very","happy","on","not","not"]},{"Key":"I'm resubmitted","Fragments":["a"]},{"Key":"resubmitted a","Fragments":["version"]},{"Key":"version that","Fragments":["is","wasn't","checks","makes","uses"]},{"Key":"is case","Fragments":["insensitive","insensitive."]},{"Key":"case insensitive","Fragments":["and","comparison"]},{"Key":"insensitive and","Fragments":["takes"]},{"Key":"and takes","Fragments":["this","the"]},{"Key":"takes this","Fragments":["detail"]},{"Key":"this detail","Fragments":["into"]},{"Key":"detail into","Fragments":["account."]},{"Key":"Pretty nice,","Fragments":["actually."]},{"Key":"I second","Fragments":["@candace's"]},{"Key":"second @candace's","Fragments":["suggestion"]},{"Key":"@candace's suggestion","Fragments":["on"]},{"Key":"on `defn-`","Fragments":["and"]},{"Key":"`defn-` and","Fragments":["`last`."]},{"Key":"and `last`.","Fragments":["Also"]},{"Key":"`last`. Also","Fragments":["`silence?`"]},{"Key":"Also `silence?`","Fragments":["could"]},{"Key":"`silence?` could","Fragments":["use"]},{"Key":"use `empty?`","Fragments":["instead"]},{"Key":"`empty?` instead","Fragments":["of"]},{"Key":"of direct","Fragments":["comparison.","recursion","recursion"]},{"Key":"But hey,","Fragments":["it’s","you"]},{"Key":"hey, it’s","Fragments":["very"]},{"Key":"it’s very","Fragments":["nice"]},{"Key":"nice solution","Fragments":["overall.","without"]},{"Key":" Speaking","Fragments":["of","of","of"]},{"Key":"Speaking of","Fragments":["tutorials,","performance:","which"]},{"Key":"of tutorials,","Fragments":["I’ve"]},{"Key":"tutorials, I’ve","Fragments":["started"]},{"Key":"I’ve started","Fragments":["with"]},{"Key":"Clojure Programming","Fragments":["from"]},{"Key":"Programming from","Fragments":["O’Reilly"]},{"Key":"from O’Reilly","Fragments":["and"]},{"Key":"O’Reilly and","Fragments":["extensive"]},{"Key":"and extensive","Fragments":["usage"]},{"Key":"extensive usage","Fragments":["of"]},{"Key":"of google","Fragments":["+"]},{"Key":"google +","Fragments":["clojure"]},{"Key":"+ clojure","Fragments":["docs."]},{"Key":"Pretty clear","Fragments":["solution!"]},{"Key":"Why not","Fragments":["using","`:require`","simply;","inline","\"strand\"","avoid"]},{"Key":"using `empty?`","Fragments":["when"]},{"Key":"`empty?` when","Fragments":["checking"]},{"Key":"a silent","Fragments":["req?"]},{"Key":" Shout","Fragments":["detection"]},{"Key":"Shout detection","Fragments":["can"]},{"Key":"detection can","Fragments":["also"]},{"Key":"can also","Fragments":["be","use","serve","work","be","treat","rearrange","use","use","do","do","be","see","replace","append","be","be","use","be","be","be","be","use","be","write","be","\"alias\"","take","be","do","treat","take","remove","make","remove","introduce","use","treat","be","be","be","be"]},{"Key":"be simplified.","Fragments":["`clojure.string/upper-case`,","`clojure.string/lower-case`","I","Take"]},{"Key":"simplified. `clojure.string/upper-case`,","Fragments":["maybe."]},{"Key":" Haven’t","Fragments":["you"]},{"Key":"Haven’t you","Fragments":["thought"]},{"Key":"about turning","Fragments":["conditions"]},{"Key":"turning conditions","Fragments":["into"]},{"Key":"into finely-named","Fragments":["predicates?"]},{"Key":"finely-named predicates?","Fragments":["It"]},{"Key":"predicates? It","Fragments":["could"]},{"Key":"It could","Fragments":["benefit","be"]},{"Key":"So something","Fragments":["like:","like","like:"]},{"Key":"(defn nothing?","Fragments":["[str]"]},{"Key":" (empty?","Fragments":["str))","s)"]},{"Key":"to me","Fragments":[":)","...","is","still...","personally.","when","that",":)","to","but","that","that","what...","that","to","(though,","in",":)","as","right","was","and","given","the","will","to","to","that","a","when","so"]},{"Key":"This works,","Fragments":["but"]},{"Key":"- What","Fragments":["about"]},{"Key":"about differently","Fragments":["cased"]},{"Key":"differently cased","Fragments":["words?"]},{"Key":"- Is","Fragments":["there"]},{"Key":"only compute","Fragments":["the"]},{"Key":"compute the","Fragments":["sorted"]},{"Key":"the sorted","Fragments":["value","version","letters.","word","candidate"]},{"Key":"sorted value","Fragments":["of"]},{"Key":"the initial","Fragments":["word","string","word","data","word","refactoring.","arg"]},{"Key":"initial word","Fragments":["once,","anagram","for"]},{"Key":"once, without","Fragments":["sacrificing"]},{"Key":"Nice. Would","Fragments":["be"]},{"Key":"Would be","Fragments":["possibly","great","a"]},{"Key":"be possibly","Fragments":["nice","more"]},{"Key":"possibly nice","Fragments":["to"]},{"Key":"have nucleobases","Fragments":["stored"]},{"Key":"nucleobases stored","Fragments":["in"]},{"Key":"stored in","Fragments":["meaningful","the","the"]},{"Key":"in meaningful","Fragments":["variables"]},{"Key":" \u003e","Fragments":["Non-java","put","just","including","a","require","It","Transforming","Given","So","Fairly","\"Invalid","Line","One","Heh,","Take","Instead","When","Please"]},{"Key":"\u003e Non-java","Fragments":["way"]},{"Key":"Non-java way","Fragments":["to"]},{"Key":"Yes, using","Fragments":["`last`,"]},{"Key":"using `last`,","Fragments":["which"]},{"Key":"`last`, which","Fragments":["treats"]},{"Key":"which treats","Fragments":["strings"]},{"Key":"treats strings","Fragments":["as"]},{"Key":"as lists","Fragments":["of","as"]},{"Key":"lists of","Fragments":["characters;","names,"]},{"Key":"of characters;","Fragments":["eg."]},{"Key":"characters; eg.","Fragments":["`(="]},{"Key":"eg. `(=","Fragments":["\\?"]},{"Key":"`(= \\?","Fragments":["(last","(last","(last","(last","(last","(last","(last","(last","(last"]},{"Key":"(last input))`","Fragments":["would"]},{"Key":"input))` would","Fragments":["work."]},{"Key":"probably declare","Fragments":["helper","`query-type`"]},{"Key":"declare helper","Fragments":["functions"]},{"Key":"functions as","Fragments":["private","opposed","well","first-class,","just","well?","opposed","well,","compositions","you"]},{"Key":"private (using","Fragments":["`defn-`)"]},{"Key":"(using `defn-`)","Fragments":["and"]},{"Key":"`defn-`) and","Fragments":["possibly"]},{"Key":"and possibly","Fragments":["`require`","a","more"]},{"Key":"possibly `require`","Fragments":["or"]},{"Key":"the `clojure.string`","Fragments":["namespace.","namespace","namespace","namespace","namespace","prefixes","prefixes","functions","functions","namespace","repetition.","prefix","dependency"]},{"Key":"looks pretty","Fragments":["neat","nice!","clean.","good.","good,","good","good."]},{"Key":"pretty neat","Fragments":[":)","that"]},{"Key":"started clojure,","Fragments":["and"]},{"Key":"clojure, and","Fragments":["I"]},{"Key":"have trouble","Fragments":["to"]},{"Key":"trouble to","Fragments":["find"]},{"Key":"the `.endsWith`","Fragments":["I","with","host"]},{"Key":"`.endsWith` I","Fragments":["tried"]},{"Key":"tried `last`","Fragments":["but"]},{"Key":"`last` but","Fragments":["it"]},{"Key":"it didn't","Fragments":["work.","work","have","start","work.","make"]},{"Key":"didn't work.","Fragments":["Seems","I"]},{"Key":"work. Seems","Fragments":["weird"]},{"Key":"Seems weird","Fragments":["because"]},{"Key":"weird because","Fragments":["it"]},{"Key":"works in","Fragments":["the","a","Clojure...","fact.","Clojure."]},{"Key":"I suggest","Fragments":["extracting","you","taking"]},{"Key":"suggest extracting","Fragments":["conditions","functions"]},{"Key":"extracting conditions","Fragments":["to"]},{"Key":"functions that","Fragments":["would","can","do","would","return","were","are","are","build","you","can","explained","each","might","return","should","can","you","might","return","return","operate","check","do","test","are","return","the","return","can't","are","you","closed"]},{"Key":"would reveal","Fragments":["intention"]},{"Key":"reveal intention","Fragments":["of"]},{"Key":"intention of","Fragments":["the","each","\u003ccode\u003eresponse-for\u003c/code\u003e."]},{"Key":"the code.","Fragments":["Also,","I've","I","Small","What","Thanks","I","Perhaps,",":-/","Totally"]},{"Key":"code. Also,","Fragments":["there","you"]},{"Key":"Also, there","Fragments":["is"]},{"Key":"use instead","Fragments":["of","of","of"]},{"Key":"Yes, `(last","Fragments":["\"blah?\")`"]},{"Key":"`(last \"blah?\")`","Fragments":["would"]},{"Key":"\"blah?\")` would","Fragments":["return"]},{"Key":"return `\\?`","Fragments":["so"]},{"Key":"`\\?` so","Fragments":["you"]},{"Key":"can test","Fragments":["for"]},{"Key":"test for","Fragments":["`(=","numbers,","equality","`:ignored`.","empty","shouting,","that?","\u003ccode\u003eshouting?\u003c/code\u003e","that,","it.","what's","validity","\"letterness\"","equality","a","yelling","the","that:","division","shouting","all"]},{"Key":"for `(=","Fragments":["\\?","0"]},{"Key":"The `last`","Fragments":["function"]},{"Key":"function returns","Fragments":["a","a","its","nothing"]},{"Key":"returns a","Fragments":["single","representation","function","function","function","function","predicate","function)","value","boolean","boolean,","vector","string.","double","string","seq.","function.","seq"]},{"Key":"character. In","Fragments":["Clojure"]},{"Key":"In Clojure","Fragments":["that","is","it"]},{"Key":"is represented","Fragments":["by"]},{"Key":"like `\\?`","Fragments":["rather"]},{"Key":"`\\?` rather","Fragments":["than"]},{"Key":"the single","Fragments":["character","string.","solution"]},{"Key":"single character","Fragments":["string","literals"]},{"Key":"character string","Fragments":["`\"?\"`."]},{"Key":"My Clojure","Fragments":["isn't"]},{"Key":"Clojure isn't","Fragments":["all"]},{"Key":"isn't all","Fragments":["that"]},{"Key":"all that","Fragments":["strong","clutter.","confident"]},{"Key":"that strong","Fragments":["so"]},{"Key":"strong so","Fragments":["if"]},{"Key":"so if","Fragments":["someone","you","I","you"]},{"Key":"if someone","Fragments":["else","had","takes","shouts"]},{"Key":"someone else","Fragments":["could","please","used","wrote,","comparing"]},{"Key":"else could","Fragments":["confirm","we","you"]},{"Key":"could confirm","Fragments":["that"]},{"Key":"confirm that","Fragments":["I'm"]},{"Key":"I'm explaining","Fragments":["this"]},{"Key":"explaining this","Fragments":["correctly"]},{"Key":"this correctly","Fragments":["that"]},{"Key":"correctly that","Fragments":["would"]},{"Key":"The `allchars`","Fragments":["function"]},{"Key":"`allchars` function","Fragments":["doesn't"]},{"Key":"function doesn't","Fragments":["seem","seem","sort"]},{"Key":"be used.","Fragments":["You"]},{"Key":"used. You","Fragments":["should"]},{"Key":"private so","Fragments":["you"]},{"Key":"don't expose","Fragments":["more"]},{"Key":"expose more","Fragments":["than"]},{"Key":"need to.","Fragments":["Lastly,","Plus"]},{"Key":"to. Lastly,","Fragments":["look"]},{"Key":"Lastly, look","Fragments":["at"]},{"Key":"at renaming","Fragments":["you"]},{"Key":"renaming you","Fragments":["`x`"]},{"Key":"you `x`","Fragments":["variable"]},{"Key":"`x` variable","Fragments":["to"]},{"Key":"variable to","Fragments":["something","the","the"]},{"Key":"was suggested","Fragments":["that","to"]},{"Key":"suggested that","Fragments":["I","I"]},{"Key":"use last.","Fragments":["When"]},{"Key":"last. When","Fragments":["I"]},{"Key":"When I","Fragments":["run","think","hear","did","realized","read","removed"]},{"Key":"I run","Fragments":["the"]},{"Key":"run the","Fragments":["function","test","tests","test","tests","`(=","clean-string"]},{"Key":"function question2","Fragments":["it"]},{"Key":"question2 it","Fragments":["returns"]},{"Key":"it returns","Fragments":["false","a","a","`nil`"]},{"Key":"returns false","Fragments":["even"]},{"Key":"false even","Fragments":["though"]},{"Key":"though (last","Fragments":["(seq"]},{"Key":"x)) returns","Fragments":["?."]},{"Key":"returns ?.","Fragments":["I"]},{"Key":"?. I","Fragments":["am"]},{"Key":"That's almost","Fragments":["exactly"]},{"Key":"almost exactly","Fragments":["what","implemented"]},{"Key":"have, barring","Fragments":["the"]},{"Key":"barring the","Fragments":["String"]},{"Key":"the String","Fragments":["import","method"]},{"Key":"String import","Fragments":["which"]},{"Key":"import which","Fragments":["I"]},{"Key":"which I","Fragments":["should've","hope","can","think","was","do","wasn't","carried","found","wasn't","like,","like","see","think","believe","found","think","assumed","ended"]},{"Key":"I should've","Fragments":["used."]},{"Key":"should've used.","Fragments":["I"]},{"Key":"used. I","Fragments":["like"]},{"Key":"it. Do","Fragments":["you","you"]},{"Key":"know Java?","Fragments":["I"]},{"Key":"Java? I","Fragments":["don't,"]},{"Key":"I don't,","Fragments":["really."]},{"Key":"about it!","Fragments":["It"]},{"Key":"it! It","Fragments":["would"]},{"Key":"also make","Fragments":["the","little"]},{"Key":"regex \"positive\"","Fragments":["(what"]},{"Key":"\"positive\" (what","Fragments":["constitutes"]},{"Key":"(what constitutes","Fragments":["a"]},{"Key":"constitutes a","Fragments":["word?)"]},{"Key":"a word?)","Fragments":["instead"]},{"Key":"word?) instead","Fragments":["of"]},{"Key":"of negative.","Fragments":["I'll"]},{"Key":"negative. I'll","Fragments":["give"]},{"Key":"I'll give","Fragments":["it","them","it"]},{"Key":"give it","Fragments":["a","a","a","a","2","another","a"]},{"Key":" Oops,","Fragments":["didn't","I","I","slightly"]},{"Key":"Oops, didn't","Fragments":["realize"]},{"Key":"that submitting","Fragments":["a"]},{"Key":"submitting a","Fragments":["new","new","working"]},{"Key":"of `dna`","Fragments":["after"]},{"Key":"`dna` after","Fragments":["it"]},{"Key":"after it","Fragments":["being"]},{"Key":"being accepted","Fragments":["would"]},{"Key":"accepted would","Fragments":["submit"]},{"Key":"would submit","Fragments":["it"]},{"Key":"current problem.","Fragments":["Can"]},{"Key":"problem. Can","Fragments":["this"]},{"Key":"Can this","Fragments":["revision"]},{"Key":"this revision","Fragments":["be"]},{"Key":"revision be","Fragments":["deleted?"]},{"Key":"of resorting","Fragments":["to","to"]},{"Key":"API, why","Fragments":["not"]},{"Key":"why not","Fragments":["using","process","process","simply","use"]},{"Key":"be great","Fragments":["to"]},{"Key":"keep indentation","Fragments":["consistent"]},{"Key":"indentation consistent","Fragments":["here."]},{"Key":"consistent here.","Fragments":["Otherwise,"]},{"Key":"here. Otherwise,","Fragments":["looks"]},{"Key":"looks great","Fragments":[":)","-","to","generally,","to","overall.",":)","to"]},{"Key":"been a","Fragments":["bit","bit"]},{"Key":"bit surprised","Fragments":["to"]},{"Key":"surprised to","Fragments":["find","discover","have","find"]},{"Key":"find `string/replace`","Fragments":["not"]},{"Key":"`string/replace` not","Fragments":["being"]},{"Key":"not being","Fragments":["easily","necessary","part","shouted,","used."]},{"Key":"being easily","Fragments":["composable…"]},{"Key":"easily composable…","Fragments":["Did"]},{"Key":"composable… Did","Fragments":["I"]},{"Key":"Did I","Fragments":["miss"]},{"Key":"like where","Fragments":["you're","it's","you","this"]},{"Key":"where you're","Fragments":["going","up"]},{"Key":"you're going","Fragments":["in","to","to"]},{"Key":"going in","Fragments":["general","my","terms"]},{"Key":"in general","Fragments":["but","and","feels"]},{"Key":"general but","Fragments":["I"]},{"Key":"bit unsure","Fragments":["about"]},{"Key":"the nested","Fragments":["branching","parentheses","`if`?","\"ifs\"","`if`","replace","if"]},{"Key":"nested branching","Fragments":["in"]},{"Key":"branching in","Fragments":["your"]},{"Key":"your `calm?`","Fragments":["condition."]},{"Key":"`calm?` condition.","Fragments":["Could"]},{"Key":"condition. Could","Fragments":["you"]},{"Key":"you maybe","Fragments":["reshuffle"]},{"Key":"maybe reshuffle","Fragments":["your"]},{"Key":"reshuffle your","Fragments":["conditions"]},{"Key":"to not","Fragments":["branch","let","leave","having","call","understand","make"]},{"Key":"not branch","Fragments":["beyond"]},{"Key":"branch beyond","Fragments":["the"]},{"Key":"to take","Fragments":["some","my","a","two","the","a","your","a","into","two","advantage","out","a","a"]},{"Key":"take some","Fragments":["time","time,","time."]},{"Key":"time and","Fragments":["do","runtime","kind","thought","a"]},{"Key":"and do","Fragments":["some","that","a"]},{"Key":"do some","Fragments":["clojure","of","sort","of","of"]},{"Key":"some clojure","Fragments":["koans","docs","code"]},{"Key":"clojure koans","Fragments":["before","so"]},{"Key":"koans before","Fragments":["I"]},{"Key":"before I","Fragments":["start","get","submitted","realized","stumbled","learned","split"]},{"Key":"I start","Fragments":["throwing","using"]},{"Key":"start throwing","Fragments":["more"]},{"Key":"throwing more","Fragments":["code"]},{"Key":"code at","Fragments":["this","line"]},{"Key":"at this","Fragments":["problem.","problem","a","point.","point.","point.","was","point","time,","one."]},{"Key":"minor thing:","Fragments":["You","Perhaps"]},{"Key":"thing: You","Fragments":["can"]},{"Key":"can eliminate","Fragments":["parentheses","one","the"]},{"Key":"eliminate parentheses","Fragments":["around"]},{"Key":"around functions","Fragments":["with"]},{"Key":"no (additional)","Fragments":["arguments"]},{"Key":"(additional) arguments","Fragments":["in"]},{"Key":"arguments in","Fragments":["threading"]},{"Key":"in threading","Fragments":["macros,","macro."]},{"Key":"threading macros,","Fragments":["but","it's"]},{"Key":"macros, but","Fragments":["that's","had"]},{"Key":"that's probably","Fragments":["in","just","(more"]},{"Key":"probably in","Fragments":["the"]},{"Key":"the realm","Fragments":["of"]},{"Key":"realm of","Fragments":["taste."]},{"Key":"you seen","Fragments":["`re-seq`?","```clojure.core/filter```?"]},{"Key":"seen `re-seq`?","Fragments":["I"]},{"Key":"`re-seq`? I","Fragments":["find","find"]},{"Key":"bit nicer","Fragments":["than"]},{"Key":"nicer than","Fragments":["`split`","using"]},{"Key":"than `split`","Fragments":["for"]},{"Key":"`split` for","Fragments":["this"]},{"Key":"Looks pretty","Fragments":["good","good!","good.","good","good","good,","good","good!"]},{"Key":"more really","Fragments":["tiny","good"]},{"Key":"really tiny","Fragments":["nitpick"]},{"Key":"tiny nitpick","Fragments":["I","-"]},{"Key":"the square","Fragments":["brackets","brackets","root","brackets"]},{"Key":"square brackets","Fragments":["around","put","on"]},{"Key":"brackets around","Fragments":["`[\\w]`"]},{"Key":"around `[\\w]`","Fragments":["are"]},{"Key":"`[\\w]` are","Fragments":["unnecessary,"]},{"Key":"are unnecessary,","Fragments":["since"]},{"Key":"unnecessary, since","Fragments":["it's"]},{"Key":"you familiar","Fragments":["with","with","with","with","with"]},{"Key":"with `re-seq`?","Fragments":["I"]},{"Key":"more direct","Fragments":["than"]},{"Key":"direct than","Fragments":["`split`."]},{"Key":"you investigated","Fragments":["```clojure.core/frequencies```?"]},{"Key":"investigated ```clojure.core/frequencies```?","Fragments":["It"]},{"Key":"your work","Fragments":["a","to","-","for"]},{"Key":"work a","Fragments":["bit"]},{"Key":"you used","Fragments":["`\\W+`,","-\u0026gt;\u0026gt;","threading","`(random-string-range","in","used","`(if","[condition","`let`","a","Java","the","the","meaningful","`reduce`","`if-not`"]},{"Key":"used `\\W+`,","Fragments":["couldn't"]},{"Key":"`\\W+`, couldn't","Fragments":["you"]},{"Key":"couldn't you","Fragments":["get","possibly","use"]},{"Key":"the `(remove","Fragments":["str/blank?)`?","blank?)`"]},{"Key":"this more","Fragments":["explicit","efficient.","like","clear,","along","readable,","functional."]},{"Key":"explicit comparatively","Fragments":["to"]},{"Key":"comparatively to","Fragments":["previous"]},{"Key":"to previous","Fragments":["version,"]},{"Key":"previous version,","Fragments":["though","but"]},{"Key":"version, though","Fragments":["a"]},{"Key":"though a","Fragments":["simple"]},{"Key":"simple `string/replace`","Fragments":["would"]},{"Key":"`string/replace` would","Fragments":["have"]},{"Key":"have probably","Fragments":["been"]},{"Key":"probably been","Fragments":["more"]},{"Key":"been more","Fragments":["concise","clear.","readable.","explicit"]},{"Key":"concise now","Fragments":["I"]},{"Key":"I kinda","Fragments":["like","hacked"]},{"Key":"kinda like","Fragments":["it"]},{"Key":"it like","Fragments":["that,","this:","this","\"Have","this:","such:","this"]},{"Key":"that, having","Fragments":["the"]},{"Key":"having the","Fragments":["mapping","functions","name","following","same","comparison"]},{"Key":"the mapping","Fragments":["super","to","shortcuts,"]},{"Key":"mapping super","Fragments":["explicit"]},{"Key":"super explicit","Fragments":["is"]},{"Key":"explicit is","Fragments":["useful"]},{"Key":"is useful","Fragments":["imho.","enough"]},{"Key":"was wondering","Fragments":["yesterday","about","what","if"]},{"Key":"wondering yesterday","Fragments":["if"]},{"Key":"yesterday if","Fragments":["there"]},{"Key":"a `private`","Fragments":["equivalent"]},{"Key":"`private` equivalent","Fragments":["in"]},{"Key":"equivalent in","Fragments":["Clojure."]},{"Key":"Clojure. Thanks","Fragments":["to",":)"]},{"Key":"Thanks to","Fragments":["your","@kassandra","@sylvan","zoldar","@winona","@fidel","@adelle","@adah"]},{"Key":"your nit","Fragments":["I've","history."]},{"Key":"nit I've","Fragments":["found"]},{"Key":"I've found","Fragments":["`defn-`!","one"]},{"Key":"found `defn-`!","Fragments":["New"]},{"Key":"`defn-`! New","Fragments":["submission"]},{"Key":"New submission","Fragments":["on"]},{"Key":"submission on","Fragments":["the"]},{"Key":"to assign","Fragments":["the","vars","descriptive"]},{"Key":"assign the","Fragments":["characters"]},{"Key":"to vars,","Fragments":["so"]},{"Key":"vars, so","Fragments":["they"]},{"Key":"so they","Fragments":["have","can","would"]},{"Key":"they have","Fragments":["more/clearer","both","the","more","the","the","no","no"]},{"Key":"have more/clearer","Fragments":["meaning"]},{"Key":"more/clearer meaning","Fragments":["in"]},{"Key":"meaning in","Fragments":["the"]},{"Key":"be simpler","Fragments":["if","with","with","to"]},{"Key":"simpler if","Fragments":["you"]},{"Key":"you lowercased","Fragments":["the"]},{"Key":"lowercased the","Fragments":["phrase"]},{"Key":"phrase instead","Fragments":["of"]},{"Key":"of mapping","Fragments":["over","over","over","over","-1"]},{"Key":"mapping over","Fragments":["the","the","the","the","the","a"]},{"Key":"don't feel","Fragments":["strongly","like","that","that","too"]},{"Key":"feel strongly","Fragments":["about","about"]},{"Key":"strongly about","Fragments":["it,","it?","that."]},{"Key":"had to","Fragments":["read","add","come","add","work","process","duplicate","be","write","dig","modify","resort","inline","close","use","be","sort","use","keep","call","double","peek","write"]},{"Key":"the fn","Fragments":["body","shorthand","and","for"]},{"Key":"fn body","Fragments":["to"]},{"Key":"body to","Fragments":["see"]},{"Key":"what it","Fragments":["was","looks","should","is.","*means*?","is","represents?","is","says","actually","does","meant","is","is","is","gives","is!","means","did;"]},{"Key":"was doing.","Fragments":["From"]},{"Key":"doing. From","Fragments":["the"]},{"Key":"From the","Fragments":["name,","docs,"]},{"Key":"the name,","Fragments":["I","you","so"]},{"Key":"name, I","Fragments":["thought"]},{"Key":"thought it","Fragments":["might","was","was","might","was","was","was","was","should"]},{"Key":"doing `(count","Fragments":["word)`"]},{"Key":"`(count word)`","Fragments":["or"]},{"Key":"word)` or","Fragments":["`(count"]},{"Key":"or `(count","Fragments":["(distinct"]},{"Key":"`(count (distinct","Fragments":["word))`."]},{"Key":" `use`","Fragments":["is","is","is","is"]},{"Key":"`use` is","Fragments":["deprecated.","considered","deprecated.","deprecated","generally","deprecated.","generally","used","deprecated","idiomatically"]},{"Key":"is deprecated.","Fragments":["Please","Please","Use","For"]},{"Key":"deprecated. Please","Fragments":["use","use"]},{"Key":"Please use","Fragments":["`require`","`require`","lowercase,","`:require`"]},{"Key":"use `require`","Fragments":["instead.","the","instead.","instead.","without"]},{"Key":" Adding","Fragments":["some"]},{"Key":"Adding some","Fragments":["private"]},{"Key":"functions sounds","Fragments":["fine."]},{"Key":"disagree about","Fragments":["regex."]},{"Key":"about regex.","Fragments":["Nothing"]},{"Key":"regex. Nothing","Fragments":["says"]},{"Key":"Nothing says","Fragments":["\"does"]},{"Key":"says \"does","Fragments":["this"]},{"Key":"\"does this","Fragments":["string"]},{"Key":"this string","Fragments":["have"]},{"Key":"string have","Fragments":["lowercase"]},{"Key":"have lowercase","Fragments":["characters?\""]},{"Key":"lowercase characters?\"","Fragments":["better"]},{"Key":"characters?\" better","Fragments":["than"]},{"Key":"went back","Fragments":["and","and"]},{"Key":"and forth,","Fragments":["and"]},{"Key":"forth, and","Fragments":["eventually"]},{"Key":"and eventually","Fragments":["decided","I"]},{"Key":"eventually decided","Fragments":["that"]},{"Key":"decided that","Fragments":["the","I","I","you","would"]},{"Key":"more domain-specific","Fragments":["term","(gene,"]},{"Key":"domain-specific term","Fragments":["was"]},{"Key":"term was","Fragments":["better."]},{"Key":"was better.","Fragments":["`(frequencies"]},{"Key":"better. `(frequencies","Fragments":["word)`"]},{"Key":"`(frequencies word)`","Fragments":["makes"]},{"Key":"word)` makes","Fragments":["me"]},{"Key":"makes me","Fragments":["have","smile","think"]},{"Key":"me have","Fragments":["to","to","functions"]},{"Key":"to stop","Fragments":["and","using","over","repeatedly"]},{"Key":"stop and","Fragments":["think"]},{"Key":"and think","Fragments":["for"]},{"Key":"little while,","Fragments":["while"]},{"Key":"while, while","Fragments":["`letter-count`"]},{"Key":"while `letter-count`","Fragments":["tells"]},{"Key":"`letter-count` tells","Fragments":["me"]},{"Key":"tells me","Fragments":["specifically"]},{"Key":"me specifically","Fragments":["what's"]},{"Key":"specifically what's","Fragments":["going"]},{"Key":"going on.","Fragments":["That","I"]},{"Key":"on. That","Fragments":["said,"]},{"Key":"said, the","Fragments":["downside"]},{"Key":"the downside","Fragments":["is"]},{"Key":"downside is","Fragments":["another","the"]},{"Key":"is another","Fragments":["layer","go"]},{"Key":"another layer","Fragments":["of"]},{"Key":"could go","Fragments":["either","either","either","at","to"]},{"Key":"go either","Fragments":["way","way","way"]},{"Key":"way still.","Fragments":["Do"]},{"Key":"still. Do","Fragments":["you"]},{"Key":"you feel","Fragments":["strongly","that","any","about","are","about","about"]},{"Key":" Using","Fragments":["a","regex","`letfn`","a","defn","more","a","a","`letfn`","blank?","`let`","hash-set","`cond`","`GregorianCalendar`","a","the","regular","Exercism","`nil`","`last`","the"]},{"Key":"Using a","Fragments":["regexp","sort","set","consistent","let","map","blackbox"]},{"Key":"a regexp","Fragments":["may","that","for","search-replace","which"]},{"Key":"regexp may","Fragments":["be"]},{"Key":"be overkill","Fragments":["here,",",","for"]},{"Key":"overkill here,","Fragments":["`(="]},{"Key":"here, `(=","Fragments":["\\?"]},{"Key":"(last content))`","Fragments":["is"]},{"Key":"content))` is","Fragments":["probably"]},{"Key":"probably faster","Fragments":["and"]},{"Key":"faster and","Fragments":["a","you","makes"]},{"Key":"more in","Fragments":["the","the"]},{"Key":"the functional","Fragments":["style","paradigm"]},{"Key":"functional style","Fragments":["if"]},{"Key":"style if","Fragments":["you"]},{"Key":"you ask","Fragments":["me"]},{"Key":"ask me","Fragments":[":)"]},{"Key":" `let`","Fragments":["form","body","form"]},{"Key":"is slightly","Fragments":["misaligned","better"]},{"Key":"slightly misaligned","Fragments":["—"]},{"Key":"misaligned —","Fragments":["you"]},{"Key":"— you","Fragments":["should"]},{"Key":"should put","Fragments":["first","the"]},{"Key":"put first","Fragments":["pair"]},{"Key":"first pair","Fragments":["after"]},{"Key":"pair after","Fragments":["the"]},{"Key":"after the","Fragments":["opening","last","\"Go","opening","more","test","function","`cond`,","definition","arguments","parameter;","use","new","fact","feedback","(ns","bindings,","Read","question","fact.","refactor."]},{"Key":"the opening","Fragments":["`[`","one,","parens?","paren","paren"]},{"Key":"opening `[`","Fragments":["and"]},{"Key":"`[` and","Fragments":["move"]},{"Key":"move `]`","Fragments":["after"]},{"Key":"`]` after","Fragments":["the"]},{"Key":"Otherwise it’s","Fragments":["a"]},{"Key":"it’s a","Fragments":["pretty"]},{"Key":"pretty nice","Fragments":["solution."]},{"Key":"feedback. This","Fragments":["was"]},{"Key":"This was","Fragments":["my","the","a","a","a","probably","straightforward","a","much","very"]},{"Key":"my very","Fragments":["first","first","first","first","first"]},{"Key":"first Clojure","Fragments":["program,","functions,","I've","code...","code.","code,","(though","hack","code.","code.","I've","program.","programs.","I've"]},{"Key":"Clojure program,","Fragments":["mainly"]},{"Key":"program, mainly","Fragments":["based"]},{"Key":"mainly based","Fragments":["on"]},{"Key":"my knowledge","Fragments":["of","of","of"]},{"Key":"of 1986","Fragments":["Scheme"]},{"Key":"1986 Scheme","Fragments":["and"]},{"Key":"Scheme and","Fragments":["Java."]},{"Key":"and Java.","Fragments":[";)"]},{"Key":"version which","Fragments":["I"]},{"Key":"hope is","Fragments":["a"]},{"Key":"tried that","Fragments":["but"]},{"Key":"that but","Fragments":["it","then","I","it","it","it","looking"]},{"Key":"didn't work","Fragments":["before.","the"]},{"Key":"work before.","Fragments":["Must"]},{"Key":"before. Must","Fragments":["have"]},{"Key":"Must have","Fragments":["had"]},{"Key":"have had","Fragments":["a","clearly","all","no"]},{"Key":"had a","Fragments":["misspelling","collection","feeling","`swap`","similar","replace","look","lot","lot","look"]},{"Key":"a misspelling","Fragments":["cause"]},{"Key":"misspelling cause","Fragments":["now"]},{"Key":"cause now","Fragments":["it"]},{"Key":"now it","Fragments":["works...","looks","looks"]},{"Key":"Hey, it's","Fragments":["been"]},{"Key":"it's been","Fragments":["noted","an"]},{"Key":"been noted","Fragments":["before"]},{"Key":"noted before","Fragments":["but"]},{"Key":"before but","Fragments":["in"]},{"Key":"in lisp","Fragments":["it's","for"]},{"Key":"lisp it's","Fragments":["weird"]},{"Key":"it's weird","Fragments":["to"]},{"Key":"weird to","Fragments":["have","me","me."]},{"Key":"the trailing","Fragments":["parens","')'"]},{"Key":"trailing parens","Fragments":["on"]},{"Key":"own line.","Fragments":["You","Hyphen","Indentation","Although","In"]},{"Key":"line. You","Fragments":["can"]},{"Key":"just have","Fragments":["all","the","the","a"]},{"Key":"have all","Fragments":["the"]},{"Key":"closing parens","Fragments":["together.","together.","on","inline,","on","there.","on","on","with"]},{"Key":"parens together.","Fragments":["Otherwise"]},{"Key":"together. Otherwise","Fragments":["this"]},{"Key":"can map","Fragments":["`TO-RNA`"]},{"Key":"map `TO-RNA`","Fragments":["onto"]},{"Key":"`TO-RNA` onto","Fragments":["the"]},{"Key":"onto the","Fragments":["dna","next","same"]},{"Key":"the dna","Fragments":["without","strand.","strand","strings","string"]},{"Key":"dna without","Fragments":["the"]},{"Key":"the translate-nucleotide","Fragments":["function,"]},{"Key":"translate-nucleotide function,","Fragments":["since"]},{"Key":"function, since","Fragments":["maps","I","the","splitting"]},{"Key":"since maps","Fragments":["can"]},{"Key":"maps can","Fragments":["be","be","be"]},{"Key":"used as","Fragments":["functions","functions?","the","functions,","a","functions,","a","functions.","a","functions","a","functions.","functions","functions:","functions"]},{"Key":"as functions","Fragments":["in","for","is","is","is","in","which","that","and","in","in"]},{"Key":"Nice use","Fragments":["of","of","of","of","of","of","of","of","of"]},{"Key":"Does wrapping","Fragments":["`frequencies`"]},{"Key":"wrapping `frequencies`","Fragments":["in"]},{"Key":"`frequencies` in","Fragments":["`letter-count`","the","a","the"]},{"Key":"in `letter-count`","Fragments":["really"]},{"Key":"`letter-count` really","Fragments":["buy"]},{"Key":"really buy","Fragments":["you"]},{"Key":"buy you","Fragments":["anything?"]},{"Key":"you anything?","Fragments":["IMO,"]},{"Key":"anything? IMO,","Fragments":["`frequencies`"]},{"Key":"IMO, `frequencies`","Fragments":["is"]},{"Key":"`frequencies` is","Fragments":["more","a","just","even","very"]},{"Key":"was actually","Fragments":["wondering","thinking","much","converting","all-caps"]},{"Key":"actually wondering","Fragments":["about"]},{"Key":"wondering about","Fragments":["that,","the","the"]},{"Key":"about that,","Fragments":["as","it's","I","or","thanks!"]},{"Key":"that, as","Fragments":["I"]},{"Key":"as I","Fragments":["didn't","might","started","said","didn't","think","thought","was","would","have","didn't","hate","was","have","am","haven't","was"]},{"Key":"like `string/blank?`,","Fragments":["and"]},{"Key":"`string/blank?`, and","Fragments":["would"]},{"Key":"and would","Fragments":["much","like","be"]},{"Key":"would much","Fragments":["rather"]},{"Key":"much rather","Fragments":["have"]},{"Key":"rather have","Fragments":["just","a","the"]},{"Key":"have just","Fragments":["used","used","(re)learned","used","realized","gone","one"]},{"Key":"just used","Fragments":["`blank?`.","a","a","`re-seq`","a"]},{"Key":"used `blank?`.","Fragments":["How"]},{"Key":"`blank?`. How","Fragments":["about"]},{"Key":"about doing","Fragments":["the"]},{"Key":"doing the","Fragments":["same","extra","same","exercises","ruby","exercise","re-match",":pre","same","assertion"]},{"Key":"same with","Fragments":["`upper-case`?","input_string"]},{"Key":"with `upper-case`?","Fragments":["I'll"]},{"Key":"`upper-case`? I'll","Fragments":["make"]},{"Key":"I'll make","Fragments":["that","that","it"]},{"Key":"that change","Fragments":["as","with"]},{"Key":"change as","Fragments":["well,"]},{"Key":"if anyone","Fragments":["has","thinks","really"]},{"Key":"anyone has","Fragments":["further","some","a"]},{"Key":"has further","Fragments":["nits"]},{"Key":"further nits","Fragments":["to"]},{"Key":"nits to","Fragments":["pick.","pick","pick","pick,"]},{"Key":"that, it's","Fragments":["actually"]},{"Key":"it's actually","Fragments":["`:use","doing?"]},{"Key":"actually `:use","Fragments":["[clojure.string"]},{"Key":"`:use [clojure.string","Fragments":[":only"]},{"Key":"the guard","Fragments":["before"]},{"Key":"guard before","Fragments":["`string/replace`,"]},{"Key":"before `string/replace`,","Fragments":["I'll"]},{"Key":"`string/replace`, I'll","Fragments":["iterate"]},{"Key":"I'll iterate","Fragments":["on"]},{"Key":"iterate on","Fragments":["this"]},{"Key":"this with","Fragments":["your","group-by","reduce-kv","a","`sort`","`reduce-kv`","list","clojure.string","regular"]},{"Key":"with your","Fragments":["feedback.","sight","riddles!","brackets?","`nucleotides`","advise.","suggestions.","to-rna","AssertionError.","code:","comment","opinion","original"]},{"Key":"* You","Fragments":["are","could","might","yelling?","can"]},{"Key":"You are","Fragments":["right.","totally","absolutely","right!","operating","right,","right!","writing","missed,","allocating","right"]},{"Key":"are right.","Fragments":["they","It"]},{"Key":"right. they","Fragments":["really"]},{"Key":"they really","Fragments":["should","need"]},{"Key":"really should","Fragments":["be","be."]},{"Key":"* Thanks.","Fragments":["I"]},{"Key":"I overlooked","Fragments":["the","for"]},{"Key":"overlooked the","Fragments":["extra"]},{"Key":"Also, now","Fragments":["that"]},{"Key":"now that","Fragments":["I"]},{"Key":"I look,","Fragments":["I"]},{"Key":"look, I","Fragments":["would"]},{"Key":"probably also","Fragments":["bring","split"]},{"Key":"also bring","Fragments":["those"]},{"Key":"bring those","Fragments":["trailing"]},{"Key":"those trailing","Fragments":["parenthesis"]},{"Key":"parenthesis up.","Fragments":["It's"]},{"Key":"up. It's","Fragments":["syntactically"]},{"Key":"It's syntactically","Fragments":["idiomatic"]},{"Key":"syntactically idiomatic","Fragments":["to"]},{"Key":"put parens","Fragments":["with"]},{"Key":"parens with","Fragments":["the","whitespace,","the"]},{"Key":"code on","Fragments":["a","Clojure.","here?","github](https://github.com/arnab/exercism/commits/master/clojure/beer-song/beer.clj)"]},{"Key":"I'm nominating","Fragments":["this"]},{"Key":"nominating this","Fragments":["for"]},{"Key":"It's only","Fragments":["a","one"]},{"Key":"only a","Fragments":["matter","toy","difference","few","single","couple","single"]},{"Key":"of taste,","Fragments":["but","there's","and"]},{"Key":"taste, but","Fragments":["I"]},{"Key":"those predicate","Fragments":["functions"]},{"Key":"predicate functions","Fragments":["private","being","are","instead","as","(those","to","more","in"]},{"Key":"with `defn-`","Fragments":["over","(assuming"]},{"Key":"`defn-` over","Fragments":["`defn`."]},{"Key":" Getting:","Fragments":["`Exception"]},{"Key":"Getting: `Exception","Fragments":["in"]},{"Key":"`Exception in","Fragments":["thread"]},{"Key":"in thread","Fragments":["\"main\""]},{"Key":"thread \"main\"","Fragments":["java.lang.Exception:"]},{"Key":"\"main\" java.lang.Exception:","Fragments":["Unsupported"]},{"Key":"java.lang.Exception: Unsupported","Fragments":["option(s)"]},{"Key":"Unsupported option(s)","Fragments":["supplied:"]},{"Key":"option(s) supplied:","Fragments":[":only`"]},{"Key":"supplied: :only`","Fragments":["when"]},{"Key":":only` when","Fragments":["I"]},{"Key":"that line.","Fragments":["I'm"]},{"Key":"just change","Fragments":["the"]},{"Key":"the true","Fragments":["to","serial","branch,"]},{"Key":"true to","Fragments":[":else","what"]},{"Key":"to :else","Fragments":["and"]},{"Key":":else and","Fragments":["resubmit."]},{"Key":"Since you're","Fragments":["using","only","always","already"]},{"Key":"a `string/replace`,","Fragments":["I"]},{"Key":"`string/replace`, I","Fragments":["don't"]},{"Key":"think there's","Fragments":["any","any","a","a","a","a"]},{"Key":"there's any","Fragments":["need","way","sort"]},{"Key":"any need","Fragments":["to"]},{"Key":"to guard","Fragments":["against","against"]},{"Key":"guard against","Fragments":["the","'!',"]},{"Key":"string not","Fragments":["having"]},{"Key":"not having","Fragments":["a","the","to","a","used","variables,","a"]},{"Key":"a \"T\".","Fragments":["In"]},{"Key":"\"T\". In","Fragments":["other"]},{"Key":"other words,","Fragments":["I","without","that's","consider"]},{"Key":"words, I","Fragments":["think"]},{"Key":"conditional and","Fragments":["the"]},{"Key":"the `thyidine?`","Fragments":["private"]},{"Key":"`thyidine?` private","Fragments":["are"]},{"Key":"private are","Fragments":["unnecessary."]},{"Key":"Also, some","Fragments":["food"]},{"Key":"some food","Fragments":["for"]},{"Key":"food for","Fragments":["thought:"]},{"Key":"for thought:","Fragments":["is"]},{"Key":"thought: is","Fragments":["it"]},{"Key":"is it","Fragments":["possible","necessary","really","considered","preferred","idiomatic?","Unicode-aware?","a","as","possible","as","worth","possible","better"]},{"Key":"it possible","Fragments":["to","to","to","to","to","to"]},{"Key":"to solve","Fragments":["this","the","the","this","this","the","the","this.","`silence`:","the","the","problems.","that","for"]},{"Key":"solve this","Fragments":["*without*","exercise,","without"]},{"Key":"this *without*","Fragments":["using","the"]},{"Key":"*without* using","Fragments":["string"]},{"Key":"using string","Fragments":["replacement"]},{"Key":"string replacement","Fragments":["or","to","for","functions"]},{"Key":"replacement or","Fragments":["regular"]},{"Key":"or regular","Fragments":["expressions?","expressions?"]},{"Key":"regular expressions?","Fragments":["That","For"]},{"Key":"expressions? That","Fragments":["is,"]},{"Key":"That is,","Fragments":["can"]},{"Key":"is, can","Fragments":["it"]},{"Key":"can it","Fragments":["be"]},{"Key":"done without","Fragments":["`clojure.string`"]},{"Key":"without `clojure.string`","Fragments":["or"]},{"Key":"`clojure.string` or","Fragments":["regular"]},{"Key":"good. +1","Fragments":["for"]},{"Key":"+1 for","Fragments":["`taciturn?`.","the","if-let","combining","the","the","something","`memoize`!","line","the","character","list","the"]},{"Key":" Honestly","Fragments":["it"]},{"Key":"Honestly it","Fragments":["looks"]},{"Key":"good other","Fragments":["than"]},{"Key":"other than","Fragments":["what","reading","that,","the","that","that."]},{"Key":"I mentioned.","Fragments":["The"]},{"Key":"mentioned. The","Fragments":["only"]},{"Key":"only other","Fragments":["thing","Lisp","thing","possible"]},{"Key":"other thing","Fragments":["is","I","is","you","that","that","is,"]},{"Key":"thing is","Fragments":["(and","not","the","about","questionable","the","that","that","that","simpler"]},{"Key":"is (and","Fragments":["this"]},{"Key":"(and this","Fragments":["is"]},{"Key":"of preference)","Fragments":["you"]},{"Key":"preference) you","Fragments":["could"]},{"Key":"(:use [clojure.string]","Fragments":[":only"]},{"Key":"[clojure.string] :only","Fragments":["[blank?]))"]},{"Key":" instead","Fragments":["of","of","of","of"]},{"Key":"the `require`,","Fragments":["that"]},{"Key":"`require`, that","Fragments":["way"]},{"Key":"that way","Fragments":["you","you","of","because","a","it's","with"]},{"Key":"use `blank?`","Fragments":["directly.","instead"]},{"Key":"`blank?` directly.","Fragments":["Again,"]},{"Key":"directly. Again,","Fragments":["that's"]},{"Key":"Again, that's","Fragments":["just"]},{"Key":"just preference,","Fragments":["you"]},{"Key":"preference, you","Fragments":["may"]},{"Key":"may well","Fragments":["want","have"]},{"Key":"well want","Fragments":["to"]},{"Key":"be explicit","Fragments":["about","in"]},{"Key":"namespace of","Fragments":["that"]},{"Key":"Ok, I'll","Fragments":["make"]},{"Key":"actually the","Fragments":["first","same,"]},{"Key":"have ever","Fragments":["written","written.)"]},{"Key":"ever written","Fragments":["in"]},{"Key":"written in","Fragments":["Clojure,","a","the","a"]},{"Key":"in Clojure,","Fragments":["do","so","as","would","I","but","where","so","but","I'd","strings","so","but"]},{"Key":"Clojure, do","Fragments":["you"]},{"Key":"any additional","Fragments":["feedback?","context"]},{"Key":"additional feedback?","Fragments":["I"]},{"Key":"feedback? I","Fragments":["was"]},{"Key":"thinking about","Fragments":["pulling","closures","how","the","something","using","a","the","making","\"cleaning"]},{"Key":"about pulling","Fragments":["out","it"]},{"Key":"tests and","Fragments":["making","this"]},{"Key":"and making","Fragments":["them","the","a"]},{"Key":"them separate","Fragments":["functions."]},{"Key":"say is","Fragments":["that","\"if","that"]},{"Key":"use `foo?`","Fragments":["for"]},{"Key":"`foo?` for","Fragments":["predicate"]},{"Key":"for predicate","Fragments":["functions.","var"]},{"Key":"predicate functions.","Fragments":["I"]},{"Key":"would replace","Fragments":["`is_foo`","the","count-words.","the"]},{"Key":"replace `is_foo`","Fragments":["with"]},{"Key":"`is_foo` with","Fragments":["`foo?`."]},{"Key":"with `foo?`.","Fragments":["Also,"]},{"Key":"`foo?`. Also,","Fragments":["it's"]},{"Key":"idiomatic clojure","Fragments":["to","since","but","to"]},{"Key":"clojure to","Fragments":["use","':require","end","use"]},{"Key":"use `-`","Fragments":["instead","as"]},{"Key":"`-` instead","Fragments":["of"]},{"Key":"This definitely","Fragments":["works.","falls"]},{"Key":"definitely works.","Fragments":["You"]},{"Key":"works. You","Fragments":["can"]},{"Key":"can often","Fragments":["bend"]},{"Key":"often bend","Fragments":["Regular"]},{"Key":"bend Regular","Fragments":["expressions"]},{"Key":"Regular expressions","Fragments":["to"]},{"Key":"do just","Fragments":["about","with","that,"]},{"Key":"just about","Fragments":["anything","perfect"]},{"Key":"about anything","Fragments":["to"]},{"Key":"anything to","Fragments":["strings.","do"]},{"Key":"do accomplish","Fragments":["this"]},{"Key":"accomplish this","Fragments":["*without*"]},{"Key":"*without* the","Fragments":["use"]},{"Key":"of regular","Fragments":["expressions?","expressions","expressions.","expressions"]},{"Key":"Yup, sorry","Fragments":["about"]},{"Key":"sorry about","Fragments":["that."]},{"Key":"about that.","Fragments":["My","But","Everything"]},{"Key":"that. My","Fragments":["test"]},{"Key":"My test","Fragments":["cases"]},{"Key":"cases must","Fragments":["be"]},{"Key":"be out","Fragments":["of"]},{"Key":"nice. However,","Fragments":["I"]},{"Key":"suggest you","Fragments":["use","rename","memoize","look"]},{"Key":"the native","Fragments":["Clojure"]},{"Key":"Clojure functions,","Fragments":["rather","please","the"]},{"Key":"functions, rather","Fragments":["than"]},{"Key":"Java methods.","Fragments":["I","Here"]},{"Key":"methods. I","Fragments":["don't","don't"]},{"Key":"don't believe","Fragments":["there's","the","it"]},{"Key":"believe there's","Fragments":["much"]},{"Key":"there's much","Fragments":["difference,"]},{"Key":"much difference,","Fragments":["but"]},{"Key":"feel reluctant","Fragments":["to"]},{"Key":"reluctant to","Fragments":["dip"]},{"Key":"to dip","Fragments":["into"]},{"Key":"dip into","Fragments":["the"]},{"Key":"Java well","Fragments":["unless"]},{"Key":"well unless","Fragments":["absolutely"]},{"Key":"unless absolutely","Fragments":["necessary"]},{"Key":"the various","Fragments":["predicate","bindings","regex","ways","(defn)s","xxx-nday","responses"]},{"Key":"various predicate","Fragments":["functions"]},{"Key":"functions being","Fragments":["made","a"]},{"Key":"being made","Fragments":["private?","private,"]},{"Key":"(defn- question?","Fragments":["...","[utterance]"]},{"Key":"Thanks @richmond,","Fragments":["enjoy"]},{"Key":"@richmond, enjoy","Fragments":["the"]},{"Key":"enjoy the","Fragments":["vacation"]},{"Key":"the vacation","Fragments":["and"]},{"Key":"vacation and","Fragments":["thanks","I'm"]},{"Key":"and thanks","Fragments":["for","for"]},{"Key":"work you","Fragments":["do"]},{"Key":"do on","Fragments":["this","line"]},{"Key":"this site.","Fragments":["It"]},{"Key":"site. It","Fragments":["is"]},{"Key":"seem as","Fragments":["much"]},{"Key":"much like","Fragments":["language","the","the","the","idiomatic","yours","use."]},{"Key":"like language","Fragments":["from"]},{"Key":"(how a","Fragments":["teenager"]},{"Key":"a teenager","Fragments":["thinks"]},{"Key":"teenager thinks","Fragments":["about"]},{"Key":"thinks about","Fragments":["something"]},{"Key":"about something","Fragments":["someone","along"]},{"Key":"something someone","Fragments":["said)"]},{"Key":"someone said)","Fragments":["as"]},{"Key":"said) as","Fragments":["the"]},{"Key":" No.","Fragments":["I"]},{"Key":"No. I","Fragments":["have"]},{"Key":"have not.","Fragments":["I"]},{"Key":"not. I","Fragments":["will"]},{"Key":"will take","Fragments":["a","your","care","a"]},{"Key":"Thanks! Those","Fragments":["are"]},{"Key":"Those are","Fragments":["both","all","always","great","the"]},{"Key":"are both","Fragments":["game","this","`(some","\"falsey\""]},{"Key":"both game","Fragments":["changers."]},{"Key":" normalize","Fragments":["is"]},{"Key":"normalize is","Fragments":["a"]},{"Key":"name than","Fragments":["hasher,","\"input\"","\u003ccode\u003estr\u003c/code\u003e"]},{"Key":"than hasher,","Fragments":["this"]},{"Key":"hasher, this","Fragments":["is"]},{"Key":" Interesting,","Fragments":["I"]},{"Key":"Interesting, I","Fragments":["was"]},{"Key":"actually thinking","Fragments":["of"]},{"Key":"thinking of","Fragments":["using","`frequencies`"]},{"Key":"the -\u0026gt;","Fragments":["macro"]},{"Key":"-\u0026gt; macro","Fragments":["in"]},{"Key":"macro in","Fragments":["the","preference","this","the"]},{"Key":"the word-count","Fragments":["function,","function.","function"]},{"Key":"word-count function,","Fragments":["including"]},{"Key":"function, including","Fragments":["moving"]},{"Key":"including moving","Fragments":["the"]},{"Key":"the lower","Fragments":["case","boundary"]},{"Key":"lower case","Fragments":["down","it.","the","letters.","you","using","characters","characters.","from","characters,"]},{"Key":"case down","Fragments":["there."]},{"Key":"hear if","Fragments":["you","anyone"]},{"Key":"better or","Fragments":["worse","worse.","worse","not,"]},{"Key":"or worse","Fragments":["approach.","solution,"]},{"Key":"of re-seq.","Fragments":["Would","I"]},{"Key":"re-seq. Would","Fragments":["a"]},{"Key":"Would a","Fragments":["threading"]},{"Key":"a threading","Fragments":["arrow","macro","`-\u003e`","macro","macro"]},{"Key":"threading arrow","Fragments":["and"]},{"Key":"arrow and","Fragments":["some"]},{"Key":"some rearranging","Fragments":["of"]},{"Key":"rearranging of","Fragments":["lower-case"]},{"Key":"of lower-case","Fragments":["clean"]},{"Key":"lower-case clean","Fragments":["this"]},{"Key":"clean this","Fragments":["up","code"]},{"Key":"this up","Fragments":["at","without","as"]},{"Key":"up at","Fragments":["all?"]},{"Key":"Looks great!","Fragments":["I","My","The","The"]},{"Key":"great! I","Fragments":["have"]},{"Key":"have absolutely","Fragments":["nothing"]},{"Key":"absolutely nothing","Fragments":["to"]},{"Key":"nothing to","Fragments":["nitpick.","_and_"]},{"Key":"Maybe :require/:refer","Fragments":["in"]},{"Key":":require/:refer in","Fragments":["ns"]},{"Key":"in ns","Fragments":["macro"]},{"Key":"of :use/:only?","Fragments":["I"]},{"Key":":use/:only? I","Fragments":["don't"]},{"Key":"know which","Fragments":["is","one","tasty"]},{"Key":"would consider","Fragments":["defining","refactoring","is"]},{"Key":"consider defining","Fragments":["vars"]},{"Key":"with revealing","Fragments":["names"]},{"Key":"names for","Fragments":["\"T\"","nucleotides","the","bindings","two","forms","those,","those?","\u003ccode\u003eyell?\u003c/code\u003e","the","your"]},{"Key":"\"U\" then","Fragments":["seeing"]},{"Key":"then seeing","Fragments":["how"]},{"Key":"seeing how","Fragments":["it","it"]},{"Key":"how it","Fragments":["reads.","worked.","is","works","felt.","works.","works.","looks.","would","could","would","could"]},{"Key":"Hmm, strip-leading-one?","Fragments":["was"]},{"Key":"strip-leading-one? was","Fragments":["meant"]},{"Key":"was meant","Fragments":["to"]},{"Key":"a non-public","Fragments":["def"]},{"Key":"non-public def","Fragments":["too..."]},{"Key":"think using","Fragments":["the","\"frequencies\"","the","actual","`anagram?`","a"]},{"Key":"variable `s`","Fragments":["is","in"]},{"Key":"`s` is","Fragments":["idiomatic","a"]},{"Key":"is idiomatic","Fragments":["clojure","to","in","or","clojure,","clojure","clojure,","to"]},{"Key":"clojure since","Fragments":["it's"]},{"Key":"it's the","Fragments":["primary","only","type","best","perfect","only","first"]},{"Key":"primary argument","Fragments":["and"]},{"Key":"and reused","Fragments":["many"]},{"Key":"reused many","Fragments":["times"]},{"Key":"many times","Fragments":["throughout."]},{"Key":"times throughout.","Fragments":["When"]},{"Key":"throughout. When","Fragments":["I"]},{"Key":"of coding","Fragments":["guidelines,"]},{"Key":"coding guidelines,","Fragments":["I"]},{"Key":"guidelines, I","Fragments":["typically"]},{"Key":"I typically","Fragments":["turn"]},{"Key":"typically turn","Fragments":["to"]},{"Key":"turn to","Fragments":["`clojure.core`","a"]},{"Key":"to `clojure.core`","Fragments":["or"]},{"Key":"`clojure.core` or","Fragments":["one"]},{"Key":"or one","Fragments":["of","if"]},{"Key":"primary library","Fragments":["authors."]},{"Key":"- That","Fragments":["said,"]},{"Key":"said, overloading","Fragments":["the"]},{"Key":"overloading the","Fragments":["variable"]},{"Key":"`s` in","Fragments":["`letfn`","each"]},{"Key":"in `letfn`","Fragments":["was"]},{"Key":"`letfn` was","Fragments":["probably"]},{"Key":"was probably","Fragments":["bad","easier","the"]},{"Key":"probably bad","Fragments":["form,"]},{"Key":"bad form,","Fragments":["and"]},{"Key":"form, and","Fragments":["I"]},{"Key":"should have","Fragments":["just","a","pointed","them","them","to.","been","more","not","at","looked","mentioned","also","assumed","looked","written"]},{"Key":"used a","Fragments":["`let`","single","composition","case","map","map","`ref`","few","threading","regexp","regular","regex","`reduce`"]},{"Key":"`let` with","Fragments":["anonymous","[`letfn`](http://clojuredocs.org/clojure_core/clojure.core/letfn)"]},{"Key":"with anonymous","Fragments":["functions"]},{"Key":"anonymous functions","Fragments":["instead","seemed","with","than"]},{"Key":"instead to","Fragments":["be"]},{"Key":"clear in","Fragments":["my","my"]},{"Key":"my intent,","Fragments":["but"]},{"Key":"not think","Fragments":["this","of","string"]},{"Key":"this alone","Fragments":["would"]},{"Key":"alone would","Fragments":["satisfy"]},{"Key":"would satisfy","Fragments":["@dale's"]},{"Key":"satisfy @dale's","Fragments":["personal"]},{"Key":"@dale's personal","Fragments":["style"]},{"Key":"personal style","Fragments":["guidelines."]},{"Key":"very readable","Fragments":["including","and"]},{"Key":"readable including","Fragments":["`empty?`"]},{"Key":"curious how","Fragments":["well"]},{"Key":"how well","Fragments":["exercism","the"]},{"Key":"well exercism","Fragments":["goes"]},{"Key":"exercism goes","Fragments":["given"]},{"Key":"goes given","Fragments":["a"]},{"Key":"given a","Fragments":["non-insanely-trivial","function"]},{"Key":"a non-insanely-trivial","Fragments":["example"]},{"Key":"non-insanely-trivial example","Fragments":["and"]},{"Key":"example and","Fragments":["the","reply","explanation","the"]},{"Key":"only remaining","Fragments":["nitpicks"]},{"Key":"remaining nitpicks","Fragments":["are"]},{"Key":"nitpicks are","Fragments":["stylistic","welcome."]},{"Key":"are stylistic","Fragments":["ones"]},{"Key":"stylistic ones","Fragments":["which"]},{"Key":"ones which","Fragments":["could"]},{"Key":"which could","Fragments":["go","accept","be","shorten"]},{"Key":"way (and","Fragments":["please"]},{"Key":"(and please","Fragments":["remember,"]},{"Key":"please remember,","Fragments":["Clojure"]},{"Key":"remember, Clojure","Fragments":["is"]},{"Key":"If I'm","Fragments":["barred"]},{"Key":"I'm barred","Fragments":["from"]},{"Key":"barred from","Fragments":["continuing"]},{"Key":"from continuing","Fragments":["over"]},{"Key":"continuing over","Fragments":["this,"]},{"Key":"over this,","Fragments":["then"]},{"Key":"this, then","Fragments":["I","I'll"]},{"Key":"can certainly","Fragments":["add"]},{"Key":"certainly add","Fragments":["indirection"]},{"Key":"add indirection","Fragments":["to"]},{"Key":"indirection to","Fragments":["my"]},{"Key":"my function","Fragments":["by","calls","variables","where"]},{"Key":"function by","Fragments":["making","using","pre-applying","choosing","using"]},{"Key":"reader scan","Fragments":["the"]},{"Key":"scan the","Fragments":["source"]},{"Key":"the source","Fragments":["file","file/system?","for","text","file.","file","of"]},{"Key":"source file","Fragments":["for","via"]},{"Key":"file for","Fragments":["what's"]},{"Key":"for what's","Fragments":["going","in"]},{"Key":"going on,","Fragments":["but","but"]},{"Key":"on, but","Fragments":["I","have","you"]},{"Key":"very hesitant","Fragments":["to"]},{"Key":"hesitant to","Fragments":["do"]},{"Key":"do that","Fragments":["given","at","refactoring","sort","but","-","instead","already","by","once,"]},{"Key":"that given","Fragments":["the"]},{"Key":"the simplicity","Fragments":["of","of","of","of"]},{"Key":"simplicity of","Fragments":["the","the","the","your","what's","`(filter"]},{"Key":"other words:","Fragments":["please"]},{"Key":"words: please","Fragments":["ignore"]},{"Key":"please ignore","Fragments":[":)"]},{"Key":"Sure, you","Fragments":["could"]},{"Key":"could directly","Fragments":["map"]},{"Key":"directly map","Fragments":["the","the"]},{"Key":"map the","Fragments":["regexes","predicates","\"letters\"","dna","\"=\""]},{"Key":"the regexes","Fragments":["to","though.","since"]},{"Key":"the responses,","Fragments":["but","but"]},{"Key":"responses, but","Fragments":["the","I'd","then"]},{"Key":"the layer","Fragments":["of"]},{"Key":"of abstraction","Fragments":["provided","than","is","putting","inside","that","and","right","would","lower.","they","pretty","and"]},{"Key":"abstraction provided","Fragments":["by"]},{"Key":"provided by","Fragments":["the","[clojure.string](http://clojure.github.io/clojure/clojure.string-api.html)"]},{"Key":"the keywords","Fragments":["clarifies","are","\"dna\","]},{"Key":"keywords clarifies","Fragments":["the"]},{"Key":"clarifies the","Fragments":["code,"]},{"Key":"code, to","Fragments":["my"]},{"Key":"my eye.","Fragments":["Further,"]},{"Key":"eye. Further,","Fragments":["it"]},{"Key":"Further, it","Fragments":["allows"]},{"Key":"it allows","Fragments":["the","you"]},{"Key":"allows the","Fragments":["statement","response-for"]},{"Key":"responses to","Fragments":["change","handle"]},{"Key":"that predicate","Fragments":["functions"]},{"Key":"probably a","Fragments":["better","good","bikeshed","cleaner","better","way","better","good","bad","bit","more","more"]},{"Key":"better choice","Fragments":["for","here.","although","too,","here.","for"]},{"Key":"choice for","Fragments":["mapping","detecting"]},{"Key":"for mapping","Fragments":["statements"]},{"Key":"mapping statements","Fragments":["to"]},{"Key":"statements to","Fragments":["types;"]},{"Key":"to types;","Fragments":["if"]},{"Key":"types; if","Fragments":["someone"]},{"Key":"someone had","Fragments":["to"]},{"Key":"to add","Fragments":["a","`if","is","more","another","an","docstrings","another","another","(:require","a","steps","one.","one,","a","new","a"]},{"Key":"add a","Fragments":["new","pre","bit","bit","pupil","few","requirement","question","logic","lot","comment"]},{"Key":"new statement","Fragments":["pattern,"]},{"Key":"statement pattern,","Fragments":["it"]},{"Key":"pattern, it","Fragments":["wouldn't"]},{"Key":"be obvious","Fragments":["as","at"]},{"Key":"obvious as","Fragments":["expressed"]},{"Key":"as expressed","Fragments":["here"]},{"Key":"expressed here","Fragments":["what"]},{"Key":"here what","Fragments":["an"]},{"Key":"what an","Fragments":["exclamation","anagram","anagram"]},{"Key":"an exclamation","Fragments":["actually"]},{"Key":"exclamation actually","Fragments":["implied."]},{"Key":" 2","Fragments":["separate","things","failures,","\"...\""]},{"Key":"2 separate","Fragments":["ides:","expressions"]},{"Key":" There","Fragments":["is","is","is","are","isn't","handy","a","is","might","are","are","are","was","is","are","was","are","are","can't","are","is","is","is","are","are","is","are","are","are","are","are","is","is","are","is","is","must","is","is","is"]},{"Key":"of coupling","Fragments":["between"]},{"Key":"coupling between","Fragments":["the"]},{"Key":"the type-responses","Fragments":["and"]},{"Key":"type-responses and","Fragments":["the"]},{"Key":"the statement-types:","Fragments":["the"]},{"Key":"statement-types: the","Fragments":["keywords"]},{"Key":"keywords are","Fragments":["duplicated"]},{"Key":"are duplicated","Fragments":["between"]},{"Key":"duplicated between","Fragments":["them."]},{"Key":"between them.","Fragments":["Perhaps"]},{"Key":"them. Perhaps","Fragments":["you"]},{"Key":"could more","Fragments":["directly"]},{"Key":"more directly","Fragments":["map"]},{"Key":"predicates to","Fragments":["their","do","non-public","either","be","assert"]},{"Key":"to their","Fragments":["responses?","own"]},{"Key":"using an","Fragments":["ordered","initialized","explicit","`atom`","`ordered-set`"]},{"Key":"map with","Fragments":["`some`","a","only","zero"]},{"Key":"with `some`","Fragments":["to","and"]},{"Key":"`some` to","Fragments":["detect","see"]},{"Key":"to detect","Fragments":["the","a","a","the","changes"]},{"Key":"detect the","Fragments":["first","presence"]},{"Key":"first applicable","Fragments":["response."]},{"Key":"applicable response.","Fragments":["Could"]},{"Key":"response. Could","Fragments":["you"]},{"Key":"use predicate","Fragments":["functions","methods,","functions"]},{"Key":" Finding","Fragments":["a"]},{"Key":"Finding a","Fragments":["style"]},{"Key":"a style","Fragments":["guide","guide,","preference,","nitpick.","thing?","thing,"]},{"Key":"style guide","Fragments":["was","you","maintained","compiled","at","maintained","at","[1]."]},{"Key":"guide was","Fragments":["an"]},{"Key":"was an","Fragments":["ordeal.","odd","intentional","obvious","interesting"]},{"Key":"about creating","Fragments":["a","more","a"]},{"Key":"creating a","Fragments":["simple","global","method","frequency","function.","partial","new","map","mutable","helper","list"]},{"Key":"simple map","Fragments":["for"]},{"Key":"map for","Fragments":["it,","the"]},{"Key":"it, though","Fragments":["I"]},{"Key":"I finally","Fragments":["found","understood.","got","need","settled","figured","said"]},{"Key":"finally found","Fragments":["that"]},{"Key":"found that","Fragments":["handling","would","I","it","1","relying","it","I"]},{"Key":"that handling","Fragments":["str"]},{"Key":"handling str","Fragments":["mapping"]},{"Key":"str mapping","Fragments":["and"]},{"Key":"mapping and","Fragments":["error"]},{"Key":"and error","Fragments":["right"]},{"Key":"error right","Fragments":["from"]},{"Key":"right from","Fragments":["a","the"]},{"Key":"function would","Fragments":["be","be","be","return","then","look","be"]},{"Key":" Let","Fragments":["me"]},{"Key":"Let me","Fragments":["try","know"]},{"Key":"me try","Fragments":["to"]},{"Key":"push that","Fragments":["idea","DRY"]},{"Key":"that idea","Fragments":["again"]},{"Key":"idea again","Fragments":["though."]},{"Key":"point. Also,","Fragments":["I"]},{"Key":"I found","Fragments":["out","no","it","these","the","this","one","[NimbleText](http://nimbletext.com/Live)","`clojure.string`","it","that","this","odd.","is","that","on","a","it","that","it!","naming","that","out","it","a","the","it","`identity`","my","a","strange","a","reduce"]},{"Key":"found out","Fragments":["about","about","about","about"]},{"Key":"out about","Fragments":["`not=`,","`:pre`","'frequencies'","`replace`.","subsequent"]},{"Key":"about `not=`,","Fragments":["which"]},{"Key":"`not=`, which","Fragments":["seems"]},{"Key":"which seems","Fragments":["better.","less","to","to","to","to","to"]},{"Key":" Great!","Fragments":["A","And","Only"]},{"Key":"Great! A","Fragments":["common"]},{"Key":"common idiom","Fragments":["in","is"]},{"Key":"idiom in","Fragments":["naming"]},{"Key":"in naming","Fragments":["is"]},{"Key":"naming is","Fragments":["to","extremely","a","a"]},{"Key":"use `foo-\u0026gt;bar`","Fragments":["(there's"]},{"Key":"`foo-\u0026gt;bar` (there's","Fragments":["a"]},{"Key":"(there's a","Fragments":["hyphen"]},{"Key":"a hyphen","Fragments":["and"]},{"Key":"hyphen and","Fragments":["right"]},{"Key":"and right","Fragments":["arrow"]},{"Key":"right arrow","Fragments":["that"]},{"Key":"arrow that","Fragments":["is"]},{"Key":"is obscured","Fragments":["by"]},{"Key":"obscured by","Fragments":["escaping)"]},{"Key":"by escaping)","Fragments":["for"]},{"Key":"escaping) for","Fragments":["transforming/converting"]},{"Key":"for transforming/converting","Fragments":["functions."]},{"Key":"transforming/converting functions.","Fragments":["But"]},{"Key":"functions. But","Fragments":["that's"]},{"Key":"But that's","Fragments":["nothing","clearly","just","really"]},{"Key":"Good points,","Fragments":["thanks"]},{"Key":"points, thanks","Fragments":["for"]},{"Key":" Clear","Fragments":["and"]},{"Key":"Clear and","Fragments":["to"]},{"Key":"and to","Fragments":["the","allow","the","the","str.","determine","the","make"]},{"Key":"a built-in","Fragments":["function","way","Java"]},{"Key":"built-in function","Fragments":["`frequencies`,"]},{"Key":"function `frequencies`,","Fragments":["which"]},{"Key":"`frequencies`, which","Fragments":["might","I"]},{"Key":"which might","Fragments":["be","be","make","make","make","allow","be","be","look","clean","help","be","make","make","indicate"]},{"Key":"What if","Fragments":["you","you","you","you","`*name-tracker*`","I","you","you","you","you","you"]},{"Key":"just mapped","Fragments":["the"]},{"Key":"mapped the","Fragments":["`=`"]},{"Key":"the `=`","Fragments":["function"]},{"Key":"`=` function","Fragments":["directly?","wherever"]},{"Key":"A new","Fragments":["approach"]},{"Key":"new approach","Fragments":["without","at"]},{"Key":"approach without","Fragments":["recursion"]},{"Key":"without recursion","Fragments":["this"]},{"Key":"recursion this","Fragments":["time."]},{"Key":"Nice suggestions!","Fragments":["Thanks"]},{"Key":"suggestions! Thanks","Fragments":["much."]},{"Key":" Ouch,","Fragments":["that","right,","and"]},{"Key":"Ouch, that","Fragments":["was"]},{"Key":"was supposed","Fragments":["to","to","to"]},{"Key":"a nitpick.","Fragments":["The"]},{"Key":"nitpick. The","Fragments":["page"]},{"Key":"The page","Fragments":["should"]},{"Key":"page should","Fragments":["be"]},{"Key":"more small-screen/mobile","Fragments":["friendly..."]},{"Key":" Remember","Fragments":["that","that","that","that","that","that"]},{"Key":"Remember that","Fragments":["a","you","strings","you","Clojure","you","commas"]},{"Key":"string can","Fragments":["be","be","be","be"]},{"Key":"be treated","Fragments":["as","as","as","as","as","as","as","as","as","as","as","as","as","as","as","the"]},{"Key":"a sequence","Fragments":["of","of","of","of","of","of","of","of","of","(it","to","of","of","of","of","of","(aka","of","back","for","that","of","of","of","into","and","since","generated","of","of","of","explicitly","of","has"]},{"Key":"characters (no","Fragments":["conversion","conversion"]},{"Key":"(no conversion","Fragments":["needed)","needed)"]},{"Key":"conversion needed)","Fragments":["so","and"]},{"Key":"needed) so","Fragments":["all"]},{"Key":"so all","Fragments":["sequence","of","comments","the","my"]},{"Key":"all sequence","Fragments":["related","related"]},{"Key":"sequence related","Fragments":["functions","functions.","protocols","protocols)","functions.","functions.","functions","function"]},{"Key":"related functions","Fragments":["apply.","like"]},{"Key":" Consider","Fragments":["more","either","exploiting","using","more","creating","extracting","using","using","extracting"]},{"Key":"Consider more","Fragments":["DRY","DRY"]},{"Key":"more DRY","Fragments":["approach","approach.","approach"]},{"Key":"DRY approach","Fragments":["to","to"]},{"Key":"approach to","Fragments":["building","splitting","keep","building","date","test","reviewing","the","building","finding","using","code","take,"]},{"Key":"to building","Fragments":["the","the","`empty-count`:"]},{"Key":"building the","Fragments":["verse.","hash","sentences","verse.","name,","full","full"]},{"Key":"also wonder","Fragments":["that!","that."]},{"Key":"the recursion","Fragments":["isn't"]},{"Key":"recursion isn't","Fragments":["as"]},{"Key":"isn't as","Fragments":["it","good"]},{"Key":"be with","Fragments":["`recur`."]},{"Key":"with `recur`.","Fragments":["Can"]},{"Key":"`recur`. Can","Fragments":["someone"]},{"Key":"Can someone","Fragments":["help","else"]},{"Key":"someone help","Fragments":["me,"]},{"Key":"help me,","Fragments":["transform"]},{"Key":"me, transform","Fragments":["this"]},{"Key":"transform this","Fragments":["into"]},{"Key":"this into","Fragments":["a","a","`count`","one"]},{"Key":"a tail","Fragments":["recursive"]},{"Key":"tail recursive","Fragments":["function?"]},{"Key":"Ah, this","Fragments":["feels"]},{"Key":"this feels","Fragments":["a","way"]},{"Key":"lot better","Fragments":[":)","if"]},{"Key":"wonder what","Fragments":["do","you","this"]},{"Key":"do other","Fragments":["nitpickers"]},{"Key":"other nitpickers","Fragments":["think?","think"]},{"Key":" /me","Fragments":["goes"]},{"Key":"/me goes","Fragments":["googling"]},{"Key":"goes googling","Fragments":["private"]},{"Key":"googling private","Fragments":["functions"]},{"Key":" Honestly,","Fragments":["I"]},{"Key":"Honestly, I","Fragments":["had"]},{"Key":"had smoother","Fragments":["experiences"]},{"Key":"smoother experiences","Fragments":["deciphering"]},{"Key":"experiences deciphering","Fragments":["code"]},{"Key":"deciphering code","Fragments":["in"]},{"Key":"the past","Fragments":[";)"]},{"Key":"interested in","Fragments":["the","ways","equal","expressive","the","learning."]},{"Key":"the `format`","Fragments":["function","function"]},{"Key":"`format` function","Fragments":["from","for"]},{"Key":"from `core`","Fragments":["here"]},{"Key":"`core` here","Fragments":[":)"]},{"Key":"might want","Fragments":["to","to","to","in","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"define variables","Fragments":["for"]},{"Key":"variables for","Fragments":["the","T"]},{"Key":"great nit!","Fragments":["It"]},{"Key":"nit! It","Fragments":["is"]},{"Key":" Don't","Fragments":["see","tell","you","you","hit","leave","use"]},{"Key":"Don't see","Fragments":["much"]},{"Key":"see much","Fragments":["room","room"]},{"Key":"much room","Fragments":["for","for"]},{"Key":"for improvement...","Fragments":[":)"]},{"Key":"a `blank?`","Fragments":["in","function"]},{"Key":"`blank?` in","Fragments":["string"]},{"Key":"in string","Fragments":["if","templates","functions."]},{"Key":"string if","Fragments":["you"]},{"Key":"too happy","Fragments":["with"]},{"Key":"does keep","Fragments":["things"]},{"Key":"little DRYer.","Fragments":["It"]},{"Key":"DRYer. It","Fragments":["also"]},{"Key":"also brings","Fragments":["a"]},{"Key":"brings a","Fragments":["welcome"]},{"Key":"a welcome","Fragments":["symmetry"]},{"Key":"welcome symmetry","Fragments":["between"]},{"Key":"symmetry between","Fragments":["both"]},{"Key":"between both","Fragments":["branches"]},{"Key":"both branches","Fragments":["of"]},{"Key":"branches of","Fragments":["the","the"]},{"Key":"Pretty hard","Fragments":["to"]},{"Key":"to improve","Fragments":["on","things","the","this","on","this?","readability.","on","readability.","the"]},{"Key":"improve on","Fragments":["this!","this,","the","that","it"]},{"Key":"on this!","Fragments":[":)"]},{"Key":"Great! And","Fragments":["sorry"]},{"Key":"And sorry","Fragments":["for"]},{"Key":"sorry for","Fragments":["causing","the"]},{"Key":"for causing","Fragments":["so"]},{"Key":"causing so","Fragments":["much"]},{"Key":"much royal","Fragments":["pain."]},{"Key":"great! My","Fragments":["only"]},{"Key":"nitpick left","Fragments":["is"]},{"Key":"left is","Fragments":["better","not"]},{"Key":"better naming","Fragments":["of"]},{"Key":"of fns","Fragments":["and"]},{"Key":"fns and","Fragments":["bindings."]},{"Key":"you port","Fragments":["your"]},{"Key":"port your","Fragments":["work"]},{"Key":"work to","Fragments":["clojurescript?"]},{"Key":" Could","Fragments":["you","you","you","you","you","you","do","be","I","you","you","optimize"]},{"Key":"please take","Fragments":["a","a"]},{"Key":"at iteration","Fragments":["#10?"]},{"Key":"Ah, I've","Fragments":["used"]},{"Key":"I've used","Fragments":["that","it","a","\"s\"","`frequencies`","\"code","a","that"]},{"Key":"used that","Fragments":["before.","instead","in","might","sets","to"]},{"Key":"that before.","Fragments":["I'll"]},{"Key":"before. I'll","Fragments":["try"]},{"Key":"try what","Fragments":["I"]},{"Key":"do with","Fragments":["that.","quality.","this","this","that","my","the","clojure.","a"]},{"Key":"with that.","Fragments":["Thank","I","Other","`beer/verse`","Thanks!"]},{"Key":"that. Thank","Fragments":["you."]},{"Key":"Clojure to","Fragments":["Java","do","end","use","use","name","end","get"]},{"Key":"to Java","Fragments":["interop,","interop","anyway","methods.","8","methods","(will","for."]},{"Key":"Java interop,","Fragments":["but","but","but"]},{"Key":"interop, but","Fragments":["probably","I","then"]},{"Key":"but probably","Fragments":["mostly","not"]},{"Key":"probably mostly","Fragments":["for"]},{"Key":"mostly for","Fragments":["aesthetic"]},{"Key":"for aesthetic","Fragments":["reasons."]},{"Key":"I keep","Fragments":["submitting","wondering","track","forgetting","forgetting","forgetting","forgetting","a"]},{"Key":"keep submitting","Fragments":["instead"]},{"Key":"submitting instead","Fragments":["of"]},{"Key":"of testing,","Fragments":["I"]},{"Key":"testing, I","Fragments":["might","suppose?"]},{"Key":"might get","Fragments":["this"]},{"Key":"get this","Fragments":["to","to","same","to","done.","working"]},{"Key":"to 100","Fragments":["iterations"]},{"Key":"100 iterations","Fragments":["..."]},{"Key":"really think","Fragments":["that","of","this"]},{"Key":"this does","Fragments":["readability"]},{"Key":"does readability","Fragments":["a"]},{"Key":"readability a","Fragments":["favour","bit","bit.","lot."]},{"Key":"a favour","Fragments":["at"]},{"Key":"favour at","Fragments":["all."]},{"Key":"at all.","Fragments":["I've","Just","Maybe",":/","It's","I","I","I'm"]},{"Key":"all. I've","Fragments":["played"]},{"Key":"I've played","Fragments":["with"]},{"Key":"played with","Fragments":["some","Haskell,"]},{"Key":"with some","Fragments":["lambdas","base","sort","simple","of","helper","comments,","or"]},{"Key":"some lambdas","Fragments":["and"]},{"Key":"lambdas and","Fragments":["let"]},{"Key":"and let","Fragments":["assignments","me"]},{"Key":"let assignments","Fragments":["-"]},{"Key":"assignments -","Fragments":["but"]},{"Key":"- but","Fragments":["it","the","then","it","that","that","in","I","not","I","this","doesn't","all","are","that","how"]},{"Key":"it all","Fragments":["lead","with","in","the","on","is,","yourself."]},{"Key":"all lead","Fragments":["to"]},{"Key":"lead to","Fragments":["very","more","something"]},{"Key":"to very","Fragments":["poor"]},{"Key":"very poor","Fragments":["code,"]},{"Key":"poor code,","Fragments":["when"]},{"Key":"code, when","Fragments":["it"]},{"Key":"point. Resubmitted","Fragments":["with"]},{"Key":"Resubmitted with","Fragments":["```defn-```"]},{"Key":"with ```defn-```","Fragments":["used"]},{"Key":"```defn-``` used","Fragments":["where"]},{"Key":"used where","Fragments":["appropriate."]},{"Key":"to only","Fragments":["sort","have","calculate","contain","contain","consider","consider","extract"]},{"Key":"only sort","Fragments":["the","the"]},{"Key":"sort the","Fragments":["base","base","first","grades,","students'"]},{"Key":"the base","Fragments":["word","word","hash","word","`word`","collection"]},{"Key":"base word","Fragments":["once?","once?","only"]},{"Key":"point, I","Fragments":["added","would","like"]},{"Key":"added helper","Fragments":["methods"]},{"Key":"Hmm, fair","Fragments":["enough"]},{"Key":"fair enough","Fragments":[":)"]},{"Key":"I'm struggling","Fragments":["with","to"]},{"Key":"struggling with","Fragments":["the","not"]},{"Key":"that characters","Fragments":["are"]},{"Key":"characters are","Fragments":["not","arranged","uppercase.","passed","outside"]},{"Key":"not strings,","Fragments":["and"]},{"Key":"strings, and","Fragments":["vice","I"]},{"Key":"and vice","Fragments":["versa..."]},{"Key":"But of","Fragments":["course,"]},{"Key":"course, ```default?```","Fragments":["isn't"]},{"Key":"```default?``` isn't","Fragments":["needed"]},{"Key":"isn't needed","Fragments":["anymore.","as"]},{"Key":"needed anymore.","Fragments":["Resubmitting."]},{"Key":" Decided","Fragments":["cond","to","to"]},{"Key":"Decided cond","Fragments":["was"]},{"Key":"cond was","Fragments":["actually","an"]},{"Key":"actually much","Fragments":["more"]},{"Key":"I hand","Fragments":["a"]},{"Key":"hand a","Fragments":["already"]},{"Key":"a already","Fragments":["sorted"]},{"Key":"already sorted","Fragments":["expression"]},{"Key":"sorted expression","Fragments":["over"]},{"Key":"expression over","Fragments":["to"]},{"Key":"over to","Fragments":["the","using"]},{"Key":"the `anagram?`","Fragments":["function,"]},{"Key":"`anagram?` function,","Fragments":["I"]},{"Key":"cannot compare","Fragments":["equality,"]},{"Key":"compare equality,","Fragments":["can"]},{"Key":"equality, can","Fragments":["I?"]},{"Key":" `(=","Fragments":["expression","(count","n","n","\\?","0","x"]},{"Key":"`(= expression","Fragments":["assignment)`"]},{"Key":"expression assignment)`","Fragments":["will"]},{"Key":"assignment)` will","Fragments":["fail"]},{"Key":"will fail","Fragments":["and","if","if","on"]},{"Key":"fail and","Fragments":["therefore"]},{"Key":"and therefore","Fragments":["not"]},{"Key":"therefore not","Fragments":["filter"]},{"Key":"not filter","Fragments":["equal"]},{"Key":"filter equal","Fragments":["words."]},{"Key":" ###","Fragments":["Changes","Functional","Style","Changelog"]},{"Key":"- :use","Fragments":["replaced"]},{"Key":":use replaced","Fragments":["with"]},{"Key":"- some","Fragments":["helper"]},{"Key":"some helper","Fragments":["functions","functions","functions","predicates"]},{"Key":"functions extracted","Fragments":["from"]},{"Key":"extracted from","Fragments":["response-for"]},{"Key":"One of","Fragments":["my","my","the","the","the","your","those","the"]},{"Key":"functions, please","Fragments":["let"]},{"Key":"please let","Fragments":["me"]},{"Key":"let me","Fragments":["know","know","know","have"]},{"Key":"me know","Fragments":["how","what","if","if"]},{"Key":"know how","Fragments":["I","for","I","the","to","I","to","to","optimized"]},{"Key":"the hints","Fragments":[":)"]},{"Key":"Thanks, you","Fragments":["helped"]},{"Key":"you helped","Fragments":["here","me"]},{"Key":"helped here","Fragments":[";)"]},{"Key":"Thanks, good","Fragments":["idea.","point!"]},{"Key":"like we're","Fragments":["good"]},{"Key":"we're good","Fragments":["to","to"]},{"Key":"to go,","Fragments":["nice"]},{"Key":"go, nice","Fragments":["one!"]},{"Key":" @maybelle","Fragments":["says"]},{"Key":"@maybelle says","Fragments":["that"]},{"Key":"says that","Fragments":["this"]},{"Key":"be even","Fragments":["simpler"]},{"Key":"even simpler","Fragments":["with"]},{"Key":"simpler with","Fragments":["a","something","a","a"]},{"Key":"a core","Fragments":["function","clojure","function","clojure","clojure","namespace","Clojure","Clojure","function","function"]},{"Key":"core function","Fragments":["I've","I've","count.","you","to","called"]},{"Key":"function I've","Fragments":["already","already"]},{"Key":"I've already","Fragments":["used","used!","got"]},{"Key":"already used","Fragments":["in","in","in","in","in","in","it"]},{"Key":"used in","Fragments":["previous","one","one","one","one","one","names.","one","two","one","most","past","past","past","a","one","one","one","one","one","clojure","some","one","word-count\"","tests","`cond`","the","str","the","one","the","all","[Let","more","Haskell","the","Haskell,","the","Clojure","the"]},{"Key":"previous assignments.","Fragments":["It"]},{"Key":"assignments. It","Fragments":["is"]},{"Key":"a riddle","Fragments":["for"]},{"Key":"riddle for","Fragments":["me"]},{"Key":" @taryn","Fragments":["that’s"]},{"Key":"@taryn that’s","Fragments":["a"]},{"Key":"that’s a","Fragments":["very"]},{"Key":"point —","Fragments":["I"]},{"Key":"— I","Fragments":["hadn’t"]},{"Key":"I hadn’t","Fragments":["considered"]},{"Key":"hadn’t considered","Fragments":["transliteration"]},{"Key":"considered transliteration","Fragments":["at"]},{"Key":"transliteration at","Fragments":["all."]},{"Key":"Ouch, right,","Fragments":["the"]},{"Key":"right, the","Fragments":["title"]},{"Key":"the title","Fragments":["of","of"]},{"Key":"title of","Fragments":["the","*nitpick*"]},{"Key":" @emelia","Fragments":["You"]},{"Key":"@emelia You","Fragments":["could"]},{"Key":"could make","Fragments":["a","this","the","use","the","use","use","the","the","inspect-phrase","it","the","this","this","a","the","it","it","use","them","it","`word-count`","use","`bottles`","use","use","a","the","the","use"]},{"Key":" Must","Fragments":["be"]},{"Key":"Must be","Fragments":["a"]},{"Key":"a bug.","Fragments":["I've","Looks","I"]},{"Key":"bug. I've","Fragments":["not"]},{"Key":"I've not","Fragments":["started","seen","used","seen","measured)"]},{"Key":"not started","Fragments":["this"]},{"Key":"started this","Fragments":["issue"]},{"Key":"this issue","Fragments":["just"]},{"Key":"issue just","Fragments":["yet"]},{"Key":"just yet","Fragments":[":)"]},{"Key":" @orpha","Fragments":["awesome","-","-"]},{"Key":"@orpha awesome","Fragments":["tips,"]},{"Key":"awesome tips,","Fragments":["thanks."]},{"Key":"tips, thanks.","Fragments":["Switched"]},{"Key":"thanks. Switched","Fragments":["to"]},{"Key":"Switched to","Fragments":["your","a","Java"]},{"Key":"your suggested","Fragments":["regex"]},{"Key":"suggested regex","Fragments":["with"]},{"Key":"regex with","Fragments":["`re-find`","one","a"]},{"Key":"with `re-find`","Fragments":["and"]},{"Key":"`re-find` and","Fragments":["works","`re-match`"]},{"Key":" Regarding","Fragments":["code","the","the","randomness","4,","newlines,","the","the","spacing","performance,"]},{"Key":"Regarding code","Fragments":["clarity:"]},{"Key":"code clarity:","Fragments":["I"]},{"Key":"clarity: I","Fragments":["think"]},{"Key":"your code","Fragments":["does","a","have","much","will","a","more","to","more","seems","until","look","would","a","structure","`\"BAnaNA\"`","is","yet","-","so","could"]},{"Key":"does too","Fragments":["much.","much","much."]},{"Key":"too much.","Fragments":[":)","Couldn't","BUT"]},{"Key":" Hint:","Fragments":["My","you","swapping"]},{"Key":"Hint: My","Fragments":["approved"]},{"Key":"My approved","Fragments":["version"]},{"Key":"approved version","Fragments":["of"]},{"Key":"this has","Fragments":["one","a"]},{"Key":"has one","Fragments":["line","function"]},{"Key":"one line","Fragments":["per","between","-","by","and","(see"]},{"Key":"line per","Fragments":["possible","idea","fn."]},{"Key":"per possible","Fragments":["return"]},{"Key":"possible return","Fragments":["value."]},{"Key":"I haven't","Fragments":["seen","seen","thought","heard","seen","done","finished","yet","seen","updated","seen","looked","used","read","written","tried","tried","connected"]},{"Key":"haven't seen","Fragments":["that","anyone","any","the","enough"]},{"Key":"was already","Fragments":["approved,","a","a"]},{"Key":"already approved,","Fragments":["so"]},{"Key":"approved, so","Fragments":["you'll"]},{"Key":"so you'll","Fragments":["find"]},{"Key":"you'll find","Fragments":["my","two","a"]},{"Key":"my [\"improved\"","Fragments":["version"]},{"Key":"[\"improved\" version","Fragments":["here](http://exercism.io/submissions/5210f57c20a0109339000318)."]},{"Key":"Submitted in","Fragments":["error"]},{"Key":"in error","Fragments":["-"]},{"Key":"error -","Fragments":["sorry!"]},{"Key":" Spacing","Fragments":["of"]},{"Key":"Spacing of","Fragments":["one"]},{"Key":"of one","Fragments":["line","thing","name!","argument","function"]},{"Key":"line between","Fragments":["defs","functions","top-level","the"]},{"Key":"between defs","Fragments":["would"]},{"Key":"defs would","Fragments":["be"]},{"Key":"be good","Fragments":["for","if","for","for","if","to","to","to","if","if","to","for","to","for","to"]},{"Key":"good for","Fragments":["readability.","readability","readability","your","readability","a"]},{"Key":" Props","Fragments":["to"]},{"Key":"Props to","Fragments":["@keith"]},{"Key":"to @keith","Fragments":["for"]},{"Key":"@keith for","Fragments":["the"]},{"Key":"names (from","Fragments":["his"]},{"Key":"(from his","Fragments":["Elixir"]},{"Key":"his Elixir","Fragments":["version)."]},{"Key":" you're","Fragments":["right,","right."]},{"Key":"you're right,","Fragments":["driis.","I","it's"]},{"Key":"right, driis.","Fragments":["Magic"]},{"Key":"driis. Magic","Fragments":["constants"]},{"Key":"Magic constants","Fragments":["are"]},{"Key":"constants are","Fragments":["removed"]},{"Key":"are removed","Fragments":["in"]},{"Key":"removed in","Fragments":["the"]},{"Key":"the new","Fragments":["version.","`inflect`","nucleotide-counts","one","name","line","version.","version","version.","version","value","value,","methods.","version.","Transducers"]},{"Key":"I've changed","Fragments":["that","the","the","use+only"]},{"Key":"changed that","Fragments":["too"]},{"Key":"that too","Fragments":["now."]},{"Key":"- Removed","Fragments":["redudant"]},{"Key":"Removed redudant","Fragments":["call"]},{"Key":"redudant call","Fragments":["to"]},{"Key":"call to","Fragments":["`seq`","```str```.","```str```?","`seq`","`str`","`vec`","`vec`","[`(map","some","throw","`apply`","`swap!`.","`update-in`.","`merge`.","`convert_number`.","only_digit.","`generate-name`","`school/grade`","`clojure.string/blank?`.","`yelling?`","`robot-name`","`every?`","concatenate"]},{"Key":"right. Updated","Fragments":[":)"]},{"Key":"Great point","Fragments":["I've"]},{"Key":"point I've","Fragments":["replaced"]},{"Key":"I've replaced","Fragments":["my"]},{"Key":"replaced my","Fragments":["own","nested"]},{"Key":"own implementation","Fragments":["with"]},{"Key":"implementation with","Fragments":["mapv","the"]},{"Key":"with mapv","Fragments":[":)"]},{"Key":"Have a","Fragments":["look","look","look","look","look","google","google","look","google","look"]},{"Key":"at `frequencies`","Fragments":["function.","here","-"]},{"Key":"I usually","Fragments":["see","omit","use","write"]},{"Key":"usually see","Fragments":["`(fn"]},{"Key":"see `(fn","Fragments":["[x]"]},{"Key":"`(fn [x]","Fragments":["…x)`","(Character/isLetter"]},{"Key":"[x] …x)`","Fragments":["written"]},{"Key":"…x)` written","Fragments":["as"]},{"Key":"written as","Fragments":["`#(…%)`","`\\x`","`(boolean","[\"condition","`(not=","`apply","`\\A`,","just","a","`when`","`\\A`,","`(def","\\A,","`(dec","`(zero?","`(dec","`(zero?","a","`yelling?`","`(dec","`(zero?","`(every?","`(not="]},{"Key":"as `#(…%)`","Fragments":["but"]},{"Key":"`#(…%)` but","Fragments":["otherwise"]},{"Key":"but otherwise","Fragments":["this","returns"]},{"Key":"otherwise this","Fragments":["looks"]},{"Key":"way that","Fragments":["you","you","will","describes","additional","yelling","the"]},{"Key":"can only","Fragments":["sort","mark","nest","get"]},{"Key":"clearer for","Fragments":["future","someone"]},{"Key":"for future","Fragments":["readers","implementers.","readers","changes.","nitpicking,","reference,"]},{"Key":"future readers","Fragments":["if","know","by","of","with","understand","of"]},{"Key":"readers if","Fragments":["you"]},{"Key":"you gave","Fragments":["`\\T`","names","`\"T\"`"]},{"Key":"gave `\\T`","Fragments":["and"]},{"Key":"`\\U` descriptive","Fragments":["names?"]},{"Key":"`frequencies` here?","Fragments":["Or"]},{"Key":"here? Or","Fragments":["`reduce`"]},{"Key":"Or `reduce`","Fragments":["maybe?"]},{"Key":" Cool","Fragments":[":)","solution!"]},{"Key":" valid","Fragments":["point"]},{"Key":"valid point","Fragments":["I"]},{"Key":"point I","Fragments":["guess."]},{"Key":"I guess.","Fragments":["I've","This","Thanks","Maybe"]},{"Key":"guess. I've","Fragments":["updated"]},{"Key":"updated the","Fragments":["code","tests","test/example","code","formatting","code","implementation","submission.","code"]},{"Key":"you again","Fragments":[":)"]},{"Key":" @elmore","Fragments":["thank"]},{"Key":"@elmore thank","Fragments":["you!"]},{"Key":"you! replaced","Fragments":["use"]},{"Key":"replaced use","Fragments":["with"]},{"Key":"use with","Fragments":[":require","slight"]},{"Key":" Use","Fragments":["`String#endsWith`.","hyphen","`defn-`","-\u003e\u003e","more","\"math\"","letfn"]},{"Key":"You may","Fragments":["want","want","consider","want","want","want","want","have"]},{"Key":"may want","Fragments":["to","to","to","to","to","to","to","to","`characters`"]},{"Key":"at `re-seq`","Fragments":["here","as"]},{"Key":"`re-seq` here","Fragments":[":)"]},{"Key":" `\\w+`","Fragments":["already"]},{"Key":"`\\w+` already","Fragments":["includes"]},{"Key":"already includes","Fragments":["numbers"]},{"Key":"includes numbers","Fragments":["so"]},{"Key":"numbers so","Fragments":["it's"]},{"Key":"so it's","Fragments":["rather","not","not","probably","more","closer","generally"]},{"Key":"it's rather","Fragments":["redundant.","uncommon"]},{"Key":"rather redundant.","Fragments":["Other"]},{"Key":"redundant. Other","Fragments":["than"]},{"Key":"that, does","Fragments":["`sanitize-string`"]},{"Key":"does `sanitize-string`","Fragments":["really"]},{"Key":"`sanitize-string` really","Fragments":["reveal"]},{"Key":"really reveal","Fragments":["the"]},{"Key":"reveal the","Fragments":["intent"]},{"Key":"the function?","Fragments":["Maybe"]},{"Key":"function? Maybe","Fragments":["something"]},{"Key":"Maybe something","Fragments":["like","like:","like"]},{"Key":"like `string-\u0026gt;words`","Fragments":["would"]},{"Key":"`string-\u0026gt;words` would","Fragments":["be"]},{"Key":" Top","Fragments":["level"]},{"Key":"Top level","Fragments":["constant"]},{"Key":"level constant","Fragments":["valid-nucleotides","for"]},{"Key":"constant valid-nucleotides","Fragments":["introduced."]},{"Key":"Try as","Fragments":["I"]},{"Key":"might to","Fragments":["convince"]},{"Key":"to convince","Fragments":["them,"]},{"Key":"convince them,","Fragments":["my"]},{"Key":"them, my","Fragments":["`cond`"]},{"Key":"my `cond`","Fragments":["clauses"]},{"Key":"`cond` clauses","Fragments":["don't"]},{"Key":"clauses don't","Fragments":["feel"]},{"Key":"like lining","Fragments":["up."]},{"Key":"like both","Fragments":["functions"]},{"Key":"both functions","Fragments":["do"]},{"Key":"functions do","Fragments":["the","the"]},{"Key":"the work.","Fragments":["One"]},{"Key":"work. One","Fragments":["for"]},{"Key":"One for","Fragments":["all"]},{"Key":"all nucleotides,","Fragments":["and"]},{"Key":"nucleotides, and","Fragments":["one"]},{"Key":"and one","Fragments":["for","that","more","for","with","intermediary","of","is"]},{"Key":"one for","Fragments":["just","the","alphagrams","identical"]},{"Key":"for just","Fragments":["one."]},{"Key":"just one.","Fragments":["Is"]},{"Key":"one. Is","Fragments":["there"]},{"Key":"to let","Fragments":["one"]},{"Key":"let one","Fragments":["use"]},{"Key":"one use","Fragments":["the"]},{"Key":"my first","Fragments":["stabs","submission...","solution","ever","submission","submission).","attempt,","approach.","Clojure","Clojure","Clojure","Clojure","Clojure","Lisp","attempt","ever","time","clojure","clojure","iteration.","stab","Clojure","submission.","(!)","solution","attempt","Clojure","iteration","attempt,","time","foray"]},{"Key":"first stabs","Fragments":["at"]},{"Key":"stabs at","Fragments":["Clojure."]},{"Key":"at Clojure.","Fragments":["Be"]},{"Key":"Clojure. Be","Fragments":["brutal."]},{"Key":"Ok. This","Fragments":["now"]},{"Key":"This now","Fragments":["is"]},{"Key":"now is","Fragments":["the"]},{"Key":"of thinking","Fragments":["about","about"]},{"Key":"about closures","Fragments":["and"]},{"Key":"closures and","Fragments":["higher"]},{"Key":"and higher","Fragments":["order"]},{"Key":"higher order","Fragments":["functions.","function","functions","functions","fns","function:","function,","function"]},{"Key":"order functions.","Fragments":["I"]},{"Key":"still pretty","Fragments":["good","new","sure","new"]},{"Key":"good readable.","Fragments":["What's"]},{"Key":"readable. What's","Fragments":["your"]},{"Key":"What's your","Fragments":["pick"]},{"Key":"your pick","Fragments":["on"]},{"Key":"pick on","Fragments":["that?","it"]},{"Key":" Ignore","Fragments":["this","this","the"]},{"Key":"this ...","Fragments":["why"]},{"Key":"... why","Fragments":["can't"]},{"Key":"why can't","Fragments":["I"]},{"Key":"can't I","Fragments":["delete"]},{"Key":"I delete","Fragments":["iterations?!","this"]},{"Key":"My wrong.","Fragments":["Again,"]},{"Key":"wrong. Again,","Fragments":["looks"]},{"Key":"Again, looks","Fragments":["good"]},{"Key":" Keep","Fragments":["them","it","going"]},{"Key":"Keep them","Fragments":["coming."]},{"Key":"them coming.","Fragments":["I'm"]},{"Key":"coming. I'm","Fragments":["still"]},{"Key":"pretty new","Fragments":["when","to","to","to","to"]},{"Key":"new when","Fragments":["it"]},{"Key":"get shorter","Fragments":["or","if"]},{"Key":"shorter or","Fragments":["more"]},{"Key":"or more","Fragments":["clear","clojury?","clojury?","places.","of","characters","than","predicates","predicates"]},{"Key":"more clear","Fragments":["than","to","if","if","what","if","to","if","if"]},{"Key":"clear than","Fragments":["this","[version"]},{"Key":"than this","Fragments":[":)","one."]},{"Key":"Ok, I","Fragments":["think","wanted"]},{"Key":"of submitting","Fragments":["code"]},{"Key":"submitting code","Fragments":["to","when"]},{"Key":"to an","Fragments":["already","interned","example","inconsistency","anonymous","empty"]},{"Key":"an already","Fragments":["approved","existing"]},{"Key":"already approved","Fragments":["assignment."]},{"Key":"approved assignment.","Fragments":["Please"]},{"Key":"assignment. Please","Fragments":["ignore"]},{"Key":"ignore this","Fragments":[":)"]},{"Key":"appreciate that","Fragments":["much.","it","you"]},{"Key":" Ooh,","Fragments":["thanks","I"]},{"Key":"Ooh, thanks","Fragments":["for"]},{"Key":"tip. I","Fragments":["am"]},{"Key":"am learning","Fragments":["Clojure","Scala"]},{"Key":"Clojure by","Fragments":["the"]},{"Key":"the trial-and-error","Fragments":["method,"]},{"Key":"trial-and-error method,","Fragments":["so"]},{"Key":"method, so","Fragments":["suggestions"]},{"Key":"so suggestions","Fragments":["such"]},{"Key":"suggestions such","Fragments":["as"]},{"Key":"as that","Fragments":["are","is","makes"]},{"Key":"are *very*","Fragments":["welcome..."]},{"Key":"is fine,","Fragments":["but","there's","but","but"]},{"Key":"but making","Fragments":["the"]},{"Key":"private would","Fragments":["be","be"]},{"Key":" frequencies,","Fragments":["but"]},{"Key":"frequencies, but","Fragments":["you"]},{"Key":"could implement","Fragments":["frequencies","some","this"]},{"Key":"implement frequencies","Fragments":["with"]},{"Key":"frequencies with","Fragments":["reduce."]},{"Key":"It's probably","Fragments":["more","a","not","fine","a","very"]},{"Key":"last parenthesis","Fragments":["inline,","is"]},{"Key":"parenthesis inline,","Fragments":["though"]},{"Key":"inline, though","Fragments":["this"]},{"Key":"though this","Fragments":["looks","is","is"]},{"Key":"I'm hoping","Fragments":["that"]},{"Key":"hoping that","Fragments":["using","it"]},{"Key":"using `frequencies`","Fragments":["instead",":D","instead","to"]},{"Key":"`frequencies` instead","Fragments":["of","of","directly","of"]},{"Key":"of `sort`","Fragments":["was"]},{"Key":"`sort` was","Fragments":["what"]},{"Key":"was what","Fragments":["etrepum","really","I"]},{"Key":"what etrepum","Fragments":["was"]},{"Key":"etrepum was","Fragments":["getting"]},{"Key":"was getting","Fragments":["it","a","a"]},{"Key":"in his","Fragments":["nitpick"]},{"Key":"his nitpick","Fragments":["on"]},{"Key":"nitpick on","Fragments":["my","another"]},{"Key":"more compact","Fragments":["with","(not"]},{"Key":"compact with","Fragments":["`re-seq`."]},{"Key":" Forgot","Fragments":["about"]},{"Key":"Forgot about","Fragments":["that"]},{"Key":"that consideration,","Fragments":["however"]},{"Key":"consideration, however","Fragments":["that's"]},{"Key":"however that's","Fragments":["a","not"]},{"Key":" @faye","Fragments":["Cleaned"]},{"Key":"@faye Cleaned","Fragments":["it"]},{"Key":"Cleaned it","Fragments":[":)"]},{"Key":"the advice","Fragments":["@devonte!","to","on","from","of"]},{"Key":"advice @devonte!","Fragments":["I've"]},{"Key":"@devonte! I've","Fragments":["submitted"]},{"Key":"version taking","Fragments":["it"]},{"Key":"taking it","Fragments":["to","as"]},{"Key":"to heed.","Fragments":["Thanks"]},{"Key":"heed. Thanks","Fragments":["again!"]},{"Key":"the special","Fragments":["case","case","case","characters."]},{"Key":"special case","Fragments":["for","in","of"]},{"Key":"for -1","Fragments":["bottles"]},{"Key":"-1 bottles","Fragments":["--"]},{"Key":"bottles --","Fragments":["very"]},{"Key":" Awesome","Fragments":["--"]},{"Key":"Awesome --","Fragments":["love"]},{"Key":"-- love","Fragments":["the"]},{"Key":"out `frequencies`","Fragments":["--","--","here.","if","in"]},{"Key":"-- it","Fragments":["will","doesn't","will","might","can","seems","makes"]},{"Key":"your life","Fragments":["easier.","easier.","easier."]},{"Key":"life easier.","Fragments":[":)",";)"]},{"Key":" Actually","Fragments":["the","the"]},{"Key":"Actually the","Fragments":["README.md","`vec`"]},{"Key":"the README.md","Fragments":["file"]},{"Key":"README.md file","Fragments":["does"]},{"Key":"file does","Fragments":["say"]},{"Key":"does say","Fragments":["thymine.","\"Good"]},{"Key":"say thymine.","Fragments":["And"]},{"Key":"thymine. And","Fragments":["wikipedia"]},{"Key":"And wikipedia","Fragments":["backs"]},{"Key":"wikipedia backs","Fragments":["up"]},{"Key":"backs up","Fragments":["that"]},{"Key":"up that","Fragments":["thymine","`cond`"]},{"Key":"that thymine","Fragments":["is"]},{"Key":"thymine is","Fragments":["one"]},{"Key":"is one","Fragments":["of","of","that","of","thing","of","of\"","more","of","error"]},{"Key":"the nucleobases","Fragments":["of"]},{"Key":"nucleobases of","Fragments":["DNA."]},{"Key":"of DNA.","Fragments":["So"]},{"Key":"DNA. So","Fragments":["I'm"]},{"Key":"So I'm","Fragments":["going"]},{"Key":"keep name","Fragments":["in"]},{"Key":"name in","Fragments":["the"]},{"Key":" Much","Fragments":["better","appreciated","better!!","improved","happier","better","simpler","cleaner"]},{"Key":"Much better","Fragments":["!!","after","than"]},{"Key":"Agreed. Looks","Fragments":["great"]},{"Key":"The people","Fragments":["with"]},{"Key":"people with","Fragments":["permission"]},{"Key":"with permission","Fragments":["to"]},{"Key":"permission to","Fragments":["approve"]},{"Key":"approve here","Fragments":["are"]},{"Key":"here are","Fragments":["very","just"]},{"Key":"very slow,","Fragments":["I"]},{"Key":"slow, I","Fragments":["don't"]},{"Key":"the bottleneck","Fragments":["has","here."]},{"Key":"bottleneck has","Fragments":["much"]},{"Key":"has much","Fragments":["to"]},{"Key":"the succinctness","Fragments":["of"]},{"Key":"succinctness of","Fragments":["Clojure."]},{"Key":"It's too","Fragments":["nit-picky"]},{"Key":"too nit-picky","Fragments":["a","if"]},{"Key":"nit-picky a","Fragments":["nitpick"]},{"Key":"a nitpick","Fragments":["to"]},{"Key":"nitpick to","Fragments":["say","your"]},{"Key":"say it's","Fragments":["\"thymidine\",","more"]},{"Key":"it's \"thymidine\",","Fragments":["not"]},{"Key":"\"thymidine\", not","Fragments":["\"thymine\"?"]},{"Key":"not \"thymine\"?","Fragments":["It"]},{"Key":"\"thymine\"? It","Fragments":["probably"]},{"Key":"It probably","Fragments":["is..."]},{"Key":"think we","Fragments":["see"]},{"Key":"we see","Fragments":["the"]},{"Key":"of each","Fragments":["condition","phrase","other.","function,","other.","of","word,","function"]},{"Key":"condition and","Fragments":["don't","a","the","the","the","result","return"]},{"Key":"and don't","Fragments":["think","find","push","use","think","start"]},{"Key":"that extracting","Fragments":["logic"]},{"Key":"extracting logic","Fragments":["checks"]},{"Key":" I'd","Fragments":["love","rather","personally","forgotten","probably","personally","like","rather","suggest","say","consider","also","expect","really","love","clear","personally","enjoy","appreciate","suggest","really","really","never","rather","prefer","also","also","use","like"]},{"Key":"hear feedback","Fragments":["on"]},{"Key":"feedback on","Fragments":["whether","using","my","performance","anything.","your","this.","frequencies.","my","my","how"]},{"Key":"on whether","Fragments":["this","the","it"]},{"Key":"whether this","Fragments":["is"]},{"Key":"more or","Fragments":["less"]},{"Key":"or less","Fragments":["clear"]},{"Key":"less clear","Fragments":["than","in","to"]},{"Key":"than [version","Fragments":["1](http://exercism.io/submissions/520dbaaed908bda87300003d)."]},{"Key":" No","Fragments":["I'm","worries,","parentheses","need","need","I","idea","doubt","problem.","need","need","problem.","arguments","need"]},{"Key":"No I'm","Fragments":["not."]},{"Key":"I'm not.","Fragments":["TBH,"]},{"Key":"not. TBH,","Fragments":["I"]},{"Key":"TBH, I","Fragments":["actually"]},{"Key":"actually don't","Fragments":["know","need","need"]},{"Key":"know anything","Fragments":["about"]},{"Key":"anything about","Fragments":["Clojure.","that."]},{"Key":"about Clojure.","Fragments":[":)"]},{"Key":"look that","Fragments":["up,","bad,"]},{"Key":"that up,","Fragments":["thanks!"]},{"Key":" Aha!","Fragments":["Thanks"]},{"Key":"Aha! Thanks","Fragments":[":)"]},{"Key":"No worries,","Fragments":["I"]},{"Key":"worries, I","Fragments":["didn't"]},{"Key":"didn't even","Fragments":["notice","know","consider"]},{"Key":"even notice","Fragments":["that"]},{"Key":"notice that","Fragments":["this","the","you"]},{"Key":"a word-count","Fragments":["implementation!"]},{"Key":"word-count implementation!","Fragments":[":)"]},{"Key":"it worthwhile","Fragments":["to"]},{"Key":"Thanks! BTW","Fragments":["Nice"]},{"Key":"BTW Nice","Fragments":["to"]},{"Key":"Nice to","Fragments":["see","be"]},{"Key":"see somebody","Fragments":["from"]},{"Key":"somebody from","Fragments":["the"]},{"Key":"the Foray","Fragments":["crowd"]},{"Key":"Foray crowd","Fragments":[":)"]},{"Key":" Not","Fragments":["the","a","sure","sure","sure","sure","the","happy","that","sure","sure","sure","nuts","100%","really","sure","sure"]},{"Key":"Not the","Fragments":["shortest","best","fastest"]},{"Key":"the shortest","Fragments":["solution","collection.","passed","sequence","solution,","ever.","one"]},{"Key":"shortest solution","Fragments":["I"]},{"Key":"solution I","Fragments":["had","liked","came","can","came","moved","checked","learned","an","think"]},{"Key":"had in","Fragments":["mind,","your","previous","mind.","mind?"]},{"Key":"in mind,","Fragments":["but","that","it","we"]},{"Key":"mind, but","Fragments":["this"]},{"Key":"but this","Fragments":["is","looks","code","looks","shows","is","exercise","won't","solution","approach"]},{"Key":"is about","Fragments":["readability,","code","readability,","implementation"]},{"Key":"about readability,","Fragments":["isn't","I"]},{"Key":"readability, isn't","Fragments":["it?"]},{"Key":"else please","Fragments":["vote"]},{"Key":"please vote","Fragments":["for"]},{"Key":"vote for","Fragments":["this,","code"]},{"Key":"for this,","Fragments":["or","or"]},{"Key":"this, or","Fragments":["nitpick?","if"]},{"Key":"think private","Fragments":["helper"]},{"Key":"private helper","Fragments":["methods","methods","method"]},{"Key":"helper methods","Fragments":["for","might","that","are","that","that"]},{"Key":"methods for","Fragments":["conditions","your","you,","the"]},{"Key":"conditions so","Fragments":["specialized","an"]},{"Key":"so specialized","Fragments":["would"]},{"Key":"specialized would","Fragments":["be"]},{"Key":"sure this","Fragments":["is","prefix"]},{"Key":"very gross,","Fragments":["its"]},{"Key":"gross, its","Fragments":["literally"]},{"Key":"its literally","Fragments":["the"]},{"Key":"Clojure I've","Fragments":["written.","written,","ever"]},{"Key":"I've written.","Fragments":["Be"]},{"Key":"written. Be","Fragments":["gentle."]},{"Key":"Be gentle.","Fragments":[":)"]},{"Key":"first attempt!!","Fragments":[","]},{"Key":"attempt!! ,","Fragments":["one"]},{"Key":", one","Fragments":["point"]},{"Key":"one point","Fragments":[":","(you'll","-"]},{"Key":"point :","Fragments":["\u003cbr\u003e"]},{"Key":" It´s","Fragments":["not"]},{"Key":"It´s not","Fragments":["more"]},{"Key":"readable if","Fragments":["you","you","they","you","it","you","you"]},{"Key":"you create","Fragments":["a"]},{"Key":"helper private","Fragments":["methods"]},{"Key":"absolutely right","Fragments":[":)"]},{"Key":"right :)","Fragments":["Thank"]},{"Key":":) Thank","Fragments":["you!"]},{"Key":" good","Fragments":["point,","point","points!"]},{"Key":"point, pushed","Fragments":["a"]},{"Key":" With","Fragments":["a","`def`","regards","regards","regards","your","one","this","the"]},{"Key":"With a","Fragments":["different"]},{"Key":"different definition","Fragments":["for"]},{"Key":"definition for","Fragments":["split,"]},{"Key":"for split,","Fragments":["there's"]},{"Key":"split, there's","Fragments":["no"]},{"Key":"for strip","Fragments":["at"]},{"Key":"strip at","Fragments":["all."]},{"Key":" Whoops...wrong","Fragments":["submission!"]},{"Key":"Whoops...wrong submission!","Fragments":["Can"]},{"Key":"submission! Can","Fragments":["I"]},{"Key":"Can I","Fragments":["delete","ask"]},{"Key":"delete this","Fragments":["somehow?"]},{"Key":" O_O","Fragments":["more"]},{"Key":"O_O more","Fragments":["easy"]},{"Key":"more easy","Fragments":["!!","to","to"]},{"Key":"easy !!","Fragments":["Thanks"]},{"Key":"!! Thanks","Fragments":["@jamaal"]},{"Key":"Looks cool.","Fragments":["Can"]},{"Key":"cool. Can","Fragments":["you"]},{"Key":"use `ns`","Fragments":["special"]},{"Key":"`ns` special","Fragments":["form"]},{"Key":"form using","Fragments":["`:use`"]},{"Key":"using `:use`","Fragments":["so"]},{"Key":"`:use` so","Fragments":["that"]},{"Key":"can replace","Fragments":["`clojure.string/replace`","the","the","some","``has-match?```","your","it","```mapcat```","your","that"]},{"Key":"replace `clojure.string/replace`","Fragments":["with"]},{"Key":"`clojure.string/replace` with","Fragments":["convenient"]},{"Key":"with convenient","Fragments":["`replace`"]},{"Key":" Definitely","Fragments":["not","agree","makes"]},{"Key":"Definitely not","Fragments":["too"]},{"Key":"nit-picky if","Fragments":["i"]},{"Key":"if i","Fragments":["got","did","used"]},{"Key":"i got","Fragments":["the"]},{"Key":"domain word","Fragments":["wrong!"]},{"Key":"Only a","Fragments":["single","few"]},{"Key":"single blank","Fragments":["line"]},{"Key":"blank line","Fragments":["between","between","at","between"]},{"Key":"between functions","Fragments":["would"]},{"Key":"would suffice.","Fragments":["`:else`","Otherwise,","A","Hmmph."]},{"Key":"suffice. `:else`","Fragments":["is"]},{"Key":"more widely","Fragments":["used"]},{"Key":"widely used","Fragments":["than"]},{"Key":"used than","Fragments":["`true`"]},{"Key":"than `true`","Fragments":["for"]},{"Key":"for catch-all","Fragments":["in","condition"]},{"Key":"in `cond`.","Fragments":["It"]},{"Key":"`cond`. It","Fragments":["would"]},{"Key":"good if","Fragments":["`silence?`","you","there","program","you"]},{"Key":"if `silence?`","Fragments":["was"]},{"Key":"`silence?` was","Fragments":["consistent"]},{"Key":"was consistent","Fragments":["in"]},{"Key":"consistent in","Fragments":["formatting"]},{"Key":"in formatting","Fragments":["with"]},{"Key":"formatting with","Fragments":["the"]},{"Key":"the rest","Fragments":["of","of","of","of"]},{"Key":"rest of","Fragments":["functions.","the","the","the"]},{"Key":"Formatting is","Fragments":["still","still","a"]},{"Key":"still off","Fragments":["but"]},{"Key":"off but","Fragments":["I"]},{"Key":"I won't","Fragments":["grill","hold","hit","argue","be","comment"]},{"Key":"won't grill","Fragments":["you"]},{"Key":"grill you","Fragments":["on"]},{"Key":"on it","Fragments":["any","last","until","too","again","later","for"]},{"Key":"it any","Fragments":["longer","more","shorter."]},{"Key":"any longer","Fragments":["(the"]},{"Key":"longer (the","Fragments":["body"]},{"Key":"(the body","Fragments":["of"]},{"Key":"of `fn`","Fragments":["in"]},{"Key":"`fn` in","Fragments":["the"]},{"Key":"next line","Fragments":["should","and","in","seems","as"]},{"Key":"line should","Fragments":["be","be"]},{"Key":"be aligned","Fragments":["to"]},{"Key":"aligned to","Fragments":["that","the"]},{"Key":"that `fn`","Fragments":["with"]},{"Key":"`fn` with","Fragments":["indent"]},{"Key":"with indent","Fragments":["of"]},{"Key":"indent of","Fragments":["2","2"]},{"Key":"of 2","Fragments":["spaces","spaces"]},{"Key":"2 spaces","Fragments":["-","(not","is","is","on"]},{"Key":"spaces -","Fragments":["not"]},{"Key":"- not","Fragments":["to"]},{"Key":"the binding","Fragments":["name).","of","form)."]},{"Key":"binding name).","Fragments":["Good"]},{"Key":"name). Good","Fragments":["job."]},{"Key":"Also putting","Fragments":["`(:require"]},{"Key":"putting `(:require","Fragments":["..)`"]},{"Key":"`(:require ..)`","Fragments":["in"]},{"Key":"..)` in","Fragments":["its"]},{"Key":"in its","Fragments":["own","output)","current","approach","body"]},{"Key":"line in","Fragments":["the","the"]},{"Key":"macro would","Fragments":["look","clutter","put"]},{"Key":"would look","Fragments":["better.","better","a","like","like","like","like","nicer","like:","prettier","like:","like","something","like","more","a"]},{"Key":"still a","Fragments":["bit","function","question","little","bit","dynamic","mystery"]},{"Key":"bit off.","Fragments":["Anyway,","Bindings","Please"]},{"Key":"off. Anyway,","Fragments":["I"]},{"Key":"Anyway, I","Fragments":["would"]},{"Key":"would get","Fragments":["rid"]},{"Key":"of excessive","Fragments":["nested"]},{"Key":"excessive nested","Fragments":["let"]},{"Key":"nested let","Fragments":["forms"]},{"Key":"let forms","Fragments":["and","to"]},{"Key":"forms and","Fragments":["just"]},{"Key":"single let","Fragments":["form"]},{"Key":"let form","Fragments":["for","is","in","out"]},{"Key":"for binding","Fragments":["functions"]},{"Key":"binding functions","Fragments":["and"]},{"Key":"and values","Fragments":["altogether.","have","are"]},{"Key":" Hmm","Fragments":["I"]},{"Key":"Hmm I","Fragments":["just"]},{"Key":"just did","Fragments":["a","it"]},{"Key":"a frequencies","Fragments":["implementation"]},{"Key":"frequencies implementation","Fragments":["in"]},{"Key":"implementation in","Fragments":["js","the","Clojure."]},{"Key":"in js","Fragments":["and"]},{"Key":"js and","Fragments":["it"]},{"Key":"was quite","Fragments":["short"]},{"Key":"quite short","Fragments":["and"]},{"Key":"short and","Fragments":["surely","crisp,","smart,","it's","clear.","still"]},{"Key":"and surely","Fragments":["more"]},{"Key":"surely more","Fragments":["effective"]},{"Key":"more effective","Fragments":["than","(nlogn","way","way","to","way","(nlogn","(nlogn","(nlogn","(nlogn","than","(nlogn","by","(nlogn"]},{"Key":"effective than","Fragments":["sort.","current"]},{"Key":"than sort.","Fragments":["Nobody"]},{"Key":"sort. Nobody","Fragments":["decried"]},{"Key":"Nobody decried","Fragments":["me"]},{"Key":"decried me","Fragments":["for"]},{"Key":"me for","Fragments":["it...","a"]},{"Key":"for it...","Fragments":["yet."]},{"Key":"it... yet.","Fragments":["The"]},{"Key":"yet. The","Fragments":["thing"]},{"Key":"The thing","Fragments":["with"]},{"Key":"thing with","Fragments":["let/letfn","`(condp","`cond`"]},{"Key":"with let/letfn","Fragments":["forms"]},{"Key":"let/letfn forms","Fragments":["is"]},{"Key":"forms is","Fragments":["that"]},{"Key":"that they","Fragments":["create","don't","return","apply","have","deem","are","end","convert","return"]},{"Key":"they create","Fragments":["a"]},{"Key":"a so","Fragments":["called"]},{"Key":"so called","Fragments":["lexical"]},{"Key":"called lexical","Fragments":["binding"]},{"Key":"lexical binding","Fragments":["which","which"]},{"Key":"binding which","Fragments":["exists","you"]},{"Key":"which exists","Fragments":["only"]},{"Key":"exists only","Fragments":["in"]},{"Key":"only in","Fragments":["the","the"]},{"Key":"scope which","Fragments":["let"]},{"Key":"which let","Fragments":["form","me"]},{"Key":"is closing","Fragments":["over,"]},{"Key":"closing over,","Fragments":["whereas"]},{"Key":"over, whereas","Fragments":["def/defn"]},{"Key":"whereas def/defn","Fragments":["forms"]},{"Key":"def/defn forms","Fragments":["alter"]},{"Key":"forms alter","Fragments":["the"]},{"Key":"alter the","Fragments":["root","naming"]},{"Key":"the root","Fragments":["binding","bindings"]},{"Key":"root binding","Fragments":["of","-"]},{"Key":"binding of","Fragments":["the","`response`"]},{"Key":"symbol in","Fragments":["the","the"]},{"Key":"namespace (so","Fragments":["called"]},{"Key":"(so called","Fragments":["dynamic","\"rainbow"]},{"Key":"called dynamic","Fragments":["scoping)"]},{"Key":"dynamic scoping)","Fragments":["which"]},{"Key":"scoping) which","Fragments":["caters"]},{"Key":"which caters","Fragments":["to"]},{"Key":"caters to","Fragments":["something"]},{"Key":"the shape","Fragments":["of","of"]},{"Key":"shape of","Fragments":["creating","the"]},{"Key":"of creating","Fragments":["globals.","a","a"]},{"Key":"Since you","Fragments":["seem","raised","`(:use","(:use","control","have","use","already"]},{"Key":"you seem","Fragments":["to"]},{"Key":"know quite","Fragments":["a"]},{"Key":"bit about","Fragments":["clojure:","use","the","robot","how"]},{"Key":"about clojure:","Fragments":["why"]},{"Key":"clojure: why","Fragments":["is"]},{"Key":"why is","Fragments":["`letfn`","it"]},{"Key":"is `letfn`","Fragments":["preferred"]},{"Key":"`letfn` preferred","Fragments":["to"]},{"Key":"preferred to","Fragments":["just","use","use","use","use","use","use"]},{"Key":"just `defn`","Fragments":["closed"]},{"Key":"`defn` closed","Fragments":["within"]},{"Key":"closed within","Fragments":["a"]},{"Key":"within a","Fragments":["function?","transaction.","`lein"]},{"Key":" Counting","Fragments":["frequencies"]},{"Key":"Counting frequencies","Fragments":["was"]},{"Key":"frequencies was","Fragments":["decried"]},{"Key":"was decried","Fragments":["as"]},{"Key":"decried as","Fragments":["too"]},{"Key":"as too","Fragments":["complex"]},{"Key":"too complex","Fragments":["on"]},{"Key":"complex on","Fragments":["the"]},{"Key":"the javascript","Fragments":["track;","beer-song"]},{"Key":"javascript track;","Fragments":["but"]},{"Key":"track; but","Fragments":["that"]},{"Key":"but that","Fragments":["language","is","may","may","is","makes","did","may","may","would","seemed","is","seems","is","seems"]},{"Key":"that language","Fragments":["does"]},{"Key":"language does","Fragments":["not"]},{"Key":"not include","Fragments":["its","any"]},{"Key":"include its","Fragments":["batteries."]},{"Key":" `letfn`","Fragments":["form"]},{"Key":"`letfn` form","Fragments":["formatting","should"]},{"Key":"form formatting","Fragments":["is"]},{"Key":"formatting is","Fragments":["non-standard","not","not","a","a"]},{"Key":"is non-standard","Fragments":["-"]},{"Key":"non-standard -","Fragments":["opening"]},{"Key":"- opening","Fragments":["square","brace"]},{"Key":"opening square","Fragments":["bracket","bracket"]},{"Key":"square bracket","Fragments":["should","and","shouldn't"]},{"Key":"bracket should","Fragments":["be","be"]},{"Key":"with `letfn`","Fragments":["AND"]},{"Key":"`letfn` AND","Fragments":["with"]},{"Key":"AND with","Fragments":["first"]},{"Key":"with first","Fragments":["binding","expression","expression."]},{"Key":"first binding","Fragments":["expression;"]},{"Key":"binding expression;","Fragments":["the"]},{"Key":"expression; the","Fragments":["closing"]},{"Key":"closing bracket","Fragments":["should"]},{"Key":"last binding","Fragments":["expression."]},{"Key":"binding expression.","Fragments":["The"]},{"Key":"expression. The","Fragments":["body"]},{"Key":"the `letfn`","Fragments":["form","usage"]},{"Key":"form should","Fragments":["begin"]},{"Key":"should begin","Fragments":["on","in"]},{"Key":"begin on","Fragments":["its"]},{"Key":"line. Hyphen","Fragments":["instead"]},{"Key":"Hyphen instead","Fragments":["of"]},{"Key":"of underscore","Fragments":["in","in"]},{"Key":"underscore in","Fragments":["names","names"]},{"Key":"in names","Fragments":["is","-"]},{"Key":"readable and","Fragments":["idiomatic","clean","testable.","reusable.","more","the","idiomatic."]},{"Key":"and idiomatic","Fragments":["for"]},{"Key":"idiomatic for","Fragments":["Clojure.","Clojure.","shorter"]},{"Key":"for Clojure.","Fragments":["Think"]},{"Key":"Clojure. Think","Fragments":["about"]},{"Key":"Think about","Fragments":["reducing","moving","creating","reducing","reducing","reducing","making","making"]},{"Key":"about reducing","Fragments":["overhead","the","the","the","the","the","duplication"]},{"Key":"reducing overhead","Fragments":["of"]},{"Key":"overhead of","Fragments":["processing","the","processing","processing","processing","processing","processing","processing","processing","repeatedly","processing","processing","multiple","processing"]},{"Key":"of processing","Fragments":["`word`","everything","the","word","the","the","`word`","`word`","the","the","the","functions,","the","`word`"]},{"Key":"processing `word`","Fragments":["with","with","with","over","along"]},{"Key":"`word` with","Fragments":["every","every","every"]},{"Key":"with every","Fragments":["candidate.","call","check","function","candidate.","candidate","candidate.","candidate.","candidate","potential","candidate.","candidate","new","candidate","candidate","candidate"]},{"Key":"every candidate.","Fragments":["Finally,","I"]},{"Key":"candidate. Finally,","Fragments":["you"]},{"Key":"Finally, you","Fragments":["can"]},{"Key":"function much","Fragments":["more"]},{"Key":"efficient (nlogn","Fragments":["vs","vs"]},{"Key":"(nlogn vs","Fragments":["n)","n)","n).","n)","n).","n).","n).","n)","n)","n).","n)."]},{"Key":"vs n)","Fragments":["by","by","by"]},{"Key":"n) by","Fragments":["swapping","swapping","swapping"]},{"Key":"by swapping","Fragments":["`sort`","`sort`","`sort`","`sort`","`sort`","`sort`"]},{"Key":"swapping `sort`","Fragments":["for","for","for","with","with","for","with","with","for","for","for"]},{"Key":"`sort` for","Fragments":["another","other","other","another","other","another","other"]},{"Key":"for another","Fragments":["core","core","core","function."]},{"Key":"another core","Fragments":["clojure","clojure","clojure","clojure","clojure","clojure","clojure"]},{"Key":"core clojure","Fragments":["function","function","function","function","function","function","which","function","function","function","function","function","function","function","function","function,","functions"]},{"Key":"clojure function","Fragments":["which","which","that","you","will","which","which","which","which","which","which","which","which","which"]},{"Key":"function which","Fragments":["you","you","you","you","you","works","you","you","you","you","you","you","wraps","creates","can","takes","might","might","would","wouldn't","given","you"]},{"Key":"have already","Fragments":["used","used","used","used","lowercased.","sanitized","been","considered"]},{"Key":"in one","Fragments":["of","of","of","of","line.","place.","of","of","recursive","of","of","of","of","of","of","of","function.","of","place","go.","step","place","or","place","of","step","step.","function.","method"]},{"Key":"of you","Fragments":["past","current","know"]},{"Key":"you past","Fragments":["assignments.","a"]},{"Key":"The formatting","Fragments":["bug"]},{"Key":"formatting bug","Fragments":["was"]},{"Key":"bug was","Fragments":["fixed"]},{"Key":"was fixed","Fragments":["today!"]},{"Key":"fixed today!","Fragments":[":)"]},{"Key":"are still","Fragments":["many","adjusting"]},{"Key":"still many","Fragments":["string"]},{"Key":"many string","Fragments":["repetitions"]},{"Key":"string repetitions","Fragments":["in"]},{"Key":"repetitions in","Fragments":["the"]},{"Key":"you define","Fragments":["verses;","the","your","dna-re-pattern","`silent?`"]},{"Key":"define verses;","Fragments":["couldn't"]},{"Key":"verses; couldn't","Fragments":["you"]},{"Key":"you possibly","Fragments":["think"]},{"Key":"possibly think","Fragments":["of"]},{"Key":"to factorize","Fragments":["parts","them?"]},{"Key":"factorize parts","Fragments":["of"]},{"Key":"parts of","Fragments":["these","the","the","the","a","your","the","the","this"]},{"Key":"these string","Fragments":["generations?"]},{"Key":" Indeed,","Fragments":["I"]},{"Key":"Indeed, I","Fragments":["have"]},{"Key":"have an","Fragments":["earlier","example","opinion","inconsistent","\"a\"","extra","old","interesting","assert"]},{"Key":"an earlier","Fragments":["version"]},{"Key":"earlier version","Fragments":["of"]},{"Key":" Having","Fragments":["both","both","been"]},{"Key":"Having both","Fragments":["sets","`anagram?`"]},{"Key":"both sets","Fragments":["sounds"]},{"Key":"sets sounds","Fragments":["like"]},{"Key":"sounds like","Fragments":["\"good","the"]},{"Key":"like \"good","Fragments":["duplication\""]},{"Key":"\"good duplication\"","Fragments":["indeed,"]},{"Key":"duplication\" indeed,","Fragments":["I'll"]},{"Key":"indeed, I'll","Fragments":["be"]},{"Key":"I'll be","Fragments":["working","more"]},{"Key":"be working","Fragments":["on","good"]},{"Key":"working on","Fragments":["it.","character","a","it","the"]},{"Key":"on it.","Fragments":[":)","I"]},{"Key":"Maybe simpler","Fragments":["implementation"]},{"Key":"simpler implementation","Fragments":["of"]},{"Key":" (apply","Fragments":["hash-map","str","str))","str","not=","str))","str","str","str","str","str","str)))"]},{"Key":"(apply hash-map","Fragments":["(interleave"]},{"Key":"hash-map (interleave","Fragments":["keys"]},{"Key":"(interleave keys","Fragments":["(repeat"]},{"Key":"keys (repeat","Fragments":["default)))"]},{"Key":"to suggest","Fragments":["going","a","extracting",":use"]},{"Key":"suggest going","Fragments":["with"]},{"Key":"going with","Fragments":["a","the"]},{"Key":"namespace var","Fragments":["to"]},{"Key":"var to","Fragments":["hold","an"]},{"Key":"to hold","Fragments":["the","shared,"]},{"Key":"hold the","Fragments":["set"]},{"Key":"the set","Fragments":["of","of","around,","into","of","for","of","of","callable","function","members","and"]},{"Key":"set of","Fragments":["valid","valid","style","`all-nucleotides`","responses?","valid","inputs,","valid","valid","requirements:","RegEx","functions","test,","characters","tests","valid","prime","special","values.","functions?","functions?","conditions"]},{"Key":"of valid","Fragments":["nucleotides,","nucleotides","nucleotides.","nucleotides,","nucleotides","nucleotides","nucleotides.","characters."]},{"Key":"valid nucleotides,","Fragments":["but","it's"]},{"Key":"nucleotides, but","Fragments":["now"]},{"Key":"now I'm","Fragments":["on"]},{"Key":"the fence.","Fragments":["What"]},{"Key":"fence. What","Fragments":["do"]},{"Key":"about those","Fragments":["strings"]},{"Key":"those strings","Fragments":["in","seemed"]},{"Key":"strings in","Fragments":["the","the","Clojure","your"]},{"Key":"your function","Fragments":["vs","does","calls.","calls.","parameters"]},{"Key":"function vs","Fragments":["in"]},{"Key":"vs in","Fragments":["a"]},{"Key":"a top","Fragments":["level","level","level"]},{"Key":"top level","Fragments":["def?","constant","first.","(for","without","function","function","function","of","bindings."]},{"Key":"Ah, good","Fragments":["point.","point"]},{"Key":"good point.","Fragments":["I've"]},{"Key":"point. I've","Fragments":["recently"]},{"Key":"I've recently","Fragments":["updated"]},{"Key":"recently updated","Fragments":["the"]},{"Key":"tests so","Fragments":["that","that"]},{"Key":"the counts","Fragments":["map","returned","there."]},{"Key":"counts map","Fragments":["is"]},{"Key":"map is","Fragments":["keyed","lazy","better","immutable","a"]},{"Key":"is keyed","Fragments":["by"]},{"Key":"keyed by","Fragments":["chars,"]},{"Key":"by chars,","Fragments":["but"]},{"Key":"chars, but","Fragments":["it"]},{"Key":"The approach","Fragments":["I","obscures"]},{"Key":"approach I","Fragments":["took","can"]},{"Key":"took was","Fragments":["to"]},{"Key":"was to","Fragments":["have","try.","only","just","record","use","check","avoid","iterate","use"]},{"Key":"have constants","Fragments":["for"]},{"Key":"constants for","Fragments":["sets"]},{"Key":"for sets","Fragments":["of"]},{"Key":"sets of","Fragments":["DNA","chars"]},{"Key":"of DNA","Fragments":["and","literals","literals","literals"]},{"Key":"DNA and","Fragments":["RNA","writing","its"]},{"Key":"and RNA","Fragments":["nucleotides,"]},{"Key":"RNA nucleotides,","Fragments":["then"]},{"Key":"nucleotides, then","Fragments":["use"]},{"Key":"use those","Fragments":["to","more.","inside"]},{"Key":"those to","Fragments":["generate","functions","numbers,"]},{"Key":"empty count","Fragments":["map"]},{"Key":"count map","Fragments":["and"]},{"Key":"map and","Fragments":["the","building","having","then","can"]},{"Key":"the validation","Fragments":["set.","process…","check","is","function","from","and","out","function.","action","-","into","of"]},{"Key":"validation set.","Fragments":["There's"]},{"Key":"set. There's","Fragments":["still"]},{"Key":"There's still","Fragments":["duplication,","overhead"]},{"Key":"still duplication,","Fragments":["but"]},{"Key":"duplication, but","Fragments":["it's","how"]},{"Key":"it's (to","Fragments":["use"]},{"Key":"(to use","Fragments":["a"]},{"Key":"bad joke)","Fragments":["more"]},{"Key":"joke) more","Fragments":["natural"]},{"Key":"natural duplication,","Fragments":["IMO."]},{"Key":"duplication, IMO.","Fragments":["What"]},{"Key":"IMO. What","Fragments":["do"]},{"Key":"can try","Fragments":["to","to","here","to"]},{"Key":"to sort","Fragments":["out","the","out","and","a","both","the"]},{"Key":"sort out","Fragments":["a","something"]},{"Key":"a solution","Fragments":["using","I","with","using","that","using","using","that"]},{"Key":"solution using","Fragments":["`interleave`.","`frequencies`","list","`re-seq`.","`\\w+`","`cond`.","`reduce-kv`","has-letter?."]},{"Key":"using `interleave`.","Fragments":["`str`"]},{"Key":"`interleave`. `str`","Fragments":["still"]},{"Key":"`str` still","Fragments":["will"]},{"Key":"still will","Fragments":["be"]},{"Key":"be necessary","Fragments":["but","because","because","at"]},{"Key":"necessary but","Fragments":["at"]},{"Key":"least explicit","Fragments":["going"]},{"Key":"explicit going","Fragments":["element"]},{"Key":"going element","Fragments":["by"]},{"Key":"element by","Fragments":["element"]},{"Key":"by element","Fragments":["won't"]},{"Key":"element won't","Fragments":["be"]},{"Key":"won't be","Fragments":["necessary.","caught","any","holding","enough","additional"]},{"Key":" Isn't","Fragments":["a","there","`nucleotide-count`"]},{"Key":"Isn't a","Fragments":["string"]},{"Key":"string a","Fragments":["sequence"]},{"Key":"of chars","Fragments":["so","rather","for","as"]},{"Key":"chars so","Fragments":["that"]},{"Key":"that `\"AGC\"`","Fragments":["is"]},{"Key":"`\"AGC\"` is","Fragments":["`\\A"]},{"Key":"is `\\A","Fragments":["\\G"]},{"Key":"`\\A \\G","Fragments":["\\C`?"]},{"Key":"That means","Fragments":["I'll"]},{"Key":"means I'll","Fragments":["have"]},{"Key":"convert each","Fragments":["character","character."]},{"Key":"each character","Fragments":["to","looking"]},{"Key":"character to","Fragments":["a","digit"]},{"Key":"string to","Fragments":["be","vector","words","the","compare","it's","match.","string.","characters"]},{"Key":"be comparable","Fragments":["to"]},{"Key":"comparable to","Fragments":["the"]},{"Key":"the nucleotide","Fragments":["to","names","count","names","symbols"]},{"Key":"nucleotide to","Fragments":["count"]},{"Key":"to count","Fragments":["which","the","down.","numbers","them"]},{"Key":"count which","Fragments":["is"]},{"Key":"is given","Fragments":["as"]},{"Key":"given as","Fragments":["a"]},{"Key":"I'd rather","Fragments":["avoid","communicate","suggest","use","stick","use","not","have"]},{"Key":"rather avoid","Fragments":["too","use"]},{"Key":"avoid too","Fragments":["much"]},{"Key":"much type","Fragments":["juggling."]},{"Key":"I got","Fragments":["rid","rid","rid","similar","nitpicked","when","rid","a","caught","to","some",".endsWith","the","everything","a","an","rid"]},{"Key":"got rid","Fragments":["of","of","of","of","of","of","of"]},{"Key":"that ugly","Fragments":["`re-seq`"]},{"Key":"ugly `re-seq`","Fragments":["but"]},{"Key":"`re-seq` but","Fragments":["since"]},{"Key":"conversion in","Fragments":["two"]},{"Key":"in two","Fragments":["different","places","ways:","others","places","different","simple","different"]},{"Key":"two different","Fragments":["places,","opinions","place","functions."]},{"Key":"different places,","Fragments":["I've","it"]},{"Key":"places, I've","Fragments":["kept"]},{"Key":"I've kept","Fragments":["my","an"]},{"Key":"kept my","Fragments":["`nucleotides`"]},{"Key":"my `nucleotides`","Fragments":["function"]},{"Key":"`nucleotides` function","Fragments":["instead","necessary?"]},{"Key":"function instead","Fragments":["of","of","of","of","of","of","of","of","of","of"]},{"Key":"of duplicating","Fragments":["the","its"]},{"Key":"duplicating the","Fragments":["`map`."]},{"Key":"the `map`.","Fragments":["Am"]},{"Key":"`map`. Am","Fragments":["I"]},{"Key":"Am I","Fragments":["missing","missing","missing","missing","missing"]},{"Key":"I missing","Fragments":["something","something","here?","something?","something","something","the","anything?"]},{"Key":"missing something","Fragments":["magical","obvious","here?","here?","obvious","or","that","here,"]},{"Key":"something magical","Fragments":["that"]},{"Key":"magical that","Fragments":["Clojure"]},{"Key":"that Clojure","Fragments":["can","has","has","often"]},{"Key":"Clojure can","Fragments":["do","be","be","be","be","actually","be"]},{"Key":"Regarding the","Fragments":["second","naming,","\"more","api","first"]},{"Key":"the keys","Fragments":["of","of","thing.","will"]},{"Key":"keys of","Fragments":["the","the"]},{"Key":"the `default-nucleotide-counts`","Fragments":["and"]},{"Key":"`default-nucleotide-counts` and","Fragments":["add"]},{"Key":"and add","Fragments":["\"U\"","`(not","it"]},{"Key":"add \"U\"","Fragments":["to"]},{"Key":"\"U\" to","Fragments":["that"]},{"Key":"that set","Fragments":["(or","-"]},{"Key":"set (or","Fragments":["the"]},{"Key":"(or the","Fragments":["other","inverse)."]},{"Key":"way around).","Fragments":["But"]},{"Key":"around). But","Fragments":["I'm"]},{"Key":"But I'm","Fragments":["not","not"]},{"Key":"whole thing","Fragments":["significantly","is","is","into","3","out","so","without"]},{"Key":"thing significantly","Fragments":["easier"]},{"Key":"significantly easier","Fragments":["to","to"]},{"Key":"the exception","Fragments":["with","is"]},{"Key":"exception with","Fragments":["the"]},{"Key":"the uracil.","Fragments":["But"]},{"Key":"uracil. But","Fragments":["again"]},{"Key":"But again","Fragments":["I"]},{"Key":"again I","Fragments":["might"]},{"Key":"something obvious","Fragments":["since","?"]},{"Key":"obvious since","Fragments":["I"]},{"Key":"have yet","Fragments":["to"]},{"Key":"yet to","Fragments":["actually","explore"]},{"Key":"actually properly","Fragments":["learn"]},{"Key":"properly learn","Fragments":["Clojure."]},{"Key":"learn Clojure.","Fragments":[":)","Any"]},{"Key":"you. Does","Fragments":["not"]},{"Key":"Does not","Fragments":["seem"]},{"Key":"not seem","Fragments":["to"]},{"Key":"improve things","Fragments":["(regarding"]},{"Key":"things (regarding","Fragments":["readability),"]},{"Key":"(regarding readability),","Fragments":["does"]},{"Key":"readability), does","Fragments":["it?"]},{"Key":"about my","Fragments":["new","`zipvec`","english","clever","approach"]},{"Key":"my new","Fragments":["version?","submission,","submission.","solution"]},{"Key":"Ok, now","Fragments":["without"]},{"Key":"now without","Fragments":["the"]},{"Key":"extra `in-range`","Fragments":["function"]},{"Key":"`in-range` function","Fragments":["and"]},{"Key":"and somewhat","Fragments":["uncluttered"]},{"Key":"somewhat uncluttered","Fragments":["templates."]},{"Key":"Is the","Fragments":["`nucleotides`","style","`let`","functionality","verdict","difference"]},{"Key":"the `nucleotides`","Fragments":["function"]},{"Key":"function necessary?","Fragments":["Strings"]},{"Key":"necessary? Strings","Fragments":["are"]},{"Key":"Strings are","Fragments":["`seq`-able","CharSequences.","`seq-able`"]},{"Key":"are `seq`-able","Fragments":["in"]},{"Key":"`seq`-able in","Fragments":["Clojure,"]},{"Key":"so `map`","Fragments":["and"]},{"Key":"`map` and","Fragments":["friends","`count`.","`every?`","`reduce`.","`reduce`","`transcribe`,"]},{"Key":"and friends","Fragments":["should"]},{"Key":"friends should","Fragments":["work"]},{"Key":"should work","Fragments":["on","without","slightly","in","as","with"]},{"Key":"work on","Fragments":["them.","it","that","the","them","functional","the"]},{"Key":"on them.","Fragments":["Is",":)"]},{"Key":"them. Is","Fragments":["there"]},{"Key":"to DRY","Fragments":["up","that","this","that","it","up"]},{"Key":"DRY up","Fragments":["the","the"]},{"Key":"the repetition","Fragments":["of","of","when"]},{"Key":"repetition of","Fragments":["the","testing"]},{"Key":"nucleotide names","Fragments":["between","instead"]},{"Key":"names between","Fragments":["`countable-nucleotides`"]},{"Key":"between `countable-nucleotides`","Fragments":["and"]},{"Key":"`countable-nucleotides` and","Fragments":["`default-nucleotide-counts`?"]},{"Key":"the hint","Fragments":["with","with"]},{"Key":"hint with","Fragments":["range's","multi-arity,"]},{"Key":"with range's","Fragments":["third"]},{"Key":"range's third","Fragments":["argument."]},{"Key":"third argument.","Fragments":["Everytime","You"]},{"Key":"argument. Everytime","Fragments":["something"]},{"Key":"Everytime something","Fragments":["looks"]},{"Key":"something looks","Fragments":["stupid"]},{"Key":"looks stupid","Fragments":["I"]},{"Key":"stupid I","Fragments":["should"]},{"Key":"should really","Fragments":["consult"]},{"Key":"really consult","Fragments":["the"]},{"Key":"consult the","Fragments":["docs,","clojure"]},{"Key":"the docs,","Fragments":["I","\"Use"]},{"Key":"docs, I","Fragments":["guess."]},{"Key":"the strange","Fragments":["call"]},{"Key":"strange call","Fragments":["of"]},{"Key":"call of","Fragments":["`str`","the","`bottle`"]},{"Key":"of `str`","Fragments":["here?","and"]},{"Key":" (for","Fragments":[";","my","[a"]},{"Key":"(for ;","Fragments":["..."]},{"Key":" (str","Fragments":["(verse","(rand-letters","bottle-count"]},{"Key":"(str (verse","Fragments":["verse-number)"]},{"Key":"(verse verse-number)","Fragments":["\"\\n\")))"]},{"Key":"looks wrong","Fragments":["to","then","in"]},{"Key":"wrong to","Fragments":["me,","me","suggest"]},{"Key":"found no","Fragments":["better"]},{"Key":"no better","Fragments":["solution"]},{"Key":"better solution","Fragments":["to","when","might"]},{"Key":"second \"\\n\"","Fragments":["in"]},{"Key":"\"\\n\" in","Fragments":["there."]},{"Key":"in there.","Fragments":["Help","I","Add"]},{"Key":"there. Help","Fragments":["would"]},{"Key":"Help would","Fragments":["be"]},{"Key":"add some","Fragments":["processing","newlines"]},{"Key":"some processing","Fragments":["to"]},{"Key":"processing to","Fragments":["reduce"]},{"Key":"reduce duplication","Fragments":["(need","between"]},{"Key":"duplication (need","Fragments":["to"]},{"Key":"(need to","Fragments":["weed"]},{"Key":"to weed","Fragments":["out"]},{"Key":"weed out","Fragments":["uracil)"]},{"Key":"out uracil)","Fragments":["but"]},{"Key":"uracil) but","Fragments":["readability"]},{"Key":"but readability","Fragments":["would"]},{"Key":"readability would","Fragments":["suffer."]},{"Key":"would suffer.","Fragments":["Duplication"]},{"Key":"suffer. Duplication","Fragments":["in"]},{"Key":"Duplication in","Fragments":["that"]},{"Key":"case is","Fragments":["justified","a","one","handled"]},{"Key":"is justified","Fragments":["in"]},{"Key":"justified in","Fragments":["my"]},{"Key":" `range`","Fragments":["has","will"]},{"Key":"`range` has","Fragments":["third","3rd"]},{"Key":"has third","Fragments":["argument."]},{"Key":"argument. You","Fragments":["can","should"]},{"Key":"can create","Fragments":["lexical","with","bindings","a"]},{"Key":"create lexical","Fragments":["bindings"]},{"Key":"lexical bindings","Fragments":["with","inside"]},{"Key":"bindings with","Fragments":["even","names","meaningful","names","meaningful","meaningful","meaningful","meaningful","strings"]},{"Key":"with even","Fragments":["more"]},{"Key":"more specific","Fragments":["names","one.","name","about","about"]},{"Key":"specific names","Fragments":["to"]},{"Key":"the clutter","Fragments":["in","in"]},{"Key":"clutter in","Fragments":["string","places"]},{"Key":"string templates","Fragments":["like"]},{"Key":"templates like","Fragments":["`n-bottles`."]},{"Key":" There's","Fragments":["a","also","a","a","really","a","a","a","a","`lower-case`","also","a","a","a","`condp`","also","also","also","also","also","one","only","a","a","a","a","a","a","a"]},{"Key":"of duplication","Fragments":["between","between","in","on","in","in","of","that","between"]},{"Key":"duplication between","Fragments":["the","the","the","verses","the","the"]},{"Key":"the `valid-nucleotides`","Fragments":["var"]},{"Key":"`valid-nucleotides` var","Fragments":["and"]},{"Key":"var and","Fragments":["the","I"]},{"Key":"base hash","Fragments":["in"]},{"Key":"hash in","Fragments":["`nucleotide-counts`.","`nucleotide-counts`.","`count`"]},{"Key":"in `nucleotide-counts`.","Fragments":["Any","Is","`frequencies`","But"]},{"Key":"`nucleotide-counts`. Any","Fragments":["way"]},{"Key":"Any way","Fragments":["to","to","to"]},{"Key":"DRY that","Fragments":["up?","without"]},{"Key":"of `reduce`","Fragments":["and"]},{"Key":"`reduce` and","Fragments":["your","`increment-word`","getting"]},{"Key":"your incrementer","Fragments":["function"]},{"Key":"incrementer function","Fragments":["--"]},{"Key":"-- that's","Fragments":["a"]},{"Key":"nice pattern.","Fragments":["IMO,"]},{"Key":"pattern. IMO,","Fragments":["it's"]},{"Key":"IMO, it's","Fragments":["mostly"]},{"Key":"it's mostly","Fragments":["preference","matter"]},{"Key":"mostly preference","Fragments":["on"]},{"Key":"preference on","Fragments":["which"]},{"Key":"on which","Fragments":["function"]},{"Key":"which function","Fragments":["calls"]},{"Key":"calls the","Fragments":["other.","functions","same"]},{"Key":"the other.","Fragments":["My","After","My"]},{"Key":"other. My","Fragments":["gut","guess"]},{"Key":"gut says","Fragments":["building"]},{"Key":"says building","Fragments":["the"]},{"Key":"of all","Fragments":["counts","the","the","non","the","students","used","accounts,","thanks!"]},{"Key":"all counts","Fragments":["just"]},{"Key":"counts just","Fragments":["to"]},{"Key":"the count","Fragments":["of","for","of"]},{"Key":"count of","Fragments":["one","zero?","an"]},{"Key":"one thing","Fragments":["is","at","jarring.","that"]},{"Key":"not as","Fragments":["efficient,","nice","the","helpful","lazy"]},{"Key":"as efficient,","Fragments":["but"]},{"Key":"efficient, but","Fragments":["that"]},{"Key":"is completely","Fragments":["unbenchmarked","unnecessary","unnecessary"]},{"Key":"completely unbenchmarked","Fragments":["and"]},{"Key":"unbenchmarked and","Fragments":["likely"]},{"Key":"and likely","Fragments":["wrong.","more"]},{"Key":"take on","Fragments":["how","the"]},{"Key":"on how","Fragments":["this","to","you","I","to","Clojuresque","to","to","to"]},{"Key":"be improved","Fragments":["is","for","by"]},{"Key":"improved is","Fragments":["that"]},{"Key":"the knowledge","Fragments":["of","of"]},{"Key":"valid nucleotides","Fragments":["in","would","to","using","before"]},{"Key":"two places","Fragments":["and","you","where"]},{"Key":"places and","Fragments":["buried"]},{"Key":"and buried","Fragments":["in"]},{"Key":"buried in","Fragments":["function"]},{"Key":"function bodies","Fragments":["--","and"]},{"Key":"bodies --","Fragments":["that"]},{"Key":"that feels","Fragments":["like","like"]},{"Key":"constant for","Fragments":["this","bad"]},{"Key":"this namespace.","Fragments":["What"]},{"Key":"namespace. What","Fragments":["do","you"]},{"Key":" Agreed","Fragments":["with","re:","that","with","-"]},{"Key":"Agreed with","Fragments":["@hayden's","@clemmie"]},{"Key":"with @hayden's","Fragments":["(intended)"]},{"Key":"@hayden's (intended)","Fragments":["nitpick"]},{"Key":"(intended) nitpick","Fragments":["--"]},{"Key":"nitpick --","Fragments":["`split`","it"]},{"Key":"-- `split`","Fragments":["isn't"]},{"Key":"`split` isn't","Fragments":["necessary."]},{"Key":"isn't necessary.","Fragments":["Also,"]},{"Key":"necessary. Also,","Fragments":["for"]},{"Key":"Also, for","Fragments":["the"]},{"Key":"the sake","Fragments":["of","of","of"]},{"Key":"sake of","Fragments":["future","...","readability"]},{"Key":"of future","Fragments":["readers,"]},{"Key":"future readers,","Fragments":["I"]},{"Key":"readers, I","Fragments":["would"]},{"Key":"would prefer","Fragments":["to","`get`","to","`(=","to","something","`convert`","a","a","if"]},{"Key":"give the","Fragments":["\"T\"","`and`-ed","perfect"]},{"Key":"\"U\" characters","Fragments":["some"]},{"Key":"characters some","Fragments":["descriptive"]},{"Key":"some descriptive","Fragments":["names."]},{"Key":" @kylie","Fragments":["!"]},{"Key":"@kylie !","Fragments":["I"]},{"Key":"get a","Fragments":["chance","nice","'signature'","feel","feel","really"]},{"Key":"a chance","Fragments":["to","to"]},{"Key":"it last","Fragments":["night"]},{"Key":"last night","Fragments":["-"]},{"Key":"night -","Fragments":["and"]},{"Key":"- and","Fragments":["probably","one","it's","what's"]},{"Key":"and probably","Fragments":["not","not","you"]},{"Key":"probably not","Fragments":["tonight","worth","used","ideal","what","right","the"]},{"Key":"not tonight","Fragments":["either."]},{"Key":"Don't tell","Fragments":["me"]},{"Key":"me yet!","Fragments":["I"]},{"Key":"yet! I","Fragments":["think"]},{"Key":"what function","Fragments":["you"]},{"Key":"function you","Fragments":["mean....","can","can","describe","use","can","can","can","were"]},{"Key":"you mean....","Fragments":["wait"]},{"Key":"mean.... wait","Fragments":["for"]},{"Key":"wait for","Fragments":["my","some"]},{"Key":" Take","Fragments":["advantage","a","a","a","a","a","a","a","a","a","a"]},{"Key":"Take advantage","Fragments":["of"]},{"Key":"advantage of","Fragments":["`str`","using","being","going","niceties","\\p","```defn-```","the","this.","the","that","the","the","the","your"]},{"Key":"and create","Fragments":["bindings","a"]},{"Key":"create bindings","Fragments":["with","for","for","with","that"]},{"Key":"names that","Fragments":["would","flow","match","would","hint","aren't","have","return"]},{"Key":"would flow","Fragments":["naturally","more","like"]},{"Key":"flow naturally","Fragments":["with"]},{"Key":"naturally with","Fragments":["the","the","how"]},{"Key":"of surrounding","Fragments":["strings.","string","string"]},{"Key":"surrounding strings.","Fragments":["Maybe"]},{"Key":"strings. Maybe","Fragments":["some"]},{"Key":"Maybe some","Fragments":["generalized","universal","type"]},{"Key":"some generalized","Fragments":["inflection"]},{"Key":"generalized inflection","Fragments":["function"]},{"Key":"inflection function","Fragments":["could"]},{"Key":"function could","Fragments":["also","get","be","optionally","be","be","be","be"]},{"Key":"also help","Fragments":["but"]},{"Key":"help but","Fragments":["that's","think"]},{"Key":"that's entirely","Fragments":["optional."]},{"Key":" Zoldar","Fragments":["-"]},{"Key":"Zoldar -","Fragments":["I"]},{"Key":"then my","Fragments":["attempts"]},{"Key":"my attempts","Fragments":["to"]},{"Key":"attempts to","Fragments":["do"]},{"Key":"do so","Fragments":["led","for","as"]},{"Key":"so led","Fragments":["to"]},{"Key":"led to","Fragments":["much","the"]},{"Key":"to much","Fragments":["more"]},{"Key":"was generally","Fragments":["harder"]},{"Key":"generally harder","Fragments":["to"]},{"Key":"to read.","Fragments":["Can","Also","If","Note","Maybe","Consider","There's","I'm","I","In","You"]},{"Key":"read. Can","Fragments":["you"]},{"Key":"you offer","Fragments":["any"]},{"Key":"offer any","Fragments":["nudges"]},{"Key":"any nudges","Fragments":["in"]},{"Key":"nudges in","Fragments":["an"]},{"Key":"an advantageous","Fragments":["direction?"]},{"Key":"Although recursion","Fragments":["is"]},{"Key":"recursion is","Fragments":["fun","bad"]},{"Key":"is fun","Fragments":["and"]},{"Key":"fun and","Fragments":["in"]},{"Key":"case won't","Fragments":["deplete"]},{"Key":"won't deplete","Fragments":["the"]},{"Key":"deplete the","Fragments":["call"]},{"Key":"the call","Fragments":["stack","stack","on","to","to","to","with","to","to","to","to","to","to","to","`(str"]},{"Key":"call stack","Fragments":[":)","with"]},{"Key":"stack :)","Fragments":["consider"]},{"Key":":) consider","Fragments":["approach"]},{"Key":"consider approach","Fragments":["that"]},{"Key":"approach that","Fragments":["would","cuts"]},{"Key":"would let","Fragments":["you"]},{"Key":"you avoid","Fragments":["it","the"]},{"Key":"avoid it","Fragments":["altogether.","whenever","being"]},{"Key":"it altogether.","Fragments":["Alternatively,"]},{"Key":"altogether. Alternatively,","Fragments":["try"]},{"Key":"Alternatively, try","Fragments":["to"]},{"Key":"it tail-recursive.","Fragments":["Other"]},{"Key":"tail-recursive. Other","Fragments":["than"]},{"Key":"that, your","Fragments":["solution"]},{"Key":"pretty clean.","Fragments":["Maybe","My"]},{"Key":"clean. Maybe","Fragments":["binding"]},{"Key":"Maybe binding","Fragments":["inflections"]},{"Key":"binding inflections","Fragments":["to"]},{"Key":"inflections to","Fragments":["more"]},{"Key":"more succint","Fragments":["names","method","version"]},{"Key":"succint names","Fragments":["before"]},{"Key":"names before","Fragments":["putting"]},{"Key":"before putting","Fragments":["them"]},{"Key":"them into","Fragments":["templates","separate,","lists.","sequences.","a","a"]},{"Key":"into templates","Fragments":["would"]},{"Key":"templates would","Fragments":["help"]},{"Key":"help a","Fragments":["bit"]},{"Key":"Hey, I","Fragments":["love","didn't","like","submitted"]},{"Key":"new `inflect`","Fragments":["version,"]},{"Key":"`inflect` version,","Fragments":["very"]},{"Key":"version, very","Fragments":["elegant"]},{"Key":"very elegant","Fragments":["implementation"]},{"Key":"elegant implementation","Fragments":["\u0026amp;"]},{"Key":"implementation \u0026amp;","Fragments":["usage"]},{"Key":"\u0026amp; usage","Fragments":[":)"]},{"Key":" Can't","Fragments":["see"]},{"Key":"Can't see","Fragments":["much"]},{"Key":"for improvement","Fragments":["with","with"]},{"Key":"improvement with","Fragments":["this","regard"]},{"Key":"this one.","Fragments":["Great","Was","Next!","Command","I","(Whoops","It","You"]},{"Key":"one. Great","Fragments":["stuff."]},{"Key":" What,","Fragments":["like"]},{"Key":"What, like","Fragments":["`frequencies`?"]},{"Key":"like `frequencies`?","Fragments":["Interesting!"]},{"Key":"`frequencies`? Interesting!","Fragments":["I"]},{"Key":"Interesting! I","Fragments":["started"]},{"Key":"started out","Fragments":["by","the","with","with"]},{"Key":"out by","Fragments":["porting","zoldar,","hand","this"]},{"Key":"by porting","Fragments":["my"]},{"Key":"porting my","Fragments":["Ruby"]},{"Key":"my Ruby","Fragments":["solution","solution","implementation","mind"]},{"Key":"Ruby solution","Fragments":["for","but"]},{"Key":"problem to","Fragments":["Clojure,","tackle.","the"]},{"Key":"and AFAIK","Fragments":["Ruby"]},{"Key":"AFAIK Ruby","Fragments":["doesn't"]},{"Key":"Ruby doesn't","Fragments":["have"]},{"Key":"a convenience","Fragments":["method"]},{"Key":"convenience method","Fragments":["for"]},{"Key":"method for","Fragments":["frequency","checking","a","these"]},{"Key":"for frequency","Fragments":["counting."]},{"Key":"frequency counting.","Fragments":["Neat"]},{"Key":"counting. Neat","Fragments":["idea!"]},{"Key":"Hint: you","Fragments":["have","have"]},{"Key":"have used","Fragments":["the","in","in","in","it","in","`-\u0026gt;\u0026gt;`","in","in","in","in","in","in","something","`condp`","that","`map`,","let,"]},{"Key":"used the","Fragments":["function","same","\"thread","Java","'thread"]},{"Key":"question in","Fragments":["one","particular:","all"]},{"Key":"your past","Fragments":["assignments.","assignments.","assignments,","assignments.","assignments.","assignments.","assignments.","assignemnts,","assignemnts,","assigments","assignments,","assignments.","assignments."]},{"Key":" Higher","Fragments":["order"]},{"Key":"Higher order","Fragments":["functions","functions"]},{"Key":"order functions","Fragments":["FTW","are","that","to"]},{"Key":"functions FTW","Fragments":[":)"]},{"Key":"FTW :)","Fragments":["My"]},{"Key":"solution much","Fragments":["more"]},{"Key":"for other","Fragments":["core","core","core","core","functions.","people"]},{"Key":"other core","Fragments":["clojure","clojure","clojure","clojure","clojure"]},{"Key":"Good enough","Fragments":["to","for"]},{"Key":"me. Alternatively,","Fragments":["you"]},{"Key":"me. Alternative","Fragments":["approach"]},{"Key":"Alternative approach","Fragments":["to","would","would","to"]},{"Key":"to splitting","Fragments":["would","it","and"]},{"Key":"splitting would","Fragments":["be"]},{"Key":"using `re-seq`","Fragments":["which","instead","and","to","to","instead"]},{"Key":"`re-seq` which","Fragments":["has"]},{"Key":"which has","Fragments":["the","a","the"]},{"Key":"of returning","Fragments":["a","`:default`","a"]},{"Key":"returning a","Fragments":["lazy","function","vector","function"]},{"Key":"a lazy","Fragments":["sequence","sequence.","sequence.","`seq`,"]},{"Key":"lazy sequence","Fragments":["instead","into"]},{"Key":"processing everything","Fragments":["at"]},{"Key":"everything at","Fragments":["once."]},{"Key":" jgdavey","Fragments":["suggested"]},{"Key":"jgdavey suggested","Fragments":["that"]},{"Key":"I frame","Fragments":["my"]},{"Key":"frame my","Fragments":["functions"]},{"Key":"my functions","Fragments":["such"]},{"Key":"functions such","Fragments":["that","as"]},{"Key":"such that","Fragments":["one","the","one","I","`count`"]},{"Key":"one uses","Fragments":["another."]},{"Key":"uses another.","Fragments":["Definitely"]},{"Key":"another. Definitely","Fragments":["pleased"]},{"Key":"Definitely pleased","Fragments":["to"]},{"Key":"pleased to","Fragments":["have"]},{"Key":"have escaped","Fragments":["from"]},{"Key":"escaped from","Fragments":["using"]},{"Key":"from using","Fragments":["clojure.core/count","either"]},{"Key":"using clojure.core/count","Fragments":["and"]},{"Key":"clojure.core/count and","Fragments":["dna/count"]},{"Key":"and dna/count","Fragments":["in"]},{"Key":"dna/count in","Fragments":["the"]},{"Key":"same piece","Fragments":["of"]},{"Key":"of code;","Fragments":["but"]},{"Key":"code; but","Fragments":["still"]},{"Key":"but still","Fragments":["not","relevant","has","punny"]},{"Key":"still not","Fragments":["very","a","the","sure","completely","really","quite"]},{"Key":"not very","Fragments":["sure","proficient","easy","fun,","pleasing","pleased","active","nice.","readable.","nice."]},{"Key":"very sure","Fragments":["count"]},{"Key":"sure count","Fragments":["should"]},{"Key":"count should","Fragments":["use"]},{"Key":"should use","Fragments":["nucleotide-counts,",":require","`:keywords`","it.","Clojure's","those","function","`-\u003e\u003e`:"]},{"Key":"use nucleotide-counts,","Fragments":["and"]},{"Key":"nucleotide-counts, and","Fragments":["not"]},{"Key":"not vice","Fragments":["versa?","versa,"]},{"Key":" Updated","Fragments":["`use`","`question?`","submission","for","after"]},{"Key":"Updated `use`","Fragments":["to"]},{"Key":"`use` to","Fragments":["`require`"]},{"Key":"`require` thanks","Fragments":["to"]},{"Key":"thanks to","Fragments":["@arvilla","@arvilla","a","your","you.","the","[Clojure","a"]},{"Key":"Updated `question?`","Fragments":["to"]},{"Key":"`question?` to","Fragments":["use","[defn-](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/defn-)"]},{"Key":"`last` thanks","Fragments":["to"]},{"Key":"is super","Fragments":["picky,","clear."]},{"Key":"super picky,","Fragments":["but"]},{"Key":"but to","Fragments":["me,","be"]},{"Key":"`blank?` and","Fragments":["`all-caps?`","`upper-case`","`upper-case`","`replace`"]},{"Key":"`all-caps?` are","Fragments":["language"]},{"Key":"are language","Fragments":["from"]},{"Key":"the implementation,","Fragments":["not"]},{"Key":"implementation, not","Fragments":["the"]},{"Key":"domain. Bob","Fragments":["doesn't"]},{"Key":"Bob doesn't","Fragments":["think"]},{"Key":"doesn't think","Fragments":["about"]},{"Key":"things people","Fragments":["say"]},{"Key":"people say","Fragments":["in"]},{"Key":"say in","Fragments":["those"]},{"Key":"in those","Fragments":["terms.","dangling"]},{"Key":" Wouldn't","Fragments":["creating","a"]},{"Key":"Wouldn't creating","Fragments":["meaningful"]},{"Key":"creating meaningful","Fragments":["names"]},{"Key":"nucleotides enhance","Fragments":["readability"]},{"Key":" Man","Fragments":["I"]},{"Key":"Man I","Fragments":["totally"]},{"Key":"I totally","Fragments":["missed","would","would","missed","didn't","forgot","whiffed","missed","forgot","missed"]},{"Key":"totally missed","Fragments":["that,","the","that.","that","`string/blank?`","that"]},{"Key":"missed that,","Fragments":["thanks"]},{"Key":"that, thanks","Fragments":["for","for"]},{"Key":"the \"replace","Fragments":["sort"]},{"Key":"\"replace sort","Fragments":["by"]},{"Key":"sort by","Fragments":["frequencies\""]},{"Key":"by frequencies\"","Fragments":["tip,"]},{"Key":"frequencies\" tip,","Fragments":["it's"]},{"Key":"tip, it's","Fragments":["clever"]},{"Key":"it's clever","Fragments":[";)"]},{"Key":"the naming,","Fragments":["I"]},{"Key":"naming, I","Fragments":["blame"]},{"Key":"I blame","Fragments":["my"]},{"Key":"blame my","Fragments":["frequent"]},{"Key":"my frequent","Fragments":["usage"]},{"Key":"frequent usage","Fragments":["of"]},{"Key":"of python","Fragments":[";)"]},{"Key":"I'm posting","Fragments":["a"]},{"Key":"posting a","Fragments":["new"]},{"Key":"Hey, cool!","Fragments":["I"]},{"Key":"cool! I","Fragments":["like"]},{"Key":"the `intro/outro`","Fragments":["split"]},{"Key":"`intro/outro` split","Fragments":["here"]},{"Key":"split here","Fragments":[":)"]},{"Key":" Now","Fragments":["how","only","I","that","that","it's","this","rewritten","adhering","take","you"]},{"Key":"Now how","Fragments":["about"]},{"Key":"how about","Fragments":["extracting","using","putting","using"]},{"Key":"extracting them","Fragments":["into"]},{"Key":"into separate,","Fragments":["private"]},{"Key":"separate, private","Fragments":["functions?"]},{"Key":"Not a","Fragments":["fan","big"]},{"Key":"a fan","Fragments":["of","of","of","of","of","of","of","of"]},{"Key":"fan of","Fragments":["`format`","returning","generating","the","the","\"cstring\"","`for`","catching","how","`:use`."]},{"Key":"of `format`","Fragments":["style"]},{"Key":"`format` style","Fragments":["functions","fns"]},{"Key":"style functions","Fragments":["but"]},{"Key":"functions but","Fragments":["I'll","not"]},{"Key":"I'll see","Fragments":["what"]},{"Key":"extracting the","Fragments":["test","`(reverse...`","tests","predicate","shouting","character"]},{"Key":"test functions","Fragments":["out","out","should"]},{"Key":"functions out","Fragments":["of","of"]},{"Key":"`response-for` and","Fragments":["giving","declare","make"]},{"Key":"them meaningful","Fragments":["names?"]},{"Key":":D About","Fragments":["the"]},{"Key":"the `verse`.","Fragments":["I"]},{"Key":"`verse`. I","Fragments":["think"]},{"Key":"this stuff","Fragments":["is"]},{"Key":"stuff is","Fragments":["so"]},{"Key":"so context","Fragments":["specific,"]},{"Key":"context specific,","Fragments":["that"]},{"Key":"specific, that","Fragments":["I"]},{"Key":"the point","Fragments":["of","in","in","of","was"]},{"Key":"point of","Fragments":["keeping","that","this","view,","the","trouble","the"]},{"Key":"of keeping","Fragments":["it","state,"]},{"Key":"keeping it","Fragments":["in"]},{"Key":"in wider","Fragments":["scope."]},{"Key":"wider scope.","Fragments":["Does"]},{"Key":"scope. Does","Fragments":["it"]},{"Key":"Does it","Fragments":["read","just"]},{"Key":"it read","Fragments":["hard","like"]},{"Key":"read hard","Fragments":["for"]},{"Key":"hard for","Fragments":["you?","me"]},{"Key":"Use hyphen","Fragments":["instead"]},{"Key":"hyphen instead","Fragments":["of"]},{"Key":"names -","Fragments":["it","this","the"]},{"Key":"better. With","Fragments":["simply","that,"]},{"Key":"With simply","Fragments":["swapping"]},{"Key":"simply swapping","Fragments":["`sort`","`sort`"]},{"Key":"past assignments,","Fragments":["the","you'll"]},{"Key":"assignments, the","Fragments":["computation"]},{"Key":"the computation","Fragments":["will"]},{"Key":"computation will","Fragments":["become"]},{"Key":"will become","Fragments":["much","implementation","\"living\""]},{"Key":"become much","Fragments":["more"]},{"Key":"effective (nlogn","Fragments":["vs","vs","vs","vs","vs","vs","vs"]},{"Key":"agree. ```blank?```","Fragments":["isn't"]},{"Key":"```blank?``` isn't","Fragments":["as"]},{"Key":"as good","Fragments":["a","to","at"]},{"Key":"good a","Fragments":["name"]},{"Key":"name as","Fragments":["the","well","the"]},{"Key":"others and","Fragments":["the"]},{"Key":"the helpers","Fragments":["should","from","public.","below","shout,"]},{"Key":"helpers should","Fragments":["probably","be"]},{"Key":"I much","Fragments":["enjoyed"]},{"Key":"much enjoyed","Fragments":["the"]},{"Key":"enjoyed the","Fragments":["`assingment`","separation"]},{"Key":"the `assingment`","Fragments":["word"]},{"Key":"`assingment` word","Fragments":["here"]},{"Key":"word here","Fragments":[":)"]},{"Key":"couldn't extract","Fragments":["parts"]},{"Key":"extract parts","Fragments":["of"]},{"Key":"the processing","Fragments":["operation","overhead.","flow.","stops","stops"]},{"Key":"processing operation","Fragments":["in"]},{"Key":"in `verse`","Fragments":["to","with"]},{"Key":"`verse` to","Fragments":["more"]},{"Key":"more focused","Fragments":["private"]},{"Key":"focused private","Fragments":["functions?"]},{"Key":"This might","Fragments":["look","lead","just","have","work"]},{"Key":"might look","Fragments":["slightly","at","better","at"]},{"Key":"look slightly","Fragments":["over-engineered","more"]},{"Key":"slightly over-engineered","Fragments":["regarding"]},{"Key":"over-engineered regarding","Fragments":["the"]},{"Key":"the simple","Fragments":["purpose","logic.","conditional"]},{"Key":"simple purpose","Fragments":["of"]},{"Key":"purpose of","Fragments":["this","avoiding","the","the","that","making","`(=","this"]},{"Key":"this exercise,","Fragments":["though","but","but","as","but"]},{"Key":"exercise, though","Fragments":["I"]},{"Key":"to ask","Fragments":["for","collection","a"]},{"Key":"ask for","Fragments":["a","some","its"]},{"Key":"more minimal,","Fragments":["focused"]},{"Key":"minimal, focused","Fragments":["version."]},{"Key":"focused version.","Fragments":["And"]},{"Key":"version. And","Fragments":["of"]},{"Key":"And of","Fragments":["course,"]},{"Key":"course, any","Fragments":["other"]},{"Key":"other kind","Fragments":["of"]},{"Key":"of feedback","Fragments":["is","is"]},{"Key":"feedback is","Fragments":["valuable,","very","very","much","more","that"]},{"Key":"is valuable,","Fragments":["as"]},{"Key":"valuable, as","Fragments":["always."]},{"Key":"* `:use`","Fragments":["is"]},{"Key":"`:use` is","Fragments":["being","deprecated/discouraged","currently"]},{"Key":"being discouraged","Fragments":["in"]},{"Key":"discouraged in","Fragments":["favor"]},{"Key":"of `:require`","Fragments":["`:refer`"]},{"Key":"`:require` `:refer`","Fragments":["http://dev.clojure.org/jira/browse/CLJ-879"]},{"Key":"* I","Fragments":["think","believe"]},{"Key":"the common","Fragments":["practice"]},{"Key":"practice for","Fragments":["`ns`","me","`?`","me"]},{"Key":"for `ns`","Fragments":["is"]},{"Key":"`ns` is","Fragments":["to","considered"]},{"Key":"to group","Fragments":["all"]},{"Key":"group all","Fragments":["closing"]},{"Key":"all closing","Fragments":["parens","parentheses"]},{"Key":"* L9:","Fragments":["Do"]},{"Key":"L9: Do","Fragments":["you"]},{"Key":"call `seq`","Fragments":["here?"]},{"Key":"clojure n00b,","Fragments":["but..."]},{"Key":"lot going","Fragments":["on"]},{"Key":"on in","Fragments":["one","the","several","'verse'."]},{"Key":"one line.","Fragments":["Maybe","I"]},{"Key":"line. Maybe","Fragments":["put"]},{"Key":"Maybe put","Fragments":["some"]},{"Key":"put some","Fragments":["of"]},{"Key":"it into","Fragments":["a","two","a","a","existing","a","its","it's","a","a","a","vectors","a"]},{"Key":" `re-seq`","Fragments":["might"]},{"Key":"`re-seq` might","Fragments":["read"]},{"Key":"might read","Fragments":["better?","nicer"]},{"Key":" Right,","Fragments":["I","this"]},{"Key":"Right, I","Fragments":["will"]},{"Key":"will add","Fragments":["bindings"]},{"Key":"add bindings","Fragments":["with"]},{"Key":"with meaningful","Fragments":["names","names","names","names.","binding","names","names","names","names","names,"]},{"Key":"nucleotides so","Fragments":["that"]},{"Key":"that representation","Fragments":["will"]},{"Key":"representation will","Fragments":["become"]},{"Key":"become implementation","Fragments":["detail."]},{"Key":" Interesting.","Fragments":["You","I","I","I"]},{"Key":"Interesting. You","Fragments":["might"]},{"Key":"might double-check","Fragments":[":)"]},{"Key":"double-check :)","Fragments":[":"]},{"Key":" $","Fragments":["lein"]},{"Key":"$ lein","Fragments":["exec"]},{"Key":"lein exec","Fragments":["bob_test.clj"]},{"Key":" Testing","Fragments":["bob.test","bob.test","separate"]},{"Key":" Ran","Fragments":["12","14","6"]},{"Key":"Ran 12","Fragments":["tests"]},{"Key":"12 tests","Fragments":["containing"]},{"Key":"tests containing","Fragments":["12","14","6"]},{"Key":"containing 12","Fragments":["assertions."]},{"Key":" 0","Fragments":["failures,","99","\"...\""]},{"Key":"0 failures,","Fragments":["0"]},{"Key":"failures, 0","Fragments":["errors.","errors.","errors."]},{"Key":"It's definitely","Fragments":["possible"]},{"Key":"definitely possible","Fragments":["to"]},{"Key":"to bind","Fragments":["an","a","the","the","`blank?`"]},{"Key":"bind an","Fragments":["unbound"]},{"Key":"an unbound","Fragments":["var"]},{"Key":"unbound var","Fragments":["to"]},{"Key":"an interned","Fragments":["one."]},{"Key":"interned one.","Fragments":["Try"]},{"Key":"one. Try","Fragments":["it"]},{"Key":"Try it","Fragments":["in"]},{"Key":" user=\u0026gt;","Fragments":["(def","(add","(require","(def","(silence?","(macroexpand-1","(macroexpand-1","(def","(time","(time","(time","(time","(time","(time","(#{\\a","(#{\\a","(#{\\a","(#{\\a","(#{\\a","(#{\\a"]},{"Key":"user=\u0026gt; (def","Fragments":["add","silence?","word"]},{"Key":"(def add","Fragments":["+)"]},{"Key":"user=\u0026gt; (add","Fragments":["1"]},{"Key":"(add 1","Fragments":["1)"]},{"Key":"user=\u0026gt; (require","Fragments":["'[clojure.string"]},{"Key":"(require '[clojure.string","Fragments":[":refer"]},{"Key":"'[clojure.string :refer","Fragments":["[blank?]])"]},{"Key":"(def silence?","Fragments":["blank?)","s/blank?)"]},{"Key":"user=\u0026gt; (silence?","Fragments":["\"\")"]},{"Key":" Either","Fragments":["way,"]},{"Key":"Either way,","Fragments":["there's","no","there's","there"]},{"Key":"way, there's","Fragments":["a","more"]},{"Key":"there's a","Fragments":["better","core","nice","cleaner","better","better","better","way","better","function","reasonably","third","good","lot","possibility","performance","way","more","more","positive","much","special","more","built-in","more","pre-made","time","better"]},{"Key":"solution. The","Fragments":["`ns`"]},{"Key":"The `ns`","Fragments":["macro"]},{"Key":"macro can","Fragments":["take","be"]},{"Key":"can take","Fragments":["a","a","just","advantage","advantage","an","advantage","multiple","care","a","a","advantage","a"]},{"Key":"a `:rename`","Fragments":["argument"]},{"Key":"`:rename` argument","Fragments":["with"]},{"Key":"argument with","Fragments":["a"]},{"Key":":refer [blank?","Fragments":["upper-case]","upper-case]])"]},{"Key":" :rename","Fragments":["{blank?"]},{"Key":":rename {blank?","Fragments":["silence?}]))"]},{"Key":"This doesn't","Fragments":["seem","work:","pass","seem"]},{"Key":"to work.","Fragments":["Try","ref,","I'm","The"]},{"Key":"work. Try","Fragments":["changing"]},{"Key":"Try changing","Fragments":["`(def"]},{"Key":"changing `(def","Fragments":["slience?"]},{"Key":"`(def slience?","Fragments":["...`"]},{"Key":"slience? ...`","Fragments":["to"]},{"Key":"...` to","Fragments":["a"]},{"Key":"a `(defn","Fragments":["...`"]},{"Key":" Okay,","Fragments":["so","now","another","sounds"]},{"Key":"Okay, so","Fragments":["nitpicking"]},{"Key":"so nitpicking","Fragments":["from"]},{"Key":"nitpicking from","Fragments":["my"]},{"Key":"from my","Fragments":["phone","behalf.","read,"]},{"Key":"phone wasn't","Fragments":["the"]},{"Key":"wasn't the","Fragments":["best","kind"]},{"Key":"best idea","Fragments":["--"]},{"Key":"idea --","Fragments":["it"]},{"Key":"doesn't consolidate","Fragments":["beverage"]},{"Key":"consolidate beverage","Fragments":["type,"]},{"Key":"beverage type,","Fragments":["but"]},{"Key":"type, but","Fragments":["I"]},{"Key":"still fine.","Fragments":[":)"]},{"Key":"Moving checks","Fragments":["to"]},{"Key":"checks to","Fragments":["non-public","non-public","(non-public?)","response,","response,"]},{"Key":"to non-public","Fragments":["helpers","functions","functions","functions"]},{"Key":"non-public helpers","Fragments":["(non-public","further"]},{"Key":"helpers (non-public","Fragments":["part"]},{"Key":"(non-public part","Fragments":["is"]},{"Key":"part is","Fragments":["optional","unnecessary.","a"]},{"Key":"is optional","Fragments":["of"]},{"Key":"optional of","Fragments":["course)"]},{"Key":"of course)","Fragments":["would"]},{"Key":"course) would","Fragments":["help"]},{"Key":"with readability.","Fragments":["Java"]},{"Key":"readability. Java","Fragments":["string"]},{"Key":"Java string","Fragments":["API","methods"]},{"Key":"string API","Fragments":["has"]},{"Key":"API has","Fragments":["a"]},{"Key":"has a","Fragments":["more","fair","lot","pretty","better","simple","replace","certain","great-named","redundant","name!","couple","function","`split`","function","specific","form","connotation","`use`","suggestion","bit","meaningful","call","bit","`frequencies`","`frequencies`","built","really","trim","compliment"]},{"Key":"succint method","Fragments":["of"]},{"Key":"method of","Fragments":["checking","singing"]},{"Key":"of checking","Fragments":["that"]},{"Key":"a particular","Fragments":["substring","learning","day.","namespace","reason"]},{"Key":"particular substring","Fragments":["is"]},{"Key":"substring is","Fragments":["at"]},{"Key":"is at","Fragments":["the","a","the","odds"]},{"Key":"given string.","Fragments":["Optionally,"]},{"Key":"string. Optionally,","Fragments":["you"]},{"Key":"Optionally, you","Fragments":["can","could"]},{"Key":"treat string","Fragments":["as"]},{"Key":"string as","Fragments":["a","a","a"]},{"Key":"needed) and","Fragments":["use"]},{"Key":"use standard","Fragments":["clojure"]},{"Key":"standard clojure","Fragments":["sequence"]},{"Key":"clojure sequence","Fragments":["related"]},{"Key":" Nah","Fragments":["..."]},{"Key":"Nah ...","Fragments":["the"]},{"Key":"... the","Fragments":["last","`(apply"]},{"Key":"last time","Fragments":["I","I"]},{"Key":"time I","Fragments":["suggested","looked","see","decided","force","added","looked","tried."]},{"Key":"I suggested","Fragments":["something","such"]},{"Key":"suggested something","Fragments":["I"]},{"Key":"something I","Fragments":["did","have","have"]},{"Key":"did something","Fragments":["wrong","similar"]},{"Key":"wrong and","Fragments":["Katrina"]},{"Key":"and Katrina","Fragments":["got"]},{"Key":"Katrina got","Fragments":["mad"]},{"Key":"got mad","Fragments":["at"]},{"Key":"mad at","Fragments":["me."]},{"Key":"at me.","Fragments":["I"]},{"Key":"me. I","Fragments":["leave","cannot","think","think","should","really"]},{"Key":"I leave","Fragments":["it"]},{"Key":"leave it","Fragments":["to","out","at","for","under"]},{"Key":"that case,","Fragments":["what"]},{"Key":"case, what","Fragments":["would"]},{"Key":"using `letfn`","Fragments":["for","maybe?","do"]},{"Key":"`letfn` for","Fragments":["those?","defining"]},{"Key":"nice, quite","Fragments":["easy"]},{"Key":"quite easy","Fragments":["to"]},{"Key":"follow the","Fragments":["flow"]},{"Key":"the flow","Fragments":["of","in","was","of","a"]},{"Key":"flow of","Fragments":["things.","logic"]},{"Key":"of things.","Fragments":["I"]},{"Key":"things. I","Fragments":["wish","wonder"]},{"Key":"wish I'd","Fragments":["thought","thought","thought"]},{"Key":"I'd thought","Fragments":["to","of","I","of"]},{"Key":"look for","Fragments":["\"format\"!","a"]},{"Key":"for \"format\"!","Fragments":["I"]},{"Key":"\"format\"! I","Fragments":["was"]},{"Key":"was just","Fragments":["concatenating","an","checking,","reading","nitpicking.","wrong","an"]},{"Key":"just concatenating","Fragments":["a"]},{"Key":"concatenating a","Fragments":["bunch"]},{"Key":"a bunch","Fragments":["of","of","of","of","of","of"]},{"Key":"bunch of","Fragments":["stuff","calls","different","helper","code","identical"]},{"Key":"of stuff","Fragments":["together","at","crammed","crammed"]},{"Key":"stuff together","Fragments":["with"]},{"Key":"with str,","Fragments":["which"]},{"Key":"str, which","Fragments":["seems"]},{"Key":"seems less","Fragments":["sophisticated..."]},{"Key":"the drill.","Fragments":["I"]},{"Key":"drill. I","Fragments":["only"]},{"Key":"I only","Fragments":["learn","use","have","have","suggest"]},{"Key":"only learn","Fragments":["if"]},{"Key":"learn if","Fragments":["someone"]},{"Key":"someone takes","Fragments":["my"]},{"Key":"takes my","Fragments":["code","brain"]},{"Key":"my code","Fragments":["and","in","as","asap.","to","more","-","too,","after","not","just","[here](http://exercism.io/submissions/b8c3488e829df35bb8831ea3)"]},{"Key":"and bikesheds","Fragments":["with"]},{"Key":"bikesheds with","Fragments":["me"]},{"Key":"with me","Fragments":["about"]},{"Key":"me about","Fragments":["every","Clojure","the"]},{"Key":"about every","Fragments":["detail."]},{"Key":"every detail.","Fragments":["I"]},{"Key":"detail. I","Fragments":["really"]},{"Key":"really appreciate","Fragments":["you","the","feedback","feedback","the","it."]},{"Key":"appreciate you","Fragments":["taking","pointing","taking"]},{"Key":"you taking","Fragments":["time","the"]},{"Key":"taking time","Fragments":["for"]},{"Key":"time for","Fragments":["that.","me"]},{"Key":"for that.","Fragments":["This","You","The","Have"]},{"Key":"that. This","Fragments":["whole"]},{"Key":"This whole","Fragments":["exercism","test"]},{"Key":"whole exercism","Fragments":["thing"]},{"Key":"exercism thing","Fragments":["needs"]},{"Key":"thing needs","Fragments":["much"]},{"Key":"needs much","Fragments":["more"]},{"Key":"more people","Fragments":["like"]},{"Key":"people like","Fragments":["you."]},{"Key":"What is","Fragments":["wrong","the","```x```?","```x```","```x```","the"]},{"Key":"is wrong","Fragments":["with"]},{"Key":"my naming?","Fragments":["It"]},{"Key":"naming? It","Fragments":["is"]},{"Key":"a *word*","Fragments":["and"]},{"Key":"*word* and","Fragments":["a"]},{"Key":"a collection","Fragments":["of","of","independent","which","of","of","of","is","(including","(vector,"]},{"Key":"collection of","Fragments":["*words*.","functions","the","characters","strings","words.","characters","all"]},{"Key":"of *words*.","Fragments":["And"]},{"Key":"*words*. And","Fragments":["I"]},{"Key":"And I","Fragments":["check,","agree","can","think","prefer","would"]},{"Key":"I check,","Fragments":["if"]},{"Key":"check, if","Fragments":["the"]},{"Key":"the currently","Fragments":["*assigned*"]},{"Key":"currently *assigned*","Fragments":["word"]},{"Key":"*assigned* word","Fragments":["out"]},{"Key":"word out","Fragments":["of"]},{"Key":"my collection","Fragments":["is"]},{"Key":"collection is","Fragments":["an","one"]},{"Key":"an *anagram*","Fragments":["(boolean,"]},{"Key":"*anagram* (boolean,","Fragments":["thats"]},{"Key":"(boolean, thats","Fragments":["why"]},{"Key":"thats why","Fragments":["the"]},{"Key":"personally think,","Fragments":["this"]},{"Key":"think, this","Fragments":["is","is"]},{"Key":"very much","Fragments":["harder","going","a","appreciate","simplify","like","like","like"]},{"Key":"much harder","Fragments":["to","to"]},{"Key":"read and","Fragments":["understand","understand","I","will","understand","understand.","the"]},{"Key":"and understand","Fragments":["than","for","the","what's","your"]},{"Key":"understand than","Fragments":["the"]},{"Key":"the one","Fragments":["with","in","that","for","to","downside","on","I","from","test","function,","I"]},{"Key":"one with","Fragments":["`partial`","`filter`","`remove`.","an","a"]},{"Key":"with `partial`","Fragments":["was."]},{"Key":"Very creative","Fragments":["solution"]},{"Key":"creative solution","Fragments":[":)"]},{"Key":"it. Let's","Fragments":["see"]},{"Key":"Let's see","Fragments":["what","whether"]},{"Key":"what other","Fragments":["nitpickers"]},{"Key":"nitpickers think","Fragments":["of"]},{"Key":" From","Fragments":["what","the","[the","there"]},{"Key":"From what","Fragments":["I","I"]},{"Key":"can tell,","Fragments":["It's"]},{"Key":"tell, It's","Fragments":["often"]},{"Key":"It's often","Fragments":["more","good"]},{"Key":"often more","Fragments":["idiomatic"]},{"Key":"use `let`","Fragments":["instead","form,"]},{"Key":"`let` instead","Fragments":["of"]},{"Key":"of `def`","Fragments":["in","for"]},{"Key":"`def` in","Fragments":["functions."]},{"Key":"functions. What","Fragments":["do"]},{"Key":"to @kassandra","Fragments":["I"]},{"Key":"@kassandra I","Fragments":["managed"]},{"Key":"I managed","Fragments":["to"]},{"Key":"managed to","Fragments":["get","interpret","do","generate","shorten","remove"]},{"Key":"the `partial`","Fragments":["function","function","idiom,"]},{"Key":"`partial` function","Fragments":["out","which","there?","application"]},{"Key":"function out","Fragments":["of","into"]},{"Key":"the private","Fragments":["function","helper","functions","functions","methods!"]},{"Key":"function `anagram?`","Fragments":["out"]},{"Key":"`anagram?` out","Fragments":["of"]},{"Key":"function definition","Fragments":["`anagrams-for`.","when"]},{"Key":"definition `anagrams-for`.","Fragments":["Tell"]},{"Key":"`anagrams-for`. Tell","Fragments":["me,"]},{"Key":"Tell me,","Fragments":["what"]},{"Key":"me, what","Fragments":["you","better"]},{"Key":"Why shouldn't","Fragments":["I"]},{"Key":"shouldn't I","Fragments":["use"]},{"Key":"use `partial`","Fragments":["anyway?","for","but","with","but"]},{"Key":"`partial` anyway?","Fragments":["I"]},{"Key":"anyway? I","Fragments":["think"]},{"Key":"much easier","Fragments":["to","to","to","to","to","on","when","to","to","to","to"]},{"Key":"understand for","Fragments":["someone"]},{"Key":"for someone","Fragments":["who","who","in"]},{"Key":"someone who","Fragments":["did","had","knew"]},{"Key":"who did","Fragments":["not"]},{"Key":"not write","Fragments":["this"]},{"Key":"write this","Fragments":["piece","function"]},{"Key":"this piece","Fragments":["of","of"]},{"Key":"Sure, but","Fragments":["I'm"]},{"Key":"to focus","Fragments":["on"]},{"Key":"focus on","Fragments":["the","expressive,"]},{"Key":"the Haskell","Fragments":["exercises"]},{"Key":"Haskell exercises","Fragments":["for"]},{"Key":"exercises for","Fragments":["a"]},{"Key":"a while","Fragments":["before","with","to","longer","to","to","to","we"]},{"Key":"while before","Fragments":["I"]},{"Key":"get back","Fragments":["to","the","the","to"]},{"Key":"to improving","Fragments":["the"]},{"Key":"improving the","Fragments":["specs.","`:ignored`"]},{"Key":" Basically","Fragments":["I","just"]},{"Key":"Basically I","Fragments":["see"]},{"Key":"right solution","Fragments":["to"]},{"Key":"of problem","Fragments":["as"]},{"Key":"problem as","Fragments":["follows:","outlined"]},{"Key":"as follows:","Fragments":["have"]},{"Key":"follows: have","Fragments":["the"]},{"Key":"the participant","Fragments":["create","to"]},{"Key":"participant create","Fragments":["a"]},{"Key":"a module","Fragments":["that","that"]},{"Key":"module that","Fragments":["implements","takes"]},{"Key":"that implements","Fragments":["an"]},{"Key":"implements an","Fragments":["'opaque"]},{"Key":"an 'opaque","Fragments":["data"]},{"Key":"'opaque data","Fragments":["structure'"]},{"Key":"data structure'","Fragments":["to"]},{"Key":"structure' to","Fragments":["solve"]},{"Key":"the problem.","Fragments":["The","`clojure.string/blank?`","It","But","The","The","For"]},{"Key":"problem. The","Fragments":["tests","body","code"]},{"Key":"The tests","Fragments":["would","don’t","show","show","require","might"]},{"Key":"tests would","Fragments":["use","not","have"]},{"Key":"would use","Fragments":["only","`s/split`","the","_require_","more"]},{"Key":"use only","Fragments":["public","alias","core","one"]},{"Key":"only public","Fragments":["constructors","functions"]},{"Key":"public constructors","Fragments":["and"]},{"Key":"constructors and","Fragments":["accessors"]},{"Key":"and accessors","Fragments":["for"]},{"Key":"accessors for","Fragments":["this"]},{"Key":"this data","Fragments":["structure."]},{"Key":"data structure.","Fragments":["This"]},{"Key":"structure. This","Fragments":["way"]},{"Key":"code doesn't","Fragments":["have","format","even","use","work","break","just","just"]},{"Key":"check invariants","Fragments":["all"]},{"Key":"invariants all","Fragments":["over"]},{"Key":"all over","Fragments":["the","the","the","the"]},{"Key":"the place,","Fragments":["and"]},{"Key":"place, and","Fragments":["it"]},{"Key":"be assumed","Fragments":["that"]},{"Key":"the caller","Fragments":["is","if","of"]},{"Key":"caller is","Fragments":["giving"]},{"Key":"is giving","Fragments":["the","me"]},{"Key":"giving the","Fragments":["right","predicates"]},{"Key":"right types","Fragments":["at"]},{"Key":"types at","Fragments":["the"]},{"Key":"the API","Fragments":["boundaries","is","implied"]},{"Key":"API boundaries","Fragments":["(possibly"]},{"Key":"boundaries (possibly","Fragments":["enforced"]},{"Key":"(possibly enforced","Fragments":["by"]},{"Key":"enforced by","Fragments":["the"]},{"Key":"the usage","Fragments":["of","would","of","of","of","of","of","of"]},{"Key":"of types","Fragments":["or"]},{"Key":"types or","Fragments":["records"]},{"Key":"or records","Fragments":["or"]},{"Key":"records or","Fragments":["whatever"]},{"Key":"or whatever","Fragments":["makes"]},{"Key":"whatever makes","Fragments":["sense"]},{"Key":"sense for","Fragments":["the","a","defining"]},{"Key":"the language,","Fragments":["that's","I"]},{"Key":"language, that's","Fragments":["really"]},{"Key":"really up","Fragments":["to","to"]},{"Key":"your opninion,","Fragments":["should"]},{"Key":"opninion, should","Fragments":["the"]},{"Key":"the anonymous","Fragments":["`fn`","functions.","function,","function","function,","function","function","function","function"]},{"Key":"anonymous `fn`","Fragments":["be"]},{"Key":"`fn` be","Fragments":["on"]},{"Key":"line or","Fragments":["on"]},{"Key":"or on","Fragments":["a"]},{"Key":"a separate","Fragments":["line","line","function","var","lines.","function.","val","function","clause","hash-map?","helper","line,","function","methods.","function.","file.","structure","`let`"]},{"Key":"separate line","Fragments":["?","helps"]},{"Key":"least tell","Fragments":["me,"]},{"Key":"tell me,","Fragments":["what"]},{"Key":"what better","Fragments":["method"]},{"Key":"better method","Fragments":["it"]},{"Key":"method it","Fragments":["is,"]},{"Key":"it is,","Fragments":["you","it"]},{"Key":"is, you","Fragments":["are"]},{"Key":"are referring","Fragments":["to,"]},{"Key":"referring to,","Fragments":["please?"]},{"Key":"to, please?","Fragments":["Maybe"]},{"Key":"please? Maybe","Fragments":["that's"]},{"Key":"Maybe that's","Fragments":["what","a"]},{"Key":"that's what","Fragments":["keeps","the","they","this","you","you"]},{"Key":"what keeps","Fragments":["me"]},{"Key":"keeps me","Fragments":["from"]},{"Key":"me from","Fragments":["understanding","using"]},{"Key":"from understanding","Fragments":["your"]},{"Key":"understanding your","Fragments":["approach."]},{"Key":"a PITA","Fragments":["kind"]},{"Key":"PITA kind","Fragments":["of"]},{"Key":"of nitpicking,","Fragments":["but"]},{"Key":"nitpicking, but","Fragments":["code"]},{"Key":"but code","Fragments":["formatting","formatting"]},{"Key":"formatting in","Fragments":["`anagrams-for`","`responseLookup`","your"]},{"Key":"in `anagrams-for`","Fragments":["is","along"]},{"Key":"`anagrams-for` is","Fragments":["a","a"]},{"Key":"misleading. It","Fragments":["would"]},{"Key":"readability to","Fragments":["move","make","put","use","alter"]},{"Key":"move `(fn","Fragments":["[candidiate]`"]},{"Key":"`(fn [candidiate]`","Fragments":["part"]},{"Key":"[candidiate]` part","Fragments":["to"]},{"Key":"part to","Fragments":["it's"]},{"Key":"to it's","Fragments":["own","basic","upper","probably"]},{"Key":"line and","Fragments":["preserve","using","the","have"]},{"Key":"and preserve","Fragments":["proper"]},{"Key":"preserve proper","Fragments":["indentation."]},{"Key":"proper indentation.","Fragments":["Another"]},{"Key":"indentation. Another","Fragments":["thing"]},{"Key":"Another thing","Fragments":["is","to","-","you","you","to"]},{"Key":"of names.","Fragments":["That's"]},{"Key":"names. That's","Fragments":["entirely"]},{"Key":"That's entirely","Fragments":["personal","a"]},{"Key":"entirely personal","Fragments":["preference"]},{"Key":"personal preference","Fragments":["this,","(some","but","but","really."]},{"Key":"preference this,","Fragments":["but"]},{"Key":"this, but","Fragments":["I","from","that's"]},{"Key":"use non-abbreviated","Fragments":["words"]},{"Key":"non-abbreviated words","Fragments":["-"]},{"Key":"words -","Fragments":["it"]},{"Key":"really makes","Fragments":["it","it","a"]},{"Key":"read. Also","Fragments":["`word-chars`"]},{"Key":"Also `word-chars`","Fragments":["does"]},{"Key":"`word-chars` does","Fragments":["not"]},{"Key":"not tell","Fragments":["much"]},{"Key":"tell much","Fragments":["-"]},{"Key":"much -","Fragments":["maybe","at"]},{"Key":"- maybe","Fragments":["something","it","I'm","instead","`candidates`","`some`","a"]},{"Key":"maybe something","Fragments":["like"]},{"Key":"like `word-frequencies`?","Fragments":["`word-occurrences`?"]},{"Key":"That really","Fragments":["comes"]},{"Key":"really comes","Fragments":["down"]},{"Key":"comes down","Fragments":["to","to"]},{"Key":"the question","Fragments":["of","of","mark","I","you","check","check","mark)","test","could","mark","mark","test","mark,","mark","clause","regexp","regexp","true/false"]},{"Key":"of familiarity.","Fragments":["Higher"]},{"Key":"familiarity. Higher","Fragments":["order"]},{"Key":"are integral","Fragments":["part"]},{"Key":"integral part","Fragments":["of"]},{"Key":"of FP","Fragments":["in"]},{"Key":"FP in","Fragments":["general"]},{"Key":"general and","Fragments":["often"]},{"Key":"and often","Fragments":["come"]},{"Key":"often come","Fragments":["handy"]},{"Key":"come handy","Fragments":["when","here."]},{"Key":"handy when","Fragments":["writing"]},{"Key":"writing in","Fragments":["Clojure","clojure,"]},{"Key":"Clojure in","Fragments":["particular."]},{"Key":"Yeah ...","Fragments":["I","no.","this"]},{"Key":"... I","Fragments":["hate"]},{"Key":"I hate","Fragments":["Java","you.","falling","the","dates"]},{"Key":"hate Java","Fragments":["and"]},{"Key":"Java and","Fragments":["try","there"]},{"Key":"and try","Fragments":["to","to","to","to","to","to"]},{"Key":"it whenever","Fragments":["possible."]},{"Key":"whenever possible.","Fragments":["No"]},{"Key":"possible. No","Fragments":["reason"]},{"Key":"No reason","Fragments":["to"]},{"Key":"not let","Fragments":["you"]},{"Key":"you move","Fragments":["on,"]},{"Key":"on, though.","Fragments":["Looks"]},{"Key":"though. Looks","Fragments":["great."]},{"Key":"This one","Fragments":["is","is","is","is","takes","was","and"]},{"Key":"is correct.","Fragments":["Is"]},{"Key":"correct. Is","Fragments":["there"]},{"Key":"avoid calling","Fragments":["out","`lower-case`"]},{"Key":"calling out","Fragments":["to","to","the"]},{"Key":" Happens","Fragments":["all"]},{"Key":"Happens all","Fragments":["the"]},{"Key":"me ...","Fragments":["it's"]},{"Key":"... it's","Fragments":["somewhat"]},{"Key":"it's somewhat","Fragments":["annoying"]},{"Key":"somewhat annoying","Fragments":["that"]},{"Key":"annoying that","Fragments":["one","I"]},{"Key":"one cannot","Fragments":["delete"]},{"Key":"cannot delete","Fragments":["a"]},{"Key":"delete a","Fragments":["iteration"]},{"Key":"a iteration","Fragments":["(that's"]},{"Key":"iteration (that's","Fragments":["not"]},{"Key":"(that's not","Fragments":["been"]},{"Key":"not been","Fragments":["picked"]},{"Key":"been picked","Fragments":["on)."]},{"Key":"very good.","Fragments":["One"]},{"Key":"good. One","Fragments":["little","minor","small"]},{"Key":"little pick,","Fragments":["though:"]},{"Key":"pick, though:","Fragments":["perhaps"]},{"Key":"though: perhaps","Fragments":["you"]},{"Key":"perhaps you","Fragments":["can","can"]},{"Key":"a clojure.core","Fragments":["function"]},{"Key":"clojure.core function","Fragments":["to"]},{"Key":"element of","Fragments":["a","a","the"]},{"Key":" Now,","Fragments":["in","I"]},{"Key":"Now, in","Fragments":["`response-for`"]},{"Key":"in `response-for`","Fragments":["`str/blank?`","around","doc","look","with","doesn't"]},{"Key":"`response-for` `str/blank?`","Fragments":["is"]},{"Key":"`str/blank?` is","Fragments":["at"]},{"Key":"at a","Fragments":["different","super-DRY","version","glance","number","glance","later","time.","higher","glance.","solution.","glance:","time,","ratio","couple"]},{"Key":"different level","Fragments":["of"]},{"Key":"abstraction than","Fragments":["the"]},{"Key":"other cases.","Fragments":["So,"]},{"Key":"cases. So,","Fragments":["I"]},{"Key":"So, I","Fragments":["think","took","made","caught"]},{"Key":"for naming","Fragments":["purposes.","functions"]},{"Key":"had thought","Fragments":["about","about","about","of"]},{"Key":"that n1k0","Fragments":["but"]},{"Key":"n1k0 but","Fragments":["I"]},{"Key":"didn't have","Fragments":["a","`defn-`."]},{"Key":"I liked","Fragments":["until","the","the","your","it"]},{"Key":"liked until","Fragments":["just"]},{"Key":"until just","Fragments":["now."]},{"Key":"just now.","Fragments":["Please"]},{"Key":"now. Please","Fragments":["check"]},{"Key":"check out","Fragments":["the","the","`inc`","[frequencies](http://clojuredocs.org/clojure_core/clojure.core/frequencies),","http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/ns","`frequencies`","the","the","using","clojure.core's","alphagram","how","my","`frequencies`."]},{"Key":"That may","Fragments":["be","be"]},{"Key":"great \u0026amp;","Fragments":["useful"]},{"Key":"\u0026amp; useful","Fragments":["enhancement"]},{"Key":"useful enhancement","Fragments":["[to"]},{"Key":"enhancement [to","Fragments":["suggest](https://github.com/kytrinyx/exercism.io/issues)"]},{"Key":"[to suggest](https://github.com/kytrinyx/exercism.io/issues)","Fragments":[":)"]},{"Key":"good, though","Fragments":["I'd","I"]},{"Key":"though I'd","Fragments":["personally"]},{"Key":"I'd personally","Fragments":["have","love","return","leave","go"]},{"Key":"personally have","Fragments":["extracted"]},{"Key":"have extracted","Fragments":["`anagram-match?`"]},{"Key":"extracted `anagram-match?`","Fragments":["to"]},{"Key":"`anagram-match?` to","Fragments":["its"]},{"Key":"to its","Fragments":["own","deprecation.","inputs.","factory"]},{"Key":"private function,","Fragments":["for","and","hence","but"]},{"Key":"function, for","Fragments":["readability"]},{"Key":"readability purpose","Fragments":["and"]},{"Key":"purpose and","Fragments":["to"]},{"Key":"to allow","Fragments":["further","re-ordering"]},{"Key":"allow further","Fragments":["composition/reuse…"]},{"Key":"very clear,","Fragments":["but"]},{"Key":"clear, but","Fragments":["has","binding","it"]},{"Key":"but has","Fragments":["a"]},{"Key":"a fair","Fragments":["bit","amount","bit"]},{"Key":"fair bit","Fragments":["of","of"]},{"Key":"the strings.","Fragments":["Any","`0`"]},{"Key":"strings. Any","Fragments":["way"]},{"Key":"DRY this","Fragments":["up"]},{"Key":"up without","Fragments":["losing"]},{"Key":"without losing","Fragments":["too","too"]},{"Key":"losing too","Fragments":["much","much"]},{"Key":"complain about,","Fragments":["so"]},{"Key":"about, so","Fragments":["I"]},{"Key":"get overly","Fragments":["picky..."]},{"Key":"use `n-bottles`","Fragments":["to"]},{"Key":"`n-bottles` to","Fragments":["generate"]},{"Key":"the \"99","Fragments":["bottles\"","bottles...\""]},{"Key":"\"99 bottles\"","Fragments":["clause"]},{"Key":"bottles\" clause","Fragments":["in"]},{"Key":"in `second-line`.","Fragments":["Might"]},{"Key":"`second-line`. Might","Fragments":["decrease"]},{"Key":"Might decrease","Fragments":["readability,"]},{"Key":"decrease readability,","Fragments":["but"]},{"Key":"readability, but","Fragments":["keeps"]},{"Key":"but keeps","Fragments":["the","the"]},{"Key":"type of","Fragments":["beverage","statement?","phrase","phrase,","message's","the","answer,"]},{"Key":"of beverage","Fragments":["in"]},{"Key":"beverage in","Fragments":["one"]},{"Key":"one place.","Fragments":["What"]},{"Key":"place. What","Fragments":["do"]},{"Key":"good. What","Fragments":["do"]},{"Key":"about visibility","Fragments":["of","of"]},{"Key":"visibility of","Fragments":["those","methods?","symbols","your"]},{"Key":"those methods?","Fragments":["I"]},{"Key":"methods? I","Fragments":["think","think"]},{"Key":"think only","Fragments":["`response-for`","`response-for`"]},{"Key":"only `response-for`","Fragments":["should","should"]},{"Key":"`response-for` should","Fragments":["be","be","be"]},{"Key":"not want","Fragments":["them"]},{"Key":"want them","Fragments":["out"]},{"Key":"of response-for,","Fragments":["because"]},{"Key":"response-for, because","Fragments":["they"]},{"Key":"because they","Fragments":["logically","force"]},{"Key":"they logically","Fragments":["belong"]},{"Key":"logically belong","Fragments":["there."]},{"Key":" `bob/yelling?`","Fragments":["that"]},{"Key":"`bob/yelling?` that","Fragments":["returns"]},{"Key":"that returns","Fragments":["if","boolean.","a","an","a","a","a","a"]},{"Key":"returns if","Fragments":["bob's"]},{"Key":"if bob's","Fragments":["being"]},{"Key":"bob's being","Fragments":["yelled"]},{"Key":"being yelled","Fragments":["at"]},{"Key":"yelled at","Fragments":["is"]},{"Key":"not semantically","Fragments":["correct"]},{"Key":"semantically correct","Fragments":["(even"]},{"Key":"correct (even","Fragments":["if"]},{"Key":"(even if","Fragments":["it","they","it's"]},{"Key":"is private),","Fragments":["and"]},{"Key":"private), and","Fragments":["by"]},{"Key":"and by","Fragments":["not"]},{"Key":"by not","Fragments":["having"]},{"Key":"functions within","Fragments":["the"]},{"Key":"the closure,","Fragments":["I"]},{"Key":"closure, I","Fragments":["need"]},{"Key":"pass `message`","Fragments":["explicitly,"]},{"Key":"`message` explicitly,","Fragments":["which"]},{"Key":"explicitly, which","Fragments":["is"]},{"Key":"is ugly","Fragments":["and","as"]},{"Key":"ugly and","Fragments":["less"]},{"Key":"and less","Fragments":["expressive.","expressive"]},{"Key":" `(apply","Fragments":["char"]},{"Key":"`(apply char","Fragments":["nucleotide)`"]},{"Key":"char nucleotide)`","Fragments":["as"]},{"Key":"nucleotide)` as","Fragments":["a"]},{"Key":"a possible","Fragments":["substitute","alternative."]},{"Key":"possible substitute","Fragments":["for"]},{"Key":"substitute for","Fragments":["`(first"]},{"Key":"for `(first","Fragments":["nucleotide)`?"]},{"Key":"`(first nucleotide)`?","Fragments":["I'm"]},{"Key":"nucleotide)`? I'm","Fragments":["still"]},{"Key":"pretty sure","Fragments":["there","I"]},{"Key":" It'd","Fragments":["be"]},{"Key":"It'd be","Fragments":["clearer"]},{"Key":"who had","Fragments":["no"]},{"Key":"had no","Fragments":["idea","idea","previous"]},{"Key":"the program","Fragments":["is","much","much","more",";)","much","even","just"]},{"Key":"program is","Fragments":["supposed"]},{"Key":"is supposed","Fragments":["to"]},{"Key":"to do,","Fragments":["but","especially","but","so","you"]},{"Key":"do, but","Fragments":["I'd","that's"]},{"Key":"but I'd","Fragments":["wager","rather","hate","prefer","use","rather","welcome"]},{"Key":"I'd wager","Fragments":["that"]},{"Key":"wager that","Fragments":["someone"]},{"Key":"that someone","Fragments":["who"]},{"Key":"knew the","Fragments":["general"]},{"Key":"the general","Fragments":["purpose","`coll`.","thrust"]},{"Key":"general purpose","Fragments":["would","random","function"]},{"Key":"purpose would","Fragments":["be"]},{"Key":"be familiar","Fragments":["with"]},{"Key":"the one-character","Fragments":["names,"]},{"Key":"one-character names,","Fragments":["since"]},{"Key":"names, since","Fragments":["they're"]},{"Key":"since they're","Fragments":["basically","known"]},{"Key":"they're basically","Fragments":["\"lingua"]},{"Key":"basically \"lingua","Fragments":["franca\""]},{"Key":"\"lingua franca\"","Fragments":["for"]},{"Key":"franca\" for","Fragments":["someone"]},{"Key":"someone in","Fragments":["that"]},{"Key":"that field.","Fragments":["Or"]},{"Key":"field. Or","Fragments":["at"]},{"Key":"Or at","Fragments":["least"]},{"Key":"least the","Fragments":["keywords","big"]},{"Key":"keywords \"dna\",","Fragments":["\"rna\","]},{"Key":"\"dna\", \"rna\",","Fragments":["and"]},{"Key":"\"rna\", and","Fragments":["\"nucleotides\""]},{"Key":"and \"nucleotides\"","Fragments":["should"]},{"Key":"\"nucleotides\" should","Fragments":["quickly"]},{"Key":"should quickly","Fragments":["yield"]},{"Key":"quickly yield","Fragments":["something"]},{"Key":"yield something","Fragments":["useful"]},{"Key":"something useful","Fragments":["in","w/"]},{"Key":"useful in","Fragments":["Google.","cases"]},{"Key":"So yeah,","Fragments":["I","you"]},{"Key":"yeah, I","Fragments":["can"]},{"Key":"arguments for","Fragments":["both","having"]},{"Key":"both adding","Fragments":["such"]},{"Key":"adding such","Fragments":["a"]},{"Key":"a mapping,","Fragments":["and"]},{"Key":"mapping, and","Fragments":["leaving"]},{"Key":"and leaving","Fragments":["it"]},{"Key":"leaving it","Fragments":["out.","out","as"]},{"Key":"it out.","Fragments":["But",":)","I"]},{"Key":"out. But","Fragments":["since"]},{"Key":"But since","Fragments":["leaving","all","you","you","it's","I"]},{"Key":"since leaving","Fragments":["it"]},{"Key":"it out","Fragments":["is",";)","into","with","and","(even","to","the","anyway.","into","of","like","by"]},{"Key":"out is","Fragments":["shorter,","fine,","that","that"]},{"Key":"is shorter,","Fragments":["I'll"]},{"Key":"shorter, I'll","Fragments":["leave"]},{"Key":"I'll leave","Fragments":["it","my","that"]},{"Key":"extracting test","Fragments":["functions"]},{"Key":"and declare","Fragments":["them"]},{"Key":"declare them","Fragments":["as","with"]},{"Key":"private using","Fragments":["`defn-`?"]},{"Key":"That's my","Fragments":["suggestion,"]},{"Key":"my suggestion,","Fragments":["yes"]},{"Key":"suggestion, yes","Fragments":[":)"]},{"Key":" Of","Fragments":["course","course","course","course"]},{"Key":"course this","Fragments":["would","version"]},{"Key":"would bit","Fragments":["more"]},{"Key":"more verbose,","Fragments":["but","but","since"]},{"Key":"verbose, but","Fragments":["possibly","it","it"]},{"Key":"but possibly","Fragments":["clearer"]},{"Key":"possibly clearer","Fragments":["I"]},{"Key":"clearer I","Fragments":["suspect?"]},{"Key":"think requiring","Fragments":["the"]},{"Key":"requiring the","Fragments":["`clojure.string`","`clojure.string`","`if`"]},{"Key":"namespace refering","Fragments":["only"]},{"Key":"refering only","Fragments":["`lower-case`"]},{"Key":"only `lower-case`","Fragments":["may"]},{"Key":"`lower-case` may","Fragments":["ease"]},{"Key":"may ease","Fragments":["reading"]},{"Key":"ease reading","Fragments":["the"]},{"Key":"reading the","Fragments":["flow","nitpicking","source","code","response-for","book","test,","function).","\"Clojure","wrong"]},{"Key":"flow in","Fragments":["`word-list`."]},{"Key":"Also, how","Fragments":["about"]},{"Key":"way of","Fragments":["chaining","doing","naming","not","converting","generating","extending","keeping","including","encoding","replacing","replacing","adding","naming","selecting","handling","getting","doing","avoiding","doing","delegating","approaching","getting","preventing","writing"]},{"Key":"of chaining","Fragments":["operations","every","in"]},{"Key":"chaining operations","Fragments":["everywhere"]},{"Key":"operations everywhere","Fragments":["to"]},{"Key":"everywhere to","Fragments":["keep"]},{"Key":"by introducing","Fragments":["another"]},{"Key":"introducing another","Fragments":["mapping?"]},{"Key":"another mapping?","Fragments":["Or"]},{"Key":"mapping? Or","Fragments":["do"]},{"Key":"Or do","Fragments":["you","you","you?"]},{"Key":"mean that","Fragments":["I"]},{"Key":"could create","Fragments":["two","groupings","functions","bindings","a","a","a","a","your"]},{"Key":"create two","Fragments":["mappings,"]},{"Key":"two mappings,","Fragments":["one"]},{"Key":"mappings, one","Fragments":["mapping"]},{"Key":"one mapping","Fragments":["the"]},{"Key":"mapping the","Fragments":["DNA","strings","valid"]},{"Key":"the DNA","Fragments":["nucleotides","atoms","string","and","problems","was","sequence,","strand","strands","strand","sequence"]},{"Key":"nucleotides characters","Fragments":["to"]},{"Key":"to atoms,","Fragments":["and"]},{"Key":"atoms, and","Fragments":["a"]},{"Key":"a second","Fragments":["one","argument","argument!","iteration:","to"]},{"Key":"second one","Fragments":["that","is","is","is"]},{"Key":"one that","Fragments":["maps","could","evaluated","excludes","explains","I","tests","can"]},{"Key":"that maps","Fragments":["the","are","can"]},{"Key":"maps the","Fragments":["DNA"]},{"Key":"DNA atoms","Fragments":["to"]},{"Key":"atoms to","Fragments":["RNA"]},{"Key":"to RNA","Fragments":["atoms,","nucleotides"]},{"Key":"RNA atoms,","Fragments":["which"]},{"Key":"atoms, which","Fragments":["I"]},{"Key":"can then","Fragments":["convert","also","get","`count`","send"]},{"Key":"then convert","Fragments":["to","each"]},{"Key":"convert to","Fragments":["characters","uppercase"]},{"Key":"to characters","Fragments":["again?","to"]},{"Key":"Would defining","Fragments":["another"]},{"Key":"defining another","Fragments":["mapping"]},{"Key":"another mapping","Fragments":["to"]},{"Key":"mapping to","Fragments":["alias","vectors","vectors","end"]},{"Key":"alias nucleotide","Fragments":["characters"]},{"Key":"meaningful atoms","Fragments":["enhance"]},{"Key":"atoms enhance","Fragments":["readability"]},{"Key":"of `-›`","Fragments":["here."]},{"Key":"`-›` here.","Fragments":["Have"]},{"Key":"here. Have","Fragments":["you","you"]},{"Key":"`re-seq` instead","Fragments":["of","of","of"]},{"Key":" Felbit:","Fragments":["Definitely"]},{"Key":"Felbit: Definitely","Fragments":["agree"]},{"Key":"Definitely agree","Fragments":["with","on"]},{"Key":"with you","Fragments":["about","on","that"]},{"Key":"the readability.","Fragments":["I"]},{"Key":"readability. I","Fragments":["broke","also","do"]},{"Key":"I broke","Fragments":["out","the"]},{"Key":"broke out","Fragments":["a"]},{"Key":"for splitting","Fragments":["the","words."]},{"Key":"input text","Fragments":["into"]},{"Key":"text into","Fragments":["a"]},{"Key":"a word","Fragments":["list","may","is","with","for","was","can","that","to","is","more","is"]},{"Key":"word list","Fragments":["in","before"]},{"Key":"list in","Fragments":["my","that","it's"]},{"Key":" Etrepum:","Fragments":["Thanks"]},{"Key":"Etrepum: Thanks","Fragments":["for"]},{"Key":"the pointer","Fragments":["on"]},{"Key":"pointer on","Fragments":["-\u0026gt;\u0026gt;."]},{"Key":"on -\u0026gt;\u0026gt;.","Fragments":["I"]},{"Key":"-\u0026gt;\u0026gt;. I","Fragments":["didn't"]},{"Key":"didn't quite","Fragments":["understand"]},{"Key":"quite understand","Fragments":["the","the","the"]},{"Key":"threading functions","Fragments":["until"]},{"Key":"functions until","Fragments":["you"]},{"Key":"helped me","Fragments":["out","passing","simplify","to","a","a"]},{"Key":"me out","Fragments":["here"]},{"Key":"out here","Fragments":[":)"]},{"Key":"That's true.","Fragments":["However,"]},{"Key":"true. However,","Fragments":["you"]},{"Key":"However, you","Fragments":["can","would"]},{"Key":"make use","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"a fact","Fragments":["that"]},{"Key":"that functions","Fragments":["may","and"]},{"Key":"may return","Fragments":["functions:"]},{"Key":"(defn- anagram-checker-for","Fragments":["[word]"]},{"Key":" (let","Fragments":["[processed-word","[{horizontal","[word-lc","[[word1","[lower","[w-processed","[lowerA","[[lb","[converted","[by-case","[name","[not-letter-or-number","[normalized-word","[bottle-count","[str","[x"]},{"Key":"(let [processed-word","Fragments":["(process"]},{"Key":"[processed-word (process","Fragments":["word)]"]},{"Key":" (fn","Fragments":["[assignment]","[p]","[ret","[like]"]},{"Key":"(fn [assignment]","Fragments":["...)))"]},{"Key":" Then","Fragments":["you","`if-let`","your","you","all","look","`clojure.string/upper-case`","you","use"]},{"Key":"Then you","Fragments":["can","can","can","only","can","call","could","can"]},{"Key":"can simply","Fragments":["use","write"]},{"Key":"simply use","Fragments":["`(anagram-checker-for","`blank?`"]},{"Key":"use `(anagram-checker-for","Fragments":["word)`"]},{"Key":"`(anagram-checker-for word)`","Fragments":["to"]},{"Key":"word)` to","Fragments":["build"]},{"Key":"to build","Fragments":["a","the","up","up","the","the","these","this","the","the"]},{"Key":"build a","Fragments":["filtering"]},{"Key":"a filtering","Fragments":["function,"]},{"Key":"filtering function,","Fragments":["without"]},{"Key":"function, without","Fragments":["partial."]},{"Key":"do `(partial","Fragments":["anagram?"]},{"Key":"`(partial anagram?","Fragments":["(process","w)`?"]},{"Key":"anagram? (process","Fragments":["word))`"]},{"Key":"(process word))`","Fragments":["where"]},{"Key":"word))` where","Fragments":["`process`"]},{"Key":"where `process`","Fragments":["is"]},{"Key":"`process` is","Fragments":["either"]},{"Key":"is either","Fragments":["`sort`"]},{"Key":"either `sort`","Fragments":["or"]},{"Key":"`sort` or","Fragments":["anything"]},{"Key":"anything else.","Fragments":["That","On"]},{"Key":"else. That","Fragments":["way,"]},{"Key":"That way,","Fragments":["you"]},{"Key":"way, you","Fragments":["can","have","can"]},{"Key":"can reduce","Fragments":["the","nesting","the"]},{"Key":"Sorry everyone,","Fragments":["I"]},{"Key":"everyone, I","Fragments":["took"]},{"Key":"took a","Fragments":["vacation","look","similar"]},{"Key":"a vacation","Fragments":["and"]},{"Key":"still working","Fragments":["through"]},{"Key":"working through","Fragments":["the","this"]},{"Key":"of room","Fragments":["for"]},{"Key":"for improvement!","Fragments":["FWIW,"]},{"Key":"improvement! FWIW,","Fragments":["I"]},{"Key":"prefer the","Fragments":["vertical","closing","p","look","regular","concise","first","more","use","shorter"]},{"Key":"the vertical","Fragments":["spacing"]},{"Key":"vertical spacing","Fragments":["here."]},{"Key":"... no.","Fragments":["Sorry."]},{"Key":"no. Sorry.","Fragments":["I"]},{"Key":"Sorry. I","Fragments":["actually"]},{"Key":"actually meant","Fragments":["your","as"]},{"Key":"meant your","Fragments":["third","second"]},{"Key":"your third","Fragments":["sentence."]},{"Key":"third sentence.","Fragments":["I"]},{"Key":"sentence. I","Fragments":["just"]},{"Key":"just tried","Fragments":["to"]},{"Key":"write it","Fragments":["down","like","as","without","that","all"]},{"Key":"it down","Fragments":["in","into","nicely.","more"]},{"Key":"down in","Fragments":["my","`range`"]},{"Key":"own words","Fragments":["but"]},{"Key":"words but","Fragments":["couldn't","I'm"]},{"Key":"couldn't -","Fragments":["a"]},{"Key":"- a","Fragments":["pretty","set","simple","factory","simple","regex","string"]},{"Key":"good sign","Fragments":["that","that","that"]},{"Key":"sign that","Fragments":["I","you","using","you"]},{"Key":"are talking","Fragments":["about...","about","about"]},{"Key":"You wrote:","Fragments":["*While"]},{"Key":"wrote: *While","Fragments":["you"]},{"Key":"*While you","Fragments":["are"]},{"Key":"are at","Fragments":["using","using","the","the","least"]},{"Key":"using partial,","Fragments":["why"]},{"Key":"partial, why","Fragments":["not"]},{"Key":"not process","Fragments":["the","the"]},{"Key":"process the","Fragments":["word","`word`","subject","rest?"]},{"Key":"word once","Fragments":["and","for"]},{"Key":"once and","Fragments":["then","then","that","could","reuse","just"]},{"Key":"then just","Fragments":["pass","pass"]},{"Key":"pass it","Fragments":["for","for","to","around”","to","is"]},{"Key":"mean a","Fragments":["sentence"]},{"Key":"a sentence","Fragments":["about","can","with","is"]},{"Key":"sentence about","Fragments":["equality,"]},{"Key":"about equality,","Fragments":["just"]},{"Key":"equality, just","Fragments":["simply"]},{"Key":"just simply","Fragments":["observe"]},{"Key":"simply observe","Fragments":["that"]},{"Key":"observe that","Fragments":["`(="]},{"Key":"that `(=","Fragments":["[1"]},{"Key":"`(= [1","Fragments":["2"]},{"Key":"[1 2","Fragments":["3]","3]","3]"]},{"Key":"2 3]","Fragments":["'(1","#{1","and"]},{"Key":"3] '(1","Fragments":["2"]},{"Key":"'(1 2","Fragments":["3))`,","3)"]},{"Key":"2 3))`,","Fragments":["however"]},{"Key":"3))`, however","Fragments":["`(not="]},{"Key":"however `(not=","Fragments":["[1"]},{"Key":"`(not= [1","Fragments":["2"]},{"Key":"3] #{1","Fragments":["2"]},{"Key":"#{1 2","Fragments":["3})`,","3"]},{"Key":"2 3})`,","Fragments":["where"]},{"Key":"3})`, where","Fragments":["`#{...}`"]},{"Key":"where `#{...}`","Fragments":["is"]},{"Key":"`#{...}` is","Fragments":["literal"]},{"Key":"is literal","Fragments":["for"]},{"Key":"literal for","Fragments":["set.","T"]},{"Key":"please specify,","Fragments":["how"]},{"Key":"specify, how","Fragments":["you"]},{"Key":"your second","Fragments":["sentence?","paragraph"]},{"Key":"second sentence?","Fragments":["I"]},{"Key":"sentence? I","Fragments":["am"]},{"Key":"can follow","Fragments":["you"]},{"Key":"follow you","Fragments":["here"]},{"Key":"you here","Fragments":["entirely."]},{"Key":"here entirely.","Fragments":["Sorry"]},{"Key":"entirely. Sorry","Fragments":["for"]},{"Key":"for stupid","Fragments":["questions"]},{"Key":"stupid questions","Fragments":["-"]},{"Key":"questions -","Fragments":["I"]},{"Key":"to FP","Fragments":["and"]},{"Key":"FP and","Fragments":["especially"]},{"Key":"and especially","Fragments":["Clojure..."]},{"Key":" Destructuring","Fragments":["may"]},{"Key":"Destructuring may","Fragments":["be"]},{"Key":"of familiarity","Fragments":["and/or","and"]},{"Key":"familiarity and/or","Fragments":["preference"]},{"Key":"and/or preference","Fragments":["-"]},{"Key":"preference -","Fragments":["anyway,","I","I"]},{"Key":"- anyway,","Fragments":["it"]},{"Key":"anyway, it","Fragments":["can"]},{"Key":"be insanely","Fragments":["helpful"]},{"Key":"insanely helpful","Fragments":["in"]},{"Key":"helpful in","Fragments":["some","uncluttering"]},{"Key":"in some","Fragments":["cases.","past","of","places","earlier","cases?","cases","way?"]},{"Key":"some cases.","Fragments":["In"]},{"Key":"cases. In","Fragments":["the"]},{"Key":"the end,","Fragments":["agreed","it","but","it's"]},{"Key":"end, agreed","Fragments":["on"]},{"Key":"agreed on","Fragments":["the"]},{"Key":"the `.endsWith`,","Fragments":["that"]},{"Key":"`.endsWith`, that","Fragments":["is"]},{"Key":"a justified","Fragments":["case"]},{"Key":"justified case","Fragments":["for"]},{"Key":"for using","Fragments":["java","clojure","'mapcat'","`defn-`"]},{"Key":"using java","Fragments":["interop.","interop"]},{"Key":" Importing","Fragments":["the"]},{"Key":"Importing the","Fragments":["`clojure.string`"]},{"Key":"namespace is","Fragments":["a","defined","'word-count',"]},{"Key":"be pretty","Fragments":["gobsmacked","bad","dense","useful.","cool."]},{"Key":"pretty gobsmacked","Fragments":["if"]},{"Key":"gobsmacked if","Fragments":["a"]},{"Key":"a language","Fragments":["called","barrier","head-first","that","that"]},{"Key":"language called","Fragments":["clojure"]},{"Key":"called clojure","Fragments":["didn't"]},{"Key":"clojure didn't","Fragments":["support"]},{"Key":"didn't support","Fragments":["closures."]},{"Key":"need `vec`.","Fragments":["Lists"]},{"Key":"`vec`. Lists","Fragments":["and"]},{"Key":"Lists and","Fragments":["vectors"]},{"Key":"and vectors","Fragments":["with","with"]},{"Key":"vectors with","Fragments":["the","the"]},{"Key":"same contents","Fragments":["are","are","are"]},{"Key":"contents are","Fragments":["equal.","equal.","equal."]},{"Key":"are equal.","Fragments":["While","`seq`","Threading"]},{"Key":"equal. While","Fragments":["you"]},{"Key":"While you","Fragments":["are","can"]},{"Key":"using `partial`,","Fragments":["why"]},{"Key":"`partial`, why","Fragments":["not"]},{"Key":"the `word`","Fragments":["once","argument","to","argument","2"]},{"Key":"`word` once","Fragments":["and","for"]},{"Key":"for comparison?","Fragments":["Performance"]},{"Key":"comparison? Performance","Fragments":["hint:"]},{"Key":"Performance hint:","Fragments":["by"]},{"Key":"hint: by","Fragments":["simply"]},{"Key":"by simply","Fragments":["swapping","finding"]},{"Key":"`sort` with","Fragments":["another","other","another","another"]},{"Key":"with another","Fragments":["core","core","core","exercise,"]},{"Key":" Hi.","Fragments":["I","Yes,"]},{"Key":"Hi. I","Fragments":["had"]},{"Key":"had destructuring","Fragments":["for"]},{"Key":"destructuring for","Fragments":["my","maps."]},{"Key":"first solution","Fragments":["and","I"]},{"Key":"solution and","Fragments":["removed","applied","improve","decided","I","then"]},{"Key":"and removed","Fragments":["it","`seq-to-dna`","blanks"]},{"Key":"make response-for","Fragments":["more"]},{"Key":"response-for more","Fragments":["readable"]},{"Key":"readable in","Fragments":["response","that","the"]},{"Key":"in response","Fragments":["to"]},{"Key":"response to","Fragments":["some","shouting","a","a","a","a"]},{"Key":"some feedback","Fragments":["that","that"]},{"Key":"I agreed","Fragments":["with.","with"]},{"Key":"Good points","Fragments":["re:"]},{"Key":"points re:","Fragments":["responseLookup"]},{"Key":"re: responseLookup","Fragments":["and"]},{"Key":"responseLookup and","Fragments":["hash"]},{"Key":"and hash","Fragments":["map"]},{"Key":"hash map","Fragments":["ordering."]},{"Key":"with using","Fragments":["seq","regular","the","`ordered-set`","both"]},{"Key":"using seq","Fragments":["functions"]},{"Key":"seq functions","Fragments":["as","that"]},{"Key":"to ```.endsWith```.","Fragments":["```(="]},{"Key":"```.endsWith```. ```(=","Fragments":["(last"]},{"Key":"utterance) \\?)```","Fragments":["doesn't"]},{"Key":"\\?)``` doesn't","Fragments":["scan"]},{"Key":"doesn't scan","Fragments":["as"]},{"Key":"scan as","Fragments":["well"]},{"Key":"well IMO.","Fragments":["I"]},{"Key":"IMO. I","Fragments":["guess"]},{"Key":"could wrap","Fragments":["in"]},{"Key":"wrap in","Fragments":["a"]},{"Key":"a ```ends-with?```","Fragments":["function"]},{"Key":"```ends-with?``` function","Fragments":["but"]},{"Key":"function but","Fragments":["I","it","it","given"]},{"Key":"really see","Fragments":["the","anything"]},{"Key":"pretty short","Fragments":["solution"]},{"Key":"short solution","Fragments":["I"]},{"Key":"with after","Fragments":["reading"]},{"Key":"after reading","Fragments":["the"]},{"Key":"the nitpicking","Fragments":["of"]},{"Key":"nitpicking of","Fragments":["the"]},{"Key":"iteration. Please","Fragments":["tell"]},{"Key":"Please tell","Fragments":["me"]},{"Key":"me what","Fragments":["you"]},{"Key":"the nitpick,","Fragments":["I"]},{"Key":"nitpick, I","Fragments":["will"]},{"Key":"will think","Fragments":["about"]},{"Key":"to come","Fragments":["up","back","before","up","back","with"]},{"Key":" Btw,","Fragments":["I"]},{"Key":"Btw, I","Fragments":["didn't"]},{"Key":"that sort","Fragments":["also","of","of"]},{"Key":"sort also","Fragments":["works"]},{"Key":"also works","Fragments":["for","without"]},{"Key":"works for","Fragments":["strings.","the"]},{"Key":"for strings.","Fragments":["I","Using"]},{"Key":"strings. I","Fragments":["appreciate"]},{"Key":"you pointing","Fragments":["that"]},{"Key":"pointing that","Fragments":["out!"]},{"Key":"that out!","Fragments":[":)"]},{"Key":"you be","Fragments":["willing","more"]},{"Key":"be willing","Fragments":["to","to"]},{"Key":"willing to","Fragments":["put","give","pursue","give"]},{"Key":"put together","Fragments":["a"]},{"Key":"together a","Fragments":["pull","bit."]},{"Key":"a pull","Fragments":["request","request","request","request"]},{"Key":"pull request","Fragments":["that","merged","with","for","and"]},{"Key":"request that","Fragments":["makes"]},{"Key":"that makes","Fragments":["the","their","for","it","it","sense.","sense.","it","the","a","this","sense.","reduce","sense,"]},{"Key":"input validation","Fragments":["better?","in","would","from","from","from","somehwere"]},{"Key":"with @stanford","Fragments":["in"]},{"Key":"@stanford in","Fragments":["that"]},{"Key":"particular case.","Fragments":["Of"]},{"Key":"case. Of","Fragments":["course","course","course!"]},{"Key":"course it","Fragments":["comes"]},{"Key":"to context","Fragments":["and/or"]},{"Key":"context and/or","Fragments":["personal"]},{"Key":"and/or personal","Fragments":["preference."]},{"Key":" Yeah.","Fragments":["[In","My"]},{"Key":"Yeah. [In","Fragments":["my"]},{"Key":"[In my","Fragments":["case](http://exercism.io/n1k0/clojure/word-count)"]},{"Key":"my case](http://exercism.io/n1k0/clojure/word-count)","Fragments":["the"]},{"Key":"case](http://exercism.io/n1k0/clojure/word-count) the","Fragments":["flow"]},{"Key":"flow was","Fragments":["probably"]},{"Key":"probably easier","Fragments":["to"]},{"Key":"read using","Fragments":["`-››`","[-\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E)"]},{"Key":"using `-››`","Fragments":[":)"]},{"Key":"Yeah, matter","Fragments":["of"]},{"Key":"of taste","Fragments":["I","and","though.","to"]},{"Key":"taste I","Fragments":["guess."]},{"Key":"guess. This","Fragments":["code"]},{"Key":"code reads","Fragments":["\"compute","using"]},{"Key":"reads \"compute","Fragments":["the"]},{"Key":"\"compute the","Fragments":["frequencies"]},{"Key":"the frequencies","Fragments":["OF","function"]},{"Key":"frequencies OF","Fragments":["the"]},{"Key":"OF the","Fragments":["phrase's"]},{"Key":"the phrase's","Fragments":["words\",","words"]},{"Key":"phrase's words\",","Fragments":["while"]},{"Key":"words\", while","Fragments":["the"]},{"Key":"the \"threaded\"","Fragments":["version"]},{"Key":"\"threaded\" version","Fragments":["would"]},{"Key":"version would","Fragments":["read","require"]},{"Key":"would read","Fragments":["\"get","easier"]},{"Key":"read \"get","Fragments":["the"]},{"Key":"\"get the","Fragments":["phrase's"]},{"Key":"phrase's words","Fragments":["AND"]},{"Key":"words AND","Fragments":["compute"]},{"Key":"AND compute","Fragments":["their"]},{"Key":"compute their","Fragments":["frequencies\"."]},{"Key":"find the","Fragments":["first","closing","line","use","example,","function.","\"includes-letters?\"","`make-comparable`","score-letter","solutions","`cond`","version","nested","solution","degree","aliases","right","conversion"]},{"Key":"first one","Fragments":["often","that","are","is","isn't","rather","is"]},{"Key":"one often","Fragments":["easier"]},{"Key":"often easier","Fragments":["to"]},{"Key":"to read,","Fragments":["but","and","if","in"]},{"Key":"read, but","Fragments":["indeed,","I"]},{"Key":"but indeed,","Fragments":["when"]},{"Key":"indeed, when","Fragments":["there's"]},{"Key":"there's too","Fragments":["many"]},{"Key":"too many","Fragments":["function","one-offs","newlines","conditionals"]},{"Key":"many function","Fragments":["calls,"]},{"Key":"function calls,","Fragments":["it"]},{"Key":"calls, it","Fragments":["gets"]},{"Key":"it gets","Fragments":["impossible","the","a","a","replaced","into"]},{"Key":"gets impossible","Fragments":["to"]},{"Key":"impossible to","Fragments":["follow,"]},{"Key":"to follow,","Fragments":["and","especially","although"]},{"Key":"follow, and","Fragments":["then"]},{"Key":"the thread","Fragments":["operator.","last","last","last","macro"]},{"Key":"personally love","Fragments":["reading"]},{"Key":"love reading","Fragments":["stuff"]},{"Key":"reading stuff","Fragments":["from"]},{"Key":"stuff from","Fragments":["left","each","the"]},{"Key":"from left","Fragments":["to","to"]},{"Key":"to right,","Fragments":["though"]},{"Key":"right, though","Fragments":["this"]},{"Key":"mostly matter","Fragments":["of","of"]},{"Key":"just wanted","Fragments":["to","to","to","to","to"]},{"Key":"to ensure","Fragments":["you","that","that","that","that","that","that","all","that","there"]},{"Key":"ensure you","Fragments":["considered"]},{"Key":"that option","Fragments":[":)"]},{"Key":" (I'm","Fragments":["an"]},{"Key":"(I'm an","Fragments":["admin"]},{"Key":"an admin","Fragments":["here"]},{"Key":"admin here","Fragments":["too,"]},{"Key":"here too,","Fragments":["can"]},{"Key":"too, can","Fragments":["you"]},{"Key":"can you","Fragments":["believe","think","make","check","give","be","use","find"]},{"Key":"you believe","Fragments":["that?)"]},{"Key":"have, but","Fragments":["I'm"]},{"Key":"still unsure","Fragments":["about"]},{"Key":"about its","Fragments":["use","input","input.","return"]},{"Key":"its use","Fragments":["in"]},{"Key":"in such","Fragments":["cases...","small","way,"]},{"Key":"such cases...","Fragments":["When"]},{"Key":"cases... When","Fragments":["there's"]},{"Key":"When there's","Fragments":["many"]},{"Key":"there's many","Fragments":["nested"]},{"Key":"many nested","Fragments":["calls,"]},{"Key":"nested calls,","Fragments":["I"]},{"Key":"calls, I","Fragments":["do"]},{"Key":"do see","Fragments":["the"]},{"Key":"such small","Fragments":["and"]},{"Key":"small and","Fragments":["concise","focused."]},{"Key":"and concise","Fragments":["calls...","code."]},{"Key":"concise calls...","Fragments":["not"]},{"Key":"calls... not","Fragments":["sure."]},{"Key":"not sure.","Fragments":["Would"]},{"Key":"sure. Would","Fragments":["you"]},{"Key":"you rather","Fragments":["I","not"]},{"Key":"rather I","Fragments":["used"]},{"Key":" Another","Fragments":["inefficiency","thing","way","thing","good","way","way","option","possible","helpful","aside:","thing","thing","thing","way","hint:","way"]},{"Key":"Another inefficiency","Fragments":["-"]},{"Key":"inefficiency -","Fragments":["you"]},{"Key":"are processing","Fragments":["`word`"]},{"Key":"every call","Fragments":["of","of"]},{"Key":"function -","Fragments":["that's","that","it's"]},{"Key":"- that's","Fragments":["unnecessary","a","rather"]},{"Key":"that's unnecessary","Fragments":["overhead."]},{"Key":"the `-›`or","Fragments":["`-››`"]},{"Key":"`-›`or `-››`","Fragments":["macros"]},{"Key":"`-››` macros","Fragments":["here?","for","instead?"]},{"Key":"macros here?","Fragments":[":)"]},{"Key":"Hint: swapping","Fragments":["`sort`"]},{"Key":"with other","Fragments":["core","things"]},{"Key":"make for","Fragments":["significantly","a","a","a","an","an"]},{"Key":"for significantly","Fragments":["more"]},{"Key":"efficient algorithm","Fragments":["(nlogn"]},{"Key":"algorithm (nlogn","Fragments":["vs"]},{"Key":" oups","Fragments":[":)"]},{"Key":"oups :)","Fragments":["Some"]},{"Key":":) Some","Fragments":["previous"]},{"Key":"Some previous","Fragments":["code"]},{"Key":"previous code","Fragments":["copy/pasted"]},{"Key":"code copy/pasted","Fragments":["that"]},{"Key":"copy/pasted that","Fragments":["I"]},{"Key":"forgot here","Fragments":[":("]},{"Key":"tip on","Fragments":["```frequencies```,","the"]},{"Key":"on ```frequencies```,","Fragments":["it"]},{"Key":"```frequencies```, it","Fragments":["does"]},{"Key":"does make","Fragments":["the"]},{"Key":"code much","Fragments":["shorter!","shorter","easier"]},{"Key":"Your loop/recur","Fragments":["construct"]},{"Key":"loop/recur construct","Fragments":["in"]},{"Key":"construct in","Fragments":["`anagrams-for`"]},{"Key":"`anagrams-for` along","Fragments":["with"]},{"Key":"along with","Fragments":["`conj-anagrams`","every","optional","every","hasn't","movement","every","every","the","every","every"]},{"Key":"with `conj-anagrams`","Fragments":["can"]},{"Key":"`conj-anagrams` can","Fragments":["be"]},{"Key":"be written","Fragments":["more","as","as","like","as","as","with","like","as","as","as","as","as","like","`\"Whatever.\"`","in","once?","as","as","more","so","in"]},{"Key":"written more","Fragments":["succintly","idiomatically"]},{"Key":"more succintly","Fragments":["with"]},{"Key":"succintly with","Fragments":["`filter`."]},{"Key":"with `filter`.","Fragments":["`concat`"]},{"Key":"`filter`. `concat`","Fragments":["is"]},{"Key":"`concat` is","Fragments":["completely"]},{"Key":"completely unnecessary","Fragments":["in","because"]},{"Key":"unnecessary in","Fragments":["`sort-chars`.","the","this"]},{"Key":"in `sort-chars`.","Fragments":["There's"]},{"Key":"`sort-chars`. There's","Fragments":["also"]},{"Key":"There's also","Fragments":["more","still","`if-let`","`if-not`/`when-not`","`clojure.string/lower-case`","a","`letfn`","a","a","a","the"]},{"Key":"also more","Fragments":["effective","commonly"]},{"Key":"effective way","Fragments":["of","to","to"]},{"Key":"of doing","Fragments":["a","that.","the","it","this.","this","`(=","the"]},{"Key":"doing a","Fragments":["check","range","rough","few","rewrite."]},{"Key":"for anagram","Fragments":["with"]},{"Key":"anagram with","Fragments":["help"]},{"Key":"with help","Fragments":["of","of","of","of"]},{"Key":"help of","Fragments":["a","`let`","declare.","`declare`.","a","`defn-`","external","`java.lang.Character`'s","`require`"]},{"Key":"past assignments.","Fragments":["Please"]},{"Key":"assignments. Please","Fragments":["also"]},{"Key":"Please also","Fragments":["consider","keep"]},{"Key":"also consider","Fragments":["reducing","using","making"]},{"Key":"consider reducing","Fragments":["processing","the"]},{"Key":"reducing processing","Fragments":["overhead"]},{"Key":"processing overhead","Fragments":["of"]},{"Key":"same word","Fragments":["over","-","over","for","over"]},{"Key":"word over","Fragments":["and","and","and","and","and"]},{"Key":"over and","Fragments":["over.","over","over.","over.","over.","over","over","over","over","over."]},{"Key":"Also, instead","Fragments":["of","of"]},{"Key":"of `default?`","Fragments":["in"]},{"Key":"`default?` in","Fragments":["cond"]},{"Key":"cond you","Fragments":["can"]},{"Key":"simple keyword.","Fragments":["The"]},{"Key":"keyword. The","Fragments":["standard"]},{"Key":"The standard","Fragments":["one"]},{"Key":"standard one","Fragments":["is"]},{"Key":" CamelCased","Fragments":["names"]},{"Key":"CamelCased names","Fragments":["are","are"]},{"Key":"are generally","Fragments":["reserved","used","frowned"]},{"Key":"generally reserved","Fragments":["for"]},{"Key":"reserved for","Fragments":["protocols/types","protocols,","extremely","specific","longer","use","use"]},{"Key":"for protocols/types","Fragments":["and","and"]},{"Key":"protocols/types and","Fragments":["java","Java"]},{"Key":"and java","Fragments":["interop.","interop.","in","in"]},{"Key":"java interop.","Fragments":["Lowercase,","Please"]},{"Key":"interop. Lowercase,","Fragments":["hyphenated"]},{"Key":"Lowercase, hyphenated","Fragments":["names"]},{"Key":"hyphenated names","Fragments":["are","are"]},{"Key":"are preferred","Fragments":["in"]},{"Key":"preferred in","Fragments":["every"]},{"Key":"in every","Fragments":["other","function."]},{"Key":"every other","Fragments":["case.","base"]},{"Key":"other case.","Fragments":["Code"]},{"Key":"case. Code","Fragments":["formatting"]},{"Key":"Code formatting","Fragments":["in","is"]},{"Key":"in `responseLookup`","Fragments":["is"]},{"Key":"`responseLookup` is","Fragments":["a"]},{"Key":"bit weird","Fragments":["for"]},{"Key":"weird for","Fragments":["clojure"]},{"Key":"clojure -","Fragments":["opening"]},{"Key":"opening brace","Fragments":["should"]},{"Key":"brace should","Fragments":["be"]},{"Key":"first expression","Fragments":["and"]},{"Key":"expression and","Fragments":["closing","it"]},{"Key":"and closing","Fragments":["one","brackets."]},{"Key":"closing one","Fragments":["on"]},{"Key":"one on","Fragments":["the","my"]},{"Key":"the last.","Fragments":["No"]},{"Key":"last. No","Fragments":["need"]},{"Key":"No need","Fragments":["to","of","for","to","to","for","to","to","for","to","to","to"]},{"Key":"to resort","Fragments":["to","to","to","to","to"]},{"Key":"resort to","Fragments":["java","Java","`str/join`.","repeatedly","specification"]},{"Key":"to java","Fragments":["interop","array"]},{"Key":"java interop","Fragments":["in","is"]},{"Key":"interop in","Fragments":["`question?`.","that"]},{"Key":"`question?`. Strings","Fragments":["can"]},{"Key":"Strings can","Fragments":["be","be","be","be","be","be","already"]},{"Key":"as sequences","Fragments":["of","of","was","of","in"]},{"Key":"sequences of","Fragments":["characters.","characters","characters.","alphabetic","closing","characters"]},{"Key":"of characters.","Fragments":["`*-from-pair`","You","Character","Consider","I"]},{"Key":"characters. `*-from-pair`","Fragments":["functions"]},{"Key":"`*-from-pair` functions","Fragments":["can"]},{"Key":"functions can","Fragments":["be","be","also"]},{"Key":"be ommitted","Fragments":["with"]},{"Key":"ommitted with","Fragments":["proper"]},{"Key":"with proper","Fragments":["destructuring:","indentation"]},{"Key":"proper destructuring:","Fragments":["http://blog.jayfields.com/2010/07/clojure-destructuring.html"]},{"Key":"destructuring: http://blog.jayfields.com/2010/07/clojure-destructuring.html","Fragments":["."]},{"Key":"http://blog.jayfields.com/2010/07/clojure-destructuring.html .","Fragments":["Anyway"]},{"Key":". Anyway","Fragments":["`response-for`"]},{"Key":"Anyway `response-for`","Fragments":["could"]},{"Key":"`response-for` could","Fragments":["benefit"]},{"Key":"from `drop-while`.","Fragments":["Ouch"]},{"Key":"`drop-while`. Ouch","Fragments":["and"]},{"Key":"Ouch and","Fragments":["another"]},{"Key":"and another","Fragments":["thing"]},{"Key":"another thing","Fragments":["-"]},{"Key":"thing -","Fragments":["please","although","consider"]},{"Key":"- please","Fragments":["keep","add","don't"]},{"Key":"please keep","Fragments":["in","in","in"]},{"Key":"keep in","Fragments":["mind","mind","mind","mind.","mind","mind","mind"]},{"Key":"in mind","Fragments":["that","that","that","that","of","that","though.","that"]},{"Key":"mind that","Fragments":["there","seq-to-rna","you","if","string","predicates"]},{"Key":"that there","Fragments":["are","must","seems",":)","was","must","is","are","aren't","are","is","is","is","is","are"]},{"Key":"are no","Fragments":["ordering","more","matches","matches.","alphabetic"]},{"Key":"no ordering","Fragments":["guaranties"]},{"Key":"ordering guaranties","Fragments":["for"]},{"Key":"guaranties for","Fragments":["hash"]},{"Key":"for hash","Fragments":["maps"]},{"Key":"hash maps","Fragments":["-"]},{"Key":"maps -","Fragments":["as"]},{"Key":"- as","Fragments":["for","@milo","was"]},{"Key":"as for","Fragments":["the"]},{"Key":"one in","Fragments":["`responseLookup`.","calisthenics"]},{"Key":"in `responseLookup`.","Fragments":["More"]},{"Key":"`responseLookup`. More","Fragments":["optimal"]},{"Key":"More optimal","Fragments":["structure"]},{"Key":"optimal structure","Fragments":["could"]},{"Key":"structure could","Fragments":["be"]},{"Key":"a vector","Fragments":["of","to","to","of","of"]},{"Key":"vector of","Fragments":["maps","vectors)","values"]},{"Key":"of maps","Fragments":["like"]},{"Key":"maps like","Fragments":["`[{:matcher"]},{"Key":"like `[{:matcher","Fragments":["silence?"]},{"Key":"`[{:matcher silence?","Fragments":[":response"]},{"Key":"silence? :response","Fragments":["\"...\"}"]},{"Key":":response \"...\"}","Fragments":["{:matcher"]},{"Key":"\"...\"} {:matcher","Fragments":["...}]`."]},{"Key":"{:matcher ...}]`.","Fragments":["Note"]},{"Key":"...}]`. Note","Fragments":["that"]},{"Key":"use destructuring","Fragments":["for","in","to"]},{"Key":"1. CamelCased","Fragments":["names"]},{"Key":"generally used","Fragments":["only","to"]},{"Key":"used only","Fragments":["for","as"]},{"Key":"only for","Fragments":["protocols/types","the","strings","the","your"]},{"Key":"and Java","Fragments":["interop."]},{"Key":"Java interop.","Fragments":["Lowercase"]},{"Key":"interop. Lowercase","Fragments":["hyphenated"]},{"Key":"Lowercase hyphenated","Fragments":["names"]},{"Key":"2. There's","Fragments":["more"]},{"Key":"There's more","Fragments":["effective"]},{"Key":"for anagrams","Fragments":["using","with","of","of"]},{"Key":"anagrams using","Fragments":["a"]},{"Key":"from core","Fragments":["clojure","functions"]},{"Key":"clojure which","Fragments":["you"]},{"Key":"... this","Fragments":["is"]},{"Key":"much the","Fragments":["same","same","same","only"]},{"Key":"as iteration","Fragments":["2"]},{"Key":"iteration 2","Fragments":["..."]},{"Key":"2 ...","Fragments":["just"]},{"Key":"... just","Fragments":["experimenting"]},{"Key":"just experimenting","Fragments":["with"]},{"Key":"experimenting with","Fragments":["a"]},{"Key":"new way","Fragments":["to"]},{"Key":"to submit.","Fragments":["Sorry"]},{"Key":"submit. Sorry","Fragments":["for"]},{"Key":"don't try","Fragments":["to"]},{"Key":"problem within","Fragments":["one"]},{"Key":"within one","Fragments":["big"]},{"Key":"one big","Fragments":["function"]},{"Key":"big function","Fragments":["and"]},{"Key":"that very","Fragments":["much.","readable."]},{"Key":" Some","Fragments":["things","may","things","formatting","things","of"]},{"Key":"Some things","Fragments":["I","to","to"]},{"Key":"to point","Fragments":["you","regarding","out","out"]},{"Key":"1. `use`","Fragments":["is"]},{"Key":"is considered","Fragments":["deprecated","more","shouting.","a"]},{"Key":"considered deprecated","Fragments":["in"]},{"Key":"deprecated in","Fragments":["the","favour"]},{"Key":"Clojure community.","Fragments":["Maybe"]},{"Key":"community. Maybe","Fragments":["you"]},{"Key":"you take","Fragments":["a"]},{"Key":"2. You","Fragments":["definition"]},{"Key":"You definition","Fragments":["of"]},{"Key":"definition of","Fragments":["an","the","what","each","`to-rna`","(yelling?).","Hamming","`:scalene`","anagrams-for","`anagrams-for`","`questions?`"]},{"Key":"an own","Fragments":["`default?`"]},{"Key":"own `default?`","Fragments":["function"]},{"Key":"`default?` function","Fragments":["is"]},{"Key":"function is","Fragments":["somewhat","not","never","*for*?","a","still","so","really","but","more","bounded","your","the","generally","recursive","usually","a","normally","redundant","quite","used","non-idiomatic","a","an","here","mostly","designed"]},{"Key":"is somewhat","Fragments":["redundant","redundant","weird;"]},{"Key":"somewhat redundant","Fragments":["if","to"]},{"Key":"redundant if","Fragments":["you"]},{"Key":"`cond` function","Fragments":["instead"]},{"Key":"a hash-map.","Fragments":["Though"]},{"Key":"hash-map. Though","Fragments":["I"]},{"Key":"Though I","Fragments":["totally","do","wouldn't"]},{"Key":"totally would","Fragments":["understand","agree"]},{"Key":"would understand","Fragments":["you"]},{"Key":"understand you","Fragments":["rather"]},{"Key":"rather not","Fragments":["using","use","use"]},{"Key":"using conditionals","Fragments":["at"]},{"Key":"conditionals at","Fragments":["all."]},{"Key":"3. Your","Fragments":["`response-for`"]},{"Key":"Your `response-for`","Fragments":["function"]},{"Key":"in very","Fragments":["hard"]},{"Key":"very hard","Fragments":["to","to"]},{"Key":"to understand.","Fragments":["Why","I'd","Then","Thoughts?","I","It's","Would"]},{"Key":"understand. Why","Fragments":["didn't"]},{"Key":"Why didn't","Fragments":["you","I"]},{"Key":"didn't you","Fragments":["follow","choose"]},{"Key":"you follow","Fragments":["your"]},{"Key":"your own","Fragments":["example","(perfectly","power","loop.","version","`square`"]},{"Key":"own example","Fragments":["breaking"]},{"Key":"example breaking","Fragments":["up"]},{"Key":"the parts","Fragments":["into","of"]},{"Key":"parts into","Fragments":["digestible"]},{"Key":"into digestible","Fragments":["pieces"]},{"Key":"digestible pieces","Fragments":["there?"]},{"Key":"Good catch,","Fragments":["although"]},{"Key":"catch, although","Fragments":["going"]},{"Key":"although going","Fragments":["further,"]},{"Key":"going further,","Fragments":["one"]},{"Key":"further, one","Fragments":["would"]},{"Key":"one would","Fragments":["have","be"]},{"Key":"about diactrics.","Fragments":["Either"]},{"Key":"diactrics. Either","Fragments":["way,"]},{"Key":"way, no","Fragments":["point"]},{"Key":"no point","Fragments":["in"]},{"Key":"point in","Fragments":["holding","wrapping","that.","a","that","keeping"]},{"Key":"in holding","Fragments":["off."]},{"Key":"If this","Fragments":["would","were","condition"]},{"Key":"be *real","Fragments":["world"]},{"Key":"*real world","Fragments":["code*"]},{"Key":"world code*","Fragments":["I"]},{"Key":"code* I","Fragments":["totally"]},{"Key":"would agree","Fragments":["with"]},{"Key":"your code.","Fragments":["I","Particularly","Have","I",":)","Using"]},{"Key":"code. I","Fragments":["maybe","initially","admit","am","used","have"]},{"Key":"I maybe","Fragments":["would"]},{"Key":"maybe would","Fragments":["even"]},{"Key":"would even","Fragments":["go"]},{"Key":"even go","Fragments":["without"]},{"Key":"go without","Fragments":["the"]},{"Key":"the `require`","Fragments":["statement","and","is"]},{"Key":"`require` statement","Fragments":["here."]},{"Key":" **But**","Fragments":["since"]},{"Key":"**But** since","Fragments":["this"]},{"Key":"since this","Fragments":["whole","leaves","code"]},{"Key":"this whole","Fragments":["exercise","exercism.io","thing"]},{"Key":"whole exercise","Fragments":["is","in"]},{"Key":"exercise is","Fragments":["about","and","a"]},{"Key":"about code","Fragments":["that"]},{"Key":"is as","Fragments":["readable","the"]},{"Key":"as readable","Fragments":["as"]},{"Key":"readable as","Fragments":["possible"]},{"Key":"as possible","Fragments":["I","with","to","but","when","through","from","until"]},{"Key":"possible I","Fragments":["rather","think"]},{"Key":"rather agree","Fragments":["with"]},{"Key":"two nitpicks","Fragments":["above"]},{"Key":"nitpicks above","Fragments":["and"]},{"Key":"above and","Fragments":["would"]},{"Key":"would like","Fragments":["to","to","to","to","to"]},{"Key":"to encourage","Fragments":["you","you","you","further"]},{"Key":"encourage you","Fragments":["to","to","to"]},{"Key":"some defs","Fragments":["to"]},{"Key":"defs to","Fragments":["give"]},{"Key":"give your","Fragments":["characters"]},{"Key":"your characters","Fragments":["names."]},{"Key":"even do","Fragments":["that,","\"rainbow\""]},{"Key":"do that,","Fragments":["defining","you"]},{"Key":"that, defining","Fragments":["named"]},{"Key":"defining named","Fragments":["functions"]},{"Key":"functions inside","Fragments":["another"]},{"Key":"inside another","Fragments":["named"]},{"Key":"another named","Fragments":["function."]},{"Key":"named function.","Fragments":["It","Mostly"]},{"Key":"function. It","Fragments":["is","seems","might","was","doesn't","feels"]},{"Key":"is kind","Fragments":["of","of","of","of","of","of"]},{"Key":"of confusing,","Fragments":["though,"]},{"Key":"confusing, though,","Fragments":["and"]},{"Key":"though, and","Fragments":["in"]},{"Key":"my opinion","Fragments":["not","this","would","it",";).","some"]},{"Key":"opinion not","Fragments":["good"]},{"Key":"not good","Fragments":["functional"]},{"Key":"good functional","Fragments":["style.","decomposition"]},{"Key":"functional style.","Fragments":["But"]},{"Key":"style. But","Fragments":["I"]},{"Key":"will happily","Fragments":["fight"]},{"Key":"happily fight","Fragments":["over"]},{"Key":"fight over","Fragments":["that."]},{"Key":" Besides","Fragments":["that,","that"]},{"Key":"Besides that,","Fragments":["have"]},{"Key":"that, have","Fragments":["you"]},{"Key":"considered requiring","Fragments":["`clojure.string`","the"]},{"Key":"requiring `clojure.string`","Fragments":["in"]},{"Key":"`clojure.string` in","Fragments":["your","your"]},{"Key":"namespace to","Fragments":["make","remove","see","refer","remove","save","import"]},{"Key":"the `blank?`","Fragments":["and","test","function"]},{"Key":"and `upper-case`","Fragments":["function","from"]},{"Key":"calls shorter","Fragments":["and"]},{"Key":"shorter and","Fragments":["more","succint.","nicer!","clearer.","easier","some","excluding","possibly"]},{"Key":"and more","Fragments":["*to","uniform,","on","maintainable","generic","efficient","concise"]},{"Key":"more *to","Fragments":["the"]},{"Key":"*to the","Fragments":["point*?"]},{"Key":"Oh, perfect!","Fragments":["I"]},{"Key":"perfect! I","Fragments":["worked"]},{"Key":"I worked","Fragments":["out"]},{"Key":"worked out","Fragments":["how","the"]},{"Key":"in Elixir","Fragments":["and","first"]},{"Key":"Elixir and","Fragments":["knowing"]},{"Key":"and knowing","Fragments":["how"]},{"Key":"knowing how","Fragments":["to"]},{"Key":"do it","Fragments":["in","in","this","in","properly,","?","all","this","with","in","once.","all!","right","as","myself.","with","that","for","in","that","once).","with","in","yet.","with"]},{"Key":"Clojure too","Fragments":["is"]},{"Key":"too is","Fragments":["probably"]},{"Key":"good plan","Fragments":[":)"]},{"Key":"consider having","Fragments":["helper","`anagram-of?`"]},{"Key":"having helper","Fragments":["functions"]},{"Key":"the silent/shouting/question","Fragments":["cases?"]},{"Key":"And yes,","Fragments":["I","that's","the"]},{"Key":"yes, I","Fragments":["also","was"]},{"Key":"also see","Fragments":["now,","in","that"]},{"Key":"see now,","Fragments":["that"]},{"Key":"now, that","Fragments":["I"]},{"Key":"could have","Fragments":["used","just","approached","even","adjusted","been","used","renamed","used","changed","been","solved","been","added","computed","done","rewritten"]},{"Key":"used it","Fragments":["to","in","in","in","in","was","before.","right?","in"]},{"Key":"all words","Fragments":["the","in"]},{"Key":"words the","Fragments":["same"]},{"Key":"same case.","Fragments":["No"]},{"Key":"case. No","Fragments":["test"]},{"Key":"No test","Fragments":["is"]},{"Key":"test is","Fragments":["checking","probably","for","unneeded.","a"]},{"Key":"is checking","Fragments":["for","for"]},{"Key":"am sure","Fragments":["they","there"]},{"Key":"sure they","Fragments":["should"]},{"Key":"they should","Fragments":["do.","be","be"]},{"Key":"just saw","Fragments":["the"]},{"Key":"saw the","Fragments":["requirement","tricky"]},{"Key":"the requirement","Fragments":["for"]},{"Key":"requirement for","Fragments":["clojure.string.","mutation","clojure.string"]},{"Key":"for clojure.string.","Fragments":["This"]},{"Key":"clojure.string. This","Fragments":["is"]},{"Key":"a left","Fragments":["over"]},{"Key":"left over","Fragments":["as","from"]},{"Key":"over as","Fragments":["I"]},{"Key":"the sorting","Fragments":["of"]},{"Key":"sorting of","Fragments":["characters","the"]},{"Key":"characters with","Fragments":["the","a","`re-seq`.","spaces"]},{"Key":"the clojure.string/split","Fragments":["function."]},{"Key":"clojure.string/split function.","Fragments":["Will"]},{"Key":"function. Will","Fragments":["remove"]},{"Key":"Will remove","Fragments":["that"]},{"Key":"remove that","Fragments":["one."]},{"Key":"am absolutely","Fragments":["not"]},{"Key":"absolutely not","Fragments":["sure"]},{"Key":"about this","Fragments":["one.","one)","feature","is","exercise","solution:","technique.","yet.","solution...","one.","in","one."]},{"Key":"one. Was","Fragments":["a"]},{"Key":"Was a","Fragments":["real"]},{"Key":"real brain-teaser","Fragments":["for"]},{"Key":"brain-teaser for","Fragments":["a"]},{"Key":"a Clojure","Fragments":["beginner","beginner,","thing,","term,","and","function","expert,"]},{"Key":"Clojure beginner","Fragments":["like"]},{"Key":"beginner like","Fragments":["myself."]},{"Key":"like myself.","Fragments":["I"]},{"Key":"myself. I","Fragments":["started"]},{"Key":"out with","Fragments":["everything","=","a","my","writing"]},{"Key":"with everything","Fragments":["in","it's"]},{"Key":"everything in","Fragments":["one","a","a"]},{"Key":"one recursive","Fragments":["function"]},{"Key":"recursive function","Fragments":["and","transcribe-to-rna","is"]},{"Key":"and tried","Fragments":["to","a"]},{"Key":"into edible","Fragments":["nibbles."]},{"Key":"look forward","Fragments":["to","to"]},{"Key":"forward to","Fragments":["learn","seeing","that"]},{"Key":"learn something","Fragments":["through"]},{"Key":"something through","Fragments":["the"]},{"Key":" `:use`","Fragments":["is","is","was"]},{"Key":"is deprecated/discouraged","Fragments":["http://dev.clojure.org/jira/browse/CLJ-879"]},{"Key":"deprecated/discouraged http://dev.clojure.org/jira/browse/CLJ-879","Fragments":["-"]},{"Key":"http://dev.clojure.org/jira/browse/CLJ-879 -","Fragments":["Try"]},{"Key":"- Try","Fragments":["`:require`"]},{"Key":"Try `:require`","Fragments":["with"]},{"Key":"`:require` with","Fragments":["`:refer`","`:refer`"]},{"Key":"for being","Fragments":["a"]},{"Key":"being a","Fragments":["PITA,","couple","native","part","value","map","value?","value"]},{"Key":"a PITA,","Fragments":["but"]},{"Key":"PITA, but","Fragments":["code"]},{"Key":"not fully","Fragments":["idiomatic."]},{"Key":"fully idiomatic.","Fragments":["Please"]},{"Key":"idiomatic. Please","Fragments":["take"]},{"Key":"Please take","Fragments":["a"]},{"Key":"at `let`","Fragments":["form"]},{"Key":"form example","Fragments":["here:"]},{"Key":"example here:","Fragments":["https://github.com/bbatsov/clojure-style-guide"]},{"Key":"You still","Fragments":["apply","repeatedly","haven't","have"]},{"Key":"still apply","Fragments":["`sort`"]},{"Key":"apply `sort`","Fragments":["to"]},{"Key":"`sort` to","Fragments":["the"]},{"Key":"word on","Fragments":["every","that)"]},{"Key":"on every","Fragments":["test.","call.","call.","usage.","letter.","non-word","invocation."]},{"Key":"assign vars","Fragments":["with"]},{"Key":"descriptive names","Fragments":["so","(remember","to","it","that","like","for","in","though."]},{"Key":"names so","Fragments":["that"]},{"Key":"that future","Fragments":["readers","readers"]},{"Key":"readers know","Fragments":["what"]},{"Key":"what `\\T`","Fragments":["and","and"]},{"Key":"One other","Fragments":["thing","small","thing","thing"]},{"Key":"have pointed","Fragments":["out"]},{"Key":"pointed out","Fragments":["before...","I","to","by","in","that"]},{"Key":"out before...","Fragments":["You"]},{"Key":"before... You","Fragments":["might"]},{"Key":"might compare","Fragments":["your"]},{"Key":"compare your","Fragments":["`let`"]},{"Key":"your `let`","Fragments":["in"]},{"Key":"`let` in","Fragments":["`verse`","`add`","`add`","`pairs`"]},{"Key":"`verse` with","Fragments":["a"]},{"Key":"a map-destructuring","Fragments":["let"]},{"Key":"map-destructuring let","Fragments":["and"]},{"Key":"see which","Fragments":["one","functions"]},{"Key":"which one","Fragments":["you","is","is","to"]},{"Key":"one you","Fragments":["like"]},{"Key":"(def point","Fragments":["{:x"]},{"Key":"point {:x","Fragments":["5"]},{"Key":"{:x 5","Fragments":[":y"]},{"Key":"5 :y","Fragments":["7})"]},{"Key":"(let [{horizontal","Fragments":[":x"]},{"Key":"[{horizontal :x","Fragments":["vertical"]},{"Key":":x vertical","Fragments":[":y}"]},{"Key":"vertical :y}","Fragments":["point]"]},{"Key":"; ...","Fragments":["do"]},{"Key":"... do","Fragments":["stuff"]},{"Key":"do stuff","Fragments":["with"]},{"Key":"stuff with","Fragments":["\"horizontal\""]},{"Key":"with \"horizontal\"","Fragments":["and"]},{"Key":"\"horizontal\" and","Fragments":["\"vertical\""]},{"Key":"and \"vertical\"","Fragments":["here."]},{"Key":" Aw","Fragments":["thanks!"]},{"Key":"Aw thanks!","Fragments":["I"]},{"Key":"thanks! I","Fragments":["have","was","so","wasn't"]},{"Key":"to admit","Fragments":["I","to"]},{"Key":"I struggled","Fragments":["for","with","with"]},{"Key":"struggled for","Fragments":["a"]},{"Key":"while with","Fragments":["finding"]},{"Key":"with finding","Fragments":["any"]},{"Key":"finding any","Fragments":["elegant"]},{"Key":"any elegant","Fragments":["way"]},{"Key":"elegant way","Fragments":["to","to","to"]},{"Key":"do this.","Fragments":["I","But","Some","I"]},{"Key":"this. I","Fragments":["haven't","had","also"]},{"Key":"seen anyone","Fragments":["else's"]},{"Key":"else's solutions","Fragments":["so"]},{"Key":"solutions so","Fragments":["I"]},{"Key":"if mine","Fragments":["is"]},{"Key":"mine is","Fragments":["a"]},{"Key":"I'd forgotten","Fragments":["about","about"]},{"Key":"forgotten about","Fragments":["the","that","that","`partial`"]},{"Key":"the existence","Fragments":["of"]},{"Key":"existence of","Fragments":["`inc`"]},{"Key":"of `inc`","Fragments":["and"]},{"Key":"`inc` and","Fragments":["`dec`","`dec`","`dec`.","`dec`..."]},{"Key":"and `dec`","Fragments":["but","respectively."]},{"Key":"`dec` but","Fragments":["I"]},{"Key":"them will","Fragments":["declutter"]},{"Key":"will declutter","Fragments":["the"]},{"Key":"declutter the","Fragments":["code..."]},{"Key":"the code...","Fragments":["I'll"]},{"Key":"code... I'll","Fragments":["give"]},{"Key":"them a","Fragments":["go","name","few","bit","bit."]},{"Key":"a go","Fragments":[":)","at","at","at","at","when"]},{"Key":"want the","Fragments":["participant"]},{"Key":"participant to","Fragments":["validate"]},{"Key":"to validate","Fragments":["input,","the","the","the","the","on"]},{"Key":"validate input,","Fragments":["you"]},{"Key":"input, you","Fragments":["should","don't","don't"]},{"Key":"them do","Fragments":["it"]},{"Key":"does only","Fragments":["that,"]},{"Key":"only that,","Fragments":["and","it"]},{"Key":"that, and","Fragments":["the","I"]},{"Key":"should assume","Fragments":["they're"]},{"Key":"assume they're","Fragments":["getting"]},{"Key":"they're getting","Fragments":["validated"]},{"Key":"getting validated","Fragments":["input."]},{"Key":"validated input.","Fragments":["It's"]},{"Key":"input. It's","Fragments":["not"]},{"Key":"more complicated","Fragments":["to","than","when","than","than","than","code."]},{"Key":"complicated to","Fragments":["do","me"]},{"Key":"it this","Fragments":["way.","way.","way),","way","way:","way."]},{"Key":"this way.","Fragments":["Otherwise,","=/"]},{"Key":"way. Otherwise,","Fragments":["you"]},{"Key":"Otherwise, you","Fragments":["should","may","can"]},{"Key":"them assume","Fragments":["that"]},{"Key":"assume that","Fragments":["the","this","you","main","it's"]},{"Key":"input domain","Fragments":["is"]},{"Key":"domain is","Fragments":["the"]},{"Key":"function domain","Fragments":["and"]},{"Key":"domain and","Fragments":["leave"]},{"Key":"and leave","Fragments":["it","the"]},{"Key":"it at","Fragments":["that,","all.","one","all?","a"]},{"Key":"at that,","Fragments":["like"]},{"Key":"that, like","Fragments":["the"]},{"Key":"the Elixir","Fragments":["example."]},{"Key":"Elixir example.","Fragments":["Right"]},{"Key":"example. Right","Fragments":["now"]},{"Key":"now the","Fragments":["examples"]},{"Key":"the examples","Fragments":["just","given"]},{"Key":"examples just","Fragments":["basically"]},{"Key":"just basically","Fragments":["instill"]},{"Key":"basically instill","Fragments":["bad"]},{"Key":"instill bad","Fragments":["habits."]},{"Key":"the constants,","Fragments":["literals"]},{"Key":"constants, literals","Fragments":["would"]},{"Key":"literals would","Fragments":["be"]},{"Key":"better in","Fragments":["this","that","my","a","my","the"]},{"Key":"this case.","Fragments":["I'll","Compare","It's","`sort-by`"]},{"Key":"case. I'll","Fragments":["add"]},{"Key":"I'll add","Fragments":["the","`sts=2`","one"]},{"Key":"add the","Fragments":["whitespace","namespace"]},{"Key":"the whitespace","Fragments":["and","you","or"]},{"Key":"whitespace and","Fragments":["make","punctuation","cleaning","closing","I","perfectly","removing"]},{"Key":" @rossie","Fragments":["-"]},{"Key":"@rossie -","Fragments":["I"]},{"Key":"know it","Fragments":["is","was","can"]},{"Key":"is less","Fragments":["efficient","code","code","code","efficient","magic.","than","cluttered"]},{"Key":"less efficient","Fragments":["-","than","than"]},{"Key":"efficient -","Fragments":["but"]},{"Key":"the symmetry","Fragments":["is"]},{"Key":"symmetry is","Fragments":["nice"]},{"Key":"being said","Fragments":["I'll","there","ends"]},{"Key":"said I'll","Fragments":["probably"]},{"Key":"I'll probably","Fragments":["switch","submit","revise","do","have"]},{"Key":"probably switch","Fragments":["back"]},{"Key":"switch back","Fragments":["to"]},{"Key":"to doing","Fragments":["it","that"]},{"Key":"it only","Fragments":["once","once","with","once?","really"]},{"Key":"only once","Fragments":["next","is","without","for","but"]},{"Key":"once next","Fragments":["time."]},{"Key":" Really","Fragments":["minor","like","happy","like","nice"]},{"Key":"Really minor","Fragments":["point,"]},{"Key":"minor point,","Fragments":["but"]},{"Key":"using `dec`","Fragments":["and"]},{"Key":"`dec` and","Fragments":["`inc`"]},{"Key":"and `inc`","Fragments":["when"]},{"Key":"`inc` when","Fragments":["you're"]},{"Key":"when you're","Fragments":["adding","using","done!"]},{"Key":"you're adding","Fragments":["or"]},{"Key":"adding or","Fragments":["subtracting"]},{"Key":"or subtracting","Fragments":["1."]},{"Key":"Agreed re:","Fragments":["strings"]},{"Key":"re: strings","Fragments":["vs."]},{"Key":"strings vs.","Fragments":["characters"]},{"Key":"vs. characters","Fragments":["--"]},{"Key":"characters --","Fragments":["I've"]},{"Key":"-- I've","Fragments":["updated"]},{"Key":"the test/example","Fragments":["for"]},{"Key":"test/example for","Fragments":["future"]},{"Key":"your implementation","Fragments":["could","work","would","of","does"]},{"Key":"implementation could","Fragments":["be"]},{"Key":"improved for","Fragments":["future"]},{"Key":"readers by","Fragments":["adding"]},{"Key":"by adding","Fragments":["a"]},{"Key":"adding a","Fragments":["line","```use```"]},{"Key":"a line","Fragments":["of","by","-"]},{"Key":"of whitespace","Fragments":["between"]},{"Key":"whitespace between","Fragments":["each"]},{"Key":"between each","Fragments":["function."]},{"Key":"each function.","Fragments":["It","Does"]},{"Key":"a minor","Fragments":["detail,","observation"]},{"Key":"minor detail,","Fragments":["but"]},{"Key":"detail, but","Fragments":["I"]},{"Key":"it much","Fragments":["more","more","easier","more"]},{"Key":"readable. Is","Fragments":["there"]},{"Key":"reason you're","Fragments":["generating","using"]},{"Key":"you're generating","Fragments":["your"]},{"Key":"generating your","Fragments":["constants"]},{"Key":"your constants","Fragments":["instead"]},{"Key":"constants instead","Fragments":["of"]},{"Key":"using set","Fragments":["literal"]},{"Key":"set literal","Fragments":["/","nested"]},{"Key":"literal /","Fragments":["hash"]},{"Key":"/ hash","Fragments":["literal"]},{"Key":"hash literal","Fragments":["syntax?"]},{"Key":"literal syntax?","Fragments":["IMO,"]},{"Key":"syntax? IMO,","Fragments":["the"]},{"Key":"IMO, the","Fragments":["literals"]},{"Key":"the literals","Fragments":["have"]},{"Key":"literals have","Fragments":["better"]},{"Key":"have better","Fragments":["signal"]},{"Key":"better signal","Fragments":["to"]},{"Key":"signal to","Fragments":["noise"]},{"Key":"to noise","Fragments":["ratio."]},{"Key":" While","Fragments":["it's","I","I","writing","I've","I","there","I","keeping","this","I","this","it","commas","`{name"]},{"Key":"While it's","Fragments":["true","true"]},{"Key":"it's true","Fragments":["that","to"]},{"Key":"true that","Fragments":["this"]},{"Key":"the wrong","Fragments":["place","expression.","tree","function","place.","type","code"]},{"Key":"wrong place","Fragments":["for"]},{"Key":"place for","Fragments":["input"]},{"Key":"validation in","Fragments":["a"]},{"Key":"real system,","Fragments":["we're"]},{"Key":"system, we're","Fragments":["trying"]},{"Key":"we're trying","Fragments":["to"]},{"Key":"to teach","Fragments":["concepts"]},{"Key":"teach concepts","Fragments":["while"]},{"Key":"concepts while","Fragments":["still"]},{"Key":"keeping a","Fragments":["simple"]},{"Key":"simple context","Fragments":["(single"]},{"Key":"context (single","Fragments":["file"]},{"Key":"(single file","Fragments":["solution"]},{"Key":"file solution","Fragments":["that"]},{"Key":"solution that","Fragments":["you","completely","make","came","will"]},{"Key":"can post","Fragments":["to"]},{"Key":"post to","Fragments":["a"]},{"Key":"a URL","Fragments":["to"]},{"Key":"URL to","Fragments":["share)."]},{"Key":"to share).","Fragments":["So"]},{"Key":"share). So","Fragments":["yeah,"]},{"Key":"yeah, you","Fragments":["have"]},{"Key":"to squint","Fragments":["sometimes."]},{"Key":"squint sometimes.","Fragments":[":)"]},{"Key":" Due","Fragments":["to"]},{"Key":"Due to","Fragments":["the","my"]},{"Key":"that symbols","Fragments":["and"]},{"Key":"symbols and","Fragments":["values"]},{"Key":"values have","Fragments":["to","a"]},{"Key":"be space","Fragments":["delimited,"]},{"Key":"space delimited,","Fragments":["a"]},{"Key":"delimited, a","Fragments":["much"]},{"Key":"much wider","Fragments":["range"]},{"Key":"wider range","Fragments":["of","of"]},{"Key":"range of","Fragments":["characters","allowed","characters","characters","abstractions","your","values","ASCII"]},{"Key":"characters can","Fragments":["be"]},{"Key":"in names.","Fragments":["You"]},{"Key":"names. You","Fragments":["can"]},{"Key":"`-` as","Fragments":["in"]},{"Key":"in `subject-char-freq`","Fragments":["without"]},{"Key":"`subject-char-freq` without","Fragments":["any"]},{"Key":"any hesitation","Fragments":["(the"]},{"Key":"hesitation (the","Fragments":["same"]},{"Key":"(the same","Fragments":["stands"]},{"Key":"same stands","Fragments":["for"]},{"Key":"stands for","Fragments":["`?`,","string"]},{"Key":"for `?`,","Fragments":["`!`,"]},{"Key":"`?`, `!`,","Fragments":["`\u0026gt;`"]},{"Key":"`!`, `\u0026gt;`","Fragments":["and"]},{"Key":"`\u0026gt;` and","Fragments":["many"]},{"Key":"and many","Fragments":["others).","others)."]},{"Key":"many others).","Fragments":["That's"]},{"Key":"others). That's","Fragments":["even"]},{"Key":"That's even","Fragments":["idiomatic","more"]},{"Key":"even idiomatic","Fragments":["way"]},{"Key":"idiomatic way","Fragments":["of","of","to","to","to","to","to","to"]},{"Key":"of naming","Fragments":["things","methods","is","your"]},{"Key":"clojure. It","Fragments":["helps"]},{"Key":"It helps","Fragments":["to","that","in"]},{"Key":"helps to","Fragments":["create"]},{"Key":"really descriptive","Fragments":["names."]},{"Key":"names. Take","Fragments":["for"]},{"Key":"Take for","Fragments":["example"]},{"Key":"for example","Fragments":["a","`:require","in","by","doesn't","in","`(defn","this"]},{"Key":"example a","Fragments":["conversion"]},{"Key":"a conversion","Fragments":["function"]},{"Key":"conversion function","Fragments":["that"]},{"Key":"that can","Fragments":["be","just","improve","examine","be","spare","be","reduce","help","tell","replace","definitely","also","do","be","tell","represent","encapsulate","be","replace","be"]},{"Key":"be named","Fragments":["`celsius-\u0026gt;fahrenheit`.","`dna-seq`,","and","ending"]},{"Key":"The example","Fragments":["in"]},{"Key":"example in","Fragments":["clojuredocs","case","my","the","`anagrams`","the","the","the"]},{"Key":"in clojuredocs","Fragments":["is"]},{"Key":"clojuredocs is","Fragments":["rather"]},{"Key":"is rather","Fragments":["for","unidiomatic.","lengthy"]},{"Key":"rather for","Fragments":["the"]},{"Key":"of ...","Fragments":["erm"]},{"Key":"... erm","Fragments":["..."]},{"Key":"erm ...","Fragments":["example."]},{"Key":"... example.","Fragments":["Anyway,"]},{"Key":"example. Anyway,","Fragments":["as"]},{"Key":"Anyway, as","Fragments":["I've"]},{"Key":"as I've","Fragments":["written,","stated"]},{"Key":"I've written,","Fragments":["you","I","so"]},{"Key":"written, you","Fragments":["don't"]},{"Key":"need both","Fragments":["in"]},{"Key":"both in","Fragments":["that","terms","terms","the"]},{"Key":"that case.","Fragments":["Of","You","However,","Other","The","You"]},{"Key":"course there","Fragments":["are"]},{"Key":"are contexts","Fragments":["where"]},{"Key":"contexts where","Fragments":["it"]},{"Key":"be handy","Fragments":["(aliasing","all"]},{"Key":"handy (aliasing","Fragments":["the"]},{"Key":"(aliasing the","Fragments":["namespace"]},{"Key":"importing some","Fragments":["more"]},{"Key":"some more","Fragments":["often","stylistic","logic","appropriate","refactoring","clojure.","idiomatic","ubiquitous","concise","things,"]},{"Key":"more often","Fragments":["used","reserved","it's"]},{"Key":"often used","Fragments":["symbols"]},{"Key":"used symbols","Fragments":["from"]},{"Key":"symbols from","Fragments":["the","that"]},{"Key":" Duh,","Fragments":["`frequencies`"]},{"Key":"Duh, `frequencies`","Fragments":["is"]},{"Key":"choice here.","Fragments":["I'm"]},{"Key":"here. I'm","Fragments":["a"]},{"Key":"little perplexed","Fragments":["on"]},{"Key":"perplexed on","Fragments":["the"]},{"Key":"the `:only`","Fragments":["bit."]},{"Key":"`:only` bit.","Fragments":["I"]},{"Key":"bit. I","Fragments":["was","really"]},{"Key":"thinking that","Fragments":["it","since"]},{"Key":"it limited","Fragments":["what"]},{"Key":"limited what","Fragments":["was"]},{"Key":"what was","Fragments":["available.","an","passed"]},{"Key":"was available.","Fragments":["What"]},{"Key":"available. What","Fragments":["you're"]},{"Key":"What you're","Fragments":["saying"]},{"Key":"you're saying","Fragments":["appears","about"]},{"Key":"saying appears","Fragments":["to"]},{"Key":"appears to","Fragments":["be","do","be"]},{"Key":"be accurate","Fragments":["but"]},{"Key":"accurate but","Fragments":["I'm"]},{"Key":"I'm confused","Fragments":["because","to"]},{"Key":"confused because","Fragments":["the"]},{"Key":"because the","Fragments":["Clojure","first","test","solution","code","name","last"]},{"Key":"Clojure docs","Fragments":["have"]},{"Key":"docs have","Fragments":["an"]},{"Key":"an example","Fragments":["that","of","?","in","of","that"]},{"Key":"example that","Fragments":["appears","will"]},{"Key":"that appears","Fragments":["to"]},{"Key":"same thing","Fragments":["I'm","as","using","for","happens"]},{"Key":"thing I'm","Fragments":["doing."]},{"Key":" @cristina","Fragments":["just"]},{"Key":"@cristina just","Fragments":["got"]},{"Key":"just got","Fragments":["myself","my"]},{"Key":"got myself","Fragments":["a"]},{"Key":"myself a","Fragments":["pull","beginner"]},{"Key":"request merged","Fragments":["into"]},{"Key":"merged into","Fragments":["exercism!"]},{"Key":"into exercism!","Fragments":["Thanks"]},{"Key":"exercism! Thanks","Fragments":["dude,"]},{"Key":"Thanks dude,","Fragments":["all"]},{"Key":"dude, all","Fragments":["credit"]},{"Key":"all credit","Fragments":["to"]},{"Key":"credit to","Fragments":["you"]},{"Key":" Well","Fragments":["i'll","done.","done,"]},{"Key":"Well i'll","Fragments":["be!"]},{"Key":"i'll be!","Fragments":["you"]},{"Key":"be! you","Fragments":["are"]},{"Key":"right. It","Fragments":["seems","can"]},{"Key":"seems I","Fragments":["have"]},{"Key":"a perennial","Fragments":["problem"]},{"Key":"perennial problem","Fragments":["of"]},{"Key":"problem of","Fragments":["not","readability"]},{"Key":"of not","Fragments":["removing","having"]},{"Key":"not removing","Fragments":["cruft"]},{"Key":"removing cruft","Fragments":["after"]},{"Key":"cruft after","Fragments":["refactoring."]},{"Key":"after refactoring.","Fragments":["I"]},{"Key":"refactoring. I","Fragments":["needed"]},{"Key":"I needed","Fragments":["the","to","to","to","to","to","the","to"]},{"Key":"needed the","Fragments":["join","letter","`(not)`"]},{"Key":"the join","Fragments":["at"]},{"Key":"join at","Fragments":["one"]},{"Key":"at one","Fragments":["point","level","point"]},{"Key":"point (you'll","Fragments":["have"]},{"Key":"(you'll have","Fragments":["to"]},{"Key":"take my","Fragments":["word"]},{"Key":"my word","Fragments":["on"]},{"Key":"on that)","Fragments":["but"]},{"Key":"that) but","Fragments":["obviously"]},{"Key":"but obviously","Fragments":["not"]},{"Key":"obviously not","Fragments":["anymore."]},{"Key":"already used!","Fragments":["A"]},{"Key":"used! A","Fragments":["riddle!"]},{"Key":"A riddle!","Fragments":["I'll"]},{"Key":"riddle! I'll","Fragments":["investigate."]},{"Key":"The guide","Fragments":["I"]},{"Key":"guide I","Fragments":["have"]},{"Key":"to referred","Fragments":["you"]},{"Key":"referred you","Fragments":["to"]},{"Key":"to is","Fragments":["a","not"]},{"Key":"of style","Fragments":["guidelines","and"]},{"Key":"style guidelines","Fragments":["and","can"]},{"Key":"guidelines and","Fragments":["common"]},{"Key":"and common","Fragments":["patterns"]},{"Key":"common patterns","Fragments":["that"]},{"Key":"patterns that","Fragments":["is","you"]},{"Key":"generally agreed","Fragments":["to","that"]},{"Key":"agreed to","Fragments":["be"]},{"Key":"be idiomatic","Fragments":["in","for"]},{"Key":"idiomatic in","Fragments":["the","Clojure","clojure?","Clojure.","Clojure.","clojure","clojure"]},{"Key":"Clojure community","Fragments":["-","prefer"]},{"Key":"community -","Fragments":["however"]},{"Key":"- however","Fragments":["as","that's","it","this"]},{"Key":"however as","Fragments":["with"]},{"Key":"as with","Fragments":["everything","use","large"]},{"Key":"everything it's","Fragments":["not"]},{"Key":"not something","Fragments":["set"]},{"Key":"something set","Fragments":["in"]},{"Key":"set in","Fragments":["stone.","`some`:"]},{"Key":"in stone.","Fragments":["About"]},{"Key":"stone. About","Fragments":["the"]},{"Key":"the parentheses","Fragments":["-"]},{"Key":"parentheses -","Fragments":["although","however"]},{"Key":"- although","Fragments":["Clojure","plain"]},{"Key":"although Clojure","Fragments":["(or"]},{"Key":"Clojure (or","Fragments":["any"]},{"Key":"(or any","Fragments":["lisp"]},{"Key":"any lisp","Fragments":["in"]},{"Key":"lisp in","Fragments":["general)"]},{"Key":"in general)","Fragments":["is"]},{"Key":"general) is","Fragments":["generally"]},{"Key":"generally agnostic","Fragments":["with"]},{"Key":"agnostic with","Fragments":["regards"]},{"Key":"to development","Fragments":["environment,"]},{"Key":"development environment,","Fragments":["it's"]},{"Key":"environment, it's","Fragments":["generally"]},{"Key":"it's generally","Fragments":["agreed","better","desirable","not"]},{"Key":"agreed that","Fragments":["editors"]},{"Key":"that editors","Fragments":["with"]},{"Key":"editors with","Fragments":["(built-in"]},{"Key":"with (built-in","Fragments":["or"]},{"Key":"(built-in or","Fragments":["available"]},{"Key":"or available","Fragments":["as"]},{"Key":"available as","Fragments":["extension)"]},{"Key":"as extension)","Fragments":["capability"]},{"Key":"extension) capability","Fragments":["to"]},{"Key":"capability to","Fragments":["highlight"]},{"Key":"to highlight","Fragments":["matching"]},{"Key":"highlight matching","Fragments":["parentheses","parens"]},{"Key":"matching parentheses","Fragments":["and","(so"]},{"Key":"parentheses and","Fragments":["optionally"]},{"Key":"and optionally","Fragments":["using"]},{"Key":"optionally using","Fragments":["different"]},{"Key":"using different","Fragments":["colors"]},{"Key":"different colors","Fragments":["for","while"]},{"Key":"colors for","Fragments":["every"]},{"Key":"for every","Fragments":["pair","check","potential","element","single","nucleotide","candidate.","iteration.","comparison."]},{"Key":"every pair","Fragments":["of"]},{"Key":"pair of","Fragments":["matching","parentheses.","parentheses.","parentheses.","parentheses.","parentheses","functions"]},{"Key":"of matching","Fragments":["parentheses","`[a-z]`"]},{"Key":"parentheses (so","Fragments":["called"]},{"Key":"called \"rainbow","Fragments":["parentheses\")"]},{"Key":"\"rainbow parentheses\")","Fragments":["makes"]},{"Key":"parentheses\") makes","Fragments":["life"]},{"Key":"makes life","Fragments":["a"]},{"Key":"life a","Fragments":["lot"]},{"Key":"lot easier.","Fragments":["With"]},{"Key":"easier. With","Fragments":["that"]},{"Key":"With that","Fragments":["tool"]},{"Key":"that tool","Fragments":["at"]},{"Key":"tool at","Fragments":["hand"]},{"Key":"at hand","Fragments":["and"]},{"Key":"hand and","Fragments":["a"]},{"Key":"of getting","Fragments":["used","rid","the","the"]},{"Key":"getting used","Fragments":["to","to","to","to"]},{"Key":"used to","Fragments":["working","give","it","them.","be","reading","in","populate","write","scoping","make","python's","get","track","reason","\"merge\"","`-\u003e`","check","infix","refer","combine"]},{"Key":"to working","Fragments":["with"]},{"Key":"with such","Fragments":["code,","a","great"]},{"Key":"such code,","Fragments":["you"]},{"Key":"code, you","Fragments":["don't"]},{"Key":"have problems","Fragments":["with"]},{"Key":"problems with","Fragments":["identifying","that"]},{"Key":"with identifying","Fragments":["scope"]},{"Key":"identifying scope","Fragments":["when"]},{"Key":"scope when","Fragments":["browsing"]},{"Key":"when browsing","Fragments":["through"]},{"Key":"browsing through","Fragments":["it."]},{"Key":"through it.","Fragments":["In","Since"]},{"Key":"it. In","Fragments":["return"]},{"Key":"In return","Fragments":["you"]},{"Key":"return you","Fragments":["reclaim"]},{"Key":"you reclaim","Fragments":["a"]},{"Key":"reclaim a","Fragments":["substantial"]},{"Key":"a substantial","Fragments":["amount"]},{"Key":"substantial amount","Fragments":["of"]},{"Key":"amount of","Fragments":["precious","handcrafted","code","code","code","code.","repetition","exposure","exposure","work","if","code","white"]},{"Key":"of precious","Fragments":["vertical"]},{"Key":"precious vertical","Fragments":["space"]},{"Key":"vertical space","Fragments":["in","is"]},{"Key":"space in","Fragments":["editor"]},{"Key":"in editor","Fragments":["window"]},{"Key":"editor window","Fragments":["(nesting"]},{"Key":"window (nesting","Fragments":["levels"]},{"Key":"(nesting levels","Fragments":["can"]},{"Key":"levels can","Fragments":["be"]},{"Key":"be sometimes","Fragments":["quite"]},{"Key":"sometimes quite","Fragments":["deep)"]},{"Key":"quite deep)","Fragments":[":)"]},{"Key":" Joining","Fragments":["back","the"]},{"Key":"Joining back","Fragments":["to"]},{"Key":"to string","Fragments":["is","functions.","and","is","``(="]},{"Key":"is unnecessary.","Fragments":["Either","Anyway,","Other","You","`anagram?`"]},{"Key":"unnecessary. Either","Fragments":["way,"]},{"Key":"there's more","Fragments":["efficient","effective","than","than"]},{"Key":"efficient method","Fragments":["for"]},{"Key":"anagrams with","Fragments":["a"]},{"Key":"In `require`","Fragments":["you"]},{"Key":"`require` you","Fragments":["are"]},{"Key":"doing two","Fragments":["things"]},{"Key":"two things","Fragments":["at","that"]},{"Key":"things at","Fragments":["the","the"]},{"Key":"same time:","Fragments":["alias"]},{"Key":"time: alias","Fragments":["a"]},{"Key":"alias a","Fragments":["`clojure.string`"]},{"Key":"a `clojure.string`","Fragments":["namespace","function?"]},{"Key":"namespace as","Fragments":["`str`","opposed","_str_,"]},{"Key":"as `str`","Fragments":["and"]},{"Key":"and directly","Fragments":["import"]},{"Key":"directly import","Fragments":["symbol"]},{"Key":"import symbol","Fragments":["`split`."]},{"Key":"symbol `split`.","Fragments":["So"]},{"Key":"`split`. So","Fragments":["the"]},{"Key":"So the","Fragments":["function","ideal","running","macro","process"]},{"Key":"function can","Fragments":["be","be","be","be","replace"]},{"Key":"two ways:","Fragments":["either"]},{"Key":"ways: either","Fragments":["`(split"]},{"Key":"either `(split","Fragments":["...)`"]},{"Key":"`(split ...)`","Fragments":["or"]},{"Key":"...)` or","Fragments":["`(str/split","`(clojure.string/join"]},{"Key":"or `(str/split","Fragments":["...)`."]},{"Key":"`(str/split ...)`.","Fragments":["In"]},{"Key":"...)`. In","Fragments":["practice"]},{"Key":"In practice","Fragments":["you"]},{"Key":"practice you","Fragments":["use"]},{"Key":"only alias","Fragments":["so"]},{"Key":"alias so","Fragments":["`:only"]},{"Key":"so `:only","Fragments":["...`"]},{"Key":"`:only ...`","Fragments":["part"]},{"Key":"...` part","Fragments":["is"]},{"Key":"unnecessary. Anyway,","Fragments":["the"]},{"Key":"Anyway, the","Fragments":["split","function"]},{"Key":"the split","Fragments":["is","elements","to","without","from","words"]},{"Key":"split is","Fragments":["completely"]},{"Key":"unnecessary because","Fragments":["strings","map"]},{"Key":"because strings","Fragments":["can"]},{"Key":"strings can","Fragments":["be","be","be"]},{"Key":"be already","Fragments":["treated"]},{"Key":"already treated","Fragments":["as"]},{"Key":"characters (I","Fragments":["don't"]},{"Key":"(I don't","Fragments":["even"]},{"Key":"even get","Fragments":["what","by"]},{"Key":"what `rest`","Fragments":["is"]},{"Key":"`rest` is","Fragments":["doing"]},{"Key":"is doing","Fragments":["there)","here?","to"]},{"Key":"doing there)","Fragments":["-"]},{"Key":"there) -","Fragments":["so"]},{"Key":"- so","Fragments":["`normalize`","if","just","you","that","all"]},{"Key":"so `normalize`","Fragments":["could"]},{"Key":"`normalize` could","Fragments":["be"]},{"Key":"be reduced","Fragments":["to","to","with","to","to"]},{"Key":"reduced to","Fragments":["a","one","produce","a","a"]},{"Key":"simple `(sort","Fragments":["word)`,"]},{"Key":"`(sort word)`,","Fragments":["or"]},{"Key":"word)`, or","Fragments":["completely"]},{"Key":"or completely","Fragments":["inlined."]},{"Key":"completely inlined.","Fragments":["To"]},{"Key":"inlined. To","Fragments":["go"]},{"Key":"To go","Fragments":["further,"]},{"Key":"go further,","Fragments":["it"]},{"Key":"further, it","Fragments":["would"]},{"Key":"effective to","Fragments":["process"]},{"Key":"to process","Fragments":["the","a"]},{"Key":"the subject","Fragments":["only"]},{"Key":"subject only","Fragments":["once,"]},{"Key":"only once,","Fragments":["not"]},{"Key":"once, not","Fragments":["with","every"]},{"Key":"not with","Fragments":["every"]},{"Key":"every check","Fragments":["in","and","actually"]},{"Key":"check in","Fragments":["a","`shouty?`","`shouty?`","the","predicate","`shout?`,","one","forceful?","`grade`"]},{"Key":"of words.","Fragments":["Finally,","This","But"]},{"Key":"words. Finally,","Fragments":["there's"]},{"Key":"Finally, there's","Fragments":["more"]},{"Key":"check than","Fragments":["sorting"]},{"Key":"than sorting","Fragments":["-"]},{"Key":"sorting -","Fragments":["look"]},{"Key":"- look","Fragments":["for"]},{"Key":" @dorothea","Fragments":["the"]},{"Key":"@dorothea the","Fragments":["additional"]},{"Key":"additional regex","Fragments":["is"]},{"Key":"regex is","Fragments":["to","a","not","not","much"]},{"Key":"to account","Fragments":["for","for","for"]},{"Key":"for strings","Fragments":["without","such","containing"]},{"Key":"strings without","Fragments":["capital"]},{"Key":"without capital","Fragments":["letters"]},{"Key":"letters like","Fragments":["`(shouty?"]},{"Key":"like `(shouty?","Fragments":["\"42\")`","\"42\")`.","\"42\")`"]},{"Key":"`(shouty? \"42\")`","Fragments":["and","and"]},{"Key":"\"42\")` and","Fragments":["`(shouty?","`(shouty?"]},{"Key":"and `(shouty?","Fragments":["\"\")`","\"\")`."]},{"Key":"`(shouty? \"\")`","Fragments":["which"]},{"Key":"\"\")` which","Fragments":["would"]},{"Key":"would otherwise","Fragments":["evaluate","be"]},{"Key":"otherwise evaluate","Fragments":["as"]},{"Key":"evaluate as","Fragments":["truthy.","`true`","a"]},{"Key":"as truthy.","Fragments":["Not"]},{"Key":"truthy. Not","Fragments":["part"]},{"Key":"Not part","Fragments":["of"]},{"Key":"tests but","Fragments":["worth","I","those","does"]},{"Key":"but worth","Fragments":["considering"]},{"Key":"worth considering","Fragments":["nonetheless."]},{"Key":" Regex","Fragments":["check"]},{"Key":"Regex check","Fragments":["in"]},{"Key":"in `shouty?`","Fragments":["is","—"]},{"Key":"`shouty?` is","Fragments":["unnecessary."]},{"Key":"unnecessary. Other","Fragments":["than"]},{"Key":"than that","Fragments":["it","-","it","it","I","which","I","it","it","it"]},{"Key":" @antonette","Fragments":["good"]},{"Key":"@antonette good","Fragments":["to"]},{"Key":"Should that","Fragments":["be"]},{"Key":"be practive","Fragments":["reflected"]},{"Key":"practive reflected","Fragments":["in"]},{"Key":"reflected in","Fragments":["[the","tests"]},{"Key":"in [the","Fragments":["test"]},{"Key":"[the test","Fragments":["file](https://github.com/kytrinyx/exercism.io/blob/master/assignments/clojure/bob/bob_test.clj#L1)"]},{"Key":"test file](https://github.com/kytrinyx/exercism.io/blob/master/assignments/clojure/bob/bob_test.clj#L1)","Fragments":["too?"]},{"Key":"really that","Fragments":["much"]},{"Key":"much shorter,","Fragments":["but"]},{"Key":"shorter, but","Fragments":["for"]},{"Key":"of readability","Fragments":["have","-","with","I"]},{"Key":"readability have","Fragments":["you"]},{"Key":"`last` over","Fragments":["a"]},{"Key":"over a","Fragments":["regexp?","collection.","`clojure.string`","anonymous","string","range?","range","range"]},{"Key":" @pete","Fragments":["thanks"]},{"Key":"@pete thanks","Fragments":["for"]},{"Key":"feedback. Very","Fragments":["helpful."]},{"Key":"could require","Fragments":["`blank?`","in","the","clojure.string"]},{"Key":"require `blank?`","Fragments":["and"]},{"Key":"from `clojure.string`","Fragments":["in"]},{"Key":"your `ns`","Fragments":["declaration","form:"]},{"Key":"`ns` declaration","Fragments":["to"]},{"Key":"declaration to","Fragments":["shorten"]},{"Key":"to shorten","Fragments":["it","your","this","`clean-phrase`","`clojure.string`","it","up"]},{"Key":"shorten it","Fragments":["a","just","up"]},{"Key":"the shorter","Fragments":["regex","lambda"]},{"Key":"shorter regex","Fragments":["`\"\\?$\"`?","to"]},{"Key":"regex `\"\\?$\"`?","Fragments":["I"]},{"Key":"`\"\\?$\"`? I","Fragments":["think"]},{"Key":"with @benny.","Fragments":["While"]},{"Key":"@benny. While","Fragments":["\"T\""]},{"Key":"While \"T\"","Fragments":["and"]},{"Key":"are meaninful","Fragments":["to"]},{"Key":"meaninful to","Fragments":["you"]},{"Key":"the moment","Fragments":["-","I","I","is"]},{"Key":"moment -","Fragments":["say"]},{"Key":"- say","Fragments":["you"]},{"Key":"say you","Fragments":["had"]},{"Key":"you had","Fragments":["to","to","in","in","another","in","in"]},{"Key":"come back","Fragments":["to","and","and","to","with","and"]},{"Key":"code later","Fragments":["-"]},{"Key":"later -","Fragments":["would","would"]},{"Key":"- would","Fragments":["they","love"]},{"Key":"would they","Fragments":["still"]},{"Key":"they still","Fragments":["make"]},{"Key":"still make","Fragments":["sense?","me"]},{"Key":"make sense?","Fragments":["Naming"]},{"Key":"sense? Naming","Fragments":["them"]},{"Key":"Naming them","Fragments":["might"]},{"Key":"them might","Fragments":["be"]},{"Key":"I see.","Fragments":["I"]},{"Key":"see. I","Fragments":["totally"]},{"Key":"missed the","Fragments":["missing","forest"]},{"Key":"the missing","Fragments":["`+`"]},{"Key":"missing `+`","Fragments":["sign."]},{"Key":"`+` sign.","Fragments":["But"]},{"Key":"sign. But","Fragments":["is"]},{"Key":"But is","Fragments":["it"]},{"Key":"for one","Fragments":["upper","function","line","of","thing:","function."]},{"Key":"one upper","Fragments":["case"]},{"Key":"upper case","Fragments":["character?","before?","characters,","by","string","letter","and","characters,","or","transform,","characters."]},{"Key":"case character?","Fragments":["Isn't"]},{"Key":"character? Isn't","Fragments":["`(="]},{"Key":"Isn't `(=","Fragments":["(clojure.string/upper-case"]},{"Key":"`(= (clojure.string/upper-case","Fragments":["message)","message)"]},{"Key":"(clojure.string/upper-case message)","Fragments":["message)`","message)`"]},{"Key":"message) message)`","Fragments":["enough","is"]},{"Key":"message)` enough","Fragments":["to"]},{"Key":"to show,","Fragments":["that"]},{"Key":"show, that","Fragments":["the"]},{"Key":"message was","Fragments":["all"]},{"Key":"was all","Fragments":["upper"]},{"Key":"all upper","Fragments":["case","case"]},{"Key":"this passing","Fragments":["through"]},{"Key":"passing through","Fragments":["all"]},{"Key":"the tests?","Fragments":["The","What"]},{"Key":"tests? The","Fragments":["shouty?"]},{"Key":"The shouty?","Fragments":["function"]},{"Key":"shouty? function","Fragments":["doesn't"]},{"Key":"seem quite","Fragments":["right","right."]},{"Key":"quite right","Fragments":["here.","there","as"]},{"Key":"right here.","Fragments":["You","I'd","Makes"]},{"Key":"here. You","Fragments":["should","could","also","could","might"]},{"Key":"should miss","Fragments":["the"]},{"Key":"miss the","Fragments":["punctiation"]},{"Key":"the punctiation","Fragments":["in"]},{"Key":"punctiation in","Fragments":["`\"ZOMG"]},{"Key":"in `\"ZOMG","Fragments":["THE"]},{"Key":"`\"ZOMG THE","Fragments":["%^*@#$(*^"]},{"Key":"THE %^*@#$(*^","Fragments":["ZOMBIES"]},{"Key":"%^*@#$(*^ ZOMBIES","Fragments":["ARE"]},{"Key":"ZOMBIES ARE","Fragments":["COMING!!11!!1!\"`"]},{"Key":"ARE COMING!!11!!1!\"`","Fragments":["or"]},{"Key":"COMING!!11!!1!\"` or","Fragments":["am"]},{"Key":"or am","Fragments":["I"]},{"Key":"am I","Fragments":["missing","missing","right","missing","not"]},{"Key":"also still","Fragments":["an"]},{"Key":"still an","Fragments":["easier"]},{"Key":"an easier","Fragments":["way","way","problem"]},{"Key":"easier way","Fragments":["to","of"]},{"Key":"a `?`","Fragments":["at","(while","at","appended"]},{"Key":"`?` at","Fragments":["*last*","the"]},{"Key":"at *last*","Fragments":["character"]},{"Key":"*last* character","Fragments":["of"]},{"Key":"One last","Fragments":["thing:","suggestion"]},{"Key":"last thing:","Fragments":["Try"]},{"Key":"thing: Try","Fragments":["`(clojure.string/blank?"]},{"Key":"Try `(clojure.string/blank?","Fragments":["nil)`"]},{"Key":"`(clojure.string/blank? nil)`","Fragments":["in"]},{"Key":"nil)` in","Fragments":["a"]},{"Key":"a REPL","Fragments":["and","session"]},{"Key":"REPL and","Fragments":["see"]},{"Key":" @jeramy","Fragments":["you’re"]},{"Key":"@jeramy you’re","Fragments":["right"]},{"Key":"you’re right","Fragments":["about"]},{"Key":"about `silence?`","Fragments":["—"]},{"Key":"`silence?` —","Fragments":["that"]},{"Key":"— that","Fragments":["can"]},{"Key":"just be","Fragments":["`(clojure.string/blank?","aware","a","something","`(-","the","called","written","written","pulled"]},{"Key":"be `(clojure.string/blank?","Fragments":["message)`"]},{"Key":"`(clojure.string/blank? message)`","Fragments":["and"]},{"Key":"message)` and","Fragments":["handle","`:else`"]},{"Key":"and handle","Fragments":["the"]},{"Key":"handle the","Fragments":["null","implementation","partial","logic"]},{"Key":"the null","Fragments":["case"]},{"Key":"null case","Fragments":["perfectly"]},{"Key":"case perfectly","Fragments":["happily."]},{"Key":"However, with","Fragments":["`shouty?`"]},{"Key":"with `shouty?`","Fragments":["the"]},{"Key":"`shouty?` the","Fragments":["problem"]},{"Key":"with `(=","Fragments":["(clojure.string/upper-case"]},{"Key":"message)` is","Fragments":["that"]},{"Key":"would evaluate","Fragments":["as"]},{"Key":"as `true`","Fragments":["for"]},{"Key":"for inputs","Fragments":["such"]},{"Key":"inputs such","Fragments":["as"]},{"Key":"as `\"42\"`","Fragments":["or"]},{"Key":"`\"42\"` or","Fragments":["`\"\"`."]},{"Key":"tests don’t","Fragments":["specify"]},{"Key":"don’t specify","Fragments":["those"]},{"Key":"specify those","Fragments":["cases,"]},{"Key":"those cases,","Fragments":["but"]},{"Key":"cases, but","Fragments":["people","it"]},{"Key":"but people","Fragments":["suggested"]},{"Key":"people suggested","Fragments":["them"]},{"Key":"suggested them","Fragments":["in"]},{"Key":"other versions","Fragments":["of"]},{"Key":"versions of","Fragments":["the"]},{"Key":"the bob","Fragments":["exercise","namespace","exercise","namespace","namespace","problem"]},{"Key":"bob exercise","Fragments":["so","but"]},{"Key":"exercise so","Fragments":["I","I","far.","I"]},{"Key":"thought I’d","Fragments":["apply"]},{"Key":"I’d apply","Fragments":["them"]},{"Key":"apply them","Fragments":["here"]},{"Key":"them here","Fragments":["too."]},{"Key":" @dorris","Fragments":["it"]},{"Key":"@dorris it","Fragments":["passes"]},{"Key":"it passes","Fragments":["all","the","all"]},{"Key":"passes all","Fragments":["the","the","the"]},{"Key":"tests, plus","Fragments":["a"]},{"Key":"plus a","Fragments":["couple"]},{"Key":"of extras","Fragments":["for"]},{"Key":"extras for","Fragments":["cases"]},{"Key":"for cases","Fragments":["like","like"]},{"Key":"cases like","Fragments":["`(shouty?","`(shouty?","`if-let`?","'IX'"]},{"Key":" `shouty?`","Fragments":["asks"]},{"Key":"`shouty?` asks","Fragments":["*does"]},{"Key":"asks *does","Fragments":["this"]},{"Key":"*does this","Fragments":["message"]},{"Key":"this message","Fragments":["contain"]},{"Key":"message contain","Fragments":["at"]},{"Key":"contain at","Fragments":["least"]},{"Key":"least one","Fragments":["capital","blank","line-break","uppercase","upper-case","*real*","uppercase","char","edge"]},{"Key":"one capital","Fragments":["letter*"]},{"Key":"capital letter*","Fragments":["and"]},{"Key":"letter* and","Fragments":["*is"]},{"Key":"and *is","Fragments":["it"]},{"Key":"*is it","Fragments":["the"]},{"Key":"same when","Fragments":["transformed"]},{"Key":"when transformed","Fragments":["to"]},{"Key":"transformed to","Fragments":["upper-case?*"]},{"Key":"said, if","Fragments":["you’re"]},{"Key":"if you’re","Fragments":["finding"]},{"Key":"you’re finding","Fragments":["it"]},{"Key":"wrong then","Fragments":["I"]},{"Key":"probably have","Fragments":["some","a","relaxed"]},{"Key":"some issues","Fragments":["with","with"]},{"Key":"with code","Fragments":["clarity.","clarity"]},{"Key":"pretty hard","Fragments":["to"]},{"Key":"read. If","Fragments":["I"]},{"Key":"hadn't done","Fragments":["the"]},{"Key":"done the","Fragments":["exercise"]},{"Key":"exercise just","Fragments":["now,"]},{"Key":"just now,","Fragments":["I"]},{"Key":"now, I","Fragments":["wouldn't","reckon","don't"]},{"Key":"what your","Fragments":["function","`reduce`","function's","regex","code"]},{"Key":"does without","Fragments":["thinking"]},{"Key":"without thinking","Fragments":["through"]},{"Key":"thinking through","Fragments":["it."]},{"Key":"it. Since","Fragments":["this"]},{"Key":"Since this","Fragments":["whole","asked"]},{"Key":"whole exercism.io","Fragments":["thing"]},{"Key":"exercism.io thing","Fragments":["is"]},{"Key":"readability, I","Fragments":["want"]},{"Key":"about (private)","Fragments":["functions"]},{"Key":"(private) functions","Fragments":["that"]},{"Key":"can improve","Fragments":["the","or"]},{"Key":"improve the","Fragments":["readability","readability","readability"]},{"Key":"readability of","Fragments":["your","my","`word-count`?","deeply","the","the","the","this"]},{"Key":" @vernice","Fragments":["thanks"]},{"Key":"@vernice thanks","Fragments":["for"]},{"Key":"your comments","Fragments":["—"]},{"Key":"comments —","Fragments":["I’m"]},{"Key":"— I’m","Fragments":["brand"]},{"Key":"I’m brand","Fragments":["new"]},{"Key":"brand new","Fragments":["to","to"]},{"Key":"to clojure","Fragments":["so","(and","style","so","style","and","as"]},{"Key":"clojure so","Fragments":["that’s","that","I","every"]},{"Key":"so that’s","Fragments":["very"]},{"Key":"that’s very","Fragments":["helpful"]},{"Key":"very helpful","Fragments":["knowledge.","-"]},{"Key":"In answer","Fragments":["to"]},{"Key":"question about","Fragments":["the","inline"]},{"Key":"extra check","Fragments":["in"]},{"Key":"`shouty?` —","Fragments":["it’s"]},{"Key":"— it’s","Fragments":["to"]},{"Key":"it’s to","Fragments":["account"]},{"Key":" clojure.string/blank?","Fragments":["might","=\u003e","already","worked."]},{"Key":"clojure.string/blank? might","Fragments":["be","be"]},{"Key":"be useful","Fragments":["to","...","for"]},{"Key":"to you.","Fragments":["Also"]},{"Key":"you. Also","Fragments":["since"]},{"Key":"Also since","Fragments":["silence?"]},{"Key":"since silence?","Fragments":["etc."]},{"Key":"silence? etc.","Fragments":["are"]},{"Key":"etc. are","Fragments":["defined","just"]},{"Key":"are defined","Fragments":["here"]},{"Key":"defined here","Fragments":["in"]},{"Key":"bob namespace","Fragments":["you","since","anyways."]},{"Key":"namespace you","Fragments":["don't","can"]},{"Key":"to refer","Fragments":["to","to","to","in","to","in"]},{"Key":"refer to","Fragments":["them","the","clojure","it","them","the","it","clojure","`clojure.string`","specific","`clojure.string`","functions."]},{"Key":"to them","Fragments":["with","through","in","as","as","is"]},{"Key":"with their","Fragments":["namespace"]},{"Key":"their namespace","Fragments":["in"]},{"Key":"And one","Fragments":["question","other"]},{"Key":"one question","Fragments":["in","about"]},{"Key":"in particular:","Fragments":["in"]},{"Key":"particular: in","Fragments":["```shouty?```"]},{"Key":"in ```shouty?```","Fragments":["why"]},{"Key":"```shouty?``` why","Fragments":["are"]},{"Key":"you checking","Fragments":["for"]},{"Key":"for capital","Fragments":["letters"]},{"Key":"letters and","Fragments":["also","digits.","at"]},{"Key":"and also","Fragments":["checking","http://dev.clojure.org/jira/browse/CLJ-879","function","to","ensured","extracted"]},{"Key":"also checking","Fragments":["if"]},{"Key":"checking if","Fragments":["the","the","each"]},{"Key":"the upper-case","Fragments":["version"]},{"Key":"upper-case version","Fragments":["the"]},{"Key":"version the","Fragments":["same"]},{"Key":"the input?","Fragments":["the"]},{"Key":"input? the","Fragments":["regular"]},{"Key":"expression checking","Fragments":["seems"]},{"Key":"checking seems","Fragments":["redundant,"]},{"Key":"seems redundant,","Fragments":["no?"]},{"Key":"it's silly","Fragments":["that"]},{"Key":"silly that","Fragments":["we"]},{"Key":"that we","Fragments":["are","are"]},{"Key":"we are","Fragments":["supposed","talking","left","only","looking","throwing","used"]},{"Key":"are supposed","Fragments":["to"]},{"Key":"validate the","Fragments":["input","dna","input.","input","strand"]},{"Key":"input to","Fragments":["ensure","only","the","get","be"]},{"Key":"ensure that","Fragments":["it","values","the","input","the","each","robot","non"]},{"Key":"it has","Fragments":["only","the","improved","possibility","some","a"]},{"Key":"has only","Fragments":["correct"]},{"Key":"only correct","Fragments":["nucleotides."]},{"Key":"correct nucleotides.","Fragments":["This"]},{"Key":"nucleotides. This","Fragments":["should"]},{"Key":"This should","Fragments":["be","cut","give"]},{"Key":"done at","Fragments":["the"]},{"Key":"the IO","Fragments":["boundary,"]},{"Key":"IO boundary,","Fragments":["not"]},{"Key":"boundary, not","Fragments":["in"]},{"Key":"not in","Fragments":["every","love","the","logic,","words.)"]},{"Key":"every function.","Fragments":["Worse"]},{"Key":"function. Worse","Fragments":["yet,"]},{"Key":"Worse yet,","Fragments":["the"]},{"Key":"yet, the","Fragments":["exercise"]},{"Key":"exercise uses","Fragments":["strings"]},{"Key":"uses strings","Fragments":["rather"]},{"Key":"strings rather","Fragments":["than"]},{"Key":"than characters","Fragments":["to"]},{"Key":"represent individual","Fragments":["nucleotides,"]},{"Key":"individual nucleotides,","Fragments":["which"]},{"Key":"nucleotides, which","Fragments":["is"]},{"Key":"a waste","Fragments":["(in"]},{"Key":"waste (in","Fragments":["time,"]},{"Key":"(in time,","Fragments":["space,"]},{"Key":"time, space,","Fragments":["and"]},{"Key":"space, and","Fragments":["code"]},{"Key":"and code","Fragments":["size)."]},{"Key":"The Elixir","Fragments":["version"]},{"Key":"Elixir version","Fragments":["of"]},{"Key":"exercise doesn't","Fragments":["have","use"]},{"Key":"have either","Fragments":["of"]},{"Key":"either of","Fragments":["these","these","you"]},{"Key":"these design","Fragments":["issues"]},{"Key":"design issues","Fragments":["(although"]},{"Key":"issues (although","Fragments":["representing"]},{"Key":"(although representing","Fragments":["a"]},{"Key":"representing a","Fragments":["nucleotide"]},{"Key":"a nucleotide","Fragments":["strand","namespace","\"X\""]},{"Key":"nucleotide strand","Fragments":["as"]},{"Key":"strand as","Fragments":["a"]},{"Key":"chars rather","Fragments":["than"]},{"Key":"a binary","Fragments":["is"]},{"Key":"binary is","Fragments":["not"]},{"Key":"not so","Fragments":["efficient,","much"]},{"Key":"so efficient,","Fragments":["so"]},{"Key":"efficient, so","Fragments":["it's"]},{"Key":"not perfect)","Fragments":["and"]},{"Key":"perfect) and","Fragments":["can"]},{"Key":"and can","Fragments":["be","most","now","specify","default","be"]},{"Key":"be solved","Fragments":["much","in","more"]},{"Key":"solved much","Fragments":["more"]},{"Key":" Added","Fragments":["`ifnil?`","docstrings,","a","a","a"]},{"Key":"Added `ifnil?`","Fragments":["function,"]},{"Key":"`ifnil?` function,","Fragments":["that"]},{"Key":"function, that","Fragments":["looks","lead"]},{"Key":"much better.","Fragments":["Ignore"]},{"Key":"better. Ignore","Fragments":["Version3"]},{"Key":"Ignore Version3","Fragments":[":)"]},{"Key":" Given","Fragments":["how"]},{"Key":"Given how","Fragments":["good","the"]},{"Key":"how good","Fragments":["I"]},{"Key":"good I","Fragments":["am","would"]},{"Key":"am at","Fragments":["submitting"]},{"Key":"at submitting","Fragments":["code"]},{"Key":"mean just","Fragments":["to"]},{"Key":"test it","Fragments":["-"]},{"Key":"it -","Fragments":["it","I","silly"]},{"Key":"nice if","Fragments":["I"]},{"Key":"could delete","Fragments":["failing"]},{"Key":"delete failing","Fragments":["submissions"]},{"Key":"failing submissions","Fragments":["when"]},{"Key":"submissions when","Fragments":["I"]},{"Key":"I do!","Fragments":["Sigh..."]},{"Key":"how concise","Fragments":["the","you","this","this"]},{"Key":"concise the","Fragments":["Clojure"]},{"Key":"Clojure solutions","Fragments":["for"]},{"Key":"solutions for","Fragments":["these"]},{"Key":"these problems","Fragments":["are"]},{"Key":"problems are","Fragments":["compared"]},{"Key":"are compared","Fragments":["to"]},{"Key":"compared to","Fragments":["the","Racket,","#1.","other"]},{"Key":"the Ruby","Fragments":["\u0026amp;","world,","world","track)..."]},{"Key":"Ruby \u0026amp;","Fragments":["Javascript"]},{"Key":"\u0026amp; Javascript","Fragments":["ones"]},{"Key":"Javascript ones","Fragments":["I've"]},{"Key":"ones I've","Fragments":["been"]},{"Key":"been doing.","Fragments":["It"]},{"Key":"doing. It","Fragments":["helps"]},{"Key":"helps that","Fragments":["Clojure"]},{"Key":"Clojure has","Fragments":["a","some","also","a","to","a","taken.","pre"]},{"Key":"good sequence","Fragments":["library."]},{"Key":"submission -","Fragments":["now","lets","I"]},{"Key":"- now","Fragments":["looking","it"]},{"Key":"now looking","Fragments":["at"]},{"Key":"it after","Fragments":["submission"]},{"Key":"after submission","Fragments":["I"]},{"Key":"might inline","Fragments":["```sorted-word```"]},{"Key":"inline ```sorted-word```","Fragments":["-"]},{"Key":"```sorted-word``` -","Fragments":["while"]},{"Key":"- while","Fragments":["doing","that's"]},{"Key":"while doing","Fragments":["it","this...oof.","the"]},{"Key":"once is","Fragments":["nice"]},{"Key":"nice -","Fragments":["maybe"]},{"Key":"a small","Fragments":["bit","thing,","random","one,","nitpick","self-contained","amount.","\"program\".","codebase","nit","change","change","nitpick","bit","change"]},{"Key":"small bit","Fragments":["of","of"]},{"Key":"of premature","Fragments":["optimization?"]},{"Key":"do nucleotides","Fragments":["have"]},{"Key":"nucleotides have","Fragments":["to"]},{"Key":"this exercise?","Fragments":[":p"]},{"Key":"`frequencies` here","Fragments":[":)"]},{"Key":"you re-ordered","Fragments":["splitting"]},{"Key":"re-ordered splitting","Fragments":["the"]},{"Key":"initial string","Fragments":["and"]},{"Key":"string and","Fragments":["lowercasing","mapping","use","compare","get","only","then","a","the","regex","instead","chop","compare"]},{"Key":"and lowercasing","Fragments":["the","the","the"]},{"Key":"lowercasing the","Fragments":["chunks,","input","input"]},{"Key":"the chunks,","Fragments":["you"]},{"Key":"chunks, you","Fragments":["could"]},{"Key":"could do","Fragments":["a","this","just","`(map","the","as","to","something","if","the","that","it","otherwise...","away","it"]},{"Key":"a \"simple\"","Fragments":["`lower-case`"]},{"Key":"\"simple\" `lower-case`","Fragments":["instead"]},{"Key":"`lower-case` instead","Fragments":["of"]},{"Key":"of having","Fragments":["to","`add-name-to-grade`","to","to","to"]},{"Key":"having to","Fragments":["map","bother","scroll","tack","depend","create","map","make","work","read","go","convert","do","also","write","drop","write","write"]},{"Key":"to map","Fragments":["over","out","over","across","the","or","which","across"]},{"Key":"map over","Fragments":["a","the","the","strands","a","it."]},{"Key":"I've created","Fragments":["`def`s"]},{"Key":"created `def`s","Fragments":["for"]},{"Key":"`def`s for","Fragments":["the"]},{"Key":"constants thymine","Fragments":["and"]},{"Key":"thymine and","Fragments":["uracil"]},{"Key":"and uracil","Fragments":["to","public.","are"]},{"Key":"uracil to","Fragments":["remove"]},{"Key":"to remove","Fragments":["the","the","some","the","duplication","the","the","the","`add-frequency`","the","blanks?","`only-numbers?`","need","anonymous","the","the","some","all","the"]},{"Key":"remove the","Fragments":["undocumented","necessity","docstrings","test","`clojure.string/`","`clojure.string/`","double","`clojure.string`","replace","`dissoc`","validate","need","need","clojure.string","redundancy","need","`not,","need","filter","commented-out","duplicate","fully-qualified","need"]},{"Key":"the undocumented","Fragments":["constants"]},{"Key":"undocumented constants","Fragments":["`\\T`"]},{"Key":"constants `\\T`","Fragments":["and"]},{"Key":"thing: Perhaps","Fragments":["you"]},{"Key":"could `def`","Fragments":["the"]},{"Key":"`def` the","Fragments":["two"]},{"Key":"two characters","Fragments":["T"]},{"Key":"characters T","Fragments":["and"]},{"Key":"and U","Fragments":["to","like"]},{"Key":"U to","Fragments":["give"]},{"Key":"name that","Fragments":["makes","doesn't","would","(even","well","makes"]},{"Key":"makes their","Fragments":["meaning"]},{"Key":"their meaning","Fragments":["more"]},{"Key":"meaning more","Fragments":["obvious"]},{"Key":"more obvious","Fragments":["to","way"]},{"Key":"reader of","Fragments":["the"]},{"Key":"While I","Fragments":["agree","think","was","agree","used"]},{"Key":"is important","Fragments":["to","(which","because"]},{"Key":"important to","Fragments":["follow","me.","note"]},{"Key":"follow a","Fragments":["style"]},{"Key":"style guide,","Fragments":["I","which"]},{"Key":"guide, I","Fragments":["do"]},{"Key":"do have","Fragments":["some","a","a","a"]},{"Key":"some questions","Fragments":["for","for"]},{"Key":"questions for","Fragments":["this.","nitpickers:"]},{"Key":"this. Is","Fragments":["the"]},{"Key":"the style","Fragments":["guide","for","good","guide.","consistent","guide.","here","guide.","I've"]},{"Key":"guide you","Fragments":["link"]},{"Key":"you link","Fragments":["to"]},{"Key":"link to","Fragments":["the","an","the"]},{"Key":"the definitive","Fragments":["accepted"]},{"Key":"definitive accepted","Fragments":["style"]},{"Key":"accepted style","Fragments":["in","to"]},{"Key":"Clojure community,","Fragments":["or"]},{"Key":"community, or","Fragments":["is"]},{"Key":"there others","Fragments":["to"]},{"Key":"others to","Fragments":["choose","understand"]},{"Key":"to choose","Fragments":["from"]},{"Key":"choose from","Fragments":["?"]},{"Key":"Is closing","Fragments":["parens"]},{"Key":"on same","Fragments":["line"]},{"Key":"line a","Fragments":["requirement"]},{"Key":"a requirement","Fragments":["?","in","for"]},{"Key":"requirement ?","Fragments":["Coming"]},{"Key":"? Coming","Fragments":["mostly"]},{"Key":"Coming mostly","Fragments":["from"]},{"Key":"mostly from","Fragments":["curly-brace"]},{"Key":"from curly-brace","Fragments":["languages,"]},{"Key":"curly-brace languages,","Fragments":["putting"]},{"Key":"languages, putting","Fragments":["the"]},{"Key":"putting the","Fragments":["paren","set","top","public","`(:require","consequent","answers","parens.","logic","args","private"]},{"Key":"the paren","Fragments":["on"]},{"Key":"paren on","Fragments":["a","a"]},{"Key":"line helps","Fragments":["me"]},{"Key":"helps me","Fragments":["identify"]},{"Key":"me identify","Fragments":["where"]},{"Key":"identify where","Fragments":["the"]},{"Key":"of functions,","Fragments":["etc.,","create"]},{"Key":"functions, etc.,","Fragments":["ends."]},{"Key":"think my","Fragments":["editor","shouty?","only"]},{"Key":"my editor","Fragments":["might"]},{"Key":"editor might","Fragments":["be"]},{"Key":"be setup","Fragments":["to"]},{"Key":"setup to","Fragments":["4"]},{"Key":"to 4","Fragments":["spaces,"]},{"Key":"4 spaces,","Fragments":["will"]},{"Key":"spaces, will","Fragments":["look"]},{"Key":"will look","Fragments":["into","into","fine","it","into"]},{"Key":" _Note,","Fragments":["doing"]},{"Key":"_Note, doing","Fragments":["these"]},{"Key":"doing these","Fragments":["exercises","after"]},{"Key":"these exercises","Fragments":["is"]},{"Key":"exercises is","Fragments":["my"]},{"Key":"first ever","Fragments":["exposure","Clojure","Clojure"]},{"Key":"ever exposure","Fragments":["to"]},{"Key":"exposure to","Fragments":["clojure","both","both"]},{"Key":"clojure (and","Fragments":["any","some"]},{"Key":"any Lisp-like","Fragments":["languages,"]},{"Key":"Lisp-like languages,","Fragments":["really)_."]},{"Key":"It's really","Fragments":["matter"]},{"Key":"really matter","Fragments":["of","that","here,"]},{"Key":"taste, there's","Fragments":["no"]},{"Key":"no *official*","Fragments":["best"]},{"Key":"*official* best","Fragments":["practice,"]},{"Key":"best practice,","Fragments":["so"]},{"Key":"practice, so","Fragments":["YMMV."]},{"Key":"so YMMV.","Fragments":["My"]},{"Key":"YMMV. My","Fragments":["only"]},{"Key":"only intent","Fragments":["here"]},{"Key":"intent here","Fragments":["is","imho,"]},{"Key":"here is","Fragments":["to","that","the","shorter","the","that","in","off","perfectly","`(=","important,","important,"]},{"Key":"possibly inspire","Fragments":["you"]},{"Key":"inspire you","Fragments":["and"]},{"Key":"you and","Fragments":["make","automatically","your","I"]},{"Key":"make you","Fragments":["creatively"]},{"Key":"you creatively","Fragments":["think"]},{"Key":"creatively think","Fragments":["of"]},{"Key":"new other","Fragments":["ways"]},{"Key":"other ways","Fragments":["to"]},{"Key":"about a","Fragments":["problem","solution","library","recursive","second","way","different"]},{"Key":"a problem","Fragments":[":)","that","with","for","if","with","in","that"]},{"Key":"You're still","Fragments":["using"]},{"Key":"still using","Fragments":["`mapv`"]},{"Key":"using `mapv`","Fragments":["instead"]},{"Key":"`mapv` instead","Fragments":["of","of"]},{"Key":"of `map`","Fragments":["but","-","form","/","and","and"]},{"Key":"`map` but","Fragments":["that's"]},{"Key":"that's fine","Fragments":["by"]},{"Key":"fine by","Fragments":["me."]},{"Key":"by me.","Fragments":["In","Thanks!"]},{"Key":"me. In","Fragments":["some","future"]},{"Key":"In some","Fragments":["context"]},{"Key":"some context","Fragments":["it"]},{"Key":"context it","Fragments":["could"]},{"Key":"you really","Fragments":["need","do","need","only","need","want","need","need"]},{"Key":"a vector?","Fragments":["`list`"]},{"Key":"vector? `list`","Fragments":["and"]},{"Key":"`list` and","Fragments":["`vector`"]},{"Key":"and `vector`","Fragments":["with"]},{"Key":"`vector` with","Fragments":["the"]},{"Key":"equal. `seq`","Fragments":["is"]},{"Key":"`seq` is","Fragments":["redundant.","optional...","unnecessary.","a"]},{"Key":"use `mapv`","Fragments":["and"]},{"Key":"`mapv` and","Fragments":["removed"]},{"Key":"removed `seq-to-dna`","Fragments":["because"]},{"Key":"`seq-to-dna` because","Fragments":["it's"]},{"Key":"because it's","Fragments":["obsolet","relatively","in"]},{"Key":"it's obsolet","Fragments":["when"]},{"Key":"obsolet when","Fragments":["using"]},{"Key":"when using","Fragments":["`mapv`.","e.g.","function","it","`let`s","two","atoms"]},{"Key":"I have.","Fragments":["But","It"]},{"Key":"have. But","Fragments":["I"]},{"Key":"personally think","Fragments":["that"]},{"Key":"this very","Fragments":["operator","well,","smoothly"]},{"Key":"very operator","Fragments":["reduces"]},{"Key":"operator reduces","Fragments":["readability"]},{"Key":"reduces readability","Fragments":["of","IMHO,"]},{"Key":"my code.","Fragments":["If","It","I"]},{"Key":"are new","Fragments":["to"]},{"Key":"to Lisp-like","Fragments":["languages"]},{"Key":"Lisp-like languages","Fragments":["the"]},{"Key":"languages the","Fragments":["first"]},{"Key":"first rule","Fragments":["you","expand"]},{"Key":"rule you","Fragments":["learn"]},{"Key":"you learn","Fragments":["is:"]},{"Key":"learn is:","Fragments":["Read"]},{"Key":"is: Read","Fragments":["the"]},{"Key":"Read the","Fragments":["functions"]},{"Key":"from inside","Fragments":["out","`reduce`","out."]},{"Key":"inside out","Fragments":["to","it","-"]},{"Key":"to understand,","Fragments":["what","and"]},{"Key":"understand, what","Fragments":["the"]},{"Key":"the software","Fragments":["does."]},{"Key":"software does.","Fragments":["Though"]},{"Key":"does. Though","Fragments":["`-›`"]},{"Key":"Though `-›`","Fragments":["is"]},{"Key":"`-›` is","Fragments":["a"]},{"Key":"really nice","Fragments":["shortcut","in","overall.","use","too;"]},{"Key":"nice shortcut","Fragments":["and"]},{"Key":"shortcut and","Fragments":["I've"]},{"Key":"and I've","Fragments":["used","even"]},{"Key":"other pieces","Fragments":["I've"]},{"Key":"pieces I've","Fragments":["written,"]},{"Key":"written, I","Fragments":["really"]},{"Key":"really think,","Fragments":["it"]},{"Key":"think, it","Fragments":["lowers"]},{"Key":"it lowers","Fragments":["readability."]},{"Key":"lowers readability.","Fragments":["I"]},{"Key":"also played","Fragments":["around"]},{"Key":"played around","Fragments":["with","with","a"]},{"Key":"around with","Fragments":["`comp`.","frequencies","Racket","intern","a"]},{"Key":"with `comp`.","Fragments":["But","Besides,"]},{"Key":"`comp`. But","Fragments":["instead"]},{"Key":"But instead","Fragments":["from"]},{"Key":"instead from","Fragments":["your"]},{"Key":"your data","Fragments":["flowing"]},{"Key":"data flowing","Fragments":["from"]},{"Key":"flowing from","Fragments":["the"]},{"Key":"the inside","Fragments":["out"]},{"Key":"out it","Fragments":["flows"]},{"Key":"it flows","Fragments":["from","from"]},{"Key":"flows from","Fragments":["left","the"]},{"Key":"to right","Fragments":["-"]},{"Key":"right -","Fragments":["which","I've","the"]},{"Key":"- which","Fragments":["is","leads","means","you","means"]},{"Key":"in no","Fragments":["way"]},{"Key":"way intuitive","Fragments":["if"]},{"Key":"intuitive if","Fragments":["all"]},{"Key":"if all","Fragments":["you","the","functions","vars/functions","of","the"]},{"Key":"all you","Fragments":["know","need"]},{"Key":"know is","Fragments":["the","unlikely"]},{"Key":"the rule","Fragments":["I"]},{"Key":"rule I","Fragments":["mentioned"]},{"Key":"I mentioned","Fragments":["above."]},{"Key":"But as","Fragments":["I"]},{"Key":"said before:","Fragments":["I"]},{"Key":"before: I","Fragments":["am"]},{"Key":"am myself","Fragments":["a"]},{"Key":"a beginner","Fragments":["and","when"]},{"Key":"beginner and","Fragments":["I"]},{"Key":"advice and","Fragments":["play"]},{"Key":"and play","Fragments":["with"]},{"Key":"play with","Fragments":["`-›`","extracting"]},{"Key":"with `-›`","Fragments":["again"]},{"Key":"`-›` again","Fragments":["(and"]},{"Key":"again (and","Fragments":["also"]},{"Key":"(and also","Fragments":["look"]},{"Key":"also look","Fragments":["at","to","into","into"]},{"Key":"at `-››`","Fragments":["which"]},{"Key":"`-››` which","Fragments":["to"]},{"Key":"which to","Fragments":["me"]},{"Key":"the task","Fragments":["into","first"]},{"Key":"task into","Fragments":["three"]},{"Key":"into three","Fragments":["functions:"]},{"Key":"- transcribe","Fragments":["which"]},{"Key":"transcribe which","Fragments":["only"]},{"Key":"which only","Fragments":["task"]},{"Key":"only task","Fragments":["is"]},{"Key":"task is","Fragments":["to"]},{"Key":"to transcribe","Fragments":["a"]},{"Key":"transcribe a","Fragments":["single"]},{"Key":"single DNA","Fragments":["literal"]},{"Key":"DNA literal","Fragments":["into"]},{"Key":"literal into","Fragments":["RNA"]},{"Key":"- seq-to-rna","Fragments":["which"]},{"Key":"seq-to-rna which","Fragments":["transforms"]},{"Key":"which transforms","Fragments":["a","a"]},{"Key":"transforms a","Fragments":["sequence","string","sequence"]},{"Key":"DNA literals","Fragments":["into","into","and"]},{"Key":"literals into","Fragments":["a","a","a"]},{"Key":"of RNA","Fragments":["literals","literals",";-)","base,"]},{"Key":"- to-rna","Fragments":["which"]},{"Key":"to-rna which","Fragments":["transforms"]},{"Key":"string of","Fragments":["DNA"]},{"Key":"literals and","Fragments":["transforms","forms","the"]},{"Key":"and transforms","Fragments":["a"]},{"Key":"RNA literals","Fragments":["into"]},{"Key":"Please bear","Fragments":["in"]},{"Key":"bear in","Fragments":["mind"]},{"Key":"that seq-to-rna","Fragments":["is"]},{"Key":"seq-to-rna is","Fragments":["not"]},{"Key":"not tail-recursive,","Fragments":["so"]},{"Key":"tail-recursive, so","Fragments":["you"]},{"Key":"can overflow","Fragments":["the"]},{"Key":"overflow the","Fragments":["call"]},{"Key":"stack with","Fragments":["input"]},{"Key":"with input","Fragments":["big"]},{"Key":"input big","Fragments":["enough."]},{"Key":"big enough.","Fragments":["Basically,"]},{"Key":"enough. Basically,","Fragments":["you"]},{"Key":"Basically, you","Fragments":["are"]},{"Key":"are reinventing","Fragments":["`map`"]},{"Key":"reinventing `map`","Fragments":["here"]},{"Key":"`map` here","Fragments":["a"]},{"Key":"here a","Fragments":["bit","couple","little"]},{"Key":"bit which","Fragments":["would"]},{"Key":"would fit","Fragments":["the"]},{"Key":"fit the","Fragments":["purpose","language"]},{"Key":"the purpose","Fragments":["better.","of","of","of","of","of","of"]},{"Key":"Please pay","Fragments":["also"]},{"Key":"pay also","Fragments":["attention"]},{"Key":"also attention","Fragments":["to"]},{"Key":"attention to","Fragments":["proper","things","the"]},{"Key":"to proper","Fragments":["code"]},{"Key":"proper code","Fragments":["formatting"]},{"Key":"formatting -","Fragments":["all"]},{"Key":"- all","Fragments":["closing"]},{"Key":"parentheses should","Fragments":["be"]},{"Key":"last form","Fragments":["in"]},{"Key":"form in","Fragments":["expression.","the","case","arrow","robot","files."]},{"Key":"in expression.","Fragments":["`require`"]},{"Key":"expression. `require`","Fragments":["in"]},{"Key":"`require` in","Fragments":["`ns`"]},{"Key":"in `ns`","Fragments":["should","macro.","macro.","macro,","is","form"]},{"Key":"`ns` should","Fragments":["be"]},{"Key":"be in","Fragments":["it's","scope.","the","terms","the","`transcribe`","the","its","order.","increasing"]},{"Key":"in it's","Fragments":["own","documentation,","lexical","own","own","own"]},{"Key":"line. Indentation","Fragments":["doesn't"]},{"Key":"Indentation doesn't","Fragments":["look"]},{"Key":"doesn't look","Fragments":["entirely","that","like","so","like"]},{"Key":"look entirely","Fragments":["right"]},{"Key":"entirely right","Fragments":["either"]},{"Key":"right either","Fragments":["(two"]},{"Key":"either (two","Fragments":["spaces"]},{"Key":"(two spaces","Fragments":["are"]},{"Key":"spaces are","Fragments":["used","standard","used."]},{"Key":"are used","Fragments":["in","for","for","to"]},{"Key":"in most","Fragments":["cases).","places,","cases."]},{"Key":"most cases).","Fragments":["More"]},{"Key":"cases). More","Fragments":["about"]},{"Key":"More about","Fragments":["Clojure"]},{"Key":"about Clojure","Fragments":["code","compared","is"]},{"Key":"Clojure code","Fragments":["style","I've","on","looks","I've","I've","and","readable","as"]},{"Key":"code style","Fragments":["guidelines"]},{"Key":"guidelines can","Fragments":["be"]},{"Key":"be found","Fragments":["here:","in","here:","here:"]},{"Key":"found here:","Fragments":["https://github.com/bbatsov/clojure-style-guide","http://stackoverflow.com/a/11006759/477048","http://blog.fogus.me/2009/12/21/clojures-pre-and-post/"]},{"Key":"Both are","Fragments":["valid,","great","good"]},{"Key":"are valid,","Fragments":["though"]},{"Key":"valid, though","Fragments":["`re-seq`"]},{"Key":"though `re-seq`","Fragments":["reflects"]},{"Key":"`re-seq` reflects","Fragments":["a"]},{"Key":"reflects a","Fragments":["bit"]},{"Key":"more the","Fragments":["intent"]},{"Key":"here imho,","Fragments":["though"]},{"Key":"imho, though","Fragments":["this"]},{"Key":"the `-›`","Fragments":["or","or"]},{"Key":"`-›` or","Fragments":["`-››`","`-››`"]},{"Key":"or `-››`","Fragments":["macros","macros"]},{"Key":"macros for","Fragments":["chaining","that."]},{"Key":"for chaining","Fragments":["your"]},{"Key":"chaining your","Fragments":["operations"]},{"Key":"your operations","Fragments":["here?","a"]},{"Key":"FWIW, here's","Fragments":["how"]},{"Key":"here's how","Fragments":["you"]},{"Key":"can tell","Fragments":["clojure","I","it","me","you","you"]},{"Key":"tell clojure","Fragments":["that"]},{"Key":"clojure that","Fragments":["you"]},{"Key":"really do","Fragments":["want","a"]},{"Key":"have `clojure.string/replace`","Fragments":["shadow"]},{"Key":"`clojure.string/replace` shadow","Fragments":["`replace`"]},{"Key":"shadow `replace`","Fragments":["in"]},{"Key":"`replace` in","Fragments":["your"]},{"Key":" (:refer-clojure","Fragments":[":exclude",":exclude",":exclude"]},{"Key":"(:refer-clojure :exclude","Fragments":["[replace]))","[count])","[count]))"]},{"Key":" ...","Fragments":["probably"]},{"Key":"... probably","Fragments":["not"]},{"Key":"not worth","Fragments":["it","the"]},{"Key":"this example.","Fragments":[";-)","Although"]},{"Key":"With `def`","Fragments":["you"]},{"Key":"`def` you","Fragments":["are"]},{"Key":"are creating","Fragments":["a"]},{"Key":"a global","Fragments":["var"]},{"Key":"global var","Fragments":["in"]},{"Key":"var in","Fragments":["a"]},{"Key":"a current","Fragments":["namespace.","namespace,"]},{"Key":"current namespace.","Fragments":["What"]},{"Key":"want here,","Fragments":["is"]},{"Key":"here, is","Fragments":["a"]},{"Key":"a lexical","Fragments":["binding","sort"]},{"Key":"create with","Fragments":["the"]},{"Key":"the help","Fragments":["of","of","of","of","with","of"]},{"Key":"of `let`","Fragments":["form.","and","with"]},{"Key":"say here,","Fragments":["looks"]},{"Key":"here, looks","Fragments":["very"]},{"Key":"So there's","Fragments":["actually","actually","actually"]},{"Key":"there's actually","Fragments":["a","a","a"]},{"Key":"actually a","Fragments":["better","better","better","matter","thing,","domain"]},{"Key":"better algorithm","Fragments":["(O(n)","(O(n)","(O(n)","for"]},{"Key":"algorithm (O(n)","Fragments":["instead","instead","instead"]},{"Key":"(O(n) instead","Fragments":["of","of","of"]},{"Key":"of O(n","Fragments":["*","*","*","log"]},{"Key":"O(n *","Fragments":["log","log","log","log(n))"]},{"Key":"* log","Fragments":["n))","n))","n))","n)`,"]},{"Key":"log n))","Fragments":["for","for","for"]},{"Key":"n)) for","Fragments":["this","this","this"]},{"Key":"this that","Fragments":["is","is","is"]},{"Key":"less code","Fragments":["(because,","(because,","(because,","maintenance.","is"]},{"Key":"code (because,","Fragments":["like","like","like"]},{"Key":"(because, like","Fragments":["sort,","sort,","sort,"]},{"Key":"like sort,","Fragments":["its","its","its"]},{"Key":"sort, its","Fragments":["implementation","implementation","implementation"]},{"Key":"its implementation","Fragments":["is","is","is"]},{"Key":"in clojure.core).","Fragments":["Here's","Here's","Here's"]},{"Key":"clojure.core). Here's","Fragments":["a","a","a"]},{"Key":"a hint:","Fragments":["look","look","look"]},{"Key":"hint: look","Fragments":["at","at","at"]},{"Key":"you've used","Fragments":["in","in","in","`not-any?`"]},{"Key":"in past","Fragments":["exercises.","exercises.","exercises.","assignments."]},{"Key":"Ok, so","Fragments":["on","is"]},{"Key":"so on","Fragments":["another","strewn"]},{"Key":"on another","Fragments":["look","exercise!","code,"]},{"Key":"another look","Fragments":["I","there.","in","at"]},{"Key":"look I","Fragments":["concluded"]},{"Key":"I concluded","Fragments":["that"]},{"Key":"concluded that","Fragments":["I've"]},{"Key":"that I've","Fragments":["overdone","used","picked","seen","forgot","not"]},{"Key":"I've overdone","Fragments":["this","it","it,"]},{"Key":"overdone this","Fragments":["and"]},{"Key":"and helper","Fragments":["would"]},{"Key":"helper would","Fragments":["be"]},{"Key":"be useless","Fragments":["under"]},{"Key":"useless under","Fragments":["any"]},{"Key":"under any","Fragments":["other"]},{"Key":"other potential","Fragments":["context"]},{"Key":"potential context","Fragments":["and"]},{"Key":"context and","Fragments":["it"]},{"Key":"doesn't contribute","Fragments":["much"]},{"Key":"contribute much","Fragments":["to"]},{"Key":"the code's","Fragments":["readability"]},{"Key":"code's readability","Fragments":[":)"]},{"Key":"I'm somehow","Fragments":["missing"]},{"Key":"somehow missing","Fragments":["out"]},{"Key":"the \"less","Fragments":["code\""]},{"Key":"\"less code\"","Fragments":["part."]},{"Key":"code\" part.","Fragments":["I"]},{"Key":"part. I","Fragments":["could","was"]},{"Key":"could inline","Fragments":["everything"]},{"Key":"inline everything","Fragments":["into"]},{"Key":"everything into","Fragments":["a"]},{"Key":"single function","Fragments":["but","from","without"]},{"Key":"intent less","Fragments":["clear"]},{"Key":"my opinion.","Fragments":["Is","`declare`"]},{"Key":"opinion. Is","Fragments":["there"]},{"Key":"else I'm","Fragments":["missing?"]},{"Key":"don't personally","Fragments":["see"]},{"Key":"personally see","Fragments":["a"]},{"Key":"of value","Fragments":["in","of"]},{"Key":"value in","Fragments":["defining","the","forcing","forcing","the","your"]},{"Key":"in defining","Fragments":["functions"]},{"Key":"defining functions","Fragments":["that"]},{"Key":"do nothing","Fragments":["more"]},{"Key":"nothing more","Fragments":["than"]},{"Key":"than wrap","Fragments":["another"]},{"Key":"wrap another","Fragments":["function"]},{"Key":"another function","Fragments":["with","for","for","in","to"]},{"Key":"function with","Fragments":["a","`[\u0026amp;","the","the","pre-calculated","the","#","a","the","a","varying","`check`."]},{"Key":"new name.","Fragments":["I"]},{"Key":"name. I","Fragments":["find","hope","can't","think","like"]},{"Key":"it harder","Fragments":["to","to","to","for"]},{"Key":"understand because","Fragments":["there's"]},{"Key":"because there's","Fragments":["more","no"]},{"Key":"than twice","Fragments":["as"]},{"Key":"twice as","Fragments":["much","many","slow"]},{"Key":"much code","Fragments":["to"]},{"Key":"read. Note","Fragments":["also"]},{"Key":"Note also","Fragments":["that"]},{"Key":"also that","Fragments":["if","according"]},{"Key":"that if","Fragments":["you","I","word","you","we","so.","the","the","I"]},{"Key":"used -\u0026gt;\u0026gt;","Fragments":["you"]},{"Key":"-\u0026gt;\u0026gt; you","Fragments":["could"]},{"Key":"this all","Fragments":["in"]},{"Key":"all in","Fragments":["word-count","a"]},{"Key":"in word-count","Fragments":["without","too,"]},{"Key":"word-count without","Fragments":["wrapping"]},{"Key":"without wrapping","Fragments":["anything","the"]},{"Key":"wrapping anything","Fragments":["at"]},{"Key":"anything at","Fragments":["all."]},{"Key":" (I","Fragments":["did","was"]},{"Key":"(I did","Fragments":["mark"]},{"Key":"did mark","Fragments":["it"]},{"Key":"mark it","Fragments":["as","off","as"]},{"Key":"as great","Fragments":["as"]},{"Key":"great as","Fragments":["this"]},{"Key":"as this","Fragments":["opinion","allows","is","one)."]},{"Key":"this opinion","Fragments":["is"]},{"Key":"opinion is","Fragments":["certainly"]},{"Key":"certainly subjective,","Fragments":["and"]},{"Key":"subjective, and","Fragments":["there's"]},{"Key":"and there's","Fragments":["nothing","an"]},{"Key":"nothing actually","Fragments":["wrong"]},{"Key":"actually wrong","Fragments":["with"]},{"Key":"Hey, thank","Fragments":["you"]},{"Key":"could explain","Fragments":["the"]},{"Key":"explain the","Fragments":["advantage"]},{"Key":"the advantage","Fragments":["of","of","of"]},{"Key":" (re-seq","Fragments":["#\"\\w+\"","#\"\\w+\""]},{"Key":"(re-seq #\"\\w+\"","Fragments":["(str/lower-case","string))","phrase)"]},{"Key":"#\"\\w+\" (str/lower-case","Fragments":["phrase))"]},{"Key":" over","Fragments":["my"]},{"Key":"over my","Fragments":["usage"]},{"Key":" (str/split","Fragments":["(str/lower-case"]},{"Key":"(str/split (str/lower-case","Fragments":["phrase)"]},{"Key":"(str/lower-case phrase)","Fragments":["#\"\\W+\")"]},{"Key":"am still","Fragments":["pretty","a"]},{"Key":"Clojure and","Fragments":["just","so","functional","this","it","that","make"]},{"Key":"just start","Fragments":["my"]},{"Key":"start my","Fragments":["diving"]},{"Key":"my diving","Fragments":["tour."]},{"Key":"diving tour.","Fragments":["Why"]},{"Key":"tour. Why","Fragments":["would"]},{"Key":"Why would","Fragments":["you"]},{"Key":"prefer a","Fragments":["`clojure.core`","clojure","more"]},{"Key":"a `clojure.core`","Fragments":["function"]},{"Key":"`clojure.core` function","Fragments":["over"]},{"Key":"function over","Fragments":["a","a","it."]},{"Key":" IMO,","Fragments":["replacing","it"]},{"Key":"IMO, replacing","Fragments":["characters"]},{"Key":"replacing characters","Fragments":["in","in","in"]},{"Key":"and mapping","Fragments":["over"]},{"Key":"a replacement","Fragments":["function"]},{"Key":"replacement function","Fragments":["are"]},{"Key":"function are","Fragments":["equally","an"]},{"Key":"are equally","Fragments":["valid","performant."]},{"Key":"equally valid","Fragments":["implementations."]},{"Key":"valid implementations.","Fragments":["This"]},{"Key":"implementations. This","Fragments":["one"]},{"Key":"of being","Fragments":["less","shorter"]},{"Key":"being less","Fragments":["coupled","expressive"]},{"Key":"less coupled","Fragments":["to"]},{"Key":"coupled to","Fragments":["the"]},{"Key":"string representation","Fragments":["of","from"]},{"Key":"representation of","Fragments":["a","a","the","the"]},{"Key":"a strand.","Fragments":["If"]},{"Key":"strand. If","Fragments":["the","it's"]},{"Key":"the representation","Fragments":["changed","to"]},{"Key":"representation changed","Fragments":["in"]},{"Key":"changed in","Fragments":["the","between","between"]},{"Key":"the future,","Fragments":["this","look"]},{"Key":"future, this","Fragments":["implementation"]},{"Key":"better chance","Fragments":["of"]},{"Key":"chance of","Fragments":["still","becoming"]},{"Key":"of still","Fragments":["working."]},{"Key":"do prefer","Fragments":["the","more"]},{"Key":"parens inline,","Fragments":["but"]},{"Key":"inline, but","Fragments":["I"]},{"Key":"for having","Fragments":["them","deleted"]},{"Key":"having them","Fragments":["trailing","at"]},{"Key":"them trailing","Fragments":["(easier"]},{"Key":"trailing (easier","Fragments":["to"]},{"Key":"(easier to","Fragments":["see"]},{"Key":"a fn),","Fragments":["so"]},{"Key":"fn), so","Fragments":["I'll"]},{"Key":"so I'll","Fragments":["not","look","try"]},{"Key":"I'll not","Fragments":["hold"]},{"Key":"not hold","Fragments":["you"]},{"Key":"hold you","Fragments":["up","off"]},{"Key":"you up","Fragments":["for"]},{"Key":"up for","Fragments":["that.","too","\"Sure\"."]},{"Key":"I've imported","Fragments":["blank?"]},{"Key":"imported blank?","Fragments":["and"]},{"Key":"blank? and","Fragments":["upper-case"]},{"Key":"and upper-case","Fragments":["from"]},{"Key":"upper-case from","Fragments":["the"]},{"Key":"string namespace","Fragments":["to","and","as"]},{"Key":"the necessity","Fragments":["for","to","to"]},{"Key":"necessity for","Fragments":["namespacing"]},{"Key":"for namespacing","Fragments":["the"]},{"Key":"namespacing the","Fragments":["calls."]},{"Key":"little shorter","Fragments":["to","by"]},{"Key":"shorter to","Fragments":["read,"]},{"Key":"read, and","Fragments":["I"]},{"Key":"guess it's","Fragments":["also","the"]},{"Key":"also cleaner","Fragments":["this"]},{"Key":"cleaner this","Fragments":["way."]},{"Key":"Now only","Fragments":["response-for"]},{"Key":"only response-for","Fragments":["is"]},{"Key":"response-for is","Fragments":["public.","really","exactly"]},{"Key":"is public.","Fragments":["Everything"]},{"Key":"public. Everything","Fragments":["else"]},{"Key":"Everything else","Fragments":["is"]},{"Key":"else is","Fragments":["kept","can","truthy."]},{"Key":"is kept","Fragments":["private."]},{"Key":"of methods?","Fragments":["I"]},{"Key":"be available","Fragments":["to"]},{"Key":"available to","Fragments":["outside","me,","your","me"]},{"Key":"to outside","Fragments":["world.","code."]},{"Key":"outside world.","Fragments":["What"]},{"Key":"world. What","Fragments":["do"]},{"Key":"1. The","Fragments":["preferred","namespace","trailing"]},{"Key":"The preferred","Fragments":["way","way","way","way","way"]},{"Key":"preferred way","Fragments":["to","is","is","is","is"]},{"Key":"import symbols","Fragments":["outside"]},{"Key":"symbols outside","Fragments":["plain","their"]},{"Key":"outside plain","Fragments":["REPL"]},{"Key":"plain REPL","Fragments":["session,"]},{"Key":"REPL session,","Fragments":["is"]},{"Key":"session, is","Fragments":["to"]},{"Key":"put declarations","Fragments":["inside"]},{"Key":"declarations inside","Fragments":["`ns`"]},{"Key":"inside `ns`","Fragments":["macro","macro.","macro.","macro,","macro.","form.","form."]},{"Key":"macro -","Fragments":["like"]},{"Key":"- like","Fragments":["`(ns","in","in","`zero?`,","`question?`,","this:","`(int"]},{"Key":"like `(ns","Fragments":["bob"]},{"Key":"`(ns bob","Fragments":["(:require","(:require"]},{"Key":"(:require ...))`","Fragments":["(proper"]},{"Key":"...))` (proper","Fragments":["code"]},{"Key":"(proper code","Fragments":["layout"]},{"Key":"code layout","Fragments":["and"]},{"Key":"layout and","Fragments":["spacing"]},{"Key":"and spacing","Fragments":["ommitted)."]},{"Key":"2. `use`","Fragments":["is"]},{"Key":"`require` the","Fragments":["way"]},{"Key":"way I've","Fragments":["shown","seen"]},{"Key":"I've shown","Fragments":["in"]},{"Key":"shown in","Fragments":["my"]},{"Key":" Sure.","Fragments":["You",":-)"]},{"Key":"Sure. You","Fragments":["can"]},{"Key":"can refer","Fragments":["to","to"]},{"Key":"symbols directly","Fragments":["or"]},{"Key":"directly or","Fragments":["make"]},{"Key":"or make","Fragments":["a","a","use"]},{"Key":"a short","Fragments":["alias"]},{"Key":"short alias","Fragments":["to"]},{"Key":"alias to","Fragments":["the","`clojure.string`","something"]},{"Key":"whole namespace","Fragments":["using"]},{"Key":"namespace using","Fragments":["`:require`"]},{"Key":"`ns` macro.","Fragments":["Like","Anyway","You","In","That's"]},{"Key":"macro. Like","Fragments":["`(:require"]},{"Key":"Like `(:require","Fragments":["[clojure.string"]},{"Key":"`(:require [clojure.string","Fragments":[":as",":refer",":refer",":as",":refer"]},{"Key":":as str])`","Fragments":["or"]},{"Key":"str])` or","Fragments":["`(:require"]},{"Key":"or `(:require","Fragments":["[clojure.string"]},{"Key":":refer (blank?","Fragments":["upper-case)])`","lower-case"]},{"Key":"your review!","Fragments":["Aside:"]},{"Key":"review! Aside:","Fragments":["is"]},{"Key":"Aside: is","Fragments":["there"]},{"Key":"to skip","Fragments":["the","the","converting"]},{"Key":"skip the","Fragments":["clojure.string/","cleanup","`if`"]},{"Key":"the clojure.string/","Fragments":["part"]},{"Key":"clojure.string/ part","Fragments":["when"]},{"Key":"part when","Fragments":["using"]},{"Key":"using e.g.","Fragments":["upper-case"]},{"Key":"e.g. upper-case","Fragments":["?"]},{"Key":"could spare","Fragments":["the","yourself","you","the"]},{"Key":"spare the","Fragments":["conversion","first","time.","time."]},{"Key":"conversion to","Fragments":["the","`sorted-map`","string"]},{"Key":"use \\?","Fragments":["literal."]},{"Key":"\\? literal.","Fragments":["Anyway,"]},{"Key":"literal. Anyway,","Fragments":["that"]},{"Key":"Anyway, that","Fragments":["looks"]},{"Key":"I've rewritten","Fragments":["question?"]},{"Key":"rewritten question?","Fragments":["to"]},{"Key":"question? to","Fragments":["use","make","increase"]},{"Key":"use seq","Fragments":["last"]},{"Key":"seq last","Fragments":["instead"]},{"Key":"last instead","Fragments":["of"]},{"Key":"of indexOf","Fragments":[".."]},{"Key":"indexOf ..","Fragments":["much"]},{"Key":".. much","Fragments":["better!"]},{"Key":"Clojure doesn't,","Fragments":["but"]},{"Key":"doesn't, but","Fragments":["Java"]},{"Key":"but Java","Fragments":["does."]},{"Key":"Java does.","Fragments":["And"]},{"Key":"does. And","Fragments":["you're"]},{"Key":"And you're","Fragments":["using","already"]},{"Key":"using `#lastIndexOf`","Fragments":["anyway."]},{"Key":" Again","Fragments":["-"]},{"Key":"Again -","Fragments":["string"]},{"Key":"- string","Fragments":["can","extends"]},{"Key":"characters. You","Fragments":["can","can"]},{"Key":" @guadalupe","Fragments":["Yes."]},{"Key":"@guadalupe Yes.","Fragments":["I"]},{"Key":"Yes. I","Fragments":["prefer"]},{"Key":"prefer statements","Fragments":["on"]},{"Key":"statements on","Fragments":["new","their","lines"]},{"Key":"on new","Fragments":["lines"]},{"Key":"new lines","Fragments":["if"]},{"Key":"lines if","Fragments":["there"]},{"Key":"than 3/4.","Fragments":["-\u0026gt;\u0026gt;"]},{"Key":"3/4. -\u0026gt;\u0026gt;","Fragments":["is"]},{"Key":"-\u0026gt;\u0026gt; is","Fragments":["new"]},{"Key":"is new","Fragments":["for"]},{"Key":"new for","Fragments":["me","me."]},{"Key":"me but","Fragments":["its","looks"]},{"Key":"but its","Fragments":["similar"]},{"Key":"its similar","Fragments":["to"]},{"Key":"to `.`","Fragments":["chaining"]},{"Key":"`.` chaining","Fragments":["in"]},{"Key":"chaining in","Fragments":["Ruby.","`question?`"]},{"Key":"in Ruby.","Fragments":["And"]},{"Key":"Ruby. And","Fragments":["yes"]},{"Key":"And yes","Fragments":["it"]},{"Key":"yes it","Fragments":["has"]},{"Key":"has improved","Fragments":["readability"]},{"Key":"improved readability","Fragments":["and"]},{"Key":"readability and","Fragments":["understandability","compatibility.","brevity"]},{"Key":"and understandability","Fragments":["of"]},{"Key":"understandability of","Fragments":["code."]},{"Key":"of code.","Fragments":["Thanks","I","So","Not"]},{"Key":"code. Thanks","Fragments":["for","for"]},{"Key":"the review","Fragments":[":)",":)"]},{"Key":"I've moved","Fragments":["the"]},{"Key":"moved the","Fragments":["logic","lower-casing","mappings"]},{"Key":"logic from","Fragments":["the","validation."]},{"Key":"separate expressions,","Fragments":["keeping"]},{"Key":"expressions, keeping","Fragments":["the"]},{"Key":"response-for expression","Fragments":["simpler."]},{"Key":"expression simpler.","Fragments":["Sadly"]},{"Key":"simpler. Sadly","Fragments":["it"]},{"Key":"Sadly it","Fragments":["looks"]},{"Key":"like clojure","Fragments":["itself","contrib"]},{"Key":"clojure itself","Fragments":["does"]},{"Key":"itself does","Fragments":["not"]},{"Key":"not have","Fragments":["something","a","to","having","to","to"]},{"Key":"have something","Fragments":["like","for"]},{"Key":"like string/ends-with","Fragments":["for"]},{"Key":"string/ends-with for","Fragments":["the"]},{"Key":"the question?","Fragments":["expression."]},{"Key":"Some may","Fragments":["argue"]},{"Key":"may argue","Fragments":["that"]},{"Key":"that splitting","Fragments":["function"]},{"Key":"splitting function","Fragments":["bodies"]},{"Key":"bodies and","Fragments":["`-≥≥`"]},{"Key":"and `-≥≥`","Fragments":["statements"]},{"Key":"`-≥≥` statements","Fragments":["on"]},{"Key":"own lines","Fragments":["would","being","in"]},{"Key":"lines would","Fragments":["increase","help"]},{"Key":"increase legibility","Fragments":["a"]},{"Key":"legibility a","Fragments":["bit,"]},{"Key":"a bit,","Fragments":["though","most","in","but","forgot","but"]},{"Key":"bit, though","Fragments":["as"]},{"Key":"though as","Fragments":["it's"]},{"Key":"taste and","Fragments":["this"]},{"Key":"and this","Fragments":["one","style","one,","time","was","seemed","passes","is","submission"]},{"Key":"one has","Fragments":["been"]},{"Key":"has been","Fragments":["bikeshedded","called","passed","introduced"]},{"Key":"been bikeshedded","Fragments":["enough,"]},{"Key":"bikeshedded enough,","Fragments":["I"]},{"Key":"enough, I","Fragments":["think"]},{"Key":"you're done","Fragments":["with"]},{"Key":"statements I've","Fragments":["used"]},{"Key":"single `cond`.","Fragments":["Without"]},{"Key":"`cond`. Without","Fragments":["the"]},{"Key":"Without the","Fragments":["nesting"]},{"Key":"the nesting","Fragments":["it's","and"]},{"Key":"nesting it's","Fragments":["much"]},{"Key":"it's much","Fragments":["cleaner!","more","easier","easier"]},{"Key":" @gus","Fragments":["right."]},{"Key":"@gus right.","Fragments":["It"]},{"Key":"can go.","Fragments":["No"]},{"Key":"go. No","Fragments":["need"]},{"Key":"need of","Fragments":["separate"]},{"Key":"of separate","Fragments":["function"]},{"Key":"separate function","Fragments":["for","for","for","for"]},{"Key":" Last","Fragments":["nitpick"]},{"Key":"Last nitpick","Fragments":["and"]},{"Key":"nitpick and","Fragments":["I"]},{"Key":"think we're","Fragments":["good","just"]},{"Key":"to go:","Fragments":["what"]},{"Key":"go: what","Fragments":["would"]},{"Key":"getting rid","Fragments":["of","of","of"]},{"Key":"of `downcased-phrase`","Fragments":["which"]},{"Key":"`downcased-phrase` which","Fragments":["basically"]},{"Key":"which basically","Fragments":["have"]},{"Key":"very same","Fragments":["semantics"]},{"Key":"same semantics","Fragments":["as"]},{"Key":"semantics as","Fragments":["`str/lower-case`?"]},{"Key":"think `long-word-count`","Fragments":["and"]},{"Key":"`long-word-count` and","Fragments":["pals"]},{"Key":"and pals","Fragments":["are"]},{"Key":"pals are","Fragments":["no"]},{"Key":"more necessary","Fragments":["here"]},{"Key":"necessary here","Fragments":[":)"]},{"Key":"finding functions","Fragments":["having"]},{"Key":"functions having","Fragments":["their"]},{"Key":"having their","Fragments":["body"]},{"Key":"their body","Fragments":["on"]},{"Key":"lines being","Fragments":["more"]},{"Key":"being more","Fragments":["readable;","efficient"]},{"Key":"more readable;","Fragments":["it's"]},{"Key":"readable; it's","Fragments":["a"]},{"Key":"a no","Fragments":["brainer,"]},{"Key":"no brainer,","Fragments":["your"]},{"Key":"brainer, your","Fragments":["eyes"]},{"Key":"your eyes","Fragments":["don't"]},{"Key":"eyes don't","Fragments":["have"]},{"Key":"to seek","Fragments":["for"]},{"Key":"seek for","Fragments":["where"]},{"Key":"for where","Fragments":["things"]},{"Key":"where things","Fragments":["are"]},{"Key":"things are","Fragments":["computed,","always"]},{"Key":"are computed,","Fragments":["it's"]},{"Key":"computed, it's","Fragments":["always"]},{"Key":"it's always","Fragments":["starting","either"]},{"Key":"always starting","Fragments":["from"]},{"Key":"starting from","Fragments":["the","highest","scratch."]},{"Key":"same point.","Fragments":["Matter"]},{"Key":"point. Matter","Fragments":["of"]},{"Key":"Matter of","Fragments":["taste"]},{"Key":"could try","Fragments":["`(-››","to","having","having","a","to","to"]},{"Key":"try `(-››","Fragments":["phrase"]},{"Key":"`(-›› phrase","Fragments":["normalize-words"]},{"Key":"phrase normalize-words","Fragments":["frequencies)`"]},{"Key":"normalize-words frequencies)`","Fragments":["to"]},{"Key":"frequencies)` to","Fragments":["see"]},{"Key":"it enhance","Fragments":["legibility"]},{"Key":"legibility here.","Fragments":["You"]},{"Key":"could actually","Fragments":["even","make"]},{"Key":"actually even","Fragments":["think"]},{"Key":"even think","Fragments":["of"]},{"Key":"chaining every","Fragments":["operation"]},{"Key":"every operation","Fragments":["using"]},{"Key":"operation using","Fragments":["this"]},{"Key":"using this","Fragments":["macro"]},{"Key":"this macro","Fragments":[":)"]},{"Key":"making your","Fragments":["var","intentions"]},{"Key":"your var","Fragments":["definition"]},{"Key":"var definition","Fragments":["private."]},{"Key":"about defining","Fragments":["what"]},{"Key":"defining what","Fragments":["`\\T`"]},{"Key":"`\\U` actually","Fragments":["means?"]},{"Key":"I initially","Fragments":["did","tried","had","went","reached"]},{"Key":"initially did","Fragments":["that,"]},{"Key":"did that,","Fragments":["but"]},{"Key":"then saw","Fragments":["a","the"]},{"Key":"saw a","Fragments":["warning"]},{"Key":"a warning","Fragments":["that","about","when","about","about","that"]},{"Key":"warning that","Fragments":["I","a"]},{"Key":"was hiding","Fragments":["clojure.core/replace"]},{"Key":"hiding clojure.core/replace","Fragments":["so"]},{"Key":"clojure.core/replace so","Fragments":["I"]},{"Key":"2 things","Fragments":["-"]},{"Key":" 1)","Fragments":["Indentation","Yep,","While","Good","it","I"]},{"Key":"1) Indentation","Fragments":["can"]},{"Key":"Indentation can","Fragments":["be"]},{"Key":"be improved.","Fragments":["You"]},{"Key":"improved. You","Fragments":["can"]},{"Key":"can find","Fragments":["some","all","alternatives","right","last","it"]},{"Key":"find some","Fragments":["guidelines","other"]},{"Key":"some guidelines","Fragments":["here"]},{"Key":"guidelines here","Fragments":["https://github.com/bbatsov/clojure-style-guide"]},{"Key":" 2)","Fragments":["Can","Using","What","I","strip-us-prefix,","Yea."]},{"Key":"2) Can","Fragments":["you"]},{"Key":"which works","Fragments":["on"]},{"Key":"on strings","Fragments":["which"]},{"Key":"strings which","Fragments":["will","may"]},{"Key":"which will","Fragments":["`replace`","produce","create","stop","essentially"]},{"Key":"will `replace`","Fragments":["thymine"]},{"Key":"`replace` thymine","Fragments":["with"]},{"Key":"thymine with","Fragments":["uracil?"]},{"Key":"with uracil?","Fragments":[":)"]},{"Key":" @jaclyn","Fragments":["Thanks"]},{"Key":"@jaclyn Thanks","Fragments":[":)."]},{"Key":"Thanks :).","Fragments":["I"]},{"Key":":). I","Fragments":["have"]},{"Key":"used `-\u0026gt;\u0026gt;`","Fragments":["in"]},{"Key":"`-\u0026gt;\u0026gt;` in","Fragments":["the"]},{"Key":"next submission.","Fragments":["Also"]},{"Key":"submission. Also","Fragments":["added"]},{"Key":"Also added","Fragments":["solution"]},{"Key":"added solution","Fragments":["using"]},{"Key":"Interesting use","Fragments":["of","of"]},{"Key":"of `reduce`.","Fragments":["Have"]},{"Key":"`reduce`. Have","Fragments":["you"]},{"Key":"macros instead?","Fragments":["That"]},{"Key":"instead? That","Fragments":["could"]},{"Key":"possibly allow","Fragments":["a"]},{"Key":"allow a","Fragments":["visually"]},{"Key":"a visually","Fragments":["better"]},{"Key":"visually better","Fragments":["understanding"]},{"Key":"better understanding","Fragments":["of","of"]},{"Key":"understanding of","Fragments":["the","how","the"]},{"Key":"at `frequencies`,","Fragments":["I"]},{"Key":"`frequencies`, I","Fragments":["think"]},{"Key":"could greatly","Fragments":["reduce"]},{"Key":"greatly reduce","Fragments":["the"]},{"Key":"the amount","Fragments":["of","of","of","of","of","of","of","of"]},{"Key":"of handcrafted","Fragments":["code"]},{"Key":"handcrafted code","Fragments":["here"]},{"Key":"code here","Fragments":[":)","is","is"]},{"Key":"good. Have","Fragments":["you","you","a"]},{"Key":"What happens","Fragments":["if"]},{"Key":"a tricky","Fragments":["statement","one"]},{"Key":"tricky statement","Fragments":["doesn't"]},{"Key":"statement doesn't","Fragments":["match"]},{"Key":"regex clauses?","Fragments":["(And"]},{"Key":"clauses? (And","Fragments":["did"]},{"Key":"(And did","Fragments":["this"]},{"Key":"did this","Fragments":["pass","with","problem,","in","exercise,","with","exercise"]},{"Key":"this pass","Fragments":["the","the","the","the"]},{"Key":" LOL,","Fragments":["didn't"]},{"Key":"LOL, didn't","Fragments":["mean"]},{"Key":"didn't mean","Fragments":["to","to","to","to"]},{"Key":"mean to","Fragments":["force","submit","mislead","include","include","use"]},{"Key":"to force","Fragments":["this","evaluation","evaluation"]},{"Key":"force this","Fragments":["approach"]},{"Key":"approach if","Fragments":["you"]},{"Key":"worth the","Fragments":["tradeoff,","fuss.","effort","cost","loss","fuss.","fuss.","sacrifice","extra","fuss.","extra"]},{"Key":"the tradeoff,","Fragments":["just"]},{"Key":"tradeoff, just","Fragments":["hadn't"]},{"Key":"just hadn't","Fragments":["responded"]},{"Key":"hadn't responded","Fragments":["yet."]},{"Key":"one better.","Fragments":["Lowercasing"]},{"Key":"better. Lowercasing","Fragments":["the"]},{"Key":"Lowercasing the","Fragments":["entire"]},{"Key":"entire string","Fragments":["instead","is","and"]},{"Key":"string instead","Fragments":["of","of"]},{"Key":"the chunks","Fragments":["*feels*"]},{"Key":"chunks *feels*","Fragments":["better"]},{"Key":"*feels* better","Fragments":["to"]},{"Key":"Looks very","Fragments":["nice.","nice.","much"]},{"Key":"very nice.","Fragments":["Do","One","May","I'm"]},{"Key":"nice. Do","Fragments":["you"]},{"Key":"worth using","Fragments":["a"]},{"Key":"threading macro","Fragments":["to","manipulates","`-\u0026gt;\u0026gt;`","to","is","like","```-\u003e```,","in","at","for","feels","with"]},{"Key":"macro to","Fragments":["improve","be","simplify","do","expand","make","turn","import"]},{"Key":"is too","Fragments":["picky,","easy","bad","precious","far"]},{"Key":"too picky,","Fragments":["and"]},{"Key":"picky, and","Fragments":["that"]},{"Key":"and that","Fragments":["`(str","it","the","it","the","the","behavior:","threading","will","it's"]},{"Key":"that `(str","Fragments":["\"Go"]},{"Key":"`(str \"Go","Fragments":["to"]},{"Key":"\"Go to","Fragments":["the","the"]},{"Key":"the store","Fragments":["and"]},{"Key":"store and","Fragments":["buy"]},{"Key":"and buy","Fragments":["some"]},{"Key":"buy some","Fragments":["more,"]},{"Key":"some more,","Fragments":["\""]},{"Key":"more, \"","Fragments":["(bottles"]},{"Key":"\" (bottles","Fragments":["99)"]},{"Key":"(bottles 99)","Fragments":["\""]},{"Key":"99) \"","Fragments":["on"]},{"Key":"\" on","Fragments":["the"]},{"Key":"the wall.\")`","Fragments":["is"]},{"Key":"wall.\")` is","Fragments":["not"]},{"Key":"as nice","Fragments":["as","in"]},{"Key":"nice as","Fragments":["using"]},{"Key":"as using","Fragments":["a","functions"]},{"Key":"constant in","Fragments":["this","Ruby."]},{"Key":"Very nice!","Fragments":["About"]},{"Key":"nice! About","Fragments":["the"]},{"Key":"suggest would","Fragments":["be","be"]},{"Key":"to re-use","Fragments":["`bottles`","the"]},{"Key":"re-use `bottles`","Fragments":["to"]},{"Key":"`bottles` to","Fragments":["generate"]},{"Key":"\"99 bottles...\"","Fragments":["after"]},{"Key":"bottles...\" after","Fragments":["the"]},{"Key":"the \"Go","Fragments":["to"]},{"Key":"the store...\".","Fragments":["What"]},{"Key":"store...\". What","Fragments":["do"]},{"Key":"-- too","Fragments":["picky?"]},{"Key":"used threading","Fragments":["macros?"]},{"Key":"threading macros?","Fragments":["I"]},{"Key":"macros? I","Fragments":["think"]},{"Key":"think they","Fragments":["can","should","helped","could"]},{"Key":"they can","Fragments":["help","be","actually","be"]},{"Key":"with readability","Fragments":["of"]},{"Key":"of deeply","Fragments":["nested"]},{"Key":"nested function","Fragments":["calls","calls.","calls.","calls."]},{"Key":"calls like","Fragments":["in"]},{"Key":"like in","Fragments":["`word-count`.","short","cassical","case","Java.","`silence?`,"]},{"Key":" `cond`","Fragments":["instead","might","with","where"]},{"Key":"nested `if`s","Fragments":["will","in","with"]},{"Key":"`if`s will","Fragments":["help"]},{"Key":"will help","Fragments":["you","with","you","with","you","the","me","here.","you","you"]},{"Key":"you preserve","Fragments":["flatter"]},{"Key":"preserve flatter","Fragments":["code"]},{"Key":"flatter code","Fragments":["structure."]},{"Key":"code structure.","Fragments":["Strings"]},{"Key":"structure. Strings","Fragments":["extend"]},{"Key":"Strings extend","Fragments":["sequence"]},{"Key":"extend sequence","Fragments":["related"]},{"Key":"related protocols","Fragments":["so"]},{"Key":"protocols so","Fragments":["you"]},{"Key":"case. You","Fragments":["don't","should","can"]},{"Key":"wrap every","Fragments":["string"]},{"Key":"every string","Fragments":["in"]},{"Key":"string in","Fragments":["`str`","constant","your","`respond`","its","imperative","that","`change-letter`."]},{"Key":"in `str`","Fragments":["-"]},{"Key":"`str` -","Fragments":["those"]},{"Key":"- those","Fragments":["are"]},{"Key":"are literals.","Fragments":["It"]},{"Key":"literals. It","Fragments":["would","would"]},{"Key":"make helper","Fragments":["function"]},{"Key":"check and","Fragments":["make","correct","making"]},{"Key":"never written","Fragments":["Clojure","Clojure"]},{"Key":"written Clojure","Fragments":["before","before"]},{"Key":"Clojure before","Fragments":["so","and"]},{"Key":"before so","Fragments":["I'd"]},{"Key":"so I'd","Fragments":["be","avoid","especially","especially","end"]},{"Key":"happy about","Fragments":["any","my"]},{"Key":"about any","Fragments":["suggestions"]},{"Key":"any suggestions","Fragments":["on"]},{"Key":"suggestions on","Fragments":["how","you","how","improvements"]},{"Key":"improve this","Fragments":["code"]},{"Key":"Maybe assign","Fragments":["nucleotide"]},{"Key":"to increase","Fragments":["readability?","readability?"]},{"Key":"keep wondering","Fragments":["how"]},{"Key":"wondering how","Fragments":["hard","to","can"]},{"Key":"how hard","Fragments":["would"]},{"Key":"hard would","Fragments":["be"]},{"Key":"to automate","Fragments":["the"]},{"Key":"automate the","Fragments":["validation"]},{"Key":"validation process…","Fragments":["I"]},{"Key":"process… I","Fragments":["even"]},{"Key":"I even","Fragments":["submitted"]},{"Key":"even submitted","Fragments":["[an"]},{"Key":"submitted [an","Fragments":["issue](https://github.com/kytrinyx/exercism.io/issues/504)"]},{"Key":"[an issue](https://github.com/kytrinyx/exercism.io/issues/504)","Fragments":["about"]},{"Key":"issue](https://github.com/kytrinyx/exercism.io/issues/504) about","Fragments":["it,"]},{"Key":"it, still","Fragments":["waiting"]},{"Key":"still waiting","Fragments":["for"]},{"Key":"waiting for","Fragments":["directives","your"]},{"Key":"for directives","Fragments":[":/"]},{"Key":"It's hard","Fragments":["to","to"]},{"Key":"an impatient","Fragments":["person."]},{"Key":"Okay, now","Fragments":["this"]},{"Key":"now this","Fragments":["is"]},{"Key":"definitely getting","Fragments":["more"]},{"Key":"getting more","Fragments":["compact..."]},{"Key":"I restrained","Fragments":["from"]},{"Key":"restrained from","Fragments":["over-engineering,"]},{"Key":"from over-engineering,","Fragments":["defining"]},{"Key":"over-engineering, defining","Fragments":["all"]},{"Key":"defining all","Fragments":["the","the"]},{"Key":"the nucleotides,","Fragments":["doing"]},{"Key":"nucleotides, doing","Fragments":["fancy"]},{"Key":"doing fancy","Fragments":["things"]},{"Key":"fancy things","Fragments":["like"]},{"Key":"like replacing","Fragments":["every"]},{"Key":"replacing every","Fragments":["other"]},{"Key":"other base","Fragments":["..."]},{"Key":"base ...","Fragments":["with"]},{"Key":"... with","Fragments":["itself."]},{"Key":" Clean,","Fragments":["concise,"]},{"Key":"Clean, concise,","Fragments":["explicit"]},{"Key":"concise, explicit","Fragments":["(imho"]},{"Key":"explicit (imho","Fragments":[";)"]},{"Key":"It's almost","Fragments":["like","exactly"]},{"Key":"almost like","Fragments":["cheating","they"]},{"Key":"like cheating","Fragments":["with","to",":)"]},{"Key":"cheating with","Fragments":["clojure.string/replace"]},{"Key":"with clojure.string/replace","Fragments":[":)"]},{"Key":"could write","Fragments":["something","functions","`(str/replace","a"]},{"Key":"write something","Fragments":["like"]},{"Key":"(apply str","Fragments":["(map","(map","(take","(take","[\"A\"","(take",",,,))","converted))","(map","(map"]},{"Key":"(map #(if","Fragments":["(="]},{"Key":"#(if (=","Fragments":["%"]},{"Key":"(= %","Fragments":["\\T)"]},{"Key":"% \\T)","Fragments":["\\U"]},{"Key":"\\T) \\U","Fragments":["%)","c)`."]},{"Key":"\\U %)","Fragments":["dna-string)))"]},{"Key":" but","Fragments":["that's","the","personally","that","this"]},{"Key":"that's pretty","Fragments":["pointless.","much","awesome.","neat"]},{"Key":"It's fine","Fragments":["either"]},{"Key":"fine either","Fragments":["way"]},{"Key":"way --","Fragments":["just"]},{"Key":"-- just","Fragments":["be"]},{"Key":"be aware","Fragments":["of"]},{"Key":"the tradeoff","Fragments":["between"]},{"Key":"tradeoff between","Fragments":["concise"]},{"Key":"between concise","Fragments":["and"]},{"Key":"concise and","Fragments":["communicative.","readable.","makes","easier","focused"]},{"Key":"argument name","Fragments":["/","but","letters","letter","count"]},{"Key":"name /","Fragments":["namespace"]},{"Key":"/ namespace","Fragments":["clash"]},{"Key":"namespace clash","Fragments":["could"]},{"Key":"clash could","Fragments":["be"]},{"Key":"be confusing,","Fragments":["but"]},{"Key":"confusing, but","Fragments":["you've"]},{"Key":"but you've","Fragments":["addressed","ordered"]},{"Key":"you've addressed","Fragments":["that"]},{"Key":"addressed that","Fragments":["in"]},{"Key":"your alternate","Fragments":["example."]},{"Key":"alternate example.","Fragments":[":)"]},{"Key":"use `-\u0026gt;\u0026gt;`","Fragments":["instead"]},{"Key":"`-\u0026gt;\u0026gt;` instead","Fragments":["of"]},{"Key":"of `-\u0026gt;`","Fragments":["to"]},{"Key":"`-\u0026gt;` to","Fragments":["avoid"]},{"Key":"avoid the","Fragments":["wrapping","warning","map-inside-a-map,","ugliness","alphagram","need","map","need","conditional","`let`","duplication","regex.","call"]},{"Key":"the wrapping","Fragments":["of"]},{"Key":"wrapping of","Fragments":["re-seq."]},{"Key":"re-seq. I","Fragments":["think"]},{"Key":"also preferable","Fragments":["to"]},{"Key":"use clojure.string/lower-case","Fragments":["to"]},{"Key":"clojure.string/lower-case to","Fragments":["the"]},{"Key":"Java .toLowerCase","Fragments":["(it's"]},{"Key":".toLowerCase (it's","Fragments":["more"]},{"Key":"(it's more","Fragments":["portable"]},{"Key":"more portable","Fragments":["to"]},{"Key":"portable to","Fragments":["other"]},{"Key":"to other","Fragments":["clojure","languages."]},{"Key":"other clojure","Fragments":["platforms,","implementation"]},{"Key":"clojure platforms,","Fragments":["anyway)."]},{"Key":" @matilde:","Fragments":["I'm"]},{"Key":"@matilde: I'm","Fragments":["getting"]},{"Key":"I'm getting","Fragments":["a","a","a","used"]},{"Key":"getting a","Fragments":["ClassNotFoundException.","bit","warning","little","bit","bit","bit","loop"]},{"Key":"(= s","Fragments":["(upper-case"]},{"Key":"s (upper-case","Fragments":["s)))"]},{"Key":"(empty? s)","Fragments":["\"Fine,"]},{"Key":"s) \"Fine,","Fragments":["be"]},{"Key":" (shouting?","Fragments":["s)","s)","greeting)","stmt)","stmt)"]},{"Key":"(shouting? s)","Fragments":["\"Woah,","\"Woah,"]},{"Key":"s) \"Woah,","Fragments":["chill","chill","chill","chill"]},{"Key":" (question?","Fragments":["s)","s)","more","s)","stmt)","stmt)"]},{"Key":"(question? s)","Fragments":["\"Sure.\"","\"Sure.\"","...."]},{"Key":" :else","Fragments":["\"Whatever.\"))","\"whatever.\")","result-4)","\"Whatever.\"","\"Whatever.\"))","rna-nucleotide))","\"Whatever.\"))","(throw","true)","\"Whatever.\"","....","\"Whatever.\"))","\"Whatever.\"))","\"Whatever.\"))","\"Whatever.\"))","\"Whatever.\"))"]},{"Key":"That's actually","Fragments":["what"]},{"Key":"actually what","Fragments":["I"]},{"Key":"did first","Fragments":["but"]},{"Key":"first but","Fragments":["I"]},{"Key":"I figured","Fragments":["that","for","someone","out","the","there"]},{"Key":"figured that","Fragments":["was","it"]},{"Key":"necessary given","Fragments":["that"]},{"Key":"given that","Fragments":["the","I"]},{"Key":"are pretty","Fragments":["simple","mysterious","strange","cool"]},{"Key":"pretty simple","Fragments":["and"]},{"Key":"simple and","Fragments":["probably","clear","clear.","straightforward","to","could"]},{"Key":"not used","Fragments":["elsewhere.","that.","in"]},{"Key":"Also I","Fragments":["just","like","would","would"]},{"Key":"noticed that","Fragments":["I've","I","I"]},{"Key":"used \"s\"","Fragments":["as"]},{"Key":"name but","Fragments":["also","do"]},{"Key":"but also","Fragments":["for","the"]},{"Key":"also for","Fragments":["the"]},{"Key":"clojure.string require.","Fragments":["It"]},{"Key":"require. It","Fragments":["works"]},{"Key":"works but...","Fragments":["meh."]},{"Key":"bit desperate","Fragments":["to"]},{"Key":"desperate to","Fragments":["have"]},{"Key":"have this","Fragments":["one","only","gut","thing"]},{"Key":"one accepted","Fragments":["someday."]},{"Key":"accepted someday.","Fragments":["So"]},{"Key":"someday. So","Fragments":["here's"]},{"Key":"So here's","Fragments":["the"]},{"Key":"here's the","Fragments":["previous"]},{"Key":"previous version","Fragments":["back,","that"]},{"Key":"version back,","Fragments":["hoping"]},{"Key":"back, hoping","Fragments":["it"]},{"Key":"hoping it","Fragments":["will"]},{"Key":"will suit","Fragments":["any"]},{"Key":"suit any","Fragments":["admin"]},{"Key":"any admin","Fragments":["expectations"]},{"Key":"admin expectations","Fragments":[":)"]},{"Key":"couldn't create","Fragments":["another"]},{"Key":"create another","Fragments":["map"]},{"Key":"another map","Fragments":["to","entry"]},{"Key":"map to","Fragments":["have","lookup","me.","calendar","the","the"]},{"Key":"variables (or","Fragments":["atoms)"]},{"Key":"(or atoms)","Fragments":["for"]},{"Key":"atoms) for","Fragments":["describing"]},{"Key":"for describing","Fragments":["the","what"]},{"Key":"describing the","Fragments":["replacement","intent"]},{"Key":"the replacement","Fragments":["mapping?"]},{"Key":" Shorthand","Fragments":["for"]},{"Key":"Shorthand for","Fragments":["first"]},{"Key":"for first","Fragments":["parameter","argument"]},{"Key":"first parameter","Fragments":["in"]},{"Key":"in shorthand","Fragments":["(sic!)"]},{"Key":"shorthand (sic!)","Fragments":["function"]},{"Key":"(sic!) function","Fragments":["notation"]},{"Key":"function notation","Fragments":["may","for"]},{"Key":"notation may","Fragments":["be"]},{"Key":"just '%'.","Fragments":["But"]},{"Key":"'%'. But","Fragments":["I"]},{"Key":"won't hold","Fragments":["you"]},{"Key":"you off","Fragments":["just"]},{"Key":"off just","Fragments":["because"]},{"Key":"of that.","Fragments":["Looks","Also,","Thanks",":)","If"]},{"Key":"that. Looks","Fragments":["good"]},{"Key":"clearer still","Fragments":["to"]},{"Key":"still to","Fragments":["use"]},{"Key":"use -\u0026gt;\u0026gt;","Fragments":["for"]},{"Key":"-\u0026gt;\u0026gt; for","Fragments":["the"]},{"Key":"whole thing.","Fragments":["For"]},{"Key":"thing. For","Fragments":["functions"]},{"Key":"For functions","Fragments":["with","that"]},{"Key":"with arity","Fragments":["1,"]},{"Key":"arity 1,","Fragments":["there"]},{"Key":"1, there","Fragments":["is"]},{"Key":"no difference","Fragments":["between"]},{"Key":"between pipelining","Fragments":["the"]},{"Key":"pipelining the","Fragments":["first"]},{"Key":"first or","Fragments":["last"]},{"Key":"or last","Fragments":["argument."]},{"Key":"last argument.","Fragments":["The"]},{"Key":"argument. The","Fragments":["only"]},{"Key":"function here","Fragments":["that","a"]},{"Key":"here that","Fragments":["has","would","I"]},{"Key":"that has","Fragments":["more","a"]},{"Key":"has more","Fragments":["than"]},{"Key":"than one","Fragments":["argument","second","set","nucleotide?","nucleotide","nucleotide,","place","character","place","required"]},{"Key":"argument is","Fragments":["re-seq.","not"]},{"Key":"be slightly","Fragments":["more","more"]},{"Key":"slightly more","Fragments":["readable","informative","consistent","idiomatic","efficient","idiomatic","interesting"]},{"Key":"you put","Fragments":["the","(seemingly","it?","it","a","all","(create-ns","a"]},{"Key":"the defn","Fragments":["on","for","of"]},{"Key":"defn on","Fragments":["a"]},{"Key":"new line","Fragments":["(after","before","for"]},{"Key":"line (after","Fragments":["the"]},{"Key":"(after the","Fragments":["`[dna]`).","mapping)"]},{"Key":"the `[dna]`).","Fragments":["Also,"]},{"Key":"`[dna]`). Also,","Fragments":["have"]},{"Key":"using descriptive","Fragments":["variables"]},{"Key":"descriptive variables","Fragments":["for"]},{"Key":"for T","Fragments":["and","is","and"]},{"Key":"and U?","Fragments":["Have"]},{"Key":"U? Have","Fragments":["you"]},{"Key":"tried it","Fragments":["with","out","that","but"]},{"Key":"it with","Fragments":["a","a","the","a","just","recursion.","proper","the","`or`).","`re-seq","`?`,","anymore","`count))`","a","that","a","a","`remove`","the","the","the","a","strings"]},{"Key":"regex for","Fragments":["the","the","the","the","'shouted?'"]},{"Key":" ooh","Fragments":["deprecated?!"]},{"Key":"ooh deprecated?!","Fragments":["ok."]},{"Key":"deprecated?! ok.","Fragments":["I'm"]},{"Key":"ok. I'm","Fragments":["only"]},{"Key":"I'm only","Fragments":["just","defining"]},{"Key":"only just","Fragments":["learning","cut","one-liners,"]},{"Key":"just learning","Fragments":["clojure","about"]},{"Key":"learning clojure","Fragments":["so","and"]},{"Key":"Perhaps wrapping","Fragments":["the"]},{"Key":"wrapping the","Fragments":["word","`cond`?","values"]},{"Key":"word separation","Fragments":["in"]},{"Key":"separation in","Fragments":["an","the"]},{"Key":"an anonymous","Fragments":["function","function","function","function","function","function","function","function","function","function","function"]},{"Key":"anonymous function","Fragments":["would","literal","literals","which","you","with","slightly","literals.","that","wasn't","you","syntax","or","you","syntax","for","and","literal.","in","around","rather","was","and"]},{"Key":"clearer than","Fragments":["using","using","\"let\"","just"]},{"Key":" Or","Fragments":["again,","maybe","possibly","using","even","when","'(map"]},{"Key":"Or again,","Fragments":["perhaps"]},{"Key":"again, perhaps","Fragments":["not."]},{"Key":"That made","Fragments":["it"]},{"Key":"made it","Fragments":["incredibly","by","a","tough","unreadable.","easier"]},{"Key":"it incredibly","Fragments":["simpler,"]},{"Key":"incredibly simpler,","Fragments":["thank"]},{"Key":"simpler, thank","Fragments":["you!"]},{"Key":"is currently","Fragments":["deprecated","deprecated.","dependent"]},{"Key":"currently deprecated","Fragments":["and"]},{"Key":"deprecated and","Fragments":["generally"]},{"Key":"and generally","Fragments":["leads"]},{"Key":"generally leads","Fragments":["to"]},{"Key":"leads to","Fragments":["polluting","invalid","something","a","more","a","problems"]},{"Key":"to polluting","Fragments":["the"]},{"Key":"polluting the","Fragments":["namespace","namespace."]},{"Key":"namespace (BTW","Fragments":["if"]},{"Key":"(BTW if","Fragments":["you"]},{"Key":"need it,","Fragments":["the"]},{"Key":"same can","Fragments":["be"]},{"Key":"be achieved","Fragments":["with"]},{"Key":"achieved with","Fragments":["for"]},{"Key":"with for","Fragments":["example"]},{"Key":"example `:require","Fragments":["[clojure.string"]},{"Key":"`:require [clojure.string","Fragments":[":refer",":refer",":refer",":as",":refer",":refer",":refer"]},{"Key":":refer :all]`).","Fragments":["It's"]},{"Key":":all]`). It's","Fragments":["better"]},{"Key":"It's better","Fragments":["to"]},{"Key":"either pick","Fragments":["out"]},{"Key":"pick out","Fragments":["what","words","sequences","the"]},{"Key":"need or","Fragments":["make"]},{"Key":"a handy","Fragments":["alias"]},{"Key":"handy alias","Fragments":["for"]},{"Key":"alias for","Fragments":["imported","`deref`."]},{"Key":"for imported","Fragments":["namespace,"]},{"Key":"imported namespace,","Fragments":["like"]},{"Key":"namespace, like","Fragments":["`str`.","`clojure.core/replace`.","I"]},{"Key":"that organization","Fragments":["of"]},{"Key":"the assignments","Fragments":["is"]},{"Key":"assignments is","Fragments":["optimized"]},{"Key":"is optimized","Fragments":["for"]},{"Key":"optimized for","Fragments":["people"]},{"Key":"for people","Fragments":["unfamiliar"]},{"Key":"people unfamiliar","Fragments":["with"]},{"Key":"unfamiliar with","Fragments":["standard","clojure."]},{"Key":"with standard","Fragments":["dev"]},{"Key":"standard dev","Fragments":["environment"]},{"Key":"dev environment","Fragments":["of"]},{"Key":"environment of","Fragments":["a"]},{"Key":"given language","Fragments":["but"]},{"Key":"language but","Fragments":["it's"]},{"Key":"really annoying","Fragments":["in"]},{"Key":"annoying in","Fragments":["case"]},{"Key":"in case","Fragments":["of","of","of","of","of","you","of","it's","you"]},{"Key":"case of","Fragments":["Clojure.","threading","Python","sets,","threading","the","this","changes.","where","contracts","a","one","`bottles`,","nested","`sorted`,","a","variants","`add`,","the","only"]},{"Key":"of Clojure.","Fragments":["Leiningen"]},{"Key":"Clojure. Leiningen","Fragments":["is"]},{"Key":"Leiningen is","Fragments":["de"]},{"Key":"is de","Fragments":["facto"]},{"Key":"de facto","Fragments":["standard"]},{"Key":"facto standard","Fragments":["in"]},{"Key":"standard in","Fragments":["the","Clojure"]},{"Key":"the community,","Fragments":["so","as"]},{"Key":"community, so","Fragments":["making"]},{"Key":"so making","Fragments":["assignment"]},{"Key":"making assignment","Fragments":["a"]},{"Key":"assignment a","Fragments":["proper"]},{"Key":"a proper","Fragments":["lein","regex"]},{"Key":"proper lein","Fragments":["projects"]},{"Key":"lein projects","Fragments":["would"]},{"Key":"projects would","Fragments":["make"]},{"Key":"things significantly","Fragments":["easier"]},{"Key":"@orpha -","Fragments":["i","I'll"]},{"Key":"- i","Fragments":["am","don't","meant","would"]},{"Key":"i am","Fragments":["updating"]},{"Key":"am updating","Fragments":["the"]},{"Key":"updating the","Fragments":["formatting"]},{"Key":"the formatting","Fragments":["to","issues.","code"]},{"Key":"formatting to","Fragments":["be"]},{"Key":"more idomatic.","Fragments":["Somehow"]},{"Key":"idomatic. Somehow","Fragments":["Clojure"]},{"Key":"Somehow Clojure","Fragments":["with"]},{"Key":"Clojure with","Fragments":["its"]},{"Key":"with its","Fragments":["```[]```"]},{"Key":"its ```[]```","Fragments":["screws"]},{"Key":"```[]``` screws","Fragments":["up"]},{"Key":"screws up","Fragments":["my"]},{"Key":"up my","Fragments":["knowledge"]},{"Key":"of idiomatic","Fragments":["lisp","thing"]},{"Key":"idiomatic lisp","Fragments":["-"]},{"Key":"lisp -","Fragments":["i"]},{"Key":"i don't","Fragments":["yet","have"]},{"Key":"don't yet","Fragments":["see"]},{"Key":"yet see","Fragments":["them"]},{"Key":"see them","Fragments":["the"]},{"Key":"them the","Fragments":["same","same"]},{"Key":"way i","Fragments":["see"]},{"Key":"i see","Fragments":["```()```.","is"]},{"Key":"try your","Fragments":["way"]},{"Key":"way -","Fragments":["I","what","it"]},{"Key":"forgot that","Fragments":["shorthand","existed.","`=`","myself"]},{"Key":"that shorthand","Fragments":["and"]},{"Key":"shorthand and","Fragments":["it","positional"]},{"Key":"it reminds","Fragments":["me","me"]},{"Key":"reminds me","Fragments":["of","of"]},{"Key":"me of","Fragments":["```#'```","the"]},{"Key":"of ```#'```","Fragments":["from"]},{"Key":"```#'``` from","Fragments":["Common"]},{"Key":"from Common","Fragments":["Lisp"]},{"Key":"Common Lisp","Fragments":["so"]},{"Key":"Lisp so","Fragments":["it"]},{"Key":"too unfamiliar","Fragments":["to"]},{"Key":"unfamiliar to","Fragments":["me."]},{"Key":" Oops","Fragments":["sorry"]},{"Key":"Oops sorry","Fragments":["I"]},{"Key":"sorry I","Fragments":["didn't"]},{"Key":"this assignment.","Fragments":[":)"]},{"Key":"But I'll","Fragments":["already","add"]},{"Key":"I'll already","Fragments":["take"]},{"Key":"already take","Fragments":["your"]},{"Key":"your feedback","Fragments":["into","everyone!","on","is"]},{"Key":"feedback into","Fragments":["account"]},{"Key":"into account","Fragments":["for","and","that","your","the"]},{"Key":"the pipeline","Fragments":["special","special","functions?","functions"]},{"Key":"pipeline special","Fragments":["forms?","forms"]},{"Key":"special forms?","Fragments":["See"]},{"Key":"forms? See","Fragments":["if"]},{"Key":"See if","Fragments":["you","`frequencies`"]},{"Key":"make word-count","Fragments":["a","easier"]},{"Key":"word-count a","Fragments":["bit"]},{"Key":"bit easier","Fragments":["to","to","to"]},{"Key":"using [-\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E)","Fragments":["or"]},{"Key":"[-\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E) or","Fragments":["[-\u0026gt;\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E%3E).","[-\u0026gt;\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E%3E)"]},{"Key":"algorithm for","Fragments":["comparable","generating"]},{"Key":"for comparable","Fragments":["here?"]},{"Key":"comparable here?","Fragments":["Sorting"]},{"Key":"here? Sorting","Fragments":["is"]},{"Key":"Sorting is","Fragments":["O(n"]},{"Key":"is O(n","Fragments":["*"]},{"Key":"* log(n))","Fragments":["but"]},{"Key":"log(n)) but","Fragments":["there"]},{"Key":"an easy","Fragments":["O(n)","fix."]},{"Key":"easy O(n)","Fragments":["way"]},{"Key":"O(n) way","Fragments":["to"]},{"Key":"that you've","Fragments":["already","defined","split","meant","created","built"]},{"Key":"you've already","Fragments":["used","checked"]},{"Key":"a previous","Fragments":["exercise.","exercise."]},{"Key":"the #(…)","Fragments":["special"]},{"Key":"#(…) special","Fragments":["form"]},{"Key":"form instead","Fragments":["of","of","of"]},{"Key":"of (fn","Fragments":["…)"]},{"Key":"(fn …)","Fragments":["in"]},{"Key":"…) in","Fragments":["anagram-matcher."]},{"Key":"special forms","Fragments":["in"]},{"Key":"forms in","Fragments":["clojure?","the"]},{"Key":"in clojure?","Fragments":["Take"]},{"Key":"clojure? Take","Fragments":["a"]},{"Key":"Take a","Fragments":["look","look","look","look","look","look","look","closer","look","look","look","look","look","look","look"]},{"Key":"at [-\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E)","Fragments":["or"]},{"Key":"or [-\u0026gt;\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E%3E)","Fragments":["and"]},{"Key":"[-\u0026gt;\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E%3E) and","Fragments":["see"]},{"Key":"this shorter","Fragments":["and/or"]},{"Key":"shorter and/or","Fragments":["easier"]},{"Key":"and/or easier","Fragments":["to"]},{"Key":" @jacinthe","Fragments":["code","I"]},{"Key":"@jacinthe code","Fragments":["formatting"]},{"Key":"not entirely","Fragments":["Clojure","convinced","happy"]},{"Key":"entirely Clojure","Fragments":["style"]},{"Key":"style (my","Fragments":["main"]},{"Key":"(my main","Fragments":["gist"]},{"Key":"main gist","Fragments":["are"]},{"Key":"gist are","Fragments":["the"]},{"Key":"brackets put","Fragments":["in"]},{"Key":"put in","Fragments":["their","a","to","the"]},{"Key":"in their","Fragments":["own","own","own","own","own","native"]},{"Key":"@jacinthe I","Fragments":["thinka"]},{"Key":"I thinka","Fragments":["that"]},{"Key":"thinka that","Fragments":["it's"]},{"Key":"that critical","Fragments":["and"]},{"Key":"critical and","Fragments":["rather"]},{"Key":"and rather","Fragments":["a"]},{"Key":"rather a","Fragments":["matter"]},{"Key":"a personal","Fragments":["preference","choice,","preference","mission"]},{"Key":"preference (some","Fragments":["deem"]},{"Key":"(some deem","Fragments":["the"]},{"Key":"deem the","Fragments":["#()"]},{"Key":"the #()","Fragments":["notation"]},{"Key":"#() notation","Fragments":["to"]},{"Key":"notation to","Fragments":["be","`#(Character/isLetter"]},{"Key":"Oh hey,","Fragments":["for"]},{"Key":"hey, for","Fragments":["sure!"]},{"Key":" Too","Fragments":["bad","much"]},{"Key":"Too bad","Fragments":["foray"]},{"Key":"bad foray","Fragments":["kinda"]},{"Key":"foray kinda","Fragments":["fizzled"]},{"Key":"kinda fizzled","Fragments":["out"]},{"Key":"fizzled out","Fragments":["..."]},{"Key":"out ...","Fragments":["maybe"]},{"Key":"... maybe","Fragments":["we"]},{"Key":"maybe we","Fragments":["can","cal"]},{"Key":"we can","Fragments":["get","do","read","just","use","then","get","define","use","do"]},{"Key":"get it","Fragments":["going","set","to"]},{"Key":"it going","Fragments":["again"]},{"Key":"going again","Fragments":["at"]},{"Key":"again at","Fragments":["some","the"]},{"Key":"at some","Fragments":["point.","point.","of","clojure","level.","other","point.","point.","details."]},{"Key":"do `#(=","Fragments":["%"]},{"Key":"`#(= %","Fragments":["\"\")`"]},{"Key":"% \"\")`","Fragments":["with"]},{"Key":"\"\")` with","Fragments":["a"]},{"Key":"that already","Fragments":["exists?"]},{"Key":"a shorter","Fragments":["regex","name.","name"]},{"Key":"the intended","Fragments":["character"]},{"Key":"intended character","Fragments":["class?"]},{"Key":"character class?","Fragments":["The"]},{"Key":"class? The","Fragments":["tests"]},{"Key":"tests show","Fragments":["that","that"]},{"Key":"show that","Fragments":["whitespace","it","question?","another"]},{"Key":"that whitespace","Fragments":["and"]},{"Key":"and punctuation","Fragments":["are"]},{"Key":"punctuation are","Fragments":["ignored,"]},{"Key":"are ignored,","Fragments":["but"]},{"Key":"ignored, but","Fragments":["maybe"]},{"Key":"maybe there","Fragments":["are","is"]},{"Key":"some characters","Fragments":["you"]},{"Key":"characters you","Fragments":["want","can"]},{"Key":"to permit","Fragments":["that"]},{"Key":"permit that","Fragments":["aren't"]},{"Key":"that aren't","Fragments":["ASCII","visible","even"]},{"Key":"aren't ASCII","Fragments":["alphanumeric."]},{"Key":"pipeline functions?","Fragments":["[-\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E)"]},{"Key":"functions? [-\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E)","Fragments":["and/or"]},{"Key":"[-\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E) and/or","Fragments":["[-\u0026gt;\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E%3E)"]},{"Key":"and/or [-\u0026gt;\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E%3E)","Fragments":["might"]},{"Key":"[-\u0026gt;\u0026gt;](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/-%3E%3E) might","Fragments":["make"]},{"Key":"word-count easier","Fragments":["to"]},{"Key":" Sorry,","Fragments":["I've","double","my","I","I"]},{"Key":"Sorry, I've","Fragments":["been"]},{"Key":"been the","Fragments":["bottleneck","first"]},{"Key":"bottleneck here.","Fragments":["Back"]},{"Key":"here. Back","Fragments":["from"]},{"Key":"Back from","Fragments":["vacation"]},{"Key":"from vacation","Fragments":["now,"]},{"Key":"vacation now,","Fragments":["so"]},{"Key":"now, so","Fragments":["hopefully"]},{"Key":"so hopefully","Fragments":["will"]},{"Key":"hopefully will","Fragments":["get"]},{"Key":"will get","Fragments":["things","you","`false`","you"]},{"Key":"get things","Fragments":["back"]},{"Key":"things back","Fragments":["to"]},{"Key":"to normal.","Fragments":[":)"]},{"Key":"it. One","Fragments":["tip"]},{"Key":"One tip","Fragments":["for","I"]},{"Key":"tip for","Fragments":["the","tightening"]},{"Key":"the future","Fragments":["--","when"]},{"Key":"future --","Fragments":["if"]},{"Key":"-- if","Fragments":["you're"]},{"Key":"you're aliasing","Fragments":["a"]},{"Key":"aliasing a","Fragments":["function"]},{"Key":"function like","Fragments":["`blank?`","`(#{1","this.","`clojure.string/replace`?","```frequencies```","`is-anagram?`","`has-us-prefix?`.","`count-with`","`filter`.","`cond`","the","shout?","check."]},{"Key":"like `blank?`","Fragments":["-\u0026gt;"]},{"Key":"`blank?` -\u0026gt;","Fragments":["`silence?`,"]},{"Key":"-\u0026gt; `silence?`,","Fragments":["you"]},{"Key":"`silence?`, you","Fragments":["can","can"]},{"Key":" `(def","Fragments":["silence?","^:private","gs","add-two","on-mercury","nothing?"]},{"Key":"`(def silence?","Fragments":["blank?)`","blank?)`"]},{"Key":"the shorthand","Fragments":["notation","names","function"]},{"Key":"shorthand notation","Fragments":["for"]},{"Key":"notation for","Fragments":["the","your"]},{"Key":" (e.g.","Fragments":["`#(="]},{"Key":"(e.g. `#(=","Fragments":["(last"]},{"Key":"`#(= (last","Fragments":["%1)"]},{"Key":"(last %1)","Fragments":["\\?)`)"]},{"Key":"idea why","Fragments":["the","it"]},{"Key":"is formatting","Fragments":["so"]},{"Key":"formatting so","Fragments":["oddly"]},{"Key":"so oddly","Fragments":[":(."]},{"Key":"IMO, it","Fragments":["depends"]},{"Key":"it depends","Fragments":["on"]},{"Key":"depends on","Fragments":["how"]},{"Key":"you look","Fragments":["at","at","at","at","at","in","again","at"]},{"Key":"it. This","Fragments":["example","way","convention"]},{"Key":"This example","Fragments":["is"]},{"Key":"example is","Fragments":["(necessarily)","good"]},{"Key":"is (necessarily)","Fragments":["trivial,"]},{"Key":"(necessarily) trivial,","Fragments":["so"]},{"Key":"trivial, so","Fragments":["helper"]},{"Key":"so helper","Fragments":["methods"]},{"Key":"methods might","Fragments":["be"]},{"Key":"be overkill.","Fragments":["They"]},{"Key":"overkill. They","Fragments":["seem"]},{"Key":"They seem","Fragments":["like"]},{"Key":"to communicate","Fragments":["intent"]},{"Key":"communicate intent","Fragments":["in"]},{"Key":"intent in","Fragments":["general,","the","response-for"]},{"Key":"The mapping","Fragments":["to"]},{"Key":"to vectors","Fragments":["and","and","since"]},{"Key":"vectors and","Fragments":["then","the","then"]},{"Key":"then comparing","Fragments":["could"]},{"Key":"comparing could","Fragments":["probably"]},{"Key":"one step.","Fragments":["After"]},{"Key":"step. After","Fragments":["all"]},{"Key":"After all","Fragments":["`=`"]},{"Key":"all `=`","Fragments":["and"]},{"Key":"`=` and","Fragments":["`not=`","`last`"]},{"Key":"and `not=`","Fragments":["are"]},{"Key":"`not=` are","Fragments":["just"]},{"Key":"probably put","Fragments":["the"]},{"Key":"the `if`","Fragments":["statement","into","inside","conditional.","semantics","form","conditional?","in"]},{"Key":"`if` statement","Fragments":["on"]},{"Key":"statement on","Fragments":["its"]},{"Key":"line to","Fragments":["enhance","show"]},{"Key":"also think","Fragments":["of","about","it"]},{"Key":"using `clojure.string/replace`","Fragments":["or","might"]},{"Key":"`clojure.string/replace` or","Fragments":["using"]},{"Key":"or using","Fragments":["a","the"]},{"Key":"a hash-map","Fragments":["to","as","instead"]},{"Key":"hash-map to","Fragments":["resolve"]},{"Key":"to resolve","Fragments":["mapped","this?","this","symbol:","symbol:"]},{"Key":"resolve mapped","Fragments":["nucoleotides."]},{"Key":"But looks","Fragments":["ok"]},{"Key":"looks ok","Fragments":["already"]},{"Key":"ok already","Fragments":["anyway."]},{"Key":"could put","Fragments":["\u003ccode\u003e?\u003c/code\u003e","it","the","\u003ccode\u003eshout?\u003c/code\u003e"]},{"Key":"put \u003ccode\u003e?\u003c/code\u003e","Fragments":["in"]},{"Key":"\u003ccode\u003e?\u003c/code\u003e in","Fragments":["the"]},{"Key":"returns boolean.","Fragments":["And"]},{"Key":"boolean. And","Fragments":["you"]},{"Key":"And you","Fragments":["could","are","can","might"]},{"Key":"could omit","Fragments":["\u003ccode\u003eis-\u003c/code\u003e"]},{"Key":"omit \u003ccode\u003eis-\u003c/code\u003e","Fragments":["beacuse"]},{"Key":"\u003ccode\u003eis-\u003c/code\u003e beacuse","Fragments":["is"]},{"Key":"beacuse is","Fragments":["redundant."]},{"Key":"I don´t","Fragments":["think"]},{"Key":"don´t think","Fragments":["it"]},{"Key":"overkill ,","Fragments":["because"]},{"Key":", because","Fragments":["it"]},{"Key":"be shown","Fragments":["the"]},{"Key":"shown the","Fragments":["intention"]},{"Key":"For example","Fragments":["you","you","-","`:\u003e","`is-shout?`","`(to-rna"]},{"Key":"example you","Fragments":["would","could"]},{"Key":"you would","Fragments":["have","have","have","usually","only","have","like","make","just","be","have"]},{"Key":"with name","Fragments":["like"]},{"Key":"name like","Fragments":["\u003ccode\u003esilence?\u003c/code\u003e","`n-bottles`.","`chars`."]},{"Key":"like \u003ccode\u003esilence?\u003c/code\u003e","Fragments":[","]},{"Key":"\u003ccode\u003esilence?\u003c/code\u003e ,","Fragments":["\u003ccode\u003eshouting?"]},{"Key":", \u003ccode\u003eshouting?","Fragments":["\u003c/code\u003e,"]},{"Key":"\u003ccode\u003eshouting? \u003c/code\u003e,","Fragments":["etc"]},{"Key":" @juston","Fragments":["Helper"]},{"Key":"@juston Helper","Fragments":["function"]},{"Key":"Helper function","Fragments":["are"]},{"Key":"are an","Fragments":["excellent"]},{"Key":"1. Think","Fragments":["about"]},{"Key":"moving checks","Fragments":["to","to"]},{"Key":"non-public functions","Fragments":["with","with","(`defn-`)","with","with"]},{"Key":"names (remember","Fragments":["that"]},{"Key":"(remember that","Fragments":["range"]},{"Key":"that range","Fragments":["of"]},{"Key":"of allowed","Fragments":["characters"]},{"Key":"allowed characters","Fragments":["is"]},{"Key":"characters is","Fragments":["much","my"]},{"Key":"much broader","Fragments":["than"]},{"Key":"broader than","Fragments":["in"]},{"Key":"than in","Fragments":["many","terms","an","the","OO"]},{"Key":"in many","Fragments":["other","cases."]},{"Key":"other languages)","Fragments":["2."]},{"Key":"languages) 2.","Fragments":["I"]},{"Key":"2. I","Fragments":["would","tried","will","was","had","would"]},{"Key":"would treat","Fragments":["a"]},{"Key":"treat a","Fragments":["regex"]},{"Key":"regex as","Fragments":["a"]},{"Key":"a last","Fragments":["resort","function"]},{"Key":"last resort","Fragments":["in"]},{"Key":"resort in","Fragments":["any"]},{"Key":"language. Observe","Fragments":["that"]},{"Key":"Observe that","Fragments":["a","map"]},{"Key":"sequence (it","Fragments":["extends"]},{"Key":"(it extends","Fragments":["the"]},{"Key":"extends the","Fragments":["sequence"]},{"Key":"related protocols)","Fragments":["-"]},{"Key":"protocols) -","Fragments":["make"]},{"Key":"- make","Fragments":["use"]},{"Key":"that. Also,","Fragments":["there's"]},{"Key":"Also, there's","Fragments":["a","an"]},{"Key":"core namespace","Fragments":["for"]},{"Key":"namespace for","Fragments":["typical","```clojure.string```","a","all"]},{"Key":"for typical","Fragments":["string"]},{"Key":"typical string","Fragments":["operations"]},{"Key":"operations -","Fragments":["see","one"]},{"Key":"- see","Fragments":["clojure.string."]},{"Key":"of \"hasher\"","Fragments":["because"]},{"Key":"\"hasher\" because","Fragments":["it"]},{"Key":"a representation","Fragments":["of"]},{"Key":"a word,","Fragments":["and","returns"]},{"Key":"word, and","Fragments":["two"]},{"Key":"and two","Fragments":["words"]},{"Key":"two words","Fragments":["are","with"]},{"Key":"words are","Fragments":["anagrams","sorted."]},{"Key":"are anagrams","Fragments":["if"]},{"Key":"anagrams if","Fragments":["their"]},{"Key":"if their","Fragments":["representation"]},{"Key":"their representation","Fragments":["is"]},{"Key":"representation is","Fragments":["the"]},{"Key":"Maybe \"normalizer\"","Fragments":["would"]},{"Key":"\"normalizer\" would","Fragments":["be"]},{"Key":"Now I","Fragments":["think","can"]},{"Key":"declare `query-type`","Fragments":["as"]},{"Key":"`query-type` as","Fragments":["private."]},{"Key":"Also, maybe","Fragments":["using"]},{"Key":"maybe using","Fragments":["`last`"]},{"Key":"good except","Fragments":["the"]},{"Key":"name \"hasher\"","Fragments":["doesn't"]},{"Key":"\"hasher\" doesn't","Fragments":["really"]},{"Key":"doesn't really","Fragments":["sit","express","take","need","return","describe"]},{"Key":"really sit","Fragments":["right"]},{"Key":"right with","Fragments":["me.","that."]},{"Key":"with me.","Fragments":["A"]},{"Key":"me. A","Fragments":["hash","couple","few"]},{"Key":"A hash","Fragments":["function"]},{"Key":"hash function","Fragments":["guarantees","must"]},{"Key":"function guarantees","Fragments":["that"]},{"Key":"guarantees that","Fragments":["hash(A)"]},{"Key":"that hash(A)","Fragments":["=="]},{"Key":"hash(A) ==","Fragments":["hash(A)","hash(B)."]},{"Key":"== hash(A)","Fragments":["but"]},{"Key":"hash(A) but","Fragments":["that's"]},{"Key":"that's it,","Fragments":["you"]},{"Key":"it, you","Fragments":["can't"]},{"Key":"can't assume","Fragments":["A"]},{"Key":"assume A","Fragments":["=="]},{"Key":"A ==","Fragments":["B"]},{"Key":"== B","Fragments":["if"]},{"Key":"B if","Fragments":["hash(A)"]},{"Key":"if hash(A)","Fragments":["=="]},{"Key":"== hash(B).","Fragments":["Additionally"]},{"Key":"hash(B). Additionally","Fragments":["a"]},{"Key":"Additionally a","Fragments":["hash"]},{"Key":"a hash","Fragments":["function","does","function.","and","bothers","would","and","map.","map."]},{"Key":"function must","Fragments":["have"]},{"Key":"fixed length","Fragments":["output."]},{"Key":"length output.","Fragments":["The"]},{"Key":"output. The","Fragments":["code"]},{"Key":"exercise, but","Fragments":["the","check","I","the","the"]},{"Key":"naming made","Fragments":["me"]},{"Key":"made me","Fragments":["think","look","think","realize","wish","learn","have","realize"]},{"Key":"me think","Fragments":["it","that","too"]},{"Key":"might not","Fragments":["until","be","be","have","be","need","be","capture","work"]},{"Key":"not until","Fragments":["I"]},{"Key":"until I","Fragments":["read","got","came","started"]},{"Key":"I read","Fragments":["the","the"]},{"Key":" #\"\\W+\"","Fragments":["might"]},{"Key":"#\"\\W+\" might","Fragments":["be"]},{"Key":"better regex","Fragments":["to"]},{"Key":"split on,","Fragments":["and"]},{"Key":"on, and","Fragments":["it"]},{"Key":"worth making","Fragments":["sure","a"]},{"Key":"making sure","Fragments":["that","that"]},{"Key":"don't end","Fragments":["up","up"]},{"Key":"up calculating","Fragments":["the"]},{"Key":"calculating the","Fragments":["frequency","alphagram"]},{"Key":"the frequency","Fragments":["of","to"]},{"Key":"frequency of","Fragments":["the"]},{"Key":"Yeah. My","Fragments":["only"]},{"Key":"only excuse","Fragments":["is"]},{"Key":"excuse is","Fragments":["that"]},{"Key":"I looked","Fragments":["at","at","for"]},{"Key":"at Clojure,","Fragments":["it"]},{"Key":"Clojure, it","Fragments":["didn't"]},{"Key":"have `defn-`.","Fragments":["I"]},{"Key":"`defn-`. I","Fragments":["think."]},{"Key":"I think.","Fragments":[";)","As"]},{"Key":"if using","Fragments":["`cond`","two","the"]},{"Key":"`cond` couldn't","Fragments":["be"]},{"Key":"couldn't be","Fragments":["possibly"]},{"Key":"possibly more","Fragments":["clearer","idiomatic?"]},{"Key":"more clearer","Fragments":["here."]},{"Key":"can't get","Fragments":["some"]},{"Key":"get some","Fragments":["convenient","feedback.","feedback","experience","suggestions","good"]},{"Key":"some convenient","Fragments":["utilities"]},{"Key":"convenient utilities","Fragments":["from"]},{"Key":"utilities from","Fragments":["there."]},{"Key":"can check","Fragments":["for","if","the"]},{"Key":"string directly","Fragments":["using"]},{"Key":"directly using","Fragments":["`last`"]},{"Key":"character representation,","Fragments":["here"]},{"Key":"representation, here","Fragments":["`\\?`."]},{"Key":"personally return","Fragments":["atoms"]},{"Key":"return atoms","Fragments":["rather"]},{"Key":"atoms rather","Fragments":["than"]},{"Key":"than string","Fragments":["identifiers,"]},{"Key":"string identifiers,","Fragments":["otherwise"]},{"Key":"identifiers, otherwise","Fragments":["looks"]},{"Key":"otherwise looks","Fragments":["pretty"]},{"Key":"Ah, and","Fragments":["probably","`use`","you","one"]},{"Key":"probably you","Fragments":["get"]},{"Key":"get warning","Fragments":["about"]},{"Key":"warning about","Fragments":["shadowing","overriding","redefining","interpreting","overriding","redefining","`count`"]},{"Key":"about shadowing","Fragments":["`count`"]},{"Key":"shadowing `count`","Fragments":["when"]},{"Key":"`count` when","Fragments":["compiling"]},{"Key":"when compiling","Fragments":["-"]},{"Key":"compiling -","Fragments":["you"]},{"Key":"using `:refer-clojure`","Fragments":["in"]},{"Key":"`:refer-clojure` in","Fragments":["`ns`"]},{"Key":"Using regex","Fragments":["literal","for"]},{"Key":"regex literal","Fragments":["for"]},{"Key":"T is","Fragments":["not"]},{"Key":" Might","Fragments":["be","be?","want"]},{"Key":"a let","Fragments":["binding","inside","statement","to","statement","expression","rather"]},{"Key":"let binding","Fragments":["for","so"]},{"Key":"binding for","Fragments":["(sort","`last`,","`(get"]},{"Key":"for (sort","Fragments":["word)"]},{"Key":"(sort word)","Fragments":["so"]},{"Key":"word) so","Fragments":["it's"]},{"Key":"not calculated","Fragments":["every"]},{"Key":"calculated every","Fragments":["time."]},{"Key":"every time.","Fragments":["Also,","I"]},{"Key":"time. Also,","Fragments":["frequencies"]},{"Key":"Also, frequencies","Fragments":["might"]},{"Key":"frequencies might","Fragments":["be"]},{"Key":"better normalization","Fragments":["than"]},{"Key":"normalization than","Fragments":["sort"]},{"Key":"than sort","Fragments":["as"]},{"Key":"sort as","Fragments":["it"]},{"Key":"in O(n)","Fragments":["where","instead"]},{"Key":"O(n) where","Fragments":["this"]},{"Key":"where this","Fragments":["kind","is"]},{"Key":"of sort","Fragments":["is"]},{"Key":"sort is","Fragments":["likely","going","just"]},{"Key":"is likely","Fragments":["O(n","performance","redundant."]},{"Key":"likely O(n","Fragments":["log"]},{"Key":"O(n log","Fragments":["n).","n)."]},{"Key":"with `clojure.string/lower-case`","Fragments":["instead"]},{"Key":"`clojure.string/lower-case` instead","Fragments":["of","of"]},{"Key":"of `.toLowerCase`,","Fragments":["but"]},{"Key":"`.toLowerCase`, but","Fragments":["that's"]},{"Key":"probably just","Fragments":["a","does","inline","leave","use","use"]},{"Key":"Are the","Fragments":["`seq`s","tests"]},{"Key":"the `seq`s","Fragments":["in"]},{"Key":"`seq`s in","Fragments":["`anagram`"]},{"Key":"in `anagram`","Fragments":["necessary?"]},{"Key":"word only","Fragments":["once","gets","once."]},{"Key":" Yay!","Fragments":[":D"]},{"Key":"Yay! :D","Fragments":["Naming"]},{"Key":":D Naming","Fragments":["could"]},{"Key":"Naming could","Fragments":["be"]},{"Key":"more specific,","Fragments":["but"]},{"Key":"specific, but","Fragments":["for"]},{"Key":"a narrow","Fragments":["scope"]},{"Key":"narrow scope","Fragments":["and"]},{"Key":"scope and","Fragments":["simple"]},{"Key":"simple function,","Fragments":["can"]},{"Key":"function, can","Fragments":["do."]},{"Key":" Unfortunately","Fragments":["I'm"]},{"Key":"Unfortunately I'm","Fragments":["not"]},{"Key":"a moderator.","Fragments":["So"]},{"Key":"moderator. So","Fragments":["I"]},{"Key":"So I","Fragments":["can","began","think","did","think","made","use","changed","could","guess"]},{"Key":"only mark","Fragments":["it"]},{"Key":"it off","Fragments":["as"]},{"Key":"off as","Fragments":["good"]},{"Key":" Better","Fragments":["formatting"]},{"Key":"Better formatting","Fragments":["FTW"]},{"Key":" Good.","Fragments":["In","But","One"]},{"Key":"Good. In","Fragments":["future,"]},{"Key":"In future,","Fragments":["please"]},{"Key":"future, please","Fragments":["put"]},{"Key":"please put","Fragments":[":require","use/require"]},{"Key":"put :require","Fragments":["and"]},{"Key":":require and","Fragments":["other","changed"]},{"Key":"other constructs","Fragments":["in"]},{"Key":"constructs in","Fragments":["their"]},{"Key":"lines in","Fragments":["the","order","my"]},{"Key":" Will","Fragments":["do,","also","review"]},{"Key":"Will do,","Fragments":["thanks."]},{"Key":"do, thanks.","Fragments":["Please"]},{"Key":"thanks. Please","Fragments":["approve"]},{"Key":"Please approve","Fragments":["it?"]},{"Key":"Alright, I","Fragments":["give"]},{"Key":"I give","Fragments":["up.","to"]},{"Key":"give up.","Fragments":["Here's"]},{"Key":"up. Here's","Fragments":["a"]},{"Key":"implement it","Fragments":["such","with","with","with"]},{"Key":"it such","Fragments":["that"]},{"Key":"only gets","Fragments":["sorted"]},{"Key":"gets sorted","Fragments":["once?"]},{"Key":"What @anjali","Fragments":["says."]},{"Key":"closing parenthesis","Fragments":["confusing","immediately"]},{"Key":"parenthesis confusing","Fragments":["here."]},{"Key":"confusing here.","Fragments":["It"]},{"Key":"It makes","Fragments":["the","sense","it","the","it"]},{"Key":"code look","Fragments":["*\"unfinished\"*","like"]},{"Key":"look *\"unfinished\"*","Fragments":["if"]},{"Key":"*\"unfinished\"* if","Fragments":["you"]},{"Key":"you know,","Fragments":["what"]},{"Key":"know, what","Fragments":["I"]},{"Key":"Sorry, double","Fragments":["post"]},{"Key":"double post","Fragments":["..."]},{"Key":"did use","Fragments":["the"]},{"Key":"the :use","Fragments":["in","option","flag"]},{"Key":":use in","Fragments":["the","the"]},{"Key":"exercise but","Fragments":["I","knew","only"]},{"Key":"figured for","Fragments":["one"]},{"Key":"two constants","Fragments":["with"]},{"Key":"constants with","Fragments":["domain"]},{"Key":"with domain","Fragments":["names."]},{"Key":" Btw:","Fragments":["4"]},{"Key":"Btw: 4","Fragments":["lines"]},{"Key":"4 lines","Fragments":["of"]},{"Key":"lines of","Fragments":["code","code,","what","Clojure","code.","code"]},{"Key":"code for","Fragments":["a","all","`verse`","function","checking"]},{"Key":"a somewhat","Fragments":["complex","complex"]},{"Key":"somewhat complex","Fragments":["task.","behaviour,"]},{"Key":"complex task.","Fragments":["Clojure"]},{"Key":"task. Clojure","Fragments":["rocks."]},{"Key":" Better?","Fragments":[";)"]},{"Key":" Mainly","Fragments":["readability"]},{"Key":"Mainly readability","Fragments":["changes"]},{"Key":"cheating to","Fragments":["me."]},{"Key":"me. But","Fragments":["that","I"]},{"Key":"But that","Fragments":["is","might","could","didn't"]},{"Key":"is how","Fragments":["I","I","you","you"]},{"Key":"did it","Fragments":["in","automatically.","this","right?",":-)","rather"]},{"Key":"the Javascript","Fragments":["trail.","trail"]},{"Key":"Looks great.","Fragments":["The","You","In","I"]},{"Key":"great. The","Fragments":["only"]},{"Key":"thing I'd","Fragments":["suggest","change","suggest","recommend","recommend"]},{"Key":"I'd suggest","Fragments":["considering","adding","you","breaking","here","indenting","would"]},{"Key":"suggest considering","Fragments":["would"]},{"Key":"considering would","Fragments":["be"]},{"Key":"be whether","Fragments":["you"]},{"Key":"whether you","Fragments":["think","consider"]},{"Key":"think giving","Fragments":["names"]},{"Key":"the bare","Fragments":["characters"]},{"Key":"bare characters","Fragments":["might"]},{"Key":"characters might","Fragments":["make"]},{"Key":"operation more","Fragments":["self-describing?"]},{"Key":"the `seq`","Fragments":["is","on","call","returned"]},{"Key":"on this,","Fragments":["imo."]},{"Key":"this, imo.","Fragments":["I"]},{"Key":"imo. I","Fragments":["guess"]},{"Key":"guess one","Fragments":["minor"]},{"Key":"one minor","Fragments":["thing","thing,","minor"]},{"Key":"the `get`","Fragments":["is","in","from"]},{"Key":"`get` is","Fragments":["unnecessary,","unnecessary"]},{"Key":"is unnecessary,","Fragments":["`(db"]},{"Key":"unnecessary, `(db","Fragments":["level"]},{"Key":"`(db level","Fragments":["[])`"]},{"Key":"level [])`","Fragments":["should"]},{"Key":"[])` should","Fragments":["do"]},{"Key":" Noted,","Fragments":["thanks!"]},{"Key":"`let` body","Fragments":["should"]},{"Key":"body should","Fragments":["be"]},{"Key":"be indented","Fragments":["by","by","more"]},{"Key":"indented by","Fragments":["two","two"]},{"Key":"by two","Fragments":["spaces,","spaces."]},{"Key":"two spaces,","Fragments":["becase"]},{"Key":"spaces, becase","Fragments":["as"]},{"Key":"becase as","Fragments":["it"]},{"Key":"is now,","Fragments":["it"]},{"Key":"now, it","Fragments":["looks"]},{"Key":"was outside","Fragments":["the"]},{"Key":"the mentioned","Fragments":["`let`."]},{"Key":"mentioned `let`.","Fragments":["Other"]},{"Key":"`let`. Other","Fragments":["than"]},{"Key":"that, looks","Fragments":["good.","good.","good.","good.","good.","ok.","good.","fine.","fine","great"]},{"Key":"Only difference","Fragments":["between"]},{"Key":"between this","Fragments":["version"]},{"Key":"this version","Fragments":["and","a","a","would","I've"]},{"Key":"version and","Fragments":["the"]},{"Key":"previous one","Fragments":["is"]},{"Key":"is private","Fragments":["functions."]},{"Key":"consider would","Fragments":["be"]},{"Key":"be if","Fragments":["all"]},{"Key":"of public","Fragments":["API."]},{"Key":" Again,","Fragments":["thank"]},{"Key":"Again, thank","Fragments":["you"]},{"Key":"you not","Fragments":["only"]},{"Key":"not only","Fragments":["for","the","more"]},{"Key":"the excellent","Fragments":["advice,"]},{"Key":"excellent advice,","Fragments":["but"]},{"Key":"advice, but","Fragments":["also"]},{"Key":"also the","Fragments":["way","author","`subs`","only","lower"]},{"Key":"way you've","Fragments":["delivered","implemented","formatted"]},{"Key":"you've delivered","Fragments":["it."]},{"Key":"delivered it.","Fragments":["Agree"]},{"Key":"it. Agree","Fragments":["I"]},{"Key":"Agree I","Fragments":["could"]},{"Key":"could improve","Fragments":["on","your","much"]},{"Key":"for taking","Fragments":["the","this","a","the","the","a"]},{"Key":"taking the","Fragments":["time","context","time!","simpler","time"]},{"Key":"clarify a","Fragments":["bit"]},{"Key":"bit on","Fragments":["your","my"]},{"Key":"last nitpick","Fragments":["regarding","I've"]},{"Key":"nitpick regarding","Fragments":["naming"]},{"Key":"regarding naming","Fragments":[":-)"]},{"Key":"mean using","Fragments":["`frequencies`"]},{"Key":" remove","Fragments":["unused"]},{"Key":"you. I'll","Fragments":["add"]},{"Key":"add `sts=2`","Fragments":["in"]},{"Key":"`sts=2` in","Fragments":["my"]},{"Key":"That's good.","Fragments":["Earmuffs"]},{"Key":"good. Earmuffs","Fragments":["are"]},{"Key":"Earmuffs are","Fragments":["not"]},{"Key":"not obligatory","Fragments":["though."]},{"Key":"obligatory though.","Fragments":["You"]},{"Key":"though. You","Fragments":["can"]},{"Key":"it non-public","Fragments":["with"]},{"Key":"non-public with","Fragments":["`^:private`."]},{"Key":"Thanks @patrick!","Fragments":["I'm"]},{"Key":"@patrick! I'm","Fragments":["still"]},{"Key":"still very","Fragments":["new"]},{"Key":"very new","Fragments":["to","to","to"]},{"Key":"so that's","Fragments":["very","why","pretty","cool."]},{"Key":"mean ```frequencies```","Fragments":["instead"]},{"Key":"```frequencies``` instead","Fragments":["of"]},{"Key":"spare yourself","Fragments":["the"]},{"Key":"yourself the","Fragments":["import"]},{"Key":"the import","Fragments":["and"]},{"Key":"import and","Fragments":["just"]},{"Key":"str ...)`","Fragments":["but","instead","should","or","was","which"]},{"Key":"...)` but","Fragments":["that's"]},{"Key":"about precomputing","Fragments":["the"]},{"Key":"precomputing the","Fragments":["initial"]},{"Key":"word anagram","Fragments":["to"]},{"Key":"anagram to","Fragments":["avoid"]},{"Key":"avoid processing","Fragments":["it","the","the","the"]},{"Key":"processing it","Fragments":["for"]},{"Key":"like I'm","Fragments":["doing","your","missing","barking","trying","using"]},{"Key":"doing one","Fragments":["more"]},{"Key":"one more","Fragments":["function","time","thing,","optimisation","here."]},{"Key":"more function","Fragments":["call"]},{"Key":"call than","Fragments":["I"]},{"Key":"than I","Fragments":["should","can","thought.","needed","expected.","do.","think"]},{"Key":" Hopefully","Fragments":["someone"]},{"Key":"Hopefully someone","Fragments":["more"]},{"Key":"someone more","Fragments":["experienced"]},{"Key":"more experienced","Fragments":["than"]},{"Key":"experienced than","Fragments":["I"]},{"Key":"can point","Fragments":["it","me"]},{"Key":"point it","Fragments":["out.","out.","out,"]},{"Key":"Yes, it's","Fragments":["more"]},{"Key":"one. Command","Fragments":["line"]},{"Key":"Command line","Fragments":["history"]},{"Key":"line history","Fragments":["done"]},{"Key":"history done","Fragments":["me"]},{"Key":"done me","Fragments":["in."]},{"Key":"the :require","Fragments":["inside","should"]},{"Key":":require inside","Fragments":["the"]},{"Key":"the namespace.","Fragments":["I'll","If"]},{"Key":"namespace. I'll","Fragments":["need"]},{"Key":"I'll need","Fragments":["to"]},{"Key":"do know","Fragments":["about"]},{"Key":"? but","Fragments":["I"]},{"Key":"the p","Fragments":["naming"]},{"Key":"p naming","Fragments":["scheme"]},{"Key":"naming scheme","Fragments":["in","should","is","with","for"]},{"Key":"scheme in","Fragments":["lisp"]},{"Key":"lisp for","Fragments":["predicates."]},{"Key":"for predicates.","Fragments":["Is"]},{"Key":"predicates. Is","Fragments":["?"]},{"Key":"Is ?","Fragments":["more"]},{"Key":"? more","Fragments":["idiomatic"]},{"Key":" Parentheses","Fragments":["are"]},{"Key":"Parentheses are","Fragments":["unnecessary"]},{"Key":"are unnecessary","Fragments":["for"]},{"Key":"unnecessary for","Fragments":["functions"]},{"Key":"functions taking","Fragments":["single"]},{"Key":"taking single","Fragments":["argument."]},{"Key":" Succint","Fragments":["and"]},{"Key":"Succint and","Fragments":["to"]},{"Key":"Consider either","Fragments":["adding"]},{"Key":"either adding","Fragments":["inline"]},{"Key":"adding inline","Fragments":["comments"]},{"Key":"inline comments","Fragments":["what","describing"]},{"Key":"comments what","Fragments":["every"]},{"Key":"what every","Fragments":["check"]},{"Key":"check actually","Fragments":["checks"]},{"Key":"actually checks","Fragments":["for"]},{"Key":"checks for","Fragments":["or","alphanumeric.","anagrams","empty","is-all-caps?"]},{"Key":"for or","Fragments":["move"]},{"Key":"or move","Fragments":["those"]},{"Key":"move those","Fragments":["to"]},{"Key":"functions (even","Fragments":["under"]},{"Key":"(even under","Fragments":["lexical"]},{"Key":"under lexical","Fragments":["let"]},{"Key":"lexical let","Fragments":["bindings)"]},{"Key":"let bindings)","Fragments":["with"]},{"Key":"bindings) with","Fragments":["names"]},{"Key":"names meaningful","Fragments":["to"]},{"Key":"meaningful to","Fragments":["the"]},{"Key":"will go","Fragments":["and"]},{"Key":"go and","Fragments":["read","check","have"]},{"Key":"and read","Fragments":["some"]},{"Key":"read some","Fragments":["clojure"]},{"Key":"clojure docs","Fragments":["now"]},{"Key":"docs now","Fragments":["=)"]},{"Key":" `format`!!","Fragments":["That's"]},{"Key":"`format`!! That's","Fragments":["what"]},{"Key":" Better,","Fragments":["but"]},{"Key":"Better, but","Fragments":["you"]},{"Key":"you actually","Fragments":["don't","give","attempt","don't"]},{"Key":"for numbers,","Fragments":["since"]},{"Key":"numbers, since","Fragments":["\\w"]},{"Key":"since \\w","Fragments":["already"]},{"Key":"\\w already","Fragments":["checks"]},{"Key":"already checks","Fragments":["for"]},{"Key":"Try one","Fragments":["more"]},{"Key":"more time","Fragments":["to"]},{"Key":"clojure.string prefixes","Fragments":[":-)"]},{"Key":"Very nice,","Fragments":["love"]},{"Key":"nice, love","Fragments":["the"]},{"Key":"of recursion","Fragments":["here.","for","for"]},{"Key":"wasn't aware","Fragments":["of","that","of","of","of,","of"]},{"Key":"still repeatedly","Fragments":["apply"]},{"Key":"repeatedly apply","Fragments":["`character-frequencies`"]},{"Key":"apply `character-frequencies`","Fragments":["to"]},{"Key":"`character-frequencies` to","Fragments":["`word`."]},{"Key":"Does this","Fragments":["pass","pass","pass"]},{"Key":"test suite?","Fragments":["Check","Because"]},{"Key":"suite? Check","Fragments":["the"]},{"Key":"Check the","Fragments":["last"]},{"Key":"two test","Fragments":["cases—one"]},{"Key":"test cases—one","Fragments":["of"]},{"Key":"cases—one of","Fragments":["them's"]},{"Key":"of them's","Fragments":["an"]},{"Key":"them's an","Fragments":["easy"]},{"Key":"Your implementation","Fragments":["of","has","of"]},{"Key":"of Bob","Fragments":["is","that","using"]},{"Key":"is limited.","Fragments":["The"]},{"Key":"limited. The","Fragments":["requirements"]},{"Key":"The requirements","Fragments":["state"]},{"Key":"requirements state","Fragments":["that"]},{"Key":"\u0026gt; He","Fragments":["answers"]},{"Key":"He answers","Fragments":["'Whatever.'"]},{"Key":"answers 'Whatever.'","Fragments":["to"]},{"Key":"'Whatever.' to","Fragments":["anything"]},{"Key":"to anything","Fragments":["else","but"]},{"Key":"if your","Fragments":["Bob","collection","questions","regex"]},{"Key":"your Bob","Fragments":["receives"]},{"Key":"Bob receives","Fragments":["something"]},{"Key":"receives something","Fragments":["like"]},{"Key":"like \"Lets","Fragments":["play"]},{"Key":"\"Lets play","Fragments":["scrabble.\"?"]},{"Key":"the full","Fragments":["implications","implications","string,","string","song.","song.","requirements."]},{"Key":"full implications","Fragments":["of","of"]},{"Key":"implications of","Fragments":["what","ref."]},{"Key":"of what","Fragments":["I'm","you","appears","an","you","ever","you","you","you","`to-rna`"]},{"Key":"in reset-name,","Fragments":["but"]},{"Key":"reset-name, but","Fragments":["I"]},{"Key":"was very","Fragments":["delighted","innovative.","helpful","easy"]},{"Key":"very delighted","Fragments":["to"]},{"Key":"delighted to","Fragments":["finally","find"]},{"Key":"to finally","Fragments":["stumble","pass"]},{"Key":"finally stumble","Fragments":["on"]},{"Key":"stumble on","Fragments":["something"]},{"Key":"on something","Fragments":["that","else),"]},{"Key":"that seemed","Fragments":["to","harder"]},{"Key":"seemed to","Fragments":["work.","read","read","make","me","be"]},{"Key":"work. ref,","Fragments":["dosync,"]},{"Key":"ref, dosync,","Fragments":["alter"]},{"Key":"dosync, alter","Fragments":["and"]},{"Key":"alter and","Fragments":["conj"]},{"Key":"and conj","Fragments":["are"]},{"Key":"conj are","Fragments":["pretty"]},{"Key":"pretty mysterious","Fragments":["to"]},{"Key":"mysterious to","Fragments":["me","me"]},{"Key":"concise you","Fragments":["made"]},{"Key":"you made","Fragments":["it","a","`str`","sure"]},{"Key":"by doing","Fragments":["```:refer```"]},{"Key":"doing ```:refer```","Fragments":["on"]},{"Key":"```:refer``` on","Fragments":["the"]},{"Key":"You maybe","Fragments":["wants","wants"]},{"Key":"maybe wants","Fragments":["to","to"]},{"Key":"wants to","Fragments":["check","checkout"]},{"Key":"the \u003ccode\u003e:use\u003c/code\u003e","Fragments":["or"]},{"Key":"\u003ccode\u003e:use\u003c/code\u003e or","Fragments":["\u003ccode\u003e:require\u003c/code\u003e"]},{"Key":"or \u003ccode\u003e:require\u003c/code\u003e","Fragments":["in"]},{"Key":"\u003ccode\u003e:require\u003c/code\u003e in","Fragments":["the"]},{"Key":"this simpler","Fragments":["by","and"]},{"Key":"simpler by","Fragments":["using"]},{"Key":"using `(map","Fragments":["not="]},{"Key":"`(map not=","Fragments":["strand","s1"]},{"Key":"not= strand","Fragments":["other)`"]},{"Key":"write functions","Fragments":["to"]},{"Key":"give names","Fragments":["to"]},{"Key":"to things","Fragments":["like","like"]},{"Key":"the re-find","Fragments":["call."]},{"Key":"should also","Fragments":["investigate","cover","be","be"]},{"Key":"also investigate","Fragments":["the"]},{"Key":"investigate the","Fragments":["```cond```"]},{"Key":"the ```cond```","Fragments":["special","into","in"]},{"Key":"```cond``` special","Fragments":["form."]},{"Key":"form. It","Fragments":["is","this"]},{"Key":"a generalization","Fragments":["of","of"]},{"Key":"generalization of","Fragments":["```if```.","`if`"]},{"Key":"Clojure, as","Fragments":["I'm"]},{"Key":"as I'm","Fragments":["new","not","pretty"]},{"Key":"Clojure, this","Fragments":["is"]},{"Key":"first code","Fragments":["on"]},{"Key":"Please guide","Fragments":["me"]},{"Key":"guide me","Fragments":["towards"]},{"Key":"me towards","Fragments":["the"]},{"Key":"towards the","Fragments":["Clojure"]},{"Key":"Clojure way.","Fragments":["What"]},{"Key":"way. What","Fragments":["can"]},{"Key":"What can","Fragments":["I"]},{"Key":"can I","Fragments":["improve","express"]},{"Key":"I improve","Fragments":["here?"]},{"Key":"A good","Fragments":["start."]},{"Key":" Maintainability","Fragments":["would"]},{"Key":"Maintainability would","Fragments":["be"]},{"Key":"be increased","Fragments":["if"]},{"Key":"increased if","Fragments":["you"]},{"Key":"gave names","Fragments":["to"]},{"Key":"the reasons","Fragments":["for"]},{"Key":"reasons for","Fragments":["the"]},{"Key":"Also, imagine","Fragments":["another"]},{"Key":"imagine another","Fragments":["new"]},{"Key":"another new","Fragments":["response"]},{"Key":"new response","Fragments":["(with"]},{"Key":"response (with","Fragments":["related"]},{"Key":"(with related","Fragments":["triggering"]},{"Key":"related triggering","Fragments":["input"]},{"Key":"triggering input","Fragments":["type)"]},{"Key":"input type)","Fragments":["-"]},{"Key":"type) -","Fragments":["how"]},{"Key":"- how","Fragments":["would"]},{"Key":"how would","Fragments":["your","you","it"]},{"Key":"would your","Fragments":["code"]},{"Key":"code have","Fragments":["to"]},{"Key":"to change?","Fragments":["How"]},{"Key":"change? How","Fragments":["could"]},{"Key":"How could","Fragments":["you","you","I"]},{"Key":"you minimize","Fragments":["that"]},{"Key":"minimize that","Fragments":["possible"]},{"Key":"that possible","Fragments":["change?"]},{"Key":"Consider exploiting","Fragments":["two"]},{"Key":"exploiting two","Fragments":["facts:"]},{"Key":"two facts:","Fragments":["`map`"]},{"Key":"facts: `map`","Fragments":["can"]},{"Key":"`map` can","Fragments":["be","take"]},{"Key":"used on","Fragments":["multiple","top","associative"]},{"Key":"on multiple","Fragments":["collections"]},{"Key":"multiple collections","Fragments":["at","and"]},{"Key":"collections at","Fragments":["once"]},{"Key":"at once","Fragments":["and","-"]},{"Key":"it maps","Fragments":["over","over"]},{"Key":"maps over","Fragments":["the","the"]},{"Key":"the length","Fragments":["of","of","of","of","twice?","of","once.","twice","of","of","of","of"]},{"Key":"length of","Fragments":["shortest","string,","the","the","the","a","input","the","dna","the"]},{"Key":"of shortest","Fragments":["collection."]},{"Key":"shortest collection.","Fragments":["This"]},{"Key":"collection. This","Fragments":["should"]},{"Key":"should cut","Fragments":["the"]},{"Key":"cut the","Fragments":["code"]},{"Key":"to about","Fragments":["one"]},{"Key":"about one","Fragments":["relatively"]},{"Key":"one relatively","Fragments":["simple"]},{"Key":"relatively simple","Fragments":["function."]},{"Key":"into that.","Fragments":["I"]},{"Key":"that. I","Fragments":["am","haven't","like","did","do"]},{"Key":"am almost","Fragments":["anal"]},{"Key":"almost anal","Fragments":["about"]},{"Key":"anal about","Fragments":["testing"]},{"Key":"about testing","Fragments":["my"]},{"Key":"testing my","Fragments":["stuff"]},{"Key":"my stuff","Fragments":["so"]},{"Key":"stuff so","Fragments":["this"]},{"Key":"is exactly","Fragments":["what","the","what"]},{"Key":"get me","Fragments":["to"]},{"Key":"to dive","Fragments":["deep","into","into"]},{"Key":"dive deep","Fragments":["into"]},{"Key":"deep into","Fragments":["Clojure.","```anagram.anagrams-for```'s"]},{"Key":"It rocks","Fragments":["indeed"]},{"Key":"rocks indeed","Fragments":[":)"]},{"Key":":) For","Fragments":["an","future"]},{"Key":"For an","Fragments":["example"]},{"Key":"example of","Fragments":["code","string","what","a","how"]},{"Key":"code developed","Fragments":["in"]},{"Key":"developed in","Fragments":["a"]},{"Key":"a TDD","Fragments":["fashion"]},{"Key":"TDD fashion","Fragments":["(with"]},{"Key":"fashion (with","Fragments":["top-down,"]},{"Key":"(with top-down,","Fragments":["mock-heavy"]},{"Key":"top-down, mock-heavy","Fragments":["approach),"]},{"Key":"mock-heavy approach),","Fragments":["there's"]},{"Key":"approach), there's","Fragments":["a"]},{"Key":"nice screencast","Fragments":["by"]},{"Key":"screencast by","Fragments":["Brian"]},{"Key":"by Brian","Fragments":["Marick"]},{"Key":"Brian Marick","Fragments":["http://vimeo.com/19404746"]},{"Key":"Marick http://vimeo.com/19404746","Fragments":["."]},{"Key":"http://vimeo.com/19404746 .","Fragments":["He's"]},{"Key":". He's","Fragments":["also"]},{"Key":"He's also","Fragments":["the"]},{"Key":"the author","Fragments":["and"]},{"Key":"author and","Fragments":["maintainer"]},{"Key":"and maintainer","Fragments":["of"]},{"Key":"maintainer of","Fragments":["the"]},{"Key":"the testing","Fragments":["tool"]},{"Key":"testing tool","Fragments":["used"]},{"Key":"tool used","Fragments":["there."]},{"Key":"used there.","Fragments":["Although"]},{"Key":"there. Although","Fragments":["the"]},{"Key":"Although the","Fragments":["video","question","tests"]},{"Key":"the video","Fragments":["is"]},{"Key":"video is","Fragments":["a"]},{"Key":"bit dated,","Fragments":["it"]},{"Key":"dated, it","Fragments":["still"]},{"Key":"still gives","Fragments":["quite"]},{"Key":"gives quite","Fragments":["good"]},{"Key":"quite good","Fragments":["picture"]},{"Key":"good picture","Fragments":["of"]},{"Key":"picture of","Fragments":["how"]},{"Key":"the process","Fragments":["may","to","to","into","could","where","I","and","to"]},{"Key":"process may","Fragments":["look"]},{"Key":"may look","Fragments":["and","like"]},{"Key":"look and","Fragments":["how","feel"]},{"Key":"and how","Fragments":["Clojure","you","it","it"]},{"Key":"how Clojure","Fragments":["fits","[maps](http://www.braveclojure.com/do-things/#2_4__Maps)"]},{"Key":"Clojure fits","Fragments":["that"]},{"Key":"fits that","Fragments":["style"]},{"Key":"that style","Fragments":["of"]},{"Key":"style of","Fragments":["development","closing","creating","solution"]},{"Key":"of development","Fragments":["-"]},{"Key":"development -","Fragments":["however"]},{"Key":"only way","Fragments":["to","to","to"]},{"Key":"to accomplish","Fragments":["that","or","all"]},{"Key":"accomplish that","Fragments":["of"]},{"Key":"about `get`.","Fragments":["I"]},{"Key":"`get`. I","Fragments":["still"]},{"Key":"I still","Fragments":["have","kind","don't","believe","like","like","think","need","thinks"]},{"Key":"to little","Fragments":["of"]},{"Key":"little of","Fragments":["clojure's"]},{"Key":"of clojure's","Fragments":["libraries"]},{"Key":"clojure's libraries","Fragments":["in"]},{"Key":"libraries in","Fragments":["my","the"]},{"Key":" Smart","Fragments":["use","approach."]},{"Key":"Smart use","Fragments":["of"]},{"Key":"of frequencies.","Fragments":["Great!","It"]},{"Key":"frequencies. Great!","Fragments":["You"]},{"Key":"Great! You","Fragments":["could"]},{"Key":"use get","Fragments":["for"]},{"Key":"bit better","Fragments":["readability","so","than"]},{"Key":"better readability","Fragments":["but"]},{"Key":"readability but","Fragments":["that","I","ignoring"]},{"Key":"be personal","Fragments":["preference."]},{"Key":"the `plural`","Fragments":["function"]},{"Key":"`plural` function","Fragments":["(maybe"]},{"Key":"function (maybe","Fragments":["name"]},{"Key":"(maybe name","Fragments":["it"]},{"Key":"name it","Fragments":["*pluralize*?),","something","at","`lowercase-word`.","could","\u003ccode\u003eresponse-for\u003c/code\u003e","`question?`,","could"]},{"Key":"it *pluralize*?),","Fragments":["because"]},{"Key":"*pluralize*?), because","Fragments":["it"]},{"Key":"makes very","Fragments":["clear"]},{"Key":"very clear","Fragments":["what","meanings.","what","code.","and","to","and"]},{"Key":"what happens.","Fragments":["It","If"]},{"Key":"happens. It","Fragments":["took"]},{"Key":"took less","Fragments":["than"]},{"Key":"less than","Fragments":["one","two","3","3","9"]},{"Key":"one second","Fragments":["to"]},{"Key":"second to","Fragments":["understand","parse."]},{"Key":"cannot say","Fragments":["the"]},{"Key":"say the","Fragments":["same","least."]},{"Key":"same about","Fragments":["the"]},{"Key":"the `verse`","Fragments":["function.","method,","method,","function."]},{"Key":"`verse` function.","Fragments":["Personally","But"]},{"Key":"function. Personally","Fragments":["I"]},{"Key":"Personally I","Fragments":["find","like","prefer","would"]},{"Key":"line breaks","Fragments":["more"]},{"Key":"breaks more","Fragments":["confusing"]},{"Key":"more confusing","Fragments":["than"]},{"Key":"confusing than","Fragments":["helpful."]},{"Key":"than helpful.","Fragments":["You"]},{"Key":"helpful. You","Fragments":["aren't"]},{"Key":"You aren't","Fragments":["coding"]},{"Key":"aren't coding","Fragments":["Python"]},{"Key":"coding Python","Fragments":["here,"]},{"Key":"Python here,","Fragments":["you"]},{"Key":"here, you","Fragments":["don't"]},{"Key":"to stay","Fragments":["with","close","at"]},{"Key":"stay with","Fragments":["the","my"]},{"Key":"the 80","Fragments":["characters"]},{"Key":"80 characters","Fragments":["limit."]},{"Key":"characters limit.","Fragments":["I"]},{"Key":"limit. I","Fragments":["try"]},{"Key":"try that","Fragments":["myself","out"]},{"Key":"that myself","Fragments":["in","=)"]},{"Key":"myself in","Fragments":["most"]},{"Key":"most places,","Fragments":["but"]},{"Key":"places, but","Fragments":["if"]},{"Key":"it improves","Fragments":["readability,"]},{"Key":"improves readability,","Fragments":["you"]},{"Key":"readability, you","Fragments":["should","can"]},{"Key":"giving your","Fragments":["lines"]},{"Key":"your lines","Fragments":["more"]},{"Key":"lines more","Fragments":["space"]},{"Key":"more space","Fragments":["(120"]},{"Key":"space (120","Fragments":["characters"]},{"Key":"(120 characters","Fragments":["is"]},{"Key":"my limit","Fragments":["there)."]},{"Key":"limit there).","Fragments":["Your"]},{"Key":"there). Your","Fragments":["line"]},{"Key":"Your line","Fragments":["breaking"]},{"Key":"line breaking","Fragments":["even"]},{"Key":"breaking even","Fragments":["led"]},{"Key":"even led","Fragments":["you"]},{"Key":"led you","Fragments":["to"]},{"Key":"to inconsistent","Fragments":["style"]},{"Key":"inconsistent style","Fragments":["of"]},{"Key":"of closing","Fragments":["brackets.","parenthesis,","parens","brackets"]},{"Key":"Also there","Fragments":["is","are","are"]},{"Key":"much going","Fragments":["on"]},{"Key":"the `sing`","Fragments":["function.","function?"]},{"Key":"`sing` function.","Fragments":["Consider"]},{"Key":"function. Consider","Fragments":["breaking"]},{"Key":"Consider breaking","Fragments":["stuff"]},{"Key":"breaking stuff","Fragments":["out"]},{"Key":"stuff out","Fragments":["to"]},{"Key":"if `format`","Fragments":["wouldn't"]},{"Key":"`format` wouldn't","Fragments":["help"]},{"Key":"wouldn't help","Fragments":["improving"]},{"Key":"help improving","Fragments":["legibility"]},{"Key":"improving legibility","Fragments":["in"]},{"Key":"legibility in","Fragments":["`challenge`?"]},{"Key":"I admire","Fragments":["your"]},{"Key":"admire your","Fragments":["chutzpah."]},{"Key":"This adheres","Fragments":["the"]},{"Key":"adheres the","Fragments":["letter"]},{"Key":"the letter","Fragments":["of","(`%`)","counts"]},{"Key":"letter of","Fragments":["the","the"]},{"Key":"the law","Fragments":["but"]},{"Key":"law but","Fragments":["not"]},{"Key":"not its","Fragments":["spirit."]},{"Key":"create groupings","Fragments":["so"]},{"Key":"groupings so","Fragments":["that"]},{"Key":"a maintainer","Fragments":["could"]},{"Key":"maintainer could","Fragments":["see"]},{"Key":"that certain","Fragments":["*types*"]},{"Key":"certain *types*","Fragments":["of"]},{"Key":"*types* of","Fragments":["inputs"]},{"Key":"of inputs","Fragments":["have","would"]},{"Key":"inputs have","Fragments":["specific"]},{"Key":"have specific","Fragments":["outputs."]},{"Key":"find perusing","Fragments":["the"]},{"Key":"perusing the","Fragments":["Clojure"]},{"Key":"Clojure Cheatsheet","Fragments":["(http://clojure.org/cheatsheet)"]},{"Key":"Cheatsheet (http://clojure.org/cheatsheet)","Fragments":["very"]},{"Key":"(http://clojure.org/cheatsheet) very","Fragments":["useful."]},{"Key":"very useful.","Fragments":["You"]},{"Key":"useful. You","Fragments":["can"]},{"Key":"find all","Fragments":["sorts"]},{"Key":"all sorts","Fragments":["of"]},{"Key":"sorts of","Fragments":["useful","maps."]},{"Key":"of useful","Fragments":["built"]},{"Key":"useful built","Fragments":["in"]},{"Key":"built in","Fragments":["functions.","functions","function","functions.","function","function","function","string","clojure","`frequencies`","function"]},{"Key":" Specifically","Fragments":["the"]},{"Key":"Specifically the","Fragments":["clojure.string"]},{"Key":"clojure.string namespace","Fragments":["has","available.","you","to"]},{"Key":"namespace has","Fragments":["some","a","a"]},{"Key":"has some","Fragments":["interesting","tips","things","easy","undying","duplication,"]},{"Key":"some interesting","Fragments":["ones"]},{"Key":"interesting ones","Fragments":["-"]},{"Key":"ones -","Fragments":["and"]},{"Key":"could reduce","Fragments":["the","the","the","the","repetition"]},{"Key":"code you","Fragments":["need","have"]},{"Key":"Or maybe","Fragments":["just","it's","think"]},{"Key":"maybe just","Fragments":["use"]},{"Key":"use `frequencies`","Fragments":["merged","instead","rather","directly"]},{"Key":"`frequencies` merged","Fragments":["with"]},{"Key":"merged with","Fragments":["some"]},{"Key":"some base","Fragments":["map?"]},{"Key":"base map?","Fragments":[":)"]},{"Key":" Two","Fragments":["of","minor","small","very","ways","things","things,","(very)","questions:"]},{"Key":"Two of","Fragments":["the"]},{"Key":"are actions","Fragments":["while"]},{"Key":"actions while","Fragments":["`silent?`"]},{"Key":"while `silent?`","Fragments":["is"]},{"Key":"`silent?` is","Fragments":["an"]},{"Key":"an adjective.","Fragments":["It"]},{"Key":"adjective. It","Fragments":["would"]},{"Key":"names uniform.","Fragments":["Other"]},{"Key":"uniform. Other","Fragments":["than"]},{"Key":"that, this","Fragments":["looks","looks"]},{"Key":"the no-op","Fragments":["transcriptions,"]},{"Key":"no-op transcriptions,","Fragments":["but"]},{"Key":"transcriptions, but","Fragments":["had"]},{"Key":"but had","Fragments":["to","troubles"]},{"Key":"add `if","Fragments":["(nil?...`"]},{"Key":"`if (nil?...`","Fragments":["which"]},{"Key":"(nil?...` which","Fragments":["I"]},{"Key":"think makes","Fragments":["the"]},{"Key":"the `transcribe`","Fragments":["method","function,"]},{"Key":"`transcribe` method","Fragments":["much"]},{"Key":"method much","Fragments":["harder"]},{"Key":"read. Maybe","Fragments":["there's"]},{"Key":"Maybe there's","Fragments":["a"]},{"Key":"a cleaner","Fragments":["way","way","way","overall","overall"]},{"Key":"cleaner way","Fragments":["to","to","to"]},{"Key":"think transcribing","Fragments":["C-\u0026gt;C"]},{"Key":"transcribing C-\u0026gt;C","Fragments":["etc."]},{"Key":"C-\u0026gt;C etc.","Fragments":["is"]},{"Key":"etc. is","Fragments":["unnecessary"]},{"Key":"is unnecessary","Fragments":["and","-","because","-","-","-","in","and","-","-","duplication","in"]},{"Key":"unnecessary and","Fragments":["I","may"]},{"Key":"would remove","Fragments":["it;","the","the"]},{"Key":"remove it;","Fragments":["it"]},{"Key":"it; it","Fragments":["has"]},{"Key":"has possibility","Fragments":["for"]},{"Key":"possibility for","Fragments":["future"]},{"Key":" Attempt","Fragments":["to","to"]},{"Key":"Attempt to","Fragments":["public","ensure"]},{"Key":"to public","Fragments":["API"]},{"Key":"public API","Fragments":["at","that","at","non-public.","at","/","and"]},{"Key":"API at","Fragments":["top","the","the"]},{"Key":"at top","Fragments":["and"]},{"Key":"top and","Fragments":["make","any","flows","maybe"]},{"Key":"make everything","Fragments":["else"]},{"Key":"else private,","Fragments":["per"]},{"Key":"private, per","Fragments":["suggestion."]},{"Key":" `(update-in","Fragments":["db"]},{"Key":"`(update-in db","Fragments":["[score]"]},{"Key":"db [score]","Fragments":["(comp","(fn"]},{"Key":"[score] (comp","Fragments":["vec"]},{"Key":"(comp vec","Fragments":["conj)"]},{"Key":"vec conj)","Fragments":["name)`"]},{"Key":"Maybe there","Fragments":["is"]},{"Key":"regexp that","Fragments":["matches"]},{"Key":"that matches","Fragments":["all"]},{"Key":"matches all","Fragments":["alphanumerical"]},{"Key":"all alphanumerical","Fragments":["characters?"]},{"Key":" Version","Fragments":["1","4"]},{"Key":"Version 1","Fragments":["is"]},{"Key":"1 is","Fragments":["my"]},{"Key":"my attempt","Fragments":["without","at"]},{"Key":"attempt without","Fragments":["cheating,"]},{"Key":"without cheating,","Fragments":["version"]},{"Key":"cheating, version","Fragments":["2"]},{"Key":"version 2","Fragments":["is"]},{"Key":"2 is","Fragments":["after"]},{"Key":"is after","Fragments":["I"]},{"Key":"after I","Fragments":["looked","got","saw"]},{"Key":"the example.","Fragments":["Things"]},{"Key":"example. Things","Fragments":["I"]},{"Key":"Things I","Fragments":["learned:"]},{"Key":"* `defn-`","Fragments":["makes"]},{"Key":"`defn-` makes","Fragments":["a","not"]},{"Key":"* It","Fragments":["is","is"]},{"Key":"the suffix","Fragments":["`?`"]},{"Key":"suffix `?`","Fragments":["rather"]},{"Key":"`?` rather","Fragments":["than"]},{"Key":"the prefix","Fragments":["`is-`","`is`"]},{"Key":"* character","Fragments":["literals"]},{"Key":"character literals","Fragments":["are","instead","and","can","rather","provides","were","are"]},{"Key":"literals are","Fragments":["written","preceded"]},{"Key":"are written","Fragments":["as"]},{"Key":"* there","Fragments":["is"]},{"Key":"is such","Fragments":["a","a","a","if"]},{"Key":"a thing","Fragments":["as","or","with","that","to","from"]},{"Key":"thing as","Fragments":["`last`,","`silence?`."]},{"Key":"as `last`,","Fragments":["I"]},{"Key":"`last`, I","Fragments":["didn't"]},{"Key":"didn't find","Fragments":["it","how","it"]},{"Key":"I'd like","Fragments":["to","to","to","to","to","to","to"]},{"Key":"more elegant","Fragments":["Bob's","ways","solution.","way"]},{"Key":"elegant Bob's","Fragments":["I"]},{"Key":"Bob's I","Fragments":["saw"]},{"Key":"saw in","Fragments":["the"]},{"Key":"Javascript trail","Fragments":["that"]},{"Key":"trail that","Fragments":["had"]},{"Key":"that had","Fragments":["a","certain","broken"]},{"Key":"of functions","Fragments":["and","gets","around","that","from","and","and","which","and"]},{"Key":"and responses.","Fragments":["They"]},{"Key":"responses. They","Fragments":["called"]},{"Key":"They called","Fragments":["each"]},{"Key":"called each","Fragments":["function,"]},{"Key":"each function,","Fragments":["returning","which"]},{"Key":"function, returning","Fragments":["the"]},{"Key":"returning the","Fragments":["response","robot","plural.","value","\"frequencies","element","element","value","first.","result"]},{"Key":"the response","Fragments":["for","answers","answers","is","each","strings","strings,","to","strings"]},{"Key":"that evaluated","Fragments":["to"]},{"Key":"evaluated to","Fragments":["true."]},{"Key":"to true.","Fragments":["Maybe"]},{"Key":"true. Maybe","Fragments":["I'll"]},{"Key":"Maybe I'll","Fragments":["come"]},{"Key":"I'll come","Fragments":["back"]},{"Key":"Ah we","Fragments":["are"]},{"Key":"talking about","Fragments":["two","a","the","in","`update-in`?"]},{"Key":"about two","Fragments":["different"]},{"Key":"different opinions","Fragments":["of"]},{"Key":"opinions of","Fragments":["how"]},{"Key":"how code","Fragments":["should"]},{"Key":"code should","Fragments":["look.","be","follow."]},{"Key":"should look.","Fragments":["I"]},{"Key":"look. I","Fragments":["feel"]},{"Key":"the consumer","Fragments":["of"]},{"Key":"consumer of","Fragments":["code"]},{"Key":"code -","Fragments":["that","you","you","inside","I'm","which"]},{"Key":"- that","Fragments":["meaning","can","way","makes","way","ought","is,","cleans","what"]},{"Key":"that meaning","Fragments":["regular"]},{"Key":"meaning regular","Fragments":["expressions"]},{"Key":"expressions also.","Fragments":["All"]},{"Key":"also. All","Fragments":["I"]},{"Key":"All I","Fragments":["am"]},{"Key":"am saying","Fragments":["here"]},{"Key":"saying here","Fragments":["is"]},{"Key":"in short","Fragments":["examples","codes"]},{"Key":"short examples","Fragments":["like"]},{"Key":"examples like","Fragments":["this"]},{"Key":"say for","Fragments":["a"]},{"Key":"given pattern","Fragments":["here"]},{"Key":"pattern here","Fragments":["is"]},{"Key":"response answers","Fragments":["the","the"]},{"Key":"answers the","Fragments":["*what*,","why"]},{"Key":"the *what*,","Fragments":["but"]},{"Key":"*what*, but","Fragments":["not"]},{"Key":"the *why*.","Fragments":["You"]},{"Key":"*why*. You","Fragments":["can"]},{"Key":"can probably","Fragments":["infer","do","help"]},{"Key":"probably infer","Fragments":["the"]},{"Key":"infer the","Fragments":["*why*"]},{"Key":"the *why*","Fragments":["from","of"]},{"Key":"*why* from","Fragments":["the"]},{"Key":"rather communicate","Fragments":["as"]},{"Key":"communicate as","Fragments":["much"]},{"Key":"much intent","Fragments":["as"]},{"Key":"intent as","Fragments":["possible"]},{"Key":"possible with","Fragments":["future","an","every?"]},{"Key":"with future","Fragments":["readers"]},{"Key":"readers of","Fragments":["my","this"]},{"Key":"just map","Fragments":["over","over"]},{"Key":"strands with","Fragments":["`=`","simply","invalid"]},{"Key":"with `=`","Fragments":["(or"]},{"Key":"`=` (or","Fragments":["`not=`)?"]},{"Key":"My problem","Fragments":["with"]},{"Key":"with that","Fragments":["is","change.","let","there","approach.","if","name","I","but","-","didn't","type?","in","convention.","construction."]},{"Key":"the why","Fragments":["and"]},{"Key":"why and","Fragments":["instead"]},{"Key":"and instead","Fragments":["of","`:rename`","loops","apply"]},{"Key":"of exploding","Fragments":["out"]},{"Key":"exploding out","Fragments":["the"]},{"Key":"implementation which","Fragments":["in"]},{"Key":"which in","Fragments":["a","turn"]},{"Key":"a harder","Fragments":["problem","time"]},{"Key":"harder problem","Fragments":["would"]},{"Key":"problem would","Fragments":["inevitably"]},{"Key":"would inevitably","Fragments":["make"]},{"Key":"inevitably make","Fragments":["the"]},{"Key":"code harder","Fragments":["to"]},{"Key":"follow easier","Fragments":["to"]},{"Key":"read becomes","Fragments":["a"]},{"Key":"becomes a","Fragments":["problem,"]},{"Key":"a problem,","Fragments":["and"]},{"Key":"problem, and","Fragments":["even"]},{"Key":"and even","Fragments":["if","beneficial,"]},{"Key":"even if","Fragments":["that","it's","they","morally","test","you"]},{"Key":"if that","Fragments":["isn't","\"feels","logic","makes","is","is","is","was","means","means"]},{"Key":"case -","Fragments":["this"]},{"Key":"- this","Fragments":["is","and","allows","could","could","goes"]},{"Key":"a large","Fragments":["problem","number"]},{"Key":"large problem","Fragments":["so"]},{"Key":"problem so","Fragments":["why"]},{"Key":"so why","Fragments":["indeed?","not"]},{"Key":"Although this","Fragments":["is","can"]},{"Key":"simple problem,","Fragments":["I"]},{"Key":"problem, I","Fragments":["think","avoided","wanted","did"]},{"Key":"*why* of","Fragments":["the"]},{"Key":"response is","Fragments":["not"]},{"Key":"not communicated","Fragments":["to"]},{"Key":"communicated to","Fragments":["future"]},{"Key":"to future","Fragments":["readers"]},{"Key":"readers with","Fragments":["this"]},{"Key":"this implementation.","Fragments":["Even"]},{"Key":"implementation. Even","Fragments":["if"]},{"Key":"Even if","Fragments":["you","you","only"]},{"Key":"you stick","Fragments":["with"]},{"Key":"with regular","Fragments":["expressions,","expressions"]},{"Key":"regular expressions,","Fragments":["I"]},{"Key":"expressions, I","Fragments":["think"]},{"Key":"be given","Fragments":["names","to","names","names?"]},{"Key":"given names","Fragments":["(e.g.","in"]},{"Key":"names (e.g.","Fragments":["as"]},{"Key":"(e.g. as","Fragments":["private"]},{"Key":"idea is","Fragments":["to","great.","to","to","enough:"]},{"Key":"write a","Fragments":["function","function","macro","comment","map","regex","few","more","custom","macro"]},{"Key":"can examine","Fragments":["arbitrary"]},{"Key":"examine arbitrary","Fragments":["input"]},{"Key":"arbitrary input","Fragments":["and","that"]},{"Key":"input and","Fragments":["determine","return","output","output","return","output."]},{"Key":"and determine","Fragments":["how"]},{"Key":"determine how","Fragments":["to"]},{"Key":"Here's an","Fragments":["example:","example"]},{"Key":"very very","Fragments":["very","useful!"]},{"Key":"very useful!","Fragments":["Thanks!"]},{"Key":"can provide","Fragments":["a"]},{"Key":"provide a","Fragments":["default","slightly","custom"]},{"Key":"default value","Fragments":["for","instead","`{}`","for","is","is","so","with"]},{"Key":"for when","Fragments":["a"]},{"Key":"when a","Fragments":["hash"]},{"Key":"hash does","Fragments":["not"]},{"Key":"a value","Fragments":["at","to","which","so","in","is","when","is","is","on","if"]},{"Key":"value at","Fragments":["the","a"]},{"Key":"the key","Fragments":["you","is","is","is","is"]},{"Key":"key you","Fragments":["are","could"]},{"Key":" ({\\a","Fragments":["1","1"]},{"Key":"({\\a 1","Fragments":["\\b","\\b"]},{"Key":"1 \\b","Fragments":["2}","2}"]},{"Key":"\\b 2}","Fragments":["\\b","\\x"]},{"Key":"2} \\b","Fragments":["[])"]},{"Key":" ;;","Fragments":["2","[]","str/method","good","some","If","If","actual","=\u003e"]},{"Key":"2} \\x","Fragments":["[])"]},{"Key":"Yeah, both","Fragments":["suggestions"]},{"Key":"both suggestions","Fragments":["would"]},{"Key":"suggestions would","Fragments":["provide"]},{"Key":"would provide","Fragments":["better"]},{"Key":"provide better","Fragments":["readability."]},{"Key":"better readability.","Fragments":["That"]},{"Key":"readability. That","Fragments":["being"]},{"Key":"said there","Fragments":["are"]},{"Key":"are a","Fragments":["couple","couple","bit","bit","couple","lot","lot","couple","few","number","couple","bit","number","concise","couple","good","lot","little"]},{"Key":"of reasons","Fragments":["that"]},{"Key":"reasons that","Fragments":["I"]},{"Key":"went about","Fragments":["it"]},{"Key":"Since it","Fragments":["is"]},{"Key":"simple problem","Fragments":["there"]},{"Key":"problem there","Fragments":["is"]},{"Key":"no real","Fragments":["reason","need"]},{"Key":"real reason","Fragments":["to"]},{"Key":"break it","Fragments":["out","with","down"]},{"Key":"separate functions.","Fragments":["As","For","Defining","This","Then","I'm"]},{"Key":"functions. As","Fragments":["far"]},{"Key":"As far","Fragments":["as","as","as"]},{"Key":"expression goes,","Fragments":["I"]},{"Key":"goes, I","Fragments":["think"]},{"Key":"reads rather","Fragments":["nicely"]},{"Key":"rather nicely","Fragments":["to"]},{"Key":"nicely to","Fragments":["say"]},{"Key":"say -","Fragments":["when"]},{"Key":"- when","Fragments":["it","swapped"]},{"Key":"is this","Fragments":["pattern,","usual","cheating?","what"]},{"Key":"this pattern,","Fragments":["this"]},{"Key":"pattern, this","Fragments":["is"]},{"Key":"I respond.","Fragments":["That"]},{"Key":"respond. That","Fragments":["being"]},{"Key":"said ends","Fragments":["with"]},{"Key":"with ?","Fragments":["and","as"]},{"Key":"? and","Fragments":["value"]},{"Key":"and value","Fragments":["=="]},{"Key":"value ==","Fragments":["value.uppercase"]},{"Key":"== value.uppercase","Fragments":["could"]},{"Key":"value.uppercase could","Fragments":["be"]},{"Key":"used here.","Fragments":["I"]},{"Key":"didn't do","Fragments":["so","it"]},{"Key":"so for","Fragments":["consistency","sure"]},{"Key":"for consistency","Fragments":["sake."]},{"Key":"this that's","Fragments":["clearer"]},{"Key":"that's clearer","Fragments":["than"]},{"Key":"using regular","Fragments":["expressions?","expressions","expressions","expressions"]},{"Key":" `random-string-range`","Fragments":["in"]},{"Key":"`random-string-range` in","Fragments":["my"]},{"Key":"first submission","Fragments":["wasn't"]},{"Key":"submission wasn't","Fragments":["random"]},{"Key":"wasn't random","Fragments":["at"]},{"Key":"random at","Fragments":["all"]},{"Key":"Good :)","Fragments":["For"]},{"Key":"For future","Fragments":["reference,","reference:","reference"]},{"Key":"future reference,","Fragments":["if","when"]},{"Key":"reference, if","Fragments":["you"]},{"Key":"a partially","Fragments":["realized"]},{"Key":"partially realized","Fragments":["function"]},{"Key":"realized function","Fragments":["you"]},{"Key":"of partial","Fragments":["instead","application,"]},{"Key":"partial instead","Fragments":["of"]},{"Key":"of fn","Fragments":["literal,"]},{"Key":"fn literal,","Fragments":["like:"]},{"Key":" (partial","Fragments":["not="]},{"Key":"(partial not=","Fragments":["word)"]},{"Key":"feels cleaner","Fragments":["to","to"]},{"Key":"cleaner to","Fragments":["me","my","me"]},{"Key":"your comments.","Fragments":["I’m","They","I'm"]},{"Key":"comments. I’m","Fragments":["still"]},{"Key":"I’m still","Fragments":["confused"]},{"Key":"still confused","Fragments":["by"]},{"Key":"confused by","Fragments":["Clojure’s","the","tests"]},{"Key":"by Clojure’s","Fragments":["indentation"]},{"Key":"Clojure’s indentation","Fragments":["rules!"]},{"Key":"Also nice","Fragments":["tip"]},{"Key":"nice tip","Fragments":["about","from"]},{"Key":"tip about","Fragments":["`sort`,","a"]},{"Key":"about `sort`,","Fragments":["totally"]},{"Key":"`sort`, totally","Fragments":["missed"]},{"Key":"The problem","Fragments":["is","I","I","with","with"]},{"Key":"in how","Fragments":["threading"]},{"Key":"how threading","Fragments":["macro"]},{"Key":"macro manipulates","Fragments":["the"]},{"Key":"manipulates the","Fragments":["lists"]},{"Key":"the lists","Fragments":["which","and"]},{"Key":"lists which","Fragments":["are"]},{"Key":"which are","Fragments":["passed","the","designed","like","bound","explicitly","really","really"]},{"Key":"are passed","Fragments":["to","around"]},{"Key":"passed to","Fragments":["it.","higher-order","it.","it.","the","the","map","it","it","`reduce-kv`","the","filter"]},{"Key":"to it.","Fragments":["Keep","I","I"]},{"Key":"it. Keep","Fragments":["in"]},{"Key":"Keep in","Fragments":["mind,"]},{"Key":"mind, that","Fragments":["function"]},{"Key":"function literal,","Fragments":["as","you"]},{"Key":"literal, as","Fragments":["all"]},{"Key":"as all","Fragments":["other","I"]},{"Key":"all other","Fragments":["expressions"]},{"Key":"other expressions","Fragments":["passed,"]},{"Key":"expressions passed,","Fragments":["is"]},{"Key":"passed, is","Fragments":["not"]},{"Key":"not evaluated.","Fragments":["For"]},{"Key":"evaluated. For","Fragments":["clarification,"]},{"Key":"For clarification,","Fragments":["look"]},{"Key":"clarification, look","Fragments":["at"]},{"Key":"at example","Fragments":["REPL"]},{"Key":"example REPL","Fragments":["session"]},{"Key":"REPL session","Fragments":["below:","excerpt:"]},{"Key":"user=\u0026gt; (macroexpand-1","Fragments":["'(-\u0026gt;","'(-\u0026gt;"]},{"Key":"(macroexpand-1 '(-\u0026gt;","Fragments":["10","10"]},{"Key":"'(-\u0026gt; 10","Fragments":["#(inc","inc))"]},{"Key":"10 #(inc","Fragments":["%)))"]},{"Key":" (fn*","Fragments":["10"]},{"Key":"(fn* 10","Fragments":["[p1__4587#]"]},{"Key":"10 [p1__4587#]","Fragments":["(inc"]},{"Key":"[p1__4587#] (inc","Fragments":["p1__4587#))"]},{"Key":" (inc","Fragments":["10)"]},{"Key":"As you","Fragments":["see,","use","can","can"]},{"Key":"you see,","Fragments":["the"]},{"Key":"see, the","Fragments":["macro,"]},{"Key":"the macro,","Fragments":["as"]},{"Key":"macro, as","Fragments":["is"]},{"Key":"as is","Fragments":["declared","sensible"]},{"Key":"is declared","Fragments":["in"]},{"Key":"declared in","Fragments":["it's","the"]},{"Key":"it's documentation,","Fragments":["puts"]},{"Key":"documentation, puts","Fragments":["the"]},{"Key":"puts the","Fragments":["result"]},{"Key":"of evaluating","Fragments":["previous","what","all"]},{"Key":"evaluating previous","Fragments":["expression"]},{"Key":"previous expression","Fragments":["(primitive"]},{"Key":"expression (primitive","Fragments":["evaluates"]},{"Key":"(primitive evaluates","Fragments":["to"]},{"Key":"evaluates to","Fragments":["itself)","and","`true`.","an"]},{"Key":"to itself)","Fragments":["as"]},{"Key":"itself) as","Fragments":["a"]},{"Key":"a first","Fragments":["argument","clojure","step","step.","pass,","pass"]},{"Key":"argument (or","Fragments":["rather"]},{"Key":"(or rather","Fragments":["second","names"]},{"Key":"rather second","Fragments":["element"]},{"Key":"second element","Fragments":["in"]},{"Key":"element in","Fragments":["list","`candidates`.","a"]},{"Key":"in list","Fragments":["in","comprehensions"]},{"Key":"that case)","Fragments":["-"]},{"Key":"case) -","Fragments":["which","that"]},{"Key":"which leads","Fragments":["to","to"]},{"Key":"to invalid","Fragments":["construct."]},{"Key":"good. Additionally,","Fragments":["by"]},{"Key":"Additionally, by","Fragments":["swapping"]},{"Key":"past assignemnts,","Fragments":["you","you"]},{"Key":"assignemnts, you","Fragments":["can","can"]},{"Key":"program much","Fragments":["more","more","more","more","more"]},{"Key":"Formatting `anagrams-for`","Fragments":["is"]},{"Key":"off. Bindings","Fragments":["should"]},{"Key":"Bindings should","Fragments":["begin"]},{"Key":"begin in","Fragments":["the"]},{"Key":"as opening","Fragments":["square"]},{"Key":"bracket and","Fragments":["end"]},{"Key":"with closing","Fragments":["square"]},{"Key":"closing square","Fragments":["bracket."]},{"Key":"square bracket.","Fragments":["Body"]},{"Key":"bracket. Body","Fragments":["of"]},{"Key":"Body of","Fragments":["let"]},{"Key":"of let","Fragments":["should","to"]},{"Key":"let should","Fragments":["be"]},{"Key":"two spaces.","Fragments":["For"]},{"Key":"spaces. For","Fragments":["more"]},{"Key":"For more","Fragments":["info","on"]},{"Key":"more info","Fragments":["please"]},{"Key":"info please","Fragments":["consult"]},{"Key":"please consult","Fragments":["the"]},{"Key":"guide maintained","Fragments":["by","by"]},{"Key":"maintained by","Fragments":["the","community:"]},{"Key":"the community:","Fragments":["https://github.com/bbatsov/clojure-style-guide"]},{"Key":"good! What","Fragments":["would"]},{"Key":"you trade","Fragments":["off"]},{"Key":"trade off","Fragments":["if","with","is"]},{"Key":"off if","Fragments":["you"]},{"Key":"you extracted","Fragments":["your"]},{"Key":"extracted your","Fragments":["`cond`"]},{"Key":"your `cond`","Fragments":["predicates","is","statement.","only","(they're"]},{"Key":"`cond` predicates","Fragments":["into","into"]},{"Key":"into helper","Fragments":["functions?"]},{"Key":"write the","Fragments":["first","opposite:","function","code.","verification","parameters","`pow`","whole","bizarro-world"]},{"Key":"first part","Fragments":["of"]},{"Key":"of `sing`","Fragments":["like","is"]},{"Key":"`sing` like","Fragments":["below,"]},{"Key":"like below,","Fragments":["but"]},{"Key":"below, but","Fragments":["failed:"]},{"Key":" (range","Fragments":["hi"]},{"Key":"(range hi","Fragments":["(dec"]},{"Key":"hi (dec","Fragments":["lo)"]},{"Key":"(dec lo)","Fragments":["-1)"]},{"Key":" (map","Fragments":["verse)","str)","convert)","str","convert","not=","not=","(fn","clojure.string/lower-case","verse)","#(hash-map","#(mod","transcribe)"]},{"Key":" #(interleave","Fragments":["%"]},{"Key":"#(interleave %","Fragments":["(repeat"]},{"Key":"% (repeat","Fragments":["\"\\n\"))"]},{"Key":"Are function","Fragments":["literals"]},{"Key":"function literals","Fragments":["not","could","really"]},{"Key":"literals not","Fragments":["allowed"]},{"Key":"not allowed","Fragments":["in"]},{"Key":"allowed in","Fragments":["-\u0026gt;"]},{"Key":"in -\u0026gt;","Fragments":["macro?"]},{"Key":" Naming","Fragments":["(cform","things","things"]},{"Key":"Naming (cform","Fragments":["vs"]},{"Key":"(cform vs","Fragments":["[word1"]},{"Key":"vs [word1","Fragments":["word2]"]},{"Key":"[word1 word2]","Fragments":["in"]},{"Key":"word2] in","Fragments":["is-anagram?)"]},{"Key":"in is-anagram?)","Fragments":["is"]},{"Key":"is-anagram?) is","Fragments":["a"]},{"Key":"confusing -","Fragments":["at"]},{"Key":"- at","Fragments":["least","least","least","least","least"]},{"Key":"least to","Fragments":["me.","me)."]},{"Key":"me. By","Fragments":["swapping"]},{"Key":"By swapping","Fragments":["`sort`","`sort`"]},{"Key":"your program","Fragments":["much","to"]},{"Key":"use `%`","Fragments":["for"]},{"Key":"`%` for","Fragments":["first"]},{"Key":"argument when","Fragments":["using"]},{"Key":"using function","Fragments":["reader"]},{"Key":"function reader","Fragments":["macro.","macros"]},{"Key":"reader macro.","Fragments":["Also,","Anyway"]},{"Key":"macro. Also,","Fragments":["by"]},{"Key":"Also, by","Fragments":["swapping"]},{"Key":"past assigments","Fragments":["you"]},{"Key":"assigments you","Fragments":["can"]},{"Key":"make program","Fragments":["much","more","more"]},{"Key":"at https://github.com/vim-scripts/VimClojure","Fragments":["if"]},{"Key":"https://github.com/vim-scripts/VimClojure if","Fragments":["you"]},{"Key":" Beyond","Fragments":["fiddling","fiddling","that,"]},{"Key":"Beyond fiddling","Fragments":["in","in","directly"]},{"Key":"fiddling in","Fragments":["the","REPL"]},{"Key":"the REPL,","Fragments":["please","any"]},{"Key":"REPL, please","Fragments":["put"]},{"Key":"put use/require","Fragments":["inside","inside"]},{"Key":"use/require inside","Fragments":["`ns`","`ns`"]},{"Key":"macro. Anyway","Fragments":["`use`","no"]},{"Key":"Anyway `use`","Fragments":["is"]},{"Key":"is deprecated","Fragments":["-","in"]},{"Key":"deprecated -","Fragments":["use","use"]},{"Key":"- use","Fragments":["`require`","`require`"]},{"Key":"`require` instead.","Fragments":["For","You"]},{"Key":"instead. For","Fragments":["example:"]},{"Key":" is","Fragments":["equivalent","it","using","around"]},{"Key":"is equivalent","Fragments":["of","to","to","to","to","to"]},{"Key":"you current","Fragments":["`use`."]},{"Key":"to spread","Fragments":["long"]},{"Key":"spread long","Fragments":["strings"]},{"Key":"long strings","Fragments":["across"]},{"Key":"strings across","Fragments":["multiple"]},{"Key":"across multiple","Fragments":["lines."]},{"Key":"readability -","Fragments":["think","still,"]},{"Key":"- think","Fragments":["about","about"]},{"Key":"about hiding","Fragments":["function"]},{"Key":"hiding function","Fragments":["calls"]},{"Key":"calls behind","Fragments":["bindings"]},{"Key":"behind bindings","Fragments":["with"]},{"Key":"that flow","Fragments":["more"]},{"Key":"flow more","Fragments":["naturally","naturally"]},{"Key":"more naturally","Fragments":["in","with","to","with"]},{"Key":"naturally in","Fragments":["the"]},{"Key":"surrounding string","Fragments":["literals.","literals."]},{"Key":"string literals.","Fragments":["You","For","It","Also,"]},{"Key":"literals. You","Fragments":["can"]},{"Key":"can put","Fragments":["those"]},{"Key":"put those","Fragments":["bindings"]},{"Key":"those bindings","Fragments":["in"]},{"Key":"bindings in","Fragments":["the","enclosing"]},{"Key":"the narrowest","Fragments":["scope"]},{"Key":"narrowest scope","Fragments":["possible","possible"]},{"Key":"scope possible","Fragments":["(for","(in"]},{"Key":"possible (for","Fragments":["example"]},{"Key":"(for example","Fragments":["surrounding","Cyrillic)"]},{"Key":"example surrounding","Fragments":["`let`)."]},{"Key":"good. Generally,","Fragments":["two"]},{"Key":"Generally, two","Fragments":["spaces"]},{"Key":"two spaces","Fragments":["are","are","and"]},{"Key":"are standard","Fragments":["indent","-"]},{"Key":"standard indent","Fragments":["for"]},{"Key":"indent for","Fragments":["clojure"]},{"Key":"(and some","Fragments":["other"]},{"Key":"other lisps","Fragments":["that"]},{"Key":"lisps that","Fragments":["I'm"]},{"Key":"I'm aware","Fragments":["of)","of","of","that","of","that"]},{"Key":"aware of)","Fragments":["but"]},{"Key":"of) but","Fragments":["that's"]},{"Key":"that terribly","Fragments":["important."]},{"Key":"terribly important.","Fragments":["You"]},{"Key":"important. You","Fragments":["may"]},{"Key":"guide compiled","Fragments":["by"]},{"Key":"compiled by","Fragments":["community:"]},{"Key":"by community:","Fragments":["https://github.com/bbatsov/clojure-style-guide","https://github.com/bbatsov/clojure-style-guide"]},{"Key":"There handy","Fragments":["functions"]},{"Key":"handy functions","Fragments":["for"]},{"Key":"for incrementing","Fragments":["and"]},{"Key":"incrementing and","Fragments":["decrementing"]},{"Key":"and decrementing","Fragments":["values"]},{"Key":"decrementing values","Fragments":["by"]},{"Key":"values by","Fragments":["one:"]},{"Key":"by one:","Fragments":["`inc`"]},{"Key":"one: `inc`","Fragments":["and"]},{"Key":" Going","Fragments":["back"]},{"Key":"Going back","Fragments":["to"]},{"Key":"to naming","Fragments":["-"]},{"Key":"naming -","Fragments":["what","lowercase,"]},{"Key":"- what","Fragments":["I","would","do","it","is"]},{"Key":"literals. For","Fragments":["example"]},{"Key":"could bind","Fragments":["inflection"]},{"Key":"bind inflection","Fragments":["of"]},{"Key":"inflection of","Fragments":["bottles"]},{"Key":"of bottles","Fragments":["(`count-string`"]},{"Key":"bottles (`count-string`","Fragments":["usage"]},{"Key":"(`count-string` usage","Fragments":["in"]},{"Key":"usage in","Fragments":["your"]},{"Key":"your case)","Fragments":["to","it"]},{"Key":"case) to","Fragments":["a"]},{"Key":"like `n-bottles`.","Fragments":["Then"]},{"Key":"`n-bottles`. Then","Fragments":["first"]},{"Key":"Then first","Fragments":["strophe"]},{"Key":"first strophe","Fragments":["would"]},{"Key":"strophe would","Fragments":["flow"]},{"Key":"flow like","Fragments":["`(str"]},{"Key":"like `(str","Fragments":["(capitalize","n-bottles"]},{"Key":"`(str (capitalize","Fragments":["n-bottles)"]},{"Key":"(capitalize n-bottles)","Fragments":["\""]},{"Key":"n-bottles) \"","Fragments":["of"]},{"Key":"\" of","Fragments":["beer","beer.\")`.","beer","beer\"","beer\"))"]},{"Key":"of beer","Fragments":["on","on","permutations","on"]},{"Key":"beer on","Fragments":["the","the","the","the"]},{"Key":"the wall,","Fragments":["\"","\""]},{"Key":"wall, \"","Fragments":["n-bottles","n-bottles"]},{"Key":"\" n-bottles","Fragments":["\"","\""]},{"Key":"n-bottles \"","Fragments":["of","of","of"]},{"Key":"of beer.\")`.","Fragments":["Of"]},{"Key":"beer.\")`. Of","Fragments":["course,"]},{"Key":"Of course,","Fragments":["in","the"]},{"Key":"course, in","Fragments":["the"]},{"Key":"end, it","Fragments":["goes"]},{"Key":"it goes","Fragments":["into"]},{"Key":"goes into","Fragments":["the"]},{"Key":"the terriority","Fragments":["of"]},{"Key":"terriority of","Fragments":["personal"]},{"Key":"preference but","Fragments":["in","in","I"]},{"Key":"opinion this","Fragments":["is"]},{"Key":"again, @amparo.","Fragments":["Can"]},{"Key":"@amparo. Can","Fragments":["I"]},{"Key":"some clarification","Fragments":["around"]},{"Key":"clarification around","Fragments":["\"root"]},{"Key":"around \"root","Fragments":["bound"]},{"Key":"\"root bound","Fragments":["constant\"?"]},{"Key":"bound constant\"?","Fragments":["Something"]},{"Key":"constant\"? Something","Fragments":["like"]},{"Key":"like `(def","Fragments":["*dna-to-rna*","silence?"]},{"Key":"`(def *dna-to-rna*","Fragments":["{\\A"]},{"Key":"*dna-to-rna* {\\A","Fragments":["\\A"]},{"Key":"{\\A \\A","Fragments":["\\C","\\T"]},{"Key":"\\A \\C","Fragments":["\\C","\\G}"]},{"Key":"\\C \\C","Fragments":["\\G","\\G"]},{"Key":"\\C \\G","Fragments":["\\G","\\T}","\\T}","\\G}","\\U)))"]},{"Key":"\\G \\G","Fragments":["\\T"]},{"Key":"\\G \\T","Fragments":["\\U})`?","\\A})))","\\A}"]},{"Key":"\\T \\U})`?","Fragments":["What"]},{"Key":"\\U})`? What","Fragments":["is"]},{"Key":" Compiler","Fragments":["probably"]},{"Key":"Compiler probably","Fragments":["compensates"]},{"Key":"probably compensates","Fragments":["for"]},{"Key":"compensates for","Fragments":["that"]},{"Key":"better for","Fragments":["readability","readability","the","readability","me"]},{"Key":"put mapping","Fragments":["under"]},{"Key":"mapping under","Fragments":["root"]},{"Key":"under root","Fragments":["bound"]},{"Key":"root bound","Fragments":["constant"]},{"Key":" When","Fragments":["building","you","I","using","I","you","there","you're","your","you're"]},{"Key":"When building","Fragments":["strings,"]},{"Key":"building strings,","Fragments":["you"]},{"Key":"strings, you","Fragments":["don't"]},{"Key":"to `str/join`.","Fragments":["Just"]},{"Key":"`str/join`. Just","Fragments":["use"]},{"Key":"Just use","Fragments":["`(str"]},{"Key":"use `(str","Fragments":["...)`"]},{"Key":"`(str ...)`","Fragments":["without"]},{"Key":"...)` without","Fragments":["surrounding"]},{"Key":"without surrounding","Fragments":["parts"]},{"Key":"surrounding parts","Fragments":["with"]},{"Key":"parts with","Fragments":["vector.","`frequencies`?"]},{"Key":"with vector.","Fragments":["Think"]},{"Key":"vector. Think","Fragments":["about"]},{"Key":"creating more","Fragments":["meaningful"]},{"Key":"for bindings","Fragments":["interleaved"]},{"Key":"bindings interleaved","Fragments":["with"]},{"Key":"interleaved with","Fragments":["string","strings.","string"]},{"Key":"put them","Fragments":["in"]},{"Key":"in narrowest","Fragments":["scope"]},{"Key":"possible (in","Fragments":["surrouding"]},{"Key":"(in surrouding","Fragments":["`(let"]},{"Key":"surrouding `(let","Fragments":["..)`"]},{"Key":"`(let ..)`","Fragments":["for"]},{"Key":"..)` for","Fragments":["example)."]},{"Key":" `ns`","Fragments":["macro"]},{"Key":"macro formatting","Fragments":["in"]},{"Key":"your previous","Fragments":["assignments","assignment.","submission,","iteration","iterations"]},{"Key":"previous assignments","Fragments":["was"]},{"Key":"assignments was","Fragments":["better"]},{"Key":"was better","Fragments":["(don't"]},{"Key":"better (don't","Fragments":["put"]},{"Key":"(don't put","Fragments":["everything"]},{"Key":"put everything","Fragments":["in"]},{"Key":"single line).","Fragments":["By"]},{"Key":"line). By","Fragments":["swapping"]},{"Key":"assignments, you'll","Fragments":["make"]},{"Key":"you'll make","Fragments":["the"]},{"Key":"No parentheses","Fragments":["needed"]},{"Key":"parentheses needed","Fragments":["for"]},{"Key":"needed for","Fragments":["single"]},{"Key":"for single","Fragments":["argument"]},{"Key":"single argument","Fragments":["functions","being"]},{"Key":"argument functions","Fragments":["in"]},{"Key":"threading macro.","Fragments":["In","I"]},{"Key":"macro. In","Fragments":["case","order"]},{"Key":"In case","Fragments":["of","of","of","of","of"]},{"Key":"of threading","Fragments":["macros","macros,","macro).","form","macros"]},{"Key":"macros it's","Fragments":["generally"]},{"Key":"generally better","Fragments":["to"]},{"Key":"to format","Fragments":["expressions","that"]},{"Key":"format expressions","Fragments":["in"]},{"Key":"in next","Fragments":["lines","iteration.","iteration.","iteration.","iterations."]},{"Key":"next lines","Fragments":["aligned"]},{"Key":"lines aligned","Fragments":["to"]},{"Key":" ```digest```","Fragments":["does"]},{"Key":"```digest``` does","Fragments":["not"]},{"Key":"really decrease","Fragments":["the"]},{"Key":"decrease the","Fragments":["length"]},{"Key":"of string,","Fragments":["but"]},{"Key":"could not","Fragments":["think","use","find"]},{"Key":"name, since","Fragments":["it","`(bob/only-numbers?"]},{"Key":"works like","Fragments":["a"]},{"Key":"Smart approach.","Fragments":["Alternatively,"]},{"Key":"approach. Alternatively,","Fragments":["you"]},{"Key":"that came","Fragments":["up","to"]},{"Key":"up already","Fragments":["in"]},{"Key":"already in","Fragments":["past","the"]},{"Key":"I returned","Fragments":["the"]},{"Key":"returned the","Fragments":["parts"]},{"Key":"the verse","Fragments":["that","function","due"]},{"Key":"verse that","Fragments":["changed"]},{"Key":"that changed","Fragments":["from"]},{"Key":"changed from","Fragments":["a",":use"]},{"Key":"a verse-components","Fragments":["function"]},{"Key":"verse-components function","Fragments":["and"]},{"Key":"then constructed","Fragments":["a"]},{"Key":"constructed a","Fragments":["string"]},{"Key":"string using","Fragments":["them;"]},{"Key":"using them;","Fragments":["it"]},{"Key":"them; it","Fragments":["wasn't"]},{"Key":"it wasn't","Fragments":["*too*","actually","wasted","encouraged"]},{"Key":"wasn't *too*","Fragments":["ugly."]},{"Key":"*too* ugly.","Fragments":["Certainly"]},{"Key":"ugly. Certainly","Fragments":["I"]},{"Key":"Certainly I","Fragments":["don't"]},{"Key":"don't much","Fragments":["like"]},{"Key":"the solutions","Fragments":["that","that","that"]},{"Key":"solutions that","Fragments":["have,","use","have"]},{"Key":"that have,","Fragments":["e.g."]},{"Key":"have, e.g.","Fragments":["a"]},{"Key":"e.g. a","Fragments":["separate"]},{"Key":"for choosing","Fragments":["between"]},{"Key":"choosing between","Fragments":["\"one\""]},{"Key":"between \"one\"","Fragments":["or"]},{"Key":"\"one\" or","Fragments":["\"it\"."]},{"Key":"use threading","Fragments":["macro","macro"]},{"Key":"macro `-\u0026gt;\u0026gt;`","Fragments":["to"]},{"Key":"`-\u0026gt;\u0026gt;` to","Fragments":["maintain"]},{"Key":"maintain readability","Fragments":["while"]},{"Key":"readability while","Fragments":["at"]},{"Key":"while at","Fragments":["the"]},{"Key":"same time","Fragments":["keeping"]},{"Key":"time keeping","Fragments":["everything"]},{"Key":"keeping everything","Fragments":["in"]},{"Key":" Changed","Fragments":["the","it"]},{"Key":"Changed the","Fragments":["functions"]},{"Key":"idiomatic with","Fragments":["?","map/filter"]},{"Key":"? as","Fragments":["suggested"]},{"Key":"as suggested","Fragments":["earlier","by","to","by"]},{"Key":"suggested earlier","Fragments":["and"]},{"Key":"earlier and","Fragments":["changed"]},{"Key":"and changed","Fragments":["the","L9","the","`create`"]},{"Key":"changed the","Fragments":["shouting","the","function","parameter","`ns`","test","code.","`valid-triangle?`","regex","test","regex.","code","definition","order"]},{"Key":"shouting to","Fragments":["see","the"]},{"Key":"if it's","Fragments":["silence","sad","more","missing.","default","longer)","clearer.","different","not","being","a","in","invalid.","idiomatic","kosher","nil"]},{"Key":"it's silence","Fragments":["as"]},{"Key":"silence as","Fragments":["well"]},{"Key":"well since","Fragments":["it"]},{"Key":"was too","Fragments":["dependant","long","vague"]},{"Key":"too dependant","Fragments":["on"]},{"Key":"dependant on","Fragments":["the"]},{"Key":"order in","Fragments":["the","my","the","the","which","`response-for`"]},{"Key":" Making","Fragments":["it","the","hasAlphabetic?"]},{"Key":"Making it","Fragments":["DRYer"]},{"Key":"it DRYer","Fragments":["in"]},{"Key":"DRYer in","Fragments":["this"]},{"Key":"case would","Fragments":["require","be"]},{"Key":"would require","Fragments":["more","extending"]},{"Key":"require more","Fragments":["logic"]},{"Key":"more logic","Fragments":["and"]},{"Key":"logic and","Fragments":["make","structure"]},{"Key":"code less","Fragments":["human","lines"]},{"Key":"less human","Fragments":["readable."]},{"Key":" We","Fragments":["could","still","can"]},{"Key":"We could","Fragments":["create","even"]},{"Key":"create functions","Fragments":["that"]},{"Key":"return the","Fragments":["bottles","action","length","appropriate","first","first","strings","right","normalized","\"comparable\"","char","empty/nil","same","first","function","map."]},{"Key":"the bottles","Fragments":["and","of"]},{"Key":"bottles and","Fragments":["then"]},{"Key":"then a","Fragments":["function"]},{"Key":"the action","Fragments":["to"]},{"Key":"action to","Fragments":["do"]},{"Key":"do -","Fragments":["but"]},{"Key":"be copying","Fragments":["the"]},{"Key":"copying the","Fragments":["logic"]},{"Key":"of cond","Fragments":["in","in"]},{"Key":"cond in","Fragments":["both","second-couplet,","is-anagram"]},{"Key":"in both","Fragments":["those","cases"]},{"Key":"both those","Fragments":["methods."]},{"Key":"too easy","Fragments":["in"]},{"Key":"easy in","Fragments":["Clojure!"]},{"Key":"in Clojure!","Fragments":[":)"]},{"Key":"`get` in","Fragments":["`grade`,","`count-nucleotides`","`grade`"]},{"Key":"in `grade`,","Fragments":["using"]},{"Key":"`grade`, using","Fragments":["the"]},{"Key":"the map","Fragments":["as","as","of","with","as","to","to","altogether.","as","to","of","data","function—take","at","to","doesn't","as"]},{"Key":"map as","Fragments":["a","a","a","suggested","a","the","a","a","a"]},{"Key":"function works","Fragments":["the"]},{"Key":"works the","Fragments":["same","way"]},{"Key":"in REPL","Fragments":["it's","with"]},{"Key":"REPL it's","Fragments":["good"]},{"Key":"it's good","Fragments":["to","practice","to"]},{"Key":"macro. You","Fragments":["can"]},{"Key":"use most","Fragments":["special"]},{"Key":"most special","Fragments":["characters"]},{"Key":"special characters","Fragments":["in","you","from","that"]},{"Key":"in names,","Fragments":["`?`","like","like"]},{"Key":"names, `?`","Fragments":["indluded."]},{"Key":"`?` indluded.","Fragments":["Ah,"]},{"Key":"indluded. Ah,","Fragments":["and"]},{"Key":"and `use`","Fragments":["is"]},{"Key":"generally deprecated","Fragments":["-"]},{"Key":"instead. You","Fragments":["can"]},{"Key":"can achieve","Fragments":["the"]},{"Key":"same effect","Fragments":["as","as"]},{"Key":"effect as","Fragments":["with","your"]},{"Key":"with use","Fragments":["by"]},{"Key":"use by","Fragments":["writing"]},{"Key":"by writing","Fragments":["it","transpose"]},{"Key":"writing it","Fragments":["like","myself."]},{"Key":"[clojure.string refer","Fragments":["(trim"]},{"Key":"refer (trim","Fragments":["upper-case)]))"]},{"Key":"the `vec`","Fragments":["is","was"]},{"Key":"`vec` is","Fragments":["necessary,","unnecessary"]},{"Key":"necessary, otherwise","Fragments":["if"]},{"Key":"otherwise if","Fragments":["there"]},{"Key":"no matches","Fragments":["in","are"]},{"Key":"matches in","Fragments":["`candidates`"]},{"Key":"in `candidates`","Fragments":["it"]},{"Key":"`candidates` it","Fragments":["will"]},{"Key":"return `nil`","Fragments":["instead","if","if","by"]},{"Key":"`nil` instead","Fragments":["of","of"]},{"Key":"an empty","Fragments":["vector.","string.","map)","input","string","string","`AssertionError`","vector","string,"]},{"Key":"empty vector.","Fragments":["Will"]},{"Key":"vector. Will","Fragments":["look"]},{"Key":"Will look","Fragments":["into"]},{"Key":"threading macro,","Fragments":["though.","[`-\u003e\u003e`](http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E),"]},{"Key":"good. In","Fragments":["future","`sort-grade`"]},{"Key":"In future","Fragments":["you","consider"]},{"Key":"future you","Fragments":["can"]},{"Key":"can consider","Fragments":["if"]},{"Key":"consider if","Fragments":["all","all","those"]},{"Key":"public API.","Fragments":["Also,","It"]},{"Key":"API. Also,","Fragments":["generally"]},{"Key":"generally it's","Fragments":["better","more"]},{"Key":"if function","Fragments":["body"]},{"Key":"body in","Fragments":["`defn`"]},{"Key":"in `defn`","Fragments":["is"]},{"Key":"`defn` is","Fragments":["on","just"]},{"Key":"is on","Fragments":["its","its","the","one"]},{"Key":" Even","Fragments":["though","with","when","if"]},{"Key":"though the","Fragments":["solution","test","Java","let","tests"]},{"Key":"the solution","Fragments":["is","a","(something","more","to","was","this","using","seems","`last`.","could","is","looks","well","rather","more","the","quite","might","might","look"]},{"Key":"is smart","Fragments":["and","enough"]},{"Key":"smart and","Fragments":["succint,"]},{"Key":"and succint,","Fragments":["it's"]},{"Key":"succint, it's","Fragments":["hard"]},{"Key":"it's hard","Fragments":["to","to","to"]},{"Key":"to decipher","Fragments":["at","it","why","the","the"]},{"Key":"decipher at","Fragments":["first"]},{"Key":"first even","Fragments":["for"]},{"Key":"even for","Fragments":["somebody","an","something"]},{"Key":"for somebody","Fragments":["moderately"]},{"Key":"somebody moderately","Fragments":["fluent"]},{"Key":"moderately fluent","Fragments":["in"]},{"Key":"fluent in","Fragments":["clojure."]},{"Key":"clojure. Outermost","Fragments":["`vec`"]},{"Key":"Outermost `vec`","Fragments":["is"]},{"Key":"unnecessary -","Fragments":["lists","a","a","you","string","the"]},{"Key":"- lists","Fragments":["and"]},{"Key":"lists and","Fragments":["vectors","return"]},{"Key":"equal. Threading","Fragments":["macro"]},{"Key":"Threading macro","Fragments":["`-\u0026gt;`"]},{"Key":"macro `-\u0026gt;`","Fragments":["may"]},{"Key":"`-\u0026gt;` may","Fragments":["improve"]},{"Key":"may improve","Fragments":["readability"]},{"Key":"improve readability","Fragments":["a","enough","a"]},{"Key":"Formatting in","Fragments":["`anagram-for?`"]},{"Key":"in `anagram-for?`","Fragments":["is"]},{"Key":"`anagram-for?` is","Fragments":["a"]},{"Key":"bit too","Fragments":["spread","much","clever","clever","literal"]},{"Key":"too spread","Fragments":["verically"]},{"Key":"spread verically","Fragments":["-"]},{"Key":"verically -","Fragments":["`=`"]},{"Key":"- `=`","Fragments":["should"]},{"Key":"`=` should","Fragments":["be"]},{"Key":" Optionally,","Fragments":["to"]},{"Key":"Optionally, to","Fragments":["avoid"]},{"Key":"avoid a","Fragments":["bit","dependency"]},{"Key":"bit noisy","Fragments":["function"]},{"Key":"noisy function","Fragments":["literal,"]},{"Key":"literal, you","Fragments":["can"]},{"Key":"`partial` in","Fragments":["`anagrams-for`.","the"]},{"Key":"in `anagrams-for`.","Fragments":["But"]},{"Key":"`anagrams-for`. But","Fragments":["that's"]},{"Key":"that's clearly","Fragments":["a"]},{"Key":"clearly a","Fragments":["matter","language"]},{"Key":"The exercism","Fragments":["assignments"]},{"Key":"exercism assignments","Fragments":["are"]},{"Key":"assignments are","Fragments":["the"]},{"Key":"only pieces","Fragments":["of"]},{"Key":"pieces of","Fragments":["Clojure","code","the"]},{"Key":"code I've","Fragments":["ever","seen","read,","just","seen","written"]},{"Key":"ever written.","Fragments":[":)","So"]},{"Key":" `clojure.string/join`","Fragments":["is","can"]},{"Key":"`clojure.string/join` is","Fragments":["fine"]},{"Key":"is fine","Fragments":["but","for","in","in"]},{"Key":"fine but","Fragments":["the"]},{"Key":"process to","Fragments":["put","be","put"]},{"Key":"put lines","Fragments":["and"]},{"Key":"lines and","Fragments":["verses","verses?","verses"]},{"Key":"and verses","Fragments":["together","are"]},{"Key":"verses together","Fragments":["is"]},{"Key":"together is","Fragments":["actually"]},{"Key":"the same,","Fragments":["it's","it's"]},{"Key":"same, it's","Fragments":["something","not"]},{"Key":"it's something","Fragments":["like:","more"]},{"Key":"something like:","Fragments":["glue"]},{"Key":"like: glue","Fragments":["parts"]},{"Key":"glue parts","Fragments":["together"]},{"Key":"parts together","Fragments":["with"]},{"Key":"with `\\n`","Fragments":["in"]},{"Key":"`\\n` in","Fragments":["between"]},{"Key":"in between","Fragments":["and","those","those"]},{"Key":"between and","Fragments":["append"]},{"Key":"append another","Fragments":["`\\n`","one"]},{"Key":"another `\\n`","Fragments":["at"]},{"Key":"`\\n` at","Fragments":["the"]},{"Key":"the end.","Fragments":["So","You","Have","If"]},{"Key":"end. So","Fragments":["this"]},{"Key":"So this","Fragments":["process","was"]},{"Key":"this process","Fragments":["can"]},{"Key":"process can","Fragments":["be"]},{"Key":"be nicely","Fragments":["abstracted"]},{"Key":"nicely abstracted","Fragments":["into"]},{"Key":"abstracted into","Fragments":["a"]},{"Key":"as building","Fragments":["the"]},{"Key":"the sentences","Fragments":["goes,"]},{"Key":"sentences goes,","Fragments":["you"]},{"Key":"goes, you","Fragments":["may"]},{"Key":"the [format](http://clojuredocs.org/clojure_core/clojure.core/format)","Fragments":["function."]},{"Key":"The string","Fragments":["concatenation","operation","accumulator"]},{"Key":"string concatenation","Fragments":["does","going"]},{"Key":"concatenation does","Fragments":["drive"]},{"Key":"does drive","Fragments":["me"]},{"Key":"drive me","Fragments":["a"]},{"Key":"bit crazy.","Fragments":["I'm"]},{"Key":"crazy. I'm","Fragments":["still"]},{"Key":"so is","Fragments":["there","this"]},{"Key":"that you're","Fragments":["trying","calling","calling","NOT","attempting","making"]},{"Key":"you're trying","Fragments":["to","do","for.","to"]},{"Key":"push me","Fragments":["toward"]},{"Key":"me toward","Fragments":["or"]},{"Key":"toward or","Fragments":["are"]},{"Key":"or are","Fragments":["you"]},{"Key":"you suggesting","Fragments":["a"]},{"Key":"suggesting a","Fragments":["larger"]},{"Key":"larger refactoring","Fragments":["of"]},{"Key":"refactoring of","Fragments":["the"]},{"Key":"is putting","Fragments":["together"]},{"Key":"putting together","Fragments":["lines"]},{"Key":"together lines","Fragments":["and"]},{"Key":"That -1","Fragments":["case"]},{"Key":"-1 case","Fragments":["in"]},{"Key":"in `bottles`","Fragments":["is","instead"]},{"Key":"`bottles` is","Fragments":["a"]},{"Key":"pretty nifty","Fragments":["trick"]},{"Key":"nifty trick","Fragments":["but"]},{"Key":"trick but","Fragments":["is","it's"]},{"Key":"really the","Fragments":["responsibility","case,","fact","right","only"]},{"Key":"the responsibility","Fragments":["of"]},{"Key":"responsibility of","Fragments":["this"]},{"Key":"be concerned","Fragments":["by","with"]},{"Key":"concerned by","Fragments":["this"]},{"Key":"by this","Fragments":["peculiar","to","pattern."]},{"Key":"this peculiar","Fragments":["detail?"]},{"Key":"There a","Fragments":["lot"]},{"Key":"of string","Fragments":["concatenation","won't","interpolation","manipulation","replaces,","to","to"]},{"Key":"concatenation going","Fragments":["on"]},{"Key":"in several","Fragments":["functions,"]},{"Key":"several functions,","Fragments":["can"]},{"Key":"functions, can","Fragments":["you"]},{"Key":"simplify and","Fragments":["unify"]},{"Key":"and unify","Fragments":["some"]},{"Key":"unify some","Fragments":["of"]},{"Key":"I'm especially","Fragments":["thinking"]},{"Key":"especially thinking","Fragments":["about"]},{"Key":"about how","Fragments":["lines","to","I","to"]},{"Key":"how lines","Fragments":["and"]},{"Key":"verses are","Fragments":["put"]},{"Key":"are put","Fragments":["together.","on","between","in"]},{"Key":"you combine","Fragments":["the"]},{"Key":"combine the","Fragments":["mapping","two","2","two","`numbers-only?`","tests"]},{"Key":"the comparison","Fragments":["into","with","inside","inside","of","there"]},{"Key":"comparison into","Fragments":["one"]},{"Key":"into one","Fragments":["step?","\u0026","method","line.","line;"]},{"Key":"one step?","Fragments":["`not=`"]},{"Key":"step? `not=`","Fragments":["is"]},{"Key":"`not=` is","Fragments":["just","a"]},{"Key":"function too","Fragments":["after"]},{"Key":"too after","Fragments":["all..."]},{"Key":":) Excellent","Fragments":["use"]},{"Key":"of native","Fragments":["Clojure."]},{"Key":"considered letting","Fragments":["descriptively"]},{"Key":"letting descriptively","Fragments":["named"]},{"Key":"descriptively named","Fragments":["functions","functions"]},{"Key":"work of","Fragments":["evaluating"]},{"Key":"evaluating what","Fragments":["kind"]},{"Key":"what kind","Fragments":["of","of","of","of","of"]},{"Key":"of message","Fragments":["Bob","has"]},{"Key":"message Bob","Fragments":["is"]},{"Key":"is responding","Fragments":["to?"]},{"Key":"help ```response-for```","Fragments":["better"]},{"Key":"```response-for``` better","Fragments":["tell"]},{"Key":"better tell","Fragments":["the"]},{"Key":"tell the","Fragments":["story","'story'"]},{"Key":"the story","Fragments":["of"]},{"Key":"story of","Fragments":["why"]},{"Key":"of why","Fragments":["it's"]},{"Key":"why it's","Fragments":["responding"]},{"Key":"it's responding","Fragments":["the"]},{"Key":"responding the","Fragments":["way"]},{"Key":"does to","Fragments":["a","the","your"]},{"Key":"for nice","Fragments":["words"]},{"Key":"nice words","Fragments":["but"]},{"Key":"not worthy","Fragments":["of"]},{"Key":"worthy of","Fragments":["such"]},{"Key":"of such","Fragments":["praise","a"]},{"Key":"such praise","Fragments":[":)"]},{"Key":"praise :)","Fragments":["I'll"]},{"Key":":) I'll","Fragments":["have"]},{"Key":"try out","Fragments":["these","the","what","different","some"]},{"Key":"out these","Fragments":["visual"]},{"Key":"these visual","Fragments":["enhancements"]},{"Key":"visual enhancements","Fragments":["in"]},{"Key":"enhancements in","Fragments":["Emacs"]},{"Key":"in Emacs","Fragments":["myself.","with"]},{"Key":"Looks so","Fragments":["much"]},{"Key":"much nicer","Fragments":["in","regex",":)"]},{"Key":"nicer in","Fragments":["Emacs"]},{"Key":"Emacs with","Fragments":["λ"]},{"Key":"with λ","Fragments":["and"]},{"Key":"λ and","Fragments":["∈"]},{"Key":"and ∈","Fragments":[":)"]},{"Key":"you, zoldar!","Fragments":["It's"]},{"Key":"zoldar! It's","Fragments":["a"]},{"Key":"a pleasure","Fragments":["to"]},{"Key":"pleasure to","Fragments":["learn"]},{"Key":"learn from","Fragments":["you."]},{"Key":"haven't thought","Fragments":["about"]},{"Key":"be evaluated","Fragments":["whether","either"]},{"Key":"evaluated whether","Fragments":["nucleotide"]},{"Key":"whether nucleotide","Fragments":["is"]},{"Key":"nucleotide is","Fragments":["valid","\\X,","not","valid","found."]},{"Key":"is valid","Fragments":["or","domain","DNA","characters.","in"]},{"Key":"valid or","Fragments":["not."]},{"Key":"In theory,","Fragments":["`count-nucleotides`"]},{"Key":"theory, `count-nucleotides`","Fragments":["could"]},{"Key":"`count-nucleotides` could","Fragments":["be"]},{"Key":"be still","Fragments":["a"]},{"Key":"function or","Fragments":["inlined","similar","two.","a","similar?","anonymous","even"]},{"Key":"or inlined","Fragments":["for"]},{"Key":"inlined for","Fragments":["performance"]},{"Key":"for performance","Fragments":["reasons.","reasons,"]},{"Key":"performance reasons.","Fragments":["Other"]},{"Key":"reasons. Other","Fragments":["than"]},{"Key":"Ah, got","Fragments":["it."]},{"Key":"got it.","Fragments":["`if"]},{"Key":"it. `if","Fragments":["(valid-nucleotide?)`"]},{"Key":"`if (valid-nucleotide?)`","Fragments":["was"]},{"Key":"(valid-nucleotide?)` was","Fragments":["the"]},{"Key":"the bad","Fragments":["guy","values"]},{"Key":"bad guy","Fragments":["here."]},{"Key":"guy here.","Fragments":["Removed"]},{"Key":"here. Removed","Fragments":["the"]},{"Key":"Removed the","Fragments":["parenthesis"]},{"Key":"the parenthesis","Fragments":["and"]},{"Key":"parenthesis and","Fragments":["everything"]},{"Key":"and everything","Fragments":["works.","else"]},{"Key":"everything works.","Fragments":["Still,"]},{"Key":"works. Still,","Fragments":["`nucleotide-counts`"]},{"Key":"Still, `nucleotide-counts`","Fragments":["doesn't"]},{"Key":"`nucleotide-counts` doesn't","Fragments":["count"]},{"Key":"doesn't count","Fragments":["Uracil,","as"]},{"Key":"count Uracil,","Fragments":["will"]},{"Key":"Uracil, will","Fragments":["use"]},{"Key":"will use","Fragments":["`frequencies`","it"]},{"Key":"instead directly","Fragments":["with"]},{"Key":"directly with","Fragments":["`(or","```(re-seq"]},{"Key":"with `(or","Fragments":["("]},{"Key":"`(or (","Fragments":["..."]},{"Key":"( ...","Fragments":[")"]},{"Key":"... )","Fragments":["0`."]},{"Key":"get it.","Fragments":["With"]},{"Key":"it. With","Fragments":["the"]},{"Key":"With the","Fragments":["macro","combined"]},{"Key":"macro it","Fragments":["works"]},{"Key":"works perfectly","Fragments":["fine."]},{"Key":"perfectly fine.","Fragments":["Without"]},{"Key":"fine. Without","Fragments":["it"]},{"Key":"Without it","Fragments":["just"]},{"Key":"it just","Fragments":["blows","depend","happens","felt","seemed","be","came"]},{"Key":"just blows","Fragments":["right"]},{"Key":"blows right","Fragments":["into"]},{"Key":"right into","Fragments":["my","the"]},{"Key":"into my","Fragments":["face.","namespace,","frustration"]},{"Key":"my face.","Fragments":["What"]},{"Key":"face. What","Fragments":["am"]},{"Key":"What am","Fragments":["I"]},{"Key":" Besides:","Fragments":["`count-nucleotides"]},{"Key":"Besides: `count-nucleotides","Fragments":["#((nucleotide-counts"]},{"Key":"`count-nucleotides #((nucleotide-counts","Fragments":["dna-string)"]},{"Key":"#((nucleotide-counts dna-string)","Fragments":["nucleotide)`"]},{"Key":"dna-string) nucleotide)`","Fragments":["Doesn't"]},{"Key":"nucleotide)` Doesn't","Fragments":["count"]},{"Key":"Doesn't count","Fragments":["`\\U`,"]},{"Key":"count `\\U`,","Fragments":["because"]},{"Key":"`\\U`, because","Fragments":["Uracil"]},{"Key":"because Uracil","Fragments":["isn't"]},{"Key":"Uracil isn't","Fragments":["counted"]},{"Key":"isn't counted","Fragments":["in"]},{"Key":"counted in","Fragments":["`nucleotide-counts`."]},{"Key":"Is must","Fragments":["be"]},{"Key":"be something","Fragments":["else","list-y","I","like:","to","like","somewhere."]},{"Key":"else in","Fragments":["the","the"]},{"Key":"code. I've","Fragments":["tested"]},{"Key":"I've tested","Fragments":["that"]},{"Key":"tested that","Fragments":["snippet"]},{"Key":"that snippet","Fragments":["directly"]},{"Key":"snippet directly","Fragments":["in"]},{"Key":"directly in","Fragments":["REPL","REPL,","`ns`","REPL.","the","the","the","`if`","`nucleotide-counts`."]},{"Key":"REPL with","Fragments":["no"]},{"Key":"Actually, if","Fragments":["I"]},{"Key":" let","Fragments":["[valid-nucleotide?"]},{"Key":" (#{adenosine","Fragments":["cytidine"]},{"Key":"(#{adenosine cytidine","Fragments":["guanosine"]},{"Key":"cytidine guanosine","Fragments":["thymidine"]},{"Key":"guanosine thymidine","Fragments":["uracil}"]},{"Key":"thymidine uracil}","Fragments":["nucleotide)]"]},{"Key":"it throws","Fragments":["`java.lang.NullPointerException`."]},{"Key":"throws `java.lang.NullPointerException`.","Fragments":["Somebody"]},{"Key":"`java.lang.NullPointerException`. Somebody","Fragments":["help?"]},{"Key":" Argh","Fragments":["..."]},{"Key":"Argh ...","Fragments":["we"]},{"Key":"... we","Fragments":["have"]},{"Key":"had clearly","Fragments":["a"]},{"Key":"language barrier","Fragments":["there."]},{"Key":"barrier there.","Fragments":["I"]},{"Key":"there. I","Fragments":["finally","did","think","need","find","guess,","don't","wonder"]},{"Key":"finally understood.","Fragments":["You"]},{"Key":"understood. You","Fragments":["didn't"]},{"Key":"You didn't","Fragments":["want","run"]},{"Key":"didn't want","Fragments":["me","it","to"]},{"Key":"want me","Fragments":["to"]},{"Key":"move the","Fragments":["set","`+`","equality","body"]},{"Key":"set around,","Fragments":["you"]},{"Key":"around, you","Fragments":["wanted"]},{"Key":"wanted me","Fragments":["to"]},{"Key":"bind a","Fragments":["value,"]},{"Key":"a value,","Fragments":["not"]},{"Key":"value, not","Fragments":["a"]},{"Key":"function (as","Fragments":["you've"]},{"Key":"(as you've","Fragments":["written"]},{"Key":"you've written","Fragments":["and"]},{"Key":"written and","Fragments":["I"]},{"Key":"totally didn't","Fragments":["get"]},{"Key":"also totally","Fragments":["right"]},{"Key":"using nucleotide-count","Fragments":["here."]},{"Key":" Give","Fragments":["me","variables"]},{"Key":"Give me","Fragments":["a"]},{"Key":"With regards","Fragments":["of","to","to","to"]},{"Key":"regards of","Fragments":["`count-nucleotides`"]},{"Key":"of `count-nucleotides`","Fragments":["-"]},{"Key":"`count-nucleotides` -","Fragments":["think"]},{"Key":"about reusing","Fragments":["`nucleotide-counts`"]},{"Key":"reusing `nucleotide-counts`","Fragments":["function"]},{"Key":"`nucleotide-counts` function","Fragments":["here.","would","is"]},{"Key":"function here.","Fragments":["Again,"]},{"Key":"here. Again,","Fragments":["I"]},{"Key":"Again, I","Fragments":["don't"]},{"Key":"if I've","Fragments":["made","just"]},{"Key":"I've made","Fragments":["myself","no","a","some","a"]},{"Key":"made myself","Fragments":["clear,"]},{"Key":"myself clear,","Fragments":["but"]},{"Key":"but binding","Fragments":["`valid-nucleotide?`"]},{"Key":"binding `valid-nucleotide?`","Fragments":["to"]},{"Key":"`valid-nucleotide?` to","Fragments":["argument-less"]},{"Key":"to argument-less","Fragments":["function"]},{"Key":"argument-less function","Fragments":["does"]},{"Key":"not make","Fragments":["sense","much","sense","a","it"]},{"Key":"sense -","Fragments":["bind","what"]},{"Key":"- bind","Fragments":["just"]},{"Key":"bind just","Fragments":["value"]},{"Key":"just value","Fragments":["by"]},{"Key":"value by","Fragments":["removing"]},{"Key":"by removing","Fragments":["`#`","`(=","the","unused","special"]},{"Key":"removing `#`","Fragments":["from"]},{"Key":"`#` from","Fragments":["the"]},{"Key":"the front","Fragments":[":)"]},{"Key":"front :)","Fragments":["This"]},{"Key":":) This","Fragments":["way","looks"]},{"Key":"be less","Fragments":["cluttered","clutter.","expressive","performant","clear"]},{"Key":"less cluttered","Fragments":["and","and","way","this"]},{"Key":"cluttered and","Fragments":["intent","make"]},{"Key":"and intent","Fragments":["will","of"]},{"Key":"intent will","Fragments":["be"]},{"Key":" First,","Fragments":["you","I","in","you","good","I"]},{"Key":"First, you","Fragments":["can't","don't","can"]},{"Key":"can't nest","Fragments":["function"]},{"Key":"nest function","Fragments":["reader"]},{"Key":"reader macros","Fragments":["-","and"]},{"Key":"macros -","Fragments":["you"]},{"Key":"swap one","Fragments":["of"]},{"Key":"the forms","Fragments":["to","in"]},{"Key":"forms to","Fragments":["explicit","avoid"]},{"Key":"to explicit","Fragments":["`fn`."]},{"Key":"explicit `fn`.","Fragments":["Second,"]},{"Key":"`fn`. Second,","Fragments":["I"]},{"Key":"Second, I","Fragments":["don't","was"]},{"Key":"really follow","Fragments":["-"]},{"Key":"follow -","Fragments":["nowhere"]},{"Key":"- nowhere","Fragments":["have"]},{"Key":"nowhere have","Fragments":["I"]},{"Key":"suggested such","Fragments":["construct."]},{"Key":"such construct.","Fragments":["Probably"]},{"Key":"construct. Probably","Fragments":["misunderstood"]},{"Key":"Probably misunderstood","Fragments":["your"]},{"Key":"misunderstood your","Fragments":["remark","nitpick."]},{"Key":"your remark","Fragments":["about","into"]},{"Key":"remark about","Fragments":["macros","`frequencies`","3rd"]},{"Key":"about macros","Fragments":["and"]},{"Key":"macros and","Fragments":["rambled","anonymous","auto-generate"]},{"Key":"and rambled","Fragments":["on"]},{"Key":"rambled on","Fragments":["completely"]},{"Key":"on completely","Fragments":["orthogonal"]},{"Key":"completely orthogonal","Fragments":["problem"]},{"Key":"orthogonal problem","Fragments":[":)"]},{"Key":" EDIT:","Fragments":["Ok,","What's","Just","nevermind,","Oh,","Another","On","Fixed","I"]},{"Key":"EDIT: Ok,","Fragments":["I've"]},{"Key":"I've read","Fragments":["it","a","about"]},{"Key":"read it","Fragments":["wrong","you","and"]},{"Key":"it wrong","Fragments":["-"]},{"Key":"wrong -","Fragments":["a","could"]},{"Key":"literal nested","Fragments":["in"]},{"Key":"nested in","Fragments":["fn","the"]},{"Key":"in fn","Fragments":["reader","'anagrams-for'"]},{"Key":"fn reader","Fragments":["macro."]},{"Key":"Anyway no","Fragments":["need"]},{"Key":"for wrapping","Fragments":["that"]},{"Key":"wrapping that","Fragments":["into"]},{"Key":"into function","Fragments":["as"]},{"Key":"function as","Fragments":["I've","well","a","`#(*","well"]},{"Key":"I've stated","Fragments":["in"]},{"Key":"stated in","Fragments":["my","problem"]},{"Key":"my nitpick","Fragments":["to","side,"]},{"Key":"Don't you","Fragments":["think,","get"]},{"Key":"you think,","Fragments":["putting","is","you"]},{"Key":"think, putting","Fragments":["the"]},{"Key":"set into","Fragments":["the"]},{"Key":"would clutter","Fragments":["the"]},{"Key":"clutter the","Fragments":["things","repl"]},{"Key":"the things","Fragments":["up?","that","that"]},{"Key":"It leads","Fragments":["to"]},{"Key":"like this:","Fragments":["`#(#{"]},{"Key":"this: `#(#{","Fragments":[";...`."]},{"Key":"As I","Fragments":["stated","understand","was","just","mentioned,"]},{"Key":"I stated","Fragments":["earlier,"]},{"Key":"stated earlier,","Fragments":["I"]},{"Key":"earlier, I","Fragments":["am"]},{"Key":"Clojure, but","Fragments":["wouldn't","in","I'm","I","I","in"]},{"Key":"but wouldn't","Fragments":["this"]},{"Key":"wouldn't this","Fragments":["be"]},{"Key":"this be","Fragments":["really"]},{"Key":"glance -","Fragments":["even"]},{"Key":"- even","Fragments":["for"]},{"Key":"an experienced","Fragments":["Clojurian?"]},{"Key":"to `nil-to-zero`","Fragments":["-"]},{"Key":"`nil-to-zero` -","Fragments":["remember"]},{"Key":"- remember","Fragments":["that"]},{"Key":"remember that","Fragments":["`nil`","this","the","```split```","`=`"]},{"Key":"that `nil`","Fragments":["and","kind"]},{"Key":"and `false`","Fragments":["are","are","are","values"]},{"Key":"`false` are","Fragments":["the","falsey","both"]},{"Key":"only values","Fragments":["that","treated"]},{"Key":"values that","Fragments":["are","will"]},{"Key":"are treated","Fragments":["as","as","as"]},{"Key":"as logical","Fragments":["false."]},{"Key":"logical false.","Fragments":["Anyway,"]},{"Key":"false. Anyway,","Fragments":["the"]},{"Key":"not needed","Fragments":["-","here.","to","to","in"]},{"Key":"needed -","Fragments":["you"]},{"Key":"can either","Fragments":["use","move"]},{"Key":"either use","Fragments":["simply"]},{"Key":"use simply","Fragments":["`or`","`(apply"]},{"Key":"simply `or`","Fragments":["in"]},{"Key":"`or` in","Fragments":["the","`robot-name`,"]},{"Key":"body or","Fragments":["make"]},{"Key":"of `get`","Fragments":["in"]},{"Key":"in `count-nucleotides`","Fragments":["which"]},{"Key":"`count-nucleotides` which","Fragments":["accepts"]},{"Key":"which accepts","Fragments":["third,"]},{"Key":"accepts third,","Fragments":["`not-found`"]},{"Key":"third, `not-found`","Fragments":["argument."]},{"Key":"`not-found` argument.","Fragments":["I"]},{"Key":"argument. I","Fragments":["suppose"]},{"Key":"I suppose","Fragments":["that","that","that","I","that","you","that","that","if","it","that","I"]},{"Key":"suppose that","Fragments":["leaving","it's","`tokenize`","the","it's","you've","a"]},{"Key":"that leaving","Fragments":["valid-nucleotides"]},{"Key":"leaving valid-nucleotides","Fragments":["public"]},{"Key":"valid-nucleotides public","Fragments":["is"]},{"Key":"is your","Fragments":["conscious","friend!","friend"]},{"Key":"your conscious","Fragments":["choice.","choice."]},{"Key":"conscious choice.","Fragments":["As","All"]},{"Key":"choice. As","Fragments":["I've"]},{"Key":"As I've","Fragments":["written"]},{"Key":"I've written","Fragments":["previously,","after","here."]},{"Key":"written previously,","Fragments":["`valid-nucleotide?`"]},{"Key":"previously, `valid-nucleotide?`","Fragments":["could"]},{"Key":"`valid-nucleotide?` could","Fragments":["just"]},{"Key":"just bind","Fragments":["to"]},{"Key":"bind to","Fragments":["value,"]},{"Key":"to value,","Fragments":["there's"]},{"Key":"value, there's","Fragments":["no"]},{"Key":"no gain","Fragments":["in"]},{"Key":"in leaving","Fragments":["it"]},{"Key":"I extracted","Fragments":["valid-nucleotides","the"]},{"Key":"extracted valid-nucleotides","Fragments":["since"]},{"Key":"valid-nucleotides since","Fragments":["it"]},{"Key":"not depend","Fragments":["on"]},{"Key":"depend on","Fragments":["count","the","`silence?`.","Clojure's","the"]},{"Key":"on count","Fragments":["function."]},{"Key":"count function.","Fragments":["Also"]},{"Key":"function. Also","Fragments":["-"]},{"Key":"Also -","Fragments":["as","what"]},{"Key":"as @milo","Fragments":["pointed"]},{"Key":"@milo pointed","Fragments":["out"]},{"Key":"out I","Fragments":["got"]},{"Key":"the `contains?`","Fragments":["which"]},{"Key":"`contains?` which","Fragments":["led"]},{"Key":"which led","Fragments":["to"]},{"Key":"the `nil-to-zero`-function.","Fragments":["Seems"]},{"Key":"`nil-to-zero`-function. Seems","Fragments":["to"]},{"Key":"Seems to","Fragments":["be","work."]},{"Key":"be cleaner,","Fragments":["though."]},{"Key":"Ah, interesting","Fragments":["one,"]},{"Key":"interesting one,","Fragments":["very"]},{"Key":"one, very","Fragments":["nice"]},{"Key":"may possibly","Fragments":["reduce"]},{"Key":"possibly reduce","Fragments":["the"]},{"Key":"little by","Fragments":["using","using"]},{"Key":"`re-seq` and","Fragments":["`frequencies`.","the"]},{"Key":"Oh beer","Fragments":["song,"]},{"Key":"beer song,","Fragments":["how"]},{"Key":"song, how","Fragments":["I"]},{"Key":"got similar","Fragments":["feedback"]},{"Key":"similar feedback","Fragments":["about"]},{"Key":"feedback about","Fragments":["naming"]},{"Key":"about naming","Fragments":["in","natural"]},{"Key":"naming in","Fragments":["my"]},{"Key":"my ruby","Fragments":["submission","coming"]},{"Key":"ruby submission","Fragments":["-"]},{"Key":"- lets","Fragments":["see"]},{"Key":"lets see","Fragments":["what"]},{"Key":"like here","Fragments":["in","is"]},{"Key":"clojure with","Fragments":["that"]},{"Key":"future consider","Fragments":["if"]},{"Key":"all vars/functions","Fragments":["in"]},{"Key":"vars/functions in","Fragments":["a"]},{"Key":"given program","Fragments":["should"]},{"Key":"program should","Fragments":["be"]},{"Key":"deprecated. Use","Fragments":["`require`."]},{"Key":"Use `require`.","Fragments":["Beyond"]},{"Key":"`require`. Beyond","Fragments":["fiddling"]},{"Key":"fiddling directly","Fragments":["in","in"]},{"Key":"in REPL,","Fragments":["it's"]},{"Key":"REPL, it's","Fragments":["good"]},{"Key":"put require","Fragments":["directly"]},{"Key":"require directly","Fragments":["in"]},{"Key":"context right,","Fragments":["but"]},{"Key":"right, but","Fragments":["macros","it"]},{"Key":"but macros","Fragments":["are"]},{"Key":"macros are","Fragments":["expanded","hard","as"]},{"Key":"are expanded","Fragments":["at"]},{"Key":"expanded at","Fragments":["compile"]},{"Key":"at compile","Fragments":["time,","time,"]},{"Key":"compile time,","Fragments":["so","but"]},{"Key":"time, so","Fragments":["there's","not"]},{"Key":"so there's","Fragments":["no","no","no","no"]},{"Key":"no performance","Fragments":["penalty"]},{"Key":"performance penalty","Fragments":["at"]},{"Key":"penalty at","Fragments":["runtime,"]},{"Key":"at runtime,","Fragments":["no"]},{"Key":"runtime, no","Fragments":["matter"]},{"Key":"no matter","Fragments":["how","with"]},{"Key":"matter how","Fragments":["complicated"]},{"Key":"how complicated","Fragments":["the"]},{"Key":"complicated the","Fragments":["macro."]},{"Key":"that -","Fragments":["valid-nucleotides","set","`Character/isDigit`","of","snug","probably"]},{"Key":"- valid-nucleotides","Fragments":["indeed"]},{"Key":"valid-nucleotides indeed","Fragments":["could"]},{"Key":"indeed could","Fragments":["be"]},{"Key":"be moved","Fragments":["to","up","in"]},{"Key":"moved to","Fragments":["a","separate"]},{"Key":"a dynamic","Fragments":["root","binding"]},{"Key":"dynamic root","Fragments":["binding"]},{"Key":"binding -","Fragments":["no"]},{"Key":"- no","Fragments":["need","need","need"]},{"Key":"build the","Fragments":["literal","histogram,","word","individual","count"]},{"Key":"the literal","Fragments":["with","(if","syntax","syntax"]},{"Key":"literal with","Fragments":["every"]},{"Key":"every function","Fragments":["call","explicitly.","in"]},{"Key":"call (although","Fragments":["compiler"]},{"Key":"(although compiler","Fragments":["may"]},{"Key":"compiler may","Fragments":["compensate"]},{"Key":"may compensate","Fragments":["for"]},{"Key":"compensate for","Fragments":["that,"]},{"Key":"for that,","Fragments":["I","I","would","but","but","but"]},{"Key":"that, I","Fragments":["don't","accidentally","don't","think","don't","decided","certainly","really"]},{"Key":"don't know).","Fragments":["`valid-nucleotide?`"]},{"Key":"know). `valid-nucleotide?`","Fragments":["is"]},{"Key":"`valid-nucleotide?` is","Fragments":["executed"]},{"Key":"is executed","Fragments":["either"]},{"Key":"executed either","Fragments":["way"]},{"Key":"way so","Fragments":["I"]},{"Key":"in wrapping","Fragments":["it"]},{"Key":"a function.","Fragments":["Hint:","They","e.g.","The","You","Now","Small"]},{"Key":"function. Hint:","Fragments":["`contains?`"]},{"Key":"Hint: `contains?`","Fragments":["is"]},{"Key":"`contains?` is","Fragments":["not"]},{"Key":"not necessary,","Fragments":["sets","just","my"]},{"Key":"necessary, sets","Fragments":["work"]},{"Key":"sets work","Fragments":["also"]},{"Key":"work also","Fragments":["as","as"]},{"Key":"also as","Fragments":["a","a","functions"]},{"Key":"a functions.","Fragments":["`count-nucleotides`"]},{"Key":"functions. `count-nucleotides`","Fragments":["can"]},{"Key":"`count-nucleotides` can","Fragments":["be"]},{"Key":"be alternatively","Fragments":["realized"]},{"Key":"alternatively realized","Fragments":["with"]},{"Key":"realized with","Fragments":["`frequencies`"]},{"Key":"with `frequencies`","Fragments":["-","that","the"]},{"Key":"`frequencies` -","Fragments":["it","it"]},{"Key":"as effective","Fragments":["if"]},{"Key":"effective if","Fragments":["not"]},{"Key":"if not","Fragments":["even","`true`."]},{"Key":"not even","Fragments":["more"]},{"Key":"than current","Fragments":["count/re-seq"]},{"Key":"current count/re-seq","Fragments":["solution."]},{"Key":" Based","Fragments":["on","on","on","on","on"]},{"Key":"Based on","Fragments":["the","the","previous","previous","previous"]},{"Key":"feedback I","Fragments":["received,"]},{"Key":"I received,","Fragments":["this"]},{"Key":"received, this","Fragments":["version:"]},{"Key":"1. Finds","Fragments":["words"]},{"Key":"Finds words","Fragments":["instead"]},{"Key":"words instead","Fragments":["of"]},{"Key":"of eliminating","Fragments":["special"]},{"Key":"eliminating special","Fragments":["characters"]},{"Key":"2. Uses","Fragments":["frequencies"]},{"Key":"Uses frequencies","Fragments":["instead"]},{"Key":"frequencies instead","Fragments":["of"]},{"Key":"of recreating","Fragments":["its"]},{"Key":"recreating its","Fragments":["functionality"]},{"Key":"its functionality","Fragments":["with"]},{"Key":"functionality with","Fragments":["reduce"]},{"Key":"Good to","Fragments":["go","know","see","know.","know"]},{"Key":"go for","Fragments":["me.","concise,","a","comma","`when`,"]},{"Key":"me. However","Fragments":["one"]},{"Key":"However one","Fragments":["hint:"]},{"Key":"one hint:","Fragments":["you"]},{"Key":"hint: you","Fragments":["could"]},{"Key":"program more","Fragments":["effective","effective","flexible."]},{"Key":"with =","Fragments":["and"]},{"Key":"= and","Fragments":["not=,"]},{"Key":"and not=,","Fragments":["and"]},{"Key":"not=, and","Fragments":["="]},{"Key":"and =","Fragments":["won"]},{"Key":"= won","Fragments":["out"]},{"Key":"won out","Fragments":["just"]},{"Key":"out just","Fragments":["by"]},{"Key":"just by","Fragments":["being","using","googling"]},{"Key":"by being","Fragments":["a"]},{"Key":"couple fewer","Fragments":["keystrokes"]},{"Key":"fewer keystrokes","Fragments":[";)"]},{"Key":"\u0026gt; You're","Fragments":["using"]},{"Key":"You're using","Fragments":["require/refer","require/refer","`(apply","a"]},{"Key":"using require/refer","Fragments":["so","so"]},{"Key":"require/refer so","Fragments":["you","you"]},{"Key":" Silly","Fragments":["me.","me,"]},{"Key":"\u0026gt; Try","Fragments":["using"]},{"Key":"using `cone`","Fragments":["instead"]},{"Key":"`cone` instead","Fragments":["of"]},{"Key":"of nesting","Fragments":["`if`s.","`if`s.","multiple","ifs"]},{"Key":"Ah, didn't","Fragments":["know"]},{"Key":"use clojure's","Fragments":["`upper-case`"]},{"Key":"clojure's `upper-case`","Fragments":["instead"]},{"Key":"`upper-case` instead","Fragments":["of"]},{"Key":"the java","Fragments":["method","`toLowerCase`","version","function.","string","Calendar","method.","method"]},{"Key":"java method","Fragments":["here.","on"]},{"Key":"use `:require`","Fragments":["with","instead","and","in","so"]},{"Key":"with `:refer`","Fragments":["to"]},{"Key":"`:refer` to","Fragments":["simply","`use`","import"]},{"Key":"to simply","Fragments":["use","generate","`upper-case`,","upper-case,","hint"]},{"Key":"`blank?` instead","Fragments":["of","of"]},{"Key":"the fully","Fragments":["qualified"]},{"Key":"fully qualified","Fragments":["name","namespace,"]},{"Key":" Code","Fragments":["formatting","looks","could"]},{"Key":"bit off","Fragments":["-","-","-"]},{"Key":"off -","Fragments":["don't","please","generally"]},{"Key":"- don't","Fragments":["leave","know"]},{"Key":"don't leave","Fragments":["closing","opening/closing","closing"]},{"Key":"leave closing","Fragments":["brackets/parentheses","parentheses","parentheses","parentheses"]},{"Key":"closing brackets/parentheses","Fragments":["in"]},{"Key":"brackets/parentheses in","Fragments":["their"]},{"Key":"Yeah, if","Fragments":["you"]},{"Key":"you `map","Fragments":["not=`,"]},{"Key":"`map not=`,","Fragments":["you"]},{"Key":"not=`, you","Fragments":["have"]},{"Key":"of booleans,","Fragments":["then"]},{"Key":"booleans, then","Fragments":["you"]},{"Key":"can `filter`","Fragments":["and"]},{"Key":"`filter` and","Fragments":["`count`.","`count`","one","the"]},{"Key":"and `count`.","Fragments":["Your"]},{"Key":"`count`. Your","Fragments":["implementation"]},{"Key":"of going","Fragments":["directly"]},{"Key":"going directly","Fragments":["to"]},{"Key":"directly to","Fragments":["something","the","`if`,"]},{"Key":"something `reduce`able,","Fragments":["but"]},{"Key":"`reduce`able, but","Fragments":["with"]},{"Key":"other way,","Fragments":["you're"]},{"Key":"way, you're","Fragments":["using"]},{"Key":"using all","Fragments":["built-ins,","the"]},{"Key":"all built-ins,","Fragments":["so"]},{"Key":"built-ins, so","Fragments":["less"]},{"Key":"so less","Fragments":["code","need"]},{"Key":"code maintenance.","Fragments":["I"]},{"Key":"maintenance. I","Fragments":["don't"]},{"Key":"feel that","Fragments":["either","it's","these"]},{"Key":"that either","Fragments":["is"]},{"Key":"either is","Fragments":["an","really"]},{"Key":"an unequivocal","Fragments":["win."]},{"Key":"Too much","Fragments":["\"globals\"","programming"]},{"Key":"much \"globals\"","Fragments":["and"]},{"Key":"\"globals\" and","Fragments":["well,"]},{"Key":"and well,","Fragments":["I"]},{"Key":"if grammar","Fragments":["is"]},{"Key":"grammar is","Fragments":["valid"]},{"Key":"valid domain","Fragments":["which"]},{"Key":"domain which","Fragments":["naming"]},{"Key":"which naming","Fragments":["scheme"]},{"Key":"scheme should","Fragments":["be"]},{"Key":"be based","Fragments":["upon,"]},{"Key":"based upon,","Fragments":["at"]},{"Key":"upon, at","Fragments":["least"]},{"Key":"least not","Fragments":["through","without"]},{"Key":"not through","Fragments":["the"]},{"Key":"whole program.","Fragments":["I"]},{"Key":"program. I","Fragments":["wouldn't","would"]},{"Key":"wouldn't go","Fragments":["so"]},{"Key":"go so","Fragments":["over"]},{"Key":"so over","Fragments":["the"]},{"Key":"the board","Fragments":["with","with","representation"]},{"Key":"board with","Fragments":["the","the"]},{"Key":"the dry","Fragments":["approach."]},{"Key":"dry approach.","Fragments":["What"]},{"Key":"approach. What","Fragments":["I","if"]},{"Key":"What I","Fragments":["had","have","discovered"]},{"Key":"had on","Fragments":["my"]},{"Key":"my mind","Fragments":["when"]},{"Key":"mind when","Fragments":["speaking"]},{"Key":"when speaking","Fragments":["about"]},{"Key":"speaking about","Fragments":["naming"]},{"Key":"naming natural","Fragments":["to"]},{"Key":"the surrounding","Fragments":["context"]},{"Key":"surrounding context","Fragments":["is"]},{"Key":"context is","Fragments":["something"]},{"Key":"`(str n-bottles","Fragments":["\""]},{"Key":"of beer\"","Fragments":["...)`.","somehow"]},{"Key":"beer\" ...)`.","Fragments":["Other"]},{"Key":"...)`. Other","Fragments":["than"]},{"Key":"that, it","Fragments":["would","would"]},{"Key":"keep binding","Fragments":["as"]},{"Key":"binding as","Fragments":["close"]},{"Key":"as close","Fragments":["the"]},{"Key":"close the","Fragments":["the","comparable","original","exercises","submission"]},{"Key":"the the","Fragments":["template","`filter`","`range`","namespace","answers"]},{"Key":"the template","Fragments":["as"]},{"Key":"template as","Fragments":["possible"]},{"Key":"to easily","Fragments":["refer","partially"]},{"Key":"easily refer","Fragments":["to"]},{"Key":"to it","Fragments":["(think","with","but","(silence","is","is","implicitly."]},{"Key":"it (think","Fragments":["surrounding"]},{"Key":"(think surrounding","Fragments":["lexical"]},{"Key":"surrounding lexical","Fragments":["scope)."]},{"Key":"the `not=`","Fragments":["operator?","and"]},{"Key":"`not=` operator?","Fragments":[":)"]},{"Key":"Anyway, looks","Fragments":["very"]},{"Key":"very cool","Fragments":["as"]},{"Key":"cool as","Fragments":["is."]},{"Key":" Sorry!","Fragments":["I"]},{"Key":"Sorry! I","Fragments":["should"]},{"Key":"more clear.","Fragments":["The","If","What"]},{"Key":"clear. The","Fragments":["namespace"]},{"Key":"The namespace","Fragments":["macro","issue","is"]},{"Key":"namespace macro","Fragments":["is"]},{"Key":"macro is","Fragments":["tricky.","a","just","pretty","not"]},{"Key":"is tricky.","Fragments":["Here's"]},{"Key":"tricky. Here's","Fragments":["what"]},{"Key":"Here's what","Fragments":["it"]},{"Key":"should look","Fragments":["like:","like?","into","like","for..","at"]},{"Key":":refer [upper-case","Fragments":["trim]]))","lower-case","blank?]])."]},{"Key":"Here's [a","Fragments":["good"]},{"Key":"[a good","Fragments":["guide](http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html)"]},{"Key":"good guide](http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html)","Fragments":["to"]},{"Key":"guide](http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html) to","Fragments":["all"]},{"Key":"The `challenge`","Fragments":["function"]},{"Key":"`challenge` function","Fragments":["shows"]},{"Key":"function shows","Fragments":["my"]},{"Key":"shows my","Fragments":["attempt"]},{"Key":"attempt at","Fragments":["a","this","any","trying","clojure."]},{"Key":"a super-DRY","Fragments":["implementation."]},{"Key":"super-DRY implementation.","Fragments":["I"]},{"Key":"implementation. I","Fragments":["don't"]},{"Key":"where it's","Fragments":["going","easy","defined."]},{"Key":"it's going","Fragments":["though"]},{"Key":"going though","Fragments":["and"]},{"Key":"though and","Fragments":["vastly"]},{"Key":"and vastly","Fragments":["prefer"]},{"Key":"vastly prefer","Fragments":["the"]},{"Key":"the look","Fragments":["and"]},{"Key":"and feel","Fragments":["of","it"]},{"Key":"feel of","Fragments":["`response`."]},{"Key":"of `response`.","Fragments":["If"]},{"Key":"`response`. If","Fragments":["anyone"]},{"Key":"If anyone","Fragments":["has","has","knows"]},{"Key":"some tips","Fragments":["on"]},{"Key":"tips on","Fragments":["how"]},{"Key":"could really","Fragments":["get","just"]},{"Key":"really get","Fragments":["to"]},{"Key":"something that's","Fragments":["both"]},{"Key":"that's both","Fragments":["DRY"]},{"Key":"both DRY","Fragments":["and"]},{"Key":"DRY and","Fragments":["simple"]},{"Key":"simple I'd","Fragments":["love"]},{"Key":"hear them.","Fragments":["Thanks"]},{"Key":"them. Thanks","Fragments":["in"]},{"Key":"Thanks in","Fragments":["advance","advance."]},{"Key":"in advance","Fragments":[":)"]},{"Key":"Or possibly","Fragments":["`(-\u0026gt;\u0026gt;"]},{"Key":"possibly `(-\u0026gt;\u0026gt;","Fragments":["strand1"]},{"Key":"`(-\u0026gt;\u0026gt; strand1","Fragments":["(map"]},{"Key":"strand1 (map","Fragments":["="]},{"Key":"(map =","Fragments":["strand2)","gene1","a"]},{"Key":"= strand2)","Fragments":["(filter"]},{"Key":"strand2) (filter","Fragments":["false?)"]},{"Key":"(filter false?)","Fragments":["count)`...?"]},{"Key":"I'm working","Fragments":["through","in"]},{"Key":"this but","Fragments":["so","if","what"]},{"Key":"but so","Fragments":["far"]},{"Key":"far my","Fragments":["results"]},{"Key":"my results","Fragments":["aren't"]},{"Key":"results aren't","Fragments":["super"]},{"Key":"aren't super","Fragments":["promising."]},{"Key":"super promising.","Fragments":["I'll"]},{"Key":"promising. I'll","Fragments":["upload"]},{"Key":"I'll upload","Fragments":["the"]},{"Key":"upload the","Fragments":["WIP"]},{"Key":"the WIP","Fragments":["for"]},{"Key":"WIP for","Fragments":["you"]},{"Key":"at if","Fragments":["you'd"]},{"Key":"if you'd","Fragments":["like.","submit","like","check"]},{"Key":"I'm very","Fragments":["much","grateful","open"]},{"Key":"much a","Fragments":["Clojure","Big"]},{"Key":"Clojure beginner,","Fragments":["so"]},{"Key":"beginner, so","Fragments":["any"]},{"Key":"so any","Fragments":["and"]},{"Key":"any and","Fragments":["all"]},{"Key":"and all","Fragments":["nitpicks","but"]},{"Key":"all nitpicks","Fragments":["are"]},{"Key":"are welcome.","Fragments":["Style,"]},{"Key":"welcome. Style,","Fragments":["formatting,"]},{"Key":"Style, formatting,","Fragments":["and"]},{"Key":"formatting, and","Fragments":["idioms"]},{"Key":"and idioms","Fragments":["are"]},{"Key":"idioms are","Fragments":["all"]},{"Key":"all fair","Fragments":["game—not"]},{"Key":"fair game—not","Fragments":["to"]},{"Key":"game—not to","Fragments":["mention"]},{"Key":"to mention","Fragments":["even","the","more","**\\T"]},{"Key":"mention even","Fragments":["more"]},{"Key":"more glaring","Fragments":["problems!"]},{"Key":"that strings","Fragments":["are","alone","are","count"]},{"Key":"strings are","Fragments":["sequences","already","already","sequences","treated","recommended","lists."]},{"Key":"are sequences","Fragments":["in","too."]},{"Key":"sequences in","Fragments":["clojure.","clojure."]},{"Key":"clojure. What","Fragments":["if"]},{"Key":"you map","Fragments":["over","the","and"]},{"Key":"strings with","Fragments":["a","placeholders?","`(apply","only"]},{"Key":"a comparison","Fragments":["function?"]},{"Key":"Hey, good","Fragments":["to"]},{"Key":" Zipping","Fragments":["the"]},{"Key":"Zipping the","Fragments":["strands"]},{"Key":"strands together","Fragments":["certainly"]},{"Key":"together certainly","Fragments":["feels"]},{"Key":"certainly feels","Fragments":["like"]},{"Key":"good way","Fragments":["of","to","to"]},{"Key":"to bother","Fragments":["to"]},{"Key":"bother to","Fragments":["check"]},{"Key":"check their","Fragments":["length."]},{"Key":" Dont","Fragments":["know"]},{"Key":"Dont know","Fragments":["if"]},{"Key":"if there's","Fragments":["a","a","a","anything","a","a","a","room","a","only"]},{"Key":"of converting","Fragments":["matched","those","a"]},{"Key":"converting matched","Fragments":["pairs"]},{"Key":"matched pairs","Fragments":["into"]},{"Key":"pairs into","Fragments":["a"]},{"Key":"a count,","Fragments":["but"]},{"Key":"count, but","Fragments":["at"]},{"Key":"least this","Fragments":["code"]},{"Key":"is starting","Fragments":["to"]},{"Key":"starting to","Fragments":["get","clean","look"]},{"Key":"get quite","Fragments":["concise"]},{"Key":"quite concise","Fragments":["now..."]},{"Key":"not 100%","Fragments":["sure"]},{"Key":"100% sure","Fragments":["what"]},{"Key":"at (finding","Fragments":["what"]},{"Key":"(finding what","Fragments":["functions"]},{"Key":"are available","Fragments":["and"]},{"Key":"available and","Fragments":["appropriate"]},{"Key":"and appropriate","Fragments":["in"]},{"Key":"appropriate in","Fragments":["clojure"]},{"Key":"clojure is","Fragments":["quite","with","to"]},{"Key":"is quite","Fragments":["difficult!),","long,","useful","complex.","pants","elegant,","as","some"]},{"Key":"quite difficult!),","Fragments":["but"]},{"Key":"difficult!), but","Fragments":["I've"]},{"Key":"but I've","Fragments":["found","submitted","made","got"]},{"Key":"found one","Fragments":["approach","thing"]},{"Key":"one approach","Fragments":["that"]},{"Key":"that cuts","Fragments":["down"]},{"Key":"cuts down","Fragments":["significantly","on"]},{"Key":"down significantly","Fragments":["on"]},{"Key":"significantly on","Fragments":["lines"]},{"Key":"on lines","Fragments":["of","7","12-14","10","54","14","13-15,","11-13."]},{"Key":"code, so","Fragments":["let's","thanks!","there","I"]},{"Key":"so let's","Fragments":["try","reflect"]},{"Key":"let's try","Fragments":["that..."]},{"Key":"assume `=`","Fragments":["will"]},{"Key":"`=` will","Fragments":["evaluate","compare"]},{"Key":"will evaluate","Fragments":["as"]},{"Key":"a boolean","Fragments":["which","end","result.","value","result.","with","result,","value",";"]},{"Key":"boolean which","Fragments":["can't"]},{"Key":"which can't","Fragments":["be"]},{"Key":"can't be","Fragments":["reduced","that","\\U","seen","made","fixed"]},{"Key":"reduced with","Fragments":["an"]},{"Key":"an addition,","Fragments":["can"]},{"Key":"addition, can","Fragments":["it?"]},{"Key":"could `filter`","Fragments":["the"]},{"Key":"`filter` the","Fragments":["lists"]},{"Key":"result but","Fragments":["in"]},{"Key":"case, the","Fragments":["fact","length","exception","worst"]},{"Key":"that `map`","Fragments":["acts"]},{"Key":"`map` acts","Fragments":["as"]},{"Key":"acts as","Fragments":["a"]},{"Key":"list zipper","Fragments":["is"]},{"Key":"zipper is","Fragments":["kind"]},{"Key":"of convenient","Fragments":["to"]},{"Key":"convenient to","Fragments":["deal"]},{"Key":"to deal","Fragments":["with"]},{"Key":"deal with","Fragments":["strands","nonexistent"]},{"Key":"with strands","Fragments":["of"]},{"Key":"strands of","Fragments":["different"]},{"Key":"of different","Fragments":["lengths.","inputs.","levels","exercises","formattings.\"","formattings.\""]},{"Key":"Oh, right!","Fragments":["It"]},{"Key":"right! It","Fragments":["will"]},{"Key":"it even","Fragments":["more","has","simpler.","simpler):"]},{"Key":"concise and,","Fragments":["hopefully,"]},{"Key":"and, hopefully,","Fragments":["readable"]},{"Key":"little duplication","Fragments":["between"]},{"Key":"of `all-nucleotides`","Fragments":["and"]},{"Key":"`all-nucleotides` and","Fragments":["the"]},{"Key":"the starting","Fragments":["hash"]},{"Key":"starting hash","Fragments":["in"]},{"Key":"`nucleotide-counts`. Is","Fragments":["there"]},{"Key":"small thing,","Fragments":["but","on"]},{"Key":"thing, but","Fragments":["I","I","future","variable","maybe"]},{"Key":"prefer `get`","Fragments":["with"]},{"Key":"`get` with","Fragments":["a"]},{"Key":"value instead","Fragments":["of","of"]},{"Key":"of `or`","Fragments":["when"]},{"Key":"`or` when","Fragments":["you"]},{"Key":"you retrieve","Fragments":["the"]},{"Key":"retrieve the","Fragments":["nucleotide","word"]},{"Key":"nucleotide count","Fragments":["from"]},{"Key":"count from","Fragments":["the"]},{"Key":"in `count`","Fragments":["--"]},{"Key":"`count` --","Fragments":["it's"]},{"Key":"better conceptual","Fragments":["match."]},{"Key":"Okay, another","Fragments":["day,"]},{"Key":"another day,","Fragments":["ANOTHER"]},{"Key":"day, ANOTHER","Fragments":["attempt"]},{"Key":"ANOTHER attempt","Fragments":["at"]},{"Key":"If feel","Fragments":["like"]},{"Key":"new nucleotide-counts","Fragments":["is"]},{"Key":"nucleotide-counts is","Fragments":["really"]},{"Key":"really nicely","Fragments":["succinct,"]},{"Key":"nicely succinct,","Fragments":["even"]},{"Key":"succinct, even","Fragments":["if"]},{"Key":"it's sad","Fragments":["to"]},{"Key":"sad to","Fragments":["waste"]},{"Key":"to waste","Fragments":["a","it"]},{"Key":"waste a","Fragments":["perfectly"]},{"Key":"a perfectly","Fragments":["good"]},{"Key":"perfectly good","Fragments":["opportunity"]},{"Key":"good opportunity","Fragments":["to"]},{"Key":"opportunity to","Fragments":["use","pass","solicit","cut"]},{"Key":"the reduce","Fragments":["pattern.","function.","call","function","call"]},{"Key":" Count","Fragments":["I"]},{"Key":"Count I","Fragments":["could"]},{"Key":"way with","Fragments":["-","`some`","negative"]},{"Key":"with -","Fragments":["I"]},{"Key":"new one","Fragments":["doesn't","because"]},{"Key":"one doesn't","Fragments":["have"]},{"Key":"convert nil","Fragments":["into"]},{"Key":"nil into","Fragments":["0,"]},{"Key":"into 0,","Fragments":["but"]},{"Key":"0, but","Fragments":["I"]},{"Key":"like resorting","Fragments":["to"]},{"Key":"to clojure.core/count","Fragments":["inside"]},{"Key":"clojure.core/count inside","Fragments":["dna/count."]},{"Key":"sure it's","Fragments":["worth","worth"]},{"Key":"the effort","Fragments":["to"]},{"Key":"try and","Fragments":["come","combine","understand"]},{"Key":"and come","Fragments":["up","to"]},{"Key":"with YET","Fragments":["ANOTHER"]},{"Key":"YET ANOTHER","Fragments":["version"]},{"Key":"ANOTHER version","Fragments":["of"]},{"Key":"of nucleotide-counts","Fragments":["just","and","to"]},{"Key":"nucleotide-counts just","Fragments":["so"]},{"Key":"just so","Fragments":["that","you","all","I"]},{"Key":"use count","Fragments":["to"]},{"Key":"count to","Fragments":["generate","be"]},{"Key":"generate it.","Fragments":["Haven't"]},{"Key":"it. Haven't","Fragments":["I"]},{"Key":"Haven't I","Fragments":["done"]},{"Key":"I done","Fragments":["this"]},{"Key":"done this","Fragments":["exercise"]},{"Key":"exercise enough","Fragments":["by"]},{"Key":"enough by","Fragments":["now?"]},{"Key":"by now?","Fragments":[";)"]},{"Key":"Yeah, I'd","Fragments":["definitely"]},{"Key":"definitely factorize","Fragments":["things"]},{"Key":"factorize things","Fragments":["out"]},{"Key":"things out","Fragments":["if"]},{"Key":"out if","Fragments":["it","a"]},{"Key":"it had","Fragments":["to"]},{"Key":"for either","Fragments":["a"]},{"Key":"either a","Fragments":["character","different"]},{"Key":"character or","Fragments":["a"]},{"Key":"or a","Fragments":["string","yell?","part","docstring.","`silent?`","different","`partial`","reduce"]},{"Key":"string being","Fragments":["passed"]},{"Key":"being passed","Fragments":["in","in"]},{"Key":"passed in","Fragments":["-","the"]},{"Key":"in -","Fragments":["I"]},{"Key":"like I've","Fragments":["done"]},{"Key":"I've done","Fragments":["enough","outside"]},{"Key":"done enough","Fragments":["extra"]},{"Key":"enough extra","Fragments":["work"]},{"Key":"extra work","Fragments":["on"]},{"Key":"that false","Fragments":["trail"]},{"Key":"false trail","Fragments":["though!"]},{"Key":"One thing","Fragments":["I","I","I'd","I","about","I","to","to","I","I","to","I"]},{"Key":"still kind","Fragments":["of"]},{"Key":"of want","Fragments":["to"]},{"Key":"do is","Fragments":["reverse","trading","replace","`(apply","just","take"]},{"Key":"is reverse","Fragments":["it"]},{"Key":"reverse it","Fragments":["so"]},{"Key":"it so","Fragments":["nucleotide-counts","you","I","it","that"]},{"Key":"so nucleotide-counts","Fragments":["uses"]},{"Key":"nucleotide-counts uses","Fragments":["count,"]},{"Key":"uses count,","Fragments":["and"]},{"Key":"count, and","Fragments":["not","assert"]},{"Key":"vice versa,","Fragments":["to"]},{"Key":"versa, to","Fragments":["see"]},{"Key":"that \"feels","Fragments":["better\"."]},{"Key":"\"feels better\".","Fragments":["Time"]},{"Key":"better\". Time","Fragments":["permitting..."]},{"Key":"with @aliza","Fragments":["on"]},{"Key":"@aliza on","Fragments":["the"]},{"Key":"the matter","Fragments":["regarding","with"]},{"Key":"matter regarding","Fragments":["`uppercase?`."]},{"Key":"regarding `uppercase?`.","Fragments":["There"]},{"Key":"`uppercase?`. There","Fragments":["is"]},{"Key":"much simpler","Fragments":["solution","than","mathematical","than"]},{"Key":"simpler solution","Fragments":["given","in"]},{"Key":"solution given","Fragments":["by"]},{"Key":"given by","Fragments":["`glojure.string`."]},{"Key":"redundant to","Fragments":["use"]},{"Key":"the `last-letter`","Fragments":["binding"]},{"Key":"`last-letter` binding","Fragments":["for"]},{"Key":"for `last`,","Fragments":["but"]},{"Key":"`last`, but","Fragments":["that"]},{"Key":"Besides that","Fragments":["I","looks"]},{"Key":"disagree with","Fragments":["@aliza's","the","using","@alfreda"]},{"Key":"with @aliza's","Fragments":["last"]},{"Key":"@aliza's last","Fragments":["suggestion."]},{"Key":"last suggestion.","Fragments":["I"]},{"Key":"suggestion. I","Fragments":["find","was"]},{"Key":"it straight","Fragments":["to"]},{"Key":"straight to","Fragments":["keep","the"]},{"Key":"keep the","Fragments":["conditions","helpers","context","public","\"constants\"","results","level","style","intent"]},{"Key":"Two minor","Fragments":["picks,"]},{"Key":"minor picks,","Fragments":["though:"]},{"Key":"picks, though:","Fragments":["First,"]},{"Key":"though: First,","Fragments":["you"]},{"Key":"need all","Fragments":["the","the"]},{"Key":"the commas","Fragments":["in","because"]},{"Key":"commas in","Fragments":["your"]},{"Key":"code. Particularly","Fragments":["since"]},{"Key":"Particularly since","Fragments":["you"]},{"Key":"them consistent.","Fragments":["Second,"]},{"Key":"consistent. Second,","Fragments":["a"]},{"Key":"Second, a","Fragments":["cleaner"]},{"Key":"`(= 0","Fragments":["something)`","foo)`","x)`.","(mod","n)`.","n)`"]},{"Key":"0 something)`","Fragments":["would"]},{"Key":"something)` would","Fragments":["be"]},{"Key":"The operations","Fragments":["in"]},{"Key":"operations in","Fragments":["`nucleotide-counts`","`number`","one,"]},{"Key":"in `nucleotide-counts`","Fragments":["and","but","is"]},{"Key":"`nucleotide-counts` and","Fragments":["`nucleotide-counts-string`"]},{"Key":"and `nucleotide-counts-string`","Fragments":["are"]},{"Key":"`nucleotide-counts-string` are","Fragments":["very"]},{"Key":"very similar.","Fragments":["Could"]},{"Key":"similar. Could","Fragments":["you"]},{"Key":"Edit: scratch","Fragments":["that,"]},{"Key":"scratch that,","Fragments":["just"]},{"Key":"that, just","Fragments":["understood"]},{"Key":"just understood","Fragments":["your"]},{"Key":"understood your","Fragments":["comment."]},{"Key":"Isn't there","Fragments":["a"]},{"Key":"test in","Fragments":["bob","the","\"count\"","isQuestion","`cond`","your"]},{"Key":"in bob","Fragments":["for"]},{"Key":"bob for","Fragments":["`nil`"]},{"Key":"for `nil`","Fragments":["being"]},{"Key":"`nil` being","Fragments":["silence?"]},{"Key":"being silence?","Fragments":["This"]},{"Key":"silence? This","Fragments":["won't"]},{"Key":"This won't","Fragments":["be","happen"]},{"Key":"be caught","Fragments":["by"]},{"Key":"caught by","Fragments":["`(=","the","the"]},{"Key":"by `(=","Fragments":["\"\"","question"]},{"Key":"\"\" m)`,","Fragments":["will"]},{"Key":"m)`, will","Fragments":["it?"]},{"Key":"\"\" nil)","Fragments":[";"]},{"Key":"nil) ;","Fragments":["=›"]},{"Key":"; =›","Fragments":["false"]},{"Key":"It's actually","Fragments":["`let`"]},{"Key":"actually `let`","Fragments":["and"]},{"Key":"`let` and","Fragments":["not","`cond`.","accepts","you","put","`when`:","the"]},{"Key":"not `letfn`","Fragments":["because"]},{"Key":"`letfn` because","Fragments":["I"]},{"Key":"had all","Fragments":["the","my"]},{"Key":"the bindings","Fragments":["of","could","list"]},{"Key":"bindings of","Fragments":["nucleotides"]},{"Key":"in there","Fragments":["as"]},{"Key":"there as","Fragments":["well."]},{"Key":"well. But","Fragments":["since"]},{"Key":"since all","Fragments":["it","three"]},{"Key":"all it","Fragments":["would"]},{"Key":"would do","Fragments":["is","the","it","what"]},{"Key":"is trading","Fragments":["`#("]},{"Key":"trading `#(","Fragments":["..."]},{"Key":"`#( ...","Fragments":[")`"]},{"Key":"... )`","Fragments":["with"]},{"Key":")` with","Fragments":["`[]"]},{"Key":"with `[]","Fragments":["("]},{"Key":"`[] (","Fragments":["...)`"]},{"Key":"( ...)`","Fragments":["it"]},{"Key":"...)` it","Fragments":["wouldn't"]},{"Key":"wouldn't do","Fragments":["readability"]},{"Key":"do readability","Fragments":["any"]},{"Key":"readability any","Fragments":["favour"]},{"Key":"any favour","Fragments":["switching"]},{"Key":"favour switching","Fragments":["to"]},{"Key":"switching to","Fragments":["`letfn`,"]},{"Key":"to `letfn`,","Fragments":["would"]},{"Key":"`letfn`, would","Fragments":["it?"]},{"Key":"about performance","Fragments":["of"]},{"Key":"performance of","Fragments":["reader"]},{"Key":"of reader","Fragments":["macros"]},{"Key":"and anonymous","Fragments":["functions?"]},{"Key":"think `defn-`","Fragments":["makes","is"]},{"Key":"makes not","Fragments":["much"]},{"Key":"not much","Fragments":["sense","we","of"]},{"Key":"much sense","Fragments":["here"]},{"Key":"sense here","Fragments":["since"]},{"Key":"here since","Fragments":["I","that"]},{"Key":"only use","Fragments":["the"]},{"Key":"functions once","Fragments":["inside"]},{"Key":"once inside","Fragments":["of"]},{"Key":"inside of","Fragments":["`count`.","`let`.","`all-upper?`?","a","the","a"]},{"Key":"extracting `count-nucleotides`","Fragments":["(and"]},{"Key":"`count-nucleotides` (and","Fragments":["possibly"]},{"Key":"(and possibly","Fragments":["other"]},{"Key":"possibly other","Fragments":["helpers"]},{"Key":"other helpers","Fragments":["as"]},{"Key":"as well)","Fragments":["to","which"]},{"Key":"well) to","Fragments":["their"]},{"Key":"Or using","Fragments":["`letfn`"]},{"Key":"Wow, that","Fragments":["will"]},{"Key":"am less","Fragments":["than"]},{"Key":"than two","Fragments":["weeks"]},{"Key":"two weeks","Fragments":["to"]},{"Key":"weeks to","Fragments":["clojure"]},{"Key":"lot to","Fragments":["learn","do,","worry","worry","clean","learn."]},{"Key":"learn about","Fragments":["the","Unicode","`transient`","`assert`"]},{"Key":"the language.","Fragments":["This","There's"]},{"Key":"language. This","Fragments":["solution"]},{"Key":"This solution","Fragments":["is","sacrifices","is","is","feels","uses","takes","is","has"]},{"Key":"more force","Fragments":["of"]},{"Key":"force of","Fragments":["will"]},{"Key":"of will","Fragments":["than"]},{"Key":"will than","Fragments":["anything."]},{"Key":"than anything.","Fragments":["Thanks"]},{"Key":"anything. Thanks","Fragments":["for"]},{"Key":"an afterthought,","Fragments":["my"]},{"Key":"afterthought, my","Fragments":["only"]},{"Key":"nitpick would","Fragments":["be"]},{"Key":"that protocol","Fragments":["name","for"]},{"Key":"protocol name","Fragments":["should"]},{"Key":"name should","Fragments":["conform","be","change"]},{"Key":"should conform","Fragments":["to"]},{"Key":"conform to","Fragments":["conventions","the"]},{"Key":"to conventions","Fragments":["(CamelCased)."]},{"Key":" Howdy,","Fragments":["Solo"]},{"Key":"of weeding","Fragments":["out"]},{"Key":"weeding out","Fragments":["special"]},{"Key":"out special","Fragments":["characters"]},{"Key":"just pick","Fragments":["out"]},{"Key":"out words","Fragments":["using"]},{"Key":"words using","Fragments":["`\\w+`."]},{"Key":"using `\\w+`.","Fragments":["Look"]},{"Key":"`\\w+`. Look","Fragments":["at"]},{"Key":"Look at","Fragments":["`frequencies`","some","the"]},{"Key":"much shorter","Fragments":["and","solution"]},{"Key":" Observe","Fragments":["that"]},{"Key":"that map","Fragments":["can"]},{"Key":"map can","Fragments":["also","define","take","be"]},{"Key":"also serve","Fragments":["as"]},{"Key":"serve as","Fragments":["a"]},{"Key":"a function,","Fragments":["like","however,","so","but","and","so"]},{"Key":"function, like","Fragments":["`({:a","this"]},{"Key":"like `({:a","Fragments":["1"]},{"Key":"`({:a 1","Fragments":[":b",":b",":b"]},{"Key":":b 2}","Fragments":[":a)",":a",":c",":a)",":c)"]},{"Key":"2} :a)","Fragments":["=\u0026gt;","=\u003e"]},{"Key":":a) =\u0026gt;","Fragments":["1`."]},{"Key":"=\u0026gt; 1`.","Fragments":["You"]},{"Key":"1`. You","Fragments":["can"]},{"Key":"use `map`","Fragments":["instead","for"]},{"Key":"`map` instead","Fragments":["of","(since"]},{"Key":"pretty good!","Fragments":["One","Easy"]},{"Key":"good! One","Fragments":["style","small","tiny"]},{"Key":"One style","Fragments":["nit:"]},{"Key":"style nit:","Fragments":["I"]},{"Key":"nit: I","Fragments":["find"]},{"Key":"find namespace-qualified","Fragments":["vars"]},{"Key":"namespace-qualified vars","Fragments":["clunky."]},{"Key":"vars clunky.","Fragments":["Why"]},{"Key":"clunky. Why","Fragments":["not"]},{"Key":"not `:require`","Fragments":["`clojure.string`"]},{"Key":"`:require` `clojure.string`","Fragments":["and"]},{"Key":"`clojure.string` and","Fragments":["`:refer`","found"]},{"Key":"and `:refer`","Fragments":["`upper-case`","to"]},{"Key":"`:refer` `upper-case`","Fragments":["and"]},{"Key":"`upper-case` and","Fragments":["`trim-string`?","`(str"]},{"Key":" Enough","Fragments":["of"]},{"Key":"Enough of","Fragments":["that"]},{"Key":"that bikeshedding","Fragments":[":)"]},{"Key":"bikeshedding :)","Fragments":["Move"]},{"Key":":) Move","Fragments":["on."]},{"Key":"assign descriptive","Fragments":["names"]},{"Key":"the `\\T`","Fragments":["and"]},{"Key":"`\\U` characters","Fragments":["so"]},{"Key":"readers understand","Fragments":["what"]},{"Key":"what they","Fragments":["mean?","are.","are.","represent.","meant","were","claimed"]},{"Key":" `get`","Fragments":["in","will"]},{"Key":"in `grade`","Fragments":["is","and","are"]},{"Key":"`grade` is","Fragments":["not"]},{"Key":"necessary -","Fragments":["map","like","while"]},{"Key":"- map","Fragments":["datatype"]},{"Key":"map datatype","Fragments":["extends"]},{"Key":"datatype extends","Fragments":["IFn"]},{"Key":"extends IFn","Fragments":["protocol,","protocol."]},{"Key":"IFn protocol,","Fragments":["so"]},{"Key":"protocol, so","Fragments":["it"]},{"Key":"can work","Fragments":["as","as","as","inside"]},{"Key":"work as","Fragments":["a","a","a","a","it","well.","you","well."]},{"Key":"for retrieving","Fragments":["elements","value"]},{"Key":"retrieving elements","Fragments":["-"]},{"Key":"elements -","Fragments":["accepts"]},{"Key":"- accepts","Fragments":["the"]},{"Key":"accepts the","Fragments":["same"]},{"Key":"same arguments","Fragments":["as"]},{"Key":"arguments as","Fragments":["`get`","`[word1"]},{"Key":"as `get`","Fragments":["modulo"]},{"Key":"`get` modulo","Fragments":["map"]},{"Key":"modulo map","Fragments":["itself."]},{"Key":"map itself.","Fragments":["However,"]},{"Key":"itself. However,","Fragments":["some"]},{"Key":"However, some","Fragments":["may"]},{"Key":"some may","Fragments":["prefer"]},{"Key":"may prefer","Fragments":["to"]},{"Key":"for clarity.","Fragments":["Alternative",";)"]},{"Key":"clarity. Alternative","Fragments":["to"]},{"Key":"Alternative to","Fragments":["`merge-with`"]},{"Key":"to `merge-with`","Fragments":["could"]},{"Key":"`merge-with` could","Fragments":["be"]},{"Key":"be `update-in`","Fragments":["but"]},{"Key":"`update-in` but","Fragments":["then"]},{"Key":"to assure","Fragments":["that"]},{"Key":"assure that","Fragments":["the"]},{"Key":"initial data","Fragments":["structure"]},{"Key":"data structure","Fragments":["is","expands.","tracking"]},{"Key":"structure is","Fragments":["a"]},{"Key":"a vector,","Fragments":["not","as","in"]},{"Key":"vector, not","Fragments":["a"]},{"Key":"list -","Fragments":["I've"]},{"Key":"- I've","Fragments":["personally","overdone"]},{"Key":"I've personally","Fragments":["used"]},{"Key":"personally used","Fragments":["a"]},{"Key":"a composition","Fragments":["of","of","using"]},{"Key":"composition of","Fragments":["`vec`","empty?","split","predicates"]},{"Key":"of `vec`","Fragments":["and"]},{"Key":"`vec` and","Fragments":["`conj`"]},{"Key":"and `conj`","Fragments":["-"]},{"Key":"`conj` -","Fragments":["either"]},{"Key":"- either","Fragments":["way,","the"]},{"Key":"either way,","Fragments":["your","that","I"]},{"Key":"way, your","Fragments":["method"]},{"Key":"your method","Fragments":["is","outside"]},{"Key":"is good.","Fragments":["In"]},{"Key":"In `sort-grade`","Fragments":["you"]},{"Key":"`sort-grade` you","Fragments":["could"]},{"Key":"of destructuring","Fragments":["in"]},{"Key":"destructuring in","Fragments":["argument","`exec-pattern`","your","`parse`"]},{"Key":"in argument","Fragments":["list,"]},{"Key":"argument list,","Fragments":["to"]},{"Key":"list, to","Fragments":["avoid"]},{"Key":"using `first`/`second`.","Fragments":["`sorted-map`"]},{"Key":"`first`/`second`. `sorted-map`","Fragments":["is"]},{"Key":"`sorted-map` is","Fragments":["not","unnecessary."]},{"Key":"not required","Fragments":["-"]},{"Key":"required -","Fragments":["at"]},{"Key":"least per","Fragments":["tests"]},{"Key":"per tests","Fragments":["but"]},{"Key":"it's your","Fragments":["conscious"]},{"Key":"choice. All","Fragments":["in"]},{"Key":"All in","Fragments":["all,"]},{"Key":"in all,","Fragments":["looks"]},{"Key":"all, looks","Fragments":["great"]},{"Key":"great -","Fragments":["the","but","the"]},{"Key":"- the","Fragments":["only","`word`","line","two","only","set","processing","str-to-char","lengthy,","test","`do`"]},{"Key":"would change","Fragments":["is","the","is","is"]},{"Key":"change is","Fragments":["to","that","to","to"]},{"Key":"a pain","Fragments":["in","that"]},{"Key":"pain in","Fragments":["the"]},{"Key":"the ass,","Fragments":["but"]},{"Key":"ass, but","Fragments":["check"]},{"Key":"but check","Fragments":["for","out"]},{"Key":"for identical","Fragments":["word","words."]},{"Key":"identical word","Fragments":["should"]},{"Key":"word should","Fragments":["be"]},{"Key":"be first","Fragments":["-"]},{"Key":"first -","Fragments":["it's"]},{"Key":"- it's","Fragments":["less","not","hard","already","quite"]},{"Key":"it's less","Fragments":["expensive.","efficient."]},{"Key":"I'm definitely","Fragments":["not","a"]},{"Key":"not surprised","Fragments":["in"]},{"Key":"surprised in","Fragments":["the"]},{"Key":"the Python","Fragments":["case,"]},{"Key":"Python case,","Fragments":["but"]},{"Key":"thought clojure","Fragments":["would","had"]},{"Key":"clojure would","Fragments":["fare"]},{"Key":"would fare","Fragments":["better"]},{"Key":"fare better","Fragments":["given"]},{"Key":"better given","Fragments":["the"]},{"Key":"the JVM.","Fragments":["I've"]},{"Key":"JVM. I've","Fragments":["been"]},{"Key":"been spending","Fragments":["a"]},{"Key":"spending a","Fragments":["little"]},{"Key":"much time","Fragments":["lately"]},{"Key":"time lately","Fragments":["studying"]},{"Key":"lately studying","Fragments":["algorithms"]},{"Key":"studying algorithms","Fragments":["and"]},{"Key":"algorithms and","Fragments":["Haskell"]},{"Key":"and Haskell","Fragments":["I"]},{"Key":"Haskell I","Fragments":["guess."]},{"Key":"guess. Thanks","Fragments":["for"]},{"Key":"for actually","Fragments":["measuring!"]},{"Key":" Sort","Fragments":["converts"]},{"Key":"Sort converts","Fragments":["a"]},{"Key":"converts a","Fragments":["sequence"]},{"Key":"sequence to","Fragments":["java","only","a"]},{"Key":"java array","Fragments":["and"]},{"Key":"array and","Fragments":["uses","then","a"]},{"Key":"and uses","Fragments":["native"]},{"Key":"uses native","Fragments":["sort"]},{"Key":"native sort","Fragments":["capability."]},{"Key":"sort capability.","Fragments":["Frequencies,"]},{"Key":"capability. Frequencies,","Fragments":["even"]},{"Key":"Frequencies, even","Fragments":["though"]},{"Key":"though making","Fragments":["extensive"]},{"Key":"making extensive","Fragments":["use"]},{"Key":"extensive use","Fragments":["of"]},{"Key":"of transients","Fragments":["(locally"]},{"Key":"transients (locally","Fragments":["mutable"]},{"Key":"(locally mutable","Fragments":["copies"]},{"Key":"mutable copies","Fragments":["of"]},{"Key":"copies of","Fragments":["data"]},{"Key":"of data","Fragments":["structures),","transforming"]},{"Key":"data structures),","Fragments":["may"]},{"Key":"structures), may","Fragments":["still"]},{"Key":"may still","Fragments":["fall"]},{"Key":"still fall","Fragments":["behind."]},{"Key":"EDIT: What's","Fragments":["more"]},{"Key":"What's more","Fragments":["interesting,"]},{"Key":"more interesting,","Fragments":["the","but"]},{"Key":"interesting, the","Fragments":["same"]},{"Key":"same happens","Fragments":["in"]},{"Key":"happens in","Fragments":["case"]},{"Key":"of Python","Fragments":["(Counter"]},{"Key":"Python (Counter","Fragments":["from"]},{"Key":"(Counter from","Fragments":["collections"]},{"Key":"from collections","Fragments":["vs"]},{"Key":"collections vs","Fragments":["sort"]},{"Key":"vs sort","Fragments":["-"]},{"Key":"sort -","Fragments":["Counter"]},{"Key":"- Counter","Fragments":["being"]},{"Key":"Counter being","Fragments":["implemented"]},{"Key":"being implemented","Fragments":["in"]},{"Key":"implemented in","Fragments":["Python","terms"]},{"Key":"in Python","Fragments":["as"]},{"Key":"Python as","Fragments":["an"]},{"Key":"an object,","Fragments":["sort"]},{"Key":"object, sort","Fragments":["being"]},{"Key":"sort being","Fragments":["a"]},{"Key":"native C","Fragments":["implementation"]},{"Key":"C implementation","Fragments":["under"]},{"Key":"implementation under","Fragments":["the"]},{"Key":"under the","Fragments":["hood).","title","Content"]},{"Key":"call, it","Fragments":["seems"]},{"Key":"seems that","Fragments":["frequencies",":require/:refer","you","yelling","`use`"]},{"Key":"that frequencies","Fragments":["is"]},{"Key":"frequencies is","Fragments":["less"]},{"Key":"efficient than","Fragments":["it","`sort`","frequencies","a","(conj"]},{"Key":"than it","Fragments":["could","reduces.","needs","does","should","should","really","needs"]},{"Key":"could be.","Fragments":["Maybe"]},{"Key":"be. Maybe","Fragments":["it's"]},{"Key":"Maybe it's","Fragments":["just","worth"]},{"Key":"it's just","Fragments":["constant","me.","that","the","an","a","more","a","personal","called","style."]},{"Key":"just constant","Fragments":["factor"]},{"Key":"constant factor","Fragments":["stuff"]},{"Key":"factor stuff","Fragments":["since"]},{"Key":"stuff since","Fragments":["the","map"]},{"Key":"What has","Fragments":["surprised"]},{"Key":"has surprised","Fragments":["me"]},{"Key":"surprised me","Fragments":["most","about"]},{"Key":"me most","Fragments":["with"]},{"Key":"most with","Fragments":["Clojure"]},{"Key":"Clojure thus","Fragments":["far"]},{"Key":"thus far","Fragments":["is"]},{"Key":"far is","Fragments":["that"]},{"Key":"only language","Fragments":["where"]},{"Key":"language where","Fragments":["everything"]},{"Key":"where everything","Fragments":["always","is"]},{"Key":"everything always","Fragments":["worked"]},{"Key":"always worked","Fragments":["on"]},{"Key":"worked on","Fragments":["the"]},{"Key":"first try","Fragments":["(well,","was"]},{"Key":"try (well,","Fragments":["except"]},{"Key":"(well, except","Fragments":["when"]},{"Key":"except when","Fragments":["I"]},{"Key":"to balance","Fragments":["my","my","readability"]},{"Key":"balance my","Fragments":["parens).","parens"]},{"Key":"It just","Fragments":["reads","takes","looks","goes","doesn't","reads","looks"]},{"Key":"just reads","Fragments":["better","slightly"]},{"Key":"reads better","Fragments":["when","here.","than"]},{"Key":"better when","Fragments":["you","moved","using","they"]},{"Key":"you scan","Fragments":["with"]},{"Key":"scan with","Fragments":["your"]},{"Key":"your sight","Fragments":["for"]},{"Key":"sight for","Fragments":["a"]},{"Key":"Very tiny","Fragments":["I"]},{"Key":"tiny I","Fragments":["must"]},{"Key":"must say,","Fragments":["BTW"]},{"Key":"say, BTW","Fragments":["all"]},{"Key":"BTW all","Fragments":["the"]},{"Key":"test .clj","Fragments":["files"]},{"Key":".clj files","Fragments":["downloaded"]},{"Key":"files downloaded","Fragments":["from"]},{"Key":"downloaded from","Fragments":["exercism"]},{"Key":"from exercism","Fragments":["puts"]},{"Key":"exercism puts","Fragments":["`(:require`"]},{"Key":"puts `(:require`","Fragments":["on"]},{"Key":"`(:require` on","Fragments":["the"]},{"Key":"the complexity","Fragments":["does","of","of"]},{"Key":"complexity does","Fragments":["not"]},{"Key":"not reflect","Fragments":["the","the"]},{"Key":"reflect the","Fragments":["real-world","intent"]},{"Key":"the real-world","Fragments":["performance:"]},{"Key":"(def word","Fragments":["\"sadfasdfagrregwfagfregawgfresafafewrf\")"]},{"Key":"user=\u0026gt; (time","Fragments":["(dotimes","(dotimes","(dotimes","(dotimes","(dotimes","(dotimes"]},{"Key":"(time (dotimes","Fragments":["[i","[i","[i","[i","[i","[i","[_","[_"]},{"Key":"(dotimes [i","Fragments":["10000]","10000]","10000]","10000]","10000]","10000]"]},{"Key":"[i 10000]","Fragments":["(doall","(doall","(doall","(frequencies","(frequencies","(frequencies"]},{"Key":"10000] (doall","Fragments":["(sort","(sort","(sort"]},{"Key":"(doall (sort","Fragments":["word))))","word))))","word))))"]},{"Key":" \"Elapsed","Fragments":["time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:","time:"]},{"Key":"\"Elapsed time:","Fragments":["99.122541","96.896736","95.14145","208.046098","208.561108","201.423851","7031.555459","8488.025604","7884.769994","393.312562","524.314041","387.761321","19087.936434","11479.189682","11788.19571","14057.544615","0.110068","0.097038","63.334609","26.054067","16.048","1.17"]},{"Key":"time: 99.122541","Fragments":["msecs\""]},{"Key":"time: 96.896736","Fragments":["msecs\""]},{"Key":"time: 95.14145","Fragments":["msecs\""]},{"Key":"10000] (frequencies","Fragments":["word)))","word)))","word)))"]},{"Key":"time: 208.046098","Fragments":["msecs\""]},{"Key":"time: 208.561108","Fragments":["msecs\""]},{"Key":"time: 201.423851","Fragments":["msecs\""]},{"Key":"why your","Fragments":["test","first","solution"]},{"Key":"your test","Fragments":["methods","functions","suite"]},{"Key":"test methods","Fragments":["are"]},{"Key":"It looks","Fragments":["good.","like","like","like","like","like","like","like","great","like:","good.","good","like","good.","good","very","better","super"]},{"Key":"good. The","Fragments":["only","only","only"]},{"Key":"only check","Fragments":["I"]},{"Key":"check I","Fragments":["would"]},{"Key":"add would","Fragments":["be"]},{"Key":"that excludes","Fragments":["candidates"]},{"Key":"excludes candidates","Fragments":["which"]},{"Key":"candidates which","Fragments":["are"]},{"Key":"word -","Fragments":["it's"]},{"Key":"not reflected","Fragments":["in"]},{"Key":"in tests","Fragments":["but",":)"]},{"Key":"but those","Fragments":["are"]},{"Key":"not anagrams","Fragments":["per"]},{"Key":"anagrams per","Fragments":["definition."]},{"Key":" @roxanne","Fragments":["Yeah,"]},{"Key":"@roxanne Yeah,","Fragments":["good"]},{"Key":"Yeah, good","Fragments":["point,","call."]},{"Key":"you also","Fragments":["have","pointed"]},{"Key":"also have","Fragments":["`if-let`","a","been"]},{"Key":"have `if-let`","Fragments":["at"]},{"Key":"`if-let` at","Fragments":["your"]},{"Key":"The use","Fragments":["of","of","of","of","of"]},{"Key":"of (first","Fragments":["(reverse"]},{"Key":"(first (reverse","Fragments":["txt))"]},{"Key":"(reverse txt))","Fragments":["seems"]},{"Key":"txt)) seems","Fragments":["unidiomatic."]},{"Key":"seems unidiomatic.","Fragments":["Better"]},{"Key":"unidiomatic. Better","Fragments":["would"]},{"Key":"Better would","Fragments":["be"]},{"Key":"be (last","Fragments":["txt)."]},{"Key":"Why don't","Fragments":["you"]},{"Key":"you wait","Fragments":["for"]},{"Key":"some nitpicking","Fragments":["before"]},{"Key":"nitpicking before","Fragments":["moving"]},{"Key":"before moving","Fragments":["on?"]},{"Key":"moving on?","Fragments":["It"]},{"Key":"on? It","Fragments":["may"]},{"Key":"may take","Fragments":["some","some"]},{"Key":"some time,","Fragments":["but"]},{"Key":"time, but","Fragments":["I","I","decided"]},{"Key":"will review","Fragments":["some"]},{"Key":"review some","Fragments":["code"]},{"Key":"some code","Fragments":["every","here.","duplication"]},{"Key":"code every","Fragments":["day."]},{"Key":"every day.","Fragments":["And"]},{"Key":"day. And","Fragments":["your's"]},{"Key":"And your's","Fragments":["has"]},{"Key":"your's has","Fragments":["some"]},{"Key":"some things","Fragments":["one","that","I","like","=)"]},{"Key":"things one","Fragments":["could","might"]},{"Key":"one could","Fragments":["argue","refactor"]},{"Key":"could argue","Fragments":["bout."]},{"Key":" `ref`","Fragments":["is"]},{"Key":"`ref` is","Fragments":["a"]},{"Key":"an overkill","Fragments":["here","in"]},{"Key":"overkill here","Fragments":["-"]},{"Key":"- `atom`","Fragments":["would"]},{"Key":"`atom` would","Fragments":["suffice.","work"]},{"Key":"suffice. Otherwise,","Fragments":["looks"]},{"Key":" Aliasing","Fragments":["seems"]},{"Key":"Aliasing seems","Fragments":["better"]},{"Key":"seems better","Fragments":["in"]},{"Key":"case. However,","Fragments":["if"]},{"Key":"However, if","Fragments":["you","there"]},{"Key":"will need","Fragments":["a","to"]},{"Key":"in you","Fragments":["public","code,"]},{"Key":"you public","Fragments":["API"]},{"Key":"API that","Fragments":["is"]},{"Key":"is already","Fragments":["used","lowercased,","very","a","a","small","a","done"]},{"Key":"clojure core,","Fragments":["you"]},{"Key":"core, you","Fragments":["can"]},{"Key":"the warning","Fragments":["by","about","about"]},{"Key":"warning by","Fragments":["using"]},{"Key":"using `(:refer-clojure","Fragments":[":exclude"]},{"Key":"`(:refer-clojure :exclude","Fragments":["[...])`"]},{"Key":":exclude [...])`","Fragments":["in"]},{"Key":"[...])` in","Fragments":["the"]},{"Key":"In order","Fragments":["to","to"]},{"Key":"the excluded","Fragments":["core"]},{"Key":"excluded core","Fragments":["bindings"]},{"Key":"core bindings","Fragments":["from"]},{"Key":"bindings from","Fragments":["current"]},{"Key":"from current","Fragments":["namespace"]},{"Key":"current namespace","Fragments":["(if","so"]},{"Key":"namespace (if","Fragments":["the"]},{"Key":"(if the","Fragments":["need"]},{"Key":"need be),","Fragments":["you"]},{"Key":"be), you","Fragments":["just"]},{"Key":"them through","Fragments":["fully"]},{"Key":"through fully","Fragments":["qualified"]},{"Key":"qualified namespace,","Fragments":["like"]},{"Key":" @manley","Fragments":["I"]},{"Key":"@manley I","Fragments":["did"]},{"Key":"did have","Fragments":["a"]},{"Key":"go at","Fragments":["using","rereading","a","it","the","ensuring","the"]},{"Key":"using `:refer`","Fragments":["but"]},{"Key":"`:refer` but","Fragments":["got"]},{"Key":"about overriding","Fragments":["an","the"]},{"Key":"overriding an","Fragments":["existing"]},{"Key":"an existing","Fragments":["`replace`","function"]},{"Key":"existing `replace`","Fragments":["symbol."]},{"Key":"`replace` symbol.","Fragments":["I"]},{"Key":"symbol. I","Fragments":["guess"]},{"Key":"it’s safe","Fragments":["enough"]},{"Key":"safe enough","Fragments":["in"]},{"Key":"enough in","Fragments":["this","`nucleotide-counts`"]},{"Key":" @micheal","Fragments":["I"]},{"Key":"@micheal I","Fragments":["already"]},{"Key":"I already","Fragments":["noticed","love"]},{"Key":"already noticed","Fragments":[";)"]},{"Key":" @mckayla","Fragments":["D'oh."]},{"Key":"@mckayla D'oh.","Fragments":["Should've"]},{"Key":"D'oh. Should've","Fragments":["really"]},{"Key":"Should've really","Fragments":["thought"]},{"Key":"really thought","Fragments":["of"]},{"Key":"that. Thanks","Fragments":["for"]},{"Key":"using `let`","Fragments":["over","destructuring","to","just"]},{"Key":"`let` over","Fragments":["your"]},{"Key":"over your","Fragments":["functions"]},{"Key":"your functions","Fragments":["to",":)","is"]},{"Key":"avoid repeating","Fragments":["tasks","`random-letter`","those.","the"]},{"Key":"repeating tasks","Fragments":["-"]},{"Key":"tasks -","Fragments":["helped"]},{"Key":"- helped","Fragments":["me"]},{"Key":"me passing","Fragments":["@johnathon's"]},{"Key":"passing @johnathon's","Fragments":["watch"]},{"Key":"@johnathon's watch","Fragments":[";)"]},{"Key":"with zoldar","Fragments":["but"]},{"Key":"zoldar but","Fragments":["want"]},{"Key":"but want","Fragments":["to"]},{"Key":"use vars","Fragments":["instead"]},{"Key":"vars instead","Fragments":["of"]},{"Key":"raw strings","Fragments":["here.","are"]},{"Key":"strings here.","Fragments":["You"]},{"Key":"You also","Fragments":["could","might","have","don't"]},{"Key":"also could","Fragments":["shorten"]},{"Key":"could shorten","Fragments":["`string/replace`","it"]},{"Key":"shorten `string/replace`","Fragments":["to"]},{"Key":"`string/replace` to","Fragments":["`replace`"]},{"Key":"to `replace`","Fragments":["by","a"]},{"Key":"`replace` by","Fragments":["using"]},{"Key":"Yeah, embarrassing","Fragments":["to"]},{"Key":"embarrassing to","Fragments":["admit,"]},{"Key":"to admit,","Fragments":["but"]},{"Key":"admit, but","Fragments":["my"]},{"Key":"but my","Fragments":["regex-foo","REPL","re-fu","Ruby"]},{"Key":"my regex-foo","Fragments":["it"]},{"Key":"regex-foo it","Fragments":["too"]},{"Key":"too weak","Fragments":["to"]},{"Key":"weak to","Fragments":["decipher"]},{"Key":"decipher it","Fragments":["without"]},{"Key":"without resorting","Fragments":["to"]},{"Key":"some external","Fragments":["spec."]},{"Key":"external spec.","Fragments":["Other"]},{"Key":"spec. Other","Fragments":["than"]},{"Key":"that, there's","Fragments":["also"]},{"Key":"there's also","Fragments":["a","`clojure.string`","`condp`."]},{"Key":"also a","Fragments":["problem","great","function","shorthand","pretty","string","string","specific","built","shorter,","bit","few"]},{"Key":"problem that","Fragments":["this","you're","it"]},{"Key":"this method","Fragments":["is"]},{"Key":"is limited","Fragments":["to"]},{"Key":"limited to","Fragments":["the","what's"]},{"Key":"the cases","Fragments":["that","that","is"]},{"Key":"cases that","Fragments":["you","you"]},{"Key":"seen in","Fragments":["tests.","this","other","the","the","the","map"]},{"Key":"in tests.","Fragments":["What"]},{"Key":"tests. What","Fragments":["really"]},{"Key":"What really","Fragments":["matters,"]},{"Key":"really matters,","Fragments":["are"]},{"Key":"matters, are","Fragments":["numbers,"]},{"Key":"are numbers,","Fragments":["no"]},{"Key":"numbers, no","Fragments":["matter"]},{"Key":"matter with","Fragments":["what","your"]},{"Key":"with what","Fragments":["kind"]},{"Key":"of delimiters,","Fragments":["how"]},{"Key":"delimiters, how","Fragments":["many"]},{"Key":"many etc.","Fragments":["I"]},{"Key":"etc. I","Fragments":["would"]},{"Key":"would rather","Fragments":["extract","use","use","go","have","avoid"]},{"Key":"rather extract","Fragments":["numeric"]},{"Key":"extract numeric","Fragments":["characters"]},{"Key":"numeric characters","Fragments":["from"]},{"Key":"characters from","Fragments":["the","the","words"]},{"Key":"or remove","Fragments":["all","it","the"]},{"Key":"remove all","Fragments":["the","that","exercise"]},{"Key":"the non-numeric","Fragments":["ones."]},{"Key":" After","Fragments":["a","sleeping","a","writing","fiddling","you","submitting","reading","that,","feedback","further"]},{"Key":"After a","Fragments":["few","couple"]},{"Key":"few iterations,","Fragments":["`decompose`"]},{"Key":"iterations, `decompose`","Fragments":["still"]},{"Key":"`decompose` still","Fragments":["feels"]},{"Key":"still feels","Fragments":["wrong.","like","a"]},{"Key":"hand, bludgeoning","Fragments":["this"]},{"Key":"bludgeoning this","Fragments":["problem"]},{"Key":"huge regex","Fragments":["feels"]},{"Key":"regex feels","Fragments":["oh-so-right"]},{"Key":"feels oh-so-right","Fragments":[":)"]},{"Key":"clojure.string so","Fragments":["that","that"]},{"Key":"they don't","Fragments":["have","check","have"]},{"Key":"be fully","Fragments":["qualified."]},{"Key":"(defn add","Fragments":["[db"]},{"Key":"add [db","Fragments":["name"]},{"Key":"[db name","Fragments":["score]"]},{"Key":" (update-in","Fragments":["db"]},{"Key":"(update-in db","Fragments":["[score]"]},{"Key":"[score] (fn","Fragments":["[lst]"]},{"Key":"(fn [lst]","Fragments":["(vec"]},{"Key":"[lst] (vec","Fragments":["(conj"]},{"Key":"(vec (conj","Fragments":["lst"]},{"Key":"(conj lst","Fragments":["name)))))"]},{"Key":"best I","Fragments":["could"]},{"Key":"get with","Fragments":["`update-in`."]},{"Key":"with `update-in`.","Fragments":["Am"]},{"Key":"`update-in`. Am","Fragments":["I"]},{"Key":" `and`","Fragments":["formatting"]},{"Key":"`and` formatting","Fragments":["looks"]},{"Key":"formatting looks","Fragments":["good."]},{"Key":"only tiny","Fragments":["nitpick"]},{"Key":"nitpick -","Fragments":["please","however"]},{"Key":"please add","Fragments":["line"]},{"Key":"add line","Fragments":["break"]},{"Key":"line break","Fragments":["before"]},{"Key":"break before","Fragments":["`(:require...`"]},{"Key":"before `(:require...`","Fragments":[":)"]},{"Key":"Ah, gotcha.","Fragments":["Good"]},{"Key":"gotcha. Good","Fragments":["idea."]},{"Key":"had some","Fragments":["trouble"]},{"Key":"some trouble","Fragments":["deciding"]},{"Key":"trouble deciding","Fragments":["on"]},{"Key":"deciding on","Fragments":["the"]},{"Key":"style for","Fragments":["the","you?","(cond)"]},{"Key":"the long","Fragments":["`(and","`(clojure.string/\u003cmethod\u003e`"]},{"Key":"long `(and","Fragments":["...)`"]},{"Key":"`(and ...)`","Fragments":["in"]},{"Key":"...)` in","Fragments":["`clean-number`,"]},{"Key":"in `clean-number`,","Fragments":["since"]},{"Key":"`clean-number`, since","Fragments":["I"]},{"Key":"too long","Fragments":["for","to",":(","and","name,"]},{"Key":"long for","Fragments":["one"]},{"Key":"line -","Fragments":["so","tuck"]},{"Key":"any ideas","Fragments":["for","what"]},{"Key":"ideas for","Fragments":["improvements"]},{"Key":"for improvements","Fragments":["of"]},{"Key":"improvements of","Fragments":["this,"]},{"Key":"of this,","Fragments":["I'd","in"]},{"Key":"this, I'd","Fragments":["like"]},{"Key":" Damn,","Fragments":["I"]},{"Key":"Damn, I","Fragments":["thought"]},{"Key":"thought I","Fragments":["caught","could","tried","needed"]},{"Key":"I caught","Fragments":["all","that","your"]},{"Key":"caught all","Fragments":["those"]},{"Key":"all those","Fragments":["cases"]},{"Key":"those cases","Fragments":["last","into"]},{"Key":"cases last","Fragments":["night."]},{"Key":"last night.","Fragments":["Should"]},{"Key":"night. Should","Fragments":["have"]},{"Key":"Should have","Fragments":["looked","followed","realised"]},{"Key":"have looked","Fragments":["again.","like:","for","at"]},{"Key":"looked again.","Fragments":["Thanks."]},{"Key":"wouldn't call","Fragments":["silence"]},{"Key":"call silence","Fragments":["\"nonsense\"."]},{"Key":"repeating `random-letter`","Fragments":["and"]},{"Key":"`random-letter` and","Fragments":["`random-digit`"]},{"Key":"and `random-digit`","Fragments":["calls?"]},{"Key":" `ref`s","Fragments":["make"]},{"Key":"`ref`s make","Fragments":["sense"]},{"Key":"in cases","Fragments":["where","of"]},{"Key":"where atomic","Fragments":["transactions"]},{"Key":"atomic transactions","Fragments":["with"]},{"Key":"transactions with","Fragments":["multiple"]},{"Key":"with multiple","Fragments":["refs","arguments","filters","collections.","parameters","sequences"]},{"Key":"multiple refs","Fragments":["are","are"]},{"Key":"refs are","Fragments":["necessary","modified","involved."]},{"Key":"are necessary","Fragments":["-"]},{"Key":"in cassical","Fragments":["\"account"]},{"Key":"cassical \"account","Fragments":["balance\""]},{"Key":"\"account balance\"","Fragments":["examples"]},{"Key":"balance\" examples","Fragments":["-"]},{"Key":"examples -","Fragments":["where"]},{"Key":"- where","Fragments":["a"]},{"Key":"where a","Fragments":["certain","word"]},{"Key":"a certain","Fragments":["amount","zen","cost.","function"]},{"Key":"certain amount","Fragments":["is"]},{"Key":"amount is","Fragments":["subtracted"]},{"Key":"is subtracted","Fragments":["from"]},{"Key":"subtracted from","Fragments":["one"]},{"Key":"from one","Fragments":["account","account"]},{"Key":"one account","Fragments":["and","to"]},{"Key":"account and","Fragments":["added","taking"]},{"Key":"and added","Fragments":["to","some"]},{"Key":" Makes","Fragments":["sense!","it"]},{"Key":"Makes sense!","Fragments":["The"]},{"Key":"sense! The","Fragments":["perils"]},{"Key":"The perils","Fragments":["of"]},{"Key":"perils of","Fragments":["diving"]},{"Key":"of diving","Fragments":["into"]},{"Key":"diving into","Fragments":["a"]},{"Key":"language head-first","Fragments":["through"]},{"Key":"head-first through","Fragments":["exercism.io,"]},{"Key":"through exercism.io,","Fragments":["rather"]},{"Key":"exercism.io, rather","Fragments":["than"]},{"Key":"than learning","Fragments":["it"]},{"Key":"learning it","Fragments":["in"]},{"Key":"more structured","Fragments":["way..."]},{"Key":"structured way...","Fragments":["sometimes"]},{"Key":"way... sometimes","Fragments":["I"]},{"Key":"sometimes I","Fragments":["just"]},{"Key":"just end","Fragments":["up"]},{"Key":"up using","Fragments":["whatever","regular","two","2","the"]},{"Key":"using whatever","Fragments":["bits"]},{"Key":"whatever bits","Fragments":["and"]},{"Key":"bits and","Fragments":["pieces"]},{"Key":"and pieces","Fragments":["of"]},{"Key":"use `update-in`","Fragments":["instead","to"]},{"Key":"`update-in` instead","Fragments":["of"]},{"Key":"of `merge-with`.","Fragments":["The"]},{"Key":"`merge-with`. The","Fragments":["only"]},{"Key":"only caveat","Fragments":["is"]},{"Key":"caveat is","Fragments":["the"]},{"Key":"necessity to","Fragments":["ensure","make","realign"]},{"Key":"that values","Fragments":["are"]},{"Key":"values are","Fragments":["vectors,","separated","evaluated"]},{"Key":"are vectors,","Fragments":["not"]},{"Key":"vectors, not","Fragments":["lists"]},{"Key":"not lists","Fragments":["-"]},{"Key":"lists -","Fragments":["that"]},{"Key":"handled by","Fragments":["composing"]},{"Key":"by composing","Fragments":["vec"]},{"Key":"composing vec","Fragments":["with"]},{"Key":"vec with","Fragments":["conj,"]},{"Key":"with conj,","Fragments":["lik"]},{"Key":"conj, lik","Fragments":["`(comp"]},{"Key":"lik `(comp","Fragments":["vec"]},{"Key":"`(comp vec","Fragments":["conj)`."]},{"Key":"vec conj)`.","Fragments":["Map"]},{"Key":"conj)`. Map","Fragments":["itself"]},{"Key":"Map itself","Fragments":["can"]},{"Key":"itself can","Fragments":["work","work"]},{"Key":"function working","Fragments":["the"]},{"Key":"working the","Fragments":["same","way"]},{"Key":"way as","Fragments":["`get`.","explaining"]},{"Key":"as `get`.","Fragments":["However"]},{"Key":"`get`. However","Fragments":["that's"]},{"Key":"However that's","Fragments":["a"]},{"Key":"preference, because","Fragments":["for"]},{"Key":"because for","Fragments":["example"]},{"Key":"of sets,","Fragments":["additional"]},{"Key":"sets, additional","Fragments":["`not-found`"]},{"Key":"additional `not-found`","Fragments":["argument"]},{"Key":"`not-found` argument","Fragments":["is"]},{"Key":"not present","Fragments":["-","in"]},{"Key":"present -","Fragments":["that's"]},{"Key":"of inconsistency","Fragments":["in"]},{"Key":"inconsistency in","Fragments":["that","the"]},{"Key":"that regard","Fragments":["-"]},{"Key":"regard -","Fragments":["or"]},{"Key":"- or","Fragments":["maybe"]},{"Key":"or maybe","Fragments":["there's","even","you"]},{"Key":"maybe there's","Fragments":["some","a"]},{"Key":"there's some","Fragments":["other","inefficiency"]},{"Key":"other reasoning","Fragments":["behind"]},{"Key":"reasoning behind","Fragments":["that"]},{"Key":"behind that","Fragments":["which"]},{"Key":"that which","Fragments":["I'm","isn't","I"]},{"Key":"which I'm","Fragments":["not","not"]},{"Key":" Used","Fragments":["atom","a","a"]},{"Key":"Used atom","Fragments":["instead"]},{"Key":"atom instead","Fragments":["of"]},{"Key":"of ref","Fragments":["per"]},{"Key":"ref per","Fragments":["suggestion"]},{"Key":"per suggestion","Fragments":["on"]},{"Key":"on last","Fragments":["submission."]},{"Key":"last submission.","Fragments":["I"]},{"Key":"still don't","Fragments":["fully"]},{"Key":"don't fully","Fragments":["understand","grok","follow"]},{"Key":"fully understand","Fragments":["when"]},{"Key":"understand when","Fragments":["to"]},{"Key":"when to","Fragments":["use","inline","`use`","do"]},{"Key":"use one","Fragments":["over","of"]},{"Key":"one over","Fragments":["the"]},{"Key":"the other,","Fragments":["but","especially"]},{"Key":"other, but","Fragments":["I"]},{"Key":"to concede","Fragments":["that","that"]},{"Key":"concede that","Fragments":["the","maybe"]},{"Key":"is shorter","Fragments":["and","than","written","and"]},{"Key":"really understand","Fragments":["the","why.","the"]},{"Key":"of ref.","Fragments":["Was"]},{"Key":"ref. Was","Fragments":["just"]},{"Key":"Was just","Fragments":["delighted"]},{"Key":"just delighted","Fragments":["to"]},{"Key":"find something","Fragments":["that","for"]},{"Key":"that worked.","Fragments":["I'll"]},{"Key":"worked. I'll","Fragments":["have"]},{"Key":"at rereading","Fragments":["the"]},{"Key":"rereading the","Fragments":["literature..."]},{"Key":"probably could","Fragments":["do"]},{"Key":"just with","Fragments":["an"]},{"Key":"an atom.","Fragments":["ref"]},{"Key":"atom. ref","Fragments":["is"]},{"Key":"ref is","Fragments":["a"]},{"Key":"a slight","Fragments":["overkill","change","vowel"]},{"Key":"slight overkill","Fragments":["for"]},{"Key":"that use","Fragments":["case.","string's","and"]},{"Key":" Improved","Fragments":["clarity",":-)"]},{"Key":"Improved clarity","Fragments":["of"]},{"Key":"clarity of","Fragments":["NUMBERS","the"]},{"Key":"of NUMBERS","Fragments":["and"]},{"Key":"NUMBERS and","Fragments":["UC"]},{"Key":"and UC","Fragments":["definitions"]},{"Key":"UC definitions","Fragments":["per"]},{"Key":"definitions per","Fragments":["recommendations"]},{"Key":"per recommendations","Fragments":["from"]},{"Key":"recommendations from","Fragments":["rubysolo"]},{"Key":"from rubysolo","Fragments":[";)"]},{"Key":" @joesph","Fragments":["I'm"]},{"Key":"@joesph I'm","Fragments":["sorry,"]},{"Key":"I'm sorry,","Fragments":["but"]},{"Key":"sorry, but","Fragments":["could"]},{"Key":"you bit","Fragments":["more"]},{"Key":"more specific?","Fragments":["I'm"]},{"Key":"specific? I'm","Fragments":["new"]},{"Key":"know much","Fragments":["about"]},{"Key":"about being","Fragments":["modular"]},{"Key":"being modular","Fragments":["in"]},{"Key":"modular in","Fragments":["Clojure."]},{"Key":"Clojure. Do","Fragments":["you"]},{"Key":"like put","Fragments":["the"]},{"Key":"responses string","Fragments":["in"]},{"Key":"in constant","Fragments":["or"]},{"Key":"constant or","Fragments":["something?"]},{"Key":" @mario","Fragments":["I"]},{"Key":"@mario I","Fragments":["know"]},{"Key":"know it's","Fragments":["only","a","a"]},{"Key":"it's only","Fragments":["a","one"]},{"Key":"a toy","Fragments":["example,"]},{"Key":"toy example,","Fragments":["but"]},{"Key":"example, but","Fragments":["if","it's"]},{"Key":"you imagine","Fragments":["it's"]},{"Key":"imagine it's","Fragments":["part"]},{"Key":"it's part","Fragments":["of"]},{"Key":"a bigger","Fragments":["system,","program,"]},{"Key":"bigger system,","Fragments":["how"]},{"Key":"system, how","Fragments":["would"]},{"Key":"you support","Fragments":["more"]},{"Key":"support more","Fragments":["than"]},{"Key":"one set","Fragments":["of","of"]},{"Key":"of responses?","Fragments":["At"]},{"Key":"responses? At","Fragments":["the"]},{"Key":"At the","Fragments":["moment,","moment","cost","time","time","moment"]},{"Key":"the moment,","Fragments":["the"]},{"Key":"moment, the","Fragments":["algorithm"]},{"Key":"the algorithm","Fragments":["and"]},{"Key":"algorithm and","Fragments":["the"]},{"Key":"the data","Fragments":["are","we're","structures","in","is","using","and","structure"]},{"Key":"data are","Fragments":["tightly"]},{"Key":"are tightly","Fragments":["coupled"]},{"Key":"tightly coupled","Fragments":["in"]},{"Key":"coupled in","Fragments":["the"]},{"Key":"cond so,","Fragments":["as"]},{"Key":"so, as","Fragments":["an"]},{"Key":"an exercise,","Fragments":["I'm"]},{"Key":"exercise, I'm","Fragments":["asking"]},{"Key":"I'm asking","Fragments":["if"]},{"Key":"asking if","Fragments":["there"]},{"Key":"is any","Fragments":["way"]},{"Key":"to separate","Fragments":["them?","non-public","configuration","things","the","the","out","the","them","check","the"]},{"Key":" @nicolette","Fragments":["Thanks","Is"]},{"Key":"@nicolette Thanks","Fragments":["for"]},{"Key":"the suggestions,","Fragments":["I","@amie"]},{"Key":"suggestions, I","Fragments":["don't"]},{"Key":"that method","Fragments":["definition","to"]},{"Key":"method definition","Fragments":["in"]},{"Key":"definition in","Fragments":["clojure"]},{"Key":"clojure could","Fragments":["use"]},{"Key":"@nicolette Is","Fragments":["this"]},{"Key":"this not","Fragments":["extensible"]},{"Key":"not extensible","Fragments":["enough?"]},{"Key":"Apparently I","Fragments":["forgot"]},{"Key":"save before","Fragments":["I"]},{"Key":"submitted this!","Fragments":["Please"]},{"Key":"this! Please","Fragments":["ignore."]},{"Key":"makes for","Fragments":["a","a","a","the"]},{"Key":"much cleaner","Fragments":["solution.","than","and","indeed.","than","with"]},{"Key":"need `pair-elements`","Fragments":["at"]},{"Key":"`pair-elements` at","Fragments":["all."]},{"Key":"all. Just","Fragments":["make"]},{"Key":"Just make","Fragments":["`hamming-value`"]},{"Key":"make `hamming-value`","Fragments":["accept"]},{"Key":"`hamming-value` accept","Fragments":["two"]},{"Key":"accept two","Fragments":["arguments."]},{"Key":"exercise really","Fragments":["required"]},{"Key":"really required","Fragments":["making"]},{"Key":"required making","Fragments":["a"]},{"Key":"true guarantee","Fragments":["that"]},{"Key":"guarantee that","Fragments":["the","the"]},{"Key":"is unique…","Fragments":["if"]},{"Key":"unique… if","Fragments":["it"]},{"Key":"it were","Fragments":["really","in"]},{"Key":"were really","Fragments":["the"]},{"Key":"the case,","Fragments":["you'd"]},{"Key":"case, you'd","Fragments":["be","just"]},{"Key":"you'd be","Fragments":["better"]},{"Key":"better off","Fragments":["not","scanning"]},{"Key":"off not","Fragments":["generating"]},{"Key":"not generating","Fragments":["it"]},{"Key":"generating it","Fragments":["randomly"]},{"Key":"it randomly","Fragments":["at"]},{"Key":"randomly at","Fragments":["all!"]},{"Key":"at all!","Fragments":[":)"]},{"Key":"Agreed that","Fragments":["the"]},{"Key":"is questionable","Fragments":["because"]},{"Key":"questionable because","Fragments":["of"]},{"Key":"name being","Fragments":["so","being"]},{"Key":"being so","Fragments":["short."]},{"Key":"fully grok","Fragments":["your"]},{"Key":"grok your","Fragments":["second"]},{"Key":"second paragraph","Fragments":["yet"]},{"Key":"paragraph yet","Fragments":["-"]},{"Key":"yet -","Fragments":["there's"]},{"Key":"- there's","Fragments":["nothing","`not=`","also","already"]},{"Key":"nothing in","Fragments":["the","the"]},{"Key":"the specification","Fragments":["and/or","is"]},{"Key":"specification and/or","Fragments":["test"]},{"Key":"and/or test","Fragments":["about"]},{"Key":"test about","Fragments":["number"]},{"Key":"about number","Fragments":["being"]},{"Key":"number being","Fragments":["serial.","tested."]},{"Key":"being serial.","Fragments":["In"]},{"Key":"serial. In","Fragments":["a"]},{"Key":"In a","Fragments":["more","conditional,","C-ish","similar","small","few"]},{"Key":"more real-world","Fragments":["case,"]},{"Key":"real-world case,","Fragments":["maybe"]},{"Key":"case, maybe","Fragments":["some"]},{"Key":"maybe some","Fragments":["sort"]},{"Key":"some sort","Fragments":["of","of","of","of","of","of"]},{"Key":"of one-way","Fragments":["hash"]},{"Key":"one-way hash","Fragments":["would"]},{"Key":"hash would","Fragments":["do","be"]},{"Key":" Indeed","Fragments":["using","the"]},{"Key":"Indeed using","Fragments":["the"]},{"Key":"same function","Fragments":["of","numerous","is"]},{"Key":"function of","Fragments":["digits","some","value","its"]},{"Key":"of digits","Fragments":["makes"]},{"Key":"digits makes","Fragments":["the"]},{"Key":"Yes, of","Fragments":["course,"]},{"Key":"course, but","Fragments":["I","parsing","it's"]},{"Key":"the degree","Fragments":["of","of"]},{"Key":"degree of","Fragments":["uniqueness","uniqueness.","descriptiveness"]},{"Key":"of uniqueness","Fragments":["required"]},{"Key":"uniqueness required","Fragments":["is"]},{"Key":"required is","Fragments":["to"]},{"Key":"simply generate","Fragments":["a"]},{"Key":"a random","Fragments":["name","name","tribe"]},{"Key":"random name","Fragments":["and","is"]},{"Key":"name and","Fragments":["assume","the","argument","the","arg","a","one","generate","add","is"]},{"Key":"and assume","Fragments":["there"]},{"Key":"assume there","Fragments":["is"]},{"Key":"a collision.","Fragments":["Sure,"]},{"Key":"collision. Sure,","Fragments":["this"]},{"Key":"Sure, this","Fragments":["isn't"]},{"Key":"this isn't","Fragments":["very","correct","really"]},{"Key":"isn't very","Fragments":["practical,"]},{"Key":"very practical,","Fragments":["but"]},{"Key":"practical, but","Fragments":["neither"]},{"Key":"but neither","Fragments":["is"]},{"Key":"neither is","Fragments":["using"]},{"Key":"using such","Fragments":["a"]},{"Key":"small random","Fragments":["number."]},{"Key":"A true","Fragments":["serial"]},{"Key":"true serial","Fragments":["number","number."]},{"Key":"serial number","Fragments":["would","and"]},{"Key":"number would","Fragments":["be"]},{"Key":"be sequential","Fragments":["(as"]},{"Key":"sequential (as","Fragments":["implied"]},{"Key":"(as implied","Fragments":["by"]},{"Key":"implied by","Fragments":["the","the","the"]},{"Key":"the name).","Fragments":["A"]},{"Key":"name). A","Fragments":["deterministic"]},{"Key":"A deterministic","Fragments":["way"]},{"Key":"deterministic way","Fragments":["to","of"]},{"Key":"to obfuscate","Fragments":["a"]},{"Key":"obfuscate a","Fragments":["serial"]},{"Key":"a serial","Fragments":["number","number,"]},{"Key":"number and","Fragments":["make","use"]},{"Key":"make valid","Fragments":["serial"]},{"Key":"valid serial","Fragments":["numbers"]},{"Key":"serial numbers","Fragments":["difficult"]},{"Key":"numbers difficult","Fragments":["to"]},{"Key":"difficult to","Fragments":["guess","make","understand.","adapt!","understand.","figure","parse","understand.","decipher"]},{"Key":"guess would","Fragments":["be"]},{"Key":"use authenticated","Fragments":["encryption"]},{"Key":"authenticated encryption","Fragments":["to"]},{"Key":"encryption to","Fragments":["encrypt"]},{"Key":"to encrypt","Fragments":["the"]},{"Key":"encrypt the","Fragments":["true"]},{"Key":"improve your","Fragments":["name"]},{"Key":"your name","Fragments":["generation"]},{"Key":"name generation","Fragments":["scheme","using"]},{"Key":"generation scheme","Fragments":["if"]},{"Key":"scheme if","Fragments":["you"]},{"Key":"used `(random-string-range","Fragments":["3"]},{"Key":"`(random-string-range 3","Fragments":["\\0"]},{"Key":"3 \\0","Fragments":["\\9)`"]},{"Key":"\\0 \\9)`","Fragments":["for"]},{"Key":"\\9)` for","Fragments":["the"]},{"Key":" Tests","Fragments":["for"]},{"Key":"Tests for","Fragments":["constructor"]},{"Key":"for constructor","Fragments":["function"]},{"Key":"constructor function","Fragments":["and"]},{"Key":"and reset-name","Fragments":["function"]},{"Key":"reset-name function","Fragments":["suggest"]},{"Key":"function suggest","Fragments":["that"]},{"Key":"be some","Fragments":["degree","for","better","wasted","dogmatic","idioms"]},{"Key":"some degree","Fragments":["of"]},{"Key":"Regarding randomness","Fragments":["-"]},{"Key":"randomness -","Fragments":["well,"]},{"Key":"- well,","Fragments":["maybe"]},{"Key":"well, maybe","Fragments":["I"]},{"Key":"maybe I","Fragments":["have","should)"]},{"Key":"have overdone","Fragments":["that"]},{"Key":"overdone that","Fragments":["and"]},{"Key":"that and","Fragments":["could","see"]},{"Key":"and could","Fragments":["just","be","be","just","probably"]},{"Key":"just settle","Fragments":["on"]},{"Key":"settle on","Fragments":["a"]},{"Key":"a deterministic","Fragments":["way"]},{"Key":"of generating","Fragments":["names","functions"]},{"Key":"generating names","Fragments":["with"]},{"Key":"names with","Fragments":["some","a","any"]},{"Key":"of incremental","Fragments":["counter."]},{"Key":"incremental counter.","Fragments":["However,"]},{"Key":"counter. However,","Fragments":["if","I'm"]},{"Key":"a hypothetical","Fragments":["requirement"]},{"Key":"hypothetical requirement","Fragments":["(let's"]},{"Key":"requirement (let's","Fragments":["leave"]},{"Key":"(let's leave","Fragments":["the"]},{"Key":"leave the","Fragments":["question","body","number","most","process-word"]},{"Key":"of testability...)","Fragments":["that"]},{"Key":"testability...) that","Fragments":["names"]},{"Key":"that names","Fragments":["should"]},{"Key":"names should","Fragments":["be","be","be","be"]},{"Key":"be generated","Fragments":["in"]},{"Key":"generated in","Fragments":["a"]},{"Key":"a non-deterministic","Fragments":["way"]},{"Key":"non-deterministic way","Fragments":["-"]},{"Key":"more proper","Fragments":["method"]},{"Key":"proper method","Fragments":["to"]},{"Key":"method to","Fragments":["fulfill","another","share","make"]},{"Key":"to fulfill","Fragments":["such"]},{"Key":"fulfill such","Fragments":["requirement?"]},{"Key":"EDIT: Just","Fragments":["to"]},{"Key":"Just to","Fragments":["make","put"]},{"Key":"have noticed","Fragments":["-","most"]},{"Key":"noticed -","Fragments":["I"]},{"Key":"keep track","Fragments":["of"]},{"Key":"track of","Fragments":["already","this"]},{"Key":"of already","Fragments":["generated"]},{"Key":"already generated","Fragments":["names","names"]},{"Key":"generated names","Fragments":["to","-"]},{"Key":" @garrison,","Fragments":["thanks"]},{"Key":"@garrison, thanks","Fragments":["for"]},{"Key":"feedback. It's","Fragments":["certainly"]},{"Key":"certainly a","Fragments":["performance"]},{"Key":"a performance","Fragments":["boost","difference","regression"]},{"Key":"performance boost","Fragments":["to"]},{"Key":"boost to","Fragments":["use"]},{"Key":"cond ordering","Fragments":["to"]},{"Key":"ordering to","Fragments":["avoid"]},{"Key":"avoid doing","Fragments":["the","a","that"]},{"Key":"extra checks","Fragments":["in","then"]},{"Key":"checks in","Fragments":["the","the","response-for","a","any"]},{"Key":"the yell?","Fragments":["and"]},{"Key":"yell? and","Fragments":["question?","a"]},{"Key":"and question?","Fragments":["predicates."]},{"Key":"question? predicates.","Fragments":["It's"]},{"Key":"predicates. It's","Fragments":["not"]},{"Key":"not clear","Fragments":["from","enough","that","what"]},{"Key":"clear from","Fragments":["the","the"]},{"Key":"problem specification","Fragments":["whether","in","changes","just"]},{"Key":"specification whether","Fragments":["a"]},{"Key":"sentence can","Fragments":["be"]},{"Key":"a say-nothing?","Fragments":["and"]},{"Key":"say-nothing? and","Fragments":["a"]},{"Key":"a yell?","Fragments":["or","and"]},{"Key":"yell? or","Fragments":["a"]},{"Key":"a question?,","Fragments":["so"]},{"Key":"question?, so","Fragments":["I"]},{"Key":"to confine","Fragments":["that"]},{"Key":"confine that","Fragments":["logic"]},{"Key":"to response-for.","Fragments":["In"]},{"Key":"response-for. In","Fragments":["general,","this"]},{"Key":"general, I'd","Fragments":["like"]},{"Key":"to reserve","Fragments":["the","it"]},{"Key":"reserve the","Fragments":["ability"]},{"Key":"the ability","Fragments":["to","to","to"]},{"Key":"do things","Fragments":["like","in","in"]},{"Key":"like (count","Fragments":["(map"]},{"Key":"(count (map","Fragments":["yell?"]},{"Key":"(map yell?","Fragments":["some-string-sequence))"]},{"Key":"yell? some-string-sequence))","Fragments":["and"]},{"Key":"some-string-sequence)) and","Fragments":["I"]},{"Key":"to if","Fragments":["that"]},{"Key":"logic is","Fragments":["complected","complex","closer"]},{"Key":"is complected","Fragments":["with"]},{"Key":"complected with","Fragments":["response-for."]},{"Key":"with response-for.","Fragments":["In"]},{"Key":"case, it's","Fragments":["not"]},{"Key":"clear, and","Fragments":["YAGNI"]},{"Key":"and YAGNI","Fragments":["should"]},{"Key":"YAGNI should","Fragments":["apply."]},{"Key":"Good point","Fragments":["on","with"]},{"Key":"point on","Fragments":["using","the","sorting"]},{"Key":"on using","Fragments":["defn-.","`let`","clojure.string","the","clj-time.format,"]},{"Key":"using defn-.","Fragments":["They're"]},{"Key":"defn-. They're","Fragments":["pure"]},{"Key":"They're pure","Fragments":["functions,"]},{"Key":"pure functions,","Fragments":["so"]},{"Key":"functions, so","Fragments":["it","you"]},{"Key":"wouldn't hurt","Fragments":["much"]},{"Key":"hurt much","Fragments":["to"]},{"Key":"them available","Fragments":["outside","in"]},{"Key":"available outside","Fragments":["the"]},{"Key":"the namespace,","Fragments":["but","as","but"]},{"Key":"namespace, but","Fragments":["to","I","I"]},{"Key":"be honest","Fragments":["I","I"]},{"Key":"honest I","Fragments":["didn't","like"]},{"Key":"didn't think","Fragments":["about","of","to","about"]},{"Key":"the bit","Fragments":["about"]},{"Key":"about use","Fragments":["\u0026amp;","vs."]},{"Key":"use \u0026amp;","Fragments":["require,"]},{"Key":"\u0026amp; require,","Fragments":["guys."]},{"Key":"require, guys.","Fragments":["I"]},{"Key":"guys. I","Fragments":["had"]},{"Key":"a feeling","Fragments":["there"]},{"Key":"feeling there","Fragments":["was"]},{"Key":"was some","Fragments":["mechanism","more"]},{"Key":"some mechanism","Fragments":["like"]},{"Key":"mechanism like","Fragments":["that,"]},{"Key":"figured someone","Fragments":["would"]},{"Key":"someone would","Fragments":["point"]},{"Key":"would point","Fragments":["it"]},{"Key":"use ```join```","Fragments":["so"]},{"Key":"```join``` so","Fragments":["you"]},{"Key":"can remove","Fragments":["line","the","creating","the"]},{"Key":"remove line","Fragments":["2."]},{"Key":" Seems","Fragments":["a","pretty","like","to","like"]},{"Key":"Seems a","Fragments":["bit"]},{"Key":"bit simple.","Fragments":["Am"]},{"Key":"simple. Am","Fragments":["I"]},{"Key":" `seq`","Fragments":["is"]},{"Key":"unnecessary. You","Fragments":["can"]},{"Key":"simply `(apply","Fragments":["str"]},{"Key":"...)` instead","Fragments":["of"]},{"Key":"of `join`.","Fragments":["`get`"]},{"Key":"`join`. `get`","Fragments":["is"]},{"Key":"because map","Fragments":["itself"]},{"Key":"map itself","Fragments":["can"]},{"Key":"That's quite","Fragments":["interesting","straightforward"]},{"Key":"quite interesting","Fragments":["approach."]},{"Key":"interesting approach.","Fragments":["Another"]},{"Key":"approach. Another","Fragments":["way"]},{"Key":"Another way","Fragments":["would","you","to","to","would","I've"]},{"Key":"way would","Fragments":["be","be"]},{"Key":"over strands","Fragments":["with"]},{"Key":"with simply","Fragments":["`not=`"]},{"Key":"simply `not=`","Fragments":["and"]},{"Key":"`not=` and","Fragments":["count","again"]},{"Key":"count truthy","Fragments":["values"]},{"Key":"truthy values","Fragments":["using"]},{"Key":"values using","Fragments":["either"]},{"Key":"using either","Fragments":["`identity`","`condp`","`comp`"]},{"Key":"either `identity`","Fragments":["or"]},{"Key":"`identity` or","Fragments":["`true?`"]},{"Key":"or `true?`","Fragments":["for"]},{"Key":"`true?` for","Fragments":["filtering."]},{"Key":"a slip","Fragments":["submission."]},{"Key":"slip submission.","Fragments":["Iteration"]},{"Key":"submission. Iteration","Fragments":["3"]},{"Key":"Iteration 3","Fragments":["is"]},{"Key":"3 is","Fragments":["the"]},{"Key":"the real","Fragments":["one.","intent"]},{"Key":"is ```x```?","Fragments":["Is"]},{"Key":"```x```? Is","Fragments":["it"]},{"Key":"a chromosome?","Fragments":["any"]},{"Key":"chromosome? any","Fragments":["string?"]},{"Key":"any string?","Fragments":["a"]},{"Key":"string? a","Fragments":["number?"]},{"Key":"a number?","Fragments":["What"]},{"Key":"number? What","Fragments":["things"]},{"Key":"What things","Fragments":["can"]},{"Key":"things can","Fragments":["be","be","\"reduce\""]},{"Key":"given to","Fragments":["```to-rna```?","is","them"]},{"Key":"think not.","Fragments":["Some"]},{"Key":"not. Some","Fragments":["argue"]},{"Key":"Some argue","Fragments":["that"]},{"Key":"that nucleotides","Fragments":["should"]},{"Key":"nucleotides should","Fragments":["have"]},{"Key":"meaningful names.","Fragments":["However,","However,"]},{"Key":"names. However,","Fragments":["symbols","the"]},{"Key":"However, symbols","Fragments":["are"]},{"Key":"symbols are","Fragments":["so"]},{"Key":"well known","Fragments":["in","in"]},{"Key":"known in","Fragments":["the","the"]},{"Key":"problem domain","Fragments":["that","that","rather"]},{"Key":"there seems","Fragments":["to"]},{"Key":"be little","Fragments":["point"]},{"Key":"little point","Fragments":["in"]},{"Key":"in that.","Fragments":["Some"]},{"Key":"that. Some","Fragments":["prefer"]},{"Key":"Some prefer","Fragments":["for","it"]},{"Key":"prefer for","Fragments":["the"]},{"Key":"explicit, for","Fragments":["example"]},{"Key":"example by","Fragments":["using"]},{"Key":"using translation","Fragments":["map,"]},{"Key":"translation map,","Fragments":["but"]},{"Key":"map, but","Fragments":["that","I","then","then"]},{"Key":"of preference.","Fragments":["For","I"]},{"Key":"preference. For","Fragments":["me"]},{"Key":"For me","Fragments":["your"]},{"Key":"me your","Fragments":["solution"]},{"Key":"is succint","Fragments":["and"]},{"Key":"succint and","Fragments":["to"]},{"Key":"The trailing","Fragments":["bracket","')'"]},{"Key":"trailing bracket","Fragments":["at"]},{"Key":"bracket at","Fragments":["line"]},{"Key":"at line","Fragments":["14","40.","21","16.","15,","13","8-9"]},{"Key":"line 14","Fragments":["should","-","is"]},{"Key":"14 should","Fragments":["be"]},{"Key":"moved up","Fragments":["to"]},{"Key":"to line","Fragments":["13.","18.","18."]},{"Key":"this design","Fragments":["more"]},{"Key":"design more","Fragments":["extensible"]},{"Key":"more extensible","Fragments":["so"]},{"Key":"extensible so","Fragments":["you"]},{"Key":"add another","Fragments":["teenager","predicate?","stage","condition"]},{"Key":"another teenager","Fragments":["with"]},{"Key":"teenager with","Fragments":["different"]},{"Key":"with different","Fragments":["responses?"]},{"Key":" Closing","Fragments":["square"]},{"Key":"Closing square","Fragments":["bracket"]},{"Key":"bracket shouldn't","Fragments":["be"]},{"Key":"on its'","Fragments":["own"]},{"Key":"its' own","Fragments":["line."]},{"Key":"could blend","Fragments":["`paired-elements`"]},{"Key":"blend `paired-elements`","Fragments":["and"]},{"Key":"`paired-elements` and","Fragments":["`position-values`"]},{"Key":"and `position-values`","Fragments":["into"]},{"Key":"`position-values` into","Fragments":["a"]},{"Key":"single pass","Fragments":["of"]},{"Key":"pass of","Fragments":["`map`"]},{"Key":"`map` -","Fragments":["just","it"]},{"Key":"- just","Fragments":["give","a","realised","a"]},{"Key":"just give","Fragments":["a"]},{"Key":"function accepting","Fragments":["two","a"]},{"Key":"accepting two","Fragments":["arguments"]},{"Key":"two arguments","Fragments":["(it","was","could"]},{"Key":"arguments (it","Fragments":["can"]},{"Key":"(it can","Fragments":["be"]},{"Key":"be inlined","Fragments":["anonymous).","(and,","or"]},{"Key":"That's because","Fragments":["the"]},{"Key":"first value","Fragments":["in","from"]},{"Key":"the list","Fragments":["must","into","of","of","of","of","of"]},{"Key":"list must","Fragments":["extend"]},{"Key":"must extend","Fragments":["IFn"]},{"Key":"extend IFn","Fragments":["protocol"]},{"Key":"IFn protocol","Fragments":["-"]},{"Key":"protocol -","Fragments":["keyword"]},{"Key":"- keyword","Fragments":["does,"]},{"Key":"keyword does,","Fragments":["string/character"]},{"Key":"does, string/character","Fragments":["does"]},{"Key":"string/character does","Fragments":["not."]},{"Key":"does not.","Fragments":["However,"]},{"Key":"not. However,","Fragments":["nothing"]},{"Key":"However, nothing","Fragments":["stands"]},{"Key":"nothing stands","Fragments":["in"]},{"Key":"stands in","Fragments":["the"]},{"Key":"of extending","Fragments":["that"]},{"Key":"extending that","Fragments":["protocol"]},{"Key":"protocol for","Fragments":["these"]},{"Key":"these types","Fragments":[":)"]},{"Key":"I lurk","Fragments":["on"]},{"Key":"lurk on","Fragments":["the"]},{"Key":"Clojure list","Fragments":["on"]},{"Key":"list on","Fragments":["google","the","the"]},{"Key":"on google","Fragments":["groups."]},{"Key":"google groups.","Fragments":["It's"]},{"Key":"groups. It's","Fragments":["great"]},{"Key":"great for","Fragments":["picking","that"]},{"Key":"for picking","Fragments":["up"]},{"Key":"picking up","Fragments":["on"]},{"Key":"on things","Fragments":["like"]},{"Key":"feedback @russell!","Fragments":["I"]},{"Key":"@russell! I","Fragments":["haven't"]},{"Key":"haven't heard","Fragments":["of"]},{"Key":"heard of","Fragments":["the"]},{"Key":" :use","Fragments":["is"]},{"Key":":use is","Fragments":["being"]},{"Key":"being slowly","Fragments":["deprecated"]},{"Key":"slowly deprecated","Fragments":["so"]},{"Key":"deprecated so","Fragments":["you"]},{"Key":"use :require","Fragments":["with"]},{"Key":":require with","Fragments":[":refer"]},{"Key":"with :refer","Fragments":[":all"]},{"Key":":refer :all","Fragments":["instead","would","over"]},{"Key":":all instead","Fragments":["http://stackoverflow.com/questions/10358149/in-clojure-1-4-what-is-the-use-of-refer-within-require"]},{"Key":"You're welcome!","Fragments":["I"]},{"Key":"welcome! I","Fragments":["did"]},{"Key":"of experimenting","Fragments":["during"]},{"Key":"experimenting during","Fragments":["this"]},{"Key":"during this","Fragments":["exercise"]},{"Key":"exercise when","Fragments":["I"]},{"Key":"I learned","Fragments":["that","which","about","something!","it","sort-by","about","about","about","just","something"]},{"Key":"learned that","Fragments":["`(key","they're"]},{"Key":"that `(key","Fragments":["hash)`"]},{"Key":"`(key hash)`","Fragments":["syntax"]},{"Key":"hash)` syntax","Fragments":["does"]},{"Key":"syntax does","Fragments":["not"]},{"Key":"not work","Fragments":["when","for","if","how","in"]},{"Key":"work when","Fragments":["the"]},{"Key":"key is","Fragments":["a","found,","not","not","not","not"]},{"Key":"just (re)learned","Fragments":["that:"]},{"Key":" (","Fragments":["*hash*"]},{"Key":"( *hash*","Fragments":["*key*"]},{"Key":"*hash* *key*","Fragments":[")",")"]},{"Key":"*key* )","Fragments":["==\u0026gt;"]},{"Key":") ==\u0026gt;","Fragments":["(get"]},{"Key":"==\u0026gt; (get","Fragments":["*hash*"]},{"Key":"(get *hash*","Fragments":["*key*"]},{"Key":"one. I","Fragments":["have","haven't"]},{"Key":"no nit","Fragments":["to"]},{"Key":"nit to","Fragments":["pick,","pick,","pick:"]},{"Key":"to pick,","Fragments":["in","but","though:"]},{"Key":"pick, in","Fragments":["fact"]},{"Key":"fact I","Fragments":["want","used"]},{"Key":"for submitting","Fragments":["this"]},{"Key":"submitting this","Fragments":["one"]},{"Key":"one because","Fragments":["I","I","of"]},{"Key":"just learned","Fragments":["a","a","about","that","about","today","enough","enough","about"]},{"Key":"learned a","Fragments":["lot","crazy"]},{"Key":"lot by","Fragments":["trying"]},{"Key":"by trying","Fragments":["it"]},{"Key":"trying it","Fragments":["out"]},{"Key":"out and","Fragments":["figuring","name"]},{"Key":"and figuring","Fragments":["out"]},{"Key":"figuring out","Fragments":["how","what"]},{"Key":"Using `letfn`","Fragments":["instead","does"]},{"Key":"`letfn` instead","Fragments":["of"]},{"Key":"of anonymous","Fragments":["functions.","functions","functions"]},{"Key":"anonymous functions.","Fragments":["I"]},{"Key":"still believe","Fragments":["this"]},{"Key":"believe this","Fragments":["is"]},{"Key":"more Clojure-ish","Fragments":["approach"]},{"Key":"Clojure-ish approach","Fragments":["to"]},{"Key":"keep functions","Fragments":["local/private"]},{"Key":"functions local/private","Fragments":["and"]},{"Key":"local/private and","Fragments":["not"]},{"Key":"not polluting","Fragments":["the"]},{"Key":"namespace. If","Fragments":["the"]},{"Key":"functions get","Fragments":["bigger"]},{"Key":"get bigger","Fragments":["and"]},{"Key":"bigger and","Fragments":["you"]},{"Key":"test them","Fragments":["themselves,"]},{"Key":"them themselves,","Fragments":["you"]},{"Key":"themselves, you","Fragments":["can"]},{"Key":"can easily","Fragments":["refactor","distinguish","see"]},{"Key":"easily refactor","Fragments":["with"]},{"Key":"refactor with","Fragments":["little"]},{"Key":"with little","Fragments":["rewrites."]},{"Key":" Saved","Fragments":["one"]},{"Key":"Saved one","Fragments":["line,"]},{"Key":"one line,","Fragments":["also"]},{"Key":"line, also","Fragments":["using"]},{"Key":"also using","Fragments":["`blank?`"]},{"Key":"It generates","Fragments":["a"]},{"Key":"generates a","Fragments":["warning"]},{"Key":"warning when","Fragments":["you"]},{"Key":"you shadow","Fragments":["stuff"]},{"Key":"shadow stuff","Fragments":["in"]},{"Key":"stuff in","Fragments":["clojure.core,"]},{"Key":"in clojure.core,","Fragments":["so","or"]},{"Key":"clojure.core, so","Fragments":["I'd"]},{"Key":"I'd avoid","Fragments":["it."]},{"Key":"probably do","Fragments":["something","another","at"]},{"Key":"useful w/","Fragments":["`clojure.core/frequencies`."]},{"Key":" Think","Fragments":["this","about","if-let","about","about","about","the"]},{"Key":"Think this","Fragments":["improves"]},{"Key":"this improves","Fragments":["on"]},{"Key":"improves on","Fragments":["what"]},{"Key":"on what","Fragments":["was","you","I"]},{"Key":"an odd","Fragments":["`valid-nucleotide?`","choice,"]},{"Key":"odd `valid-nucleotide?`","Fragments":["function"]},{"Key":"`valid-nucleotide?` function","Fragments":["based"]},{"Key":"function based","Fragments":["on"]},{"Key":"on zoldar's","Fragments":["feedback."]},{"Key":" Shortest","Fragments":["solution","solution"]},{"Key":"Shortest solution","Fragments":["I","I've"]},{"Key":"think of.","Fragments":["Currently"]},{"Key":"of. Currently","Fragments":["ignores"]},{"Key":"Currently ignores","Fragments":["malformatted"]},{"Key":"ignores malformatted","Fragments":["DNAs."]},{"Key":"The most","Fragments":["readable","pragmatic"]},{"Key":"most readable","Fragments":["approach","based","high"]},{"Key":"readable approach","Fragments":["I"]},{"Key":"think off.","Fragments":["Unlike"]},{"Key":"off. Unlike","Fragments":["other"]},{"Key":"Unlike other","Fragments":["solutions"]},{"Key":"solutions it","Fragments":["doesn't"]},{"Key":"doesn't end","Fragments":["up"]},{"Key":"up in","Fragments":["nested","the","a","your"]},{"Key":"in nested","Fragments":["if-else"]},{"Key":"nested if-else","Fragments":["clauses,"]},{"Key":"if-else clauses,","Fragments":["the"]},{"Key":"clauses, the","Fragments":["variables"]},{"Key":"the variables","Fragments":["are","to"]},{"Key":"variables are","Fragments":["expressive","used,"]},{"Key":"are expressive","Fragments":["(as"]},{"Key":"expressive (as","Fragments":["Clojure"]},{"Key":"(as Clojure","Fragments":["allows"]},{"Key":"Clojure allows","Fragments":["for","you"]},{"Key":"for \"?\")","Fragments":["and"]},{"Key":"\"?\") and","Fragments":["performance"]},{"Key":"and performance","Fragments":["should","here."]},{"Key":"performance should","Fragments":["almost"]},{"Key":"should almost","Fragments":["be"]},{"Key":"almost be","Fragments":["max."]},{"Key":"be max.","Fragments":["Furthermore,"]},{"Key":"max. Furthermore,","Fragments":["minimal"]},{"Key":"Furthermore, minimal","Fragments":["use"]},{"Key":"minimal use","Fragments":["of"]},{"Key":"of libraries.","Fragments":["It"]},{"Key":"libraries. It","Fragments":["should"]},{"Key":"It should","Fragments":["also","return","also"]},{"Key":"also cover","Fragments":["any"]},{"Key":"cover any","Fragments":["corner"]},{"Key":"any corner","Fragments":["case."]},{"Key":"For bigger","Fragments":["tasks,"]},{"Key":"bigger tasks,","Fragments":["one"]},{"Key":"tasks, one","Fragments":["could"]},{"Key":"refactor the","Fragments":["variables","repetitive"]},{"Key":"to actual","Fragments":["functions."]},{"Key":" @gay","Fragments":["-"]},{"Key":"@gay -","Fragments":["thanks"]},{"Key":"- thanks","Fragments":["for","for","for","for","for"]},{"Key":"for correcting","Fragments":["me"]},{"Key":"correcting me","Fragments":["-"]},{"Key":"me -","Fragments":["i"]},{"Key":"i meant","Fragments":["require."]},{"Key":"it considered","Fragments":["bad"]},{"Key":"considered bad","Fragments":["practice"]},{"Key":"bad practice","Fragments":["to"]},{"Key":"replace something","Fragments":["in"]},{"Key":"clojure.core if","Fragments":["i'm","you"]},{"Key":"if i'm","Fragments":["not"]},{"Key":"i'm not","Fragments":["using","sure","sure"]},{"Key":"using it","Fragments":["(i.e.","from","to","to","for?","if","in"]},{"Key":"it (i.e.","Fragments":["replace,"]},{"Key":"(i.e. replace,","Fragments":["in"]},{"Key":"replace, in","Fragments":["this"]},{"Key":" also,","Fragments":["the","this"]},{"Key":"also, the","Fragments":["(+"]},{"Key":"the (+","Fragments":["1","1"]},{"Key":"(+ 1","Fragments":["(get","(get","(or","vs))","2"]},{"Key":"1 (get","Fragments":["%1","%1"]},{"Key":"(get %1","Fragments":["%2","%2"]},{"Key":"%1 %2","Fragments":["0))","0))","(inc"]},{"Key":"%2 0))","Fragments":["construction","construction"]},{"Key":"0)) construction","Fragments":["seems","seems"]},{"Key":"construction seems","Fragments":["kind","kind"]},{"Key":"seems kind","Fragments":["of","of","of"]},{"Key":"of awkward","Fragments":["to","to","and"]},{"Key":"but i'm","Fragments":["not","not"]},{"Key":"way in","Fragments":["clojure.","clojure."]},{"Key":" the","Fragments":["(+","test-suite","`validate`","functions","interpreted","interpreted"]},{"Key":" Simplify","Fragments":["the"]},{"Key":"Simplify the","Fragments":["cleanup"]},{"Key":"the cleanup","Fragments":["process.","step"]},{"Key":" `lower-case`","Fragments":["and"]},{"Key":"`lower-case` and","Fragments":["`replace`","`frequencies`","`frequencies`","`upper-case`"]},{"Key":"and `replace`","Fragments":["could","was"]},{"Key":"`replace` could","Fragments":["be"]},{"Key":"be hidden","Fragments":["behind"]},{"Key":"hidden behind","Fragments":["a","core"]},{"Key":"behind a","Fragments":["`cleanup`","`words`","function,"]},{"Key":"a `cleanup`","Fragments":["function"]},{"Key":"`cleanup` function","Fragments":["as"]},{"Key":"as `split`","Fragments":["behind"]},{"Key":"`split` behind","Fragments":["a"]},{"Key":"a `words`","Fragments":["function."]},{"Key":"Give variables","Fragments":["names."]},{"Key":"rather suggest","Fragments":["`:require`"]},{"Key":"suggest `:require`","Fragments":["inside"]},{"Key":"`:require` inside","Fragments":["`ns`"]},{"Key":"macro, because","Fragments":["`use`/`:use`"]},{"Key":"because `use`/`:use`","Fragments":["is"]},{"Key":"`use`/`:use` is","Fragments":["deprecated."]},{"Key":"deprecated. For","Fragments":["direct"]},{"Key":"For direct","Fragments":["import"]},{"Key":"direct import","Fragments":["of"]},{"Key":"import of","Fragments":["symbols"]},{"Key":"of symbols","Fragments":["without","outside"]},{"Key":"symbols without","Fragments":["namespace"]},{"Key":"without namespace","Fragments":["aliasing"]},{"Key":"namespace aliasing","Fragments":["you"]},{"Key":"aliasing you","Fragments":["can"]},{"Key":"use `(:require","Fragments":["[clojure.string"]},{"Key":":refer (upper-case","Fragments":["blank?)])`.","trim)]))","blank?)]`"]},{"Key":"My only,","Fragments":["small,"]},{"Key":"only, small,","Fragments":["nits"]},{"Key":"small, nits","Fragments":["are"]},{"Key":"nits are","Fragments":["about"]},{"Key":"are about","Fragments":["naming."]},{"Key":"is ```x```","Fragments":["-","-"]},{"Key":"```x``` -","Fragments":["name","give"]},{"Key":"- name","Fragments":["it"]},{"Key":"it something","Fragments":["meaningful","a"]},{"Key":"something meaningful","Fragments":["in","for"]},{"Key":"meaningful in","Fragments":["the"]},{"Key":"What are","Fragments":["```T```","they","you","we"]},{"Key":"are ```T```","Fragments":["and"]},{"Key":"```T``` and","Fragments":["```U```?"]},{"Key":"and ```U```?","Fragments":["They"]},{"Key":"```U```? They","Fragments":["could"]},{"Key":"They could","Fragments":["also"]},{"Key":"names in","Fragments":["the","direct","enclosing","Clojure","each","_define-converters_"]},{"Key":"domain to","Fragments":["make"]},{"Key":"code crystal","Fragments":["clear"]},{"Key":"crystal clear","Fragments":["about"]},{"Key":"clear about","Fragments":["what"]},{"Key":"what transforming","Fragments":["dna"]},{"Key":"transforming dna","Fragments":["to"]},{"Key":"dna to","Fragments":["rna","rna?"]},{"Key":"to rna","Fragments":["means."]},{"Key":"looks great.","Fragments":["My"]},{"Key":"great. My","Fragments":["only"]},{"Key":"only nit,","Fragments":["a"]},{"Key":"nit, a","Fragments":["small"]},{"Key":"small one,","Fragments":["is"]},{"Key":"one, is","Fragments":["a"]},{"Key":"suggest adding","Fragments":["a"]},{"Key":"a ```use```","Fragments":["clause"]},{"Key":"```use``` clause","Fragments":["in"]},{"Key":"for ```clojure.string```","Fragments":["so","since"]},{"Key":"```clojure.string``` so","Fragments":["you"]},{"Key":"shorter name.","Fragments":["It"]},{"Key":"name. It","Fragments":["is"]},{"Key":"is distracting","Fragments":["noise"]},{"Key":"distracting noise","Fragments":["in"]},{"Key":"noise in","Fragments":["the"]},{"Key":"Two small","Fragments":["suggestions"]},{"Key":"small suggestions","Fragments":["-"]},{"Key":"suggestions -","Fragments":["both"]},{"Key":"- both","Fragments":["about"]},{"Key":"both about","Fragments":["naming."]},{"Key":"1. What","Fragments":["is"]},{"Key":"- give","Fragments":["it","the"]},{"Key":"to explain","Fragments":["what","what"]},{"Key":"explain what","Fragments":["it","it","a","is","they","I"]},{"Key":"2. Give","Fragments":["names"]},{"Key":"Give names","Fragments":["to"]},{"Key":"the mystery","Fragments":["constants"]},{"Key":"mystery constants","Fragments":["```\\T```"]},{"Key":"constants ```\\T```","Fragments":["and"]},{"Key":"```\\T``` and","Fragments":["```\\U```","```\\U```"]},{"Key":"Naming things","Fragments":["with","is"]},{"Key":"things with","Fragments":["names","it."]},{"Key":"domain helps","Fragments":["with"]},{"Key":"helps with","Fragments":["maintenance."]},{"Key":"have sanitized/normalized","Fragments":["the"]},{"Key":"sanitized/normalized the","Fragments":["number"]},{"Key":"number in","Fragments":["the"]},{"Key":"the beginning,","Fragments":["`rev-subs`"]},{"Key":"beginning, `rev-subs`","Fragments":["wouldn't"]},{"Key":"`rev-subs` wouldn't","Fragments":["be"]},{"Key":"Great tip,","Fragments":["made","thanks!"]},{"Key":"tip, made","Fragments":["it"]},{"Key":"lot cleaner.","Fragments":["Thanks"]},{"Key":"cleaner. Thanks","Fragments":["@alvena!"]},{"Key":"Thanks! It","Fragments":["just"]},{"Key":"just takes","Fragments":["me"]},{"Key":"takes me","Fragments":["a"]},{"Key":"while to","Fragments":["read","understand","wrap","figure"]},{"Key":"code, that's","Fragments":["all."]},{"Key":"that's all.","Fragments":["Good"]},{"Key":"all. Good","Fragments":["practice"]},{"Key":"Good practice","Fragments":["for"]},{"Key":"I'm playing","Fragments":["around"]},{"Key":"playing around","Fragments":["with"]},{"Key":"with frequencies","Fragments":["now"]},{"Key":"frequencies now","Fragments":["but"]},{"Key":"now but","Fragments":["I","`vec`"]},{"Key":"actually like","Fragments":["this","writing","the"]},{"Key":"version a","Fragments":["bit","bit"]},{"Key":"better so","Fragments":["far."]},{"Key":"the descriptions","Fragments":["of"]},{"Key":"descriptions of","Fragments":["Hamming"]},{"Key":"of Hamming","Fragments":["Distance","distance."]},{"Key":"Hamming Distance","Fragments":["I've"]},{"Key":"Distance I've","Fragments":["seen."]},{"Key":" `merge-with`","Fragments":["is","is"]},{"Key":"`merge-with` is","Fragments":["unnecessary","unnecessary"]},{"Key":"simple `merge`","Fragments":["will","would"]},{"Key":"`merge` will","Fragments":["do."]},{"Key":"will do.","Fragments":["You"]},{"Key":"do. You","Fragments":["could"]},{"Key":"`frequencies` also","Fragments":["in"]},{"Key":"also in","Fragments":["`count`."]},{"Key":"Nothing beyond","Fragments":["code"]},{"Key":"beyond code","Fragments":["\"templating\""]},{"Key":"code \"templating\"","Fragments":["really."]},{"Key":"\"templating\" really.","Fragments":["Shoot"]},{"Key":"really. Shoot","Fragments":["me"]},{"Key":"Shoot me","Fragments":["if"]},{"Key":"me if","Fragments":["there's","you"]},{"Key":"there's anything","Fragments":["that"]},{"Key":"needs explanation.","Fragments":["We"]},{"Key":"explanation. We","Fragments":["could"]},{"Key":"could even","Fragments":["arrange","get","define","use"]},{"Key":"even arrange","Fragments":["some"]},{"Key":"arrange some","Fragments":["late"]},{"Key":"some late","Fragments":["evening"]},{"Key":"late evening","Fragments":["hangout"]},{"Key":"evening hangout","Fragments":["-"]},{"Key":"hangout -","Fragments":["just"]},{"Key":"a thought","Fragments":[":)"]},{"Key":"noticed line","Fragments":["2"]},{"Key":"line 2","Fragments":["should","-","-"]},{"Key":"2 should","Fragments":["be"]},{"Key":"be (:require","Fragments":["...."]},{"Key":"of styling","Fragments":["points"]},{"Key":"styling points","Fragments":["to"]},{"Key":"points to","Fragments":["look","support"]},{"Key":"look at.","Fragments":["In"]},{"Key":"at. In","Fragments":["clojure,"]},{"Key":"In clojure,","Fragments":["trailing"]},{"Key":"clojure, trailing","Fragments":["braces"]},{"Key":"trailing braces","Fragments":["are"]},{"Key":"braces are","Fragments":["put"]},{"Key":"put on","Fragments":["the"]},{"Key":"of real","Fragments":["code."]},{"Key":"real code.","Fragments":["Also,"]},{"Key":"should indent","Fragments":["with"]},{"Key":"indent with","Fragments":["2"]},{"Key":"with 2","Fragments":["spaces","arguments,"]},{"Key":"spaces (not","Fragments":["tabs)."]},{"Key":"guide at","Fragments":["https://github.com/bbatsov/clojure-style-guide","https://github.com/bbatsov/clojure-style-guide"]},{"Key":"got nitpicked","Fragments":["on"]},{"Key":"nitpicked on","Fragments":["style"]},{"Key":"style -","Fragments":["so"]},{"Key":"just passing","Fragments":["this","the"]},{"Key":"passing this","Fragments":["on"]},{"Key":" Wow!","Fragments":["That's","I","I"]},{"Key":"Wow! That's","Fragments":["pretty"]},{"Key":"That's pretty","Fragments":["wild"]},{"Key":"pretty wild","Fragments":["stuff."]},{"Key":"wild stuff.","Fragments":["I'm"]},{"Key":"stuff. I'm","Fragments":["not"]},{"Key":"to speed","Fragments":["with"]},{"Key":"speed with","Fragments":["macros"]},{"Key":"with macros","Fragments":["but","or"]},{"Key":"macros but","Fragments":["I'll"]},{"Key":"a dig","Fragments":["through"]},{"Key":"dig through","Fragments":["your","the"]},{"Key":"through your","Fragments":["example"]},{"Key":"your example","Fragments":["and"]},{"Key":"and reply","Fragments":["here"]},{"Key":"reply here","Fragments":["with"]},{"Key":"here with","Fragments":["any"]},{"Key":"with any","Fragments":["questions.","uppercase","input","input"]},{"Key":" `seq`s","Fragments":["are"]},{"Key":"`seq`s are","Fragments":["unnecessary.","the"]},{"Key":"are unnecessary.","Fragments":["Alternatively,","My"]},{"Key":"unnecessary. Alternatively,","Fragments":["you"]},{"Key":"can resolve","Fragments":["it"]},{"Key":"resolve it","Fragments":["without"]},{"Key":"without anonymous","Fragments":["function:","function."]},{"Key":"anonymous function:","Fragments":["either"]},{"Key":"function: either","Fragments":["with"]},{"Key":"either with","Fragments":["`filter`"]},{"Key":"with `filter`","Fragments":["and","and","allow","allow"]},{"Key":"and `count`","Fragments":["or"]},{"Key":"`count` or","Fragments":["with"]},{"Key":"or with","Fragments":["you-know-which-function","the"]},{"Key":"with you-know-which-function","Fragments":[":D"]},{"Key":"all good","Fragments":["suggestions",":)"]},{"Key":"good suggestions","Fragments":["I'm"]},{"Key":"suggestions I'm","Fragments":["submitting"]},{"Key":"I'm submitting","Fragments":["a"]},{"Key":"bad we","Fragments":["can't"]},{"Key":"we can't","Fragments":["use","add","use"]},{"Key":"can't use","Fragments":["```frequencies```","partial","`\"!\"`"]},{"Key":"use ```frequencies```","Fragments":["here..."]},{"Key":"```frequencies``` here...","Fragments":["it"]},{"Key":"here... it","Fragments":["is"]},{"Key":"so useful!","Fragments":["Actually"]},{"Key":"useful! Actually","Fragments":["I"]},{"Key":"Actually I","Fragments":["can"]},{"Key":"can figure","Fragments":["out"]},{"Key":"it here","Fragments":["-","because"]},{"Key":"pretty bad","Fragments":[":)"]},{"Key":"I've gone","Fragments":["a"]},{"Key":"gone a","Fragments":["bit"]},{"Key":"bit (!)","Fragments":["macro-frenzy"]},{"Key":"(!) macro-frenzy","Fragments":["here,"]},{"Key":"macro-frenzy here,","Fragments":["but"]},{"Key":"but here's","Fragments":["alternative"]},{"Key":"here's alternative","Fragments":["approach:"]},{"Key":"^:private ^:dynamic","Fragments":["*checks*"]},{"Key":"^:dynamic *checks*","Fragments":["{})"]},{"Key":" (defmacro","Fragments":["defcheck","defresponse"]},{"Key":"(defmacro defcheck","Fragments":["[name"]},{"Key":"defcheck [name","Fragments":["args"]},{"Key":"[name args","Fragments":["\u0026amp;"]},{"Key":"args \u0026amp;","Fragments":["body]"]},{"Key":" `(do","Fragments":["(defn"]},{"Key":"`(do (defn","Fragments":["~name"]},{"Key":"(defn ~name","Fragments":["~args"]},{"Key":"~name ~args","Fragments":["~@myrna)"]},{"Key":" (alter-var-root","Fragments":["(var"]},{"Key":"(alter-var-root (var","Fragments":["*checks*)"]},{"Key":"(var *checks*)","Fragments":["assoc"]},{"Key":"*checks*) assoc","Fragments":["'~name"]},{"Key":"assoc '~name","Fragments":["~name)))"]},{"Key":"(defn- classify-response","Fragments":["[remark]"]},{"Key":" (-\u0026gt;","Fragments":["(drop-while"]},{"Key":"(-\u0026gt; (drop-while","Fragments":["(fn"]},{"Key":"(drop-while (fn","Fragments":["[[_"]},{"Key":"(fn [[_","Fragments":["check-fn]]","regex]"]},{"Key":" (not","Fragments":["(check-fn","(=","(divisible?","(="]},{"Key":"(not (check-fn","Fragments":["remark)))"]},{"Key":" first","Fragments":["first))"]},{"Key":" (defmulti","Fragments":["bob","next-count"]},{"Key":"(defmulti bob","Fragments":["classify-response)"]},{"Key":"(defmacro defresponse","Fragments":["[check"]},{"Key":"defresponse [check","Fragments":["response]"]},{"Key":" `(defmethod","Fragments":["bob"]},{"Key":"`(defmethod bob","Fragments":["'~check"]},{"Key":"bob '~check","Fragments":["[_#]"]},{"Key":"'~check [_#]","Fragments":["~response))"]},{"Key":" (defcheck","Fragments":["silence?","yelling?","question?"]},{"Key":"(defcheck silence?","Fragments":["[input]"]},{"Key":"(= input","Fragments":["\"\"))","(str/upper-case","(upper-case"]},{"Key":"(defcheck yelling?","Fragments":["[input]"]},{"Key":" (and","Fragments":["(not","(not","verified","(not=","(not=","(not","(=","(apply","(=","(not","(divisible?","(not=","(\u003e="]},{"Key":"(and (not","Fragments":["(silence?","(yelling?","(=","(blank?"]},{"Key":"(not (silence?","Fragments":["input))"]},{"Key":"input (str/upper-case","Fragments":["input))))"]},{"Key":"(defcheck question?","Fragments":["[input]"]},{"Key":"(not (yelling?","Fragments":["input))"]},{"Key":"(last input)","Fragments":["\\?)))","\\?)","\\?)","\\?)"]},{"Key":" (defresponse","Fragments":["silence?","yelling?","question?",":default"]},{"Key":"(defresponse silence?","Fragments":["\"Fine,"]},{"Key":"silence? \"Fine,","Fragments":["be"]},{"Key":"(defresponse yelling?","Fragments":["\"Woah,"]},{"Key":"yelling? \"Woah,","Fragments":["chill"]},{"Key":"(defresponse question?","Fragments":["\"Sure.\")"]},{"Key":"(defresponse :default","Fragments":["\"Whatever.\")"]},{"Key":"(defn response-for","Fragments":["[input]","([msg]...))","[msg]","[sentence]","[input]","[string]","[s]"]},{"Key":" (bob","Fragments":["input))"]},{"Key":"The downside","Fragments":["is","of","of"]},{"Key":"make checks","Fragments":["order","more"]},{"Key":"checks order","Fragments":["independent."]},{"Key":" Moved","Fragments":["to"]},{"Key":"Moved to","Fragments":["a"]},{"Key":"a multi-method","Fragments":["implementation."]},{"Key":"multi-method implementation.","Fragments":["Was"]},{"Key":"implementation. Was","Fragments":["toying"]},{"Key":"Was toying","Fragments":["with"]},{"Key":"toying with","Fragments":["passing"]},{"Key":"with passing","Fragments":["classify-response"]},{"Key":"passing classify-response","Fragments":["to"]},{"Key":"classify-response to","Fragments":["bob"]},{"Key":"to bob","Fragments":["to"]},{"Key":"bob to","Fragments":["make","say"]},{"Key":"sure bob","Fragments":["knows"]},{"Key":"bob knows","Fragments":["what"]},{"Key":"knows what","Fragments":["responses"]},{"Key":"what responses","Fragments":["to"]},{"Key":"handle but","Fragments":["it"]},{"Key":"it looked","Fragments":["messy.","a","like"]},{"Key":"looked messy.","Fragments":["Then"]},{"Key":"messy. Then","Fragments":["discovered"]},{"Key":"Then discovered","Fragments":["that"]},{"Key":"discovered that","Fragments":["defmethod"]},{"Key":"that defmethod","Fragments":["understands"]},{"Key":"defmethod understands","Fragments":["the"]},{"Key":"understands the","Fragments":[":default"]},{"Key":"the :default","Fragments":["dispatch"]},{"Key":":default dispatch","Fragments":["value"]},{"Key":"dispatch value","Fragments":["so"]},{"Key":"value so","Fragments":["bob","something","they"]},{"Key":"so bob","Fragments":["(and"]},{"Key":"bob (and","Fragments":["his"]},{"Key":"(and his","Fragments":["other"]},{"Key":"his other","Fragments":["monosylabic"]},{"Key":"other monosylabic","Fragments":["friends)"]},{"Key":"monosylabic friends)","Fragments":["can"]},{"Key":"friends) can","Fragments":["indifferently"]},{"Key":"can indifferently","Fragments":["handle"]},{"Key":"indifferently handle","Fragments":["anything"]},{"Key":"handle anything","Fragments":["thrown"]},{"Key":"anything thrown","Fragments":["at"]},{"Key":"thrown at","Fragments":["them."]},{"Key":"The trade","Fragments":["off","off"]},{"Key":"off with","Fragments":["this"]},{"Key":"can't interpret","Fragments":["remarks"]},{"Key":"interpret remarks","Fragments":["differently"]},{"Key":"remarks differently","Fragments":["-"]},{"Key":"differently -","Fragments":["for"]},{"Key":"- for","Fragments":["example,","me","me"]},{"Key":"example, interpreting","Fragments":["anything"]},{"Key":"interpreting anything","Fragments":["ending"]},{"Key":"anything ending","Fragments":["with"]},{"Key":"with !","Fragments":["as"]},{"Key":"! as","Fragments":["shouting."]},{"Key":"as shouting.","Fragments":["Maybe"]},{"Key":"shouting. Maybe","Fragments":["that's"]},{"Key":"bad thing,","Fragments":["but"]},{"Key":"know at","Fragments":["present."]},{"Key":"use wider","Fragments":["range"]},{"Key":"names, like","Fragments":["`?`.","`lc`.","`yelling?`,"]},{"Key":"could avoid","Fragments":["using","having","exporting","the"]},{"Key":"one helper","Fragments":["from"]},{"Key":"helper from","Fragments":["another."]},{"Key":"from another.","Fragments":["The"]},{"Key":"another. The","Fragments":["fact"]},{"Key":"that `cond`","Fragments":["is","statement"]},{"Key":"to evaluate","Fragments":["the","booleans"]},{"Key":"evaluate the","Fragments":["predicates"]},{"Key":"predicates in","Fragments":["order","terms","the"]},{"Key":"order and","Fragments":["stop"]},{"Key":"and stop","Fragments":["with"]},{"Key":"stop with","Fragments":["the"]},{"Key":"first match","Fragments":["means"]},{"Key":"match means","Fragments":["that"]},{"Key":"that you'll","Fragments":["never"]},{"Key":"you'll never","Fragments":["check"]},{"Key":"never check","Fragments":["for"]},{"Key":"for `yell?`","Fragments":["when"]},{"Key":"`yell?` when","Fragments":["`say-nothing?`"]},{"Key":"when `say-nothing?`","Fragments":["has"]},{"Key":"`say-nothing?` has","Fragments":["already"]},{"Key":"has already","Fragments":["been"]},{"Key":"already been","Fragments":["found","used."]},{"Key":"been found","Fragments":["true."]},{"Key":"can keep","Fragments":["the","it"]},{"Key":"helpers from","Fragments":["being"]},{"Key":"from being","Fragments":["public","imported","made"]},{"Key":"being public","Fragments":["with"]},{"Key":"public with","Fragments":["`defn-`"]},{"Key":"put public","Fragments":["API"]},{"Key":"the top","Fragments":["and","(`sing`,","with","level","level,","rather","of","(however","and","level","(see","level","level","of","of","of","such","of","of","and"]},{"Key":"and any","Fragments":["non-public"]},{"Key":"any non-public","Fragments":["helpers"]},{"Key":"helpers further","Fragments":["down."]},{"Key":"further down.","Fragments":["`declare`","Ha!"]},{"Key":"down. `declare`","Fragments":["can"]},{"Key":"`declare` can","Fragments":["help","help"]},{"Key":"Ouch, and","Fragments":["no"]},{"Key":"and no","Fragments":["use","lower-case","lower-case"]},{"Key":"no use","Fragments":["for"]},{"Key":"use for","Fragments":["`frequencies`","require","assertion"]},{"Key":"for `frequencies`","Fragments":["this"]},{"Key":"`frequencies` this","Fragments":["time."]},{"Key":"this time.","Fragments":["Dang","I'll"]},{"Key":"time. Dang","Fragments":["it!"]},{"Key":"nice, however","Fragments":["I","you"]},{"Key":"of definitions","Fragments":["so"]},{"Key":"definitions so","Fragments":["that"]},{"Key":"the public","Fragments":["api","interface.","interface.","api","api","api","api","\"API\"","API.","API","API","one.","one","functions","API","API."]},{"Key":"public api","Fragments":["to","to","at","near","so","is"]},{"Key":"api to","Fragments":["helpers","the"]},{"Key":"to helpers","Fragments":["-"]},{"Key":"helpers -","Fragments":["`declare`"]},{"Key":"- `declare`","Fragments":["can"]},{"Key":"help here.","Fragments":["Also,","Have"]},{"Key":"here. Also,","Fragments":["in","the"]},{"Key":"Also, in","Fragments":["`pretty-print`","Clojure,"]},{"Key":"in `pretty-print`","Fragments":["you"]},{"Key":"`pretty-print` you","Fragments":["could"]},{"Key":"bindings for","Fragments":["parts","forms","target","all"]},{"Key":"for parts","Fragments":["of","of"]},{"Key":"use these","Fragments":["to"]},{"Key":"these to","Fragments":["reduce"]},{"Key":"reduce clutter","Fragments":["inside"]},{"Key":"clutter inside","Fragments":["`str`."]},{"Key":"inside `str`.","Fragments":["Other"]},{"Key":"`str`. Other","Fragments":["than"]},{"Key":"good. Ah,","Fragments":["that's"]},{"Key":"but instead","Fragments":["of","defines","extracting"]},{"Key":"of `clojure.string/join`","Fragments":["you"]},{"Key":"`clojure.string/join` you","Fragments":["could"]},{"Key":"Yeah, tend","Fragments":["for"]},{"Key":"tend for","Fragments":["forget"]},{"Key":"for forget","Fragments":["that"]},{"Key":"forget that","Fragments":["-"]},{"Key":"- set","Fragments":["for","already"]},{"Key":"set for","Fragments":["example","that."]},{"Key":"example doesn't","Fragments":["accept"]},{"Key":"doesn't accept","Fragments":["`not-found`"]},{"Key":"accept `not-found`","Fragments":["argument."]},{"Key":" Sweet.","Fragments":["I"]},{"Key":"Sweet. I","Fragments":["think"]},{"Key":"can directly","Fragments":["write"]},{"Key":"directly write","Fragments":["`(db"]},{"Key":"write `(db","Fragments":["grade"]},{"Key":"`(db grade","Fragments":["[])`"]},{"Key":"grade [])`","Fragments":["for"]},{"Key":"[])` for","Fragments":["the"]},{"Key":"there nothing","Fragments":["that"]},{"Key":"nothing that","Fragments":["``frequencies```","the","can't"]},{"Key":"that ``frequencies```","Fragments":["cannot"]},{"Key":"``frequencies``` cannot","Fragments":["do?"]},{"Key":"Much appreciated","Fragments":["[zoldar](/zoldar)"]},{"Key":"String can","Fragments":["be"]},{"Key":"characters. Character","Fragments":["literals"]},{"Key":"Character literals","Fragments":["begin"]},{"Key":"literals begin","Fragments":["with"]},{"Key":"begin with","Fragments":["backslash,"]},{"Key":"with backslash,","Fragments":["like"]},{"Key":"backslash, like","Fragments":["`\\a`."]},{"Key":"like `\\a`.","Fragments":["So"]},{"Key":"`\\a`. So","Fragments":["what"]},{"Key":"are looking","Fragments":["for","for"]},{"Key":"for is","Fragments":["not","put"]},{"Key":"not `\"?\"`","Fragments":["but"]},{"Key":"`\"?\"` but","Fragments":["`\\?`."]},{"Key":"but `\\?`.","Fragments":["Then"]},{"Key":"`\\?`. Then","Fragments":["`last`"]},{"Key":"Then `last`","Fragments":["should"]},{"Key":"`last` should","Fragments":["work"]},{"Key":" OK,","Fragments":["found","I've"]},{"Key":"OK, found","Fragments":["the"]},{"Key":"found the","Fragments":["`clojure.string`","`ns`","suggestion","```frequencies```","prime","use"]},{"Key":"`clojure.string` functions","Fragments":["to","in"]},{"Key":"replace *some*","Fragments":["of"]},{"Key":"*some* of","Fragments":["the"]},{"Key":"something for","Fragments":["`.endsWith`","this."]},{"Key":"(= (nth","Fragments":["(reverse"]},{"Key":"(nth (reverse","Fragments":["str)"]},{"Key":"(reverse str)","Fragments":["1)"]},{"Key":"str) 1)","Fragments":["\"?\")"]},{"Key":"(and verified","Fragments":["that"]},{"Key":"verified that","Fragments":["it"]},{"Key":"didn't start","Fragments":["from"]},{"Key":"start from","Fragments":["0,"]},{"Key":"from 0,","Fragments":["too)"]},{"Key":"0, too)","Fragments":["Also"]},{"Key":"too) Also","Fragments":["tried"]},{"Key":"Also tried","Fragments":["`(last"]},{"Key":"tried `(last","Fragments":["str)`"]},{"Key":"`(last str)`","Fragments":["which"]},{"Key":"str)` which","Fragments":["also"]},{"Key":"which also","Fragments":["fails."]},{"Key":"do I","Fragments":["get"]},{"Key":"get (or","Fragments":["just"]},{"Key":"(or just","Fragments":["test)"]},{"Key":"just test)","Fragments":["the"]},{"Key":"test) the","Fragments":["last"]},{"Key":"character from","Fragments":["a","the"]},{"Key":"even ask","Fragments":["for"]},{"Key":"for its","Fragments":["length?","own"]},{"Key":":) either","Fragments":["way,"]},{"Key":"way, that","Fragments":["looks"]},{"Key":"looks nice","Fragments":["too.","overall."]},{"Key":"nice too.","Fragments":["If"]},{"Key":"too. If","Fragments":["you"]},{"Key":"you were","Fragments":["playing","hinting","trying","thinking?","looking","using","spelling","coding"]},{"Key":"were playing","Fragments":["a"]},{"Key":"playing a","Fragments":["clojure"]},{"Key":"clojure code","Fragments":["golf,","in","I've","outside"]},{"Key":"code golf,","Fragments":["keep"]},{"Key":"golf, keep","Fragments":["in"]},{"Key":"can omit","Fragments":["`1`","the"]},{"Key":"omit `1`","Fragments":["in"]},{"Key":"`1` in","Fragments":["`%1`"]},{"Key":"in `%1`","Fragments":["for"]},{"Key":"`%1` for","Fragments":["the"]},{"Key":"first argument,","Fragments":["so"]},{"Key":"a static","Fragments":["method"]},{"Key":"static method","Fragments":["in"]},{"Key":"method in","Fragments":["Java","`clojure.string`"]},{"Key":"in Java","Fragments":["for"]},{"Key":"Java for","Fragments":["that"]},{"Key":"- `Character/isDigit`","Fragments":["-"]},{"Key":"`Character/isDigit` -","Fragments":["so"]},{"Key":"simple alias.","Fragments":["I"]},{"Key":"alias. I","Fragments":["like"]},{"Key":"approach -","Fragments":["it"]},{"Key":"matter much","Fragments":["in","but"]},{"Key":"much in","Fragments":["that"]},{"Key":"particular context,","Fragments":["but"]},{"Key":"context, but","Fragments":["I"]},{"Key":"it compare","Fragments":["performance-wise"]},{"Key":"compare performance-wise","Fragments":["to"]},{"Key":"performance-wise to","Fragments":["regex"]},{"Key":"to regex","Fragments":["search."]},{"Key":"Yeah, it","Fragments":["reads"]},{"Key":"reads pretty","Fragments":["well"]},{"Key":"pretty well","Fragments":["indeed."]},{"Key":"overdone it","Fragments":["with"]},{"Key":"the Integer","Fragments":["conversion."]},{"Key":"Integer conversion.","Fragments":["I've"]},{"Key":"conversion. I've","Fragments":["put"]},{"Key":"I've put","Fragments":["`apply"]},{"Key":"put `apply","Fragments":["str`"]},{"Key":"`apply str`","Fragments":["behind","which","wrapping","instead"]},{"Key":"str` behind","Fragments":["a"]},{"Key":"function, however,","Fragments":["I"]},{"Key":"however, I","Fragments":["don't","choose","thought"]},{"Key":"readable that","Fragments":["way..."]},{"Key":"that way...","Fragments":["maybe."]},{"Key":"way... maybe.","Fragments":["I"]},{"Key":"prefer putting","Fragments":["bindings","the"]},{"Key":"putting bindings","Fragments":["with"]},{"Key":"in direct","Fragments":["context"]},{"Key":"direct context","Fragments":["of"]},{"Key":"string rather","Fragments":["than"]},{"Key":"than use","Fragments":["`format`","a"]},{"Key":"use `format`","Fragments":["style"]},{"Key":"style fns","Fragments":["-"]},{"Key":"fns -","Fragments":["maybe"]},{"Key":"maybe I'm","Fragments":["weird,","not"]},{"Key":"I'm weird,","Fragments":["but"]},{"Key":"weird, but","Fragments":["it"]},{"Key":"reads better,","Fragments":["more"]},{"Key":"naturally to","Fragments":["me."]},{"Key":"wonder that.","Fragments":["Didn't"]},{"Key":"that. Didn't","Fragments":["come"]},{"Key":"Didn't come","Fragments":["up"]},{"Key":"this assignment","Fragments":["myself"]},{"Key":"assignment myself","Fragments":["-","and"]},{"Key":"myself -","Fragments":["found"]},{"Key":"- found","Fragments":["it"]},{"Key":"found it","Fragments":["in","a","hard","more","already,","a","later."]},{"Key":"in someone","Fragments":["else's"]},{"Key":"someone else's","Fragments":[":)","submission."]},{"Key":"string checks","Fragments":["into","with"]},{"Key":"to filter","Fragments":["non-numeric","the","and"]},{"Key":"filter non-numeric","Fragments":["characters"]},{"Key":"non-numeric characters","Fragments":["out"]},{"Key":"characters out","Fragments":["of"]},{"Key":"the input.","Fragments":["Also,","You","Both","Added"]},{"Key":"input. Also,","Fragments":["take"]},{"Key":"Also, take","Fragments":["a","a","another"]},{"Key":"look `format`","Fragments":["for"]},{"Key":"`format` for","Fragments":["generating"]},{"Key":"for generating","Fragments":["templated","a"]},{"Key":"generating templated","Fragments":["strings."]},{"Key":"it worth","Fragments":["mapping","the","it?"]},{"Key":"worth mapping","Fragments":["the"]},{"Key":"strings through","Fragments":["`#(Integer."]},{"Key":"through `#(Integer.","Fragments":["%)`"]},{"Key":"`#(Integer. %)`","Fragments":["just"]},{"Key":"%)` just","Fragments":["so"]},{"Key":"to compare","Fragments":["characters?","against","maps","the","the","the","the","a","the","the","it","the"]},{"Key":"compare characters?","Fragments":["It"]},{"Key":"characters? It","Fragments":["seems"]},{"Key":"like all","Fragments":["you're"]},{"Key":"all you're","Fragments":["gaining"]},{"Key":"you're gaining","Fragments":["is"]},{"Key":"gaining is","Fragments":["being"]},{"Key":"say `(=","Fragments":["first"]},{"Key":"`(= first","Fragments":["1)`","\\1)`."]},{"Key":"first 1)`","Fragments":["instead"]},{"Key":"1)` instead","Fragments":["of"]},{"Key":"of `(=","Fragments":["first","0","\"\"","\"\"","n"]},{"Key":"consider `format`","Fragments":["to"]},{"Key":"`format` to","Fragments":["make"]},{"Key":"your `pretty-print`","Fragments":["more"]},{"Key":"`pretty-print` more","Fragments":["..."]},{"Key":"more ...","Fragments":["pretty."]},{"Key":"... pretty.","Fragments":[":)"]},{"Key":"using `(apply","Fragments":["str"]},{"Key":"str collection)`","Fragments":["a"]},{"Key":"collection)` a","Fragments":["lot"]},{"Key":"lot --","Fragments":["would"]},{"Key":"-- would","Fragments":["it"]},{"Key":"helper function?","Fragments":["(honest"]},{"Key":"function? (honest","Fragments":["question,"]},{"Key":"(honest question,","Fragments":["I'm"]},{"Key":"question, I'm","Fragments":["on"]},{"Key":"fence about","Fragments":["this"]},{"Key":"good! Here","Fragments":["are"]},{"Key":"Here are","Fragments":["a","two","2"]},{"Key":"the `concat`","Fragments":["in"]},{"Key":"`concat` in","Fragments":["your"]},{"Key":"your character","Fragments":["range"]},{"Key":"character range","Fragments":["generation."]},{"Key":"range generation.","Fragments":["Also,"]},{"Key":"generation. Also,","Fragments":["I"]},{"Key":"see `(int","Fragments":["\\0)`"]},{"Key":"`(int \\0)`","Fragments":["instead"]},{"Key":"\\0)` instead","Fragments":["of"]},{"Key":"of `48`","Fragments":["so"]},{"Key":"`48` so","Fragments":["that"]},{"Key":"the range","Fragments":["generation","of","A-Z"]},{"Key":"range generation","Fragments":["is"]},{"Key":"generation is","Fragments":["less"]},{"Key":"less magic.","Fragments":["Maybe"]},{"Key":"magic. Maybe","Fragments":["something"]},{"Key":"(def from-zero","Fragments":["(int"]},{"Key":"from-zero (int","Fragments":["\\0))"]},{"Key":"(def to-nine","Fragments":["(int"]},{"Key":"to-nine (int","Fragments":["\\9))"]},{"Key":"(def NUMBERS","Fragments":["(map"]},{"Key":"NUMBERS (map","Fragments":["char"]},{"Key":"(map char","Fragments":["(range","[98","(range"]},{"Key":"char (range","Fragments":["from-zero","(int"]},{"Key":"(range from-zero","Fragments":["to-nine)))"]},{"Key":"more thing,","Fragments":["if"]},{"Key":"thing, if","Fragments":["vars","you"]},{"Key":"if vars","Fragments":["aren't"]},{"Key":"vars aren't","Fragments":["supposed"]},{"Key":"aren't supposed","Fragments":["to"]},{"Key":"be public,","Fragments":["tag"]},{"Key":"public, tag","Fragments":["them"]},{"Key":"tag them","Fragments":["with"]},{"Key":"with `:^private`","Fragments":["between"]},{"Key":"`:^private` between","Fragments":["`def`"]},{"Key":"between `def`","Fragments":["and","and","and"]},{"Key":"`def` and","Fragments":["binding","binding","`defn`"]},{"Key":"and binding","Fragments":["name.","name."]},{"Key":"rather use","Fragments":["the","`:exclude`","the","a"]},{"Key":"that. You","Fragments":["could"]},{"Key":"separate var","Fragments":["based"]},{"Key":"var based","Fragments":["on"]},{"Key":"on `empty-dna-frequencies`","Fragments":["(use"]},{"Key":"`empty-dna-frequencies` (use","Fragments":["`set`,"]},{"Key":"(use `set`,","Fragments":["`keys`"]},{"Key":"`set`, `keys`","Fragments":["and"]},{"Key":"`keys` and","Fragments":["`conj`)"]},{"Key":"and `conj`)","Fragments":["containing"]},{"Key":"`conj`) containing","Fragments":["a"]},{"Key":"containing a","Fragments":["set","string.","capital"]},{"Key":"valid nucleotides.","Fragments":["A","`defn`"]},{"Key":"nucleotides. A","Fragments":["set"]},{"Key":"A set","Fragments":["works","can"]},{"Key":"set works","Fragments":["also"]},{"Key":"works also","Fragments":["as"]},{"Key":"for containment,","Fragments":["like:"]},{"Key":"user=\u0026gt; (#{\\a","Fragments":["\\b","\\b","\\b","\\b","\\b","\\b"]},{"Key":"(#{\\a \\b","Fragments":["\\c}","\\c}","\\c}","\\c}","\\c}","\\c}"]},{"Key":"\\b \\c}","Fragments":["\\a)","\\d)","\\a)","\\d)","\\a)","\\d)","\"dzięcielina\")`,"]},{"Key":" Exploit","Fragments":["that."]},{"Key":"not about","Fragments":["caching/memoize","lazy"]},{"Key":"about caching/memoize","Fragments":["-"]},{"Key":"caching/memoize -","Fragments":["the"]},{"Key":"`word` argument","Fragments":["does","would"]},{"Key":"argument does","Fragments":["not"]},{"Key":"not change","Fragments":["so"]},{"Key":"change so","Fragments":["it"]},{"Key":"be processed","Fragments":["once."]},{"Key":"processed once.","Fragments":["You"]},{"Key":"once. You","Fragments":["can"]},{"Key":"checking anagrams","Fragments":["-"]},{"Key":"anagrams -","Fragments":["a"]},{"Key":"a factory","Fragments":["of"]},{"Key":"factory of","Fragments":["sorts"]},{"Key":"of sorts","Fragments":["which"]},{"Key":"sorts which","Fragments":["-"]},{"Key":"which -","Fragments":["intiated","when","without"]},{"Key":"- intiated","Fragments":["with"]},{"Key":"intiated with","Fragments":["the"]},{"Key":"`word` to","Fragments":["compare","avoid","avoid"]},{"Key":"against -","Fragments":["generates"]},{"Key":"- generates","Fragments":["its'"]},{"Key":"generates its'","Fragments":["processed"]},{"Key":"its' processed","Fragments":["form"]},{"Key":"processed form","Fragments":["in"]},{"Key":"the closure","Fragments":["and"]},{"Key":"closure and","Fragments":["returns","makes"]},{"Key":"and returns","Fragments":["a"]},{"Key":"accepting a","Fragments":["candidate"]},{"Key":"a candidate","Fragments":["argument"]},{"Key":"candidate argument","Fragments":["that"]},{"Key":"is checked","Fragments":["both"]},{"Key":"checked both","Fragments":["against"]},{"Key":"both against","Fragments":["normal"]},{"Key":"against normal","Fragments":["word"]},{"Key":"normal word","Fragments":["(weed"]},{"Key":"word (weed","Fragments":["out"]},{"Key":"(weed out","Fragments":["identical"]},{"Key":"out identical","Fragments":["words"]},{"Key":"identical words","Fragments":["because"]},{"Key":"words because","Fragments":["these"]},{"Key":"because these","Fragments":["don't"]},{"Key":"these don't","Fragments":["qualify"]},{"Key":"don't qualify","Fragments":["as"]},{"Key":"qualify as","Fragments":["anagrams)"]},{"Key":"as anagrams)","Fragments":["and"]},{"Key":"anagrams) and","Fragments":["the"]},{"Key":"the processed","Fragments":["one."]},{"Key":"code warrants","Fragments":["optimization"]},{"Key":"warrants optimization","Fragments":["(yet)."]},{"Key":"optimization (yet).","Fragments":["I"]},{"Key":"(yet). I","Fragments":["could"]},{"Key":"could introduce","Fragments":["some"]},{"Key":"introduce some","Fragments":["sort","unintended"]},{"Key":"of cache,","Fragments":["but"]},{"Key":"cache, but","Fragments":["that"]},{"Key":"more complication","Fragments":["(unless"]},{"Key":"complication (unless","Fragments":["Clojure"]},{"Key":"(unless Clojure","Fragments":["has"]},{"Key":"some easy","Fragments":["auto-memoization"]},{"Key":"easy auto-memoization","Fragments":["feature"]},{"Key":"auto-memoization feature","Fragments":["I'm"]},{"Key":"feature I'm","Fragments":["not"]},{"Key":"agree on","Fragments":["the","\"universe\";"]},{"Key":"the function,","Fragments":["though."]},{"Key":" `valid-nucleotide?`","Fragments":["seems"]},{"Key":"`valid-nucleotide?` seems","Fragments":["a"]},{"Key":"bit wonky,","Fragments":["in"]},{"Key":"wonky, in","Fragments":["part"]},{"Key":"in part","Fragments":["because"]},{"Key":"part because","Fragments":["(zero?","I've"]},{"Key":"because (zero?","Fragments":["nil)"]},{"Key":"(zero? nil)","Fragments":["throws"]},{"Key":"nil) throws","Fragments":["a"]},{"Key":"throws a","Fragments":["NullPointerException."]},{"Key":"a NullPointerException.","Fragments":["May"]},{"Key":"NullPointerException. May","Fragments":["end"]},{"Key":"May end","Fragments":["up"]},{"Key":"up rethinking","Fragments":["this."]},{"Key":" Saw","Fragments":["some"]},{"Key":"Saw some","Fragments":["errors"]},{"Key":"some errors","Fragments":["that"]},{"Key":"errors that","Fragments":["were"]},{"Key":"that were","Fragments":["new","readily","in"]},{"Key":"were new","Fragments":["to"]},{"Key":"a binding","Fragments":["for","with"]},{"Key":"for `(get","Fragments":["(nucleotide-counts"]},{"Key":"`(get (nucleotide-counts","Fragments":["strand)"]},{"Key":"(nucleotide-counts strand)","Fragments":["molecule"]},{"Key":"strand) molecule","Fragments":["0)`,"]},{"Key":"molecule 0)`,","Fragments":["so"]},{"Key":"0)`, so","Fragments":["I'll"]},{"Key":"into this","Fragments":["as","kind"]},{"Key":"Just don't","Fragments":["get"]},{"Key":"get DRY","Fragments":["at"]},{"Key":"DRY at","Fragments":["all"]},{"Key":"all costs","Fragments":["and"]},{"Key":"costs and","Fragments":["it"]},{"Key":"look fine","Fragments":[":)"]},{"Key":"was using","Fragments":["frequencies","`cond`","Date"]},{"Key":"using frequencies","Fragments":["and","for"]},{"Key":"frequencies and","Fragments":["merging","canonicalized","re-seq"]},{"Key":"and merging","Fragments":["with"]},{"Key":"merging with","Fragments":["a","a"]},{"Key":"a base","Fragments":["map;"]},{"Key":"base map;","Fragments":["but"]},{"Key":"map; but","Fragments":["didn't"]},{"Key":"but didn't","Fragments":["really","know","come"]},{"Key":"default map","Fragments":["creation"]},{"Key":"map creation","Fragments":["(see"]},{"Key":"creation (see","Fragments":["my"]},{"Key":"(see my","Fragments":["first"]},{"Key":"I worry","Fragments":["that"]},{"Key":"worry that","Fragments":["the"]},{"Key":"function given","Fragments":["to"]},{"Key":"enough since","Fragments":["it"]},{"Key":"it uses","Fragments":["the"]},{"Key":"uses the","Fragments":["%1,%2","case","simple","multi-collection","variable"]},{"Key":"the %1,%2","Fragments":["shorthand."]},{"Key":"%1,%2 shorthand.","Fragments":["Might"]},{"Key":"shorthand. Might","Fragments":["it"]},{"Key":"a property","Fragments":["````(fn"]},{"Key":"property ````(fn","Fragments":["[...]...)```"]},{"Key":"````(fn [...]...)```","Fragments":["so"]},{"Key":"[...]...)``` so","Fragments":["that"]},{"Key":"bindings could","Fragments":["be"]},{"Key":"Ah and","Fragments":["instead"]},{"Key":"instead `:rename`","Fragments":["I'd"]},{"Key":"`:rename` I'd","Fragments":["rather"]},{"Key":"use `:exclude`","Fragments":["now.","to"]},{"Key":" @melba","Fragments":["again"]},{"Key":"@melba again","Fragments":["with"]},{"Key":"your riddles!","Fragments":[":)"]},{"Key":" Am","Fragments":["looking"]},{"Key":"Am looking","Fragments":["at"]},{"Key":"at how","Fragments":["sets","much"]},{"Key":"how sets","Fragments":["might"]},{"Key":"sets might","Fragments":["make"]},{"Key":"code better","Fragments":["currently..."]},{"Key":"has also","Fragments":["sets"]},{"Key":"also sets","Fragments":[":)"]},{"Key":"sets :)","Fragments":["The"]},{"Key":"The function","Fragments":["that","is","passed","I"]},{"Key":"some past","Fragments":["assignments"]},{"Key":"past assignments","Fragments":["could"]},{"Key":"assignments could","Fragments":["help"]},{"Key":"with simplifying","Fragments":["the"]},{"Key":"simplifying the","Fragments":["code.","code","code","anonymous"]},{"Key":"feels odd","Fragments":["to"]},{"Key":"odd to","Fragments":["me","conclude","me."]},{"Key":"me that","Fragments":["following","you","you","`clojure.core.frequencies`","'last'","I","way."]},{"Key":"that following","Fragments":["the"]},{"Key":"following the","Fragments":["tests"]},{"Key":"Clojure led","Fragments":["me"]},{"Key":"led me","Fragments":["to"]},{"Key":"the opposite","Fragments":["relationship"]},{"Key":"opposite relationship","Fragments":["of"]},{"Key":"relationship of","Fragments":["nucleotide-counts"]},{"Key":"nucleotide-counts and","Fragments":["count"]},{"Key":"count that","Fragments":["I"]},{"Key":"got when","Fragments":["I"]},{"Key":"exercise in","Fragments":["Ruby.","a","Javascript","the"]},{"Key":"That's how","Fragments":["it"]},{"Key":"in lisps.","Fragments":["And,"]},{"Key":"lisps. And,","Fragments":["well,"]},{"Key":"And, well,","Fragments":["vertical"]},{"Key":"well, vertical","Fragments":["space"]},{"Key":"space is","Fragments":["too"]},{"Key":"too precious","Fragments":["to"]},{"Key":"precious to","Fragments":["waste"]},{"Key":"waste it","Fragments":["for"]},{"Key":"some measly","Fragments":["parens"]},{"Key":"measly parens","Fragments":[";)"]},{"Key":"mean line","Fragments":["8"]},{"Key":"line 8","Fragments":["should","-"]},{"Key":"8 should","Fragments":["be"]},{"Key":"be `\\U","Fragments":["0})`?"]},{"Key":"`\\U 0})`?","Fragments":["It"]},{"Key":"0})`? It","Fragments":["just"]},{"Key":"just looks","Fragments":["so","wrong"]},{"Key":"so wrong","Fragments":["to"]},{"Key":"Good. But","Fragments":["once"]},{"Key":"But once","Fragments":["again"]},{"Key":"once again","Fragments":["-"]},{"Key":"again -","Fragments":["closing","I"]},{"Key":"- closing","Fragments":["brackets"]},{"Key":"closing brackets","Fragments":["in","onto","even"]},{"Key":"brackets in","Fragments":["nucleotide"]},{"Key":"in nucleotide","Fragments":["map!"]},{"Key":" `if-let`!!","Fragments":["Just"]},{"Key":"`if-let`!! Just","Fragments":["what"]},{"Key":"Just what","Fragments":["I"]},{"Key":"I needed,","Fragments":["thanks."]},{"Key":"Then `if-let`","Fragments":["is"]},{"Key":"`if-let` is","Fragments":["what"]},{"Key":"is what","Fragments":["you","I","indicates","you","we're","I","I","you"]},{"Key":" New","Fragments":["version","version"]},{"Key":"New version","Fragments":["with","uploaded."]},{"Key":"with bindings","Fragments":["for"]},{"Key":"for forms","Fragments":["interleaved","that"]},{"Key":"forms interleaved","Fragments":["with"]},{"Key":" starting","Fragments":["to"]},{"Key":"I wanted","Fragments":["to","to","to","to","to","to","to","to","to","to","to","to","was","to","to","to","those","to","it.","to","to"]},{"Key":"small nitpick","Fragments":["while","is","is"]},{"Key":"nitpick while","Fragments":["leaving"]},{"Key":"while leaving","Fragments":["'Looks"]},{"Key":"leaving 'Looks","Fragments":["great!'"]},{"Key":"'Looks great!'","Fragments":["at"]},{"Key":"great!' at","Fragments":["the"]},{"Key":"same time.","Fragments":["Eh..","But"]},{"Key":" `when-not`","Fragments":["could"]},{"Key":"`when-not` could","Fragments":["spare"]},{"Key":"spare you","Fragments":["a","one","a"]},{"Key":"you a","Fragments":["pair","lot","pair","new","similar","seq"]},{"Key":"a pair","Fragments":["of","of","of","of"]},{"Key":"Maybe input","Fragments":["validation"]},{"Key":"validation would","Fragments":["look","be"]},{"Key":"when moved","Fragments":["to"]},{"Key":"separate non-public","Fragments":["helper."]},{"Key":"non-public helper.","Fragments":["However,"]},{"Key":"helper. However,","Fragments":["that"]},{"Key":"However, that","Fragments":["may","expression","could"]},{"Key":"you clarify","Fragments":["your","the"]},{"Key":"clarify your","Fragments":["comment"]},{"Key":"on sets","Fragments":["working"]},{"Key":"sets working","Fragments":["as"]},{"Key":"working as","Fragments":["functions,","expected."]},{"Key":"as functions,","Fragments":["or","which","where","where","so"]},{"Key":"functions, or","Fragments":["link","even"]},{"Key":"or link","Fragments":["to"]},{"Key":"example ?","Fragments":["Thanks."]},{"Key":"It's the","Fragments":["function","little","shortest"]},{"Key":"previous assignment.","Fragments":["Camelcased"]},{"Key":"assignment. Camelcased","Fragments":["names"]},{"Key":"Camelcased names","Fragments":["are"]},{"Key":"are reserved","Fragments":["for"]},{"Key":"for protocols,","Fragments":["types"]},{"Key":"protocols, types","Fragments":["and"]},{"Key":"types and","Fragments":["java"]},{"Key":"interop. Please","Fragments":["use"]},{"Key":"use lowercase,","Fragments":["hyphenated"]},{"Key":"lowercase, hyphenated","Fragments":["names."]},{"Key":" Wasn't","Fragments":["aware","happy"]},{"Key":"Wasn't aware","Fragments":["of"]},{"Key":"of `reduce-kv`,","Fragments":["pretty"]},{"Key":"`reduce-kv`, pretty","Fragments":["cool!"]},{"Key":"I've tried","Fragments":["to","to","to","to","with"]},{"Key":"simplify this","Fragments":["with","one.","significantly","a","quite","code","immensely","into"]},{"Key":"with group-by","Fragments":["but"]},{"Key":"group-by but","Fragments":["I"]},{"Key":"can't quite","Fragments":["get","place"]},{"Key":"quite get","Fragments":["it.","it.","why"]},{"Key":" BTW:","Fragments":["totallly"]},{"Key":"BTW: totallly","Fragments":["drunk"]},{"Key":"totallly drunk","Fragments":["while"]},{"Key":"drunk while","Fragments":["doing"]},{"Key":" @rafael,","Fragments":["@rafael"]},{"Key":"@rafael, @rafael","Fragments":["and"]},{"Key":"@rafael and","Fragments":["@rafael"]},{"Key":"and @rafael","Fragments":["totally"]},{"Key":"@rafael totally","Fragments":["helped"]},{"Key":"totally helped","Fragments":["(even"]},{"Key":"helped (even","Fragments":["if"]},{"Key":"if they","Fragments":["denied","were","really","can","are","weren't","had","are","differ","are"]},{"Key":"they denied","Fragments":["it"]},{"Key":"denied it","Fragments":["later)"]},{"Key":"use `if`","Fragments":["I'll"]},{"Key":"`if` I'll","Fragments":["have"]},{"Key":"call `get`","Fragments":["twice."]},{"Key":"`get` twice.","Fragments":["So"]},{"Key":"twice. So","Fragments":["ifnil?"]},{"Key":"So ifnil?","Fragments":["is"]},{"Key":"ifnil? is","Fragments":["really"]},{"Key":"check the","Fragments":["value","grade","assertion"]},{"Key":"value and","Fragments":["return","not","passed"]},{"Key":"return it,","Fragments":["with"]},{"Key":"it, with","Fragments":["a"]},{"Key":"a recourse","Fragments":["if"]},{"Key":"recourse if","Fragments":["it's"]},{"Key":"Nice touch","Fragments":["with","with"]},{"Key":"touch with","Fragments":["memoize","handling"]},{"Key":"with memoize","Fragments":["but"]},{"Key":"memoize but","Fragments":["remember"]},{"Key":"but remember","Fragments":["that"]},{"Key":"is naive","Fragments":["and"]},{"Key":"naive and","Fragments":["doesn't"]},{"Key":"and doesn't","Fragments":["have","require"]},{"Key":"any cache","Fragments":["eviction"]},{"Key":"cache eviction","Fragments":["strategy."]},{"Key":"tip, I","Fragments":["was"]},{"Key":"was looking","Fragments":["for","for","quite","for","for,","for"]},{"Key":"While writing","Fragments":["functions"]},{"Key":"functions I","Fragments":["have","look","provide","see","wrote"]},{"Key":"my parens","Fragments":["with"]},{"Key":"with whitespace,","Fragments":["I"]},{"Key":"whitespace, I","Fragments":["just"]},{"Key":"just forgot","Fragments":["to"]},{"Key":"clean up","Fragments":["a","your","that","some","the","the"]},{"Key":"few of","Fragments":["them","the","the","the","the"]},{"Key":"them this","Fragments":["time."]},{"Key":"the great","Fragments":["tips!"]},{"Key":"for `ifnil?`.","Fragments":["`false`"]},{"Key":"`ifnil?`. `false`","Fragments":["AND"]},{"Key":"`false` AND","Fragments":["`nil`"]},{"Key":"AND `nil`","Fragments":["are"]},{"Key":"`nil` are","Fragments":["the"]},{"Key":"values treated","Fragments":["as"]},{"Key":"a logical","Fragments":["false.","evaluation"]},{"Key":"Great :)","Fragments":["`hamming-distance`"]},{"Key":":) `hamming-distance`","Fragments":["being"]},{"Key":"`hamming-distance` being","Fragments":["general"]},{"Key":"being general","Fragments":["purpose,"]},{"Key":"general purpose,","Fragments":["I"]},{"Key":"purpose, I","Fragments":["think"]},{"Key":"using `xs`","Fragments":["and"]},{"Key":"`xs` and","Fragments":["`ys`"]},{"Key":"and `ys`","Fragments":["is"]},{"Key":"`ys` is","Fragments":["justified."]},{"Key":"It's more","Fragments":["idiomatic"]},{"Key":"not leave","Fragments":["closing"]},{"Key":"parentheses in","Fragments":["their","a","my","your","case"]},{"Key":"line. Although","Fragments":["using"]},{"Key":"Although using","Fragments":["java","Java","native"]},{"Key":"interop is","Fragments":["fine,","perfectly"]},{"Key":"fine, there's","Fragments":["also"]},{"Key":"also `clojure.string`","Fragments":["which"]},{"Key":"`clojure.string` which","Fragments":["can"]},{"Key":"can partly","Fragments":["help"]},{"Key":"partly help","Fragments":["here"]},{"Key":"help here","Fragments":["-","too?"]},{"Key":"that string","Fragments":["can","may"]},{"Key":"characters. Consider","Fragments":["making"]},{"Key":"Consider making","Fragments":["code","functions","`anagram-of?`"]},{"Key":"making code","Fragments":["more","more"]},{"Key":"code more","Fragments":["self","efficient","self-documenting","self-documenting","readable.","expressive","readable!","precise","clear.","clear,","succint","explicit"]},{"Key":"more self","Fragments":["documenting,"]},{"Key":"self documenting,","Fragments":["either"]},{"Key":"documenting, either","Fragments":["by"]},{"Key":"either by","Fragments":["using"]},{"Key":"using inline","Fragments":["comments"]},{"Key":"comments describing","Fragments":["the"]},{"Key":"of particular","Fragments":["checks","checks"]},{"Key":"particular checks","Fragments":["or","inside"]},{"Key":"checks or","Fragments":["by"]},{"Key":"or by","Fragments":["moving"]},{"Key":"to (non-public?)","Fragments":["helper"]},{"Key":"(non-public?) helper","Fragments":["functions."]},{"Key":"helper functions.","Fragments":["It","I"]},{"Key":"functions. It","Fragments":["would","addresses","allows","is"]},{"Key":"was at","Fragments":["least","least"]},{"Key":"one blank","Fragments":["line"]},{"Key":"between top-level","Fragments":["forms."]},{"Key":"top-level forms.","Fragments":["More"]},{"Key":"forms. More","Fragments":["on"]},{"Key":"on formatting","Fragments":["and","and","or"]},{"Key":"formatting and","Fragments":["naming","naming"]},{"Key":"and naming","Fragments":["conventions","conventions","the"]},{"Key":"naming conventions","Fragments":["can","please","for"]},{"Key":"conventions can","Fragments":["be"]},{"Key":"found in","Fragments":["community","a","the"]},{"Key":"in community","Fragments":["maintained"]},{"Key":"community maintained","Fragments":["clojure"]},{"Key":"maintained clojure","Fragments":["style"]},{"Key":"style guide:","Fragments":["https://github.com/bbatsov/clojure-style-guide"]},{"Key":"that bad,","Fragments":["however"]},{"Key":"bad, however","Fragments":["I"]},{"Key":"would try","Fragments":["to","to","to"]},{"Key":"out something","Fragments":["with"]},{"Key":"with multimethods.","Fragments":["Besides,"]},{"Key":"multimethods. Besides,","Fragments":["code"]},{"Key":"Besides, code","Fragments":["formatting"]},{"Key":"please don't","Fragments":["leave"]},{"Key":"leave opening/closing","Fragments":["parentheses/brackets"]},{"Key":"opening/closing parentheses/brackets","Fragments":["in"]},{"Key":"parentheses/brackets in","Fragments":["their"]},{"Key":"line. In","Fragments":["case"]},{"Key":"macros, it's","Fragments":["better"]},{"Key":"to align","Fragments":["next"]},{"Key":"align next","Fragments":["expressions"]},{"Key":"next expressions","Fragments":["to"]},{"Key":"first one.","Fragments":["For"]},{"Key":"one. For","Fragments":["more"]},{"Key":"more on","Fragments":["formatting","clojure's","Clojure"]},{"Key":"conventions please","Fragments":["refer"]},{"Key":"please refer","Fragments":["to"]},{"Key":"There's really","Fragments":["nothing"]},{"Key":"really nothing","Fragments":["wrong"]},{"Key":"with shadowing","Fragments":["core"]},{"Key":"shadowing core","Fragments":["Clojure"]},{"Key":"core Clojure","Fragments":["functions","method","method"]},{"Key":"Clojure functions","Fragments":["if","that","yourself,"]},{"Key":"functions if","Fragments":["it","I"]},{"Key":"given API.","Fragments":["When"]},{"Key":"API. When","Fragments":["importing,"]},{"Key":"When importing,","Fragments":["you"]},{"Key":"importing, you","Fragments":["can"]},{"Key":"can always","Fragments":["leave","remove","create","use","go","make"]},{"Key":"always leave","Fragments":["it"]},{"Key":"it under","Fragments":["aliased"]},{"Key":"under aliased","Fragments":["namespace,"]},{"Key":"aliased namespace,","Fragments":["so"]},{"Key":"namespace, so","Fragments":["there"]},{"Key":"so there","Fragments":["won't","is","might","shouldn't","shouldn't","are"]},{"Key":"there won't","Fragments":["be","be"]},{"Key":"any clashes","Fragments":["when"]},{"Key":"clashes when","Fragments":["using"]},{"Key":"it from","Fragments":["the","being","within","java,"]},{"Key":"the outside.","Fragments":["Sets"]},{"Key":"outside. Sets","Fragments":["work"]},{"Key":"Sets work","Fragments":["also"]},{"Key":"checking containment,","Fragments":["like:"]},{"Key":"Consider using","Fragments":["`frequencies`","[the","the"]},{"Key":"`frequencies` to","Fragments":["make"]},{"Key":"make code","Fragments":["a","short","in"]},{"Key":"off. Please","Fragments":["don't"]},{"Key":"Please don't","Fragments":["leave"]},{"Key":"separate lines.","Fragments":["You"]},{"Key":"lines. You","Fragments":["could"]},{"Key":"also reverse","Fragments":["order"]},{"Key":"reverse order","Fragments":["of"]},{"Key":"function declarations","Fragments":["so"]},{"Key":"declarations so","Fragments":["that"]},{"Key":"the highest","Fragments":["level"]},{"Key":"highest level","Fragments":["of","of"]},{"Key":"abstraction is","Fragments":["at","as","probably"]},{"Key":"top (`sing`,","Fragments":["`verse`)"]},{"Key":"(`sing`, `verse`)","Fragments":["-"]},{"Key":"`verse`) -","Fragments":["it"]},{"Key":"will read","Fragments":["better"]},{"Key":"read better","Fragments":["in","and"]},{"Key":"opinion. `declare`","Fragments":["will"]},{"Key":"`declare` will","Fragments":["help","help","help","help"]},{"Key":"that. Other","Fragments":["than"]},{"Key":"While I've","Fragments":["been","read"]},{"Key":"been dabbling","Fragments":["a"]},{"Key":"dabbling a","Fragments":["bit"]},{"Key":"Clojure during","Fragments":["the"]},{"Key":"during the","Fragments":["monthly","reduction,"]},{"Key":"the monthly","Fragments":["Coffee"]},{"Key":"monthly Coffee","Fragments":["\u0026amp;"]},{"Key":"Coffee \u0026amp;","Fragments":["Clojure"]},{"Key":"\u0026amp; Clojure","Fragments":["chats"]},{"Key":"Clojure chats","Fragments":["w/"]},{"Key":"chats w/","Fragments":["Carin"]},{"Key":"w/ Carin","Fragments":["Meier"]},{"Key":"Carin Meier","Fragments":["(gigasquid),"]},{"Key":"Meier (gigasquid),","Fragments":["I"]},{"Key":"(gigasquid), I","Fragments":["was"]},{"Key":"was mostly","Fragments":["tripped"]},{"Key":"mostly tripped","Fragments":["up"]},{"Key":"tripped up","Fragments":["by"]},{"Key":"up by","Fragments":["my","splitting"]},{"Key":"by my","Fragments":["knowledge","anagram","python"]},{"Key":"of Emacs-Lisp","Fragments":["and"]},{"Key":"Emacs-Lisp and","Fragments":["Scheme"]},{"Key":"and Scheme","Fragments":["syntax."]},{"Key":" Overall,","Fragments":["this","the","clean","looks","I","it's"]},{"Key":"Overall, this","Fragments":["is"]},{"Key":"an analog","Fragments":["of"]},{"Key":"analog of","Fragments":["my"]},{"Key":"my ruby/bob","Fragments":["solution."]},{"Key":"a case","Fragments":["statement","mapping","like","insensitive","normalized","normalized","in","statement).","where","function","where","where"]},{"Key":"case statement","Fragments":["but","to","in","like","with","is"]},{"Key":"statement but","Fragments":["I'm"]},{"Key":"I'm interested","Fragments":["in"]},{"Key":"in ways","Fragments":["to"]},{"Key":"separate configuration","Fragments":["from"]},{"Key":"configuration from","Fragments":["the"]},{"Key":"the logic/algorithm.","Fragments":["I'm"]},{"Key":"logic/algorithm. I'm","Fragments":["surprised"]},{"Key":"I'm surprised","Fragments":["the"]},{"Key":"surprised the","Fragments":["result"]},{"Key":"so verbose","Fragments":["so"]},{"Key":"verbose so","Fragments":["I"]},{"Key":"have approached","Fragments":["this"]},{"Key":"approached this","Fragments":["differently"]},{"Key":"this differently","Fragments":["and"]},{"Key":"differently and","Fragments":["achieved"]},{"Key":"and achieved","Fragments":["the"]},{"Key":"achieved the","Fragments":["same"]},{"Key":" Frequencies","Fragments":["doesn't"]},{"Key":"Frequencies doesn't","Fragments":["even"]},{"Key":"doesn't even","Fragments":["require","try","pass"]},{"Key":"even require","Fragments":["that"]},{"Key":"your words","Fragments":["are","list?"]},{"Key":"are sorted.","Fragments":[":-)"]},{"Key":"gave the","Fragments":["example"]},{"Key":"previous nitpick","Fragments":["-"]},{"Key":"however it","Fragments":["got","doesn't","caused"]},{"Key":"it got","Fragments":["a"]},{"Key":"bit obscured.","Fragments":["Once"]},{"Key":"obscured. Once","Fragments":["again,"]},{"Key":"Once again,","Fragments":["as","+1"]},{"Key":"again, as","Fragments":["a"]},{"Key":"reducing the","Fragments":["overhead","overhead","overhead","overhead","overhead","repetition,","overhead","duplication."]},{"Key":"the overhead","Fragments":["of","of","of","of","of","of","of","of","of"]},{"Key":"processing the","Fragments":["same","same","word","word","word","word","number.","word","`target`","README","word","map","word","word"]},{"Key":"and over","Fragments":["for","in","with","with","again."]},{"Key":"over for","Fragments":["comparison."]},{"Key":"for comparison.","Fragments":["`sort-phrase`"]},{"Key":"comparison. `sort-phrase`","Fragments":["does"]},{"Key":"`sort-phrase` does","Fragments":["not"]},{"Key":"not describe","Fragments":["the"]},{"Key":"real intent","Fragments":["of"]},{"Key":" Helper","Fragments":["functions"]},{"Key":"Helper functions","Fragments":["would"]},{"Key":"they were","Fragments":["not","testing"]},{"Key":"were not","Fragments":["made"]},{"Key":"not made","Fragments":["as"]},{"Key":"made as","Fragments":["one-liners"]},{"Key":"as one-liners","Fragments":["-"]},{"Key":"one-liners -","Fragments":["at"]},{"Key":"one line-break","Fragments":["would"]},{"Key":"line-break would","Fragments":["help."]},{"Key":"would help.","Fragments":["Also"]},{"Key":"help. Also","Fragments":["consider"]},{"Key":"if those","Fragments":["helpers"]},{"Key":"those helpers","Fragments":["should","to"]},{"Key":"interface. Remember","Fragments":["that"]},{"Key":"use wide","Fragments":["range"]},{"Key":"wide range","Fragments":["of","of"]},{"Key":"in symbols","Fragments":["(`?`,"]},{"Key":"symbols (`?`,","Fragments":["'!'"]},{"Key":"(`?`, '!'","Fragments":["and"]},{"Key":"'!' and","Fragments":["many"]},{"Key":"Please put","Fragments":["`require`"]},{"Key":"put `require`","Fragments":["inside"]},{"Key":"`require` inside","Fragments":["`ns`"]},{"Key":"macro. That's","Fragments":["the"]},{"Key":"That's the","Fragments":["place","one"]},{"Key":"the place","Fragments":["to"]},{"Key":"place to","Fragments":["put","bootstrap"]},{"Key":"put these","Fragments":["beyond"]},{"Key":"these beyond","Fragments":["the"]},{"Key":"of fiddling","Fragments":["directly"]},{"Key":" Helped","Fragments":["with"]},{"Key":"Helped with","Fragments":["getting"]},{"Key":"with getting","Fragments":["drunk","the"]},{"Key":"getting drunk","Fragments":["or","and"]},{"Key":"drunk or","Fragments":["with"]},{"Key":"the program?","Fragments":[";)"]},{"Key":"program? ;)","Fragments":["Binding"]},{"Key":";) Binding","Fragments":["names"]},{"Key":"Binding names","Fragments":["could"]},{"Key":"names could","Fragments":["be"]},{"Key":"meaningful -","Fragments":["maybe"]},{"Key":"maybe instead","Fragments":["of","of"]},{"Key":"functions, create","Fragments":["bindings"]},{"Key":"for target","Fragments":["values"]},{"Key":"target values","Fragments":["so"]},{"Key":"values so","Fragments":["that"]},{"Key":"that when","Fragments":["interleaving","you","their","their","you"]},{"Key":"when interleaving","Fragments":["those"]},{"Key":"interleaving those","Fragments":["with"]},{"Key":"those with","Fragments":["string"]},{"Key":"string literals,","Fragments":["there"]},{"Key":"literals, there","Fragments":["will"]},{"Key":"there will","Fragments":["be"]},{"Key":"the verse.","Fragments":["To"]},{"Key":"verse. To","Fragments":["maintain"]},{"Key":"To maintain","Fragments":["readability,"]},{"Key":"maintain readability,","Fragments":["you"]},{"Key":"in enclosing","Fragments":["lexical","lexical","scope"]},{"Key":"enclosing lexical","Fragments":["scope","scope"]},{"Key":"lexical scope","Fragments":["to","to"]},{"Key":"scope to","Fragments":["keep","stay","`bob`."]},{"Key":"Consider creating","Fragments":["bindings"]},{"Key":"creating bindings","Fragments":["for","in","with"]},{"Key":"all forms","Fragments":["that"]},{"Key":"forms that","Fragments":["interleave","are"]},{"Key":"that interleave","Fragments":["with"]},{"Key":"interleave with","Fragments":["string"]},{"Key":"string literals","Fragments":["(these","I","with","and"]},{"Key":"literals (these","Fragments":["can"]},{"Key":"(these can","Fragments":["be"]},{"Key":"be made","Fragments":["in","more","order","order-independent","explicit","shorter"]},{"Key":"made in","Fragments":["enclosing"]},{"Key":"stay close","Fragments":["for"]},{"Key":"close for","Fragments":["context)."]},{"Key":"for context).","Fragments":["It"]},{"Key":"context). It","Fragments":["will"]},{"Key":"make `verse`","Fragments":["and"]},{"Key":"`verse` and","Fragments":["`take-down-or-store`"]},{"Key":"and `take-down-or-store`","Fragments":["more"]},{"Key":"`take-down-or-store` more","Fragments":["readable."]},{"Key":"Oh I","Fragments":["get"]},{"Key":"get it...","Fragments":["you"]},{"Key":"it... you","Fragments":["know"]},{"Key":"`map` for","Fragments":["it's"]},{"Key":"for it's","Fragments":["unordered"]},{"Key":"it's unordered","Fragments":["nature,"]},{"Key":"unordered nature,","Fragments":["that's"]},{"Key":"nature, that's","Fragments":["a"]},{"Key":"the info","Fragments":["on","in"]},{"Key":"info on","Fragments":["naming"]},{"Key":"on naming","Fragments":["conventions,"]},{"Key":"naming conventions,","Fragments":["old"]},{"Key":"conventions, old","Fragments":["Java"]},{"Key":"old Java","Fragments":["habits"]},{"Key":"Java habits","Fragments":["die"]},{"Key":"habits die","Fragments":["hard."]},{"Key":"of `join`","Fragments":["and"]},{"Key":"`join` and","Fragments":["stopped","`seq`"]},{"Key":"and stopped","Fragments":["sorting","looking"]},{"Key":"stopped sorting","Fragments":["`word`"]},{"Key":"sorting `word`","Fragments":["repeatedly."]},{"Key":"`word` repeatedly.","Fragments":["But"]},{"Key":"repeatedly. But","Fragments":["I"]},{"Key":"`merge` would","Fragments":["suffice.","be"]},{"Key":"suffice. A","Fragments":["set"]},{"Key":"set can","Fragments":["also","do"]},{"Key":"also work","Fragments":["as","if"]},{"Key":"like `(#{1","Fragments":["2"]},{"Key":"`(#{1 2","Fragments":["3}","3}","3}"]},{"Key":"2 3}","Fragments":["2)","4)","2)`,"]},{"Key":"3} 2)","Fragments":["=\u0026gt;"]},{"Key":"2) =\u0026gt;","Fragments":["2`"]},{"Key":"=\u0026gt; 2`","Fragments":["or"]},{"Key":"2` or","Fragments":["`(#{1"]},{"Key":"or `(#{1","Fragments":["2"]},{"Key":"3} 4)","Fragments":["=\u0026gt;"]},{"Key":"4) =\u0026gt;","Fragments":["nil`."]},{"Key":"=\u0026gt; nil`.","Fragments":["Consider"]},{"Key":"nil`. Consider","Fragments":["this"]},{"Key":"Consider this","Fragments":["for"]},{"Key":"for simplifying","Fragments":["the"]},{"Key":"a bit.","Fragments":["For","I","Since"]},{"Key":"bit. For","Fragments":["conditional"]},{"Key":"For conditional","Fragments":["with"]},{"Key":"conditional with","Fragments":["only","a"]},{"Key":"with only","Fragments":["one",":pre","2","2","2","2","the"]},{"Key":"one branch","Fragments":["there's","being"]},{"Key":"branch there's","Fragments":["`when`"]},{"Key":"there's `when`","Fragments":["-"]},{"Key":"`when` -","Fragments":["it"]},{"Key":"will spare","Fragments":["you"]},{"Key":"you one","Fragments":["pair"]},{"Key":"one pair","Fragments":["of","of"]},{"Key":"of parentheses.","Fragments":["There's"]},{"Key":"parentheses. There's","Fragments":["also"]},{"Key":"also `if-let`","Fragments":["and"]},{"Key":"`if-let` and","Fragments":["`when-let`"]},{"Key":"and `when-let`","Fragments":["which"]},{"Key":"`when-let` which","Fragments":["can"]},{"Key":"use `join`.","Fragments":["Consider"]},{"Key":"`join`. Consider","Fragments":["eliminating"]},{"Key":"Consider eliminating","Fragments":["overhead","overhead"]},{"Key":"eliminating overhead","Fragments":["of","of"]},{"Key":"processing word","Fragments":["over"]},{"Key":"and over.","Fragments":["You","There's"]},{"Key":"over. You","Fragments":["can"]},{"Key":"effective by","Fragments":["swapping"]},{"Key":"know already","Fragments":["(nlogn"]},{"Key":"already (nlogn","Fragments":["vs"]},{"Key":"Good. One","Fragments":["more"]},{"Key":"although plain","Fragments":["symbol"]},{"Key":"plain symbol","Fragments":["for"]},{"Key":"symbol for","Fragments":["`require`"]},{"Key":"for `require`","Fragments":["can"]},{"Key":"`require` can","Fragments":["work","make"]},{"Key":"work inside","Fragments":["`ns`,"]},{"Key":"inside `ns`,","Fragments":["the"]},{"Key":"`ns`, the","Fragments":["correct"]},{"Key":"the correct","Fragments":["form","element.","format?","response","approach.","way"]},{"Key":"correct form","Fragments":["inside"]},{"Key":"form inside","Fragments":["the","`ns`:"]},{"Key":"a keyword","Fragments":["-","form","for"]},{"Key":"keyword -","Fragments":["`:require`"]},{"Key":" @treva","Fragments":["-"]},{"Key":"@treva -","Fragments":["thanks"]},{"Key":"taking this","Fragments":["pile"]},{"Key":"this pile","Fragments":["of"]},{"Key":"pile of","Fragments":["code"]},{"Key":"They helped","Fragments":["with"]},{"Key":"helped with","Fragments":["both"]},{"Key":"with both","Fragments":["getting","@talon"]},{"Key":"both getting","Fragments":["drunk"]},{"Key":"drunk and","Fragments":["the"]},{"Key":"that all","Fragments":["the","alphabetic","the"]},{"Key":"are green,","Fragments":["I'll"]},{"Key":"green, I'll","Fragments":["refactor."]},{"Key":"I'll refactor.","Fragments":["Hopefully"]},{"Key":"refactor. Hopefully","Fragments":["my"]},{"Key":"Hopefully my","Fragments":["next"]},{"Key":"next submission","Fragments":["will","complete"]},{"Key":"submission will","Fragments":["be"]},{"Key":"are making","Fragments":["that"]},{"Key":"making that","Fragments":["for","judgment"]},{"Key":"for kicks,","Fragments":["but"]},{"Key":"kicks, but","Fragments":["it"]},{"Key":"if program","Fragments":["coped"]},{"Key":"program coped","Fragments":["with"]},{"Key":"coped with","Fragments":["more"]},{"Key":"general set","Fragments":["of"]},{"Key":"of inputs,","Fragments":["as"]},{"Key":"inputs, as","Fragments":["it"]},{"Key":"is stated","Fragments":["in"]},{"Key":"in problem","Fragments":["specification"]},{"Key":"specification in","Fragments":["the"]},{"Key":"that commas","Fragments":["are"]},{"Key":"commas are","Fragments":["optional.","whitespace","considered"]},{"Key":"are optional.","Fragments":["Please"]},{"Key":"optional. Please","Fragments":["break"]},{"Key":"Please break","Fragments":["the"]},{"Key":"break the","Fragments":["functions","problem","flow"]},{"Key":"functions among","Fragments":["multiple"]},{"Key":"among multiple","Fragments":["lines","lines"]},{"Key":"multiple lines","Fragments":["-","would"]},{"Key":"lines -","Fragments":["it's"]},{"Key":"read. Consider","Fragments":["eliminating"]},{"Key":"word for","Fragments":["comparison","each","this","every","the","each"]},{"Key":"for comparison","Fragments":["over"]},{"Key":"comparison over","Fragments":["and"]},{"Key":"over. There's","Fragments":["another"]},{"Key":"There's another","Fragments":["core","function","function"]},{"Key":"clojure function,","Fragments":["which"]},{"Key":"function, which","Fragments":["-","is","are","is","could","shows"]},{"Key":"when swapped","Fragments":["for"]},{"Key":"swapped for","Fragments":["`sort`","`(partial"]},{"Key":"for `sort`","Fragments":["-"]},{"Key":"`sort` -","Fragments":["makes"]},{"Key":"- makes","Fragments":["the"]},{"Key":"vs n).","Fragments":["Hint:"]},{"Key":"n). Hint:","Fragments":["you"]},{"Key":"me. Eventually","Fragments":["you"]},{"Key":"Eventually you","Fragments":["could"]},{"Key":"consider hiding","Fragments":["the"]},{"Key":"hiding the","Fragments":["nucleotides"]},{"Key":"nucleotides behind","Fragments":["symbols"]},{"Key":"behind symbols","Fragments":["with"]},{"Key":"However, the","Fragments":["shorthand"]},{"Key":"shorthand names","Fragments":["are"]},{"Key":"strings alone","Fragments":["can"]},{"Key":"alone can","Fragments":["do."]},{"Key":" Hi..thanks","Fragments":["for"]},{"Key":"Hi..thanks for","Fragments":["the"]},{"Key":"the enlightment,","Fragments":["I"]},{"Key":"enlightment, I","Fragments":["saw"]},{"Key":"saw so","Fragments":["many"]},{"Key":"so many","Fragments":["way","times,","of"]},{"Key":"many way","Fragments":["to"]},{"Key":"do conditional","Fragments":["in"]},{"Key":"conditional in","Fragments":["clojure.","`to-rna`."]},{"Key":"clojure. I","Fragments":["was","came","learned"]},{"Key":"trying ``case``,","Fragments":["but"]},{"Key":"``case``, but","Fragments":["I'm"]},{"Key":"confused to","Fragments":["do"]},{"Key":"it properly,","Fragments":["so"]},{"Key":"properly, so","Fragments":["I"]},{"Key":"I decided","Fragments":["to","that","to","I'd","not","to","to","not","to","on","to","to","to","to","that","to","to","my","not","to"]},{"Key":"decided to","Fragments":["use","do","pull","use","separate","stick","use","remove","invert","use","replicate","reorder","use","use","create","just","try"]},{"Key":"use nested","Fragments":["``if``","functions"]},{"Key":"nested ``if``","Fragments":["instead."]},{"Key":"you suggested","Fragments":["to"]},{"Key":"suggested to","Fragments":["use","me,","remove"]},{"Key":"use ``cond``,","Fragments":["all"]},{"Key":"``cond``, all","Fragments":["becomes"]},{"Key":"all becomes","Fragments":["clear,"]},{"Key":"becomes clear,","Fragments":["please"]},{"Key":"clear, please","Fragments":["take"]},{"Key":"at my","Fragments":["new","latest","first"]},{"Key":"new submission,","Fragments":["and"]},{"Key":"submission, and","Fragments":["let"]},{"Key":"the expression","Fragments":["inside","doesn't","to","returned"]},{"Key":"expression inside","Fragments":["`reduce`"]},{"Key":"inside `reduce`","Fragments":["by","and"]},{"Key":"`reduce` by","Fragments":["using"]},{"Key":"using `map`","Fragments":["-"]},{"Key":" OK","Fragments":["thanks","-","I"]},{"Key":"OK thanks","Fragments":["@rogers"]},{"Key":" Outstanding","Fragments":["feedback"]},{"Key":"Outstanding feedback","Fragments":["from"]},{"Key":"feedback from","Fragments":["@vallie!","previous","@bridget","@axel"]},{"Key":"from @vallie!","Fragments":["It"]},{"Key":"@vallie! It","Fragments":["just"]},{"Key":"just goes","Fragments":["to"]},{"Key":"goes to","Fragments":["show"]},{"Key":"show you","Fragments":["knowing","all"]},{"Key":"you knowing","Fragments":["the"]},{"Key":"knowing the","Fragments":["core"]},{"Key":"the core","Fragments":["library","library","library.","function","`str`","of","here","library","library","library."]},{"Key":"core library","Fragments":["is","and","before","over"]},{"Key":"library is","Fragments":["essential","available"]},{"Key":"is essential","Fragments":["in"]},{"Key":"essential in","Fragments":["any"]},{"Key":"of -\u0026gt;\u0026gt;","Fragments":["in"]},{"Key":"-\u0026gt;\u0026gt; in","Fragments":["```word-count```"]},{"Key":"in ```word-count```","Fragments":["but"]},{"Key":"```word-count``` but","Fragments":["it"]},{"Key":"looked a","Fragments":["little","bit"]},{"Key":"little bit","Fragments":["asymetric","on","less","about","faster","of","more","of","more","harder","more","shorter","closer","shaky","more","overkill"]},{"Key":"bit asymetric","Fragments":["with"]},{"Key":"asymetric with","Fragments":["```split-words```"]},{"Key":"with ```split-words```","Fragments":["when"]},{"Key":"```split-words``` when","Fragments":["I"]},{"Key":"as nested","Fragments":["function"]},{"Key":"Because I","Fragments":["basically","like","used"]},{"Key":"I basically","Fragments":["have","just"]},{"Key":"the usual","Fragments":["style","approach","style?","style","solution"]},{"Key":"usual style","Fragments":["recommendation","for","in"]},{"Key":"style recommendation","Fragments":["is,"]},{"Key":"recommendation is,","Fragments":["and"]},{"Key":"is, and","Fragments":["Vim","I"]},{"Key":"and Vim","Fragments":["isn't"]},{"Key":"Vim isn't","Fragments":["that"]},{"Key":"isn't that","Fragments":["great","much"]},{"Key":"that great","Fragments":["of"]},{"Key":"great of","Fragments":["a"]},{"Key":"great Lisp","Fragments":["editor."]},{"Key":"I'm wondering","Fragments":["if","if","if","how","about"]},{"Key":"wondering if","Fragments":["there","it's","you're","this","there"]},{"Key":"is anyone","Fragments":["reviewing"]},{"Key":"anyone reviewing","Fragments":["Clojure"]},{"Key":"reviewing Clojure","Fragments":["code"]},{"Key":"not excited","Fragments":["about"]},{"Key":"excited about","Fragments":["the"]},{"Key":"name `pairs-equal`;","Fragments":["I'd"]},{"Key":"`pairs-equal`; I'd","Fragments":["love"]},{"Key":"love a","Fragments":["better"]},{"Key":"to checkout","Fragments":["\u003ccode\u003efrequencies\u003c/code\u003e"]},{"Key":"checkout \u003ccode\u003efrequencies\u003c/code\u003e","Fragments":[","]},{"Key":"\u003ccode\u003efrequencies\u003c/code\u003e ,","Fragments":["it"]},{"Key":", it","Fragments":["will","does"]},{"Key":"helper method","Fragments":["\u003ccode\u003etokenize\u003c/code\u003e"]},{"Key":"method \u003ccode\u003etokenize\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003etokenize\u003c/code\u003e and","Fragments":["it"]},{"Key":"Great point.","Fragments":["I"]},{"Key":"point. I","Fragments":["use","got","think","think","suppose"]},{"Key":"use emacs'","Fragments":["`clojure-mode`"]},{"Key":"emacs' `clojure-mode`","Fragments":["and"]},{"Key":"`clojure-mode` and","Fragments":["`clojure-test-mode`,"]},{"Key":"and `clojure-test-mode`,","Fragments":["and"]},{"Key":"`clojure-test-mode`, and","Fragments":["I"]},{"Key":"had the","Fragments":["predicates","previous","side","`count`"]},{"Key":"predicates listed","Fragments":["first."]},{"Key":"listed first.","Fragments":["Later,"]},{"Key":"first. Later,","Fragments":["I"]},{"Key":"Later, I","Fragments":["moved"]},{"Key":"I moved","Fragments":["them","it","it","the"]},{"Key":"moved them","Fragments":["to"]},{"Key":"end, but","Fragments":["my"]},{"Key":"my REPL","Fragments":["still"]},{"Key":"REPL still","Fragments":["had"]},{"Key":"still had","Fragments":["the"]},{"Key":"also took","Fragments":["the"]},{"Key":"to switch","Fragments":["to","to","the"]},{"Key":"switch to","Fragments":["`defn-`,","using"]},{"Key":"to `defn-`,","Fragments":["as"]},{"Key":"`defn-`, as","Fragments":["I"]},{"Key":"really care","Fragments":["to"]},{"Key":"if line","Fragments":["4"]},{"Key":"line 4","Fragments":["is"]},{"Key":"4 is","Fragments":["how","certainly"]},{"Key":"this alternative","Fragments":["also:"]},{"Key":"(defn- split","Fragments":["[string]"]},{"Key":"split [string]","Fragments":["(re-seq","(s/split"]},{"Key":"[string] (re-seq","Fragments":["#\"\\w+\""]},{"Key":"think its","Fragments":["only"]},{"Key":"its only","Fragments":["a"]},{"Key":"a difference","Fragments":["in","though,"]},{"Key":"difference in","Fragments":["spelling","this","performance"]},{"Key":"in spelling","Fragments":["it","out"]},{"Key":"spelling it","Fragments":["out","out."]},{"Key":"out (even","Fragments":["same"]},{"Key":"(even same","Fragments":["length),"]},{"Key":"same length),","Fragments":["so"]},{"Key":"length), so","Fragments":["which"]},{"Key":"so which","Fragments":["one"]},{"Key":"is better?","Fragments":["Or"]},{"Key":"better? Or","Fragments":["is"]},{"Key":"Or is","Fragments":["there"]},{"Key":"any better","Fragments":["solution?","when","way?"]},{"Key":"It wasn't","Fragments":["actually"]},{"Key":"wasn't actually","Fragments":["a","invoking"]},{"Key":"taste to","Fragments":["me,"]},{"Key":"me, because","Fragments":["I'm"]},{"Key":"because I'm","Fragments":["quite","still","not","so"]},{"Key":"I'm quite","Fragments":["new"]},{"Key":"quite new","Fragments":["to"]},{"Key":"even know","Fragments":["`-\u0026gt;`."]},{"Key":"know `-\u0026gt;`.","Fragments":["I"]},{"Key":"`-\u0026gt;`. I","Fragments":["did"]},{"Key":"solution with","Fragments":["`-\u0026gt;`","classifying","conditionals"]},{"Key":"with `-\u0026gt;`","Fragments":["now,"]},{"Key":"`-\u0026gt;` now,","Fragments":["and"]},{"Key":"now, and","Fragments":["I","I"]},{"Key":"your brackets?","Fragments":["Why"]},{"Key":"brackets? Why","Fragments":["do"]},{"Key":"put (seemingly","Fragments":["random)"]},{"Key":"(seemingly random)","Fragments":["closing"]},{"Key":"random) closing","Fragments":["brackets"]},{"Key":"brackets onto","Fragments":["the"]},{"Key":"Looks effective.","Fragments":["I"]},{"Key":"effective. I","Fragments":["quite"]},{"Key":"I quite","Fragments":["enjoyed"]},{"Key":"quite enjoyed","Fragments":["using"]},{"Key":"enjoyed using","Fragments":["-\u0026gt;"]},{"Key":"using -\u0026gt;","Fragments":["to"]},{"Key":"-\u0026gt; to","Fragments":["bust"]},{"Key":"to bust","Fragments":["out"]},{"Key":"bust out","Fragments":["of"]},{"Key":"nested parentheses","Fragments":["in"]},{"Key":"my solution,","Fragments":["but","but","I"]},{"Key":"solution, but","Fragments":["I","with","it"]},{"Key":"I expect","Fragments":["it's"]},{"Key":"expect it's","Fragments":["a"]},{"Key":"thinking what","Fragments":["you"]},{"Key":"you said","Fragments":["that...","as","made","my","is"]},{"Key":"said that...","Fragments":["is"]},{"Key":"that... is","Fragments":["I'm"]},{"Key":"is I'm","Fragments":["so"]},{"Key":"I'm so","Fragments":["horribly","confused.","new"]},{"Key":"so horribly","Fragments":["irked"]},{"Key":"horribly irked","Fragments":["that"]},{"Key":"irked that","Fragments":["typing"]},{"Key":"that typing","Fragments":["\".\""]},{"Key":"typing \".\"","Fragments":["makes"]},{"Key":"\".\" makes","Fragments":["Bob"]},{"Key":"makes Bob","Fragments":["respond"]},{"Key":"Bob respond","Fragments":["with"]},{"Key":"out!\" because","Fragments":["no"]},{"Key":"because no","Fragments":["lowercase"]},{"Key":"no lowercase","Fragments":["letters","letters"]},{"Key":"lowercase letters","Fragments":["are","in","in","and"]},{"Key":"letters are","Fragments":["in","upper-case.","caps'","uppercase_."]},{"Key":"are in","Fragments":["pure","fact","a"]},{"Key":"in pure","Fragments":["punctuation.","clojure."]},{"Key":"That aside","Fragments":["(and"]},{"Key":"aside (and","Fragments":["feel"]},{"Key":"(and feel","Fragments":["free"]},{"Key":"feel free","Fragments":["to","to","to","to"]},{"Key":"suggest a","Fragments":["good","better"]},{"Key":"handle that),","Fragments":["the"]},{"Key":"that), the","Fragments":["(fn"]},{"Key":"the (fn","Fragments":["[[]])"]},{"Key":"(fn [[]])","Fragments":["idea"]},{"Key":"[[]]) idea","Fragments":["is"]},{"Key":"is great.","Fragments":["I","But"]},{"Key":"great. I","Fragments":["gotta","think"]},{"Key":"I gotta","Fragments":["try"]},{"Key":"gotta try","Fragments":["that"]},{"Key":"out tonight","Fragments":["maybe..."]},{"Key":"tonight maybe...","Fragments":["I"]},{"Key":"maybe... I","Fragments":["keep"]},{"Key":"keep forgetting","Fragments":["to","frequencies,","that","about"]},{"Key":"forgetting to","Fragments":["use"]},{"Key":"that (you","Fragments":["can"]},{"Key":"(you can","Fragments":["tell","use"]},{"Key":"tell I","Fragments":["don't"]},{"Key":"get out","Fragments":["of"]},{"Key":"my day-job","Fragments":["which"]},{"Key":"day-job which","Fragments":["is"]},{"Key":"is csharp,","Fragments":["eh?)."]},{"Key":" Darn.","Fragments":["You're"]},{"Key":"Darn. You're","Fragments":["right,"]},{"Key":"You're right,","Fragments":["I","I've"]},{"Key":"right, I","Fragments":["should","forgot","hadn't","found"]},{"Key":"have not","Fragments":["bound","completely","read"]},{"Key":"not bound","Fragments":["the"]},{"Key":"bound the","Fragments":["execution"]},{"Key":"the execution","Fragments":["to"]},{"Key":"execution to","Fragments":["\"response\"."]},{"Key":"to \"response\".","Fragments":["I"]},{"Key":"\"response\". I","Fragments":["think"]},{"Key":"I drowned","Fragments":["the"]},{"Key":"drowned the","Fragments":["horse,"]},{"Key":"the horse,","Fragments":["but"]},{"Key":"horse, but","Fragments":["something"]},{"Key":"but something","Fragments":["in","to"]},{"Key":"the back","Fragments":["of"]},{"Key":"back of","Fragments":["my"]},{"Key":"my head","Fragments":["is","around","without","around","around","that"]},{"Key":"head is","Fragments":["saying"]},{"Key":"is saying","Fragments":["\"it's"]},{"Key":"saying \"it's","Fragments":["more"]},{"Key":"\"it's more","Fragments":["readable"]},{"Key":"what \"some\"","Fragments":["was"]},{"Key":"\"some\" was","Fragments":["doing"]},{"Key":"was doing","Fragments":["and","it."]},{"Key":"doing and","Fragments":["were"]},{"Key":"and were","Fragments":["unfamiliar"]},{"Key":"were unfamiliar","Fragments":["with"]},{"Key":"with clojure.","Fragments":["But"]},{"Key":"clojure. But","Fragments":["it's"]},{"Key":"But it's","Fragments":["stuff"]},{"Key":"it's stuff","Fragments":["like"]},{"Key":"stuff like","Fragments":["that","`str`","lazy-seq.","this."]},{"Key":"which isn't","Fragments":["my"]},{"Key":"isn't my","Fragments":["job"]},{"Key":"my job","Fragments":["as"]},{"Key":"job as","Fragments":["a","well."]},{"Key":"a coder...","Fragments":["the"]},{"Key":"coder... the","Fragments":["documentation"]},{"Key":"the documentation","Fragments":["would","for"]},{"Key":"documentation would","Fragments":["suffice."]},{"Key":"suffice. Hmmph.","Fragments":["Maybe"]},{"Key":"Hmmph. Maybe","Fragments":["I"]},{"Key":"Maybe I","Fragments":["was"]},{"Key":"keep working","Fragments":["without"]},{"Key":"working without","Fragments":["closing"]},{"Key":"without closing","Fragments":["the"]},{"Key":"closing the","Fragments":["problems?"]},{"Key":"had my","Fragments":["doubts"]},{"Key":"my doubts","Fragments":["on"]},{"Key":"doubts on","Fragments":["this"]},{"Key":"keeping state,","Fragments":["and"]},{"Key":"state, and","Fragments":["thought"]},{"Key":"and thought","Fragments":["about","`cl-format`","more"]},{"Key":"about returning","Fragments":["the","the"]},{"Key":"the robot","Fragments":["as","data","protocol","and","namespace","starts"]},{"Key":"robot as","Fragments":["a"]},{"Key":"a transient","Fragments":["instead","data"]},{"Key":"transient instead","Fragments":["-"]},{"Key":"instead -","Fragments":["but"]},{"Key":"not \"feel\"","Fragments":["like"]},{"Key":"\"feel\" like","Fragments":["idiomatic"]},{"Key":"like idiomatic","Fragments":["Clojure.","clojure!","clojure!"]},{"Key":"idiomatic Clojure.","Fragments":["Is","There","Thanks"]},{"Key":"this a","Fragments":["sensible","bit","year","bit","bit","much"]},{"Key":"sensible way","Fragments":["to"]},{"Key":"it ?","Fragments":["Am"]},{"Key":"? Am","Fragments":["I"]},{"Key":" Tiny,","Fragments":["tiny"]},{"Key":"Tiny, tiny","Fragments":["nit,"]},{"Key":"tiny nit,","Fragments":["Clojure"]},{"Key":"nit, Clojure","Fragments":["uses"]},{"Key":"Clojure uses","Fragments":["hyphens","\"kebab-case\"","prefix"]},{"Key":"uses hyphens","Fragments":["instead"]},{"Key":"hyphens instead","Fragments":["of"]},{"Key":"of underscores","Fragments":["so"]},{"Key":" ```dna_string```","Fragments":["should"]},{"Key":"```dna_string``` should","Fragments":["be"]},{"Key":"the authoritative","Fragments":["style"]},{"Key":"authoritative style","Fragments":["guide"]},{"Key":" `invaild-number`","Fragments":["isn't"]},{"Key":"`invaild-number` isn't","Fragments":["spelled"]},{"Key":"isn't spelled","Fragments":["correctly"]},{"Key":"spelled correctly","Fragments":[":)"]},{"Key":"Clojure variables","Fragments":["typically"]},{"Key":"variables typically","Fragments":["use"]},{"Key":"typically use","Fragments":["lisp-case,"]},{"Key":"use lisp-case,","Fragments":["the"]},{"Key":"lisp-case, the","Fragments":["underscores"]},{"Key":"the underscores","Fragments":["are"]},{"Key":"underscores are","Fragments":["a"]},{"Key":"bit awkward","Fragments":["looking"]},{"Key":"awkward looking","Fragments":["here."]},{"Key":"Why measure","Fragments":["the"]},{"Key":"measure the","Fragments":["length"]},{"Key":"length twice?","Fragments":["trim-leading-1"]},{"Key":"twice? trim-leading-1","Fragments":["and"]},{"Key":"trim-leading-1 and","Fragments":["validate-length"]},{"Key":"and validate-length","Fragments":["could"]},{"Key":"validate-length could","Fragments":["easily"]},{"Key":"could easily","Fragments":["be","add"]},{"Key":"easily be","Fragments":["fused"]},{"Key":"be fused","Fragments":["together."]},{"Key":"using \"frequencies\"","Fragments":["was"]},{"Key":"\"frequencies\" was","Fragments":["what"]},{"Key":"what really","Fragments":["helped"]},{"Key":"really helped","Fragments":["me"]},{"Key":"me simplify","Fragments":["this"]},{"Key":"one. (Whoops","Fragments":["-"]},{"Key":"(Whoops -","Fragments":["just"]},{"Key":"just realised","Fragments":["I"]},{"Key":"realised I","Fragments":["might"]},{"Key":"have trampled","Fragments":["all"]},{"Key":"trampled all","Fragments":["over"]},{"Key":"the subtle","Fragments":["hint"]},{"Key":"subtle hint","Fragments":["above,"]},{"Key":"hint above,","Fragments":["there!)"]},{"Key":" Nicely","Fragments":["done;"]},{"Key":"Nicely done;","Fragments":["I"]},{"Key":"done; I","Fragments":["keep"]},{"Key":"forgetting frequencies,","Fragments":["so"]},{"Key":"frequencies, so","Fragments":["thanks"]},{"Key":"so thanks","Fragments":["for"]},{"Key":"Would like","Fragments":["this"]},{"Key":"this better","Fragments":["as","(though"]},{"Key":"better as","Fragments":["dna-\u0026gt;rna,","`all-uppercase?`."]},{"Key":"as dna-\u0026gt;rna,","Fragments":["but"]},{"Key":"dna-\u0026gt;rna, but","Fragments":["fulfilling"]},{"Key":"but fulfilling","Fragments":["the"]},{"Key":"fulfilling the","Fragments":["test"]},{"Key":"Thank You.","Fragments":["My"]},{"Key":"You. My","Fragments":["very"]},{"Key":"My very","Fragments":["first","first"]},{"Key":" Bravo,","Fragments":["data-driven"]},{"Key":"Bravo, data-driven","Fragments":["MVP."]},{"Key":"data-driven MVP.","Fragments":["Worth"]},{"Key":"MVP. Worth","Fragments":["nothing"]},{"Key":"Worth nothing","Fragments":["that"]},{"Key":"the third","Fragments":["letter","parameter","Wednesday","one","parameter."]},{"Key":"third letter","Fragments":["of"]},{"Key":"the trimmed","Fragments":["statement"]},{"Key":"trimmed statement","Fragments":["will"]},{"Key":"statement will","Fragments":["give"]},{"Key":"will give","Fragments":["you","some","you"]},{"Key":"you enough","Fragments":["information"]},{"Key":"enough information","Fragments":["to"]},{"Key":"information to","Fragments":["make"]},{"Key":"case mapping","Fragments":["to"]},{"Key":"end all","Fragments":["trololos,"]},{"Key":"all trololos,","Fragments":["if"]},{"Key":"trololos, if","Fragments":["you"]},{"Key":"will deign","Fragments":["to"]},{"Key":"deign to","Fragments":["bind"]},{"Key":"bind the","Fragments":["paramater","response"]},{"Key":"the paramater","Fragments":["and"]},{"Key":"paramater and","Fragments":["use"]},{"Key":"use explicit","Fragments":["control"]},{"Key":"explicit control","Fragments":["flow:"]},{"Key":" (case","Fragments":["(get","n","n"]},{"Key":"(case (get","Fragments":["(.trim"]},{"Key":"(get (.trim","Fragments":["s)"]},{"Key":"(.trim s)","Fragments":["2)"]},{"Key":" (\\m","Fragments":["\\t"]},{"Key":"(\\m \\t","Fragments":["\\'"]},{"Key":"\\t \\'","Fragments":["\\d)"]},{"Key":"\\' \\d)","Fragments":["\"Whatever.\""]},{"Key":" (\\T","Fragments":["\\A"]},{"Key":"(\\T \\A","Fragments":["\\M"]},{"Key":"\\A \\M","Fragments":["\\space"]},{"Key":"\\M \\space","Fragments":["\\H)"]},{"Key":"\\space \\H)","Fragments":["\"Woah,"]},{"Key":"\\H) \"Woah,","Fragments":["chill"]},{"Key":" \\e","Fragments":["\"Sure.\""]},{"Key":" \"Fine.","Fragments":["Be"]},{"Key":"\"Fine. Be","Fragments":["that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that"]},{"Key":"The regexp","Fragments":["for","for"]},{"Key":"regexp for","Fragments":["`angry?`","the","shouting"]},{"Key":"for `angry?`","Fragments":["is"]},{"Key":"`angry?` is","Fragments":["perhaps"]},{"Key":"is perhaps","Fragments":["a"]},{"Key":"perhaps a","Fragments":["bit","better"]},{"Key":"bit baroque,","Fragments":["but"]},{"Key":"baroque, but","Fragments":["it's"]},{"Key":"it's faster","Fragments":["than"]},{"Key":"faster than","Fragments":["uppercasing/comparing","using","using"]},{"Key":"than uppercasing/comparing","Fragments":["strings,"]},{"Key":"uppercasing/comparing strings,","Fragments":["and"]},{"Key":"about Unicode","Fragments":["character"]},{"Key":"Unicode character","Fragments":["classes"]},{"Key":"in Java.","Fragments":["Learned"]},{"Key":"Java. Learned","Fragments":["quite"]},{"Key":"Learned quite","Fragments":["a"]},{"Key":"bit from","Fragments":["looking"]},{"Key":"from looking","Fragments":["at","at","at"]},{"Key":"at others'","Fragments":["solutions"]},{"Key":"others' solutions","Fragments":["to"]},{"Key":"to this;","Fragments":["thanks"]},{"Key":"this; thanks","Fragments":["all."]},{"Key":" Clever","Fragments":["to"]},{"Key":"Clever to","Fragments":["do"]},{"Key":"all with","Fragments":["regexps"]},{"Key":"with regexps","Fragments":["and"]},{"Key":"regexps and","Fragments":["`.trim`!"]},{"Key":"and `.trim`!","Fragments":["I"]},{"Key":"`.trim`! I","Fragments":["didn't"]},{"Key":"last /non-whitespace/","Fragments":["character"]},{"Key":"/non-whitespace/ character","Fragments":["being"]},{"Key":"character being","Fragments":["the"]},{"Key":"being the","Fragments":["\\?,"]},{"Key":"the \\?,","Fragments":["possibly"]},{"Key":"\\?, possibly","Fragments":["followed"]},{"Key":"possibly followed","Fragments":["by"]},{"Key":"followed by","Fragments":["spaces:","the","running"]},{"Key":"by spaces:","Fragments":["nicely"]},{"Key":"spaces: nicely","Fragments":["caught."]},{"Key":"### Functional","Fragments":["nits:"]},{"Key":"* Might","Fragments":["be"]},{"Key":"be cool","Fragments":["to"]},{"Key":"cool to","Fragments":["explore"]},{"Key":"to explore","Fragments":["how","much","list-based"]},{"Key":"explore how","Fragments":["to"]},{"Key":"rule expand","Fragments":["beyond"]},{"Key":"expand beyond","Fragments":["ASCII."]},{"Key":"### Style","Fragments":["nits:"]},{"Key":"* What","Fragments":["about"]},{"Key":"about some","Fragments":["destructuring","hidden","possible"]},{"Key":"some destructuring","Fragments":["in"]},{"Key":"in `exec-pattern`","Fragments":["instead"]},{"Key":"`exec-pattern` instead","Fragments":["of"]},{"Key":"fn shorthand","Fragments":["and"]},{"Key":"and positional","Fragments":["accessors?"]},{"Key":"positional accessors?","Fragments":["That"]},{"Key":"accessors? That","Fragments":["part"]},{"Key":"That part","Fragments":["is"]},{"Key":"bit terse.","Fragments":["Something"]},{"Key":"terse. Something","Fragments":["like"]},{"Key":"like `(fn","Fragments":["[[re","[c]"]},{"Key":"`(fn [[re","Fragments":["response]]"]},{"Key":"[[re response]]","Fragments":["...`"]},{"Key":"* Lastly,","Fragments":["why"]},{"Key":"Lastly, why","Fragments":["the"]},{"Key":"of `response`","Fragments":["instead"]},{"Key":"`response` instead","Fragments":["of"]},{"Key":"of just","Fragments":["using","`map`?","making","cleaned"]},{"Key":"just using","Fragments":["the","logic,","a","a"]},{"Key":"the bound","Fragments":["expr"]},{"Key":"bound expr","Fragments":["as"]},{"Key":"expr as","Fragments":["the"]},{"Key":"Good stuff:","Fragments":["clean"]},{"Key":"stuff: clean","Fragments":["and"]},{"Key":"and readable.","Fragments":["How"]},{"Key":"readable. How","Fragments":["does"]},{"Key":"How does","Fragments":["this","the"]},{"Key":"does this","Fragments":["compile,","code","look","style","compare","to","on"]},{"Key":"this compile,","Fragments":["though;"]},{"Key":"compile, though;","Fragments":["don't"]},{"Key":"though; don't","Fragments":["the"]},{"Key":"don't the","Fragments":["`defn`s"]},{"Key":"the `defn`s","Fragments":["for"]},{"Key":"`defn`s for","Fragments":["the"]},{"Key":"predicates need","Fragments":["to"]},{"Key":"come before","Fragments":["the"]},{"Key":"defn for","Fragments":["`response-for`?"]},{"Key":"for `response-for`?","Fragments":["Glad"]},{"Key":"`response-for`? Glad","Fragments":["to"]},{"Key":"Glad to","Fragments":["know","help!"]},{"Key":"about Java's","Fragments":["`endsWith`."]},{"Key":"taking a","Fragments":["look!","look","look."]},{"Key":"a look!","Fragments":["Will"]},{"Key":"look! Will","Fragments":["think"]},{"Key":"Will think","Fragments":["about"]},{"Key":"using list","Fragments":["comprehensions.","comprehension"]},{"Key":"may consider","Fragments":["using"]},{"Key":"comprehension to","Fragments":["possibly"]},{"Key":"possibly simplify","Fragments":["the"]},{"Key":"of `sorted`.","Fragments":["Good"]},{"Key":"`sorted`. Good","Fragments":["looking"]},{"Key":"Good looking","Fragments":["piece"]},{"Key":"looking piece","Fragments":["of"]},{"Key":"Oh here's","Fragments":["one,"]},{"Key":"here's one,","Fragments":["by"]},{"Key":"one, by","Fragments":["convention"]},{"Key":"by convention","Fragments":["functions"]},{"Key":"convention functions","Fragments":["that"]},{"Key":"that return","Fragments":["a","booleans","value","booleans","a","booleans","a","booleans,","truthy","booleans","booleans"]},{"Key":"return a","Fragments":["boolean","boolean","boolean","string.","function.","function","char","value","boolean","list","`seq`","true/false-y","boolean","boolean.","`true`","boolean","sorted","fn","boolean.","character.","char","char"]},{"Key":"boolean end","Fragments":["in"]},{"Key":"end in","Fragments":["'?'."]},{"Key":"in '?'.","Fragments":["Also"]},{"Key":"'?'. Also","Fragments":["your"]},{"Key":"Also your","Fragments":["test"]},{"Key":"private. So,","Fragments":["for"]},{"Key":"example, it","Fragments":["should"]},{"Key":"be `(defn-","Fragments":["shouted?"]},{"Key":"`(defn- shouted?","Fragments":["[message]"]},{"Key":"shouted? [message]","Fragments":["...`"]},{"Key":"I thing","Fragments":["[`letfn`](http://clojuredocs.org/clojure_core/clojure.core/letfn)"]},{"Key":"thing [`letfn`](http://clojuredocs.org/clojure_core/clojure.core/letfn)","Fragments":["might"]},{"Key":"[`letfn`](http://clojuredocs.org/clojure_core/clojure.core/letfn) might","Fragments":["better"]},{"Key":"might better","Fragments":["express"]},{"Key":"express what","Fragments":["you're"]},{"Key":"trying do","Fragments":["with"]},{"Key":"that let","Fragments":["statement."]},{"Key":"is based","Fragments":["on","on","on"]},{"Key":"the feed","Fragments":["back"]},{"Key":"feed back","Fragments":["from"]},{"Key":"back from","Fragments":["@ari."]},{"Key":"from @ari.","Fragments":["Introduced"]},{"Key":"@ari. Introduced","Fragments":["`cond`"]},{"Key":"Introduced `cond`","Fragments":["which"]},{"Key":"`cond` which","Fragments":["I"]},{"Key":"not previously","Fragments":["aware","checked."]},{"Key":"previously aware","Fragments":["was"]},{"Key":"aware was","Fragments":["in"]},{"Key":"Neat solution!","Fragments":["Thank"]},{"Key":"solution! Thank","Fragments":["you"]},{"Key":"the `sorted-school`","Fragments":["test?"]},{"Key":"`sorted-school` test?","Fragments":["I"]},{"Key":"test? I","Fragments":["don't"]},{"Key":"you're sorting","Fragments":["the"]},{"Key":"sorting the","Fragments":["names","same"]},{"Key":"names within","Fragments":["each"]},{"Key":"within each","Fragments":["grade."]},{"Key":"in `add`","Fragments":["necessary?","is","by","but"]},{"Key":"`add` necessary?","Fragments":["I"]},{"Key":"just put","Fragments":["the","in","the","newlines"]},{"Key":"the `conj`","Fragments":["in"]},{"Key":"`conj` in","Fragments":["the"]},{"Key":"Clojure cheatsheet:","Fragments":["http://clojure.org/cheatsheet"]},{"Key":"really convenient","Fragments":["function"]},{"Key":"convenient function","Fragments":["in"]},{"Key":"the Maps","Fragments":["section.","section"]},{"Key":"most part","Fragments":["I"]},{"Key":"part I","Fragments":["see"]},{"Key":" @jo","Fragments":["thanks"]},{"Key":"@jo thanks","Fragments":["for"]},{"Key":"Any thoughts","Fragments":["on","on"]},{"Key":"on ```:as```","Fragments":["versus"]},{"Key":"```:as``` versus","Fragments":["```:refer```?"]},{"Key":"versus ```:refer```?","Fragments":["I'm"]},{"Key":"```:refer```? I'm","Fragments":["new"]},{"Key":"so not","Fragments":["sure","very"]},{"Key":"sure what's","Fragments":["the","the","the","conventional"]},{"Key":"what's the","Fragments":["most","guideline","most","difference","purpose"]},{"Key":"most idiomatic","Fragments":["approach.","code"]},{"Key":"solution sacrifices","Fragments":["efficiency"]},{"Key":"sacrifices efficiency","Fragments":["for"]},{"Key":"efficiency for","Fragments":["clarity"]},{"Key":"for clarity","Fragments":["—"]},{"Key":"clarity —","Fragments":["sorting"]},{"Key":"— sorting","Fragments":["and"]},{"Key":"sorting and","Fragments":["lowercasing","lowercasing","comparing"]},{"Key":"input word","Fragments":["over","for","only"]},{"Key":" command","Fragments":["line"]},{"Key":"command line","Fragments":["mistake","client's"]},{"Key":"line mistake","Fragments":["(Syntax"]},{"Key":"mistake (Syntax","Fragments":["error)..."]},{"Key":"checks more","Fragments":["generic","order"]},{"Key":"generic for","Fragments":["each"]},{"Key":"each type","Fragments":["of","of","of","of"]},{"Key":" Convinced","Fragments":["there"]},{"Key":"Convinced there","Fragments":["is"]},{"Key":"I accidentally","Fragments":["submitted"]},{"Key":"submitted when","Fragments":["I","the"]},{"Key":"test suite.","Fragments":["`sorted`","Fixing"]},{"Key":"suite. `sorted`","Fragments":["is"]},{"Key":"`sorted` is","Fragments":["definitely"]},{"Key":"definitely missing","Fragments":["a"]},{"Key":"missing a","Fragments":["step.","test"]},{"Key":"The `let`","Fragments":["in"]},{"Key":"`add` is","Fragments":["not","convoluted."]},{"Key":"necessary, just","Fragments":["a"]},{"Key":"me, if","Fragments":["you"]},{"Key":"you re-order","Fragments":["the"]},{"Key":"re-order the","Fragments":["tests"]},{"Key":"tests you","Fragments":["could"]},{"Key":"could simplify","Fragments":["`shouted`","this","`count`"]},{"Key":"simplify `shouted`","Fragments":["but"]},{"Key":"`shouted` but","Fragments":["that's"]},{"Key":"Accidental submit,","Fragments":["please"]},{"Key":"submit, please","Fragments":["ignore."]},{"Key":"don't call","Fragments":["score-letter"]},{"Key":"call score-letter","Fragments":["from"]},{"Key":"score-letter from","Fragments":["score-word"]},{"Key":"from score-word","Fragments":["(although"]},{"Key":"score-word (although","Fragments":["maybe"]},{"Key":"(although maybe","Fragments":["I"]},{"Key":"While there","Fragments":["is","are"]},{"Key":"duplication in","Fragments":["the","this","the","your","the","'nucleotide-counts'","the","that"]},{"Key":"literals I","Fragments":["don't"]},{"Key":"with it,","Fragments":["I","because","it's"]},{"Key":"javascript beer-song","Fragments":["the"]},{"Key":"beer-song the","Fragments":["same"]},{"Key":"Consider extracting","Fragments":["the","predicates"]},{"Key":"the `(reverse...`","Fragments":["logic"]},{"Key":"`(reverse...` logic","Fragments":["into"]},{"Key":"Also check","Fragments":["out"]},{"Key":"out `inc`","Fragments":["and"]},{"Key":" have","Fragments":["you"]},{"Key":"Thanks that","Fragments":["looks"]},{"Key":"Indeed the","Fragments":["reader"]},{"Key":"reader should","Fragments":["be"]},{"Key":"is doing.","Fragments":["However,","But","I"]},{"Key":"doing. However,","Fragments":["does"]},{"Key":"However, does","Fragments":["this"]},{"Key":"code explain","Fragments":["what"]},{"Key":"Which explains","Fragments":["the"]},{"Key":"explains the","Fragments":["domain","mechanics","intent."]},{"Key":"- When","Fragments":["the","I"]},{"Key":"When the","Fragments":["message","number"]},{"Key":"message is","Fragments":["all","not","a"]},{"Key":"all caps,","Fragments":["respond","except"]},{"Key":"caps, respond","Fragments":["with"]},{"Key":"I hear","Fragments":["shouting,"]},{"Key":"hear shouting,","Fragments":["respond"]},{"Key":"shouting, respond","Fragments":["with"]},{"Key":"One explains","Fragments":["the"]},{"Key":"the mechanics","Fragments":["of","of"]},{"Key":"mechanics of","Fragments":["the","the"]},{"Key":"the solution,","Fragments":["the"]},{"Key":"solution, the","Fragments":["other"]},{"Key":"other explains","Fragments":["the"]},{"Key":"the intent.","Fragments":["Which","Besides","As"]},{"Key":"intent. Which","Fragments":["one"]},{"Key":"Which one","Fragments":["will"]},{"Key":"one will","Fragments":["you","outperform"]},{"Key":"will you","Fragments":["need"]},{"Key":"a year","Fragments":["down","from","of"]},{"Key":"year down","Fragments":["the"]},{"Key":"down the","Fragments":["road","path","solution","way"]},{"Key":"the road","Fragments":["to"]},{"Key":"road to","Fragments":["understand"]},{"Key":"understand why","Fragments":["you","you","\"4?\"","your","your"]},{"Key":"wrote this","Fragments":["code?"]},{"Key":"How would","Fragments":["this","you","you","you"]},{"Key":"this work","Fragments":["given"]},{"Key":"work given","Fragments":["some"]},{"Key":"given some","Fragments":["arbitrary"]},{"Key":"some arbitrary","Fragments":["input"]},{"Key":"that meets","Fragments":["one"]},{"Key":"meets one","Fragments":["of"]},{"Key":"example, I","Fragments":["would"]},{"Key":"would expect","Fragments":["bob","the","it","the","and","that"]},{"Key":"expect bob","Fragments":["to"]},{"Key":"say \"Woah,","Fragments":["chill"]},{"Key":"out!\" if","Fragments":["I"]},{"Key":"I input","Fragments":["something"]},{"Key":"input something","Fragments":["like"]},{"Key":"like \"BOB","Fragments":["YOU"]},{"Key":"\"BOB YOU","Fragments":["ARE"]},{"Key":"YOU ARE","Fragments":["ONE"]},{"Key":"ARE ONE","Fragments":["CRAZY"]},{"Key":"ONE CRAZY","Fragments":["CHARACTER!\""]},{"Key":"Would your","Fragments":["implementation"]},{"Key":"implementation work","Fragments":["in"]},{"Key":"like this?","Fragments":["How"]},{"Key":"this? How","Fragments":["could"]},{"Key":"you make","Fragments":["it","your","the","sure","it","it","some,","your"]},{"Key":" (basically,","Fragments":["what"]},{"Key":"(basically, what","Fragments":["zoldar"]},{"Key":"what zoldar","Fragments":["said,"]},{"Key":"zoldar said,","Fragments":["restated.)"]},{"Key":" Made","Fragments":["the","methods","the","use"]},{"Key":"Made the","Fragments":["regex","cond"]},{"Key":"regex a","Fragments":["bit"]},{"Key":"more forgiving","Fragments":["of"]},{"Key":"forgiving of","Fragments":["different"]},{"Key":"Think if-let","Fragments":["is"]},{"Key":"if-let is","Fragments":["the"]},{"Key":"the strangeness","Fragments":["in"]},{"Key":"strangeness in","Fragments":["the"]},{"Key":"the decompose","Fragments":["function"]},{"Key":"with @garth's","Fragments":["points,"]},{"Key":"@garth's points,","Fragments":["but"]},{"Key":"points, but","Fragments":["it's"]},{"Key":"it's pretty","Fragments":["good","easy","smart.","much"]},{"Key":"Clojure code.","Fragments":["^_^","https://github.com/kytrinyx/exercism.io/issues/821","Feedback","Feedback"]},{"Key":"than \"input\"","Fragments":["as"]},{"Key":"\"input\" as","Fragments":["well."]},{"Key":"well. For","Fragments":["amusing"]},{"Key":"For amusing","Fragments":["reading,"]},{"Key":" [The","Fragments":["world's"]},{"Key":"[The world's","Fragments":["two"]},{"Key":"world's two","Fragments":["worst"]},{"Key":"two worst","Fragments":["variable"]},{"Key":"worst variable","Fragments":["names][worst]."]},{"Key":" [worst]:","Fragments":["http://www.oreillynet.com/onlamp/blog/2004/03/the_worlds_two_worst_variable.html"]},{"Key":" @jessy","Fragments":["thanks"]},{"Key":"@jessy thanks","Fragments":["for"]},{"Key":"the points.","Fragments":["Idiomatic"]},{"Key":"points. Idiomatic","Fragments":["stuff"]},{"Key":"Idiomatic stuff","Fragments":["like"]},{"Key":"like `str`","Fragments":["vs"]},{"Key":"`str` vs","Fragments":["`string`"]},{"Key":"vs `string`","Fragments":["is"]},{"Key":"`string` is","Fragments":["very"]},{"Key":"very useful,","Fragments":["although"]},{"Key":"useful, although","Fragments":["I'm"]},{"Key":"although I'm","Fragments":["still"]},{"Key":"still going","Fragments":["to"]},{"Key":"balance readability","Fragments":["with"]},{"Key":"readability with","Fragments":["fitting","less"]},{"Key":"with fitting","Fragments":["in"]},{"Key":"fitting in","Fragments":["with"]},{"Key":"in with","Fragments":["the","the"]},{"Key":"Your point","Fragments":["about"]},{"Key":"about `seq`","Fragments":["is"]},{"Key":"good one.","Fragments":["It"]},{"Key":"one. It","Fragments":["made","certainly"]},{"Key":"It made","Fragments":["me","my","code","a"]},{"Key":"me look","Fragments":["up"]},{"Key":"domain (which","Fragments":["I'm"]},{"Key":"(which I'm","Fragments":["not"]},{"Key":"familiar with)","Fragments":["and"]},{"Key":"with) and","Fragments":["try"]},{"Key":"better name.","Fragments":["I"]},{"Key":"hope `gene`","Fragments":["makes"]},{"Key":"`gene` makes","Fragments":["sense!"]},{"Key":" No,","Fragments":["I","I","that's"]},{"Key":"No, I","Fragments":["agree,","just"]},{"Key":"agree, that","Fragments":["would","looks"]},{"Key":"better use","Fragments":["of","there."]},{"Key":"the name.","Fragments":["I","I"]},{"Key":"can't really","Fragments":["think","avoid"]},{"Key":"better alternative,","Fragments":["but"]},{"Key":"alternative, but","Fragments":["right","`clojure.string`"]},{"Key":"but right","Fragments":["now"]},{"Key":"right now","Fragments":["`one-or-it`","would"]},{"Key":"now `one-or-it`","Fragments":["as"]},{"Key":"`one-or-it` as","Fragments":["the"]},{"Key":"new name","Fragments":["would","and"]},{"Key":"probably still","Fragments":["be"]},{"Key":"`require` without","Fragments":["a"]},{"Key":"a `ns`.","Fragments":["You"]},{"Key":"`ns`. You","Fragments":["could","don't"]},{"Key":"a tiny","Fragments":["bit","inefficiency","bit","nit"]},{"Key":"tiny bit","Fragments":["cleaner","of","of"]},{"Key":"bit cleaner","Fragments":["if"]},{"Key":"cleaner if","Fragments":["you"]},{"Key":"made a","Fragments":["general","mistake","separate","binding","blunder.","lot","new"]},{"Key":"general rand-chars","Fragments":["function"]},{"Key":"rand-chars function","Fragments":["that"]},{"Key":"that encapsulated","Fragments":["the"]},{"Key":"encapsulated the","Fragments":["repeatedly"]},{"Key":"the repeatedly","Fragments":["and"]},{"Key":"repeatedly and","Fragments":["took"]},{"Key":"and took","Fragments":["lower/upper"]},{"Key":"took lower/upper","Fragments":["char"]},{"Key":"lower/upper char","Fragments":["bounds,"]},{"Key":"char bounds,","Fragments":["so"]},{"Key":"bounds, so","Fragments":["you"]},{"Key":"could specify","Fragments":["`(take"]},{"Key":"specify `(take","Fragments":["2"]},{"Key":"`(take 2","Fragments":["(rand-chars"]},{"Key":"2 (rand-chars","Fragments":["\\A"]},{"Key":"(rand-chars \\A","Fragments":["\\Z))`"]},{"Key":"\\A \\Z))`","Fragments":["and"]},{"Key":"\\Z))` and","Fragments":["`(take"]},{"Key":"and `(take","Fragments":["3","length-of-month)`"]},{"Key":"`(take 3","Fragments":["(rand-chars"]},{"Key":"3 (rand-chars","Fragments":["\\0"]},{"Key":"(rand-chars \\0","Fragments":["\\9))`."]},{"Key":"feedback everyone!","Fragments":["I"]},{"Key":"everyone! I","Fragments":["tired"]},{"Key":"I tired","Fragments":["again"]},{"Key":"tired again","Fragments":["and"]},{"Key":"again and","Fragments":["I","again,","have","see"]},{"Key":"get any","Fragments":["better","more"]},{"Key":"using `let`s","Fragments":["to"]},{"Key":"`let`s to","Fragments":["cache"]},{"Key":"to cache","Fragments":["the","the"]},{"Key":"cache the","Fragments":["calls","normalized"]},{"Key":"the calls","Fragments":["to","to","to","to","to","to"]},{"Key":"to `s/lower-case`","Fragments":["and"]},{"Key":"`s/lower-case` and","Fragments":["`frequencies`."]},{"Key":"and `frequencies`.","Fragments":["I"]},{"Key":"`frequencies`. I","Fragments":["think","used","didn't"]},{"Key":"think I'll","Fragments":["look","make","keep"]},{"Key":"into `memoize`","Fragments":["now."]},{"Key":"some extra","Fragments":["brackets"]},{"Key":"extra brackets","Fragments":["here"]},{"Key":"brackets here","Fragments":[":/"]},{"Key":"definitely falls","Fragments":["under"]},{"Key":"falls under","Fragments":["the"]},{"Key":"of *nitpick*","Fragments":["but"]},{"Key":"*nitpick* but","Fragments":["I'm"]},{"Key":"in love","Fragments":["with"]},{"Key":"love with","Fragments":["your"]},{"Key":"your `nucleotides`","Fragments":["Var...it's"]},{"Key":"`nucleotides` Var...it's","Fragments":["like...this"]},{"Key":"Var...it's like...this","Fragments":["random"]},{"Key":"like...this random","Fragments":["thing"]},{"Key":"random thing","Fragments":["that's"]},{"Key":"thing that's","Fragments":["only"]},{"Key":"that's only","Fragments":["used"]},{"Key":"only used","Fragments":["in","once","in"]},{"Key":"one place","Fragments":["to","and","possibly.","and","(transform"]},{"Key":"to bootstrap","Fragments":["a"]},{"Key":"bootstrap a","Fragments":["counting"]},{"Key":"a counting","Fragments":["process,"]},{"Key":"counting process,","Fragments":["yet"]},{"Key":"process, yet","Fragments":["it"]},{"Key":"yet it","Fragments":["sits"]},{"Key":"it sits","Fragments":["out"]},{"Key":"sits out","Fragments":["there"]},{"Key":"out there","Fragments":["for","first","to","at","at"]},{"Key":"there for","Fragments":["all"]},{"Key":"all time","Fragments":["as"]},{"Key":"as if","Fragments":["it","you"]},{"Key":"some undying","Fragments":["meaning..."]},{"Key":" Quite","Fragments":["possibly","like"]},{"Key":"Quite possibly","Fragments":["just"]},{"Key":"possibly just","Fragments":["a"]},{"Key":"name change","Fragments":["would","to"]},{"Key":"change would","Fragments":["be"]},{"Key":"be enough","Fragments":["to","in","(we"]},{"Key":"it not","Fragments":["stick","simpler"]},{"Key":"not stick","Fragments":["in"]},{"Key":"stick in","Fragments":["my"]},{"Key":"my craw.","Fragments":["Or"]},{"Key":"craw. Or","Fragments":["you"]},{"Key":"Or you","Fragments":["could","could"]},{"Key":"could build","Fragments":["it"]},{"Key":"build it","Fragments":["up"]},{"Key":"up dynamically,","Fragments":["or"]},{"Key":"dynamically, or","Fragments":["maybe"]},{"Key":"maybe even","Fragments":["inline"]},{"Key":"even inline","Fragments":["in"]},{"Key":"inline in","Fragments":["into"]},{"Key":"in into","Fragments":["`nucleotide-counts`...idk.","`let`."]},{"Key":"into `nucleotide-counts`...idk.","Fragments":["Or"]},{"Key":"`nucleotide-counts`...idk. Or","Fragments":["maybe"]},{"Key":"maybe it's","Fragments":["just","worth"]},{"Key":"Thanks, @jayson.","Fragments":["I'm"]},{"Key":"@jayson. I'm","Fragments":["aware"]},{"Key":"`frequencies` and","Fragments":["I've","using","`remove`."]},{"Key":"I've even","Fragments":["used"]},{"Key":"even used","Fragments":["it","in"]},{"Key":"previous exercises","Fragments":["but"]},{"Key":"exercises but","Fragments":["I"]},{"Key":"I chose","Fragments":["not","to","for","not","it","to"]},{"Key":"chose not","Fragments":["to","to"]},{"Key":"here because","Fragments":["of"]},{"Key":"the (pesky)","Fragments":["requirement"]},{"Key":"(pesky) requirement","Fragments":["that"]},{"Key":"requirement that","Fragments":["the"]},{"Key":"counts returned","Fragments":["include"]},{"Key":"returned include","Fragments":["`0`"]},{"Key":"include `0`","Fragments":["values"]},{"Key":"`0` values","Fragments":["for","returned."]},{"Key":"values for","Fragments":["DNA","lower-case"]},{"Key":"for DNA","Fragments":["nucleotides"]},{"Key":"nucleotides not","Fragments":["appearing"]},{"Key":"not appearing","Fragments":["in"]},{"Key":"appearing in","Fragments":["the"]},{"Key":"It came","Fragments":["down"]},{"Key":"came down","Fragments":["to"]},{"Key":"a decision","Fragments":["between"]},{"Key":"decision between","Fragments":["calling"]},{"Key":"between calling","Fragments":["`frequencies`"]},{"Key":"calling `frequencies`","Fragments":["and"]},{"Key":"and using","Fragments":["`merge`","indentation","the","the","a"]},{"Key":"using `merge`","Fragments":["to"]},{"Key":"`merge` to","Fragments":["combine"]},{"Key":"to combine","Fragments":["it","the","the","maps","multiple"]},{"Key":"combine it","Fragments":["with"]},{"Key":"map full","Fragments":["of"]},{"Key":"of zero","Fragments":["values,"]},{"Key":"zero values,","Fragments":["or"]},{"Key":"values, or","Fragments":["starting"]},{"Key":"or starting","Fragments":["with"]},{"Key":"starting with","Fragments":["the","it."]},{"Key":"the zero","Fragments":["map","manually"]},{"Key":"zero map","Fragments":["and"]},{"Key":"and building","Fragments":["up"]},{"Key":"building up","Fragments":["from"]},{"Key":"up from","Fragments":["there,","there."]},{"Key":"from there,","Fragments":["and"]},{"Key":"there, and","Fragments":["the"]},{"Key":"latter seemed","Fragments":["cleaner;"]},{"Key":"seemed cleaner;","Fragments":["less"]},{"Key":"cleaner; less","Fragments":["redundant."]},{"Key":" @evie","Fragments":["Aha!"]},{"Key":"@evie Aha!","Fragments":["I"]},{"Key":"Aha! I","Fragments":["assumed"]},{"Key":"assumed the","Fragments":["tests","`pluralize`","keys"]},{"Key":"not be","Fragments":["changing","an","necessary.","as","thread","obvious","necessary","lower-cased.","what","the","calculated","the","handled","a","used."]},{"Key":"be changing","Fragments":["behind"]},{"Key":"changing behind","Fragments":["my"]},{"Key":"behind my","Fragments":["back!"]},{"Key":"my back!","Fragments":["Silly"]},{"Key":"back! Silly","Fragments":["me,"]},{"Key":"Silly me,","Fragments":["this","I"]},{"Key":"me, this","Fragments":["is"]},{"Key":"is programming.","Fragments":[":p"]},{"Key":"programming. :p","Fragments":["Good"]},{"Key":":p Good","Fragments":["to"]},{"Key":"know for","Fragments":["future"]},{"Key":"future nitpicking,","Fragments":["thanks."]},{"Key":"For some","Fragments":["reason","reason,","reason"]},{"Key":"reason this","Fragments":["exercise"]},{"Key":"doesn't use","Fragments":["a","those.","this","Python's","Java","Java"]},{"Key":"a `ns`","Fragments":["so"]},{"Key":"`ns` so","Fragments":["I'm"]},{"Key":"I'm avoiding","Fragments":["using"]},{"Key":"avoiding using","Fragments":["any"]},{"Key":"using any","Fragments":["`:require`"]},{"Key":"any `:require`","Fragments":["because:"]},{"Key":"`:require` because:","Fragments":["where"]},{"Key":"because: where","Fragments":["do"]},{"Key":"where do","Fragments":["you"]},{"Key":"read, if","Fragments":["you"]},{"Key":"you ignore","Fragments":["the"]},{"Key":"ignore the","Fragments":["ugly"]},{"Key":"the ugly","Fragments":["`rand-char`","use"]},{"Key":"ugly `rand-char`","Fragments":["function"]},{"Key":"`rand-char` function","Fragments":["at"]},{"Key":"function at","Fragments":["the","the","the"]},{"Key":"only things","Fragments":["I"]},{"Key":"of 65","Fragments":["instead"]},{"Key":"65 instead","Fragments":["of"]},{"Key":"of `(int","Fragments":["\\A)`"]},{"Key":"`(int \\A)`","Fragments":["and","can","and","if"]},{"Key":"\\A)` and","Fragments":["the","`(int"]},{"Key":"of clojure.string","Fragments":["without"]},{"Key":"clojure.string without","Fragments":["an"]},{"Key":"Thank you!","Fragments":["1/2"]},{"Key":"you! 1/2","Fragments":["are"]},{"Key":"1/2 are","Fragments":["obvious"]},{"Key":"are obvious","Fragments":["mistakes,"]},{"Key":"obvious mistakes,","Fragments":["I"]},{"Key":"mistakes, I","Fragments":["think"]},{"Key":"little confused","Fragments":["after","by"]},{"Key":"confused after","Fragments":["6"]},{"Key":"after 6","Fragments":["iterations."]},{"Key":"6 iterations.","Fragments":["Someone"]},{"Key":"iterations. Someone","Fragments":["actually"]},{"Key":"Someone actually","Fragments":["suggested"]},{"Key":"actually suggested","Fragments":["3"]},{"Key":"suggested 3","Fragments":["before,"]},{"Key":"3 before,","Fragments":["but"]},{"Key":"before, but","Fragments":["I"]},{"Key":"use it,","Fragments":["thanks"]},{"Key":"it, thanks","Fragments":["again."]},{"Key":"Regarding 4,","Fragments":["the"]},{"Key":"4, the","Fragments":["tests"]},{"Key":"tests for","Fragments":["the","set","more","anagrams"]},{"Key":"the anagram","Fragments":["assignments","checking"]},{"Key":"anagram assignments","Fragments":["were"]},{"Key":"assignments were","Fragments":["extended"]},{"Key":"were extended","Fragments":["about"]},{"Key":"extended about","Fragments":["[a"]},{"Key":"about [a","Fragments":["month"]},{"Key":"[a month","Fragments":["ago](https://github.com/kytrinyx/exercism.io/issues/448)"]},{"Key":"month ago](https://github.com/kytrinyx/exercism.io/issues/448)","Fragments":["to"]},{"Key":"ago](https://github.com/kytrinyx/exercism.io/issues/448) to","Fragments":["all"]},{"Key":"all include","Fragments":["a"]},{"Key":"include a","Fragments":["test","separate","namespace;","question","`:pre`"]},{"Key":"test where","Fragments":["a"]},{"Key":"word may","Fragments":["not"]},{"Key":"may not","Fragments":["be","be","be","comply","be"]},{"Key":"anagram of","Fragments":["itself.","itself","\"Banana\"?","another.","`b`","another,"]},{"Key":"of itself.","Fragments":["I"]},{"Key":"itself. I","Fragments":["didn't"]},{"Key":"this makes","Fragments":["sense."]},{"Key":"sense. But","Fragments":["If"]},{"Key":"But If","Fragments":["you"]},{"Key":"think again:","Fragments":["Anagrams"]},{"Key":"again: Anagrams","Fragments":["are"]},{"Key":"Anagrams are","Fragments":["created"]},{"Key":"are created","Fragments":["by","with"]},{"Key":"created by","Fragments":["shuffling"]},{"Key":"by shuffling","Fragments":["letters,"]},{"Key":"shuffling letters,","Fragments":["and"]},{"Key":"letters, and","Fragments":["if"]},{"Key":"and if","Fragments":["you","you","there"]},{"Key":"you did","Fragments":["not","makes"]},{"Key":"not rearrange","Fragments":["anything,"]},{"Key":"rearrange anything,","Fragments":["it's"]},{"Key":"anything, it's","Fragments":["not"]},{"Key":"not an","Fragments":["anagram.","expressive","extensible","implementation","integer.","input"]},{"Key":"an anagram.","Fragments":["It"]},{"Key":"anagram. It","Fragments":["would"]},{"Key":"would simplify","Fragments":["the","your","your","things","the","things"]},{"Key":"solution a","Fragments":["lot","bit"]},{"Key":"into that,","Fragments":["thanks"]},{"Key":" Memoize","Fragments":["the"]},{"Key":"Memoize the","Fragments":["`letters`"]},{"Key":"the `letters`","Fragments":["function"]},{"Key":"`letters` function","Fragments":["from"]},{"Key":"from version","Fragments":["4"]},{"Key":"version 4","Fragments":["and","better."]},{"Key":"4 and","Fragments":["then"]},{"Key":"to worry","Fragments":["about","about,","about,"]},{"Key":"worry about","Fragments":["calling","case","exporting"]},{"Key":"about calling","Fragments":["it"]},{"Key":"calling it","Fragments":["repeatedly","`dna-seq`"]},{"Key":"it repeatedly","Fragments":["with"]},{"Key":"repeatedly with","Fragments":["the"]},{"Key":"Made methods","Fragments":["non-public."]},{"Key":"methods non-public.","Fragments":["Thanks"]},{"Key":"non-public. Thanks","Fragments":["@carolyne."]},{"Key":"great! The","Fragments":["only","only"]},{"Key":"think to","Fragments":["add","find"]},{"Key":"add is","Fragments":["that"]},{"Key":"you *could*","Fragments":["change"]},{"Key":"*could* change","Fragments":["`silence?`,"]},{"Key":"change `silence?`,","Fragments":["`shouting?`"]},{"Key":"`silence?`, `shouting?`","Fragments":["and","etc."]},{"Key":"`shouting?` and","Fragments":["`question?`","`question?`","`asking-politely?`"]},{"Key":"to [defn-](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/defn-)","Fragments":["so"]},{"Key":"[defn-](http://clojuredocs.org/clojure_core/1.3.0/clojure.core/defn-) so","Fragments":["that"]},{"Key":"that they're","Fragments":["not","equivalent","not","equivalent."]},{"Key":"they're not","Fragments":["exposed","pulling","both"]},{"Key":"not exposed","Fragments":["in"]},{"Key":"exposed in","Fragments":["the"]},{"Key":" reduce-kv","Fragments":["would"]},{"Key":"reduce-kv would","Fragments":["probably"]},{"Key":"few points,","Fragments":["some"]},{"Key":"points, some","Fragments":["more"]},{"Key":"more stylistic","Fragments":["than"]},{"Key":"stylistic than","Fragments":["functional:"]},{"Key":"1. Your","Fragments":["`on`","`add`"]},{"Key":"Your `on`","Fragments":["function"]},{"Key":"`on` function","Fragments":["is"]},{"Key":"is never","Fragments":["used."]},{"Key":"2. \"normalize\"","Fragments":["is"]},{"Key":"\"normalize\" is","Fragments":["misspelled"]},{"Key":"is misspelled","Fragments":[":)"]},{"Key":"3. Inside","Fragments":["of"]},{"Key":"Inside of","Fragments":["`noralize`,"]},{"Key":"of `noralize`,","Fragments":["`freqs`"]},{"Key":"`noralize`, `freqs`","Fragments":["is"]},{"Key":"`freqs` is","Fragments":["only"]},{"Key":"is only","Fragments":["used","calculated","really","used","swapped","created"]},{"Key":"used once","Fragments":["and"]},{"Key":"inlined (and,","Fragments":["I"]},{"Key":"(and, I","Fragments":["feel,"]},{"Key":"I feel,","Fragments":["still"]},{"Key":"feel, still","Fragments":["be"]},{"Key":" 4.","Fragments":["I","Indentation","Generally,","Having","I","No","As","I","s/capitalize"]},{"Key":"4. I","Fragments":["think","was","think"]},{"Key":"generally considered","Fragments":["to","good"]},{"Key":"considered to","Fragments":["be"]},{"Key":"of itself","Fragments":["(i.e."]},{"Key":"itself (i.e.","Fragments":["(="]},{"Key":"(i.e. (=","Fragments":["((anagram-of?"]},{"Key":"(= ((anagram-of?","Fragments":["\"foo\")"]},{"Key":"((anagram-of? \"foo\")","Fragments":["\"foo\")"]},{"Key":"\"foo\") \"foo\")","Fragments":["true)."]},{"Key":"\"foo\") true).","Fragments":["You"]},{"Key":"true). You","Fragments":["put"]},{"Key":"You put","Fragments":["a"]},{"Key":"of effort","Fragments":["in"]},{"Key":"effort in","Fragments":["detecting"]},{"Key":"in detecting","Fragments":["this"]},{"Key":"detecting this","Fragments":["case"]},{"Key":"case and","Fragments":["I'm","lower"]},{"Key":"sure you","Fragments":["need","need"]},{"Key":"to. Plus","Fragments":["your"]},{"Key":"Plus your","Fragments":["code"]},{"Key":"code will","Fragments":["be","need","be"]},{"Key":"be cleaner","Fragments":["without"]},{"Key":"cleaner without","Fragments":["this"]},{"Key":"without this","Fragments":["check."]},{"Key":"Just my","Fragments":["opinions!"]},{"Key":"my opinions!","Fragments":["Happy"]},{"Key":"opinions! Happy","Fragments":["hacking!"]},{"Key":"just managed","Fragments":["to"]},{"Key":"to interpret","Fragments":["what"]},{"Key":"interpret what","Fragments":["you"]},{"Key":"said as","Fragments":["meaning"]},{"Key":"as meaning","Fragments":["the"]},{"Key":"meaning the","Fragments":["exact"]},{"Key":"exact opposite","Fragments":["of"]},{"Key":"opposite of","Fragments":["what"]},{"Key":"you intended","Fragments":[":)"]},{"Key":"intended :)","Fragments":["What"]},{"Key":":) What","Fragments":["you"]},{"Key":"said made","Fragments":["perfect"]},{"Key":"made perfect","Fragments":["sense,"]},{"Key":"perfect sense,","Fragments":["I"]},{"Key":"sense, I","Fragments":["just","didn't"]},{"Key":"got my","Fragments":["wires"]},{"Key":"my wires","Fragments":["crossed."]},{"Key":"use `memoize`","Fragments":["I"]},{"Key":"`memoize` I","Fragments":["end"]},{"Key":"I end","Fragments":["up"]},{"Key":"up caching","Fragments":["all"]},{"Key":"caching all","Fragments":["calls"]},{"Key":"all calls","Fragments":["and"]},{"Key":"calls and","Fragments":["not","getting","you"]},{"Key":"only the","Fragments":["one","names","characters"]},{"Key":"Version 4","Fragments":["is"]},{"Key":"more succinct,","Fragments":["but"]},{"Key":"succinct, but","Fragments":["it's"]},{"Key":"less efficient.","Fragments":["Not"]},{"Key":"efficient. Not","Fragments":["that"]},{"Key":"Not that","Fragments":["that","it's","yours"]},{"Key":"that really","Fragments":["matters","irks","bothers","makes"]},{"Key":"really matters","Fragments":["for"]},{"Key":"matters for","Fragments":["the"]},{"Key":"the size","Fragments":["of","of","of","of"]},{"Key":"size of","Fragments":["the","the","the","the"]},{"Key":"problem we're","Fragments":["dealing"]},{"Key":"we're dealing","Fragments":["with.","with,"]},{"Key":" Where","Fragments":["do","there","```str```"]},{"Key":"Where do","Fragments":["you"]},{"Key":"know it.","Fragments":[":)"]},{"Key":"it. :)","Fragments":["I"]},{"Key":"wouldn't write","Fragments":["it"]},{"Key":"this if","Fragments":["I","-"]},{"Key":"were at","Fragments":["work."]},{"Key":"not overly","Fragments":["fond"]},{"Key":"overly fond","Fragments":["of"]},{"Key":"in `count`.","Fragments":["I"]},{"Key":"`count`. I","Fragments":["thought"]},{"Key":"about expanding","Fragments":["this"]},{"Key":"expanding this","Fragments":["with"]},{"Key":"nucleotide namespace","Fragments":["and"]},{"Key":"and handling","Fragments":["the"]},{"Key":"handling the","Fragments":["counts","problem","assertion"]},{"Key":"counts there.","Fragments":["I"]},{"Key":"solution but","Fragments":["I"]},{"Key":"keep this","Fragments":["one"]},{"Key":"about redefining","Fragments":["`count`.","core"]},{"Key":"redefining `count`.","Fragments":["Thanks"]},{"Key":"`count`. Thanks","Fragments":["for"]},{"Key":"Yes, that","Fragments":["would","makes","totally"]},{"Key":"would work,","Fragments":["but"]},{"Key":"you then","Fragments":["incur","get"]},{"Key":"then incur","Fragments":["a"]},{"Key":"incur a","Fragments":["memory"]},{"Key":"a memory","Fragments":["overhead"]},{"Key":"memory overhead","Fragments":["from"]},{"Key":"overhead from","Fragments":["the"]},{"Key":"the memoize","Fragments":["cache."]},{"Key":"memoize cache.","Fragments":["Again,"]},{"Key":"cache. Again,","Fragments":["not"]},{"Key":"Again, not","Fragments":["a"]},{"Key":"problem for","Fragments":["the","which"]},{"Key":"data we're","Fragments":["dealing"]},{"Key":"dealing with,","Fragments":["but"]},{"Key":"with, but","Fragments":["would"]},{"Key":"problem if","Fragments":["you"]},{"Key":"process a","Fragments":["large"]},{"Key":"large number","Fragments":["of","of"]},{"Key":"of `merge`","Fragments":["and"]},{"Key":"`merge` and","Fragments":["`frequencies`"]},{"Key":"and `frequencies`","Fragments":["together","on","which"]},{"Key":"`frequencies` together","Fragments":["-"]},{"Key":"together -","Fragments":["I"]},{"Key":"the special-case","Fragments":["of"]},{"Key":"special-case of","Fragments":["`\\U`"]},{"Key":"of `\\U`","Fragments":["in"]},{"Key":"`\\U` in","Fragments":["your","Clojure"]},{"Key":"your `cond`,","Fragments":["but"]},{"Key":"`cond`, but","Fragments":["that's","I","it","in"]},{"Key":"that's possibly","Fragments":["down"]},{"Key":"possibly down","Fragments":["to"]},{"Key":"an inconsistency","Fragments":["in"]},{"Key":"tests. If","Fragments":["`\\U`"]},{"Key":"If `\\U`","Fragments":["is"]},{"Key":"`\\U` is","Fragments":["a"]},{"Key":"a valid","Fragments":["nucleotide,","dna?","dna","rna","dna","name."]},{"Key":"valid nucleotide,","Fragments":["then"]},{"Key":"nucleotide, then","Fragments":["why"]},{"Key":"then why","Fragments":["doesn't"]},{"Key":"why doesn't","Fragments":["`count`"]},{"Key":"doesn't `count`","Fragments":["return"]},{"Key":"`count` return","Fragments":["its"]},{"Key":"return its","Fragments":["occurrences?"]},{"Key":"get warnings","Fragments":["from"]},{"Key":"warnings from","Fragments":["Clojure"]},{"Key":"from Clojure","Fragments":["for"]},{"Key":"Clojure for","Fragments":["re-defining","functions"]},{"Key":"for re-defining","Fragments":["`count`?"]},{"Key":"re-defining `count`?","Fragments":["You"]},{"Key":"`count`? You","Fragments":["can"]},{"Key":"get around","Fragments":["this","order-dependence.","using","the"]},{"Key":"around this","Fragments":["by"]},{"Key":"this by","Fragments":["adding"]},{"Key":" to","Fragments":["the"]},{"Key":"Nice, readable","Fragments":["code."]},{"Key":"readable code.","Fragments":["There's","This","But"]},{"Key":"code. There's","Fragments":["a"]},{"Key":"bug in","Fragments":["`(not=","previous","that"]},{"Key":"in `(not=","Fragments":["word"]},{"Key":"`(not= word","Fragments":["potential-anagram)`","poss)`"]},{"Key":"word potential-anagram)`","Fragments":["that"]},{"Key":"potential-anagram)` that","Fragments":["isn't"]},{"Key":"isn't caught","Fragments":["by"]},{"Key":"the tests:","Fragments":["is"]},{"Key":"tests: is","Fragments":["\"banana\""]},{"Key":"is \"banana\"","Fragments":["an"]},{"Key":"\"banana\" an","Fragments":["anagram"]},{"Key":"In terms","Fragments":["of","of","of","of","of","of","of"]},{"Key":"of efficiency,","Fragments":["you","it"]},{"Key":"efficiency, you","Fragments":["perform"]},{"Key":"you perform","Fragments":["`(sort"]},{"Key":"perform `(sort","Fragments":["(str/lower-case"]},{"Key":"`(sort (str/lower-case","Fragments":["word))`","s))`"]},{"Key":"(str/lower-case word))`","Fragments":["for"]},{"Key":"word))` for","Fragments":["every"]},{"Key":"every potential","Fragments":["anagram.","candidate?"]},{"Key":"potential anagram.","Fragments":["That's"]},{"Key":"anagram. That's","Fragments":["a"]},{"Key":"of unnecessary","Fragments":["processing","noise."]},{"Key":"unnecessary processing","Fragments":["if"]},{"Key":"processing if","Fragments":["`potential-anagrams`"]},{"Key":"if `potential-anagrams`","Fragments":["is"]},{"Key":"`potential-anagrams` is","Fragments":["a"]},{"Key":"a long","Fragments":["list.","strand","doc.","one,","way..."]},{"Key":"long list.","Fragments":["Can"]},{"Key":"list. Can","Fragments":["you"]},{"Key":"you optimize","Fragments":["this?"]},{"Key":" Personally","Fragments":["I","I","I","I'm"]},{"Key":"like version","Fragments":["4"]},{"Key":"4 better.","Fragments":["Maybe"]},{"Key":"better. Maybe","Fragments":["you"]},{"Key":"could fix","Fragments":["the"]},{"Key":"fix the","Fragments":["redundant","lower-casing"]},{"Key":"the redundant","Fragments":["calls"]},{"Key":"redundant calls","Fragments":["with"]},{"Key":"calls with","Fragments":["`memoize`."]},{"Key":"Looks better","Fragments":["but"]},{"Key":"better but","Fragments":["you've"]},{"Key":"you've ordered","Fragments":["fns"]},{"Key":"ordered fns","Fragments":["exactly"]},{"Key":"fns exactly","Fragments":["opposite"]},{"Key":"exactly opposite","Fragments":["to"]},{"Key":"opposite to","Fragments":["what"]},{"Key":"have said.","Fragments":["Is"]},{"Key":"said. Is","Fragments":["that"]},{"Key":"Is that","Fragments":["intentional.","enough","you","the","the","the","the"]},{"Key":" @karlie","Fragments":["-"]},{"Key":"@karlie -","Fragments":["Thanks"]},{"Key":"- Thanks","Fragments":["for"]},{"Key":"to grab","Fragments":["the","the"]},{"Key":"grab the","Fragments":["words","last"]},{"Key":"the words","Fragments":["out","directly","in","as","you","and","based","out,"]},{"Key":"words out","Fragments":["of","of"]},{"Key":"phrase is","Fragments":["more","a"]},{"Key":"expressive then","Fragments":["splitting"]},{"Key":"then splitting","Fragments":["a"]},{"Key":"splitting a","Fragments":["string"]},{"Key":"string on","Fragments":["groups","whitespace","the"]},{"Key":"on groups","Fragments":["of"]},{"Key":"groups of","Fragments":["non-word"]},{"Key":"of non-word","Fragments":["characters."]},{"Key":"non-word characters.","Fragments":["It"]},{"Key":"characters. It","Fragments":["is","would"]},{"Key":"is clearer","Fragments":["about","IMO),","than"]},{"Key":"clearer about","Fragments":["why"]},{"Key":"about why","Fragments":["the"]},{"Key":"Clojure knows","Fragments":["how"]},{"Key":"knows how","Fragments":["to"]},{"Key":"compare maps","Fragments":["for"]},{"Key":"maps for","Fragments":["equality:"]},{"Key":"for equality:","Fragments":["why"]},{"Key":"equality: why","Fragments":["not"]},{"Key":"not simply","Fragments":["test"]},{"Key":"simply test","Fragments":["for"]},{"Key":"equality between","Fragments":["`word-freq`"]},{"Key":"between `word-freq`","Fragments":["and"]},{"Key":"`word-freq` and","Fragments":["`candidate-freq`?"]},{"Key":"your introduction","Fragments":["of"]},{"Key":"introduction of","Fragments":["the"]},{"Key":"the `normalizations`","Fragments":["function;"]},{"Key":"`normalizations` function;","Fragments":["the"]},{"Key":"function; the","Fragments":["use"]},{"Key":"of `reductions`","Fragments":["is"]},{"Key":"`reductions` is","Fragments":["clever,"]},{"Key":"is clever,","Fragments":["but"]},{"Key":"clever, but","Fragments":["doesn't"]},{"Key":"but doesn't","Fragments":["help","it","match","comply"]},{"Key":"doesn't help","Fragments":["readability.","the"]},{"Key":"help readability.","Fragments":["Why","It"]},{"Key":"readability. Why","Fragments":["not"]},{"Key":"(defn- normalizations","Fragments":["[word]"]},{"Key":"(let [word-lc","Fragments":["(s/lower-case"]},{"Key":"[word-lc (s/lower-case","Fragments":["word)]"]},{"Key":" [word-lc","Fragments":["(frequencies"]},{"Key":"[word-lc (frequencies","Fragments":["word-lc)]))"]},{"Key":"Is `w12req`","Fragments":["a"]},{"Key":"`w12req` a","Fragments":["typo?"]},{"Key":"a typo?","Fragments":["Suspect"]},{"Key":"typo? Suspect","Fragments":["you"]},{"Key":"Suspect you","Fragments":["mean"]},{"Key":"Also, the","Fragments":["argument","use","fact"]},{"Key":"argument shouldn't","Fragments":["be"]},{"Key":"named `dna-seq`,","Fragments":["since"]},{"Key":"`dna-seq`, since","Fragments":["`clojure.string/replace`"]},{"Key":"since `clojure.string/replace`","Fragments":["coerces"]},{"Key":"`clojure.string/replace` coerces","Fragments":["its"]},{"Key":"coerces its","Fragments":["argument"]},{"Key":"its argument","Fragments":["to","has","automatically,","(lines"]},{"Key":"string, leading","Fragments":["to"]},{"Key":"leading to","Fragments":["incorrect"]},{"Key":"to incorrect","Fragments":["output"]},{"Key":"incorrect output","Fragments":["if"]},{"Key":"output if","Fragments":["you"]},{"Key":"actually give","Fragments":["it","you"]},{"Key":" (str/replace","Fragments":["(seq","dna"]},{"Key":"(str/replace (seq","Fragments":["\"TAG\")"]},{"Key":"(seq \"TAG\")","Fragments":["\"T\""]},{"Key":"\"TAG\") \"T\"","Fragments":["\"U\")"]},{"Key":" ;;=\u0026gt;","Fragments":["\"(\\\\U"]},{"Key":";;=\u0026gt; \"(\\\\U","Fragments":["\\\\A"]},{"Key":"\"(\\\\U \\\\A","Fragments":["\\\\G)\""]},{"Key":"One small","Fragments":["aesthetic","issue:","nit","nitpick","nit:","things:"]},{"Key":"small aesthetic","Fragments":["thing"]},{"Key":"aesthetic thing","Fragments":["to"]},{"Key":"to consider:","Fragments":["`:as","Instead"]},{"Key":"consider: `:as","Fragments":["str`"]},{"Key":"`:as str`","Fragments":["instead","-"]},{"Key":"str` instead","Fragments":["of","of"]},{"Key":"of `:as","Fragments":["string`,"]},{"Key":"`:as string`,","Fragments":["since"]},{"Key":"string`, since","Fragments":["you"]},{"Key":"then get","Fragments":["a","frustrated","only"]},{"Key":"nice symmetry","Fragments":["with","in"]},{"Key":"symmetry with","Fragments":["the"]},{"Key":"built-in `str`","Fragments":["function."]},{"Key":"`str` function.","Fragments":["(Note","It'll"]},{"Key":"function. (Note","Fragments":["that"]},{"Key":"(Note that","Fragments":["functions","I"]},{"Key":"and namespaces","Fragments":["do"]},{"Key":"namespaces do","Fragments":["not"]},{"Key":"Oops, I","Fragments":["don't","didn't","had"]},{"Key":"need `clojure.string`","Fragments":["anymore."]},{"Key":"A bit","Fragments":["more","too","dated","hard"]},{"Key":"more data-driven","Fragments":["than"]},{"Key":"data-driven than","Fragments":["[#4](http://exercism.io/submissions/52365b5d658d2387560000a1),"]},{"Key":"than [#4](http://exercism.io/submissions/52365b5d658d2387560000a1),","Fragments":["but"]},{"Key":"[#4](http://exercism.io/submissions/52365b5d658d2387560000a1), but","Fragments":["maybe"]},{"Key":"maybe harder","Fragments":["to"]},{"Key":"understand. I'd","Fragments":["also"]},{"Key":"I'd also","Fragments":["love","argue","recommend","add","think"]},{"Key":"also love","Fragments":["opinions"]},{"Key":"love opinions","Fragments":["on"]},{"Key":"opinions on","Fragments":["using"]},{"Key":"`let` destructuring","Fragments":["instead"]},{"Key":"destructuring instead","Fragments":["of"]},{"Key":"of `(last","Fragments":["(first"]},{"Key":"`(last (first","Fragments":["(filter"]},{"Key":"(first (filter","Fragments":["...","matches"]},{"Key":"(filter ...","Fragments":["responses)))`"]},{"Key":"... responses)))`","Fragments":["to"]},{"Key":"responses)))` to","Fragments":["access"]},{"Key":"first attempt,","Fragments":["but","I"]},{"Key":"attempt, but","Fragments":["my"]},{"Key":"my re-fu","Fragments":["is"]},{"Key":"re-fu is","Fragments":["bad"]},{"Key":"bad and","Fragments":["it"]},{"Key":"it took","Fragments":["me","me"]},{"Key":"bit to","Fragments":["figure","see","find","figure","it:","simplify"]},{"Key":"out `[^a-z]`","Fragments":["to"]},{"Key":"`[^a-z]` to","Fragments":["identify"]},{"Key":"to identify","Fragments":["caps."]},{"Key":"Sorry, my","Fragments":["bad,"]},{"Key":"my bad,","Fragments":["I"]},{"Key":"bad, I","Fragments":["assumed"]},{"Key":"the `pluralize`","Fragments":["function","function"]},{"Key":"`pluralize` function","Fragments":["was","to","in"]},{"Key":"function was","Fragments":["taking","a","originally","completely"]},{"Key":"was taking","Fragments":["singular"]},{"Key":"taking singular","Fragments":["noun"]},{"Key":"singular noun","Fragments":["and"]},{"Key":"noun and","Fragments":["returning"]},{"Key":"and returning","Fragments":["the"]},{"Key":"the plural.","Fragments":["Perhaps"]},{"Key":"plural. Perhaps","Fragments":["you"]},{"Key":"could rename","Fragments":["that"]},{"Key":"rename that","Fragments":["function"]},{"Key":"better reflect","Fragments":["what"]},{"Key":"reflect what","Fragments":["it's"]},{"Key":" OMG,","Fragments":["that"]},{"Key":"OMG, that","Fragments":["format"]},{"Key":"that format","Fragments":["string"]},{"Key":"format string","Fragments":["is","is","could"]},{"Key":"giving me","Fragments":["a"]},{"Key":"a headache!","Fragments":["There's"]},{"Key":"headache! There's","Fragments":["no"]},{"Key":"There's no","Fragments":["doubting","need"]},{"Key":"no doubting","Fragments":["it's"]},{"Key":"doubting it's","Fragments":["a"]},{"Key":"a clever","Fragments":["solution"]},{"Key":"clever solution","Fragments":["(and"]},{"Key":"solution (and","Fragments":["it"]},{"Key":"(and it","Fragments":["makes"]},{"Key":"me smile","Fragments":["that"]},{"Key":"smile that","Fragments":["you"]},{"Key":"you managed","Fragments":["to","to"]},{"Key":"this way),","Fragments":["but"]},{"Key":"way), but","Fragments":["I'd"]},{"Key":"I'd hate","Fragments":["to"]},{"Key":"hate to","Fragments":["be"]},{"Key":"one to","Fragments":["have","use.","use.","appear","define"]},{"Key":"maintain that","Fragments":["code."]},{"Key":" @karl","Fragments":["great"]},{"Key":"@karl great","Fragments":["point."]},{"Key":"great point.","Fragments":["I","I"]},{"Key":"got caught","Fragments":["up"]},{"Key":"caught up","Fragments":["in"]},{"Key":"the shortness","Fragments":["of","of"]},{"Key":"shortness of","Fragments":["the","the"]},{"Key":"solution (something","Fragments":["that"]},{"Key":"(something that","Fragments":["I"]},{"Key":"do, especially","Fragments":["in"]},{"Key":"especially in","Fragments":["Clojure)"]},{"Key":"in Clojure)","Fragments":["and","besides"]},{"Key":"Clojure) and","Fragments":["lost"]},{"Key":"and lost","Fragments":["sight"]},{"Key":"lost sight","Fragments":["of"]},{"Key":"sight of","Fragments":["the"]},{"Key":"the expressiveness","Fragments":["of","of"]},{"Key":"expressiveness of","Fragments":["single-character","anonymous"]},{"Key":"of single-character","Fragments":["strings."]},{"Key":"you change","Fragments":["your","the","the","the","the"]},{"Key":"your regex","Fragments":["you","could","that","with","does","conditions","changes."]},{"Key":"regex you","Fragments":["can","could","can"]},{"Key":"`(remove blank?)`","Fragments":["line."]},{"Key":"of people","Fragments":["have","in","expect"]},{"Key":"people have","Fragments":["suggested","to"]},{"Key":"have suggested","Fragments":["assigning"]},{"Key":"suggested assigning","Fragments":["the"]},{"Key":"assigning the","Fragments":["constants"]},{"Key":"constants `\"T\"`","Fragments":["and"]},{"Key":"`\"T\"` and","Fragments":["`\"U\"`","`\"U\"`"]},{"Key":"and `\"U\"`","Fragments":["to","names."]},{"Key":"`\"U\"` to","Fragments":["variables"]},{"Key":"variables `thymidine`","Fragments":["and"]},{"Key":"`thymidine` and","Fragments":["`uracil`."]},{"Key":"and `uracil`.","Fragments":["Certainly"]},{"Key":"`uracil`. Certainly","Fragments":["this"]},{"Key":"Certainly this","Fragments":["would"]},{"Key":"good thing","Fragments":["to","in"]},{"Key":"do in","Fragments":["a","your","Clojure"]},{"Key":"bigger program,","Fragments":["but"]},{"Key":"program, but","Fragments":["I"]},{"Key":"small self-contained","Fragments":["function"]},{"Key":"self-contained function","Fragments":["like"]},{"Key":"find this","Fragments":["code","version"]},{"Key":"understand, and","Fragments":["I"]},{"Key":"your `on`","Fragments":["function."]},{"Key":"`on` function.","Fragments":["One"]},{"Key":"function. One","Fragments":["tiny","of"]},{"Key":"tiny nit-pick","Fragments":["might"]},{"Key":"nit-pick might","Fragments":["be"]},{"Key":"to rename","Fragments":["the"]},{"Key":"rename the","Fragments":["argument","method","parameter"]},{"Key":"argument `g`","Fragments":["to"]},{"Key":"`g` to","Fragments":["`pred`,"]},{"Key":"to `pred`,","Fragments":["which"]},{"Key":"`pred`, which","Fragments":["you"]},{"Key":"you often","Fragments":["see","manipulate"]},{"Key":"often see","Fragments":["for"]},{"Key":"see for","Fragments":["predicates"]},{"Key":"for predicates","Fragments":["passed"]},{"Key":"predicates passed","Fragments":["to"]},{"Key":"to higher-order","Fragments":["functions."]},{"Key":"efficiency, it","Fragments":["bugs"]},{"Key":"it bugs","Fragments":["me"]},{"Key":"bugs me","Fragments":["a"]},{"Key":"bit that","Fragments":["you're"]},{"Key":"calling `lower-case`","Fragments":["twice","and","several"]},{"Key":"`lower-case` twice","Fragments":["on"]},{"Key":"twice on","Fragments":["each"]},{"Key":"on each","Fragments":["word","word","line."]},{"Key":"each word","Fragments":["(once","in","to","individually"]},{"Key":"word (once","Fragments":["in"]},{"Key":"(once in","Fragments":["the","strip-us-prefix"]},{"Key":"and again","Fragments":["in"]},{"Key":"again in","Fragments":["`letters`)."]},{"Key":"in `letters`).","Fragments":["I'm"]},{"Key":"`letters`). I'm","Fragments":["struggling"]},{"Key":"struggling to","Fragments":["come","come"]},{"Key":"that completely","Fragments":["avoids"]},{"Key":"completely avoids","Fragments":["the"]},{"Key":"avoids the","Fragments":["duplication,","call"]},{"Key":"the duplication,","Fragments":["but","I"]},{"Key":"(defn- anagram?","Fragments":["[word1"]},{"Key":"anagram? [word1","Fragments":["word1]"]},{"Key":"(let [[word1","Fragments":["word2]"]},{"Key":"[[word1 word2]","Fragments":["(map"]},{"Key":"word2] (map","Fragments":["s/lower-case"]},{"Key":"(map s/lower-case","Fragments":["[word1"]},{"Key":"s/lower-case [word1","Fragments":["word2])]"]},{"Key":"(and (not=","Fragments":["word1","lower","a"]},{"Key":"(not= word1","Fragments":["word2)"]},{"Key":"word1 word2)","Fragments":["(="]},{"Key":"word2) (=","Fragments":["(frequencies"]},{"Key":"(= (frequencies","Fragments":["word1)"]},{"Key":"(frequencies word1)","Fragments":["(frequencies"]},{"Key":"word1) (frequencies","Fragments":["word2)))))"]},{"Key":"We still","Fragments":["have"]},{"Key":"`frequencies` on","Fragments":["`word`"]},{"Key":"on `word`","Fragments":["once"]},{"Key":"once for","Fragments":["every","a","area-code).","each"]},{"Key":"every element","Fragments":["in"]},{"Key":"in `candidates`.","Fragments":["Can"]},{"Key":"`candidates`. Can","Fragments":["you"]},{"Key":"No I","Fragments":["won't"]},{"Key":"won't hit","Fragments":["you"]},{"Key":"hit you","Fragments":[";)"]},{"Key":"you ;)","Fragments":["I'll"]},{"Key":";) I'll","Fragments":["look"]},{"Key":"into it.","Fragments":["The"]},{"Key":"it. The","Fragments":["problem"]},{"Key":"problem I","Fragments":["had","encountered","solved"]},{"Key":"had when","Fragments":["using"]},{"Key":"using two","Fragments":["arguments","methods","functions"]},{"Key":"arguments was","Fragments":["that"]},{"Key":"was that","Fragments":["I","the","using"]},{"Key":"to duplicate","Fragments":["the","the"]},{"Key":"duplicate the","Fragments":["calls","list"]},{"Key":"`frequencies` which","Fragments":["looked"]},{"Key":"which looked","Fragments":["really"]},{"Key":"looked really","Fragments":["undesirable"]},{"Key":"really undesirable","Fragments":["to"]},{"Key":"undesirable to","Fragments":["me."]},{"Key":"how that","Fragments":["would","looks","concept"]},{"Key":"would work?","Fragments":["Or"]},{"Key":"work? Or","Fragments":["do"]},{"Key":"mean changing","Fragments":["the"]},{"Key":"take two","Fragments":["more","arguments."]},{"Key":"two more","Fragments":["(optional)"]},{"Key":"more (optional)","Fragments":["arguments,"]},{"Key":"(optional) arguments,","Fragments":["so"]},{"Key":"arguments, so","Fragments":["I"]},{"Key":"tell it","Fragments":["what"]},{"Key":"it what","Fragments":["the"]},{"Key":"the singular","Fragments":["and"]},{"Key":"singular and","Fragments":["the"]},{"Key":"the plural","Fragments":["should"]},{"Key":"plural should","Fragments":["look"]},{"Key":"nice. Final","Fragments":["touch"]},{"Key":"Final touch","Fragments":["might"]},{"Key":"touch might","Fragments":["be"]},{"Key":"use your","Fragments":["`pluralize`","suggestions."]},{"Key":"your `pluralize`","Fragments":["function"]},{"Key":"`bottles` instead","Fragments":["of"]},{"Key":"the duplicate","Fragments":["`if`.","“Take"]},{"Key":"worth giving","Fragments":["the"]},{"Key":"predicates names","Fragments":["that"]},{"Key":"that match","Fragments":["the"]},{"Key":"domain of","Fragments":["the","Anagrams."]},{"Key":"problem. `clojure.string/blank?`","Fragments":["tells"]},{"Key":"`clojure.string/blank?` tells","Fragments":["you"]},{"Key":"tells you","Fragments":["*what*"]},{"Key":"you *what*","Fragments":["it"]},{"Key":"*what* it","Fragments":["is"]},{"Key":"the higher-level","Fragments":["concept"]},{"Key":"higher-level concept","Fragments":["like"]},{"Key":"concept like","Fragments":["*why*."]},{"Key":"this were","Fragments":["a"]},{"Key":"were a","Fragments":["project","couple","good","lot"]},{"Key":"a project","Fragments":["that"]},{"Key":"project that","Fragments":["involved"]},{"Key":"that involved","Fragments":["more"]},{"Key":"involved more","Fragments":["than"]},{"Key":"just yourself","Fragments":["(especially"]},{"Key":"yourself (especially","Fragments":["any"]},{"Key":"(especially any","Fragments":["non"]},{"Key":"any non","Fragments":["software"]},{"Key":"non software","Fragments":["engineers),"]},{"Key":"software engineers),","Fragments":["I"]},{"Key":"engineers), I","Fragments":["guarantee"]},{"Key":"I guarantee","Fragments":["you"]},{"Key":"guarantee you","Fragments":["that"]},{"Key":"you that","Fragments":["you'd","it's","it"]},{"Key":"that you'd","Fragments":["talk","ever"]},{"Key":"you'd talk","Fragments":["to"]},{"Key":"the terms","Fragments":["expressed","and"]},{"Key":"terms expressed","Fragments":["in"]},{"Key":"expressed in","Fragments":["the","the","terms"]},{"Key":"README (\"yelling\"),","Fragments":["not"]},{"Key":"(\"yelling\"), not","Fragments":["as"]},{"Key":"the technical","Fragments":["details"]},{"Key":"technical details","Fragments":["(\"upper"]},{"Key":"details (\"upper","Fragments":["case\")."]},{"Key":"(\"upper case\").","Fragments":["It's"]},{"Key":"case\"). It's","Fragments":["worth"]},{"Key":"It's worth","Fragments":["trying","mentioning"]},{"Key":"worth trying","Fragments":["to"]},{"Key":"to reflect","Fragments":["that","your","this."]},{"Key":"reflect that","Fragments":["domain","in"]},{"Key":"that domain","Fragments":["in"]},{"Key":"domain in","Fragments":["the","code,"]},{"Key":"with @boyd's","Fragments":["point"]},{"Key":"@boyd's point","Fragments":["about"]},{"Key":"about shortness,","Fragments":["remember"]},{"Key":"shortness, remember","Fragments":["that"]},{"Key":"goal of","Fragments":["exercism"]},{"Key":"of exercism","Fragments":["is"]},{"Key":"exercism is","Fragments":["\"to"]},{"Key":"is \"to","Fragments":["focus"]},{"Key":"\"to focus","Fragments":["on"]},{"Key":"on expressive,","Fragments":["readable"]},{"Key":"expressive, readable","Fragments":["code\"."]},{"Key":" +1","Fragments":["to","to","all","to","on","on","for","for","for","for","for","for","on","for","for","for"]},{"Key":"+1 to","Fragments":["@nichole's","@chance","dyba"]},{"Key":"to @nichole's","Fragments":["suggestion."]},{"Key":"@nichole's suggestion.","Fragments":["This"]},{"Key":"suggestion. This","Fragments":["solution"]},{"Key":"is extremely","Fragments":["hard-coded","important,"]},{"Key":"extremely hard-coded","Fragments":["to"]},{"Key":"hard-coded to","Fragments":["the"]},{"Key":"test data.","Fragments":["Test"]},{"Key":"data. Test","Fragments":["data"]},{"Key":"Test data","Fragments":["is"]},{"Key":"data is","Fragments":["used","only"]},{"Key":"is used","Fragments":["to","elsewhere","only","for","very","as","as","to","in","(if","in","for"]},{"Key":"give specific","Fragments":["instances"]},{"Key":"specific instances","Fragments":["of"]},{"Key":"instances of","Fragments":["general","\"bottle\""]},{"Key":"of general","Fragments":["conditions."]},{"Key":"general conditions.","Fragments":["These"]},{"Key":"conditions. These","Fragments":["general"]},{"Key":"These general","Fragments":["conditions"]},{"Key":"general conditions","Fragments":["are"]},{"Key":"conditions are","Fragments":["expressed","working","not","met."]},{"Key":"are expressed","Fragments":["in"]},{"Key":"README and","Fragments":["in","the"]},{"Key":" Picked","Fragments":["up"]},{"Key":"Picked up","Fragments":["on"]},{"Key":"on comments","Fragments":["elsewhere"]},{"Key":"comments elsewhere","Fragments":["to"]},{"Key":"elsewhere to","Fragments":["use"]},{"Key":"`frequencies` rather","Fragments":["than"]},{"Key":"than `sort`.","Fragments":["Also"]},{"Key":"`sort`. Also","Fragments":["fixed"]},{"Key":"Also fixed","Fragments":["subtle"]},{"Key":"fixed subtle","Fragments":["bug"]},{"Key":"that wasn't","Fragments":["caught","in","the"]},{"Key":"wasn't caught","Fragments":["by"]},{"Key":"tests (the","Fragments":["`not=`"]},{"Key":"(the `not=`","Fragments":["has"]},{"Key":"`not=` has","Fragments":["to"]},{"Key":"has to","Fragments":["be","offer.","be","dig","wrap","be","perform"]},{"Key":"a case-insensitive","Fragments":["comparison)."]},{"Key":"Don't hit","Fragments":["me,"]},{"Key":"hit me,","Fragments":["but"]},{"Key":"I preferred","Fragments":["your"]},{"Key":"preferred your","Fragments":["1st"]},{"Key":"your 1st","Fragments":["solution."]},{"Key":"1st solution.","Fragments":["I"]},{"Key":"think you've","Fragments":["lost","made"]},{"Key":"you've lost","Fragments":["some"]},{"Key":"lost some","Fragments":["clarity"]},{"Key":"some clarity","Fragments":["by","for","where"]},{"Key":"clarity by","Fragments":["using","using"]},{"Key":"a variadic","Fragments":["function"]},{"Key":"variadic function","Fragments":["with"]},{"Key":"with `[\u0026amp;","Fragments":["words]`,"]},{"Key":"`[\u0026amp; words]`,","Fragments":["and"]},{"Key":"words]`, and","Fragments":["this"]},{"Key":"this style","Fragments":["also","come","surely"]},{"Key":"style also","Fragments":["requires"]},{"Key":"also requires","Fragments":["the"]},{"Key":"requires the","Fragments":["ugly"]},{"Key":"ugly use","Fragments":["of"]},{"Key":"of `apply`.","Fragments":["I"]},{"Key":"`apply`. I","Fragments":["think"]},{"Key":"to declare","Fragments":["the","your","them","a"]},{"Key":"declare the","Fragments":["function"]},{"Key":"function arguments","Fragments":["as"]},{"Key":"as `[word1","Fragments":["word2]`"]},{"Key":"`[word1 word2]`","Fragments":["and"]},{"Key":"word2]` and","Fragments":["go"]},{"Key":"and go","Fragments":["from","for"]},{"Key":"go from","Fragments":["there."]},{"Key":"clearer if","Fragments":["you","you","the"]},{"Key":"a positive","Fragments":["assertion","assertion","comment"]},{"Key":"positive assertion","Fragments":["in","about"]},{"Key":"assertion in","Fragments":["the","these"]},{"Key":"regular expression.","Fragments":["Instead","I","I","Otherwise"]},{"Key":"expression. Instead","Fragments":["of"]},{"Key":"the negative","Fragments":["character"]},{"Key":"negative character","Fragments":["class","classes"]},{"Key":"class `\\W+`","Fragments":["you"]},{"Key":"`\\W+` you","Fragments":["could","can"]},{"Key":"could search","Fragments":["for"]},{"Key":"search for","Fragments":["all","'trailing'.","prime"]},{"Key":"all occurrences","Fragments":["of","of","of"]},{"Key":"occurrences of","Fragments":["`\\w+`","thymidine","cytosine"]},{"Key":"of `\\w+`","Fragments":["by:"]},{"Key":"Ah, `frequencies`...","Fragments":["I"]},{"Key":"`frequencies`... I","Fragments":["used"]},{"Key":"word-count too,","Fragments":["but"]},{"Key":"too, but","Fragments":["I","it'll"]},{"Key":"was blinded","Fragments":["by"]},{"Key":"my anagram","Fragments":["solutions"]},{"Key":"anagram solutions","Fragments":["in"]},{"Key":"other languages.","Fragments":["Thank","So","Since"]},{"Key":"languages. Thank","Fragments":["you."]},{"Key":"I considered","Fragments":["using","that,","for","de-composing","extending","was","using","defining","using","\"yelling\""]},{"Key":"`cond` rather","Fragments":["than","than"]},{"Key":"than `condp`,","Fragments":["which"]},{"Key":"`condp`, which","Fragments":["would"]},{"Key":" (cond","Fragments":["s","(=","(question?","(clojure.string/blank?","(blank?"]},{"Key":" (silence?","Fragments":["s)","sentence)","stmt)","stmt)"]},{"Key":"(silence? s)","Fragments":["\"Fine."]},{"Key":"s) \"Fine.","Fragments":["Be","Be","Be","Be","Be"]},{"Key":" ...but","Fragments":["I","better,"]},{"Key":"...but I","Fragments":["didn't"]},{"Key":"didn't like","Fragments":["the","the"]},{"Key":"of testing","Fragments":["`s`"]},{"Key":"testing `s`","Fragments":["in"]},{"Key":"in each","Fragments":["expression.","grade."]},{"Key":"in core","Fragments":["to","that","that"]},{"Key":"core to","Fragments":["do"]},{"Key":"do what","Fragments":["`consider`","you","you"]},{"Key":"what `consider`","Fragments":["is"]},{"Key":"`consider` is","Fragments":["doing"]},{"Key":"doing here?","Fragments":["`apply`"]},{"Key":"here? `apply`","Fragments":["doesn't"]},{"Key":"`apply` doesn't","Fragments":["work"]},{"Key":"it calls","Fragments":["the","`seq`"]},{"Key":"multiple arguments","Fragments":["("]},{"Key":"arguments (","Fragments":["`(seq"]},{"Key":"( `(seq","Fragments":["s)`)"]},{"Key":"`(seq s)`)","Fragments":["rather"]},{"Key":"s)`) rather","Fragments":["than"]},{"Key":"solution more","Fragments":["general,","\"robust\"","general."]},{"Key":"more general,","Fragments":["so"]},{"Key":"general, so","Fragments":["that"]},{"Key":"would respond","Fragments":["correctly"]},{"Key":"respond correctly","Fragments":["to"]},{"Key":"correctly to","Fragments":["any"]},{"Key":"to any","Fragments":["upper-case","changes"]},{"Key":"any upper-case","Fragments":["text,"]},{"Key":"upper-case text,","Fragments":["or"]},{"Key":"text, or","Fragments":["any"]},{"Key":"or any","Fragments":["question?","other"]},{"Key":"nested `if`?","Fragments":["If"]},{"Key":"`if`? If","Fragments":["you"]},{"Key":"you go","Fragments":["down","to","into","that"]},{"Key":"go down","Fragments":["this"]},{"Key":"down this","Fragments":["route"]},{"Key":"this route","Fragments":["you","was","instead."]},{"Key":"route you","Fragments":["might"]},{"Key":"might find","Fragments":["it","it","useful."]},{"Key":"to drop","Fragments":["the","it.","to","the","the"]},{"Key":"the intermediate","Fragments":["`let`","value,","binding.","strings"]},{"Key":"intermediate `let`","Fragments":["statements,"]},{"Key":"`let` statements,","Fragments":["like:"]},{"Key":"(clojure.string/blank? greeting)","Fragments":["\"Fine.","\"Fine."]},{"Key":"greeting) \"Fine.","Fragments":["Be","Be"]},{"Key":"(= greeting","Fragments":["(clojure.string/upper-case","(clojure.string/upper-case"]},{"Key":"greeting (clojure.string/upper-case","Fragments":["greeting))","greeting))"]},{"Key":"(clojure.string/upper-case greeting))","Fragments":["\"Woah,"]},{"Key":"greeting)) \"Woah,","Fragments":["chill"]},{"Key":" Like","Fragments":["you","how","the","you've","the"]},{"Key":"Like you","Fragments":["say,"]},{"Key":"you say,","Fragments":["you"]},{"Key":"say, you","Fragments":["could"]},{"Key":"could break","Fragments":["this","it"]},{"Key":"break this","Fragments":["out","line"]},{"Key":"this out","Fragments":["into","there","after","from"]},{"Key":"into more","Fragments":["functions","functions."]},{"Key":"Then your","Fragments":["conditional"]},{"Key":"your conditional","Fragments":["becomes","expression"]},{"Key":"conditional becomes","Fragments":["something"]},{"Key":"becomes something","Fragments":["like:"]},{"Key":"(shouting? greeting)","Fragments":["\"Woah,"]},{"Key":"greeting) \"Woah,","Fragments":["chill"]},{"Key":"word with","Fragments":["every","letters","the"]},{"Key":"general random","Fragments":["string"]},{"Key":"random string","Fragments":["generation","generator"]},{"Key":"string generation","Fragments":["fn"]},{"Key":"generation fn","Fragments":["accepting"]},{"Key":"fn accepting","Fragments":["lower"]},{"Key":"accepting lower","Fragments":["and"]},{"Key":"lower and","Fragments":["upper"]},{"Key":"and upper","Fragments":["bound"]},{"Key":"upper bound","Fragments":["characters."]},{"Key":"bound characters.","Fragments":["It"]},{"Key":"literals instead","Fragments":["of"]},{"Key":"of ints.","Fragments":["It"]},{"Key":"ints. It","Fragments":["would"]},{"Key":"be also","Fragments":["good","treated","treated","written","expressed"]},{"Key":"also good","Fragments":["if","style","in","in"]},{"Key":"you koved","Fragments":["public"]},{"Key":"koved public","Fragments":["api"]},{"Key":"top with","Fragments":["help"]},{"Key":"I'm your","Fragments":["Nemesis..."]},{"Key":"your Nemesis...","Fragments":["You"]},{"Key":"Nemesis... You","Fragments":["could"]},{"Key":"could split","Fragments":["operations","on"]},{"Key":"split operations","Fragments":["in"]},{"Key":"in `number`","Fragments":["into","prevented","could"]},{"Key":"`number` into","Fragments":["a"]},{"Key":"a series","Fragments":["of","of","of","of","of","of"]},{"Key":"series of","Fragments":["data","transformations","transforming","sanitizing","transforms.","lines"]},{"Key":"data transforming","Fragments":["operations"]},{"Key":"transforming operations","Fragments":["with"]},{"Key":"operations with","Fragments":["meaningful"]},{"Key":"meaningful binding","Fragments":["names"]},{"Key":"binding names","Fragments":["and"]},{"Key":"names and","Fragments":["thread","using","in"]},{"Key":"and thread","Fragments":["input"]},{"Key":"thread input","Fragments":["through"]},{"Key":"input through","Fragments":["them."]},{"Key":"through them.","Fragments":["You"]},{"Key":"them. You","Fragments":["could"]},{"Key":"that convoluted","Fragments":["validity"]},{"Key":"convoluted validity","Fragments":["check"]},{"Key":"validity check","Fragments":["in"]},{"Key":"the process.","Fragments":["Maybe","Trying"]},{"Key":"process. Maybe","Fragments":["some"]},{"Key":"some universal","Fragments":["internal"]},{"Key":"universal internal","Fragments":["representation"]},{"Key":"internal representation","Fragments":["like","of"]},{"Key":"representation like","Fragments":["map"]},{"Key":"like map","Fragments":["of"]},{"Key":"a form","Fragments":["like","of","that"]},{"Key":"form like","Fragments":["`{:area"]},{"Key":"like `{:area","Fragments":["code"]},{"Key":"`{:area code","Fragments":["XXX"]},{"Key":"code XXX","Fragments":[":exchange"]},{"Key":"XXX :exchange","Fragments":["XXX"]},{"Key":":exchange XXX","Fragments":["...}`"]},{"Key":"XXX ...}`","Fragments":["could"]},{"Key":"...}` could","Fragments":["make"]},{"Key":"more \"robust\"","Fragments":["-"]},{"Key":"\"robust\" -","Fragments":["but"]},{"Key":"be overdoing","Fragments":["it"]},{"Key":"overdoing it","Fragments":["probably."]},{"Key":"it probably.","Fragments":["I"]},{"Key":"probably. I","Fragments":["don't"]},{"Key":"you gain","Fragments":["with","an"]},{"Key":"gain with","Fragments":["the"]},{"Key":"the reversed","Fragments":["`subs`"]},{"Key":"reversed `subs`","Fragments":["version."]},{"Key":"`subs` version.","Fragments":["Can"]},{"Key":"version. Can","Fragments":["you"]},{"Key":"Well, that's","Fragments":["true,"]},{"Key":"that's true,","Fragments":["I've"]},{"Key":"true, I've","Fragments":["overdone"]},{"Key":"overdone it,","Fragments":["especially"]},{"Key":"it, especially","Fragments":["that"]},{"Key":"especially that","Fragments":["the"]},{"Key":"the requirements","Fragments":["severely","of","and","as","changed"]},{"Key":"requirements severely","Fragments":["limit"]},{"Key":"severely limit","Fragments":["the"]},{"Key":"limit the","Fragments":["possible","scope","visibility","regex","whole"]},{"Key":"the possible","Fragments":["variances","digits","date","combinations"]},{"Key":"possible variances","Fragments":["for"]},{"Key":"variances for","Fragments":["robot"]},{"Key":"for robot","Fragments":["names."]},{"Key":"robot names.","Fragments":["On"]},{"Key":"names. On","Fragments":["the"]},{"Key":"hand, I","Fragments":["could","hate"]},{"Key":"implement some","Fragments":["simple","Clojure"]},{"Key":"some simple","Fragments":["pervlayer-style","conditionals?"]},{"Key":"simple pervlayer-style","Fragments":["lightweight"]},{"Key":"pervlayer-style lightweight","Fragments":["database"]},{"Key":"lightweight database","Fragments":["in"]},{"Key":"database in","Fragments":["place"]},{"Key":" `(repeatedly","Fragments":["(drop-while"]},{"Key":"`(repeatedly (drop-while","Fragments":["..."]},{"Key":"(drop-while ...","Fragments":["(first`"]},{"Key":"... (first`","Fragments":["is"]},{"Key":"(first` is","Fragments":["a"]},{"Key":"great construct","Fragments":[":)"]},{"Key":"construct :)","Fragments":["This"]},{"Key":"me, well","Fragments":["at","done."]},{"Key":"well at","Fragments":["least"]},{"Key":"least what","Fragments":["I"]},{"Key":"I comprehend","Fragments":["of"]},{"Key":"comprehend of","Fragments":["it."]},{"Key":"of it.","Fragments":["You","Many"]},{"Key":"You did","Fragments":["overdo"]},{"Key":"did overdo","Fragments":["it"]},{"Key":"overdo it","Fragments":["a"]},{"Key":"bit, most","Fragments":["people"]},{"Key":"most people","Fragments":["decide"]},{"Key":"people decide","Fragments":["to"]},{"Key":"decide to","Fragments":["live"]},{"Key":"to live","Fragments":["with"]},{"Key":"live with","Fragments":["the"]},{"Key":"the possibility","Fragments":["of","to","of"]},{"Key":"possibility of","Fragments":["random","transcribing","other"]},{"Key":"of random","Fragments":["collisions."]},{"Key":"random collisions.","Fragments":["What"]},{"Key":"collisions. What","Fragments":["if"]},{"Key":"if `*name-tracker*`","Fragments":["had"]},{"Key":"`*name-tracker*` had","Fragments":["to"]},{"Key":"be persistent","Fragments":["between"]},{"Key":"persistent between","Fragments":["JVM"]},{"Key":"between JVM","Fragments":["instances?"]},{"Key":"JVM instances?","Fragments":["\u0026gt;:)"]},{"Key":"be breaking","Fragments":["these"]},{"Key":"breaking these","Fragments":["out"]},{"Key":"these out","Fragments":["into"]},{"Key":"more functions.","Fragments":["Any"]},{"Key":"functions. Any","Fragments":["suggestions?"]},{"Key":"usually omit","Fragments":["the","the"]},{"Key":"omit the","Fragments":["new","`is-`","\"is\"","lambda"]},{"Key":"line before","Fragments":["the"]},{"Key":"the args","Fragments":["when","vector","should","on"]},{"Key":"args when","Fragments":["there"]},{"Key":"when there","Fragments":["is","are","are"]},{"Key":"no docstring.","Fragments":["It's"]},{"Key":"docstring. It's","Fragments":["optional"]},{"Key":"It's optional","Fragments":["though"]},{"Key":"optional though","Fragments":["https://github.com/bbatsov/clojure-style-guide"]},{"Key":"read if","Fragments":["you","the","you"]},{"Key":"logic on","Fragments":["lines"]},{"Key":"lines 7","Fragments":["and"]},{"Key":"7 and","Fragments":["8"]},{"Key":"and 8","Fragments":["into","into"]},{"Key":"8 into","Fragments":["a","one"]},{"Key":"a `anagram?`","Fragments":["function"]},{"Key":"`anagram?` function","Fragments":["and","then"]},{"Key":"and call","Fragments":["that","the","that"]},{"Key":"call that","Fragments":["the","from"]},{"Key":"the from","Fragments":["a"]},{"Key":"This would","Fragments":["read","allow","allow","be","avoid","flip","allow","perhaps","improve","make"]},{"Key":"read easier","Fragments":["if"]},{"Key":"easier if","Fragments":["`parse`","they"]},{"Key":"if `parse`","Fragments":["was"]},{"Key":"`parse` was","Fragments":["a"]},{"Key":"descriptive name.","Fragments":["`parse`"]},{"Key":"name. `parse`","Fragments":["is"]},{"Key":"`parse` is","Fragments":["a"]},{"Key":"pretty generic","Fragments":["name"]},{"Key":"generic name","Fragments":["that"]},{"Key":"doesn't express","Fragments":["the"]},{"Key":"intent. Besides","Fragments":["that"]},{"Key":"I know,","Fragments":["the","it's","I"]},{"Key":"know, the","Fragments":["format"]},{"Key":"the format","Fragments":["string","string","#\\\"[GgCcTtAa]*\\\"\")"]},{"Key":"is out","Fragments":["of","of"]},{"Key":"of control.","Fragments":["It"]},{"Key":"control. It","Fragments":["was"]},{"Key":"was something","Fragments":["of"]},{"Key":"something of","Fragments":["an"]},{"Key":"an experiment","Fragments":["to"]},{"Key":"experiment to","Fragments":["see","practice."]},{"Key":"well the","Fragments":["format"]},{"Key":"string could","Fragments":["express"]},{"Key":"could express","Fragments":["the"]},{"Key":"the (quite","Fragments":["varied)"]},{"Key":"(quite varied)","Fragments":["structure"]},{"Key":"varied) structure","Fragments":["of"]},{"Key":"structure of","Fragments":["the","RNA","the","this","response-for","the"]},{"Key":"shorthand function","Fragments":["notation","`not=`"]},{"Key":"your `divides`","Fragments":["implementation?"]},{"Key":"are 2","Fragments":["different","more"]},{"Key":"2 different","Fragments":["names"]},{"Key":"different names","Fragments":["for"]},{"Key":"for two","Fragments":["very"]},{"Key":"two very","Fragments":["similar"]},{"Key":"very similar","Fragments":["concepts","verses.","to","to"]},{"Key":"similar concepts","Fragments":["-"]},{"Key":"concepts -","Fragments":["frequencies"]},{"Key":"- frequencies","Fragments":["and"]},{"Key":"and canonicalized","Fragments":["strings"]},{"Key":"canonicalized strings","Fragments":["-"]},{"Key":"strings -","Fragments":["and"]},{"Key":"it's quite","Fragments":["hard","handy."]},{"Key":"quite hard","Fragments":["to"]},{"Key":"to follow.","Fragments":["I"]},{"Key":"follow. I","Fragments":["can"]},{"Key":"separate things","Fragments":["by"]},{"Key":"things by","Fragments":["name"]},{"Key":"by name","Fragments":["but"]},{"Key":"but do","Fragments":["you","plan"]},{"Key":"think ```anagram?```","Fragments":["and"]},{"Key":"```anagram?``` and","Fragments":["```anagrams_for```"]},{"Key":"and ```anagrams_for```","Fragments":["would"]},{"Key":"```anagrams_for``` would","Fragments":["be"]},{"Key":"less expressive","Fragments":["if","of","than","as"]},{"Key":"expressive if","Fragments":["you"]},{"Key":"you inlined","Fragments":["the","the"]},{"Key":"inlined the","Fragments":["calls","periods,"]},{"Key":"code also","Fragments":["calls"]},{"Key":"also calls","Fragments":["```lower-case```"]},{"Key":"calls ```lower-case```","Fragments":["when"]},{"Key":"```lower-case``` when","Fragments":["you"]},{"Key":"you canonicalize","Fragments":["and"]},{"Key":"canonicalize and","Fragments":["when"]},{"Key":"for duplicates.","Fragments":["Is"]},{"Key":"duplicates. Is","Fragments":["there"]},{"Key":"an aside,","Fragments":["I'm"]},{"Key":"aside, I'm","Fragments":["fairly"]},{"Key":"fairly inexperienced","Fragments":["with"]},{"Key":"inexperienced with","Fragments":["Clojure"]},{"Key":"is partly","Fragments":["speculation,"]},{"Key":"partly speculation,","Fragments":["but"]},{"Key":"speculation, but","Fragments":["I"]},{"Key":"noticed most","Fragments":["idiomatic"]},{"Key":"idiomatic code","Fragments":["tends"]},{"Key":"code tends","Fragments":["to"]},{"Key":"tends to","Fragments":["be","be"]},{"Key":"pretty dense","Fragments":["with"]},{"Key":"dense with","Fragments":["lots"]},{"Key":"with lots","Fragments":["of"]},{"Key":"lots of","Fragments":["inline","conditional","insightful","duplication","my","things","errors.","trouble"]},{"Key":"of inline","Fragments":["computations"]},{"Key":"inline computations","Fragments":["that"]},{"Key":"computations that","Fragments":["you"]},{"Key":"would usually","Fragments":["abstract","have","turn"]},{"Key":"usually abstract","Fragments":["in"]},{"Key":"abstract in","Fragments":["OO"]},{"Key":"in OO","Fragments":["code.","where"]},{"Key":"OO code.","Fragments":["It's"]},{"Key":"code. It's","Fragments":["hard","a"]},{"Key":"read until","Fragments":["you"]},{"Key":"it but","Fragments":["it's","left","I","I","I"]},{"Key":"it's very","Fragments":["expressive.","hard","readable."]},{"Key":"that's possible","Fragments":["because","with"]},{"Key":"possible because","Fragments":["Clojure"]},{"Key":"because Clojure","Fragments":["has","still"]},{"Key":"simple core","Fragments":["abstraction"]},{"Key":"core abstraction","Fragments":["which"]},{"Key":"abstraction which","Fragments":["simplifies"]},{"Key":"which simplifies","Fragments":["things","things"]},{"Key":"simplifies things","Fragments":["greatly","a"]},{"Key":"things greatly","Fragments":["once"]},{"Key":"greatly once","Fragments":["you"]},{"Key":"are up","Fragments":["to"]},{"Key":"to speed.","Fragments":["OO"]},{"Key":"speed. OO","Fragments":["code,"]},{"Key":"OO code,","Fragments":["on"]},{"Key":"code, on","Fragments":["the"]},{"Key":"hand, relies","Fragments":["on"]},{"Key":"relies on","Fragments":["good"]},{"Key":"on good","Fragments":["abstractions,"]},{"Key":"good abstractions,","Fragments":["naming"]},{"Key":"abstractions, naming","Fragments":["and"]},{"Key":"and typing","Fragments":["in"]},{"Key":"typing in","Fragments":["order"]},{"Key":"to stick","Fragments":["with","with","to","to"]},{"Key":"expressions I","Fragments":["think"]},{"Key":"solution would","Fragments":["benefit","be"]},{"Key":"would benefit","Fragments":["from"]},{"Key":"from giving","Fragments":["them"]},{"Key":"them names.","Fragments":["If"]},{"Key":"names. If","Fragments":["these"]},{"Key":"If these","Fragments":["fairly"]},{"Key":"these fairly","Fragments":["basic"]},{"Key":"fairly basic","Fragments":["regular"]},{"Key":"basic regular","Fragments":["expressions"]},{"Key":"expressions were","Fragments":["given","a"]},{"Key":"were given","Fragments":["descriptive"]},{"Key":"given descriptive","Fragments":["names"]},{"Key":"names it","Fragments":["would"]},{"Key":"would reduce","Fragments":["the","the"]},{"Key":"time required","Fragments":["to"]},{"Key":"required to","Fragments":["read"]},{"Key":"and know","Fragments":["what"]},{"Key":"look a","Fragments":["lot","bit","bit","bit","little","clearer?"]},{"Key":"extract `anagram?`","Fragments":["into"]},{"Key":"`anagram?` into","Fragments":["it's"]},{"Key":"with `sort`","Fragments":["initially"]},{"Key":"`sort` initially","Fragments":["but"]},{"Key":"initially but","Fragments":["one"]},{"Key":"the comments","Fragments":["was","will"]},{"Key":"comments was","Fragments":["\"There's"]},{"Key":"was \"There's","Fragments":["a"]},{"Key":"\"There's a","Fragments":["better"]},{"Key":"better function","Fragments":["in"]},{"Key":"Maps section","Fragments":["of"]},{"Key":"section of","Fragments":["the"]},{"Key":"Clojure cheatsheet","Fragments":["that"]},{"Key":"cheatsheet that","Fragments":["you"]},{"Key":" @osborne","Fragments":["--"]},{"Key":"@osborne --","Fragments":["Thanks"]},{"Key":"-- Thanks","Fragments":["for"]},{"Key":"don't use","Fragments":["clojure","it.","the","it","the","it.","`defmacro`","the"]},{"Key":"use clojure","Fragments":["day"]},{"Key":"clojure day","Fragments":["to"]},{"Key":"day to","Fragments":["day"]},{"Key":"to day","Fragments":["and"]},{"Key":"day and","Fragments":["as","they"]},{"Key":"and as","Fragments":["such"]},{"Key":"as such","Fragments":["I'm"]},{"Key":"such I'm","Fragments":["never"]},{"Key":"I'm never","Fragments":["sure"]},{"Key":"never sure","Fragments":["which"]},{"Key":"sure which","Fragments":["is"]},{"Key":"appropriate one","Fragments":["to"]},{"Key":"gave `\"T\"`","Fragments":["and"]},{"Key":"`\"U\"` names.","Fragments":["Makes"]},{"Key":"names. Makes","Fragments":["the"]},{"Key":"Makes the","Fragments":["transformation"]},{"Key":"transformation more","Fragments":["descriptive."]},{"Key":" Minor","Fragments":["nitpick","nit."]},{"Key":"Minor nitpick","Fragments":["but","--"]},{"Key":"nitpick but","Fragments":["I","the"]},{"Key":"believe using","Fragments":["`:require`"]},{"Key":"`:require` instead","Fragments":["of","of"]},{"Key":"of `:use`","Fragments":["in","which"]},{"Key":"`:use` in","Fragments":["`ns`"]},{"Key":"considered more","Fragments":["idiomatic.","idiomatic.","idiomatic"]},{"Key":"more idiomatic.","Fragments":["Regardless","I","Anyway,","If","I","Whenever"]},{"Key":"idiomatic. Regardless","Fragments":["solution"]},{"Key":"Regardless solution","Fragments":["looks"]},{"Key":"solution looks","Fragments":["good.","nice.","good","great!"]},{"Key":"ugly as","Fragments":["hell..."]},{"Key":"as hell...","Fragments":["but"]},{"Key":"hell... but","Fragments":["I"]},{"Key":"really know","Fragments":["clojure","what","about"]},{"Key":"know clojure","Fragments":["good"]},{"Key":"clojure good","Fragments":["enough"]},{"Key":"ideas what","Fragments":["patterns/functions/idioms"]},{"Key":"what patterns/functions/idioms","Fragments":["I"]},{"Key":"patterns/functions/idioms I","Fragments":["could"]},{"Key":"could apply","Fragments":["to"]},{"Key":"apply to","Fragments":["improve","list"]},{"Key":" Yep,","Fragments":["I","exactly,"]},{"Key":"Yep, I","Fragments":["think"]},{"Key":"much exactly","Fragments":["what","the"]},{"Key":"I ended","Fragments":["up","up","up","up"]},{"Key":"ended up","Fragments":["with...!","with","using","being","using","being","with","not"]},{"Key":"use `s/split`","Fragments":["if"]},{"Key":"`s/split` if","Fragments":["it's"]},{"Key":"it's default","Fragments":["behavior"]},{"Key":"behavior would","Fragments":["be"]},{"Key":"be splitting","Fragments":["at"]},{"Key":"splitting at","Fragments":["whitespace."]},{"Key":"at whitespace.","Fragments":["But"]},{"Key":"whitespace. But","Fragments":["I"]},{"Key":"have do","Fragments":["define"]},{"Key":"do define","Fragments":["a","a"]},{"Key":"regex too,","Fragments":["so"]},{"Key":"too, so","Fragments":["I"]},{"Key":"would end","Fragments":["up","up"]},{"Key":"with `(defn-","Fragments":["split"]},{"Key":"`(defn- split","Fragments":["[string]"]},{"Key":"[string] (s/split","Fragments":["#\"\\W+\""]},{"Key":"(s/split #\"\\W+\"","Fragments":["string))`,"]},{"Key":"#\"\\W+\" string))`,","Fragments":["right?"]},{"Key":"Interesting that","Fragments":["you've","you","you"]},{"Key":"defined your","Fragments":["own"]},{"Key":"own (perfectly","Fragments":["good,"]},{"Key":"(perfectly good,","Fragments":["I'm"]},{"Key":"good, I'm","Fragments":["sure)"]},{"Key":"I'm sure)","Fragments":["split"]},{"Key":"sure) split","Fragments":["function."]},{"Key":"split function.","Fragments":["Worth"]},{"Key":"function. Worth","Fragments":["comparing"]},{"Key":"Worth comparing","Fragments":["against"]},{"Key":"against s/split","Fragments":["maybe?"]},{"Key":"still is","Fragments":["a"]},{"Key":"bit ugly.","Fragments":["Please","However,"]},{"Key":"ugly. Please","Fragments":["pick"]},{"Key":"Please pick","Fragments":["on"]},{"Key":"it until","Fragments":["it's"]},{"Key":"until it's","Fragments":["beautiful"]},{"Key":"it's beautiful","Fragments":[":)"]},{"Key":"Pretty happy","Fragments":["with"]},{"Key":"with this.","Fragments":["Taking","Seems"]},{"Key":"this. Taking","Fragments":["in"]},{"Key":"Taking in","Fragments":["the"]},{"Key":"from previous","Fragments":["nitpickers"]},{"Key":"I'll consider","Fragments":["an"]},{"Key":"consider an","Fragments":["alternative"]},{"Key":"alternative for","Fragments":["`\"default`."]},{"Key":"for `\"default`.","Fragments":["I"]},{"Key":"`\"default`. I","Fragments":["think"]},{"Key":"for Bob","Fragments":["it's"]},{"Key":"Bob it's","Fragments":["about"]},{"Key":"it's about","Fragments":["not"]},{"Key":"a tone","Fragments":["of"]},{"Key":"tone of","Fragments":["interest."]},{"Key":"of interest.","Fragments":["Maybe","As"]},{"Key":"interest. Maybe","Fragments":[":normal?"]},{"Key":"I'd say","Fragments":["it's","go"]},{"Key":"more of","Fragments":["a","the","Clojure's","'thinking","the","the","these","the","the"]},{"Key":"too sure","Fragments":["doing","what"]},{"Key":"sure doing","Fragments":["it"]},{"Key":"`let` feels","Fragments":["very"]},{"Key":"feels very","Fragments":["Clojure"]},{"Key":"very Clojure","Fragments":["like."]},{"Key":"Clojure like.","Fragments":["Could"]},{"Key":"like. Could","Fragments":["it"]},{"Key":"Could it","Fragments":["be"]},{"Key":"be separated","Fragments":["into","into"]},{"Key":"separated into","Fragments":["functions?","functions."]},{"Key":"to @chance","Fragments":["for"]},{"Key":"@chance for","Fragments":["the"]},{"Key":"If you'd","Fragments":["rather","like","like"]},{"Key":"you'd rather","Fragments":["not"]},{"Key":"use `.endsWith`","Fragments":["there"]},{"Key":"`.endsWith` there","Fragments":["is"]},{"Key":"same in","Fragments":["pure"]},{"Key":" @lupe","Fragments":["that's"]},{"Key":"@lupe that's","Fragments":["good"]},{"Key":"that's good","Fragments":["to"]},{"Key":"to know.","Fragments":["Do"]},{"Key":"know. Do","Fragments":["you"]},{"Key":"worth putting","Fragments":["in"]},{"Key":"putting in","Fragments":["a"]},{"Key":"of calls","Fragments":["to","to","to"]},{"Key":"to `declare`","Fragments":["in"]},{"Key":"`declare` in","Fragments":["order"]},{"Key":"define the","Fragments":["functions","values","main","valid","`response-for`","target"]},{"Key":"functions e.g.","Fragments":["in"]},{"Key":"e.g. in","Fragments":["the"]},{"Key":"order they're","Fragments":["called?"]},{"Key":"they're called?","Fragments":["Does"]},{"Key":"called? Does","Fragments":["it"]},{"Key":"just depend","Fragments":["on"]},{"Key":"`defn-` is","Fragments":["preferred"]},{"Key":"is preferred","Fragments":["for","over","over","over","over"]},{"Key":"preferred for","Fragments":["functions"]},{"Key":"for data","Fragments":["structures."]},{"Key":"data structures.","Fragments":["Other"]},{"Key":"structures. Other","Fragments":["than"]},{"Key":"is `declare`","Fragments":["to"]},{"Key":"`declare` to","Fragments":["get"]},{"Key":" @marion","Fragments":["Ah,"]},{"Key":"@marion Ah,","Fragments":["nice"]},{"Key":"Ah, nice","Fragments":["catch!"]},{"Key":"nice catch!","Fragments":["Another"]},{"Key":"catch! Another","Fragments":["comment"]},{"Key":"Another comment","Fragments":["that"]},{"Key":"comment that","Fragments":["was"]},{"Key":"was made","Fragments":["(re"]},{"Key":"made (re","Fragments":["an"]},{"Key":"(re an","Fragments":["Elixir"]},{"Key":"an Elixir","Fragments":["submission)"]},{"Key":"Elixir submission)","Fragments":["and"]},{"Key":"submission) and","Fragments":["applies"]},{"Key":"and applies","Fragments":["here"]},{"Key":"applies here","Fragments":["is"]},{"Key":"that \"is_\"","Fragments":["is"]},{"Key":"\"is_\" is","Fragments":["superfluous"]},{"Key":"is superfluous","Fragments":["on"]},{"Key":"superfluous on","Fragments":["a"]},{"Key":"predicate function.","Fragments":["Also,","One"]},{"Key":"Also, someone","Fragments":["mentioned"]},{"Key":"someone mentioned","Fragments":["having"]},{"Key":"mentioned having","Fragments":["to"]},{"Key":"to scroll","Fragments":["down"]},{"Key":"scroll down","Fragments":["to"]},{"Key":"interface. However,","Fragments":["in"]},{"Key":"However, in","Fragments":["Clojure"]},{"Key":"guess there's","Fragments":["not"]},{"Key":"there's not","Fragments":["much"]},{"Key":"much we","Fragments":["can"]},{"Key":"do about","Fragments":["it"]},{"Key":"since function","Fragments":["definitions"]},{"Key":"function definitions","Fragments":["are","with","with","that","(and","rather","look"]},{"Key":"definitions are","Fragments":["order"]},{"Key":"are order","Fragments":["dependent."]},{"Key":"Updated submission","Fragments":["forthcoming."]},{"Key":"submission forthcoming.","Fragments":["Thanks"]},{"Key":"forthcoming. Thanks","Fragments":["for"]},{"Key":" Clojure's","Fragments":["string"]},{"Key":"Clojure's string","Fragments":["handling"]},{"Key":"string handling","Fragments":["library"]},{"Key":"handling library","Fragments":["clojure.string"]},{"Key":"library clojure.string","Fragments":["has"]},{"Key":"clojure.string has","Fragments":["a","the","functions"]},{"Key":"a replace","Fragments":["function","for"]},{"Key":"replace function","Fragments":["that","that","in","instead","that","(defined"]},{"Key":"may find","Fragments":["helps"]},{"Key":"find helps","Fragments":["you"]},{"Key":"helps you","Fragments":["here","to","express"]},{"Key":"you preemptively","Fragments":["removed"]},{"Key":"preemptively removed","Fragments":["the"]},{"Key":"word from","Fragments":["the"]},{"Key":"You import","Fragments":["`split`,"]},{"Key":"import `split`,","Fragments":["but"]},{"Key":"`split`, but","Fragments":["don't"]},{"Key":"but don't","Fragments":["use"]},{"Key":"not seeing","Fragments":["`check-match`","that."]},{"Key":"seeing `check-match`","Fragments":["used."]},{"Key":"`check-match` used.","Fragments":["Is"]},{"Key":"used. Is","Fragments":["this"]},{"Key":"the separation","Fragments":["of","of","of"]},{"Key":"separation of","Fragments":["classification","message-type","the","private"]},{"Key":"of classification","Fragments":["from"]},{"Key":"classification from","Fragments":["picking"]},{"Key":"from picking","Fragments":["response."]},{"Key":"picking response.","Fragments":["I'm"]},{"Key":"response. I'm","Fragments":["not"]},{"Key":"returning `:default`","Fragments":["from"]},{"Key":"`:default` from","Fragments":["`tone-for`;"]},{"Key":"from `tone-for`;","Fragments":["it"]},{"Key":"`tone-for`; it","Fragments":["doesn't"]},{"Key":"really express","Fragments":["a"]},{"Key":"express a","Fragments":["tone."]},{"Key":"a tone.","Fragments":["I'd"]},{"Key":"tone. I'd","Fragments":["probably"]},{"Key":"like `:unknown`","Fragments":["or"]},{"Key":"`:unknown` or","Fragments":["`:unclassified`."]},{"Key":"Ah there","Fragments":["was,"]},{"Key":"there was,","Fragments":["good"]},{"Key":"was, good","Fragments":["tip."]},{"Key":"There might","Fragments":["be","be","be","be"]},{"Key":"a method","Fragments":["in","with","name","to","and"]},{"Key":"in `clojure.string`","Fragments":["to","for","--"]},{"Key":"`clojure.string` to","Fragments":["`replace`"]},{"Key":"`replace` a","Fragments":["good"]},{"Key":"good chunk","Fragments":["of"]},{"Key":"chunk of","Fragments":["this"]},{"Key":"Thanks @aidan.","Fragments":["I'll"]},{"Key":"@aidan. I'll","Fragments":["think"]},{"Key":"I'll think","Fragments":["about","about"]},{"Key":"about improving","Fragments":["the"]},{"Key":"the `:ignored`","Fragments":["check"]},{"Key":"`:ignored` check","Fragments":["and"]},{"Key":"and correct","Fragments":["the"]},{"Key":"correct the","Fragments":["formatting","`vec`"]},{"Key":"the approach.","Fragments":["Never"]},{"Key":"approach. Never","Fragments":["knew"]},{"Key":"Never knew","Fragments":["you"]},{"Key":"knew you","Fragments":["could"]},{"Key":"do `(map","Fragments":["keyword)`"]},{"Key":"`(map keyword)`","Fragments":["which"]},{"Key":"keyword)` which","Fragments":["made"]},{"Key":"which made","Fragments":["it","me","it"]},{"Key":"it tough","Fragments":["for"]},{"Key":"tough for","Fragments":["me","me..."]},{"Key":"read. There's","Fragments":["a"]},{"Key":"can dig","Fragments":["it,"]},{"Key":"dig it,","Fragments":["and"]},{"Key":"that `tokenize`","Fragments":["is"]},{"Key":"`tokenize` is","Fragments":["useful"]},{"Key":"useful enough","Fragments":["to"]},{"Key":"exported in","Fragments":["a"]},{"Key":"a ns","Fragments":["like"]},{"Key":"ns like","Fragments":["`phrase`,"]},{"Key":"like `phrase`,","Fragments":["so"]},{"Key":"`phrase`, so","Fragments":["I"]},{"Key":"I not","Fragments":["finished","complying","see"]},{"Key":"not finished","Fragments":["the"]},{"Key":"finished the","Fragments":["example"]},{"Key":"last comment","Fragments":[","]},{"Key":"comment ,","Fragments":["sorry"]},{"Key":", sorry","Fragments":["."]},{"Key":"(defn word-count","Fragments":["[phrase]","[the_phrase]","[string]","[msg]","[phrase]"]},{"Key":" (frequencies","Fragments":["(tokenize","(tokenize","(prepare","ws)","(map"]},{"Key":"(frequencies (tokenize","Fragments":["phrase)))","phrase)))"]},{"Key":"necessary \u003ccode\u003e-\u0026gt;\u0026gt;\u003c/code\u003e","Fragments":["in"]},{"Key":"\u003ccode\u003e-\u0026gt;\u0026gt;\u003c/code\u003e in","Fragments":["any"]},{"Key":"any case","Fragments":["of"]},{"Key":"this code.","Fragments":["In",":)","But,","It's","Breaking"]},{"Key":"code. In","Fragments":["Clojure"]},{"Key":"is normally","Fragments":["encounter","better","reserved","written"]},{"Key":"normally encounter","Fragments":["first"]},{"Key":"encounter first","Fragments":["the"]},{"Key":"first the","Fragments":["principal"]},{"Key":"the principal","Fragments":["action"]},{"Key":"principal action","Fragments":["of"]},{"Key":"action of","Fragments":["function"]},{"Key":" @floyd","Fragments":["thanks,"]},{"Key":"@floyd thanks,","Fragments":["`frequencies`"]},{"Key":"thanks, `frequencies`","Fragments":["is"]},{"Key":"just what's","Fragments":["needed!","required."]},{"Key":"Accidental submission!","Fragments":["Please"]},{"Key":"submission! Please","Fragments":["ignore."]},{"Key":"of including","Fragments":["the"]},{"Key":"including the","Fragments":["domain","domain","`...teenth`"]},{"Key":"domain terms","Fragments":["(like","into"]},{"Key":"terms (like","Fragments":["\"yelling\")"]},{"Key":"(like \"yelling\")","Fragments":["into"]},{"Key":"\"yelling\") into","Fragments":["your"]},{"Key":"your code?","Fragments":["Right","Have"]},{"Key":"code? Right","Fragments":["now,"]},{"Key":"Right now,","Fragments":["the"]},{"Key":"now, the","Fragments":["implementation"]},{"Key":"most important","Fragments":["thing,"]},{"Key":"important thing,","Fragments":["but"]},{"Key":"but future","Fragments":["readers"]},{"Key":"read each","Fragments":["call","predicate"]},{"Key":"each call","Fragments":["and"]},{"Key":"call and","Fragments":["have","go","then"]},{"Key":"and have","Fragments":["to","it","some","it","submitted"]},{"Key":"decipher why","Fragments":["each"]},{"Key":"why each","Fragments":["line"]},{"Key":"each line","Fragments":["is","of"]},{"Key":"line is","Fragments":["important.","generally","cleaner","tough"]},{"Key":" `q`","Fragments":["is"]},{"Key":"`q` is","Fragments":["not"]},{"Key":"an expressive","Fragments":["variable"]},{"Key":"expressive variable","Fragments":["name."]},{"Key":"variable name.","Fragments":["Is"]},{"Key":"name. Is","Fragments":["there"]},{"Key":"help explain","Fragments":["what","what"]},{"Key":"what a","Fragments":["user","given","function","bad"]},{"Key":"a user","Fragments":["of","calls"]},{"Key":"user of","Fragments":["this"]},{"Key":"be expected","Fragments":["to"]},{"Key":"expected to","Fragments":["pass","see","see","have:"]},{"Key":"you'd like","Fragments":["to","anything","to"]},{"Key":"shorten your","Fragments":["code"]},{"Key":"a smidge,","Fragments":["look"]},{"Key":"smidge, look","Fragments":["into"]},{"Key":"the `require","Fragments":[":as`"]},{"Key":"`require :as`","Fragments":["feature."]},{"Key":":as` feature.","Fragments":["This"]},{"Key":"feature. This","Fragments":["would"]},{"Key":"would allow","Fragments":["you","something","me","you","you","you","you","you","you","you","you","you","you","me","you","you"]},{"Key":"call something","Fragments":["like"]},{"Key":" All","Fragments":["those","the","uppercase","\"on-planet\"","told,"]},{"Key":"All those","Fragments":["ifs"]},{"Key":"those ifs","Fragments":["do"]},{"Key":"ifs do","Fragments":["not"]},{"Key":"not look","Fragments":["good"]},{"Key":"look good","Fragments":["at"]},{"Key":"a reasonable","Fragments":["algorithm","thing","one"]},{"Key":"reasonable algorithm","Fragments":["for"]},{"Key":"generating a","Fragments":["serial","bunch","better"]},{"Key":"serial number,","Fragments":["but"]},{"Key":"number, but","Fragments":["the"]},{"Key":"exercise specifies","Fragments":["that"]},{"Key":"specifies that","Fragments":["the"]},{"Key":"be random","Fragments":["(not"]},{"Key":"random (not","Fragments":["such"]},{"Key":"(not such","Fragments":["a"]},{"Key":"a sane","Fragments":["thing"]},{"Key":"sane thing","Fragments":["to"]},{"Key":"Great feedback","Fragments":["on"]},{"Key":"using clojure.string","Fragments":["instead"]},{"Key":"clojure.string instead","Fragments":["of","of"]},{"Key":"of java","Fragments":["String"]},{"Key":"java String","Fragments":["interop."]},{"Key":"String interop.","Fragments":["Also"]},{"Key":"interop. Also","Fragments":["switched"]},{"Key":"Also switched","Fragments":["to"]},{"Key":"to #()","Fragments":["form"]},{"Key":"#() form","Fragments":["for"]},{"Key":"Other improvements","Fragments":["could"]},{"Key":"improvements could","Fragments":["include"]},{"Key":"could include","Fragments":["using","earth","earth"]},{"Key":"include using","Fragments":["letfn"]},{"Key":"using letfn","Fragments":["rather"]},{"Key":"letfn rather","Fragments":["than"]},{"Key":"than let","Fragments":["."]},{"Key":" @christina","Fragments":["why"]},{"Key":"@christina why","Fragments":["is"]},{"Key":"it preferred","Fragments":["to"]},{"Key":"use require/refer","Fragments":["over"]},{"Key":"require/refer over","Fragments":["use/only?"]},{"Key":" Brilliant.","Fragments":["Will"]},{"Key":"Brilliant. Will","Fragments":["do."]},{"Key":"Thanks a","Fragments":["lot.","lot","lot","million","lot"]},{"Key":"lot. No,","Fragments":["no"]},{"Key":"No, no","Fragments":["idea"]},{"Key":"idea about","Fragments":["this","that","functional"]},{"Key":"this feature","Fragments":["in","helps"]},{"Key":"feature in","Fragments":["range."]},{"Key":"in range.","Fragments":["I'll"]},{"Key":"range. I'll","Fragments":["try"]},{"Key":"Looks great,","Fragments":["and"]},{"Key":"great, and","Fragments":["it's"]},{"Key":"it's nice","Fragments":["to","and"]},{"Key":"of message-type","Fragments":["and"]},{"Key":"message-type and","Fragments":["responses."]},{"Key":"A lot","Fragments":["of"]},{"Key":"people in","Fragments":["the"]},{"Key":"community prefer","Fragments":["`require`"]},{"Key":"prefer `require`","Fragments":["and"]},{"Key":"`require` and","Fragments":["`:refer`","`:as`"]},{"Key":"`use` `:only`,","Fragments":["and"]},{"Key":"`:only`, and","Fragments":["it's"]},{"Key":"the `use`","Fragments":["or"]},{"Key":"`use` or","Fragments":["`require`"]},{"Key":"or `require`","Fragments":["into"]},{"Key":"`require` into","Fragments":["the"]},{"Key":"`clojure.string/upper-case` and","Fragments":["`clojure.string/trim`"]},{"Key":"and `clojure.string/trim`","Fragments":["rather"]},{"Key":"`clojure.string/trim` rather","Fragments":["than"]},{"Key":"calling Java","Fragments":["methods"]},{"Key":"the `String`","Fragments":["objects."]},{"Key":"should always","Fragments":["put","weigh"]},{"Key":"always put","Fragments":["the"]},{"Key":"the `require`s","Fragments":["in"]},{"Key":"`require`s in","Fragments":["the"]},{"Key":"the `ns`.","Fragments":["You"]},{"Key":"the question,","Fragments":["just"]},{"Key":"question, just","Fragments":["compare"]},{"Key":"just compare","Fragments":["the","the"]},{"Key":"compare the","Fragments":["last","last","variable","variable","string","string","longest","two.","`upper-case`d"]},{"Key":"last character:","Fragments":["`(="]},{"Key":"character: `(=","Fragments":["\\?"]},{"Key":" Generally","Fragments":["a","I've","instead","I"]},{"Key":"Generally a","Fragments":["very"]},{"Key":"nice solution!","Fragments":["Did"]},{"Key":"solution! Did","Fragments":["you"]},{"Key":"can count","Fragments":["down"]},{"Key":"count down","Fragments":["in"]},{"Key":"in `range`","Fragments":["by"]},{"Key":"`range` by","Fragments":["specifying"]},{"Key":"by specifying","Fragments":["a"]},{"Key":"specifying a","Fragments":["step"]},{"Key":"a step","Fragments":["of","in"]},{"Key":"step of","Fragments":["-1?","processing","the","the"]},{"Key":"giving a","Fragments":["name"]},{"Key":"think depending","Fragments":["on"]},{"Key":"depending on","Fragments":["the","the","tests"]},{"Key":"cond order","Fragments":["is"]},{"Key":"order is","Fragments":["better","an","important"]},{"Key":"than making","Fragments":["the"]},{"Key":"the `shouting?`","Fragments":["predicate","condition,"]},{"Key":"`shouting?` predicate","Fragments":["depend","is"]},{"Key":"predicate depend","Fragments":["on"]},{"Key":"on `silence?`.","Fragments":["You're"]},{"Key":"`silence?`. You're","Fragments":["calling"]},{"Key":"You're calling","Fragments":["`silence?`"]},{"Key":"calling `silence?`","Fragments":["twice."]},{"Key":"eliminate one","Fragments":["line"]},{"Key":"line by","Fragments":["just","itself"]},{"Key":"by just","Fragments":["returning","using"]},{"Key":"just returning","Fragments":["the"]},{"Key":"of line","Fragments":["4.","7","11.","16."]},{"Key":"both @talon","Fragments":["and"]},{"Key":"@talon and","Fragments":["@talon."]},{"Key":"of ```(.trim","Fragments":["what-bob-heard)```"]},{"Key":"```(.trim what-bob-heard)```","Fragments":["in"]},{"Key":"what-bob-heard)``` in","Fragments":["```exec-pattern```,"]},{"Key":"in ```exec-pattern```,","Fragments":["couldn't"]},{"Key":"```exec-pattern```, couldn't","Fragments":["you"]},{"Key":"the ```statement```","Fragments":["instead?"]},{"Key":" Small","Fragments":["nitpick","nit,"]},{"Key":"Small nitpick","Fragments":["but"]},{"Key":"the shouting?","Fragments":["function","method"]},{"Key":"shouting? function","Fragments":["would"]},{"Key":"true on","Fragments":["an"]},{"Key":"on an","Fragments":["empty","implementation","empty"]},{"Key":"empty string.","Fragments":["This"]},{"Key":"string. This","Fragments":["won't","is"]},{"Key":"won't happen","Fragments":["here"]},{"Key":"happen here","Fragments":["since"]},{"Key":"since that","Fragments":["is","is"]},{"Key":"is tested","Fragments":["prior","and"]},{"Key":"tested prior","Fragments":["in"]},{"Key":"prior in","Fragments":["the"]},{"Key":"cond but","Fragments":["if"]},{"Key":"used elsewhere","Fragments":["it"]},{"Key":"elsewhere it","Fragments":["may"]},{"Key":"bug. Looks","Fragments":["great"]},{"Key":"you passed","Fragments":["the"]},{"Key":"passed the","Fragments":["tests","base","current","tests,"]},{"Key":"tests without","Fragments":["actually"]},{"Key":"without actually","Fragments":["solving","being"]},{"Key":"actually solving","Fragments":["the"]},{"Key":"solving the","Fragments":["problem."]},{"Key":"problem. It","Fragments":["made"]},{"Key":"made my","Fragments":["day.","codes"]},{"Key":"my day.","Fragments":[":)"]},{"Key":"However you","Fragments":["should"]},{"Key":"into some","Fragments":["of","predicate","output"]},{"Key":"string functions","Fragments":["to","and","or","for","that","that"]},{"Key":"this without","Fragments":["having","\"caching\"","if/case","the","a"]},{"Key":"without having","Fragments":["hard","to","to"]},{"Key":"having hard","Fragments":["coded"]},{"Key":"hard coded","Fragments":["inputs.","verse"]},{"Key":"considered that,","Fragments":["but"]},{"Key":"then the","Fragments":["shouting?","frequencies.","code","cond","value"]},{"Key":"shouting? method","Fragments":["is"]},{"Key":"is then","Fragments":["assuming","called"]},{"Key":"then assuming","Fragments":["that"]},{"Key":"assuming that","Fragments":["silence"]},{"Key":"that silence","Fragments":["has"]},{"Key":"silence has","Fragments":["been"]},{"Key":"been called","Fragments":["and"]},{"Key":"called and","Fragments":["I","what","then"]},{"Key":"I dislike","Fragments":["making"]},{"Key":"dislike making","Fragments":["assumptions"]},{"Key":"making assumptions","Fragments":["like"]},{"Key":"assumptions like","Fragments":["that"]},{"Key":" @moses","Fragments":["something"]},{"Key":"@moses something","Fragments":["like"]},{"Key":"am familiar","Fragments":["with"]},{"Key":"with `replace`,","Fragments":["but"]},{"Key":"`replace`, but","Fragments":["I"]},{"Key":"it's appropriate","Fragments":["there."]},{"Key":"Why require","Fragments":["when"]},{"Key":"require when","Fragments":["you"]},{"Key":"can not","Fragments":["require?"]},{"Key":"not require?","Fragments":[";-)"]},{"Key":"seen any","Fragments":["more"]},{"Key":"any more","Fragments":["complex","concise","expressive,"]},{"Key":"more complex","Fragments":["solutions,","solutions?","than","than","filter","in","and","than"]},{"Key":"complex solutions,","Fragments":["but"]},{"Key":"solutions, but","Fragments":["never"]},{"Key":"but never","Fragments":["underestimate","got"]},{"Key":"never underestimate","Fragments":["people!"]},{"Key":"to spoil","Fragments":["the"]},{"Key":"spoil the","Fragments":["fun"]},{"Key":"the fun","Fragments":["of"]},{"Key":"fun of","Fragments":["naming"]},{"Key":"naming methods","Fragments":["for"]},{"Key":"for you,","Fragments":["but"]},{"Key":"you, but","Fragments":["I"]},{"Key":"will clarify","Fragments":["my"]},{"Key":"clarify my","Fragments":["stance."]},{"Key":"my stance.","Fragments":["I"]},{"Key":"stance. I","Fragments":["see"]},{"Key":"name ```to-rna-1```","Fragments":["as"]},{"Key":"```to-rna-1``` as","Fragments":["lacking"]},{"Key":"as lacking","Fragments":["in"]},{"Key":"lacking in","Fragments":["description."]},{"Key":"in description.","Fragments":["It"]},{"Key":"description. It","Fragments":["doesn't"]},{"Key":"doesn't tell","Fragments":["you"]},{"Key":"tell you","Fragments":["much","what","whats","that","if"]},{"Key":"you much","Fragments":["about"]},{"Key":"function except","Fragments":["that"]},{"Key":"except that","Fragments":["it's"]},{"Key":"it's (probably)","Fragments":["related"]},{"Key":"(probably) related","Fragments":["to"]},{"Key":"related to","Fragments":["```to-rna```.","what","the","mixing","overriding"]},{"Key":"to ```to-rna```.","Fragments":["Is"]},{"Key":"```to-rna```. Is","Fragments":["there"]},{"Key":"that (even","Fragments":["if"]},{"Key":"it's longer)","Fragments":["will"]},{"Key":"longer) will","Fragments":["tell"]},{"Key":"will tell","Fragments":["you"]},{"Key":"you what","Fragments":["the"]},{"Key":"Regarding newlines,","Fragments":["I'd"]},{"Key":"newlines, I'd","Fragments":["still"]},{"Key":"I'd still","Fragments":["support"]},{"Key":"still support","Fragments":["them"]},{"Key":"support them","Fragments":["in"]},{"Key":"this situation","Fragments":["because"]},{"Key":"situation because","Fragments":["they'd"]},{"Key":"because they'd","Fragments":["help"]},{"Key":"they'd help","Fragments":["differentiate,"]},{"Key":"help differentiate,","Fragments":["say,"]},{"Key":"differentiate, say,","Fragments":["the"]},{"Key":"say, the","Fragments":["branches"]},{"Key":"the branches","Fragments":["from","more"]},{"Key":"branches from","Fragments":["the"]},{"Key":"the if","Fragments":["statement.","statement","is","check","statement."]},{"Key":"if statement.","Fragments":["It's"]},{"Key":"statement. It's","Fragments":["a","only"]},{"Key":"of syntactic","Fragments":["overhead"]},{"Key":"syntactic overhead","Fragments":["to"]},{"Key":"overhead to","Fragments":["parse"]},{"Key":"parse parentheses","Fragments":["in"]},{"Key":"your head","Fragments":["(that's"]},{"Key":"head (that's","Fragments":["why"]},{"Key":"(that's why","Fragments":["a"]},{"Key":"why a","Fragments":["good"]},{"Key":"good editor","Fragments":["will"]},{"Key":"editor will","Fragments":["highlight"]},{"Key":"will highlight","Fragments":["matching","the"]},{"Key":"matching parens","Fragments":["for"]},{"Key":"parens for","Fragments":["you),"]},{"Key":"for you),","Fragments":["and"]},{"Key":"you), and","Fragments":["reading"]},{"Key":"and reading","Fragments":["and"]},{"Key":"reading and","Fragments":["understanding","understanding"]},{"Key":"and understanding","Fragments":["can","the"]},{"Key":"understanding can","Fragments":["be"]},{"Key":"be sped","Fragments":["up"]},{"Key":"sped up","Fragments":["significantly","this"]},{"Key":"up significantly","Fragments":["by"]},{"Key":"significantly by","Fragments":["separating","using","using"]},{"Key":"by separating","Fragments":["the"]},{"Key":"separating the","Fragments":["clauses","validation","validation","concerns","concerns","various"]},{"Key":"the clauses","Fragments":["with","of","nicely."]},{"Key":"clauses with","Fragments":["new"]},{"Key":"with new","Fragments":["lines."]},{"Key":"Also, are","Fragments":["you"]},{"Key":" @ibrahim:","Fragments":["Did"]},{"Key":"@ibrahim: Did","Fragments":["anyone"]},{"Key":"Did anyone","Fragments":["write"]},{"Key":"anyone write","Fragments":["more"]},{"Key":"write more","Fragments":["complex","idiomatic"]},{"Key":"complex solutions?","Fragments":[":D"]},{"Key":" Rename","Fragments":["`to-rna-1`"]},{"Key":"Rename `to-rna-1`","Fragments":["to"]},{"Key":"`to-rna-1` to","Fragments":["what?"]},{"Key":"to what?","Fragments":["Can"]},{"Key":"what? Can","Fragments":["you"]},{"Key":"you suggest","Fragments":["a"]},{"Key":"like adding","Fragments":["newlines"]},{"Key":"adding newlines","Fragments":["when"]},{"Key":"newlines when","Fragments":["the"]},{"Key":"the s-exp","Fragments":["depth"]},{"Key":"s-exp depth","Fragments":["and"]},{"Key":"depth and","Fragments":["line"]},{"Key":"and line","Fragments":["length","21"]},{"Key":"line length","Fragments":["are"]},{"Key":"length are","Fragments":["both"]},{"Key":"both this","Fragments":["low."]},{"Key":"love how","Fragments":["succinct","concise"]},{"Key":"how succinct","Fragments":["this"]},{"Key":"succinct this","Fragments":["solution"]},{"Key":"However, I'd","Fragments":["suggest","think"]},{"Key":"you rename","Fragments":["the"]},{"Key":"method ```to-rna-1```,","Fragments":["and"]},{"Key":"```to-rna-1```, and","Fragments":["maybe"]},{"Key":"maybe add","Fragments":["some"]},{"Key":"some newlines","Fragments":["throughout"]},{"Key":"newlines throughout","Fragments":["the"]},{"Key":"throughout the","Fragments":["solution","source"]},{"Key":"help differentiate","Fragments":["different"]},{"Key":"differentiate different","Fragments":["pieces"]},{"Key":"different pieces","Fragments":["of"]},{"Key":" Whitespace","Fragments":["is"]},{"Key":"Whitespace is","Fragments":["free."]},{"Key":"is free.","Fragments":["Let"]},{"Key":"free. Let","Fragments":["it"]},{"Key":"Let it","Fragments":["help"]},{"Key":"it help","Fragments":["you"]},{"Key":" Finally,","Fragments":["someone","as"]},{"Key":"Finally, someone","Fragments":["else"]},{"Key":"else used","Fragments":["`Character/isLowerCase`"]},{"Key":"used `Character/isLowerCase`","Fragments":["just"]},{"Key":"`Character/isLowerCase` just","Fragments":["like"]},{"Key":"just like","Fragments":["[I","in","you"]},{"Key":"like [I","Fragments":["did](http://exercism.io/myfreeweb/clojure/bob)"]},{"Key":"[I did](http://exercism.io/myfreeweb/clojure/bob)","Fragments":[":-)"]},{"Key":" `(not","Fragments":["(some","(=","(=","(=","(=","(=","(empty?"]},{"Key":"`(not (some","Fragments":["pred","...))`"]},{"Key":"(some pred","Fragments":["coll))`"]},{"Key":"pred coll))`","Fragments":["can"]},{"Key":"coll))` can","Fragments":["be"]},{"Key":"be replaced","Fragments":["with","with","with","by","with","with","by"]},{"Key":"with `(not-any?","Fragments":["pred"]},{"Key":"`(not-any? pred","Fragments":["coll)`"]},{"Key":" Doesn't","Fragments":["look"]},{"Key":"Doesn't look","Fragments":["like"]},{"Key":"look like","Fragments":["you're","this","this:","this","off-by-one","this:","this:","this:","a","this:","this","if","`\\A`","this:","if"]},{"Key":"like you're","Fragments":["checking","addressing","computing","no"]},{"Key":"you're checking","Fragments":["for","```s```","against","some"]},{"Key":"for prolonged","Fragments":["silence."]},{"Key":"I always","Fragments":["find","used","assume","vote","think","seem"]},{"Key":"always find","Fragments":["negative"]},{"Key":"find negative","Fragments":["character"]},{"Key":"classes like","Fragments":["`#\"\\W\"`"]},{"Key":"like `#\"\\W\"`","Fragments":["in"]},{"Key":"`#\"\\W\"` in","Fragments":["conjunction"]},{"Key":"in conjunction","Fragments":["with"]},{"Key":"conjunction with","Fragments":["something"]},{"Key":"like `split`","Fragments":["harder"]},{"Key":"`split` harder","Fragments":["to"]},{"Key":"get my","Fragments":["head"]},{"Key":"head around","Fragments":["than","the","how","Clojure."]},{"Key":"around than","Fragments":["a"]},{"Key":"assertion about","Fragments":["the"]},{"Key":"the thing","Fragments":["we're","a","to","to"]},{"Key":"thing we're","Fragments":["looking"]},{"Key":"we're looking","Fragments":["for.","for:"]},{"Key":"looking for.","Fragments":["A"]},{"Key":"for. A","Fragments":["word"]},{"Key":"A word","Fragments":["matches","with"]},{"Key":"word matches","Fragments":["`#\"\\w+\"`,"]},{"Key":"matches `#\"\\w+\"`,","Fragments":["and"]},{"Key":"`#\"\\w+\"`, and","Fragments":["we"]},{"Key":"and we","Fragments":["want","can't"]},{"Key":"we want","Fragments":["to","to"]},{"Key":"match a","Fragments":["sequence","?"]},{"Key":"words. This","Fragments":["might"]},{"Key":"might lead","Fragments":["us"]},{"Key":"lead us","Fragments":["to"]},{"Key":"us to","Fragments":["a"]},{"Key":"this significantly","Fragments":["by"]},{"Key":"using Clojure's","Fragments":["bulit-in","regex"]},{"Key":"Clojure's bulit-in","Fragments":["comparison"]},{"Key":"bulit-in comparison","Fragments":["of"]},{"Key":"comparison of","Fragments":["maps:","the","the"]},{"Key":"(= candidate-freq","Fragments":["word-freq)"]},{"Key":" will","Fragments":["save"]},{"Key":"will save","Fragments":["you"]},{"Key":"save you","Fragments":["a"]},{"Key":"insensitive comparison","Fragments":["between"]},{"Key":"comparison between","Fragments":["word"]},{"Key":"between word","Fragments":["and"]},{"Key":"word and","Fragments":["possibility","lower","doing"]},{"Key":"and possibility","Fragments":["in"]},{"Key":"possibility in","Fragments":["is-anagram"]},{"Key":"in is-anagram","Fragments":["(although","looks"]},{"Key":"is-anagram (although","Fragments":["the"]},{"Key":"(although the","Fragments":["tests"]},{"Key":"tests don't","Fragments":["consider","actually","test","drive","actually","cover","enforce","care"]},{"Key":"don't consider","Fragments":["this,"]},{"Key":"consider this,","Fragments":["I"]},{"Key":"this, I","Fragments":["think","switched","would"]},{"Key":"that's the","Fragments":["intent)","usual","way","same","note,","design"]},{"Key":"Thanks @birdie,","Fragments":["I've"]},{"Key":"@birdie, I've","Fragments":["updated"]},{"Key":"submitted early,","Fragments":["but"]},{"Key":"early, but","Fragments":["some"]},{"Key":"but some","Fragments":["small"]},{"Key":"small nits","Fragments":["anyway..."]},{"Key":"call `str`","Fragments":["when"]},{"Key":"`str` when","Fragments":["you"]},{"Key":"are providing","Fragments":["a"]},{"Key":"providing a","Fragments":["string"]},{"Key":"string literal","Fragments":["-","instead"]},{"Key":"literal -","Fragments":["it's","but"]},{"Key":"it's already","Fragments":["a","a"]},{"Key":"already a","Fragments":["string.","function","multiple","string","big","String.","`?`","map.","map,"]},{"Key":" English-related,","Fragments":["it"]},{"Key":"English-related, it","Fragments":["would"]},{"Key":"more reasonable","Fragments":["to"]},{"Key":"reasonable to","Fragments":["say","me"]},{"Key":"say \"Help","Fragments":["little"]},{"Key":"\"Help little","Fragments":["boys"]},{"Key":"little boys","Fragments":["respond"]},{"Key":"boys respond","Fragments":["to"]},{"Key":"respond to","Fragments":["people\"."]},{"Key":" `say`","Fragments":["is"]},{"Key":"`say` is","Fragments":["a"]},{"Key":"bit strangely","Fragments":["worded,"]},{"Key":"strangely worded,","Fragments":["perhaps"]},{"Key":"worded, perhaps","Fragments":["a"]},{"Key":"name will","Fragments":["be"]},{"Key":"more evident","Fragments":["once"]},{"Key":"evident once","Fragments":["there"]},{"Key":"once there","Fragments":["is"]},{"Key":"Nice! I've","Fragments":["also"]},{"Key":"also gotten","Fragments":["in"]},{"Key":"gotten in","Fragments":["the"]},{"Key":"habit of","Fragments":["reading","typing","documenting"]},{"Key":"of reading","Fragments":["the"]},{"Key":"source for","Fragments":["most"]},{"Key":"for most","Fragments":["of"]},{"Key":"most of","Fragments":["the","the","the","the","the","this","the","my","the","Clojure"]},{"Key":"the library","Fragments":["functions","version","`core.match`?"]},{"Key":"library functions","Fragments":["I"]},{"Key":"look up.","Fragments":["Definitely"]},{"Key":"up. Definitely","Fragments":["helps"]},{"Key":"Definitely helps","Fragments":["you"]},{"Key":"know you're","Fragments":["on","right"]},{"Key":"you're on","Fragments":["the"]},{"Key":" @roy","Fragments":["great"]},{"Key":"@roy great","Fragments":["point."]},{"Key":"think knowing","Fragments":["what"]},{"Key":"knowing what","Fragments":["functionality"]},{"Key":"what functionality","Fragments":["is"]},{"Key":"functionality is","Fragments":["available"]},{"Key":"is available","Fragments":["is","at"]},{"Key":"available is","Fragments":["one"]},{"Key":"my biggest","Fragments":["issues"]},{"Key":"biggest issues","Fragments":["with"]},{"Key":"with learning","Fragments":["Clojure."]},{"Key":"learning Clojure.","Fragments":["There's"]},{"Key":"Clojure. There's","Fragments":["good"]},{"Key":"There's good","Fragments":["docs"]},{"Key":"good docs","Fragments":["and"]},{"Key":"docs and","Fragments":["everything,","thought"]},{"Key":"and everything,","Fragments":["it's"]},{"Key":"everything, it's","Fragments":["just"]},{"Key":"just that","Fragments":["I","the","case."]},{"Key":"don't always","Fragments":["know"]},{"Key":"always know","Fragments":["what"]},{"Key":"look for.","Fragments":["I'm"]},{"Key":"for. I'm","Fragments":["almost"]},{"Key":"I'm almost","Fragments":["certain"]},{"Key":"almost certain","Fragments":["I've"]},{"Key":"certain I've","Fragments":["used"]},{"Key":"used `frequencies`","Fragments":["before,"]},{"Key":"`frequencies` before,","Fragments":["too."]},{"Key":"am glad","Fragments":["to"]},{"Key":"glad to","Fragments":["see","have","hear"]},{"Key":"only real","Fragments":["difference"]},{"Key":"real difference","Fragments":["is"]},{"Key":"difference is","Fragments":["that"]},{"Key":"library version","Fragments":["uses"]},{"Key":"version uses","Fragments":["`transient`."]},{"Key":"Good work!","Fragments":["Writing"]},{"Key":"work! Writing","Fragments":["`count-occurences`"]},{"Key":"Writing `count-occurences`","Fragments":["this"]},{"Key":"`count-occurences` this","Fragments":["way"]},{"Key":"way was","Fragments":["a"]},{"Key":"great learning","Fragments":["exercise,","experience."]},{"Key":"learning exercise,","Fragments":["but","but"]},{"Key":"out [frequencies](http://clojuredocs.org/clojure_core/clojure.core/frequencies),","Fragments":["it'll"]},{"Key":"[frequencies](http://clojuredocs.org/clojure_core/clojure.core/frequencies), it'll","Fragments":["let"]},{"Key":"it'll let","Fragments":["you"]},{"Key":"you tighten","Fragments":["things"]},{"Key":"tighten things","Fragments":["up."]},{"Key":"struggled with","Fragments":["line","the"]},{"Key":"with line","Fragments":["9"]},{"Key":"line 9","Fragments":["a","to","-","becomes"]},{"Key":"9 a","Fragments":["bit."]},{"Key":"really wanted","Fragments":["to","to"]},{"Key":"pull that","Fragments":["function"]},{"Key":"own define,","Fragments":["but"]},{"Key":"define, but","Fragments":["the"]},{"Key":"value `{}`","Fragments":["is"]},{"Key":"`{}` is","Fragments":["closely"]},{"Key":"is closely","Fragments":["coupled"]},{"Key":"closely coupled","Fragments":["with"]},{"Key":"coupled with","Fragments":["it."]},{"Key":"It didn't","Fragments":["really","make"]},{"Key":"really make","Fragments":["sense","things","much"]},{"Key":"break them","Fragments":["up."]},{"Key":"Looks good!","Fragments":["One","Not","There's"]},{"Key":"small issue:","Fragments":["the"]},{"Key":"issue: the","Fragments":["`frequencies`"]},{"Key":"`frequencies` line","Fragments":["should"]},{"Key":"indented more","Fragments":["than"]},{"Key":"previous line","Fragments":["to","with"]},{"Key":"is contained","Fragments":["within","in","in"]},{"Key":"contained within","Fragments":["the"]},{"Key":"As always,","Fragments":["I"]},{"Key":"always, I","Fragments":["appreciate"]},{"Key":"your input,","Fragments":["@loy."]},{"Key":"An internal","Fragments":["representation"]},{"Key":"number may","Fragments":["be"]},{"Key":"good idea.","Fragments":["I","I'll"]},{"Key":"idea. I","Fragments":["will","just","think"]},{"Key":"will consider","Fragments":["it.","it","doing"]},{"Key":"consider it.","Fragments":["At"]},{"Key":"it. At","Fragments":["the"]},{"Key":"moment I","Fragments":["have","find"]},{"Key":"do, so","Fragments":["it"]},{"Key":"The `rev-subs`","Fragments":["function"]},{"Key":"`rev-subs` function","Fragments":["results"]},{"Key":"function results","Fragments":["from"]},{"Key":"results from","Fragments":["thinking"]},{"Key":"from thinking","Fragments":["about"]},{"Key":"last ten","Fragments":["from"]},{"Key":"ten from","Fragments":["either"]},{"Key":"from either","Fragments":["ten"]},{"Key":"either ten","Fragments":["or"]},{"Key":"ten or","Fragments":["eleven"]},{"Key":"or eleven","Fragments":["digits."]},{"Key":"eleven digits.","Fragments":["I"]},{"Key":"digits. I","Fragments":["would"]},{"Key":"would need","Fragments":["a","to","to","to","to"]},{"Key":"a conditional","Fragments":["every","with","function","expression"]},{"Key":"conditional every","Fragments":["time"]},{"Key":"that, would","Fragments":["I"]},{"Key":"would I","Fragments":["not?"]},{"Key":"the evaluation","Fragments":["of"]},{"Key":"evaluation of","Fragments":["the","lazy","a"]},{"Key":"phrase from","Fragments":["the"]},{"Key":"response each","Fragments":["type"]},{"Key":"of phrase","Fragments":["should"]},{"Key":"phrase should","Fragments":["receive,"]},{"Key":"should receive,","Fragments":["which"]},{"Key":"receive, which","Fragments":["is"]},{"Key":"is response-for","Fragments":["function"]},{"Key":"response-for function","Fragments":["first","is"]},{"Key":"function first","Fragments":["tries"]},{"Key":"first tries","Fragments":["to"]},{"Key":"tries to","Fragments":["determine"]},{"Key":"to determine","Fragments":["the","the","if","what","patterns","whether","if","it.","whether"]},{"Key":"determine the","Fragments":["type","response."]},{"Key":"of phrase,","Fragments":["then"]},{"Key":"phrase, then","Fragments":["uses"]},{"Key":"then uses","Fragments":["the"]},{"Key":"statement to","Fragments":["determine","be","make"]},{"Key":"Thanks @vicky,","Fragments":["I"]},{"Key":"@vicky, I","Fragments":["like"]},{"Key":"reads using","Fragments":["```re-seq```"]},{"Key":"using ```re-seq```","Fragments":["instead"]},{"Key":"```re-seq``` instead","Fragments":["of"]},{"Key":"seen some","Fragments":["articles"]},{"Key":"some articles","Fragments":["recommending"]},{"Key":"articles recommending","Fragments":[":require/:refer"]},{"Key":"recommending :require/:refer","Fragments":["instead"]},{"Key":":require/:refer instead","Fragments":["of"]},{"Key":"of :use","Fragments":["and"]},{"Key":":use and","Fragments":["googling","considered","it's"]},{"Key":"and googling","Fragments":["a"]},{"Key":"googling a","Fragments":["bit"]},{"Key":"bit I","Fragments":["found"]},{"Key":"found these","Fragments":["articles"]},{"Key":"these articles","Fragments":["that"]},{"Key":"articles that","Fragments":["may"]},{"Key":"help understand","Fragments":["the"]},{"Key":"It's generally","Fragments":["considered","preferred"]},{"Key":"considered good","Fragments":["practice"]},{"Key":"explicitly require","Fragments":["or"]},{"Key":"require or","Fragments":["import"]},{"Key":"or import","Fragments":["modules","particular"]},{"Key":"import modules","Fragments":["in"]},{"Key":"modules in","Fragments":["the"]},{"Key":"the `(ns","Fragments":["…)`,"]},{"Key":"`(ns …)`,","Fragments":["check"]},{"Key":"…)`, check","Fragments":["out"]},{"Key":"use `:keywords`","Fragments":["instead"]},{"Key":"`:keywords` instead","Fragments":["of"]},{"Key":"of strings","Fragments":["for","twice.","from"]},{"Key":"strings for","Fragments":["your","your","the","the"]},{"Key":"your classification,","Fragments":["they're"]},{"Key":"classification, they're","Fragments":["similar"]},{"Key":"they're similar","Fragments":["to"]},{"Key":"to atoms","Fragments":["in"]},{"Key":"atoms in","Fragments":["Erlang.","the"]},{"Key":"more common","Fragments":["to","than","to","in","than"]},{"Key":"use `nil`","Fragments":["rather"]},{"Key":"`nil` rather","Fragments":["than","than"]},{"Key":"than \"unknown\"","Fragments":["for"]},{"Key":"\"unknown\" for","Fragments":["your"]},{"Key":"your placeholder.","Fragments":["Since"]},{"Key":"placeholder. Since","Fragments":["map"]},{"Key":"Since map","Fragments":["is"]},{"Key":"is lazy","Fragments":["you","which"]},{"Key":"lazy you","Fragments":["could"]},{"Key":"make inspect-phrase","Fragments":["a"]},{"Key":"inspect-phrase a","Fragments":["lot"]},{"Key":"lot shorter","Fragments":["without"]},{"Key":"shorter without","Fragments":["any"]},{"Key":"any explicit","Fragments":["recursion."]},{"Key":"explicit recursion.","Fragments":["Try"]},{"Key":"recursion. Try","Fragments":["implementing"]},{"Key":"Try implementing","Fragments":["it"]},{"Key":"implementing it","Fragments":["with"]},{"Key":"just `map`,","Fragments":["`remove`,"]},{"Key":"`map`, `remove`,","Fragments":["and"]},{"Key":"`remove`, and","Fragments":["`first`."]},{"Key":"and `first`.","Fragments":["Explicit"]},{"Key":"`first`. Explicit","Fragments":["recursion"]},{"Key":"Explicit recursion","Fragments":["is"]},{"Key":"bad in","Fragments":["clojure"]},{"Key":"clojure because","Fragments":["there's"]},{"Key":"no tail-call","Fragments":["optimization"]},{"Key":"tail-call optimization","Fragments":["(you"]},{"Key":"optimization (you","Fragments":["can"]},{"Key":"`recur` special","Fragments":["form"]},{"Key":" `(first","Fragments":["(reverse"]},{"Key":"`(first (reverse","Fragments":["xs))`"]},{"Key":"(reverse xs))`","Fragments":["is"]},{"Key":"xs))` is","Fragments":["equivalent"]},{"Key":"equivalent to","Fragments":["`(last","`(or","`[^\\w]`!","`apply","using","the","the","`(reduce","that","#(println"]},{"Key":"to `(last","Fragments":["xs)`","s)`.","st)`."]},{"Key":"feel dirty","Fragments":["after","reaching"]},{"Key":"dirty after","Fragments":["submitting"]},{"Key":"after submitting","Fragments":["this."]},{"Key":"submitting this.","Fragments":["I"]},{"Key":"had trouble","Fragments":["making","with"]},{"Key":"trouble making","Fragments":["anything","that"]},{"Key":"making anything","Fragments":["work,"]},{"Key":"anything work,","Fragments":["let"]},{"Key":"work, let","Fragments":["alone"]},{"Key":"alone an","Fragments":["elegant"]},{"Key":"an elegant","Fragments":["solution.","way"]},{"Key":"the map-inside-a-map,","Fragments":["which"]},{"Key":"map-inside-a-map, which","Fragments":["the"]},{"Key":"which the","Fragments":["current","checks","candidate"]},{"Key":"current solution","Fragments":["depends","for","is"]},{"Key":"solution depends","Fragments":["on."]},{"Key":"depends on.","Fragments":["Would"]},{"Key":"on. Would","Fragments":["very"]},{"Key":"Would very","Fragments":["much"]},{"Key":"much appreciate","Fragments":["any"]},{"Key":"appreciate any","Fragments":["hints","feedback"]},{"Key":"any hints","Fragments":["that"]},{"Key":"hints that","Fragments":["would"]},{"Key":"would steer","Fragments":["me"]},{"Key":"steer me","Fragments":["in"]},{"Key":"me in","Fragments":["a","general,","the","the"]},{"Key":"`last` rather","Fragments":["than"]},{"Key":"regular expression?","Fragments":["(otherwise"]},{"Key":"expression? (otherwise","Fragments":["I"]},{"Key":"(otherwise I","Fragments":["agreed"]},{"Key":"other nits","Fragments":["-"]},{"Key":"nits -","Fragments":["nice.)"]},{"Key":"however you","Fragments":["could"]},{"Key":"every candidate","Fragments":["for","for","for","for","for","for"]},{"Key":"candidate for","Fragments":["anagram.","anagram.","anagram.","refactor!","anagram.","anagram.","anagram."]},{"Key":"for anagram.","Fragments":["Also,"]},{"Key":"anagram. Also,","Fragments":["please"]},{"Key":"Also, please","Fragments":["keep"]},{"Key":"if word","Fragments":["is"]},{"Key":"exactly the","Fragments":["same,","same","same","same"]},{"Key":"not technically","Fragments":["an"]},{"Key":"technically an","Fragments":["anagram"]},{"Key":"anagram (test","Fragments":["suite"]},{"Key":"(test suite","Fragments":["probably"]},{"Key":"suite probably","Fragments":["lacks"]},{"Key":"probably lacks","Fragments":["this"]},{"Key":"lacks this","Fragments":["particular"]},{"Key":" Coming","Fragments":["back"]},{"Key":"Coming back","Fragments":["to"]},{"Key":"my original","Fragments":["advice,","iteration,","submission","solution."]},{"Key":"original advice,","Fragments":["I"]},{"Key":"advice, I","Fragments":["actually","broke"]},{"Key":"actually cancel","Fragments":["my"]},{"Key":"cancel my","Fragments":["remark"]},{"Key":"my remark","Fragments":["about"]},{"Key":"`frequencies` being","Fragments":["more"]},{"Key":"than `sort`","Fragments":["in"]},{"Key":"`sort` in","Fragments":["that"]},{"Key":"particular use.","Fragments":["A"]},{"Key":"use. A","Fragments":["small"]},{"Key":"A small","Fragments":["benchmark","optimization:"]},{"Key":"small benchmark","Fragments":["I"]},{"Key":"benchmark I","Fragments":["did"]},{"Key":"did some","Fragments":["time","more","quick","refactoring."]},{"Key":"time ago","Fragments":["proved"]},{"Key":"ago proved","Fragments":["actually"]},{"Key":"proved actually","Fragments":["slightly"]},{"Key":"actually slightly","Fragments":["otherwise:"]},{"Key":"slightly otherwise:","Fragments":["https://gist.github.com/zoldar/6425609"]},{"Key":"not happy","Fragments":["with","about:","with","to","with","with","with"]},{"Key":"with lines","Fragments":["45"]},{"Key":"lines 45","Fragments":["and"]},{"Key":"45 and","Fragments":["53."]},{"Key":"and 53.","Fragments":["The"]},{"Key":"53. The","Fragments":["`ns-resolve`"]},{"Key":"The `ns-resolve`","Fragments":["is"]},{"Key":"`ns-resolve` is","Fragments":["being"]},{"Key":"being evaluated","Fragments":["on"]},{"Key":"evaluated on","Fragments":["every","every"]},{"Key":" @cristian:","Fragments":["By"]},{"Key":"@cristian: By","Fragments":["the"]},{"Key":"By the","Fragments":["way,","way,","way,","way,","way,"]},{"Key":"the way,","Fragments":["thanks","`-\u003e`","you","do","sets","lein","and"]},{"Key":"way, thanks","Fragments":["a"]},{"Key":"thanks a","Fragments":["ton"]},{"Key":"a ton","Fragments":["for","of"]},{"Key":"ton for","Fragments":["your"]},{"Key":"comments. They","Fragments":["are"]},{"Key":"They are","Fragments":["really","treated","'exchange'","implemented","a","used","all"]},{"Key":"of whitespace,","Fragments":["how"]},{"Key":"whitespace, how","Fragments":["about"]},{"Key":"about putting","Fragments":["`cond`","the"]},{"Key":"putting `cond`","Fragments":["on"]},{"Key":"`cond` on","Fragments":["it's"]},{"Key":"you -","Fragments":["much"]},{"Key":"- much","Fragments":["easier"]},{"Key":"easier on","Fragments":["the"]},{"Key":"\u003e put","Fragments":["the"]},{"Key":"the requires","Fragments":["in"]},{"Key":"requires in","Fragments":["the"]},{"Key":"\u003e just","Fragments":["compare"]},{"Key":"\u003e including","Fragments":["the"]},{"Key":"terms into","Fragments":["your"]},{"Key":"\u003e a","Fragments":["better"]},{"Key":"\u003e require","Fragments":[":as"]},{"Key":"The composition","Fragments":["of"]},{"Key":"and trim","Fragments":["works,"]},{"Key":"trim works,","Fragments":["but"]},{"Key":"but clojure.string/blank?","Fragments":["might"]},{"Key":"you've done","Fragments":["with","is","in","with","here","already,"]},{"Key":"with `apply`","Fragments":["on"]},{"Key":"`apply` on","Fragments":["line"]},{"Key":"line 7,","Fragments":["which"]},{"Key":"7, which","Fragments":["allows"]},{"Key":"which allows","Fragments":["you","for"]},{"Key":"remove some","Fragments":["of","redundancy","duplication","duplication."]},{"Key":"the duplication","Fragments":["of","of","of","caused","in","there."]},{"Key":"duplication of","Fragments":["passing","nucleotides","`(/","the","entering"]},{"Key":"of passing","Fragments":["the","an","sequences","the"]},{"Key":"passing the","Fragments":["parameter.","char","same","arguments"]},{"Key":"a rogue","Fragments":["paren","paren"]},{"Key":"rogue paren","Fragments":["slipped","slipped"]},{"Key":"paren slipped","Fragments":["from","from"]},{"Key":"slipped from","Fragments":["line","line"]},{"Key":"from line","Fragments":["17","17","39,"]},{"Key":"line 17","Fragments":["to","to"]},{"Key":"17 to","Fragments":["line","line"]},{"Key":"line 18.","Fragments":[":-)",":-)"]},{"Key":"Clojure keywords","Fragments":["tend"]},{"Key":"keywords tend","Fragments":["to"]},{"Key":"have one","Fragments":["colon:","predicate","suggestion:","nit"]},{"Key":"one colon:","Fragments":["`:question`"]},{"Key":"colon: `:question`","Fragments":["vs"]},{"Key":"`:question` vs","Fragments":["`::question`"]},{"Key":"can streamline","Fragments":["your"]},{"Key":"streamline your","Fragments":["`-check`"]},{"Key":"your `-check`","Fragments":["methods"]},{"Key":"`-check` methods","Fragments":["as"]},{"Key":"methods as","Fragments":["`if`","opposed","much."]},{"Key":"as `if`","Fragments":["will"]},{"Key":"`if` will","Fragments":["implicitly"]},{"Key":"will implicitly","Fragments":["return"]},{"Key":"implicitly return","Fragments":["nil"]},{"Key":"nil for","Fragments":["else."]},{"Key":"also reduce","Fragments":["some"]},{"Key":"reduce some","Fragments":["typing"]},{"Key":"some typing","Fragments":["by"]},{"Key":"typing by","Fragments":["using"]},{"Key":"the `:as`","Fragments":["option"]},{"Key":"`:as` option","Fragments":["for"]},{"Key":"option for","Fragments":["require:"]},{"Key":"you give","Fragments":["`s`","me","an","it","me","some"]},{"Key":"give `s`","Fragments":["a"]},{"Key":"`s` a","Fragments":["better"]},{"Key":"name, one","Fragments":["that"]},{"Key":"that explains","Fragments":["what","that"]},{"Key":"explains what","Fragments":["it"]},{"Key":"is or","Fragments":["what"]},{"Key":"or what","Fragments":["it"]},{"Key":"You have","Fragments":["a","one","a","an","already","a","a"]},{"Key":"few implementation","Fragments":["comments"]},{"Key":"implementation comments","Fragments":["(lines"]},{"Key":"comments (lines","Fragments":["15,"]},{"Key":"(lines 15,","Fragments":["18,"]},{"Key":"15, 18,","Fragments":["20)."]},{"Key":"18, 20).","Fragments":["Is"]},{"Key":"20). Is","Fragments":["there"]},{"Key":"there some","Fragments":["way","way"]},{"Key":"some way","Fragments":["that","of","to"]},{"Key":"can encode","Fragments":["those"]},{"Key":"encode those","Fragments":["comments"]},{"Key":"those comments","Fragments":["into"]},{"Key":"comments into","Fragments":["the"]},{"Key":"the code?","Fragments":["If"]},{"Key":"code? If","Fragments":["you"]},{"Key":"you can,","Fragments":["the"]},{"Key":"can, the","Fragments":["\"dead\""]},{"Key":"the \"dead\"","Fragments":["comments"]},{"Key":"\"dead\" comments","Fragments":["will"]},{"Key":"comments will","Fragments":["become","help","really"]},{"Key":"become \"living\"","Fragments":["code."]},{"Key":"\"living\" code.","Fragments":["They"]},{"Key":"code. They","Fragments":["will"]},{"Key":"They will","Fragments":["still"]},{"Key":"will still","Fragments":["help","make","allow","have"]},{"Key":"still help","Fragments":["explain"]},{"Key":"but have","Fragments":["less"]},{"Key":"have less","Fragments":["chance","pure"]},{"Key":"less chance","Fragments":["of"]},{"Key":"of becoming","Fragments":["disconnected"]},{"Key":"becoming disconnected","Fragments":["or"]},{"Key":"disconnected or","Fragments":["incorrect."]},{"Key":"that :require/:refer","Fragments":["is"]},{"Key":":require/:refer is","Fragments":["preferred"]},{"Key":"preferred over","Fragments":[":user/:only.",":use",":use.",":use","`use`"]},{"Key":"over :user/:only.","Fragments":["See"]},{"Key":":user/:only. See","Fragments":["these"]},{"Key":"See these","Fragments":["links"]},{"Key":"these links","Fragments":["for"]},{"Key":"links for","Fragments":["more"]},{"Key":"Pretty minor,","Fragments":["but,"]},{"Key":"minor, but,","Fragments":["you"]},{"Key":"but, you","Fragments":["don't"]},{"Key":"with `(into","Fragments":["(sorted-map)"]},{"Key":"`(into (sorted-map)","Fragments":["db-names-sorted)`.","your-map)`."]},{"Key":"(sorted-map) db-names-sorted)`.","Fragments":["Not"]},{"Key":"db-names-sorted)`. Not","Fragments":["that"]},{"Key":"cleaner than","Fragments":["what","take/drop","before"]},{"Key":"1. seq:","Fragments":["My"]},{"Key":"seq: My","Fragments":["first"]},{"Key":"My first","Fragments":["try","take","draft","ever","pass","attempt"]},{"Key":"try was","Fragments":["without"]},{"Key":"was without","Fragments":["seq,"]},{"Key":"without seq,","Fragments":["but"]},{"Key":"seq, but","Fragments":["I"]},{"Key":"a mistake","Fragments":["with","submission.","like"]},{"Key":"mistake with","Fragments":["the"]},{"Key":"anonymous function,","Fragments":["that","and"]},{"Key":"that lead","Fragments":["me"]},{"Key":"lead me","Fragments":["to"]},{"Key":"use directly","Fragments":["maps"]},{"Key":"directly maps","Fragments":["with"]},{"Key":"maps with","Fragments":["map","letter"]},{"Key":"with map","Fragments":["function.","too."]},{"Key":" 2:","Fragments":["into"]},{"Key":"2: into","Fragments":["(sorted-map)"]},{"Key":"into (sorted-map)","Fragments":["db-names-sorted:"]},{"Key":"(sorted-map) db-names-sorted:","Fragments":["nice"]},{"Key":"db-names-sorted: nice","Fragments":["trick!"]},{"Key":"need line","Fragments":["10."]},{"Key":"line 10.","Fragments":["In"]},{"Key":"10. In","Fragments":["fact,"]},{"Key":"In fact,","Fragments":["I","that","I"]},{"Key":"fact, I","Fragments":["have","just"]},{"Key":"idea how","Fragments":["it","errors"]},{"Key":"works with","Fragments":["that","sequences,","substrings.","multiple","any","any"]},{"Key":" thanks,","Fragments":["a"]},{"Key":"thanks, a","Fragments":["wrong"]},{"Key":"a wrong","Fragments":["copy-paste"]},{"Key":"wrong copy-paste","Fragments":["effect"]},{"Key":"copy-paste effect","Fragments":[":)"]},{"Key":"\u003e It","Fragments":["looks"]},{"Key":" 6:","Fragments":["consider"]},{"Key":"6: consider","Fragments":["using"]},{"Key":"using str.blank?","Fragments":["instead"]},{"Key":"str.blank? instead","Fragments":["of"]},{"Key":" 7:","Fragments":["consider"]},{"Key":"7: consider","Fragments":["using"]},{"Key":"using (=","Fragments":["msg"]},{"Key":"(= msg","Fragments":["(upper-case","(upper-case"]},{"Key":"msg (upper-case","Fragments":["msg))","msg))"]},{"Key":" 8:","Fragments":["consider"]},{"Key":"8: consider","Fragments":["using"]},{"Key":"have found","Fragments":["the","the","there","is"]},{"Key":"be quite","Fragments":["confusing"]},{"Key":"quite confusing","Fragments":["and"]},{"Key":"confusing and","Fragments":["opted"]},{"Key":"and opted","Fragments":["for"]},{"Key":"opted for","Fragments":["the","code"]},{"Key":"get working","Fragments":[":-)"]},{"Key":"clojure.string/blank? instead","Fragments":["of","of","of"]},{"Key":"reduce code","Fragments":["size"]},{"Key":"code size","Fragments":["even"]},{"Key":"size even","Fragments":["by"]},{"Key":"even by","Fragments":["a"]},{"Key":"the suggestion","Fragments":["about","of","of","to"]},{"Key":"suggestion about","Fragments":["the"]},{"Key":"if statement","Fragments":["to","instead","should"]},{"Key":"keyword usage","Fragments":["though."]},{"Key":"usage though.","Fragments":["From"]},{"Key":"though. From","Fragments":["what"]},{"Key":"I understand,","Fragments":["the"]},{"Key":"understand, the","Fragments":["::"]},{"Key":"the ::","Fragments":["restricts"]},{"Key":":: restricts","Fragments":["the"]},{"Key":"restricts the","Fragments":["keyword"]},{"Key":"keyword to","Fragments":["namespace"]},{"Key":"to namespace","Fragments":["I","clojure.string","join"]},{"Key":"namespace I","Fragments":["am"]},{"Key":"am using,","Fragments":["avoiding"]},{"Key":"using, avoiding","Fragments":["clashes"]},{"Key":"avoiding clashes","Fragments":["with"]},{"Key":"clashes with","Fragments":["potentially"]},{"Key":"with potentially","Fragments":["other"]},{"Key":"potentially other","Fragments":["namespaces."]},{"Key":"found this","Fragments":["helpful","great"]},{"Key":"this helpful","Fragments":["for"]},{"Key":"helpful for","Fragments":["sorting"]},{"Key":"for sorting","Fragments":["out"]},{"Key":"out idiomatic","Fragments":["use"]},{"Key":"idiomatic use","Fragments":["of"]},{"Key":"of `ns`","Fragments":["(and"]},{"Key":"`ns` (and","Fragments":["not"]},{"Key":"(and not","Fragments":["`use`)","sorted)."]},{"Key":"not `use`)","Fragments":["http://stackoverflow.com/questions/10358149/in-clojure-1-4-what-is-the-use-of-refer-within-require"]},{"Key":"out `blank?`","Fragments":["to"]},{"Key":"`blank?` to","Fragments":["save","a"]},{"Key":"save a","Fragments":["few","paren."]},{"Key":"few chars","Fragments":["on"]},{"Key":"chars on","Fragments":["line"]},{"Key":" Most","Fragments":["people","people"]},{"Key":"Most people","Fragments":["recommend","have","I"]},{"Key":"people recommend","Fragments":["extracting"]},{"Key":"recommend extracting","Fragments":["the"]},{"Key":"into their","Fragments":["own","own","own","own","own","own"]},{"Key":"own well-named","Fragments":["functions."]},{"Key":"well-named functions.","Fragments":["The"]},{"Key":"functions. The","Fragments":["motivation"]},{"Key":"The motivation","Fragments":["is"]},{"Key":"motivation is","Fragments":["that"]},{"Key":"year from","Fragments":["now"]},{"Key":"from now","Fragments":["you"]},{"Key":"now you","Fragments":["don't"]},{"Key":"to wonder","Fragments":["what"]},{"Key":"`(= question","Fragments":["(upper-case"]},{"Key":"question (upper-case","Fragments":["question))`"]},{"Key":" ohh","Fragments":["noes,"]},{"Key":"ohh noes,","Fragments":["newline"]},{"Key":"noes, newline","Fragments":["fail"]},{"Key":"good. Personally","Fragments":["I'd"]},{"Key":"Personally I'd","Fragments":["prefer"]},{"Key":"I'd prefer","Fragments":["using","not","`(biginteger"]},{"Key":"the `-\u003e\u003e`","Fragments":["operator","macro,","macro"]},{"Key":"`-\u003e\u003e` operator","Fragments":["in"]},{"Key":"operator in","Fragments":["`sing`"]},{"Key":"`sing` over","Fragments":["the"]},{"Key":"the cascade","Fragments":["of"]},{"Key":"cascade of","Fragments":["values"]},{"Key":"values inside","Fragments":["of"]},{"Key":"Good feedback,","Fragments":["dumben."]},{"Key":"feedback, dumben.","Fragments":["I've"]},{"Key":"dumben. I've","Fragments":["incorporated"]},{"Key":"I've incorporated","Fragments":["those"]},{"Key":"incorporated those","Fragments":["suggestions"]},{"Key":"those suggestions","Fragments":["in"]},{"Key":"I'd change","Fragments":["is"]},{"Key":"that `is-all-uppercase?`","Fragments":["says"]},{"Key":"`is-all-uppercase?` says","Fragments":["too"]},{"Key":"says too","Fragments":["much"]},{"Key":"implementation and","Fragments":["not"]},{"Key":"the intention.","Fragments":["I'd"]},{"Key":"intention. I'd","Fragments":["go"]},{"Key":"I'd go","Fragments":["with","first"]},{"Key":"Also purists","Fragments":["would"]},{"Key":"purists would","Fragments":["prefer"]},{"Key":"prefer `(=","Fragments":["\\?"]},{"Key":"(last string))`","Fragments":["over"]},{"Key":"string))` over","Fragments":["using"]},{"Key":"over using","Fragments":["`.endsWith`."]},{"Key":" Finally","Fragments":["I'd","got"]},{"Key":"Finally I'd","Fragments":["rename"]},{"Key":"I'd rename","Fragments":["the"]},{"Key":"parameter on","Fragments":["line"]},{"Key":"9 to","Fragments":["`sentence`"]},{"Key":"to `sentence`","Fragments":["or"]},{"Key":"`sentence` or","Fragments":["`phrase`"]},{"Key":"or `phrase`","Fragments":["since"]},{"Key":"`phrase` since","Fragments":["only"]},{"Key":"since only","Fragments":["some"]},{"Key":"only some","Fragments":["of"]},{"Key":" two","Fragments":["little"]},{"Key":"two little","Fragments":["things:"]},{"Key":"1. use","Fragments":["```:require```","`clojure.string/blank?`"]},{"Key":"use ```:require```","Fragments":["instead"]},{"Key":"```:require``` instead","Fragments":["of"]},{"Key":"of ```:use```.","Fragments":["See"]},{"Key":"```:use```. See","Fragments":["http://stackoverflow.com/questions/10358149/in-clojure-1-4-what-is-the-use-of-refer-within-require"]},{"Key":"See http://stackoverflow.com/questions/10358149/in-clojure-1-4-what-is-the-use-of-refer-within-require","Fragments":["and"]},{"Key":"http://stackoverflow.com/questions/10358149/in-clojure-1-4-what-is-the-use-of-refer-within-require and","Fragments":["also"]},{"Key":"2. you","Fragments":["could","are","can"]},{"Key":"words directly","Fragments":["with"]},{"Key":"with ```(re-seq","Fragments":["#\"\\w+\""]},{"Key":"```(re-seq #\"\\w+\"","Fragments":["(lower-case"]},{"Key":"#\"\\w+\" (lower-case","Fragments":["phrase)```"]},{"Key":"(lower-case phrase)```","Fragments":["and"]},{"Key":"phrase)``` and","Fragments":["get"]},{"Key":"and get","Fragments":["then","back","rid"]},{"Key":"get then","Fragments":["the","merge"]},{"Key":"about ```(not","Fragments":["(nil?"]},{"Key":"```(not (nil?","Fragments":["x))```"]},{"Key":"(nil? x))```","Fragments":["vs."]},{"Key":"x))``` vs.","Fragments":["```((complement"]},{"Key":"vs. ```((complement","Fragments":["nil?)"]},{"Key":"```((complement nil?)","Fragments":["x)```."]},{"Key":"nil?) x)```.","Fragments":["I"]},{"Key":"x)```. I","Fragments":["think"]},{"Key":"the former","Fragments":["readers","one","looks"]},{"Key":"former readers","Fragments":["better,"]},{"Key":"readers better,","Fragments":["but"]},{"Key":"better, but","Fragments":["the"]},{"Key":"latter comes","Fragments":["from"]},{"Key":"comes from","Fragments":["the","the","the"]},{"Key":"best answer","Fragments":["to"]},{"Key":"to [this","Fragments":["SO"]},{"Key":"[this SO","Fragments":["question](http://stackoverflow.com/questions/11854392/clojure-not-nil-check)."]},{"Key":"how you've","Fragments":["split","used"]},{"Key":"you've split","Fragments":["it","out"]},{"Key":"split it","Fragments":["into"]},{"Key":"into two","Fragments":["functions,","parts","sequence","separate"]},{"Key":"two functions,","Fragments":["and"]},{"Key":"functions, and","Fragments":["tied","doseq","destructuring","I"]},{"Key":"and tied","Fragments":["them"]},{"Key":"tied them","Fragments":["together"]},{"Key":"them together","Fragments":["with"]},{"Key":"with keywords","Fragments":["that"]},{"Key":"keywords that","Fragments":["have"]},{"Key":"that have","Fragments":["very","score-letter","been"]},{"Key":"have very","Fragments":["clear"]},{"Key":"clear meanings.","Fragments":["The"]},{"Key":"meanings. The","Fragments":["keywords"]},{"Key":"The keywords","Fragments":["make"]},{"Key":"keywords make","Fragments":["it"]},{"Key":"to decode","Fragments":["a)"]},{"Key":"decode a)","Fragments":["the"]},{"Key":"a) the","Fragments":["analysis"]},{"Key":"the analysis","Fragments":["conditions"]},{"Key":"analysis conditions","Fragments":["and"]},{"Key":"conditions and","Fragments":["b)","is","results"]},{"Key":"and b)","Fragments":["the","it","not","asserts"]},{"Key":"b) the","Fragments":["responses."]},{"Key":"My use","Fragments":["of"]},{"Key":"of `:require/:refer`","Fragments":["is"]},{"Key":"`:require/:refer` is","Fragments":["thanks"]},{"Key":"is thanks","Fragments":["to"]},{"Key":"a suggestion","Fragments":["by","for","on"]},{"Key":"suggestion by","Fragments":["@danika."]},{"Key":"with @dayton.","Fragments":["This"]},{"Key":"@dayton. This","Fragments":["is"]},{"Key":"very nice,","Fragments":["but"]},{"Key":"nice, but","Fragments":["I"]},{"Key":"you memoize","Fragments":["```\\T```"]},{"Key":"memoize ```\\T```","Fragments":["and"]},{"Key":"and ```\\U```","Fragments":["such"]},{"Key":"```\\U``` such","Fragments":["as"]},{"Key":"as to","Fragments":["give","when","what","whether","whether","which"]},{"Key":"them some","Fragments":["domain-specific"]},{"Key":"some domain-specific","Fragments":["context."]},{"Key":"Nice !!","Fragments":[","]},{"Key":"!! ,","Fragments":["only"]},{"Key":", only","Fragments":["a"]},{"Key":"few points","Fragments":[":"]},{"Key":"could declare","Fragments":["T","var"]},{"Key":"declare T","Fragments":["and"]},{"Key":"U like","Fragments":["var."]},{"Key":"* Also","Fragments":["take"]},{"Key":"Also take","Fragments":["a"]},{"Key":"can't help","Fragments":["but"]},{"Key":"but think","Fragments":["there's"]},{"Key":"to manage","Fragments":["the"]},{"Key":"manage the","Fragments":["map,"]},{"Key":"the map,","Fragments":["but"]},{"Key":"figure one","Fragments":["out."]},{"Key":"two methods","Fragments":["(so"]},{"Key":"methods (so","Fragments":["I"]},{"Key":"(so I","Fragments":["can"]},{"Key":"can pass","Fragments":["in","it","`dna-to-rna`"]},{"Key":"pass in","Fragments":["an","`s`"]},{"Key":"empty map)","Fragments":["is"]},{"Key":"map) is","Fragments":["the"]},{"Key":"best way","Fragments":["to","to","to","I","to","to"]},{"Key":"this. But","Fragments":["it"]},{"Key":"But it","Fragments":["passes","definitely","seems","does"]},{"Key":"passes the","Fragments":["tests.","given","tests.","tests","tests,"]},{"Key":" @alexie","Fragments":["-","thanks"]},{"Key":"@alexie -","Fragments":["I"]},{"Key":"actually removed","Fragments":["the"]},{"Key":"require since","Fragments":["there's"]},{"Key":"since there's","Fragments":["only"]},{"Key":"one usage;","Fragments":["it"]},{"Key":"usage; it","Fragments":["felt"]},{"Key":"it felt","Fragments":["premature","like","a"]},{"Key":"felt premature","Fragments":["given"]},{"Key":"premature given","Fragments":["the"]},{"Key":"the nature","Fragments":["of"]},{"Key":"problem. But","Fragments":["since"]},{"Key":"you point","Fragments":["it"]},{"Key":"out, I","Fragments":["suppose"]},{"Key":"suppose I","Fragments":["violated","could"]},{"Key":"I violated","Fragments":["the"]},{"Key":"violated the","Fragments":["principle"]},{"Key":"the principle","Fragments":["of","of"]},{"Key":"principle of","Fragments":["least","least"]},{"Key":"of least","Fragments":["surprise.","surprise."]},{"Key":" @clemmie","Fragments":["-"]},{"Key":"@clemmie -","Fragments":["I","a"]},{"Key":"feel \"nonsense\"","Fragments":["has"]},{"Key":"\"nonsense\" has","Fragments":["a"]},{"Key":"certain zen","Fragments":["quality"]},{"Key":"zen quality","Fragments":["to"]},{"Key":"quality to","Fragments":["it"]},{"Key":"it (silence","Fragments":["is"]},{"Key":"(silence is","Fragments":["a"]},{"Key":"a non-sensing","Fragments":["experience"]},{"Key":"non-sensing experience","Fragments":["sometimes.)"]},{"Key":"experience sometimes.)","Fragments":["That"]},{"Key":"sometimes.) That","Fragments":["said,"]},{"Key":"would rename","Fragments":["it"]},{"Key":"rename it","Fragments":["for"]},{"Key":"with @clemmie","Fragments":["-"]},{"Key":"little overkill","Fragments":["when"]},{"Key":"overkill when","Fragments":["looking"]},{"Key":"when looking","Fragments":["for","through"]},{"Key":"consider switching","Fragments":["out"]},{"Key":"switching out","Fragments":["use"]},{"Key":"out use","Fragments":["for"]},{"Key":"using [the","Fragments":["thread-first"]},{"Key":"[the thread-first","Fragments":["macro](http://clojuredocs.org/clojure_core/clojure.core/-%3E)"]},{"Key":"thread-first macro](http://clojuredocs.org/clojure_core/clojure.core/-%3E)","Fragments":["in"]},{"Key":"macro](http://clojuredocs.org/clojure_core/clojure.core/-%3E) in","Fragments":["```extract-words```."]},{"Key":"the [frequencies](http://clojuredocs.org/clojure_core/clojure.core/frequencies)","Fragments":["function."]},{"Key":"the [thread-last","Fragments":["macro](http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E)"]},{"Key":"[thread-last macro](http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E)","Fragments":["to"]},{"Key":"macro](http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E) to","Fragments":["avoid"]},{"Key":"this long","Fragments":["way"]},{"Key":"long way","Fragments":["around,"]},{"Key":"way around,","Fragments":["for"]},{"Key":"around, for","Fragments":["fun"]},{"Key":"for fun","Fragments":["(read","I"]},{"Key":"fun (read","Fragments":["commented"]},{"Key":"(read commented","Fragments":["lines"]},{"Key":"commented lines","Fragments":["in"]},{"Key":"order for","Fragments":["silly"]},{"Key":"for silly","Fragments":["meta-commentary)."]},{"Key":" `zip`","Fragments":["is"]},{"Key":"`zip` is","Fragments":["unnecessary"]},{"Key":"pass `base`","Fragments":["and"]},{"Key":"`base` and","Fragments":["`mutation`"]},{"Key":"and `mutation`","Fragments":["directly"]},{"Key":"`mutation` directly","Fragments":["to"]},{"Key":"`map` form","Fragments":["and"]},{"Key":"form and","Fragments":["make","threw"]},{"Key":"make `ham-compare`","Fragments":["accept"]},{"Key":"`ham-compare` accept","Fragments":["arguments"]},{"Key":"accept arguments","Fragments":["directly,"]},{"Key":"arguments directly,","Fragments":["without"]},{"Key":"directly, without","Fragments":["deconstructing."]},{"Key":"A minor","Fragments":["point"]},{"Key":"minor point","Fragments":[","]},{"Key":"point ,","Fragments":["you"]},{"Key":", you","Fragments":["could"]},{"Key":"declare var","Fragments":["for"]},{"Key":"@alexie thanks","Fragments":["for"]},{"Key":"the advice.","Fragments":["This","I'm","Why"]},{"Key":"advice. This","Fragments":["is"]},{"Key":"cleaner and","Fragments":["I"]},{"Key":"how `map`","Fragments":["in"]},{"Key":"`map` in","Fragments":["clojure"]},{"Key":"clojure works","Fragments":["now."]},{"Key":"The ```(if","Fragments":["(...)"]},{"Key":"```(if (...)","Fragments":["true"]},{"Key":"(...) true","Fragments":["false```"]},{"Key":"true false```","Fragments":["is"]},{"Key":"false``` is","Fragments":["unnecessary"]},{"Key":"the ```is-empty?```","Fragments":["and","function."]},{"Key":"```is-empty?``` and","Fragments":["```is-shout?```"]},{"Key":"and ```is-shout?```","Fragments":["functions,"]},{"Key":"```is-shout?``` functions,","Fragments":["the"]},{"Key":"functions, the","Fragments":["inner","value"]},{"Key":"the inner","Fragments":["function"]},{"Key":"inner function","Fragments":["will"]},{"Key":"sure why","Fragments":["you're","I","you","I","you","`re-matches`"]},{"Key":"why you're","Fragments":["checking"]},{"Key":"checking ```s```","Fragments":["against"]},{"Key":"```s``` against","Fragments":["```lower-case"]},{"Key":"against ```lower-case","Fragments":["s```"]},{"Key":"```lower-case s```","Fragments":["on"]},{"Key":"s``` on","Fragments":["line"]},{"Key":"14, the","Fragments":["comparison"]},{"Key":"comparison with","Fragments":["```upper-case"]},{"Key":"with ```upper-case","Fragments":["s```"]},{"Key":"```upper-case s```","Fragments":["should"]},{"Key":"s``` should","Fragments":["be"]},{"Key":"using ```clojure.string/blank?```","Fragments":["in","instead?"]},{"Key":"```clojure.string/blank?``` in","Fragments":["the"]},{"Key":"functions private,","Fragments":["using"]},{"Key":"private, using","Fragments":["the"]},{"Key":"the ```defn-```","Fragments":["function."]},{"Key":"more little","Fragments":["nit"]},{"Key":"little nit","Fragments":["which"]},{"Key":"nit which","Fragments":["may"]},{"Key":"which may","Fragments":["come","help","or"]},{"Key":"may come","Fragments":["down","down","handy"]},{"Key":"come down","Fragments":["to","to","only"]},{"Key":"of preference","Fragments":["-","-","but"]},{"Key":"I consider","Fragments":["it"]},{"Key":"consider it","Fragments":["a","worthwhile.","to","worth","shouting"]},{"Key":"to order","Fragments":["function"]},{"Key":"order function","Fragments":["definitions","(it","to","with"]},{"Key":"definitions with","Fragments":["public","the"]},{"Key":"with public","Fragments":["first"]},{"Key":"public first","Fragments":["/"]},{"Key":"first /","Fragments":["non-public"]},{"Key":"/ non-public","Fragments":["last"]},{"Key":"non-public last","Fragments":["and"]},{"Key":"then additionally","Fragments":["by"]},{"Key":"additionally by","Fragments":["level"]},{"Key":"by level","Fragments":["of"]},{"Key":"abstraction putting","Fragments":["the"]},{"Key":"level first.","Fragments":["So"]},{"Key":"first. So","Fragments":["the"]},{"Key":"the ideal","Fragments":["order"]},{"Key":"ideal order","Fragments":["in"]},{"Key":"opinion would","Fragments":["be"]},{"Key":"exactly reverse","Fragments":["to"]},{"Key":"reverse to","Fragments":["what"]},{"Key":"have now.","Fragments":["`declare`"]},{"Key":"now. `declare`","Fragments":["will"]},{"Key":"you with","Fragments":["achieving","that","that","that.","my","clojure.core,"]},{"Key":"with achieving","Fragments":["such"]},{"Key":"achieving such","Fragments":["order"]},{"Key":"such order","Fragments":["-"]},{"Key":"order -","Fragments":["of"]},{"Key":"- of","Fragments":["course","course"]},{"Key":"worth doing","Fragments":["at"]},{"Key":"doing at","Fragments":["all."]},{"Key":" @uriah,","Fragments":["Thanks,"]},{"Key":"@uriah, Thanks,","Fragments":["I"]},{"Key":"been wondering","Fragments":["how"]},{"Key":"do forward","Fragments":["declarations!"]},{"Key":"making `silence?`","Fragments":["`shout?`"]},{"Key":"`silence?` `shout?`","Fragments":["and"]},{"Key":"methods via","Fragments":["`defn-`.","`defn-`."]},{"Key":"via `defn-`.","Fragments":["The"]},{"Key":"`defn-`. The","Fragments":["`trim`"]},{"Key":"The `trim`","Fragments":["in"]},{"Key":"`trim` in","Fragments":["`silence?`"]},{"Key":"in `silence?`","Fragments":["isn't"]},{"Key":"`silence?` isn't","Fragments":["necessary"]},{"Key":"isn't necessary","Fragments":["since","in"]},{"Key":"necessary since","Fragments":["`blank?`","a"]},{"Key":"since `blank?`","Fragments":["returns","covers"]},{"Key":"`blank?` returns","Fragments":["true"]},{"Key":"returns true","Fragments":["if"]},{"Key":"only whitespace.","Fragments":["Looks"]},{"Key":"whitespace. Looks","Fragments":["solid"]},{"Key":"Looks solid","Fragments":["otherwise."]},{"Key":"are simpler","Fragments":["ways"]},{"Key":"simpler ways","Fragments":["to"]},{"Key":"your `yelling?`","Fragments":["and"]},{"Key":"and `silence?`","Fragments":["methods.","private","to","functions?","are"]},{"Key":"`silence?` methods.","Fragments":["I'd"]},{"Key":"methods. I'd","Fragments":["take"]},{"Key":"I'd take","Fragments":["a","a"]},{"Key":"at [clojure.string](http://clojure.github.io/clojure/clojure.string-api.html)","Fragments":["to"]},{"Key":"[clojure.string](http://clojure.github.io/clojure/clojure.string-api.html) to","Fragments":["see","clean"]},{"Key":"is has","Fragments":["to"]},{"Key":"to offer.","Fragments":["You"]},{"Key":"offer. You","Fragments":["could"]},{"Key":"probably get","Fragments":["rid"]},{"Key":"of `all?`","Fragments":["by"]},{"Key":"`all?` by","Fragments":["using"]},{"Key":"methods provided","Fragments":["in"]},{"Key":"provided in","Fragments":["string."]},{"Key":"in string.","Fragments":["You"]},{"Key":"string. You","Fragments":["might","also","might","can"]},{"Key":"making `question?`","Fragments":["`yelling?`"]},{"Key":"`question?` `yelling?`","Fragments":["and"]},{"Key":"`silence?` private","Fragments":["methods"]},{"Key":"the `ends-with-question-mark?`","Fragments":["`silence?`"]},{"Key":"`ends-with-question-mark?` `silence?`","Fragments":["`shouting?`"]},{"Key":"`silence?` `shouting?`","Fragments":["and"]},{"Key":"`question?` methods","Fragments":["private"]},{"Key":"private via","Fragments":["`defn-`."]},{"Key":"Generally I've","Fragments":["seen"]},{"Key":"seen doc-strings","Fragments":["before"]},{"Key":"doc-strings before","Fragments":["the"]},{"Key":"argument list.","Fragments":["Not"]},{"Key":"list. Not","Fragments":["sure"]},{"Key":"the community","Fragments":["in","[Clojure","standard","here"]},{"Key":"community in","Fragments":["general"]},{"Key":"general feels","Fragments":["about"]},{"Key":"feels about","Fragments":["it."]},{"Key":"it. Other","Fragments":["than"]},{"Key":"clean. My","Fragments":["only"]},{"Key":"only complaint","Fragments":["is","would"]},{"Key":"complaint is","Fragments":["really"]},{"Key":"you rely","Fragments":["on"]},{"Key":"rely on","Fragments":["regular","a","built-in"]},{"Key":"regular expressions.","Fragments":["They're","Originally,","Most","I"]},{"Key":"expressions. They're","Fragments":["cool"]},{"Key":"They're cool","Fragments":["and"]},{"Key":"cool and","Fragments":["all"]},{"Key":"all but","Fragments":["they"]},{"Key":"they might","Fragments":["be","bleed"]},{"Key":"a sledge","Fragments":["hammer"]},{"Key":"sledge hammer","Fragments":["when"]},{"Key":"hammer when","Fragments":["you"]},{"Key":"you only","Fragments":["needed","need","look","generate","have","have","need","need"]},{"Key":"only needed","Fragments":["a","if"]},{"Key":"needed a","Fragments":["regular"]},{"Key":"I'd consider","Fragments":["pulling","using"]},{"Key":"consider pulling","Fragments":["out"]},{"Key":"out your","Fragments":["conditionals","parentheses"]},{"Key":"your conditionals","Fragments":["into"]},{"Key":"into something","Fragments":["you"]},{"Key":"give more","Fragments":["meaning."]},{"Key":"more meaning.","Fragments":["You"]},{"Key":"meaning. You","Fragments":["also"]},{"Key":"also might","Fragments":["want"]},{"Key":"functions provided","Fragments":["by"]},{"Key":"by [clojure.string](http://clojure.github.io/clojure/clojure.string-api.html)","Fragments":["to"]},{"Key":"your silence","Fragments":["and","function"]},{"Key":"silence and","Fragments":["shouting","question"]},{"Key":"and shouting","Fragments":["conditions."]},{"Key":"My solution","Fragments":["(which","is","wasn't"]},{"Key":"solution (which","Fragments":["fits"]},{"Key":"(which fits","Fragments":["on"]},{"Key":"fits on","Fragments":["a"]},{"Key":"single line)","Fragments":["uses"]},{"Key":"line) uses","Fragments":["`merge`,"]},{"Key":"uses `merge`,","Fragments":["`reduce-kv`,"]},{"Key":"`merge`, `reduce-kv`,","Fragments":["`repeat`"]},{"Key":"`reduce-kv`, `repeat`","Fragments":["and"]},{"Key":"`repeat` and","Fragments":["`zipmap`."]},{"Key":"and `zipmap`.","Fragments":["Is"]},{"Key":"`zipmap`. Is","Fragments":["that"]},{"Key":"that enough","Fragments":["of"]},{"Key":"enough of","Fragments":["a"]},{"Key":"a hint?","Fragments":[":)"]},{"Key":"Try doing","Fragments":["this"]},{"Key":"doing this","Fragments":["with","-","in"]},{"Key":"with `reduce-kv`","Fragments":["instead,"]},{"Key":"`reduce-kv` instead,","Fragments":["this"]},{"Key":"instead, this","Fragments":["isn't"]},{"Key":"isn't correct","Fragments":["given"]},{"Key":"correct given","Fragments":["an"]},{"Key":"given an","Fragments":["empty"]},{"Key":"empty input","Fragments":["because"]},{"Key":"input because","Fragments":["`(merge)`"]},{"Key":"because `(merge)`","Fragments":["is"]},{"Key":"`(merge)` is","Fragments":["`nil`."]},{"Key":"Interesting. I","Fragments":["took","thought","like"]},{"Key":"the wild,","Fragments":["and","(declare)"]},{"Key":"wild, and","Fragments":["you're"]},{"Key":"and you're","Fragments":["right."]},{"Key":"it feels","Fragments":["weird","foreign.","cleaner"]},{"Key":"feels weird","Fragments":["to"]},{"Key":"do that.","Fragments":["I"]},{"Key":"like having","Fragments":["the","them"]},{"Key":"the arguments","Fragments":["expected","vector.","list","through","and"]},{"Key":"arguments expected","Fragments":["on"]},{"Key":"expected on","Fragments":["one"]},{"Key":"on one","Fragments":["line.","line:","line.","line","line.","or","line"]},{"Key":"without regular","Fragments":["expressions."]},{"Key":"It turns","Fragments":["out"]},{"Key":"turns out","Fragments":["that","that"]},{"Key":"using sort","Fragments":["is"]},{"Key":"than frequencies","Fragments":["for"]},{"Key":"frequencies for","Fragments":["this","this"]},{"Key":"using explicit","Fragments":["recursion,"]},{"Key":"explicit recursion,","Fragments":["consider"]},{"Key":"recursion, consider","Fragments":["using"]},{"Key":"using higher","Fragments":["level"]},{"Key":"higher level","Fragments":["functionality","of","logic."]},{"Key":"level functionality","Fragments":["such"]},{"Key":"functionality such","Fragments":["as"]},{"Key":"shorter by","Fragments":["using"]},{"Key":"the `#(…)`","Fragments":["special"]},{"Key":"`#(…)` special","Fragments":["form"]},{"Key":"using `fn`,","Fragments":["but"]},{"Key":"`fn`, but","Fragments":["this"]},{"Key":"The placement","Fragments":["of"]},{"Key":"placement of","Fragments":["the"]},{"Key":"very last","Fragments":["parenthesis"]},{"Key":"parenthesis is","Fragments":["strange!"]},{"Key":"are right!","Fragments":["Too","I"]},{"Key":"right! Too","Fragments":["much"]},{"Key":"much programming","Fragments":["in"]},{"Key":"programming in","Fragments":["other"]},{"Key":"a conditional,","Fragments":["it's"]},{"Key":"conditional, it's","Fragments":["better"]},{"Key":"be independent.","Fragments":["Instead"]},{"Key":"independent. Instead","Fragments":["of"]},{"Key":"of `question?","Fragments":["`"]},{"Key":"`question? `","Fragments":["peeking"]},{"Key":"` peeking","Fragments":["ahead"]},{"Key":"peeking ahead","Fragments":["to"]},{"Key":"ahead to","Fragments":["the"]},{"Key":"`shouting?` condition,","Fragments":["you"]},{"Key":"condition, you","Fragments":["should"]},{"Key":"consider letting","Fragments":["their"]},{"Key":"letting their","Fragments":["order"]},{"Key":"their order","Fragments":["in","in","in"]},{"Key":"code determine","Fragments":["precedence."]},{"Key":" `(blank?","Fragments":["message)`"]},{"Key":"`(blank? message)`","Fragments":["would"]},{"Key":"message)` would","Fragments":["be"]},{"Key":"little clearer","Fragments":["over","if"]},{"Key":"clearer over","Fragments":["`(empty?"]},{"Key":"over `(empty?","Fragments":["(trim"]},{"Key":"`(empty? (trim","Fragments":["message))`"]},{"Key":"expression version","Fragments":["as"]},{"Key":"version as","Fragments":["using","a"]},{"Key":"using functions","Fragments":["seems"]},{"Key":"functions seems","Fragments":["to"]},{"Key":"add more","Fragments":["complexity","clarity?"]},{"Key":"more complexity","Fragments":["than"]},{"Key":"complexity than","Fragments":["it"]},{"Key":"it reduces.","Fragments":["Going"]},{"Key":"reduces. Going","Fragments":["to"]},{"Key":"Going to","Fragments":["revert.","look"]},{"Key":"them *inside*","Fragments":["the"]},{"Key":"*inside* the","Fragments":["`response-for`"]},{"Key":"the `response-for`","Fragments":["functinon,","function","function","function:","method.","function.","method","down","a","argument","function","function"]},{"Key":"`response-for` functinon,","Fragments":["which"]},{"Key":"functinon, which","Fragments":["would"]},{"Key":"of meaning","Fragments":["you"]},{"Key":"meaning you","Fragments":["wouldn't"]},{"Key":"wouldn't have","Fragments":["to","to","to","the"]},{"Key":"in `s`","Fragments":["as"]},{"Key":"`s` as","Fragments":["an"]},{"Key":"an argument","Fragments":["to","to","to","that","to","of","name"]},{"Key":"would already","Fragments":["be","be","be"]},{"Key":"already be","Fragments":["available.","in","in","used","treated"]},{"Key":"also argue","Fragments":["that"]},{"Key":"idiomatic style","Fragments":["to","of"]},{"Key":"style to","Fragments":["omit","use","close","close","leave"]},{"Key":"to omit","Fragments":["the"]},{"Key":"`is-` prefix","Fragments":["on","is"]},{"Key":"predicate methods,","Fragments":["as","and"]},{"Key":"methods, as","Fragments":["the"]},{"Key":"mark is","Fragments":["enough","what"]},{"Key":"is enough","Fragments":["to","-","to"]},{"Key":"to indicate","Fragments":["that's"]},{"Key":"indicate that's","Fragments":["what"]},{"Key":"bit hard","Fragments":["to","to","to","to","to","for"]},{"Key":"tell at","Fragments":["a"]},{"Key":"a glance","Fragments":["what","and"]},{"Key":"glance what","Fragments":["each"]},{"Key":"what each","Fragments":["line","type","of"]},{"Key":"cond expression","Fragments":["is"]},{"Key":"expression is","Fragments":["checking","thrown","`(remove-non-word-chars"]},{"Key":"for -","Fragments":["could"]},{"Key":"- could","Fragments":["you","you"]},{"Key":"consider abstracting","Fragments":["out"]},{"Key":"abstracting out","Fragments":["each"]},{"Key":"out each","Fragments":["predicate"]},{"Key":"each predicate","Fragments":["into","into","carefully","line"]},{"Key":"predicate into","Fragments":["its","a"]},{"Key":"into its","Fragments":["own","own","own","own","own","own","own","own","own","own"]},{"Key":"own helpfully","Fragments":["named"]},{"Key":"helpfully named","Fragments":["function?"]},{"Key":"on etrepum's","Fragments":["advice."]},{"Key":"etrepum's advice.","Fragments":["Clearly"]},{"Key":"advice. Clearly","Fragments":["an"]},{"Key":"Clearly an","Fragments":["improvement"]},{"Key":"an improvement","Fragments":["over","over"]},{"Key":"improvement over","Fragments":["the","the"]},{"Key":"the train","Fragments":["wreck"]},{"Key":"train wreck","Fragments":["that"]},{"Key":"wreck that","Fragments":["was"]},{"Key":"first approach.","Fragments":["Just"]},{"Key":"approach. Just","Fragments":["figured"]},{"Key":"Just figured","Fragments":["out"]},{"Key":"figured out","Fragments":["how","that","the","that"]},{"Key":"with list","Fragments":["comprehensions;"]},{"Key":"list comprehensions;","Fragments":["not"]},{"Key":"comprehensions; not","Fragments":["sure"]},{"Key":"about which","Fragments":["one","of"]},{"Key":" sweet","Fragments":["reviews..."]},{"Key":"sweet reviews...","Fragments":["refactoring"]},{"Key":"reviews... refactoring","Fragments":["now"]},{"Key":"is _not_","Fragments":["pretty"]},{"Key":"_not_ pretty","Fragments":["but"]},{"Key":"pretty but","Fragments":["it"]},{"Key":"it works.","Fragments":["I","Thanks!","Pretty","I'd","Ship","Struggling"]},{"Key":"works. I","Fragments":["just"]},{"Key":"get something","Fragments":["out","working"]},{"Key":"something out","Fragments":["there"]},{"Key":"there first","Fragments":["before"]},{"Key":"first before","Fragments":["agonizing"]},{"Key":"before agonizing","Fragments":["over"]},{"Key":"agonizing over","Fragments":["it."]},{"Key":" @emilie","Fragments":["thanks."]},{"Key":"@emilie thanks.","Fragments":["First"]},{"Key":"thanks. First","Fragments":["time"]},{"Key":"First time","Fragments":["I","I've","writing","I've"]},{"Key":"see this","Fragments":["function."]},{"Key":" @josianne","Fragments":["Awesome","Why?","Mind"]},{"Key":"@josianne Awesome","Fragments":["suggestions."]},{"Key":"Awesome suggestions.","Fragments":["This"]},{"Key":"suggestions. This","Fragments":["is"]},{"Key":"much my","Fragments":["first","first","first"]},{"Key":"Clojure code,","Fragments":["so","so"]},{"Key":"so thanks!","Fragments":["I"]},{"Key":"was having","Fragments":["some"]},{"Key":"having some","Fragments":["issues"]},{"Key":"my syntax","Fragments":["trying"]},{"Key":"syntax trying","Fragments":["to"]},{"Key":"evaluate booleans","Fragments":["to"]},{"Key":"booleans to","Fragments":["symbols,","numbers,","be"]},{"Key":"to symbols,","Fragments":["that's"]},{"Key":"symbols, that's","Fragments":["why"]},{"Key":"I frustratingly","Fragments":["ended"]},{"Key":"frustratingly ended","Fragments":["up"]},{"Key":"with (=","Fragments":["0","x"]},{"Key":"(= 0","Fragments":["(compare","n)"]},{"Key":"0 (compare","Fragments":["msg"]},{"Key":"(compare msg","Fragments":["\"\")),"]},{"Key":"msg \"\")),","Fragments":["which"]},{"Key":"\"\")), which","Fragments":["is"]},{"Key":"is obviously","Fragments":["bad"]},{"Key":"obviously bad","Fragments":["code,"]},{"Key":"bad code,","Fragments":["but"]},{"Key":"code, but","Fragments":["it","I"]},{"Key":"it made","Fragments":["the","the","the"]},{"Key":"@josianne Why?","Fragments":["If"]},{"Key":"Why? If","Fragments":["I"]},{"Key":"understand correctly,","Fragments":[":use","there's"]},{"Key":"correctly, :use","Fragments":["will"]},{"Key":":use will","Fragments":["load"]},{"Key":"entire library","Fragments":["into"]},{"Key":"library into","Fragments":["my"]},{"Key":"my namespace,","Fragments":["but"]},{"Key":"I limit","Fragments":["the"]},{"Key":"the include","Fragments":["to"]},{"Key":"include to","Fragments":["just"]},{"Key":"I provide","Fragments":["with","function"]},{"Key":"provide with","Fragments":[":only,"]},{"Key":"with :only,","Fragments":["and"]},{"Key":":only, and","Fragments":[":require"]},{"Key":"and :require","Fragments":["will"]},{"Key":":require will","Fragments":["make"]},{"Key":"namespace available","Fragments":["to"]},{"Key":"me, requiring","Fragments":["me"]},{"Key":"requiring me","Fragments":["to"]},{"Key":"calls (string/upper-case","Fragments":["instead"]},{"Key":"(string/upper-case instead","Fragments":["of"]},{"Key":"of upper-case).","Fragments":["I'm"]},{"Key":"upper-case). I'm","Fragments":["not"]},{"Key":"not quite","Fragments":["sure","expressive","right","clear"]},{"Key":"quite sure","Fragments":["why"]},{"Key":"other, especially","Fragments":["with"]},{"Key":"especially with","Fragments":["such"]},{"Key":"small \"program\".","Fragments":["I'm"]},{"Key":"\"program\". I'm","Fragments":["only"]},{"Key":"only defining","Fragments":["one"]},{"Key":"defining one","Fragments":["function,"]},{"Key":"so loading","Fragments":["in"]},{"Key":"loading in","Fragments":["two"]},{"Key":"two others","Fragments":["doesn't"]},{"Key":"others doesn't","Fragments":["seem"]},{"Key":"seem that","Fragments":["big","important"]},{"Key":"that big","Fragments":["of"]},{"Key":"big of","Fragments":["a"]},{"Key":"a deal,","Fragments":["and"]},{"Key":"deal, and","Fragments":["I"]},{"Key":"entire clojure.string","Fragments":["namespace"]},{"Key":"namespace available.","Fragments":["(Not"]},{"Key":"available. (Not","Fragments":["trying"]},{"Key":"(Not trying","Fragments":["to"]},{"Key":"to argue,","Fragments":["I"]},{"Key":"argue, I","Fragments":["really"]},{"Key":"really would","Fragments":["like"]},{"Key":"@josianne Mind","Fragments":["looking"]},{"Key":"Mind looking","Fragments":["at"]},{"Key":"my latest","Fragments":["submission","version."]},{"Key":"submission and","Fragments":["see","nitpick"]},{"Key":"it's clearer.","Fragments":["I"]},{"Key":"for concise,","Fragments":["not"]},{"Key":"concise, not","Fragments":["\"Enterprisey\"."]},{"Key":"not \"Enterprisey\".","Fragments":["Breaking"]},{"Key":"\"Enterprisey\". Breaking","Fragments":["them"]},{"Key":"Breaking them","Fragments":["out"]},{"Key":"prefer not","Fragments":["to."]},{"Key":"couple questions","Fragments":["to"]},{"Key":"questions to","Fragments":["begin"]},{"Key":"to begin","Fragments":["with.","with.)"]},{"Key":"begin with.","Fragments":["What"]},{"Key":"with. What","Fragments":["is"]},{"Key":"the \"proper\"","Fragments":["syntax"]},{"Key":"\"proper\" syntax","Fragments":["when"]},{"Key":"syntax when","Fragments":["comparing"]},{"Key":"when comparing","Fragments":["two"]},{"Key":"comparing two","Fragments":["values?"]},{"Key":"two values?","Fragments":["In"]},{"Key":"values? In","Fragments":["a"]},{"Key":"a C-ish","Fragments":["language,"]},{"Key":"C-ish language,","Fragments":["we"]},{"Key":"language, we","Fragments":["tend"]},{"Key":"we tend","Fragments":["to"]},{"Key":"literal (if","Fragments":["x"]},{"Key":"(if x","Fragments":["=="]},{"Key":"x ==","Fragments":["42),"]},{"Key":"== 42),","Fragments":["and"]},{"Key":"42), and","Fragments":["can"]},{"Key":"can most","Fragments":["often"]},{"Key":"most often","Fragments":["agree"]},{"Key":"often agree","Fragments":["that"]},{"Key":"that reversing","Fragments":["them","the"]},{"Key":"reversing them","Fragments":["is"]},{"Key":"them is","Fragments":["confusing","often","contained"]},{"Key":"is confusing","Fragments":["(if"]},{"Key":"confusing (if","Fragments":["42"]},{"Key":"(if 42","Fragments":["=="]},{"Key":"42 ==","Fragments":["x)."]},{"Key":"== x).","Fragments":["So"]},{"Key":"x). So","Fragments":["in"]},{"Key":"So in","Fragments":["Clojure,","this","that","you"]},{"Key":"Clojure, would","Fragments":["(="]},{"Key":"would (=","Fragments":["x"]},{"Key":"(= x","Fragments":["42)","0).","y)","y))`","y))`","y),"]},{"Key":"x 42)","Fragments":["be"]},{"Key":"42) be","Fragments":["better"]},{"Key":"than (=","Fragments":["42","x"]},{"Key":"(= 42","Fragments":["x),"]},{"Key":"42 x),","Fragments":["or"]},{"Key":"x), or","Fragments":["is"]},{"Key":"that reversed.","Fragments":["How"]},{"Key":"reversed. How","Fragments":["about"]},{"Key":"when an","Fragments":["evaluated"]},{"Key":"an evaluated","Fragments":["expression"]},{"Key":"evaluated expression","Fragments":["is"]},{"Key":"is thrown","Fragments":["in?"]},{"Key":"thrown in?","Fragments":["(="]},{"Key":"in? (=","Fragments":["\\?"]},{"Key":"(last msg))","Fragments":["or"]},{"Key":"msg)) or","Fragments":["(="]},{"Key":"or (=","Fragments":["(last"]},{"Key":"(last msg)","Fragments":["\\?)","\\?))"]},{"Key":"for looking","Fragments":["and","at"]},{"Key":"looking and","Fragments":["criticizing"]},{"Key":"and criticizing","Fragments":["my"]},{"Key":"criticizing my","Fragments":["code!"]},{"Key":"describe having","Fragments":["usefully"]},{"Key":"having usefully","Fragments":["named"]},{"Key":"usefully named","Fragments":["helper"]},{"Key":"named helper","Fragments":["functions"]},{"Key":"functions an","Fragments":["\"Enterprisey\"!"]},{"Key":"an \"Enterprisey\"!","Fragments":[":-)"]},{"Key":"reason I'd","Fragments":["suggest","thought"]},{"Key":"suggest breaking","Fragments":["the"]},{"Key":"breaking the","Fragments":["predicates","```cond```"]},{"Key":"that currently","Fragments":["the"]},{"Key":"currently the","Fragments":["`response-for`"]},{"Key":"does a","Fragments":["ton","good","bit"]},{"Key":"ton of","Fragments":["stuff"]},{"Key":"stuff at","Fragments":["a"]},{"Key":"different levels","Fragments":["of","of"]},{"Key":"levels of","Fragments":["abstraction.","abstraction","abstraction"]},{"Key":"of abstraction.","Fragments":["It's"]},{"Key":"abstraction. It's","Fragments":["making"]},{"Key":"It's making","Fragments":["decisions"]},{"Key":"making decisions","Fragments":["about"]},{"Key":"decisions about","Fragments":["how"]},{"Key":"to respond,","Fragments":["but"]},{"Key":"respond, but","Fragments":["it's"]},{"Key":"also responsible","Fragments":["for"]},{"Key":"responsible for","Fragments":["working","routing"]},{"Key":"for working","Fragments":["out","with","with"]},{"Key":"working out","Fragments":["what","how"]},{"Key":"message has","Fragments":["been"]},{"Key":"been passed","Fragments":["to"]},{"Key":"it. I","Fragments":["like","am","think","still","think"]},{"Key":"very strict","Fragments":["about"]},{"Key":"strict about","Fragments":["only"]},{"Key":"about only","Fragments":["allowing"]},{"Key":"only allowing","Fragments":["one"]},{"Key":"allowing one","Fragments":["function"]},{"Key":"do one","Fragments":["thing","regex)."]},{"Key":"thing at","Fragments":["one"]},{"Key":"one level","Fragments":["of","of"]},{"Key":"And currently,","Fragments":["there's"]},{"Key":"currently, there's","Fragments":["nothing"]},{"Key":"explains that","Fragments":["Bob"]},{"Key":"that Bob","Fragments":["responds"]},{"Key":"Bob responds","Fragments":["to"]},{"Key":"responds to","Fragments":["*shouting*"]},{"Key":"to *shouting*","Fragments":["with"]},{"Key":"*shouting* with","Fragments":["\"Woah,"]},{"Key":"chill out!\",","Fragments":["other"]},{"Key":"out!\", other","Fragments":["than"]},{"Key":"than reading","Fragments":["and"]},{"Key":"understanding the","Fragments":["code,","intent","map"]},{"Key":"code, and","Fragments":["guessing"]},{"Key":"and guessing","Fragments":["at"]},{"Key":"guessing at","Fragments":["its"]},{"Key":"at its","Fragments":["intent."]},{"Key":"its intent.","Fragments":["Using"]},{"Key":"intent. Using","Fragments":["well-named"]},{"Key":"Using well-named","Fragments":["helper"]},{"Key":"well-named helper","Fragments":["functions"]},{"Key":"functions allows","Fragments":["you"]},{"Key":"explicitly communicate","Fragments":["your"]},{"Key":"communicate your","Fragments":["intent,"]},{"Key":"your intent,","Fragments":["so"]},{"Key":"intent, so","Fragments":["readers","I"]},{"Key":"so readers","Fragments":["can"]},{"Key":"readers can","Fragments":["understand"]},{"Key":"can understand","Fragments":["at"]},{"Key":"understand at","Fragments":["a"]},{"Key":"glance and","Fragments":["only"]},{"Key":"and only","Fragments":["have","then","have","retrieve","when"]},{"Key":"dive into","Fragments":["the","the"]},{"Key":"details if","Fragments":["they"]},{"Key":" three","Fragments":["minor"]},{"Key":"three minor","Fragments":["comments:"]},{"Key":"1. you","Fragments":["could","write"]},{"Key":"use ```first``","Fragments":["and"]},{"Key":"```first`` and","Fragments":["```rest```"]},{"Key":"and ```rest```","Fragments":["instead"]},{"Key":"```rest``` instead","Fragments":["of"]},{"Key":"of ```subs```","Fragments":["functions"]},{"Key":"```subs``` functions","Fragments":["in"]},{"Key":"this line","Fragments":["```(=","up"]},{"Key":"line ```(=","Fragments":["\"1\""]},{"Key":"```(= \"1\"","Fragments":["(subs"]},{"Key":"\"1\" (subs","Fragments":["sanitized-number"]},{"Key":"(subs sanitized-number","Fragments":["0","1"]},{"Key":"sanitized-number 0","Fragments":["1)))"]},{"Key":"0 1)))","Fragments":["(subs"]},{"Key":"1))) (subs","Fragments":["sanitized-number"]},{"Key":"sanitized-number 1","Fragments":["11)```.","11)```"]},{"Key":"1 11)```.","Fragments":["If"]},{"Key":"11)```. If","Fragments":["you"]},{"Key":"still want","Fragments":["to"]},{"Key":"use ```subs```","Fragments":["you"]},{"Key":"```subs``` you","Fragments":["could"]},{"Key":"could rewrite","Fragments":["```(subs","that"]},{"Key":"rewrite ```(subs","Fragments":["sanitized-number"]},{"Key":"```(subs sanitized-number","Fragments":["1","1)```"]},{"Key":"1 11)```","Fragments":["with"]},{"Key":"11)``` with","Fragments":["```(subs"]},{"Key":"with ```(subs","Fragments":["sanitized-number"]},{"Key":"are counting","Fragments":["twice"]},{"Key":"counting twice","Fragments":["the"]},{"Key":"twice the","Fragments":["phone"]},{"Key":"the phone","Fragments":["length"]},{"Key":"phone length","Fragments":["if"]},{"Key":"length if","Fragments":["it's"]},{"Key":"it's different","Fragments":["than"]},{"Key":"different than","Fragments":["11.","the","the"]},{"Key":"than 11.","Fragments":["Not"]},{"Key":"11. Not","Fragments":["a"]},{"Key":"big deal,","Fragments":["but","but"]},{"Key":"deal, but","Fragments":["something","when"]},{"Key":"something to","Fragments":["be","keep","be","experiment","something"]},{"Key":"be careful","Fragments":["for"]},{"Key":"careful for","Fragments":["other"]},{"Key":"3. you","Fragments":["could"]},{"Key":"for bad","Fragments":["number"]},{"Key":"bad number","Fragments":["to"]},{"Key":"number to","Fragments":["improve","determine"]},{"Key":"for `all-caps`","Fragments":["really"]},{"Key":"`all-caps` really","Fragments":["belong"]},{"Key":"really belong","Fragments":["in"]},{"Key":"belong in","Fragments":["the"]},{"Key":"the `question?`","Fragments":["function?","and","method"]},{"Key":"`question?` function?","Fragments":["A"]},{"Key":"function? A","Fragments":["question"]},{"Key":"A question","Fragments":["that's"]},{"Key":"question that's","Fragments":["in"]},{"Key":"that's in","Fragments":["all","the","the"]},{"Key":"in all","Fragments":["caps","it's","these","lisps","of","functions","cases,","the"]},{"Key":"all caps","Fragments":["is","than"]},{"Key":"caps is","Fragments":["still"]},{"Key":"question -","Fragments":["it"]},{"Key":"just happens","Fragments":["to"]},{"Key":"happens to","Fragments":["be","be","also"]},{"Key":"a feature","Fragments":["of"]},{"Key":"feature of","Fragments":["Bob","map","the"]},{"Key":"Bob that","Fragments":["his/her"]},{"Key":"that his/her","Fragments":["response"]},{"Key":"his/her response","Fragments":["to","to"]},{"Key":"to shouting","Fragments":["takes"]},{"Key":"shouting takes","Fragments":["precedence"]},{"Key":"takes precedence","Fragments":["over","over"]},{"Key":"precedence over","Fragments":["his/her","asking"]},{"Key":"over his/her","Fragments":["response"]},{"Key":"those extra","Fragments":["checks"]},{"Key":"checks then","Fragments":["it"]},{"Key":"it starts","Fragments":["to"]},{"Key":"starts to","Fragments":["make","become"]},{"Key":"make less","Fragments":["sense"]},{"Key":"less sense","Fragments":["to"]},{"Key":"have what","Fragments":["basically"]},{"Key":"what basically","Fragments":["become"]},{"Key":"basically become","Fragments":["duplicate"]},{"Key":"become duplicate","Fragments":["functions:"]},{"Key":"duplicate functions:","Fragments":["`ends-with-a-question-mark?`"]},{"Key":"functions: `ends-with-a-question-mark?`","Fragments":["and"]},{"Key":"`ends-with-a-question-mark?` and","Fragments":["`question?`,"]},{"Key":"and `question?`,","Fragments":["`all-caps?`","for"]},{"Key":"`question?`, `all-caps?`","Fragments":["and"]},{"Key":"`all-caps?` and","Fragments":["`shouting?`"]},{"Key":"and `shouting?`","Fragments":["etc."]},{"Key":"`shouting?` etc.","Fragments":["So","so"]},{"Key":"etc. So","Fragments":["that"]},{"Key":"So that","Fragments":["could"]},{"Key":"could potentially","Fragments":["drastically","return","be"]},{"Key":"potentially drastically","Fragments":["reduce"]},{"Key":"drastically reduce","Fragments":["the"]},{"Key":"code needed.","Fragments":["And"]},{"Key":"needed. And","Fragments":["there's"]},{"Key":"And there's","Fragments":["a"]},{"Key":"function on","Fragments":["`clojure.string`"]},{"Key":"on `clojure.string`","Fragments":["that"]},{"Key":"`clojure.string` that","Fragments":["could"]},{"Key":"last suggestion","Fragments":["-"]},{"Key":"suggestion -","Fragments":["you"]},{"Key":"could consider,","Fragments":["rather"]},{"Key":"consider, rather","Fragments":["than"]},{"Key":"functions at","Fragments":["the"]},{"Key":"top level,","Fragments":["defining"]},{"Key":"level, defining","Fragments":["the"]},{"Key":"defining the","Fragments":["helper","step","alphabets"]},{"Key":"a `letfn`","Fragments":["block","for"]},{"Key":"`letfn` block","Fragments":["inside"]},{"Key":"block inside","Fragments":["the"]},{"Key":"pass message","Fragments":["as"]},{"Key":"message as","Fragments":["an"]},{"Key":" \"we","Fragments":["tend"]},{"Key":"\"we tend","Fragments":["to"]},{"Key":"the literal\"","Fragments":["is"]},{"Key":"literal\" is","Fragments":["an"]},{"Key":"an interesting","Fragments":["point,","property","idea.","implementation.","implementation.","learning"]},{"Key":"interesting point,","Fragments":["because"]},{"Key":"point, because","Fragments":["often"]},{"Key":"because often","Fragments":["I"]},{"Key":"often I","Fragments":["try"]},{"Key":"the opposite:","Fragments":["`42"]},{"Key":"opposite: `42","Fragments":["=="]},{"Key":"`42 ==","Fragments":["var`,"]},{"Key":"== var`,","Fragments":["for"]},{"Key":"var`, for","Fragments":["the"]},{"Key":"the express","Fragments":["purpose"]},{"Key":"express purpose","Fragments":["of"]},{"Key":"of avoiding","Fragments":["the","to"]},{"Key":"the accidental","Fragments":["assignment"]},{"Key":"accidental assignment","Fragments":["`42"]},{"Key":"assignment `42","Fragments":["="]},{"Key":"`42 =","Fragments":["var`."]},{"Key":"= var`.","Fragments":["You"]},{"Key":"var`. You","Fragments":["can"]},{"Key":"this little","Fragments":["idiom"]},{"Key":"little idiom","Fragments":["made"]},{"Key":"idiom made","Fragments":["its"]},{"Key":"made its","Fragments":["way"]},{"Key":"its way","Fragments":["into"]},{"Key":"way into","Fragments":["a"]},{"Key":"of XUnit","Fragments":["test"]},{"Key":"XUnit test","Fragments":["frameworks"]},{"Key":"test frameworks","Fragments":["as"]},{"Key":"frameworks as","Fragments":["`assertEqual(expected,"]},{"Key":"as `assertEqual(expected,","Fragments":["actual)`."]},{"Key":"Since everything","Fragments":["is"]},{"Key":"everything is","Fragments":["immutable","in","in","in","contained"]},{"Key":"is immutable","Fragments":["in","and"]},{"Key":"immutable in","Fragments":["Clojure,"]},{"Key":"Clojure, I","Fragments":["can't","honestly"]},{"Key":"can't image","Fragments":["that"]},{"Key":"image that","Fragments":["contributing"]},{"Key":"that contributing","Fragments":["either"]},{"Key":"contributing either","Fragments":["way."]},{"Key":"way. :-)","Fragments":["I'd"]},{"Key":":-) I'd","Fragments":["say"]},{"Key":"say go","Fragments":["with"]},{"Key":"readable based","Fragments":["on"]},{"Key":"on spoken","Fragments":["language"]},{"Key":"spoken language","Fragments":["idioms."]},{"Key":"with @emmitt;","Fragments":["helper"]},{"Key":"@emmitt; helper","Fragments":["methods"]},{"Key":"are one","Fragments":["technique"]},{"Key":"one technique","Fragments":["that"]},{"Key":"technique that","Fragments":["helps"]},{"Key":"that helps","Fragments":["you"]},{"Key":"you express","Fragments":["your"]},{"Key":"express your","Fragments":["domain","\"chill"]},{"Key":"your domain","Fragments":["in"]},{"Key":"in code,","Fragments":["making"]},{"Key":"code, making","Fragments":["it"]},{"Key":"making it","Fragments":["easier","a","more"]},{"Key":"Two very","Fragments":["good"]},{"Key":"good suggestions,","Fragments":["thanks."]},{"Key":"suggestions, thanks.","Fragments":["I"]},{"Key":"thanks. I","Fragments":["was","wasn't","haven't"]},{"Key":"little recursion","Fragments":["happy,"]},{"Key":"recursion happy,","Fragments":["and"]},{"Key":"happy, and","Fragments":["filter"]},{"Key":"and filter","Fragments":["handled","the"]},{"Key":"filter handled","Fragments":["that"]},{"Key":"handled that","Fragments":["nicely"]},{"Key":"that nicely","Fragments":["for"]},{"Key":"nicely for","Fragments":["me.","the"]},{"Key":"the more-readable","Fragments":["but"]},{"Key":"more-readable but","Fragments":["more"]},{"Key":"but more","Fragments":["duplicative","difficult"]},{"Key":"more duplicative","Fragments":["version"]},{"Key":"duplicative version","Fragments":["of"]},{"Key":"initially tried","Fragments":["pulling"]},{"Key":"tried pulling","Fragments":["the"]},{"Key":"pulling the","Fragments":["bottles","negation","`cond`"]},{"Key":"bottles of","Fragments":["beer","beer\""]},{"Key":"beer permutations","Fragments":["into"]},{"Key":"permutations into","Fragments":["small"]},{"Key":"into small","Fragments":["methods,","predicate"]},{"Key":"small methods,","Fragments":["but"]},{"Key":"just felt","Fragments":["wrong."]},{"Key":"felt wrong.","Fragments":["There"]},{"Key":"wrong. There","Fragments":["were"]},{"Key":"There were","Fragments":["too","a","a"]},{"Key":"were too","Fragments":["many"]},{"Key":"many one-offs","Fragments":["to"]},{"Key":"one-offs to","Fragments":["make"]},{"Key":"the encapsulation","Fragments":["worth"]},{"Key":"encapsulation worth","Fragments":["it."]},{"Key":"like is","Fragments":["having"]},{"Key":"is having","Fragments":["to"]},{"Key":"to tack","Fragments":["the"]},{"Key":"tack the","Fragments":["\"\\n\""]},{"Key":"the \"\\n\"","Fragments":["on"]},{"Key":"\"\\n\" on","Fragments":["at"]},{"Key":"on at","Fragments":["the"]},{"Key":"very end","Fragments":["of"]},{"Key":"the sing","Fragments":["function."]},{"Key":"sing function.","Fragments":["But"]},{"Key":"function. But","Fragments":["I","what"]},{"Key":"find any","Fragments":["other"]},{"Key":"The very","Fragments":["first"]},{"Key":"first clojure","Fragments":["lines","program...","program,","program,","I","code,"]},{"Key":"clojure lines","Fragments":["in"]},{"Key":"No idea","Fragments":["why"]},{"Key":"why it","Fragments":["looks","wouldn't"]},{"Key":"know what's","Fragments":["going"]},{"Key":"on with","Fragments":["the"]},{"Key":"the formatting.","Fragments":["It"]},{"Key":"formatting. It","Fragments":["doesn't"]},{"Key":"my local","Fragments":["editor."]},{"Key":" @jamar","Fragments":["Thanks"]},{"Key":"@jamar Thanks","Fragments":["for"]},{"Key":"for feedback,","Fragments":["I"]},{"Key":"feedback, I","Fragments":["used"]},{"Key":"used `clojure.string.blank?`","Fragments":["in"]},{"Key":"`clojure.string.blank?` in","Fragments":["the"]},{"Key":"new version.","Fragments":["As","I"]},{"Key":"version. As","Fragments":["for"]},{"Key":"for `yelling?`","Fragments":["the"]},{"Key":"`yelling?` the","Fragments":["only"]},{"Key":"use `clojure.string`","Fragments":["i"]},{"Key":"`clojure.string` i","Fragments":["see"]},{"Key":"see is","Fragments":["to"]},{"Key":"to upcase","Fragments":["the"]},{"Key":"upcase the","Fragments":["string"]},{"Key":"to original","Fragments":["which"]},{"Key":"original which","Fragments":["I"]},{"Key":"not find","Fragments":["that","a"]},{"Key":"that awesome.","Fragments":["Sure"]},{"Key":"awesome. Sure","Fragments":["it"]},{"Key":"Sure it","Fragments":["works"]},{"Key":"works but","Fragments":["I","`(:require`"]},{"Key":"believe my","Fragments":["logic"]},{"Key":"my logic","Fragments":["with"]},{"Key":"logic with","Fragments":["very"]},{"Key":"with very","Fragments":["useful"]},{"Key":"useful generic","Fragments":["functor"]},{"Key":"generic functor","Fragments":["`all?`"]},{"Key":"functor `all?`","Fragments":["is"]},{"Key":"`all?` is","Fragments":["cleaner"]},{"Key":"is cleaner","Fragments":[":)","in"]},{"Key":"cleaner :)","Fragments":["But"]},{"Key":":) But","Fragments":["this"]},{"Key":"But this","Fragments":["is","reduces","nit","ordering"]},{"Key":"simple exercise","Fragments":["it"]},{"Key":"exercise it","Fragments":["does"]},{"Key":"matter that","Fragments":["much"]},{"Key":"something unusual","Fragments":["about"]},{"Key":"unusual about","Fragments":["the"]},{"Key":"whitespace you","Fragments":["used"]},{"Key":"used used","Fragments":["here?"]},{"Key":"used here?","Fragments":["The"]},{"Key":"here? The","Fragments":["code"]},{"Key":"doesn't format","Fragments":["properly,"]},{"Key":"format properly,","Fragments":["every"]},{"Key":"properly, every","Fragments":["word"]},{"Key":"every word","Fragments":["is"]},{"Key":"EDIT: nevermind,","Fragments":["it"]},{"Key":"nevermind, it","Fragments":["looks"]},{"Key":"a CSS","Fragments":["regression"]},{"Key":"CSS regression","Fragments":["that"]},{"Key":"regression that","Fragments":["interferes"]},{"Key":"that interferes","Fragments":["with"]},{"Key":"interferes with","Fragments":["the"]},{"Key":"the display","Fragments":["of"]},{"Key":"display of","Fragments":["Clojure"]},{"Key":" Super","Fragments":["duper.","readable."]},{"Key":"Super duper.","Fragments":["Thanks"]},{"Key":"duper. Thanks","Fragments":["gmorpheme!"]},{"Key":"You solution","Fragments":["works"]},{"Key":"solution works","Fragments":["well,","in"]},{"Key":"works well,","Fragments":["but"]},{"Key":"Clojure method","Fragments":["that","that"]},{"Key":"method that","Fragments":["will","does","uses","can"]},{"Key":"will do","Fragments":["the","that,"]},{"Key":"the bulk","Fragments":["of","of"]},{"Key":"bulk of","Fragments":["the","your"]},{"Key":"the `reduce`","Fragments":["/","/"]},{"Key":"`reduce` /","Fragments":["`assoc`","`merge-with`"]},{"Key":"/ `assoc`","Fragments":["/"]},{"Key":"`assoc` /","Fragments":["`inc`"]},{"Key":"/ `inc`","Fragments":["work"]},{"Key":"`inc` work","Fragments":["for"]},{"Key":"you. Check","Fragments":["out"]},{"Key":"out `words`","Fragments":["into"]},{"Key":"`words` into","Fragments":["its"]},{"Key":"own method","Fragments":["-"]},{"Key":"method -","Fragments":["that"]},{"Key":"it very","Fragments":["clear","intuitive","specific","readable,","easy"]},{"Key":"are reducing","Fragments":["on."]},{"Key":"your `reduce`","Fragments":["and"]},{"Key":"and `increment-word`","Fragments":["do."]},{"Key":"`increment-word` do.","Fragments":["Check"]},{"Key":"do. Check","Fragments":["out"]},{"Key":"use `defn-`","Fragments":["for","to","rather","for","more.","more...","to","to"]},{"Key":"don't want","Fragments":["other","to","to","to","to","exposed","to","to","an","to","to","to","to","that"]},{"Key":"want other","Fragments":["people"]},{"Key":"other people","Fragments":["to","use."]},{"Key":"people to","Fragments":["use.","stop"]},{"Key":"use `\\w+`","Fragments":["instead"]},{"Key":"`\\w+` instead","Fragments":["of"]},{"Key":"of `(\\w+)`,","Fragments":["then"]},{"Key":"`(\\w+)`, then","Fragments":["you"]},{"Key":"won't need","Fragments":["to","to","a"]},{"Key":"first item","Fragments":["from","in"]},{"Key":"item from","Fragments":["the"]},{"Key":"Your let","Fragments":["variable"]},{"Key":"let variable","Fragments":["`words`"]},{"Key":"variable `words`","Fragments":["in"]},{"Key":"`words` in","Fragments":["`words-from-phrase`"]},{"Key":"in `words-from-phrase`","Fragments":["is"]},{"Key":"`words-from-phrase` is","Fragments":["misleading"]},{"Key":"is misleading","Fragments":["-"]},{"Key":"misleading -","Fragments":["it"]},{"Key":"it isn't","Fragments":["words,","where",":)"]},{"Key":"isn't words,","Fragments":["it's"]},{"Key":"words, it's","Fragments":["just"]},{"Key":"the lowercased","Fragments":["string."]},{"Key":"lowercased string.","Fragments":["In"]},{"Key":"string. In","Fragments":["a"]},{"Key":"a similar","Fragments":["vein,","nitpick","approach,","level","convention","thing"]},{"Key":"similar vein,","Fragments":["`count-words`"]},{"Key":"vein, `count-words`","Fragments":["doesn't"]},{"Key":"`count-words` doesn't","Fragments":["really"]},{"Key":"really take","Fragments":["`words`,"]},{"Key":"take `words`,","Fragments":["it's"]},{"Key":"`words`, it's","Fragments":["something"]},{"Key":"complicated than","Fragments":["that.","just","that","it"]},{"Key":"`defn-` to","Fragments":["declare","define","avoid","avoid"]},{"Key":"declare your","Fragments":["helper"]},{"Key":"don't intend","Fragments":["for"]},{"Key":"intend for","Fragments":["other","that"]},{"Key":"of writing","Fragments":["out","clean","I","that"]},{"Key":"writing out","Fragments":["`clojure.string/method`,","such"]},{"Key":"out `clojure.string/method`,","Fragments":["you"]},{"Key":"`clojure.string/method`, you","Fragments":["can"]},{"Key":"and `:as`","Fragments":["options"]},{"Key":"`:as` options","Fragments":["to"]},{"Key":"options to","Fragments":["bring"]},{"Key":"to bring","Fragments":["it","this"]},{"Key":"bring it","Fragments":["in:"]},{"Key":" `response-for`","Fragments":["has"]},{"Key":"`response-for` has","Fragments":["a"]},{"Key":"a great-named","Fragments":["parameter,"]},{"Key":"great-named parameter,","Fragments":["I"]},{"Key":"parameter, I","Fragments":["think"]},{"Key":"The README","Fragments":["describes","refers","has"]},{"Key":"README describes","Fragments":["things"]},{"Key":"describes things","Fragments":["like"]},{"Key":"like \"yelling\"","Fragments":["and"]},{"Key":"\"yelling\" and","Fragments":["\"questioning\"."]},{"Key":"and \"questioning\".","Fragments":["You"]},{"Key":"\"questioning\". You","Fragments":["have"]},{"Key":"one predicate","Fragments":["method"]},{"Key":"that uses","Fragments":["this","the","a","alphagrams"]},{"Key":"uses this","Fragments":["terminology;"]},{"Key":"this terminology;","Fragments":["I"]},{"Key":"terminology; I","Fragments":["think"]},{"Key":"should create","Fragments":["similar"]},{"Key":"create similar","Fragments":["methods"]},{"Key":"similar methods","Fragments":["for"]},{"Key":"In Clojure,","Fragments":["it's","these","you","`nil`"]},{"Key":"Clojure, it's","Fragments":["customary"]},{"Key":"it's customary","Fragments":["to"]},{"Key":"customary to","Fragments":["name"]},{"Key":"name predicates","Fragments":["with"]},{"Key":"marks instead","Fragments":["of"]},{"Key":"of \"is\"","Fragments":["or"]},{"Key":"\"is\" or","Fragments":["\"are\":"]},{"Key":"or \"are\":","Fragments":["`question?`."]},{"Key":"\"are\": `question?`.","Fragments":["It"]},{"Key":"also usual","Fragments":["to"]},{"Key":"usual to","Fragments":["use"]},{"Key":"use dashes","Fragments":["for"]},{"Key":"dashes for","Fragments":["variables:"]},{"Key":"for variables:","Fragments":["`last-index`."]},{"Key":"Also, strings","Fragments":["can"]},{"Key":"of characters,","Fragments":["so"]},{"Key":"characters, so","Fragments":["there"]},{"Key":"simpler version","Fragments":["of"]},{"Key":"of `is-questions`","Fragments":["using"]},{"Key":"`is-questions` using","Fragments":["`last`."]},{"Key":"is perfectly","Fragments":["fine,","sensible","valid","fine,","fine,","fine"]},{"Key":"perfectly fine,","Fragments":["but","please","think"]},{"Key":"small things","Fragments":["I've","you"]},{"Key":"things I've","Fragments":["been"]},{"Key":"been taught","Fragments":["that"]},{"Key":"taught that","Fragments":["I'll"]},{"Key":"that I'll","Fragments":["take","probably"]},{"Key":"the opportunity","Fragments":["to"]},{"Key":"should refer","Fragments":["to"]},{"Key":"to `clojure.string`","Fragments":["as","namespace,"]},{"Key":"`clojure.string` as","Fragments":["`str`;"]},{"Key":"as `str`;","Fragments":["as"]},{"Key":"`str`; as","Fragments":["this"]},{"Key":"this allows","Fragments":["for","`str/lower-case`."]},{"Key":"for parallelism","Fragments":["with"]},{"Key":"parallelism with","Fragments":["the"]},{"Key":"also give","Fragments":["\"U\""]},{"Key":"give \"U\"","Fragments":["and"]},{"Key":"\"U\" and","Fragments":["\"T\""]},{"Key":"and \"T\"","Fragments":["expressive"]},{"Key":"\"T\" expressive","Fragments":["names"]},{"Key":"expressive names","Fragments":["to"]},{"Key":"code extremely","Fragments":["understandable."]},{"Key":" clojure.string","Fragments":["has","has","provides"]},{"Key":"the combination","Fragments":["of"]},{"Key":"combination of","Fragments":["`empty?`","`map`","`upper-case`","`map`"]},{"Key":"of `empty?`","Fragments":["and","instead."]},{"Key":"and `trim`","Fragments":["as"]},{"Key":"`trim` as","Fragments":["`blank?`."]},{"Key":"README refers","Fragments":["to"]},{"Key":"refers to","Fragments":["such"]},{"Key":"to such","Fragments":["concepts"]},{"Key":"such concepts","Fragments":["as"]},{"Key":"concepts as","Fragments":["\"question\""]},{"Key":"as \"question\"","Fragments":["and"]},{"Key":"\"question\" and","Fragments":["\"shouting\","]},{"Key":"and \"shouting\",","Fragments":["but"]},{"Key":"\"shouting\", but","Fragments":["these","this"]},{"Key":"but these","Fragments":["concepts"]},{"Key":"these concepts","Fragments":["are"]},{"Key":"concepts are","Fragments":["not"]},{"Key":"present in","Fragments":["the","a","a"]},{"Key":"code. Small","Fragments":["helper"]},{"Key":"Small helper","Fragments":["predicate"]},{"Key":"helper predicate","Fragments":["methods"]},{"Key":"methods would","Fragments":["be"]},{"Key":"of encoding","Fragments":["that."]},{"Key":"docs, \"Use","Fragments":[":use"]},{"Key":"\"Use :use","Fragments":["in"]},{"Key":"in preference","Fragments":["to"]},{"Key":"preference to","Fragments":["calling"]},{"Key":"to calling","Fragments":["[`use`]"]},{"Key":"calling [`use`]","Fragments":["directly`"]},{"Key":"Your `is-*`","Fragments":["methods"]},{"Key":"`is-*` methods","Fragments":["are"]},{"Key":"are confusing","Fragments":["to"]},{"Key":"confusing to","Fragments":["me.","someone"]},{"Key":"me. Normally,","Fragments":["methods"]},{"Key":"Normally, methods","Fragments":["named"]},{"Key":"methods named","Fragments":["like","with"]},{"Key":"named like","Fragments":["that"]},{"Key":"they return","Fragments":["a","non-nil","a"]},{"Key":"boolean value","Fragments":["(a","usually"]},{"Key":"value (a","Fragments":["predicate)."]},{"Key":"(a predicate).","Fragments":["In"]},{"Key":"predicate). In","Fragments":["Clojure,"]},{"Key":"Clojure, these","Fragments":["methods"]},{"Key":"these methods","Fragments":["use","can"]},{"Key":"methods use","Fragments":["question"]},{"Key":"use question","Fragments":["marks"]},{"Key":"marks instead:","Fragments":["`shouting?`."]},{"Key":"instead: `shouting?`.","Fragments":["However,"]},{"Key":"`shouting?`. However,","Fragments":["your"]},{"Key":"However, your","Fragments":["methods"]},{"Key":"methods return","Fragments":["a"]},{"Key":"string. Most","Fragments":["examples"]},{"Key":"Most examples","Fragments":["I've"]},{"Key":"examples I've","Fragments":["seen"]},{"Key":"seen use","Fragments":["predicate"]},{"Key":"methods, and","Fragments":["then"]},{"Key":"then let","Fragments":["`response-for`"]},{"Key":"let `response-for`","Fragments":["return"]},{"Key":"`response-for` return","Fragments":["the"]},{"Key":"appropriate string.","Fragments":["You"]},{"Key":"your \"respond\"","Fragments":["function,"]},{"Key":"\"respond\" function,","Fragments":["which"]},{"Key":"is unlike","Fragments":["the"]},{"Key":"unlike the","Fragments":["other"]},{"Key":"Your `is-shouting`","Fragments":["method"]},{"Key":"`is-shouting` method","Fragments":["has"]},{"Key":"method has","Fragments":["code"]},{"Key":"has code","Fragments":["that"]},{"Key":"seem necessary,","Fragments":["specifically"]},{"Key":"necessary, specifically","Fragments":["the"]},{"Key":"specifically the","Fragments":["\"not"]},{"Key":"the \"not","Fragments":["lowercase\""]},{"Key":"\"not lowercase\"","Fragments":["part"]},{"Key":" `is-silent`","Fragments":["has"]},{"Key":"`is-silent` has","Fragments":["a"]},{"Key":"a redundant","Fragments":["`nil`","space","space"]},{"Key":"redundant `nil`","Fragments":["for"]},{"Key":"`nil` for","Fragments":["the"]},{"Key":"else case.","Fragments":["As","For"]},{"Key":"case. As","Fragments":["you"]},{"Key":"use elsewhere,","Fragments":["nil"]},{"Key":"elsewhere, nil","Fragments":["is"]},{"Key":"an implicit","Fragments":["return","function"]},{"Key":"implicit return","Fragments":["for"]},{"Key":"return for","Fragments":["else."]},{"Key":"You trim","Fragments":["the"]},{"Key":"trim the","Fragments":["string","inputs."]},{"Key":"in `respond`","Fragments":["and"]},{"Key":"`respond` and","Fragments":["in"]},{"Key":"in `response-for`.","Fragments":["You"]},{"Key":"`response-for`. You","Fragments":["could","could"]},{"Key":"just combine","Fragments":["the"]},{"Key":"two methods.","Fragments":["You"]},{"Key":"methods. You","Fragments":["also","just"]},{"Key":"also don't","Fragments":["have"]},{"Key":"interop form","Fragments":["`.trim`,"]},{"Key":"form `.trim`,","Fragments":["`clojure.string/trim`"]},{"Key":"`.trim`, `clojure.string/trim`","Fragments":["exists."]},{"Key":"Your solution","Fragments":["works,","is","looks","looks"]},{"Key":"obvious way","Fragments":["of","of"]},{"Key":"of replacing","Fragments":["characters","characters","all"]},{"Key":"own opinion","Fragments":["and"]},{"Key":"opinion and","Fragments":["not","will"]},{"Key":"not necessarily","Fragments":["a","aware","clear","a"]},{"Key":"necessarily a","Fragments":["Clojure","bad"]},{"Key":"Clojure thing,","Fragments":["but"]},{"Key":"but variable","Fragments":["names"]},{"Key":"names like","Fragments":["`s`","`silence?`,","`pos`,","`yelling?`","\u003ccode\u003eyelling?\u003c/code\u003e","`yelling?`,","`every4`"]},{"Key":"like `s`","Fragments":["or"]},{"Key":"`s` or","Fragments":["`c`"]},{"Key":"or `c`","Fragments":["should"]},{"Key":"`c` should","Fragments":["be"]},{"Key":"be reserved","Fragments":["for","for"]},{"Key":"for extremely","Fragments":["generic"]},{"Key":"extremely generic","Fragments":["methods."]},{"Key":"generic methods.","Fragments":["I"]},{"Key":"that these","Fragments":["methods"]},{"Key":"methods can","Fragments":["apply"]},{"Key":"can apply","Fragments":["for","the"]},{"Key":"apply for","Fragments":["everything,"]},{"Key":"for everything,","Fragments":["so"]},{"Key":"everything, so","Fragments":["I"]},{"Key":"used something","Fragments":["more"]},{"Key":"domain-specific (gene,","Fragments":["genome,"]},{"Key":"(gene, genome,","Fragments":["etc...)."]},{"Key":"genome, etc...).","Fragments":["Unfortunately,"]},{"Key":"etc...). Unfortunately,","Fragments":["\"sequence\""]},{"Key":"Unfortunately, \"sequence\"","Fragments":["is"]},{"Key":"\"sequence\" is","Fragments":["a"]},{"Key":"Clojure term,","Fragments":["so"]},{"Key":"term, so","Fragments":["calling"]},{"Key":"so calling","Fragments":["it"]},{"Key":"it `dna-seq`","Fragments":["or"]},{"Key":"`dna-seq` or","Fragments":["`dna-sequence`","`sequence`?"]},{"Key":"or `dna-sequence`","Fragments":["might"]},{"Key":"`dna-sequence` might","Fragments":["be"]},{"Key":"create defines","Fragments":["for"]},{"Key":"defines for","Fragments":["`\\U`"]},{"Key":"for `\\U`","Fragments":["and"]},{"Key":"`\\U` and","Fragments":["`\\T`"]},{"Key":"and `\\T`","Fragments":["to"]},{"Key":"`\\T` to","Fragments":["better","`\\U`."]},{"Key":"better explain","Fragments":["what"]},{"Key":"they are.","Fragments":["The"]},{"Key":"are. The","Fragments":["character"]},{"Key":"The character","Fragments":["U"]},{"Key":"character U","Fragments":["is"]},{"Key":"U is","Fragments":["just","ok?"]},{"Key":"the encoding","Fragments":["of"]},{"Key":"encoding of","Fragments":["a"]},{"Key":"to @sylvan","Fragments":["for"]},{"Key":"@sylvan for","Fragments":["the"]},{"Key":"suggestion of","Fragments":["using","moving"]},{"Key":"are leveraging","Fragments":["`frequencies`,"]},{"Key":"leveraging `frequencies`,","Fragments":["can"]},{"Key":"`frequencies`, can","Fragments":["you"]},{"Key":"work -","Fragments":["separating"]},{"Key":"- separating","Fragments":["words"]},{"Key":"separating words","Fragments":["from"]},{"Key":"words from","Fragments":["the","the","the"]},{"Key":"phrase -","Fragments":["into"]},{"Key":"- into","Fragments":["a"]},{"Key":"a named","Fragments":["concept?","function,","function","var","var"]},{"Key":"I named","Fragments":["my","the"]},{"Key":"named my","Fragments":["function"]},{"Key":"function variables","Fragments":["vis."]},{"Key":"variables vis.","Fragments":["the"]},{"Key":"vis. the","Fragments":["domain"]},{"Key":"they apply","Fragments":["in."]},{"Key":"the \"more","Fragments":["obvious"]},{"Key":"\"more obvious","Fragments":["way"]},{"Key":"a string...\"","Fragments":["I"]},{"Key":"string...\" I","Fragments":["assume"]},{"Key":"library function","Fragments":["like","may","for"]},{"Key":"like `clojure.string/replace`?","Fragments":["The"]},{"Key":"`clojure.string/replace`? The","Fragments":["reason"]},{"Key":"route was","Fragments":["more"]},{"Key":"was more","Fragments":["for","important","about"]},{"Key":"more for","Fragments":["my"]},{"Key":"my benefit","Fragments":["than"]},{"Key":"benefit than","Fragments":["the"]},{"Key":"the reader's:","Fragments":["I"]},{"Key":"reader's: I","Fragments":["am"]},{"Key":"Clojure _and_","Fragments":["functional"]},{"Key":"_and_ functional","Fragments":["programming"]},{"Key":"and wanted","Fragments":["to"]},{"Key":"only core","Fragments":["functions"]},{"Key":"core functions","Fragments":["to","alone"]},{"Key":" thank","Fragments":["you"]},{"Key":" messing","Fragments":["up"]},{"Key":"messing up","Fragments":["`clojure/string`"]},{"Key":"up `clojure/string`","Fragments":["with"]},{"Key":"`clojure/string` with","Fragments":["`str`"]},{"Key":"with `str`","Fragments":["feels"]},{"Key":"`str` feels","Fragments":["really"]},{"Key":"feels really","Fragments":["strange","verbose."]},{"Key":"really strange","Fragments":["to"]},{"Key":"strange to","Fragments":["me"]},{"Key":"but looks","Fragments":["like","good","ugly."]},{"Key":"like even","Fragments":["official"]},{"Key":"even official","Fragments":["clojure"]},{"Key":"official clojure","Fragments":["documentation"]},{"Key":"clojure documentation","Fragments":["does"]},{"Key":"documentation does","Fragments":["it."]},{"Key":"Will also","Fragments":["abstract"]},{"Key":"also abstract","Fragments":["U/T"]},{"Key":"abstract U/T","Fragments":["as"]},{"Key":"U/T as","Fragments":["well,"]},{"Key":"well, thank","Fragments":["you."]},{"Key":"thank you.","Fragments":["I"]},{"Key":"you. I","Fragments":["was","just","dont"]},{"Key":"was surprised","Fragments":["with","you","not"]},{"Key":"surprised with","Fragments":["how"]},{"Key":"with how","Fragments":["simple","```count-words```","the","I've","many"]},{"Key":"how simple","Fragments":["this","and"]},{"Key":"simple this","Fragments":["exercise"]},{"Key":"is and","Fragments":["did"]},{"Key":"and did","Fragments":["not"]},{"Key":"not pay","Fragments":["attention"]},{"Key":"pay attention","Fragments":["to"]},{"Key":"1) Yep,","Fragments":["```defn-```"]},{"Key":"Yep, ```defn-```","Fragments":["would"]},{"Key":"```defn-``` would","Fragments":["be"]},{"Key":"2) Using","Fragments":["```(\\w+)```"]},{"Key":"Using ```(\\w+)```","Fragments":["was"]},{"Key":"```(\\w+)``` was","Fragments":["a"]},{"Key":"pain that","Fragments":["slipped"]},{"Key":"that slipped","Fragments":["by"]},{"Key":"slipped by","Fragments":["me."]},{"Key":" 3)","Fragments":["```words-in-phrase```"]},{"Key":"3) ```words-in-phrase```","Fragments":["doesn't"]},{"Key":"```words-in-phrase``` doesn't","Fragments":["really"]},{"Key":"a ```let```","Fragments":["block,"]},{"Key":"```let``` block,","Fragments":["I"]},{"Key":"block, I","Fragments":["think."]},{"Key":"think. As","Fragments":["for"]},{"Key":"for ```count-words```,","Fragments":["taking"]},{"Key":"```count-words```, taking","Fragments":["```words```,"]},{"Key":"taking ```words```,","Fragments":["I'm"]},{"Key":"```words```, I'm","Fragments":["not"]},{"Key":"the idea.","Fragments":["It"]},{"Key":"idea. It","Fragments":["feels"]},{"Key":"feels more","Fragments":["like","_clojure-y_:"]},{"Key":"a raw","Fragments":["histogram,"]},{"Key":"raw histogram,","Fragments":["but"]},{"Key":"histogram, but","Fragments":["I'm","decided"]},{"Key":"sure \"histogram\"","Fragments":["is"]},{"Key":"\"histogram\" is","Fragments":["right"]},{"Key":"is right","Fragments":["either."]},{"Key":" Aside","Fragments":["from"]},{"Key":"Aside from","Fragments":["that,"]},{"Key":"from that,","Fragments":["I'm","you","very"]},{"Key":"that, I'm","Fragments":["not"]},{"Key":"not completely","Fragments":["happy","understood","satisfied","connecting"]},{"Key":"completely happy","Fragments":["with"]},{"Key":"how ```count-words```","Fragments":["is"]},{"Key":"```count-words``` is","Fragments":["implemented."]},{"Key":"is implemented.","Fragments":["The"]},{"Key":"implemented. The","Fragments":["conversion"]},{"Key":"The conversion","Fragments":["between","to"]},{"Key":"conversion between","Fragments":["a"]},{"Key":"between a","Fragments":["hash","unique"]},{"Key":"hash and","Fragments":["a","just"]},{"Key":"list back","Fragments":["into"]},{"Key":"back into","Fragments":["a","a","string.","persistent"]},{"Key":"hash bothers","Fragments":["me."]},{"Key":"bothers me.","Fragments":["Any"]},{"Key":"me. Any","Fragments":["ideas?"]},{"Key":"Ah, `frequencies`!","Fragments":["I"]},{"Key":"`frequencies`! I","Fragments":["totally"]},{"Key":"totally forgot","Fragments":["about","about"]},{"Key":"when doing","Fragments":["this","the"]},{"Key":"this -","Fragments":["and"]},{"Key":"and what's","Fragments":["worse,"]},{"Key":"what's worse,","Fragments":["when"]},{"Key":"worse, when","Fragments":["doing"]},{"Key":"same problem","Fragments":["in"]},{"Key":"problem in","Fragments":["other","Clojure)","javascript;","other"]},{"Key":"other languages,","Fragments":["spent","is","so"]},{"Key":"languages, spent","Fragments":["time"]},{"Key":"spent time","Fragments":["grumbling"]},{"Key":"time grumbling","Fragments":["\"if"]},{"Key":"grumbling \"if","Fragments":["only"]},{"Key":"\"if only","Fragments":["this"]},{"Key":"only this","Fragments":["language"]},{"Key":"this language","Fragments":["had"]},{"Key":"language had","Fragments":["`frequencies`"]},{"Key":"had `frequencies`","Fragments":["like"]},{"Key":"`frequencies` like","Fragments":["Clojure....\""]},{"Key":"like Clojure....\"","Fragments":["-"]},{"Key":"Clojure....\" -","Fragments":["thanks"]},{"Key":"Your usage","Fragments":["of"]},{"Key":"of `condp`","Fragments":["could","interesting"]},{"Key":"`condp` could","Fragments":["be"]},{"Key":"with `case`.","Fragments":["Doesn't"]},{"Key":"`case`. Doesn't","Fragments":["make"]},{"Key":"Doesn't make","Fragments":["much"]},{"Key":"make much","Fragments":["of","sense.","difference","if","sense."]},{"Key":"difference though,","Fragments":["since"]},{"Key":"though, since","Fragments":["you"]},{"Key":"are only","Fragments":["matching","limited","just"]},{"Key":"only matching","Fragments":["two"]},{"Key":"matching two","Fragments":["constants."]},{"Key":"simpler and","Fragments":["likely","more","cleaner."]},{"Key":"likely more","Fragments":["performant"]},{"Key":"more performant","Fragments":["with","without"]},{"Key":"performant with","Fragments":["`frequencies`"]},{"Key":"It's always","Fragments":["nice","worthwhile"]},{"Key":"always nice","Fragments":["to"]},{"Key":"realize you","Fragments":["missed","had"]},{"Key":"you missed","Fragments":["a"]},{"Key":"missed a","Fragments":["function","chance"]},{"Key":"like ```frequencies```","Fragments":["and"]},{"Key":"```frequencies``` and","Fragments":["can"]},{"Key":"now simplify","Fragments":["your"]},{"Key":"good. Optionally,","Fragments":["you"]},{"Key":"implement this","Fragments":["with","more"]},{"Key":"with clojure.string","Fragments":["instead"]},{"Key":"of calling","Fragments":["directly","the","out","the","Java's"]},{"Key":"calling directly","Fragments":["into"]},{"Key":"directly into","Fragments":["Java."]},{"Key":"What to","Fragments":["do"]},{"Key":"do if","Fragments":["the","you"]},{"Key":"DNA string","Fragments":["is"]},{"Key":"correct format?","Fragments":["This"]},{"Key":"format? This","Fragments":["code"]},{"Key":"even try","Fragments":["to"]},{"Key":"to address","Fragments":["that.","the"]},{"Key":":) Yeah...","Fragments":["I"]},{"Key":"Yeah... I","Fragments":["sometimes"]},{"Key":"I sometimes","Fragments":["feel","wonder"]},{"Key":"sometimes feel","Fragments":["dirty"]},{"Key":"dirty reaching","Fragments":["into"]},{"Key":"reaching into","Fragments":["Java."]},{"Key":"into Java.","Fragments":["Whenever"]},{"Key":"Java. Whenever","Fragments":["possible,"]},{"Key":"Whenever possible,","Fragments":["I"]},{"Key":"possible, I","Fragments":["try"]},{"Key":"to remain","Fragments":["in"]},{"Key":"remain in","Fragments":["the"]},{"Key":"Clojure APIs.","Fragments":["I"]},{"Key":"APIs. I","Fragments":["updated"]},{"Key":"Yeah, the","Fragments":["private"]},{"Key":"bit complex","Fragments":["to"]},{"Key":"complex to","Fragments":["be"]},{"Key":"be one-liners.","Fragments":["But"]},{"Key":"one-liners. But","Fragments":["I"]},{"Key":"still like","Fragments":["having","the"]},{"Key":"them at","Fragments":["the"]},{"Key":"top rather","Fragments":["than"]},{"Key":":) yep","Fragments":["it"]},{"Key":"yep it","Fragments":["needs"]},{"Key":"it needs","Fragments":["more","to,","to"]},{"Key":"needs more","Fragments":["white"]},{"Key":"more white","Fragments":["spaces"]},{"Key":"white spaces","Fragments":["there."]},{"Key":"the tips","Fragments":["@adelbert.","@elroy"]},{"Key":" @mittie","Fragments":["good"]},{"Key":"@mittie good","Fragments":["catch!"]},{"Key":" Trying","Fragments":["to","out"]},{"Key":"Trying to","Fragments":["make","find"]},{"Key":"it less","Fragments":["inefficient..."]},{"Key":"less inefficient...","Fragments":["starting"]},{"Key":"inefficient... starting","Fragments":["to"]},{"Key":" @jaiden","Fragments":["see"]},{"Key":"@jaiden see","Fragments":["my"]},{"Key":"see my","Fragments":["comment","previous","solution"]},{"Key":"on previous","Fragments":["submission!","feedback:","feedback","feedback"]},{"Key":" @tobin","Fragments":["that"]},{"Key":"@tobin that","Fragments":["approach"]},{"Key":"that approach","Fragments":["sounds"]},{"Key":"approach sounds","Fragments":["awesome,"]},{"Key":"sounds awesome,","Fragments":["gonna"]},{"Key":"awesome, gonna","Fragments":["give"]},{"Key":"gonna give","Fragments":["it"]},{"Key":"a go.","Fragments":["I"]},{"Key":"a crazy","Fragments":["amount"]},{"Key":"crazy amount","Fragments":["from"]},{"Key":"amount from","Fragments":["your"]},{"Key":"your single","Fragments":["nitpick."]},{"Key":"single nitpick.","Fragments":["Thank"]},{"Key":"nitpick. Thank","Fragments":["you!"]},{"Key":"Yeah ,","Fragments":["I"]},{"Key":", I","Fragments":["don't","try","will","have"]},{"Key":"my method","Fragments":["name"]},{"Key":"method name","Fragments":["`is-anagram?","character."]},{"Key":"name `is-anagram?","Fragments":["`"]},{"Key":"`is-anagram? `","Fragments":["but"]},{"Key":"` but","Fragments":["I"]},{"Key":"I didn'","Fragments":["t"]},{"Key":"didn' t","Fragments":["see"]},{"Key":"t see","Fragments":["another"]},{"Key":"see another","Fragments":["one"]},{"Key":"another one","Fragments":["better.","at"]},{"Key":"for comments","Fragments":["@efrain"]},{"Key":" Being","Fragments":["a"]},{"Key":"Being a","Fragments":["private"]},{"Key":"the variable/docs","Fragments":["appropriately,"]},{"Key":"variable/docs appropriately,","Fragments":["makes"]},{"Key":"appropriately, makes","Fragments":["it"]},{"Key":"it easy","Fragments":["to","to"]},{"Key":"avoid problems","Fragments":["with"]},{"Key":"`word` over","Fragments":["and"]},{"Key":"over in","Fragments":["the","the"]},{"Key":"the `filter`","Fragments":["phase.","is"]},{"Key":" @kayden","Fragments":["how"]},{"Key":"@kayden how","Fragments":["does"]},{"Key":"how does","Fragments":["this","this"]},{"Key":"this look","Fragments":["to"]},{"Key":"look to","Fragments":["you?","validate","[preconditions](http://onclojure.com/2010/03/05/pre-and-post-conditions-a-quest-for-a-nicer-syntax/)"]},{"Key":"making part","Fragments":["of"]},{"Key":"functions non-public","Fragments":["but"]},{"Key":"non-public but","Fragments":["other"]},{"Key":"but other","Fragments":["than","than","then"]},{"Key":"This does","Fragments":["call","not"]},{"Key":"does call","Fragments":["lower-case"]},{"Key":"call lower-case","Fragments":["more"]},{"Key":"lower-case more","Fragments":["times"]},{"Key":"more times","Fragments":["than","than"]},{"Key":"times than","Fragments":["it","necessary."]},{"Key":"needs to,","Fragments":["but"]},{"Key":"fully follow","Fragments":["your"]},{"Key":"your reasoning","Fragments":["about"]},{"Key":"reasoning about","Fragments":["using"]},{"Key":"using vector","Fragments":["but"]},{"Key":"vector but","Fragments":["I"]},{"Key":"won't argue","Fragments":[":)"]},{"Key":"1) While","Fragments":["you"]},{"Key":"use ```Java.String```,","Fragments":["it"]},{"Key":"```Java.String```, it","Fragments":["would"]},{"Key":"use ```clojure.string```.","Fragments":["In"]},{"Key":"```clojure.string```. In","Fragments":["particular,"]},{"Key":"In particular,","Fragments":["look","look"]},{"Key":"particular, look","Fragments":["at","at"]},{"Key":"at ```blank?```","Fragments":["and"]},{"Key":"```blank?``` and","Fragments":["```upper-case```"]},{"Key":"2) What","Fragments":["about"]},{"Key":"about breaking","Fragments":["the"]},{"Key":"```cond``` into","Fragments":["some"]},{"Key":"some predicate","Fragments":["methods?"]},{"Key":"1. You","Fragments":["could"]},{"Key":"in places","Fragments":["where"]},{"Key":"places where","Fragments":["you","the","we"]},{"Key":"where you","Fragments":["interleave","are","do","set","have","map","define","can't","return","have","might"]},{"Key":"you interleave","Fragments":["forms"]},{"Key":"interleave forms","Fragments":["with"]},{"Key":"forms with","Fragments":["strings"]},{"Key":"strings by","Fragments":["creating"]},{"Key":"by creating","Fragments":["bindings","bindings","a"]},{"Key":"enclosing scope","Fragments":["-"]},{"Key":"scope -","Fragments":["so"]},{"Key":"don't pass","Fragments":["`n`"]},{"Key":"pass `n`","Fragments":["to"]},{"Key":"`n` to","Fragments":["every"]},{"Key":"of `bottle`","Fragments":["or"]},{"Key":"`bottle` or","Fragments":["`one-or-it`"]},{"Key":"or `one-or-it`","Fragments":["inside"]},{"Key":"`one-or-it` inside","Fragments":["string"]},{"Key":"inside string","Fragments":["building"]},{"Key":"string building","Fragments":["form."]},{"Key":"2. A","Fragments":["bit"]},{"Key":"much things","Fragments":["crammed"]},{"Key":"things crammed","Fragments":["into"]},{"Key":"crammed into","Fragments":["a","`number`","the"]},{"Key":"single line;","Fragments":["you"]},{"Key":"line; you","Fragments":["could"]},{"Key":"proper indentation","Fragments":["and"]},{"Key":"indentation and","Fragments":["maybe"]},{"Key":"maybe give","Fragments":["some"]},{"Key":"give some","Fragments":["intermediate","domain","context,","indication","visual","variables.","clarity"]},{"Key":"some intermediate","Fragments":["bindings"]},{"Key":"intermediate bindings","Fragments":["with"]},{"Key":"intent more","Fragments":["clear.","clearly,","clear.","clear.","clear.","clearly"]},{"Key":"3. I","Fragments":["generally","named","have"]},{"Key":"I generally","Fragments":["prefer","don't","find","either"]},{"Key":"generally prefer","Fragments":["putting"]},{"Key":"api at","Fragments":["the"]},{"Key":"top of","Fragments":["the","the","the","the","normalize","my","the"]},{"Key":"file starting","Fragments":["from"]},{"Key":"from highest","Fragments":["level"]},{"Key":"abstraction inside","Fragments":["public"]},{"Key":"inside public","Fragments":["and"]},{"Key":"public and","Fragments":["non-public","more"]},{"Key":"and non-public","Fragments":["parts."]},{"Key":"non-public parts.","Fragments":["`declare`"]},{"Key":"parts. `declare`","Fragments":["may"]},{"Key":"`declare` may","Fragments":["help","help"]},{"Key":"will want","Fragments":["to"]},{"Key":"that refactoring","Fragments":["at"]},{"Key":"refactoring at","Fragments":["all."]},{"Key":"4. Indentation","Fragments":["inside"]},{"Key":"Indentation inside","Fragments":["the"]},{"Key":"`cond` in","Fragments":["`second-couplet`","`number`.","`change-letter`","`bottles`.","`formatted-bottles`"]},{"Key":"in `second-couplet`","Fragments":["function"]},{"Key":"`second-couplet` function","Fragments":["is"]},{"Key":"bit non-standard,","Fragments":["but"]},{"Key":"non-standard, but","Fragments":["that's"]},{"Key":"just minor,","Fragments":["subjective"]},{"Key":"minor, subjective","Fragments":["nit."]},{"Key":" `#\"\\w+\"`","Fragments":["is"]},{"Key":"`#\"\\w+\"` is","Fragments":["a"]},{"Key":"bit shorter","Fragments":["pattern","for","and","in"]},{"Key":"shorter pattern","Fragments":["for"]},{"Key":"pattern for","Fragments":["alphanumeric"]},{"Key":"for alphanumeric","Fragments":["sequences."]},{"Key":"alphanumeric sequences.","Fragments":["Other"]},{"Key":"sequences. Other","Fragments":["than"]},{"Key":" @michele","Fragments":["-"]},{"Key":"@michele -","Fragments":["you"]},{"Key":"are correct","Fragments":["the","and"]},{"Key":"`vec` was","Fragments":["not"]},{"Key":"not needed.","Fragments":["I","To"]},{"Key":"needed. I","Fragments":["remember"]},{"Key":"I remember","Fragments":["needing","reading","seeing","@bartholome"]},{"Key":"remember needing","Fragments":["it"]},{"Key":"needing it","Fragments":["at"]},{"Key":"point -","Fragments":["probably"]},{"Key":"- probably","Fragments":["became","some"]},{"Key":"probably became","Fragments":["superfluous"]},{"Key":"became superfluous","Fragments":["during"]},{"Key":"superfluous during","Fragments":["a"]},{"Key":"during a","Fragments":["code"]},{"Key":"a code","Fragments":["change."]},{"Key":" Re:","Fragments":["parentheses,","the","lowercasing","the"]},{"Key":"Re: parentheses,","Fragments":["I"]},{"Key":"parentheses, I","Fragments":["always"]},{"Key":"always used","Fragments":["to"]},{"Key":"of typing","Fragments":["the"]},{"Key":"typing the","Fragments":["closing","closing","previous"]},{"Key":"parenthesis immediately","Fragments":["after"]},{"Key":"immediately after","Fragments":["the","the"]},{"Key":"opening one,","Fragments":["which"]},{"Key":"one, which","Fragments":["lends"]},{"Key":"which lends","Fragments":["itself"]},{"Key":"lends itself","Fragments":["well"]},{"Key":"itself well","Fragments":["to"]},{"Key":"well to","Fragments":["then"]},{"Key":"to then","Fragments":["putting"]},{"Key":"then putting","Fragments":["it"]},{"Key":"putting it","Fragments":["on","inside"]},{"Key":"it on","Fragments":["the"]},{"Key":"using indentation","Fragments":["like"]},{"Key":"indentation like","Fragments":["you"]},{"Key":"your two","Fragments":["`defn`s."]},{"Key":" HOWEVER.","Fragments":["Most"]},{"Key":"HOWEVER. Most","Fragments":["editors"]},{"Key":"Most editors","Fragments":["(I"]},{"Key":"editors (I","Fragments":["use"]},{"Key":"(I use","Fragments":["vim"]},{"Key":"use vim","Fragments":["with"]},{"Key":"vim with","Fragments":["vim-clojure)"]},{"Key":"with vim-clojure)","Fragments":["will"]},{"Key":"vim-clojure) will","Fragments":["highlight"]},{"Key":"highlight the","Fragments":["matching"]},{"Key":"the matching","Fragments":["opening","and"]},{"Key":"matching opening","Fragments":["parenthesis"]},{"Key":"opening parenthesis","Fragments":["when"]},{"Key":"parenthesis when","Fragments":["you"]},{"Key":"you close","Fragments":["it"]},{"Key":"close it","Fragments":["so"]},{"Key":"see where","Fragments":["you're","in"]},{"Key":"you're up","Fragments":["to,"]},{"Key":"up to,","Fragments":["so"]},{"Key":"to, so","Fragments":["there's"]},{"Key":"real need","Fragments":["to"]},{"Key":"this. Some","Fragments":["even"]},{"Key":"Some even","Fragments":["do"]},{"Key":"do \"rainbow\"","Fragments":["parens"]},{"Key":"\"rainbow\" parens","Fragments":["too."]},{"Key":"parens too.","Fragments":["So"]},{"Key":"too. So","Fragments":["one"]},{"Key":"So one","Fragments":["day"]},{"Key":"one day","Fragments":["I"]},{"Key":"day I","Fragments":["tried"]},{"Key":"tried not","Fragments":["typing"]},{"Key":"not typing","Fragments":["the"]},{"Key":"parentheses until","Fragments":["I"]},{"Key":"got to","Fragments":["the","learn"]},{"Key":"function definition,","Fragments":["and..."]},{"Key":" ...there","Fragments":["are"]},{"Key":"...there are","Fragments":["few"]},{"Key":"are few","Fragments":["more"]},{"Key":"few more","Fragments":["satisfying","of","things","edge"]},{"Key":"more satisfying","Fragments":["pleasures"]},{"Key":"satisfying pleasures","Fragments":["in"]},{"Key":"pleasures in","Fragments":["life"]},{"Key":"in life","Fragments":["than"]},{"Key":"life than","Fragments":["completing"]},{"Key":"than completing","Fragments":["the"]},{"Key":"completing the","Fragments":["writing"]},{"Key":"the writing","Fragments":["of"]},{"Key":"writing of","Fragments":["a"]},{"Key":"the repeated,","Fragments":["staccato,"]},{"Key":"repeated, staccato,","Fragments":["BAM"]},{"Key":"staccato, BAM","Fragments":["BAM"]},{"Key":"BAM BAM","Fragments":["BAM","of"]},{"Key":"BAM of","Fragments":["closing"]},{"Key":"closing parenthesis,","Fragments":["closing","closing"]},{"Key":"parenthesis, closing","Fragments":["parenthesis,","parenthesis!"]},{"Key":"closing parenthesis!","Fragments":[":-D"]},{"Key":"the little","Fragments":["things.","wrappers"]},{"Key":"1. Line","Fragments":["6"]},{"Key":"Line 6","Fragments":["can"]},{"Key":"6 can","Fragments":["be"]},{"Key":"be simply","Fragments":["rewritten","`:last-name`."]},{"Key":"simply rewritten","Fragments":["as"]},{"Key":"rewritten as","Fragments":["`(sort"]},{"Key":"as `(sort","Fragments":["(lower-case"]},{"Key":"`(sort (lower-case","Fragments":["word))`","word))`"]},{"Key":"(lower-case word))`","Fragments":["-","twice."]},{"Key":"word))` -","Fragments":["a"]},{"Key":"by sequence","Fragments":["related"]},{"Key":"related functions.","Fragments":["Not","They"]},{"Key":"functions. Not","Fragments":["need"]},{"Key":"Not need","Fragments":["to"]},{"Key":"join it","Fragments":["back"]},{"Key":"it back","Fragments":["for","into","to"]},{"Key":"back for","Fragments":["equality"]},{"Key":"2. Regarding","Fragments":["line","the"]},{"Key":"Regarding line","Fragments":["14"]},{"Key":"14 -","Fragments":["there's"]},{"Key":"there's `not=`","Fragments":["that"]},{"Key":"`not=` that","Fragments":["can","I"]},{"Key":"can spare","Fragments":["you","the","the"]},{"Key":"3. Please","Fragments":["stay"]},{"Key":"Please stay","Fragments":["consistent"]},{"Key":"stay consistent","Fragments":["with"]},{"Key":"with naming","Fragments":["-"]},{"Key":"- lowercase,","Fragments":["hyphen"]},{"Key":"lowercase, hyphen","Fragments":["delimited"]},{"Key":"hyphen delimited","Fragments":["names"]},{"Key":"delimited names","Fragments":["are"]},{"Key":"standard -","Fragments":["`sort-word`"]},{"Key":"- `sort-word`","Fragments":["is"]},{"Key":"`sort-word` is","Fragments":["more"]},{"Key":"4. Generally,","Fragments":["indent"]},{"Key":"Generally, indent","Fragments":["of"]},{"Key":"spaces is","Fragments":["standard","conventional"]},{"Key":"is standard","Fragments":["in"]},{"Key":" 5.","Fragments":["`use`","You"]},{"Key":"5. `use`","Fragments":["is"]},{"Key":"generally deprecated.","Fragments":["Besides"]},{"Key":"deprecated. Besides","Fragments":["a"]},{"Key":"Besides a","Fragments":["keyword"]},{"Key":"keyword form","Fragments":["is","of"]},{"Key":"more standard","Fragments":["when","than"]},{"Key":"standard when","Fragments":["used"]},{"Key":"when used","Fragments":["inside"]},{"Key":"used inside","Fragments":["`ns`"]},{"Key":"`ns` form.","Fragments":["The","It"]},{"Key":"form. The","Fragments":["more","map"]},{"Key":"more correct","Fragments":["`ns`"]},{"Key":"correct `ns`","Fragments":["for"]},{"Key":"`ns` for","Fragments":["would"]},{"Key":"for would","Fragments":["look"]},{"Key":":refer [join","Fragments":["lower-case]]))"]},{"Key":" 6.","Fragments":["There","Lazy"]},{"Key":"6. There","Fragments":["are"]},{"Key":"some redundant","Fragments":["whitespace"]},{"Key":"redundant whitespace","Fragments":["chars"]},{"Key":"whitespace chars","Fragments":["spread"]},{"Key":"chars spread","Fragments":["inside"]},{"Key":"spread inside","Fragments":["forms."]},{"Key":"good. Some","Fragments":["minor"]},{"Key":"Some minor","Fragments":["nits:"]},{"Key":"1. A","Fragments":["keyword"]},{"Key":"A keyword","Fragments":["`:require`"]},{"Key":"keyword `:require`","Fragments":["is"]},{"Key":"`:require` is","Fragments":["more","not"]},{"Key":"appropriate inside","Fragments":["`ns`"]},{"Key":"2. Non-public","Fragments":["functions,"]},{"Key":"Non-public functions,","Fragments":["although"]},{"Key":"although looking","Fragments":["compact"]},{"Key":"looking compact","Fragments":["as"]},{"Key":"compact as","Fragments":["one-liners,"]},{"Key":"as one-liners,","Fragments":["would"]},{"Key":"one-liners, would","Fragments":["better"]},{"Key":"would better","Fragments":["be","define"]},{"Key":"better be","Fragments":["formatted"]},{"Key":"be formatted","Fragments":["as"]},{"Key":"formatted as","Fragments":["other"]},{"Key":"more elaborate","Fragments":["bodies"]},{"Key":"elaborate bodies","Fragments":["with"]},{"Key":"bodies with","Fragments":["blank"]},{"Key":"with blank","Fragments":["lines"]},{"Key":"blank lines","Fragments":["between"]},{"Key":"lines between","Fragments":["them."]},{"Key":"3. To","Fragments":["keep"]},{"Key":"To keep","Fragments":["the","it","it","the"]},{"Key":"api near","Fragments":["the"]},{"Key":"near the","Fragments":["top,"]},{"Key":"the top,","Fragments":["you"]},{"Key":"top, you","Fragments":["can"]},{"Key":"can reorder","Fragments":["function"]},{"Key":"reorder function","Fragments":["definitions"]},{"Key":" `(map","Fragments":["…"]},{"Key":"`(map …","Fragments":["gene1"]},{"Key":"… gene1","Fragments":["gene2)`"]},{"Key":"gene1 gene2)`","Fragments":["where"]},{"Key":"gene2)` where","Fragments":["`…`"]},{"Key":"where `…`","Fragments":["is"]},{"Key":"`…` is","Fragments":["a"]},{"Key":"returns an","Fragments":["appropriate"]},{"Key":"an appropriate","Fragments":["boolean","function"]},{"Key":"appropriate boolean","Fragments":["given"]},{"Key":"boolean given","Fragments":["two"]},{"Key":"given two","Fragments":["arguments"]},{"Key":"arguments could","Fragments":["make"]},{"Key":"this much","Fragments":["simpler.","simpler","more:"]},{"Key":"much simpler.","Fragments":["You'll"]},{"Key":"simpler. You'll","Fragments":["find"]},{"Key":"You'll find","Fragments":["an"]},{"Key":"appropriate function","Fragments":["in","private."]},{"Key":" @therese","Fragments":["I"]},{"Key":"@therese I","Fragments":["am"]},{"Key":"am going","Fragments":["to","to"]},{"Key":"like \"Have","Fragments":["a"]},{"Key":"\"Have a","Fragments":["look"]},{"Key":"at `core.frequencies`","Fragments":["to"]},{"Key":"`core.frequencies` to","Fragments":["see"]},{"Key":"efficient with","Fragments":["transient"]},{"Key":"with transient","Fragments":["data"]},{"Key":"transient data","Fragments":["structures\".","structure?"]},{"Key":"data structures\".","Fragments":["Thank"]},{"Key":"structures\". Thank","Fragments":["you"]},{"Key":"I'd expect","Fragments":["to","to"]},{"Key":"expect to","Fragments":["see","see","see","see","be"]},{"Key":"more whitespace","Fragments":["in"]},{"Key":"in `anagrams`,","Fragments":["`#(=(sort-word"]},{"Key":"`anagrams`, `#(=(sort-word","Fragments":["%)(sort-word"]},{"Key":"`#(=(sort-word %)(sort-word","Fragments":["word))`"]},{"Key":"%)(sort-word word))`","Fragments":["looks"]},{"Key":"word))` looks","Fragments":["really"]},{"Key":"really crowded","Fragments":["to"]},{"Key":"crowded to","Fragments":["me."]},{"Key":"also not","Fragments":["conventional","work","sure","sure","sure","sure","sure","sure"]},{"Key":"not conventional","Fragments":["to"]},{"Key":"conventional to","Fragments":["have"]},{"Key":"have commas,","Fragments":["I'd"]},{"Key":"commas, I'd","Fragments":["expect"]},{"Key":"see `[word","Fragments":["candidates]`"]},{"Key":"`[word candidates]`","Fragments":["instead"]},{"Key":"candidates]` instead","Fragments":["of"]},{"Key":"of `[word,","Fragments":["candidates]`."]},{"Key":"case normalized","Fragments":["comparison","version"]},{"Key":"normalized comparison","Fragments":["for"]},{"Key":"comparison for","Fragments":["`#(not=","ASCII"]},{"Key":"for `#(not=","Fragments":["%"]},{"Key":"`#(not= %","Fragments":["word)`,"]},{"Key":"% word)`,","Fragments":["even"]},{"Key":"word)`, even","Fragments":["though"]},{"Key":"cases don't","Fragments":["currently"]},{"Key":"don't currently","Fragments":["require"]},{"Key":"currently require","Fragments":["this"]},{"Key":"require this","Fragments":["to"]},{"Key":"It's possible","Fragments":["to"]},{"Key":"more efficient.","Fragments":["Ideally"]},{"Key":"efficient. Ideally","Fragments":["you"]},{"Key":"Ideally you","Fragments":["would"]},{"Key":"would only","Fragments":["transform","keep","be","be"]},{"Key":"only transform","Fragments":["the"]},{"Key":"transform the","Fragments":["given","string"]},{"Key":"the given","Fragments":["`word`","algorithm","tests,","tests)","order.","parameter","function.","index.","key.","unit","argument","test","outputs."]},{"Key":"given `word`","Fragments":["once,"]},{"Key":"`word` once,","Fragments":["as-is"]},{"Key":"once, as-is","Fragments":["it"]},{"Key":"as-is it","Fragments":["will"]},{"Key":"will lower-case","Fragments":["and","the"]},{"Key":"lower-case and","Fragments":["sort","alpha"]},{"Key":"and sort","Fragments":["it"]},{"Key":"sort it","Fragments":["N"]},{"Key":"it N","Fragments":["times."]},{"Key":" @esteban","Fragments":["gah!"]},{"Key":"@esteban gah!","Fragments":["If"]},{"Key":"gah! If","Fragments":["I"]},{"Key":"had stopped","Fragments":["to"]},{"Key":"stopped to","Fragments":["think"]},{"Key":"was creating","Fragments":["my"]},{"Key":"creating my","Fragments":["pairs,"]},{"Key":"my pairs,","Fragments":["that"]},{"Key":"pairs, that","Fragments":["would"]},{"Key":"been obvious.","Fragments":["Thanks"]},{"Key":"obvious. Thanks","Fragments":["for"]},{"Key":"the gentle","Fragments":["kick."]},{"Key":"gentle kick.","Fragments":[":-)"]},{"Key":" Wanted","Fragments":["to"]},{"Key":"Wanted to","Fragments":["try"]},{"Key":"try some","Fragments":["piping","of"]},{"Key":"some piping","Fragments":["after"]},{"Key":"piping after","Fragments":["that"]},{"Key":"after that","Fragments":["feeling","point),"]},{"Key":"that feeling","Fragments":["like"]},{"Key":"feeling like","Fragments":["quite"]},{"Key":"like quite","Fragments":["a"]},{"Key":"nice pattern","Fragments":["in"]},{"Key":"the elixir","Fragments":["exercises,"]},{"Key":"elixir exercises,","Fragments":["and"]},{"Key":"exercises, and","Fragments":["also"]},{"Key":"also function","Fragments":["composition"]},{"Key":"function composition","Fragments":["not","with","more","of"]},{"Key":"composition not","Fragments":["feeling"]},{"Key":"not feeling","Fragments":["quite"]},{"Key":"feeling quite","Fragments":["as"]},{"Key":"quite as","Fragments":["nice","good","clear"]},{"Key":"nice in","Fragments":["clojure","Clojure,","this"]},{"Key":"clojure as","Fragments":["it","well,"]},{"Key":"does in","Fragments":["Haskell,","`word-count`"]},{"Key":"in Haskell,","Fragments":["with","Python","and"]},{"Key":"Haskell, with","Fragments":["the"]},{"Key":"the relative","Fragments":["clumsiness"]},{"Key":"relative clumsiness","Fragments":["of"]},{"Key":"clumsiness of","Fragments":["`comp`."]},{"Key":"result works","Fragments":["better"]},{"Key":"works better","Fragments":["here"]},{"Key":"better here","Fragments":["in"]},{"Key":"in `words`","Fragments":["than","or"]},{"Key":"`words` than","Fragments":["it"]},{"Key":"in `word-count`","Fragments":["-"]},{"Key":"`word-count` -","Fragments":["I'd"]},{"Key":"- I'd","Fragments":["be"]},{"Key":"be tempted","Fragments":["to"]},{"Key":"tempted to","Fragments":["rewrite"]},{"Key":"to rewrite","Fragments":["`word-count`","to","`silence?`?","it"]},{"Key":"rewrite `word-count`","Fragments":["as"]},{"Key":"`word-count` as","Fragments":["I"]},{"Key":"to talk","Fragments":["about"]},{"Key":"talk about","Fragments":["returning"]},{"Key":"the \"frequencies","Fragments":["of"]},{"Key":"\"frequencies of","Fragments":["the"]},{"Key":"words in","Fragments":["the","a"]},{"Key":"the phrase\"","Fragments":["rather"]},{"Key":"phrase\" rather","Fragments":["than"]},{"Key":"than \"piping","Fragments":["the"]},{"Key":"\"piping the","Fragments":["phrase"]},{"Key":"phrase through","Fragments":["words"]},{"Key":"through words","Fragments":["then"]},{"Key":"words then","Fragments":["frequencies\"."]},{"Key":"I realize","Fragments":["there's","that","that","I"]},{"Key":"realize there's","Fragments":["some"]},{"Key":"some inefficiency","Fragments":["in"]},{"Key":"inefficiency in","Fragments":["calculating"]},{"Key":"in calculating","Fragments":["the"]},{"Key":"the alphagram","Fragments":["of","for","is","of"]},{"Key":"alphagram of","Fragments":["the","the"]},{"Key":"each choice","Fragments":["that"]},{"Key":"choice that","Fragments":["needs"]},{"Key":"be checked,","Fragments":["but"]},{"Key":"checked, but","Fragments":["I"]},{"Key":"was worth","Fragments":["it","submitting"]},{"Key":"the greater","Fragments":["clarity"]},{"Key":"greater clarity","Fragments":["and"]},{"Key":"clarity and","Fragments":["simplicity"]},{"Key":"and simplicity","Fragments":["of"]},{"Key":"this still","Fragments":["correct?"]},{"Key":"still correct?","Fragments":["I"]},{"Key":"correct? I","Fragments":["am"]},{"Key":"sure `#(not-same?","Fragments":["%"]},{"Key":"`#(not-same? %","Fragments":["sorted-word)`"]},{"Key":"% sorted-word)`","Fragments":["does"]},{"Key":"sorted-word)` does","Fragments":["the"]},{"Key":"also normally","Fragments":["expect"]},{"Key":"normally expect","Fragments":["to"]},{"Key":"the \"most","Fragments":["constant\""]},{"Key":"\"most constant\"","Fragments":["parameter"]},{"Key":"constant\" parameter","Fragments":["first"]},{"Key":"parameter first","Fragments":["in"]},{"Key":"first in","Fragments":["functional","indentation"]},{"Key":"programming languages,","Fragments":["for"]},{"Key":"languages, for","Fragments":["example"]},{"Key":"in `anagrams`","Fragments":["or"]},{"Key":"`anagrams` or","Fragments":["`not-same?`"]},{"Key":"or `not-same?`","Fragments":["I"]},{"Key":"`not-same?` I","Fragments":["expected"]},{"Key":"I expected","Fragments":["to","the"]},{"Key":"see `sorted-word`","Fragments":["as"]},{"Key":"`sorted-word` as","Fragments":["the"]},{"Key":"first parameter.","Fragments":["This"]},{"Key":"parameter. This","Fragments":["allows","would"]},{"Key":"This allows","Fragments":["you"]},{"Key":"you (or","Fragments":["perhaps"]},{"Key":"(or perhaps","Fragments":["the"]},{"Key":"perhaps the","Fragments":["compiler)","versions"]},{"Key":"the compiler)","Fragments":["to"]},{"Key":"compiler) to","Fragments":["easily"]},{"Key":"easily partially","Fragments":["apply"]},{"Key":"partially apply","Fragments":["arguments","functions","functions,"]},{"Key":"apply arguments","Fragments":["that"]},{"Key":"arguments that","Fragments":["don't"]},{"Key":"that don't","Fragments":["change.","equal"]},{"Key":"don't change.","Fragments":["Not"]},{"Key":"change. Not","Fragments":["so"]},{"Key":"so important","Fragments":["in"]},{"Key":"important in","Fragments":["Clojure,"]},{"Key":"in Haskell","Fragments":["it","for"]},{"Key":"Haskell it","Fragments":["certainly"]},{"Key":"it certainly","Fragments":["matters.","improves","looks"]},{"Key":"also expected","Fragments":["to"]},{"Key":"like `is-anagram?`","Fragments":["instead"]},{"Key":"`is-anagram?` instead","Fragments":["of"]},{"Key":"of `anagrams`.","Fragments":["This"]},{"Key":"`anagrams`. This","Fragments":["way"]},{"Key":"could compose","Fragments":["`not-same?`"]},{"Key":"compose `not-same?`","Fragments":["and"]},{"Key":"`not-same?` and","Fragments":["`is-anagram?`"]},{"Key":"and `is-anagram?`","Fragments":["and","is"]},{"Key":"`is-anagram?` and","Fragments":["use"]},{"Key":"single `filter`","Fragments":["(without"]},{"Key":"`filter` (without","Fragments":["having"]},{"Key":"(without having","Fragments":["to"]},{"Key":"to depend","Fragments":["on"]},{"Key":"on Clojure's","Fragments":["reducers"]},{"Key":"Clojure's reducers","Fragments":["to"]},{"Key":"reducers to","Fragments":["do"]},{"Key":"name `alphagram`,","Fragments":["I"]},{"Key":"`alphagram`, I","Fragments":["wasn't"]},{"Key":"aware that","Fragments":["there","this","the"]},{"Key":"a specific","Fragments":["term","meaning","function","word,"]},{"Key":"specific term","Fragments":["for"]},{"Key":"term for","Fragments":["this.","a","this)."]},{"Key":"Clojure compiler","Fragments":["is"]},{"Key":"compiler is","Fragments":["smart"]},{"Key":"to pre-calculate","Fragments":["`alpha`"]},{"Key":"pre-calculate `alpha`","Fragments":["and"]},{"Key":"`alpha` and","Fragments":["`lower`"]},{"Key":"and `lower`","Fragments":["given"]},{"Key":"`lower` given","Fragments":["the"]},{"Key":"the partial","Fragments":["application.","becomes","application","application","comment.","functions.","application"]},{"Key":"partial application.","Fragments":["Perhaps"]},{"Key":"application. Perhaps","Fragments":["instead"]},{"Key":"Perhaps instead","Fragments":["you"]},{"Key":"instead you","Fragments":["could"]},{"Key":"the pre-calculations?","Fragments":["also,"]},{"Key":"pre-calculations? also,","Fragments":["`lower-case`"]},{"Key":"also, `lower-case`","Fragments":["is"]},{"Key":"`lower-case` is","Fragments":["performed","an"]},{"Key":"is performed","Fragments":["twice"]},{"Key":"performed twice","Fragments":["for"]},{"Key":"twice for","Fragments":["each"]},{"Key":"each string,","Fragments":["maybe"]},{"Key":"string, maybe","Fragments":["`alphagram`"]},{"Key":"maybe `alphagram`","Fragments":["shouldn't"]},{"Key":"`alphagram` shouldn't","Fragments":["worry"]},{"Key":"shouldn't worry","Fragments":["about"]},{"Key":"about case","Fragments":["normalization"]},{"Key":"case normalization","Fragments":["at"]},{"Key":"normalization at","Fragments":["all?"]},{"Key":" Yes","Fragments":[",",",","it"]},{"Key":"Yes ,","Fragments":["it","I"]},{"Key":"right thing.(The","Fragments":["tests"]},{"Key":"thing.(The tests","Fragments":["pass)"]},{"Key":"that 2","Fragments":["filters"]},{"Key":"2 filters","Fragments":["will"]},{"Key":"filters will","Fragments":["be"]},{"Key":"readable, I","Fragments":["see","like","like"]},{"Key":"see I","Fragments":["was","understand"]},{"Key":" @amely","Fragments":["-"]},{"Key":"@amely -","Fragments":["I"]},{"Key":"did consider","Fragments":["making","using"]},{"Key":"with pre-calculated","Fragments":["values"]},{"Key":"pre-calculated values","Fragments":["for"]},{"Key":"for lower-case","Fragments":["and"]},{"Key":"and alpha","Fragments":["-"]},{"Key":"alpha -","Fragments":["but"]},{"Key":"end decided","Fragments":["not"]},{"Key":"decided not","Fragments":["to,","to","to","to","to"]},{"Key":"not to,","Fragments":["as"]},{"Key":"to, as","Fragments":["I"]},{"Key":"thought the","Fragments":["extra-clarity"]},{"Key":"the extra-clarity","Fragments":["of"]},{"Key":"extra-clarity of","Fragments":["the"]},{"Key":"code would","Fragments":["be","be","be"]},{"Key":"the cost","Fragments":["at","is","of","of"]},{"Key":"cost at","Fragments":["runtime."]},{"Key":"That is","Fragments":["the","a","definitely"]},{"Key":"the side","Fragments":["I","effect"]},{"Key":"side I","Fragments":["tend"]},{"Key":"to err","Fragments":["on,"]},{"Key":"err on,","Fragments":["though,"]},{"Key":"on, though,","Fragments":["so"]},{"Key":"though, so","Fragments":["I","perhaps"]},{"Key":"have another","Fragments":["go","look","look"]},{"Key":"another go","Fragments":["at","at"]},{"Key":"a reasonably","Fragments":["clean"]},{"Key":"reasonably clean","Fragments":["way"]},{"Key":"make me","Fragments":["happy!"]},{"Key":"Re: the","Fragments":["word","naming"]},{"Key":"word alphagram","Fragments":["-"]},{"Key":"alphagram -","Fragments":["I"]},{"Key":"it either","Fragments":["until"]},{"Key":"either until","Fragments":["someone"]},{"Key":"until someone","Fragments":["on"]},{"Key":"someone on","Fragments":["here"]},{"Key":"on here","Fragments":["pointed"]},{"Key":"here pointed","Fragments":["it"]},{"Key":"Re: lowercasing","Fragments":["in"]},{"Key":"lowercasing in","Fragments":["alphagram,"]},{"Key":"in alphagram,","Fragments":["unfortunately"]},{"Key":"alphagram, unfortunately","Fragments":["this"]},{"Key":"unfortunately this","Fragments":["is"]},{"Key":"is necessary","Fragments":["as"]},{"Key":"necessary as","Fragments":["two"]},{"Key":"as two","Fragments":["words"]},{"Key":"words with","Fragments":["the","mixed"]},{"Key":"same letters","Fragments":["but"]},{"Key":"letters but","Fragments":["different"]},{"Key":"but different","Fragments":["mixtures"]},{"Key":"different mixtures","Fragments":["of"]},{"Key":"mixtures of","Fragments":["case"]},{"Key":"of case","Fragments":["must"]},{"Key":"case must","Fragments":["have"]},{"Key":"is significantly","Fragments":["more"]},{"Key":"readable than","Fragments":["an","[A-Z]","the","a","if"]},{"Key":"than an","Fragments":["optimized"]},{"Key":"an optimized","Fragments":["version,"]},{"Key":"optimized version,","Fragments":["there"]},{"Key":"version, there","Fragments":["is"]},{"Key":"a cost","Fragments":["but"]},{"Key":"cost but","Fragments":["the"]},{"Key":"cost is","Fragments":["not"]},{"Key":" Lowercasing","Fragments":["in"]},{"Key":"Lowercasing in","Fragments":["`alphagram`"]},{"Key":"in `alphagram`","Fragments":["is"]},{"Key":"`alphagram` is","Fragments":["not"]},{"Key":"necessary if","Fragments":["you","you'd"]},{"Key":"you call","Fragments":["it","it","`robot-name`","it","this"]},{"Key":"variable you","Fragments":["have"]},{"Key":"something along","Fragments":["these","these"]},{"Key":"along these","Fragments":["lines","lines?"]},{"Key":"these lines","Fragments":["(untested):"]},{"Key":" \"Calculate","Fragments":["the"]},{"Key":"\"Calculate the","Fragments":["alphagram"]},{"Key":"alphagram for","Fragments":["a"]},{"Key":" (sort","Fragments":["lower-word))"]},{"Key":" \"Given","Fragments":["a"]},{"Key":"\"Given a","Fragments":["word,"]},{"Key":"word, returns","Fragments":["a"]},{"Key":" that","Fragments":["checks"]},{"Key":"that checks","Fragments":["for","that"]},{"Key":"anagrams of","Fragments":["that","a"]},{"Key":"(let [lower","Fragments":["(lower-case"]},{"Key":"[lower (lower-case","Fragments":["word)"]},{"Key":" alpha","Fragments":["(alphagram"]},{"Key":"alpha (alphagram","Fragments":["lower)]","lower'))))))"]},{"Key":" #(let","Fragments":["[lower'"]},{"Key":"#(let [lower'","Fragments":["(lower-case"]},{"Key":"[lower' (lower-case","Fragments":["%)]"]},{"Key":"(not= lower","Fragments":["lower')"]},{"Key":"(= alpha","Fragments":["(alphagram"]},{"Key":" @leopold","Fragments":["re:"]},{"Key":"@leopold re:","Fragments":["lowercasing"]},{"Key":"re: lowercasing","Fragments":["alphagram"]},{"Key":"lowercasing alphagram","Fragments":["not"]},{"Key":"alphagram not","Fragments":["being"]},{"Key":"being necessary","Fragments":["-"]},{"Key":"while that's","Fragments":["true"]},{"Key":"that's true","Fragments":["in"]},{"Key":"this context","Fragments":["if","unless"]},{"Key":"context if","Fragments":["you"]},{"Key":"sure the","Fragments":["string","shouted"]},{"Key":"already lowercased,","Fragments":["as"]},{"Key":"lowercased, as","Fragments":["soon"]},{"Key":"as soon","Fragments":["as","as","as","as"]},{"Key":"soon as","Fragments":["you","any","one","I","one","you"]},{"Key":"use `alphagram`","Fragments":["in"]},{"Key":"`alphagram` in","Fragments":["a"]},{"Key":"new context","Fragments":["where"]},{"Key":"context where","Fragments":["you"]},{"Key":"necessarily aware","Fragments":["of"]},{"Key":"this prerequisite","Fragments":["on"]},{"Key":"prerequisite on","Fragments":["the"]},{"Key":"the input,","Fragments":["you'll","so","you","you"]},{"Key":"input, you'll","Fragments":["have"]},{"Key":"you'll have","Fragments":["introduced","to"]},{"Key":"have introduced","Fragments":["a"]},{"Key":"introduced a","Fragments":["bug.","bug","bug"]},{"Key":"explicit that","Fragments":["an","we"]},{"Key":"an alphagram","Fragments":["is","feels"]},{"Key":"alphagram is","Fragments":["case-insensitive","an"]},{"Key":"is case-insensitive","Fragments":["by"]},{"Key":"case-insensitive by","Fragments":["including"]},{"Key":"by including","Fragments":["it"]},{"Key":"including it","Fragments":["in"]},{"Key":" Fixed.","Fragments":["Thanks!"]},{"Key":"to \"shouting\".","Fragments":["It"]},{"Key":"\"shouting\". It","Fragments":["actually"]},{"Key":"It actually","Fragments":["was","looks"]},{"Key":"actually was","Fragments":["in","sure"]},{"Key":"submission but","Fragments":["in"]},{"Key":"this mess","Fragments":["it"]},{"Key":"mess it","Fragments":["was"]},{"Key":"was almost","Fragments":["indistinguishable."]},{"Key":"almost indistinguishable.","Fragments":["I"]},{"Key":"indistinguishable. I","Fragments":["made"]},{"Key":"separate val","Fragments":["for"]},{"Key":"val for","Fragments":["it"]},{"Key":"for it","Fragments":["=)","to"]},{"Key":"The term","Fragments":["for"]},{"Key":"with letters","Fragments":["in","becomes"]},{"Key":"in alphabetical","Fragments":["order"]},{"Key":"alphabetical order","Fragments":["is"]},{"Key":"an [Alphagram](http://en.wikipedia.org/wiki/Alphagram);","Fragments":["perhaps","maybe"]},{"Key":"[Alphagram](http://en.wikipedia.org/wiki/Alphagram); perhaps","Fragments":["that"]},{"Key":"perhaps that","Fragments":["will"]},{"Key":"some domain","Fragments":["terminology"]},{"Key":"domain terminology","Fragments":["you"]},{"Key":"terminology you","Fragments":["can"]},{"Key":"both `anagram?`","Fragments":["and"]},{"Key":"`anagram?` and","Fragments":["`is-anagram?`","`not-same?`"]},{"Key":"`is-anagram?` is","Fragments":["unfortunate;"]},{"Key":"is unfortunate;","Fragments":["I"]},{"Key":"unfortunate; I","Fragments":["wouldn't"]},{"Key":"wouldn't know","Fragments":["which"]},{"Key":"to use.","Fragments":["Also"]},{"Key":"use. Also","Fragments":["the"]},{"Key":"Also the","Fragments":["prefix","to-seq","string","camelCase"]},{"Key":"prefix `is`","Fragments":["looks"]},{"Key":"`is` looks","Fragments":["redundant"]},{"Key":"looks redundant","Fragments":["when"]},{"Key":"redundant when","Fragments":["Clojure"]},{"Key":"when Clojure","Fragments":["allows"]},{"Key":"have question","Fragments":["marks"]},{"Key":"in identifiers.","Fragments":["When"]},{"Key":"identifiers. When","Fragments":["I"]},{"Key":"this problem,","Fragments":["I","which","we","I","I"]},{"Key":"I avoided","Fragments":["this","using"]},{"Key":"avoided this","Fragments":["problem"]},{"Key":"problem by","Fragments":["splitting","using"]},{"Key":"by splitting","Fragments":["the","the","on","on"]},{"Key":"filter into","Fragments":["two"]},{"Key":"two parts","Fragments":["-","with"]},{"Key":"parts -","Fragments":["one"]},{"Key":"- one","Fragments":["for","with","level"]},{"Key":"for alphagrams","Fragments":["and"]},{"Key":"alphagrams and","Fragments":["one"]},{"Key":"you lost","Fragments":["a"]},{"Key":"lost a","Fragments":["space"]},{"Key":"space on","Fragments":["line","some"]},{"Key":"line 10","Fragments":["as","for"]},{"Key":"10 as","Fragments":["well."]},{"Key":"Great start!","Fragments":["I'm","You"]},{"Key":"start! I'm","Fragments":["new"]},{"Key":"Clojure myself,","Fragments":["but"]},{"Key":"myself, but","Fragments":["I"]},{"Key":"can say","Fragments":["some","that"]},{"Key":"say some","Fragments":["things"]},{"Key":"things that","Fragments":["I've","really","I'm","might","might","might","you","don't"]},{"Key":"I've picked","Fragments":["up."]},{"Key":"picked up.","Fragments":[":-)"]},{"Key":"use `:refer","Fragments":[":all`."]},{"Key":"`:refer :all`.","Fragments":["I","What"]},{"Key":":all`. I","Fragments":["usually"]},{"Key":"usually use","Fragments":["`:as","CamelCased","`\u003cfunction-name\u003e?`"]},{"Key":"use `:as","Fragments":["str`"]},{"Key":"str` -","Fragments":["this"]},{"Key":"allows `str/lower-case`.","Fragments":["I've"]},{"Key":"`str/lower-case`. I've","Fragments":["also"]},{"Key":"people refer","Fragments":["to"]},{"Key":"to specific","Fragments":["functions:"]},{"Key":"specific functions:","Fragments":["`:refer"]},{"Key":"functions: `:refer","Fragments":["(lower-case)`."]},{"Key":"README has","Fragments":["terms"]},{"Key":"has terms","Fragments":["like"]},{"Key":"terms like","Fragments":["\"shouting\","]},{"Key":"like \"shouting\",","Fragments":["but"]},{"Key":"use those.","Fragments":["Is"]},{"Key":"those. Is","Fragments":["there"]},{"Key":"of adding","Fragments":["those","noise"]},{"Key":"adding those","Fragments":["terms"]},{"Key":"those terms","Fragments":["back"]},{"Key":"terms back","Fragments":["in?"]},{"Key":"Some formatting","Fragments":["issues."]},{"Key":"formatting issues.","Fragments":["Usually"]},{"Key":"issues. Usually","Fragments":["I've"]},{"Key":"Usually I've","Fragments":["seen"]},{"Key":"seen the","Fragments":["closing","`let`","\".roll\"","`apply`"]},{"Key":"same line,","Fragments":["not","or"]},{"Key":"line, not","Fragments":["afterwards."]},{"Key":"not afterwards.","Fragments":["I"]},{"Key":"afterwards. I","Fragments":["also"]},{"Key":"also try","Fragments":["to","the","using","using"]},{"Key":"write my","Fragments":["conds","own","own,","own"]},{"Key":"my conds","Fragments":["as"]},{"Key":" predicate-1?","Fragments":["result-1"]},{"Key":" predicate-2?","Fragments":["result-2"]},{"Key":" predicate-3?","Fragments":["result-3"]},{"Key":" (But","Fragments":["I"]},{"Key":"(But I","Fragments":["don't","don't"]},{"Key":"any references","Fragments":["for"]},{"Key":"references for","Fragments":["that).","clojure"]},{"Key":"for that).","Fragments":["There's"]},{"Key":"that). There's","Fragments":["a"]},{"Key":"a blank","Fragments":["line","line"]},{"Key":"line at","Fragments":["the"]},{"Key":"You repeat","Fragments":["`(sort","the"]},{"Key":"repeat `(sort","Fragments":["(lower-case"]},{"Key":"word))` twice.","Fragments":["A"]},{"Key":"twice. A","Fragments":["word"]},{"Key":"the letters","Fragments":["sorted","are","you","being",":p)."]},{"Key":"letters sorted","Fragments":["alphabetically"]},{"Key":"sorted alphabetically","Fragments":["is"]},{"Key":"alphabetically is","Fragments":["an"]},{"Key":"[Alphagram](http://en.wikipedia.org/wiki/Alphagram); maybe","Fragments":["creating"]},{"Key":"maybe creating","Fragments":["a"]},{"Key":"method with","Fragments":["that","slightly"]},{"Key":"that name","Fragments":["would"]},{"Key":"clauses of","Fragments":["your"]},{"Key":"your `and`","Fragments":["into"]},{"Key":"`and` into","Fragments":["two"]},{"Key":"two sequence","Fragments":["operations"]},{"Key":"sequence operations","Fragments":["-"]},{"Key":"with `remove`.","Fragments":["I"]},{"Key":"`remove`. I","Fragments":["like"]},{"Key":"approach because","Fragments":["it"]},{"Key":"it demonstrates","Fragments":["the"]},{"Key":"demonstrates the","Fragments":["composability"]},{"Key":"the composability","Fragments":["of"]},{"Key":"composability of","Fragments":["the"]},{"Key":"two steps.","Fragments":["It's"]},{"Key":"steps. It's","Fragments":["especially"]},{"Key":"It's especially","Fragments":["nice"]},{"Key":"especially nice","Fragments":["in"]},{"Key":"it's easy","Fragments":["to","to","enough","to"]},{"Key":"Why name","Fragments":["it"]},{"Key":"at all?","Fragments":["`(filter","It"]},{"Key":"all? `(filter","Fragments":["not"]},{"Key":"`(filter not","Fragments":["(map"]},{"Key":"not (map","Fragments":["="]},{"Key":"= gene1","Fragments":["gene2))`"]},{"Key":"gene1 gene2))`","Fragments":["looks"]},{"Key":"gene2))` looks","Fragments":["perfectly"]},{"Key":"looks perfectly","Fragments":["readable"]},{"Key":"perfectly readable","Fragments":["to"]},{"Key":"me. If","Fragments":["you"]},{"Key":"want it","Fragments":["to","to","to"]},{"Key":"look more","Fragments":["like","uniform","into","explicit"]},{"Key":"a pipeline,","Fragments":["there's"]},{"Key":"pipeline, there's","Fragments":["always"]},{"Key":"there's always","Fragments":["the"]},{"Key":"always the","Fragments":["`-\u003e`","clearest"]},{"Key":"the `-\u003e`","Fragments":["or","seems","macro","macro."]},{"Key":"`-\u003e` or","Fragments":["`-\u003e\u003e`"]},{"Key":"or `-\u003e\u003e`","Fragments":["macros"]},{"Key":"`-\u003e\u003e` macros","Fragments":["for"]},{"Key":"we're just","Fragments":["going"]},{"Key":"just going","Fragments":["to"]},{"Key":"to respectfully","Fragments":["disagree"]},{"Key":"respectfully disagree","Fragments":["on"]},{"Key":"Even a","Fragments":["private"]},{"Key":"used inappropriately","Fragments":["from"]},{"Key":"inappropriately from","Fragments":["within"]},{"Key":"from within","Fragments":["the","the"]},{"Key":"namespace at","Fragments":["a","the"]},{"Key":"a later","Fragments":["date.","exercise,"]},{"Key":"2. Creating","Fragments":["an"]},{"Key":"Creating an","Fragments":["alphagram"]},{"Key":"alphagram feels","Fragments":["like"]},{"Key":"of thing","Fragments":["that","a"]},{"Key":"you potentially","Fragments":["might"]},{"Key":"potentially might","Fragments":["want"]},{"Key":"want in","Fragments":["your","this"]},{"Key":"your public","Fragments":["interface"]},{"Key":"public interface","Fragments":["anyway."]},{"Key":"3. Naming","Fragments":["variable/docs"]},{"Key":"Naming variable/docs","Fragments":["could"]},{"Key":"variable/docs could","Fragments":["help,"]},{"Key":"could help,","Fragments":["but"]},{"Key":"help, but","Fragments":["it's"]},{"Key":"not executable","Fragments":["and"]},{"Key":"executable and","Fragments":["so"]},{"Key":"so can","Fragments":["be"]},{"Key":"be easily","Fragments":["missed/ignored.","cast"]},{"Key":"4. Having","Fragments":["said"]},{"Key":"Having said","Fragments":["that,"]},{"Key":"said that,","Fragments":["naming","I"]},{"Key":"that, naming","Fragments":["is"]},{"Key":"extremely important,","Fragments":["so"]},{"Key":"important, so","Fragments":["if"]},{"Key":"were to","Fragments":["write"]},{"Key":"you describe","Fragments":["it","it,","is"]},{"Key":"describe it","Fragments":["would"]},{"Key":"called something","Fragments":["like"]},{"Key":"like `alphagram-from-lower-case`","Fragments":["to"]},{"Key":"`alphagram-from-lower-case` to","Fragments":["avoid"]},{"Key":"avoid all","Fragments":["ambiguity,","the"]},{"Key":"all ambiguity,","Fragments":["which"]},{"Key":"ambiguity, which","Fragments":["would"]},{"Key":"After sleeping","Fragments":["on"]},{"Key":"sleeping on","Fragments":["this"]},{"Key":"this I","Fragments":["have","thought","didn't"]},{"Key":"1. is","Fragments":["`(vec"]},{"Key":"is `(vec","Fragments":["(conj...`"]},{"Key":"`(vec (conj...`","Fragments":["really"]},{"Key":"(conj...` really","Fragments":["the"]},{"Key":"do or","Fragments":["is"]},{"Key":"a function/idiom","Fragments":["that"]},{"Key":"function/idiom that","Fragments":["is"]},{"Key":"2. I'm","Fragments":["not"]},{"Key":"the `sorted`","Fragments":["function"]},{"Key":"`sorted` function","Fragments":["does","doesn't"]},{"Key":"job to","Fragments":["explaining"]},{"Key":"to explaining","Fragments":["what"]},{"Key":"explaining what","Fragments":["it"]},{"Key":"doing. But","Fragments":["that"]},{"Key":"be my","Fragments":["lack","fault."]},{"Key":"my lack","Fragments":["of","of"]},{"Key":"lack of","Fragments":["Lisp","sugar","Clojure","privacy","experience","function"]},{"Key":"of Lisp","Fragments":["reading"]},{"Key":"Lisp reading","Fragments":["ability."]},{"Key":"thing jarring.","Fragments":["Line"]},{"Key":"jarring. Line","Fragments":["11"]},{"Key":"Line 11","Fragments":["\u0026"]},{"Key":"11 \u0026","Fragments":["13"]},{"Key":"\u0026 13","Fragments":["are"]},{"Key":"13 are","Fragments":["operating"]},{"Key":"are operating","Fragments":["upon","on"]},{"Key":"operating upon","Fragments":["`phrase`"]},{"Key":"upon `phrase`","Fragments":["but"]},{"Key":"`phrase` but","Fragments":["line"]},{"Key":"but line","Fragments":["12"]},{"Key":"line 12","Fragments":["wasn't"]},{"Key":"12 wasn't","Fragments":["obviously"]},{"Key":"wasn't obviously","Fragments":["doing"]},{"Key":"obviously doing","Fragments":["so"]},{"Key":"doing so","Fragments":["(since","confuses"]},{"Key":"so (since","Fragments":["my"]},{"Key":"(since my","Fragments":["eyes"]},{"Key":"my eyes","Fragments":["went","a","there","(","a"]},{"Key":"eyes went","Fragments":["straight"]},{"Key":"went straight","Fragments":["to"]},{"Key":"the cond).","Fragments":["Perhaps"]},{"Key":"cond). Perhaps","Fragments":["`all-caps?`"]},{"Key":"Perhaps `all-caps?`","Fragments":["should"]},{"Key":"`all-caps?` should","Fragments":["take"]},{"Key":"should take","Fragments":["an"]},{"Key":"take an","Fragments":["argument","optional","optional","options"]},{"Key":"branches more","Fragments":["similar?"]},{"Key":"predicate on","Fragments":["line"]},{"Key":"line 13","Fragments":["into","-","but"]},{"Key":"13 into","Fragments":["a"]},{"Key":"1. I","Fragments":["can't","would","switched","think","can't","would","generally","had"]},{"Key":"can't check","Fragments":["that"]},{"Key":"check that","Fragments":["now","the","there","its"]},{"Key":"that now","Fragments":["but","\"nucleotide-counts\""]},{"Key":"but `vec`","Fragments":["shouldn't"]},{"Key":"`vec` shouldn't","Fragments":["be","be"]},{"Key":"be needed","Fragments":["at","to"]},{"Key":"needed at","Fragments":["all","all."]},{"Key":"2. That's","Fragments":["a"]},{"Key":"a part","Fragments":["of","of","of"]},{"Key":"api so","Fragments":["you"]},{"Key":"can't do","Fragments":["much"]},{"Key":"do much","Fragments":["about"]},{"Key":" @esperanza","Fragments":["I"]},{"Key":"@esperanza I","Fragments":["did"]},{"Key":"did everything","Fragments":["except"]},{"Key":"everything except","Fragments":["changing","response-for"]},{"Key":"except changing","Fragments":["the"]},{"Key":"the indentation","Fragments":["for"]},{"Key":"indentation for","Fragments":["the"]},{"Key":"in second-couplet,","Fragments":["with"]},{"Key":"second-couplet, with","Fragments":["which"]},{"Key":"with which","Fragments":["I"]},{"Key":"do since","Fragments":["the"]},{"Key":"stuff inside","Fragments":["each"]},{"Key":"inside each","Fragments":["of","other"]},{"Key":"conditionals spans","Fragments":["multiple"]},{"Key":"spans multiple","Fragments":["lines."]},{"Key":"multiple lines.","Fragments":["Although"]},{"Key":"lines. Although","Fragments":["I"]},{"Key":"Although I","Fragments":["grok","will"]},{"Key":"I grok","Fragments":["Clojure"]},{"Key":"grok Clojure","Fragments":["a"]},{"Key":"Clojure a","Fragments":["bit","map"]},{"Key":"than Haskell,","Fragments":["I'm"]},{"Key":"Haskell, I'm","Fragments":["still"]},{"Key":"still somewhat","Fragments":["n00bish"]},{"Key":"somewhat n00bish","Fragments":["when"]},{"Key":"n00bish when","Fragments":["it"]},{"Key":"to convention","Fragments":["and"]},{"Key":"convention and","Fragments":["style."]},{"Key":"and style.","Fragments":["Thanks"]},{"Key":"style. Thanks","Fragments":["so"]},{"Key":"Thanks so","Fragments":["much","much"]},{"Key":"much for","Fragments":["your","the","one"]},{"Key":"might think","Fragments":["of","it"]},{"Key":"of defining","Fragments":["```split```","them"]},{"Key":"defining ```split```","Fragments":["and"]},{"Key":"```split``` and","Fragments":["```downcase-and-split```","```join```"]},{"Key":"and ```downcase-and-split```","Fragments":["as"]},{"Key":"```downcase-and-split``` as","Fragments":["privately"]},{"Key":"as privately","Fragments":["accessible"]},{"Key":"privately accessible","Fragments":["via"]},{"Key":"accessible via","Fragments":["```defn-```"]},{"Key":" ```:require","Fragments":["[clojure.string"]},{"Key":"```:require [clojure.string","Fragments":[":refer"]},{"Key":":refer [split]]```","Fragments":["might"]},{"Key":"[split]]``` might","Fragments":["be"]},{"Key":"solution when","Fragments":["you"]},{"Key":"root bindings","Fragments":["non-public"]},{"Key":"bindings non-public","Fragments":["too"]},{"Key":"non-public too","Fragments":["by"]},{"Key":"too by","Fragments":["putting"]},{"Key":"by putting","Fragments":["`^:private`","a"]},{"Key":"putting `^:private`","Fragments":["between"]},{"Key":"`^:private` between","Fragments":["`def`"]},{"Key":"binding name.","Fragments":["You"]},{"Key":"name. You","Fragments":["could"]},{"Key":"also reorder","Fragments":["the"]},{"Key":"reorder the","Fragments":["code","conditions","conditionals"]},{"Key":"code so","Fragments":["that","that","much"]},{"Key":"api is","Fragments":["on"]},{"Key":"top (however","Fragments":["I"]},{"Key":"(however I","Fragments":["tend"]},{"Key":"the \"constants\"","Fragments":["above"]},{"Key":"\"constants\" above","Fragments":["all"]},{"Key":"above all","Fragments":["functions,"]},{"Key":"all functions,","Fragments":["if"]},{"Key":"functions, if","Fragments":["there"]},{"Key":"are any).","Fragments":["`declare`"]},{"Key":"any). `declare`","Fragments":["may"]},{"Key":"I you","Fragments":["will","like"]},{"Key":"Thanks! I've","Fragments":["gotten"]},{"Key":"gotten a","Fragments":["bit"]},{"Key":"bit busy","Fragments":["lately"]},{"Key":"busy lately","Fragments":["but"]},{"Key":"lately but","Fragments":["do"]},{"Key":"do plan","Fragments":["to"]},{"Key":"plan to","Fragments":["come"]},{"Key":"and tidy","Fragments":["up"]},{"Key":"tidy up","Fragments":["all"]},{"Key":"all my","Fragments":["exercism","`defn`s","doc"]},{"Key":"my exercism","Fragments":["code"]},{"Key":"exercism code","Fragments":["the"]},{"Key":"code the","Fragments":["minute"]},{"Key":"the minute","Fragments":["things"]},{"Key":"minute things","Fragments":["let"]},{"Key":"things let","Fragments":["up."]},{"Key":"let up.","Fragments":["Soon"]},{"Key":"up. Soon","Fragments":["I"]},{"Key":"Soon I","Fragments":["hope!"]},{"Key":" `reduce-kv`","Fragments":["is","is"]},{"Key":"`reduce-kv` is","Fragments":["a","probably","much","probably","also"]},{"Key":"great tool","Fragments":["but","for"]},{"Key":"tool but","Fragments":["I"]},{"Key":"is simpler","Fragments":["with","and"]},{"Key":"like `for","Fragments":["[key"]},{"Key":"`for [key","Fragments":["(keys"]},{"Key":"[key (keys","Fragments":["input)"]},{"Key":"(keys input)","Fragments":["val"]},{"Key":"input) val","Fragments":["(input"]},{"Key":"val (input","Fragments":["key)]"]},{"Key":"(input key)]","Fragments":["...`"]},{"Key":" Transforming","Fragments":["to"]},{"Key":"Transforming to","Fragments":["vector","vector"]},{"Key":"to vector","Fragments":["with","with","is"]},{"Key":"vector with","Fragments":["`vec`","vec","a"]},{"Key":"with `vec`","Fragments":["shouldn't"]},{"Key":"necessary because","Fragments":["vector","vector"]},{"Key":"because vector","Fragments":["and","and"]},{"Key":"vector and","Fragments":["list","list"]},{"Key":"and list","Fragments":["belong","belong"]},{"Key":"list belong","Fragments":["to","to"]},{"Key":"belong to","Fragments":["the","the"]},{"Key":"same \"equality","Fragments":["partition\".","partition\"."]},{"Key":"\"equality partition\".","Fragments":["Short"]},{"Key":"partition\". Short","Fragments":["but"]},{"Key":"Short but","Fragments":["good"]},{"Key":"but good","Fragments":["explanation","tip"]},{"Key":"good explanation","Fragments":["of"]},{"Key":"explanation of","Fragments":["that","the","the","the","atoms"]},{"Key":"here: http://stackoverflow.com/a/11006759/477048","Fragments":["."]},{"Key":"http://stackoverflow.com/a/11006759/477048 .","Fragments":["I"]},{"Key":"wouldn't use","Fragments":["shortcuts","`'`"]},{"Key":"use shortcuts","Fragments":["in"]},{"Key":"shortcuts in","Fragments":["names,"]},{"Key":"like `lc`.","Fragments":["In"]},{"Key":"`lc`. In","Fragments":["a"]},{"Key":"small codebase","Fragments":["and"]},{"Key":"codebase and","Fragments":["context"]},{"Key":"and context","Fragments":["one"]},{"Key":"context one","Fragments":["can"]},{"Key":"one can","Fragments":["get","be"]},{"Key":"still can","Fragments":["give"]},{"Key":"a pause","Fragments":["to","-"]},{"Key":"pause to","Fragments":["decipher"]},{"Key":"decipher the","Fragments":["meaning.","intent"]},{"Key":"the meaning.","Fragments":["I"]},{"Key":"meaning. I","Fragments":["would"]},{"Key":"just name","Fragments":["it","it"]},{"Key":"it `lowercase-word`.","Fragments":["There's"]},{"Key":"`lowercase-word`. There's","Fragments":["a"]},{"Key":"redundant space","Fragments":["before","before"]},{"Key":"space before","Fragments":["`:requrie`.",":requrie.","the"]},{"Key":"\u003e Transforming","Fragments":["to"]},{"Key":"with vec","Fragments":["shouldn't"]},{"Key":"vec shouldn't","Fragments":["be"]},{"Key":" True","Fragments":["if"]},{"Key":"True if","Fragments":["you"]},{"Key":"just want","Fragments":["tests"]},{"Key":"want tests","Fragments":["to"]},{"Key":"to pass.","Fragments":["Readme"]},{"Key":"pass. Readme","Fragments":["talks"]},{"Key":"Readme talks","Fragments":["about"]},{"Key":"talks about","Fragments":["lists"]},{"Key":"about lists","Fragments":["but"]},{"Key":"lists but","Fragments":["tests"]},{"Key":"but tests","Fragments":["use"]},{"Key":"tests use","Fragments":["vectors.","to"]},{"Key":"use vectors.","Fragments":["So"]},{"Key":"vectors. So","Fragments":["to"]},{"Key":"So to","Fragments":["keep"]},{"Key":"the results","Fragments":["in","of","of","will","to","of","you","of"]},{"Key":"results in","Fragments":["the","a","the"]},{"Key":"same type","Fragments":["as","as"]},{"Key":"type as","Fragments":["input","original","input"]},{"Key":"input I","Fragments":["explicitly"]},{"Key":"I explicitly","Fragments":["convert","don't"]},{"Key":"explicitly convert","Fragments":["it"]},{"Key":"convert it","Fragments":["to","to","to","to"]},{"Key":" \u003eThere's","Fragments":["a"]},{"Key":"\u003eThere's a","Fragments":["redundant"]},{"Key":"of `anagrams-for`","Fragments":["as","should"]},{"Key":"`anagrams-for` as","Fragments":["a"]},{"Key":"a shrinking","Fragments":["collection"]},{"Key":"shrinking collection","Fragments":["transformer."]},{"Key":"collection transformer.","Fragments":["So"]},{"Key":"transformer. So","Fragments":["it"]},{"Key":"should return","Fragments":["collection","`false`","true","false","true/false.","a"]},{"Key":"return collection","Fragments":["of"]},{"Key":"as original","Fragments":["collection"]},{"Key":"original collection","Fragments":["passed"]},{"Key":"collection passed","Fragments":["to"]},{"Key":"is possible","Fragments":["to","to","to"]},{"Key":"collection independent","Fragments":["way"]},{"Key":"independent way","Fragments":["because"]},{"Key":"way because","Fragments":["`filter`","it"]},{"Key":"because `filter`","Fragments":["already"]},{"Key":"`filter` already","Fragments":["dictates"]},{"Key":"already dictates","Fragments":["what"]},{"Key":"dictates what","Fragments":["kind"]},{"Key":"of collection","Fragments":["it"]},{"Key":"collection it","Fragments":["can"]},{"Key":"can produce.","Fragments":["As"]},{"Key":"produce. As","Fragments":["I"]},{"Key":"understand there","Fragments":["is"]},{"Key":"a protocol","Fragments":["to","and","makes"]},{"Key":"protocol to","Fragments":["ask"]},{"Key":"ask collection","Fragments":["to"]},{"Key":"collection to","Fragments":["reduce"]},{"Key":"reduce itself","Fragments":["which"]},{"Key":"itself which","Fragments":["will"]},{"Key":"will produce","Fragments":["the",":"]},{"Key":"produce the","Fragments":["same"]},{"Key":"same collection","Fragments":["type"]},{"Key":"collection type","Fragments":["as"]},{"Key":"input but","Fragments":["it's"]},{"Key":"it's kind","Fragments":["of"]},{"Key":"overkill in","Fragments":["this","this"]},{"Key":"I defaulted","Fragments":["it"]},{"Key":"defaulted it","Fragments":["to"]},{"Key":"vectors since","Fragments":["it's"]},{"Key":"type used","Fragments":["in"]},{"Key":"I realized","Fragments":["what","I","the","that","that","that","that","validation","`reduce`"]},{"Key":"realized what","Fragments":["[`cl-format`](http://clojuredocs.org/clojure_core/clojure.pprint/cl-format)"]},{"Key":"what [`cl-format`](http://clojuredocs.org/clojure_core/clojure.pprint/cl-format)","Fragments":["was"]},{"Key":"[`cl-format`](http://clojuredocs.org/clojure_core/clojure.pprint/cl-format) was","Fragments":["doing,"]},{"Key":"was doing,","Fragments":["my"]},{"Key":"doing, my","Fragments":["jaw"]},{"Key":"my jaw","Fragments":["hit"]},{"Key":"jaw hit","Fragments":["the"]},{"Key":"hit the","Fragments":["table."]},{"Key":"the table.","Fragments":["WOW!"]},{"Key":"might rewrite","Fragments":["sing"]},{"Key":"rewrite sing","Fragments":["to"]},{"Key":"sing to","Fragments":["use"]},{"Key":"the multi-arity","Fragments":["[`defn`](http://clojuredocs.org/clojure_core/clojure.core/defn#example_137)"]},{"Key":"multi-arity [`defn`](http://clojuredocs.org/clojure_core/clojure.core/defn#example_137)","Fragments":["to"]},{"Key":"[`defn`](http://clojuredocs.org/clojure_core/clojure.core/defn#example_137) to","Fragments":["clear"]},{"Key":"to clear","Fragments":["up","it"]},{"Key":"clear up","Fragments":["what","shout?"]},{"Key":"up what","Fragments":["the"]},{"Key":"if is","Fragments":["doing,"]},{"Key":" Inside","Fragments":["namespace","`all-uppercase`,","the"]},{"Key":"Inside namespace","Fragments":["definition,"]},{"Key":"namespace definition,","Fragments":["it's"]},{"Key":"definition, it's","Fragments":["better"]},{"Key":"use keyword","Fragments":["form"]},{"Key":"form of","Fragments":["`require`","better","higher","[`map`](http://clojuredocs.org/clojure_core/clojure.core/map)?","`map`,","nesting","conditionals"]},{"Key":"of `require`","Fragments":["-","usage","can"]},{"Key":"`require` -","Fragments":["`:require`."]},{"Key":"- `:require`.","Fragments":["From"]},{"Key":"`:require`. From","Fragments":["a"]},{"Key":"From a","Fragments":["technical","functional"]},{"Key":"a technical","Fragments":["standpoint"]},{"Key":"technical standpoint","Fragments":["it"]},{"Key":"standpoint it","Fragments":["probably"]},{"Key":"it probably","Fragments":["doesn't","makes"]},{"Key":"probably doesn't","Fragments":["make"]},{"Key":"doesn't make","Fragments":["any","much","sense"]},{"Key":"make any","Fragments":["difference"]},{"Key":"any difference","Fragments":["(`name`"]},{"Key":"difference (`name`","Fragments":["is"]},{"Key":"(`name` is","Fragments":["applied"]},{"Key":"is applied","Fragments":["inside","to"]},{"Key":"applied inside","Fragments":["the"]},{"Key":"macro which","Fragments":["yields","reads","is"]},{"Key":"which yields","Fragments":["the"]},{"Key":"yields the","Fragments":["same"]},{"Key":"same result","Fragments":["for"]},{"Key":"result for","Fragments":["symbol"]},{"Key":"for symbol","Fragments":["and"]},{"Key":"symbol and","Fragments":["keyword)"]},{"Key":"and keyword)","Fragments":["but"]},{"Key":"keyword) but","Fragments":["it's"]},{"Key":"a documented","Fragments":["standard."]},{"Key":"you non-working","Fragments":["code"]},{"Key":"non-working code","Fragments":["-"]},{"Key":"have closed","Fragments":["the"]},{"Key":"closed the","Fragments":["bindings"]},{"Key":"bindings list","Fragments":["(square","on"]},{"Key":"list (square","Fragments":["brackets)"]},{"Key":"(square brackets)","Fragments":["too"]},{"Key":"brackets) too","Fragments":["early,"]},{"Key":"too early,","Fragments":["before"]},{"Key":"early, before","Fragments":["form"]},{"Key":"before form","Fragments":["with"]},{"Key":"form with","Fragments":["`word-description`.","the"]},{"Key":"EDIT: Oh,","Fragments":["and"]},{"Key":"and for","Fragments":["future"]},{"Key":"reference, when","Fragments":["saying"]},{"Key":"when saying","Fragments":["that"]},{"Key":"saying that","Fragments":["code","this","because,"]},{"Key":"is \"not","Fragments":["working\""]},{"Key":"\"not working\"","Fragments":["at"]},{"Key":"working\" at","Fragments":["least"]},{"Key":"least give","Fragments":["some"]},{"Key":"some context,","Fragments":["like"]},{"Key":"context, like","Fragments":["message"]},{"Key":"like message","Fragments":["of"]},{"Key":"message of","Fragments":["exception"]},{"Key":"of exception","Fragments":["or"]},{"Key":"exception or","Fragments":["a"]},{"Key":"of stack","Fragments":["trace"]},{"Key":"stack trace","Fragments":[":)","from"]},{"Key":" Generally,","Fragments":["you"]},{"Key":"Generally, you","Fragments":["should"]},{"Key":"should leave","Fragments":["the"]},{"Key":"body at","Fragments":["the"]},{"Key":"same level","Fragments":["of","of"]},{"Key":"as arguments","Fragments":["vector","to"]},{"Key":"vector in","Fragments":["function","a"]},{"Key":"more thing.","Fragments":["Think"]},{"Key":"thing. Think","Fragments":["about"]},{"Key":"word you","Fragments":["compare","are","have","compare","compare","are","compare"]},{"Key":"you compare","Fragments":["against","against","against","against"]},{"Key":"against over","Fragments":["and","and"]},{"Key":"over with","Fragments":["every","every"]},{"Key":" @marlene:","Fragments":["Can"]},{"Key":"@marlene: Can","Fragments":["you"]},{"Key":"give me","Fragments":["an","a","a","the","any"]},{"Key":"me an","Fragments":["approach","opportunity"]},{"Key":"an approach","Fragments":["or"]},{"Key":"approach or","Fragments":["point"]},{"Key":"or point","Fragments":["me"]},{"Key":"point me","Fragments":["to","to"]},{"Key":"to useful","Fragments":["functions/strategies"]},{"Key":"useful functions/strategies","Fragments":["to"]},{"Key":"functions/strategies to","Fragments":["reduce"]},{"Key":"reduce this","Fragments":["overhead"]},{"Key":"this overhead","Fragments":["?"]},{"Key":"to functional","Fragments":["programming","programming."]},{"Key":"don't find","Fragments":["a","the"]},{"Key":"passing an","Fragments":["anonymous"]},{"Key":"function literal","Fragments":["directly,"]},{"Key":"literal directly,","Fragments":["you"]},{"Key":"directly, you","Fragments":["can"]},{"Key":"function returning","Fragments":["a","requested"]},{"Key":"original and","Fragments":["processed","changes"]},{"Key":"and processed","Fragments":["word"]},{"Key":"processed word","Fragments":["in"]},{"Key":"word in","Fragments":["it's","candidates","case","whichever"]},{"Key":"it's lexical","Fragments":["scope."]},{"Key":"lexical scope.","Fragments":["That"]},{"Key":"scope. That","Fragments":["\"constructor\""]},{"Key":"That \"constructor\"","Fragments":["function"]},{"Key":"\"constructor\" function","Fragments":["would"]},{"Key":"would then","Fragments":["be","be","be"]},{"Key":"then be","Fragments":["handed","unnecessarily","like"]},{"Key":"be handed","Fragments":["just"]},{"Key":"handed just","Fragments":["the"]},{"Key":"word to","Fragments":["test","lower","be","avoid"]},{"Key":"test against.","Fragments":["That"]},{"Key":"against. That","Fragments":["function"]},{"Key":"That function","Fragments":["would"]},{"Key":"this (modulo","Fragments":["better"]},{"Key":"(modulo better","Fragments":["naming):"]},{"Key":"(defn constructor-fn","Fragments":["[w]"]},{"Key":"(let [w-processed","Fragments":["(process"]},{"Key":"[w-processed (process","Fragments":["w)]"]},{"Key":"(fn [p]","Fragments":["(body-of-anagrams?-follows))))"]},{"Key":"Then, what","Fragments":["you"]},{"Key":"you pass","Fragments":["the","in?","the","it"]},{"Key":"`filter` is","Fragments":["the"]},{"Key":"that constructor","Fragments":["invocation,"]},{"Key":"constructor invocation,","Fragments":["not"]},{"Key":"invocation, not","Fragments":["the"]},{"Key":"more nit.","Fragments":["Consider"]},{"Key":"nit. Consider","Fragments":["making"]},{"Key":"making functions","Fragments":["not","that","available"]},{"Key":"functions not","Fragments":["being"]},{"Key":"being part","Fragments":["of"]},{"Key":"public \"API\"","Fragments":["non-public."]},{"Key":"Don't leave","Fragments":["closing"]},{"Key":"own lines.","Fragments":["These"]},{"Key":"lines. These","Fragments":["should"]},{"Key":"These should","Fragments":["be"]},{"Key":"be stacked","Fragments":["up"]},{"Key":"stacked up","Fragments":["on"]},{"Key":"of form/expression.","Fragments":["I"]},{"Key":"form/expression. I","Fragments":["would"]},{"Key":"would call","Fragments":["the","them"]},{"Key":"call the","Fragments":["function","function","functions","`clojure.string`",".get","`build-finder`","function"]},{"Key":"describes the","Fragments":["intent","intent","question"]},{"Key":"more clearly,","Fragments":["like"]},{"Key":"clearly, like","Fragments":["`anagram-checker-for`"]},{"Key":"like `anagram-checker-for`","Fragments":["or"]},{"Key":"`anagram-checker-for` or","Fragments":["the"]},{"Key":"The commented","Fragments":["code"]},{"Key":"commented code","Fragments":["doesn't"]},{"Key":"work and","Fragments":["I","`anagram-of?`"]},{"Key":"understand why.","Fragments":["Any"]},{"Key":"why. Any","Fragments":["hint"]},{"Key":"Any hint","Fragments":["?"]},{"Key":"was originally","Fragments":["thinking","written","looking"]},{"Key":"originally thinking","Fragments":["about"]},{"Key":"using ```if```","Fragments":["statements"]},{"Key":"```if``` statements","Fragments":["before"]},{"Key":"statements before","Fragments":["I"]},{"Key":"realized I","Fragments":["had","had"]},{"Key":"had ```cond```","Fragments":["available."]},{"Key":"```cond``` available.","Fragments":["I"]},{"Key":"available. I","Fragments":["was","can't"]},{"Key":"was also","Fragments":["going","a","called","leary"]},{"Key":"also going","Fragments":["to"]},{"Key":"determine if","Fragments":["a","a"]},{"Key":"is empty","Fragments":["or","or","or"]},{"Key":"empty or","Fragments":["blank","contains","only","not."]},{"Key":"or blank","Fragments":["until"]},{"Key":"blank until","Fragments":["I"]},{"Key":"came across","Fragments":["the","when","the","a"]},{"Key":"across the","Fragments":["```blank?```","```upper-case```","Clojure","`binary-number`","individual","input","method"]},{"Key":"the ```blank?```","Fragments":["function"]},{"Key":"```blank?``` function","Fragments":["in"]},{"Key":"the ```clojure.string```","Fragments":["library."]},{"Key":"I kept","Fragments":["trying","calling","getting"]},{"Key":"kept trying","Fragments":["to"]},{"Key":"find functions","Fragments":["that"]},{"Key":"were readily","Fragments":["available"]},{"Key":"readily available","Fragments":["in"]},{"Key":"to minimize","Fragments":["the","the"]},{"Key":"minimize the","Fragments":["code","complexity"]},{"Key":"write from","Fragments":["scratch."]},{"Key":"The hardest","Fragments":["part"]},{"Key":"hardest part","Fragments":["was"]},{"Key":"part was","Fragments":["writing"]},{"Key":"was writing","Fragments":["the"]},{"Key":"writing the","Fragments":["first","first","last"]},{"Key":"first regular","Fragments":["expression."]},{"Key":"expression. I","Fragments":["had","think"]},{"Key":"to dig","Fragments":["through","pretty"]},{"Key":"Java documentation","Fragments":["for"]},{"Key":"for regular","Fragments":["expressions"]},{"Key":"complexity of","Fragments":["the","the"]},{"Key":"have even","Fragments":["reduced"]},{"Key":"even reduced","Fragments":["the"]},{"Key":"reduced the","Fragments":["complexity"]},{"Key":" Yup.","Fragments":["I","I"]},{"Key":"Yup. I","Fragments":["just","had"]},{"Key":"just ran","Fragments":["the"]},{"Key":"ran the","Fragments":["test","same","tests"]},{"Key":"test again","Fragments":["with"]},{"Key":"change in","Fragments":["the","the"]},{"Key":"works just","Fragments":["fine."]},{"Key":"the problems","Fragments":["I"]},{"Key":"problems I","Fragments":["came"]},{"Key":"across when","Fragments":["implementing"]},{"Key":"when implementing","Fragments":["the"]},{"Key":"implementing the","Fragments":["solution"]},{"Key":"solution was","Fragments":["the"]},{"Key":"the ordering","Fragments":["of","in","of","of","of"]},{"Key":"ordering of","Fragments":["the","how","your","the","tests"]},{"Key":"expressions. Originally,","Fragments":["I"]},{"Key":"Originally, I","Fragments":["switched"]},{"Key":"switched the","Fragments":["order","order"]},{"Key":"conditions. The","Fragments":["problem"]},{"Key":"I encountered","Fragments":["was","before"]},{"Key":"encountered was","Fragments":["that"]},{"Key":"message matched","Fragments":["the"]},{"Key":"wrong expression.","Fragments":["One"]},{"Key":"expression. One","Fragments":["of"]},{"Key":"expressions is","Fragments":["more","really"]},{"Key":"general than","Fragments":["the"]},{"Key":"other. After","Fragments":["realizing"]},{"Key":"After realizing","Fragments":["this,"]},{"Key":"realizing this,","Fragments":["I"]},{"Key":"general expression","Fragments":["come"]},{"Key":"expression come","Fragments":["after"]},{"Key":"come after","Fragments":["the","the"]},{"Key":"Wow! I","Fragments":["really","like"]},{"Key":"your solution!","Fragments":["I","It's"]},{"Key":"the ```upper-case```","Fragments":["function"]},{"Key":"```upper-case``` function","Fragments":["but"]},{"Key":"it never","Fragments":["occurred","occurred","occurred"]},{"Key":"never occurred","Fragments":["to","to","to"]},{"Key":"occurred to","Fragments":["me","me","me","me","me"]},{"Key":"that way.","Fragments":["It"]},{"Key":"way. It","Fragments":["also"]},{"Key":"also didn't","Fragments":["occur","realise"]},{"Key":"didn't occur","Fragments":["to"]},{"Key":"occur to","Fragments":["me"]},{"Key":"call ```last```","Fragments":["on"]},{"Key":"```last``` on","Fragments":["a"]},{"Key":"back the","Fragments":["last","first"]},{"Key":"last character.","Fragments":["From"]},{"Key":"character. From","Fragments":["my"]},{"Key":"From my","Fragments":["perspective,"]},{"Key":"my perspective,","Fragments":["your"]},{"Key":"perspective, your","Fragments":["approach"]},{"Key":"approach was","Fragments":["very","to"]},{"Key":"very innovative.","Fragments":["I"]},{"Key":"innovative. I","Fragments":["ended"]},{"Key":"expressions for","Fragments":["the","validation","that."]},{"Key":"Clojure, you","Fragments":["can"]},{"Key":"a String","Fragments":["as","is"]},{"Key":"String as","Fragments":["a"]},{"Key":"sequence (aka","Fragments":["`seq`)."]},{"Key":"(aka `seq`).","Fragments":["There"]},{"Key":"`seq`). There","Fragments":["are"]},{"Key":"are many","Fragments":["useful","different","capital"]},{"Key":"many useful","Fragments":["functions"]},{"Key":"useful functions","Fragments":["defined","for"]},{"Key":"functions defined","Fragments":["for","as"]},{"Key":"defined for","Fragments":["sequences."]},{"Key":"for sequences.","Fragments":["You"]},{"Key":"sequences. You","Fragments":["could"]},{"Key":"probably vastly","Fragments":["improve"]},{"Key":"vastly improve","Fragments":["`question?`"]},{"Key":"improve `question?`","Fragments":["with"]},{"Key":"`question?` with","Fragments":["that."]},{"Key":"Only `nil`","Fragments":["and"]},{"Key":"are falsey","Fragments":["in"]},{"Key":"falsey in","Fragments":["Clojure,"]},{"Key":"so `(not","Fragments":["(nil?"]},{"Key":"`(not (nil?","Fragments":["x))`","nuc-comp))`,"]},{"Key":"(nil? x))`","Fragments":["is"]},{"Key":"x))` is","Fragments":["the"]},{"Key":"as `(not","Fragments":["x)`"]},{"Key":"`(not x)`","Fragments":["if"]},{"Key":"x)` if","Fragments":["you"]},{"Key":"don't expect","Fragments":["`false`."]},{"Key":"a less","Fragments":["complicated/expensive","cluttered","cumbersome"]},{"Key":"less complicated/expensive","Fragments":["way"]},{"Key":"complicated/expensive way","Fragments":["to"]},{"Key":"a 'signature'","Fragments":["for"]},{"Key":"'signature' for","Fragments":["a"]},{"Key":"this purpose,","Fragments":["and"]},{"Key":"purpose, and","Fragments":["it"]},{"Key":"even has","Fragments":["a"]},{"Key":"a name!","Fragments":["Have","Great!"]},{"Key":"name! Have","Fragments":["a"]},{"Key":"google for","Fragments":["'alphagram'.","\"alphagram\".","Alphagram"]},{"Key":" `strand-compare`","Fragments":["sounds"]},{"Key":"`strand-compare` sounds","Fragments":["a"]},{"Key":"sounds a","Fragments":["bit"]},{"Key":"bit verb-y","Fragments":["to"]},{"Key":"verb-y to","Fragments":["me."]},{"Key":"Also, `zip`","Fragments":["may"]},{"Key":"`zip` may","Fragments":["be"]},{"Key":"worth a","Fragments":["look."]},{"Key":"your suggestions,","Fragments":["they"]},{"Key":"suggestions, they","Fragments":["very"]},{"Key":"they very","Fragments":["much"]},{"Key":"much simplify","Fragments":["the"]},{"Key":"the solution.","Fragments":["I"]},{"Key":"version based","Fragments":["on"]},{"Key":"comments. I'm","Fragments":["beginning"]},{"Key":"I'm beginning","Fragments":["to"]},{"Key":"beginning to","Fragments":["learn"]},{"Key":"learn Clojure","Fragments":["and","I'm"]},{"Key":"very grateful","Fragments":["for"]},{"Key":"grateful for","Fragments":["your"]},{"Key":"1. Does","Fragments":["your"]},{"Key":"Does your","Fragments":["solution"]},{"Key":"solution also","Fragments":["work"]},{"Key":"work if","Fragments":["someone","there","there"]},{"Key":"someone shouts","Fragments":["\"ÄÜÖ\"?"]},{"Key":"by without","Fragments":["any"]},{"Key":"any regular","Fragments":["expressions?"]},{"Key":"2. Small","Fragments":["coding"]},{"Key":"Small coding","Fragments":["style"]},{"Key":"coding style","Fragments":["remark:"]},{"Key":" should","Fragments":["be"]},{"Key":" Apart","Fragments":["from","from","from"]},{"Key":"Apart from","Fragments":["that,","this,","that,","too"]},{"Key":"you Clojure","Fragments":["code"]},{"Key":"looks quite","Fragments":["idiomatic"]},{"Key":"quite idiomatic","Fragments":["to"]},{"Key":"have tried","Fragments":["an"]},{"Key":"tried an","Fragments":["if"]},{"Key":"an if","Fragments":["statement","in","statement"]},{"Key":"statement instead","Fragments":["of","of"]},{"Key":"`get` from","Fragments":["a"]},{"Key":"map using","Fragments":["a"]},{"Key":"default value,","Fragments":["but"]},{"Key":"value, but","Fragments":["it","will"]},{"Key":"not add","Fragments":["any"]},{"Key":"add any","Fragments":["clarity"]},{"Key":"any clarity","Fragments":["for"]},{"Key":"clarity for","Fragments":["me.","a"]},{"Key":"works without","Fragments":["the"]},{"Key":" ({\\T","Fragments":["\\U}"]},{"Key":"({\\T \\U}","Fragments":["x"]},{"Key":"\\U} x","Fragments":["x)"]},{"Key":"this reduces","Fragments":["readability"]},{"Key":"readability IMHO,","Fragments":["especially"]},{"Key":"IMHO, especially","Fragments":["for"]},{"Key":"especially for","Fragments":["newbies."]},{"Key":"for newbies.","Fragments":["I"]},{"Key":"newbies. I","Fragments":["use"]},{"Key":"time when","Fragments":["code-golfing"]},{"Key":"when code-golfing","Fragments":[":-)."]},{"Key":"using `reduce`","Fragments":["instead","instead"]},{"Key":"`reduce` instead","Fragments":["of","of","of"]},{"Key":"of `apply`,","Fragments":["as"]},{"Key":"`apply`, as","Fragments":["`apply`"]},{"Key":"as `apply`","Fragments":["would"]},{"Key":"`apply` would","Fragments":["not"]},{"Key":"for very","Fragments":["large","specific"]},{"Key":"very large","Fragments":["Strings"]},{"Key":"large Strings","Fragments":["(e.g."]},{"Key":"Strings (e.g.","Fragments":["DNA)."]},{"Key":"(e.g. DNA).","Fragments":["Apply"]},{"Key":"DNA). Apply","Fragments":["should"]},{"Key":"Apply should","Fragments":["work"]},{"Key":"work slightly","Fragments":["faster"]},{"Key":"slightly faster","Fragments":["on"]},{"Key":"faster on","Fragments":["small"]},{"Key":"on small","Fragments":["strings"]},{"Key":"small strings","Fragments":["(I"]},{"Key":"strings (I","Fragments":["didn't"]},{"Key":"(I didn't","Fragments":["test"]},{"Key":"didn't test","Fragments":["that,","this,"]},{"Key":"test that,","Fragments":["though)."]},{"Key":"using less","Fragments":["nesting."]},{"Key":"less nesting.","Fragments":["Have"]},{"Key":"nesting. Have","Fragments":["you"]},{"Key":"considered other","Fragments":["control"]},{"Key":"other control","Fragments":["structures","structure)"]},{"Key":"control structures","Fragments":["besides"]},{"Key":"structures besides","Fragments":["`if`?"]},{"Key":"2. Style:","Fragments":["your"]},{"Key":"Style: your","Fragments":["indentation"]},{"Key":"your indentation","Fragments":["looks"]},{"Key":"indentation looks","Fragments":["a"]},{"Key":"looks a","Fragments":["bit","little"]},{"Key":"bit non-standard","Fragments":["to"]},{"Key":"non-standard to","Fragments":["me."]},{"Key":"What Editor","Fragments":["are"]},{"Key":"Editor are","Fragments":["you"]},{"Key":"Don't use","Fragments":["`def`,"]},{"Key":"use `def`,","Fragments":["`defn`"]},{"Key":"`def`, `defn`","Fragments":["etc."]},{"Key":"`defn` etc.","Fragments":["inside"]},{"Key":"etc. inside","Fragments":["a"]},{"Key":"function. They","Fragments":["should"]},{"Key":"should only","Fragments":["be"]},{"Key":"only be","Fragments":["used","used","used","interpreted","called","called"]},{"Key":"on top","Fragments":["level","of"]},{"Key":"level (for","Fragments":["declaring"]},{"Key":"(for declaring","Fragments":["functions"]},{"Key":"declaring functions","Fragments":["etc).","in"]},{"Key":"functions etc).","Fragments":["For"]},{"Key":"etc). For","Fragments":["local"]},{"Key":"For local","Fragments":["bindings,"]},{"Key":"local bindings,","Fragments":["use"]},{"Key":"bindings, use","Fragments":["`let`,"]},{"Key":"use `let`,","Fragments":["`letfn`,"]},{"Key":"`let`, `letfn`,","Fragments":["`if-let`,"]},{"Key":"`letfn`, `if-let`,","Fragments":["`when-let`"]},{"Key":"`if-let`, `when-let`","Fragments":["etc."]},{"Key":" Woah,","Fragments":["I"]},{"Key":"Woah, I","Fragments":["really"]},{"Key":"the `type-responses`","Fragments":["map."]},{"Key":"`type-responses` map.","Fragments":["It"]},{"Key":"map. It","Fragments":["really","is"]},{"Key":"It really","Fragments":["makes"]},{"Key":"of message's","Fragments":["response"]},{"Key":"message's response","Fragments":["is."]},{"Key":"response is.","Fragments":["The"]},{"Key":"is. The","Fragments":["keyword"]},{"Key":"The keyword","Fragments":["duplication"]},{"Key":"keyword duplication","Fragments":["is"]},{"Key":"duplication is","Fragments":["a"]},{"Key":"nitpick side,","Fragments":["but"]},{"Key":"side, but","Fragments":["it's"]},{"Key":"to argue","Fragments":["either"]},{"Key":"argue either","Fragments":["way."]},{"Key":" But,","Fragments":["I'm"]},{"Key":"But, I'm","Fragments":["torn"]},{"Key":"I'm torn","Fragments":["with"]},{"Key":"torn with","Fragments":["the"]},{"Key":"regex approach.","Fragments":["The"]},{"Key":"approach. The","Fragments":["way"]},{"Key":"The way","Fragments":["you've","you","you","you've"]},{"Key":"you've implemented","Fragments":["it"]},{"Key":"implemented it","Fragments":["makes","in"]},{"Key":"makes your","Fragments":["solution","code"]},{"Key":"solution really","Fragments":["clear"]},{"Key":"really clear","Fragments":["and"]},{"Key":"clear and","Fragments":["concise,","readable,","easy","readable.","readable","they"]},{"Key":"and concise,","Fragments":["using","but"]},{"Key":"concise, using","Fragments":["just"]},{"Key":"using just","Fragments":["the"]},{"Key":"library and","Fragments":["not","idioms,"]},{"Key":"not pulling","Fragments":["in","their"]},{"Key":"pulling in","Fragments":["anything"]},{"Key":"in anything","Fragments":["else.","other"]},{"Key":"else. On","Fragments":["the"]},{"Key":"hate falling","Fragments":["back"]},{"Key":"to regexes","Fragments":["just"]},{"Key":"regexes just","Fragments":["to"]},{"Key":"do simple","Fragments":["string"]},{"Key":"simple string","Fragments":["inspection.","functions","replacement"]},{"Key":"string inspection.","Fragments":["It's"]},{"Key":"inspection. It's","Fragments":["probably"]},{"Key":"a bikeshed","Fragments":["moment,"]},{"Key":"bikeshed moment,","Fragments":["but"]},{"Key":"moment, but","Fragments":["I'd"]},{"Key":"I'd use","Fragments":["predicate","`print`","zero?"]},{"Key":"well in","Fragments":["this","the"]},{"Key":"new revision","Fragments":["based"]},{"Key":"revision based","Fragments":["on"]},{"Key":"switched from","Fragments":["regex's"]},{"Key":"from regex's","Fragments":["to"]},{"Key":"regex's to","Fragments":["string"]},{"Key":"string functions.","Fragments":["It","This","Much"]},{"Key":"It addresses","Fragments":["the"]},{"Key":"addresses the","Fragments":["additional"]},{"Key":"additional scenario","Fragments":["you"]},{"Key":"scenario you","Fragments":["proposed,"]},{"Key":"you proposed,","Fragments":["although"]},{"Key":"proposed, although","Fragments":["I"]},{"Key":"have adjusted","Fragments":["the"]},{"Key":"adjusted the","Fragments":["regex"]},{"Key":"so as","Fragments":["well.","not","not","in"]},{"Key":"well. Were","Fragments":["you"]},{"Key":"Were you","Fragments":["thinking"]},{"Key":"these lines?","Fragments":["Do"]},{"Key":"lines? Do","Fragments":["you"]},{"Key":"performance difference","Fragments":["between"]},{"Key":"between string","Fragments":["functions"]},{"Key":"2. Do","Fragments":["you"]},{"Key":"any advice","Fragments":["as"]},{"Key":"advice as","Fragments":["to"]},{"Key":"to when","Fragments":["to"]},{"Key":"to inline","Fragments":["a","the","maybe?","these"]},{"Key":"inline a","Fragments":["namespace,"]},{"Key":"a namespace,","Fragments":["like","e.g."]},{"Key":"did for","Fragments":["the"]},{"Key":"string namespace,","Fragments":["and"]},{"Key":"named the","Fragments":["string","helperfunction"]},{"Key":"string parameter","Fragments":["`statement`"]},{"Key":"parameter `statement`","Fragments":["for"]},{"Key":"`statement` for","Fragments":["the"]},{"Key":"response-for method","Fragments":["instead","do"]},{"Key":"method instead","Fragments":["of","of","of"]},{"Key":"what appears","Fragments":["to"]},{"Key":"idiomatic `s`.","Fragments":["Do"]},{"Key":"`s`. Do","Fragments":["you"]},{"Key":"an opinion","Fragments":["on"]},{"Key":"opinion on","Fragments":["this?"]},{"Key":"right paren.","Fragments":["I'm"]},{"Key":"paren. I'm","Fragments":["using"]},{"Key":"I'm using","Fragments":["paredit","`declare`","Clojure","str/lower-case","require"]},{"Key":"using paredit","Fragments":["in"]},{"Key":"paredit in","Fragments":["vim"]},{"Key":"in vim","Fragments":["and"]},{"Key":"vim and","Fragments":["when"]},{"Key":"I enter","Fragments":["a"]},{"Key":"enter a","Fragments":["newline"]},{"Key":"newline it","Fragments":["seems"]},{"Key":"place the","Fragments":["right","arguments","reason"]},{"Key":"right paren","Fragments":["on"]},{"Key":"by itself","Fragments":["but","and"]},{"Key":"itself but","Fragments":["what"]},{"Key":"but what","Fragments":["I","do","if","the","about","if","you"]},{"Key":"seen seems","Fragments":["consistent"]},{"Key":"seems consistent","Fragments":["with"]},{"Key":"can save","Fragments":["some"]},{"Key":"save some","Fragments":["parens","time."]},{"Key":"some parens","Fragments":["using"]},{"Key":"parens using","Fragments":["`not=`"]},{"Key":"using `not=`","Fragments":[":-)."]},{"Key":"Thanks! Should","Fragments":["I","have"]},{"Key":"Should I","Fragments":["align","write"]},{"Key":"I align","Fragments":["the"]},{"Key":"finally got","Fragments":["around"]},{"Key":"got around","Fragments":["to"]},{"Key":"around to","Fragments":["implementing"]},{"Key":"to implementing","Fragments":["you"]},{"Key":"implementing you","Fragments":["suggestions."]},{"Key":" Lots","Fragments":["of"]},{"Key":"Lots of","Fragments":["stuff"]},{"Key":"stuff crammed","Fragments":["into","into"]},{"Key":"into `number`","Fragments":["function."]},{"Key":"`number` function.","Fragments":["You"]},{"Key":"function. You","Fragments":["could","could","probably","could"]},{"Key":"could clear","Fragments":["it"]},{"Key":"clear it","Fragments":["up","gets","up"]},{"Key":"process into","Fragments":["a"]},{"Key":"of functions.","Fragments":["Maybe","Two"]},{"Key":"functions. Maybe","Fragments":["you"]},{"Key":"could arrange","Fragments":["it"]},{"Key":"arrange it","Fragments":["as"]},{"Key":"of transformations","Fragments":["that","after"]},{"Key":"transformations that","Fragments":["the"]},{"Key":"input for","Fragments":["is"]},{"Key":"is put","Fragments":["through?"]},{"Key":"put through?","Fragments":["Then"]},{"Key":"through? Then","Fragments":["the"]},{"Key":"Then the","Fragments":["process","whole"]},{"Key":"process could","Fragments":["be"]},{"Key":"be expressed","Fragments":["clearly","more","as","in"]},{"Key":"expressed clearly","Fragments":["with"]},{"Key":"clearly with","Fragments":["the"]},{"Key":"threading `-\u003e`","Fragments":["macro."]},{"Key":"for not","Fragments":["getting","replacing"]},{"Key":"not getting","Fragments":["back"]},{"Key":"getting back","Fragments":["to"]},{"Key":"so long","Fragments":["time,"]},{"Key":"long time,","Fragments":["but"]},{"Key":"couldn't get","Fragments":["down","this","LightTable"]},{"Key":"get down","Fragments":["to"]},{"Key":"doing that","Fragments":["assignment","multiple"]},{"Key":"that assignment","Fragments":["myself","yet.","is"]},{"Key":"myself and","Fragments":["was"]},{"Key":"and was","Fragments":["holding"]},{"Key":"was holding","Fragments":["back"]},{"Key":"holding back","Fragments":["myself"]},{"Key":"back myself","Fragments":["from"]},{"Key":"myself from","Fragments":["looking"]},{"Key":"at yours.","Fragments":["Eventually"]},{"Key":"yours. Eventually","Fragments":["I've"]},{"Key":"Eventually I've","Fragments":["decided"]},{"Key":"I've decided","Fragments":["I"]},{"Key":"decided I","Fragments":["won't"]},{"Key":"be holding","Fragments":["you"]},{"Key":"holding you","Fragments":["back"]},{"Key":"you back","Fragments":["anymore"]},{"Key":"back anymore","Fragments":[":)"]},{"Key":"anymore :)","Fragments":["A"]},{"Key":":) A","Fragments":["couple"]},{"Key":"of observations","Fragments":["about"]},{"Key":"observations about","Fragments":["your"]},{"Key":"about your","Fragments":["submission:","code","code","one-character"]},{"Key":"1. That's","Fragments":["rather"]},{"Key":"That's rather","Fragments":["language"]},{"Key":"rather language","Fragments":["agnostic"]},{"Key":"language agnostic","Fragments":["remark,"]},{"Key":"agnostic remark,","Fragments":["but"]},{"Key":"remark, but","Fragments":["please,"]},{"Key":"but please,","Fragments":["don't"]},{"Key":"please, don't","Fragments":["do"]},{"Key":"don't do","Fragments":["date/time","that","things"]},{"Key":"do date/time","Fragments":["arithmetic"]},{"Key":"date/time arithmetic","Fragments":["with"]},{"Key":"arithmetic with","Fragments":["raw"]},{"Key":"with raw","Fragments":["ints/longs."]},{"Key":"raw ints/longs.","Fragments":["While"]},{"Key":"ints/longs. While","Fragments":["seeming"]},{"Key":"While seeming","Fragments":["to"]},{"Key":"seeming to","Fragments":["be"]},{"Key":"working good","Fragments":["most"]},{"Key":"good most","Fragments":["of"]},{"Key":"the time,","Fragments":["you","I"]},{"Key":"time, you","Fragments":["will","can"]},{"Key":"will eventually","Fragments":["run"]},{"Key":"eventually run","Fragments":["into"]},{"Key":"run into","Fragments":["situations","this","a"]},{"Key":"into situations","Fragments":["that"]},{"Key":"situations that","Fragments":["may"]},{"Key":"like off-by-one","Fragments":["errors."]},{"Key":"off-by-one errors.","Fragments":["It"]},{"Key":"errors. It","Fragments":["may"]},{"Key":"may manifest","Fragments":["itself"]},{"Key":"manifest itself","Fragments":["in,"]},{"Key":"itself in,","Fragments":["for"]},{"Key":"in, for","Fragments":["example,"]},{"Key":"example, some","Fragments":["border"]},{"Key":"some border","Fragments":["cases"]},{"Key":"border cases","Fragments":["of","in"]},{"Key":"cases of","Fragments":["daylight","course.","mutual"]},{"Key":"of daylight","Fragments":["saving"]},{"Key":"daylight saving","Fragments":["time"]},{"Key":"saving time","Fragments":["shifts."]},{"Key":"time shifts.","Fragments":["Another"]},{"Key":"shifts. Another","Fragments":["problem"]},{"Key":"Another problem","Fragments":["is"]},{"Key":"working in","Fragments":["the","the","the","Clojure."]},{"Key":"of timezones.","Fragments":["You"]},{"Key":"timezones. You","Fragments":["didn't"]},{"Key":"didn't run","Fragments":["into"]},{"Key":"of problems","Fragments":["here,"]},{"Key":"problems here,","Fragments":["but"]},{"Key":"the proper","Fragments":["tools","terms"]},{"Key":"proper tools","Fragments":["for"]},{"Key":"tools for","Fragments":["the","the"]},{"Key":"the job","Fragments":["which","done.","as","of"]},{"Key":"job which","Fragments":["are"]},{"Key":"are designed","Fragments":["and"]},{"Key":"designed and","Fragments":["thoroughly"]},{"Key":"and thoroughly","Fragments":["tested"]},{"Key":"thoroughly tested","Fragments":["with"]},{"Key":"tested with","Fragments":["all"]},{"Key":"all possible","Fragments":["border","names"]},{"Key":"possible border","Fragments":["cases"]},{"Key":"cases in","Fragments":["mind.","my","the"]},{"Key":"in mind.","Fragments":["Unfortunately,","I","I'm"]},{"Key":"mind. Unfortunately,","Fragments":["in"]},{"Key":"Unfortunately, in","Fragments":["the"]},{"Key":"current context","Fragments":["(no"]},{"Key":"context (no","Fragments":["access"]},{"Key":"(no access","Fragments":["to"]},{"Key":"anything but","Fragments":["standard"]},{"Key":"but standard","Fragments":["library),"]},{"Key":"standard library),","Fragments":["we"]},{"Key":"library), we","Fragments":["don't"]},{"Key":"to best","Fragments":["tools","express"]},{"Key":"best tools","Fragments":["for"]},{"Key":"the job,","Fragments":["like"]},{"Key":"job, like","Fragments":["Joda"]},{"Key":"like Joda","Fragments":["Time"]},{"Key":"Joda Time","Fragments":["(or"]},{"Key":"Time (or","Fragments":["its'"]},{"Key":"(or its'","Fragments":["Clojure"]},{"Key":"its' Clojure","Fragments":["wrapper"]},{"Key":"Clojure wrapper","Fragments":["-"]},{"Key":"wrapper -","Fragments":["clj-time)."]},{"Key":"- clj-time).","Fragments":["The"]},{"Key":"clj-time). The","Fragments":["only"]},{"Key":"thing we","Fragments":["are"]},{"Key":"are left","Fragments":["with,"]},{"Key":"left with,","Fragments":["is"]},{"Key":"with, is","Fragments":["java.util.Calendar"]},{"Key":"is java.util.Calendar","Fragments":["which"]},{"Key":"java.util.Calendar which","Fragments":["allows"]},{"Key":"more sane","Fragments":["approach"]},{"Key":"sane approach","Fragments":["to"]},{"Key":"to date","Fragments":["manipulation"]},{"Key":"date manipulation","Fragments":["than"]},{"Key":"manipulation than","Fragments":["the"]},{"Key":"the old","Fragments":["java.util.Date"]},{"Key":"old java.util.Date","Fragments":["class."]},{"Key":"the api","Fragments":["generation","generation"]},{"Key":"api generation","Fragments":["-","was"]},{"Key":"generation -","Fragments":["I'm"]},{"Key":"generating functions","Fragments":["in"]},{"Key":"such way,","Fragments":["by"]},{"Key":"way, by","Fragments":["manually"]},{"Key":"by manually","Fragments":["manipulating"]},{"Key":"manually manipulating","Fragments":["the"]},{"Key":"manipulating the","Fragments":["namespace"]},{"Key":"namespace symbol","Fragments":["table."]},{"Key":"symbol table.","Fragments":["Especially"]},{"Key":"table. Especially","Fragments":["when"]},{"Key":"Especially when","Fragments":["that"]},{"Key":"when that","Fragments":["is"]},{"Key":"applied to","Fragments":["functions","a","a"]},{"Key":"API. It","Fragments":["obfuscates"]},{"Key":"It obfuscates","Fragments":["the"]},{"Key":"obfuscates the","Fragments":["code","code,"]},{"Key":"don't immediately","Fragments":["see"]},{"Key":"immediately see","Fragments":["what's"]},{"Key":"see what's","Fragments":["available.","important."]},{"Key":"what's available.","Fragments":["I"]},{"Key":"can't justify","Fragments":["this"]},{"Key":"justify this","Fragments":["kind"]},{"Key":"of shortcuts,","Fragments":["when"]},{"Key":"shortcuts, when","Fragments":["the"]},{"Key":"thing these","Fragments":["save"]},{"Key":"these save","Fragments":["you,"]},{"Key":"save you,","Fragments":["are"]},{"Key":"you, are","Fragments":["just"]},{"Key":"couple keystrokes.","Fragments":["You"]},{"Key":"keystrokes. You","Fragments":["write"]},{"Key":"You write","Fragments":["that"]},{"Key":"write that","Fragments":["code","cond."]},{"Key":"code once.","Fragments":["It"]},{"Key":"once. It","Fragments":["will"]},{"Key":"be read","Fragments":["many","easily."]},{"Key":"read many","Fragments":["times."]},{"Key":"many times.","Fragments":["I"]},{"Key":"times. I","Fragments":["personally"]},{"Key":"personally would","Fragments":["define","add","prefer"]},{"Key":"would define","Fragments":["every"]},{"Key":"define every","Fragments":["function"]},{"Key":"more DRY.","Fragments":["The","You"]},{"Key":"DRY. The","Fragments":["`str`"]},{"Key":"The `str`","Fragments":["forms"]},{"Key":"`str` forms","Fragments":["could"]},{"Key":"forms could","Fragments":["be"]},{"Key":"made more","Fragments":["readable","expressive."]},{"Key":"readable by","Fragments":["creating","removing"]},{"Key":"are interleaved","Fragments":["with"]},{"Key":"literals. Also,","Fragments":["it"]},{"Key":"Also, it","Fragments":["would","is","seems"]},{"Key":"use idiomatic","Fragments":["naming"]},{"Key":"idiomatic naming","Fragments":["style."]},{"Key":"naming style.","Fragments":["Generally,"]},{"Key":"style. Generally,","Fragments":["besides"]},{"Key":"Generally, besides","Fragments":["protocols,"]},{"Key":"besides protocols,","Fragments":["records"]},{"Key":"protocols, records","Fragments":["and"]},{"Key":"records and","Fragments":["general"]},{"Key":"and general","Fragments":["java","strategies"]},{"Key":"general java","Fragments":["interop,"]},{"Key":"java interop,","Fragments":["all"]},{"Key":"interop, all","Fragments":["names"]},{"Key":"all names","Fragments":["should"]},{"Key":"be lowercase","Fragments":["and"]},{"Key":"lowercase and","Fragments":["hyphen"]},{"Key":"and hyphen","Fragments":["delimited."]},{"Key":"hyphen delimited.","Fragments":["As"]},{"Key":"delimited. As","Fragments":["for"]},{"Key":"for `range-verses`","Fragments":["-"]},{"Key":"`range-verses` -","Fragments":["`range`"]},{"Key":"- `range`","Fragments":["has"]},{"Key":"has 3rd","Fragments":["optional"]},{"Key":"3rd optional","Fragments":["parameter"]},{"Key":"optional parameter","Fragments":["defining"]},{"Key":"parameter defining","Fragments":["the"]},{"Key":"the step","Fragments":["-","function"]},{"Key":"step -","Fragments":["it"]},{"Key":"to enforce","Fragments":["some"]},{"Key":"enforce some","Fragments":["sort"]},{"Key":"a contract,","Fragments":["you"]},{"Key":"contract, you","Fragments":["can"]},{"Key":"use pre","Fragments":["(and"]},{"Key":"pre (and","Fragments":["post)"]},{"Key":"(and post)","Fragments":["conditions,"]},{"Key":"post) conditions,","Fragments":["attached"]},{"Key":"conditions, attached","Fragments":["as"]},{"Key":"attached as","Fragments":["a"]},{"Key":"a metadata","Fragments":["to"]},{"Key":"metadata to","Fragments":["the","predicate"]},{"Key":"the `defn`","Fragments":["function"]},{"Key":"`defn` function","Fragments":["binding."]},{"Key":"function binding.","Fragments":["A"]},{"Key":"binding. A","Fragments":["bit"]},{"Key":"bit dated","Fragments":["but"]},{"Key":"dated but","Fragments":["still"]},{"Key":"still relevant","Fragments":["example"]},{"Key":"relevant example","Fragments":["and"]},{"Key":"and explanation","Fragments":["of"]},{"Key":"the feature","Fragments":["can"]},{"Key":"feature can","Fragments":["be"]},{"Key":"here: http://blog.fogus.me/2009/12/21/clojures-pre-and-post/","Fragments":["."]},{"Key":"clear but","Fragments":["you"]},{"Key":"DRY. You","Fragments":["could"]},{"Key":"could maintain","Fragments":["the"]},{"Key":"readability by","Fragments":["interleaving"]},{"Key":"by interleaving","Fragments":["the"]},{"Key":"interleaving the","Fragments":["string"]},{"Key":"literals with","Fragments":["well"]},{"Key":"with well","Fragments":["named"]},{"Key":"well named","Fragments":["bindings.","bindings"]},{"Key":"`:use` which","Fragments":["is"]},{"Key":"currently deprecated.","Fragments":["The"]},{"Key":"deprecated. The","Fragments":["equivalent"]},{"Key":"The equivalent","Fragments":["form"]},{"Key":"equivalent form","Fragments":["would"]},{"Key":"form would","Fragments":["look","be","be"]},{"Key":" `universe`","Fragments":["gave"]},{"Key":"`universe` gave","Fragments":["me"]},{"Key":"gave me","Fragments":["a","some","a","some","lots"]},{"Key":"pause -","Fragments":["maybe","I"]},{"Key":"maybe `candidates`","Fragments":["would"]},{"Key":"`candidates` would","Fragments":["be"]},{"Key":"better name?","Fragments":["At"]},{"Key":"name? At","Fragments":["least"]},{"Key":"At least","Fragments":["`#()`","I"]},{"Key":"least `#()`","Fragments":["anonymous"]},{"Key":"`#()` anonymous","Fragments":["function"]},{"Key":"literals could","Fragments":["be"]},{"Key":"be swapped","Fragments":["for"]},{"Key":"for `(partial","Fragments":["...)`"]},{"Key":"`(partial ...)`","Fragments":["-"]},{"Key":"...)` -","Fragments":["that's"]},{"Key":"that's rather","Fragments":["personal"]},{"Key":"rather personal","Fragments":["preference"]},{"Key":"opinion it","Fragments":["reduces","will"]},{"Key":"it reduces","Fragments":["the"]},{"Key":"reduces the","Fragments":["clutter."]},{"Key":"Also think","Fragments":["about"]},{"Key":"of repeatedly","Fragments":["processing"]},{"Key":"repeatedly processing","Fragments":["the"]},{"Key":"word you're","Fragments":["checking"]},{"Key":"checking against","Fragments":["along"]},{"Key":"against along","Fragments":["with","with","with","with"]},{"Key":"Even with","Fragments":["reduce"]},{"Key":"with reduce","Fragments":["you","looks"]},{"Key":"reduce you","Fragments":["would"]},{"Key":"build up","Fragments":["the","`transform-row`"]},{"Key":"whole string.","Fragments":["Given"]},{"Key":"string. Given","Fragments":["how"]},{"Key":"API is","Fragments":["laid","quite"]},{"Key":"is laid","Fragments":["out,"]},{"Key":"laid out,","Fragments":["there's"]},{"Key":"out, there's","Fragments":["no"]},{"Key":"no room","Fragments":["for"]},{"Key":"with regard","Fragments":["to"]},{"Key":"regard to","Fragments":["handling"]},{"Key":"to handling","Fragments":["large"]},{"Key":"handling large","Fragments":["input."]},{"Key":"large input.","Fragments":["At"]},{"Key":"input. At","Fragments":["least"]},{"Key":"least I","Fragments":["don't"]},{"Key":" `(seq","Fragments":["sequence)`","dna)`"]},{"Key":"`(seq sequence)`","Fragments":["is"]},{"Key":"sequence)` is","Fragments":["the"]},{"Key":"usual approach","Fragments":["to"]},{"Key":"empty sequences,","Fragments":["however"]},{"Key":"sequences, however","Fragments":["this"]},{"Key":"however this","Fragments":["is","may"]},{"Key":"`empty?` describes","Fragments":["the"]},{"Key":"intent better.","Fragments":["You"]},{"Key":"better. You","Fragments":["could"]},{"Key":"could reuse","Fragments":["`nothing?`"]},{"Key":"reuse `nothing?`","Fragments":["inside"]},{"Key":"`nothing?` inside","Fragments":["`shouting?`"]},{"Key":"inside `shouting?`","Fragments":["to"]},{"Key":"`shouting?` to","Fragments":["make","make"]},{"Key":"more order","Fragments":["independent."]},{"Key":"independent. Optionally,","Fragments":["check"]},{"Key":"Optionally, check","Fragments":["for"]},{"Key":"for `question?`","Fragments":["could","I"]},{"Key":"`question?` could","Fragments":["have"]},{"Key":"been made","Fragments":["with"]},{"Key":"made with","Fragments":["String's"]},{"Key":"with String's","Fragments":["`.endsWith`"]},{"Key":"String's `.endsWith`","Fragments":["method."]},{"Key":"`.endsWith` method.","Fragments":["However"]},{"Key":"method. However","Fragments":["I"]},{"Key":"understand that","Fragments":["you","you"]},{"Key":"with treating","Fragments":["strings"]},{"Key":"treating strings","Fragments":["as","as"]},{"Key":"as seqs","Fragments":["of"]},{"Key":"seqs of","Fragments":["characters."]},{"Key":"But could","Fragments":["you"]},{"Key":"please explain","Fragments":["why"]},{"Key":"explain why","Fragments":["exactly"]},{"Key":"why exactly","Fragments":["using"]},{"Key":"exactly using","Fragments":["\u003ccode\u003edef\u003c/code\u003e"]},{"Key":"using \u003ccode\u003edef\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003edef\u003c/code\u003e and","Fragments":["\u003ccode\u003edefn\u003c/code\u003e"]},{"Key":"and \u003ccode\u003edefn\u003c/code\u003e","Fragments":["inside"]},{"Key":"\u003ccode\u003edefn\u003c/code\u003e inside","Fragments":["functions"]},{"Key":"inside functions","Fragments":["is"]},{"Key":"functions is","Fragments":["bad?","the","defined.","generally","generally","definitely","the","probably"]},{"Key":"exactly understand","Fragments":["what"]},{"Key":"mean, but","Fragments":["your"]},{"Key":"your alignment","Fragments":["looks"]},{"Key":"alignment looks","Fragments":["fine"]},{"Key":"looks fine","Fragments":["to","(on","to","as"]},{"Key":"fine to","Fragments":["me.","just","me."]},{"Key":" `split`","Fragments":["and"]},{"Key":"`split` and","Fragments":["`remove-blanks`","`remove-blanks`"]},{"Key":"and `remove-blanks`","Fragments":["are","are"]},{"Key":"`remove-blanks` are","Fragments":["entirely","unnecessary."]},{"Key":"are entirely","Fragments":["unnecessary."]},{"Key":"entirely unnecessary.","Fragments":["Strings"]},{"Key":"unnecessary. Strings","Fragments":["work"]},{"Key":"Strings work","Fragments":["with"]},{"Key":"with sequence","Fragments":["related"]},{"Key":"functions. They","Fragments":["are","are"]},{"Key":"a sequences","Fragments":["of"]},{"Key":"- consider","Fragments":["reducing"]},{"Key":"are comparing","Fragments":["against","against"]},{"Key":"against with","Fragments":["every"]},{"Key":" `left`","Fragments":["and"]},{"Key":"`left` and","Fragments":["`right`"]},{"Key":"and `right`","Fragments":["suggest"]},{"Key":"`right` suggest","Fragments":["that"]},{"Key":"important (which","Fragments":["currently"]},{"Key":"(which currently","Fragments":["isn't"]},{"Key":"currently isn't","Fragments":["the"]},{"Key":"the case)","Fragments":["-"]},{"Key":"misleading. Even","Fragments":["then,"]},{"Key":"Even then,","Fragments":["the","a"]},{"Key":"then, the","Fragments":["names"]},{"Key":"more descriptive,","Fragments":["like"]},{"Key":"descriptive, like","Fragments":["`word`"]},{"Key":"like `word`","Fragments":["and"]},{"Key":"`word` and","Fragments":["`candidate`"]},{"Key":"and `candidate`","Fragments":["or"]},{"Key":"`candidate` or","Fragments":["something"]},{"Key":"not part","Fragments":["of","of","of"]},{"Key":"Thanks @ruthie","Fragments":[","]},{"Key":"@ruthie ,","Fragments":["I"]},{"Key":"sense. Thank","Fragments":["you"]},{"Key":"Just minor","Fragments":["changes"]},{"Key":"minor changes","Fragments":["in"]},{"Key":"changes in","Fragments":["the"]},{"Key":"the form","Fragments":["of","in","would"]},{"Key":"of better","Fragments":["argument","use"]},{"Key":"better argument","Fragments":["names"]},{"Key":"argument names","Fragments":["and"]},{"Key":" @wilhelmine","Fragments":["Hmmm..."]},{"Key":"@wilhelmine Hmmm...","Fragments":["I"]},{"Key":"Hmmm... I","Fragments":["was"]},{"Key":"advice about","Fragments":["-\u003e"]},{"Key":"about -\u003e","Fragments":["but"]},{"Key":"-\u003e but","Fragments":["couldn't"]},{"Key":"couldn't quite","Fragments":["figure","get"]},{"Key":"quite figure","Fragments":["out"]},{"Key":"do so.","Fragments":["I"]},{"Key":"so. I","Fragments":["recalled","suppose"]},{"Key":"I recalled","Fragments":["the"]},{"Key":"recalled the","Fragments":["section"]},{"Key":"the section","Fragments":["in"]},{"Key":"in Brian","Fragments":["Marick's"]},{"Key":"Brian Marick's","Fragments":["FPfOOP"]},{"Key":"Marick's FPfOOP","Fragments":["book"]},{"Key":"FPfOOP book","Fragments":["on"]},{"Key":"book on","Fragments":["using"]},{"Key":"simplify matters","Fragments":["but"]},{"Key":"matters but","Fragments":["it"]},{"Key":"looked like","Fragments":["I"]},{"Key":" Anyway...","Fragments":["I"]},{"Key":"Anyway... I","Fragments":["took"]},{"Key":"took advice","Fragments":["on"]},{"Key":"advice on","Fragments":["my","zipmap.","merging"]},{"Key":"my Elixir","Fragments":["solution"]},{"Key":"Elixir solution","Fragments":["and"]},{"Key":"and applied","Fragments":["it"]},{"Key":"applied it","Fragments":["here."]},{"Key":"it here.","Fragments":["If"]},{"Key":"here. If","Fragments":["you're"]},{"Key":"you're willing","Fragments":["to"]},{"Key":"more insight,","Fragments":["I'd"]},{"Key":"insight, I'd","Fragments":["be"]},{"Key":"to pursue","Fragments":["your"]},{"Key":"pursue your","Fragments":["advice"]},{"Key":"the feedback!","Fragments":["I'm","I"]},{"Key":"feedback! I'm","Fragments":["still"]},{"Key":"still getting","Fragments":["to","used","two"]},{"Key":"getting to","Fragments":["grips"]},{"Key":"to grips","Fragments":["with"]},{"Key":"grips with","Fragments":["Clojure's"]},{"Key":"with Clojure's","Fragments":["standard"]},{"Key":"Clojure's standard","Fragments":["library"]},{"Key":"standard library","Fragments":["and","is","for","helps"]},{"Key":"and idioms,","Fragments":["but"]},{"Key":"idioms, but","Fragments":["I've"]},{"Key":"a far","Fragments":["more"]},{"Key":"far more","Fragments":["succint","complicated"]},{"Key":"succint version","Fragments":["two"]},{"Key":"version two","Fragments":["for","with"]},{"Key":"two for","Fragments":["this"]},{"Key":" @elwyn","Fragments":["I've"]},{"Key":"@elwyn I've","Fragments":["seen"]},{"Key":"seen a","Fragments":["few"]},{"Key":"few examples","Fragments":["that"]},{"Key":"examples that","Fragments":["attempt"]},{"Key":"that attempt","Fragments":["this"]},{"Key":"attempt this","Fragments":["in"]},{"Key":"languages on","Fragments":["here,"]},{"Key":"on here,","Fragments":["and","as"]},{"Key":"here, and","Fragments":["come"]},{"Key":"come to","Fragments":["the","my"]},{"Key":"the conclusion","Fragments":["that"]},{"Key":"conclusion that","Fragments":["the"]},{"Key":"extra glue","Fragments":["code"]},{"Key":"glue code","Fragments":["you"]},{"Key":"write ends","Fragments":["up"]},{"Key":"ends up","Fragments":["being","being"]},{"Key":"up being","Fragments":["nearly","expanded","less","hard"]},{"Key":"being nearly","Fragments":["as"]},{"Key":"nearly as","Fragments":["long"]},{"Key":"as long","Fragments":["as","as"]},{"Key":"the repeated","Fragments":["text,"]},{"Key":"repeated text,","Fragments":["and"]},{"Key":"text, and","Fragments":["whatever"]},{"Key":"and whatever","Fragments":["reduction"]},{"Key":"whatever reduction","Fragments":["is"]},{"Key":"reduction is","Fragments":["left"]},{"Key":"the loss","Fragments":["of"]},{"Key":"loss of","Fragments":["clarity"]},{"Key":"of clarity","Fragments":["-"]},{"Key":"clarity -","Fragments":["for"]},{"Key":"me at","Fragments":["least!","least"]},{"Key":"at least!","Fragments":["I'm"]},{"Key":"least! I'm","Fragments":["kind"]},{"Key":"I'm kind","Fragments":["of","of"]},{"Key":"of happy","Fragments":["with"]},{"Key":"with having","Fragments":["redundancy"]},{"Key":"having redundancy","Fragments":["and"]},{"Key":"redundancy and","Fragments":["repetition","used"]},{"Key":"and repetition","Fragments":["in"]},{"Key":"repetition in","Fragments":["*content*,","beer-line-2,"]},{"Key":"in *content*,","Fragments":["just"]},{"Key":"*content*, just","Fragments":["not"]},{"Key":"just not","Fragments":["in"]},{"Key":"in logic,","Fragments":["if"]},{"Key":"logic, if","Fragments":["that"]},{"Key":"1) Good","Fragments":["point,"]},{"Key":"point, it's","Fragments":["not"]},{"Key":"best choice","Fragments":["between"]},{"Key":"choice between","Fragments":["`Calendar`","sorting"]},{"Key":"between `Calendar`","Fragments":["and"]},{"Key":"`Calendar` and","Fragments":["`Date`"]},{"Key":"and `Date`","Fragments":["but"]},{"Key":"`Date` but","Fragments":["given"]},{"Key":"but given","Fragments":["the","the"]},{"Key":"the constraints","Fragments":["`Calendar`","are"]},{"Key":"constraints `Calendar`","Fragments":["is"]},{"Key":"`Calendar` is","Fragments":["the"]},{"Key":"the better","Fragments":["choice.","choice","way","solution."]},{"Key":"2) I","Fragments":["agree,"]},{"Key":"agree, the","Fragments":["api","name"]},{"Key":"generation was","Fragments":["a","also"]},{"Key":"nice trick","Fragments":["but"]},{"Key":"using `ns-resolve`.","Fragments":["I"]},{"Key":"`ns-resolve`. I","Fragments":["found"]},{"Key":"found [NimbleText](http://nimbletext.com/Live)","Fragments":["very"]},{"Key":"[NimbleText](http://nimbletext.com/Live) very","Fragments":["useful"]},{"Key":"useful generating","Fragments":["my"]},{"Key":"generating my","Fragments":["new"]},{"Key":"new submission.","Fragments":["The"]},{"Key":"submission. The","Fragments":["new"]},{"Key":"The new","Fragments":["version"]},{"Key":"version is","Fragments":["twice","more","perfectly","much"]},{"Key":"is twice","Fragments":["as"]},{"Key":"as many","Fragments":["lines,"]},{"Key":"many lines,","Fragments":["but"]},{"Key":"lines, but","Fragments":["much","they're","hopefully"]},{"Key":"but much","Fragments":["more"]},{"Key":"Edit: Heh,","Fragments":["I"]},{"Key":"Heh, I","Fragments":["have","can't","can't"]},{"Key":"no \"Looks","Fragments":["great!\""]},{"Key":"\"Looks great!\"","Fragments":["button"]},{"Key":"great!\" button","Fragments":["here"]},{"Key":"button here","Fragments":[":("]},{"Key":"here :(","Fragments":["Probably"]},{"Key":":( Probably","Fragments":["because"]},{"Key":"Probably because","Fragments":["I","Clojure"]},{"Key":"haven't done","Fragments":["that"]},{"Key":" Unfortunately,","Fragments":["only","though"]},{"Key":"Unfortunately, only","Fragments":["standard"]},{"Key":"only standard","Fragments":["library"]},{"Key":"available at","Fragments":["hand."]},{"Key":"right, I've","Fragments":["wrongly"]},{"Key":"I've wrongly","Fragments":["suggested"]},{"Key":"wrongly suggested","Fragments":["`repeat`"]},{"Key":"suggested `repeat`","Fragments":["which"]},{"Key":"`repeat` which","Fragments":["repeats"]},{"Key":"which repeats","Fragments":["the"]},{"Key":"repeats the","Fragments":["value."]},{"Key":"the value.","Fragments":["`repeatedly`"]},{"Key":"value. `repeatedly`","Fragments":["calls"]},{"Key":"`repeatedly` calls","Fragments":["the"]},{"Key":"function numerous","Fragments":["times"]},{"Key":"numerous times","Fragments":["which"]},{"Key":"times which","Fragments":["is"]},{"Key":"is what's","Fragments":["needed"]},{"Key":"what's needed","Fragments":["in"]},{"Key":"needed in","Fragments":["this","`transcribe`:"]},{"Key":"The threading","Fragments":["macro","macro"]},{"Key":"a syntactic","Fragments":["sugar."]},{"Key":"syntactic sugar.","Fragments":["The"]},{"Key":"sugar. The","Fragments":["gist"]},{"Key":"The gist","Fragments":["of"]},{"Key":"gist of","Fragments":["the"]},{"Key":"is arranging","Fragments":["the"]},{"Key":"arranging the","Fragments":["process"]},{"Key":"process where","Fragments":["input","data"]},{"Key":"where input","Fragments":["is"]},{"Key":"is piped","Fragments":["through"]},{"Key":"piped through","Fragments":["a"]},{"Key":"through a","Fragments":["series","series","series"]},{"Key":"of transforming","Fragments":["functions."]},{"Key":"transforming functions.","Fragments":["You"]},{"Key":"functions. You","Fragments":["could"]},{"Key":"could extract","Fragments":["the","the","a","more"]},{"Key":"the steps","Fragments":["like:"]},{"Key":"steps like:","Fragments":["`extract-numbers"]},{"Key":"like: `extract-numbers","Fragments":["-\u003e"]},{"Key":"`extract-numbers -\u003e","Fragments":["strip-us-prefix"]},{"Key":"-\u003e strip-us-prefix","Fragments":["-\u003e"]},{"Key":"strip-us-prefix -\u003e","Fragments":["sanitize-number`"]},{"Key":"-\u003e sanitize-number`","Fragments":["(by"]},{"Key":"sanitize-number` (by","Fragments":["the"]},{"Key":"(by the","Fragments":["way,"]},{"Key":"way, `-\u003e`","Fragments":["is"]},{"Key":"`-\u003e` is","Fragments":["used"]},{"Key":"only as","Fragments":["a"]},{"Key":"a visual","Fragments":["help,","style"]},{"Key":"visual help,","Fragments":["not"]},{"Key":"help, not","Fragments":["actual"]},{"Key":"not actual","Fragments":["usage"]},{"Key":"actual usage","Fragments":["of"]},{"Key":"threading macro).","Fragments":["On"]},{"Key":"macro). On","Fragments":["first"]},{"Key":"On first","Fragments":["go"]},{"Key":"first go","Fragments":["you"]},{"Key":"go you","Fragments":["could"]},{"Key":"a nested","Fragments":["form","forms"]},{"Key":"nested form","Fragments":["(transform3"]},{"Key":"form (transform3","Fragments":["(transform2"]},{"Key":"(transform3 (transform2","Fragments":["(transform1"]},{"Key":"(transform2 (transform1","Fragments":["input)))."]},{"Key":"(transform1 input))).","Fragments":["Then"]},{"Key":"input))). Then","Fragments":["going"]},{"Key":"Then going","Fragments":["to"]},{"Key":"with `-\u003e`","Fragments":["macro","arrows"]},{"Key":"pretty easy","Fragments":["-","to","to"]},{"Key":"easy -","Fragments":["you"]},{"Key":"you work","Fragments":["it"]},{"Key":"work it","Fragments":["out"]},{"Key":"you read","Fragments":["the"]},{"Key":"- inside","Fragments":["out"]},{"Key":"out -","Fragments":["`(-\u003e"]},{"Key":"- `(-\u003e","Fragments":["input"]},{"Key":"`(-\u003e input","Fragments":["transform1","...)`?"]},{"Key":"input transform1","Fragments":["transform2"]},{"Key":"transform1 transform2","Fragments":["transform3)`."]},{"Key":"entirely a","Fragments":["matter"]},{"Key":"preference. I","Fragments":["personally"]},{"Key":"personally don't","Fragments":["do"]},{"Key":"certainly improves","Fragments":["readability","golf"]},{"Key":"improves readability","Fragments":["-"]},{"Key":"- still,","Fragments":["it"]},{"Key":"still, it","Fragments":["puts"]},{"Key":"it puts","Fragments":["additional"]},{"Key":"puts additional","Fragments":["burden"]},{"Key":"additional burden","Fragments":["of"]},{"Key":"burden of","Fragments":["maintenance"]},{"Key":"of maintenance","Fragments":["-"]},{"Key":"maintenance -","Fragments":["necessity"]},{"Key":"- necessity","Fragments":["to"]},{"Key":"to realign","Fragments":["the"]},{"Key":"realign the","Fragments":["form"]},{"Key":" Breaking","Fragments":["the"]},{"Key":"Breaking the","Fragments":["string","all-alpha-caps?"]},{"Key":"string among","Fragments":["multiple"]},{"Key":"readability. It","Fragments":["would"]},{"Key":"leave a","Fragments":["single","zero"]},{"Key":"single space","Fragments":["between"]},{"Key":"space between","Fragments":["character"]},{"Key":"between character","Fragments":["literals"]},{"Key":"and forms","Fragments":["inside"]},{"Key":"forms inside","Fragments":["`str`"]},{"Key":"inside `str`","Fragments":["forms."]},{"Key":"`str` forms.","Fragments":["Maybe"]},{"Key":"forms. Maybe","Fragments":["it"]},{"Key":"Maybe it","Fragments":["would","should"]},{"Key":"to inflect","Fragments":["whole"]},{"Key":"inflect whole","Fragments":["words,"]},{"Key":"whole words,","Fragments":["not"]},{"Key":"words, not","Fragments":["just"]},{"Key":"just suffixes?","Fragments":["The"]},{"Key":"suffixes? The","Fragments":["remark"]},{"Key":"The remark","Fragments":["about"]},{"Key":"about 3rd","Fragments":["argument"]},{"Key":"3rd argument","Fragments":["to","which","which"]},{"Key":"to `range`","Fragments":["stil"]},{"Key":"`range` stil","Fragments":["stands."]},{"Key":"example would","Fragments":["have"]},{"Key":"been helpful.","Fragments":["I"]},{"Key":"helpful. I","Fragments":["mean","applied"]},{"Key":"mean would","Fragments":["it"]},{"Key":"(= (clojure.string/upper-case","Fragments":["s)","s)"]},{"Key":"(clojure.string/upper-case s)","Fragments":["s)","s)"]},{"Key":" (not=","Fragments":["(clojure.string/lower-case","(clojure.string/lower-case","word","word"]},{"Key":"(not= (clojure.string/lower-case","Fragments":["s)","s)"]},{"Key":"(clojure.string/lower-case s)","Fragments":["s))","s))"]},{"Key":"Where there","Fragments":["are"]},{"Key":"are extra","Fragments":["spaces","`()`s"]},{"Key":"extra spaces","Fragments":["after"]},{"Key":"spaces after","Fragments":["`=`"]},{"Key":"after `=`","Fragments":["so"]},{"Key":"`=` so","Fragments":["the"]},{"Key":"opening paren","Fragments":["lines","below"]},{"Key":"paren lines","Fragments":["up"]},{"Key":"lines up","Fragments":["with"]},{"Key":"paren below","Fragments":["it."]},{"Key":"below it.","Fragments":["See"]},{"Key":"it. See","Fragments":["my"]},{"Key":"See my","Fragments":["code","next","follow-up","comments"]},{"Key":"in iteration","Fragments":["5."]},{"Key":"Thanks @mckayla","Fragments":["."]},{"Key":"One question","Fragments":[","]},{"Key":"question ,","Fragments":["the"]},{"Key":", the","Fragments":["only"]},{"Key":"use pattern","Fragments":["matching"]},{"Key":"pattern matching","Fragments":["with",":)"]},{"Key":"matching with","Fragments":["clojure"]},{"Key":"with clojure","Fragments":["is","core."]},{"Key":"is with","Fragments":["the",":pre"]},{"Key":"library `core.match`?","Fragments":["Because"]},{"Key":"`core.match`? Because","Fragments":["this"]},{"Key":"Because this","Fragments":["example"]},{"Key":"this example","Fragments":["is","will","in"]},{"Key":"good exercise","Fragments":["for"]},{"Key":"exercise for","Fragments":["that","this"]},{"Key":"that instead","Fragments":["of","of","of"]},{"Key":"of `cond`","Fragments":[".","in","vs","in"]},{"Key":"agree. However,","Fragments":["I"]},{"Key":"always assume","Fragments":["that"]},{"Key":"that main","Fragments":["point"]},{"Key":"main point","Fragments":["of"]},{"Key":"assignment is","Fragments":["to"]},{"Key":"the repetition.","Fragments":["My","Especially"]},{"Key":"repetition. My","Fragments":["first"]},{"Key":"first take","Fragments":["on"]},{"Key":"the assignment","Fragments":["was"]},{"Key":"assignment was","Fragments":["roughly"]},{"Key":"was roughly","Fragments":["the"]},{"Key":"roughly the","Fragments":["same"]},{"Key":"as yours.","Fragments":["You"]},{"Key":"yours. You","Fragments":["can"]},{"Key":"can maintain","Fragments":["the"]},{"Key":"readability at","Fragments":["reasonable"]},{"Key":"at reasonable","Fragments":["level"]},{"Key":"reasonable level","Fragments":["while"]},{"Key":"level while","Fragments":["reducing"]},{"Key":"while reducing","Fragments":["the"]},{"Key":"the repetition,","Fragments":["although","but"]},{"Key":"repetition, although","Fragments":["as"]},{"Key":"although as","Fragments":["you've"]},{"Key":"as you've","Fragments":["observed,"]},{"Key":"you've observed,","Fragments":["you"]},{"Key":"observed, you","Fragments":["don't"]},{"Key":"don't gain","Fragments":["much"]},{"Key":"gain much","Fragments":["with"]},{"Key":"much with","Fragments":["regards"]},{"Key":"admit `beer-song`","Fragments":["is"]},{"Key":"`beer-song` is","Fragments":["my"]},{"Key":"my least","Fragments":["favorite","favourite"]},{"Key":"least favorite","Fragments":["assignment."]},{"Key":"favorite assignment.","Fragments":["Maybe"]},{"Key":"assignment. Maybe","Fragments":["indeed"]},{"Key":"Maybe indeed","Fragments":["I"]},{"Key":"indeed I","Fragments":["should"]},{"Key":"should revisit","Fragments":["my"]},{"Key":"revisit my","Fragments":["approach"]},{"Key":"my approach","Fragments":["to","of","using"]},{"Key":"to reviewing","Fragments":["and"]},{"Key":"reviewing and","Fragments":["don't"]},{"Key":"don't push","Fragments":["that"]},{"Key":"that DRY","Fragments":["requirement"]},{"Key":"DRY requirement","Fragments":["on"]},{"Key":"requirement on","Fragments":["everyone"]},{"Key":"on everyone","Fragments":[":)"]},{"Key":" @charlotte","Fragments":["OK..."]},{"Key":"@charlotte OK...","Fragments":["I"]},{"Key":"OK... I","Fragments":["did"]},{"Key":"did two","Fragments":["transforms"]},{"Key":"two transforms","Fragments":["instead"]},{"Key":"transforms instead","Fragments":["of"]},{"Key":"of two","Fragments":["because","vectors:"]},{"Key":"two because","Fragments":["I"]},{"Key":"1) it","Fragments":["was"]},{"Key":"was noisy","Fragments":["to"]},{"Key":"noisy to","Fragments":["have"]},{"Key":"input twice","Fragments":["(once"]},{"Key":"twice (once","Fragments":["in"]},{"Key":"in strip-us-prefix","Fragments":["and"]},{"Key":"strip-us-prefix and","Fragments":["once"]},{"Key":"once in","Fragments":["sanitize-number;","a","a"]},{"Key":"in sanitize-number;","Fragments":["process-number"]},{"Key":"sanitize-number; process-number","Fragments":["just"]},{"Key":"process-number just","Fragments":["computes"]},{"Key":"just computes","Fragments":["the"]},{"Key":"computes the","Fragments":["length"]},{"Key":"2) strip-us-prefix,","Fragments":["at"]},{"Key":"strip-us-prefix, at","Fragments":["least"]},{"Key":"least as","Fragments":["I"]},{"Key":"was understanding","Fragments":["it,"]},{"Key":"understanding it,","Fragments":["could"]},{"Key":"it, could","Fragments":["potentially"]},{"Key":"potentially return","Fragments":["\"0000000000\""]},{"Key":"return \"0000000000\"","Fragments":["if"]},{"Key":"\"0000000000\" if","Fragments":["the"]},{"Key":"input was","Fragments":["\u003e11","already"]},{"Key":"was \u003e11","Fragments":["digits,"]},{"Key":"\u003e11 digits,","Fragments":["which"]},{"Key":"digits, which","Fragments":["would"]},{"Key":"be unnecessarily","Fragments":["be"]},{"Key":"unnecessarily be","Fragments":["passed"]},{"Key":"be passed","Fragments":["onto","to","to"]},{"Key":"passed onto","Fragments":["sanitize-number."]},{"Key":"I may","Fragments":["have","probably","be","of"]},{"Key":"completely understood","Fragments":["what"]},{"Key":"understood what","Fragments":["you"]},{"Key":"you expected","Fragments":["from"]},{"Key":"expected from","Fragments":["your"]},{"Key":"your proposal;","Fragments":["sorry"]},{"Key":"proposal; sorry","Fragments":["if"]},{"Key":"sorry if","Fragments":["that"]},{"Key":" ad","Fragments":["1.","2."]},{"Key":"ad 1.","Fragments":["I'm"]},{"Key":"1. I'm","Fragments":["not"]},{"Key":"being noisy,","Fragments":["that"]},{"Key":"noisy, that","Fragments":["may"]},{"Key":"to personal","Fragments":["preference."]},{"Key":"personal preference.","Fragments":["At"]},{"Key":"preference. At","Fragments":["the"]},{"Key":"cost of","Fragments":["a","what"]},{"Key":"tiny inefficiency","Fragments":["by"]},{"Key":"inefficiency by","Fragments":["checking"]},{"Key":"checking the","Fragments":["length"]},{"Key":"length twice","Fragments":["in"]},{"Key":"twice in","Fragments":["two","two","the"]},{"Key":"places you","Fragments":["gain"]},{"Key":"gain an","Fragments":["isolated,"]},{"Key":"an isolated,","Fragments":["self-documenting"]},{"Key":"isolated, self-documenting","Fragments":["step"]},{"Key":"self-documenting step","Fragments":["of"]},{"Key":"the number.","Fragments":["At"]},{"Key":"number. At","Fragments":["it"]},{"Key":"At it","Fragments":["stands"]},{"Key":"it stands","Fragments":["now,"]},{"Key":"stands now,","Fragments":["without"]},{"Key":"now, without","Fragments":["the"]},{"Key":"context (external","Fragments":["specification,"]},{"Key":"(external specification,","Fragments":["docstring"]},{"Key":"specification, docstring","Fragments":["etc.)"]},{"Key":"docstring etc.)","Fragments":["you"]},{"Key":"etc.) you","Fragments":["can't"]},{"Key":"can't tell","Fragments":["exactly","what"]},{"Key":"tell exactly","Fragments":["what"]},{"Key":"checks inside","Fragments":["the"]},{"Key":"`cond` form.","Fragments":["Alternative"]},{"Key":"form. Alternative","Fragments":["approach"]},{"Key":"approach would","Fragments":["be","be","never"]},{"Key":"to introduce","Fragments":["either","a","actual","an"]},{"Key":"introduce either","Fragments":["inline"]},{"Key":"either inline","Fragments":["comment,"]},{"Key":"inline comment,","Fragments":["a"]},{"Key":"comment, a","Fragments":["docstring"]},{"Key":"a docstring","Fragments":["or","but","or"]},{"Key":"docstring or","Fragments":["auxiliary","metadata"]},{"Key":"or auxiliary","Fragments":["function"]},{"Key":"auxiliary function","Fragments":["like"]},{"Key":"ad 2.","Fragments":["Either"]},{"Key":"2. Either","Fragments":["it"]},{"Key":"Either it","Fragments":["could"]},{"Key":"do as","Fragments":["you"]},{"Key":"you say","Fragments":["or"]},{"Key":"say or","Fragments":["leave"]},{"Key":"or leave","Fragments":["the"]},{"Key":"number intact","Fragments":["if"]},{"Key":"intact if","Fragments":["it"]},{"Key":"doesn't comply","Fragments":["to","with"]},{"Key":"comply to","Fragments":["with"]},{"Key":"to with","Fragments":["US"]},{"Key":"with US","Fragments":["prefix"]},{"Key":"US prefix","Fragments":["pattern."]},{"Key":"prefix pattern.","Fragments":["The"]},{"Key":"pattern. The","Fragments":["final"]},{"Key":"The final","Fragments":["sanitizing","result"]},{"Key":"final sanitizing","Fragments":["step"]},{"Key":"sanitizing step","Fragments":["would"]},{"Key":"step would","Fragments":["weed"]},{"Key":"would weed","Fragments":["it"]},{"Key":"weed it","Fragments":["out"]},{"Key":"EDIT: Another","Fragments":["alternative"]},{"Key":"Another alternative","Fragments":["solution"]},{"Key":"alternative solution","Fragments":["in","in"]},{"Key":"solution in","Fragments":["order","Ruby.","this","Javascript](http://exercism.io/submissions/2f68013a2d8cecc8ac177907),","my"]},{"Key":"to spare","Fragments":["redundant","oneself"]},{"Key":"spare redundant","Fragments":["processing"]},{"Key":"redundant processing","Fragments":["when"]},{"Key":"processing when","Fragments":["number"]},{"Key":"when number","Fragments":["is"]},{"Key":"number is","Fragments":["invalid"]},{"Key":"is invalid","Fragments":["higher"]},{"Key":"invalid higher","Fragments":["up"]},{"Key":"higher up","Fragments":["the"]},{"Key":"the chain","Fragments":["of","returns"]},{"Key":"chain of","Fragments":["processing","nested","transformations"]},{"Key":"processing functions,","Fragments":["is"]},{"Key":"functions, is","Fragments":["to"]},{"Key":"use `some-\u003e`","Fragments":["macro."]},{"Key":"`some-\u003e` macro.","Fragments":["It"]},{"Key":"macro. It","Fragments":["works","enables"]},{"Key":"works roughly","Fragments":["like"]},{"Key":"roughly like","Fragments":["a"]},{"Key":"a maybe","Fragments":["monad."]},{"Key":"maybe monad.","Fragments":["As"]},{"Key":"monad. As","Fragments":["soon"]},{"Key":"As soon","Fragments":["as","as"]},{"Key":"as any","Fragments":["functions"]},{"Key":"any functions","Fragments":["returns"]},{"Key":"functions returns","Fragments":["nil,"]},{"Key":"returns nil,","Fragments":["the","which"]},{"Key":"nil, the","Fragments":["processing"]},{"Key":"processing stops","Fragments":["and","at"]},{"Key":"stops and","Fragments":["nil"]},{"Key":"and nil","Fragments":["is","if"]},{"Key":"is returned.","Fragments":["The","There's"]},{"Key":"returned. The","Fragments":["code"]},{"Key":"code could","Fragments":["be","look"]},{"Key":"be laid","Fragments":["out"]},{"Key":"laid out","Fragments":["like"]},{"Key":"out like","Fragments":["that:","that"]},{"Key":"(or (some-\u003e","Fragments":["input"]},{"Key":"(some-\u003e input","Fragments":["process-fn1"]},{"Key":"input process-fn1","Fragments":["process-fn2"]},{"Key":"process-fn1 process-fn2","Fragments":["...)"]},{"Key":"process-fn2 ...)","Fragments":["bad-number)"]},{"Key":"advice. I'm","Fragments":["happy"]},{"Key":"I'm happy","Fragments":["to","with"]},{"Key":"that `split`","Fragments":["and"]},{"Key":"unnecessary. My","Fragments":["next"]},{"Key":"My next","Fragments":["iteration","iteration"]},{"Key":"next iteration","Fragments":["also","uses","slims"]},{"Key":"iteration also","Fragments":["holds"]},{"Key":"also holds","Fragments":["onto"]},{"Key":"holds onto","Fragments":["a"]},{"Key":"onto a","Fragments":["processed"]},{"Key":"a processed","Fragments":["version"]},{"Key":"processed version","Fragments":["of"]},{"Key":"of `word`","Fragments":["to","to"]},{"Key":"avoid additional","Fragments":["overhead"]},{"Key":"additional overhead","Fragments":["when"]},{"Key":"overhead when","Fragments":["testing"]},{"Key":"when testing","Fragments":["candidates."]},{"Key":"operating on","Fragments":["a","sequences"]},{"Key":"single reference.","Fragments":["Either"]},{"Key":"reference. Either","Fragments":["I'm"]},{"Key":"Either I'm","Fragments":["missing"]},{"Key":"I'm missing","Fragments":["something","something","out"]},{"Key":"something or","Fragments":["`atom`"]},{"Key":"or `atom`","Fragments":["would"]},{"Key":"would work","Fragments":["as","too.","the","here.","here.","in"]},{"Key":"That's just","Fragments":["a","a"]},{"Key":"of convention,","Fragments":["but"]},{"Key":"convention, but","Fragments":["generally"]},{"Key":"but generally","Fragments":["`:else`","it's"]},{"Key":"generally `:else`","Fragments":["is"]},{"Key":"used for","Fragments":["catch-all","a","situations","`=","local","protocol","range","function"]},{"Key":"catch-all condition","Fragments":["in"]},{"Key":"condition in","Fragments":["`cond`.","that","either","a"]},{"Key":" `frequencies`","Fragments":["may","would","does"]},{"Key":"`frequencies` may","Fragments":["come"]},{"Key":"Yeah, right?","Fragments":["I"]},{"Key":"right? I","Fragments":["just"]},{"Key":"just read","Fragments":["the","about"]},{"Key":"thought `cl-format`","Fragments":["could"]},{"Key":"`cl-format` could","Fragments":["be"]},{"Key":"with multi-arity,","Fragments":["I've"]},{"Key":"multi-arity, I've","Fragments":["just"]},{"Key":"I've just","Fragments":["learned","started","realized","been"]},{"Key":"learned about","Fragments":["it.","`empty?`,","\u003ccode\u003edefn-\u003c/code\u003e","the","sort,","`frequencies`","`defn-`","the","frequencies"]},{"Key":"it. Next","Fragments":["submission"]},{"Key":"Next submission","Fragments":["looks"]},{"Key":"submission looks","Fragments":["much"]},{"Key":"and readable,","Fragments":["+1","I","I"]},{"Key":"readable, +1","Fragments":["for"]},{"Key":"would recommend","Fragments":["refactoring"]},{"Key":"recommend refactoring","Fragments":["your"]},{"Key":"refactoring your","Fragments":["code","tests"]},{"Key":"to include","Fragments":["a","a","a","your","two","two","a","all","the","comments","that"]},{"Key":"for determining","Fragments":["whether"]},{"Key":"determining whether","Fragments":["one","a","a"]},{"Key":"whether one","Fragments":["word","of"]},{"Key":"one word","Fragments":["is"]},{"Key":"can drop","Fragments":["the","parentheses","the"]},{"Key":"in `pairs`","Fragments":["by"]},{"Key":"`pairs` by","Fragments":["having"]},{"Key":"by having","Fragments":["it"]},{"Key":"having it","Fragments":["take"]},{"Key":"it take","Fragments":["the"]},{"Key":"argument `[[value","Fragments":["key]]`"]},{"Key":" `merge`","Fragments":["would"]},{"Key":"`nucleotide-counts` but","Fragments":["maybe"]},{"Key":"maybe the","Fragments":["way","perceived"]},{"Key":"is, it","Fragments":["makes"]},{"Key":"clear. If","Fragments":["you"]},{"Key":"single branch,","Fragments":["it's"]},{"Key":"branch, it's","Fragments":["better"]},{"Key":"use `when`.","Fragments":["There's"]},{"Key":"`when`. There's","Fragments":["also"]},{"Key":"also `if-not`/`when-not`","Fragments":["to"]},{"Key":"`if-not`/`when-not` to","Fragments":["spare"]},{"Key":"spare oneself","Fragments":["a"]},{"Key":"oneself a","Fragments":["pair"]},{"Key":"prefer your","Fragments":["previous","solution"]},{"Key":"previous submission,","Fragments":["it","there's"]},{"Key":"submission, it","Fragments":["is"]},{"Key":"is far","Fragments":["clearer","more","faster,"]},{"Key":"far clearer","Fragments":["what"]},{"Key":"doing. I","Fragments":["think"]},{"Key":"great case","Fragments":["of"]},{"Key":"of where","Fragments":["trying","the"]},{"Key":"where trying","Fragments":["to"]},{"Key":"too DRY","Fragments":["causes"]},{"Key":"DRY causes","Fragments":["chafing"]},{"Key":"causes chafing","Fragments":[":-)"]},{"Key":"of leaning","Fragments":["towards"]},{"Key":"leaning towards","Fragments":["duplication"]},{"Key":"towards duplication","Fragments":["being"]},{"Key":"duplication being","Fragments":["OK,"]},{"Key":"being OK,","Fragments":["and"]},{"Key":"OK, and","Fragments":["even"]},{"Key":"even beneficial,","Fragments":["when"]},{"Key":"beneficial, when","Fragments":["it"]},{"Key":"is *content*","Fragments":["that"]},{"Key":"*content* that","Fragments":["is"]},{"Key":"is duplicated","Fragments":["(i.e."]},{"Key":"duplicated (i.e.","Fragments":["the"]},{"Key":"(i.e. the","Fragments":["content"]},{"Key":"the content","Fragments":["of"]},{"Key":"content of","Fragments":["the"]},{"Key":"the song,","Fragments":["I18n"]},{"Key":"song, I18n","Fragments":["translations"]},{"Key":"I18n translations","Fragments":["etc"]},{"Key":"translations etc","Fragments":["etc),"]},{"Key":"etc etc),","Fragments":["but"]},{"Key":"etc), but","Fragments":["not"]},{"Key":"`(def ^:private","Fragments":["name","shout-response"]},{"Key":"^:private name","Fragments":["...)`"]},{"Key":"name ...)`","Fragments":["is"]},{"Key":"...)` is","Fragments":["enough","broadly"]},{"Key":"enough -","Fragments":["no"]},{"Key":"use full","Fragments":["meta-data"]},{"Key":"full meta-data","Fragments":["map"]},{"Key":"meta-data map","Fragments":["in"]},{"Key":"map in","Fragments":["that","that","`beer/sing`","to"]},{"Key":"case. Other","Fragments":["than"]},{"Key":"looks fine.","Fragments":["You"]},{"Key":"fine. You","Fragments":["could"]},{"Key":"consider rearranging","Fragments":["the"]},{"Key":"rearranging the","Fragments":["order","cond"]},{"Key":"declarations to","Fragments":["keep"]},{"Key":"keep public","Fragments":["API"]},{"Key":"the top.","Fragments":["`declare`"]},{"Key":"top. `declare`","Fragments":["will"]},{"Key":"Thanks again","Fragments":["-","for",":)"]},{"Key":"about `declare`,","Fragments":["and"]},{"Key":"`declare`, and","Fragments":["I"]},{"Key":"do consider","Fragments":["it"]},{"Key":"the fuss.","Fragments":["I"]},{"Key":"fuss. I","Fragments":["have"]},{"Key":"admit to","Fragments":["not"]},{"Key":"having used","Fragments":["metadata"]},{"Key":"used metadata","Fragments":["before,"]},{"Key":"metadata before,","Fragments":["I"]},{"Key":"before, I","Fragments":["find"]},{"Key":"it extremely","Fragments":["ugly"]},{"Key":"extremely ugly","Fragments":["so"]},{"Key":"ugly so","Fragments":["I've"]},{"Key":"so I've","Fragments":["always","reached","added"]},{"Key":"I've always","Fragments":["avoided."]},{"Key":"always avoided.","Fragments":["One"]},{"Key":"avoided. One","Fragments":["of"]},{"Key":"really irks","Fragments":["me"]},{"Key":"irks me","Fragments":["about"]},{"Key":"Clojure compared","Fragments":["to"]},{"Key":"to Racket,","Fragments":["which"]},{"Key":"Racket, which","Fragments":["is"]},{"Key":"other Lisp","Fragments":["I","dialects"]},{"Key":"Lisp I","Fragments":["have"]},{"Key":"any experience","Fragments":["of"]},{"Key":"experience of","Fragments":["playing"]},{"Key":"of playing","Fragments":["with."]},{"Key":"familiarity and","Fragments":["preference."]},{"Key":"and preference.","Fragments":["The"]},{"Key":"preference. The","Fragments":["non-public"]},{"Key":"The non-public","Fragments":["constant"]},{"Key":"non-public constant","Fragments":["definition"]},{"Key":"constant definition","Fragments":["looks","only"]},{"Key":"definition looks","Fragments":["ugly"]},{"Key":"looks ugly","Fragments":["(a"]},{"Key":"ugly (a","Fragments":["dynamic"]},{"Key":"(a dynamic","Fragments":["var"]},{"Key":"dynamic var","Fragments":["even"]},{"Key":"var even","Fragments":["more"]},{"Key":"more so.","Fragments":["I"]},{"Key":"the lack","Fragments":["of","of"]},{"Key":"of sugar","Fragments":["for"]},{"Key":"sugar for","Fragments":["these"]},{"Key":"these cases","Fragments":["is"]},{"Key":"cases is","Fragments":["because","a"]},{"Key":"is because","Fragments":["it's","that","I","I"]},{"Key":"it's relatively","Fragments":["rare"]},{"Key":"relatively rare","Fragments":["in"]},{"Key":"rare in","Fragments":["real"]},{"Key":"in real","Fragments":["world","world"]},{"Key":"real world","Fragments":["code","use","example."]},{"Key":"world code","Fragments":["to"]},{"Key":"use constant","Fragments":["definition"]},{"Key":"definition only","Fragments":["in"]},{"Key":"namespace it's","Fragments":["declared"]},{"Key":"it's declared","Fragments":["in."]},{"Key":"declared in.","Fragments":["In"]},{"Key":"in. In","Fragments":["general,"]},{"Key":"general, metadata","Fragments":["can"]},{"Key":"metadata can","Fragments":["be"]},{"Key":"be thought","Fragments":["of"]},{"Key":"of as","Fragments":["a"]},{"Key":"a low-level","Fragments":["tool"]},{"Key":"low-level tool","Fragments":["which"]},{"Key":"tool which","Fragments":["can"]},{"Key":"be abstracted","Fragments":["for"]},{"Key":"abstracted for","Fragments":["external"]},{"Key":"for external","Fragments":["use"]},{"Key":"external use","Fragments":["in"]},{"Key":"a several","Fragments":["useful"]},{"Key":"several useful","Fragments":["ways"]},{"Key":"useful ways","Fragments":["-"]},{"Key":"ways -","Fragments":["like"]},{"Key":"of contracts","Fragments":["utlizing"]},{"Key":"contracts utlizing","Fragments":["pre"]},{"Key":"utlizing pre","Fragments":["and"]},{"Key":"pre and","Fragments":["post","post","post","post","post","post","post","post","post"]},{"Key":"and post","Fragments":["condition","conditions,","conditions","conditions","conditions","conditions.","conditions","conditions","assertion"]},{"Key":"post condition","Fragments":["hooks"]},{"Key":"condition hooks","Fragments":["in"]},{"Key":"hooks in","Fragments":["function"]},{"Key":"EDIT: On","Fragments":["another"]},{"Key":"On another","Fragments":["note,","point,"]},{"Key":"another note,","Fragments":["I"]},{"Key":"note, I","Fragments":["finally"]},{"Key":"finally need","Fragments":["to"]},{"Key":"to play","Fragments":["around","a","with"]},{"Key":"play around","Fragments":["with"]},{"Key":"with Racket","Fragments":[":)"]},{"Key":"Racket :)","Fragments":["Maybe"]},{"Key":":) Maybe","Fragments":["it's"]},{"Key":"worth additional","Fragments":["language"]},{"Key":"additional language","Fragments":["track"]},{"Key":"language track","Fragments":["for"]},{"Key":"track for","Fragments":["exercism.io?"]},{"Key":"to modify","Fragments":["the","different"]},{"Key":"modify the","Fragments":["test","value"]},{"Key":"test suite","Fragments":["for","to","but","was","doesn't","doesn't","if","forces","and","and","and/or","changed"]},{"Key":"suite for","Fragments":["this"]},{"Key":"exercise to","Fragments":["specify","\"Bob\"","either","explore","be"]},{"Key":"specify a","Fragments":["namespace,","default"]},{"Key":"namespace, e.g.","Fragments":["robot/robot-name"]},{"Key":"e.g. robot/robot-name","Fragments":["instead"]},{"Key":"robot/robot-name instead","Fragments":["of"]},{"Key":"of simply","Fragments":["robot-name."]},{"Key":"simply robot-name.","Fragments":["I"]},{"Key":"robot-name. I","Fragments":["did"]},{"Key":"other exercises","Fragments":["up"]},{"Key":"exercises up","Fragments":["to"]},{"Key":"is some","Fragments":["of","repetition","way"]},{"Key":"Clojure (though","Fragments":["I"]},{"Key":"(though I","Fragments":["have"]},{"Key":"have programmed","Fragments":["in"]},{"Key":"programmed in","Fragments":["Scheme"]},{"Key":"in Scheme","Fragments":["years"]},{"Key":"Scheme years","Fragments":["ago)."]},{"Key":"years ago).","Fragments":["This"]},{"Key":"ago). This","Fragments":["is"]},{"Key":"a rough","Fragments":["port","benchmark"]},{"Key":"rough port","Fragments":["of"]},{"Key":"port of","Fragments":["my"]},{"Key":"my Python","Fragments":["implementation,"]},{"Key":"Python implementation,","Fragments":["taking"]},{"Key":"implementation, taking","Fragments":["advantage"]},{"Key":"taking advantage","Fragments":["of","of"]},{"Key":"of niceties","Fragments":["like"]},{"Key":"niceties like","Fragments":["`letfn`,"]},{"Key":"like `letfn`,","Fragments":["`let`"]},{"Key":"`letfn`, `let`","Fragments":["and"]},{"Key":"Any comments","Fragments":["welcome,"]},{"Key":"comments welcome,","Fragments":["but"]},{"Key":"welcome, but","Fragments":["in"]},{"Key":"particular any","Fragments":["notes"]},{"Key":"any notes","Fragments":["on"]},{"Key":"notes on","Fragments":["how"]},{"Key":"Ah that's","Fragments":["what"]},{"Key":"this error","Fragments":["message"]},{"Key":"error message","Fragments":["meant!","with","from"]},{"Key":"that character","Fragments":["literals"]},{"Key":"literals can","Fragments":["be"]},{"Key":"easily cast","Fragments":["to"]},{"Key":"cast to","Fragments":["ints","`seq`","java.lang.Class,"]},{"Key":"to ints","Fragments":["with"]},{"Key":"ints with","Fragments":["`int`"]},{"Key":"with `int`","Fragments":["and"]},{"Key":"`int` and","Fragments":["that"]},{"Key":"the alphanumeric","Fragments":["characters"]},{"Key":"alphanumeric characters","Fragments":["are"]},{"Key":"are arranged","Fragments":["in"]},{"Key":"arranged in","Fragments":["continuous"]},{"Key":"in continuous","Fragments":["ranges."]},{"Key":"continuous ranges.","Fragments":["This"]},{"Key":"ranges. This","Fragments":["way"]},{"Key":"purpose random","Fragments":["string"]},{"Key":"string generator","Fragments":["which"]},{"Key":"generator which","Fragments":["could"]},{"Key":"could accept","Fragments":["character"]},{"Key":"accept character","Fragments":["literals,"]},{"Key":"character literals,","Fragments":["like"]},{"Key":"literals, like","Fragments":["\\A"]},{"Key":"like \\A","Fragments":["\\Z"]},{"Key":"\\A \\Z","Fragments":["\\0"]},{"Key":"\\Z \\0","Fragments":["\\9,"]},{"Key":"\\0 \\9,","Fragments":["for"]},{"Key":"\\9, for","Fragments":["its'"]},{"Key":"for its'","Fragments":["range"]},{"Key":"its' range","Fragments":["boundaries."]},{"Key":"Ok -","Fragments":["now"]},{"Key":"better I","Fragments":["guess."]},{"Key":"Clojure hack","Fragments":["-"]},{"Key":"hack -","Fragments":["so"]},{"Key":"all comments","Fragments":["are","and"]},{"Key":"are welcome","Fragments":[":)"]},{"Key":"of small","Fragments":["sugar"]},{"Key":"small sugar","Fragments":["fns"]},{"Key":"sugar fns","Fragments":["in"]},{"Key":"fns in","Fragments":["core"]},{"Key":"core that","Fragments":["can","can"]},{"Key":"reduce nesting","Fragments":["levels"]},{"Key":"nesting levels","Fragments":["-"]},{"Key":"levels -","Fragments":["like"]},{"Key":"like `zero?`,","Fragments":["`not=`."]},{"Key":"`zero?`, `not=`.","Fragments":["Although"]},{"Key":"`not=`. Although","Fragments":["using"]},{"Key":"perfectly sensible","Fragments":["thing"]},{"Key":"sensible thing","Fragments":["to"]},{"Key":"do, you","Fragments":["can"]},{"Key":"also treat","Fragments":["the","strings","the"]},{"Key":"treat the","Fragments":["string","`response-for`","`pairs`"]},{"Key":"characters where","Fragments":["sequence","all"]},{"Key":"where sequence","Fragments":["related"]},{"Key":"functions like","Fragments":["`count`,","`count`,","string","`re-find`","`beer`","I","`every?`"]},{"Key":"like `count`,","Fragments":["`last`","`filter`,"]},{"Key":"`count`, `last`","Fragments":["etc."]},{"Key":"`last` etc.","Fragments":["apply."]},{"Key":"to narrow","Fragments":["the"]},{"Key":"narrow the","Fragments":["scope"]},{"Key":"scope as","Fragments":["strongly"]},{"Key":"as strongly","Fragments":["as"]},{"Key":"strongly as","Fragments":["possible"]},{"Key":"possible but","Fragments":["`response-for`"]},{"Key":"but `response-for`","Fragments":["became"]},{"Key":"`response-for` became","Fragments":["pretty"]},{"Key":"became pretty","Fragments":["loaded"]},{"Key":"pretty loaded","Fragments":["as"]},{"Key":"loaded as","Fragments":["it"]},{"Key":"it stands.","Fragments":["There"]},{"Key":"stands. There","Fragments":["are"]},{"Key":"are other","Fragments":["facilities","white"]},{"Key":"other facilities","Fragments":["to"]},{"Key":"facilities to","Fragments":["limit"]},{"Key":"to limit","Fragments":["the"]},{"Key":"the visibility","Fragments":["of","of"]},{"Key":"outside their","Fragments":["namespace."]},{"Key":"their namespace.","Fragments":["For"]},{"Key":"namespace. For","Fragments":["example,"]},{"Key":"can define","Fragments":["top-level,","other","them","two","the","an"]},{"Key":"define top-level,","Fragments":["non-public"]},{"Key":"top-level, non-public","Fragments":["functions"]},{"Key":"of `defn-`","Fragments":["macro."]},{"Key":"`defn-` macro.","Fragments":["When"]},{"Key":"macro. When","Fragments":["and"]},{"Key":"When and","Fragments":["if"]},{"Key":"also rearrange","Fragments":["function"]},{"Key":"rearrange function","Fragments":["definitions,"]},{"Key":"function definitions,","Fragments":["so"]},{"Key":"definitions, so","Fragments":["that"]},{"Key":"API /","Fragments":["highest"]},{"Key":"/ highest","Fragments":["abstraction"]},{"Key":"highest abstraction","Fragments":["is"]},{"Key":"and flows","Fragments":["more"]},{"Key":"flows more","Fragments":["naturally"]},{"Key":"be read.","Fragments":["`declare`"]},{"Key":"read. `declare`","Fragments":["will"]},{"Key":" `clojure.string`","Fragments":["namespace","namespace"]},{"Key":"couple useful","Fragments":["functions"]},{"Key":"with eliminating","Fragments":["noisy"]},{"Key":"eliminating noisy","Fragments":["Java"]},{"Key":"noisy Java","Fragments":["interop"]},{"Key":"interop calls","Fragments":["and"]},{"Key":"and getting","Fragments":["away","rid"]},{"Key":"getting away","Fragments":["from"]},{"Key":"away from","Fragments":["working","pronouncing"]},{"Key":"from working","Fragments":["on"]},{"Key":"on character","Fragments":["level."]},{"Key":"functions body","Fragments":["which"]},{"Key":"body which","Fragments":["-"]},{"Key":"- without","Fragments":["any"]},{"Key":"additional context","Fragments":["-","so"]},{"Key":"context -","Fragments":["does"]},{"Key":"- does","Fragments":["not"]},{"Key":"much sense.","Fragments":["The","You"]},{"Key":"sense. The","Fragments":["predicate"]},{"Key":"The predicate","Fragments":["expressions"]},{"Key":"predicate expressions","Fragments":["could"]},{"Key":"expressions could","Fragments":["be"]},{"Key":"extracted into","Fragments":["non-public","methods","a","functions"]},{"Key":"into non-public","Fragments":["functions"]},{"Key":"(`defn-`) with","Fragments":["descriptive"]},{"Key":"more self-documenting","Fragments":["-","or"]},{"Key":"self-documenting -","Fragments":["like"]},{"Key":"like `question?`,","Fragments":["`silence?`"]},{"Key":"`question?`, `silence?`","Fragments":["etc."]},{"Key":"still haven't","Fragments":["changed"]},{"Key":"haven't changed","Fragments":["the"]},{"Key":"the `range`","Fragments":["call."]},{"Key":"`range` call.","Fragments":["The"]},{"Key":"call. The","Fragments":["indentation"]},{"Key":"The indentation","Fragments":["in","is"]},{"Key":"`ns` form","Fragments":["is"]},{"Key":"- generally","Fragments":["two"]},{"Key":"generally two","Fragments":["spaces"]},{"Key":"are used.","Fragments":["Other"]},{"Key":"used. Other","Fragments":["than"]},{"Key":"fine (on","Fragments":["a"]},{"Key":"(on a","Fragments":["very"]},{"Key":"very wide","Fragments":["screen)."]},{"Key":" Nailed","Fragments":["it!"]},{"Key":"Ha ha","Fragments":[","]},{"Key":"ha ,","Fragments":["I"]},{"Key":"will organize","Fragments":["the"]},{"Key":"organize the","Fragments":["code","checks"]},{"Key":"have added","Fragments":["the","some"]},{"Key":"added the","Fragments":["third"]},{"Key":"third parameter","Fragments":["1"]},{"Key":"parameter 1","Fragments":["to"]},{"Key":"1 to","Fragments":["`range`.("]},{"Key":"to `range`.(","Fragments":["Is"]},{"Key":"`range`.( Is","Fragments":["that"]},{"Key":"Well, yes","Fragments":["and"]},{"Key":"yes and","Fragments":["no."]},{"Key":"and no.","Fragments":["I've"]},{"Key":"no. I've","Fragments":["said"]},{"Key":"I've said","Fragments":["that"]},{"Key":"said that","Fragments":["there's","there"]},{"Key":"that there's","Fragments":["a","any","need"]},{"Key":"third argument","Fragments":["and","that"]},{"Key":"be negative","Fragments":["so"]},{"Key":"negative so","Fragments":["that"]},{"Key":"reversing the","Fragments":["whole"]},{"Key":"whole sequence","Fragments":["is"]},{"Key":"sequence is","Fragments":["unnecessary.","not"]},{"Key":"Looks nice.","Fragments":["To"]},{"Key":"nice. To","Fragments":["reduce"]},{"Key":"To reduce","Fragments":["the"]},{"Key":"repetition when","Fragments":["building"]},{"Key":"when building","Fragments":["the"]},{"Key":"name, you","Fragments":["can"]},{"Key":"use `repeat`.","Fragments":["Maybe"]},{"Key":"`repeat`. Maybe","Fragments":["add"]},{"Key":"Maybe add","Fragments":["additional"]},{"Key":"add additional","Fragments":["parameter"]},{"Key":"additional parameter","Fragments":["for"]},{"Key":"parameter for","Fragments":["length"]},{"Key":"for length","Fragments":["of"]},{"Key":"a generated","Fragments":["string?"]},{"Key":"generated string?","Fragments":["Sot"]},{"Key":"string? Sot","Fragments":["that"]},{"Key":"Sot that","Fragments":["the"]},{"Key":"usage would","Fragments":["look"]},{"Key":"(str (rand-letters","Fragments":["2)"]},{"Key":"(rand-letters 2)","Fragments":["(rand-digits"]},{"Key":"2) (rand-digits","Fragments":["3))"]},{"Key":"Ok thanks","Fragments":["@letitia","@pat"]},{"Key":" Partial","Fragments":["application"]},{"Key":"Partial application","Fragments":["does"]},{"Key":"application does","Fragments":["not"]},{"Key":"not solve","Fragments":["the"]},{"Key":"still executed","Fragments":["as"]},{"Key":"executed as","Fragments":["a"]},{"Key":"whole on","Fragments":["every"]},{"Key":"every call.","Fragments":["To"]},{"Key":"call. To","Fragments":["execute"]},{"Key":"To execute","Fragments":["the"]},{"Key":"execute the","Fragments":["`let`"]},{"Key":"form only","Fragments":["once"]},{"Key":"given word","Fragments":["you"]},{"Key":"it close","Fragments":["over"]},{"Key":"close over","Fragments":["a"]},{"Key":"a anonymous","Fragments":["function"]},{"Key":"which wraps","Fragments":["the"]},{"Key":"wraps the","Fragments":["body"]},{"Key":"and accepts","Fragments":["a"]},{"Key":"accepts a","Fragments":["single","RNA","second","`not-found`"]},{"Key":"argument being","Fragments":["candidate"]},{"Key":"being candidate","Fragments":["word."]},{"Key":"candidate word.","Fragments":["The"]},{"Key":"word. The","Fragments":["`anagram?`","best"]},{"Key":"The `anagram?`","Fragments":["function"]},{"Key":"function then","Fragments":["becomes"]},{"Key":"then becomes","Fragments":["higher"]},{"Key":"becomes higher","Fragments":["order"]},{"Key":"function (it","Fragments":["returns"]},{"Key":"(it returns","Fragments":["a"]},{"Key":"function) so","Fragments":["`partial`"]},{"Key":"so `partial`","Fragments":["is"]},{"Key":"`partial` is","Fragments":["unnecessary."]},{"Key":"unnecessary. `anagram?`","Fragments":["could"]},{"Key":"`anagram?` could","Fragments":["be"]},{"Key":"be then","Fragments":["renamed"]},{"Key":"then renamed","Fragments":["to,"]},{"Key":"renamed to,","Fragments":["for"]},{"Key":"to, for","Fragments":["example,"]},{"Key":"EDIT: Fixed","Fragments":["typos"]},{"Key":"Fixed typos","Fragments":["made"]},{"Key":"typos made","Fragments":["while"]},{"Key":"made while","Fragments":["typing"]},{"Key":"while typing","Fragments":["on"]},{"Key":"typing on","Fragments":["phone"]},{"Key":"on phone","Fragments":["and"]},{"Key":"added some","Fragments":["quoting.","documentation,","tests"]},{"Key":"you refer","Fragments":["to"]},{"Key":"`clojure.string` namespace,","Fragments":["`:require`"]},{"Key":"namespace, `:require`","Fragments":["is"]},{"Key":"needed. To","Fragments":["make"]},{"Key":"To make","Fragments":["it","this","it","it"]},{"Key":"more useful,","Fragments":["you"]},{"Key":"useful, you","Fragments":["could"]},{"Key":"could either","Fragments":["alias"]},{"Key":"either alias","Fragments":["the","to"]},{"Key":"namespace with","Fragments":["a","the"]},{"Key":"shorter name","Fragments":["like:"]},{"Key":"import particular","Fragments":["symbols"]},{"Key":"particular symbols","Fragments":["from"]},{"Key":"from that","Fragments":["namespace","set","perspective.","file","exercise"]},{"Key":"that namespace","Fragments":["directly:"]},{"Key":"When using","Fragments":["def"]},{"Key":"using def","Fragments":["and","rather"]},{"Key":"def and","Fragments":["defn","defn"]},{"Key":"and defn","Fragments":["you","always"]},{"Key":"defn you","Fragments":["are"]},{"Key":"using mutable","Fragments":["state,"]},{"Key":"mutable state,","Fragments":["which"]},{"Key":"state, which","Fragments":["is"]},{"Key":"generally frowned","Fragments":["upon","upon","upon,"]},{"Key":"frowned upon","Fragments":["in","in"]},{"Key":"upon in","Fragments":["Clojure.","the"]},{"Key":" These","Fragments":["create"]},{"Key":"These create","Fragments":["bindings"]},{"Key":"bindings that","Fragments":["are"]},{"Key":"are valid","Fragments":["in","dna"]},{"Key":"valid in","Fragments":["the","`dna/count`"]},{"Key":"whole namespace,","Fragments":["which"]},{"Key":"namespace, which","Fragments":["you"]},{"Key":"you usually","Fragments":["only"]},{"Key":"usually only","Fragments":["want","done"]},{"Key":"only want","Fragments":["to"]},{"Key":"do once,","Fragments":["not"]},{"Key":"not every","Fragments":["time"]},{"Key":"time a","Fragments":["user"]},{"Key":"user calls","Fragments":["`classify`."]},{"Key":"only reason","Fragments":["that"]},{"Key":"reason that","Fragments":["clojure"]},{"Key":"clojure allows","Fragments":["def"]},{"Key":"allows def","Fragments":["to"]},{"Key":"def to","Fragments":["be"]},{"Key":"called with","Fragments":["the","`is-silence`","the"]},{"Key":"same argument","Fragments":["twice,"]},{"Key":"argument twice,","Fragments":["is"]},{"Key":"twice, is","Fragments":["for"]},{"Key":"for convencience","Fragments":["reasons"]},{"Key":"convencience reasons","Fragments":["when"]},{"Key":"reasons when","Fragments":["working"]},{"Key":"`blank?` would","Fragments":["simplify"]},{"Key":"your `silence?`","Fragments":["predicate."]},{"Key":"the pointers;","Fragments":["very"]},{"Key":"pointers; very","Fragments":["helpful."]},{"Key":"I applied","Fragments":["your"]},{"Key":"applied your","Fragments":["suggestions"]},{"Key":"suggestions (well,","Fragments":["almost"]},{"Key":"(well, almost","Fragments":["all)"]},{"Key":"almost all)","Fragments":["in"]},{"Key":"all) in","Fragments":["revision"]},{"Key":"in revision","Fragments":["2."]},{"Key":" Feels","Fragments":["a"]},{"Key":"Feels a","Fragments":["little"]},{"Key":"bit less","Fragments":["concise","verbose","cluttered."]},{"Key":"less concise","Fragments":["but"]},{"Key":"concise but","Fragments":["maybe"]},{"Key":" @kobe","Fragments":["Unless"]},{"Key":"@kobe Unless","Fragments":["you"]},{"Key":"Unless you","Fragments":["can","wanted"]},{"Key":"me the","Fragments":["magic","impetus",":pre",":refer"]},{"Key":"the magic","Fragments":["spell,","number","numbers"]},{"Key":"magic spell,","Fragments":["I"]},{"Key":"spell, I","Fragments":["had"]},{"Key":"to repeatedly","Fragments":["n"]},{"Key":"repeatedly n","Fragments":["instead"]},{"Key":"n instead","Fragments":["of"]},{"Key":"of repeat","Fragments":["n;"]},{"Key":"repeat n;","Fragments":["the"]},{"Key":"n; the","Fragments":["latter"]},{"Key":"latter returns","Fragments":["the"]},{"Key":"returns the","Fragments":["same","new","new","some-str."]},{"Key":"same value","Fragments":["n","to","until"]},{"Key":"value n","Fragments":["times."]},{"Key":"Just throwing","Fragments":["this"]},{"Key":"throwing this","Fragments":["out","into"]},{"Key":"there to","Fragments":["get"]},{"Key":"some feedback.","Fragments":["My"]},{"Key":"feedback. My","Fragments":["`shouting?`"]},{"Key":"My `shouting?`","Fragments":["predicate"]},{"Key":"predicate is","Fragments":["flawed.","on","super-short.","not","fulfilled.","true"]},{"Key":"is flawed.","Fragments":["Having"]},{"Key":"flawed. Having","Fragments":["a"]},{"Key":"Having a","Fragments":["separate"]},{"Key":"separate clause","Fragments":["for"]},{"Key":"clause for","Fragments":["`forceful-question?`"]},{"Key":"for `forceful-question?`","Fragments":["should"]},{"Key":"`forceful-question?` should","Fragments":["not"]},{"Key":"should not","Fragments":["be","effect"]},{"Key":"As with","Fragments":["another","iteration","all"]},{"Key":"another exercise,","Fragments":["I"]},{"Key":"exercise, I","Fragments":["modified"]},{"Key":"I modified","Fragments":["the","the"]},{"Key":"modified the","Fragments":["test","imports:"]},{"Key":"suite to","Fragments":["include"]},{"Key":"a namespace;","Fragments":["I"]},{"Key":"namespace; I","Fragments":["also"]},{"Key":"also changed","Fragments":["the","```shout?```"]},{"Key":"function name","Fragments":["to","and","as","which","and","a","should","symmetry"]},{"Key":"mark as","Fragments":["that","private"]},{"Key":"I _know_","Fragments":["is"]},{"Key":"_know_ is","Fragments":["idiomatic"]},{"Key":"That obviously","Fragments":["can't"]},{"Key":"obviously can't","Fragments":["go"]},{"Key":"can't go","Fragments":["wrong"]},{"Key":"go wrong","Fragments":[":D"]},{"Key":"use `:refer`","Fragments":["to","up"]},{"Key":"import functions","Fragments":["from"]},{"Key":"string so","Fragments":["they"]},{"Key":"used without","Fragments":["namespace,"]},{"Key":"without namespace,","Fragments":["and"]},{"Key":"and `defn-`","Fragments":["to"]},{"Key":"define functions","Fragments":["that"]},{"Key":"are private","Fragments":["in"]},{"Key":"private in","Fragments":["scope"]},{"Key":"in scope","Fragments":["to"]},{"Key":"extra `()`s","Fragments":["in"]},{"Key":"`()`s in","Fragments":["`response-for`"]},{"Key":"`response-for` around","Fragments":["the"]},{"Key":"around the","Fragments":["argument","way","`let"]},{"Key":"be simple","Fragments":["to","to"]},{"Key":"string replace","Fragments":["to","function","function","functions","function","function","is"]},{"Key":"replace to","Fragments":["solve","dynamically"]},{"Key":"the exercise.","Fragments":["Instead","I","Any"]},{"Key":"exercise. Instead","Fragments":["I"]},{"Key":"Instead I","Fragments":["attempted","chose"]},{"Key":"I attempted","Fragments":["to"]},{"Key":"attempted to","Fragments":["solve","be","write"]},{"Key":"a functional","Fragments":["way.","point","language","language,"]},{"Key":"functional way.","Fragments":["I'm"]},{"Key":"way. I'm","Fragments":["not"]},{"Key":"how readable","Fragments":["the","the"]},{"Key":"readable the","Fragments":["recur","cond"]},{"Key":"the recur","Fragments":["function","macro."]},{"Key":"recur function","Fragments":["is."]},{"Key":"function is.","Fragments":["There"]},{"Key":"is. There","Fragments":["are"]},{"Key":" Explicit","Fragments":["loop/recur"]},{"Key":"Explicit loop/recur","Fragments":["is"]},{"Key":"loop/recur is","Fragments":["pretty"]},{"Key":"pretty low","Fragments":["level"]},{"Key":"low level","Fragments":["functional","turn-left/turn-right/move"]},{"Key":"level functional","Fragments":["construct."]},{"Key":"functional construct.","Fragments":["There's"]},{"Key":"construct. There's","Fragments":["wide"]},{"Key":"There's wide","Fragments":["range"]},{"Key":"of abstractions","Fragments":["in"]},{"Key":"abstractions in","Fragments":["a"]},{"Key":"of higher","Fragments":["order"]},{"Key":"that build","Fragments":["upon"]},{"Key":"build upon","Fragments":["it."]},{"Key":"upon it.","Fragments":["If"]},{"Key":"it. If","Fragments":["one"]},{"Key":"If one","Fragments":["of","of"]},{"Key":"them fits","Fragments":["the"]},{"Key":"fits the","Fragments":["use","bill","specification\".","spliting","specification."]},{"Key":"use case,","Fragments":["you"]},{"Key":"use it.","Fragments":["Of","I"]},{"Key":"it. Of","Fragments":["course"]},{"Key":"course what","Fragments":["you've"]},{"Key":"done is","Fragments":["a"]},{"Key":"learning experience.","Fragments":["Your","Thank"]},{"Key":"experience. Your","Fragments":["`transcribe-rna`","method"]},{"Key":"Your `transcribe-rna`","Fragments":["can"]},{"Key":"`transcribe-rna` can","Fragments":["be"]},{"Key":"be substituted","Fragments":["for"]},{"Key":"substituted for","Fragments":["`map`."]},{"Key":"extracting predicates","Fragments":["used"]},{"Key":"predicates used","Fragments":["in"]},{"Key":"in `cond`","Fragments":["to","(especially","we'll","makes"]},{"Key":"`cond` to","Fragments":["non-public","reduce"]},{"Key":"`response-for` less","Fragments":["cluttered"]},{"Key":"second check","Fragments":["in"]},{"Key":"predicate for","Fragments":["shouting"]},{"Key":"for shouting","Fragments":["could","before","is","to"]},{"Key":"shouting could","Fragments":["alternatively","be"]},{"Key":"could alternatively","Fragments":["be"]},{"Key":"alternatively be","Fragments":["done"]},{"Key":"done with:","Fragments":["`(some"]},{"Key":"with: `(some","Fragments":["#(Character/isLetter"]},{"Key":"`(some #(Character/isLetter","Fragments":["%)"]},{"Key":"#(Character/isLetter %)","Fragments":["...)`.","text)","input)`.","s))]","s))]"]},{"Key":"readability if","Fragments":["you"]},{"Key":"have moved","Fragments":["predicates"]},{"Key":"moved predicates","Fragments":["to"]},{"Key":"like `silence?`,","Fragments":["`shouting?`"]},{"Key":"etc. so","Fragments":["that"]},{"Key":"the forest","Fragments":["for"]},{"Key":"forest for","Fragments":["the"]},{"Key":"the trees","Fragments":["there."]},{"Key":"trees there.","Fragments":["It"]},{"Key":"there. It","Fragments":["was"]},{"Key":"good learning","Fragments":["experience.","resource?"]},{"Key":"experience. Thank","Fragments":["you"]},{"Key":"for helping","Fragments":["me"]},{"Key":"helping me","Fragments":["explore"]},{"Key":"me explore","Fragments":["the"]},{"Key":"explore the","Fragments":["data"]},{"Key":"data structures","Fragments":["in",":P","(like","when","(such","like","idiomatically"]},{"Key":"structures in","Fragments":["Clojure."]},{"Key":"use `clojure.string/lower-case`.","Fragments":["There's"]},{"Key":"`clojure.string/lower-case`. There's","Fragments":["no"]},{"Key":"convert a","Fragments":["sequence","sequence"]},{"Key":"sequence back","Fragments":["into"]},{"Key":"string when","Fragments":["normalizing."]},{"Key":"`frequencies` would","Fragments":["simplify"]},{"Key":"your `nucleotide-counts`","Fragments":["function.","function","function"]},{"Key":"`nucleotide-counts` function.","Fragments":["`invalid?`"]},{"Key":"function. `invalid?`","Fragments":["test"]},{"Key":"`invalid?` test","Fragments":["does"]},{"Key":"test does","Fragments":["not"]},{"Key":"it says","Fragments":["is"]},{"Key":"says is","Fragments":["\"if"]},{"Key":"is \"if","Fragments":["nucleotide","nucleotide"]},{"Key":"\"if nucleotide","Fragments":["is","is"]},{"Key":"is \\X,","Fragments":["it's"]},{"Key":"\\X, it's","Fragments":["invalid\"."]},{"Key":"it's invalid\".","Fragments":["What","The"]},{"Key":"invalid\". What","Fragments":["it"]},{"Key":"What it","Fragments":["should"]},{"Key":"should say","Fragments":["is"]},{"Key":"not within","Fragments":["set"]},{"Key":"within set","Fragments":["of"]},{"Key":"nucleotides, it's","Fragments":["invalid\"."]},{"Key":"invalid\". The","Fragments":["set"]},{"Key":"The set","Fragments":["of","it"]},{"Key":"nucleotides would","Fragments":["be"]},{"Key":"be `#{\\A","Fragments":["\\C"]},{"Key":"`#{\\A \\C","Fragments":["\\T"]},{"Key":"\\C \\T","Fragments":["\\G","\\A}"]},{"Key":"\\T \\G","Fragments":["\\U}`."]},{"Key":"\\G \\U}`.","Fragments":["The"]},{"Key":"\\U}`. The","Fragments":["set"]},{"Key":"set it","Fragments":["self"]},{"Key":"it self","Fragments":["works"]},{"Key":"self works","Fragments":["as"]},{"Key":"works as","Fragments":["a","an"]},{"Key":"retrieving value","Fragments":["from"]},{"Key":"value from","Fragments":["that","predicate-\u003eresponse"]},{"Key":"set -","Fragments":["either"]},{"Key":"either the","Fragments":["value"]},{"Key":"value or","Fragments":["nil","key"]},{"Key":"or nil","Fragments":["is","according"]},{"Key":"returned. There's","Fragments":["a"]},{"Key":"a missing","Fragments":["whitespace"]},{"Key":"missing whitespace","Fragments":["after"]},{"Key":"whitespace after","Fragments":["`if`","the"]},{"Key":"after `if`","Fragments":["on"]},{"Key":"`if` on","Fragments":["line"]},{"Key":"namespace contains","Fragments":["`blank?`"]},{"Key":"contains `blank?`","Fragments":["predicate"]},{"Key":"`blank?` predicate","Fragments":["which"]},{"Key":"predicate which","Fragments":["does"]},{"Key":"which does","Fragments":["basically","basically"]},{"Key":"does basically","Fragments":["the","what"]},{"Key":"basically the","Fragments":["same","same"]},{"Key":"as `silence?`.","Fragments":["The"]},{"Key":"`silence?`. The","Fragments":["usage"]},{"Key":"The usage","Fragments":["of"]},{"Key":"in `question?`","Fragments":["is","you","and","that","over"]},{"Key":"`question?` is","Fragments":["unnecessary","now"]},{"Key":"and may","Fragments":["mislead"]},{"Key":"may mislead","Fragments":["the"]},{"Key":"mislead the","Fragments":["reader"]},{"Key":"reader for","Fragments":["a"]},{"Key":"of clojure.core/frequencies,","Fragments":["I"]},{"Key":"clojure.core/frequencies, I","Fragments":["just"]},{"Key":"try writing","Fragments":["it"]},{"Key":"There's `lower-case`","Fragments":["in"]},{"Key":"`lower-case` in","Fragments":["`clojure.string`."]},{"Key":"in `clojure.string`.","Fragments":["You"]},{"Key":"`clojure.string`. You","Fragments":["could"]},{"Key":"`re-seq` with","Fragments":["`#\"\\w+\"`"]},{"Key":"with `#\"\\w+\"`","Fragments":["to"]},{"Key":"`#\"\\w+\"` to","Fragments":["split"]},{"Key":"used \"code","Fragments":["is"]},{"Key":"\"code is","Fragments":["data\""]},{"Key":"is data\"","Fragments":["(i.e."]},{"Key":"data\" (i.e.","Fragments":["homoiconicity"]},{"Key":"(i.e. homoiconicity","Fragments":["of"]},{"Key":"homoiconicity of","Fragments":["clojure"]},{"Key":"of clojure","Fragments":[":)","I've","I've"]},{"Key":"if check","Fragments":["for"]},{"Key":"case characters,","Fragments":["but","but","if"]},{"Key":"characters, but","Fragments":["it","not","no"]},{"Key":"best solution","Fragments":["I"]},{"Key":"that didn't","Fragments":["require","look"]},{"Key":"didn't require","Fragments":["defining"]},{"Key":"require defining","Fragments":["some"]},{"Key":"defining some","Fragments":["special"]},{"Key":"some special","Fragments":["function"]},{"Key":"was pleasantly","Fragments":["surprised","surprised"]},{"Key":"pleasantly surprised","Fragments":["to","to"]},{"Key":"to discover","Fragments":["`frequencies`"]},{"Key":"discover `frequencies`","Fragments":["in"]},{"Key":"The tiny","Fragments":["bit"]},{"Key":"of cleverness","Fragments":["here"]},{"Key":"cleverness here","Fragments":["is"]},{"Key":"in `extract-words`","Fragments":["where"]},{"Key":"`extract-words` where","Fragments":["I"]},{"Key":"started splitting","Fragments":["the"]},{"Key":"on whitespace","Fragments":["but","and","and"]},{"Key":"whitespace but","Fragments":["realized"]},{"Key":"but realized","Fragments":["that"]},{"Key":"realized that","Fragments":["by","what","the","I","the","I've","an","clojure.string","`re-seq`","my","when","the"]},{"Key":"that by","Fragments":["splitting","exploring","default","clojure","using","splitting"]},{"Key":"on non-word","Fragments":["characters,","chars,"]},{"Key":"non-word characters,","Fragments":["I"]},{"Key":"characters, I","Fragments":["could"]},{"Key":"could immediately","Fragments":["handle"]},{"Key":"immediately handle","Fragments":["punctuation"]},{"Key":"handle punctuation","Fragments":["as"]},{"Key":"punctuation as","Fragments":["well.","separate"]},{"Key":" Full","Fragments":["disclosure."]},{"Key":"Full disclosure.","Fragments":["I"]},{"Key":"disclosure. I","Fragments":["completed"]},{"Key":"I completed","Fragments":["this"]},{"Key":"completed this","Fragments":["exercise"]},{"Key":"but knew","Fragments":["it"]},{"Key":"knew it","Fragments":["was"]},{"Key":"was much","Fragments":["too","simpler/clearer","simpler,","rougher"]},{"Key":"much too","Fragments":["complex.","long","long,"]},{"Key":"too complex.","Fragments":["So"]},{"Key":"complex. So","Fragments":["I"]},{"Key":"I began","Fragments":["researching"]},{"Key":"began researching","Fragments":["and"]},{"Key":"researching and","Fragments":["came"]},{"Key":"and came","Fragments":["across"]},{"Key":"across a","Fragments":["sample","sequence","character"]},{"Key":"a sample","Fragments":["solution"]},{"Key":"sample solution","Fragments":["to"]},{"Key":"problem, which","Fragments":["is"]},{"Key":"much what","Fragments":["I"]},{"Key":"I submitted.","Fragments":["There"]},{"Key":"submitted. There","Fragments":["were"]},{"Key":"of key","Fragments":["bits"]},{"Key":"key bits","Fragments":["of"]},{"Key":"bits of","Fragments":["knowledge"]},{"Key":"of knowledge","Fragments":["I"]},{"Key":"knowledge I","Fragments":["learned"]},{"Key":"learned which","Fragments":["makes"]},{"Key":"which makes","Fragments":["this","this","it","each","the","things"]},{"Key":"solution so","Fragments":["much"]},{"Key":"my initial","Fragments":["solution.","implementation."]},{"Key":"to zoldar","Fragments":["for"]},{"Key":"zoldar for","Fragments":["pointing"]},{"Key":"possibility to","Fragments":["use"]},{"Key":"Java standard","Fragments":["library"]},{"Key":"library for","Fragments":["checking"]},{"Key":"checking whether","Fragments":["a"]},{"Key":"character is","Fragments":["a","lower","considered"]},{"Key":"a letter.","Fragments":["However","Thus"]},{"Key":"letter. However","Fragments":["I"]},{"Key":"the usefulness","Fragments":["of","of"]},{"Key":"usefulness of","Fragments":["splitting","pre-filtering"]},{"Key":"splitting each","Fragments":["predicate"]},{"Key":"a separate,","Fragments":["independent"]},{"Key":"separate, independent","Fragments":["function,"]},{"Key":"independent function,","Fragments":["as"]},{"Key":"function, as","Fragments":["the","it","I"]},{"Key":"predicates are","Fragments":["in","added","mutually","domain-related,"]},{"Key":"fact not","Fragments":["independent:"]},{"Key":"not independent:","Fragments":["the"]},{"Key":"independent: the","Fragments":["check"]},{"Key":"for questions","Fragments":["should"]},{"Key":"questions should","Fragments":["come"]},{"Key":"should come","Fragments":["after","down","before."]},{"Key":"for shouting,","Fragments":["and","is"]},{"Key":"shouting, and","Fragments":["splitting"]},{"Key":"and splitting","Fragments":["the","on"]},{"Key":"predicates would","Fragments":["hide","be"]},{"Key":"would hide","Fragments":["that"]},{"Key":"hide that","Fragments":["fact."]},{"Key":" Predicates","Fragments":["can"]},{"Key":"Predicates can","Fragments":["be"]},{"Key":"made order","Fragments":["independent."]},{"Key":"independent. Either","Fragments":["way,"]},{"Key":"way, there","Fragments":["should"]},{"Key":"there should","Fragments":["be","be","be","be"]},{"Key":"be explanation","Fragments":["of"]},{"Key":"intent. As","Fragments":["it"]},{"Key":"As it","Fragments":["stands,"]},{"Key":"it stands,","Fragments":["a"]},{"Key":"stands, a","Fragments":["person"]},{"Key":"a person","Fragments":["reading","unacclimated"]},{"Key":"person reading","Fragments":["the","doesn't"]},{"Key":"code can","Fragments":["make","be","be"]},{"Key":"sense of","Fragments":["it","the"]},{"Key":"of external","Fragments":["specification."]},{"Key":"also `clojure.string/lower-case`","Fragments":["is"]},{"Key":"`clojure.string/lower-case` is","Fragments":["you","also"]},{"Key":"is you","Fragments":["would"]},{"Key":"of interop","Fragments":["calls."]},{"Key":"interop calls.","Fragments":["Nice"]},{"Key":"calls. Nice","Fragments":["touch"]},{"Key":"with handling","Fragments":["unicode."]},{"Key":"handling unicode.","Fragments":["Consider"]},{"Key":"unicode. Consider","Fragments":["if"]},{"Key":"Consider if","Fragments":["the"]},{"Key":"the inline","Fragments":["comment"]},{"Key":"inline comment","Fragments":["shouldn't","(all","to"]},{"Key":"comment shouldn't","Fragments":["become"]},{"Key":"shouldn't become","Fragments":["a"]},{"Key":"a function's","Fragments":["docstring"]},{"Key":"function's docstring","Fragments":["(text"]},{"Key":"docstring (text","Fragments":["in"]},{"Key":"(text in","Fragments":["double"]},{"Key":"in double","Fragments":["quotes"]},{"Key":"double quotes","Fragments":["between"]},{"Key":"quotes between","Fragments":["function"]},{"Key":"between function","Fragments":["name"]},{"Key":"and argument","Fragments":["list)."]},{"Key":" Solution","Fragments":["with"]},{"Key":"Solution with","Fragments":["reduce"]},{"Key":"reduce looks","Fragments":["nice."]},{"Key":"nice. Alternative","Fragments":["approach"]},{"Key":"can pick","Fragments":["out"]},{"Key":"out sequences","Fragments":["of"]},{"Key":"of alphabetic","Fragments":["characters"]},{"Key":"alphabetic characters","Fragments":["with","are"]},{"Key":"not inline","Fragments":["(replace"]},{"Key":"inline (replace","Fragments":["dna-string"]},{"Key":"(replace dna-string","Fragments":["#\"T\""]},{"Key":"dna-string #\"T\"","Fragments":["\"U\")"]},{"Key":"#\"T\" \"U\")","Fragments":["into"]},{"Key":"\"U\") into","Fragments":["to-rna"]},{"Key":"into to-rna","Fragments":["function."]},{"Key":"generate all","Fragments":["of","of","the"]},{"Key":"of them,","Fragments":["including"]},{"Key":"them, including","Fragments":["the"]},{"Key":"the `...teenth`","Fragments":["functions"]},{"Key":"`...teenth` functions","Fragments":["in"]},{"Key":"one go.","Fragments":["Most"]},{"Key":"go. Most","Fragments":["people"]},{"Key":"in 2","Fragments":["steps."]},{"Key":" Argument","Fragments":["names"]},{"Key":"Argument names","Fragments":["like"]},{"Key":"like `pos`,","Fragments":["`pim`"]},{"Key":"`pos`, `pim`","Fragments":["and"]},{"Key":"`pim` and","Fragments":["`dow`"]},{"Key":"and `dow`","Fragments":["are"]},{"Key":"`dow` are","Fragments":["hard"]},{"Key":"are hard","Fragments":["to","so"]},{"Key":"follow, especially","Fragments":["when"]},{"Key":"especially when","Fragments":["`pos`"]},{"Key":"when `pos`","Fragments":["and"]},{"Key":"`pos` and","Fragments":["`pim`"]},{"Key":"and `pim`","Fragments":["are"]},{"Key":"`pim` are","Fragments":["the"]},{"Key":"is small,","Fragments":["but,"]},{"Key":"small, but,","Fragments":["for"]},{"Key":"but, for","Fragments":["`third`"]},{"Key":"for `third`","Fragments":["and"]},{"Key":"`third` and","Fragments":["`fourth`"]},{"Key":"and `fourth`","Fragments":["try"]},{"Key":"`fourth` try","Fragments":["out"]},{"Key":"the [nth](http://clojuredocs.org/clojure_core/clojure.core/nth)","Fragments":["function."]},{"Key":"And `re-seq`","Fragments":["is"]},{"Key":"`re-seq` is","Fragments":["lazy"]},{"Key":"lazy which","Fragments":["is"]},{"Key":"nice at","Fragments":["some"]},{"Key":"some level.","Fragments":["Cool."]},{"Key":"Nice! `frequencies`","Fragments":["is"]},{"Key":"even simpler.","Fragments":["Thanks!"]},{"Key":"I debated","Fragments":["whether"]},{"Key":"debated whether","Fragments":["it"]},{"Key":"whether it","Fragments":["should","is","was","is"]},{"Key":"a comment","Fragments":["or","explaining","would","=)","on","to.","on"]},{"Key":"comment or","Fragments":["a"]},{"Key":"a docstring.","Fragments":["I","Things"]},{"Key":"docstring. I","Fragments":["went"]},{"Key":"with comment","Fragments":["because"]},{"Key":"comment because","Fragments":["I"]},{"Key":"felt it","Fragments":["provided","made"]},{"Key":"it provided","Fragments":["clarification"]},{"Key":"provided clarification","Fragments":["on"]},{"Key":"clarification on","Fragments":["an"]},{"Key":"implementation detail","Fragments":["rather","of"]},{"Key":"detail rather","Fragments":["than"]},{"Key":"a definition","Fragments":["of"]},{"Key":"the function.","Fragments":["In","This","In"]},{"Key":"function. In","Fragments":["my","this"]},{"Key":"In my","Fragments":["new","solution","eyes","view","budding","code","solution,"]},{"Key":"new solution","Fragments":["I"]},{"Key":"moved it","Fragments":["to","in"]},{"Key":"docstring but","Fragments":["expanded"]},{"Key":"but expanded","Fragments":["the"]},{"Key":"expanded the","Fragments":["text"]},{"Key":"the text","Fragments":["so","is","is","than"]},{"Key":"text so","Fragments":["that"]},{"Key":"better define","Fragments":["what"]},{"Key":"define what","Fragments":["the"]},{"Key":"the underlying","Fragments":["implementation","data"]},{"Key":"underlying implementation","Fragments":["of"]},{"Key":"of `clojure.string/lower-case`","Fragments":["calls"]},{"Key":"`clojure.string/lower-case` calls","Fragments":["out"]},{"Key":"calls out","Fragments":["to"]},{"Key":"Java anyway","Fragments":["so"]},{"Key":"anyway so","Fragments":["I","looking"]},{"Key":"I'll keep","Fragments":["that","an"]},{"Key":"keep that","Fragments":["the","in"]},{"Key":" *quietly","Fragments":["gilds"]},{"Key":"*quietly gilds","Fragments":["lily*"]},{"Key":"was sure","Fragments":["there"]},{"Key":"like `count-with`","Fragments":["in"]},{"Key":"`count-with` in","Fragments":["clojure.core,"]},{"Key":"clojure.core, or","Fragments":["that"]},{"Key":"or that","Fragments":["`count`"]},{"Key":"that `count`","Fragments":["itself","is"]},{"Key":"`count` itself","Fragments":["took"]},{"Key":"itself took","Fragments":["an"]},{"Key":"took an","Fragments":["optional"]},{"Key":"an optional","Fragments":["predicate,","default","third","argument","thing"]},{"Key":"optional predicate,","Fragments":["but"]},{"Key":"predicate, but","Fragments":["I"]},{"Key":"the feedback,","Fragments":["in","I've","here's"]},{"Key":"feedback, in","Fragments":["particular"]},{"Key":"particular for","Fragments":["pointing"]},{"Key":"pointing me","Fragments":["to","in"]},{"Key":"to `clojure.string`.","Fragments":["I've"]},{"Key":"`clojure.string`. I've","Fragments":["yet"]},{"Key":"I've yet","Fragments":["to"]},{"Key":"explore much","Fragments":["outside"]},{"Key":"much outside","Fragments":["of"]},{"Key":"of `clojure.core`.","Fragments":["I"]},{"Key":"`clojure.core`. I","Fragments":["have"]},{"Key":"have updated","Fragments":["the","to","accordingly.","my"]},{"Key":"of `silence?`","Fragments":["accordingly."]},{"Key":"have also","Fragments":["removed","used","tried"]},{"Key":"the chaining","Fragments":["from","inside"]},{"Key":"chaining from","Fragments":["`question?`."]},{"Key":"from `question?`.","Fragments":["As"]},{"Key":"`question?`. As","Fragments":["there"]},{"Key":"As there","Fragments":["was"]},{"Key":"was only","Fragments":["one"]},{"Key":"call I","Fragments":["appreciate"]},{"Key":"actually invoking","Fragments":["a"]},{"Key":"invoking a","Fragments":["chain."]},{"Key":"a chain.","Fragments":["I"]},{"Key":"chain. I","Fragments":["tried"]},{"Key":"it seemed","Fragments":["to","like","to","like","like"]},{"Key":"read very","Fragments":["nicely"]},{"Key":"very nicely","Fragments":["-"]},{"Key":"nicely -","Fragments":["ending"]},{"Key":"- ending","Fragments":["with"]},{"Key":"with *endsWith","Fragments":["\"?\"'*"]},{"Key":"*endsWith \"?\"'*","Fragments":["in"]},{"Key":"\"?\"'* in","Fragments":["just"]},{"Key":"as explaining","Fragments":["*\"a"]},{"Key":"explaining *\"a","Fragments":["question"]},{"Key":"*\"a question","Fragments":["ends"]},{"Key":"question ends","Fragments":["with"]},{"Key":"a ?\"*","Fragments":["does."]},{"Key":"entirely convinced","Fragments":["that"]},{"Key":"convinced that","Fragments":["`(.endsWith","`new-robot-name`"]},{"Key":"that `(.endsWith","Fragments":["prompt"]},{"Key":"`(.endsWith prompt","Fragments":["\"?\")`"]},{"Key":"prompt \"?\")`","Fragments":["scans"]},{"Key":"\"?\")` scans","Fragments":["as"]},{"Key":"scans as","Fragments":["nicely"]},{"Key":"as nicely","Fragments":["for"]},{"Key":"the eyes,","Fragments":["but"]},{"Key":"eyes, but","Fragments":["maybe"]},{"Key":"to reading","Fragments":["a"]},{"Key":"reading a","Fragments":["*Lisp*.","few","few"]},{"Key":"a *Lisp*.","Fragments":["The"]},{"Key":"*Lisp*. The","Fragments":["function"]},{"Key":"simple however,","Fragments":["that"]},{"Key":"however, that","Fragments":["it's"]},{"Key":"understand either","Fragments":["way."]},{"Key":" a","Fragments":["minor","fantastic"]},{"Key":"minor observation","Fragments":[":"]},{"Key":"observation :","Fragments":["the"]},{"Key":": the","Fragments":["use"]},{"Key":"is-anagram looks","Fragments":["a"]},{"Key":"little convoluted","Fragments":["to"]},{"Key":"convoluted to","Fragments":["me."]},{"Key":"nesting and","Fragments":["improve"]},{"Key":"and improve","Fragments":["clarity","maintainability","on"]},{"Key":"improve clarity","Fragments":["by"]},{"Key":"of multiple","Fragments":["`if`s.","full","scans."]},{"Key":"self-documenting or","Fragments":["at"]},{"Key":"or at","Fragments":["least"]},{"Key":"least about","Fragments":["giving"]},{"Key":"some additional","Fragments":["context"]},{"Key":"context so","Fragments":["that"]},{"Key":"the person","Fragments":["reading","is"]},{"Key":"reading doesn't","Fragments":["have"]},{"Key":"to specification","Fragments":["to"]},{"Key":"specification to","Fragments":["make"]},{"Key":"make out","Fragments":["what"]},{"Key":"it actually","Fragments":["does.","looks"]},{"Key":"One way","Fragments":["to","to","to"]},{"Key":"achieve this,","Fragments":["could"]},{"Key":"this, could","Fragments":["be"]},{"Key":"be moving","Fragments":["predicates"]},{"Key":"moving predicates","Fragments":["to"]},{"Key":"either well","Fragments":["named"]},{"Key":"named bindings","Fragments":["or"]},{"Key":"bindings or","Fragments":["even"]},{"Key":"even non-public","Fragments":["functions,"]},{"Key":"non-public functions,","Fragments":["expressing"]},{"Key":"functions, expressing","Fragments":["what"]},{"Key":"expressing what","Fragments":["a"]},{"Key":"given predicates","Fragments":["does"]},{"Key":"predicates does","Fragments":["actually"]},{"Key":"does actually","Fragments":["check"]},{"Key":"actually check","Fragments":["for.","to","the"]},{"Key":" Alternative","Fragments":["approach"]},{"Key":"the shout","Fragments":["predicate","case."]},{"Key":"shout predicate","Fragments":["that"]},{"Key":"predicate that","Fragments":["I've"]},{"Key":"seen recently","Fragments":["is"]},{"Key":"recently is","Fragments":["making"]},{"Key":"making use","Fragments":["of","of","of"]},{"Key":"of `java.lang.Character`","Fragments":["static"]},{"Key":"`java.lang.Character` static","Fragments":["predicate"]},{"Key":"static predicate","Fragments":["methods","methods."]},{"Key":"methods like","Fragments":["`Character/isUpperCase`,"]},{"Key":"like `Character/isUpperCase`,","Fragments":["`Character/isLetter`"]},{"Key":"`Character/isUpperCase`, `Character/isLetter`","Fragments":["etc."]},{"Key":" Alternatively","Fragments":["to"]},{"Key":"Alternatively to","Fragments":["using"]},{"Key":"using regex,","Fragments":["you"]},{"Key":"regex, you","Fragments":["could"]},{"Key":"could filter","Fragments":["the"]},{"Key":"filter the","Fragments":["input","word","results"]},{"Key":"input with","Fragments":["help","a"]},{"Key":"of `java.lang.Character`'s","Fragments":["static"]},{"Key":"`java.lang.Character`'s static","Fragments":["predicate"]},{"Key":"this iteration","Fragments":["I","I"]},{"Key":"iteration I","Fragments":["decided","changed"]},{"Key":"decided I'd","Fragments":["generate"]},{"Key":"I'd generate","Fragments":["words"]},{"Key":"generate words","Fragments":["by"]},{"Key":"words by","Fragments":["reading"]},{"Key":"by reading","Fragments":["in"]},{"Key":"reading in","Fragments":["characters","words."]},{"Key":"in characters","Fragments":["until"]},{"Key":"characters until","Fragments":["a"]},{"Key":"until a","Fragments":["whitespace."]},{"Key":"a whitespace.","Fragments":["Then"]},{"Key":"whitespace. Then","Fragments":["I'd"]},{"Key":"Then I'd","Fragments":["remove"]},{"Key":"I'd remove","Fragments":["any"]},{"Key":"remove any","Fragments":["unwanted"]},{"Key":"any unwanted","Fragments":["characters"]},{"Key":"unwanted characters","Fragments":["from"]},{"Key":"and lower","Fragments":["case","case;","case,","case"]},{"Key":"case it.","Fragments":["This"]},{"Key":"way if","Fragments":["a"]},{"Key":"word was","Fragments":["\"javascript!!\u0026@$%\u0026z\""]},{"Key":"was \"javascript!!\u0026@$%\u0026z\"","Fragments":["it"]},{"Key":"\"javascript!!\u0026@$%\u0026z\" it","Fragments":["would"]},{"Key":"would generate","Fragments":["the"]},{"Key":"word \"javascriptz\"","Fragments":["instead"]},{"Key":"\"javascriptz\" instead","Fragments":["of"]},{"Key":"of stopping","Fragments":["at"]},{"Key":"stopping at","Fragments":["\"javascript\"."]},{"Key":"at \"javascript\".","Fragments":["Perhaps"]},{"Key":"\"javascript\". Perhaps","Fragments":["I"]},{"Key":"Perhaps I","Fragments":["shouldn't"]},{"Key":"I shouldn't","Fragments":["have"]},{"Key":"shouldn't have","Fragments":["taken","a"]},{"Key":"have taken","Fragments":["the"]},{"Key":"taken the","Fragments":["solution"]},{"Key":"solution this","Fragments":["far..."]},{"Key":"could imagine","Fragments":["that"]},{"Key":"imagine that","Fragments":["`generate-words`"]},{"Key":"that `generate-words`","Fragments":["would"]},{"Key":"`generate-words` would","Fragments":["be"]},{"Key":"more composable","Fragments":["with","set","set"]},{"Key":"composable with","Fragments":["other"]},{"Key":"other things","Fragments":["if","to"]},{"Key":"things if","Fragments":["you"]},{"Key":"the lower-casing","Fragments":["into","up","and"]},{"Key":"lower-casing into","Fragments":["word-count."]},{"Key":"about `\\p{L}`,","Fragments":["nice."]},{"Key":"`\\p{L}`, nice.","Fragments":["(My"]},{"Key":"nice. (My","Fragments":["solution"]},{"Key":"(My solution","Fragments":["using"]},{"Key":"using `\\w+`","Fragments":["does"]},{"Key":"`\\w+` does","Fragments":["not"]},{"Key":"not handle","Fragments":["Unicode,","the"]},{"Key":"handle Unicode,","Fragments":["I"]},{"Key":"Unicode, I","Fragments":["guess.)"]},{"Key":"I guess.)","Fragments":["However,"]},{"Key":"guess.) However,","Fragments":["that"]},{"Key":"that expression","Fragments":["will"]},{"Key":"expression will","Fragments":["split"]},{"Key":"will split","Fragments":["things"]},{"Key":"split things","Fragments":["like"]},{"Key":"like `cloud9`","Fragments":["or"]},{"Key":"`cloud9` or","Fragments":["`i18n`"]},{"Key":"or `i18n`","Fragments":["into"]},{"Key":"`i18n` into","Fragments":["multiple"]},{"Key":"into multiple","Fragments":["words."]},{"Key":"multiple words.","Fragments":["Not"]},{"Key":"is desirable.","Fragments":["You"]},{"Key":"desirable. You","Fragments":["could"]},{"Key":"could group","Fragments":["the"]},{"Key":"group the","Fragments":["number/letter"]},{"Key":"the number/letter","Fragments":["match"]},{"Key":"number/letter match","Fragments":["and"]},{"Key":"match and","Fragments":["move"]},{"Key":"the `+`","Fragments":["quantifier"]},{"Key":"`+` quantifier","Fragments":["outside."]},{"Key":"Nice doc","Fragments":["strings"]},{"Key":"doc strings","Fragments":["and","for","on"]},{"Key":"strings and","Fragments":["comments."]},{"Key":" Question:","Fragments":["Did"]},{"Key":"Question: Did","Fragments":["you"]},{"Key":"you intentionally","Fragments":["choose"]},{"Key":"intentionally choose","Fragments":["`contains`"]},{"Key":"choose `contains`","Fragments":["and"]},{"Key":"`contains` and","Fragments":["`any`"]},{"Key":"and `any`","Fragments":["names?"]},{"Key":"`any` names?","Fragments":["You"]},{"Key":"names? You","Fragments":["could"]},{"Key":"make them","Fragments":["the","all","a","more","both","as","private","out"]},{"Key":"same since","Fragments":["they"]},{"Key":"both `(some","Fragments":["..."]},{"Key":"`(some ...","Fragments":["prompt)`."]},{"Key":"Making the","Fragments":["intent"]},{"Key":" @kaitlyn:","Fragments":["Yes,"]},{"Key":"@kaitlyn: Yes,","Fragments":["the"]},{"Key":"Yes, the","Fragments":["predicates","question"]},{"Key":"predicates must","Fragments":["be"]},{"Key":"made order-independent","Fragments":["but"]},{"Key":"order-independent but","Fragments":["defining"]},{"Key":"but defining","Fragments":["`question?`"]},{"Key":"defining `question?`","Fragments":["as","in"]},{"Key":"`question?` as","Fragments":["`(and","a"]},{"Key":"as `(and","Fragments":["(="]},{"Key":"`(and (=","Fragments":["(last","(string/upper-case","message"]},{"Key":"(last query)","Fragments":["\\?)"]},{"Key":"query) \\?)","Fragments":["(not"]},{"Key":"\\?) (not","Fragments":["(yell?"]},{"Key":"(not (yell?","Fragments":["query)))`"]},{"Key":"(yell? query)))`","Fragments":["is"]},{"Key":"query)))` is","Fragments":["certainly"]},{"Key":"an extensible","Fragments":["approach."]},{"Key":"extensible approach.","Fragments":["What"]},{"Key":"another predicate?","Fragments":["Do"]},{"Key":"predicate? Do","Fragments":["I"]},{"Key":"Do I","Fragments":["have"]},{"Key":"go through","Fragments":["all"]},{"Key":"other predicates","Fragments":["and"]},{"Key":"predicates and","Fragments":["add","warn","values","thus","respond","without","composes","composes"]},{"Key":"add `(not","Fragments":["(new-predicate?"]},{"Key":"`(not (new-predicate?","Fragments":["query))`"]},{"Key":"(new-predicate? query))`","Fragments":["to"]},{"Key":"query))` to","Fragments":["the"]},{"Key":" Equivalent","Fragments":["to"]},{"Key":"Equivalent to","Fragments":["a"]},{"Key":"regexp search-replace","Fragments":["(`string/replace`)."]},{"Key":" Ahh,","Fragments":["nice","good"]},{"Key":"Ahh, nice","Fragments":["catch."]},{"Key":"nice catch.","Fragments":["I"]},{"Key":"catch. I","Fragments":["didn't"]},{"Key":"didn't notice","Fragments":["that.","that","it!"]},{"Key":"notice that.","Fragments":["I"]},{"Key":"did notice,","Fragments":["previously,"]},{"Key":"notice, previously,","Fragments":["that"]},{"Key":"previously, that","Fragments":["it"]},{"Key":"a symbol","Fragments":["in","like"]},{"Key":"the word;","Fragments":["ex:"]},{"Key":"word; ex:","Fragments":["one*two."]},{"Key":"ex: one*two.","Fragments":["At"]},{"Key":"one*two. At","Fragments":["the"]},{"Key":"do anything","Fragments":["about"]},{"Key":"that. But","Fragments":["since","it"]},{"Key":"you noticed","Fragments":["this"]},{"Key":"thought I'd","Fragments":["take","try","start"]},{"Key":"approach at","Fragments":["reading"]},{"Key":"at reading","Fragments":["in"]},{"Key":"in words.","Fragments":["See"]},{"Key":"words. See","Fragments":["my"]},{"Key":" Valid","Fragments":["point."]},{"Key":"Valid point.","Fragments":["Another"]},{"Key":"point. Another","Fragments":["approach,"]},{"Key":"Another approach,","Fragments":["which"]},{"Key":"approach, which","Fragments":["would"]},{"Key":"sense if","Fragments":["the"]},{"Key":"number predicates","Fragments":["would"]},{"Key":"be supposed","Fragments":["grow"]},{"Key":"supposed grow","Fragments":["considerably:"]},{"Key":" Define","Fragments":["predicates"]},{"Key":"Define predicates","Fragments":["separately,"]},{"Key":"predicates separately,","Fragments":["but"]},{"Key":"separately, but","Fragments":["store"]},{"Key":"but store","Fragments":["them"]},{"Key":"store them","Fragments":["along"]},{"Key":"them along","Fragments":["with"]},{"Key":"with optional","Fragments":["sets"]},{"Key":"optional sets","Fragments":["which"]},{"Key":"sets which","Fragments":["would"]},{"Key":"would contain","Fragments":["references"]},{"Key":"contain references","Fragments":["to"]},{"Key":"to predicates","Fragments":["that"]},{"Key":"predicates that","Fragments":["enforce"]},{"Key":"that enforce","Fragments":["proper"]},{"Key":"enforce proper","Fragments":["ordering."]},{"Key":"proper ordering.","Fragments":["This"]},{"Key":"ordering. This","Fragments":["could"]},{"Key":"This could","Fragments":["be","be"]},{"Key":"be accomplished","Fragments":["by"]},{"Key":"accomplished by","Fragments":["attaching"]},{"Key":"by attaching","Fragments":["metadata"]},{"Key":"attaching metadata","Fragments":["to"]},{"Key":"to predicate","Fragments":["definitions:"]},{"Key":"(defn yelling?","Fragments":["{:after","[phrase]"]},{"Key":"yelling? {:after","Fragments":["#{silence?}}"]},{"Key":"{:after #{silence?}}","Fragments":["[phrase]"]},{"Key":"#{silence?}} [phrase]","Fragments":["...)"]},{"Key":"Then all","Fragments":["references"]},{"Key":"all references","Fragments":["could"]},{"Key":"references could","Fragments":["be"]},{"Key":"collection which","Fragments":["would"]},{"Key":"to produce","Fragments":["what"]},{"Key":"produce what","Fragments":["effectively"]},{"Key":"what effectively","Fragments":["would"]},{"Key":"effectively would","Fragments":["be"]},{"Key":"course that's","Fragments":["seems"]},{"Key":"that's seems","Fragments":["like"]},{"Key":"like an","Fragments":["obvious","good"]},{"Key":"obvious overkill","Fragments":["and"]},{"Key":"and additional","Fragments":["complexity"]},{"Key":"additional complexity","Fragments":["here,"]},{"Key":"complexity here,","Fragments":["but"]},{"Key":"that's an","Fragments":["option.","incredibly"]},{"Key":" Splitting","Fragments":["on"]},{"Key":"Splitting on","Fragments":["whitespace"]},{"Key":"and cleaning","Fragments":["up"]},{"Key":"cleaning up","Fragments":["seems"]},{"Key":"up seems","Fragments":["reasonable"]},{"Key":"seems reasonable","Fragments":["enough;"]},{"Key":"reasonable enough;","Fragments":["whether"]},{"Key":"enough; whether","Fragments":["it"]},{"Key":"too far","Fragments":["would","with"]},{"Key":"far would","Fragments":["depend"]},{"Key":"would depend","Fragments":["on"]},{"Key":"the business","Fragments":["requirements"]},{"Key":"business requirements","Fragments":[":-)"]},{"Key":"of lifting","Fragments":["the","it"]},{"Key":"lifting the","Fragments":["lower-casing"]},{"Key":"lower-casing up","Fragments":["to"]},{"Key":"to `word-count`","Fragments":["but"]},{"Key":"`word-count` but","Fragments":["that"]},{"Key":"may just","Fragments":["be"]},{"Key":"a preference.","Fragments":["(It"]},{"Key":"preference. (It","Fragments":["makes"]},{"Key":"(It makes","Fragments":["clear"]},{"Key":"makes clear","Fragments":["that"]},{"Key":"clear that","Fragments":["case","such","this"]},{"Key":"case insensitivity","Fragments":["is"]},{"Key":"insensitivity is","Fragments":["part"]},{"Key":"the `word-count`","Fragments":["contract,","function."]},{"Key":"`word-count` contract,","Fragments":["not"]},{"Key":"contract, not","Fragments":["an"]},{"Key":"have doc","Fragments":["strings"]},{"Key":"your private","Fragments":["functions"]},{"Key":"public one.","Fragments":["Though"]},{"Key":"one. Though","Fragments":["the"]},{"Key":"Though the","Fragments":["public"]},{"Key":"public one","Fragments":["is"]},{"Key":"very straight-forward","Fragments":["to"]},{"Key":"straight-forward to","Fragments":["read."]},{"Key":"think implementing","Fragments":["a"]},{"Key":"implementing a","Fragments":["topological"]},{"Key":"a topological","Fragments":["sort"]},{"Key":"topological sort","Fragments":["for"]},{"Key":"sort for","Fragments":["this"]},{"Key":"exercise is...","Fragments":["overkill."]},{"Key":"the `silent?`,","Fragments":["`shouting?`"]},{"Key":"`silent?`, `shouting?`","Fragments":["and"]},{"Key":"and `asking-politely?`","Fragments":["conditions"]},{"Key":"`asking-politely?` conditions","Fragments":["mutually"]},{"Key":"conditions mutually","Fragments":["exclusive"]},{"Key":"mutually exclusive","Fragments":["so","so"]},{"Key":"exclusive so","Fragments":["that","that"]},{"Key":"cond block","Fragments":["doesn't"]},{"Key":"block doesn't","Fragments":["matter."]},{"Key":"A straight","Fragments":["translation"]},{"Key":"straight translation","Fragments":["of"]},{"Key":"translation of","Fragments":["my"]},{"Key":"my haskell","Fragments":["implementation..."]},{"Key":"Nice. Alternatively","Fragments":["there's"]},{"Key":"Alternatively there's","Fragments":["`frequencies`."]},{"Key":"good. However,","Fragments":["somebody"]},{"Key":"However, somebody","Fragments":["recently"]},{"Key":"somebody recently","Fragments":["pointed"]},{"Key":"recently pointed","Fragments":["out,"]},{"Key":"pointed out,","Fragments":["that"]},{"Key":"out, that","Fragments":["it's"]},{"Key":"not possible","Fragments":["to","(e.g."]},{"Key":"maintain order","Fragments":["independence"]},{"Key":"order independence","Fragments":["at"]},{"Key":"independence at","Fragments":["all"]},{"Key":"all times","Fragments":["when"]},{"Key":"times when","Fragments":["new","it"]},{"Key":"when new","Fragments":["predicates"]},{"Key":"new predicates","Fragments":["are"]},{"Key":"are added","Fragments":["-"]},{"Key":"added -","Fragments":["at"]},{"Key":"not without","Fragments":["adapting"]},{"Key":"without adapting","Fragments":["the"]},{"Key":"adapting the","Fragments":["existing"]},{"Key":"the existing","Fragments":["predicates.","functions","value","value"]},{"Key":"existing predicates.","Fragments":["Maybe"]},{"Key":"predicates. Maybe","Fragments":["in"]},{"Key":"Maybe in","Fragments":["the"]},{"Key":"end, it's","Fragments":["best"]},{"Key":"it's best","Fragments":["to"]},{"Key":"best to","Fragments":["simplify"]},{"Key":"simplify predicates","Fragments":["and"]},{"Key":"and warn","Fragments":["in"]},{"Key":"warn in","Fragments":["`response-for`"]},{"Key":"`response-for` doc","Fragments":["string"]},{"Key":"doc string","Fragments":["or","after"]},{"Key":"or inline","Fragments":["comment","it"]},{"Key":"comment (all","Fragments":["in"]},{"Key":"(all in","Fragments":["all"]},{"Key":"all it's","Fragments":["matter"]},{"Key":"it's matter","Fragments":["of"]},{"Key":"of implementation)","Fragments":["that"]},{"Key":"implementation) that","Fragments":["ordering"]},{"Key":"that ordering","Fragments":["matters?"]},{"Key":"Hi. Yes,","Fragments":["this"]},{"Key":"Yes, this","Fragments":["was"]},{"Key":"an intentional","Fragments":["choice."]},{"Key":"first draft","Fragments":["used"]},{"Key":"draft used","Fragments":["`contains-ucase-chars`"]},{"Key":"used `contains-ucase-chars`","Fragments":["and"]},{"Key":"`contains-ucase-chars` and","Fragments":["`contains-lcase-chars`."]},{"Key":"and `contains-lcase-chars`.","Fragments":["This"]},{"Key":"`contains-lcase-chars`. This","Fragments":["has"]},{"Key":"This has","Fragments":["the","a","lots"]},{"Key":"of consistency,","Fragments":["as"]},{"Key":"consistency, as","Fragments":["they"]},{"Key":"as they","Fragments":["have","stick","get,","are"]},{"Key":"have both","Fragments":["applied"]},{"Key":"both applied","Fragments":["a"]},{"Key":"applied a","Fragments":["character"]},{"Key":"character case","Fragments":["predicate"]},{"Key":"case predicate","Fragments":["using"]},{"Key":"predicate using","Fragments":["`some"]},{"Key":"using `some","Fragments":["..."]},{"Key":"`some ...","Fragments":["prompt`."]},{"Key":"code back","Fragments":["to"]},{"Key":"myself though,","Fragments":["I"]},{"Key":"though, I","Fragments":["felt","could"]},{"Key":"felt that","Fragments":["`contains-lcase-chars`","the","it's"]},{"Key":"that `contains-lcase-chars`","Fragments":["was"]},{"Key":"`contains-lcase-chars` was","Fragments":["a"]},{"Key":"that well","Fragments":["explained"]},{"Key":"well explained","Fragments":["*how*","on"]},{"Key":"explained *how*","Fragments":["the"]},{"Key":"*how* the","Fragments":["value"]},{"Key":"value had","Fragments":["been"]},{"Key":"been calculated,","Fragments":["but"]},{"Key":"calculated, but","Fragments":["wasn't"]},{"Key":"wasn't quite","Fragments":["as"]},{"Key":"at expressing","Fragments":["*why*"]},{"Key":"expressing *why*","Fragments":["it"]},{"Key":"*why* it","Fragments":["was"]},{"Key":"was of","Fragments":["interest."]},{"Key":"interest. As","Fragments":["developers"]},{"Key":"As developers","Fragments":["we"]},{"Key":"developers we","Fragments":["can"]},{"Key":"can read","Fragments":["`not"]},{"Key":"read `not","Fragments":["contains-x`"]},{"Key":"`not contains-x`","Fragments":["pretty"]},{"Key":"contains-x` pretty","Fragments":["intuitively,"]},{"Key":"pretty intuitively,","Fragments":["but"]},{"Key":"intuitively, but","Fragments":["in"]},{"Key":"in natural","Fragments":["language"]},{"Key":"natural language","Fragments":["we"]},{"Key":"language we","Fragments":["would"]},{"Key":"we would","Fragments":["really","have"]},{"Key":"would really","Fragments":["say","make"]},{"Key":"really say","Fragments":["*\"does"]},{"Key":"say *\"does","Fragments":["not"]},{"Key":"*\"does not","Fragments":["contain"]},{"Key":"not contain","Fragments":["x\"*."]},{"Key":"contain x\"*.","Fragments":["In"]},{"Key":"x\"*. In","Fragments":["this"]},{"Key":"really want","Fragments":["to","to"]},{"Key":"to express","Fragments":["*\"contains","your","that?"]},{"Key":"express *\"contains","Fragments":["upper-case"]},{"Key":"*\"contains upper-case","Fragments":["characters"]},{"Key":"upper-case characters","Fragments":["and"]},{"Key":"characters and","Fragments":["no","internationalization.","represented","represented"]},{"Key":"no lower-case","Fragments":["characters\"*.","letters\"."]},{"Key":"lower-case characters\"*.","Fragments":["I"]},{"Key":"characters\"*. I","Fragments":["felt"]},{"Key":"the admittedly","Fragments":["subtle"]},{"Key":"admittedly subtle","Fragments":["name"]},{"Key":"subtle name","Fragments":["change"]},{"Key":"change to","Fragments":["`any-lcase-chars`","the","the","your","make"]},{"Key":"to `any-lcase-chars`","Fragments":["helped"]},{"Key":"`any-lcase-chars` helped","Fragments":["the"]},{"Key":"helped the","Fragments":["readability"]},{"Key":"the `not`","Fragments":["and"]},{"Key":"`not` and","Fragments":["thereby","`nil?`"]},{"Key":"and thereby","Fragments":["the"]},{"Key":"thereby the","Fragments":["whole"]},{"Key":"whole `and`","Fragments":["-"]},{"Key":"`and` -","Fragments":["the"]},{"Key":"line which","Fragments":["is"]},{"Key":"the main","Fragments":["expression","method","thing","response-for","block","function","function","body,","`to-rna`"]},{"Key":"main expression","Fragments":["of"]},{"Key":"expression of","Fragments":["intent","the"]},{"Key":"of intent","Fragments":["in"]},{"Key":"I'm now","Fragments":["somewhat","more"]},{"Key":"now somewhat","Fragments":["surprised"]},{"Key":"somewhat surprised","Fragments":["to"]},{"Key":"have written","Fragments":["so","a"]},{"Key":"written so","Fragments":["much","it"]},{"Key":"one name!","Fragments":["So"]},{"Key":"name! So","Fragments":["yes,"]},{"Key":"So yes,","Fragments":["I","simply"]},{"Key":"was consciously","Fragments":["trying"]},{"Key":"consciously trying","Fragments":["to"]},{"Key":"things readable.","Fragments":["As"]},{"Key":"readable. As","Fragments":["ever"]},{"Key":"As ever","Fragments":["though,"]},{"Key":"ever though,","Fragments":["these"]},{"Key":"though, these","Fragments":["things"]},{"Key":"are always","Fragments":["subjective.","good"]},{"Key":"always subjective.","Fragments":["I'm"]},{"Key":"subjective. I'm","Fragments":["prepared"]},{"Key":"I'm prepared","Fragments":["to"]},{"Key":"prepared to","Fragments":["concede"]},{"Key":"that maybe","Fragments":["it","the","should"]},{"Key":"doesn't improve","Fragments":["readability"]},{"Key":"readability enough","Fragments":["to"]},{"Key":"to justify","Fragments":["the","adding","merge-with."]},{"Key":"justify the","Fragments":["break"]},{"Key":"the break","Fragments":["with"]},{"Key":"break with","Fragments":["consistency."]},{"Key":" @omari:","Fragments":["it","Instead"]},{"Key":"@omari: it","Fragments":["looks"]},{"Key":"use isLetterOrDigit","Fragments":["but"]},{"Key":"isLetterOrDigit but","Fragments":["I"]},{"Key":"character code","Fragments":["points"]},{"Key":"code points","Fragments":["to"]},{"Key":"support unicode","Fragments":["letters."]},{"Key":"unicode letters.","Fragments":["It"]},{"Key":"letters. It","Fragments":["looks"]},{"Key":"clojure contrib","Fragments":["has"]},{"Key":"contrib has","Fragments":["a"]},{"Key":"convert strings","Fragments":["to"]},{"Key":"strings to","Fragments":["code","a","the","strings,"]},{"Key":"code points.","Fragments":["So"]},{"Key":"points. So","Fragments":["I"]},{"Key":"I'd either","Fragments":["need"]},{"Key":"either need","Fragments":["to"]},{"Key":"bring this","Fragments":["in"]},{"Key":"in or","Fragments":["convert"]},{"Key":"or convert","Fragments":["the"]},{"Key":"convert the","Fragments":["strings","`sorted-lowered`"]},{"Key":"strings using","Fragments":["a"]},{"Key":"character array","Fragments":["and","and"]},{"Key":"each character.","Fragments":["Thanks"]},{"Key":"character. Thanks","Fragments":["for"]},{"Key":"for bringing","Fragments":["this"]},{"Key":"bringing this","Fragments":["up"]},{"Key":"up as","Fragments":["a","top","the"]},{"Key":"@omari: Instead","Fragments":["of"]},{"Key":"lifting it","Fragments":["up"]},{"Key":"up I","Fragments":["buried"]},{"Key":"I buried","Fragments":["it"]},{"Key":"buried it","Fragments":["further"]},{"Key":"it further","Fragments":["down."]},{"Key":"down. Ha!","Fragments":["I"]},{"Key":"Ha! I","Fragments":["guess","discovered"]},{"Key":"your point","Fragments":["in","that"]},{"Key":"it immediately","Fragments":["clear","clear"]},{"Key":"immediately clear","Fragments":["the","to"]},{"Key":"word count","Fragments":["is","something"]},{"Key":"count is","Fragments":["case"]},{"Key":"case insensitive.","Fragments":["But"]},{"Key":"insensitive. But","Fragments":["I"]},{"Key":"it where","Fragments":["it","it"]},{"Key":"because that","Fragments":["function","way"]},{"Key":"function contains","Fragments":["other"]},{"Key":"contains other","Fragments":["information"]},{"Key":"information regarding","Fragments":["how"]},{"Key":"regarding how","Fragments":["words"]},{"Key":"how words","Fragments":["will","will"]},{"Key":"words will","Fragments":["be","consist","be"]},{"Key":"be treated.","Fragments":["Words"]},{"Key":"treated. Words","Fragments":["will"]},{"Key":"Words will","Fragments":["be"]},{"Key":"be lower","Fragments":["cased"]},{"Key":"lower cased","Fragments":["and","the"]},{"Key":"cased and","Fragments":["words"]},{"Key":"and words","Fragments":["will"]},{"Key":"will consist","Fragments":["of"]},{"Key":"consist of","Fragments":["unicode"]},{"Key":"of unicode","Fragments":["letters"]},{"Key":"unicode letters","Fragments":["and"]},{"Key":"and digits.","Fragments":["So"]},{"Key":"digits. So","Fragments":["everything"]},{"Key":"So everything","Fragments":["stating"]},{"Key":"everything stating","Fragments":["how"]},{"Key":"stating how","Fragments":["words"]},{"Key":"be compared","Fragments":["live"]},{"Key":"compared live","Fragments":["together."]},{"Key":"Another good","Fragments":["observation."]},{"Key":"good observation.","Fragments":["Yeah,"]},{"Key":"observation. Yeah,","Fragments":["typically"]},{"Key":"Yeah, typically","Fragments":["I"]},{"Key":"typically I","Fragments":["would"]},{"Key":"would comment","Fragments":["a"]},{"Key":"comment a","Fragments":["public"]},{"Key":"public method","Fragments":["instead"]},{"Key":"private method.","Fragments":["I"]},{"Key":"method. I","Fragments":["initially","will","wonder","could","wish"]},{"Key":"initially had","Fragments":["an"]},{"Key":"had an","Fragments":["inline","unnecessary"]},{"Key":"an inline","Fragments":["comment"]},{"Key":"comment to","Fragments":["clarify"]},{"Key":"the unicode","Fragments":["letter"]},{"Key":"unicode letter","Fragments":["regex,"]},{"Key":"letter regex,","Fragments":["because"]},{"Key":"regex, because","Fragments":["it"]},{"Key":"as common,","Fragments":["but"]},{"Key":"common, but","Fragments":["it"]},{"Key":"it ended","Fragments":["up"]},{"Key":"being expanded","Fragments":["and"]},{"Key":"expanded and","Fragments":["promoted"]},{"Key":"and promoted","Fragments":["to"]},{"Key":"promoted to","Fragments":["a"]},{"Key":"docstring. Things","Fragments":["snowballed"]},{"Key":"Things snowballed","Fragments":["from"]},{"Key":"snowballed from","Fragments":["there."]},{"Key":"from there.","Fragments":["I"]},{"Key":"just remove","Fragments":["the"]},{"Key":"the docstrings","Fragments":["from"]},{"Key":"docstrings from","Fragments":["the"]},{"Key":"the `(not","Fragments":["any-...)`.","(some"]},{"Key":"`(not any-...)`.","Fragments":["I'm"]},{"Key":"any-...)`. I'm","Fragments":["on"]},{"Key":"fence here.","Fragments":["Perhaps"]},{"Key":"here. Perhaps","Fragments":["`(and"]},{"Key":"Perhaps `(and","Fragments":["any-ucase-chars"]},{"Key":"`(and any-ucase-chars","Fragments":["(not"]},{"Key":"any-ucase-chars (not","Fragments":["any-lcase-chars))`"]},{"Key":"(not any-lcase-chars))`","Fragments":["would"]},{"Key":"any-lcase-chars))` would","Fragments":["suffice"]},{"Key":"would suffice","Fragments":["to"]},{"Key":"suffice to","Fragments":["satisfy"]},{"Key":"to satisfy","Fragments":["both","the"]},{"Key":"satisfy both","Fragments":["consistency"]},{"Key":"both consistency","Fragments":["and"]},{"Key":"consistency and","Fragments":["readability"]},{"Key":"and readability","Fragments":["camps.","was","but"]},{"Key":"think such","Fragments":["having"]},{"Key":"such having","Fragments":["such"]},{"Key":"having such","Fragments":["discussions"]},{"Key":"such discussions","Fragments":["are","are"]},{"Key":"discussions are","Fragments":["the","the"]},{"Key":"whole point","Fragments":["of","of"]},{"Key":"this site","Fragments":[":-)"]},{"Key":"think `:refer`ring","Fragments":["`blank?`"]},{"Key":"`:refer`ring `blank?`","Fragments":["and"]},{"Key":"`replace` was","Fragments":["a"]},{"Key":"idea for","Fragments":["readability.","bit-and"]},{"Key":"2. Consider","Fragments":["refactoring"]},{"Key":"Consider refactoring","Fragments":["your"]},{"Key":"your tests","Fragments":["into","are"]},{"Key":"own functions","Fragments":["to","defns.","and"]},{"Key":"Wow, this","Fragments":["was"]},{"Key":"was weirdly","Fragments":["easy."]},{"Key":"nice functional","Fragments":["use","decomposition."]},{"Key":"functional use","Fragments":["of"]},{"Key":"of reduce.","Fragments":["From"]},{"Key":"reduce. From","Fragments":["a"]},{"Key":"functional point","Fragments":["of"]},{"Key":"of view,","Fragments":["I'd"]},{"Key":"view, I'd","Fragments":["consider"]},{"Key":"that `if`","Fragments":["returns","would"]},{"Key":"`if` returns","Fragments":["a"]},{"Key":"value to","Fragments":["push","each"]},{"Key":"push the","Fragments":["`if`"]},{"Key":"`if` into","Fragments":["the"]},{"Key":"the `merge`","Fragments":["call"]},{"Key":"`merge` call","Fragments":["(and,"]},{"Key":"call (and,","Fragments":["on"]},{"Key":"(and, on","Fragments":["second"]},{"Key":"on second","Fragments":["thought,"]},{"Key":"second thought,","Fragments":["replace"]},{"Key":"thought, replace","Fragments":["it"]},{"Key":"replace it","Fragments":["with","with"]},{"Key":"(fn [ret","Fragments":["word]"]},{"Key":"[ret word]","Fragments":["(merge"]},{"Key":"word] (merge","Fragments":["ret"]},{"Key":"(merge ret","Fragments":["{word"]},{"Key":"ret {word","Fragments":["(+"]},{"Key":"{word (+","Fragments":["1"]},{"Key":"1 (or","Fragments":["(ret"]},{"Key":"(or (ret","Fragments":["word)"]},{"Key":"(ret word)","Fragments":["0))}))"]},{"Key":"consider extracting","Fragments":["some"]},{"Key":"of `word-count`","Fragments":["capture"]},{"Key":"`word-count` capture","Fragments":["more"]},{"Key":"capture more","Fragments":["of"]},{"Key":"the (sub)intentions","Fragments":["of"]},{"Key":"(sub)intentions of","Fragments":["each"]},{"Key":"each phrase","Fragments":["of"]},{"Key":"phrase of","Fragments":["code."]},{"Key":"code. So","Fragments":["for"]},{"Key":"So for","Fragments":["example,"]},{"Key":"example, `(reduce","Fragments":["accumulate-counts"]},{"Key":"`(reduce accumulate-counts","Fragments":["{}"]},{"Key":"accumulate-counts {}","Fragments":["(generate-words"]},{"Key":"{} (generate-words","Fragments":["...))`."]},{"Key":"Agreed -","Fragments":["such"]},{"Key":"- such","Fragments":["discussions"]},{"Key":"the site.","Fragments":["Thanks"]},{"Key":"site. Thanks","Fragments":["for"]},{"Key":"your time","Fragments":["-","and"]},{"Key":"time -","Fragments":["I'm"]},{"Key":"I'm enjoying","Fragments":["it!"]},{"Key":"not convinced","Fragments":["about","that"]},{"Key":"convinced about","Fragments":["`any-ucase-chars`"]},{"Key":"about `any-ucase-chars`","Fragments":["because"]},{"Key":"`any-ucase-chars` because","Fragments":["when"]},{"Key":"because when","Fragments":["read"]},{"Key":"when read","Fragments":["on","here,"]},{"Key":"read on","Fragments":["its"]},{"Key":"its own,","Fragments":["it"]},{"Key":"own, it","Fragments":["doesn't"]},{"Key":"to emphasize","Fragments":["as"]},{"Key":"emphasize as","Fragments":["clearly"]},{"Key":"as clearly","Fragments":["that"]},{"Key":"clearly that","Fragments":["there"]},{"Key":"some for","Fragments":["the"]},{"Key":"the prompt","Fragments":["to"]},{"Key":"prompt to","Fragments":["be"]},{"Key":"a shout.","Fragments":["This","Then"]},{"Key":"shout. This","Fragments":["made"]},{"Key":"This made","Fragments":["me"]},{"Key":"the perceived","Fragments":["need"]},{"Key":"perceived need","Fragments":["for"]},{"Key":"some consistency","Fragments":["stems"]},{"Key":"consistency stems","Fragments":["from"]},{"Key":"stems from","Fragments":["a"]},{"Key":"a poor","Fragments":["choice","fit"]},{"Key":"poor choice","Fragments":["of"]},{"Key":"of predicates","Fragments":["-","and","matches","to"]},{"Key":"predicates -","Fragments":["maybe"]},{"Key":"maybe `some`","Fragments":["is"]},{"Key":"`some` is","Fragments":["not","more"]},{"Key":"quite expressive","Fragments":["enough"]},{"Key":"expressive enough","Fragments":["for"]},{"Key":"the lcase","Fragments":["condition."]},{"Key":"Looking at","Fragments":["the","it,","the","other's"]},{"Key":"the sequences","Fragments":["API","with","can"]},{"Key":"sequences API","Fragments":["again,"]},{"Key":"API again,","Fragments":["I"]},{"Key":"a `not-any?`","Fragments":["predicate,"]},{"Key":"`not-any?` predicate,","Fragments":["which"]},{"Key":"predicate, which","Fragments":["seems","hopefully"]},{"Key":"better fit","Fragments":["the"]},{"Key":"language I've","Fragments":["been"]},{"Key":"been trying","Fragments":["to","to","to"]},{"Key":"get towards.","Fragments":["This"]},{"Key":"towards. This","Fragments":["would"]},{"Key":"allow something","Fragments":["like"]},{"Key":"like `(and","Fragments":["contains-ucase-chars"]},{"Key":"`(and contains-ucase-chars","Fragments":["without-lcase-chars)`"]},{"Key":"contains-ucase-chars without-lcase-chars)`","Fragments":["where"]},{"Key":"without-lcase-chars)` where","Fragments":["`without-lcase-chars"]},{"Key":"where `without-lcase-chars","Fragments":["(not-any?"]},{"Key":"`without-lcase-chars (not-any?","Fragments":["#(Character/isLowerCase"]},{"Key":"(not-any? #(Character/isLowerCase","Fragments":["%)","%)"]},{"Key":"#(Character/isLowerCase %)","Fragments":["prompt)`.","s))"]},{"Key":" Err...","Fragments":["`(zip"]},{"Key":"Err... `(zip","Fragments":["x"]},{"Key":"`(zip x","Fragments":["y)`"]},{"Key":"x y)`","Fragments":["is","in","which"]},{"Key":"y)` is","Fragments":["spelled"]},{"Key":"is spelled","Fragments":["`(map"]},{"Key":"spelled `(map","Fragments":["vector"]},{"Key":"`(map vector","Fragments":["x","s1","a"]},{"Key":"vector x","Fragments":["y)`"]},{"Key":"y)` in","Fragments":["clojure."]},{"Key":"Yes, a","Fragments":["good"]},{"Key":"clojure had","Fragments":["`count-with`","a"]},{"Key":"had `count-with`","Fragments":["and"]},{"Key":"`count-with` and","Fragments":["`zip`,"]},{"Key":"and `zip`,","Fragments":["but"]},{"Key":"`zip`, but","Fragments":["apparently"]},{"Key":"but apparently","Fragments":["some"]},{"Key":"apparently some","Fragments":["assembly"]},{"Key":"some assembly","Fragments":["is"]},{"Key":"assembly is","Fragments":["required."]},{"Key":" @turner","Fragments":["thanks!"]},{"Key":"@turner thanks!","Fragments":["however,"]},{"Key":"thanks! however,","Fragments":["it"]},{"Key":"however, it","Fragments":["doesn't"]},{"Key":"much difference","Fragments":["here,"]},{"Key":"difference here,","Fragments":["does"]},{"Key":"here, does","Fragments":["it?"]},{"Key":" thanks","Fragments":["@andy!","for","for","for"]},{"Key":"way, do","Fragments":["you"]},{"Key":"suggestion for","Fragments":["\"dow\""]},{"Key":"for \"dow\"","Fragments":["(day-of-week),"]},{"Key":"\"dow\" (day-of-week),","Fragments":["\"pim\""]},{"Key":"(day-of-week), \"pim\"","Fragments":["(position-in-month\""]},{"Key":"\"pim\" (position-in-month\"","Fragments":["etc.?"]},{"Key":"(position-in-month\" etc.?","Fragments":["I'm"]},{"Key":"etc.? I'm","Fragments":["really"]},{"Key":"really bad","Fragments":["at","solution"]},{"Key":"at naming","Fragments":["variables."]},{"Key":" Ooo!","Fragments":["Thanks."]},{"Key":"Well, a","Fragments":["good"]},{"Key":"good reason","Fragments":["to","for","not"]},{"Key":"some indication","Fragments":["of"]},{"Key":"indication of","Fragments":["its"]},{"Key":"of its","Fragments":["meaning.","parameters.","intent.","behavior.","keys."]},{"Key":"its meaning.","Fragments":["It's"]},{"Key":"meaning. It's","Fragments":["not"]},{"Key":"necessarily clear","Fragments":["from"]},{"Key":"current code","Fragments":["or"]},{"Key":"code or","Fragments":["from"]},{"Key":"or from","Fragments":["what"]},{"Key":"from what","Fragments":["@hank"]},{"Key":"what @hank","Fragments":["is"]},{"Key":"@hank is","Fragments":["suggesting"]},{"Key":"is suggesting","Fragments":["*why*"]},{"Key":"suggesting *why*","Fragments":["you're"]},{"Key":"*why* you're","Fragments":["interested"]},{"Key":"you're interested","Fragments":["in","in","in"]},{"Key":"in equal","Fragments":["or"]},{"Key":"equal or","Fragments":["unequal"]},{"Key":"or unequal","Fragments":["pairs."]},{"Key":"unequal pairs.","Fragments":["So"]},{"Key":"pairs. So","Fragments":["maybe"]},{"Key":"So maybe","Fragments":["a"]},{"Key":"maybe a","Fragments":["name","hash","little","little"]},{"Key":"it clean","Fragments":["that"]},{"Key":"clean that","Fragments":["an","up."]},{"Key":"an unequal","Fragments":["pair"]},{"Key":"unequal pair","Fragments":["="]},{"Key":"pair =","Fragments":["a"]},{"Key":"= a","Fragments":["mutation?","b)`","b))`"]},{"Key":"at `not=`","Fragments":["for"]},{"Key":"`not=` for","Fragments":["this"]},{"Key":"this purpose","Fragments":[":-)"]},{"Key":"Well, the","Fragments":["name"]},{"Key":"name `hamming-distance`","Fragments":["unambiguously"]},{"Key":"`hamming-distance` unambiguously","Fragments":["states"]},{"Key":"unambiguously states","Fragments":["what"]},{"Key":"states what","Fragments":["the"]},{"Key":"function should","Fragments":["be","return"]},{"Key":"be doing,","Fragments":["so"]},{"Key":"doing, so","Fragments":["naming"]},{"Key":"so naming","Fragments":["the"]},{"Key":"the components","Fragments":["of"]},{"Key":"components of","Fragments":["such"]},{"Key":"simple operation","Fragments":["doesn't"]},{"Key":"operation doesn't","Fragments":["seem"]},{"Key":"that important","Fragments":["to"]},{"Key":"the **Refactor","Fragments":["Conditionals"]},{"Key":"**Refactor Conditionals","Fragments":["to"]},{"Key":"Conditionals to","Fragments":["Strategy"]},{"Key":"to Strategy","Fragments":["Pattern**"]},{"Key":"Strategy Pattern**","Fragments":["bonus"]},{"Key":"Pattern** bonus","Fragments":["credit"]},{"Key":"bonus credit","Fragments":["using"]},{"Key":"credit using","Fragments":["multimethods."]},{"Key":"using multimethods.","Fragments":["Basically"]},{"Key":"multimethods. Basically","Fragments":["instead"]},{"Key":"Basically instead","Fragments":["of:"]},{"Key":"(defn- next-count","Fragments":["[n]"]},{"Key":" (-","Fragments":["n"]},{"Key":"(- n","Fragments":["1)))","1))"]},{"Key":"(defmulti next-count","Fragments":["identity)"]},{"Key":" (defmethod","Fragments":["next-count","next-count"]},{"Key":"(defmethod next-count","Fragments":["0",":default"]},{"Key":"next-count 0","Fragments":["[_]"]},{"Key":"0 [_]","Fragments":["99)"]},{"Key":"next-count :default","Fragments":["[n]"]},{"Key":":default [n]","Fragments":["(-"]},{"Key":"[n] (-","Fragments":["n"]},{"Key":"wondering what","Fragments":["`defmulti`"]},{"Key":"what `defmulti`","Fragments":["and"]},{"Key":"`defmulti` and","Fragments":["`defmethod`"]},{"Key":"and `defmethod`","Fragments":["were"]},{"Key":"`defmethod` were","Fragments":["used"]},{"Key":"were used","Fragments":["for!","for"]},{"Key":"definitely think","Fragments":["the"]},{"Key":"statement in","Fragments":["this","the"]},{"Key":"this instance","Fragments":["is"]},{"Key":"instance is","Fragments":["much"]},{"Key":"can totally","Fragments":["see"]},{"Key":"totally see","Fragments":["how"]},{"Key":"how multimethods","Fragments":["could"]},{"Key":"multimethods could","Fragments":["lead"]},{"Key":"could lead","Fragments":["to"]},{"Key":"code. This","Fragments":["one"]},{"Key":"definitely going","Fragments":["in"]},{"Key":"One problem","Fragments":["with"]},{"Key":"the multimethod","Fragments":["approach"]},{"Key":"multimethod approach","Fragments":["though"]},{"Key":"approach though","Fragments":["is"]},{"Key":"though is","Fragments":["that"]},{"Key":"that my","Fragments":["non-public","first","solution"]},{"Key":"my non-public","Fragments":["methods"]},{"Key":"non-public methods","Fragments":["are"]},{"Key":"are now","Fragments":["public.","totally"]},{"Key":"now public.","Fragments":[":("]},{"Key":"detect a","Fragments":["digit,","`9`."]},{"Key":"a digit,","Fragments":["it"]},{"Key":"digit, it","Fragments":["shouldn't"]},{"Key":"it shouldn't","Fragments":["really"]},{"Key":"shouldn't really","Fragments":["be"]},{"Key":"really be","Fragments":["slower","necessary."]},{"Key":"be slower","Fragments":["to"]},{"Key":"slower to","Fragments":["detect"]},{"Key":"a `9`.","Fragments":["I"]},{"Key":"`9`. I","Fragments":["just"]},{"Key":"used `re-seq`","Fragments":["in","instead"]},{"Key":"`re-seq` in","Fragments":["my"]},{"Key":"my implementation.","Fragments":["Using"]},{"Key":"implementation. Using","Fragments":["`subs`"]},{"Key":"Using `subs`","Fragments":["is"]},{"Key":"`subs` is","Fragments":["probably"]},{"Key":"idiomatic than","Fragments":["treating","isQuestion)","`re-seq`"]},{"Key":"than treating","Fragments":["the"]},{"Key":"treating the","Fragments":["string"]},{"Key":"sequence for","Fragments":["`area-code`,"]},{"Key":"for `area-code`,","Fragments":["`prefix`,"]},{"Key":"`area-code`, `prefix`,","Fragments":["`line-no`."]},{"Key":"I'd really","Fragments":["like","appreciate","appreciate"]},{"Key":"`cond` statement","Fragments":["somehow","so","by"]},{"Key":"statement somehow","Fragments":["as"]},{"Key":"somehow as","Fragments":["it"]},{"Key":"making me","Fragments":["sad..."]},{"Key":"me sad...","Fragments":["but"]},{"Key":"sad... but","Fragments":["I"]},{"Key":"can't work","Fragments":["out"]},{"Key":"work out","Fragments":["how.","how"]},{"Key":"out how.","Fragments":["Anyone"]},{"Key":"how. Anyone","Fragments":["have"]},{"Key":"Anyone have","Fragments":["any"]},{"Key":" Calling","Fragments":["`build-finder`","`first`","`use`","`require`","`use`"]},{"Key":"Calling `build-finder`","Fragments":["manually"]},{"Key":"`build-finder` manually","Fragments":["multiple"]},{"Key":"manually multiple","Fragments":["times"]},{"Key":"multiple times","Fragments":["seems","on","if","can"]},{"Key":"times seems","Fragments":["weird"]},{"Key":"seems weird","Fragments":["to"]},{"Key":"me. Could","Fragments":["you"]},{"Key":"put it","Fragments":["inside","outside"]},{"Key":"it inside","Fragments":["`doseq`,","`anagram?`"]},{"Key":"inside `doseq`,","Fragments":["for"]},{"Key":"`doseq`, for","Fragments":["example?"]},{"Key":" Manually","Fragments":["incrementing"]},{"Key":"Manually incrementing","Fragments":["`s`"]},{"Key":"incrementing `s`","Fragments":["seems"]},{"Key":"`s` seems","Fragments":["too"]},{"Key":"seems too","Fragments":["hacky"]},{"Key":"too hacky","Fragments":["to"]},{"Key":"hacky to","Fragments":["me."]},{"Key":"me. You","Fragments":["could"]},{"Key":"write your","Fragments":["own","own"]},{"Key":"own power","Fragments":["function"]},{"Key":"power function","Fragments":["instead"]},{"Key":"using `java.lang.Math`.","Fragments":["It"]},{"Key":"`java.lang.Math`. It","Fragments":["helped"]},{"Key":"It helped","Fragments":["me","me","me"]},{"Key":"resolve this","Fragments":["issue."]},{"Key":"can optimise","Fragments":["`total`"]},{"Key":"optimise `total`","Fragments":["by"]},{"Key":"`total` by","Fragments":["calling"]},{"Key":"by calling","Fragments":["`square`","`valid?`)","\"valid?\""]},{"Key":"calling `square`","Fragments":["from"]},{"Key":"`square` from","Fragments":["inside"]},{"Key":"can't think","Fragments":["of"]},{"Key":"that cond.","Fragments":["Clojure"]},{"Key":"cond. Clojure","Fragments":["just"]},{"Key":"Clojure just","Fragments":["isn't"]},{"Key":"just isn't","Fragments":["one"]},{"Key":"isn't one","Fragments":["of"]},{"Key":"those languages","Fragments":["where"]},{"Key":"do everything","Fragments":["with","with"]},{"Key":"everything with","Fragments":["elegant","on"]},{"Key":"with elegant","Fragments":["pattern"]},{"Key":"elegant pattern","Fragments":["matching"]},{"Key":"I know!","Fragments":["Annoying,"]},{"Key":"know! Annoying,","Fragments":["isn't"]},{"Key":"Annoying, isn't","Fragments":["it"]},{"Key":"isn't it","Fragments":[":-)","?"]},{"Key":"On one","Fragments":["hand,"]},{"Key":"one hand,","Fragments":["you"]},{"Key":"hand, you","Fragments":["could","could"]},{"Key":"could always","Fragments":["write","use","make"]},{"Key":"always write","Fragments":["a"]},{"Key":"a macro","Fragments":["to","instead","and","to"]},{"Key":"you want.","Fragments":["On","Then,"]},{"Key":"want. On","Fragments":["the"]},{"Key":"language that","Fragments":["works","really"]},{"Key":"that works","Fragments":["the","very"]},{"Key":"want out","Fragments":["of"]},{"Key":"the box","Fragments":[":)"]},{"Key":"one downside","Fragments":["of"]},{"Key":"downside of","Fragments":["doing","doing","this"]},{"Key":"the exercises","Fragments":["in","that","that","I'd"]},{"Key":"exercises in","Fragments":["all"]},{"Key":"all these","Fragments":["different","occurrences."]},{"Key":"these different","Fragments":["languages"]},{"Key":"different languages","Fragments":["-"]},{"Key":"languages -","Fragments":["you"]},{"Key":"to really","Fragments":["like"]},{"Key":"the good","Fragments":["stuff","function"]},{"Key":"good stuff","Fragments":["from"]},{"Key":"from each","Fragments":["but","other.","other"]},{"Key":"each but","Fragments":["then"]},{"Key":"get frustrated","Fragments":["when"]},{"Key":"frustrated when","Fragments":["you're"]},{"Key":"different one","Fragments":["and"]},{"Key":"one and","Fragments":["it","one"]},{"Key":"have it.","Fragments":["Grrrr!"]},{"Key":"Not happy","Fragments":["with"]},{"Key":"with `new-robot-name`","Fragments":["but"]},{"Key":"`new-robot-name` but","Fragments":["it"]},{"Key":"job done.","Fragments":["Will"]},{"Key":"done. Will","Fragments":["try"]},{"Key":"Will try","Fragments":["to"]},{"Key":"DRY it","Fragments":["up"]},{"Key":" Unsure","Fragments":["about","about"]},{"Key":"Unsure about","Fragments":["usage","the"]},{"Key":"about usage","Fragments":["of"]},{"Key":"of `atom`","Fragments":["and"]},{"Key":"`atom` and","Fragments":["`reset!`-"]},{"Key":"and `reset!`-","Fragments":["is"]},{"Key":"`reset!`- is","Fragments":["it"]},{"Key":" Best","Fragments":["use","regards,","regards,","regards,","regards","regards"]},{"Key":"Best use","Fragments":["of"]},{"Key":"of list","Fragments":["comprehension"]},{"Key":"comprehension I've","Fragments":["seen"]},{"Key":"function inside","Fragments":["`filter`"]},{"Key":"inside `filter`","Fragments":["in"]},{"Key":"`filter` in","Fragments":["a"]},{"Key":"private method","Fragments":["for","than","that"]},{"Key":"The word","Fragments":["sorted"]},{"Key":"word sorted","Fragments":["is"]},{"Key":"sorted is","Fragments":["called","incorrect."]},{"Key":"called alphagram","Fragments":[","]},{"Key":"alphagram ,","Fragments":["maybe"]},{"Key":", maybe","Fragments":["it"]},{"Key":"name `p`","Fragments":["don´t"]},{"Key":"`p` don´t","Fragments":["say"]},{"Key":"fair amount","Fragments":["of"]},{"Key":"of repetition","Fragments":["in"]},{"Key":"in beer-line-2,","Fragments":["but"]},{"Key":"beer-line-2, but","Fragments":["I'm"]},{"Key":"that eliminating","Fragments":["that"]},{"Key":"eliminating that","Fragments":["would"]},{"Key":"the sacrifice","Fragments":["in"]},{"Key":"sacrifice in","Fragments":["readability."]},{"Key":" `reset!`","Fragments":["is"]},{"Key":"`reset!` is","Fragments":["suitable"]},{"Key":"is suitable","Fragments":["for"]},{"Key":"suitable for","Fragments":["situations"]},{"Key":"for situations","Fragments":["where","like"]},{"Key":"situations where","Fragments":["you"]},{"Key":"you set","Fragments":["a","the"]},{"Key":"set a","Fragments":["value"]},{"Key":"value which","Fragments":["is"]},{"Key":"not dependent","Fragments":["on"]},{"Key":"dependent on","Fragments":["the","the"]},{"Key":"current value","Fragments":["stored","of"]},{"Key":"value stored","Fragments":["in"]},{"Key":"the atom.","Fragments":["Although"]},{"Key":"atom. Although","Fragments":["your"]},{"Key":"Although your","Fragments":["map","`nucleotide-counts`"]},{"Key":"your map","Fragments":["representing","lookup."]},{"Key":"map representing","Fragments":["robot"]},{"Key":"representing robot","Fragments":["contains"]},{"Key":"robot contains","Fragments":["`:name`"]},{"Key":"contains `:name`","Fragments":["attribute,"]},{"Key":"`:name` attribute,","Fragments":["it's"]},{"Key":"attribute, it's","Fragments":["better"]},{"Key":"use `swap!`","Fragments":["in","with"]},{"Key":"`swap!` in","Fragments":["order"]},{"Key":"to preserve","Fragments":["atomicity","that","the"]},{"Key":"preserve atomicity","Fragments":["of"]},{"Key":"atomicity of","Fragments":["operation"]},{"Key":"of operation","Fragments":["even","is"]},{"Key":"operation even","Fragments":["when"]},{"Key":"even when","Fragments":["the"]},{"Key":"robot data","Fragments":["structure"]},{"Key":"Thanks @shane","Fragments":["for"]},{"Key":"@shane for","Fragments":["the"]},{"Key":"the comments.","Fragments":["Will","Defined"]},{"Key":"comments. Will","Fragments":["refactor"]},{"Key":"Will refactor","Fragments":["this."]},{"Key":"that `lowerA`","Fragments":["and"]},{"Key":"`lowerA` and","Fragments":["`canonicalA`","`canonicalA`"]},{"Key":"and `canonicalA`","Fragments":["will","just"]},{"Key":"`canonicalA` will","Fragments":["be"]},{"Key":"be computed","Fragments":["for"]},{"Key":"computed for","Fragments":["each"]},{"Key":"in candidates","Fragments":["when"]},{"Key":"candidates when","Fragments":["you"]},{"Key":"really only","Fragments":["need","two"]},{"Key":"it once.","Fragments":["Consider"]},{"Key":"once. Consider","Fragments":["making"]},{"Key":"making `anagram-of?`","Fragments":["take"]},{"Key":"`anagram-of?` take","Fragments":["one"]},{"Key":"it return","Fragments":["a","the","`true`"]},{"Key":"This last","Fragments":["version,"]},{"Key":"last version,","Fragments":["although","I"]},{"Key":"version, although","Fragments":["longer,"]},{"Key":"although longer,","Fragments":["doesn't"]},{"Key":"longer, doesn't","Fragments":["violate"]},{"Key":"doesn't violate","Fragments":["OCP."]},{"Key":"of selecting","Fragments":["the"]},{"Key":"selecting the","Fragments":["first"]},{"Key":"first non-nil","Fragments":["response"]},{"Key":"non-nil response","Fragments":["but"]},{"Key":"response but","Fragments":["with"]},{"Key":"my short","Fragments":["knowledge"]},{"Key":"short knowledge","Fragments":["of"]},{"Key":"Clojure API","Fragments":["that's"]},{"Key":"API that's","Fragments":["all"]},{"Key":"that's all","Fragments":["I"]},{"Key":"all I","Fragments":["could","wanted"]},{"Key":"There was","Fragments":["no","no"]},{"Key":"was no","Fragments":["need","actual"]},{"Key":"`cond` having","Fragments":["only"]},{"Key":"having only","Fragments":["two"]},{"Key":"`response-for` function:","Fragments":["it's"]},{"Key":"function: it's","Fragments":["super"]},{"Key":"it's super","Fragments":["clear."]},{"Key":"use Clojure's","Fragments":["[`blank?`](http://clojure.github.io/clojure/clojure.string-api.html#clojure.string/blank?)","`=`","`:pre`","[`cond`](http://clojuredocs.org/clojure_core/1.2.0/clojure.core/cond)."]},{"Key":"Clojure's [`blank?`](http://clojure.github.io/clojure/clojure.string-api.html#clojure.string/blank?)","Fragments":["function"]},{"Key":"[`blank?`](http://clojure.github.io/clojure/clojure.string-api.html#clojure.string/blank?) function","Fragments":["to"]},{"Key":"the [`upper-case`](http://clojure.github.io/clojure/clojure.string-api.html#clojure.string/upper-case)","Fragments":["function","function"]},{"Key":"[`upper-case`](http://clojure.github.io/clojure/clojure.string-api.html#clojure.string/upper-case) function","Fragments":["to","to"]},{"Key":"simplify `shouting?`","Fragments":["using","using"]},{"Key":"`shouting?` using","Fragments":["it","it"]},{"Key":"string against","Fragments":["the","the"]},{"Key":"bit by","Fragments":["removing","allowing"]},{"Key":"removing `(=","Fragments":["word-signature"]},{"Key":"`(= word-signature","Fragments":["(signature"]},{"Key":"word-signature (signature","Fragments":["%))`"]},{"Key":"(signature %))`","Fragments":["from"]},{"Key":"%))` from","Fragments":["`anagrams-for`"]},{"Key":"from `anagrams-for`","Fragments":["and"]},{"Key":"`anagrams-for` and","Fragments":["adding"]},{"Key":"and adding","Fragments":["that"]},{"Key":"adding that","Fragments":["check"]},{"Key":"that check","Fragments":["to","for"]},{"Key":"is admirably","Fragments":["concise,"]},{"Key":"admirably concise,","Fragments":["but"]},{"Key":"concise, but","Fragments":["the","we've","not"]},{"Key":"expressions don't","Fragments":["really"]},{"Key":"really tell","Fragments":["the"]},{"Key":"the 'story'","Fragments":["of"]},{"Key":"'story' of","Fragments":["what's"]},{"Key":"on. I","Fragments":["would"]},{"Key":"consider refactoring","Fragments":["those"]},{"Key":"refactoring those","Fragments":["into"]},{"Key":"those into","Fragments":["separate","simple"]},{"Key":"separate tests","Fragments":["with"]},{"Key":"tests with","Fragments":["more"]},{"Key":"like `yelling?`","Fragments":["and"]},{"Key":"and clear","Fragments":["the"]},{"Key":"the `anagrams-for`","Fragments":["function","function"]},{"Key":"`anagrams-for` function","Fragments":["is,","and"]},{"Key":"function is,","Fragments":["and"]},{"Key":"make `anagram-of?`","Fragments":["just"]},{"Key":"`anagram-of?` just","Fragments":["as","took"]},{"Key":"(ns anagram","Fragments":["(:require"]},{"Key":"anagram (:require","Fragments":["[clojure.string","[clojure.string"]},{"Key":"(defn lower-sorted","Fragments":["[a]"]},{"Key":"(let [lowerA","Fragments":["(lower-case"]},{"Key":"[lowerA (lower-case","Fragments":["a)]"]},{"Key":" [lowerA","Fragments":["(sort"]},{"Key":"[lowerA (sort","Fragments":["lowerA)]))"]},{"Key":"(defn anagram-of?","Fragments":["[[la"]},{"Key":"anagram-of? [[la","Fragments":["sa]"]},{"Key":"[[la sa]","Fragments":["b]"]},{"Key":"(let [[lb","Fragments":["sb]"]},{"Key":"[[lb sb]","Fragments":["(lower-sorted"]},{"Key":"sb] (lower-sorted","Fragments":["b)]"]},{"Key":"(not (=","Fragments":["la","(string/lower-case","\"Woah,","\"Whatever.\"","message","8","2","32768","9223372036854775808N","4","1","18446744073709551615N","2147483648","[3"]},{"Key":"(= la","Fragments":["lb))"]},{"Key":"la lb))","Fragments":["(="]},{"Key":"lb)) (=","Fragments":["sa"]},{"Key":"(= sa","Fragments":["sb))))"]},{"Key":"(defn anagrams-for","Fragments":["[word","[word","[word,"]},{"Key":"anagrams-for [word","Fragments":["candidates]","candidates]"]},{"Key":" (vec","Fragments":["(filter"]},{"Key":"(vec (filter","Fragments":["(partial"]},{"Key":"(filter (partial","Fragments":["anagram-of?","anagram?"]},{"Key":"(partial anagram-of?","Fragments":["(lower-sorted"]},{"Key":"anagram-of? (lower-sorted","Fragments":["word))"]},{"Key":"(lower-sorted word))","Fragments":["candidates)))"]},{"Key":" Comparison","Fragments":["with"]},{"Key":"Comparison with","Fragments":["uppercased"]},{"Key":"with uppercased","Fragments":["version"]},{"Key":"string won't","Fragments":["be"]},{"Key":"enough (we","Fragments":["still"]},{"Key":"(we still","Fragments":["would"]},{"Key":"still would","Fragments":["need"]},{"Key":"if string","Fragments":["has"]},{"Key":"string has","Fragments":["letters).","any"]},{"Key":"has letters).","Fragments":["So"]},{"Key":"letters). So","Fragments":["IMO"]},{"Key":"So IMO","Fragments":["it"]},{"Key":"IMO it","Fragments":["is"]},{"Key":"check explicitly","Fragments":["if"]},{"Key":"explicitly if","Fragments":["each"]},{"Key":"if each","Fragments":["letter","letter"]},{"Key":"each letter","Fragments":["is","has"]},{"Key":"letter is","Fragments":["uppercase","already"]},{"Key":"is uppercase","Fragments":["(as"]},{"Key":"uppercase (as","Fragments":["now)."]},{"Key":"Does its","Fragments":["job"]},{"Key":"its job","Fragments":["-"]},{"Key":"job -","Fragments":["but"]},{"Key":" Heh.","Fragments":["I"]},{"Key":"Heh. I","Fragments":["think"]},{"Key":"think `anagram-of?`","Fragments":["was"]},{"Key":"`anagram-of?` was","Fragments":["much"]},{"Key":"much simpler/clearer","Fragments":["in"]},{"Key":"simpler/clearer in","Fragments":["my"]},{"Key":"original iteration,","Fragments":["but"]},{"Key":"iteration, but","Fragments":["became"]},{"Key":"but became","Fragments":["more"]},{"Key":"became more","Fragments":["complicated"]},{"Key":"complicated when","Fragments":["I"]},{"Key":"I refactored","Fragments":["to","transform-char"]},{"Key":"to optimise","Fragments":["performance"]},{"Key":"optimise performance","Fragments":["(calculating"]},{"Key":"performance (calculating","Fragments":["`lowerA`"]},{"Key":"(calculating `lowerA`","Fragments":["and"]},{"Key":"`canonicalA` just","Fragments":["the"]},{"Key":"the once).","Fragments":["I"]},{"Key":"once). I","Fragments":["can't"]},{"Key":"can't see","Fragments":["how","the","where"]},{"Key":"achieve both","Fragments":["elegance"]},{"Key":"both elegance","Fragments":["and"]},{"Key":"elegance and","Fragments":["performance"]},{"Key":" `is-yelling?`","Fragments":["needs"]},{"Key":"`is-yelling?` needs","Fragments":["at"]},{"Key":"needs at","Fragments":["least"]},{"Key":"one uppercase","Fragments":["letter","letter."]},{"Key":"uppercase letter","Fragments":["to","that"]},{"Key":"letter to","Fragments":["be"]},{"Key":"be true.","Fragments":["It's"]},{"Key":"true. It's","Fragments":["probably"]},{"Key":"not ideal","Fragments":["to"]},{"Key":"ideal to","Fragments":["have"]},{"Key":"this only","Fragments":["work"]},{"Key":"only work","Fragments":["with"]},{"Key":"with ASCII,","Fragments":["it's"]},{"Key":"ASCII, it's","Fragments":["probably"]},{"Key":"probably better","Fragments":["to","written","spelled"]},{"Key":"use `\\p{javaLowerCase}`","Fragments":["and"]},{"Key":"`\\p{javaLowerCase}` and","Fragments":["`\\p{javaUpperCase}`"]},{"Key":"and `\\p{javaUpperCase}`","Fragments":["instead"]},{"Key":"`\\p{javaUpperCase}` instead","Fragments":["of"]},{"Key":"matching `[a-z]`","Fragments":["and"]},{"Key":"`[a-z]` and","Fragments":["`[A-Z]`."]},{"Key":" `(if","Fragments":["x","boolean"]},{"Key":"`(if x","Fragments":["true)`"]},{"Key":"x true)`","Fragments":["is"]},{"Key":"true)` is","Fragments":["probably"]},{"Key":"better written","Fragments":["as","as","as"]},{"Key":"as `(boolean","Fragments":["x)`."]},{"Key":"you structured","Fragments":["it"]},{"Key":"structured it","Fragments":["overall,"]},{"Key":"it overall,","Fragments":["but"]},{"Key":"overall, but","Fragments":["I"]},{"Key":"your `is-x?`","Fragments":["functions"]},{"Key":"`is-x?` functions","Fragments":["should"]},{"Key":"return `false`","Fragments":["if"]},{"Key":"`false` if","Fragments":["not"]},{"Key":"not `true`.","Fragments":["Obviously"]},{"Key":"`true`. Obviously","Fragments":["that"]},{"Key":"Obviously that","Fragments":["won't"]},{"Key":"that won't","Fragments":["change"]},{"Key":"won't change","Fragments":["the"]},{"Key":"way this","Fragments":["program"]},{"Key":"this program","Fragments":["executes,","at"]},{"Key":"program executes,","Fragments":["but"]},{"Key":"executes, but","Fragments":["it's"]},{"Key":"for `?`","Fragments":["functions.","I"]},{"Key":"This still","Fragments":["doesn't"]},{"Key":"still doesn't","Fragments":["check","seem"]},{"Key":"doesn't check","Fragments":["for"]},{"Key":"for at","Fragments":["least"]},{"Key":"one upper-case","Fragments":["character"]},{"Key":"upper-case character","Fragments":["in"]},{"Key":"character in","Fragments":["the"]},{"Key":"the `is-yelling?`","Fragments":["case."]},{"Key":"`is-yelling?` case.","Fragments":["\"!@#!@\""]},{"Key":"case. \"!@#!@\"","Fragments":["doesn't"]},{"Key":"\"!@#!@\" doesn't","Fragments":["count"]},{"Key":"as yelling","Fragments":["in"]},{"Key":"yelling in","Fragments":["some","general,"]},{"Key":"languages, is","Fragments":["clojure"]},{"Key":"is clojure","Fragments":["missing"]},{"Key":"clojure missing","Fragments":["a"]},{"Key":"and clean","Fragments":[",","and"]},{"Key":"clean ,","Fragments":["but"]},{"Key":", but","Fragments":["you","I"]},{"Key":"could refactorize","Fragments":["it"]},{"Key":"refactorize it","Fragments":["with"]},{"Key":"with `re-seq","Fragments":["\"#w+\"`"]},{"Key":"`re-seq \"#w+\"`","Fragments":["for"]},{"Key":"\"#w+\"` for","Fragments":["extract"]},{"Key":"for extract","Fragments":["only"]},{"Key":"extract only","Fragments":["words."]},{"Key":"Great tips","Fragments":["@vilma",","]},{"Key":"tips @vilma","Fragments":["thanks!"]},{"Key":"Oh, wow!","Fragments":["I"]},{"Key":"wow! I","Fragments":["didn't"]},{"Key":"about [`re-seq`](http://clojuredocs.org/clojure_core/clojure.core/re-seq).","Fragments":["Pretty"]},{"Key":"[`re-seq`](http://clojuredocs.org/clojure_core/clojure.core/re-seq). Pretty","Fragments":["useful!"]},{"Key":"Pretty useful!","Fragments":["And"]},{"Key":"useful! And","Fragments":["that"]},{"Key":"And that","Fragments":["makes"]},{"Key":"program even","Fragments":["shorter."]},{"Key":"even shorter.","Fragments":["Thanks!"]},{"Key":"initial implementation.","Fragments":["The"]},{"Key":"implementation. The","Fragments":["only"]},{"Key":"really bothers","Fragments":["me"]},{"Key":"bit is","Fragments":["the"]},{"Key":"the structural","Fragments":["where"]},{"Key":"structural where","Fragments":["every"]},{"Key":"where every","Fragments":["function"]},{"Key":"the implicit","Fragments":["set","equality."]},{"Key":"implicit set","Fragments":["is"]},{"Key":"set is","Fragments":["a","a"]},{"Key":"words as","Fragments":["the"]},{"Key":"+1 all","Fragments":["good."]},{"Key":"not certain","Fragments":["about"]},{"Key":"certain about","Fragments":["some"]},{"Key":"some hidden","Fragments":["solution"]},{"Key":"hidden solution","Fragments":["for"]},{"Key":"just cheated","Fragments":["using"]},{"Key":"cheated using","Fragments":["`clojure.string`'s"]},{"Key":"using `clojure.string`'s","Fragments":["`replace`."]},{"Key":"a stark","Fragments":["difference"]},{"Key":"stark difference","Fragments":["between"]},{"Key":"between version","Fragments":["1"]},{"Key":"version 1","Fragments":["and","for"]},{"Key":"1 and","Fragments":["this"]},{"Key":"this one,","Fragments":["and","feel"]},{"Key":"one, and","Fragments":["mostly"]},{"Key":"and mostly","Fragments":["it","used"]},{"Key":"mostly it","Fragments":["revolves"]},{"Key":"it revolves","Fragments":["around"]},{"Key":"revolves around","Fragments":["finding"]},{"Key":"around finding","Fragments":["that"]},{"Key":"finding that","Fragments":["there"]},{"Key":"of nice","Fragments":["clojure"]},{"Key":"nice clojure","Fragments":["built-in"]},{"Key":"clojure built-in","Fragments":["functions"]},{"Key":"built-in functions","Fragments":["for","to","that","in","for"]},{"Key":"this. I'm","Fragments":["having","actually","aware"]},{"Key":"I'm having","Fragments":["fun","a","the","trouble","trouble"]},{"Key":"having fun","Fragments":["with"]},{"Key":"fun with","Fragments":["it."]},{"Key":"Nice short","Fragments":["functions."]},{"Key":"I question","Fragments":["the"]},{"Key":"question the","Fragments":["usefulness"]},{"Key":"of pre-filtering","Fragments":["based"]},{"Key":"pre-filtering based","Fragments":["on"]},{"Key":"on `equal-length`,","Fragments":["as"]},{"Key":"`equal-length`, as","Fragments":["it's"]},{"Key":"it's implied","Fragments":["by"]},{"Key":"the later","Fragments":["`anagram?`"]},{"Key":"later `anagram?`","Fragments":["test."]},{"Key":"initially went","Fragments":["towards"]},{"Key":"went towards","Fragments":["trying"]},{"Key":"towards trying","Fragments":["to"]},{"Key":"problem into","Fragments":["little"]},{"Key":"into little","Fragments":["pieces,"]},{"Key":"little pieces,","Fragments":["where"]},{"Key":"pieces, where","Fragments":["I"]},{"Key":"find sentences","Fragments":["that"]},{"Key":"had certain","Fragments":["characteristics,"]},{"Key":"certain characteristics,","Fragments":["using"]},{"Key":"characteristics, using","Fragments":["'cond'"]},{"Key":"using 'cond'","Fragments":["to"]},{"Key":"'cond' to","Fragments":["determine"]},{"Key":"determine what","Fragments":["to"]},{"Key":"I then","Fragments":["decided","found"]},{"Key":"then decided","Fragments":["that"]},{"Key":"break up","Fragments":["the"]},{"Key":"the sentence","Fragments":["and","was,","is","contains","is"]},{"Key":"and identify","Fragments":["it's"]},{"Key":"identify it's","Fragments":["parts."]},{"Key":"it's parts.","Fragments":["Initially,"]},{"Key":"parts. Initially,","Fragments":["I"]},{"Key":"Initially, I","Fragments":["thought"]},{"Key":"could contain","Fragments":["a","`silence?`,"]},{"Key":"contain a","Fragments":["`set`","map"]},{"Key":"a `set`","Fragments":["of","of"]},{"Key":"`set` of","Fragments":["all","valid"]},{"Key":"the pieces","Fragments":["the"]},{"Key":"pieces the","Fragments":["sentence"]},{"Key":"sentence was,","Fragments":["like"]},{"Key":"was, like","Fragments":["whether"]},{"Key":"like whether","Fragments":["it"]},{"Key":"was `:all-caps`","Fragments":["or"]},{"Key":"`:all-caps` or","Fragments":["`:ends-in-question`,"]},{"Key":"or `:ends-in-question`,","Fragments":["but"]},{"Key":"`:ends-in-question`, but","Fragments":["found"]},{"Key":"but found","Fragments":["that"]},{"Key":"in having","Fragments":["to"]},{"Key":"set that","Fragments":["I"]},{"Key":"would mutate","Fragments":["over"]},{"Key":"mutate over","Fragments":["the"]},{"Key":"the course","Fragments":["of"]},{"Key":"course of","Fragments":["the"]},{"Key":" Eventually","Fragments":["I"]},{"Key":"Eventually I","Fragments":["figured"]},{"Key":"`let` binding","Fragments":["would","to"]},{"Key":"binding would","Fragments":["really"]},{"Key":"easier for","Fragments":["me"]},{"Key":"me anyway,","Fragments":["as"]},{"Key":"anyway, as","Fragments":["I"]},{"Key":"just store","Fragments":["the"]},{"Key":"store the","Fragments":["results","`convert_number`"]},{"Key":"results of","Fragments":["all","those.","finding","count"]},{"Key":"various bindings","Fragments":["and"]},{"Key":"bindings and","Fragments":["do"]},{"Key":"`cond` with","Fragments":["the","only","only","a"]},{"Key":"couple refactorings","Fragments":["and"]},{"Key":"refactorings and","Fragments":["simplifications"]},{"Key":"and simplifications","Fragments":["of"]},{"Key":"simplifications of","Fragments":["the"]},{"Key":"the many","Fragments":["types"]},{"Key":"many types","Fragments":["of"]},{"Key":"types of","Fragments":["conditions","lists,"]},{"Key":"of conditions","Fragments":["to","that"]},{"Key":"pass, I","Fragments":["settled"]},{"Key":"I settled","Fragments":["on","on"]},{"Key":"settled on","Fragments":["this","`word-count`,","`re-seq`"]},{"Key":"time being.","Fragments":["I"]},{"Key":"being. I","Fragments":["think"]},{"Key":"could Code","Fragments":["Golf"]},{"Key":"Code Golf","Fragments":["the"]},{"Key":"Golf the","Fragments":["thing"]},{"Key":"thing a","Fragments":["bit","macro,"]},{"Key":"bit more,","Fragments":["but"]},{"Key":"more, but","Fragments":["I","this"]},{"Key":"get too","Fragments":["much"]},{"Key":"more complicated.","Fragments":["I'm"]},{"Key":"complicated. I'm","Fragments":["still"]},{"Key":"still mulling","Fragments":["over"]},{"Key":"mulling over","Fragments":["how"]},{"Key":"over how","Fragments":["to"]},{"Key":"various regex","Fragments":["checks"]},{"Key":"regex checks","Fragments":["and"]},{"Key":"checks and","Fragments":["I'm"]},{"Key":"like `trim-stuff`,","Fragments":["but"]},{"Key":"`trim-stuff`, but","Fragments":["I"]},{"Key":"thought submitting","Fragments":["a"]},{"Key":"a working","Fragments":["solution"]},{"Key":"working solution","Fragments":["right"]},{"Key":"solution right","Fragments":["now"]},{"Key":"now would","Fragments":["make"]},{"Key":"I simplified","Fragments":["this"]},{"Key":"simplified this","Fragments":["a"]},{"Key":"bit when","Fragments":["I"]},{"Key":"found `clojure.string`","Fragments":["and"]},{"Key":"and found","Fragments":["that","that"]},{"Key":"didn't need","Fragments":["to","`reset!`,","to"]},{"Key":"to trim","Fragments":["out","its","as","the"]},{"Key":"trim out","Fragments":["any"]},{"Key":"out any","Fragments":["of"]},{"Key":"whitespace or","Fragments":["punctuation","comments"]},{"Key":"or punctuation","Fragments":["in"]},{"Key":"punctuation in","Fragments":["anything"]},{"Key":"anything other","Fragments":["than"]},{"Key":"the `is-blank`","Fragments":["check."]},{"Key":"It's longer","Fragments":["than"]},{"Key":"longer than","Fragments":["more","doing","the","I'd"]},{"Key":"than more","Fragments":["submissions"]},{"Key":"more submissions","Fragments":["I've"]},{"Key":"submissions I've","Fragments":["seen,"]},{"Key":"I've seen,","Fragments":["but"]},{"Key":"seen, but","Fragments":["I"]},{"Key":"it's clearer","Fragments":["to"]},{"Key":"understand every","Fragments":["piece"]},{"Key":"every piece","Fragments":["that"]},{"Key":"piece that","Fragments":["is"]},{"Key":"tested and","Fragments":["where"]},{"Key":"where that","Fragments":["fits.","first"]},{"Key":"seemed so","Fragments":["simple"]},{"Key":"and straightforward","Fragments":["that"]},{"Key":"straightforward that","Fragments":["I"]},{"Key":"it hard","Fragments":["to"]},{"Key":"justify adding","Fragments":["anything"]},{"Key":"adding anything","Fragments":["else."]},{"Key":" `(get","Fragments":["students"]},{"Key":"`(get students","Fragments":["number"]},{"Key":"students number","Fragments":["[])`"]},{"Key":"number [])`","Fragments":["is"]},{"Key":"[])` is","Fragments":["equivalent"]},{"Key":"to `(or","Fragments":["(get"]},{"Key":"`(or (get","Fragments":["students"]},{"Key":"(get students","Fragments":["number)"]},{"Key":"students number)","Fragments":["[])`."]},{"Key":"number) [])`.","Fragments":["You"]},{"Key":"[])`. You","Fragments":["can"]},{"Key":"use `(students","Fragments":["number"]},{"Key":"`(students number","Fragments":["[])`."]},{"Key":"shorten this","Fragments":["would","to"]},{"Key":"use `merge-with`","Fragments":["in"]},{"Key":"`merge-with` in","Fragments":["the"]},{"Key":"of `add`","Fragments":["instead"]},{"Key":"`add` instead","Fragments":["of"]},{"Key":"implement `sorted`,","Fragments":["instead"]},{"Key":"`sorted`, instead","Fragments":["of"]},{"Key":"having `add-name-to-grade`","Fragments":["behave"]},{"Key":"`add-name-to-grade` behave","Fragments":["differently"]},{"Key":"behave differently","Fragments":["depending"]},{"Key":"differently depending","Fragments":["on"]},{"Key":"In `random-robot-name`","Fragments":["you"]},{"Key":"`random-robot-name` you","Fragments":["could"]},{"Key":"could join","Fragments":["the"]},{"Key":"sequences with","Fragments":["`concat`","group-by!"]},{"Key":"with `concat`","Fragments":["and"]},{"Key":"`concat` and","Fragments":["use"]},{"Key":"one `apply","Fragments":["str`"]},{"Key":"using logic,","Fragments":["and"]},{"Key":"logic, and","Fragments":["it"]},{"Key":"any sort","Fragments":["of"]},{"Key":"of early","Fragments":["termination"]},{"Key":"early termination","Fragments":["either."]},{"Key":"termination either.","Fragments":["Why"]},{"Key":"either. Why","Fragments":["check"]},{"Key":"Why check","Fragments":["a"]},{"Key":"check a","Fragments":["multiple","new"]},{"Key":"a multiple","Fragments":["of","of"]},{"Key":"multiple of","Fragments":["100","4?"]},{"Key":"of 100","Fragments":["if"]},{"Key":"100 if","Fragments":["it's"]},{"Key":"not already","Fragments":["a"]},{"Key":"really common","Fragments":["clojure"]},{"Key":"common clojure","Fragments":["style"]},{"Key":"use commas","Fragments":["when"]},{"Key":"commas when","Fragments":["you"]},{"Key":"need them","Fragments":["(and"]},{"Key":"them (and","Fragments":["you"]},{"Key":"(and you","Fragments":["don't"]},{"Key":"really ever","Fragments":["need"]},{"Key":"ever need","Fragments":["them)."]},{"Key":"this sort","Fragments":["of","of","of"]},{"Key":"of implementation","Fragments":["is"]},{"Key":"are sorting","Fragments":["and"]},{"Key":"input `word`","Fragments":["for"]},{"Key":"`word` for","Fragments":["each"]},{"Key":"each candidate,","Fragments":["so"]},{"Key":"candidate, so","Fragments":["it's"]},{"Key":"probably about","Fragments":["twice"]},{"Key":"about twice","Fragments":["as"]},{"Key":"as slow","Fragments":["as"]},{"Key":"slow as","Fragments":["it"]},{"Key":"feedback @reilly.","Fragments":["Fixed"]},{"Key":"@reilly. Fixed","Fragments":["commas"]},{"Key":"Fixed commas","Fragments":["(new"]},{"Key":"commas (new","Fragments":["to"]},{"Key":"(new to","Fragments":["Clojure"]},{"Key":"Clojure ;-))","Fragments":["and"]},{"Key":";-)) and","Fragments":["tried"]},{"Key":"tried a","Fragments":["different","different","different"]},{"Key":"different approach","Fragments":["with"]},{"Key":"approach with","Fragments":["`frequencies`","macros"]},{"Key":"`frequencies` that","Fragments":["also"]},{"Key":"that also","Fragments":["works."]},{"Key":" Still","Fragments":["need","pretty","pretty","learning","this","getting","learning"]},{"Key":"Still need","Fragments":["to"]},{"Key":"lower-casing and","Fragments":["sorting"]},{"Key":"and sorting","Fragments":["of"]},{"Key":"every single","Fragments":["candidate."]},{"Key":"a sort","Fragments":["is","of","of"]},{"Key":"just fine","Fragments":["actually,","without"]},{"Key":"fine actually,","Fragments":["it"]},{"Key":"actually, it","Fragments":["tends"]},{"Key":"it tends","Fragments":["to"]},{"Key":"be faster","Fragments":["than","than","since"]},{"Key":"of use","Fragments":["case."]},{"Key":"Used a","Fragments":["couple","vector"]},{"Key":"couple lets","Fragments":["and"]},{"Key":"lets and","Fragments":["a"]},{"Key":"a high","Fragments":["order"]},{"Key":"high order","Fragments":["function"]},{"Key":"sort and","Fragments":["transform"]},{"Key":"and transform","Fragments":["to"]},{"Key":"transform to","Fragments":["lower"]},{"Key":"to lower","Fragments":["case","case"]},{"Key":"case the","Fragments":["input","name","`(remove-non-word-chars","choice"]},{"Key":"only once.","Fragments":["I","Great"]},{"Key":"once. I","Fragments":["also"]},{"Key":"also had","Fragments":["to","to"]},{"Key":"inline the","Fragments":["`same-characthers?`","string","`(parts"]},{"Key":"the `same-characthers?`","Fragments":["method."]},{"Key":"Despite being","Fragments":["faster"]},{"Key":"being faster","Fragments":["I"]},{"Key":"faster I","Fragments":["like"]},{"Key":"the \"slow\"","Fragments":["version"]},{"Key":"\"slow\" version","Fragments":["reads"]},{"Key":"version reads","Fragments":["more"]},{"Key":"reads more","Fragments":["than"]},{"Key":" @nico","Fragments":["It"]},{"Key":"@nico It","Fragments":["definitely"]},{"Key":"It definitely","Fragments":["is","makes"]},{"Key":"definitely is","Fragments":["more"]},{"Key":"complex than","Fragments":["the","it","plain"]},{"Key":"simple logic.","Fragments":["@nico"]},{"Key":"logic. @nico","Fragments":["and"]},{"Key":"@nico and","Fragments":["I"]},{"Key":"I specifically","Fragments":["were"]},{"Key":"specifically were","Fragments":["working"]},{"Key":"were working","Fragments":["on"]},{"Key":"different way","Fragments":["to","to","to"]},{"Key":"to approach","Fragments":["the"]},{"Key":"approach the","Fragments":["problem"]},{"Key":"of state","Fragments":["machine."]},{"Key":"love your","Fragments":["feedback","naming","solution"]},{"Key":"original submission","Fragments":["(#1)."]},{"Key":"a sign","Fragments":["that"]},{"Key":"different abstraction,","Fragments":["consider"]},{"Key":"abstraction, consider","Fragments":["having"]},{"Key":"having `anagram-of?`","Fragments":["work"]},{"Key":"`anagram-of?` work","Fragments":["in"]},{"Key":"of normalized","Fragments":["characters."]},{"Key":"normalized characters.","Fragments":["Also,"]},{"Key":"characters. Also,","Fragments":["you"]},{"Key":"want `characters`","Fragments":["to"]},{"Key":"`characters` to","Fragments":["return"]},{"Key":"to return","Fragments":["both","lists","a","a","nil","vectors","a","a","the","a"]},{"Key":"return both","Fragments":["the"]},{"Key":"both the","Fragments":["lower-cased","robot"]},{"Key":"the lower-cased","Fragments":["and"]},{"Key":"lower-cased and","Fragments":["the"]},{"Key":"sorted version","Fragments":["as"]},{"Key":"vector, as","Fragments":["it"]},{"Key":"compare a","Fragments":["case"]},{"Key":"normalized version","Fragments":["rather"]},{"Key":"version rather","Fragments":["than"]},{"Key":"A better","Fragments":["abstraction"]},{"Key":"better abstraction","Fragments":["is"]},{"Key":"probably to","Fragments":["implement"]},{"Key":"a [DFA](http://en.wikipedia.org/wiki/Deterministic_finite_automaton)","Fragments":["where"]},{"Key":"[DFA](http://en.wikipedia.org/wiki/Deterministic_finite_automaton) where","Fragments":["there"]},{"Key":"where there","Fragments":["are","is"]},{"Key":"are `:leap-year`","Fragments":["and"]},{"Key":"`:leap-year` and","Fragments":["`:not-leap-year`"]},{"Key":"and `:not-leap-year`","Fragments":["terminal"]},{"Key":"`:not-leap-year` terminal","Fragments":["states"]},{"Key":"terminal states","Fragments":["and"]},{"Key":"states and","Fragments":["one"]},{"Key":"one intermediary","Fragments":["state"]},{"Key":"intermediary state","Fragments":["for"]},{"Key":"state for","Fragments":["each","the"]},{"Key":"bit prettier","Fragments":["by"]},{"Key":"prettier by","Fragments":["defining","thinking"]},{"Key":"by defining","Fragments":["a"]},{"Key":"that closes","Fragments":["over"]},{"Key":"closes over","Fragments":["year"]},{"Key":"over year","Fragments":["and"]},{"Key":"year and","Fragments":["does","month,"]},{"Key":"and does","Fragments":["the"]},{"Key":"the factor","Fragments":["check"]},{"Key":"The solution","Fragments":["itself","is"]},{"Key":"solution itself","Fragments":["works,"]},{"Key":"itself works,","Fragments":["but"]},{"Key":"read up","Fragments":["on","on"]},{"Key":"the [Clojure","Fragments":["style","Cheat"]},{"Key":"[Clojure style","Fragments":["guide](https://github.com/bbatsov/clojure-style-guide)."]},{"Key":" Functions","Fragments":["should","that","like"]},{"Key":"Functions should","Fragments":["look"]},{"Key":"(defn foo","Fragments":["[]","[x]"]},{"Key":"char [98","Fragments":["97"]},{"Key":"[98 97","Fragments":["114])))"]},{"Key":" Notice","Fragments":["the","that"]},{"Key":"Notice the","Fragments":["argument"]},{"Key":"argument vector","Fragments":["comes","dropped"]},{"Key":"vector comes","Fragments":["immediately"]},{"Key":"comes immediately","Fragments":["after"]},{"Key":"as no","Fragments":["hanging"]},{"Key":"no hanging","Fragments":["parenthesis"]},{"Key":"hanging parenthesis","Fragments":["(LISP"]},{"Key":"parenthesis (LISP","Fragments":["taboo);"]},{"Key":"(LISP taboo);","Fragments":["most"]},{"Key":"taboo); most","Fragments":["text"]},{"Key":"most text","Fragments":["editors"]},{"Key":"text editors","Fragments":["can"]},{"Key":"editors can","Fragments":["highlight"]},{"Key":"can highlight","Fragments":["parenthesis"]},{"Key":"highlight parenthesis","Fragments":["in"]},{"Key":"parenthesis in","Fragments":["different"]},{"Key":"in different","Fragments":["colors"]},{"Key":"colors while","Fragments":["editing"]},{"Key":"while editing","Fragments":["LISP"]},{"Key":"editing LISP","Fragments":["so"]},{"Key":"LISP so","Fragments":["you"]},{"Key":"easily distinguish","Fragments":["between"]},{"Key":"distinguish between","Fragments":["them."]},{"Key":"You taught","Fragments":["me"]},{"Key":"taught me","Fragments":["something","that","something."]},{"Key":"me something","Fragments":["with"]},{"Key":"with `(condp","Fragments":["apply","apply"]},{"Key":"`(condp apply","Fragments":["[x]","[statement]"]},{"Key":"apply [x]","Fragments":["...)`"]},{"Key":"[x] ...)`","Fragments":["!"]},{"Key":"...)` !","Fragments":["Awesome"]},{"Key":"! Awesome","Fragments":["solution."]},{"Key":" Appreciate","Fragments":["the"]},{"Key":"Appreciate the","Fragments":["call"]},{"Key":"call on","Fragments":["the","line","the","sort.","the"]},{"Key":"the hanging","Fragments":["paren,","closing"]},{"Key":"hanging paren,","Fragments":["but"]},{"Key":"paren, but","Fragments":["the"]},{"Key":"style good","Fragments":["looks"]},{"Key":" like","Fragments":["this,"]},{"Key":"like this,","Fragments":["with","but"]},{"Key":"this, with","Fragments":["the"]},{"Key":"vector dropped","Fragments":["to"]},{"Key":"dropped to","Fragments":["the"]},{"Key":" (bar","Fragments":["x))","\"hello"]},{"Key":" cond","Fragments":["would"]},{"Key":"cond would","Fragments":["definitely","just"]},{"Key":"definitely help","Fragments":["with","with"]},{"Key":"the if-soup.","Fragments":["I"]},{"Key":"if-soup. I","Fragments":["think"]},{"Key":"intent would","Fragments":["also"]},{"Key":"clear if","Fragments":["you","it","they","done","character"]},{"Key":"you pulled","Fragments":["some"]},{"Key":"pulled some","Fragments":["of"]},{"Key":"your checks","Fragments":["out","in"]},{"Key":"into clearly","Fragments":["named"]},{"Key":"clearly named","Fragments":["functions."]},{"Key":"(and (=","Fragments":["(upper-case","phrase","(keify"]},{"Key":"(= (upper-case","Fragments":["msg)","phrase)","string)"]},{"Key":"(upper-case msg)","Fragments":["msg)"]},{"Key":"msg) msg)","Fragments":["(not="]},{"Key":"msg) (not=","Fragments":["(lower-case"]},{"Key":"(not= (lower-case","Fragments":["msg)"]},{"Key":"(lower-case msg)","Fragments":["msg)"]},{"Key":"were in","Fragments":["a","isolation."]},{"Key":"Pretty much","Fragments":["my","my"]},{"Key":"code. Feedback","Fragments":["and","and"]},{"Key":"Feedback and","Fragments":["suggestions","suggestions"]},{"Key":"and suggestions","Fragments":["very","very"]},{"Key":"suggestions very","Fragments":["welcomed!","welcomed!"]},{"Key":"Try use","Fragments":["defn"]},{"Key":"use defn","Fragments":["instead"]},{"Key":"defn instead","Fragments":["of","of"]},{"Key":"of (def","Fragments":["sth"]},{"Key":"(def sth","Fragments":["(fn"]},{"Key":"sth (fn","Fragments":["..."]},{"Key":"One function","Fragments":["to"]},{"Key":"it all!","Fragments":["But"]},{"Key":"all! But","Fragments":["what"]},{"Key":"But what","Fragments":["happens","about"]},{"Key":"we need","Fragments":["to","to","check","to"]},{"Key":"replace more","Fragments":["than"]},{"Key":"one nucleotide?","Fragments":["How"]},{"Key":"nucleotide? How","Fragments":["do"]},{"Key":"we address","Fragments":["that"]},{"Key":"address that","Fragments":["problem?"]},{"Key":"the double","Fragments":["call","call","negation,","negation","negation,"]},{"Key":"double call","Fragments":["to","to","to"]},{"Key":"to ```str```.","Fragments":["I"]},{"Key":"```str```. I","Fragments":["think"]},{"Key":"also noticed","Fragments":["that"]},{"Key":"of character","Fragments":["literals","that","counts."]},{"Key":"literals rather","Fragments":["than"]},{"Key":"map that","Fragments":["included"]},{"Key":"that included","Fragments":["the"]},{"Key":"included the","Fragments":["characters",":refer-clojure"]},{"Key":"characters as","Fragments":["strings."]},{"Key":"as strings.","Fragments":["How"]},{"Key":"strings. How","Fragments":["else"]},{"Key":"How else","Fragments":["could"]},{"Key":"could we","Fragments":["eliminate"]},{"Key":"we eliminate","Fragments":["the"]},{"Key":"eliminate the","Fragments":["double","use","`(reduce","use","call","alphabetic?"]},{"Key":"clojure.string/blank? =\u003e","Fragments":["str/blank?"]},{"Key":"I'd clear","Fragments":["up"]},{"Key":"up shout?","Fragments":["-\u003e"]},{"Key":"shout? -\u003e","Fragments":["to"]},{"Key":"-\u003e to","Fragments":["many"]},{"Key":"to many","Fragments":["phrase"]},{"Key":"many phrase","Fragments":["here"]},{"Key":"phrase here","Fragments":["and"]},{"Key":"here and","Fragments":["there.","usage"]},{"Key":"and there.","Fragments":["Dunno"]},{"Key":"there. Dunno","Fragments":["how"]},{"Key":"Dunno how","Fragments":["to"]},{"Key":"it right","Fragments":["away"]},{"Key":"right away","Fragments":["-"]},{"Key":"away -","Fragments":["I'm"]},{"Key":"now more","Fragments":["into","clojure-style"]},{"Key":"more into","Fragments":["Scala.","how"]},{"Key":" default-respnse","Fragments":["-\u003e"]},{"Key":"default-respnse -\u003e","Fragments":["default-respOnse"]},{"Key":" @cristopher","Fragments":["I"]},{"Key":"@cristopher I","Fragments":["will"]},{"Key":"fix respOnse","Fragments":["typo"]},{"Key":"respOnse typo","Fragments":["and"]},{"Key":"typo and","Fragments":["clojure.string"]},{"Key":"and clojure.string","Fragments":["in"]},{"Key":"clojure.string in","Fragments":["next","three"]},{"Key":"next iteration.","Fragments":["I","As"]},{"Key":"that shout?","Fragments":["is"]},{"Key":"shout? is","Fragments":["quite"]},{"Key":"quite long,","Fragments":["but"]},{"Key":"long, but","Fragments":["it"]},{"Key":"quite useful","Fragments":["when"]},{"Key":"useful when","Fragments":["(response-for","function"]},{"Key":"when (response-for","Fragments":["\"4?\")"]},{"Key":"(response-for \"4?\")","Fragments":["and"]},{"Key":"\"4?\") and","Fragments":["(response-for"]},{"Key":"and (response-for","Fragments":["\"1,"]},{"Key":"(response-for \"1,","Fragments":["2,"]},{"Key":"\"1, 2,","Fragments":["3\").","3\"))","3\""]},{"Key":"2, 3\").","Fragments":["Scala,"]},{"Key":"3\"). Scala,","Fragments":["you"]},{"Key":"Scala, you","Fragments":["say?"]},{"Key":"you say?","Fragments":["I"]},{"Key":"say? I","Fragments":["am"]},{"Key":"am waiting","Fragments":["for"]},{"Key":"submission in","Fragments":["Scala,"]},{"Key":"in Scala,","Fragments":["Clojure"]},{"Key":"Scala, Clojure","Fragments":["also"]},{"Key":"Clojure also","Fragments":[";)","makes"]},{"Key":" @miles","Fragments":["That's"]},{"Key":"@miles That's","Fragments":["an"]},{"Key":"an *interesting*","Fragments":["customer"]},{"Key":"*interesting* customer","Fragments":["if"]},{"Key":"customer if","Fragments":["they"]},{"Key":"can actually","Fragments":["change","be","just"]},{"Key":"actually change","Fragments":["the"]},{"Key":"the structure","Fragments":["of"]},{"Key":"good case","Fragments":["for","for"]},{"Key":"a piece","Fragments":["of"]},{"Key":"code into","Fragments":["account","at"]},{"Key":"and taking","Fragments":["it"]},{"Key":"as read","Fragments":["that"]},{"Key":"read that","Fragments":["the"]},{"Key":"requirements of","Fragments":["this","the","the"]},{"Key":"code are","Fragments":["unlikely"]},{"Key":"are unlikely","Fragments":["to"]},{"Key":"unlikely to","Fragments":["change"]},{"Key":"change that","Fragments":["much"]},{"Key":"least in","Fragments":["that"]},{"Key":"we did","Fragments":["want"]},{"Key":"did want","Fragments":["to"]},{"Key":"change more","Fragments":["than","than"]},{"Key":"one nucleotide","Fragments":["with"]},{"Key":"nucleotide with","Fragments":["another,"]},{"Key":"with another,","Fragments":["this"]},{"Key":"another, this","Fragments":["implementation"]},{"Key":"implementation makes","Fragments":["that"]},{"Key":"makes that","Fragments":["easy:","very"]},{"Key":" ```","Fragments":["clojure","clojure","clojure","clojure","clojure","clojure","clojure"]},{"Key":"(def dna-to-rna-map","Fragments":["{\"T\""]},{"Key":"dna-to-rna-map {\"T\"","Fragments":["\"U\""]},{"Key":"{\"T\" \"U\"","Fragments":["\"A\""]},{"Key":"\"U\" \"A\"","Fragments":["\"X\"})"]},{"Key":"(def nucleotide-to-replace","Fragments":["#\"[AT]\")"]},{"Key":"(str/replace dna","Fragments":["nucleotide-to-replace"]},{"Key":"dna nucleotide-to-replace","Fragments":["dna-to-rna-map))"]},{"Key":"The nice","Fragments":["part"]},{"Key":"nice part","Fragments":["about"]},{"Key":"is we","Fragments":["don't"]},{"Key":"change any","Fragments":["logic"]},{"Key":"any logic","Fragments":["in"]},{"Key":"the ```to-rna```","Fragments":["function.","function."]},{"Key":"you repeat","Fragments":["use"]},{"Key":"repeat use","Fragments":["of"]},{"Key":"of `except-self`","Fragments":["even"]},{"Key":"`except-self` even","Fragments":["though"]},{"Key":"though you've","Fragments":["made"]},{"Key":"you've made","Fragments":["a","the"]},{"Key":"binding with","Fragments":["already","the"]},{"Key":"with already","Fragments":["processed"]},{"Key":"already processed","Fragments":["list."]},{"Key":"processed list.","Fragments":["There's"]},{"Key":"list. There's","Fragments":["still"]},{"Key":"still overhead","Fragments":["in"]},{"Key":"overhead in","Fragments":["processing"]},{"Key":"in processing","Fragments":["the"]},{"Key":"the `target`","Fragments":["along"]},{"Key":"`target` along","Fragments":["with"]},{"Key":"more happening","Fragments":["in"]},{"Key":"happening in","Fragments":["the"]},{"Key":"```to-rna``` function.","Fragments":["I"]},{"Key":"the concise","Fragments":["nature"]},{"Key":"concise nature","Fragments":["of"]},{"Key":"second iteration.","Fragments":["Also","I"]},{"Key":"iteration. Also","Fragments":["remember"]},{"Key":"Also remember","Fragments":["that"]},{"Key":"that ```split```","Fragments":["and"]},{"Key":"and ```join```","Fragments":["are"]},{"Key":"```join``` are","Fragments":["inverses"]},{"Key":"are inverses","Fragments":["of"]},{"Key":"inverses of","Fragments":["each"]},{"Key":"each other.","Fragments":["In"]},{"Key":"other. In","Fragments":["this"]},{"Key":"problem, we","Fragments":["end"]},{"Key":"we end","Fragments":["up"]},{"Key":"functions when","Fragments":["we","possible."]},{"Key":"when we","Fragments":["could"]},{"Key":"we could","Fragments":["really"]},{"Key":"use one.","Fragments":["```replace```"]},{"Key":"one. ```replace```","Fragments":["does"]},{"Key":"```replace``` does","Fragments":["exactly"]},{"Key":"does exactly","Fragments":["what","what's","what","what","what"]},{"Key":"The logic","Fragments":["to","and","of"]},{"Key":"convert DNA","Fragments":["nucleotides"]},{"Key":"RNA nucleotides","Fragments":["is"]},{"Key":"nucleotides is","Fragments":["far"]},{"Key":"I carried","Fragments":["out"]},{"Key":"carried out","Fragments":["in"]},{"Key":"out in","Fragments":["the","to","many","two","a"]},{"Key":"liked the","Fragments":["simplicity","shape"]},{"Key":"we wanted","Fragments":["to"]},{"Key":"one nucleotide,","Fragments":["we"]},{"Key":"nucleotide, we","Fragments":["would"]},{"Key":"an extra","Fragments":["line","test","trailing","check,"]},{"Key":"extra line","Fragments":["of"]},{"Key":"the ```dna-nucleotide```","Fragments":["function"]},{"Key":"```dna-nucleotide``` function","Fragments":["for"]},{"Key":"nucleotide we","Fragments":["want"]},{"Key":"(defn dna-nucleotide","Fragments":["[rna-nucleotide]"]},{"Key":"(cond (=","Fragments":["rna-nucleotide"]},{"Key":"(= rna-nucleotide","Fragments":["\"T\")","\"A\")"]},{"Key":"rna-nucleotide \"T\")","Fragments":["\"U\""]},{"Key":"rna-nucleotide \"A\")","Fragments":["\"X\""]},{"Key":";; some","Fragments":["more"]},{"Key":"Using defn","Fragments":["instead"]},{"Key":"of def","Fragments":["as"]},{"Key":"def as","Fragments":["seban"]},{"Key":"as seban","Fragments":["suggested."]},{"Key":"The customer","Fragments":["has"]},{"Key":"customer has","Fragments":["just"]},{"Key":"has just","Fragments":["given"]},{"Key":"just given","Fragments":["you"]},{"Key":"given you","Fragments":["a"]},{"Key":"new set","Fragments":["of"]},{"Key":"\u003e Given","Fragments":["a"]},{"Key":"Given a","Fragments":["DNA"]},{"Key":"a DNA","Fragments":["strand,"]},{"Key":"DNA strand,","Fragments":["its"]},{"Key":"strand, its","Fragments":["transcribed"]},{"Key":"its transcribed","Fragments":["RNA"]},{"Key":"transcribed RNA","Fragments":["strand"]},{"Key":"RNA strand","Fragments":["is"]},{"Key":"strand is","Fragments":["formed"]},{"Key":"is formed","Fragments":["by"]},{"Key":"formed by","Fragments":["replacing"]},{"Key":"by replacing","Fragments":["all"]},{"Key":"replacing all","Fragments":["occurrences","occurrences","the"]},{"Key":"of thymidine","Fragments":["with","and"]},{"Key":"uracil **AND**","Fragments":["replacing"]},{"Key":"**AND** replacing","Fragments":["all"]},{"Key":"of cytosine","Fragments":["**C**"]},{"Key":"cytosine **C**","Fragments":["with"]},{"Key":"**C** with","Fragments":["a"]},{"Key":"new nucleotide","Fragments":["called"]},{"Key":"nucleotide called","Fragments":["mornine"]},{"Key":"called mornine","Fragments":["**M**."]},{"Key":"accept the","Fragments":["challenge?","`:else`"]},{"Key":"the challenge?","Fragments":["How"]},{"Key":"challenge? How","Fragments":["much"]},{"Key":"How much","Fragments":["of"]},{"Key":"implementation would","Fragments":["you"]},{"Key":" @orville,","Fragments":["I"]},{"Key":"@orville, I","Fragments":["forgot"]},{"Key":"mention the","Fragments":["customer"]},{"Key":"the customer","Fragments":["is"]},{"Key":"customer is","Fragments":["a"]},{"Key":"a mad","Fragments":["scientist."]},{"Key":"mad scientist.","Fragments":[";)"]},{"Key":"scientist. ;)","Fragments":["Good"]},{"Key":";) Good","Fragments":["point."]},{"Key":"point. It","Fragments":["was"]},{"Key":"an idea","Fragments":["to"]},{"Key":"encourage further","Fragments":["exploration"]},{"Key":"further exploration","Fragments":["in"]},{"Key":"exploration in","Fragments":["the"]},{"Key":" @betsy:","Fragments":["I","Ah,"]},{"Key":"@betsy: I","Fragments":["rather"]},{"Key":"rather like","Fragments":["```#()```","solving"]},{"Key":"like ```#()```","Fragments":["in"]},{"Key":"```#()``` in","Fragments":["my"]},{"Key":"on \"universe\";","Fragments":["I"]},{"Key":"\"universe\"; I","Fragments":["rather"]},{"Key":"like solving","Fragments":["a"]},{"Key":"solving a","Fragments":["problem"]},{"Key":"with poor","Fragments":["names,"]},{"Key":"poor names,","Fragments":["as"]},{"Key":"names, as","Fragments":["it"]},{"Key":"it gives","Fragments":["me","me","you"]},{"Key":"gives me","Fragments":["an","4"]},{"Key":"an opportunity","Fragments":["to","to"]},{"Key":"to solicit","Fragments":["names"]},{"Key":"solicit names","Fragments":["from"]},{"Key":"@betsy: Ah,","Fragments":["good"]},{"Key":"implicit equality.","Fragments":["I"]},{"Key":"equality. I","Fragments":["knew"]},{"Key":"I knew","Fragments":["I","that"]},{"Key":"knew I","Fragments":["was"]},{"Key":"was missing","Fragments":["something"]},{"Key":"It still","Fragments":["feels","passes"]},{"Key":"done (naming","Fragments":["aside,)"]},{"Key":"(naming aside,)","Fragments":["more"]},{"Key":"aside,) more","Fragments":["eloquently."]},{"Key":"more eloquently.","Fragments":["Time"]},{"Key":"eloquently. Time","Fragments":["to"]},{"Key":"Time to","Fragments":["woodshed..."]},{"Key":"first submission,","Fragments":["I"]},{"Key":"I intentionally","Fragments":["used"]},{"Key":"intentionally used","Fragments":["```use```"]},{"Key":"used ```use```","Fragments":["rather"]},{"Key":"```use``` rather","Fragments":["than"]},{"Key":"than ```require```,","Fragments":["which"]},{"Key":"```require```, which","Fragments":["ruffled"]},{"Key":"which ruffled","Fragments":["a"]},{"Key":"ruffled a","Fragments":["feather"]},{"Key":"a feather","Fragments":["due"]},{"Key":"feather due","Fragments":["to"]},{"Key":"due to","Fragments":["its","my","readability.","the","less","all","the","your"]},{"Key":"its deprecation.","Fragments":["I"]},{"Key":"deprecation. I","Fragments":["concede:"]},{"Key":"I concede:","Fragments":["I"]},{"Key":"concede: I","Fragments":["was"]},{"Key":"was seeing","Fragments":["how"]},{"Key":"of `defn`s","Fragments":["is"]},{"Key":"`defn`s is","Fragments":["important"]},{"Key":"important because","Fragments":["I"]},{"Key":"kept calling","Fragments":["`load-file`"]},{"Key":"calling `load-file`","Fragments":["on"]},{"Key":"`load-file` on","Fragments":["the"]},{"Key":"test while","Fragments":["staying"]},{"Key":"while staying","Fragments":["in"]},{"Key":"staying in","Fragments":["the"]},{"Key":"same repl.","Fragments":["Learned"]},{"Key":"repl. Learned","Fragments":["something."]},{"Key":"of `some`","Fragments":["and","is"]},{"Key":"`some` and","Fragments":["`not-any?`","`not-any?`","`not-any?`"]},{"Key":"and `not-any?`","Fragments":["makes","-","are"]},{"Key":"`not-any?` makes","Fragments":["that"]},{"Key":"very readable.","Fragments":["Nice!","But","Maybe"]},{"Key":"the ugliness","Fragments":["of"]},{"Key":"ugliness of","Fragments":["calling"]},{"Key":"java `toLowerCase`","Fragments":["method"]},{"Key":"`toLowerCase` method","Fragments":["if"]},{"Key":"method if","Fragments":["you"]},{"Key":"want by","Fragments":["importing"]},{"Key":"by importing","Fragments":["`clojure.string/lower-case`."]},{"Key":"And once","Fragments":["you"]},{"Key":"the lowercased,","Fragments":["tokenized"]},{"Key":"lowercased, tokenized","Fragments":["string,"]},{"Key":"tokenized string,","Fragments":["it"]},{"Key":"worth checking","Fragments":["out"]},{"Key":"checking out","Fragments":["`frequencies`"]},{"Key":"`frequencies` if","Fragments":["you","it's"]},{"Key":"basically want","Fragments":["Clojure"]},{"Key":"want Clojure","Fragments":["to"]},{"Key":"do almost","Fragments":["all"]},{"Key":"almost all","Fragments":["your"]},{"Key":"all your","Fragments":["work","parens","input!"]},{"Key":" Ohhh","Fragments":["I"]},{"Key":"Ohhh I","Fragments":["didn't"]},{"Key":"about frequencies.","Fragments":["It's"]},{"Key":"frequencies. It's","Fragments":["almost"]},{"Key":"exactly implemented","Fragments":["the"]},{"Key":"implemented the","Fragments":["way"]},{"Key":"good! Not","Fragments":["sure"]},{"Key":"much if","Fragments":["any"]},{"Key":"if any","Fragments":["difference,"]},{"Key":"any difference,","Fragments":["but"]},{"Key":"need parens","Fragments":["round","round"]},{"Key":"parens round","Fragments":["`frequencies`","`s/lower-case`"]},{"Key":"round `frequencies`","Fragments":["if"]},{"Key":"it's being","Fragments":["used"]},{"Key":"being used","Fragments":["in","in","as"]},{"Key":"macro like","Fragments":["this."]},{"Key":"this. And","Fragments":["if"]},{"Key":"And if","Fragments":["you"]},{"Key":"made `str`","Fragments":["the"]},{"Key":"`str` the","Fragments":["first"]},{"Key":"macro then","Fragments":["you"]},{"Key":"wouldn't need","Fragments":["parens","to","merge","`filter-words`"]},{"Key":"round `s/lower-case`","Fragments":["either."]},{"Key":"Also, this","Fragments":["isn't"]},{"Key":"isn't really","Fragments":["a","necessary"]},{"Key":"a nit,","Fragments":["just"]},{"Key":"nit, just","Fragments":["an"]},{"Key":"an alternative,","Fragments":["but"]},{"Key":"but `clojure.string`","Fragments":["has"]},{"Key":"`clojure.string` has","Fragments":["a"]},{"Key":"a `split`","Fragments":["method"]},{"Key":"`split` method","Fragments":["too"]},{"Key":"method too","Fragments":["(which"]},{"Key":"too (which","Fragments":["takes"]},{"Key":"(which takes","Fragments":["a"]},{"Key":"takes a","Fragments":["regex","responder","couple"]},{"Key":"the delimiter)","Fragments":["which"]},{"Key":"delimiter) which","Fragments":["you"]},{"Key":"use here","Fragments":["instead","that"]},{"Key":"here instead","Fragments":["of","of"]},{"Key":"of `re-seq`","Fragments":["if","directly"]},{"Key":"`re-seq` if","Fragments":["you"]},{"Key":"you wanted.","Fragments":["It's"]},{"Key":"wanted. It's","Fragments":["arguments"]},{"Key":"It's arguments","Fragments":["are"]},{"Key":"arguments are","Fragments":["in","on"]},{"Key":"different order","Fragments":["to"]},{"Key":"to `re-seq`","Fragments":["so"]},{"Key":"`re-seq` so","Fragments":["you'd"]},{"Key":"so you'd","Fragments":["have"]},{"Key":"you'd have","Fragments":["to","this"]},{"Key":"using `-\u003e`","Fragments":["instead","to"]},{"Key":"`-\u003e` instead","Fragments":["of"]},{"Key":"so glad","Fragments":["to"]},{"Key":"the ```frequencies```","Fragments":["function!","function?"]},{"Key":"```frequencies``` function!","Fragments":[":D"]},{"Key":"function! :D","Fragments":["I"]},{"Key":":D I","Fragments":["was"]},{"Key":"a recursive","Fragments":["way","function","solution?"]},{"Key":"recursive way","Fragments":["of"]},{"Key":"of handling","Fragments":["the"]},{"Key":"problem before","Fragments":["I"]},{"Key":"I stumbled","Fragments":["upon"]},{"Key":"stumbled upon","Fragments":["```frequencies```.","this"]},{"Key":"I somehow","Fragments":["missed"]},{"Key":"somehow missed","Fragments":["`clojure.string/split`."]},{"Key":"missed `clojure.string/split`.","Fragments":["I"]},{"Key":"`clojure.string/split`. I","Fragments":["think"]},{"Key":"does than","Fragments":["re-seq."]},{"Key":"than re-seq.","Fragments":["Again,"]},{"Key":"re-seq. Again,","Fragments":["thanks"]},{"Key":"Again, thanks","Fragments":["for"]},{"Key":"that `\\W`","Fragments":["was"]},{"Key":"`\\W` was","Fragments":["equivalent"]},{"Key":"was equivalent","Fragments":["to"]},{"Key":"to `[^\\w]`!","Fragments":["I've"]},{"Key":"`[^\\w]`! I've","Fragments":["updated"]},{"Key":"my solution","Fragments":["now","I","is","is","to","to","is","a","here:","at","to"]},{"Key":"solution now","Fragments":["as"]},{"Key":"now as","Fragments":["that"]},{"Key":"nicer regex","Fragments":["than"]},{"Key":"regex than","Fragments":["mine"]},{"Key":"than mine","Fragments":["-"]},{"Key":"mine -","Fragments":["thanks!","I'm"]},{"Key":"probably overkill","Fragments":["but"]},{"Key":"also separated","Fragments":["out"]},{"Key":"separated out","Fragments":["the","the"]},{"Key":"the splitting","Fragments":["of","into"]},{"Key":"splitting of","Fragments":["the"]},{"Key":"string into","Fragments":["words","a","a","a","seperate","a","a"]},{"Key":"into words","Fragments":["into","code"]},{"Key":"words into","Fragments":["its"]},{"Key":"own function,","Fragments":["because","makes"]},{"Key":"function, because","Fragments":["a)"]},{"Key":"because a)","Fragments":["it"]},{"Key":"a) it","Fragments":["felt"]},{"Key":"felt like","Fragments":["a"]},{"Key":"a distinct","Fragments":["piece"]},{"Key":"distinct piece","Fragments":["of"]},{"Key":"of functionality","Fragments":["that"]},{"Key":"functionality that","Fragments":["could"]},{"Key":"reused and","Fragments":["b)"]},{"Key":"b) it","Fragments":["could"]},{"Key":"make `word-count`","Fragments":["a"]},{"Key":"`word-count` a","Fragments":["bit"]},{"Key":"removing the","Fragments":["implementation","`seq`"]},{"Key":"implementation code","Fragments":["from"]},{"Key":"code from","Fragments":["it.","the"]},{"Key":"Using more","Fragments":["higher"]},{"Key":"more higher","Fragments":["order"]},{"Key":"to gain","Fragments":["readability."]},{"Key":" Simpler","Fragments":["than"]},{"Key":"Simpler than","Fragments":["the"]},{"Key":"4th submission","Fragments":["(I"]},{"Key":"submission (I","Fragments":["think)."]},{"Key":"(I think).","Fragments":["Decided"]},{"Key":"think). Decided","Fragments":["that"]},{"Key":"Decided that","Fragments":["the"]},{"Key":"the candidates","Fragments":["have"]},{"Key":"candidates have","Fragments":["to"]},{"Key":"be different","Fragments":["than"]},{"Key":"the definition","Fragments":["of","of","of","of","of","to","of","of"]},{"Key":"Hey, now","Fragments":["it"]},{"Key":"really better.","Fragments":["Did"]},{"Key":"better. Did","Fragments":["you"]},{"Key":"that require","Fragments":["can"]},{"Key":"require can","Fragments":["by"]},{"Key":"can by","Fragments":["combined"]},{"Key":"by combined","Fragments":["with"]},{"Key":"combined with","Fragments":[":as","[`vector`](http://clojuredocs.org/clojure_core/clojure.core/map#example_67)."]},{"Key":"with :as","Fragments":["option?"]},{"Key":":as option?","Fragments":["clojure.string"]},{"Key":"option? clojure.string","Fragments":["can"]},{"Key":"clojure.string can","Fragments":["be"]},{"Key":"be transformed","Fragments":["in"]},{"Key":"transformed in","Fragments":["handy"]},{"Key":"in handy","Fragments":["hsortcut","here!"]},{"Key":"handy hsortcut","Fragments":["cljstr,"]},{"Key":"hsortcut cljstr,","Fragments":["str,"]},{"Key":"cljstr, str,","Fragments":["or"]},{"Key":"str, or","Fragments":["whatever."]},{"Key":"or whatever.","Fragments":["I"]},{"Key":"whatever. I","Fragments":["belive"]},{"Key":"I belive","Fragments":["that"]},{"Key":"belive that","Fragments":["clojure.contrib"]},{"Key":"that clojure.contrib","Fragments":["is"]},{"Key":"clojure.contrib is","Fragments":["not"]},{"Key":"not necessary.","Fragments":["And"]},{"Key":"necessary. And","Fragments":["this"]},{"Key":"And this","Fragments":["if"]},{"Key":"if -","Fragments":["if","if."]},{"Key":"- if","Fragments":["-"]},{"Key":"- if.","Fragments":["Quite"]},{"Key":"if. Quite","Fragments":["scary"]},{"Key":"Quite scary","Fragments":["in"]},{"Key":"scary in","Fragments":["my"]},{"Key":"opinion ;).","Fragments":["I"]},{"Key":";). I","Fragments":["think"]},{"Key":"that cond","Fragments":["http://clojuredocs.org/clojure_core/clojure.core/cond"]},{"Key":"cond http://clojuredocs.org/clojure_core/clojure.core/cond","Fragments":["can"]},{"Key":"http://clojuredocs.org/clojure_core/clojure.core/cond can","Fragments":["help"]},{"Key":"bit overkill.","Fragments":["Though"]},{"Key":"overkill. Though","Fragments":["in"]},{"Key":"Though in","Fragments":["a","my"]},{"Key":"real program","Fragments":["I"]},{"Key":"program I","Fragments":["may"]},{"Key":"may probably","Fragments":["also"]},{"Key":"also split","Fragments":["like"]},{"Key":"split like","Fragments":["you"]},{"Key":"you did.","Fragments":["I"]},{"Key":"did. I","Fragments":["would"]},{"Key":"same length","Fragments":["as"]},{"Key":"length as","Fragments":["yours,"]},{"Key":"as yours,","Fragments":["but"]},{"Key":"yours, but","Fragments":["I've"]},{"Key":"made no","Fragments":["attempt"]},{"Key":"no attempt","Fragments":["whatsoever"]},{"Key":"attempt whatsoever","Fragments":["to"]},{"Key":"whatsoever to","Fragments":["reduce"]},{"Key":"between verses","Fragments":["where"]},{"Key":"verses where","Fragments":["`remaining`"]},{"Key":"where `remaining`","Fragments":["is"]},{"Key":"`remaining` is","Fragments":["less"]},{"Key":"than 3","Fragments":["-","seconds."]},{"Key":"3 -","Fragments":["are","Convert"]},{"Key":"- are","Fragments":["the","you"]},{"Key":"the benefits","Fragments":["of","were"]},{"Key":"benefits of","Fragments":["reducing"]},{"Key":"of reducing","Fragments":["duplication","function"]},{"Key":"reducing duplication","Fragments":["in","(which"]},{"Key":"case worth","Fragments":["the"]},{"Key":"extra complexity","Fragments":["and"]},{"Key":"complexity and","Fragments":["glue","make"]},{"Key":"and glue","Fragments":["code?"]},{"Key":"```frequencies``` function?","Fragments":["http://clojuredocs.org/clojure_core/clojure.core/frequencies"]},{"Key":"do better","Fragments":["here:","next"]},{"Key":"better here:","Fragments":["although"]},{"Key":"here: although","Fragments":["I"]},{"Key":"can dynamically","Fragments":[".get"]},{"Key":"dynamically .get","Fragments":["stuff"]},{"Key":".get stuff","Fragments":["from"]},{"Key":"the Calendar","Fragments":["object,","class","documentation"]},{"Key":"Calendar object,","Fragments":["I"]},{"Key":"object, I","Fragments":["can't"]},{"Key":"figure how","Fragments":["to"]},{"Key":"do dynamically","Fragments":[".set"]},{"Key":"dynamically .set","Fragments":["stuff."]},{"Key":".set stuff.","Fragments":["doto"]},{"Key":"stuff. doto","Fragments":["forces"]},{"Key":"doto forces","Fragments":["you"]},{"Key":"forces you","Fragments":["to"]},{"Key":"specify the","Fragments":["functions,"]},{"Key":"the functions,","Fragments":["and","but"]},{"Key":"and doseq","Fragments":["returns"]},{"Key":"doseq returns","Fragments":["nil"]},{"Key":"returns nil","Fragments":["not","(which","when"]},{"Key":"nil not","Fragments":["the"]},{"Key":"the mutated","Fragments":["object."]},{"Key":"mutated object.","Fragments":["Anyone"]},{"Key":"object. Anyone","Fragments":["willing"]},{"Key":"Anyone willing","Fragments":["to"]},{"Key":"cond is.","Fragments":["But"]},{"Key":"is. But","Fragments":["it"]},{"Key":"it definitely","Fragments":["increases"]},{"Key":"definitely increases","Fragments":["the"]},{"Key":"increases the","Fragments":["code"]},{"Key":"code written.","Fragments":["Did"]},{"Key":"written. Did","Fragments":["you"]},{"Key":"feel any","Fragments":["tension"]},{"Key":"any tension","Fragments":["about"]},{"Key":"tension about","Fragments":["that,"]},{"Key":"that, or","Fragments":["is"]},{"Key":"this usual","Fragments":["style"]},{"Key":"for you?","Fragments":["When"]},{"Key":"you? When","Fragments":["the"]},{"Key":"functions gets","Fragments":["astronomical"]},{"Key":"gets astronomical","Fragments":["how"]},{"Key":"astronomical how","Fragments":["do"]},{"Key":"how do","Fragments":["you","a"]},{"Key":"you organize","Fragments":["them?"]},{"Key":"organize them?","Fragments":["Or"]},{"Key":"them? Or","Fragments":["do"]},{"Key":"Does clojure","Fragments":["usually"]},{"Key":"clojure usually","Fragments":["not"]},{"Key":"not worry","Fragments":["about"]},{"Key":"about exporting","Fragments":["\"local\""]},{"Key":"exporting \"local\"","Fragments":["functions"]},{"Key":"\"local\" functions","Fragments":["in"]},{"Key":"a namespace?","Fragments":["Or"]},{"Key":"namespace? Or","Fragments":["did"]},{"Key":"Or did","Fragments":["you"]},{"Key":"just skip","Fragments":["that?"]},{"Key":"wasn't familiar","Fragments":["with","with"]},{"Key":"with \\p","Fragments":["in"]},{"Key":"\\p in","Fragments":["regexes."]},{"Key":"in regexes.","Fragments":["Cool."]},{"Key":"regexes. Cool.","Fragments":["Do"]},{"Key":"Cool. Do","Fragments":["you"]},{"Key":"than [A-Z]","Fragments":["and/or"]},{"Key":"[A-Z] and/or","Fragments":["is"]},{"Key":"and/or is","Fragments":["it"]},{"Key":"This exercise","Fragments":["was"]},{"Key":"exercise was","Fragments":["underwhelming.","submitted"]},{"Key":"was underwhelming.","Fragments":["I"]},{"Key":"underwhelming. I","Fragments":["thought"]},{"Key":"about checking","Fragments":["that"]},{"Key":"that input","Fragments":["is","is"]},{"Key":"valid DNA","Fragments":["and","before"]},{"Key":"and writing","Fragments":["tests"]},{"Key":"writing tests","Fragments":["to"]},{"Key":"that point,","Fragments":["but"]},{"Key":"that such","Fragments":["would"]},{"Key":"such would","Fragments":["be"]},{"Key":"a particularly","Fragments":["useful"]},{"Key":"particularly useful","Fragments":["thing","when"]},{"Key":"useful thing","Fragments":["to"]},{"Key":"do. Making","Fragments":["sure"]},{"Key":"Making sure","Fragments":["you've"]},{"Key":"sure you've","Fragments":["got"]},{"Key":"you've got","Fragments":["valid","a","some"]},{"Key":"got valid","Fragments":["DNA"]},{"Key":"DNA before","Fragments":["this"]},{"Key":"before this","Fragments":["point"]},{"Key":"this point","Fragments":["is","and"]},{"Key":"point is","Fragments":["the"]},{"Key":"other test","Fragments":["in"]},{"Key":"the system.","Fragments":["GIGO"]},{"Key":"Why did","Fragments":["you","my"]},{"Key":"you choose","Fragments":["to","to"]},{"Key":"to `(use","Fragments":["'clojure-string)`"]},{"Key":"`(use 'clojure-string)`","Fragments":["instead"]},{"Key":"'clojure-string)` instead","Fragments":["of"]},{"Key":"the dot","Fragments":["notation"]},{"Key":"dot notation","Fragments":["like"]},{"Key":"notation like","Fragments":["`(.upper-case"]},{"Key":"like `(.upper-case","Fragments":["msg)`?"]},{"Key":"The advantage","Fragments":["of"]},{"Key":"of \\p","Fragments":["is,"]},{"Key":"\\p is,","Fragments":["as"]},{"Key":"is, as","Fragments":["you"]},{"Key":"you said,","Fragments":["Unicode"]},{"Key":"said, Unicode","Fragments":["aware."]},{"Key":"Unicode aware.","Fragments":["It's"]},{"Key":"aware. It's","Fragments":["something"]},{"Key":"It's something","Fragments":["I've"]},{"Key":"something I've","Fragments":["learned"]},{"Key":"I've learned","Fragments":["while","what"]},{"Key":"learned while","Fragments":["doing"]},{"Key":"right, and","Fragments":["I"]},{"Key":"should export","Fragments":["the"]},{"Key":"export the","Fragments":["functions"]},{"Key":"a local","Fragments":["version","function","alias"]},{"Key":"local version","Fragments":["(using"]},{"Key":"version (using","Fragments":["`:require`"]},{"Key":"(using `:require`","Fragments":["I"]},{"Key":"`:require` I","Fragments":["believe)."]},{"Key":"I believe).","Fragments":["Otherwise"]},{"Key":"believe). Otherwise","Fragments":["they"]},{"Key":"Otherwise they","Fragments":["might"]},{"Key":"might bleed","Fragments":["over"]},{"Key":"bleed over","Fragments":["in"]},{"Key":"namespace, as","Fragments":["`clojure.string`"]},{"Key":"as `clojure.string`","Fragments":["does"]},{"Key":"`clojure.string` does","Fragments":["with"]},{"Key":"does with","Fragments":["the"]},{"Key":"the `replace`","Fragments":["method."]},{"Key":"`replace` method.","Fragments":["I"]},{"Key":"another point,","Fragments":["I"]},{"Key":"usually have","Fragments":["those"]},{"Key":"have those","Fragments":["helper"]},{"Key":"those helper","Fragments":["functions"]},{"Key":"defined as","Fragments":["a","a"]},{"Key":"a `let`,","Fragments":["since","it"]},{"Key":"`let`, since","Fragments":["they"]},{"Key":"are 'private'","Fragments":["to"]},{"Key":"'private' to","Fragments":["the"]},{"Key":"`response-for` method.","Fragments":["I"]},{"Key":"if that's","Fragments":["the","better"]},{"Key":"particularly happy","Fragments":["with","with","with"]},{"Key":"current solution.","Fragments":["I"]},{"Key":"can rework","Fragments":["it,"]},{"Key":"rework it,","Fragments":["so"]},{"Key":"it, so","Fragments":["will","I"]},{"Key":"so will","Fragments":["have"]},{"Key":"will have","Fragments":["to","to","a","it's","a"]},{"Key":"play a","Fragments":["bit"]},{"Key":"more with","Fragments":["it.","the"]},{"Key":"feedback! I","Fragments":["will"]},{"Key":"will try","Fragments":["to","one"]},{"Key":"to post","Fragments":["a"]},{"Key":"post a","Fragments":["new"]},{"Key":"a sorted,","Fragments":["lower-cased"]},{"Key":"sorted, lower-cased","Fragments":["word"]},{"Key":"lower-cased word","Fragments":["in"]},{"Key":"case you","Fragments":["wanted","could","don't","know"]},{"Key":"code. Have","Fragments":["a"]},{"Key":"Still pretty","Fragments":["much","much"]},{"Key":"same structure","Fragments":["as","as"]},{"Key":"structure as","Fragments":["the","the","is..."]},{"Key":"previous version.","Fragments":["Is","Is","Still"]},{"Key":"version. Is","Fragments":["this","this"]},{"Key":"this an","Fragments":["improvement,","improvement,"]},{"Key":"an improvement,","Fragments":["or","or","but"]},{"Key":"improvement, or","Fragments":["harder","harder"]},{"Key":"or harder","Fragments":["to","to"]},{"Key":"try having","Fragments":["a","a"]},{"Key":"of regexp","Fragments":["checks","checks"]},{"Key":"regexp checks","Fragments":["to","to"]},{"Key":"to response,","Fragments":["and","and"]},{"Key":"response, and","Fragments":["return","return"]},{"Key":"first that","Fragments":["matches.","matches."]},{"Key":"that matches.","Fragments":["Would","Would"]},{"Key":"matches. Would","Fragments":["that","that"]},{"Key":"Would that","Fragments":["be","be"]},{"Key":"be better,","Fragments":["or","or","just"]},{"Key":"better, or","Fragments":["more","more"]},{"Key":"To be","Fragments":["honest"]},{"Key":"first iteration","Fragments":["more,","is","to"]},{"Key":"iteration more,","Fragments":["but"]},{"Key":"good too.","Fragments":["I'm"]},{"Key":"too. I'm","Fragments":["not"]},{"Key":"an authority","Fragments":["on"]},{"Key":"authority on","Fragments":["what's"]},{"Key":"on what's","Fragments":["clojury"]},{"Key":"what's clojury","Fragments":["though"]},{"Key":"clojury though","Fragments":[":)"]},{"Key":"first iteration,","Fragments":["you","although"]},{"Key":"iteration, you","Fragments":["can"]},{"Key":"`defn-` rather","Fragments":["than","than"]},{"Key":"than `defn`","Fragments":["to","for"]},{"Key":"`defn` to","Fragments":["define","`def`"]},{"Key":"define things","Fragments":["at"]},{"Key":"level without","Fragments":["exporting"]},{"Key":"without exporting","Fragments":["them."]},{"Key":"How can","Fragments":["i"]},{"Key":"can i","Fragments":["use","pass","do"]},{"Key":"i use","Fragments":["assertion"]},{"Key":"use assertion","Fragments":["to"]},{"Key":"assertion to","Fragments":["check"]},{"Key":"actually thought","Fragments":["that"]},{"Key":"too clever","Fragments":["there.","and"]},{"Key":"clever there.","Fragments":["On"]},{"Key":"there. On","Fragments":["the"]},{"Key":"other hand","Fragments":["it"]},{"Key":"hand it","Fragments":["reads"]},{"Key":"reads quite","Fragments":["well"]},{"Key":"quite well","Fragments":["and"]},{"Key":"and has","Fragments":["less","too"]},{"Key":"has less","Fragments":["parens"]},{"Key":"less parens","Fragments":["than"]},{"Key":"parens than","Fragments":["the"]},{"Key":"make people","Fragments":["aware"]},{"Key":"people aware","Fragments":["of"]},{"Key":"about `defn-`.","Fragments":["Will"]},{"Key":"`defn-`. Will","Fragments":["definitely"]},{"Key":"Will definitely","Fragments":["keep"]},{"Key":"definitely keep","Fragments":["that"]},{"Key":"only confusing","Fragments":["part"]},{"Key":"confusing part","Fragments":["for"]},{"Key":"part for","Fragments":["me"]},{"Key":"me was","Fragments":["how","that"]},{"Key":"was how","Fragments":["to"]},{"Key":"best express","Fragments":["*ALL"]},{"Key":"express *ALL","Fragments":["CAPS*."]},{"Key":"*ALL CAPS*.","Fragments":["Some"]},{"Key":"CAPS*. Some","Fragments":["characters"]},{"Key":"Some characters","Fragments":["(e.g."]},{"Key":"characters (e.g.","Fragments":["`?`)"]},{"Key":"(e.g. `?`)","Fragments":["are"]},{"Key":"`?`) are","Fragments":["not"]},{"Key":"not considered","Fragments":["upper","upper"]},{"Key":"considered upper","Fragments":["case","case)"]},{"Key":"case by","Fragments":["`Character/isUpperCase`"]},{"Key":"by `Character/isUpperCase`","Fragments":["so"]},{"Key":"`Character/isUpperCase` so","Fragments":["an"]},{"Key":"so an","Fragments":["upper","`if`"]},{"Key":"an upper","Fragments":["case"]},{"Key":"case string","Fragments":["should"]},{"Key":"string should","Fragments":["have"]},{"Key":"have at","Fragments":["least"]},{"Key":"one *real*","Fragments":["upper"]},{"Key":"*real* upper","Fragments":["case"]},{"Key":"case letter","Fragments":["(`\"4?\"`"]},{"Key":"letter (`\"4?\"`","Fragments":["is"]},{"Key":"(`\"4?\"` is","Fragments":["not"]},{"Key":"upper case)","Fragments":["and"]},{"Key":"case) and","Fragments":["*no*"]},{"Key":"and *no*","Fragments":["lower"]},{"Key":"*no* lower","Fragments":["case"]},{"Key":"case letters.","Fragments":["I"]},{"Key":"letters. I","Fragments":["thought"]},{"Key":"of expressing","Fragments":["it"]},{"Key":"expressing it","Fragments":["like"]},{"Key":" (some","Fragments":["#(Character/isUpperCase","#(Character/isUpperCase","#(Character/isLetter","#{char}","#{char}","#{chr}"]},{"Key":"(some #(Character/isUpperCase","Fragments":["%)","%)"]},{"Key":"#(Character/isUpperCase %)","Fragments":["s)","s)","address)`.","address)`","f))","f))","f))","chars)))"]},{"Key":" (not-any?","Fragments":["#(Character/isLowerCase"]},{"Key":"the `not-any?`","Fragments":["function"]},{"Key":"`not-any?` function","Fragments":["may"]},{"Key":"function may","Fragments":["be","be","suit"]},{"Key":"be confusing","Fragments":["to"]},{"Key":"someone not","Fragments":["experienced"]},{"Key":"not experienced","Fragments":["with"]},{"Key":"experienced with","Fragments":["this"]},{"Key":"this style,","Fragments":["so"]},{"Key":"style, so","Fragments":["I"]},{"Key":"used this","Fragments":["option:","to"]},{"Key":"(= (str/upper-case","Fragments":["s)"]},{"Key":"(str/upper-case s)","Fragments":["s)))"]},{"Key":"first option,","Fragments":["but"]},{"Key":"option, but","Fragments":["I"]},{"Key":"Much improved","Fragments":["from"]},{"Key":"improved from","Fragments":["your"]},{"Key":"first submission.","Fragments":["Now"]},{"Key":"submission. Now","Fragments":["that"]},{"Key":"about ```defn```,","Fragments":["you"]},{"Key":"```defn```, you","Fragments":["could"]},{"Key":"take advantage","Fragments":["of","of","of","of","of","of"]},{"Key":"of ```defn-```","Fragments":["to"]},{"Key":"```defn-``` to","Fragments":["create"]},{"Key":"create private","Fragments":["version"]},{"Key":"private version","Fragments":["of"]},{"Key":"your internal","Fragments":["helper"]},{"Key":"internal helper","Fragments":["predicates."]},{"Key":" `question?`","Fragments":["is"]},{"Key":"is now","Fragments":["more","determined","hidden","impossible,"]},{"Key":"more clojure-style","Fragments":["and"]},{"Key":"clojure-style and","Fragments":["the"]},{"Key":"the characters-of","Fragments":["is"]},{"Key":"characters-of is","Fragments":["probably"]},{"Key":"readable. Also:","Fragments":["coding"]},{"Key":"Also: coding","Fragments":["style!"]},{"Key":"me, great","Fragments":["use"]},{"Key":"great use","Fragments":["of","of"]},{"Key":"the java.util.Calendar","Fragments":["to"]},{"Key":"java.util.Calendar to","Fragments":["do"]},{"Key":"do most","Fragments":["of","of"]},{"Key":"extract a","Fragments":["`teenth?`","function","single"]},{"Key":"a `teenth?`","Fragments":["method"]},{"Key":"`teenth?` method","Fragments":["from"]},{"Key":"method from","Fragments":["line"]},{"Key":"line 39,","Fragments":["if"]},{"Key":"39, if","Fragments":["you"]},{"Key":"wanted to.","Fragments":["Might"]},{"Key":"to. Might","Fragments":["look"]},{"Key":"Might look","Fragments":["nicer"]},{"Key":"look nicer","Fragments":["as","using"]},{"Key":"nicer as","Fragments":["something"]},{"Key":"as something","Fragments":["like","a","shorter"]},{"Key":"like `(first","Fragments":["(filter"]},{"Key":"`(first (filter","Fragments":["teenth?"]},{"Key":"(filter teenth?","Fragments":["...`."]},{"Key":"teenth? ...`.","Fragments":["But"]},{"Key":"...`. But","Fragments":["that's"]},{"Key":"just my","Fragments":["preference."]},{"Key":"first times","Fragments":["I"]},{"Key":"times I","Fragments":["code"]},{"Key":"I code","Fragments":["something"]},{"Key":"code something","Fragments":["in"]},{"Key":"clojure it","Fragments":["looks"]},{"Key":"really wordy","Fragments":["and"]},{"Key":"wordy and","Fragments":["messy"]},{"Key":"and messy","Fragments":["to"]},{"Key":"messy to","Fragments":["me"]},{"Key":"Two ways","Fragments":["to"]},{"Key":"do it.","Fragments":["I"]},{"Key":"getting the","Fragments":["right","macro","list","appropriate","first","benefit","newlines","words"]},{"Key":"right answer","Fragments":["than","is."]},{"Key":"answer than","Fragments":["simply"]},{"Key":"than simply","Fragments":["`(last"]},{"Key":"simply `(last","Fragments":["(....))`,"]},{"Key":"`(last (....))`,","Fragments":["but"]},{"Key":"(....))`, but","Fragments":["I'm"]},{"Key":"I'm coming","Fragments":["up","from"]},{"Key":"coming up","Fragments":["empty","with"]},{"Key":"up empty","Fragments":["with"]},{"Key":"empty with","Fragments":["alternative","`seq`."]},{"Key":"with alternative","Fragments":["ideas."]},{"Key":"up `transform-row`","Fragments":["using"]},{"Key":"`transform-row` using","Fragments":["`partial`"]},{"Key":"using `partial`","Fragments":["and","in"]},{"Key":"`partial` and","Fragments":["`comp`"]},{"Key":"and `comp`","Fragments":["but"]},{"Key":"`comp` but","Fragments":["unfortunately"]},{"Key":"but unfortunately","Fragments":["needed"]},{"Key":"unfortunately needed","Fragments":["the"]},{"Key":"letter (`%`)","Fragments":["to"]},{"Key":"(`%`) to","Fragments":["be"]},{"Key":"to `vector`","Fragments":["and"]},{"Key":"`vector` and","Fragments":["couldn't"]},{"Key":"and couldn't","Fragments":["work"]},{"Key":"couldn't work","Fragments":["out"]},{"Key":"Had a","Fragments":["google"]},{"Key":"google to","Fragments":["see"]},{"Key":"if clojure","Fragments":["had"]},{"Key":"a `swap`","Fragments":["or"]},{"Key":"`swap` or","Fragments":["`flip`"]},{"Key":"or `flip`","Fragments":["function"]},{"Key":"`flip` function","Fragments":["or"]},{"Key":"or similar","Fragments":["to"]},{"Key":"switch the","Fragments":["order"]},{"Key":"of arguments","Fragments":["but","-","using"]},{"Key":"arguments but","Fragments":["couldn't"]},{"Key":"it prettier","Fragments":["by"]},{"Key":"by thinking","Fragments":["about"]},{"Key":"checks are","Fragments":["made?"]},{"Key":"are made?","Fragments":["Would"]},{"Key":"made? Would","Fragments":["another"]},{"Key":"Would another","Fragments":["order"]},{"Key":"another order","Fragments":["make"]},{"Key":"order make","Fragments":["things"]},{"Key":"code feels","Fragments":["verbose."]},{"Key":"feels verbose.","Fragments":["I"]},{"Key":"verbose. I","Fragments":["have"]},{"Key":"this gut","Fragments":["feeling"]},{"Key":"gut feeling","Fragments":["that"]},{"Key":"feeling that","Fragments":["this"]},{"Key":"solved in","Fragments":["a","two","my"]},{"Key":"of things","Fragments":["that","I","I","that","that","that","you've"]},{"Key":"really not","Fragments":["happy"]},{"Key":"namespace issue","Fragments":["with"]},{"Key":"issue with","Fragments":["`count`."]},{"Key":"with `count`.","Fragments":["There's"]},{"Key":"`count`. There's","Fragments":["probably"]},{"Key":"There's probably","Fragments":["a"]},{"Key":"define `dna/count`","Fragments":["without"]},{"Key":"`dna/count` without","Fragments":["clashing"]},{"Key":"without clashing","Fragments":["with"]},{"Key":"clashing with","Fragments":["`clojure.core/count`,"]},{"Key":"with `clojure.core/count`,","Fragments":["but"]},{"Key":"`clojure.core/count`, but","Fragments":["I"]},{"Key":"figure it","Fragments":["out.","out,"]},{"Key":"tried writing","Fragments":["`nucleotide-counts`"]},{"Key":"writing `nucleotide-counts`","Fragments":["with"]},{"Key":"`nucleotide-counts` with","Fragments":["a"]},{"Key":"a `for`","Fragments":["comprehension,","comprehension.","comprehension","expr"]},{"Key":"`for` comprehension,","Fragments":["but"]},{"Key":"comprehension, but","Fragments":["for"]},{"Key":"reason it","Fragments":["didn't"]},{"Key":"work. I","Fragments":["really"]},{"Key":"really don't","Fragments":["like","know","know"]},{"Key":"how repetitive","Fragments":["it"]},{"Key":"repetitive it","Fragments":["is."]},{"Key":"3. In","Fragments":["fact,"]},{"Key":"fact, that","Fragments":["whole"]},{"Key":"that whole","Fragments":["function","problem","expression,"]},{"Key":"whole function","Fragments":["is"]},{"Key":"really smelly.","Fragments":["It's"]},{"Key":"smelly. It's","Fragments":["basically"]},{"Key":"It's basically","Fragments":["imperative"]},{"Key":"basically imperative","Fragments":["code,"]},{"Key":"imperative code,","Fragments":["which"]},{"Key":"code, which","Fragments":["is"]},{"Key":"good. I","Fragments":["like","have","would,","think"]},{"Key":"the decoupling","Fragments":["of"]},{"Key":"decoupling of","Fragments":["the"]},{"Key":"phrase string","Fragments":["from"]},{"Key":"the meaning","Fragments":["it"]},{"Key":"meaning it","Fragments":["represents."]},{"Key":"it represents.","Fragments":["I"]},{"Key":"represents. I","Fragments":["also"]},{"Key":"appropriate use","Fragments":["of"]},{"Key":"use Java","Fragments":["string","Calendar","but","function(`.endWith`)"]},{"Key":"string methods","Fragments":["instead","you","to"]},{"Key":"methods instead","Fragments":["of"]},{"Key":"of `last`","Fragments":["to"]},{"Key":"character -","Fragments":["that"]},{"Key":"that ought","Fragments":["to"]},{"Key":"ought to","Fragments":["be"]},{"Key":"much faster","Fragments":["for"]},{"Key":"faster for","Fragments":["long"]},{"Key":"for long","Fragments":["string."]},{"Key":"other small","Fragments":["nitpick:","thing,"]},{"Key":"small nitpick:","Fragments":["you"]},{"Key":"nitpick: you","Fragments":["might"]},{"Key":"using 2-space","Fragments":["indents"]},{"Key":"2-space indents","Fragments":["instead"]},{"Key":"indents instead","Fragments":["of"]},{"Key":"of 4.","Fragments":["2"]},{"Key":"4. 2","Fragments":["spaces"]},{"Key":"is conventional","Fragments":["in"]},{"Key":"conventional in","Fragments":["Clojure.","Clojure,"]},{"Key":" geofflane,","Fragments":["I"]},{"Key":"geofflane, I","Fragments":["fixed"]},{"Key":"fixed my","Fragments":["code"]},{"Key":"as your","Fragments":["advice.","alias..","use.","comments.","defn"]},{"Key":" hanmoi-choi,","Fragments":["about"]},{"Key":"hanmoi-choi, about","Fragments":["the"]},{"Key":"of `:pre`,","Fragments":["you"]},{"Key":"`:pre`, you","Fragments":["will"]},{"Key":"find more","Fragments":["information","idiomatic"]},{"Key":"more information","Fragments":["from","[here](http://blog.fogus.me/2009/12/21/clojures-pre-and-post/)"]},{"Key":"information from","Fragments":["http://clojure.org/special_forms"]},{"Key":"and unfortunately,","Fragments":["I"]},{"Key":"unfortunately, I","Fragments":["didn't"]},{"Key":"find how","Fragments":["to"]},{"Key":" Creating","Fragments":["word"]},{"Key":"Creating word","Fragments":["maps"]},{"Key":"word maps","Fragments":["is"]},{"Key":"maps is","Fragments":["not"]},{"Key":"bad idea,","Fragments":["but"]},{"Key":"idea, but","Fragments":["it's","I"]},{"Key":"this problem.","Fragments":["Check"]},{"Key":"problem. Check","Fragments":["out"]},{"Key":"out \"alphagrams\"","Fragments":["for"]},{"Key":"\"alphagrams\" for","Fragments":["a"]},{"Key":"can reference","Fragments":["`clojure.core/count`"]},{"Key":"reference `clojure.core/count`","Fragments":["explicitly"]},{"Key":"`clojure.core/count` explicitly","Fragments":["using,"]},{"Key":"explicitly using,","Fragments":["well,"]},{"Key":"using, well,","Fragments":["`clojure.core/count`"]},{"Key":"well, `clojure.core/count`","Fragments":[";-)"]},{"Key":"For `nucleotide-counts`,","Fragments":["have"]},{"Key":"`nucleotide-counts`, have","Fragments":["you"]},{"Key":"come across","Fragments":["the","let","that"]},{"Key":"The merge-with","Fragments":["is"]},{"Key":"merge-with is","Fragments":["probably"]},{"Key":"probably much","Fragments":["less"]},{"Key":"much less","Fragments":["efficient","was","functions"]},{"Key":"a loop","Fragments":["but","over","for","working"]},{"Key":"loop but","Fragments":["I"]},{"Key":"the clean","Fragments":["structure"]},{"Key":"clean structure","Fragments":["of"]},{"Key":"the map-reduce","Fragments":["solution."]},{"Key":"map-reduce solution.","Fragments":["I"]},{"Key":"really wish","Fragments":["clojure","I"]},{"Key":"wish clojure","Fragments":["supported"]},{"Key":"clojure supported","Fragments":["currying"]},{"Key":"supported currying","Fragments":[":("]},{"Key":"Yeah, this'd","Fragments":["work:"]},{"Key":"(comp (fn","Fragments":["[text]"]},{"Key":"(fn [text]","Fragments":["(string/split"]},{"Key":"[text] (string/split","Fragments":["text"]},{"Key":"(string/split text","Fragments":["#\"[^\\w]+\"))"]},{"Key":"but personally","Fragments":["I"]},{"Key":"personally I","Fragments":["find"]},{"Key":"it nicer","Fragments":["to","to"]},{"Key":"Clojure fns","Fragments":["that"]},{"Key":"fns that","Fragments":["explicitly"]},{"Key":"that explicitly","Fragments":["list"]},{"Key":"explicitly list","Fragments":["the"]},{"Key":"list the","Fragments":["arguments."]},{"Key":"the arguments.","Fragments":["I"]},{"Key":"arguments. I","Fragments":["actually"]},{"Key":"like writing","Fragments":["code"]},{"Key":"writing code","Fragments":["in"]},{"Key":"the point-free","Fragments":["style,"]},{"Key":"point-free style,","Fragments":["but"]},{"Key":"style, but","Fragments":["I","generally","it"]},{"Key":"harder time","Fragments":["reading"]},{"Key":"time reading","Fragments":["that"]},{"Key":"reading that","Fragments":["code"]},{"Key":"actually wouldn't","Fragments":["mind"]},{"Key":"wouldn't mind","Fragments":["it"]},{"Key":"mind it","Fragments":["in","too"]},{"Key":"case if","Fragments":["I"]},{"Key":"`partial` for","Fragments":["the"]},{"Key":"the `string/split`","Fragments":["bit,"]},{"Key":"`string/split` bit,","Fragments":["but"]},{"Key":"bit, but","Fragments":["since","it's","I"]},{"Key":"text is","Fragments":["the","based"]},{"Key":"argument there","Fragments":["it's"]},{"Key":"there it's","Fragments":["not"]},{"Key":"Agreed. You","Fragments":["could"]},{"Key":"could think","Fragments":["about"]},{"Key":"of `string/split`","Fragments":["so"]},{"Key":"`string/split` so","Fragments":["that"]},{"Key":"partial becomes","Fragments":["easier,"]},{"Key":"becomes easier,","Fragments":["but"]},{"Key":"easier, but","Fragments":["other"]},{"Key":"I discovered","Fragments":["the","[:refer-clojure","`frequencies`","later","it"]},{"Key":"discovered the","Fragments":["`frequencies`","\".add\""]},{"Key":"`frequencies` function","Fragments":["and","to","which","for","from"]},{"Key":"and used","Fragments":["that","cl-format","a","to"]},{"Key":"of counting","Fragments":["occurrences"]},{"Key":"counting occurrences","Fragments":["by"]},{"Key":"occurrences by","Fragments":["hand!"]},{"Key":"hash-map as","Fragments":["a"]},{"Key":"way your","Fragments":["`cond`"]},{"Key":"is structured,","Fragments":["I"]},{"Key":"structured, I","Fragments":["suppose"]},{"Key":"suppose you","Fragments":["don't"]},{"Key":"the not-silent","Fragments":["check"]},{"Key":"not-silent check","Fragments":["in"]},{"Key":"in `shout?`,","Fragments":["but"]},{"Key":"`shout?`, but","Fragments":["your"]},{"Key":"way seems","Fragments":["to"]},{"Key":"allow re-ordering","Fragments":["of"]},{"Key":"re-ordering of","Fragments":["the"]},{"Key":"`cond` branches,","Fragments":["which"]},{"Key":"branches, which","Fragments":["might"]},{"Key":"nice. Although","Fragments":["shouting"]},{"Key":"Although shouting","Fragments":["questions"]},{"Key":"shouting questions","Fragments":["would"]},{"Key":"questions would","Fragments":["need"]},{"Key":"be explicitly","Fragments":["handled"]},{"Key":"explicitly handled","Fragments":["for"]},{"Key":"handled for","Fragments":["this"]},{"Key":"be completely","Fragments":["the"]},{"Key":"completely the","Fragments":["case."]},{"Key":"the case.","Fragments":["I'd","Of"]},{"Key":"case. I'd","Fragments":["personally"]},{"Key":"personally leave","Fragments":["off"]},{"Key":"leave off","Fragments":["the"]},{"Key":"off the","Fragments":["`silence?`","page","top","factory","factory"]},{"Key":"the `silence?`","Fragments":["check"]},{"Key":"`silence?` check","Fragments":["within"]},{"Key":"check within","Fragments":["`shout?`"]},{"Key":"within `shout?`","Fragments":["until"]},{"Key":"`shout?` until","Fragments":["you"]},{"Key":"of benefit","Fragments":["in"]},{"Key":"benefit in","Fragments":["the"]},{"Key":"the `*-response`","Fragments":["vars,"]},{"Key":"`*-response` vars,","Fragments":["although","and"]},{"Key":"vars, although","Fragments":["they"]},{"Key":"although they","Fragments":["do","signify"]},{"Key":"they do","Fragments":["decouple"]},{"Key":"do decouple","Fragments":["the"]},{"Key":"decouple the","Fragments":["string"]},{"Key":"representation from","Fragments":["the","strings"]},{"Key":"function responsible","Fragments":["for"]},{"Key":"for routing","Fragments":["responses."]},{"Key":"routing responses.","Fragments":["For"]},{"Key":"responses. For","Fragments":["me,"]},{"Key":"For me,","Fragments":["they're"]},{"Key":"me, they're","Fragments":["not"]},{"Key":"pulling their","Fragments":["weight."]},{"Key":"It's typical","Fragments":["Clojure/Lisp"]},{"Key":"typical Clojure/Lisp","Fragments":["style"]},{"Key":"Clojure/Lisp style","Fragments":["to"]},{"Key":"to close","Fragments":["all","the","out"]},{"Key":"close all","Fragments":["your"]},{"Key":"your parens","Fragments":["(with"]},{"Key":"parens (with","Fragments":["no"]},{"Key":"(with no","Fragments":["extra"]},{"Key":"no extra","Fragments":["whitespace)"]},{"Key":"extra whitespace)","Fragments":["on"]},{"Key":"whitespace) on","Fragments":["the"]},{"Key":"with actual","Fragments":["expressions"]},{"Key":"actual expressions","Fragments":["on"]},{"Key":"expressions on","Fragments":["it,"]},{"Key":"on it,","Fragments":["and"]},{"Key":"also to","Fragments":["indent"]},{"Key":"indent 2","Fragments":["spaces"]},{"Key":"spaces on","Fragments":["the"]},{"Key":"line after","Fragments":["each"]},{"Key":"after each","Fragments":["`defn`.","other,"]},{"Key":"Clojure's `=`","Fragments":["function"]},{"Key":"function wherever","Fragments":["possible."]},{"Key":"wherever possible.","Fragments":["It's"]},{"Key":"possible. It's","Fragments":["based"]},{"Key":"It's based","Fragments":["on"]},{"Key":"on value,","Fragments":["but"]},{"Key":"but will","Fragments":["fall"]},{"Key":"fall back","Fragments":["to"]},{"Key":"to Java's","Fragments":["`.equals`"]},{"Key":"Java's `.equals`","Fragments":["when"]},{"Key":"`.equals` when","Fragments":["necessary."]},{"Key":"when necessary.","Fragments":["(`identical?`"]},{"Key":"necessary. (`identical?`","Fragments":["is"]},{"Key":"(`identical?` is","Fragments":["sort"]},{"Key":"is sort","Fragments":["of","of"]},{"Key":"Clojure version","Fragments":["of"]},{"Key":"Java's reference","Fragments":["equality"]},{"Key":"reference equality","Fragments":["check,"]},{"Key":"equality check,","Fragments":["and"]},{"Key":"check, and","Fragments":["is","because"]},{"Key":"and is","Fragments":["almost","shorter","shorter","treated","only","often","even"]},{"Key":"is almost","Fragments":["never","identical","certainly"]},{"Key":"almost never","Fragments":["used)."]},{"Key":"go ahead","Fragments":["and"]},{"Key":"ahead and","Fragments":["bump","also"]},{"Key":"and bump","Fragments":["`question?`"]},{"Key":"bump `question?`","Fragments":["and"]},{"Key":"`silence?` to","Fragments":["2","`blank?`."]},{"Key":"to 2","Fragments":["lines,"]},{"Key":"2 lines,","Fragments":["but"]},{"Key":"but they're","Fragments":["so"]},{"Key":"they're so","Fragments":["short"]},{"Key":"so short","Fragments":["that","and"]},{"Key":"short that","Fragments":["I"]},{"Key":"don't mind","Fragments":["it"]},{"Key":" @ambrose","Fragments":["There"]},{"Key":"@ambrose There","Fragments":["are"]},{"Key":"few big","Fragments":["wins"]},{"Key":"big wins","Fragments":["you"]},{"Key":"wins you","Fragments":["can"]},{"Key":"get without","Fragments":["too"]},{"Key":"without too","Fragments":["much"]},{"Key":"much work","Fragments":["that'll"]},{"Key":"work that'll","Fragments":["make"]},{"Key":"that'll make","Fragments":["this","it"]},{"Key":"- Prefer","Fragments":["`defn`"]},{"Key":"Prefer `defn`","Fragments":["to"]},{"Key":"to `def`","Fragments":["+"]},{"Key":"`def` +","Fragments":["`fn`."]},{"Key":"- Require","Fragments":["the"]},{"Key":"Require the","Fragments":["`clojure.string`"]},{"Key":"`ns` expression","Fragments":["at"]},{"Key":"expression at","Fragments":["the"]},{"Key":"top (see","Fragments":["[this"]},{"Key":"(see [this","Fragments":["blog"]},{"Key":"[this blog","Fragments":["post](http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html)"]},{"Key":"blog post](http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html)","Fragments":["for"]},{"Key":"post](http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html) for","Fragments":["pointers"]},{"Key":"for pointers","Fragments":["if"]},{"Key":"pointers if","Fragments":["you're"]},{"Key":"you're not","Fragments":["sure","yet","using"]},{"Key":"- Extract","Fragments":["functions"]},{"Key":"Extract functions","Fragments":["for"]},{"Key":"predicates you're","Fragments":["using"]},{"Key":"using in","Fragments":["`cond`"]},{"Key":"`cond` (especially","Fragments":["the"]},{"Key":"(especially the","Fragments":["big"]},{"Key":"the big","Fragments":["`and`","advantage","condition","advantages"]},{"Key":"big `and`","Fragments":["one)."]},{"Key":"one other","Fragments":["small"]},{"Key":"thing, on","Fragments":["the"]},{"Key":"the `(\u003e","Fragments":["(count","x"]},{"Key":"`(\u003e (count","Fragments":["(clojure.string/trim","x)"]},{"Key":"(count (clojure.string/trim","Fragments":["msg))"]},{"Key":"(clojure.string/trim msg))","Fragments":["0)`"]},{"Key":"msg)) 0)`","Fragments":["line:"]},{"Key":"0)` line:","Fragments":["am"]},{"Key":"line: am","Fragments":["I"]},{"Key":"I right","Fragments":["in"]},{"Key":"right in","Fragments":["thinking","your"]},{"Key":"in thinking","Fragments":["that's"]},{"Key":"thinking that's","Fragments":["trying"]},{"Key":"that's trying","Fragments":["to"]},{"Key":"is blank?","Fragments":["There's"]},{"Key":"blank? There's","Fragments":["a"]},{"Key":"`clojure.string` for","Fragments":["that"]},{"Key":"and compact.","Fragments":["My"]},{"Key":"compact. My","Fragments":["only"]},{"Key":"extracting functions","Fragments":["for"]},{"Key":"these predicates,","Fragments":["especially"]},{"Key":"predicates, especially","Fragments":["the"]},{"Key":"especially the","Fragments":["`and`","use","`silence`"]},{"Key":"the `and`","Fragments":["one","although"]},{"Key":"`and` one","Fragments":["which"]},{"Key":"one which","Fragments":["is"]},{"Key":"pretty long.","Fragments":["With"]},{"Key":"long. With","Fragments":["nice"]},{"Key":"With nice","Fragments":["names"]},{"Key":"nice names","Fragments":["for"]},{"Key":"for those,","Fragments":["it'd"]},{"Key":"those, it'd","Fragments":["be"]},{"Key":"it'd be","Fragments":["much"]},{"Key":"much quicker","Fragments":["and"]},{"Key":"quicker and","Fragments":["easier"]},{"Key":"and easier","Fragments":["to","to","to"]},{"Key":"understand this","Fragments":["function."]},{"Key":"Nice concise","Fragments":["solution,","solution,"]},{"Key":"concise solution,","Fragments":["especially","but"]},{"Key":"solution, especially","Fragments":["the"]},{"Key":"helper for","Fragments":["words."]},{"Key":"like words","Fragments":["could"]},{"Key":"words could","Fragments":["be"]},{"Key":"be beta","Fragments":["reduced"]},{"Key":"beta reduced","Fragments":["to"]},{"Key":"of split","Fragments":["and"]},{"Key":"split and","Fragments":["lower-case?"]},{"Key":"and lower-case?","Fragments":["What"]},{"Key":"lower-case? What","Fragments":["do"]},{"Key":"works and","Fragments":["it's"]},{"Key":"it's written","Fragments":["very"]},{"Key":"written very","Fragments":["clearly,"]},{"Key":"very clearly,","Fragments":["so"]},{"Key":"clearly, so","Fragments":["good"]},{"Key":"so good","Fragments":["job","and"]},{"Key":"job on","Fragments":["that."]},{"Key":"of suggestions,","Fragments":["though:"]},{"Key":"1. `a`","Fragments":["is"]},{"Key":"`a` is","Fragments":["an"]},{"Key":"of `b`","Fragments":["only"]},{"Key":"`b` only","Fragments":["if"]},{"Key":"only if","Fragments":["they","the"]},{"Key":"same word,","Fragments":["so"]},{"Key":"word, so","Fragments":["I","we","the"]},{"Key":"should check","Fragments":["for","out"]},{"Key":"in `anagram?`","Fragments":["rather"]},{"Key":"`anagram?` rather","Fragments":["than"]},{"Key":"2. Every","Fragments":["time"]},{"Key":"Every time","Fragments":["you"]},{"Key":"time you","Fragments":["check","boot","ask,"]},{"Key":"new word,","Fragments":["you're"]},{"Key":"word, you're","Fragments":["making"]},{"Key":"you're making","Fragments":["two","a"]},{"Key":"making two","Fragments":["maps"]},{"Key":"two maps","Fragments":["with"]},{"Key":"with letter","Fragments":["frequencies."]},{"Key":"letter frequencies.","Fragments":["Undoubtedly"]},{"Key":"frequencies. Undoubtedly","Fragments":["this"]},{"Key":"Undoubtedly this","Fragments":["works,"]},{"Key":"this works,","Fragments":["but"]},{"Key":"it's way","Fragments":["more"]},{"Key":"way more","Fragments":["overhead","elegant!","idiomatic"]},{"Key":"more overhead","Fragments":["than"]},{"Key":"overhead than","Fragments":["you"]},{"Key":"you need.","Fragments":["You","You"]},{"Key":"need. You","Fragments":["could","can"]},{"Key":"could eliminate","Fragments":["the","the"]},{"Key":"`frequencies` by","Fragments":["checking"]},{"Key":"checking alphagrams,","Fragments":["and"]},{"Key":"alphagrams, and","Fragments":["you"]},{"Key":"can whittle","Fragments":["this"]},{"Key":"whittle this","Fragments":["down"]},{"Key":"this down","Fragments":["to"]},{"Key":"to ~1","Fragments":["check"]},{"Key":"~1 check","Fragments":["per"]},{"Key":"check per","Fragments":["word"]},{"Key":"per word","Fragments":["by"]},{"Key":"word by","Fragments":["using"]},{"Key":" @brendon","Fragments":["thanks"]},{"Key":"@brendon thanks","Fragments":["for"]},{"Key":"1. Agree,","Fragments":["I"]},{"Key":"Agree, I","Fragments":["will"]},{"Key":"will move","Fragments":["the"]},{"Key":"the equality","Fragments":["check","of"]},{"Key":"equality check","Fragments":["to","to"]},{"Key":"2. Re:","Fragments":["alphagrams,"]},{"Key":"Re: alphagrams,","Fragments":["I"]},{"Key":"alphagrams, I","Fragments":["didn't"]},{"Key":"it meant","Fragments":["so"]},{"Key":"meant so","Fragments":["I"]},{"Key":"I googled","Fragments":["and"]},{"Key":"googled and","Fragments":["found"]},{"Key":"lexical sort","Fragments":["on"]},{"Key":"sort on","Fragments":["the"]},{"Key":"the word.","Fragments":["The"]},{"Key":"The best","Fragments":["sorting","way"]},{"Key":"best sorting","Fragments":["algorithms"]},{"Key":"sorting algorithms","Fragments":["are"]},{"Key":"algorithms are","Fragments":["`O(n"]},{"Key":"are `O(n","Fragments":["*"]},{"Key":"`O(n *","Fragments":["log"]},{"Key":"log n)`,","Fragments":["whereas"]},{"Key":"n)`, whereas","Fragments":["building"]},{"Key":"whereas building","Fragments":["a"]},{"Key":"building a","Fragments":["frequency"]},{"Key":"a frequency","Fragments":["map","map","map"]},{"Key":"frequency map","Fragments":["would","-","function","should",":))"]},{"Key":"map would","Fragments":["involve"]},{"Key":"would involve","Fragments":["one"]},{"Key":"involve one","Fragments":["pass"]},{"Key":"one pass","Fragments":["over"]},{"Key":"pass over","Fragments":["the"]},{"Key":"the word,","Fragments":["i.e","so","so"]},{"Key":"word, i.e","Fragments":["`O(n)`."]},{"Key":"i.e `O(n)`.","Fragments":["The"]},{"Key":"`O(n)`. The","Fragments":["tradeoff"]},{"Key":"The tradeoff","Fragments":["would"]},{"Key":"tradeoff would","Fragments":["be"]},{"Key":"of memory","Fragments":["used."]},{"Key":"memory used.","Fragments":["It"]},{"Key":"used. It","Fragments":["would"]},{"Key":"would scale","Fragments":["better"]},{"Key":"scale better","Fragments":["if"]},{"Key":"we had","Fragments":["large"]},{"Key":"had large","Fragments":["strings"]},{"Key":"large strings","Fragments":["(assuming"]},{"Key":"strings (assuming","Fragments":["memory"]},{"Key":"(assuming memory","Fragments":["is"]},{"Key":"memory is","Fragments":["plentiful)."]},{"Key":"is plentiful).","Fragments":["Isn't"]},{"Key":"plentiful). Isn't","Fragments":["it"]},{"Key":"Isn't it","Fragments":["better","possible"]},{"Key":"that case?","Fragments":["Or"]},{"Key":"case? Or","Fragments":["am","even"]},{"Key":"Or am","Fragments":["I"]},{"Key":"3. Also,","Fragments":["I"]},{"Key":"a closure","Fragments":["to"]},{"Key":"closure to","Fragments":["construct"]},{"Key":"to construct","Fragments":["the","an"]},{"Key":"construct the","Fragments":["frequencies/alphagram"]},{"Key":"the frequencies/alphagram","Fragments":["of"]},{"Key":"frequencies/alphagram of","Fragments":["the"]},{"Key":"argument would","Fragments":["save"]},{"Key":"would save","Fragments":["some"]},{"Key":"good. I'm","Fragments":["not"]},{"Key":"the `any-word-pattern`","Fragments":["binding"]},{"Key":"`any-word-pattern` binding","Fragments":["adds"]},{"Key":"binding adds","Fragments":["much"]},{"Key":"adds much","Fragments":["value."]},{"Key":"much value.","Fragments":["`\"\\w+\"`"]},{"Key":"value. `\"\\w+\"`","Fragments":["is"]},{"Key":"`\"\\w+\"` is","Fragments":["a"]},{"Key":"a fairly","Fragments":["common"]},{"Key":"fairly common","Fragments":["regex"]},{"Key":"common regex","Fragments":["understood"]},{"Key":"regex understood","Fragments":["by"]},{"Key":"understood by","Fragments":["most."]},{"Key":"by most.","Fragments":["What"]},{"Key":"most. What","Fragments":["do"]},{"Key":"am brand","Fragments":["new"]},{"Key":"Clojure as","Fragments":["of","lists,","a"]},{"Key":"as of","Fragments":["about"]},{"Key":"of about","Fragments":["3"]},{"Key":"about 3","Fragments":["days"]},{"Key":"3 days","Fragments":["ago,"]},{"Key":"days ago,","Fragments":["and"]},{"Key":"ago, and","Fragments":["I"]},{"Key":"haven't finished","Fragments":["reading"]},{"Key":"finished reading","Fragments":["a"]},{"Key":"the books","Fragments":["I"]},{"Key":"books I","Fragments":["picked"]},{"Key":"I picked","Fragments":["up"]},{"Key":"picked up","Fragments":["on","on"]},{"Key":"the subject,","Fragments":["but"]},{"Key":"subject, but","Fragments":["I've"]},{"Key":"I've got","Fragments":["just","just","unnecessary"]},{"Key":"got just","Fragments":["enough","two"]},{"Key":"enough knowledge","Fragments":["to"]},{"Key":"knowledge to","Fragments":["be"]},{"Key":"be dangerous.","Fragments":["So"]},{"Key":"dangerous. So","Fragments":["far,"]},{"Key":"So far,","Fragments":["it's","appending"]},{"Key":"far, it's","Fragments":["been"]},{"Key":"been an","Fragments":["eye-opening"]},{"Key":"an eye-opening","Fragments":["experience,"]},{"Key":"eye-opening experience,","Fragments":["to"]},{"Key":"experience, to","Fragments":["say"]},{"Key":"haven't yet","Fragments":["gone"]},{"Key":"yet gone","Fragments":["looking"]},{"Key":"gone looking","Fragments":["for"]},{"Key":"any guidelines","Fragments":["on"]},{"Key":"guidelines on","Fragments":["indentation,","style,"]},{"Key":"on indentation,","Fragments":["as"]},{"Key":"indentation, as","Fragments":["this"]},{"Key":"first Lisp","Fragments":["language,"]},{"Key":"Lisp language,","Fragments":["but"]},{"Key":"language, but","Fragments":["I"]},{"Key":"be remedying","Fragments":["that"]},{"Key":"remedying that","Fragments":["soon."]},{"Key":"you @lela","Fragments":["just"]},{"Key":"@lela just","Fragments":["submitted"]},{"Key":"just submitted","Fragments":["a","a"]},{"Key":"version what","Fragments":["do"]},{"Key":"The idea","Fragments":["of","is"]},{"Key":"of treating","Fragments":["strings"]},{"Key":"sequences was","Fragments":["driving"]},{"Key":"was driving","Fragments":["this"]},{"Key":"driving this","Fragments":["iteration."]},{"Key":"iteration. Thanks","Fragments":["to"]},{"Key":"to @winona","Fragments":["for"]},{"Key":"@winona for","Fragments":["the"]},{"Key":"* Not","Fragments":["so"]},{"Key":"so sure","Fragments":["about"]},{"Key":"of x","Fragments":["and"]},{"Key":"x and","Fragments":["alphax."]},{"Key":"* Docstrings","Fragments":["are"]},{"Key":"Docstrings are","Fragments":["hard."]},{"Key":"are hard.","Fragments":["What"]},{"Key":"hard. What","Fragments":["would"]},{"Key":"would a","Fragments":["good"]},{"Key":"good docstring","Fragments":["for"]},{"Key":"docstring for","Fragments":["this"]},{"Key":" simplified","Fragments":["generate","else","a"]},{"Key":"simplified generate","Fragments":["name"]},{"Key":"pull out","Fragments":["a","the"]},{"Key":"splitting words.","Fragments":["The"]},{"Key":"words. The","Fragments":["trade"]},{"Key":"off is","Fragments":["a"]},{"Key":"a longer","Fragments":["file"]},{"Key":"longer file","Fragments":["(but"]},{"Key":"file (but","Fragments":["hey,"]},{"Key":"(but hey,","Fragments":["we're"]},{"Key":"hey, we're","Fragments":["not"]},{"Key":"not code","Fragments":["golfing"]},{"Key":"code golfing","Fragments":["here),"]},{"Key":"golfing here),","Fragments":["but"]},{"Key":"here), but","Fragments":["I"]},{"Key":"it wins","Fragments":["a","for"]},{"Key":"wins a","Fragments":["lot"]},{"Key":"lot in","Fragments":["clarity","writing"]},{"Key":"in clarity","Fragments":["of"]},{"Key":"`word-count` function.","Fragments":["I"]},{"Key":"little undecided","Fragments":["on"]},{"Key":"undecided on","Fragments":["whether","whether"]},{"Key":"whether the","Fragments":["`lower-case`","input","argument","person"]},{"Key":"the `lower-case`","Fragments":["call"]},{"Key":"`lower-case` call","Fragments":["belongs"]},{"Key":"call belongs","Fragments":["in"]},{"Key":"belongs in","Fragments":["`words`"]},{"Key":"`words` or","Fragments":["`words-count`,"]},{"Key":"or `words-count`,","Fragments":["but"]},{"Key":"`words-count`, but","Fragments":["I"]},{"Key":"on `word-count`,","Fragments":["since"]},{"Key":"`word-count`, since","Fragments":["this"]},{"Key":"this leaves","Fragments":["`words`"]},{"Key":"leaves `words`","Fragments":["a"]},{"Key":"`words` a","Fragments":["more"]},{"Key":"purpose function","Fragments":["that"]},{"Key":"to dyba","Fragments":["for"]},{"Key":"dyba for","Fragments":["the"]},{"Key":"`frequencies` function.","Fragments":["Also,","Might",":)"]},{"Key":"Also, `\\s`","Fragments":["is"]},{"Key":"`\\s` is","Fragments":["a"]},{"Key":"a subset","Fragments":["of","of"]},{"Key":"subset of","Fragments":["`\\W`,","`#{A"]},{"Key":"of `\\W`,","Fragments":["so"]},{"Key":"`\\W`, so","Fragments":["your"]},{"Key":"regex could","Fragments":["be"]},{"Key":"be slimmed","Fragments":["down"]},{"Key":"slimmed down","Fragments":["to"]},{"Key":"For rev","Fragments":["2"]},{"Key":"rev 2","Fragments":["I"]},{"Key":"2 I","Fragments":["decided"]},{"Key":"a `frequencies`","Fragments":["instead","function.","function."]},{"Key":"of `sort`,","Fragments":["since"]},{"Key":"`sort`, since","Fragments":["it"]},{"Key":"it accomplishes","Fragments":["the"]},{"Key":"accomplishes the","Fragments":["same"]},{"Key":"same goal","Fragments":["in"]},{"Key":"goal in","Fragments":["O(n)"]},{"Key":"O(n) instead","Fragments":["of"]},{"Key":"log n).","Fragments":["Also,"]},{"Key":"n). Also,","Fragments":["made"]},{"Key":"Also, made","Fragments":["the"]},{"Key":"anagram checking","Fragments":["method"]},{"Key":"checking method","Fragments":["close"]},{"Key":"method close","Fragments":["the"]},{"Key":"the comparable","Fragments":["value","word","word)"]},{"Key":"comparable value","Fragments":["of"]},{"Key":"so we","Fragments":["avoid","can"]},{"Key":"we avoid","Fragments":["performing"]},{"Key":"avoid performing","Fragments":["that"]},{"Key":"performing that","Fragments":["computation"]},{"Key":"that computation","Fragments":["over"]},{"Key":"computation over","Fragments":["and"]},{"Key":"no actual","Fragments":["need"]},{"Key":"actual need","Fragments":["to"]},{"Key":"use multiple","Fragments":["dispatch,"]},{"Key":"multiple dispatch,","Fragments":["I"]},{"Key":"dispatch, I","Fragments":["could"]},{"Key":"could return","Fragments":["the"]},{"Key":"strings after","Fragments":["the"]},{"Key":"`cond`, the","Fragments":["reason"]},{"Key":"the reason","Fragments":["I","I","for","in","for"]},{"Key":"was because","Fragments":["I"]},{"Key":"never used","Fragments":["it"]},{"Key":"was divided","Fragments":["between"]},{"Key":"divided between","Fragments":["using"]},{"Key":"between using","Fragments":["a"]},{"Key":"`cond` and","Fragments":["`match`"]},{"Key":"and `match`","Fragments":["with"]},{"Key":"`match` with","Fragments":["`:guard`,"]},{"Key":"with `:guard`,","Fragments":["ultimately"]},{"Key":"`:guard`, ultimately","Fragments":["felt"]},{"Key":"ultimately felt","Fragments":["this"]},{"Key":"felt this","Fragments":["was"]},{"Key":"Hey Shane.","Fragments":["I"]},{"Key":"Shane. I","Fragments":["like"]},{"Key":"it! Nice","Fragments":["and"]},{"Key":"and easy","Fragments":["to","to","to","to"]},{"Key":"read. I'm","Fragments":["a"]},{"Key":"clojure newbie","Fragments":["myself"]},{"Key":"newbie myself","Fragments":["but"]},{"Key":"myself but","Fragments":["here"]},{"Key":"but here","Fragments":["a"]},{"Key":"the (:require","Fragments":["[library"]},{"Key":"(:require [library","Fragments":[":refer"]},{"Key":"[library :refer","Fragments":["[function]])"]},{"Key":":refer [function]])","Fragments":["pattern"]},{"Key":"[function]]) pattern","Fragments":["is"]},{"Key":"pattern is","Fragments":["preferred"]},{"Key":"over :use","Fragments":["and","by"]},{"Key":"and considered","Fragments":["more"]},{"Key":"idiomatic. I","Fragments":["remember","think"]},{"Key":"remember reading","Fragments":["this"]},{"Key":"this somewhere","Fragments":["but"]},{"Key":"somewhere but","Fragments":["can't"]},{"Key":"but can't","Fragments":["remember"]},{"Key":"remember now","Fragments":["where."]},{"Key":"now where.","Fragments":["Although"]},{"Key":"where. Although","Fragments":["it"]},{"Key":"isn't where","Fragments":["I"]},{"Key":"originally read","Fragments":["it"]},{"Key":"it you","Fragments":["might","can"]},{"Key":"at http://ryanverner.com/post/49884705761/clojure-require-vs-use","Fragments":["for"]},{"Key":"http://ryanverner.com/post/49884705761/clojure-require-vs-use for","Fragments":["an"]},{"Key":"an explanation","Fragments":["of","of"]},{"Key":"add docstrings","Fragments":["to"]},{"Key":"docstrings to","Fragments":["your"]},{"Key":"your functions.","Fragments":["These"]},{"Key":"functions. These","Fragments":["can"]},{"Key":"These can","Fragments":["then"]},{"Key":"then also","Fragments":["be"]},{"Key":"used by","Fragments":["tools","the"]},{"Key":"by tools","Fragments":["like"]},{"Key":"tools like","Fragments":["[Marginalia](http://gdeer81.github.io/marginalia/)"]},{"Key":"like [Marginalia](http://gdeer81.github.io/marginalia/)","Fragments":["to"]},{"Key":"[Marginalia](http://gdeer81.github.io/marginalia/) to","Fragments":["generate"]},{"Key":"generate documentation","Fragments":["for"]},{"Key":"In normalization","Fragments":["step,"]},{"Key":"normalization step,","Fragments":["`(sort"]},{"Key":"step, `(sort","Fragments":["(str/lower-case"]},{"Key":"(str/lower-case s))`","Fragments":["is"]},{"Key":"s))` is","Fragments":["enough."]},{"Key":"is enough.","Fragments":["No"]},{"Key":"enough. No","Fragments":["need"]},{"Key":"to assemble","Fragments":["it"]},{"Key":"assemble it","Fragments":["back"]},{"Key":"how clear","Fragments":["reading"]},{"Key":"clear reading","Fragments":["the"]},{"Key":"is but","Fragments":["I"]},{"Key":"* You've","Fragments":["used"]},{"Key":"You've used","Fragments":["blank?"]},{"Key":"used blank?","Fragments":["in"]},{"Key":"blank? in","Fragments":["screaming"]},{"Key":"in screaming","Fragments":["but"]},{"Key":"screaming but","Fragments":["why"]},{"Key":"why didn't","Fragments":["you"]},{"Key":"is preferable","Fragments":["to"]},{"Key":"include your","Fragments":["libraries"]},{"Key":"your libraries","Fragments":["in",":-)"]},{"Key":"namespace declaration,","Fragments":["so:"]},{"Key":"* Why","Fragments":["have"]},{"Key":"Why have","Fragments":["you"]},{"Key":"you enclosed","Fragments":["the"]},{"Key":"enclosed the","Fragments":["params"]},{"Key":"the params","Fragments":["inside"]},{"Key":"params inside","Fragments":["parantheses?"]},{"Key":"inside parantheses?","Fragments":["ie."]},{"Key":" rather","Fragments":["than"]},{"Key":"response-for [msg]","Fragments":["...)"]},{"Key":"of `(into","Fragments":["[]"]},{"Key":"`(into []","Fragments":["(sort-by"]},{"Key":"[] (sort-by","Fragments":["identity"]},{"Key":"(sort-by identity","Fragments":["...))`,"]},{"Key":"identity ...))`,","Fragments":["a"]},{"Key":"...))`, a","Fragments":["simple"]},{"Key":"simple `(vec","Fragments":["(sort"]},{"Key":"`(vec (sort","Fragments":["...))`"]},{"Key":"(sort ...))`","Fragments":["would"]},{"Key":"...))` would","Fragments":["suffice."]},{"Key":" Started","Fragments":["out"]},{"Key":"Started out","Fragments":["with"]},{"Key":"a concrete","Fragments":["implementation","implementation","collection","example"]},{"Key":"of `combine-map-with`","Fragments":["function"]},{"Key":"`combine-map-with` function","Fragments":["in"]},{"Key":"let inside","Fragments":["`word-count`."]},{"Key":"inside `word-count`.","Fragments":["Figured"]},{"Key":"`word-count`. Figured","Fragments":["refactoring"]},{"Key":"Figured refactoring","Fragments":["that"]},{"Key":"refactoring that","Fragments":["out"]},{"Key":"out would","Fragments":["make"]},{"Key":"understand. Then","Fragments":["went"]},{"Key":"Then went","Fragments":["the"]},{"Key":"went the","Fragments":["next","route","regex"]},{"Key":"next step","Fragments":["to"]},{"Key":"step to","Fragments":["make","making"]},{"Key":"that more","Fragments":["generic"]},{"Key":"generic with","Fragments":["the"]},{"Key":"application for","Fragments":["this"]},{"Key":"specific case.","Fragments":["Maybe"]},{"Key":"case. Maybe","Fragments":["a"]},{"Key":"bit over","Fragments":["kill","2","kill"]},{"Key":"over kill","Fragments":["for","to"]},{"Key":"kill for","Fragments":["this"]},{"Key":"the pre","Fragments":["and","and","and","and","and","condition","and","condition"]},{"Key":"post conditions,","Fragments":["I"]},{"Key":"conditions, I","Fragments":["should"]},{"Key":"those more.","Fragments":["I"]},{"Key":"more. I","Fragments":["don't"]},{"Key":"think `#\"T\"`","Fragments":["needs"]},{"Key":"`#\"T\"` needs","Fragments":["to"]},{"Key":"a regex,","Fragments":["`clojure.string/replace`","maybe"]},{"Key":"regex, `clojure.string/replace`","Fragments":["can"]},{"Key":"`clojure.string/replace` can","Fragments":["take"]},{"Key":"take just","Fragments":["a"]},{"Key":" awesome","Fragments":["catch,"]},{"Key":"awesome catch,","Fragments":["thanks!"]},{"Key":"catch, thanks!","Fragments":["I"]},{"Key":"I so","Fragments":["often"]},{"Key":"so often","Fragments":["use"]},{"Key":"often use","Fragments":["regexes"]},{"Key":"use regexes","Fragments":["for"]},{"Key":"regexes for","Fragments":["replacements","the"]},{"Key":"for replacements","Fragments":["that"]},{"Key":"replacements that","Fragments":["I"]},{"Key":"it automatically.","Fragments":["To"]},{"Key":"automatically. To","Fragments":["keep"]},{"Key":"keep it","Fragments":["consistent","simpler","as","with","more","in"]},{"Key":"it consistent","Fragments":["with"]},{"Key":"post conditions","Fragments":["I've","and","at","perform","are"]},{"Key":"conditions I've","Fragments":["also"]},{"Key":"also updated","Fragments":["it"]},{"Key":"updated it","Fragments":["to"]},{"Key":"characters instead","Fragments":["of","of"]},{"Key":"of to","Fragments":["nitpick"]},{"Key":"to nitpick","Fragments":["is"]},{"Key":"that requiring","Fragments":["the"]},{"Key":"`if` inside","Fragments":["the"]},{"Key":"the `case`","Fragments":["might","statement."]},{"Key":"`case` might","Fragments":["imply","be"]},{"Key":"might imply","Fragments":["that"]},{"Key":"imply that","Fragments":["the","it"]},{"Key":"is complex","Fragments":["enough"]},{"Key":"complex enough","Fragments":["to"]},{"Key":"to merit","Fragments":["having"]},{"Key":"merit having","Fragments":["a"]},{"Key":"a full","Fragments":["on"]},{"Key":"full on","Fragments":["`cond`,"]},{"Key":"on `cond`,","Fragments":["but"]},{"Key":"feel too","Fragments":["strongly"]},{"Key":"too strongly","Fragments":["about"]},{"Key":"that. Everything","Fragments":["looks"]},{"Key":"Everything looks","Fragments":["good"]},{"Key":"don't like,","Fragments":["none"]},{"Key":"like, none","Fragments":["of"]},{"Key":"them has","Fragments":["anything"]},{"Key":"has anything","Fragments":["to"]},{"Key":"one are","Fragments":["the"]},{"Key":"strings you","Fragments":["add"]},{"Key":"you add","Fragments":["after","a","to"]},{"Key":"add after","Fragments":["the"]},{"Key":"are like","Fragments":["comments."]},{"Key":"like comments.","Fragments":["I"]},{"Key":"comments. I","Fragments":["believe"]},{"Key":"enough and","Fragments":["that"]},{"Key":"in it","Fragments":["is","doesn't","before"]},{"Key":"is simple","Fragments":["enough","enough"]},{"Key":"enough (and","Fragments":["yours"]},{"Key":"(and yours","Fragments":["is),"]},{"Key":"yours is),","Fragments":["there"]},{"Key":"is), there","Fragments":["is"]},{"Key":"is naming","Fragments":["the"]},{"Key":"variable `s`,","Fragments":["which"]},{"Key":"`s`, which","Fragments":["I'm"]},{"Key":"sure stands","Fragments":["for"]},{"Key":"for string","Fragments":["or"]},{"Key":"or statement","Fragments":["or"]},{"Key":"statement or","Fragments":["sentence."]},{"Key":"or sentence.","Fragments":["Variable"]},{"Key":"sentence. Variable","Fragments":["naming"]},{"Key":"Variable naming","Fragments":["is"]},{"Key":"very important","Fragments":["part"]},{"Key":"important part","Fragments":["of"]},{"Key":"writing clean","Fragments":["code,"]},{"Key":"clean code,","Fragments":["since"]},{"Key":"code, since","Fragments":["most"]},{"Key":"since most","Fragments":["of"]},{"Key":"time you'll","Fragments":["be"]},{"Key":"be reading","Fragments":["code"]},{"Key":"reading code","Fragments":["that"]},{"Key":"you or","Fragments":["someone"]},{"Key":"or someone","Fragments":["else"]},{"Key":"else wrote,","Fragments":["your"]},{"Key":"wrote, your","Fragments":["future"]},{"Key":"your future","Fragments":["self"]},{"Key":"future self","Fragments":["will"]},{"Key":"self will","Fragments":["thank"]},{"Key":"will thank","Fragments":["you"]},{"Key":"for making","Fragments":["your","functions","assertions","Clojure","assertions"]},{"Key":"your intentions","Fragments":["as"]},{"Key":"intentions as","Fragments":["clear"]},{"Key":"as clear","Fragments":["as","as"]},{"Key":"clear as","Fragments":["possible","it"]},{"Key":"possible when","Fragments":["you"]},{"Key":"you first","Fragments":["write","filter"]},{"Key":"first write","Fragments":["the"]},{"Key":" Thelast","Fragments":["thing"]},{"Key":"Thelast thing","Fragments":["is"]},{"Key":"the different","Fragments":["levels","solutions"]},{"Key":"abstraction that","Fragments":["you"]},{"Key":"have on","Fragments":["your"]},{"Key":"`cond` statement.","Fragments":["On"]},{"Key":"statement. On","Fragments":["the"]},{"Key":"first test,","Fragments":["you're"]},{"Key":"test, you're","Fragments":["testing"]},{"Key":"testing if","Fragments":["`s`","it"]},{"Key":"if `s`","Fragments":["is"]},{"Key":"a `yelling?`","Fragments":["s,"]},{"Key":"`yelling?` s,","Fragments":["that's"]},{"Key":"s, that's","Fragments":["fine,"]},{"Key":"that's fine,","Fragments":["but"]},{"Key":"expect the","Fragments":["rest","atom"]},{"Key":"the level","Fragments":["of","of"]},{"Key":"abstraction and","Fragments":["test","the"]},{"Key":"and test","Fragments":["if"]},{"Key":"test if","Fragments":["it"]},{"Key":"a `question?`","Fragments":["s"]},{"Key":"`question?` s","Fragments":["or"]},{"Key":"s or","Fragments":["a"]},{"Key":"a `silent?`","Fragments":["s."]},{"Key":"`silent?` s.","Fragments":["Instead,"]},{"Key":"s. Instead,","Fragments":["you"]},{"Key":"Instead, you","Fragments":["go"]},{"Key":"go to","Fragments":["a","Java"]},{"Key":"a lower","Fragments":["level"]},{"Key":"lower level","Fragments":["of"]},{"Key":"abstraction right","Fragments":["into"]},{"Key":"the details.","Fragments":["This"]},{"Key":"details. This","Fragments":["makes"]},{"Key":"and will","Fragments":["make","trying"]},{"Key":"to refactor","Fragments":["in"]},{"Key":"refactor in","Fragments":["the"]},{"Key":"a shouting","Fragments":["statement,"]},{"Key":"shouting statement,","Fragments":["I"]},{"Key":"statement, I","Fragments":["did"]},{"Key":" `(and","Fragments":["(=","(="]},{"Key":"(string/upper-case statement)","Fragments":["statement)"]},{"Key":"statement) statement)","Fragments":["(re-find"]},{"Key":"statement) (re-find","Fragments":["#\"[a-zA-Z]\""]},{"Key":"(re-find #\"[a-zA-Z]\"","Fragments":["statement)))`"]},{"Key":"that yours","Fragments":["is","is"]},{"Key":"yours is","Fragments":["wrong,","more","more"]},{"Key":"is wrong,","Fragments":["but"]},{"Key":"wrong, but","Fragments":["it's","I'm"]},{"Key":"Hi @kyla,","Fragments":["I"]},{"Key":"@kyla, I","Fragments":["did"]},{"Key":"that mainly","Fragments":["because"]},{"Key":"mainly because","Fragments":["I","of"]},{"Key":"was possible","Fragments":["to"]},{"Key":"you suggest,","Fragments":["just","this"]},{"Key":"suggest, just","Fragments":["submitted"]},{"Key":" Clean","Fragments":["code"]},{"Key":"Clean code","Fragments":["is"]},{"Key":"lot about","Fragments":["variable","clojure"]},{"Key":"about variable","Fragments":["naming,"]},{"Key":"variable naming,","Fragments":["`x`"]},{"Key":"naming, `x`","Fragments":["is"]},{"Key":"`x` is","Fragments":["definitely"]},{"Key":"good name.","Fragments":["In"]},{"Key":"name. In","Fragments":["a"]},{"Key":"few weeks","Fragments":["or"]},{"Key":"weeks or","Fragments":["months"]},{"Key":"or months","Fragments":["you'll"]},{"Key":"months you'll","Fragments":["come"]},{"Key":"you'll come","Fragments":["back"]},{"Key":"and you'll","Fragments":["not"]},{"Key":"you'll not","Fragments":["know"]},{"Key":"what `x`","Fragments":["stands"]},{"Key":"`x` stands","Fragments":["for."]},{"Key":"code greatly","Fragments":["just"]},{"Key":"greatly just","Fragments":["by"]},{"Key":"using `replace`","Fragments":["on"]},{"Key":"`replace` on","Fragments":["the"]},{"Key":"full string,","Fragments":["like"]},{"Key":"string, like","Fragments":["so:"]},{"Key":"(defn to-rna","Fragments":["[dna-sequence]","[dna]","[message]","[nucleotides]","[dna]","[dna]"]},{"Key":" (clojure.string/replace","Fragments":["dna-sequence","dna"]},{"Key":"(clojure.string/replace dna-sequence","Fragments":["\"T\""]},{"Key":"dna-sequence \"T\"","Fragments":["\"U\"))"]},{"Key":"of `frequencies`.","Fragments":["I","I"]},{"Key":"used `sort`,","Fragments":["which"]},{"Key":"`sort`, which","Fragments":["should"]},{"Key":"which should","Fragments":["be","allow"]},{"Key":"less performant","Fragments":["for"]},{"Key":"performant for","Fragments":["large"]},{"Key":"for large","Fragments":["strings.."]},{"Key":"of performance:","Fragments":["You"]},{"Key":"performance: You","Fragments":["make"]},{"Key":"sure to","Fragments":["only","return"]},{"Key":"calculate `(lower-case","Fragments":["s)`"]},{"Key":"`(lower-case s)`","Fragments":["once,"]},{"Key":"s)` once,","Fragments":["but"]},{"Key":"once, but","Fragments":["you"]},{"Key":"you calculate","Fragments":["`(frequencies"]},{"Key":"calculate `(frequencies","Fragments":["text)`"]},{"Key":"`(frequencies text)`","Fragments":["(via"]},{"Key":"text)` (via","Fragments":["`anagram?`)"]},{"Key":"(via `anagram?`)","Fragments":["for"]},{"Key":"`anagram?`) for","Fragments":["each"]},{"Key":"of `c`.","Fragments":["Can"]},{"Key":"`c`. Can","Fragments":["you"]},{"Key":"with calculating","Fragments":["it"]},{"Key":"calculating it","Fragments":["only"]},{"Key":"* I'd","Fragments":["import"]},{"Key":"I'd import","Fragments":["clojure.string/lower-case:"]},{"Key":"import clojure.string/lower-case:","Fragments":["`(ns"]},{"Key":"clojure.string/lower-case: `(ns","Fragments":["anagram"]},{"Key":"`(ns anagram","Fragments":["(require","(:require"]},{"Key":"anagram (require","Fragments":["[clojure.string"]},{"Key":"* If","Fragments":["I"]},{"Key":"not mistaken,","Fragments":["one-letter"]},{"Key":"mistaken, one-letter","Fragments":["variable"]},{"Key":"one-letter variable","Fragments":["names"]},{"Key":"feedback @monty.","Fragments":["I've"]},{"Key":"@monty. I've","Fragments":["changed"]},{"Key":"parameter to","Fragments":["dna-strand.","spaced-groups-of","`leap-year?`","store"]},{"Key":"please elaborate","Fragments":["on","on"]},{"Key":"by simplifying","Fragments":["the","its","a"]},{"Key":"code greatly?","Fragments":["I"]},{"Key":"greatly? I","Fragments":["think"]},{"Key":"literals provides","Fragments":["a"]},{"Key":"provides a","Fragments":["nice","blank?"]},{"Key":"nice consistent","Fragments":["tie-in"]},{"Key":"consistent tie-in","Fragments":["with"]},{"Key":"tie-in with","Fragments":["the"]},{"Key":"shorter than","Fragments":["the","the"]},{"Key":"string versions","Fragments":["as"]},{"Key":"versions as","Fragments":["well."]},{"Key":" Took","Fragments":["me","the","the"]},{"Key":"Took me","Fragments":["a","a"]},{"Key":"out `(apply","Fragments":["str"]},{"Key":"str ...)`.","Fragments":["I"]},{"Key":"...)`. I","Fragments":["guess"]},{"Key":"guess using","Fragments":["`clojure.string/replace`"]},{"Key":"`clojure.string/replace` might","Fragments":["be"]},{"Key":"a one-liner","Fragments":["that","in"]},{"Key":"one-liner that","Fragments":["would"]},{"Key":" @cheyanne","Fragments":["I"]},{"Key":"@cheyanne I","Fragments":["meant"]},{"Key":"wrote above","Fragments":["is"]},{"Key":"above is","Fragments":["enough"]},{"Key":"pass all","Fragments":["the"]},{"Key":"tests. Not","Fragments":["sure"]},{"Key":"conditions at","Fragments":["all."]},{"Key":"all. Maybe","Fragments":["I'm"]},{"Key":"Maybe I'm","Fragments":["missing"]},{"Key":"something here,","Fragments":["as"]},{"Key":"here, as","Fragments":["I'm","you"]},{"Key":"very proficient","Fragments":["with"]},{"Key":"proficient with","Fragments":["clojure,"]},{"Key":"clojure, but","Fragments":["it","getting","in","I"]},{"Key":"introduce a","Fragments":["lot"]},{"Key":"EDIT: I","Fragments":["was"]},{"Key":"just checking,","Fragments":["and"]},{"Key":"checking, and","Fragments":["it"]},{"Key":"it your","Fragments":["code"]},{"Key":"code seems","Fragments":["to"]},{"Key":"post conditions.","Fragments":["What"]},{"Key":"are they","Fragments":["for,"]},{"Key":"they for,","Fragments":["then?"]},{"Key":"The pre","Fragments":["and"]},{"Key":"conditions perform","Fragments":["validation"]},{"Key":"perform validation","Fragments":["on"]},{"Key":"validation on","Fragments":["the"]},{"Key":"return values.","Fragments":["For"]},{"Key":"values. For","Fragments":["example,"]},{"Key":"example, the","Fragments":["tests"]},{"Key":"see whether","Fragments":["the","I"]},{"Key":"valid dna","Fragments":["sequence","sequence.","and","markers","strands"]},{"Key":"dna sequence","Fragments":["and","even"]},{"Key":"sequence and","Fragments":["likewise","map","the"]},{"Key":"and likewise","Fragments":["they"]},{"Key":"likewise they","Fragments":["don't"]},{"Key":"don't check","Fragments":["to"]},{"Key":"return value","Fragments":["is","instead"]},{"Key":"value is","Fragments":["a","ignored","returned","indented","read,","attempted","just","present","nil","among"]},{"Key":"valid rna","Fragments":["sequence."]},{"Key":"rna sequence.","Fragments":["In"]},{"Key":"sequence. In","Fragments":["other"]},{"Key":"words, without","Fragments":["them"]},{"Key":"without them","Fragments":["you"]},{"Key":"them you","Fragments":["could"]},{"Key":"pass and","Fragments":["still"]},{"Key":"still do","Fragments":["something","is"]},{"Key":"like ```(to-rna","Fragments":["\"I'm"]},{"Key":"```(to-rna \"I'm","Fragments":["just"]},{"Key":"\"I'm just","Fragments":["a"]},{"Key":"regular string\")```","Fragments":["without"]},{"Key":"string\")``` without","Fragments":["any"]},{"Key":"any problems.","Fragments":["Obviously"]},{"Key":"problems. Obviously","Fragments":["this"]},{"Key":"Obviously this","Fragments":["is"]},{"Key":"not what","Fragments":["you","you're","I"]},{"Key":"adding noise","Fragments":["they"]},{"Key":"noise they","Fragments":["actually"]},{"Key":"they actually","Fragments":["clarify"]},{"Key":"actually clarify","Fragments":["the"]},{"Key":"in addition","Fragments":["to"]},{"Key":"addition to","Fragments":["the"]},{"Key":"the validation.","Fragments":["Even"]},{"Key":"validation. Even","Fragments":["if"]},{"Key":"know nothing","Fragments":["about"]},{"Key":"nothing about","Fragments":["dna"]},{"Key":"about dna","Fragments":["and"]},{"Key":"dna and","Fragments":["rna","rna"]},{"Key":"and rna","Fragments":["sequences","sequences."]},{"Key":"rna sequences","Fragments":["you"]},{"Key":"sequences you","Fragments":["can"]},{"Key":"function expects","Fragments":["the","and","a"]},{"Key":"expects the","Fragments":["input","entire"]},{"Key":"only contain","Fragments":["the","the"]},{"Key":"contain the","Fragments":["characters","values","details."]},{"Key":"pre condition","Fragments":["and","as","regex.","or"]},{"Key":"a rna","Fragments":["sequence"]},{"Key":"rna sequence","Fragments":["to"]},{"Key":"the values","Fragments":["in","with","should","as","in"]},{"Key":"Maybe instead","Fragments":["of"]},{"Key":"of trying","Fragments":["to"]},{"Key":"to exclude","Fragments":["non-alphanumeric","yelling,"]},{"Key":"exclude non-alphanumeric","Fragments":["characters"]},{"Key":"non-alphanumeric characters","Fragments":["it"]},{"Key":"characters it","Fragments":["would"]},{"Key":"to pick","Fragments":["out","with","apart","as"]},{"Key":"the ones","Fragments":["that"]},{"Key":"ones that","Fragments":["indeed"]},{"Key":"that indeed","Fragments":["are"]},{"Key":"indeed are","Fragments":["alphanumeric?"]},{"Key":" Reduce","Fragments":["the"]},{"Key":"Reduce the","Fragments":["list"]},{"Key":"list into","Fragments":["the","a"]},{"Key":"and its","Fragments":["count.","name","all"]},{"Key":" @mitchell","Fragments":["Got"]},{"Key":"@mitchell Got","Fragments":["it."]},{"Key":"This I","Fragments":["believe","think"]},{"Key":"believe is","Fragments":["a"]},{"Key":"which new","Fragments":["tests"]},{"Key":"new tests","Fragments":["should"]},{"Key":"tests should","Fragments":["be","be","be"]},{"Key":"be added,","Fragments":["and"]},{"Key":"added, and","Fragments":["only"]},{"Key":"only then","Fragments":["the"]},{"Key":"should follow.","Fragments":["Not"]},{"Key":"follow. Not","Fragments":["sure"]},{"Key":"the guideline","Fragments":["for"]},{"Key":"guideline for","Fragments":["proposing"]},{"Key":"for proposing","Fragments":["new"]},{"Key":"proposing new","Fragments":["tests,"]},{"Key":"new tests,","Fragments":["but"]},{"Key":"tests, but","Fragments":["I'm","this","(with","should've"]},{"Key":"sure @mitchell","Fragments":["can"]},{"Key":"@mitchell can","Fragments":["elucidate"]},{"Key":"can elucidate","Fragments":["us."]},{"Key":"elucidate us.","Fragments":[";)"]},{"Key":"Hey :)","Fragments":["Thanks"]},{"Key":"for asking.","Fragments":["If"]},{"Key":"asking. If","Fragments":["you"]},{"Key":"have uncovered","Fragments":["edge-cases,"]},{"Key":"uncovered edge-cases,","Fragments":["then"]},{"Key":"edge-cases, then","Fragments":["I'd"]},{"Key":"then I'd","Fragments":["be"]},{"Key":"be delighted","Fragments":["if"]},{"Key":"delighted if","Fragments":["you'd"]},{"Key":"you'd submit","Fragments":["a"]},{"Key":"request with","Fragments":["the"]},{"Key":"additional test","Fragments":["cases.","for"]},{"Key":"code lives","Fragments":["here"]},{"Key":"lives here","Fragments":["for"]},{"Key":"here for","Fragments":["the","another","the"]},{"Key":"the moment:","Fragments":["https://github.com/exercism/exercism.io/tree/master/assignments/clojure/rna-transcription"]},{"Key":"tests, please","Fragments":["make"]},{"Key":"please make","Fragments":["sure"]},{"Key":"the `example.clj`","Fragments":["still"]},{"Key":"`example.clj` still","Fragments":["passes."]},{"Key":"try the","Fragments":["`assert`","`(not"]},{"Key":"the `assert`","Fragments":["function","function","function?","function","function.","is","function","function.","function","could"]},{"Key":"`assert` function","Fragments":["instead","instead","instead","which","to"]},{"Key":"first attempt","Fragments":["at","at","at","to"]},{"Key":"at any","Fragments":["of","position"]},{"Key":"Clojure exercises.","Fragments":["While"]},{"Key":"exercises. While","Fragments":["I've"]},{"Key":"read a","Fragments":["little","bit","lot"]},{"Key":"language, I","Fragments":["figured"]},{"Key":"figured the","Fragments":["best"]},{"Key":"a feel","Fragments":["was","for"]},{"Key":"feel was","Fragments":["to"]},{"Key":"After writing","Fragments":["the"]},{"Key":"first draft,","Fragments":["there's"]},{"Key":"draft, there's","Fragments":["a"]},{"Key":"lot I","Fragments":["don't"]},{"Key":"don't like.","Fragments":["`response-for`"]},{"Key":"like. `response-for`","Fragments":["is"]},{"Key":"currently dependent","Fragments":["on"]},{"Key":"the order,","Fragments":["and"]},{"Key":"order, and","Fragments":["I"]},{"Key":"the long,","Fragments":["branching"]},{"Key":"long, branching","Fragments":["if/else"]},{"Key":"branching if/else","Fragments":["layout."]},{"Key":"Any advice","Fragments":["would"]},{"Key":"advice would","Fragments":["be"]},{"Key":"Clojure module,","Fragments":["and"]},{"Key":"module, and","Fragments":["I"]},{"Key":"can't say","Fragments":["I'm"]},{"Key":"say I'm","Fragments":["proud"]},{"Key":"I'm proud","Fragments":["of"]},{"Key":"proud of","Fragments":["it."]},{"Key":"it. Many","Fragments":["things"]},{"Key":"Many things","Fragments":["surprised"]},{"Key":"things surprised","Fragments":["me"]},{"Key":"First, I","Fragments":["was","misunderstood"]},{"Key":"that RegEx's","Fragments":["are"]},{"Key":"RegEx's are","Fragments":["core"]},{"Key":"are core","Fragments":["objects."]},{"Key":"core objects.","Fragments":["Second,"]},{"Key":"objects. Second,","Fragments":["I"]},{"Key":"was bewildered","Fragments":["by"]},{"Key":"bewildered by","Fragments":["the"]},{"Key":"of RegEx","Fragments":["functions."]},{"Key":"RegEx functions.","Fragments":["I"]},{"Key":"finally settled","Fragments":["on"]},{"Key":"on `re-seq`","Fragments":["as"]},{"Key":"`re-seq` as","Fragments":["the","another"]},{"Key":"option that","Fragments":["would","might"]},{"Key":"allow me","Fragments":["to","to"]},{"Key":"to scan","Fragments":["whole"]},{"Key":"scan whole","Fragments":["sentences."]},{"Key":"the output","Fragments":["of"]},{"Key":"output of","Fragments":["`re-seq`"]},{"Key":"`re-seq` directly","Fragments":["to"]},{"Key":"to `if`,","Fragments":["even"]},{"Key":"`if`, even","Fragments":["though"]},{"Key":"could (it","Fragments":["helpfully"]},{"Key":"(it helpfully","Fragments":["returns"]},{"Key":"helpfully returns","Fragments":["`nil`"]},{"Key":"returns `nil`","Fragments":["rather","whenever"]},{"Key":"than `()`","Fragments":["for"]},{"Key":"`()` for","Fragments":["empty"]},{"Key":"empty match","Fragments":["sets)."]},{"Key":"match sets).","Fragments":["This"]},{"Key":"sets). This","Fragments":["way"]},{"Key":"`if` semantics","Fragments":["would"]},{"Key":"semantics would","Fragments":["be"]},{"Key":"also decided","Fragments":["to"]},{"Key":"response strings","Fragments":["themselves","private","in"]},{"Key":"strings themselves","Fragments":["as"]},{"Key":"themselves as","Fragments":["functions,"]},{"Key":"functions, which","Fragments":["made"]},{"Key":"me realize","Fragments":["the","how"]},{"Key":"realize the","Fragments":["only"]},{"Key":"thing unique","Fragments":["about"]},{"Key":"unique about","Fragments":["this"]},{"Key":"to \"Bob\"","Fragments":["is"]},{"Key":"\"Bob\" is","Fragments":["his"]},{"Key":"is his","Fragments":["specific"]},{"Key":"his specific","Fragments":["responses."]},{"Key":"specific responses.","Fragments":["It"]},{"Key":"responses. It","Fragments":["might"]},{"Key":"be neat","Fragments":["to"]},{"Key":"neat to","Fragments":["figure"]},{"Key":"to turn","Fragments":["this","it","the","it","it","postfix","a"]},{"Key":"turn this","Fragments":["into"]},{"Key":"that takes","Fragments":["a","1","2","care","2","2"]},{"Key":"a responder","Fragments":["function"]},{"Key":"responder function","Fragments":["as"]},{"Key":"variable so","Fragments":["you","you"]},{"Key":"get different","Fragments":["response"]},{"Key":"different response","Fragments":["strings."]},{"Key":" Naturally,","Fragments":["I"]},{"Key":"Naturally, I","Fragments":["cheated"]},{"Key":"I cheated","Fragments":["on","on","with"]},{"Key":"cheated on","Fragments":["the","this"]},{"Key":"the \"recognizes","Fragments":["acronyms\""]},{"Key":"\"recognizes acronyms\"","Fragments":["test,"]},{"Key":"acronyms\" test,","Fragments":["since"]},{"Key":"test, since","Fragments":["I"]},{"Key":"an incredibly","Fragments":["difficult"]},{"Key":"incredibly difficult","Fragments":["case"]},{"Key":"difficult case","Fragments":["in"]},{"Key":"in general.","Fragments":["I","Right?"]},{"Key":"general. I","Fragments":["look"]},{"Key":"to seeing","Fragments":["other"]},{"Key":"seeing other","Fragments":["solutions"]},{"Key":"to squash","Fragments":["all"]},{"Key":"squash all","Fragments":["sequences"]},{"Key":"all sequences","Fragments":["of"]},{"Key":"brackets even","Fragments":["if"]},{"Key":"they weren't","Fragments":["opened"]},{"Key":"weren't opened","Fragments":["on"]},{"Key":"opened on","Fragments":["the"]},{"Key":"of which","Fragments":["you","attempting"]},{"Key":"use `(defn","Fragments":["function-name"]},{"Key":"`(defn function-name","Fragments":["[argument]"]},{"Key":"function-name [argument]","Fragments":["...`"]},{"Key":"[argument] ...`","Fragments":["instead"]},{"Key":"...` instead","Fragments":["of"]},{"Key":"of `(def","Fragments":["function-name"]},{"Key":"`(def function-name","Fragments":["(fn"]},{"Key":"function-name (fn","Fragments":["[argument]"]},{"Key":"(fn [argument]","Fragments":["...`."]},{"Key":"For private","Fragments":["functions","variables"]},{"Key":"to export,","Fragments":["you"]},{"Key":"export, you","Fragments":["can"]},{"Key":"use `defn-`.","Fragments":["For"]},{"Key":"`defn-`. For","Fragments":["private"]},{"Key":"private variables","Fragments":["that"]},{"Key":"variables that","Fragments":["you"]},{"Key":"to export","Fragments":["(`shout-response`","i.e.","it.)","it).","it.)"]},{"Key":"export (`shout-response`","Fragments":["etc...)"]},{"Key":"(`shout-response` etc...)","Fragments":["I"]},{"Key":"etc...) I","Fragments":["think"]},{"Key":"use `(def","Fragments":["^:private","answer-to-question"]},{"Key":"^:private shout-response","Fragments":["\"Woah,"]},{"Key":"shout-response \"Woah,","Fragments":["chill"]},{"Key":"chill out!\")`.","Fragments":["There"]},{"Key":"out!\")`. There","Fragments":["is"]},{"Key":"Those right","Fragments":["marching"]},{"Key":"right marching","Fragments":["`if`s"]},{"Key":"marching `if`s","Fragments":["in"]},{"Key":"`if`s in","Fragments":["`response-for`","`response-for`","`response-for`."]},{"Key":"`response-for` look","Fragments":["a"]},{"Key":"bit ugly,","Fragments":["perhaps"]},{"Key":"ugly, perhaps","Fragments":["you"]},{"Key":"use `cond`","Fragments":["there","to","again."]},{"Key":"`cond` there","Fragments":["instead?"]},{"Key":"usual solution","Fragments":["to"]},{"Key":"to recognizing","Fragments":["acronyms"]},{"Key":"recognizing acronyms","Fragments":["is"]},{"Key":"acronyms is","Fragments":["to"]},{"Key":"to ignore","Fragments":["it"]},{"Key":"ignore it","Fragments":["and","if","here,"]},{"Key":"and consider","Fragments":["\"OK.\""]},{"Key":"consider \"OK.\"","Fragments":["etc."]},{"Key":"\"OK.\" etc.","Fragments":["to"]},{"Key":"etc. to","Fragments":["be"]},{"Key":"be shouting","Fragments":["even"]},{"Key":"shouting even","Fragments":["if","though"]},{"Key":"if morally","Fragments":["it"]},{"Key":"morally it","Fragments":["isn't"]},{"Key":"replace the","Fragments":["`if`s","use","java","java","else","`.endsWith`","nested","`cond`"]},{"Key":"the `if`s","Fragments":["in"]},{"Key":"`response-for` with","Fragments":["a"]},{"Key":"Use `defn-`","Fragments":["rather"]},{"Key":"`defn` for","Fragments":["top"]},{"Key":"for top","Fragments":["level"]},{"Key":"level function","Fragments":["definitions","definitions","that"]},{"Key":"definitions that","Fragments":["you"]},{"Key":"I checked","Fragments":["that","for"]},{"Key":"checked that","Fragments":["the","all"]},{"Key":"message wasn't","Fragments":["shouted"]},{"Key":"wasn't shouted","Fragments":["in"]},{"Key":"shouted in","Fragments":["my"]},{"Key":"my `question?`","Fragments":["(which"]},{"Key":"`question?` (which","Fragments":["I"]},{"Key":"(which I","Fragments":["renamed","know"]},{"Key":"I renamed","Fragments":["to"]},{"Key":"like `asking-politely?`)","Fragments":["That"]},{"Key":"`asking-politely?`) That","Fragments":["way"]},{"Key":"That way","Fragments":["(I","the"]},{"Key":"way (I","Fragments":["think!)"]},{"Key":"(I think!)","Fragments":["the"]},{"Key":"think!) the","Fragments":["three"]},{"Key":"three predicates","Fragments":["are","you"]},{"Key":"are mutually","Fragments":["exclusive"]},{"Key":"`response-for` doesn't","Fragments":["matter."]},{"Key":"The main","Fragments":["tweaks","nitpicks"]},{"Key":"main tweaks","Fragments":["I'd"]},{"Key":"tweaks I'd","Fragments":["suggest"]},{"Key":"suggest here","Fragments":["are"]},{"Key":"- putting","Fragments":["the"]},{"Key":"the `(:require","Fragments":["...)`"]},{"Key":"`(:require ...)`","Fragments":["on"]},{"Key":"...)` on","Fragments":["a"]},{"Key":"- moving","Fragments":["the"]},{"Key":"argument lists","Fragments":["`[msg]`"]},{"Key":"lists `[msg]`","Fragments":["up"]},{"Key":"`[msg]` up","Fragments":["onto"]},{"Key":"up onto","Fragments":["the"]},{"Key":"Added docstrings,","Fragments":["changed"]},{"Key":"docstrings, changed","Fragments":["the"]},{"Key":"`ns` to","Fragments":["use"]},{"Key":"`:require` and","Fragments":["`:refer`,"]},{"Key":"and `:refer`,","Fragments":["and"]},{"Key":"`:refer`, and","Fragments":["changed"]},{"Key":"changed L9","Fragments":["to"]},{"Key":"L9 to","Fragments":["use"]},{"Key":"use `not=`","Fragments":["that","as"]},{"Key":"of for","Fragments":["iteration"]},{"Key":"for iteration","Fragments":["1."]},{"Key":"Thanks, soapie.","Fragments":["I"]},{"Key":"soapie. I","Fragments":["appreciate"]},{"Key":"the guidelines","Fragments":["on"]},{"Key":"on style,","Fragments":["because"]},{"Key":"style, because","Fragments":["the"]},{"Key":"test code","Fragments":["doesn't","and"]},{"Key":"doesn't break","Fragments":["on"]},{"Key":"break on","Fragments":["those"]},{"Key":"on those","Fragments":["issues."]},{"Key":"those issues.","Fragments":["I"]},{"Key":"issues. I","Fragments":["don't"]},{"Key":"`cond` function,","Fragments":["since"]},{"Key":"Elixir first","Fragments":["and"]},{"Key":"first and","Fragments":["they","latest","second:","`\\?`"]},{"Key":"and they","Fragments":["have","say","work;"]},{"Key":"didn't explain","Fragments":["this"]},{"Key":"explain this","Fragments":["very"]},{"Key":"very well,","Fragments":["but"]},{"Key":"be no","Fragments":["lines"]},{"Key":"no lines","Fragments":["with"]},{"Key":"lines with","Fragments":["just"]},{"Key":"just whitespace","Fragments":["and","in"]},{"Key":"closing brackets.","Fragments":["There's"]},{"Key":"brackets. There's","Fragments":["an"]},{"Key":"There's an","Fragments":["example"]},{"Key":"community [Clojure","Fragments":["Style"]},{"Key":"[Clojure Style","Fragments":["Guide](https://github.com/bbatsov/clojure-style-guide)"]},{"Key":"Style Guide](https://github.com/bbatsov/clojure-style-guide)","Fragments":["if"]},{"Key":"Guide](https://github.com/bbatsov/clojure-style-guide) if","Fragments":["you"]},{"Key":"you search","Fragments":["for"]},{"Key":"still think","Fragments":["it"]},{"Key":"nicer using","Fragments":["`defn`"]},{"Key":"using `defn`","Fragments":["instead"]},{"Key":"`defn` instead","Fragments":["of"]},{"Key":"`def` for","Fragments":["the"]},{"Key":"definitions (and","Fragments":["`defn-`"]},{"Key":"(and `defn-`","Fragments":["for"]},{"Key":"for those","Fragments":["that","familiar","that"]},{"Key":"those that","Fragments":["you","are"]},{"Key":"don't wish","Fragments":["to"]},{"Key":"wish to","Fragments":["export)!"]},{"Key":" Done","Fragments":["@emely,"]},{"Key":"Done @emely,","Fragments":["thank"]},{"Key":"@emely, thank","Fragments":["you"]},{"Key":"the ```(:require","Fragments":["...)```"]},{"Key":"```(:require ...)```","Fragments":["on"]},{"Key":"...)``` on","Fragments":["the"]},{"Key":"ns declaration","Fragments":["may"]},{"Key":"declaration may","Fragments":["be"]},{"Key":"my fault.","Fragments":["@michael,"]},{"Key":"fault. @michael,","Fragments":["I"]},{"Key":"@michael, I","Fragments":["didn't"]},{"Key":"to mislead","Fragments":["you"]},{"Key":"mislead you","Fragments":["with"]},{"Key":"iteration where","Fragments":["I"]},{"Key":"had it","Fragments":["all","return"]},{"Key":"all on","Fragments":["one"]},{"Key":"line. I","Fragments":["messed","like"]},{"Key":"I messed","Fragments":["up"]},{"Key":"messed up","Fragments":["with"]},{"Key":"the markdown","Fragments":["on"]},{"Key":"markdown on","Fragments":["the"]},{"Key":"the comment,","Fragments":["but","but","zoldar."]},{"Key":":require should","Fragments":["be"]},{"Key":"version looks","Fragments":["good.","much"]},{"Key":"suggestion I","Fragments":["would"]},{"Key":"give is","Fragments":["to"]},{"Key":"find alternatives","Fragments":["for"]},{"Key":"alternatives for","Fragments":["the"]},{"Key":"expressions since","Fragments":["they"]},{"Key":"they aren't","Fragments":["always"]},{"Key":"aren't always","Fragments":["the"]},{"Key":"the clearest","Fragments":["to","to","solution."]},{"Key":"clearest to","Fragments":["read.","me."]},{"Key":"Good use","Fragments":["of","of","of","of","of"]},{"Key":"function. Looking","Fragments":["at"]},{"Key":"at it,","Fragments":["I"]},{"Key":"I essentially","Fragments":["implemented"]},{"Key":"essentially implemented","Fragments":["it"]},{"Key":"my solution.","Fragments":["But"]},{"Key":"solution. But","Fragments":["I"]},{"Key":"also got","Fragments":["to"]},{"Key":"about `transient`","Fragments":["by"]},{"Key":"`transient` by","Fragments":["looking"]},{"Key":"Thanks, soapie,","Fragments":["for"]},{"Key":"soapie, for","Fragments":["the"]},{"Key":"the link","Fragments":["to"]},{"Key":"style guide.","Fragments":["I","I've"]},{"Key":"guide. I","Fragments":["still"]},{"Key":"still need","Fragments":["to","the","feedback","to"]},{"Key":"to finish","Fragments":["going"]},{"Key":"finish going","Fragments":["through"]},{"Key":"going through","Fragments":["it,"]},{"Key":"through it,","Fragments":["but"]},{"Key":"realized the","Fragments":["cleanest"]},{"Key":"the cleanest","Fragments":["way"]},{"Key":"cleanest way","Fragments":["to"]},{"Key":"those response","Fragments":["strings"]},{"Key":"strings private","Fragments":["is"]},{"Key":"private is","Fragments":["to"]},{"Key":"wrap their","Fragments":["definitions"]},{"Key":"their definitions","Fragments":["in"]},{"Key":"definitions in","Fragments":["a"]},{"Key":"`let` clause","Fragments":["(is"]},{"Key":"clause (is","Fragments":["that"]},{"Key":"(is that","Fragments":["where"]},{"Key":"that where","Fragments":["Clojure"]},{"Key":"where Clojure","Fragments":["gets","would"]},{"Key":"Clojure gets","Fragments":["its"]},{"Key":"gets its","Fragments":["name?)"]},{"Key":"its name?)","Fragments":["and"]},{"Key":"name?) and","Fragments":["wow,"]},{"Key":"and wow,","Fragments":["is"]},{"Key":"wow, is","Fragments":["it"]},{"Key":"readable this","Fragments":["way.","way."]},{"Key":"test should","Fragments":["be","be"]},{"Key":"be added","Fragments":["for","to","to","to"]},{"Key":"added for","Fragments":["this."]},{"Key":"this. You","Fragments":["would","could"]},{"Key":"You would","Fragments":["have","need","have"]},{"Key":"an AssertionError","Fragments":["but","or","by"]},{"Key":"AssertionError but","Fragments":["that"]},{"Key":"would force","Fragments":["everyone"]},{"Key":"force everyone","Fragments":["doing"]},{"Key":"everyone doing","Fragments":["the"]},{"Key":"either explicitly","Fragments":["throw"]},{"Key":"explicitly throw","Fragments":["an","an","exceptions"]},{"Key":"throw an","Fragments":["AssertionError","exception","`AssertionError`","IllegalArgumentException.","error","error","exception"]},{"Key":"AssertionError or","Fragments":["add"]},{"Key":"or add","Fragments":["a"]},{"Key":"a pre","Fragments":["condition.","condition","condition"]},{"Key":" Ordinarily","Fragments":["I"]},{"Key":"Ordinarily I","Fragments":["would"]},{"Key":"say that","Fragments":["yes,","the","raw","you"]},{"Key":"that yes,","Fragments":["a"]},{"Key":"yes, a","Fragments":["test"]},{"Key":"are working","Fragments":["as"]},{"Key":"as expected.","Fragments":["But"]},{"Key":"expected. But","Fragments":["would"]},{"Key":"But would","Fragments":["that"]},{"Key":"would that","Fragments":["be"]},{"Key":"thing in","Fragments":["the"]},{"Key":"context here","Fragments":["of"]},{"Key":"here of","Fragments":["exercism.io?"]},{"Key":"added it","Fragments":["because"]},{"Key":"it because","Fragments":["I","it","pronouncing"]},{"Key":"expressive and","Fragments":["also","concise"]},{"Key":"also ensured","Fragments":["that"]},{"Key":"ensured that","Fragments":["what"]},{"Key":"that what","Fragments":["was","they","you","you're"]},{"Key":"was passed","Fragments":["to"]},{"Key":"dna sequence.","Fragments":["I've"]},{"Key":"sequence. I've","Fragments":["looked"]},{"Key":"I've looked","Fragments":["through"]},{"Key":"looked through","Fragments":["the"]},{"Key":"clojure exercises","Fragments":["and","start"]},{"Key":"exercises and","Fragments":["there","requirements,"]},{"Key":"and there","Fragments":["isn't","are","isn't"]},{"Key":"there isn't","Fragments":["a","a"]},{"Key":"single one","Fragments":["that"]},{"Key":"that tests","Fragments":["to","for","the","for"]},{"Key":"is validated.","Fragments":["The"]},{"Key":"validated. The","Fragments":["one"]},{"Key":"The one","Fragments":["exception"]},{"Key":"one exception","Fragments":["is"]},{"Key":"exception is","Fragments":["nucleotide-count,","a"]},{"Key":"is nucleotide-count,","Fragments":["which"]},{"Key":"nucleotide-count, which","Fragments":["incidentally"]},{"Key":"which incidentally","Fragments":["will"]},{"Key":"incidentally will","Fragments":["still"]},{"Key":"still allow","Fragments":["perfectly"]},{"Key":"allow perfectly","Fragments":["arbitrary"]},{"Key":"perfectly arbitrary","Fragments":["strings"]},{"Key":"arbitrary strings","Fragments":["for"]},{"Key":"the sequences.","Fragments":["Nucleotides"]},{"Key":"sequences. Nucleotides","Fragments":["are"]},{"Key":"Nucleotides are","Fragments":["validated"]},{"Key":"are validated","Fragments":["but"]},{"Key":"validated but","Fragments":["the"]},{"Key":"tests force","Fragments":["you"]},{"Key":"force you","Fragments":["to"]},{"Key":"an exception","Fragments":["rather","during","just","because","while"]},{"Key":"exception rather","Fragments":["than"]},{"Key":"have done","Fragments":["here.","a"]},{"Key":"So is","Fragments":["there","there"]},{"Key":"there value","Fragments":["in","in"]},{"Key":"in forcing","Fragments":["everyone","everyone"]},{"Key":"forcing everyone","Fragments":["to","to"]},{"Key":"to adopt","Fragments":["that","that"]},{"Key":"adopt that","Fragments":["when","when"]},{"Key":"when their","Fragments":["code","code"]},{"Key":"their code","Fragments":["might","might"]},{"Key":"code might","Fragments":["fulfill","fulfill"]},{"Key":"might fulfill","Fragments":["all","all"]},{"Key":"fulfill all","Fragments":["the","the"]},{"Key":"other requirements","Fragments":["of","of"]},{"Key":"the specification?","Fragments":["I'm","I'm"]},{"Key":"specification? I'm","Fragments":["not","not"]},{"Key":"\u003e So","Fragments":["is"]},{"Key":"make very","Fragments":["good"]},{"Key":"good points.","Fragments":["In"]},{"Key":"points. In","Fragments":["the"]},{"Key":"of exercism.io","Fragments":["I","after"]},{"Key":"exercism.io I","Fragments":["don't"]},{"Key":"answer is.","Fragments":["I've"]},{"Key":"is. I've","Fragments":["tossed"]},{"Key":"I've tossed","Fragments":["in"]},{"Key":"tossed in","Fragments":["a"]},{"Key":"different exercises","Fragments":["and"]},{"Key":"and requirements,","Fragments":["much"]},{"Key":"requirements, much","Fragments":["of"]},{"Key":"time without","Fragments":["giving"]},{"Key":"without giving","Fragments":["it","it"]},{"Key":"giving it","Fragments":["deep","away"]},{"Key":"it deep","Fragments":["thought."]},{"Key":"deep thought.","Fragments":["It's"]},{"Key":"thought. It's","Fragments":["been"]},{"Key":"It's been","Fragments":["somewhat"]},{"Key":"been somewhat","Fragments":["surprising"]},{"Key":"somewhat surprising","Fragments":["which"]},{"Key":"surprising which","Fragments":["things"]},{"Key":"which things","Fragments":["turn"]},{"Key":"things turn","Fragments":["out"]},{"Key":"turn out","Fragments":["to"]},{"Key":"generate good,","Fragments":["useful"]},{"Key":"good, useful","Fragments":["discussions"]},{"Key":"useful discussions","Fragments":["and"]},{"Key":"discussions and","Fragments":["not."]},{"Key":"and not.","Fragments":["I'd"]},{"Key":"not. I'd","Fragments":["be"]},{"Key":"be open","Fragments":["to"]},{"Key":"open to","Fragments":["trying","feedback","suggestions."]},{"Key":"to trying","Fragments":["an"]},{"Key":"trying an","Fragments":["exercise"]},{"Key":"an exercise","Fragments":["with","but"]},{"Key":"exercise with","Fragments":["validations"]},{"Key":"with validations","Fragments":["out."]},{"Key":"validations out.","Fragments":["We"]},{"Key":"out. We","Fragments":["can"]},{"Key":"We can","Fragments":["always","find","go","combine"]},{"Key":"always remove","Fragments":["extra"]},{"Key":"remove extra","Fragments":["tests"]},{"Key":"extra tests","Fragments":["later"]},{"Key":"tests later","Fragments":["if"]},{"Key":"later if","Fragments":["it"]},{"Key":"it turns","Fragments":["out"]},{"Key":"the discussions","Fragments":["at"]},{"Key":"discussions at","Fragments":["all."]},{"Key":" @lynn","Fragments":["what"]},{"Key":"@lynn what","Fragments":["is"]},{"Key":" [`defn-`](http://clojuredocs.org/clojure_core/1.2.0/clojure.core/defn-)","Fragments":["is"]},{"Key":"[`defn-`](http://clojuredocs.org/clojure_core/1.2.0/clojure.core/defn-) is","Fragments":["for"]},{"Key":"for defining","Fragments":["a","functions.","the","`dist`."]},{"Key":"export i.e.","Fragments":["any"]},{"Key":"i.e. any","Fragments":["function"]},{"Key":"any function","Fragments":["that"]},{"Key":"oh thank","Fragments":["you"]},{"Key":"Trying out","Fragments":["`ref`"]},{"Key":"out `ref`","Fragments":["for"]},{"Key":"`ref` for","Fragments":["mutable"]},{"Key":"for mutable","Fragments":["state"]},{"Key":"mutable state","Fragments":["for"]},{"Key":"tests correct","Fragments":["on"]},{"Key":"correct on","Fragments":["this?"]},{"Key":"agree to","Fragments":["all"]},{"Key":"the above.","Fragments":["I"]},{"Key":"above. I","Fragments":["would"]},{"Key":"just extract","Fragments":["`(comp"]},{"Key":"extract `(comp","Fragments":["frequencies"]},{"Key":"`(comp frequencies","Fragments":["clojure.string/lower-case)`"]},{"Key":"frequencies clojure.string/lower-case)`","Fragments":["into"]},{"Key":"clojure.string/lower-case)` into","Fragments":["a"]},{"Key":"named function,","Fragments":["as"]},{"Key":"it hurts","Fragments":["my"]},{"Key":"hurts my","Fragments":["eyes","eyes"]},{"Key":"eyes a","Fragments":["bit","bit"]},{"Key":"it twice.","Fragments":["With"]},{"Key":"twice. With","Fragments":["that,"]},{"Key":"With that,","Fragments":["you","you"]},{"Key":"require `clojure.string`,","Fragments":["as"]},{"Key":"`clojure.string`, as","Fragments":["it"]},{"Key":"good. There's","Fragments":["some"]},{"Key":"There's some","Fragments":["excessive"]},{"Key":"some excessive","Fragments":["whitespace"]},{"Key":"excessive whitespace","Fragments":["inside"]},{"Key":"whitespace inside","Fragments":["response-for,"]},{"Key":"inside response-for,","Fragments":["but"]},{"Key":"response-for, but","Fragments":["I"]},{"Key":"it's some","Fragments":["sort","grammatical"]},{"Key":"Seems pretty","Fragments":["verbose"]},{"Key":"pretty verbose","Fragments":["having"]},{"Key":"verbose having","Fragments":["to"]},{"Key":"map out","Fragments":["all"]},{"Key":"the options,","Fragments":["but"]},{"Key":"options, but","Fragments":["maybe"]},{"Key":"Okay, sounds","Fragments":["good."]},{"Key":"sounds good.","Fragments":["I've"]},{"Key":"good. I've","Fragments":["submitted","also"]},{"Key":"request for","Fragments":["an"]},{"Key":"extra test","Fragments":["to"]},{"Key":"dna strand.","Fragments":["I've"]},{"Key":"strand. I've","Fragments":["tried"]},{"Key":"style consistent","Fragments":["with"]},{"Key":"with what's","Fragments":["already"]},{"Key":"what's already","Fragments":["in"]},{"Key":"suite but","Fragments":["let"]},{"Key":"but let","Fragments":["me"]},{"Key":"like anything","Fragments":["changed"]},{"Key":"anything changed","Fragments":["with"]},{"Key":"changed with","Fragments":["it."]},{"Key":"Sorry, I","Fragments":["had","don't"]},{"Key":"original pull","Fragments":["request"]},{"Key":"request and","Fragments":["create"]},{"Key":"missed that","Fragments":["I","bit","one.","one"]},{"Key":"had committed","Fragments":["with"]},{"Key":"committed with","Fragments":["a"]},{"Key":"different email","Fragments":["address"]},{"Key":"email address","Fragments":["than"]},{"Key":"address than","Fragments":["the"]},{"Key":"my github","Fragments":["account."]},{"Key":"All the","Fragments":["Java"]},{"Key":"Java stuff","Fragments":["for"]},{"Key":"stuff for","Fragments":["date"]},{"Key":"for date","Fragments":["handling"]},{"Key":"date handling","Fragments":["is"]},{"Key":"handling is","Fragments":["kind"]},{"Key":" Played","Fragments":["around"]},{"Key":"Played around","Fragments":["with"]},{"Key":"with intern","Fragments":["to"]},{"Key":"intern to","Fragments":["generate"]},{"Key":"them all","Fragments":["by","by","by","together).","to","just"]},{"Key":"all by","Fragments":["hand.","hand.","hand."]},{"Key":"first passing","Fragments":["tests"]},{"Key":"passing tests","Fragments":["were","vs."]},{"Key":"tests were","Fragments":["obtained"]},{"Key":"were obtained","Fragments":["by"]},{"Key":"obtained by","Fragments":["a"]},{"Key":"single `clojure.string/replace`","Fragments":["called"]},{"Key":"`clojure.string/replace` called","Fragments":["on"]},{"Key":"called on","Fragments":["`sequence`,","is"]},{"Key":"on `sequence`,","Fragments":["but"]},{"Key":"`sequence`, but","Fragments":["surely"]},{"Key":"but surely","Fragments":["this"]},{"Key":"surely this","Fragments":["can't"]},{"Key":"this can't","Fragments":["be"]},{"Key":"that simple","Fragments":["if"]},{"Key":"simple if","Fragments":["there's"]},{"Key":"a possibility","Fragments":["of","that"]},{"Key":"of transcribing","Fragments":["a"]},{"Key":"transcribing a","Fragments":["sequence"]},{"Key":"sequence that","Fragments":["is"]},{"Key":"is thousands","Fragments":["or"]},{"Key":"thousands or","Fragments":["millions"]},{"Key":"or millions","Fragments":["of"]},{"Key":"millions of","Fragments":["characters"]},{"Key":"characters long?","Fragments":["I'm"]},{"Key":"long? I'm","Fragments":["also"]},{"Key":"I'm also","Fragments":["not","not","wondering","not","not","not","not"]},{"Key":"performance regression","Fragments":["in"]},{"Key":"regression in","Fragments":["`string/replace`"]},{"Key":"in `string/replace`","Fragments":["versus"]},{"Key":"`string/replace` versus","Fragments":["a"]},{"Key":"versus a","Fragments":["`string/join`"]},{"Key":"a `string/join`","Fragments":["on"]},{"Key":"`string/join` on","Fragments":["a"]},{"Key":"a `map`,","Fragments":["or","because"]},{"Key":"`map`, or","Fragments":["anything"]},{"Key":"I've still","Fragments":["only"]},{"Key":"still only","Fragments":["just"]},{"Key":"just cut","Fragments":["my"]},{"Key":"cut my","Fragments":["teeth","teeth"]},{"Key":"my teeth","Fragments":["with","on"]},{"Key":"teeth with","Fragments":["Clojure,"]},{"Key":"with Clojure,","Fragments":["but","I"]},{"Key":"a ball,","Fragments":["so"]},{"Key":"ball, so","Fragments":["at"]},{"Key":"so at","Fragments":["least","first","the"]},{"Key":"least there's","Fragments":["that!"]},{"Key":"got some","Fragments":["help","weird"]},{"Key":"some help","Fragments":["from"]},{"Key":"help from","Fragments":["this"]},{"Key":"from this","Fragments":["code","example","exercise"]},{"Key":"I found:","Fragments":["https://github.com/iancw/exercism/blob/master/clojure/bob/bob.clj"]},{"Key":"I'd enjoy","Fragments":["learning"]},{"Key":"enjoy learning","Fragments":["about"]},{"Key":"learning about","Fragments":["the","the"]},{"Key":"the difference","Fragments":["between","between","between","between","between"]},{"Key":"and `defn`","Fragments":["and"]},{"Key":"`defn` and","Fragments":["how"]},{"Key":"make additional","Fragments":["functions"]},{"Key":"additional functions","Fragments":["so"]},{"Key":"functions so","Fragments":["that","that","that","that","that","the"]},{"Key":"like `","Fragments":["(="]},{"Key":"` (=","Fragments":["(upper-case","bottle_number"]},{"Key":"(upper-case phrase)","Fragments":["phrase)`"]},{"Key":"phrase) phrase)`","Fragments":["could"]},{"Key":"phrase)` could","Fragments":["move"]},{"Key":"could move","Fragments":["into","the"]},{"Key":"move into","Fragments":["its"]},{"Key":"Overall looks","Fragments":["pretty","good.","good.","good","real","good.","real","nice.","really","great."]},{"Key":"good. Nice","Fragments":["use"]},{"Key":"of `(range","Fragments":["65"]},{"Key":"`(range 65","Fragments":["91)`","91)`","91)`"]},{"Key":"65 91)`","Fragments":["you","might","is"]},{"Key":"91)` you","Fragments":["can"]},{"Key":"also do","Fragments":["`(range","somthing","a","`=`"]},{"Key":"do `(range","Fragments":["(int","start"]},{"Key":"`(range (int","Fragments":["\\A)"]},{"Key":"(int \\A)","Fragments":["(inc","(inc"]},{"Key":"\\A) (inc","Fragments":["(int","(int"]},{"Key":"(inc (int","Fragments":["\\Z)))`.","\\Z)))))"]},{"Key":"(int \\Z)))`.","Fragments":["That"]},{"Key":"\\Z)))`. That","Fragments":["might"]},{"Key":"That might","Fragments":["make","be","be","be","make","be","make"]},{"Key":" `(rand-int","Fragments":["(-"]},{"Key":"`(rand-int (-","Fragments":["800"]},{"Key":"(- 800","Fragments":["700))`"]},{"Key":"800 700))`","Fragments":["could"]},{"Key":"700))` could","Fragments":["be"]},{"Key":"be simplified","Fragments":["to","with","somewhat","further.","somewhat","by","a","to:","using","to","much","by","as","significantly","to","to","using","to"]},{"Key":"simplified to","Fragments":["`(rand-int","`#\"\\d\"`","`(=","`(def","`((get"]},{"Key":"to `(rand-int","Fragments":["100)`"]},{"Key":"`(rand-int 100)`","Fragments":["couldn't"]},{"Key":"100)` couldn't","Fragments":["it?"]},{"Key":"This limits","Fragments":["the"]},{"Key":"limits the","Fragments":["range"]},{"Key":"your random","Fragments":["integers"]},{"Key":"random integers","Fragments":["between"]},{"Key":"integers between","Fragments":["700"]},{"Key":"between 700","Fragments":["and"]},{"Key":"700 and","Fragments":["799."]},{"Key":"and 799.","Fragments":["Is"]},{"Key":"799. Is","Fragments":["that"]},{"Key":"bit out","Fragments":["of"]},{"Key":"my depth","Fragments":["here,"]},{"Key":"depth here,","Fragments":["but"]},{"Key":"but `robot-name`","Fragments":["might"]},{"Key":"`robot-name` might","Fragments":["not"]},{"Key":"be thread","Fragments":["safe"]},{"Key":"thread safe","Fragments":["with"]},{"Key":"safe with","Fragments":["the"]},{"Key":"empty check","Fragments":["followed"]},{"Key":"check followed","Fragments":["by"]},{"Key":"the `put-name`.","Fragments":["Possibly"]},{"Key":"`put-name`. Possibly","Fragments":["`dosync`"]},{"Key":"Possibly `dosync`","Fragments":["or"]},{"Key":"`dosync` or","Fragments":["something"]},{"Key":"something would","Fragments":["fix","be"]},{"Key":"would fix","Fragments":["that?"]},{"Key":"of 't-to-u'.","Fragments":["I"]},{"Key":"'t-to-u'. I","Fragments":["think"]},{"Key":"clearer especially","Fragments":["since"]},{"Key":"especially since","Fragments":["'t'","it's"]},{"Key":"since 't'","Fragments":["and"]},{"Key":"'t' and","Fragments":["'u'"]},{"Key":"and 'u'","Fragments":["are"]},{"Key":"'u' are","Fragments":["lowercase"]},{"Key":"are lowercase","Fragments":["while"]},{"Key":"lowercase while","Fragments":["the"]},{"Key":"are represented","Fragments":["by"]},{"Key":"by upper-case","Fragments":["characters."]},{"Key":"using ```seq```","Fragments":["instead"]},{"Key":"```seq``` instead","Fragments":["of"]},{"Key":"Joining the","Fragments":["empty"]},{"Key":"string feels","Fragments":["a"]},{"Key":"bit like","Fragments":["Python","cheating"]},{"Key":"like Python","Fragments":["rather"]},{"Key":"Python rather","Fragments":["than"]},{"Key":"than Clojure.","Fragments":["Have"]},{"Key":"Clojure. Have","Fragments":["you"]},{"Key":"at making","Fragments":["use"]},{"Key":"of ```str```","Fragments":["instead?"]},{"Key":"My above","Fragments":["points"]},{"Key":"above points","Fragments":["aside,"]},{"Key":"points aside,","Fragments":["the"]},{"Key":"aside, the","Fragments":["Clojure"]},{"Key":"Clojure string","Fragments":["library","functions."]},{"Key":"string library","Fragments":["has","at"]},{"Key":"library has","Fragments":["a"]},{"Key":"that saves","Fragments":["you"]},{"Key":"saves you","Fragments":["the"]},{"Key":"you the","Fragments":["trouble","list","\"case\"","last"]},{"Key":"the trouble","Fragments":["of"]},{"Key":"trouble of","Fragments":["having"]},{"Key":"individual characters","Fragments":["of","back"]},{"Key":"characters of","Fragments":["the"]},{"Key":"Ah whoops,","Fragments":["I've"]},{"Key":"whoops, I've","Fragments":["made"]},{"Key":"a blunder.","Fragments":["dna-seq"]},{"Key":"blunder. dna-seq","Fragments":["is"]},{"Key":"dna-seq is","Fragments":["a"]},{"Key":"a lazy-sequence","Fragments":["so"]},{"Key":"lazy-sequence so","Fragments":["all"]},{"Key":"results will","Fragments":["be"]},{"Key":"be invalid.","Fragments":["Here"]},{"Key":"invalid. Here","Fragments":["is"]},{"Key":"Here is","Fragments":["another"]},{"Key":"this time","Fragments":["I","to"]},{"Key":"I force","Fragments":["the"]},{"Key":"force the","Fragments":["lazy"]},{"Key":"the lazy","Fragments":["sequence"]},{"Key":"sequence into","Fragments":["a","a"]},{"Key":" dna\u003e","Fragments":["(def","(time","(time","(time","(def","(time","(time","(time"]},{"Key":"dna\u003e (def","Fragments":["dna-seq","dna-seq"]},{"Key":"(def dna-seq","Fragments":["(apply","(apply","(take","(take"]},{"Key":"dna-seq (apply","Fragments":["str","str"]},{"Key":"str (take","Fragments":["10000000","10000000","1000000"]},{"Key":"(take 10000000","Fragments":["(cycle","(cycle","(cycle","(cycle"]},{"Key":"10000000 (cycle","Fragments":["\"ACTG\"))))","\"ACTG\"))))","\"ACTG\")))","\"ACTG\")))"]},{"Key":"dna\u003e (time","Fragments":["(def","(def","(def","(def","(def","(def"]},{"Key":"(time (def","Fragments":["r","r","r","r","r","r","r","r","r","r","r","r"]},{"Key":"(def r","Fragments":["(to-rna","(to-rna","(to-rna","(clojure.string/replace","(clojure.string/replace","(clojure.string/replace","(to-rna","(to-rna","(to-rna","(clojure.string/replace","(clojure.string/replace","(clojure.string/replace"]},{"Key":"r (to-rna","Fragments":["dna-seq)))","dna-seq)))","dna-seq)))","dna-seq)))","dna-seq)))","dna-seq)))"]},{"Key":"time: 7031.555459","Fragments":["msecs\""]},{"Key":"time: 8488.025604","Fragments":["msecs\""]},{"Key":"time: 7884.769994","Fragments":["msecs\""]},{"Key":"; And","Fragments":["then","then"]},{"Key":"And then","Fragments":["for","for"]},{"Key":"then for","Fragments":["clojure.string/replace","clojure.string/replace"]},{"Key":" user\u003e","Fragments":["(def","(time","(time","(time","(def","(time","(time","(time","(apply","(silence?","(def","(time","(time","(time","(time"]},{"Key":"user\u003e (def","Fragments":["dna-seq","dna-seq","strand"]},{"Key":"user\u003e (time","Fragments":["(def","(def","(def","(def","(def","(def","(every?","(re-matches","(dotimes","(dotimes"]},{"Key":"r (clojure.string/replace","Fragments":["dna-seq","dna-seq","dna-seq","dna-seq","dna-seq","dna-seq"]},{"Key":"(clojure.string/replace dna-seq","Fragments":["\"T\"","\"T\"","\"T\"","\"T\"","\"T\"","\"T\""]},{"Key":"dna-seq \"T\"","Fragments":["\"U\")))","\"U\")))","\"U\")))","\"U\")))","\"U\")))","\"U\")))"]},{"Key":"time: 393.312562","Fragments":["msecs\""]},{"Key":"time: 524.314041","Fragments":["msecs\""]},{"Key":"time: 387.761321","Fragments":["msecs\""]},{"Key":"The results","Fragments":["are"]},{"Key":"results are","Fragments":["much","at"]},{"Key":"are much","Fragments":["more","less"]},{"Key":"more significant","Fragments":["this"]},{"Key":"significant this","Fragments":["time."]},{"Key":"time. I'll","Fragments":["leave"]},{"Key":"leave my","Fragments":["previous"]},{"Key":"previous comment","Fragments":["as","on"]},{"Key":"comment as","Fragments":["well"]},{"Key":"about interpreting","Fragments":["results"]},{"Key":"interpreting results","Fragments":["when"]},{"Key":"results when","Fragments":["working"]},{"Key":"with lazy","Fragments":["sequences"]},{"Key":"lazy sequences","Fragments":[":)"]},{"Key":"can perform","Fragments":["some"]},{"Key":"perform some","Fragments":["timing"]},{"Key":"some timing","Fragments":["tests:"]},{"Key":" **[Edit]","Fragments":["I"]},{"Key":"**[Edit] I","Fragments":["failed"]},{"Key":"I failed","Fragments":["to"]},{"Key":"failed to","Fragments":["take"]},{"Key":"take into","Fragments":["account"]},{"Key":"account that","Fragments":["dna-seq"]},{"Key":"that dna-seq","Fragments":["would"]},{"Key":"dna-seq would","Fragments":["be"]},{"Key":"lazy sequence.","Fragments":["See"]},{"Key":"sequence. See","Fragments":["my"]},{"Key":"my follow-up","Fragments":["comment"]},{"Key":"follow-up comment","Fragments":["below**"]},{"Key":"dna-seq (take","Fragments":["10000000","10000000"]},{"Key":"time: 19087.936434","Fragments":["msecs\""]},{"Key":"time: 11479.189682","Fragments":["msecs\""]},{"Key":"time: 11788.19571","Fragments":["msecs\""]},{"Key":"time: 14057.544615","Fragments":["msecs\""]},{"Key":"time: 0.110068","Fragments":["msecs\""]},{"Key":"time: 0.097038","Fragments":["msecs\""]},{"Key":"started separate","Fragments":["repls"]},{"Key":"separate repls","Fragments":["for"]},{"Key":"repls for","Fragments":["the"]},{"Key":"the above","Fragments":["so"]},{"Key":"above so","Fragments":["as"]},{"Key":"as not","Fragments":["to","to"]},{"Key":"to influence","Fragments":["the"]},{"Key":"influence the","Fragments":["results."]},{"Key":"the results.","Fragments":["I"]},{"Key":"results. I","Fragments":["also"]},{"Key":"also assigned","Fragments":["the"]},{"Key":"assigned the","Fragments":["return"]},{"Key":"return to","Fragments":["r"]},{"Key":"to r","Fragments":["so"]},{"Key":"r so","Fragments":["as"]},{"Key":"to clutter","Fragments":["the"]},{"Key":"the repl","Fragments":["with","I"]},{"Key":"repl with","Fragments":["a"]},{"Key":"a 40","Fragments":["million"]},{"Key":"40 million","Fragments":["character"]},{"Key":"million character","Fragments":["long"]},{"Key":"character long","Fragments":["string"]},{"Key":"long string","Fragments":[":)"]},{"Key":"that ```clojure.string/replace```","Fragments":["is"]},{"Key":"```clojure.string/replace``` is","Fragments":["a"]},{"Key":"choice although","Fragments":["interestingly"]},{"Key":"although interestingly","Fragments":["enough"]},{"Key":"interestingly enough","Fragments":["I"]},{"Key":"enough I","Fragments":["found","was"]},{"Key":"that 1","Fragments":["million"]},{"Key":"1 million","Fragments":["cycles"]},{"Key":"million cycles","Fragments":["of"]},{"Key":"cycles of","Fragments":["\"ACTG\""]},{"Key":"of \"ACTG\"","Fragments":["was"]},{"Key":"\"ACTG\" was","Fragments":["a"]},{"Key":"a fraction","Fragments":["faster"]},{"Key":"fraction faster","Fragments":["with"]},{"Key":"faster with","Fragments":["your"]},{"Key":"your to-rna","Fragments":["function."]},{"Key":"to-rna function.","Fragments":["Although"]},{"Key":"function. Although","Fragments":["at"]},{"Key":"Although at","Fragments":["10"]},{"Key":"at 10","Fragments":["million","line"]},{"Key":"10 million","Fragments":["```replace```"]},{"Key":"million ```replace```","Fragments":["is"]},{"Key":"```replace``` is","Fragments":["clearly"]},{"Key":"is clearly","Fragments":["faster"]},{"Key":"clearly faster","Fragments":["and"]},{"Key":"big advantage","Fragments":["with"]},{"Key":"advantage with","Fragments":["rerunning"]},{"Key":"with rerunning","Fragments":["the"]},{"Key":"rerunning the","Fragments":["function"]},{"Key":"times on","Fragments":["the","the"]},{"Key":" BTW,","Fragments":["instead"]},{"Key":"BTW, instead","Fragments":["of"]},{"Key":"of joining","Fragments":["on"]},{"Key":"joining on","Fragments":["an"]},{"Key":"string the","Fragments":["```str```","way"]},{"Key":"the ```str```","Fragments":["function"]},{"Key":"```str``` function","Fragments":["is"]},{"Key":"user\u003e (apply","Fragments":["str"]},{"Key":"str [\"A\"","Fragments":["\"C\""]},{"Key":"[\"A\" \"C\"","Fragments":["\"T\""]},{"Key":"\"C\" \"T\"","Fragments":["\"G\"])"]},{"Key":"Just wanted","Fragments":["to","to"]},{"Key":"to add:","Fragments":["how"]},{"Key":"add: how","Fragments":["I"]},{"Key":"caught that","Fragments":["I"]},{"Key":"had screwed","Fragments":["up"]},{"Key":"screwed up","Fragments":["the"]},{"Key":"first batch","Fragments":["of"]},{"Key":"batch of","Fragments":["tests"]},{"Key":"of tests","Fragments":["is","did","in"]},{"Key":"tests is","Fragments":["that"]},{"Key":"I ran","Fragments":["the","across"]},{"Key":"same tests","Fragments":["across"]},{"Key":"tests across","Fragments":["my"]},{"Key":"across my","Fragments":["to-rna"]},{"Key":"my to-rna","Fragments":["function"]},{"Key":"to-rna function","Fragments":["where"]},{"Key":"function where","Fragments":["I","I","they're","`set`"]},{"Key":"use ```clojure.string/replace```.","Fragments":["I"]},{"Key":"```clojure.string/replace```. I","Fragments":["have"]},{"Key":"have :pre","Fragments":["and"]},{"Key":":pre and","Fragments":[":post",":post",":post"]},{"Key":"and :post","Fragments":["conditions","clauses","conditions."]},{"Key":":post conditions","Fragments":["in"]},{"Key":"I validate","Fragments":["that"]},{"Key":"validate that","Fragments":["the","the"]},{"Key":"and output","Fragments":["are","as"]},{"Key":"output are","Fragments":["valid"]},{"Key":"rna sequences.","Fragments":["These"]},{"Key":"sequences. These","Fragments":["were"]},{"Key":"These were","Fragments":["failing"]},{"Key":"were failing","Fragments":["which"]},{"Key":"failing which","Fragments":["caused"]},{"Key":"which caused","Fragments":["me"]},{"Key":"caused me","Fragments":["to"]},{"Key":"look further","Fragments":["into"]},{"Key":"further into","Fragments":["why."]},{"Key":"No doubt","Fragments":["the"]},{"Key":"doubt the","Fragments":["tests"]},{"Key":"have picked","Fragments":["up"]},{"Key":"too but","Fragments":["since"]},{"Key":"was working","Fragments":["in","on"]},{"Key":"repl I","Fragments":["never"]},{"Key":"I never","Fragments":["ran","quite"]},{"Key":"never ran","Fragments":["the"]},{"Key":"tests over","Fragments":["them."]},{"Key":"over them.","Fragments":["That's"]},{"Key":"them. That's","Fragments":["something","a"]},{"Key":"mind. I","Fragments":["see","considered"]},{"Key":"that since","Fragments":["it","I've"]},{"Key":"it bit","Fragments":["me"]},{"Key":"bit me","Fragments":["now"]},{"Key":"me now","Fragments":["I'll"]},{"Key":"now I'll","Fragments":["certainly"]},{"Key":"I'll certainly","Fragments":["watch"]},{"Key":"certainly watch","Fragments":["out"]},{"Key":"watch out","Fragments":["for"]},{"Key":"out for","Fragments":["that"]},{"Key":"considered alternatives","Fragments":["to","to"]},{"Key":"alternatives to","Fragments":["the","the"]},{"Key":"example, ```silence?```","Fragments":["doesn't"]},{"Key":"```silence?``` doesn't","Fragments":["really"]},{"Key":"really return","Fragments":["true"]},{"Key":"true *only*","Fragments":["when"]},{"Key":"*only* when","Fragments":["the"]},{"Key":"the msg","Fragments":["is"]},{"Key":"msg is","Fragments":["empty"]},{"Key":"user\u003e (silence?","Fragments":["\"4?\")"]},{"Key":"see also","Fragments":["that"]},{"Key":"that according","Fragments":["to"]},{"Key":"according to","Fragments":["your","your","the"]},{"Key":"your ```question?```","Fragments":["function"]},{"Key":"```question?``` function","Fragments":["a"]},{"Key":"function a","Fragments":["question","bit,","little","bit","bit","calls","bit","bit."]},{"Key":"question can","Fragments":["never"]},{"Key":"can never","Fragments":["be"]},{"Key":"never be","Fragments":["yelled."]},{"Key":"be yelled.","Fragments":["Conceivably"]},{"Key":"yelled. Conceivably","Fragments":["something"]},{"Key":"Conceivably something","Fragments":["could"]},{"Key":"something could","Fragments":["be"]},{"Key":"be both","Fragments":["yelled"]},{"Key":"both yelled","Fragments":["and"]},{"Key":"yelled and","Fragments":["a"]},{"Key":"a question.","Fragments":["What","So","The"]},{"Key":"question. What","Fragments":["do"]},{"Key":"about letting","Fragments":["a"]},{"Key":"letting a","Fragments":["question"]},{"Key":"question be","Fragments":["true"]},{"Key":"be true","Fragments":["in","up","about","about","for"]},{"Key":"both cases","Fragments":["and"]},{"Key":"cases and","Fragments":["letting","states"]},{"Key":"and letting","Fragments":["the"]},{"Key":"letting the","Fragments":["ordering"]},{"Key":"ordering in","Fragments":["the"]},{"Key":"cond take","Fragments":["care"]},{"Key":"take care","Fragments":["of","of","of"]},{"Key":"correct response","Fragments":["for"]},{"Key":"a yelled","Fragments":["question."]},{"Key":"yelled question.","Fragments":["This"]},{"Key":"question. This","Fragments":["also"]},{"Key":"This also","Fragments":["decouples"]},{"Key":"also decouples","Fragments":["```question?```"]},{"Key":"decouples ```question?```","Fragments":["from"]},{"Key":"```question?``` from","Fragments":["the"]},{"Key":"the ```yelling?```","Fragments":["and"]},{"Key":"```yelling?``` and","Fragments":["```silence?```"]},{"Key":"and ```silence?```","Fragments":["functions"]},{"Key":"```silence?``` functions","Fragments":["which"]},{"Key":"functions which","Fragments":["it","would","are","removed"]},{"Key":"which it","Fragments":["now","does,","doesn't."]},{"Key":"it now","Fragments":["depends"]},{"Key":"now depends","Fragments":["on."]},{"Key":"One possible","Fragments":["improvement","simplification"]},{"Key":"possible improvement","Fragments":["might"]},{"Key":"improvement might","Fragments":["be"]},{"Key":"pull \"T\"","Fragments":["and"]},{"Key":"\"U\" into","Fragments":["constants,"]},{"Key":"into constants,","Fragments":["so"]},{"Key":"constants, so","Fragments":["it's"]},{"Key":" `defn`","Fragments":["is"]},{"Key":"a shorthand","Fragments":["for","function"]},{"Key":"have here,","Fragments":["it"]},{"Key":"will expand","Fragments":["into"]},{"Key":"expand into","Fragments":["the"]},{"Key":" user=\u003e","Fragments":["(macroexpand","(defn","(scope-test)","my-value","(defn","(scope-test)","my-other-value","\"\"\"xyz\"\"\"","(list","(if","(if"]},{"Key":"user=\u003e (macroexpand","Fragments":["'(defn"]},{"Key":"(macroexpand '(defn","Fragments":["foo"]},{"Key":"'(defn foo","Fragments":["[]"]},{"Key":"foo []","Fragments":["5))"]},{"Key":"(def foo","Fragments":["(clojure.core/fn"]},{"Key":"foo (clojure.core/fn","Fragments":["([]"]},{"Key":"(clojure.core/fn ([]","Fragments":["5)))"]},{"Key":"define other","Fragments":["functions"]},{"Key":"same way.","Fragments":["If"]},{"Key":"way. If","Fragments":["you"]},{"Key":"use `defn-`,","Fragments":["the"]},{"Key":"`defn-`, the","Fragments":["resulting"]},{"Key":"the resulting","Fragments":["functions","`fn`"]},{"Key":"resulting functions","Fragments":["will"]},{"Key":"private. One","Fragments":["thing"]},{"Key":"thing about","Fragments":["Clojure"]},{"Key":"functions need","Fragments":["to"]},{"Key":"be either","Fragments":["defined","A,"]},{"Key":"either defined","Fragments":["or"]},{"Key":"defined or","Fragments":["declared"]},{"Key":"or declared","Fragments":["before"]},{"Key":"declared before","Fragments":["their"]},{"Key":"before their","Fragments":["use,"]},{"Key":"their use,","Fragments":["so"]},{"Key":"use, so","Fragments":["if"]},{"Key":"helpers below","Fragments":["the"]},{"Key":"below the","Fragments":["main"]},{"Key":"main method","Fragments":["you","more"]},{"Key":"method you","Fragments":["will","might"]},{"Key":"with `(declare","Fragments":["some-function)`."]},{"Key":" @mackenzie","Fragments":["Thanks"]},{"Key":"@mackenzie Thanks","Fragments":["so"]},{"Key":"on performance","Fragments":["testing!"]},{"Key":"performance testing!","Fragments":["I'm"]},{"Key":"testing! I'm","Fragments":["still"]},{"Key":"still adapting","Fragments":["to"]},{"Key":"adapting to","Fragments":["the"]},{"Key":"language itself,","Fragments":["so"]},{"Key":"itself, so","Fragments":["I"]},{"Key":"be exposed","Fragments":["to"]},{"Key":"exposed to","Fragments":["performance"]},{"Key":"to performance","Fragments":["metrics"]},{"Key":"performance metrics","Fragments":["for"]},{"Key":"metrics for","Fragments":["a"]},{"Key":"while longer","Fragments":["yet"]},{"Key":"longer yet","Fragments":["without"]},{"Key":"yet without","Fragments":["your"]},{"Key":"without your","Fragments":["help."]},{"Key":"common naming","Fragments":["convention"]},{"Key":"naming convention","Fragments":["is","in"]},{"Key":"convention is","Fragments":["to"]},{"Key":"use `a-\u003eb`","Fragments":["to"]},{"Key":"`a-\u003eb` to","Fragments":["name"]},{"Key":"name conversion","Fragments":["methods,"]},{"Key":"conversion methods,","Fragments":["so"]},{"Key":"methods, so","Fragments":["it"]},{"Key":"function `string-\u003esorted-chars`,","Fragments":["see"]},{"Key":"`string-\u003esorted-chars`, see","Fragments":["https://github.com/bbatsov/clojure-style-guide/blob/master/README.md#naming."]},{"Key":"not totally","Fragments":["clear"]},{"Key":"totally clear","Fragments":["what"]},{"Key":"what `ws`","Fragments":["and"]},{"Key":"`ws` and","Fragments":["`w`"]},{"Key":"and `w`","Fragments":["represent,"]},{"Key":"`w` represent,","Fragments":["maybe"]},{"Key":"represent, maybe","Fragments":["you"]},{"Key":"use more","Fragments":["descriptive","functional","of","descriptive"]},{"Key":" Rewrote","Fragments":["to"]},{"Key":"Rewrote to","Fragments":["use"]},{"Key":"use macros,","Fragments":["but"]},{"Key":"had troubles","Fragments":["with"]},{"Key":"troubles with","Fragments":["getting"]},{"Key":"macro expansion","Fragments":["to"]},{"Key":"expansion to","Fragments":["work"]},{"Key":"loop over","Fragments":["data.","the"]},{"Key":"Sure enough.","Fragments":["The"]},{"Key":"enough. The","Fragments":["actual"]},{"Key":"The actual","Fragments":["set","code"]},{"Key":"actual set","Fragments":["comparison"]},{"Key":"set comparison","Fragments":["is"]},{"Key":"comparison is","Fragments":["far","probably"]},{"Key":"far faster,","Fragments":["of"]},{"Key":"faster, of","Fragments":["course,"]},{"Key":"but parsing","Fragments":["the"]},{"Key":"parsing the","Fragments":["strand"]},{"Key":"the strand","Fragments":["into","up"]},{"Key":"strand into","Fragments":["a"]},{"Key":"set takes","Fragments":["longer"]},{"Key":"takes longer","Fragments":["than"]},{"Key":"than doing","Fragments":["the"]},{"Key":"the re-match","Fragments":["(at"]},{"Key":"re-match (at","Fragments":["least"]},{"Key":"(at least","Fragments":["for","to"]},{"Key":"least for","Fragments":["a"]},{"Key":"long strand","Fragments":["like"]},{"Key":"strand like","Fragments":["this)."]},{"Key":"like this).","Fragments":["Good"]},{"Key":"this). Good","Fragments":["to"]},{"Key":"Also, not","Fragments":["that"]},{"Key":"that exercism","Fragments":["has"]},{"Key":"exercism has","Fragments":["any"]},{"Key":"has any","Fragments":["*rules*","letters"]},{"Key":"any *rules*","Fragments":["per"]},{"Key":"*rules* per","Fragments":["se,"]},{"Key":"per se,","Fragments":["but"]},{"Key":"se, but","Fragments":["what"]},{"Key":"do people","Fragments":["think"]},{"Key":"people think","Fragments":["about"]},{"Key":"using external","Fragments":["libraries"]},{"Key":"external libraries","Fragments":["as"]},{"Key":"libraries as","Fragments":["part"]},{"Key":"as part","Fragments":["of","of","of"]},{"Key":"your solutions?","Fragments":["So"]},{"Key":"solutions? So","Fragments":["in"]},{"Key":"could look","Fragments":["at","like","at","into","at","like:","into"]},{"Key":"at `clj-time`","Fragments":["to"]},{"Key":"`clj-time` to","Fragments":["provide"]},{"Key":"to provide","Fragments":["a","this","a"]},{"Key":"a slightly","Fragments":["nicer","different","different","more"]},{"Key":"slightly nicer","Fragments":["datetime"]},{"Key":"nicer datetime","Fragments":["library?"]},{"Key":"submitted this","Fragments":["even"]},{"Key":"this even","Fragments":["though"]},{"Key":"though it","Fragments":["doesn't","compiles,"]},{"Key":"just in","Fragments":["the","Clojure"]},{"Key":"the hope","Fragments":["that"]},{"Key":"hope that","Fragments":["I","I"]},{"Key":"it an","Fragments":["easier"]},{"Key":"easier problem","Fragments":["to"]},{"Key":"to tackle.","Fragments":["Dealing"]},{"Key":"tackle. Dealing","Fragments":["with"]},{"Key":"Dealing with","Fragments":["java"]},{"Key":"with java","Fragments":["dates"]},{"Key":"java dates","Fragments":["is"]},{"Key":"dates is","Fragments":["horrendous,"]},{"Key":"is horrendous,","Fragments":["this"]},{"Key":"horrendous, this","Fragments":["code"]},{"Key":"is hellish,","Fragments":["there"]},{"Key":"hellish, there","Fragments":["has"]},{"Key":"there has","Fragments":["to","to"]},{"Key":"better way.","Fragments":["Been"]},{"Key":"way. Been","Fragments":["trying"]},{"Key":"Been trying","Fragments":["to"]},{"Key":"to debug","Fragments":["this"]},{"Key":"debug this","Fragments":["for"]},{"Key":"little while","Fragments":["this"]},{"Key":"while this","Fragments":["afternoon,"]},{"Key":"this afternoon,","Fragments":["but"]},{"Key":"afternoon, but","Fragments":["it's"]},{"Key":"it's a)","Fragments":["not"]},{"Key":"a) not","Fragments":["very"]},{"Key":"very easy","Fragments":["to","to","to","to","to"]},{"Key":"do and","Fragments":["b)"]},{"Key":"b) not","Fragments":["very"]},{"Key":"very fun,","Fragments":["so"]},{"Key":"fun, so","Fragments":["I've"]},{"Key":"I've reached","Fragments":["my"]},{"Key":"reached my","Fragments":["boredom"]},{"Key":"my boredom","Fragments":["threshold"]},{"Key":"boredom threshold","Fragments":["with"]},{"Key":"threshold with","Fragments":["it."]},{"Key":"is by","Fragments":["far","checking","default."]},{"Key":"by far","Fragments":["and"]},{"Key":"far and","Fragments":["away"]},{"Key":"and away","Fragments":["my"]},{"Key":"away my","Fragments":["least"]},{"Key":"least favourite","Fragments":["exercise."]},{"Key":"Thanks @forrest","Fragments":["I"]},{"Key":"@forrest I","Fragments":["had"]},{"Key":"had forgotten","Fragments":["about"]},{"Key":"that little","Fragments":["syntax"]},{"Key":"little syntax","Fragments":["sugar."]},{"Key":"syntax sugar.","Fragments":["Bless"]},{"Key":"sugar. Bless","Fragments":["Rich"]},{"Key":"Bless Rich","Fragments":["Hickey's"]},{"Key":"Rich Hickey's","Fragments":["heart"]},{"Key":"Hickey's heart","Fragments":["for"]},{"Key":"heart for","Fragments":["that"]},{"Key":" Here,","Fragments":["I've"]},{"Key":"Here, I've","Fragments":["added"]},{"Key":"added defined","Fragments":["values"]},{"Key":"defined values","Fragments":["to"]},{"Key":"values to","Fragments":["make"]},{"Key":"tips ,","Fragments":["thanks"]},{"Key":", thanks","Fragments":["@amalia."]},{"Key":"last point","Fragments":[":"]},{"Key":" Refs","Fragments":["are"]},{"Key":"Refs are","Fragments":["'coordinated'"]},{"Key":"are 'coordinated'","Fragments":["while"]},{"Key":"'coordinated' while","Fragments":["agents"]},{"Key":"while agents","Fragments":["and"]},{"Key":"agents and","Fragments":["atoms"]},{"Key":"and atoms","Fragments":["are"]},{"Key":"atoms are","Fragments":["'uncoordinated'."]},{"Key":"are 'uncoordinated'.","Fragments":["This"]},{"Key":"'uncoordinated'. This","Fragments":["means"]},{"Key":"This means","Fragments":["that"]},{"Key":"a multi-threaded","Fragments":["environment,"]},{"Key":"multi-threaded environment,","Fragments":["refs"]},{"Key":"environment, refs","Fragments":["are"]},{"Key":"are modified","Fragments":["in"]},{"Key":"modified in","Fragments":["a"]},{"Key":"a transaction","Fragments":["which","which"]},{"Key":"transaction which","Fragments":["ensures","would"]},{"Key":"which ensures","Fragments":["that"]},{"Key":"ensures that","Fragments":["only"]},{"Key":"that only","Fragments":["one"]},{"Key":"one thread","Fragments":["can"]},{"Key":"thread can","Fragments":["modify"]},{"Key":"can modify","Fragments":["the","it."]},{"Key":"a time.","Fragments":["Whereas"]},{"Key":"time. Whereas","Fragments":["atoms"]},{"Key":"Whereas atoms","Fragments":["and"]},{"Key":"atoms and","Fragments":["agents","that","refs"]},{"Key":"and agents","Fragments":["queue"]},{"Key":"agents queue","Fragments":["up"]},{"Key":"queue up","Fragments":["change"]},{"Key":"up change","Fragments":["functions"]},{"Key":"change functions","Fragments":["to"]},{"Key":"the changes","Fragments":["occur","for","to"]},{"Key":"changes occur","Fragments":["atomically."]},{"Key":"occur atomically.","Fragments":["All"]},{"Key":"atomically. All","Fragments":["of"]},{"Key":"All of","Fragments":["them"]},{"Key":"are 'safe',","Fragments":["they"]},{"Key":"'safe', they","Fragments":["just"]},{"Key":"they just","Fragments":["use"]},{"Key":"use different","Fragments":["strategies","if-else"]},{"Key":"different strategies","Fragments":["to"]},{"Key":"strategies to","Fragments":["provide"]},{"Key":"provide this","Fragments":["'safety'."]},{"Key":" Generate","Fragments":["functions"]},{"Key":"Generate functions","Fragments":["from"]},{"Key":"from data.","Fragments":["Still"]},{"Key":"data. Still","Fragments":["wish"]},{"Key":"Still wish","Fragments":["I","I"]},{"Key":"wish I","Fragments":["could","could","could","had","had"]},{"Key":"could figure","Fragments":["out"]},{"Key":"that work","Fragments":["with"]},{"Key":"That's good","Fragments":["idea."]},{"Key":"idea. I'll","Fragments":["update"]},{"Key":"I'll update","Fragments":["my"]},{"Key":"update my","Fragments":["code"]},{"Key":"that's how","Fragments":["it"]},{"Key":" think","Fragments":["my","I"]},{"Key":"my shouty?","Fragments":["implementation"]},{"Key":"shouty? implementation","Fragments":["is"]},{"Key":"pretty rubbish.","Fragments":["Surely"]},{"Key":"rubbish. Surely","Fragments":["possible"]},{"Key":"Surely possible","Fragments":["in"]},{"Key":"possible in","Fragments":["a"]},{"Key":"single regex,","Fragments":["but"]},{"Key":"regex, but","Fragments":["regex","not"]},{"Key":"but regex","Fragments":["is"]},{"Key":"my strongest","Fragments":["point"]},{"Key":"I removed","Fragments":["`*-response`","the","the"]},{"Key":"removed `*-response`","Fragments":["vars,"]},{"Key":"vars, and","Fragments":["checking"]},{"Key":"and checking","Fragments":["`not","for"]},{"Key":"checking `not","Fragments":["silence?`"]},{"Key":"`not silence?`","Fragments":["in"]},{"Key":"silence?` in","Fragments":["`shout?`"]},{"Key":"in `shout?`","Fragments":["function.","was"]},{"Key":"`let` around","Fragments":["a"]},{"Key":"around a","Fragments":["`defn`","little"]},{"Key":"a `defn`","Fragments":["before,"]},{"Key":"`defn` before,","Fragments":["it's"]},{"Key":"before, it's","Fragments":["interesting"]},{"Key":"it's interesting","Fragments":[":)"]},{"Key":"interesting :)","Fragments":["I"]},{"Key":"it inside,","Fragments":["or"]},{"Key":"inside, or","Fragments":["to"]},{"Key":"or to","Fragments":["define","wrap","move","add"]},{"Key":"values with","Fragments":["`def`s,"]},{"Key":"with `def`s,","Fragments":["just"]},{"Key":"`def`s, just","Fragments":["so"]},{"Key":"my `defn`s","Fragments":["are"]},{"Key":"`defn`s are","Fragments":["at"]},{"Key":"can kind","Fragments":["of"]},{"Key":"of see","Fragments":["the"]},{"Key":"for doing","Fragments":["it","the","these"]},{"Key":"at `cond`,","Fragments":["it's"]},{"Key":"`cond`, it's","Fragments":["a"]},{"Key":"of `if`","Fragments":["that","for","in"]},{"Key":"`if` that","Fragments":["does"]},{"Key":"Feel like","Fragments":["I"]},{"Key":"one :\\","Fragments":["Should"]},{"Key":":\\ Should","Fragments":["this"]},{"Key":"Should this","Fragments":["have"]},{"Key":"this have","Fragments":["been"]},{"Key":"first program?","Fragments":["Can't"]},{"Key":"program? Can't","Fragments":["imagine"]},{"Key":"Can't imagine","Fragments":["this"]},{"Key":"imagine this","Fragments":["being"]},{"Key":"this being","Fragments":["difficult"]},{"Key":"being difficult","Fragments":["in"]},{"Key":"difficult in","Fragments":["any"]},{"Key":"language. Bob","Fragments":["was"]},{"Key":"Bob was","Fragments":["significantly","asked"]},{"Key":"was significantly","Fragments":["more"]},{"Key":"more challenging","Fragments":["as"]},{"Key":"challenging as","Fragments":["a"]},{"Key":"one takes","Fragments":["the"]},{"Key":"of `to-rna`","Fragments":["out"]},{"Key":"`to-rna` out","Fragments":["of"]},{"Key":"`let` closure","Fragments":["and"]},{"Key":"the definitions","Fragments":["of"]},{"Key":"definitions of","Fragments":["thymidine"]},{"Key":"uracil public.","Fragments":["It"]},{"Key":"public. It","Fragments":["makes"]},{"Key":"sense because","Fragments":["thymidine"]},{"Key":"because thymidine","Fragments":["and"]},{"Key":"uracil are","Fragments":["things"]},{"Key":"are things","Fragments":["one"]},{"Key":"one might","Fragments":["expect"]},{"Key":"might expect","Fragments":["defined"]},{"Key":"expect defined","Fragments":["in"]},{"Key":"namespace called","Fragments":["'dna'."]},{"Key":"your definition","Fragments":["of"]},{"Key":"silence function","Fragments":["can"]},{"Key":"the inbuilt","Fragments":["blank?"]},{"Key":"inbuilt blank?","Fragments":["function."]},{"Key":" for","Fragments":["(question?)"]},{"Key":"for (question?)","Fragments":["you"]},{"Key":"(question?) you","Fragments":["could"]},{"Key":"do somthing","Fragments":["like"]},{"Key":"(last phrase)","Fragments":["\\?)"]},{"Key":"ask a","Fragments":["friend"]},{"Key":"a friend","Fragments":["what"]},{"Key":"friend what","Fragments":["`-\u003e\u003e`"]},{"Key":"what `-\u003e\u003e`","Fragments":["was"]},{"Key":"`-\u003e\u003e` was","Fragments":["and"]},{"Key":"was and","Fragments":["how"]},{"Key":"works. Pretty","Fragments":["sweet"]},{"Key":"Pretty sweet","Fragments":["usage"]},{"Key":"sweet usage","Fragments":["there"]},{"Key":"usage there","Fragments":[":)"]},{"Key":"there :)","Fragments":["thanks"]},{"Key":":) thanks","Fragments":["for"]},{"Key":"for showing","Fragments":["me"]},{"Key":"showing me","Fragments":["a"]},{"Key":"thing or","Fragments":["three!"]},{"Key":"was tough","Fragments":["for"]},{"Key":"for me...","Fragments":["The"]},{"Key":"me... The","Fragments":["recursion"]},{"Key":"The recursion","Fragments":["broke"]},{"Key":"recursion broke","Fragments":["my"]},{"Key":"broke my","Fragments":["brain."]},{"Key":"my brain.","Fragments":["There","Thank"]},{"Key":"brain. There","Fragments":["are"]},{"Key":"like about","Fragments":["this"]},{"Key":"1. `verse-template`","Fragments":["probably"]},{"Key":"`verse-template` probably","Fragments":["just"]},{"Key":"just does","Fragments":["too","too"]},{"Key":"2. lots","Fragments":["of"]},{"Key":"of conditional","Fragments":["logic"]},{"Key":"3. the","Fragments":["`loop`..`recur`"]},{"Key":"the `loop`..`recur`","Fragments":["structure"]},{"Key":"`loop`..`recur` structure","Fragments":["in"]},{"Key":"structure in","Fragments":["`sing`","the"]},{"Key":"`sing` seems","Fragments":["like"]},{"Key":"appropriate higher-order","Fragments":["function"]},{"Key":"to comprehend","Fragments":["compared"]},{"Key":"comprehend compared","Fragments":["to"]},{"Key":"to #1.","Fragments":["Thoughts?"]},{"Key":" Tried","Fragments":["with","out","to","using"]},{"Key":"Tried with","Fragments":["`Math.pow`"]},{"Key":"with `Math.pow`","Fragments":["but"]},{"Key":"`Math.pow` but","Fragments":["ran"]},{"Key":"but ran","Fragments":["into","foul"]},{"Key":"ran into","Fragments":["issues"]},{"Key":"into issues","Fragments":["with"]},{"Key":"with overflows","Fragments":["and"]},{"Key":"overflows and","Fragments":["whatnot,"]},{"Key":"and whatnot,","Fragments":["so"]},{"Key":"whatnot, so","Fragments":["took"]},{"Key":"so took","Fragments":["this"]},{"Key":"took this","Fragments":["route","exercise","exercise"]},{"Key":"No problem.","Fragments":["Since","I"]},{"Key":"problem. Since","Fragments":["you"]},{"Key":"you raised","Fragments":["the"]},{"Key":"raised the","Fragments":["question"]},{"Key":"question I","Fragments":["was"]},{"Key":"was interested","Fragments":["too"]},{"Key":"interested too","Fragments":["as"]},{"Key":"too as","Fragments":["to"]},{"Key":"the performance","Fragments":["differences","tip!","issue"]},{"Key":"performance differences","Fragments":["were"]},{"Key":"differences were","Fragments":[":)"]},{"Key":"you haven't","Fragments":["made"]},{"Key":"haven't made","Fragments":["any"]},{"Key":"made any","Fragments":["further"]},{"Key":"any further","Fragments":["iterations","insight"]},{"Key":"further iterations","Fragments":["to"]},{"Key":"iterations to","Fragments":["your"]},{"Key":"code? Have","Fragments":["you"]},{"Key":"you decided","Fragments":["to"]},{"Key":"Thanks @brooke!","Fragments":["I'd"]},{"Key":"@brooke! I'd","Fragments":["forgotten"]},{"Key":"convention in","Fragments":["the"]},{"Key":"guide. I've","Fragments":["posted"]},{"Key":"I've posted","Fragments":["a"]},{"Key":"posted a","Fragments":["new"]},{"Key":"new iteration","Fragments":["changing","as"]},{"Key":"iteration changing","Fragments":["that."]},{"Key":"your ```to-rna```","Fragments":["function"]},{"Key":"```to-rna``` function","Fragments":["through"]},{"Key":"function through","Fragments":["using"]},{"Key":"through using","Fragments":["```clojure.string/replace```."]},{"Key":"using ```clojure.string/replace```.","Fragments":["Have"]},{"Key":"```clojure.string/replace```. Have","Fragments":["you"]},{"Key":"considered the","Fragments":["[condition"]},{"Key":"the [condition","Fragments":["map"]},{"Key":"[condition map","Fragments":["special"]},{"Key":"map special","Fragments":["form](http://clojure.org/special_forms#toc10)"]},{"Key":"special form](http://clojure.org/special_forms#toc10)","Fragments":["for"]},{"Key":"form](http://clojure.org/special_forms#toc10) for","Fragments":["the"]},{"Key":"Much happier","Fragments":["with"]},{"Key":"happier with","Fragments":["the","this","this"]},{"Key":"the addition","Fragments":["of"]},{"Key":"addition of","Fragments":["the"]},{"Key":"the interleaved","Fragments":["map"]},{"Key":"interleaved map","Fragments":["in"]},{"Key":"in `beer/sing`","Fragments":["and"]},{"Key":"`beer/sing` and","Fragments":["big"]},{"Key":"and big","Fragments":["shout"]},{"Key":"big shout","Fragments":["out"]},{"Key":"shout out","Fragments":["to"]},{"Key":"to @jeanie","Fragments":["for"]},{"Key":"@jeanie for","Fragments":["the"]},{"Key":"that. `beer/verse`","Fragments":["still"]},{"Key":"`beer/verse` still","Fragments":["leaves"]},{"Key":"still leaves","Fragments":["something"]},{"Key":"leaves something","Fragments":["to"]},{"Key":"be desired,","Fragments":["but"]},{"Key":"desired, but","Fragments":["it's"]},{"Key":"not immediately","Fragments":["apparent","apparent"]},{"Key":"immediately apparent","Fragments":["to","until"]},{"Key":"apparent to","Fragments":["me"]},{"Key":"good call;","Fragments":["I"]},{"Key":"call; I","Fragments":["forgot"]},{"Key":"Very clear","Fragments":["and"]},{"Key":"one suggestion:","Fragments":["you"]},{"Key":"suggestion: you","Fragments":["might"]},{"Key":"might like","Fragments":["to","that"]},{"Key":"move your","Fragments":["library"]},{"Key":"your library","Fragments":["imports"]},{"Key":"library imports","Fragments":["into"]},{"Key":"imports into","Fragments":["the"]},{"Key":"declaration so","Fragments":["something","you"]},{"Key":"so something","Fragments":["like","like"]},{"Key":"[upper-case lower-case","Fragments":["blank?]]))","blank?]])"]},{"Key":"The other","Fragments":["way","thing","thing"]},{"Key":"considered for","Fragments":["doing"]},{"Key":"the :pre","Fragments":["assertion","condition","clause","keyword"]},{"Key":":pre assertion","Fragments":["is"]},{"Key":"assertion is","Fragments":["by"]},{"Key":"that `(set","Fragments":["strand)`"]},{"Key":"`(set strand)`","Fragments":["is"]},{"Key":"strand)` is","Fragments":["a"]},{"Key":"of `#{A","Fragments":["C"]},{"Key":"`#{A C","Fragments":["G"]},{"Key":"C G","Fragments":["T}`."]},{"Key":"G T}`.","Fragments":["I"]},{"Key":"T}`. I","Fragments":["suspect"]},{"Key":"I suspect","Fragments":["that"]},{"Key":"using `re-matches`?","Fragments":["Don't"]},{"Key":"`re-matches`? Don't","Fragments":["know"]},{"Key":"Don't know","Fragments":["enough"]},{"Key":"know enough","Fragments":["to"]},{"Key":"did but","Fragments":["it"]},{"Key":"actually looks","Fragments":["like","very"]},{"Key":"your ```re-matches```","Fragments":["is"]},{"Key":"```re-matches``` is","Fragments":["faster:"]},{"Key":"(def strand","Fragments":["(apply"]},{"Key":"strand (apply","Fragments":["str"]},{"Key":"(take 1000000","Fragments":["(cycle"]},{"Key":"1000000 (cycle","Fragments":["\"ACGT\"))))"]},{"Key":"(time (every?","Fragments":["#{\\A"]},{"Key":"(every? #{\\A","Fragments":["\\C"]},{"Key":"#{\\A \\C","Fragments":["\\G","\\G"]},{"Key":"\\G \\T}","Fragments":["(set","dna)]}"]},{"Key":"\\T} (set","Fragments":["strand)))"]},{"Key":"time: 63.334609","Fragments":["msecs\""]},{"Key":"(time (re-matches","Fragments":["#\"[ACGT]*\""]},{"Key":"(re-matches #\"[ACGT]*\"","Fragments":["strand))"]},{"Key":"time: 26.054067","Fragments":["msecs\""]},{"Key":"finding Clojure","Fragments":["considerably"]},{"Key":"Clojure considerably","Fragments":["difficult"]},{"Key":"considerably difficult","Fragments":["to"]},{"Key":"make idiomatic","Fragments":["sense"]},{"Key":"idiomatic sense","Fragments":["of,"]},{"Key":"sense of,","Fragments":["just"]},{"Key":"of, just","Fragments":["by"]},{"Key":"by googling","Fragments":["for"]},{"Key":"googling for","Fragments":["code"]},{"Key":"for code","Fragments":["snippets","that's","clarity."]},{"Key":"code snippets","Fragments":["-"]},{"Key":"snippets -","Fragments":["anyone"]},{"Key":"- anyone","Fragments":["know"]},{"Key":" @katheryn","Fragments":["Nah,"]},{"Key":"@katheryn Nah,","Fragments":["I'm"]},{"Key":"Nah, I'm","Fragments":["going"]},{"Key":"to revise","Fragments":["it"]},{"Key":"revise it","Fragments":["back"]},{"Key":"to `string/replace`","Fragments":["sometime"]},{"Key":"`string/replace` sometime","Fragments":["soon."]},{"Key":"sometime soon.","Fragments":["I"]},{"Key":"soon. I","Fragments":["kind"]},{"Key":"I kind","Fragments":["of","of"]},{"Key":"of lost","Fragments":["track"]},{"Key":"lost track","Fragments":["of"]},{"Key":"this over","Fragments":["the"]},{"Key":"last week,","Fragments":["been"]},{"Key":"week, been","Fragments":["hectic"]},{"Key":"been hectic","Fragments":["at"]},{"Key":"hectic at","Fragments":["work."]},{"Key":"at work.","Fragments":["Thanks"]},{"Key":"work. Thanks","Fragments":["again"]},{"Key":"The nested","Fragments":["conditions","ifs","ifs"]},{"Key":"nested conditions","Fragments":["in"]},{"Key":"`number` prevented","Fragments":["me"]},{"Key":"prevented me","Fragments":["from"]},{"Key":"either `condp`","Fragments":["or"]},{"Key":"`condp` or","Fragments":["`case`","`case`"]},{"Key":"or `case`","Fragments":["to","(or"]},{"Key":"`case` to","Fragments":["clean"]},{"Key":"up some","Fragments":["duplication."]},{"Key":"some duplication.","Fragments":["I"]},{"Key":"duplication. I","Fragments":["feel","think"]},{"Key":"some better","Fragments":["control"]},{"Key":"better control","Fragments":["structure"]},{"Key":"control structure","Fragments":["than"]},{"Key":"structure than","Fragments":["just"]},{"Key":"the straight","Fragments":["`cond`"]},{"Key":"straight `cond`","Fragments":["though..."]},{"Key":" `pretty-print`","Fragments":["was"]},{"Key":"`pretty-print` was","Fragments":["another"]},{"Key":"was another","Fragments":["example"]},{"Key":"another example","Fragments":["of"]},{"Key":"string interpolation","Fragments":["that"]},{"Key":"interpolation that","Fragments":["feels"]},{"Key":"a square","Fragments":["peg"]},{"Key":"square peg","Fragments":["for"]},{"Key":"peg for","Fragments":["clojure."]},{"Key":"for clojure.","Fragments":["Gonna"]},{"Key":"clojure. Gonna","Fragments":["have"]},{"Key":"Gonna have","Fragments":["another"]},{"Key":"and structure","Fragments":["of"]},{"Key":"almost identical","Fragments":["to"]},{"Key":"identical to","Fragments":["the","my"]},{"Key":"one I","Fragments":["did","was"]},{"Key":"in Haskell.","Fragments":[":+1:"]},{"Key":" much","Fragments":["easier","happier"]},{"Key":"easier when","Fragments":["you"]},{"Key":"about frequencies","Fragments":["method!","thanks"]},{"Key":" `format`","Fragments":["cleans"]},{"Key":"`format` cleans","Fragments":["up"]},{"Key":"the `pretty-print`","Fragments":["function"]},{"Key":"`pretty-print` function","Fragments":["a"]},{"Key":"bit, in","Fragments":["that"]},{"Key":"version. Still","Fragments":["wish"]},{"Key":"used `condp`","Fragments":["or"]},{"Key":"`case` (or","Fragments":["some"]},{"Key":"(or some","Fragments":["other"]},{"Key":"control structure)","Fragments":["instead"]},{"Key":"structure) instead","Fragments":["of"]},{"Key":"using partial","Fragments":["here","application","application","application"]},{"Key":"partial here","Fragments":["somewhere"]},{"Key":"particular learning","Fragments":["resource"]},{"Key":"learning resource","Fragments":["I"]},{"Key":"resource I","Fragments":["can"]},{"Key":"can recommend","Fragments":["-"]},{"Key":"recommend -","Fragments":["but"]},{"Key":"few suggestions","Fragments":["on"]},{"Key":"on you","Fragments":["code"]},{"Key":"you code","Fragments":["here:"]},{"Key":"First of","Fragments":["all,","all","all:"]},{"Key":"of all,","Fragments":["you"]},{"Key":"all, you","Fragments":["can"]},{"Key":"have multiple","Fragments":["generators","instances"]},{"Key":"multiple generators","Fragments":["in"]},{"Key":"generators in","Fragments":["a"]},{"Key":"a for","Fragments":["loop,","loop"]},{"Key":"for loop,","Fragments":["as"]},{"Key":"loop, as","Fragments":["you"]},{"Key":"can in","Fragments":["Scala"]},{"Key":"in Scala","Fragments":["and"]},{"Key":"Scala and","Fragments":["in"]},{"Key":"list comprehensions","Fragments":["in"]},{"Key":"comprehensions in","Fragments":["Haskell,"]},{"Key":"Haskell, Python","Fragments":["and"]},{"Key":"Python and","Fragments":["other"]},{"Key":"languages. So","Fragments":["you"]},{"Key":"So you","Fragments":["could","can","can","could"]},{"Key":"could combine","Fragments":["lines"]},{"Key":"combine lines","Fragments":["6"]},{"Key":"lines 6","Fragments":["and"]},{"Key":"6 and","Fragments":["8","11)."]},{"Key":"one \u0026","Fragments":["get"]},{"Key":"\u0026 get","Fragments":["rid"]},{"Key":"line 7","Fragments":["as","-","-","as"]},{"Key":"7 as","Fragments":["a","well"]},{"Key":"first step","Fragments":["to","of"]},{"Key":" Second,","Fragments":["this","check"]},{"Key":"Second, this","Fragments":["is"]},{"Key":"is relatively","Fragments":["minor,"]},{"Key":"relatively minor,","Fragments":["but"]},{"Key":"think `use`","Fragments":["is"]},{"Key":"used very","Fragments":["often","often"]},{"Key":"very often","Fragments":["anymore.","(probably"]},{"Key":"often anymore.","Fragments":["You"]},{"Key":"anymore. You","Fragments":["tend"]},{"Key":"You tend","Fragments":["to"]},{"Key":"people achieving","Fragments":["the"]},{"Key":"achieving the","Fragments":["same"]},{"Key":"thing using","Fragments":["`require`/`refer`"]},{"Key":"using `require`/`refer`","Fragments":["like"]},{"Key":"`require`/`refer` like","Fragments":["this:"]},{"Key":" Third","Fragments":["-"]},{"Key":"Third -","Fragments":["I"]},{"Key":"surprised you","Fragments":["needed"]},{"Key":"you needed","Fragments":["to","that"]},{"Key":"needed to","Fragments":["do","make","read","do","be","make","include","satisfy","turn","in","iterate","get","from"]},{"Key":"if value","Fragments":["was"]},{"Key":"value was","Fragments":["empty"]},{"Key":"was empty","Fragments":["on"]},{"Key":"empty on","Fragments":["line"]},{"Key":"line 9!","Fragments":["It"]},{"Key":"9! It","Fragments":["looks"]},{"Key":"a bug","Fragments":["has","here.","in","report"]},{"Key":"bug has","Fragments":["been"]},{"Key":"been introduced","Fragments":["into"]},{"Key":"introduced into","Fragments":["the"]},{"Key":"tests since","Fragments":["I"]},{"Key":"exercise, as","Fragments":["none"]},{"Key":"as none","Fragments":["of"]},{"Key":"values should","Fragments":["be"]},{"Key":"be empty","Fragments":["I"]},{"Key":"empty I","Fragments":["don't"]},{"Key":"don't think.","Fragments":["I'm"]},{"Key":"think. I'm","Fragments":["going"]},{"Key":"a pull-request","Fragments":["to"]},{"Key":"pull-request to","Fragments":["fix"]},{"Key":"fix this","Fragments":["but"]},{"Key":"it yourself","Fragments":["now,"]},{"Key":"yourself now,","Fragments":["all"]},{"Key":"now, all","Fragments":["I'm"]},{"Key":"all I'm","Fragments":["going"]},{"Key":"is replace","Fragments":["lines"]},{"Key":"replace lines","Fragments":["like"]},{"Key":"lines like","Fragments":["`(clojure.string/split"]},{"Key":"like `(clojure.string/split","Fragments":["\"AEIOULNRST\""]},{"Key":"`(clojure.string/split \"AEIOULNRST\"","Fragments":["#\"\")`"]},{"Key":"\"AEIOULNRST\" #\"\")`","Fragments":["(which"]},{"Key":"#\"\")` (which","Fragments":["includes"]},{"Key":"(which includes","Fragments":["an"]},{"Key":"includes an","Fragments":["empty"]},{"Key":"its output)","Fragments":["with"]},{"Key":"output) with","Fragments":["`(re-seq"]},{"Key":"with `(re-seq","Fragments":["#\"\\w\""]},{"Key":"`(re-seq #\"\\w\"","Fragments":["\"AEIOULNRST\")`.","dna-string)`"]},{"Key":"Like how","Fragments":["you"]},{"Key":"you decomposed","Fragments":["this"]},{"Key":"decomposed this","Fragments":["problem."]},{"Key":"You've elegantly","Fragments":["recreated"]},{"Key":"elegantly recreated","Fragments":["Clojure's"]},{"Key":"recreated Clojure's","Fragments":["`frequencies`"]},{"Key":"Clojure's `frequencies`","Fragments":["function;"]},{"Key":"`frequencies` function;","Fragments":["recommend"]},{"Key":"function; recommend","Fragments":["you"]},{"Key":"recommend you","Fragments":["check"]},{"Key":"check it","Fragments":["out."]},{"Key":"the `words`","Fragments":["function?","definition"]},{"Key":"`words` function?","Fragments":["Perhaps"]},{"Key":"function? Perhaps","Fragments":["something"]},{"Key":"Perhaps something","Fragments":["related"]},{"Key":"something related","Fragments":["to"]},{"Key":"doing to","Fragments":["the"]},{"Key":"words you","Fragments":["pass"]},{"Key":" Java's","Fragments":["`Calendar`"]},{"Key":"Java's `Calendar`","Fragments":["class"]},{"Key":"`Calendar` class","Fragments":["is"]},{"Key":"class is","Fragments":["actually"]},{"Key":"actually pretty","Fragments":["powerful;"]},{"Key":"pretty powerful;","Fragments":["you"]},{"Key":"powerful; you","Fragments":["can"]},{"Key":"can specify","Fragments":["things","a"]},{"Key":"specify things","Fragments":["like"]},{"Key":"third Wednesday","Fragments":["or"]},{"Key":"Wednesday or","Fragments":["second"]},{"Key":"or second","Fragments":["Thursday"]},{"Key":"second Thursday","Fragments":["of"]},{"Key":"Thursday of","Fragments":["the"]},{"Key":"the month","Fragments":["and","by"]},{"Key":"month and","Fragments":["it","year"]},{"Key":"right date.","Fragments":["If"]},{"Key":"date. If","Fragments":["you"]},{"Key":"you shamelessly","Fragments":["let"]},{"Key":"shamelessly let","Fragments":["the"]},{"Key":"let the","Fragments":["Calendar"]},{"Key":"Calendar class","Fragments":["do"]},{"Key":"class do","Fragments":["most"]},{"Key":"you (like","Fragments":["I"]},{"Key":"(like I","Fragments":["did","did)"]},{"Key":"did :)","Fragments":[")"]},{"Key":":) )","Fragments":["this"]},{"Key":") this","Fragments":["exercise"]},{"Key":"exercise isn't","Fragments":["bad."]},{"Key":"great exercise","Fragments":["to"]},{"Key":"explore list-based","Fragments":["metaprogramming"]},{"Key":"list-based metaprogramming","Fragments":["(perhaps"]},{"Key":"metaprogramming (perhaps","Fragments":["there"]},{"Key":"(perhaps there","Fragments":["is"]},{"Key":"better term","Fragments":["for"]},{"Key":"for this).","Fragments":["It"]},{"Key":"this). It","Fragments":["is"]},{"Key":"to set","Fragments":["up"]},{"Key":"set up","Fragments":["a","more"]},{"Key":"few `doseq`s","Fragments":["and"]},{"Key":"`doseq`s and","Fragments":["use"]},{"Key":"use `intern`","Fragments":["to"]},{"Key":"`intern` to","Fragments":["generate"]},{"Key":"defining them","Fragments":["one"]},{"Key":"them one","Fragments":["by"]},{"Key":"one by","Fragments":["one.","one."]},{"Key":"Thanks @niko,","Fragments":["I"]},{"Key":"@niko, I","Fragments":["figured"]},{"Key":"figured there","Fragments":["would"]},{"Key":"something list-y","Fragments":["I"]},{"Key":"list-y I","Fragments":["could"]},{"Key":"the manual","Fragments":["definitions."]},{"Key":"manual definitions.","Fragments":["This"]},{"Key":"definitions. This","Fragments":["should"]},{"Key":"should give","Fragments":["me"]},{"Key":"the impetus","Fragments":["to"]},{"Key":"impetus to","Fragments":["put"]},{"Key":"more effort","Fragments":["into","to"]},{"Key":"effort into","Fragments":["working"]},{"Key":"into working","Fragments":["out"]},{"Key":"defined what","Fragments":["an"]},{"Key":"anagram is","Fragments":["exactly!","such"]},{"Key":"know you","Fragments":["can"]},{"Key":"can shorten","Fragments":["lines","this","up","up","up"]},{"Key":"shorten lines","Fragments":["1-4"]},{"Key":"lines 1-4","Fragments":["to"]},{"Key":"1-4 to","Fragments":["just"]},{"Key":"just `(ns","Fragments":["anagram"]},{"Key":"A hint","Fragments":["on",":"]},{"Key":"hint on","Fragments":["code"]},{"Key":"on code","Fragments":["formatting:","considerably."]},{"Key":"code formatting:","Fragments":["so"]},{"Key":"formatting: so","Fragments":["far"]},{"Key":"far I've","Fragments":["only"]},{"Key":"I've only","Fragments":["seen","briefly","recently"]},{"Key":"only seen","Fragments":["clojure","the"]},{"Key":"seen clojure","Fragments":["`defn`s"]},{"Key":"clojure `defn`s","Fragments":["with"]},{"Key":"`defn`s with","Fragments":["a"]},{"Key":"again, @arlene!","Fragments":["The"]},{"Key":"@arlene! The","Fragments":["pointer"]},{"Key":"The pointer","Fragments":["to"]},{"Key":"pointer to","Fragments":["`intern`"]},{"Key":"to `intern`","Fragments":["was"]},{"Key":"`intern` was","Fragments":["very"]},{"Key":"helpful -","Fragments":["as"]},{"Key":"as was","Fragments":["the"]},{"Key":"advice to","Fragments":["investigate"]},{"Key":"to investigate","Fragments":["`java.util.Calendar`"]},{"Key":"investigate `java.util.Calendar`","Fragments":["a"]},{"Key":"`java.util.Calendar` a","Fragments":["bit"]},{"Key":"Should `random-string`","Fragments":["and"]},{"Key":"`random-string` and","Fragments":["`random-integer`","`random-integer`"]},{"Key":"and `random-integer`","Fragments":["be","too"]},{"Key":"`random-integer` be","Fragments":["public"]},{"Key":"the functionality","Fragments":["of"]},{"Key":"functionality of","Fragments":["`random-string`","exercism.io"]},{"Key":"of `random-string`","Fragments":["and"]},{"Key":"`random-integer` too","Fragments":["specific"]},{"Key":"too specific","Fragments":["to"]},{"Key":"be toplevel","Fragments":["functions?"]},{"Key":"toplevel functions?","Fragments":["Maybe"]},{"Key":"functions? Maybe","Fragments":["they'd","some"]},{"Key":"Maybe they'd","Fragments":["be"]},{"Key":"they'd be","Fragments":["better"]},{"Key":"`let` block","Fragments":["in","there's","and"]},{"Key":"block in","Fragments":["the","the"]},{"Key":"where they're","Fragments":["used?"]},{"Key":"you using","Fragments":["all","it"]},{"Key":"possible digits","Fragments":["that"]},{"Key":"digits that","Fragments":["could"]},{"Key":"a robot","Fragments":["name,","name.","is","to"]},{"Key":"robot name,","Fragments":["or"]},{"Key":" Fairly","Fragments":["new"]},{"Key":"Fairly new","Fragments":["to","to"]},{"Key":"I'd especially","Fragments":["like","like"]},{"Key":"especially like","Fragments":["feedback","feedback","that","the"]},{"Key":"like feedback","Fragments":["as","as"]},{"Key":"feedback as","Fragments":["to","to"]},{"Key":"to whether","Fragments":["or","or"]},{"Key":"whether or","Fragments":["not","not","not","not"]},{"Key":"or not","Fragments":["this","this","the","an"]},{"Key":"not this","Fragments":["\"feels\"","\"feels\""]},{"Key":"this \"feels\"","Fragments":["like","like"]},{"Key":"\"feels\" like","Fragments":["\"normal\"","\"normal\""]},{"Key":"like \"normal\"","Fragments":["Clojure,","Clojure,"]},{"Key":"\"normal\" Clojure,","Fragments":["both","both"]},{"Key":"Clojure, both","Fragments":["in","in"]},{"Key":"how it's","Fragments":["implemented,","laid","implemented,","laid"]},{"Key":"it's implemented,","Fragments":["as","as"]},{"Key":"implemented, as","Fragments":["well","well"]},{"Key":"as how","Fragments":["it's","it's"]},{"Key":"it's laid","Fragments":["out.","out."]},{"Key":"with iteration","Fragments":["1:","2."]},{"Key":"\u003e Fairly","Fragments":["new"]},{"Key":"This revision","Fragments":["swapped"]},{"Key":"revision swapped","Fragments":["`(seq"]},{"Key":"swapped `(seq","Fragments":["letters-in-prompt)`"]},{"Key":"`(seq letters-in-prompt)`","Fragments":["for"]},{"Key":"letters-in-prompt)` for","Fragments":["`(not"]},{"Key":"for `(not","Fragments":["(empty?"]},{"Key":"(empty? letters-in-prompt))`","Fragments":["because"]},{"Key":"letters-in-prompt))` because","Fragments":["I"]},{"Key":"they're equivalent","Fragments":["(woo,"]},{"Key":"equivalent (woo,","Fragments":["_Joy"]},{"Key":"(woo, _Joy","Fragments":["of"]},{"Key":"_Joy of","Fragments":["Clojure_!)."]},{"Key":"at `clojure.string/blank?`","Fragments":["which"]},{"Key":"`clojure.string/blank?` which","Fragments":["can"]},{"Key":"your `silent?`","Fragments":["function"]},{"Key":"`silent?` function","Fragments":["a"]},{"Key":"little smaller.","Fragments":["Also,"]},{"Key":"smaller. Also,","Fragments":["you"]},{"Key":"can combine","Fragments":["`re-seq`","your"]},{"Key":"combine `re-seq`","Fragments":["and"]},{"Key":"to `seq`","Fragments":["with","-"]},{"Key":"`seq` with","Fragments":["`re-find`."]},{"Key":"with `re-find`.","Fragments":["I"]},{"Key":"`re-find`. I","Fragments":["can't"]},{"Key":"can't comment","Fragments":["on"]},{"Key":"how Clojuresque","Fragments":["it"]},{"Key":"Clojuresque it","Fragments":["all"]},{"Key":"all is,","Fragments":["given"]},{"Key":"is, given","Fragments":["my"]},{"Key":"given my","Fragments":["own"]},{"Key":"own lack","Fragments":["of"]},{"Key":"Clojure experience.","Fragments":["Your"]},{"Key":"Your method","Fragments":["names"]},{"Key":"are fantastic,","Fragments":["though."]},{"Key":"you wrap","Fragments":["all"]},{"Key":"wrap all","Fragments":["the"]},{"Key":"into extra","Fragments":["functions"]},{"Key":"extra functions","Fragments":["so"]},{"Key":"them interesting","Fragments":["names?"]},{"Key":" mlakewood,","Fragments":["thanks"]},{"Key":"mlakewood, thanks","Fragments":["for"]},{"Key":"for tip,","Fragments":["but"]},{"Key":"tip, but","Fragments":["I"]},{"Key":"will stay","Fragments":["with"]},{"Key":"my regular","Fragments":["expression"]},{"Key":"Great first","Fragments":["attempt!."]},{"Key":"first attempt!.","Fragments":["How"]},{"Key":"attempt!. How","Fragments":["about"]},{"Key":"break things","Fragments":["down?"]},{"Key":"things down?","Fragments":["It"]},{"Key":"down? It","Fragments":["would"]},{"Key":"After fiddling","Fragments":["a"]},{"Key":"fiddling a","Fragments":["bit"]},{"Key":"bit in","Fragments":["the","particular","my"]},{"Key":"the REPL","Fragments":["I"]},{"Key":"REPL I","Fragments":["sort"]},{"Key":"I sort","Fragments":["of"]},{"Key":"of stumbled","Fragments":["upon"]},{"Key":"upon this","Fragments":["solution"]},{"Key":"solution all","Fragments":["at"]},{"Key":"all at","Fragments":["once"]},{"Key":"once -","Fragments":["passing"]},{"Key":"- passing","Fragments":["all"]},{"Key":"passing all","Fragments":["4"]},{"Key":"all 4","Fragments":["tests"]},{"Key":"4 tests","Fragments":["at"]},{"Key":"tests at","Fragments":["the"]},{"Key":"seems ugly","Fragments":["to"]},{"Key":"ugly to","Fragments":["me."]},{"Key":"Will review","Fragments":["it"]},{"Key":"review it","Fragments":["again"]},{"Key":"it again","Fragments":["later","on","today","and","and"]},{"Key":"again later","Fragments":["-"]},{"Key":"hear feedback.","Fragments":["I'm"]},{"Key":"I'm probably","Fragments":["missing"]},{"Key":"probably missing","Fragments":["some"]},{"Key":"missing some","Fragments":["much","other"]},{"Key":"some much","Fragments":["more"]},{"Key":"more clojure-y","Fragments":["or"]},{"Key":"clojure-y or","Fragments":["lisp-y"]},{"Key":"or lisp-y","Fragments":["way"]},{"Key":"lisp-y way","Fragments":["of"]},{"Key":"vector to","Fragments":["cache","be"]},{"Key":"the normalized","Fragments":["form","value"]},{"Key":"normalized form","Fragments":["and"]},{"Key":"and threw","Fragments":["a"]},{"Key":"threw a","Fragments":["set"]},{"Key":"functions around","Fragments":["it."]},{"Key":"around it.","Fragments":["Not"]},{"Key":"it. Not","Fragments":["sure"]},{"Key":"idiomatic or","Fragments":["whether","performant.)","if"]},{"Key":"or whether","Fragments":["use"]},{"Key":"whether use","Fragments":["of"]},{"Key":"like `defrecord`","Fragments":["is"]},{"Key":"`defrecord` is","Fragments":["preferred."]},{"Key":"An alternate","Fragments":["`anagram-of?`"]},{"Key":"alternate `anagram-of?`","Fragments":["might"]},{"Key":"`anagram-of?` might","Fragments":["use"]},{"Key":"might use","Fragments":["more","[`(every?","\u003ccode\u003ere-find\u003c/code\u003e"]},{"Key":"more functional","Fragments":["stuff,","way","to"]},{"Key":"functional stuff,","Fragments":["like:"]},{"Key":"(defn- anagram-of?","Fragments":["[comparable"]},{"Key":"anagram-of? [comparable","Fragments":["other]"]},{"Key":"(and (apply","Fragments":["="]},{"Key":"(apply =","Fragments":["(map"]},{"Key":"= (map","Fragments":["normalized-word"]},{"Key":"(map normalized-word","Fragments":["[comparable"]},{"Key":"normalized-word [comparable","Fragments":["other]))"]},{"Key":"(apply not=","Fragments":["(map"]},{"Key":"not= (map","Fragments":["base-word"]},{"Key":"(map base-word","Fragments":["[comparable"]},{"Key":"base-word [comparable","Fragments":["other]))))"]},{"Key":"seemed harder","Fragments":["to"]},{"Key":"Fair warning:","Fragments":["this"]},{"Key":"warning: this","Fragments":["is"]},{"Key":"only clojure","Fragments":["I've"]},{"Key":"clojure I've","Fragments":["ever","written","done"]},{"Key":"ever written,","Fragments":["so","so"]},{"Key":"written, so","Fragments":["it","I'm","feel"]},{"Key":"be bad.","Fragments":["That"]},{"Key":"bad. That","Fragments":["said"]},{"Key":"That said","Fragments":["all"]},{"Key":"said all","Fragments":["comments"]},{"Key":"comments and","Fragments":["advice"]},{"Key":"and advice","Fragments":["are"]},{"Key":"advice are","Fragments":["welcome!"]},{"Key":"frequencies. It","Fragments":["took"]},{"Key":"me some","Fragments":["time","insights","insight"]},{"Key":"what `dec-each-value`","Fragments":["does"]},{"Key":"`dec-each-value` does","Fragments":["here,"]},{"Key":"does here,","Fragments":["though."]},{"Key":"here, though.","Fragments":["Is"]},{"Key":"though. Is","Fragments":["there"]},{"Key":"there possibly","Fragments":["a"]},{"Key":"possibly a","Fragments":["more","little"]},{"Key":"more accessible","Fragments":["way"]},{"Key":"accessible way","Fragments":["to"]},{"Key":"that each","Fragments":["nucleotide","invokes","of","of"]},{"Key":"each nucleotide","Fragments":["appears"]},{"Key":"nucleotide appears","Fragments":["in"]},{"Key":"appears in","Fragments":["the"]},{"Key":"a count","Fragments":["of","to"]},{"Key":"is short","Fragments":["and","and","which"]},{"Key":"and crisp,","Fragments":["I"]},{"Key":"crisp, I","Fragments":["like"]},{"Key":"Just for","Fragments":["fun,"]},{"Key":"for fun,","Fragments":["I'd","I"]},{"Key":"fun, I'd","Fragments":["try"]},{"Key":"I'd try","Fragments":["to","a"]},{"Key":"that hint","Fragments":["at"]},{"Key":"hint at","Fragments":["Bob's"]},{"Key":"at Bob's","Fragments":["feelings"]},{"Key":"Bob's feelings","Fragments":["and"]},{"Key":"feelings and","Fragments":["see"]},{"Key":"check what","Fragments":["exactly"]},{"Key":"what exactly","Fragments":["`frequencies`","it's"]},{"Key":"exactly `frequencies`","Fragments":["evaluates"]},{"Key":"`frequencies` evaluates","Fragments":["to"]},{"Key":"to and","Fragments":["take"]},{"Key":"and take","Fragments":["a"]},{"Key":"the `core`","Fragments":["functions","namespace,"]},{"Key":"`core` functions","Fragments":["dealing"]},{"Key":"functions dealing","Fragments":["with"]},{"Key":"dealing with","Fragments":["that","letters","the","a"]},{"Key":"already very","Fragments":["expressive!"]},{"Key":"that `set`s","Fragments":["can"]},{"Key":"`set`s can","Fragments":["be"]},{"Key":"as functions?","Fragments":["Maybe"]},{"Key":"type conversion","Fragments":["is"]},{"Key":"conversion is","Fragments":["needed"]},{"Key":"is needed","Fragments":["to","because","on","when"]},{"Key":"that useful","Fragments":["here."]},{"Key":"convention to","Fragments":["end"]},{"Key":"end predicates'","Fragments":["names"]},{"Key":"predicates' names","Fragments":["with"]},{"Key":" Aha","Fragments":["..."]},{"Key":"Aha ...","Fragments":["someone"]},{"Key":"... someone","Fragments":["changed"]},{"Key":"someone changed","Fragments":["the"]},{"Key":"test so","Fragments":["it"]},{"Key":"it matches","Fragments":["the","the"]},{"Key":"the readme,","Fragments":["thanks!"]},{"Key":"test locally","Fragments":["for"]},{"Key":"locally for","Fragments":["`exercism"]},{"Key":"for `exercism","Fragments":["f`"]},{"Key":"`exercism f`","Fragments":["to"]},{"Key":"f` to","Fragments":["get"]},{"Key":"Putting it","Fragments":["into"]},{"Key":"single regex","Fragments":["would"]},{"Key":"regex would","Fragments":["make"]},{"Key":"more obscure.","Fragments":["I"]},{"Key":"obscure. I","Fragments":["think"]},{"Key":"great. But","Fragments":["maybe"]},{"Key":"`not-any?` -","Fragments":["I'm"]},{"Key":"I'm currently","Fragments":["trying"]},{"Key":"currently trying","Fragments":["that"]},{"Key":"trying that","Fragments":["out","is"]},{"Key":"about `empty?`,","Fragments":["`last`,"]},{"Key":"`empty?`, `last`,","Fragments":["`some`,"]},{"Key":"`last`, `some`,","Fragments":["and"]},{"Key":"`some`, and","Fragments":["`not-any?`."]},{"Key":"and `not-any?`.","Fragments":["Cool"]},{"Key":"`not-any?`. Cool","Fragments":["stuff!"]},{"Key":"this at","Fragments":["all.","all."]},{"Key":"all. :/","Fragments":["I"]},{"Key":":/ I","Fragments":["feel"]},{"Key":"feel there's","Fragments":["a"]},{"Key":"concise implementation","Fragments":["for"]},{"Key":"implementation for","Fragments":["this","sorted"]},{"Key":" Bob","Fragments":["lacksidaisically"]},{"Key":"Bob lacksidaisically","Fragments":["stepped"]},{"Key":"lacksidaisically stepped","Fragments":["into"]},{"Key":"stepped into","Fragments":["trouble"]},{"Key":"into trouble","Fragments":["with"]},{"Key":"trouble with","Fragments":["accented","the","the"]},{"Key":"with accented","Fragments":["characters"]},{"Key":"accented characters","Fragments":["and"]},{"Key":" Experience","Fragments":["shows"]},{"Key":"Experience shows","Fragments":["that"]},{"Key":"shows that","Fragments":["dealing","the"]},{"Key":"that dealing","Fragments":["with"]},{"Key":"letters becomes","Fragments":["decidedly"]},{"Key":"becomes decidedly","Fragments":["non-trivial"]},{"Key":"decidedly non-trivial","Fragments":["with"]},{"Key":"non-trivial with","Fragments":["UTF-8"]},{"Key":"with UTF-8","Fragments":["characters."]},{"Key":"So instead","Fragments":["of"]},{"Key":"of tackling","Fragments":["this"]},{"Key":"tackling this","Fragments":["(which"]},{"Key":"this (which","Fragments":["is"]},{"Key":"(which is","Fragments":["not","almost","clearer","legal","what","false-y)","what","mentioned"]},{"Key":"not hard","Fragments":["with"]},{"Key":"hard with","Fragments":["the"]},{"Key":"current set","Fragments":["of"]},{"Key":"of test,","Fragments":["as"]},{"Key":"test, as","Fragments":["they"]},{"Key":"they stick","Fragments":["to"]},{"Key":"stick to","Fragments":["ASCII)","require.","one"]},{"Key":"to ASCII)","Fragments":["I"]},{"Key":"ASCII) I","Fragments":["lean"]},{"Key":"I lean","Fragments":["on"]},{"Key":"lean on","Fragments":["the"]},{"Key":"the support","Fragments":["of"]},{"Key":"support of","Fragments":["the"]},{"Key":"The silence?","Fragments":["method"]},{"Key":"silence? method","Fragments":["is"]},{"Key":"is essentially","Fragments":["a"]},{"Key":"essentially a","Fragments":["rename"]},{"Key":"a rename","Fragments":["of"]},{"Key":"rename of","Fragments":["the"]},{"Key":"the blank?","Fragments":["method."]},{"Key":"blank? method.","Fragments":["I"]},{"Key":"have renamed","Fragments":["it","it"]},{"Key":"renamed it","Fragments":["in","to"]},{"Key":"use part","Fragments":["on"]},{"Key":"part on","Fragments":["the"]},{"Key":"file but","Fragments":["decided"]},{"Key":"but decided","Fragments":["against","not","the"]},{"Key":"decided against","Fragments":["it"]},{"Key":"it violates","Fragments":["the"]},{"Key":"violates the","Fragments":["principle"]},{"Key":"least surprise.","Fragments":["I"]},{"Key":"surprise. I","Fragments":["gladly"]},{"Key":"I gladly","Fragments":["trade"]},{"Key":"gladly trade","Fragments":["typing"]},{"Key":"trade typing","Fragments":["a"]},{"Key":"typing a","Fragments":["few"]},{"Key":"few characters","Fragments":["by"]},{"Key":"by explicitely","Fragments":["defining"]},{"Key":"explicitely defining","Fragments":["a"]},{"Key":"function than","Fragments":["to"]},{"Key":"to rely","Fragments":["on","on"]},{"Key":"a seldom","Fragments":["used"]},{"Key":"seldom used","Fragments":["feature."]},{"Key":"solution feels","Fragments":["a"]},{"Key":"little clumsy,","Fragments":["but"]},{"Key":"clumsy, but","Fragments":["it"]},{"Key":"works. I'd","Fragments":["appreciate"]},{"Key":"I'd appreciate","Fragments":["hearing","any"]},{"Key":"appreciate hearing","Fragments":["more"]},{"Key":"hearing more","Fragments":["elegant"]},{"Key":"elegant ways","Fragments":["to"]},{"Key":"Interesting point","Fragments":["on"]},{"Key":"on sorting","Fragments":["being"]},{"Key":"sorting being","Fragments":["slower"]},{"Key":"being slower","Fragments":["than"]},{"Key":"slower than","Fragments":["creating"]},{"Key":"than creating","Fragments":["a"]},{"Key":"map -","Fragments":["I","but"]},{"Key":"it's important","Fragments":["to"]},{"Key":"to note","Fragments":["that","that"]},{"Key":"of input","Fragments":["to","types."]},{"Key":"the sort","Fragments":["or"]},{"Key":"sort or","Fragments":["frequency"]},{"Key":"or frequency","Fragments":["map"]},{"Key":"map function","Fragments":["is","so","over"]},{"Key":"is bounded","Fragments":["by"]},{"Key":"bounded by","Fragments":["a","the","a"]},{"Key":"constant -","Fragments":["that"]},{"Key":"that is,","Fragments":["the","is"]},{"Key":"is, the","Fragments":["number"]},{"Key":"of letters","Fragments":["in"]},{"Key":"the longest","Fragments":["word","one","side"]},{"Key":"longest word","Fragments":["in"]},{"Key":"in whichever","Fragments":["language"]},{"Key":"whichever language","Fragments":["anagrams"]},{"Key":"language anagrams","Fragments":["are"]},{"Key":"anagrams are","Fragments":["being"]},{"Key":"are being","Fragments":["found"]},{"Key":"being found","Fragments":["for.","at"]},{"Key":"found for.","Fragments":["While"]},{"Key":"for. While","Fragments":["there"]},{"Key":"some quite","Fragments":["long"]},{"Key":"quite long","Fragments":["made-up"]},{"Key":"long made-up","Fragments":["words,"]},{"Key":"made-up words,","Fragments":["the"]},{"Key":"words, the","Fragments":["longest"]},{"Key":"longest one","Fragments":["to"]},{"Key":"to appear","Fragments":["in"]},{"Key":"appear in","Fragments":["a","a"]},{"Key":"a major","Fragments":["dictionary"]},{"Key":"major dictionary","Fragments":["(according"]},{"Key":"dictionary (according","Fragments":["to"]},{"Key":"(according to","Fragments":["[wikipedia](http://en.wikipedia.org/wiki/Longest_word_in_English))","the"]},{"Key":"to [wikipedia](http://en.wikipedia.org/wiki/Longest_word_in_English))","Fragments":["is"]},{"Key":"[wikipedia](http://en.wikipedia.org/wiki/Longest_word_in_English)) is","Fragments":["45"]},{"Key":"is 45","Fragments":["letters"]},{"Key":"45 letters","Fragments":["long.","by"]},{"Key":"letters long.","Fragments":["So"]},{"Key":"long. So","Fragments":["the"]},{"Key":"the running","Fragments":["time"]},{"Key":"running time","Fragments":["of"]},{"Key":"time of","Fragments":["sorting","writing"]},{"Key":"of sorting","Fragments":["a"]},{"Key":"sorting a","Fragments":["word"]},{"Key":"word can","Fragments":["be"]},{"Key":"be reasonably","Fragments":["asserted"]},{"Key":"reasonably asserted","Fragments":["to"]},{"Key":"asserted to","Fragments":["be"]},{"Key":"be upper","Fragments":["bounded"]},{"Key":"upper bounded","Fragments":["by","by"]},{"Key":"time it","Fragments":["takes"]},{"Key":"it takes","Fragments":["to","a","my"]},{"Key":"takes to","Fragments":["sort"]},{"Key":"sort a","Fragments":["list","map"]},{"Key":"of 45","Fragments":["letters"]},{"Key":"letters by","Fragments":["the"]},{"Key":"given algorithm","Fragments":["-"]},{"Key":"algorithm -","Fragments":["which"]},{"Key":"which means","Fragments":["it","you","you","extra","that","the"]},{"Key":"means it","Fragments":["is"]},{"Key":"is upper","Fragments":["bounded"]},{"Key":"constant (and","Fragments":["a"]},{"Key":"(and a","Fragments":["pretty"]},{"Key":"pretty small","Fragments":["one"]},{"Key":"small one","Fragments":["too)."]},{"Key":"one too).","Fragments":["So"]},{"Key":"too). So","Fragments":["I"]},{"Key":"between sorting","Fragments":["\u0026"]},{"Key":"sorting \u0026","Fragments":["frequency"]},{"Key":"\u0026 frequency","Fragments":["map"]},{"Key":"map should","Fragments":["come"]},{"Key":"down only","Fragments":["to"]},{"Key":"only to","Fragments":["which"]},{"Key":"to which","Fragments":["is","I"]},{"Key":"more readable/expresses","Fragments":["intent"]},{"Key":"readable/expresses intent","Fragments":["better."]},{"Key":"is debatable","Fragments":["but"]},{"Key":"debatable but","Fragments":["as"]},{"Key":"but as","Fragments":["the","that's"]},{"Key":"already existing","Fragments":["concept"]},{"Key":"existing concept","Fragments":["used"]},{"Key":"concept used","Fragments":["with"]},{"Key":"used with","Fragments":["anagrams","a"]},{"Key":"with anagrams","Fragments":["it"]},{"Key":"anagrams it","Fragments":["wins"]},{"Key":"wins for","Fragments":["me."]},{"Key":"really happy","Fragments":["with"]},{"Key":"this. Seems","Fragments":["more"]},{"Key":"Seems more","Fragments":["complex","idiomatic"]},{"Key":"this recomputes","Fragments":["`sorted-lowered"]},{"Key":"recomputes `sorted-lowered","Fragments":["s`"]},{"Key":"`sorted-lowered s`","Fragments":["multiple"]},{"Key":"s` multiple","Fragments":["times,"]},{"Key":"multiple times,","Fragments":["but"]},{"Key":"times, but","Fragments":["I'm"]},{"Key":"I'm more","Fragments":["concerned"]},{"Key":"more concerned","Fragments":["with"]},{"Key":"code clarity","Fragments":["than"]},{"Key":"clarity than","Fragments":["efficiency"]},{"Key":"than efficiency","Fragments":["at"]},{"Key":"efficiency at","Fragments":["this"]},{"Key":" used","Fragments":["`pos?`"]},{"Key":"used `pos?`","Fragments":["instead"]},{"Key":"`pos?` instead","Fragments":["of"]},{"Key":"of `not`","Fragments":["`zero?`"]},{"Key":"Interesting ...","Fragments":["the"]},{"Key":"the `(apply","Fragments":["...)`","str"]},{"Key":"`(apply ...)`","Fragments":["term"]},{"Key":"...)` term","Fragments":["in"]},{"Key":"term in","Fragments":["`nucleotide-counts`"]},{"Key":"`nucleotide-counts` is","Fragments":["constant,"]},{"Key":"is constant,","Fragments":["and"]},{"Key":"constant, and","Fragments":["is"]},{"Key":"shorter written","Fragments":["directly"]},{"Key":"written directly","Fragments":["as"]},{"Key":"directly as","Fragments":["a","predicate"]},{"Key":"a literal","Fragments":["-","set"]},{"Key":"this shows","Fragments":["a"]},{"Key":"shows a","Fragments":["way"]},{"Key":"avoiding to","Fragments":["repeat"]},{"Key":"to repeat","Fragments":["the","`sentence`","that"]},{"Key":"repeat the","Fragments":["zero","function","same"]},{"Key":"zero manually","Fragments":["-"]},{"Key":"manually -","Fragments":["DRY."]},{"Key":" Curious:","Fragments":["Is"]},{"Key":"Curious: Is","Fragments":["it"]},{"Key":"remove duplication","Fragments":["of"]},{"Key":" Initially","Fragments":["did"]},{"Key":"Initially did","Fragments":["this"]},{"Key":"expressions but","Fragments":["a"]},{"Key":"functions seemed","Fragments":["more"]},{"Key":"seemed more","Fragments":["likely"]},{"Key":"more likely","Fragments":["to"]},{"Key":"likely to","Fragments":["be","be"]},{"Key":"be idiomatic,","Fragments":["not"]},{"Key":"idiomatic, not","Fragments":["to"]},{"Key":"mention more","Fragments":["flexible."]},{"Key":"more flexible.","Fragments":["(But","It"]},{"Key":"flexible. (But","Fragments":["I"]},{"Key":"idiomatic part","Fragments":["because"]},{"Key":"because I've","Fragments":["just"]},{"Key":"started learning","Fragments":["Clojure.)","clojure,"]},{"Key":" Realized","Fragments":["I"]},{"Key":"Realized I","Fragments":["could"]},{"Key":"use reduce","Fragments":["rather"]},{"Key":"reduce rather","Fragments":["than"]},{"Key":"than loop","Fragments":["to"]},{"Key":"loop to","Fragments":["make","loop"]},{"Key":"this both","Fragments":["shorter"]},{"Key":"both shorter","Fragments":["and"]},{"Key":"-- fixed","Fragments":["it"]},{"Key":"of interesting","Fragments":["because"]},{"Key":"interesting because","Fragments":["the","I"]},{"Key":"solution seems","Fragments":["straightforward,","acceptable"]},{"Key":"seems straightforward,","Fragments":["but"]},{"Key":"straightforward, but","Fragments":["the"]},{"Key":"answer here","Fragments":["is"]},{"Key":"is off","Fragments":["by"]},{"Key":"off by","Fragments":["30","the"]},{"Key":"by 30","Fragments":["days."]},{"Key":"30 days.","Fragments":["Oh"]},{"Key":"days. Oh","Fragments":["well?"]},{"Key":" Literally","Fragments":["the"]},{"Key":"Literally the","Fragments":["first"]},{"Key":"very open","Fragments":["to"]},{"Key":"to feedback","Fragments":["on"]},{"Key":"So ```dec-each-value```","Fragments":["decrements"]},{"Key":"```dec-each-value``` decrements","Fragments":["each"]},{"Key":"decrements each","Fragments":["value"]},{"Key":"each value","Fragments":["of"]},{"Key":"needed because","Fragments":["of"]},{"Key":"the hack","Fragments":["```"]},{"Key":"hack ```","Fragments":["(str"]},{"Key":"``` (str","Fragments":["nucleotides"]},{"Key":"(str nucleotides","Fragments":["s)```"]},{"Key":"solutions the","Fragments":["```merge```"]},{"Key":"the ```merge```","Fragments":["which"]},{"Key":"```merge``` which","Fragments":["is"]},{"Key":"is way","Fragments":["more"]},{"Key":"is clear,","Fragments":["but","great!"]},{"Key":"of more","Fragments":["of"]},{"Key":"of Clojure's","Fragments":["built-in","section","higher-order"]},{"Key":"Clojure's built-in","Fragments":["functions"]},{"Key":"of steps","Fragments":["and"]},{"Key":"steps and","Fragments":["eliminate"]},{"Key":"and eliminate","Fragments":["calls"]},{"Key":"eliminate calls","Fragments":["to"]},{"Key":"methods. Here","Fragments":["are"]},{"Key":"are two","Fragments":["things","(get","arguments?","places"]},{"Key":"worth looking","Fragments":["at"]},{"Key":"at as","Fragments":["a"]},{"Key":"1. There","Fragments":["are"]},{"Key":"are functions","Fragments":["in","in","in"]},{"Key":"clojure.core that","Fragments":["can","looks"]},{"Key":"your string","Fragments":["matching."]},{"Key":"string matching.","Fragments":["The"]},{"Key":"matching. The","Fragments":["functions"]},{"Key":"The functions","Fragments":["whose","with"]},{"Key":"names start","Fragments":["with"]},{"Key":"start with","Fragments":["\"re-\"","details,","'is':","a"]},{"Key":"with \"re-\"","Fragments":["should"]},{"Key":"\"re-\" should","Fragments":["be"]},{"Key":"be particularly","Fragments":["useful."]},{"Key":"2. One","Fragments":["of"]},{"Key":"be eliminated","Fragments":["by"]},{"Key":"eliminated by","Fragments":["using"]},{"Key":"map lookup.","Fragments":["Example"]},{"Key":"lookup. Example","Fragments":["of"]},{"Key":"Example of","Fragments":["how"]},{"Key":";; If","Fragments":["key","key"]},{"Key":"If key","Fragments":["is","is"]},{"Key":"is found,","Fragments":["default"]},{"Key":"found, default","Fragments":["value"]},{"Key":" ({:a","Fragments":["0,","0,","1","1"]},{"Key":"({:a 0,","Fragments":[":b",":b"]},{"Key":"0, :b","Fragments":["1}","1}"]},{"Key":":b 1}","Fragments":[":a",":c"]},{"Key":"1} :a","Fragments":["123)"]},{"Key":" ;=","Fragments":["0","123","1","3"]},{"Key":"not present,","Fragments":["default"]},{"Key":"present, default","Fragments":["value"]},{"Key":"1} :c","Fragments":["123)"]},{"Key":"couple things","Fragments":["you","of"]},{"Key":"things you","Fragments":["can","might","could","might"]},{"Key":"try here","Fragments":["to"]},{"Key":"here to","Fragments":["simplify","define","use"]},{"Key":"First, in","Fragments":["reduce-fn,"]},{"Key":"in reduce-fn,","Fragments":["you"]},{"Key":"reduce-fn, you","Fragments":["can"]},{"Key":"the \"default","Fragments":["value\""]},{"Key":"\"default value\"","Fragments":["feature"]},{"Key":"value\" feature","Fragments":["of"]},{"Key":"of map","Fragments":["lookups:","like","data-structure",":-)"]},{"Key":"({:a 1","Fragments":[":b",":b"]},{"Key":"2} :a","Fragments":["3)"]},{"Key":"2} :c","Fragments":["3)"]},{"Key":"Second, check","Fragments":["out"]},{"Key":"the \"frequencies\"","Fragments":["function","function;","function","function."]},{"Key":"\"frequencies\" function","Fragments":["in","in"]},{"Key":"in clojure.core;","Fragments":["it","it"]},{"Key":"clojure.core; it","Fragments":["will","should"]},{"Key":"work you're","Fragments":["doing","doing."]},{"Key":"you're doing","Fragments":["here.","could","is"]},{"Key":"symbol `c`","Fragments":["represent"]},{"Key":"`c` represent","Fragments":["in"]},{"Key":"represent in","Fragments":["this"]},{"Key":"this context?","Fragments":["I"]},{"Key":"context? I","Fragments":["don't"]},{"Key":"any harm","Fragments":["in"]},{"Key":"harm in","Fragments":["spelling"]},{"Key":"spelling out","Fragments":["exactly"]},{"Key":"out exactly","Fragments":["what","what"]},{"Key":"you intend","Fragments":["for"]},{"Key":"that to","Fragments":["be","the","simplify","the","end","build"]},{"Key":"be (`nucleotide`,","Fragments":["for"]},{"Key":"(`nucleotide`, for","Fragments":["example)."]},{"Key":"for example).","Fragments":["More","Nice!"]},{"Key":"example). More","Fragments":["importantly,"]},{"Key":"More importantly,","Fragments":["an"]},{"Key":"importantly, an","Fragments":["empty"]},{"Key":"empty `AssertionError`","Fragments":["throw"]},{"Key":"`AssertionError` throw","Fragments":["is"]},{"Key":"throw is","Fragments":["not"]},{"Key":"as helpful","Fragments":["as"]},{"Key":"helpful as","Fragments":["one","well."]},{"Key":"error message.","Fragments":["This"]},{"Key":"message. This","Fragments":["would"]},{"Key":"be seen","Fragments":["by","from"]},{"Key":"seen by","Fragments":["the","a"]},{"Key":"the user,","Fragments":["so"]},{"Key":"user, so","Fragments":["a"]},{"Key":"hint of","Fragments":["the"]},{"Key":"the required","Fragments":["input"]},{"Key":"required input","Fragments":["format"]},{"Key":"input format","Fragments":["would"]},{"Key":"format would","Fragments":["be"]},{"Key":"While keeping","Fragments":["the"]},{"Key":"code small","Fragments":["does"]},{"Key":"small does","Fragments":["help"]},{"Key":"does help","Fragments":["readability,"]},{"Key":"help readability,","Fragments":["it"]},{"Key":"readability, it","Fragments":["also"]},{"Key":"it also","Fragments":["obscures","results","separates"]},{"Key":"also obscures","Fragments":["the"]},{"Key":"obscures the","Fragments":["purpose","intent"]},{"Key":"the program.","Fragments":["I"]},{"Key":"prefer something","Fragments":["meaningful","like"]},{"Key":"meaningful for","Fragments":["the"]},{"Key":"parameter name.","Fragments":["Why","I"]},{"Key":"name. Why","Fragments":["not"]},{"Key":"not \"strand\"","Fragments":["instead"]},{"Key":"\"strand\" instead","Fragments":["of"]},{"Key":"of \"s\"?","Fragments":["Similarly,"]},{"Key":"\"s\"? Similarly,","Fragments":["you"]},{"Key":"Similarly, you","Fragments":["could"]},{"Key":"could turn","Fragments":["`{\\T"]},{"Key":"turn `{\\T","Fragments":["\\U}`"]},{"Key":"`{\\T \\U}`","Fragments":["and"]},{"Key":"\\U}` and","Fragments":["`(set"]},{"Key":"and `(set","Fragments":["\"CGAT\")`"]},{"Key":"`(set \"CGAT\")`","Fragments":["into"]},{"Key":"\"CGAT\")` into","Fragments":["named"]},{"Key":"named constants","Fragments":["to","to"]},{"Key":"constants to","Fragments":["make","make"]},{"Key":"make their","Fragments":["purposes"]},{"Key":"their purposes","Fragments":["clearer"]},{"Key":"purposes clearer","Fragments":["and"]},{"Key":"clearer and","Fragments":["improve","more"]},{"Key":"improve maintainability","Fragments":["(in"]},{"Key":"maintainability (in","Fragments":["the"]},{"Key":"(in the","Fragments":["extremely"]},{"Key":"the extremely","Fragments":["unlikely"]},{"Key":"extremely unlikely","Fragments":["case"]},{"Key":"unlikely case","Fragments":["that"]},{"Key":"case that","Fragments":["you'd","it","the"]},{"Key":"you'd ever","Fragments":["want"]},{"Key":"ever want","Fragments":["to"]},{"Key":"underlying data","Fragments":["representation"]},{"Key":"data representation","Fragments":["from"]},{"Key":"from strings","Fragments":["of"]},{"Key":"strings of","Fragments":["capital","less"]},{"Key":"of capital","Fragments":["letters","letters,","letters."]},{"Key":"letters to","Fragments":["something"]},{"Key":"Try factoring","Fragments":["your"]},{"Key":"factoring your","Fragments":["RE"]},{"Key":"your RE","Fragments":["and"]},{"Key":"RE and","Fragments":["the"]},{"Key":"nucleotide symbols","Fragments":["into"]},{"Key":"symbols into","Fragments":["named"]},{"Key":"code 100%","Fragments":["clear."]},{"Key":"100% clear.","Fragments":["I"]},{"Key":"clear. I","Fragments":["like","like"]},{"Key":"you included","Fragments":["a","a"]},{"Key":"included a","Fragments":["helpful","docstring;"]},{"Key":"a helpful","Fragments":["error"]},{"Key":"helpful error","Fragments":["message"]},{"Key":"message with","Fragments":["your"]},{"Key":"your AssertionError.","Fragments":["It"]},{"Key":"AssertionError. It","Fragments":["could"]},{"Key":"be expanded","Fragments":["to"]},{"Key":"expanded to","Fragments":["help"]},{"Key":"the user","Fragments":["create"]},{"Key":"user create","Fragments":["valid"]},{"Key":"create valid","Fragments":["strings"]},{"Key":"valid strings","Fragments":["like:"]},{"Key":"\u003e \"Invalid","Fragments":["DNA:"]},{"Key":"\"Invalid DNA:","Fragments":["input"]},{"Key":"DNA: input","Fragments":["string"]},{"Key":"string may","Fragments":["contain","be"]},{"Key":"may contain","Fragments":["only"]},{"Key":"contain only","Fragments":["\\A,","valid"]},{"Key":"only \\A,","Fragments":["\\C,"]},{"Key":"\\A, \\C,","Fragments":["\\G,"]},{"Key":"\\C, \\G,","Fragments":["and"]},{"Key":"\\G, and","Fragments":["\\T.\""]},{"Key":"some changes","Fragments":["taking"]},{"Key":"changes taking","Fragments":["into"]},{"Key":"taking into","Fragments":["account","account"]},{"Key":"account your","Fragments":["feedback:"]},{"Key":"to link","Fragments":["new"]},{"Key":"link new","Fragments":["submissions."]},{"Key":"new submissions.","Fragments":["The"]},{"Key":"submissions. The","Fragments":["link"]},{"Key":"The link","Fragments":["is"]},{"Key":"link is","Fragments":["there"]},{"Key":"there on","Fragments":["the"]},{"Key":"using `when-not`","Fragments":["instead"]},{"Key":"`when-not` instead","Fragments":["of"]},{"Key":"`if` for","Fragments":["checking"]},{"Key":"for valid","Fragments":["nucleotides","characters.","ones."]},{"Key":"keep a","Fragments":["clear","list"]},{"Key":"clear separation","Fragments":["between"]},{"Key":"separation between","Fragments":["validation","the"]},{"Key":"between validation","Fragments":["and"]},{"Key":"validation and","Fragments":["function","string","the"]},{"Key":"and function","Fragments":["body,","literals","naming","use"]},{"Key":"function body,","Fragments":["if","look"]},{"Key":"body, if","Fragments":["you"]},{"Key":" Absolutely","Fragments":["right,"]},{"Key":"Absolutely right,","Fragments":["that"]},{"Key":"right, that","Fragments":["was"]},{"Key":"was inattention","Fragments":["from"]},{"Key":"inattention from","Fragments":["my"]},{"Key":" Fixed","Fragments":["in","typo","spelling","spelling","broken"]},{"Key":"Fixed in","Fragments":["the"]},{"Key":"next iteration,","Fragments":["thank"]},{"Key":"iteration, thank","Fragments":["you."]},{"Key":" made","Fragments":["`names`","use","use"]},{"Key":"made `names`","Fragments":["a"]},{"Key":"`names` a","Fragments":["bit"]},{"Key":"great generally,","Fragments":["2"]},{"Key":"generally, 2","Fragments":["points"]},{"Key":"2 points","Fragments":["could"]},{"Key":"points could","Fragments":["be"]},{"Key":"- To","Fragments":["get","chain"]},{"Key":"To get","Fragments":["all"]},{"Key":"get all","Fragments":["words","the"]},{"Key":"a phase,","Fragments":["you"]},{"Key":"phase, you","Fragments":["could"]},{"Key":" (clojure.string/split","Fragments":["phrase"]},{"Key":"(clojure.string/split phrase","Fragments":["#\"\\W+\"","not-letter-or-number)]"]},{"Key":"phrase #\"\\W+\"","Fragments":[")"]},{"Key":"To chain","Fragments":["functions,"]},{"Key":"chain functions,","Fragments":["you"]},{"Key":"functions, you","Fragments":["could"]},{"Key":"macro ```-\u003e```,","Fragments":["like:"]},{"Key":"(-\u003e args","Fragments":["f"]},{"Key":"args f","Fragments":["g"]},{"Key":"f g","Fragments":["h)"]},{"Key":"1. Extracted","Fragments":["`alphagram`"]},{"Key":"Extracted `alphagram`","Fragments":["into"]},{"Key":"`alphagram` into","Fragments":["a"]},{"Key":"2. Moved","Fragments":["equality"]},{"Key":"Moved equality","Fragments":["check"]},{"Key":"Looks nice","Fragments":["and"]},{"Key":"and clean.","Fragments":["Can","Really"]},{"Key":"clean. Can","Fragments":["you"]},{"Key":"original `word`","Fragments":["being"]},{"Key":"`word` being","Fragments":["calculated"]},{"Key":"being calculated","Fragments":["again"]},{"Key":"calculated again","Fragments":["for","for"]},{"Key":"Also, I'm","Fragments":["not","having","finding","not"]},{"Key":"how appropriate","Fragments":["it"]},{"Key":"appropriate it","Fragments":["is"]},{"Key":"name \"alphagram\"","Fragments":["for"]},{"Key":"\"alphagram\" for","Fragments":["your"]},{"Key":"your frequency","Fragments":["map,"]},{"Key":"frequency map,","Fragments":["as"]},{"Key":"map, as","Fragments":["the"]},{"Key":"word has","Fragments":["a"]},{"Key":"specific meaning","Fragments":["related"]},{"Key":"meaning related","Fragments":["to"]},{"Key":" @lizeth","Fragments":["this"]},{"Key":"@lizeth this","Fragments":["exercise"]},{"Key":"was submitted","Fragments":["when"]},{"Key":"suite was","Fragments":["different"]},{"Key":"was different","Fragments":["than"]},{"Key":"current one.","Fragments":["I"]},{"Key":"haven't updated","Fragments":["it."]},{"Key":" @deanna,","Fragments":["sorry"]},{"Key":"@deanna, sorry","Fragments":["for"]},{"Key":"the delay.","Fragments":["Thanks"]},{"Key":"delay. Thanks","Fragments":["for"]},{"Key":"tip. That","Fragments":["cond"]},{"Key":"That cond","Fragments":["switch"]},{"Key":"cond switch","Fragments":["statement"]},{"Key":"switch statement","Fragments":["is"]},{"Key":"statement is","Fragments":["much","just","improved.","really"]},{"Key":"seen ```clojure.core/filter```?","Fragments":["Might"]},{"Key":"```clojure.core/filter```? Might","Fragments":["be"]},{"Key":"useful for","Fragments":["you","you"]},{"Key":" @reynold","Fragments":["oops,"]},{"Key":"@reynold oops,","Fragments":["i've"]},{"Key":"oops, i've","Fragments":["actually"]},{"Key":"i've actually","Fragments":["introduced"]},{"Key":"actually introduced","Fragments":["a"]},{"Key":"bug here.","Fragments":["the"]},{"Key":"here. the","Fragments":["`alphagram`"]},{"Key":"the `alphagram`","Fragments":["method","for"]},{"Key":"`alphagram` method","Fragments":["is"]},{"Key":"really an","Fragments":["alphagram,"]},{"Key":"an alphagram,","Fragments":["its"]},{"Key":"alphagram, its","Fragments":["a"]},{"Key":"its a","Fragments":["frequency"]},{"Key":"map :))","Fragments":["will"]},{"Key":":)) will","Fragments":["fix"]},{"Key":"fix in","Fragments":["next","the"]},{"Key":"and point","Fragments":["taken"]},{"Key":"point taken","Fragments":["about"]},{"Key":"taken about","Fragments":["pre-creating"]},{"Key":"about pre-creating","Fragments":["the"]},{"Key":"pre-creating the","Fragments":["`alphagram`"]},{"Key":"`alphagram` for","Fragments":["word."]},{"Key":"pretty good,","Fragments":["although","but"]},{"Key":"there's room","Fragments":["here"]},{"Key":"room here","Fragments":["for"]},{"Key":"another function.","Fragments":["The"]},{"Key":"function. The","Fragments":["reader","second"]},{"Key":"The reader","Fragments":["has"]},{"Key":"reader has","Fragments":["to"]},{"Key":"dig pretty","Fragments":["deep"]},{"Key":"pretty deep","Fragments":["into"]},{"Key":"into ```anagram.anagrams-for```'s","Fragments":["stack"]},{"Key":"```anagram.anagrams-for```'s stack","Fragments":["to"]},{"Key":"stack to","Fragments":["figure"]},{"Key":"exactly it's","Fragments":["trying"]},{"Key":"it's trying","Fragments":["to","to"]},{"Key":" Furthermore,","Fragments":["is"]},{"Key":"Furthermore, is","Fragments":["```char-counts```"]},{"Key":"is ```char-counts```","Fragments":["a"]},{"Key":"```char-counts``` a","Fragments":["function"]},{"Key":"function you'd","Fragments":["want"]},{"Key":"you'd want","Fragments":["to"]},{"Key":"be publicly","Fragments":["used?"]},{"Key":"publicly used?","Fragments":["It's"]},{"Key":"used? It's","Fragments":["always"]},{"Key":"always worthwhile","Fragments":["to"]},{"Key":"more thing:","Fragments":["it"]},{"Key":"thing: it","Fragments":["seems"]},{"Key":"more accepted","Fragments":["style"]},{"Key":"close out","Fragments":["your"]},{"Key":"your parentheses","Fragments":["on"]},{"Key":"final line","Fragments":["of"]},{"Key":"of whatever","Fragments":["wraps"]},{"Key":"whatever wraps","Fragments":["them"]},{"Key":"wraps them","Fragments":["up."]},{"Key":"them up.","Fragments":["In"]},{"Key":"up. In","Fragments":["this"]},{"Key":"you'd just","Fragments":["put"]},{"Key":"the parens","Fragments":["on"]},{"Key":"lines 12-14","Fragments":["at"]},{"Key":"12-14 at","Fragments":["the"]},{"Key":"the insight.","Fragments":["`clojure.core/filter`"]},{"Key":"insight. `clojure.core/filter`","Fragments":["and"]},{"Key":"`clojure.core/filter` and","Fragments":["function"]},{"Key":"literals really","Fragments":["made"]},{"Key":"really made","Fragments":["the"]},{"Key":"Maybe consider","Fragments":["the"]},{"Key":"of regex","Fragments":["#\"[a-zA-Z]\"","to","you","in"]},{"Key":"regex #\"[a-zA-Z]\"","Fragments":["to"]},{"Key":"#\"[a-zA-Z]\" to","Fragments":["detect"]},{"Key":"the presence","Fragments":["of"]},{"Key":"presence of","Fragments":["letters.","preconditions","the"]},{"Key":"of letters.","Fragments":["This"]},{"Key":"letters. This","Fragments":["would"]},{"Key":"would avoid","Fragments":["the"]},{"Key":"might just","Fragments":["be"]},{"Key":"to in","Fragments":["Clojure,","my"]},{"Key":"define \u003ccode\u003everify-dna\u003c/code\u003e","Fragments":["*below*"]},{"Key":"\u003ccode\u003everify-dna\u003c/code\u003e *below*","Fragments":["\u003ccode\u003eto-rna\u003c/code\u003e"]},{"Key":"*below* \u003ccode\u003eto-rna\u003c/code\u003e","Fragments":["since"]},{"Key":"\u003ccode\u003eto-rna\u003c/code\u003e since","Fragments":["that"]},{"Key":"main thing","Fragments":["I"]},{"Key":"am trying","Fragments":["to"]},{"Key":"Super readable.","Fragments":["Nice"]},{"Key":"readable. Nice","Fragments":["small"]},{"Key":"Nice small","Fragments":["functions"]},{"Key":"small functions","Fragments":["with","that"]},{"Key":"with great","Fragments":["names."]},{"Key":"great names.","Fragments":["I've"]},{"Key":"names. I've","Fragments":["not"]},{"Key":"not seen","Fragments":["[`condp`](http://clojuredocs.org/clojure_core/clojure.core/condp)","it"]},{"Key":"seen [`condp`](http://clojuredocs.org/clojure_core/clojure.core/condp)","Fragments":["before,"]},{"Key":"[`condp`](http://clojuredocs.org/clojure_core/clojure.core/condp) before,","Fragments":["so"]},{"Key":" line","Fragments":["9","2","3","5","6","6","7","7","8","8:","11","13","2","5","15","19","21:","32:","40:","97:","109:","9"]},{"Key":"9 -","Fragments":["Could"]},{"Key":"- Could","Fragments":["you"]},{"Key":"a message","Fragments":["telling"]},{"Key":"message telling","Fragments":["us"]},{"Key":"telling us","Fragments":["\"why\""]},{"Key":"us \"why\"","Fragments":["we"]},{"Key":"\"why\" we","Fragments":["failed"]},{"Key":"we failed","Fragments":["transcription?"]},{"Key":"definitely a","Fragments":["Clojure","better","good"]},{"Key":"and functional","Fragments":["programming"]},{"Key":"programming novice","Fragments":["so"]},{"Key":"novice so","Fragments":["I"]},{"Key":"be surprised","Fragments":["if"]},{"Key":"surprised if","Fragments":["my"]},{"Key":"if my","Fragments":["solution"]},{"Key":"little nonsensical,","Fragments":["but"]},{"Key":"nonsensical, but","Fragments":["I'm"]},{"Key":"I'm thankful","Fragments":["for"]},{"Key":"thankful for","Fragments":["any"]},{"Key":"of [`defn-`](http://clojuredocs.org/clojure_core/clojure.core/defn-)","Fragments":["for"]},{"Key":"[`defn-`](http://clojuredocs.org/clojure_core/clojure.core/defn-) for","Fragments":["scope"]},{"Key":"for scope","Fragments":["control."]},{"Key":"scope control.","Fragments":["I"]},{"Key":"control. I","Fragments":["often"]},{"Key":"often overlook","Fragments":["that"]},{"Key":"overlook that","Fragments":["in"]},{"Key":"You're making","Fragments":["great"]},{"Key":"making great","Fragments":["use"]},{"Key":"of `seq`","Fragments":["based"]},{"Key":"`seq` based","Fragments":["thinking"]},{"Key":"based thinking","Fragments":["in"]},{"Key":"thinking in","Fragments":["your"]},{"Key":"2 -","Fragments":["Removing","I","you","Since","Since"]},{"Key":"- Removing","Fragments":["this"]},{"Key":"Removing this","Fragments":["doesn't"]},{"Key":"this doesn't","Fragments":["impact","feel","immediately"]},{"Key":"doesn't impact","Fragments":["the"]},{"Key":"impact the","Fragments":["code."]},{"Key":"code. What","Fragments":["are"]},{"Key":"line 3","Fragments":["-"]},{"Key":"- Convert","Fragments":["is"]},{"Key":"Convert is","Fragments":["a"]},{"Key":"a generic","Fragments":["term.","way,"]},{"Key":"generic term.","Fragments":["would"]},{"Key":"term. would","Fragments":["another"]},{"Key":"would another","Fragments":["name"]},{"Key":"another name","Fragments":["be","like:"]},{"Key":"name be","Fragments":["clearer?"]},{"Key":"line 5","Fragments":["-","\u0026"]},{"Key":"5 -","Fragments":["The","If","You"]},{"Key":"- The","Fragments":["argument","message","message"]},{"Key":"The argument","Fragments":["name"]},{"Key":"name letters","Fragments":["feels"]},{"Key":"letters feels","Fragments":["like"]},{"Key":"you're addressing","Fragments":["an"]},{"Key":"addressing an","Fragments":["implementation"]},{"Key":"implementation detail,","Fragments":["not","not"]},{"Key":"detail, not","Fragments":["a","the"]},{"Key":"a domain","Fragments":["construct.","concept,","concept","concept","concept"]},{"Key":"domain construct.","Fragments":["Is","Is"]},{"Key":"construct. Is","Fragments":["there","there"]},{"Key":"line 6","Fragments":["-","-"]},{"Key":"6 -","Fragments":["This","you"]},{"Key":"This test","Fragments":["only"]},{"Key":"test only","Fragments":["covers"]},{"Key":"only covers","Fragments":["the"]},{"Key":"covers the","Fragments":["special"]},{"Key":"nucleotide \"X\"","Fragments":["from"]},{"Key":"\"X\" from","Fragments":["the"]},{"Key":"test script.","Fragments":["Would"]},{"Key":"script. Would","Fragments":["it"]},{"Key":"explicitly check","Fragments":["for"]},{"Key":"for good","Fragments":["nucleotides?","measure!"]},{"Key":"good nucleotides?","Fragments":["You"]},{"Key":"nucleotides? You","Fragments":["might"]},{"Key":"use [`(every?","Fragments":["som-set"]},{"Key":"[`(every? som-set","Fragments":["some-collection)`](http://clojuredocs.org/clojure_core/clojure.core/every_q)"]},{"Key":"som-set some-collection)`](http://clojuredocs.org/clojure_core/clojure.core/every_q)","Fragments":["to"]},{"Key":"some-collection)`](http://clojuredocs.org/clojure_core/clojure.core/every_q) to","Fragments":["ensure"]},{"Key":"ensure all","Fragments":["nucleotides"]},{"Key":"all nucleotides","Fragments":["in"]},{"Key":"dna strand","Fragments":["are"]},{"Key":"strand are","Fragments":["valid."]},{"Key":"are valid.","Fragments":["This"]},{"Key":"valid. This","Fragments":["would"]},{"Key":"would flip","Fragments":["the"]},{"Key":"flip the","Fragments":["logic","order"]},{"Key":"the \"letters\"","Fragments":["from"]},{"Key":"\"letters\" from","Fragments":["a"]},{"Key":"strings twice.","Fragments":["consider"]},{"Key":"twice. consider","Fragments":["[`let`](http://clojuredocs.org/clojure_core/clojure.core/let)"]},{"Key":"consider [`let`](http://clojuredocs.org/clojure_core/clojure.core/let)","Fragments":["to"]},{"Key":"[`let`](http://clojuredocs.org/clojure_core/clojure.core/let) to","Fragments":["reduce"]},{"Key":"7 -","Fragments":["`(AssertError.","The"]},{"Key":"- `(AssertError.","Fragments":["\"AssertionError\")`"]},{"Key":"`(AssertError. \"AssertionError\")`","Fragments":["would"]},{"Key":"\"AssertionError\")` would","Fragments":["replace"]},{"Key":"the `new`","Fragments":["operator"]},{"Key":"`new` operator","Fragments":["with"]},{"Key":"operator with","Fragments":["the"]},{"Key":"the [`Classname.`","Fragments":["special"]},{"Key":"[`Classname.` special","Fragments":["form](http://clojure.org/java_interop#Java"]},{"Key":"special form](http://clojure.org/java_interop#Java","Fragments":["Interop-The"]},{"Key":"form](http://clojure.org/java_interop#Java Interop-The","Fragments":["Dot"]},{"Key":"Interop-The Dot","Fragments":["special"]},{"Key":"Dot special","Fragments":["form-(Classname."]},{"Key":"special form-(Classname.","Fragments":["args*))"]},{"Key":"form-(Classname. args*))","Fragments":["and"]},{"Key":"args*)) and","Fragments":["redundant"]},{"Key":"and redundant","Fragments":["call"]},{"Key":"redundant call","Fragments":["to"]},{"Key":"The message","Fragments":["\"AssertionError\"","could"]},{"Key":"message \"AssertionError\"","Fragments":["is"]},{"Key":"\"AssertionError\" is","Fragments":["vague."]},{"Key":"is vague.","Fragments":["Why"]},{"Key":"vague. Why","Fragments":["are"]},{"Key":"are we","Fragments":["asserting?","asserting?"]},{"Key":"8 -","Fragments":["deep"]},{"Key":"- deep","Fragments":["nesting"]},{"Key":"deep nesting","Fragments":["where"]},{"Key":"nesting where","Fragments":["everything"]},{"Key":"the post","Fragments":["position"]},{"Key":"post position","Fragments":["can"]},{"Key":"position can","Fragments":["be"]},{"Key":"be opened","Fragments":["with"]},{"Key":"opened with","Fragments":["the"]},{"Key":"the thread-last","Fragments":["macro","macro"]},{"Key":"thread-last macro","Fragments":["[`-\u003e\u003e`](http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E).","would"]},{"Key":"macro [`-\u003e\u003e`](http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E).","Fragments":["It"]},{"Key":"[`-\u003e\u003e`](http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E). It","Fragments":["would"]},{"Key":" (reduce","Fragments":["concat)","concat","(fn"]},{"Key":"more clear,","Fragments":["you","in","you"]},{"Key":"clear, you","Fragments":["can","could"]},{"Key":"can leave","Fragments":["commas"]},{"Key":"leave commas","Fragments":["(since"]},{"Key":"commas (since","Fragments":["they"]},{"Key":"(since they","Fragments":["are"]},{"Key":"in clojure)","Fragments":["in"]},{"Key":"clojure) in","Fragments":["the"]},{"Key":"the places","Fragments":["where"]},{"Key":"would put","Fragments":["the","each","the","at","the"]},{"Key":"previous value,","Fragments":["as"]},{"Key":"value, as","Fragments":["in:"]},{"Key":"(map str","Fragments":[",,,)"]},{"Key":"(map convert","Fragments":[",,,)"]},{"Key":"(reduce concat","Fragments":[",,,)"]},{"Key":"line 8:","Fragments":["I"]},{"Key":"8: I","Fragments":["think"]},{"Key":"the `(reduce","Fragments":["concat"]},{"Key":"`(reduce concat","Fragments":[",,,)`"]},{"Key":"concat ,,,)`","Fragments":["since"]},{"Key":",,,)` since","Fragments":["`(apply"]},{"Key":"since `(apply","Fragments":["str"]},{"Key":"str ,,,)`","Fragments":["already"]},{"Key":",,,)` already","Fragments":["combines"]},{"Key":"already combines","Fragments":["strings"]},{"Key":"line 11","Fragments":["-","-"]},{"Key":"11 -","Fragments":["using","You"]},{"Key":"- using","Fragments":["the","a"]},{"Key":"name letter","Fragments":["puts"]},{"Key":"letter puts","Fragments":["us"]},{"Key":"puts us","Fragments":["in"]},{"Key":"us in","Fragments":["mind"]},{"Key":"mind of","Fragments":["the"]},{"Key":"13 -","Fragments":["I"]},{"Key":"think letter","Fragments":["is"]},{"Key":"string here,","Fragments":["so"]},{"Key":"here, so","Fragments":["we"]},{"Key":"replace `(str","Fragments":["letter)`"]},{"Key":"`(str letter)`","Fragments":["with"]},{"Key":"letter)` with","Fragments":["`letter`"]},{"Key":"at [`every?`](http://clojuredocs.org/clojure_core/clojure.core/every_q)","Fragments":["as"]},{"Key":"[`every?`](http://clojuredocs.org/clojure_core/clojure.core/every_q) as","Fragments":["it"]},{"Key":"form that","Fragments":["tests","you"]},{"Key":"for set","Fragments":["membership,"]},{"Key":"set membership,","Fragments":["like"]},{"Key":"membership, like","Fragments":["`(every?"]},{"Key":"like `(every?","Fragments":["#{\\T"]},{"Key":"`(every? #{\\T","Fragments":["\\U"]},{"Key":"#{\\T \\U","Fragments":["\\A"]},{"Key":"\\U \\A","Fragments":["\\C"]},{"Key":"\\C \\G}","Fragments":["dna)`."]},{"Key":"\\G} dna)`.","Fragments":["This"]},{"Key":"dna)`. This","Fragments":["would"]},{"Key":"find dna","Fragments":["strands"]},{"Key":"dna strands","Fragments":["with","as"]},{"Key":"with invalid","Fragments":["nucleotides."]},{"Key":"invalid nucleotides.","Fragments":["Once"]},{"Key":"nucleotides. Once","Fragments":["you"]},{"Key":"Once you","Fragments":["find"]},{"Key":"an invalid","Fragments":["strand,"]},{"Key":"invalid strand,","Fragments":["take"]},{"Key":"strand, take","Fragments":["a"]},{"Key":"at [`assert`](http://clojuredocs.org/clojure_core/clojure.core/assert)","Fragments":["to"]},{"Key":"[`assert`](http://clojuredocs.org/clojure_core/clojure.core/assert) to","Fragments":["throw"]},{"Key":"to throw","Fragments":["the","when","an"]},{"Key":"throw the","Fragments":["error.","AssertionError"]},{"Key":"just check","Fragments":["if","that"]},{"Key":"i did","Fragments":["it"]},{"Key":"the \u003ccode\u003e#\u003c/code\u003e","Fragments":["shorthand"]},{"Key":"\u003ccode\u003e#\u003c/code\u003e shorthand","Fragments":["for"]},{"Key":"for declaring","Fragments":["a"]},{"Key":"declaring a","Fragments":["regex."]},{"Key":"a regex.","Fragments":["Nicely","Did"]},{"Key":"regex. Nicely","Fragments":["done"]},{"Key":"Nicely done","Fragments":[":thumbsup:"]},{"Key":"main response-for","Fragments":["method"]},{"Key":"method do","Fragments":["you"]},{"Key":"define it","Fragments":["as"]},{"Key":"as \u003ccode\u003ebob/response-for\u003c/code\u003e?","Fragments":["I"]},{"Key":"\u003ccode\u003ebob/response-for\u003c/code\u003e? I","Fragments":["thought"]},{"Key":"it \u003ccode\u003eresponse-for\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eresponse-for\u003c/code\u003e and","Fragments":["it"]},{"Key":"namespace since","Fragments":["you"]},{"Key":"you declared","Fragments":["your"]},{"Key":"declared your","Fragments":["namespace"]},{"Key":"for \u003ccode\u003eyell?\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eyell?\u003c/code\u003e and","Fragments":["\u003ccode\u003equestion?\u003c/code\u003e,"]},{"Key":"and \u003ccode\u003equestion?\u003c/code\u003e,","Fragments":["but"]},{"Key":"\u003ccode\u003equestion?\u003c/code\u003e, but","Fragments":["the"]},{"Key":"name \u003ccode\u003enothing?\u003c/code\u003e","Fragments":["doesn't"]},{"Key":"\u003ccode\u003enothing?\u003c/code\u003e doesn't","Fragments":["seem"]},{"Key":"to fit","Fragments":["as","on"]},{"Key":"fit as","Fragments":["well."]},{"Key":"well. Is","Fragments":["there"]},{"Key":"word that","Fragments":["carries"]},{"Key":"that carries","Fragments":["the"]},{"Key":"carries the","Fragments":["context"]},{"Key":"of hearing","Fragments":["nothing?"]},{"Key":"hearing nothing?","Fragments":["Something"]},{"Key":"nothing? Something","Fragments":["that"]},{"Key":"Something that","Fragments":["has"]},{"Key":"a connotation","Fragments":["of"]},{"Key":"connotation of","Fragments":["a"]},{"Key":"a conversation","Fragments":["or"]},{"Key":"conversation or","Fragments":["dialogue?"]},{"Key":"would leverage","Fragments":["the"]},{"Key":"leverage the","Fragments":["fact"]},{"Key":"maps are","Fragments":["functions","also"]},{"Key":"what else","Fragments":["to"]},{"Key":"else to","Fragments":["call"]},{"Key":"call dna-rna","Fragments":["though…"]},{"Key":"dna-rna though…","Fragments":["Naming"]},{"Key":"though… Naming","Fragments":["is"]},{"Key":"Naming is","Fragments":["hard."]},{"Key":"I seriously","Fragments":["appreciate"]},{"Key":"seriously appreciate","Fragments":["that"]},{"Key":"have solved","Fragments":["this","`nucelotide-counts`"]},{"Key":"solved this","Fragments":["problem"]},{"Key":"problem several","Fragments":["different"]},{"Key":"several different","Fragments":["ways"]},{"Key":"different ways","Fragments":["(although"]},{"Key":"ways (although","Fragments":["your"]},{"Key":"(although your","Fragments":["previous"]},{"Key":"previous iterations","Fragments":["with","and","because"]},{"Key":"iterations with","Fragments":["multiple"]},{"Key":"multiple filters","Fragments":["were"]},{"Key":"filters were","Fragments":["pretty"]},{"Key":"were pretty","Fragments":["terrible"]},{"Key":"pretty terrible","Fragments":["in"]},{"Key":"terrible in","Fragments":["a"]},{"Key":"good sort","Fragments":["of"]},{"Key":"think you'll","Fragments":["get"]},{"Key":"you'll get","Fragments":["much"]},{"Key":"much good","Fragments":["feedback"]},{"Key":"good feedback","Fragments":["on","to"]},{"Key":"code until","Fragments":["you"]},{"Key":"actually attempt","Fragments":["to"]},{"Key":"attempt to","Fragments":["address","DRY","get"]},{"Key":"address the","Fragments":["problem"]},{"Key":"as outlined","Fragments":["in"]},{"Key":"outlined in","Fragments":["the"]},{"Key":"about \u003ccode\u003edefn-\u003c/code\u003e","Fragments":["from"]},{"Key":"\u003ccode\u003edefn-\u003c/code\u003e from","Fragments":["reading"]},{"Key":"from reading","Fragments":["your"]},{"Key":"reading your","Fragments":["nit"]},{"Key":"nit history.","Fragments":["Awesome!"]},{"Key":"bit new","Fragments":["to"]},{"Key":"most standard","Fragments":["way"]},{"Key":"standard way","Fragments":["to"]},{"Key":"end your","Fragments":["functions"]},{"Key":"the put","Fragments":["all"]},{"Key":"put all","Fragments":["the","ending"]},{"Key":"an expression","Fragments":["something","that","as"]},{"Key":"expression something","Fragments":["like:"]},{"Key":"(string/upper-case input)","Fragments":["input)"]},{"Key":"(= (string/lower-case","Fragments":["input)"]},{"Key":"(string/lower-case input)","Fragments":["input))))"]},{"Key":"definitely in","Fragments":["the"]},{"Key":"the category","Fragments":["of"]},{"Key":"category of","Fragments":["a"]},{"Key":"small nit","Fragments":["to","I"]},{"Key":"pick, but","Fragments":["using"]},{"Key":"but using","Fragments":["a","`repeatedly`"]},{"Key":"regex just","Fragments":["to"]},{"Key":"mark at","Fragments":["the","the","the"]},{"Key":"end seems","Fragments":["a"]},{"Key":"little heavy-handed.","Fragments":["Are"]},{"Key":"heavy-handed. Are","Fragments":["there"]},{"Key":"Are there","Fragments":["simple","performance"]},{"Key":"there simple","Fragments":["string"]},{"Key":"or seq","Fragments":["functions"]},{"Key":"you whats","Fragments":["at"]},{"Key":"whats at","Fragments":["the"]},{"Key":"Perhaps your","Fragments":["predicates"]},{"Key":"your predicates","Fragments":["could"]},{"Key":"predicates could","Fragments":["be"]},{"Key":"be pulled","Fragments":["out","out"]},{"Key":"pulled out","Fragments":["into","string-parts","easily.","the"]},{"Key":" Right","Fragments":["now","you","you"]},{"Key":"predicate carefully","Fragments":["to"]},{"Key":"carefully to","Fragments":["figure"]},{"Key":"is trying","Fragments":["to"]},{"Key":"to check.","Fragments":["It"]},{"Key":"check. It","Fragments":["might"]},{"Key":"they had","Fragments":["names"]},{"Key":"had names","Fragments":["like"]},{"Key":"this great","Fragments":["post"]},{"Key":"great post","Fragments":["about"]},{"Key":"post about","Fragments":["```:pre```"]},{"Key":"about ```:pre```","Fragments":["condition"]},{"Key":"learned today","Fragments":["that"]},{"Key":"today that","Fragments":["for"]},{"Key":"for methods","Fragments":["you","that"]},{"Key":"methods you","Fragments":["don't","have"]},{"Key":"want exposed","Fragments":["from"]},{"Key":"exposed from","Fragments":["your"]},{"Key":"namespace (ie","Fragments":["only-numbers?,"]},{"Key":"(ie only-numbers?,","Fragments":["question?,"]},{"Key":"only-numbers?, question?,","Fragments":["etc)"]},{"Key":"question?, etc)","Fragments":["you"]},{"Key":"etc) you","Fragments":["can"]},{"Key":"them like","Fragments":["this:"]},{"Key":"(defn- only-numbers","Fragments":["...)"]},{"Key":"The \u003ccode\u003edefn-\u003c/code\u003e","Fragments":["basically"]},{"Key":"\u003ccode\u003edefn-\u003c/code\u003e basically","Fragments":["makes"]},{"Key":"basically makes","Fragments":["them"]},{"Key":"makes them","Fragments":["private."]},{"Key":"also suggest","Fragments":["you"]},{"Key":"at \u003ccode\u003econd\u003c/code\u003e","Fragments":["in"]},{"Key":"\u003ccode\u003econd\u003c/code\u003e in","Fragments":["the"]},{"Key":"main block","Fragments":["of"]},{"Key":"block of","Fragments":["your"]},{"Key":"your \u003ccode\u003eresponse-for\u003c/code\u003e","Fragments":["method"]},{"Key":"\u003ccode\u003eresponse-for\u003c/code\u003e method","Fragments":["instead"]},{"Key":"nesting multiple","Fragments":["\u003ccode\u003eif\u003c/code\u003e"]},{"Key":"multiple \u003ccode\u003eif\u003c/code\u003e","Fragments":["calls."]},{"Key":"right! I","Fragments":["think"]},{"Key":"the String#endsWith","Fragments":["method"]},{"Key":"String#endsWith method","Fragments":["(from"]},{"Key":"method (from","Fragments":["Java)"]},{"Key":"(from Java)","Fragments":["can"]},{"Key":"Java) can","Fragments":["be"]},{"Key":"But isn't","Fragments":["`defn-`"]},{"Key":"isn't `defn-`","Fragments":["defines"]},{"Key":"`defn-` defines","Fragments":["a"]},{"Key":"defines a","Fragments":["private"]},{"Key":"function, hence","Fragments":["`matches`"]},{"Key":"hence `matches`","Fragments":["is"]},{"Key":"`matches` is","Fragments":["invisible"]},{"Key":"is invisible","Fragments":["from"]},{"Key":"invisible from","Fragments":["outside?"]},{"Key":"Yes, indeed.","Fragments":["It"]},{"Key":"indeed. It","Fragments":["makes"]},{"Key":"readable. I","Fragments":["did"]},{"Key":"more refactoring","Fragments":["on"]},{"Key":"refactoring on","Fragments":["the"]},{"Key":"the control","Fragments":["flow;"]},{"Key":"control flow;","Fragments":["maybe"]},{"Key":"flow; maybe","Fragments":["it's"]},{"Key":"implement a","Fragments":["macro","one-liner"]},{"Key":"added an","Fragments":["explanatory"]},{"Key":"an explanatory","Fragments":["message"]},{"Key":"explanatory message","Fragments":["to"]},{"Key":"message to","Fragments":["the"]},{"Key":"the assert","Fragments":["error.","is","evaluates"]},{"Key":"`transcribe` function,","Fragments":["and"]},{"Key":"and whether","Fragments":["or"]},{"Key":"...)` should","Fragments":["be"]},{"Key":"in `transcribe`","Fragments":["or"]},{"Key":"`transcribe` or","Fragments":["`to-rna`."]},{"Key":"function precondition","Fragments":["for","to"]},{"Key":"precondition for","Fragments":["validating"]},{"Key":"for validating","Fragments":["the"]},{"Key":"validating the","Fragments":["input."]},{"Key":" @daryl","Fragments":["Thanks"]},{"Key":"@daryl Thanks","Fragments":["for"]},{"Key":"tip. Check","Fragments":["out"]},{"Key":"out my","Fragments":["latest","naming","submission"]},{"Key":" Indefinite","Fragments":["articles"]},{"Key":"Indefinite articles","Fragments":["in"]},{"Key":"articles in","Fragments":["English"]},{"Key":"in English","Fragments":["are"]},{"Key":"English are","Fragments":["pretty"]},{"Key":"pretty strange","Fragments":["compared"]},{"Key":"strange compared","Fragments":["to"]},{"Key":"languages. Since","Fragments":["\"invalid\""]},{"Key":"Since \"invalid\"","Fragments":["begins"]},{"Key":"\"invalid\" begins","Fragments":["with"]},{"Key":"begins with","Fragments":["a"]},{"Key":"a vowel","Fragments":["sound,"]},{"Key":"vowel sound,","Fragments":["it"]},{"Key":"sound, it","Fragments":["should"]},{"Key":"be \"an","Fragments":["invalid"]},{"Key":"\"an invalid","Fragments":["nucleotide\"."]},{"Key":"simpler for","Fragments":["me"]},{"Key":"read. I","Fragments":["think"]},{"Key":"for \u003ccode\u003eshouting?\u003c/code\u003e","Fragments":["but"]},{"Key":"\u003ccode\u003eshouting?\u003c/code\u003e but","Fragments":["it"]},{"Key":"that \u003ccode\u003e(declare","Fragments":["...\u003c/code\u003e"]},{"Key":"\u003ccode\u003e(declare ...\u003c/code\u003e","Fragments":["trick"]},{"Key":"...\u003c/code\u003e trick","Fragments":["before."]},{"Key":"trick before.","Fragments":["It's"]},{"Key":"before. It's","Fragments":["nice"]},{"Key":"It's nice","Fragments":["to"]},{"Key":"main function","Fragments":["closer","here"]},{"Key":"function closer","Fragments":["to"]},{"Key":"closer to","Fragments":["the","the","the","the","where","use,"]},{"Key":"the file.","Fragments":["Makes","It's"]},{"Key":"file. Makes","Fragments":["it"]},{"Key":"Makes it","Fragments":["easier","immediately"]},{"Key":"also get","Fragments":["around"]},{"Key":"around using","Fragments":["\u003ccode\u003econdp\u003c/code\u003e"]},{"Key":"using \u003ccode\u003econdp\u003c/code\u003e","Fragments":["by"]},{"Key":"\u003ccode\u003econdp\u003c/code\u003e by","Fragments":["just"]},{"Key":"regular \u003ccode\u003econd\u003c/code\u003e","Fragments":["like:"]},{"Key":"(silence? sentence)","Fragments":["\"Fine."]},{"Key":"sentence) \"Fine.","Fragments":["Be"]},{"Key":" Cool!","Fragments":["You","I","Did"]},{"Key":"Cool! You","Fragments":["might"]},{"Key":"using clojure.string/split","Fragments":["instead"]},{"Key":"clojure.string/split instead","Fragments":["of"]},{"Key":"of re-seq","Fragments":["#\"\\w+\"."]},{"Key":"re-seq #\"\\w+\".","Fragments":["It's"]},{"Key":"#\"\\w+\". It's","Fragments":["also"]},{"Key":"good style","Fragments":["to"]},{"Key":"leave ending","Fragments":["parens"]},{"Key":"(frequencies (prepare","Fragments":["the_phrase)))"]},{"Key":"It's overkill","Fragments":["in"]},{"Key":"But seeing","Fragments":["the"]},{"Key":"seeing the","Fragments":["java","final"]},{"Key":"java version","Fragments":["I"]},{"Key":"version I","Fragments":["think"]},{"Key":"better since","Fragments":["\u003ccode\u003eendsWith\u003c/code\u003e"]},{"Key":"since \u003ccode\u003eendsWith\u003c/code\u003e","Fragments":["describes"]},{"Key":"\u003ccode\u003eendsWith\u003c/code\u003e describes","Fragments":["the"]},{"Key":"question you","Fragments":["are"]},{"Key":"are asking","Fragments":["perhaps"]},{"Key":"asking perhaps","Fragments":["better"]},{"Key":"perhaps better","Fragments":["than"]},{"Key":"Cool! I","Fragments":["hadn't"]},{"Key":"hadn't worked","Fragments":["out"]},{"Key":"solution `last`.","Fragments":["Thanks!"]},{"Key":"you run","Fragments":["the","the"]},{"Key":"in bob_test.clj?","Fragments":["Runnig"]},{"Key":"bob_test.clj? Runnig","Fragments":["it"]},{"Key":"Runnig it","Fragments":["gives"]},{"Key":"me 4","Fragments":["failures."]},{"Key":"the precondition","Fragments":["too.","will"]},{"Key":"Thanks @ariane.","Fragments":["I'll"]},{"Key":"@ariane. I'll","Fragments":["rewrite"]},{"Key":"I'll rewrite","Fragments":["the"]},{"Key":"rewrite the","Fragments":["splitting"]},{"Key":"splitting into","Fragments":["words"]},{"Key":"words code","Fragments":["to"]},{"Key":"the histogram,","Fragments":["but"]},{"Key":"to so","Fragments":["that"]},{"Key":"could learn","Fragments":["how","more"]},{"Key":" @melisa:","Fragments":["I","I"]},{"Key":"@melisa: I","Fragments":["ran.","was"]},{"Key":"I ran.","Fragments":["Maybe"]},{"Key":"ran. Maybe","Fragments":["my"]},{"Key":"Maybe my","Fragments":["test"]},{"Key":"my test","Fragments":["file"]},{"Key":"file is","Fragments":["out"]},{"Key":"`cond` before.","Fragments":["I"]},{"Key":"before. I","Fragments":["find","could"]},{"Key":"`condp` interesting","Fragments":["because"]},{"Key":"repeat `sentence`","Fragments":["every"]},{"Key":"`sentence` every","Fragments":["time."]},{"Key":"time. I","Fragments":["find"]},{"Key":"very intuitive","Fragments":["(looks"]},{"Key":"intuitive (looks","Fragments":["more"]},{"Key":"(looks more","Fragments":["like"]},{"Key":"like as","Fragments":["a"]},{"Key":" `(remove","Fragments":["#(="]},{"Key":"`(remove #(=","Fragments":["\"\""]},{"Key":"#(= \"\"","Fragments":["%)"]},{"Key":"\"\" %)","Fragments":["(str/split"]},{"Key":"%) (str/split","Fragments":["string"]},{"Key":"(str/split string","Fragments":["#\"\\W\")))`"]},{"Key":"string #\"\\W\")))`","Fragments":["-"]},{"Key":"#\"\\W\")))` -","Fragments":["I"]},{"Key":"simplified with","Fragments":["a"]},{"Key":"slight change","Fragments":["in"]},{"Key":"the regex.","Fragments":["If","It"]},{"Key":"regex. If","Fragments":["you"]},{"Key":"do `[^\\w]+`","Fragments":["or"]},{"Key":"`[^\\w]+` or","Fragments":["`[\\W]+`"]},{"Key":"or `[\\W]+`","Fragments":["you"]},{"Key":"`[\\W]+` you","Fragments":["shouldn't"]},{"Key":"you shouldn't","Fragments":["end","need","need","need"]},{"Key":"shouldn't end","Fragments":["up"]},{"Key":"with empty","Fragments":["strings"]},{"Key":"empty strings","Fragments":["in","or"]},{"Key":" `clojure.string/lower-case`","Fragments":["is"]},{"Key":"java function.","Fragments":["You"]},{"Key":"also apply","Fragments":["that"]},{"Key":"apply that","Fragments":["to"]},{"Key":"full string","Fragments":["prior","scans"]},{"Key":"string prior","Fragments":["to"]},{"Key":"splitting it","Fragments":["which"]},{"Key":"it which","Fragments":["means"]},{"Key":"means you","Fragments":["wouldn't","can"]},{"Key":"map across","Fragments":["all","the"]},{"Key":"across all","Fragments":["of","PCRE"]},{"Key":"split elements","Fragments":["and"]},{"Key":"elements and","Fragments":["lowercase"]},{"Key":"and lowercase","Fragments":["them"]},{"Key":"lowercase them","Fragments":["individually."]},{"Key":"which creates","Fragments":["a"]},{"Key":"creates a","Fragments":["map."]},{"Key":"map. That","Fragments":["can","would"]},{"Key":"That can","Fragments":["simplify","make"]},{"Key":"this quite","Fragments":["a"]},{"Key":"following discussion","Fragments":["on"]},{"Key":"`cond` vs","Fragments":["`condp`"]},{"Key":"vs `condp`","Fragments":["in"]},{"Key":"`condp` in","Fragments":["this"]},{"Key":"this case:","Fragments":["http://stackoverflow.com/questions/21033770/how-should-i-pass-a-string-argument-to-clojure-core-apply/21038833?noredirect=1#21038833"]},{"Key":"but just","Fragments":["some","an"]},{"Key":"just some","Fragments":["other"]},{"Key":"other options","Fragments":["you","for"]},{"Key":"treat strings","Fragments":["as","in"]},{"Key":"lists as","Fragments":["well,","well."]},{"Key":"well, so","Fragments":["could","you"]},{"Key":"so could","Fragments":["do"]},{"Key":"like `(=","Fragments":["\\?","test-char","\\?"]},{"Key":"(last s))`","Fragments":["instead"]},{"Key":"s))` instead","Fragments":["of"]},{"Key":"`clojure.string/upper-case` instead","Fragments":["of"]},{"Key":"Java String","Fragments":["`.toUpperCase`","documentation,"]},{"Key":"people I","Fragments":["talk"]},{"Key":"I talk","Fragments":["to"]},{"Key":"to seem","Fragments":["to"]},{"Key":"more conventional","Fragments":["`cond`"]},{"Key":"conventional `cond`","Fragments":["form,"]},{"Key":"`cond` form,","Fragments":["so"]},{"Key":"form, so","Fragments":["I"]},{"Key":"still thinks","Fragments":["my"]},{"Key":"thinks my","Fragments":["`condp`"]},{"Key":"my `condp`","Fragments":["version"]},{"Key":"`condp` version","Fragments":["is"]},{"Key":"interesting, but","Fragments":["I'd","I'm"]},{"Key":"rather stick","Fragments":["with"]},{"Key":"with convention","Fragments":["on"]},{"Key":"convention on","Fragments":["this"]},{"Key":"Also, should","Fragments":["I"]},{"Key":"should I","Fragments":["write","provide"]},{"Key":"I write","Fragments":["a","my"]},{"Key":"comment explaining","Fragments":["the"]},{"Key":"explaining the","Fragments":["regex"]},{"Key":"regex matching?","Fragments":["It's"]},{"Key":"matching? It's","Fragments":["pretty"]},{"Key":"pretty simple,","Fragments":["but"]},{"Key":"simple, but","Fragments":["it"]},{"Key":"obvious at","Fragments":["first"]},{"Key":"point, thanks!","Fragments":["I"]},{"Key":"wasn't using","Fragments":["valid-nucleotides"]},{"Key":"using valid-nucleotides","Fragments":["as"]},{"Key":"valid-nucleotides as","Fragments":["a"]},{"Key":"predicate before,","Fragments":["thus"]},{"Key":"before, thus","Fragments":["I"]},{"Key":"thus I","Fragments":["didn't"]},{"Key":"didn't end","Fragments":["it"]},{"Key":"end it","Fragments":["with","with"]},{"Key":"with `?`,","Fragments":["but"]},{"Key":"`?`, but","Fragments":["this"]},{"Key":"is fixed","Fragments":["in"]},{"Key":"fixed in","Fragments":["the","next"]},{"Key":"previous feedback:","Fragments":["Make"]},{"Key":"feedback: Make","Fragments":["the"]},{"Key":"Make the","Fragments":["logic"]},{"Key":"input validity","Fragments":["test"]},{"Key":"validity test","Fragments":["in"]},{"Key":"in \"count\"","Fragments":["more"]},{"Key":"\"count\" more","Fragments":["explicit."]},{"Key":"more explicit.","Fragments":["Also,"]},{"Key":"explicit. Also,","Fragments":["use"]},{"Key":"Also, use","Fragments":["docstrings"]},{"Key":"use docstrings","Fragments":["rather"]},{"Key":"docstrings rather","Fragments":["than"]},{"Key":"than comments","Fragments":["for"]},{"Key":"comments for","Fragments":["the","this"]},{"Key":"Looks generally","Fragments":["good."]},{"Key":"generally good.","Fragments":["It","I"]},{"Key":"good. It","Fragments":["might"]},{"Key":"more informative","Fragments":["for"]},{"Key":"informative for","Fragments":["the"]},{"Key":"caller if","Fragments":["you"]},{"Key":"you throw","Fragments":["IllegalArgumentException"]},{"Key":"throw IllegalArgumentException","Fragments":["rather"]},{"Key":"IllegalArgumentException rather","Fragments":["than"]},{"Key":"previous feedback","Fragments":["(thanks!)","from"]},{"Key":"Use -\u003e\u003e","Fragments":["instead"]},{"Key":"-\u003e\u003e instead","Fragments":["of"]},{"Key":"complex filter","Fragments":["predicate,"]},{"Key":"filter predicate,","Fragments":["which"]},{"Key":"which hopefully","Fragments":["makes"]},{"Key":"hopefully makes","Fragments":["the"]},{"Key":"logic a","Fragments":["bit"]},{"Key":"Use more","Fragments":["idiomatic"]},{"Key":"idiomatic closing","Fragments":["parentheses"]},{"Key":" Make","Fragments":["char-counts"]},{"Key":"Make char-counts","Fragments":["a"]},{"Key":"char-counts a","Fragments":["private"]},{"Key":" \"-\u003e\u003e\"","Fragments":["might"]},{"Key":"\"-\u003e\u003e\" might","Fragments":["be"]},{"Key":"than \"let\"","Fragments":["here."]},{"Key":"getting two","Fragments":["failures"]},{"Key":"two failures","Fragments":["but"]},{"Key":"failures but","Fragments":["I"]},{"Key":"I'm barking","Fragments":["up"]},{"Key":"barking up","Fragments":["the"]},{"Key":"wrong tree","Fragments":["anyway"]},{"Key":"tree anyway","Fragments":["so"]},{"Key":"so looking","Fragments":["for"]},{"Key":" FAIL","Fragments":["in","in","in","in","in","in","in","in","in","in","in"]},{"Key":"FAIL in","Fragments":["(responds-to-forceful-questions)","(responds-to-only-numbers)","(square-4)","(square-2)","(square-16)","(square-64)","(square-3)","(square-1)","(total-grains)","(square-32)","(sorted-grade_school-keys-sorted)"]},{"Key":"in (responds-to-forceful-questions)","Fragments":["(bob_test.clj:20)"]},{"Key":" expected:","Fragments":["(=","(=","(thrown-with-msg?","(=","(=","(=","(=","(=","(=","(=","(=","(="]},{"Key":"expected: (=","Fragments":["\"Woah,","\"Whatever.\"","8","2","32768","9223372036854775808N","4","1","18446744073709551615N","2147483648","[3"]},{"Key":"(= \"Woah,","Fragments":["chill","chill"]},{"Key":"out!\" (bob/response-for","Fragments":["\"WHAT"]},{"Key":"(bob/response-for \"WHAT","Fragments":["THE"]},{"Key":"\"WHAT THE","Fragments":["HELL"]},{"Key":"THE HELL","Fragments":["WERE","WERE"]},{"Key":"HELL WERE","Fragments":["YOU","YOU"]},{"Key":"WERE YOU","Fragments":["THINKING?\"))","THINKING?”"]},{"Key":" actual:","Fragments":["(not","(not","java.lang.AssertionError:","(not","(not","(not","(not","(not","(not","(not","(not","(not"]},{"Key":"actual: (not","Fragments":["(=","(=","(=","(=","(=","(=","(=","(=","(=","(=","(="]},{"Key":"in (responds-to-only-numbers)","Fragments":["(bob_test.clj:41)"]},{"Key":"(bob/response-for \"1,","Fragments":["2,"]},{"Key":"\"Whatever.\" \"Woah,","Fragments":["chill"]},{"Key":"Ran 14","Fragments":["tests"]},{"Key":"14 tests","Fragments":["containing"]},{"Key":"containing 14","Fragments":["assertions."]},{"Key":"2 failures,","Fragments":["0"]},{"Key":"good. Is","Fragments":["there"]},{"Key":"efficient way","Fragments":["to"]},{"Key":"define `count`","Fragments":["than"]},{"Key":"`count` than","Fragments":["in"]},{"Key":"of `nucleotide-counts`?","Fragments":["There"]},{"Key":"`nucleotide-counts`? There","Fragments":["seems"]},{"Key":"There seems","Fragments":["to"]},{"Key":"some wasted","Fragments":["effort"]},{"Key":"wasted effort","Fragments":["here"]},{"Key":"effort here","Fragments":["-"]},{"Key":"functions don't","Fragments":["necessarily"]},{"Key":"don't necessarily","Fragments":["need"]},{"Key":"necessarily need","Fragments":["to"]},{"Key":"be defined","Fragments":["in","in","in","as"]},{"Key":"Thanks @julio.","Fragments":["I"]},{"Key":"@julio. I","Fragments":["have"]},{"Key":"use `-\u003e`","Fragments":["in"]},{"Key":"`-\u003e` in","Fragments":["my"]},{"Key":"Thanks @brody.","Fragments":["I've"]},{"Key":"@brody. I've","Fragments":["updated"]},{"Key":"the slightly","Fragments":["simpler","shorter"]},{"Key":"slightly simpler","Fragments":["regular"]},{"Key":"simpler regular","Fragments":["expression","expression"]},{"Key":"solution uses","Fragments":["polymorphism"]},{"Key":"uses polymorphism","Fragments":["with"]},{"Key":"polymorphism with","Fragments":["multimethods"]},{"Key":"with multimethods","Fragments":["instead"]},{"Key":"multimethods instead","Fragments":["of"]},{"Key":"of conditionals.","Fragments":["Inspired"]},{"Key":"conditionals. Inspired","Fragments":["by"]},{"Key":"Inspired by","Fragments":["@america's"]},{"Key":"by @america's","Fragments":["solution"]},{"Key":"@america's solution","Fragments":["in"]},{"Key":" Glad","Fragments":["to"]},{"Key":"Well done,","Fragments":["one"]},{"Key":"done, one","Fragments":["minor"]},{"Key":"minor thing,","Fragments":["I","is"]},{"Key":"thing, I","Fragments":["think","did"]},{"Key":"use ```(split","Fragments":["#\"\\W+\")```"]},{"Key":"```(split #\"\\W+\")```","Fragments":["instead"]},{"Key":"#\"\\W+\")``` instead","Fragments":["of"]},{"Key":"of ```(split","Fragments":["#\"[\\W]+\")```"]},{"Key":"There's `condp`","Fragments":["to"]},{"Key":"`condp` to","Fragments":["do"]},{"Key":"do branching","Fragments":["on"]},{"Key":"branching on","Fragments":["a"]},{"Key":"single value","Fragments":["applied"]},{"Key":"value applied","Fragments":["to"]},{"Key":"given predicate","Fragments":["-"]},{"Key":"predicate -","Fragments":["it"]},{"Key":"make `bottles`","Fragments":["and"]},{"Key":"`bottles` and","Fragments":["`action`"]},{"Key":"and `action`","Fragments":["a"]},{"Key":"`action` a","Fragments":["bit"]},{"Key":" Thansk","Fragments":["zoldar,"]},{"Key":"Thansk zoldar,","Fragments":["I"]},{"Key":"zoldar, I","Fragments":["learn"]},{"Key":"I learn","Fragments":["new"]},{"Key":"learn new","Fragments":["things","ways"]},{"Key":"new things","Fragments":["everyday.","till"]},{"Key":"You can.","Fragments":["There"]},{"Key":"can. There","Fragments":["is"]},{"Key":"a [declare","Fragments":["function](http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/declare)."]},{"Key":"any feedback","Fragments":["on",":-)","is","is","on"]},{"Key":" \"Must","Fragments":["be"]},{"Key":"\"Must be","Fragments":["either"]},{"Key":"either A,","Fragments":["U,"]},{"Key":"A, U,","Fragments":["C"]},{"Key":"U, C","Fragments":["or"]},{"Key":"C or","Fragments":["G\""]},{"Key":" AUGC","Fragments":["-"]},{"Key":"AUGC -","Fragments":["it"]},{"Key":"your parameters?","Fragments":["Is"]},{"Key":"parameters? Is","Fragments":["there"]},{"Key":"specific name","Fragments":["than"]},{"Key":"than \u003ccode\u003estr\u003c/code\u003e","Fragments":["or"]},{"Key":"\u003ccode\u003estr\u003c/code\u003e or","Fragments":["\u003ccode\u003es\u003c/code\u003e?"]},{"Key":"simplified somewhat","Fragments":["by","by"]},{"Key":"somewhat by","Fragments":["using","using"]},{"Key":"the validation,","Fragments":["i.e."]},{"Key":"validation, i.e.","Fragments":["`(every?"]},{"Key":"i.e. `(every?","Fragments":["#{\\A"]},{"Key":"`(every? #{\\A","Fragments":["\\G"]},{"Key":"#{\\A \\G","Fragments":["\\C"]},{"Key":"\\G \\C","Fragments":["\\T}"]},{"Key":"\\C \\T}","Fragments":["dna)`."]},{"Key":"\\T} dna)`.","Fragments":["Also,"]},{"Key":"dna)`. Also,","Fragments":["you"]},{"Key":"precondition to","Fragments":["do"]},{"Key":"validation check","Fragments":["for"]},{"Key":"and automatically","Fragments":["throw"]},{"Key":"automatically throw","Fragments":["the"]},{"Key":"the AssertionError","Fragments":["if"]},{"Key":"AssertionError if","Fragments":["validation"]},{"Key":"if validation","Fragments":["fails:"]},{"Key":" {:pre","Fragments":["[(every?","(expresion","[(SOME","[(valid-nucleotides","[(every?","(every?"]},{"Key":"{:pre [(every?","Fragments":["#{\\A","dna-\u003erna"]},{"Key":"[(every? #{\\A","Fragments":["\\C"]},{"Key":"(clojure.string/replace dna","Fragments":["\\T"]},{"Key":"dna \\T","Fragments":["\\U))","\\U)`."]},{"Key":"the route","Fragments":["of"]},{"Key":"route of","Fragments":["filtering"]},{"Key":"of filtering","Fragments":["out","`candidates`"]},{"Key":"filtering out","Fragments":["acronyms,"]},{"Key":"out acronyms,","Fragments":["too,"]},{"Key":"acronyms, too,","Fragments":["until"]},{"Key":"too, until","Fragments":["I"]},{"Key":"started looking","Fragments":["at"]},{"Key":"at other","Fragments":["solutions"]},{"Key":"solutions and","Fragments":["realized"]},{"Key":"and realized","Fragments":["that","that"]},{"Key":"they meant","Fragments":["was"]},{"Key":"only consider","Fragments":["it","ascii"]},{"Key":"it shouting","Fragments":["if"]},{"Key":"shouting if","Fragments":["all"]},{"Key":"two small","Fragments":["nits:"]},{"Key":"trailing ')'","Fragments":["on","on"]},{"Key":"')' on","Fragments":["line","lines","the"]},{"Key":"line 19","Fragments":["is","-","a"]},{"Key":"19 is","Fragments":["very"]},{"Key":"very jarring.","Fragments":["Lisp"]},{"Key":"jarring. Lisp","Fragments":["style"]},{"Key":"Lisp style","Fragments":["is","says"]},{"Key":"have having","Fragments":["trailing"]},{"Key":"having trailing","Fragments":["closing"]},{"Key":"trailing closing","Fragments":["parens"]},{"Key":"- tuck","Fragments":["them"]},{"Key":"tuck them","Fragments":["upon"]},{"Key":"them upon","Fragments":["the"]},{"Key":"upon the","Fragments":["previous"]},{"Key":"2. 'suffix'","Fragments":["isn't"]},{"Key":"'suffix' isn't","Fragments":["the"]},{"Key":"right word","Fragments":["for"]},{"Key":"last 4","Fragments":["digits"]},{"Key":"4 digits","Fragments":["of"]},{"Key":"digits of","Fragments":["a"]},{"Key":"a (US)","Fragments":["phone","phone"]},{"Key":"(US) phone","Fragments":["number.","number."]},{"Key":"comment I","Fragments":["have"]},{"Key":"that 'prefix'","Fragments":["and"]},{"Key":"'prefix' and","Fragments":["'suffix'"]},{"Key":"and 'suffix'","Fragments":["are"]},{"Key":"'suffix' are","Fragments":["the"]},{"Key":"proper terms","Fragments":["for"]},{"Key":"terms for","Fragments":["parts"]},{"Key":"phone number.","Fragments":["They"]},{"Key":"number. They","Fragments":["are"]},{"Key":"are 'exchange'","Fragments":["and"]},{"Key":"'exchange' and","Fragments":["'subscriber'"]},{"Key":"and 'subscriber'","Fragments":["respectively."]},{"Key":"Maybe the","Fragments":["reason","function","worst"]},{"Key":"I care","Fragments":["is"]},{"Key":"care is","Fragments":["because"]},{"Key":"went and","Fragments":["looked"]},{"Key":"and looked","Fragments":["them"]},{"Key":"looked them","Fragments":["up"]},{"Key":"them up","Fragments":["when","with"]},{"Key":"up when","Fragments":["I"]},{"Key":"But good","Fragments":["names"]},{"Key":"good names","Fragments":["from","-"]},{"Key":"domain are","Fragments":["important."]},{"Key":"nit I","Fragments":["have"]},{"Key":"lines 10","Fragments":["\u0026"]},{"Key":"10 \u0026","Fragments":["19."]},{"Key":"\u0026 19.","Fragments":["Lisp"]},{"Key":"19. Lisp","Fragments":["style"]},{"Key":"says not","Fragments":["to"]},{"Key":"- snug","Fragments":["them"]},{"Key":"snug them","Fragments":["up"]},{"Key":"Looks really","Fragments":["good.","nice"]},{"Key":"good. Reads","Fragments":["like"]},{"Key":"Reads like","Fragments":["the"]},{"Key":"curious why","Fragments":["you","you"]},{"Key":"used `(if","Fragments":["(zerop?...`"]},{"Key":"`(if (zerop?...`","Fragments":["in"]},{"Key":"(zerop?...` in","Fragments":["some"]},{"Key":"some places","Fragments":["but"]},{"Key":"places but","Fragments":["`(case"]},{"Key":"but `(case","Fragments":["n"]},{"Key":"`(case n","Fragments":["0...`"]},{"Key":"n 0...`","Fragments":["in"]},{"Key":"0...` in","Fragments":["other"]},{"Key":"second solution","Fragments":["is"]},{"Key":"idiomatic of","Fragments":["the"]},{"Key":"First pass.","Fragments":["I'm"]},{"Key":"pass. I'm","Fragments":["still"]},{"Key":"learning clojure,","Fragments":["so","but","but"]},{"Key":"bit slow","Fragments":["going."]},{"Key":"slow going.","Fragments":["I'm"]},{"Key":"going. I'm","Fragments":["not"]},{"Key":"let for","Fragments":["the"]},{"Key":"responses -","Fragments":["maybe"]},{"Key":"Still learning","Fragments":["clojure,","clojure"]},{"Key":"but getting","Fragments":["a"]},{"Key":"more comfortable.","Fragments":["I"]},{"Key":"comfortable. I","Fragments":["really"]},{"Key":"how closures","Fragments":["replace"]},{"Key":"closures replace","Fragments":["works,"]},{"Key":"replace works,","Fragments":["and"]},{"Key":"works, and","Fragments":["this"]},{"Key":"time working","Fragments":["with"]},{"Key":"with assert.","Fragments":["That"]},{"Key":"assert. That","Fragments":["threw"]},{"Key":"That threw","Fragments":["me"]},{"Key":"threw me","Fragments":["a","off"]},{"Key":"loop for","Fragments":["a"]},{"Key":"bit because","Fragments":["it"]},{"Key":"it normally","Fragments":["just"]},{"Key":"normally just","Fragments":["returns"]},{"Key":"just returns","Fragments":["nil,","the"]},{"Key":"nil, which","Fragments":["I"]},{"Key":"You're so","Fragments":["close"]},{"Key":"so close","Fragments":["on"]},{"Key":"close on","Fragments":["this."]},{"Key":"on this.","Fragments":["Try"]},{"Key":"this. Try","Fragments":["checking"]},{"Key":"Try checking","Fragments":["for","to"]},{"Key":"shouting before","Fragments":["questions."]},{"Key":"before questions.","Fragments":["Try"]},{"Key":"questions. Try","Fragments":["checking"]},{"Key":"checking to","Fragments":["make","see"]},{"Key":"the shouted","Fragments":["text"]},{"Key":"shouted text","Fragments":["actually"]},{"Key":"text actually","Fragments":["contains"]},{"Key":"actually contains","Fragments":["letters."]},{"Key":"While this","Fragments":["passes","is"]},{"Key":"this passes","Fragments":["the","the"]},{"Key":"given tests,","Fragments":["it"]},{"Key":"tests, it","Fragments":["looks"]},{"Key":"like any","Fragments":["sentence"]},{"Key":"sentence that","Fragments":["starts"]},{"Key":"that starts","Fragments":["with"]},{"Key":"starts with","Fragments":["capital"]},{"Key":"with capital","Fragments":["letters"]},{"Key":"letters would","Fragments":["be"]},{"Key":"considered shouting.","Fragments":["For"]},{"Key":"shouting. For","Fragments":["example:"]},{"Key":"For example:","Fragments":["\"H.G."]},{"Key":"example: \"H.G.","Fragments":["Wells"]},{"Key":"\"H.G. Wells","Fragments":["was"]},{"Key":"Wells was","Fragments":["a"]},{"Key":"a science","Fragments":["fiction"]},{"Key":"science fiction","Fragments":["author.\""]},{"Key":"fiction author.\"","Fragments":["would"]},{"Key":"author.\" would","Fragments":["match"]},{"Key":"would match","Fragments":["that"]},{"Key":"match that","Fragments":["regex."]},{"Key":" Exercism","Fragments":["is"]},{"Key":"Exercism is","Fragments":["all"]},{"Key":"all about","Fragments":["experimentation,"]},{"Key":"about experimentation,","Fragments":["so"]},{"Key":"experimentation, so","Fragments":["this"]},{"Key":"good from","Fragments":["that"]},{"Key":" But...","Fragments":[":)"]},{"Key":"that multimethods","Fragments":["are"]},{"Key":"multimethods are","Fragments":["more"]},{"Key":"complex in","Fragments":["this"]},{"Key":"case. Compare","Fragments":["`amount`"]},{"Key":"Compare `amount`","Fragments":["as"]},{"Key":"`amount` as","Fragments":["a"]},{"Key":"simple conditional","Fragments":["(below)","approach"]},{"Key":"conditional (below)","Fragments":["vs."]},{"Key":"(below) vs.","Fragments":["your"]},{"Key":"vs. your","Fragments":["multimethod"]},{"Key":"your multimethod","Fragments":["implementation."]},{"Key":" `(defn","Fragments":["amount","name","add"]},{"Key":"`(defn amount","Fragments":["[n]"]},{"Key":" (if","Fragments":["(="]},{"Key":"(if (=","Fragments":["0","\\T"]},{"Key":"0 n)","Fragments":["\"bottle\""]},{"Key":"n) \"bottle\"","Fragments":["\"bottles\"))`"]},{"Key":"Your dispatch","Fragments":["is"]},{"Key":"dispatch is","Fragments":["really"]},{"Key":"really about","Fragments":["value"]},{"Key":"about value","Fragments":["and"]},{"Key":"not type.","Fragments":["So"]},{"Key":"type. So","Fragments":["you're"]},{"Key":"So you're","Fragments":["using"]},{"Key":"using multimethods","Fragments":["more"]},{"Key":"multimethods more","Fragments":["like"]},{"Key":"like pattern","Fragments":["matched"]},{"Key":"pattern matched","Fragments":["functions"]},{"Key":"matched functions","Fragments":["in"]},{"Key":"in haskell/erlang/etc","Fragments":["rather"]},{"Key":"haskell/erlang/etc rather","Fragments":["than"]},{"Key":"than really","Fragments":["using"]},{"Key":"really using","Fragments":["them"]},{"Key":"them polymorphically","Fragments":["based"]},{"Key":"polymorphically based","Fragments":["on"]},{"Key":"on type.","Fragments":["Because"]},{"Key":"type. Because","Fragments":["of"]},{"Key":"Because of","Fragments":["that,"]},{"Key":"of that,","Fragments":["I"]},{"Key":"a neat","Fragments":["way"]},{"Key":"neat way","Fragments":["to"]},{"Key":"for letters","Fragments":["without","etc.","(re-find"]},{"Key":"letters without","Fragments":["using"]},{"Key":"regex. Did","Fragments":["you"]},{"Key":"include two","Fragments":["F's","F's"]},{"Key":"two F's","Fragments":["in"]},{"Key":"F's in","Fragments":["your"]},{"Key":"was pointed","Fragments":["out"]},{"Key":"that `clojure.core.frequencies`","Fragments":["already"]},{"Key":"`clojure.core.frequencies` already","Fragments":["exists."]},{"Key":"This cuts","Fragments":["down"]},{"Key":"down on","Fragments":["code"]},{"Key":"As pointed","Fragments":["out"]},{"Key":"by zoldar,","Fragments":["`clojure.string.blank?`"]},{"Key":"zoldar, `clojure.string.blank?`","Fragments":["can"]},{"Key":"`clojure.string.blank?` can","Fragments":["be"]},{"Key":"of .isEmpty,","Fragments":["and"]},{"Key":".isEmpty, and","Fragments":["the"]},{"Key":"the `.*`","Fragments":["in"]},{"Key":"`.*` in","Fragments":["the","the"]},{"Key":"expression are","Fragments":["unnecessary."]},{"Key":"Cool! Did","Fragments":["you"]},{"Key":"did not,","Fragments":["but"]},{"Key":"not, but","Fragments":["I","just"]},{"Key":"felt Clojure","Fragments":["*must*"]},{"Key":"Clojure *must*","Fragments":["have"]},{"Key":"*must* have","Fragments":["something"]},{"Key":" Awesome,","Fragments":["thank"]},{"Key":"Awesome, thank","Fragments":["you!"]},{"Key":"you! The","Fragments":["book"]},{"Key":"The book","Fragments":["I've"]},{"Key":"book I've","Fragments":["been"]},{"Key":"been following","Fragments":["along"]},{"Key":"following along","Fragments":["with"]},{"Key":"with hasn't","Fragments":["mentioned"]},{"Key":"hasn't mentioned","Fragments":["pre-"]},{"Key":"mentioned pre-","Fragments":["and"]},{"Key":"pre- and","Fragments":["post-","post-"]},{"Key":"and post-","Fragments":["assertions","conditions`,"]},{"Key":"post- assertions","Fragments":["(which"]},{"Key":"assertions (which","Fragments":["does"]},{"Key":"(which does","Fragments":["cover"]},{"Key":"does cover","Fragments":["1.3"]},{"Key":"cover 1.3","Fragments":["so"]},{"Key":"1.3 so","Fragments":["maybe"]},{"Key":"so maybe","Fragments":["I'm"]},{"Key":"not far","Fragments":["enough"]},{"Key":"far enough","Fragments":["along"]},{"Key":"enough along","Fragments":["yet)."]},{"Key":"along yet).","Fragments":["Very"]},{"Key":"yet). Very","Fragments":["cool."]},{"Key":"set as","Fragments":["a","a","pred,"]},{"Key":"validation is","Fragments":["also"]},{"Key":"also very","Fragments":["pretty"]},{"Key":"very pretty","Fragments":["to"]},{"Key":"pretty to","Fragments":["look"]},{"Key":"look at;","Fragments":["I"]},{"Key":"at; I","Fragments":["know"]},{"Key":"sequences can","Fragments":["also"]},{"Key":"be functions,","Fragments":["but"]},{"Key":"functions, but","Fragments":["it","I'm","it","that","it"]},{"Key":"would never","Fragments":["have","scale!"]},{"Key":"never have","Fragments":["occurred"]},{"Key":"have occurred","Fragments":["to"]},{"Key":" string/replace","Fragments":["is"]},{"Key":"string/replace is","Fragments":["probably"]},{"Key":"probably the","Fragments":["better","best","preferred"]},{"Key":"choice too,","Fragments":["I'm"]},{"Key":"too, I'm","Fragments":["not"]},{"Key":"feedback. What's","Fragments":["the"]},{"Key":"format that","Fragments":["code?"]},{"Key":"(= (count","Fragments":["digits)"]},{"Key":"(count digits)","Fragments":["(+"]},{"Key":"digits) (+","Fragments":["length"]},{"Key":"(+ length","Fragments":["1))"]},{"Key":"(= (subs","Fragments":["digits"]},{"Key":"(subs digits","Fragments":["0","1)"]},{"Key":"digits 0","Fragments":["1)"]},{"Key":"0 1)","Fragments":["\"1\"))"]},{"Key":" (subs","Fragments":["digits"]},{"Key":"only briefly","Fragments":["played"]},{"Key":"briefly played","Fragments":["with"]},{"Key":"with Haskell,","Fragments":["but"]},{"Key":"Haskell, but","Fragments":["this"]},{"Key":"exercise made","Fragments":["me"]},{"Key":"me wish","Fragments":["Clojure"]},{"Key":"wish Clojure","Fragments":["had","treated"]},{"Key":"Clojure had","Fragments":["its"]},{"Key":"had its","Fragments":["currying..."]},{"Key":"its currying...","Fragments":["it"]},{"Key":"currying... it","Fragments":["would"]},{"Key":"have eliminated","Fragments":["the"]},{"Key":"eliminated the","Fragments":["need"]},{"Key":"the make-anagram-checker","Fragments":["function"]},{"Key":"make-anagram-checker function","Fragments":["(if"]},{"Key":"function (if","Fragments":["there's"]},{"Key":"(if there's","Fragments":["a"]},{"Key":"Clojure, I'd","Fragments":["love"]},{"Key":"Thanks Geoff.","Fragments":["That"]},{"Key":"Geoff. That","Fragments":["is"]},{"Key":"a totally","Fragments":["valid"]},{"Key":"totally valid","Fragments":["and"]},{"Key":"valid and","Fragments":["fair"]},{"Key":"and fair","Fragments":["critique."]},{"Key":"fair critique.","Fragments":["I"]},{"Key":"critique. I","Fragments":["will"]},{"Key":"do another","Fragments":["iteration"]},{"Key":"another iteration","Fragments":["of","of"]},{"Key":"iteration of","Fragments":["this","this."]},{"Key":"this kata","Fragments":["that"]},{"Key":"kata that","Fragments":["uses"]},{"Key":"conditional approach","Fragments":["but,"]},{"Key":"approach but,","Fragments":["as"]},{"Key":"but, as","Fragments":["you","the"]},{"Key":"suggest, this","Fragments":["was"]},{"Key":"good experiment.","Fragments":[":)"]},{"Key":"mistake submission.","Fragments":["I"]},{"Key":"was testing","Fragments":["something."]},{"Key":"comments, @george!","Fragments":["I'm"]},{"Key":"@george! I'm","Fragments":["still"]},{"Key":"still digesting","Fragments":["but"]},{"Key":"digesting but","Fragments":["really"]},{"Key":"but really","Fragments":["appreciate"]},{"Key":"is appropriate","Fragments":["to"]},{"Key":"appropriate to","Fragments":["reuse"]},{"Key":"reuse a","Fragments":["name"]},{"Key":"name inside","Fragments":["a"]},{"Key":"your feedback!","Fragments":["I'd"]},{"Key":"feedback! I'd","Fragments":["ordinarily"]},{"Key":"I'd ordinarily","Fragments":["extract"]},{"Key":"ordinarily extract","Fragments":["similar"]},{"Key":"extract similar","Fragments":["functions/methods,"]},{"Key":"similar functions/methods,","Fragments":["but"]},{"Key":"functions/methods, but","Fragments":["I'm"]},{"Key":"still trying","Fragments":["to"]},{"Key":"feel for","Fragments":["Clojure's"]},{"Key":"for Clojure's","Fragments":["style"]},{"Key":"Clojure's style","Fragments":["regarding"]},{"Key":"style regarding","Fragments":["inline/anonymous"]},{"Key":"regarding inline/anonymous","Fragments":["functions."]},{"Key":"inline/anonymous functions.","Fragments":["I"]},{"Key":"also feel","Fragments":["like"]},{"Key":"like there's","Fragments":["probably"]},{"Key":"there's probably","Fragments":["a","a"]},{"Key":"of delegating","Fragments":["or"]},{"Key":"delegating or","Fragments":["switching"]},{"Key":"or switching","Fragments":["(which"]},{"Key":"switching (which","Fragments":["is"]},{"Key":"almost certainly","Fragments":["an"]},{"Key":"certainly an","Fragments":["un-idiomatic"]},{"Key":"an un-idiomatic","Fragments":["way"]},{"Key":"un-idiomatic way","Fragments":["of"]},{"Key":"of approaching","Fragments":["a"]},{"Key":"approaching a","Fragments":["problem"]},{"Key":"Clojure) besides","Fragments":["cond/case,"]},{"Key":"besides cond/case,","Fragments":["but"]},{"Key":"cond/case, but","Fragments":["I'm"]},{"Key":"Woops, no","Fragments":["I"]},{"Key":"no I","Fragments":["didn't"]},{"Key":"This particular","Fragments":["exercise"]},{"Key":"particular exercise","Fragments":["didn't"]},{"Key":"exercise didn't","Fragments":["seem"]},{"Key":"didn't seem","Fragments":["to","any","too"]},{"Key":"well suited","Fragments":["to"]},{"Key":"suited to","Fragments":["Clojure."]},{"Key":"Clojure. The","Fragments":["`reset-name`"]},{"Key":"The `reset-name`","Fragments":["function"]},{"Key":"`reset-name` function","Fragments":["assumes"]},{"Key":"function assumes","Fragments":["mutable"]},{"Key":"assumes mutable","Fragments":["state."]},{"Key":"version uploaded.","Fragments":["It"]},{"Key":"uploaded. It","Fragments":["seems"]},{"Key":"seems at","Fragments":["times"]},{"Key":"at times","Fragments":["single"]},{"Key":"times single","Fragments":["letter"]},{"Key":"single letter","Fragments":["variables"]},{"Key":"letter variables","Fragments":["are"]},{"Key":"are used,","Fragments":["but"]},{"Key":"used, but","Fragments":["I"]},{"Key":"more verbose","Fragments":["naming.","and","than"]},{"Key":"verbose naming.","Fragments":["I"]},{"Key":"naming. I","Fragments":["had"]},{"Key":"about where","Fragments":["I"]},{"Key":"was calculating","Fragments":["frequencies"]},{"Key":"calculating frequencies","Fragments":["in"]},{"Key":"frequencies in","Fragments":["my"]},{"Key":"original solution.","Fragments":["I"]},{"Key":"decided on","Fragments":["what"]},{"Key":"submitted because","Fragments":["it"]},{"Key":"just seemed","Fragments":["to","neater.","like"]},{"Key":"readability was","Fragments":["more"]},{"Key":"more important","Fragments":["than"]},{"Key":"important than","Fragments":["performance,"]},{"Key":"than performance,","Fragments":["in"]},{"Key":"performance, in","Fragments":["this"]},{"Key":"case with","Fragments":["the","an"]},{"Key":"limited collection","Fragments":["of"]},{"Key":"words. But","Fragments":["in"]},{"Key":"But in","Fragments":["real"]},{"Key":"world use","Fragments":["it"]},{"Key":"likely performance","Fragments":["would"]},{"Key":"performance would","Fragments":["matter"]},{"Key":"would matter","Fragments":["more."]},{"Key":"matter more.","Fragments":["In"]},{"Key":"more. In","Fragments":["the"]},{"Key":"version it","Fragments":["is"]},{"Key":"only calculated","Fragments":["once."]},{"Key":"The `cond`","Fragments":["has"]},{"Key":"`cond` has","Fragments":["almost"]},{"Key":"has almost","Fragments":["no"]},{"Key":"almost no","Fragments":["syntax"]},{"Key":"no syntax","Fragments":["-"]},{"Key":"syntax -","Fragments":["in"]},{"Key":"- in","Fragments":["a"]},{"Key":"it already","Fragments":["looks","happens"]},{"Key":"already looks","Fragments":["like"]},{"Key":"like configuration.","Fragments":["Look"]},{"Key":"configuration. Look","Fragments":["at"]},{"Key":"other submissions:","Fragments":["almost"]},{"Key":"submissions: almost","Fragments":["everyone"]},{"Key":"almost everyone","Fragments":["uses"]},{"Key":"everyone uses","Fragments":["cond."]},{"Key":"uses cond.","Fragments":["That"]},{"Key":"cond. That","Fragments":["said,"]},{"Key":"said, @wilton","Fragments":["has"]},{"Key":"@wilton has","Fragments":["shown"]},{"Key":"has shown","Fragments":["a"]},{"Key":"shown a","Fragments":["thing"]},{"Key":"apply [statement]","Fragments":["...`"]},{"Key":"[statement] ...`","Fragments":["that"]},{"Key":"...` that","Fragments":["looks"]},{"Key":"great deal","Fragments":["by"]},{"Key":"deal by","Fragments":["using"]},{"Key":"`-\u003e` to","Fragments":["build"]},{"Key":"word list,","Fragments":["and"]},{"Key":"list, and","Fragments":["then"]},{"Key":"built-in `frequencies`","Fragments":["function"]},{"Key":"the counting.","Fragments":["I"]},{"Key":"counting. I","Fragments":["finally"]},{"Key":"finally figured","Fragments":["this"]},{"Key":"figured this","Fragments":["out"]},{"Key":"out after","Fragments":["several"]},{"Key":"after several","Fragments":["iterations"]},{"Key":"several iterations","Fragments":["on"]},{"Key":"iterations on","Fragments":["this"]},{"Key":":only [split","Fragments":["lower-case]]))"]},{"Key":" (split","Fragments":["#\"\\W+\")",",,,","string1","string2"]},{"Key":" Line","Fragments":["2","5","5","2","12","20","4-","34:","49","25:","8:","41:","4:","10,","36","22:","15:","6:","37:"]},{"Key":"Line 2","Fragments":["-","-","-"]},{"Key":"Line 5","Fragments":["-","-"]},{"Key":"- If","Fragments":["you"]},{"Key":"following name","Fragments":["space"]},{"Key":"name space","Fragments":["declaration,","and"]},{"Key":"space declaration,","Fragments":["you"]},{"Key":"declaration, you","Fragments":["can"]},{"Key":"just call","Fragments":["the","`(join","str/blank?","`nucleotide-count`."]},{"Key":"- You","Fragments":["might","have"]},{"Key":"the [`Threading","Fragments":["macro`](http://clojuredocs.org/clojure_core/clojure.core/-%3E)."]},{"Key":"[`Threading macro`](http://clojuredocs.org/clojure_core/clojure.core/-%3E).","Fragments":["That"]},{"Key":"macro`](http://clojuredocs.org/clojure_core/clojure.core/-%3E). That","Fragments":["makes"]},{"Key":"That makes","Fragments":["your","the"]},{"Key":"(-\u003e (replace","Fragments":["msg"]},{"Key":"(replace msg","Fragments":["#\"[:!\u0026@$%^,]\""]},{"Key":"msg #\"[:!\u0026@$%^,]\"","Fragments":["\"\")"]},{"Key":"(split ,,,","Fragments":["#\""]},{"Key":",,, #\"","Fragments":["+\")"]},{"Key":"don't know,","Fragments":["commas"]},{"Key":"know, commas","Fragments":["are"]},{"Key":"are whitespace","Fragments":["and"]},{"Key":"I left","Fragments":["`,,,`"]},{"Key":"left `,,,`","Fragments":["in"]},{"Key":"`,,,` in","Fragments":["the"]},{"Key":"split to","Fragments":["show"]},{"Key":"show where","Fragments":["the"]},{"Key":"value gets","Fragments":["put"]},{"Key":"gets put","Fragments":["in"]},{"Key":"in to","Fragments":["the","small","a","me.","the"]},{"Key":"Great! Only","Fragments":["a"]},{"Key":"minor consistency","Fragments":["nits."]},{"Key":"to `(:use","Fragments":["[clojure.string])`"]},{"Key":"`(:use [clojure.string])`","Fragments":["since"]},{"Key":"[clojure.string])` since","Fragments":["you're"]},{"Key":"line 19.","Fragments":["Otherwise,"]},{"Key":"19. Otherwise,","Fragments":["you"]},{"Key":"call `(join","Fragments":["...)`"]},{"Key":"5 \u0026","Fragments":["line"]},{"Key":"\u0026 line","Fragments":["11"]},{"Key":"an inconsistent","Fragments":["use"]},{"Key":"inconsistent use","Fragments":["`defn-`"]},{"Key":"line 15","Fragments":["-","has"]},{"Key":"15 -","Fragments":["The"]},{"Key":"message could","Fragments":["to"]},{"Key":"could to","Fragments":["be"]},{"Key":"clear. What","Fragments":["are"]},{"Key":"19 -","Fragments":["strings"]},{"Key":"- strings","Fragments":["are","are","are"]},{"Key":"already seq-able","Fragments":["(it's"]},{"Key":"seq-able (it's","Fragments":["a"]},{"Key":"(it's a","Fragments":["`char[]`)","cool"]},{"Key":"a `char[]`)","Fragments":["so"]},{"Key":"`char[]`) so","Fragments":["the"]},{"Key":"to `vec`","Fragments":["isn't","isn't"]},{"Key":"`vec` isn't","Fragments":["needed.","needed."]},{"Key":"- Since","Fragments":["you","you"]},{"Key":"you `(:use","Fragments":["[clojure.string])`,"]},{"Key":"`(:use [clojure.string])`,","Fragments":["your"]},{"Key":"[clojure.string])`, your","Fragments":["calls"]},{"Key":"your calls","Fragments":["can","can","to","to"]},{"Key":"calls can","Fragments":["be","be"]},{"Key":"be shortened","Fragments":["to","to","using","to"]},{"Key":"shortened to","Fragments":["simply","simply","`(last"]},{"Key":"simply `upper-case`,","Fragments":["`lower-case`,"]},{"Key":"`upper-case`, `lower-case`,","Fragments":["etc."]},{"Key":"Line 12","Fragments":["-"]},{"Key":"12 -","Fragments":["strings"]},{"Key":"already `seq-able`","Fragments":["so"]},{"Key":"`seq-able` so","Fragments":["the"]},{"Key":"Line 20","Fragments":["-"]},{"Key":"20 -","Fragments":["Instead"]},{"Key":"- Instead","Fragments":["of"]},{"Key":"nested ifs,","Fragments":["try"]},{"Key":"ifs, try","Fragments":["[`cond`](http://clojuredocs.org/clojure_core/clojure.core/cond)."]},{"Key":"the condition","Fragments":["predicates","map","to","and","and","predicates"]},{"Key":"condition predicates","Fragments":["were","might","into"]},{"Key":"predicates were","Fragments":["broken"]},{"Key":"were broken","Fragments":["out"]},{"Key":"broken out","Fragments":["in","into"]},{"Key":"to small","Fragments":["functions"]},{"Key":"that explained","Fragments":["what"]},{"Key":"explained what","Fragments":["they"]},{"Key":"were testing","Fragments":["for."]},{"Key":"testing for.","Fragments":["Such"]},{"Key":"for. Such","Fragments":["as:"]},{"Key":"(defn question?","Fragments":["[phrase]","[sentence]","[message]"]},{"Key":"question? [phrase]","Fragments":["(="]},{"Key":"[phrase] (=","Fragments":["\\?"]},{"Key":"(= phrase","Fragments":["(clojure.string/upper-case","(clojure.string/lower-case"]},{"Key":"phrase (clojure.string/upper-case","Fragments":["phrase))"]},{"Key":"phrase (clojure.string/lower-case","Fragments":["phrase))))"]},{"Key":"If your","Fragments":["namespace","`anagram-of?`"]},{"Key":"a `use`","Fragments":["block,"]},{"Key":"`use` block,","Fragments":["you"]},{"Key":"block, you","Fragments":["can"]},{"Key":"the `clojure.string/`","Fragments":["in","parts"]},{"Key":"`clojure.string/` in","Fragments":["your"]},{"Key":"Your condition","Fragments":["predicates"]},{"Key":"predicates might","Fragments":["be"]},{"Key":"are separate","Fragments":["functions."]},{"Key":"functions. For","Fragments":["example:","some"]},{"Key":"(last sentence)","Fragments":["\\?))","\\?)`","will"]},{"Key":"(cond (question?","Fragments":["sentence)"]},{"Key":"(question? sentence)","Fragments":["\"Woah,"]},{"Key":"sentence) \"Woah,","Fragments":["chill"]},{"Key":"the `:pre`","Fragments":["condition","annotation."]},{"Key":"`:pre` condition","Fragments":["metadata.","to"]},{"Key":"condition metadata.","Fragments":["I've"]},{"Key":"metadata. I've","Fragments":["not"]},{"Key":"I very","Fragments":["much"]},{"Key":"the deep","Fragments":["domain"]},{"Key":"deep domain","Fragments":["renaming"]},{"Key":"domain renaming","Fragments":["of"]},{"Key":"renaming of","Fragments":["the"]},{"Key":"use either","Fragments":["`(apply"]},{"Key":"either `(apply","Fragments":["str"]},{"Key":"or `(clojure.string/join","Fragments":["(transcribe"]},{"Key":"`(clojure.string/join (transcribe","Fragments":["dna))`"]},{"Key":"(transcribe dna))`","Fragments":["to"]},{"Key":"dna))` to","Fragments":["stitch"]},{"Key":"to stitch","Fragments":["together"]},{"Key":"stitch together","Fragments":["the"]},{"Key":"together the","Fragments":["seq"]},{"Key":"the seq","Fragments":["returned","abstraction."]},{"Key":"seq returned","Fragments":["from"]},{"Key":"returned from","Fragments":["map"]},{"Key":"from map","Fragments":["in"]},{"Key":"is. Otherwise","Fragments":["`to-rna`"]},{"Key":"Otherwise `to-rna`","Fragments":["becomes"]},{"Key":"`to-rna` becomes","Fragments":["an"]},{"Key":"becomes an","Fragments":["effectively"]},{"Key":"an effectively","Fragments":["empty"]},{"Key":"effectively empty","Fragments":["function."]},{"Key":"Interesting to","Fragments":["map","see"]},{"Key":"dna strings","Fragments":["to"]},{"Key":"the map-index?","Fragments":["Names"]},{"Key":"map-index? Names","Fragments":["help"]},{"Key":"Names help","Fragments":["clarify"]},{"Key":"the domain's","Fragments":["relation"]},{"Key":"domain's relation","Fragments":["to"]},{"Key":"relation to","Fragments":["the"]},{"Key":"As another","Fragments":["suggestion,"]},{"Key":"another suggestion,","Fragments":["have"]},{"Key":"suggestion, have","Fragments":["you"]},{"Key":"the multi-collection","Fragments":["form","form","calls"]},{"Key":"multi-collection form","Fragments":["of","of"]},{"Key":"Very straight","Fragments":["forward"]},{"Key":"forward and","Fragments":["clear."]},{"Key":"and clear.","Fragments":["I"]},{"Key":"let to","Fragments":["name","store"]},{"Key":"name a","Fragments":["domain","bit","helper","function"]},{"Key":"domain concept,","Fragments":["nucleotide"]},{"Key":"concept, nucleotide","Fragments":["pairs."]},{"Key":"curious about","Fragments":["the","when"]},{"Key":"of `mapv`","Fragments":["instead"]},{"Key":"Line 4-","Fragments":["You"]},{"Key":"4- You","Fragments":["could"]},{"Key":"of apply","Fragments":["by"]},{"Key":"apply by","Fragments":["writing"]},{"Key":"writing transpose","Fragments":["to"]},{"Key":"transpose to","Fragments":["take"]},{"Key":"Thanks @darius!","Fragments":["My"]},{"Key":"@darius! My","Fragments":["next"]},{"Key":"iteration uses","Fragments":["the"]},{"Key":"of `map`,","Fragments":["as"]},{"Key":"`map`, as","Fragments":["you"]},{"Key":"you suggested.","Fragments":["This","Thanks!"]},{"Key":"suggested. This","Fragments":["had"]},{"Key":"This had","Fragments":["the"]},{"Key":"side effect","Fragments":["of"]},{"Key":"effect of","Fragments":["greatly"]},{"Key":"of greatly","Fragments":["simplifying"]},{"Key":"greatly simplifying","Fragments":["the"]},{"Key":"I therefore","Fragments":["thought"]},{"Key":"therefore thought","Fragments":["it"]},{"Key":"Clojure +","Fragments":["imperative"]},{"Key":"+ imperative","Fragments":["style"]},{"Key":"imperative style","Fragments":["="]},{"Key":"style =","Fragments":["horror))"]},{"Key":"clojure program,","Fragments":["I","I"]},{"Key":"program, I","Fragments":["just","just"]},{"Key":"learned enough","Fragments":["to","to"]},{"Key":"had decent","Fragments":["amount","amount"]},{"Key":"decent amount","Fragments":["of","of"]},{"Key":"of exposure","Fragments":["to","to"]},{"Key":"to both","Fragments":["lisps","lisps"]},{"Key":"both lisps","Fragments":["and","and"]},{"Key":"lisps and","Fragments":["java","java"]},{"Key":"java in","Fragments":["the","the"]},{"Key":"the past,","Fragments":["so","so"]},{"Key":"past, so","Fragments":["I","I"]},{"Key":"could guess","Fragments":["my","my"]},{"Key":"guess my","Fragments":["way","way"]},{"Key":"my way","Fragments":["through","through"]},{"Key":"way through","Fragments":["the","the"]},{"Key":" Argh,","Fragments":["I"]},{"Key":"Argh, I","Fragments":["botched"]},{"Key":"I botched","Fragments":["the"]},{"Key":"botched the","Fragments":["formatting."]},{"Key":"- second","Fragments":["iteration"]},{"Key":"second iteration","Fragments":["fixes","because"]},{"Key":"iteration fixes","Fragments":["formatting","the"]},{"Key":" Learned","Fragments":["some","about"]},{"Key":"Learned some","Fragments":["more"]},{"Key":"more clojure.","Fragments":["Isn't"]},{"Key":"clojure. Isn't","Fragments":["it"]},{"Key":"write an","Fragments":["anonymous"]},{"Key":"with #","Fragments":["notation"]},{"Key":"# notation","Fragments":["that"]},{"Key":"notation that","Fragments":["ignores"]},{"Key":"that ignores","Fragments":["the"]},{"Key":"ignores the","Fragments":["argument?"]},{"Key":"the argument?","Fragments":["Must"]},{"Key":"argument? Must","Fragments":["learn"]},{"Key":"Must learn","Fragments":["more."]},{"Key":"write out","Fragments":["the"]},{"Key":"namespace again","Fragments":["for"]},{"Key":"```clojure.string``` since","Fragments":["you"]},{"Key":"have required","Fragments":["it."]},{"Key":"required it.","Fragments":["You're"]},{"Key":"it. You're","Fragments":["just"]},{"Key":"You're just","Fragments":["missing"]},{"Key":"just missing","Fragments":["one"]},{"Key":"missing one","Fragments":["thing:"]},{"Key":"Where ```str```","Fragments":["can"]},{"Key":"```str``` can","Fragments":["be"]},{"Key":"be anything","Fragments":["you"]},{"Key":"anything you","Fragments":["want."]},{"Key":"want. Then,","Fragments":["you"]},{"Key":" (str/capitalize","Fragments":["...)"]},{"Key":" Duly","Fragments":["noted,"]},{"Key":"Duly noted,","Fragments":["@aidan."]},{"Key":"noted, @aidan.","Fragments":["Discovered"]},{"Key":"@aidan. Discovered","Fragments":["the"]},{"Key":"Discovered the","Fragments":["\"cond\"","built-in"]},{"Key":"the \"cond\"","Fragments":["function"]},{"Key":"\"cond\" function","Fragments":["and"]},{"Key":"and refactored","Fragments":["to"]},{"Key":"following (verified","Fragments":["tests"]},{"Key":"(verified tests","Fragments":["pass):"]},{"Key":" (blank?","Fragments":["input)","s)","s)"]},{"Key":"(blank? input)","Fragments":["\"Fine."]},{"Key":"input) \"Fine.","Fragments":["Be"]},{"Key":"(not (blank?","Fragments":["(replace"]},{"Key":"(blank? (replace","Fragments":["input"]},{"Key":"(replace input","Fragments":["#\"[^A-Za-z]\""]},{"Key":"input #\"[^A-Za-z]\"","Fragments":["\"\")))"]},{"Key":"#\"[^A-Za-z]\" \"\")))","Fragments":["(="]},{"Key":"\"\"))) (=","Fragments":["input"]},{"Key":"input (upper-case","Fragments":["input)))"]},{"Key":"(upper-case input)))","Fragments":["\"Woah,"]},{"Key":"input))) \"Woah,","Fragments":["chill"]},{"Key":"(seq input))","Fragments":["\\?)"]},{"Key":"input)) \\?)","Fragments":["\"Sure.\""]},{"Key":"Wasn't happy","Fragments":["with"]},{"Key":"was handling","Fragments":["the"]},{"Key":"the assertion","Fragments":["on","while","and"]},{"Key":"assertion on","Fragments":["the"]},{"Key":"input, so","Fragments":["I"]},{"Key":"appropriate assertion","Fragments":["at"]},{"Key":"assertion at","Fragments":["the"]},{"Key":"the beginning","Fragments":["of","of","of"]},{"Key":"beginning of","Fragments":["the","convert-nucleotide—does","the"]},{"Key":"(assert (re-matches","Fragments":["#\"[GgCcTtAa]*\""]},{"Key":"(re-matches #\"[GgCcTtAa]*\"","Fragments":["input)"]},{"Key":"#\"[GgCcTtAa]*\" input)","Fragments":["\"Input"]},{"Key":"input) \"Input","Fragments":["must"]},{"Key":"\"Input must","Fragments":["be"]},{"Key":"be of","Fragments":["the","interest","use.","better"]},{"Key":" oops,","Fragments":["submitted"]},{"Key":"oops, submitted","Fragments":["by"]},{"Key":"submitted by","Fragments":["mistake"]},{"Key":"A verbose","Fragments":["version"]},{"Key":"verbose version","Fragments":["of"]},{"Key":"Bob using","Fragments":["[behaviorist][1]"]},{"Key":"using [behaviorist][1]","Fragments":["jargon."]},{"Key":"I expanded","Fragments":["on"]},{"Key":"expanded on","Fragments":["Bob"]},{"Key":"on Bob","Fragments":["so"]},{"Key":"Bob so","Fragments":["I"]},{"Key":"source text","Fragments":["must"]},{"Key":"text must","Fragments":["start"]},{"Key":"must start","Fragments":["with"]},{"Key":"with details,","Fragments":["and"]},{"Key":"details, and","Fragments":["leave"]},{"Key":"readable high","Fragments":["level"]},{"Key":"high level","Fragments":["definitions","public"]},{"Key":"level definitions","Fragments":["for"]},{"Key":"definitions for","Fragments":["later."]},{"Key":"for later.","Fragments":["Any"]},{"Key":"later. Any","Fragments":["way"]},{"Key":" [1]:","Fragments":["http://en.wikipedia.org/wiki/Behaviorism","http://clojuredocs.org/clojure_core/clojure.core/contains_q","http://clojure.org/special_forms#toc9","http://clojure.org/special_forms#toc9","http://clojure.org/special_forms#toc9","http://clojure.github.io/clojure/clojure.string-api.html#clojure.string/blank?"]},{"Key":"would append","Fragments":["a"]},{"Key":"mark to","Fragments":["_is-dna-nucleotid_'s"]},{"Key":"to _is-dna-nucleotid_'s","Fragments":["name."]},{"Key":" Re-write","Fragments":["to"]},{"Key":"Re-write to","Fragments":["use"]},{"Key":"use `frequencies`,","Fragments":["which"]},{"Key":"aware of,","Fragments":["and"]},{"Key":"of, and","Fragments":["which"]},{"Key":"and which","Fragments":["makes","do"]},{"Key":"In clojure","Fragments":["you","you","data"]},{"Key":"clojure you","Fragments":["can","put"]},{"Key":"can describe","Fragments":["function"]},{"Key":"describe function","Fragments":["assumptions"]},{"Key":"function assumptions","Fragments":["about"]},{"Key":"assumptions about","Fragments":["its","the"]},{"Key":"its input","Fragments":["and","so"]},{"Key":"output as","Fragments":["an"]},{"Key":"an (optional)","Fragments":["map"]},{"Key":"(optional) map","Fragments":["after"]},{"Key":"map after","Fragments":["the","I"]},{"Key":"arguments vector.","Fragments":["It"]},{"Key":"vector. It","Fragments":["looks"]},{"Key":"(defn function","Fragments":["[args]"]},{"Key":"{:pre (expresion","Fragments":["that"]},{"Key":"(expresion that","Fragments":["must"]},{"Key":"that must","Fragments":["be","be"]},{"Key":"true up","Fragments":["front)"]},{"Key":" :post","Fragments":["(expression"]},{"Key":":post (expression","Fragments":["that"]},{"Key":"(expression that","Fragments":["must"]},{"Key":"true about","Fragments":["result","function's"]},{"Key":"about result","Fragments":["afterwards)}"]},{"Key":" function","Fragments":["body)"]},{"Key":"expression doesn't","Fragments":["hold"]},{"Key":"doesn't hold","Fragments":["when"]},{"Key":"hold when","Fragments":["it"]},{"Key":"should AssertionError","Fragments":["will"]},{"Key":"AssertionError will","Fragments":["be"]},{"Key":"be raised.","Fragments":["This"]},{"Key":"raised. This","Fragments":["works"]},{"Key":"an executable","Fragments":["documentation"]},{"Key":"executable documentation","Fragments":["of"]},{"Key":"documentation of","Fragments":["the"]},{"Key":"function. This","Fragments":["is"]},{"Key":"in more","Fragments":["detail","than","than"]},{"Key":"more detail","Fragments":["at"]},{"Key":"detail at","Fragments":["the"]},{"Key":"of [this","Fragments":["seciton](http://clojure.org/special_forms#Special"]},{"Key":"[this seciton](http://clojure.org/special_forms#Special","Fragments":["Forms--(fn"]},{"Key":"seciton](http://clojure.org/special_forms#Special Forms--(fn","Fragments":["name?"]},{"Key":"Forms--(fn name?","Fragments":["[params*"]},{"Key":"name? [params*","Fragments":["]"]},{"Key":"[params* ]","Fragments":["exprs*))"]},{"Key":"] exprs*))","Fragments":["(after"]},{"Key":"exprs*)) (after","Fragments":["**since"]},{"Key":"(after **since","Fragments":["1.1**"]},{"Key":"**since 1.1**","Fragments":["subheader)."]},{"Key":"suite doesn't","Fragments":["test","test"]},{"Key":"doesn't test","Fragments":["for","for"]},{"Key":"your assert","Fragments":["accepts"]},{"Key":"assert accepts","Fragments":["a"]},{"Key":"a RNA","Fragments":["acid"]},{"Key":"RNA acid","Fragments":["where"]},{"Key":"acid where","Fragments":["only"]},{"Key":"where only","Fragments":["DNA"]},{"Key":"only DNA","Fragments":["acids"]},{"Key":"DNA acids","Fragments":["should"]},{"Key":"acids should","Fragments":["be."]},{"Key":"Your `seq-contains?`","Fragments":["seems"]},{"Key":"`seq-contains?` seems","Fragments":["to"]},{"Key":"to re-implement","Fragments":["[`contains?`][1],","some"]},{"Key":"re-implement [`contains?`][1],","Fragments":["no?"]},{"Key":"There can't","Fragments":["be"]},{"Key":"be \\U","Fragments":["in"]},{"Key":"\\U in","Fragments":["dna"]},{"Key":"in dna","Fragments":["sequence"]},{"Key":"sequence even","Fragments":["if"]},{"Key":"if test","Fragments":["suite"]},{"Key":"the verification","Fragments":["as"]},{"Key":"verification as","Fragments":["[condition"]},{"Key":"as [condition","Fragments":["map][1]"]},{"Key":"[condition map][1]","Fragments":["of","to","feature"]},{"Key":"map][1] of","Fragments":["the"]},{"Key":"function **to-rna**.","Fragments":["While"]},{"Key":"**to-rna**. While","Fragments":["having"]},{"Key":"While having","Fragments":["the"]},{"Key":"same effect,","Fragments":["it"]},{"Key":"effect, it","Fragments":["would"]},{"Key":"the clojure's","Fragments":["convention."]},{"Key":"And is","Fragments":["there"]},{"Key":"a special","Fragments":["reason","form","style"]},{"Key":"special reason","Fragments":["you"]},{"Key":"the **#\"...\"**","Fragments":["macro"]},{"Key":"**#\"...\"** macro","Fragments":["for"]},{"Key":"for **(re-pattern","Fragments":["\"...\")**?"]},{"Key":"`(def gs","Fragments":["(apply"]},{"Key":"gs (apply","Fragments":["*"]},{"Key":"(apply *","Fragments":["(repeat"]},{"Key":"* (repeat","Fragments":["9"]},{"Key":"(repeat 9","Fragments":["10)))`:"]},{"Key":"9 10)))`:","Fragments":["very"]},{"Key":"10)))`: very","Fragments":["idiomatic!"]},{"Key":"very idiomatic!","Fragments":[":-)"]},{"Key":"That assert","Fragments":["could"]},{"Key":"assert could","Fragments":["be"]},{"Key":"as [\"condition","Fragments":["map\"](http://clojure.org/special_forms#toc9)"]},{"Key":"[\"condition map\"](http://clojure.org/special_forms#toc9)","Fragments":["`{:pre"]},{"Key":"map\"](http://clojure.org/special_forms#toc9) `{:pre","Fragments":["(..."]},{"Key":"`{:pre (...","Fragments":["pre-condition"]},{"Key":"(... pre-condition","Fragments":["...)}`."]},{"Key":"pre-condition ...)}`.","Fragments":["While"]},{"Key":"...)}`. While","Fragments":["it"]},{"Key":"While it","Fragments":["means","does"]},{"Key":"it means","Fragments":["exactly","for"]},{"Key":"means exactly","Fragments":["the"]},{"Key":"thing, it","Fragments":["is"]},{"Key":"more intention","Fragments":["revealing:"]},{"Key":"intention revealing:","Fragments":["you"]},{"Key":"revealing: you","Fragments":["explicitly"]},{"Key":"you explicitly","Fragments":["mark"]},{"Key":"explicitly mark","Fragments":["it"]},{"Key":"the assumption","Fragments":["the"]},{"Key":"assumption the","Fragments":["function"]},{"Key":"function makes","Fragments":["about"]},{"Key":"makes about","Fragments":["its"]},{"Key":"Awesome! This","Fragments":["is"]},{"Key":"great feedback.","Fragments":["Just"]},{"Key":"feedback. Just","Fragments":["the"]},{"Key":"Just the","Fragments":["kind"]},{"Key":"idiomatic thing","Fragments":["I"]},{"Key":"was hoping","Fragments":["to","that"]},{"Key":"hoping to","Fragments":["get","make","transfer"]},{"Key":"actually learned","Fragments":["about","about"]},{"Key":"the \u003ccode\u003e#pattern\u003c/code\u003e","Fragments":["macro"]},{"Key":"\u003ccode\u003e#pattern\u003c/code\u003e macro","Fragments":["after"]},{"Key":"macro after","Fragments":["posting"]},{"Key":"after posting","Fragments":["this"]},{"Key":"posting this","Fragments":["code"]},{"Key":"can definitely","Fragments":["be"]},{"Key":"definitely be","Fragments":["cleaned","simplified."]},{"Key":"be cleaned","Fragments":["up."]},{"Key":"cleaned up.","Fragments":["I"]},{"Key":"up. I","Fragments":["don't"]},{"Key":"condition map","Fragments":["form","with","right?"]},{"Key":"map form","Fragments":["that"]},{"Key":"you referenced,","Fragments":["but"]},{"Key":"referenced, but","Fragments":["I'll"]},{"Key":"I'll dig","Fragments":["into"]},{"Key":"dig into","Fragments":["it"]},{"Key":"into it","Fragments":["so"]},{"Key":"can learn","Fragments":["that.","a"]},{"Key":"You're off","Fragments":["to"]},{"Key":"off to","Fragments":["a","know"]},{"Key":"good start","Fragments":["I"]},{"Key":"start I","Fragments":["think."]},{"Key":"However your","Fragments":["`response-for`"]},{"Key":"function mixes","Fragments":["programmer-lingo"]},{"Key":"mixes programmer-lingo","Fragments":["with"]},{"Key":"programmer-lingo with","Fragments":["words"]},{"Key":"with words","Fragments":["from"]},{"Key":"a consistent","Fragments":["level","approach"]},{"Key":"consistent level","Fragments":["of"]},{"Key":"abstraction would","Fragments":["help"]},{"Key":"help others","Fragments":["to"]},{"Key":"problem at","Fragments":["hand,"]},{"Key":"at hand,","Fragments":["e.g."]},{"Key":"hand, e.g.","Fragments":["moving"]},{"Key":"e.g. moving","Fragments":["all"]},{"Key":"moving all","Fragments":["conditionals","the"]},{"Key":"all conditionals","Fragments":["into"]},{"Key":"small predicate","Fragments":["like"]},{"Key":"predicate like","Fragments":["functions,","`yelling?`."]},{"Key":"like functions,","Fragments":["instead"]},{"Key":"functions, instead","Fragments":["of"]},{"Key":"of mixing","Fragments":["string"]},{"Key":"mixing string","Fragments":["checks"]},{"Key":"checks with","Fragments":["a"]},{"Key":"same method","Fragments":["with"]},{"Key":"with slightly","Fragments":["different"]},{"Key":"slightly different","Fragments":["formatting","regex","use"]},{"Key":"different formatting","Fragments":["because"]},{"Key":"formatting because","Fragments":["I"]},{"Key":"it descriptive,","Fragments":["I"]},{"Key":"descriptive, I","Fragments":["like"]},{"Key":"use string's","Fragments":["replace"]},{"Key":"string's replace","Fragments":["instead"]},{"Key":"replace instead","Fragments":["of"]},{"Key":"of map.","Fragments":["As"]},{"Key":"map. As","Fragments":["a"]},{"Key":"a result","Fragments":["they"]},{"Key":"result they","Fragments":["don't"]},{"Key":"convert result","Fragments":["back"]},{"Key":"result back","Fragments":["to"]},{"Key":"mention **\\T","Fragments":["\\U**"]},{"Key":"**\\T \\U**","Fragments":["pair,"]},{"Key":"\\U** pair,","Fragments":["not"]},{"Key":"pair, not","Fragments":["the"]},{"Key":"the acids","Fragments":["that"]},{"Key":"acids that","Fragments":["stay"]},{"Key":"that stay","Fragments":["the"]},{"Key":"stay the","Fragments":["same."]},{"Key":"But my","Fragments":["general"]},{"Key":"my general","Fragments":["nitpick"]},{"Key":"general nitpick","Fragments":["about"]},{"Key":"nitpick about","Fragments":["your"]},{"Key":"its \"imperative\"","Fragments":["feel."]},{"Key":"\"imperative\" feel.","Fragments":["In"]},{"Key":"feel. In","Fragments":["lisp"]},{"Key":"In lisp","Fragments":["we"]},{"Key":"lisp we","Fragments":["mostly"]},{"Key":"we mostly","Fragments":["don't"]},{"Key":"mostly don't","Fragments":["do"]},{"Key":"in sequence,","Fragments":["it"]},{"Key":"sequence, it","Fragments":["feels"]},{"Key":"feels foreign.","Fragments":["Instead"]},{"Key":"foreign. Instead","Fragments":["we"]},{"Key":"Instead we","Fragments":["pass"]},{"Key":"we pass","Fragments":["forms"]},{"Key":"pass forms","Fragments":["as"]},{"Key":"forms as","Fragments":["arguments","much"]},{"Key":"arguments to","Fragments":["forms","the","the"]},{"Key":"to forms","Fragments":["as"]},{"Key":"much as","Fragments":["possible,","possible.","I","possible"]},{"Key":"possible, allowing","Fragments":["the"]},{"Key":"allowing the","Fragments":["results"]},{"Key":"results to","Fragments":["flow"]},{"Key":"to flow","Fragments":["from"]},{"Key":"flow from","Fragments":["inside"]},{"Key":"needed that","Fragments":["temporary"]},{"Key":"that temporary","Fragments":["variable"]},{"Key":"temporary variable","Fragments":["so"]},{"Key":"to assert","Fragments":["and","would","that"]},{"Key":"assert and","Fragments":["to","pre-"]},{"Key":"to str.","Fragments":["Even"]},{"Key":"str. Even","Fragments":["then,"]},{"Key":"then, a","Fragments":["more"]},{"Key":"more lispy","Fragments":["idiom"]},{"Key":"lispy idiom","Fragments":["would"]},{"Key":"idiom would","Fragments":["be"]},{"Key":"use let,","Fragments":["like"]},{"Key":"(let [converted","Fragments":["(map"]},{"Key":"[converted (map","Fragments":["{\\A"]},{"Key":"(map {\\A","Fragments":["\\A"]},{"Key":"\\A \\T","Fragments":["\\U"]},{"Key":"\\T \\U","Fragments":["\\C"]},{"Key":"\\U \\C","Fragments":["\\C"]},{"Key":"\\G \\G}","Fragments":["message)]"]},{"Key":"(assert (not","Fragments":["(some","(nil?"]},{"Key":"(not (some","Fragments":["nil?","....,","....,"]},{"Key":"(some nil?","Fragments":["converted)))"]},{"Key":"Still this","Fragments":["doesn't"]},{"Key":"doesn't feel","Fragments":["right,","\"refined\".","as","like","like","very"]},{"Key":"feel right,","Fragments":["as"]},{"Key":"right, as","Fragments":["what"]},{"Key":"as what","Fragments":["you"]},{"Key":"is `(apply","Fragments":["str"]},{"Key":"(map ...`.","Fragments":["And"]},{"Key":"...`. And","Fragments":["that's"]},{"Key":"And that's","Fragments":["what"]},{"Key":"used [condition","Fragments":["map][1]"]},{"Key":"map][1] to","Fragments":["describe"]},{"Key":"to describe","Fragments":["what"]},{"Key":"describe what","Fragments":["your","it's"]},{"Key":"your function's","Fragments":["assumptions"]},{"Key":"function's assumptions","Fragments":["about"]},{"Key":"; condition","Fragments":["map"]},{"Key":"only :pre","Fragments":["condtion"]},{"Key":"{:pre [(SOME","Fragments":["EXPRESSION"]},{"Key":"[(SOME EXPRESSION","Fragments":["WITH"]},{"Key":"EXPRESSION WITH","Fragments":["message"]},{"Key":"WITH message","Fragments":["THAT"]},{"Key":"message THAT","Fragments":["MUST"]},{"Key":"THAT MUST","Fragments":["BE"]},{"Key":"MUST BE","Fragments":["TRUE)]}"]},{"Key":"; actual","Fragments":["function"]},{"Key":"actual function","Fragments":["body"]},{"Key":" {\\A","Fragments":["\\A,"]},{"Key":"{\\A \\A,","Fragments":["\\T"]},{"Key":"\\A, \\T","Fragments":["\\U,","\\U}"]},{"Key":"\\T \\U,","Fragments":["\\C"]},{"Key":"\\U, \\C","Fragments":["\\C,","\\G,"]},{"Key":"\\C \\C,","Fragments":["\\G"]},{"Key":"\\C, \\G","Fragments":["\\G}","\\G,"]},{"Key":"What that","Fragments":["`{:pre"]},{"Key":"that `{:pre","Fragments":["[...]}`"]},{"Key":"`{:pre [...]}`","Fragments":["thing"]},{"Key":"[...]}` thing","Fragments":["does"]},{"Key":"thing does","Fragments":["is"]},{"Key":"does is","Fragments":["a)"]},{"Key":"is a)","Fragments":["documents"]},{"Key":"a) documents","Fragments":["what"]},{"Key":"documents what","Fragments":["the"]},{"Key":"expects and","Fragments":["b)"]},{"Key":"b) asserts","Fragments":["that"]},{"Key":"asserts that","Fragments":["the"]},{"Key":"actually satisfies","Fragments":["the"]},{"Key":"satisfies the","Fragments":["expectation."]},{"Key":"Line 34:","Fragments":["you"]},{"Key":"34: you","Fragments":["could"]},{"Key":"use `1e9`","Fragments":["directly"]},{"Key":"`1e9` directly","Fragments":["at"]},{"Key":"directly at","Fragments":["line"]},{"Key":" Than","Fragments":["you."]},{"Key":"of \"declarative\"","Fragments":["assertions"]},{"Key":"\"declarative\" assertions","Fragments":["in"]},{"Key":"assertions in","Fragments":["clojure"]},{"Key":"clojure functions.","Fragments":["They"]},{"Key":"are implemented","Fragments":["by"]},{"Key":"implemented by","Fragments":["[condition"]},{"Key":"by [condition","Fragments":["map][1]"]},{"Key":"map][1] feature","Fragments":["of"]},{"Key":"function declation","Fragments":["form."]},{"Key":"declation form.","Fragments":["The"]},{"Key":"The map","Fragments":["can","will"]},{"Key":"define two","Fragments":["expressions"]},{"Key":"two expressions","Fragments":["-"]},{"Key":"expressions -","Fragments":["**:pre**","using"]},{"Key":"- **:pre**","Fragments":["and"]},{"Key":"**:pre** and","Fragments":["**:post**,"]},{"Key":"and **:post**,","Fragments":["the"]},{"Key":"**:post**, the","Fragments":["former"]},{"Key":"former one","Fragments":["must"]},{"Key":"one must","Fragments":["be"]},{"Key":"about function's","Fragments":["arguments,"]},{"Key":"function's arguments,","Fragments":["the"]},{"Key":"arguments, the","Fragments":["latter"]},{"Key":"latter -","Fragments":["about"]},{"Key":"- about","Fragments":["its"]},{"Key":"its return","Fragments":["value."]},{"Key":"return value.","Fragments":["Using","So"]},{"Key":"value. Using","Fragments":["this"]},{"Key":"Using this","Fragments":["feature"]},{"Key":"feature helps","Fragments":["the"]},{"Key":"helps the","Fragments":["reader","code"]},{"Key":"reader recognize","Fragments":["assertions"]},{"Key":"recognize assertions","Fragments":["about"]},{"Key":"assertions about","Fragments":["input/output","input"]},{"Key":"about input/output","Fragments":["right"]},{"Key":"input/output right","Fragments":["away,"]},{"Key":"right away,","Fragments":["instead"]},{"Key":"away, instead","Fragments":["of"]},{"Key":"use [`clojure.string/blank?`][1]","Fragments":["to"]},{"Key":"[`clojure.string/blank?`][1] to","Fragments":["simplify"]},{"Key":"Oh, thanks,","Fragments":["you're"]},{"Key":"thanks, you're","Fragments":["right,"]},{"Key":"Ah, so","Fragments":["Clojure"]},{"Key":"so Clojure","Fragments":["does"]},{"Key":"Clojure does","Fragments":["have","(unfortunately)"]},{"Key":"does have","Fragments":["(sort-of)"]},{"Key":"have (sort-of)","Fragments":["currying"]},{"Key":"(sort-of) currying","Fragments":["with"]},{"Key":"currying with","Fragments":["`partial`."]},{"Key":"with `partial`.","Fragments":["Re-wrote","Some"]},{"Key":"`partial`. Re-wrote","Fragments":["to"]},{"Key":"Re-wrote to","Fragments":["take"]},{"Key":"suggest indenting","Fragments":["each"]},{"Key":"indenting each","Fragments":["expression"]},{"Key":"each expression","Fragments":["of"]},{"Key":"the `and`-ed","Fragments":["predicate","predicate"]},{"Key":"`and`-ed predicate","Fragments":["under","a"]},{"Key":"predicate under","Fragments":["each"]},{"Key":"under each","Fragments":["other"]},{"Key":"each other","Fragments":["(with","doesn't","and"]},{"Key":"other (with","Fragments":["the"]},{"Key":"(with the","Fragments":["first","question"]},{"Key":"first on","Fragments":["the"]},{"Key":"the `and`)","Fragments":["and"]},{"Key":"`and`) and","Fragments":["putting"]},{"Key":"and putting","Fragments":["the"]},{"Key":"the consequent","Fragments":["clause"]},{"Key":"consequent clause","Fragments":["on"]},{"Key":"clause on","Fragments":["its"]},{"Key":"Or even","Fragments":["better","better,","hash-map"]},{"Key":"even better","Fragments":["-"]},{"Key":"better -","Fragments":["give"]},{"Key":"predicate a","Fragments":["name"]},{"Key":"name by","Fragments":["creating"]},{"Key":" Concise","Fragments":["and"]},{"Key":"Concise and","Fragments":["readable,"]},{"Key":"it simpler","Fragments":["and"]},{"Key":"more uniform,","Fragments":["you"]},{"Key":"uniform, you","Fragments":["could"]},{"Key":"write `(str/replace","Fragments":["dna"]},{"Key":"`(str/replace dna","Fragments":["\\T"]},{"Key":"only look","Fragments":["at"]},{"Key":"at replacing","Fragments":["the"]},{"Key":"replacing the","Fragments":["T's","T","cond","regex"]},{"Key":"the T's","Fragments":["with"]},{"Key":"T's with","Fragments":["U's."]},{"Key":"with U's.","Fragments":["This"]},{"Key":"U's. This","Fragments":["way"]},{"Key":"it becomes","Fragments":["clear","null","more"]},{"Key":"only difference","Fragments":["between","between"]},{"Key":"RNA and","Fragments":["DNA"]},{"Key":"and DNA","Fragments":["sequences"]},{"Key":"DNA sequences","Fragments":["(not"]},{"Key":"sequences (not","Fragments":["molecules,"]},{"Key":"(not molecules,","Fragments":["of"]},{"Key":"molecules, of","Fragments":["course)."]},{"Key":" @kaden,","Fragments":["can","that"]},{"Key":"@kaden, can","Fragments":["you"]},{"Key":"i used","Fragments":["condition","the"]},{"Key":"used condition","Fragments":["map"]},{"Key":"@kaden, that","Fragments":["is"]},{"Key":"the ideia,","Fragments":["make"]},{"Key":"ideia, make","Fragments":["it"]},{"Key":"it simple","Fragments":["to"]},{"Key":"of `partition","Fragments":["2`"]},{"Key":"`partition 2`","Fragments":["and","could"]},{"Key":"2` and","Fragments":["`interleave`"]},{"Key":"and `interleave`","Fragments":["can"]},{"Key":"`interleave` can","Fragments":["be"]},{"Key":"a call","Fragments":["to","to","to","to","to","to"]},{"Key":"to [`(map","Fragments":["list"]},{"Key":"[`(map list","Fragments":["origin"]},{"Key":"list origin","Fragments":["comparison)`](http://clojuredocs.org/clojure_core/clojure.core/map)"]},{"Key":"origin comparison)`](http://clojuredocs.org/clojure_core/clojure.core/map)","Fragments":["with"]},{"Key":"comparison)`](http://clojuredocs.org/clojure_core/clojure.core/map) with","Fragments":["multiple"]},{"Key":"multiple collections.","Fragments":["This"]},{"Key":"collections. This","Fragments":["will"]},{"Key":"This will","Fragments":["get","make","drive","simplify","remove","improve","fail"]},{"Key":"get you","Fragments":["the","past"]},{"Key":"of pairs","Fragments":["you're"]},{"Key":"pairs you're","Fragments":["looking"]},{"Key":"you're looking","Fragments":["for.","for","for"]},{"Key":"replacing your","Fragments":["use"]},{"Key":"with [`letfn`](http://clojuredocs.org/clojure_core/clojure.core/letfn)","Fragments":["which"]},{"Key":"[`letfn`](http://clojuredocs.org/clojure_core/clojure.core/letfn) which","Fragments":["is"]},{"Key":"is meant","Fragments":["to","to"]},{"Key":"define function","Fragments":["scoped"]},{"Key":"function scoped","Fragments":["helper"]},{"Key":"scoped helper","Fragments":["functions."]},{"Key":" (letfn","Fragments":["[(keify","[(divisible?"]},{"Key":"(letfn [(keify","Fragments":["[a-word]"]},{"Key":"[(keify [a-word]","Fragments":["(sort"]},{"Key":"[a-word] (sort","Fragments":["(lower-case"]},{"Key":"(sort (lower-case","Fragments":["a-word)))"]},{"Key":" (anagram?","Fragments":["[candidate]"]},{"Key":"(anagram? [candidate]","Fragments":["(and"]},{"Key":"[candidate] (and","Fragments":["(="]},{"Key":"(= (keify","Fragments":["word)"]},{"Key":"(keify word)","Fragments":["(keify"]},{"Key":"word) (keify","Fragments":["candidate))"]},{"Key":"(not= word","Fragments":["candidate)))]","other-word)"]},{"Key":" (filter","Fragments":["anagram?","#(case-insensitive-anagram-of?","#(Character/isLetter","identity","Character/isLetter","(partial","false?"]},{"Key":"(filter anagram?","Fragments":["candidates)))"]},{"Key":"Neat, I've","Fragments":["forgotten"]},{"Key":"I've forgotten","Fragments":["about"]},{"Key":"application problem","Fragments":["is"]},{"Key":"the [anonymous","Fragments":["function"]},{"Key":"[anonymous function","Fragments":["literal](http://clojure.org/reader#The"]},{"Key":"function literal](http://clojure.org/reader#The","Fragments":["Reader--Macro"]},{"Key":"literal](http://clojure.org/reader#The Reader--Macro","Fragments":["characters)."]},{"Key":"Reader--Macro characters).","Fragments":["You"]},{"Key":"characters). You","Fragments":["may","can"]},{"Key":"the example,","Fragments":["but"]},{"Key":"best link","Fragments":["I"]},{"Key":"link I","Fragments":["can"]},{"Key":"find right","Fragments":["now."]},{"Key":"(filter #(case-insensitive-anagram-of?","Fragments":["word"]},{"Key":"#(case-insensitive-anagram-of? word","Fragments":["%)"]},{"Key":"word %)","Fragments":["potential-matches)","candidates)`."]},{"Key":"yes, that's","Fragments":["the","a"]},{"Key":"use condition","Fragments":["map."]},{"Key":"are writing","Fragments":["your"]},{"Key":"writing your","Fragments":["own"]},{"Key":"own loop.","Fragments":["You"]},{"Key":"loop. You","Fragments":["might"]},{"Key":"to lean","Fragments":["more"]},{"Key":"lean more","Fragments":["on"]},{"Key":"on clojure's","Fragments":["built"]},{"Key":"clojure's built","Fragments":["in","in"]},{"Key":"in functions","Fragments":["like"]},{"Key":"`count`, `filter`,","Fragments":["and"]},{"Key":"`filter`, and","Fragments":["[`map`](http://clojuredocs.org/clojure_core/clojure.core/map)."]},{"Key":"and [`map`](http://clojuredocs.org/clojure_core/clojure.core/map).","Fragments":["In"]},{"Key":"[`map`](http://clojuredocs.org/clojure_core/clojure.core/map). In","Fragments":["particular,"]},{"Key":"the multiple","Fragments":["collection","`0`"]},{"Key":"multiple collection","Fragments":["examples"]},{"Key":"collection examples","Fragments":["of"]},{"Key":"map like","Fragments":["`(map"]},{"Key":"like `(map","Fragments":["vector"]},{"Key":"vector s1","Fragments":["s2)`"]},{"Key":"s1 s2)`","Fragments":["or"]},{"Key":"s2)` or","Fragments":["`(map"]},{"Key":"or `(map","Fragments":["not="]},{"Key":"not= s1","Fragments":["s2)`.","s2)'."]},{"Key":"other exercices","Fragments":["this"]},{"Key":"exercices this","Fragments":["way."]},{"Key":"is perfect","Fragments":["to","for"]},{"Key":"perfect to","Fragments":["pass","me."]},{"Key":"test suite,","Fragments":["I","so","since","but","it","it"]},{"Key":"suite, I","Fragments":["have"]},{"Key":"just realized","Fragments":["that","that","that","that"]},{"Key":"don't test","Fragments":["for"]},{"Key":"what's in","Fragments":["the","the"]},{"Key":"the Readme.","Fragments":["Now"]},{"Key":"Readme. Now","Fragments":["I'm"]},{"Key":"Now I'm","Fragments":["so"]},{"Key":"question check","Fragments":["could","more","into"]},{"Key":"check could","Fragments":["be:","be"]},{"Key":"the suggestion,","Fragments":["I"]},{"Key":"suggestion, I","Fragments":["have"]},{"Key":" Curiously","Fragments":["enough"]},{"Key":"Curiously enough","Fragments":["I"]},{"Key":"reading [Library","Fragments":["Coding"]},{"Key":"[Library Coding","Fragments":["Standards](http://dev.clojure.org/display/community/Library+Coding+Standards)"]},{"Key":"Coding Standards](http://dev.clojure.org/display/community/Library+Coding+Standards)","Fragments":["the"]},{"Key":"Standards](http://dev.clojure.org/display/community/Library+Coding+Standards) the","Fragments":["other"]},{"Key":"other day","Fragments":["and","when"]},{"Key":"they say","Fragments":["`Make"]},{"Key":"say `Make","Fragments":["liberal"]},{"Key":"`Make liberal","Fragments":["use"]},{"Key":"liberal use","Fragments":["of"]},{"Key":"of assert","Fragments":["and"]},{"Key":"and pre-","Fragments":["and"]},{"Key":"post- conditions`,","Fragments":["but"]},{"Key":"conditions`, but","Fragments":["I"]},{"Key":"the connection","Fragments":["to"]},{"Key":"connection to","Fragments":["use"]},{"Key":"regex looks","Fragments":["for","pretty..."]},{"Key":"looks for","Fragments":["stretches"]},{"Key":"for stretches","Fragments":["of"]},{"Key":"stretches of","Fragments":["wrong"]},{"Key":"of wrong","Fragments":["characters"]},{"Key":"wrong characters","Fragments":["while"]},{"Key":"characters while","Fragments":["one"]},{"Key":"while one","Fragments":["would"]},{"Key":"I'm put","Fragments":["off"]},{"Key":"put off","Fragments":["by"]},{"Key":"double negation,","Fragments":["it","I"]},{"Key":"negation, it","Fragments":["always"]},{"Key":"it always","Fragments":["makes"]},{"Key":"always makes","Fragments":["me"]},{"Key":"think too","Fragments":["much."]},{"Key":"much. Couldn't","Fragments":["the"]},{"Key":"Couldn't the","Fragments":["program"]},{"Key":"program just","Fragments":["test"]},{"Key":"just test","Fragments":["that","simple"]},{"Key":"whole string","Fragments":["only","matches"]},{"Key":"string only","Fragments":["contains"]},{"Key":"only contains","Fragments":["correct"]},{"Key":"contains correct","Fragments":["characters?"]},{"Key":"looking good","Fragments":["locks!"]},{"Key":"good locks!","Fragments":["Way"]},{"Key":"locks! Way","Fragments":["more"]},{"Key":"Way more","Fragments":["succinct"]},{"Key":"more succinct","Fragments":["than","version,","to"]},{"Key":"succinct than","Fragments":["my"]},{"Key":"So, response-for-basic","Fragments":["is"]},{"Key":"response-for-basic is","Fragments":["a"]},{"Key":"a tried","Fragments":["and"]},{"Key":"tried and","Fragments":["true"]},{"Key":"and true","Fragments":["ugly"]},{"Key":"true ugly","Fragments":["solution."]},{"Key":"ugly solution.","Fragments":["I"]},{"Key":"find out","Fragments":["my","about","a"]},{"Key":"my naming","Fragments":["conventions"]},{"Key":"conventions for","Fragments":["bob's"]},{"Key":"for bob's","Fragments":["responses"]},{"Key":"bob's responses","Fragments":["and"]},{"Key":"responses and","Fragments":["to"]},{"Key":"determine patterns","Fragments":["in"]},{"Key":"readable format","Fragments":["than"]},{"Key":"format than","Fragments":["existed"]},{"Key":"than existed","Fragments":["in"]},{"Key":"existed in","Fragments":["bob_test.clj."]},{"Key":"regex based","Fragments":["solution"]},{"Key":"based solution","Fragments":["because","with"]},{"Key":"solution because","Fragments":["I"]},{"Key":"most straightforward(and","Fragments":["I"]},{"Key":"straightforward(and I","Fragments":["like"]},{"Key":"like practicing","Fragments":["regex)."]},{"Key":" Were","Fragments":["I"]},{"Key":"Were I","Fragments":["to"]},{"Key":"I to","Fragments":["continue"]},{"Key":"to continue","Fragments":["this"]},{"Key":"continue this","Fragments":["path,"]},{"Key":"this path,","Fragments":["I"]},{"Key":"path, I","Fragments":["probably"]},{"Key":"probably would","Fragments":["want"]},{"Key":"go the","Fragments":["\"insane\""]},{"Key":"the \"insane\"","Fragments":["route,"]},{"Key":"\"insane\" route,","Fragments":["and"]},{"Key":"route, and","Fragments":["try"]},{"Key":"of NLP","Fragments":["based"]},{"Key":"NLP based","Fragments":["solution"]},{"Key":"with classifying","Fragments":["[string];"]},{"Key":"classifying [string];","Fragments":["but"]},{"Key":"[string]; but","Fragments":["that"]},{"Key":" Currently","Fragments":["very"]},{"Key":"Currently very","Fragments":["simplistic"]},{"Key":"very simplistic","Fragments":["`response-for`"]},{"Key":"simplistic `response-for`","Fragments":["implementation"]},{"Key":"`response-for` implementation","Fragments":["using"]},{"Key":"implementation using","Fragments":["if"]},{"Key":"using if","Fragments":["forms,"]},{"Key":"if forms,","Fragments":["considering"]},{"Key":"forms, considering","Fragments":["looking"]},{"Key":"considering looking","Fragments":["at"]},{"Key":"a `multimethod`","Fragments":["I'd"]},{"Key":"`multimethod` I'd","Fragments":["be"]},{"Key":"anyone thinks","Fragments":["this"]},{"Key":"thinks this","Fragments":["is"]},{"Key":"cond clearer","Fragments":["by"]},{"Key":"clearer by","Fragments":["simplifying","casting"]},{"Key":"simplifying its","Fragments":["conditions."]},{"Key":"a well-structured","Fragments":["solution."]},{"Key":"well-structured solution.","Fragments":["A"]},{"Key":"solution. A","Fragments":["few"]},{"Key":"few style","Fragments":["nits:"]},{"Key":"* It's","Fragments":["generally","probably"]},{"Key":"generally preferred","Fragments":["to","and"]},{"Key":":use option","Fragments":["of"]},{"Key":"option of","Fragments":["(ns)"]},{"Key":"of (ns)","Fragments":["rather"]},{"Key":"(ns) rather","Fragments":["than"]},{"Key":"than explicitly","Fragments":["calling"]},{"Key":"explicitly calling","Fragments":["(require),","`get`"]},{"Key":"calling (require),","Fragments":["so"]},{"Key":"(require), so","Fragments":["that"]},{"Key":"reader is","Fragments":["confident"]},{"Key":"is confident","Fragments":["there"]},{"Key":"confident there","Fragments":["won't"]},{"Key":"be additional","Fragments":["requires"]},{"Key":"additional requires","Fragments":["and"]},{"Key":"requires and","Fragments":["imports"]},{"Key":"and imports","Fragments":["and"]},{"Key":"imports and","Fragments":["so"]},{"Key":"on strewn","Fragments":["throughout"]},{"Key":"strewn throughout","Fragments":["the"]},{"Key":"* Predicate","Fragments":["names"]},{"Key":"Predicate names","Fragments":["in"]},{"Key":"Clojure usually","Fragments":["omit"]},{"Key":"the \"is\"","Fragments":["prefix,"]},{"Key":"\"is\" prefix,","Fragments":["e.g.,"]},{"Key":"prefix, e.g.,","Fragments":["core"]},{"Key":"e.g., core","Fragments":["predicates"]},{"Key":"core predicates","Fragments":["like"]},{"Key":"predicates like","Fragments":["empty?,","`is-anagram`","`every?`","`=`,"]},{"Key":"like empty?,","Fragments":["nil?,"]},{"Key":"empty?, nil?,","Fragments":["pos?,"]},{"Key":"nil?, pos?,","Fragments":["and"]},{"Key":"pos?, and","Fragments":["so"]},{"Key":"so on.","Fragments":["The"]},{"Key":"on. The","Fragments":["question"]},{"Key":"what indicates","Fragments":["that"]},{"Key":"indicates that","Fragments":["it's"]},{"Key":"it's testing","Fragments":["whether"]},{"Key":"testing whether","Fragments":["its"]},{"Key":"whether its","Fragments":["argument"]},{"Key":"argument has","Fragments":["the"]},{"Key":"the property","Fragments":["in"]},{"Key":"property in","Fragments":["question."]},{"Key":"probably fine","Fragments":["to"]},{"Key":"call str/blank?","Fragments":["directly"]},{"Key":"str/blank? directly","Fragments":["rather"]},{"Key":"directly rather","Fragments":["than"]},{"Key":"than delegating","Fragments":["to"]},{"Key":"delegating to","Fragments":["a"]},{"Key":"a wrapper","Fragments":["function,"]},{"Key":"wrapper function,","Fragments":["since"]},{"Key":"that call","Fragments":["will"]},{"Key":"call will","Fragments":["be","return"]},{"Key":"be immediately","Fragments":["obvious"]},{"Key":"immediately obvious","Fragments":["to"]},{"Key":"a reader","Fragments":["and","can"]},{"Key":"reader and","Fragments":["its"]},{"Key":"its name","Fragments":["isn't"]},{"Key":"name isn't","Fragments":["substantially"]},{"Key":"isn't substantially","Fragments":["longer"]},{"Key":"substantially longer","Fragments":["than"]},{"Key":"your wrapper.","Fragments":["But"]},{"Key":"wrapper. But","Fragments":["this"]},{"Key":"this nit","Fragments":["is"]},{"Key":"nit is","Fragments":["more"]},{"Key":"more subjective","Fragments":["so"]},{"Key":"subjective so","Fragments":["ignore"]},{"Key":"so ignore","Fragments":["it"]},{"Key":"it if","Fragments":["you","I"]},{"Key":"The shouting","Fragments":["check"]},{"Key":"shouting check","Fragments":["could","and"]},{"Key":"be split","Fragments":["off","up"]},{"Key":"split off","Fragments":["into"]},{"Key":"function so","Fragments":["that","that","function","I","that"]},{"Key":"the semantics","Fragments":["of","of"]},{"Key":"semantics of","Fragments":["response-for","the"]},{"Key":"of response-for","Fragments":["are","is"]},{"Key":"response-for are","Fragments":["clearer."]},{"Key":"The Clojure","Fragments":["code"]},{"Key":"the wild","Fragments":["doesn't"]},{"Key":"wild doesn't","Fragments":["use"]},{"Key":"use this","Fragments":["columnar","style"]},{"Key":"this columnar","Fragments":["style"]},{"Key":"columnar style","Fragments":["for"]},{"Key":"for (cond)","Fragments":["--"]},{"Key":"(cond) --","Fragments":["usually"]},{"Key":"-- usually","Fragments":["the"]},{"Key":"usually the","Fragments":["predicate"]},{"Key":"value on","Fragments":["the","the","its"]},{"Key":"next unless","Fragments":["the"]},{"Key":"unless the","Fragments":["predicate"]},{"Key":"is super-short.","Fragments":["Sometimes"]},{"Key":"super-short. Sometimes","Fragments":["the"]},{"Key":"Sometimes the","Fragments":["value"]},{"Key":"is indented","Fragments":["two"]},{"Key":"indented two","Fragments":["spaces"]},{"Key":"spaces and","Fragments":["sometimes","splitting"]},{"Key":"and sometimes","Fragments":["pairs"]},{"Key":"sometimes pairs","Fragments":["of"]},{"Key":"pairs of","Fragments":["predicates"]},{"Key":"are separated","Fragments":["by"]},{"Key":"by blank","Fragments":["lines."]},{"Key":"blank lines.","Fragments":["Of"]},{"Key":"lines. Of","Fragments":["course,"]},{"Key":"course, the","Fragments":["style"]},{"Key":"style here","Fragments":["is"]},{"Key":"perfectly valid","Fragments":["too,"]},{"Key":"valid too,","Fragments":["but"]},{"Key":"but it'll","Fragments":["get"]},{"Key":"it'll get","Fragments":["awkward","shorter"]},{"Key":"get awkward","Fragments":["if,"]},{"Key":"awkward if,","Fragments":["e.g.,"]},{"Key":"if, e.g.,","Fragments":["the"]},{"Key":"e.g., the","Fragments":["problem"]},{"Key":"specification changes","Fragments":["such"]},{"Key":"changes such","Fragments":["that"]},{"Key":"responses becomes","Fragments":["too"]},{"Key":"becomes too","Fragments":["long"]},{"Key":"long to","Fragments":["fit"]},{"Key":"fit on","Fragments":["one"]},{"Key":" silence?","Fragments":["could","\"Fine."]},{"Key":"silence? could","Fragments":["use"]},{"Key":"clojure.string/blank? rather","Fragments":["than"]},{"Key":"expression. Otherwise","Fragments":["this"]},{"Key":"\u003e Line","Fragments":["2"]},{"Key":"you (:use","Fragments":["[clojure.string]),"]},{"Key":"(:use [clojure.string]),","Fragments":["your"]},{"Key":"[clojure.string]), your","Fragments":["calls"]},{"Key":"simply upper-case,","Fragments":["lower-case,"]},{"Key":"upper-case, lower-case,","Fragments":["etc."]},{"Key":" java.lang.RuntimeException:","Fragments":["Unable"]},{"Key":"java.lang.RuntimeException: Unable","Fragments":["to","to"]},{"Key":"Unable to","Fragments":["resolve","resolve"]},{"Key":"resolve symbol:","Fragments":["upper-case","my-other-value"]},{"Key":"symbol: upper-case","Fragments":["in"]},{"Key":"upper-case in","Fragments":["this"]},{"Key":"this context,","Fragments":["compiling:(/home/burke/exercism/clojure/bob/bob.clj:7:19)","compiling:(NO_SOURCE_PATH:0:0)"]},{"Key":" Haha,","Fragments":["now","I","cheers","I"]},{"Key":"Haha, now","Fragments":["I"]},{"Key":"said my","Fragments":["solution"]},{"Key":"is succinct","Fragments":[":)"]},{"Key":"the brute-force","Fragments":["approach"]},{"Key":"brute-force approach","Fragments":["of"]},{"Key":"of response-for-basic","Fragments":["and"]},{"Key":"response-for-basic and","Fragments":["I"]},{"Key":"used `let`","Fragments":["to"]},{"Key":"response strings,","Fragments":["it"]},{"Key":"strings, it","Fragments":["cleans"]},{"Key":"feel about","Fragments":["pulling","this","that?","macros?","your"]},{"Key":"pulling it","Fragments":["out"]},{"Key":"tried the","Fragments":["following"]},{"Key":"following NS","Fragments":["declaration"]},{"Key":"NS declaration","Fragments":["with"]},{"Key":"declaration with","Fragments":["your"]},{"Key":"bob \"A","Fragments":["sullen"]},{"Key":"\"A sullen","Fragments":["teenager\""]},{"Key":":only [upper-case","Fragments":["lower-case"]},{"Key":"was able","Fragments":["to","to","to","to","to","to"]},{"Key":"`clojure.string/` parts","Fragments":["of"]},{"Key":"function calls.","Fragments":["I"]},{"Key":"calls. I","Fragments":["think"]},{"Key":"of parens","Fragments":["instead"]},{"Key":"parens instead","Fragments":["of"]},{"Key":"of square","Fragments":["brackets."]},{"Key":" sweet!","Fragments":["I"]},{"Key":"sweet! I","Fragments":["thought"]},{"Key":"tried that,","Fragments":["but"]},{"Key":"tiny imperfection","Fragments":["is"]},{"Key":"imperfection is","Fragments":["that"]},{"Key":"first two","Fragments":["predicates","forms"]},{"Key":"two predicates","Fragments":["are"]},{"Key":"are domain-related,","Fragments":["while"]},{"Key":"domain-related, while","Fragments":["the"]},{"Key":"third one","Fragments":["is"]},{"Key":"about implementation","Fragments":["-"]},{"Key":"implementation -","Fragments":["one"]},{"Key":"`letfn` does","Fragments":["makes"]},{"Key":"does makes","Fragments":["more"]},{"Key":"defining functions.","Fragments":["For"]},{"Key":"some reason,","Fragments":["I"]},{"Key":"reason, I","Fragments":["don't"]},{"Key":" Whenever","Fragments":["I"]},{"Key":"Whenever I","Fragments":["have"]},{"Key":"complex behaviour,","Fragments":["I"]},{"Key":"behaviour, I","Fragments":["move"]},{"Key":"I move","Fragments":["parts"]},{"Key":"move parts","Fragments":["of"]},{"Key":"`let` (or","Fragments":["`letfn`,"]},{"Key":"(or `letfn`,","Fragments":["whatever"]},{"Key":"`letfn`, whatever","Fragments":["is"]},{"Key":"whatever is","Fragments":["more"]},{"Key":"more appropriate).","Fragments":["Then"]},{"Key":"appropriate). Then","Fragments":["I"]},{"Key":"Then I","Fragments":["can","tried","ran","switched"]},{"Key":"can break","Fragments":["it"]},{"Key":"down into","Fragments":["smaller","a","Java"]},{"Key":"into smaller","Fragments":["subfunctions.","meaningful","functions."]},{"Key":"smaller subfunctions.","Fragments":["Although"]},{"Key":"subfunctions. Although","Fragments":["this"]},{"Key":"can add","Fragments":["a"]},{"Key":"of noise","Fragments":["and"]},{"Key":"noise and","Fragments":["lines,"]},{"Key":"and lines,","Fragments":["what"]},{"Key":"lines, what","Fragments":["it"]},{"Key":"gives you","Fragments":["is","a","the"]},{"Key":"you is","Fragments":["the"]},{"Key":"Also, `frequencies`","Fragments":["can"]},{"Key":"`frequencies` can","Fragments":["be"]},{"Key":"good alternative","Fragments":["to"]},{"Key":"the reduce.","Fragments":["It's"]},{"Key":"reduce. It's","Fragments":["a"]},{"Key":"very interesting","Fragments":["function.","read,"]},{"Key":"Quite like","Fragments":["the"]},{"Key":"of `frequencies`,","Fragments":["as"]},{"Key":"`frequencies`, as","Fragments":["it's"]},{"Key":"the perfect","Fragments":["method","reducer","level"]},{"Key":"perfect method","Fragments":["for"]},{"Key":"these sort","Fragments":["of"]},{"Key":"Alternatively, I","Fragments":["suggest"]},{"Key":"suggest taking","Fragments":["a"]},{"Key":"as another","Fragments":["way"]},{"Key":"another way","Fragments":["of","to"]},{"Key":"of words","Fragments":["from","with"]},{"Key":"this won't","Fragments":["pass","trample","pass","work,"]},{"Key":"won't pass","Fragments":["the","the"]},{"Key":"the test,","Fragments":["to","that"]},{"Key":"test, to","Fragments":["test"]},{"Key":"matches you","Fragments":["need"]},{"Key":"need either","Fragments":["a"]},{"Key":"regex or","Fragments":["a"]},{"Key":"have addressed","Fragments":["both"]},{"Key":"addressed both","Fragments":["nitpicks"]},{"Key":"both nitpicks","Fragments":["from"]},{"Key":"nitpicks from","Fragments":["the"]},{"Key":"previous iteration,","Fragments":["namely","too."]},{"Key":"iteration, namely","Fragments":["extracting"]},{"Key":"namely extracting","Fragments":["the"]},{"Key":"check more","Fragments":["idiomatic."]},{"Key":"went ahead","Fragments":["and"]},{"Key":"also extracted","Fragments":["the","the"]},{"Key":"extracted the","Fragments":["question","condition","code"]},{"Key":"check into","Fragments":["its"]},{"Key":"function, makes","Fragments":["for"]},{"Key":"symmetry in","Fragments":["the"]},{"Key":"the cond.","Fragments":["I"]},{"Key":"cond. I","Fragments":["thought"]},{"Key":"the answers","Fragments":["in","and"]},{"Key":"answers in","Fragments":["a"]},{"Key":"appropriate response,","Fragments":["but"]},{"Key":"that seems","Fragments":["excessive","excessive."]},{"Key":"seems excessive","Fragments":["at"]},{"Key":"excessive at","Fragments":["this"]},{"Key":"one, feel","Fragments":["free"]},{"Key":"to prove","Fragments":["me"]},{"Key":"prove me","Fragments":["wrong"]},{"Key":"me wrong","Fragments":[":)"]},{"Key":"Right you","Fragments":["are!","are"]},{"Key":"double negation","Fragments":["and"]},{"Key":"negation and","Fragments":["just"]},{"Key":"valid characters.","Fragments":["New"]},{"Key":"characters. New","Fragments":["iteration"]},{"Key":"New iteration","Fragments":["coming"]},{"Key":"iteration coming","Fragments":["up."]},{"Key":"This iteration","Fragments":["fixes"]},{"Key":"fixes the","Fragments":["problem"]},{"Key":"condition regex.","Fragments":["When"]},{"Key":"regex. When","Fragments":["I"]},{"Key":"negation, I","Fragments":["introduced"]},{"Key":"I introduced","Fragments":["a"]},{"Key":"that re-find","Fragments":["was"]},{"Key":"re-find was","Fragments":["the"]},{"Key":"wrong function","Fragments":["to"]},{"Key":"use given","Fragments":["the"]},{"Key":"condition to","Fragments":["a","validate","`shouting?`"]},{"Key":"separate helper","Fragments":["function,"]},{"Key":"helper function,","Fragments":["just","divisible-by?,"]},{"Key":"function, just","Fragments":["seemed"]},{"Key":"it! One","Fragments":["small"]},{"Key":"could import","Fragments":["some"]},{"Key":"import some","Fragments":["stuff"]},{"Key":"some stuff","Fragments":["on"]},{"Key":"stuff on","Fragments":["the"]},{"Key":"`clojure.string` repetition.","Fragments":["Something"]},{"Key":"repetition. Something","Fragments":["like:"]},{"Key":"`(ns phrase","Fragments":["(:use"]},{"Key":"phrase (:use","Fragments":["[clojure.string"]},{"Key":":only [lower-case","Fragments":["split]]))`"]},{"Key":"of 'thinking","Fragments":["out"]},{"Key":"'thinking out","Fragments":["loud'"]},{"Key":"out loud'","Fragments":["note:"]},{"Key":"loud' note:","Fragments":["I"]},{"Key":"note: I","Fragments":["am"]},{"Key":"sure when","Fragments":["it's"]},{"Key":"it's preferred","Fragments":["to","to","to"]},{"Key":"the threaded","Fragments":["function"]},{"Key":"threaded function","Fragments":["(`-\u003e`)"]},{"Key":"function (`-\u003e`)","Fragments":["and"]},{"Key":"(`-\u003e`) and","Fragments":["when"]},{"Key":"like you've","Fragments":["done"]},{"Key":"the commented","Fragments":["out"]},{"Key":"commented out","Fragments":["section."]},{"Key":"out section.","Fragments":["I"]},{"Key":"section. I","Fragments":["like"]},{"Key":"of `let`,","Fragments":["for"]},{"Key":"`let`, for","Fragments":["clarifying"]},{"Key":"for clarifying","Fragments":["subfunctions"]},{"Key":"clarifying subfunctions","Fragments":["with"]},{"Key":"subfunctions with","Fragments":["names."]},{"Key":"with names.","Fragments":["But,"]},{"Key":"names. But,","Fragments":["sometimes,"]},{"Key":"But, sometimes,","Fragments":["threading"]},{"Key":"sometimes, threading","Fragments":["makes"]},{"Key":"threading makes","Fragments":["things"]},{"Key":"things quite","Fragments":["more","a","a"]},{"Key":"quite more","Fragments":["easy"]},{"Key":"follow, although","Fragments":["a"]},{"Key":"although a","Fragments":["bit"]},{"Key":"bit procedural.","Fragments":["What"]},{"Key":"procedural. What","Fragments":["do"]},{"Key":"couple final","Fragments":["nits:"]},{"Key":"the parameters","Fragments":["vector"]},{"Key":"parameters vector","Fragments":["on"]},{"Key":"vector on","Fragments":["a"]},{"Key":"separate line,","Fragments":["where"]},{"Key":"line, where","Fragments":["does"]},{"Key":"where does","Fragments":["this"]},{"Key":"style come","Fragments":["from?"]},{"Key":"come from?","Fragments":["I've"]},{"Key":"from? I've","Fragments":["only"]},{"Key":"only recently","Fragments":["started"]},{"Key":"recently started","Fragments":["learning"]},{"Key":"all lisps","Fragments":["I"]},{"Key":"lisps I","Fragments":["encountered"]},{"Key":"encountered before","Fragments":["it"]},{"Key":"before it","Fragments":["was","would"]},{"Key":"a custom","Fragments":["to","comparison.","reduce"]},{"Key":"custom to","Fragments":["place"]},{"Key":"arguments list","Fragments":["on","in"]},{"Key":"name which","Fragments":["makes"]},{"Key":"it appear","Fragments":["almost"]},{"Key":"appear almost","Fragments":["like"]},{"Key":"like they","Fragments":["would","should"]},{"Key":"would appear","Fragments":["in"]},{"Key":"replace `\\T`","Fragments":["to"]},{"Key":"to `\\U`.","Fragments":["`#\"T\"`"]},{"Key":"`\\U`. `#\"T\"`","Fragments":["just"]},{"Key":"`#\"T\"` just","Fragments":["distracts"]},{"Key":"just distracts","Fragments":["the"]},{"Key":"distracts the","Fragments":["reader"]},{"Key":"reader from","Fragments":["simplicity"]},{"Key":"from simplicity","Fragments":["of"]},{"Key":"quite place","Fragments":["the"]},{"Key":"reason for","Fragments":["it,","putting","the","not"]},{"Key":"of documenting","Fragments":["functions,"]},{"Key":"documenting functions,","Fragments":["and"]},{"Key":"and destructuring","Fragments":["arguments"]},{"Key":"destructuring arguments","Fragments":["(in"]},{"Key":"arguments (in","Fragments":["which"]},{"Key":"(in which","Fragments":["case"]},{"Key":"case I've","Fragments":["heard"]},{"Key":"I've heard","Fragments":["you"]},{"Key":"heard you","Fragments":["should"]},{"Key":"args vector","Fragments":["in"]},{"Key":"new line).","Fragments":["You"]},{"Key":"line). You","Fragments":["can"]},{"Key":"see in","Fragments":["https://github.com/bbatsov/clojure-style-guide#source-code-layout--organization"]},{"Key":"in https://github.com/bbatsov/clojure-style-guide#source-code-layout--organization","Fragments":["that"]},{"Key":"https://github.com/bbatsov/clojure-style-guide#source-code-layout--organization that","Fragments":["they"]},{"Key":"they deem","Fragments":["it"]},{"Key":"deem it","Fragments":["optional."]},{"Key":"args should","Fragments":["be"]},{"Key":"2. Oops,","Fragments":["I"]},{"Key":"similar nitpick","Fragments":["on"]},{"Key":"another exercise!","Fragments":["Guess"]},{"Key":"exercise! Guess","Fragments":["it"]},{"Key":"Guess it","Fragments":["takes"]},{"Key":"to attention","Fragments":["for"]},{"Key":"attention for","Fragments":["the"]},{"Key":"the char","Fragments":["literal","to","(which","is"]},{"Key":"char literal","Fragments":["syntax"]},{"Key":"literal syntax","Fragments":["to","throwing","will"]},{"Key":"syntax to","Fragments":["sink"]},{"Key":"to sink","Fragments":["in."]},{"Key":"The 'frequencies'","Fragments":["function"]},{"Key":"'frequencies' function","Fragments":["is"]},{"Key":"your friend!","Fragments":[":)"]},{"Key":"One that","Fragments":["note,"]},{"Key":"that note,","Fragments":["do"]},{"Key":"note, do","Fragments":["you"]},{"Key":"the `add-frequency`","Fragments":["function?"]},{"Key":"`add-frequency` function?","Fragments":["On"]},{"Key":"function? On","Fragments":["the"]},{"Key":"the `clean-phrase`","Fragments":["function,"]},{"Key":"`clean-phrase` function,","Fragments":["I"]},{"Key":"think things","Fragments":["can"]},{"Key":"simplified further.","Fragments":["What"]},{"Key":"further. What","Fragments":["other"]},{"Key":"What other","Fragments":["regexp"]},{"Key":"other regexp","Fragments":["like"]},{"Key":"regexp like","Fragments":["functions"]},{"Key":"like functions","Fragments":["does","-"]},{"Key":"functions does","Fragments":["clojure"]},{"Key":"does clojure","Fragments":["provide?"]},{"Key":"That's much","Fragments":["better,"]},{"Key":"much better,","Fragments":["thanks","starting"]},{"Key":"better, thanks","Fragments":["Ball"]},{"Key":"thanks Ball","Fragments":[":)"]},{"Key":"did forget","Fragments":["to"]},{"Key":"forget to","Fragments":["remove"]},{"Key":"remove `add-frequency`","Fragments":["when"]},{"Key":"`add-frequency` when","Fragments":["I"]},{"Key":"I changed","Fragments":["the","the","the","all","lots","the"]},{"Key":"also managed","Fragments":["to"]},{"Key":"shorten `clean-phrase`","Fragments":["like"]},{"Key":"`clean-phrase` like","Fragments":["you"]},{"Key":"you suggested,","Fragments":["see"]},{"Key":"suggested, see","Fragments":["next"]},{"Key":"see next","Fragments":["iteration."]},{"Key":"the non-word","Fragments":["characters"]},{"Key":"non-word characters","Fragments":["with"]},{"Key":"with spaces","Fragments":["and"]},{"Key":"on that,","Fragments":["I","you"]},{"Key":"to invert","Fragments":["the"]},{"Key":"invert the","Fragments":["way"]},{"Key":"going about","Fragments":["it,"]},{"Key":"only retrieve","Fragments":["the"]},{"Key":"also realized","Fragments":["that"]},{"Key":"was mapping","Fragments":["lower-case"]},{"Key":"mapping lower-case","Fragments":["over"]},{"Key":"lower-case over","Fragments":["the"]},{"Key":"string unnecessarily,","Fragments":["since"]},{"Key":"unnecessarily, since","Fragments":["it"]},{"Key":"lower-case the","Fragments":["entire","input,"]},{"Key":"for word-count","Fragments":["I"]},{"Key":"word-count I","Fragments":["decided"]},{"Key":"the thread-first","Fragments":["macro"]},{"Key":"thread-first macro","Fragments":["just"]},{"Key":"macro just","Fragments":["because"]},{"Key":"it looks.","Fragments":["It"]},{"Key":"looks. It","Fragments":["\"breaks\""]},{"Key":"It \"breaks\"","Fragments":["the"]},{"Key":"\"breaks\" the","Fragments":["simmetry"]},{"Key":"the simmetry","Fragments":["with"]},{"Key":"simmetry with","Fragments":["`clean-phrase`,"]},{"Key":"with `clean-phrase`,","Fragments":["in"]},{"Key":"`clean-phrase`, in","Fragments":["that"]},{"Key":"not both","Fragments":["a"]},{"Key":"both a","Fragments":["two-line"]},{"Key":"a two-line","Fragments":["function"]},{"Key":"two-line function","Fragments":["but"]},{"Key":"is private,","Fragments":["the"]},{"Key":"private, the","Fragments":["visual"]},{"Key":"the visual","Fragments":["distinction","basic"]},{"Key":"visual distinction","Fragments":["might"]},{"Key":"distinction might","Fragments":["actually"]},{"Key":"might actually","Fragments":["come"]},{"Key":"actually come","Fragments":["in"]},{"Key":"come in","Fragments":["handy."]},{"Key":"this asked","Fragments":["for"]},{"Key":"asked for","Fragments":["an"]},{"Key":"an API","Fragments":["with"]},{"Key":"API with","Fragments":["over"]},{"Key":"with over","Fragments":["40"]},{"Key":"over 40","Fragments":["nearly-identical"]},{"Key":"40 nearly-identical","Fragments":["functions,"]},{"Key":"nearly-identical functions,","Fragments":["I"]},{"Key":"functions, I","Fragments":["took"]},{"Key":"took it","Fragments":["as"]},{"Key":"to cut","Fragments":["my","down"]},{"Key":"teeth on","Fragments":["Clojure"]},{"Key":"on Clojure","Fragments":["macros","string"]},{"Key":"Clojure macros","Fragments":["and"]},{"Key":"and auto-generate","Fragments":["the"]},{"Key":"auto-generate the","Fragments":["function"]},{"Key":"definitions rather","Fragments":["than"]},{"Key":"than copy-and-pasting","Fragments":["them"]},{"Key":"copy-and-pasting them","Fragments":["all"]},{"Key":"by hand.","Fragments":["Feedback"]},{"Key":"hand. Feedback","Fragments":["on"]},{"Key":"Feedback on","Fragments":["my"]},{"Key":"my use","Fragments":["of"]},{"Key":"of defmacro","Fragments":["here"]},{"Key":"defmacro here","Fragments":["would"]},{"Key":"here would","Fragments":["be"]},{"Key":"be highly","Fragments":["appreciated."]},{"Key":" Relying","Fragments":["a","just"]},{"Key":"Relying a","Fragments":["little"]},{"Key":"little less","Fragments":["on"]},{"Key":"less on","Fragments":["regular"]},{"Key":"expressions and","Fragments":["more"]},{"Key":"functions. This","Fragments":["version","would","will"]},{"Key":"This version","Fragments":["also","was","was","cleans","takes","is","looks"]},{"Key":"version also","Fragments":["makes"]},{"Key":"also makes","Fragments":["`question?`","it"]},{"Key":"makes `question?`","Fragments":["more"]},{"Key":"`question?` more","Fragments":["honest,"]},{"Key":"more honest,","Fragments":["as"]},{"Key":"honest, as","Fragments":["before"]},{"Key":"as before","Fragments":["it"]},{"Key":"would first","Fragments":["check"]},{"Key":"first check","Fragments":["if"]},{"Key":"we were","Fragments":["yelling"]},{"Key":"were yelling","Fragments":["or"]},{"Key":"yelling or","Fragments":["not."]},{"Key":"or not.","Fragments":["Precedence","It"]},{"Key":"not. Precedence","Fragments":["is"]},{"Key":"Precedence is","Fragments":["now"]},{"Key":"now determined","Fragments":["by"]},{"Key":"determined by","Fragments":["the","sorting"]},{"Key":"you treat","Fragments":["functions"]},{"Key":"treat functions","Fragments":["as"]},{"Key":"as first-class,","Fragments":["you"]},{"Key":"first-class, you","Fragments":["may"]},{"Key":"may achieve","Fragments":["even"]},{"Key":"achieve even","Fragments":["more"]},{"Key":"As when","Fragments":["composing"]},{"Key":"when composing","Fragments":["predicates:"]},{"Key":" 9:","Fragments":["(def"]},{"Key":"9: (def","Fragments":["shouting?"]},{"Key":"(def shouting?","Fragments":["(every-pred"]},{"Key":"shouting? (every-pred","Fragments":["upcase?"]},{"Key":"(every-pred upcase?","Fragments":["includes-letters?))"]},{"Key":"Or when","Fragments":["simply"]},{"Key":"when simply","Fragments":["aliasing:"]},{"Key":" 15:","Fragments":["(def"]},{"Key":"15: (def","Fragments":["silence?"]},{"Key":" Implementation","Fragments":["of"]},{"Key":"Implementation of","Fragments":["includes-letters?"]},{"Key":"of includes-letters?","Fragments":["looks"]},{"Key":"includes-letters? looks","Fragments":["wrong."]},{"Key":"looks wrong.","Fragments":["Should"]},{"Key":"wrong. Should","Fragments":["be"]},{"Key":"Should be","Fragments":["something"]},{"Key":"(some #(Character/isLetter","Fragments":["%)"]},{"Key":"to expose","Fragments":["only"]},{"Key":"expose only","Fragments":["public"]},{"Key":"public functions","Fragments":["in","(mostly","implemented","in"]},{"Key":"a namespace.","Fragments":["In","Probably"]},{"Key":"namespace. In","Fragments":["this"]},{"Key":"could e.g.","Fragments":["define"]},{"Key":"e.g. define","Fragments":["everything"]},{"Key":"define everything","Fragments":["except"]},{"Key":"except response-for","Fragments":["with"]},{"Key":"response-for with","Fragments":["defn-"]},{"Key":"with defn-","Fragments":["form"]},{"Key":"defn- form","Fragments":["instead"]},{"Key":"there might","Fragments":["be","be"]},{"Key":"some dogmatic","Fragments":["mistakes."]},{"Key":"dogmatic mistakes.","Fragments":["Point"]},{"Key":"mistakes. Point","Fragments":["them"]},{"Key":"Point them","Fragments":["out"]},{"Key":" @ashleigh","Fragments":["Thanks!"]},{"Key":"@ashleigh Thanks!","Fragments":["I"]},{"Key":"I improved","Fragments":["according"]},{"Key":"improved according","Fragments":["to"]},{"Key":"simplify `cond`,","Fragments":["so"]},{"Key":"`cond`, so","Fragments":["you"]},{"Key":"pass `text`","Fragments":["explicitly"]},{"Key":"`text` explicitly","Fragments":["three"]},{"Key":"explicitly three","Fragments":["times?"]},{"Key":" @maud","Fragments":["That's"]},{"Key":"@maud That's","Fragments":["a"]},{"Key":"good question.","Fragments":["The"]},{"Key":"question. The","Fragments":["best","`is-asking-question?`"]},{"Key":"found is","Fragments":["to","that"]},{"Key":"to hack","Fragments":["around"]},{"Key":"hack around","Fragments":["condp:"]},{"Key":" (condp","Fragments":["apply"]},{"Key":"(condp apply","Fragments":["[text]"]},{"Key":" shouting?","Fragments":["\"Woah,","..."]},{"Key":"shouting? \"Woah,","Fragments":["chill"]},{"Key":"silence? \"Fine.","Fragments":["Be","Be"]},{"Key":" question?","Fragments":["\"Sure.\""]},{"Key":"One should","Fragments":["always"]},{"Key":"always weigh","Fragments":["conciseness"]},{"Key":"weigh conciseness","Fragments":["against"]},{"Key":"conciseness against","Fragments":["readability"]},{"Key":"against readability","Fragments":["though."]},{"Key":"the lambda","Fragments":["with","and"]},{"Key":"lambda with","Fragments":["named"]},{"Key":"with named","Fragments":["parameters"]},{"Key":"named parameters","Fragments":["reads"]},{"Key":"parameters reads","Fragments":["better"]},{"Key":"better here.","Fragments":["But"]},{"Key":"here. But","Fragments":["that"]},{"Key":"just due","Fragments":["to"]},{"Key":"my unfamiliarity","Fragments":["with"]},{"Key":"unfamiliarity with","Fragments":["clojure"]},{"Key":"I could've","Fragments":["swore"]},{"Key":"could've swore","Fragments":["there"]},{"Key":"swore there","Fragments":["was"]},{"Key":"`:use` was","Fragments":["new"]},{"Key":"was new","Fragments":["for"]},{"Key":"a used","Fragments":["it"]},{"Key":"PS: Sorry","Fragments":["about","about"]},{"Key":"some possible","Fragments":["english"]},{"Key":"possible english","Fragments":["mistakes."]},{"Key":" @alexandre","Fragments":["That"]},{"Key":"@alexandre That","Fragments":["doesn't"]},{"Key":"That doesn't","Fragments":["look"]},{"Key":"look so","Fragments":["bad"]},{"Key":"so bad","Fragments":["to"]},{"Key":"me (though,","Fragments":["of"]},{"Key":"(though, of","Fragments":["course,"]},{"Key":"course, I","Fragments":["needed"]},{"Key":"on `condp`","Fragments":["and"]},{"Key":"`condp` and","Fragments":["`apply`"]},{"Key":"and `apply`","Fragments":["to"]},{"Key":"`apply` to","Fragments":["understand"]},{"Key":"it ;)","Fragments":["),"]},{"Key":";) ),","Fragments":["could"]},{"Key":"), could","Fragments":["you"]},{"Key":"go into","Fragments":["why"]},{"Key":"into why","Fragments":["it"]},{"Key":"think `question?`","Fragments":["should"]},{"Key":"`question?` should","Fragments":["be"]},{"Key":"public definition.","Fragments":["I","Fixed."]},{"Key":"definition. I","Fragments":["like"]},{"Key":"name `asking-politely?`","Fragments":["for"]},{"Key":"`asking-politely?` for","Fragments":["the"]},{"Key":"the version","Fragments":["that","with"]},{"Key":"checks that","Fragments":["it's"]},{"Key":"being shouted,","Fragments":["but"]},{"Key":"shouted, but","Fragments":["it's"]},{"Key":"fine like","Fragments":["this"]},{"Key":"had accidentally","Fragments":["left"]},{"Key":"accidentally left","Fragments":["`question?`"]},{"Key":"left `question?`","Fragments":["as"]},{"Key":" @darron","Fragments":["Wow"]},{"Key":"@darron Wow","Fragments":["your"]},{"Key":"Wow your","Fragments":["codes"]},{"Key":"your codes","Fragments":["gave"]},{"Key":"codes gave","Fragments":["me"]},{"Key":"some insights","Fragments":["like"]},{"Key":"insights like","Fragments":["using"]},{"Key":"like using","Fragments":["`partition-by`","`declare`"]},{"Key":"using `partition-by`","Fragments":["and"]},{"Key":"`partition-by` and","Fragments":["`assoc`"]},{"Key":" @rosella","Fragments":["Simply"]},{"Key":"@rosella Simply","Fragments":["because"]},{"Key":"Simply because","Fragments":["I"]},{"Key":"I sacrificed","Fragments":["some"]},{"Key":"sacrificed some","Fragments":["clarity"]},{"Key":"few saved","Fragments":["keystrokes."]},{"Key":"saved keystrokes.","Fragments":["One"]},{"Key":"keystrokes. One","Fragments":["has"]},{"Key":"One has","Fragments":["to"]},{"Key":"wrap one's","Fragments":["head"]},{"Key":"one's head","Fragments":["around"]},{"Key":"way functions","Fragments":["are"]},{"Key":"are called","Fragments":["and","separately","separately"]},{"Key":"and what","Fragments":["arguments","I","namespace"]},{"Key":"what arguments","Fragments":["they"]},{"Key":"arguments they","Fragments":["are"]},{"Key":"are passed,","Fragments":["and"]},{"Key":"passed, and","Fragments":["it's"]},{"Key":"really easy","Fragments":["to"]},{"Key":"mistake like","Fragments":["not"]},{"Key":"like not","Fragments":["putting"]},{"Key":"not putting","Fragments":["[text]"]},{"Key":"putting [text]","Fragments":["inside"]},{"Key":"[text] inside","Fragments":["a"]},{"Key":"vector, in","Fragments":["which"]},{"Key":"case you'd","Fragments":["get","treat"]},{"Key":"you'd get","Fragments":["a"]},{"Key":"really mysterious","Fragments":["runtime"]},{"Key":"mysterious runtime","Fragments":["error."]},{"Key":"always vote","Fragments":["for"]},{"Key":"code that's","Fragments":["expressive"]},{"Key":"that's expressive","Fragments":["AND"]},{"Key":"expressive AND","Fragments":["easy"]},{"Key":"AND easy","Fragments":["to"]},{"Key":"understand rather","Fragments":["than"]},{"Key":" @verlie","Fragments":["Those"]},{"Key":"@verlie Those","Fragments":["are"]},{"Key":"always good","Fragments":["reasons."]},{"Key":"good reasons.","Fragments":["Probably"]},{"Key":"reasons. Probably","Fragments":["because"]},{"Key":"Clojure still","Fragments":["feels"]},{"Key":"bit mysterious","Fragments":["to"]},{"Key":"general, I'm","Fragments":["having"]},{"Key":"having trouble","Fragments":["making","understanding"]},{"Key":"that judgment","Fragments":[":-)"]},{"Key":"judgment :-)","Fragments":["Thanks"]},{"Key":":-) Thanks","Fragments":["for"]},{"Key":"the replace","Fragments":["function..","function"]},{"Key":"also, this","Fragments":["is"]},{"Key":"personal choice,","Fragments":["but"]},{"Key":"of \"cstring\"","Fragments":["as"]},{"Key":"\"cstring\" as","Fragments":["your"]},{"Key":"your alias..","Fragments":["I"]},{"Key":"alias.. I","Fragments":["would"]},{"Key":"just gone","Fragments":["\"s\""]},{"Key":"gone \"s\"","Fragments":["or"]},{"Key":"\"s\" or","Fragments":["remove"]},{"Key":"remove it","Fragments":["completely"]},{"Key":"it completely","Fragments":["by"]},{"Key":"completely by","Fragments":["using"]},{"Key":"Also feels","Fragments":["like"]},{"Key":"the str/replace","Fragments":["is"]},{"Key":"str/replace is","Fragments":["redundant"]},{"Key":"is redundant","Fragments":["with","with","-","-"]},{"Key":"small change","Fragments":["to","to","to"]},{"Key":"the tokenize","Fragments":["function"]},{"Key":"call. This","Fragments":["version"]},{"Key":"version was","Fragments":["fairly","trying"]},{"Key":"was fairly","Fragments":["verbose,"]},{"Key":"fairly verbose,","Fragments":["as"]},{"Key":"verbose, as","Fragments":["I"]},{"Key":"didn't explore","Fragments":["a"]},{"Key":"explore a","Fragments":["lot"]},{"Key":"the built","Fragments":["in","in","in"]},{"Key":"iteration slims","Fragments":["it"]},{"Key":"slims it","Fragments":["down"]},{"Key":"Your first","Fragments":["and"]},{"Key":"and latest","Fragments":["iteration's"]},{"Key":"latest iteration's","Fragments":["are"]},{"Key":"iteration's are","Fragments":["worlds"]},{"Key":"are worlds","Fragments":["apart."]},{"Key":"worlds apart.","Fragments":["I"]},{"Key":"apart. I","Fragments":["flipped"]},{"Key":"I flipped","Fragments":["through"]},{"Key":"flipped through","Fragments":["them"]},{"Key":"through them","Fragments":["a"]},{"Key":"few times","Fragments":["just"]},{"Key":"times just","Fragments":["taking"]},{"Key":"just taking","Fragments":["in"]},{"Key":"taking in","Fragments":["the"]},{"Key":"the difference.","Fragments":["Awesome"]},{"Key":"difference. Awesome","Fragments":["stuff!"]},{"Key":"point regarding","Fragments":["your"]},{"Key":"regarding your","Fragments":["naming."]},{"Key":"your naming.","Fragments":["`yelling?`"]},{"Key":"naming. `yelling?`","Fragments":["and"]},{"Key":"`question?` (with","Fragments":["the"]},{"Key":"question mark)","Fragments":["implies"]},{"Key":"mark) implies","Fragments":["that"]},{"Key":"implies that","Fragments":["the","a","multiple"]},{"Key":"are predicates","Fragments":["(based","and"]},{"Key":"predicates (based","Fragments":["on"]},{"Key":"(based on","Fragments":["the","the","the"]},{"Key":"the [coding","Fragments":["standard](http://dev.clojure.org/display/community/Library+Coding+Standards))"]},{"Key":"[coding standard](http://dev.clojure.org/display/community/Library+Coding+Standards))","Fragments":["."]},{"Key":"standard](http://dev.clojure.org/display/community/Library+Coding+Standards)) .","Fragments":["Predicates"]},{"Key":". Predicates","Fragments":["return"]},{"Key":"Predicates return","Fragments":["booleans"]},{"Key":"return booleans","Fragments":["but","so","with","to","with","generally"]},{"Key":"booleans but","Fragments":["`yelling?`"]},{"Key":"but `yelling?`","Fragments":["and"]},{"Key":"`question?` don't.","Fragments":["If"]},{"Key":"don't. If","Fragments":["the"]},{"Key":"not yelling","Fragments":["then"]},{"Key":"yelling then","Fragments":["you","you"]},{"Key":"get `false`","Fragments":["but"]},{"Key":"`false` but","Fragments":["if"]},{"Key":"are yelling","Fragments":["then"]},{"Key":"will instead","Fragments":["get"]},{"Key":"instead get","Fragments":["back"]},{"Key":"first uppercase","Fragments":["letter"]},{"Key":"letter that","Fragments":["the"]},{"Key":"regex matches.","Fragments":["The"]},{"Key":"matches. The","Fragments":["same"]},{"Key":"same goes","Fragments":["for"]},{"Key":"goes for","Fragments":["`question?`"]},{"Key":"`question?` I","Fragments":["would"]},{"Key":"and thus","Fragments":["conform"]},{"Key":"thus conform","Fragments":["to"]},{"Key":" btw,","Fragments":["in"]},{"Key":"btw, in","Fragments":["`question?`"]},{"Key":"`question?` you","Fragments":["still"]},{"Key":"`and` although","Fragments":["there"]},{"Key":"although there","Fragments":["is"]},{"Key":"is nothing","Fragments":["to","but"]},{"Key":"to _and_","Fragments":["it"]},{"Key":"_and_ it","Fragments":["with"]},{"Key":"with anymore","Fragments":["so"]},{"Key":"anymore so","Fragments":["you"]},{"Key":" normalise","Fragments":["function"]},{"Key":"normalise function","Fragments":["could"]},{"Key":"be removed","Fragments":["with","with","somehow"]},{"Key":"removed with","Fragments":["a","a"]},{"Key":"the to-seq.","Fragments":["Also"]},{"Key":"to-seq. Also","Fragments":["the"]},{"Key":"the to-seq","Fragments":["feels"]},{"Key":"to-seq feels","Fragments":["simple"]},{"Key":"feels simple","Fragments":["enough"]},{"Key":"enough just","Fragments":["to"]},{"Key":"use `(boolean","Fragments":["XYZ)`"]},{"Key":"`(boolean XYZ)`","Fragments":["instead"]},{"Key":"XYZ)` instead","Fragments":["of"]},{"Key":"of `(if","Fragments":["XYZ"]},{"Key":"`(if XYZ","Fragments":["true"]},{"Key":"XYZ true","Fragments":["false)`."]},{"Key":"I would,","Fragments":["however,"]},{"Key":"would, however,","Fragments":["prefer"]},{"Key":"however, prefer","Fragments":["the"]},{"Key":"of `(zero?","Fragments":["foo)`"]},{"Key":"`(zero? foo)`","Fragments":["instead"]},{"Key":"foo)` instead","Fragments":["of"]},{"Key":"Overall, the","Fragments":["solution"]},{"Key":"`letfn` do","Fragments":["define"]},{"Key":"local function","Fragments":["with"]},{"Key":"the year","Fragments":["bound","value.","and"]},{"Key":"year bound","Fragments":["to"]},{"Key":"bound to","Fragments":["the","the","functions.","it."]},{"Key":"(defn leap-year?","Fragments":["[year]"]},{"Key":"(letfn [(divisible?","Fragments":["[divisor]"]},{"Key":"[(divisible? [divisor]","Fragments":["(zero?"]},{"Key":"[divisor] (zero?","Fragments":["(rem"]},{"Key":"(zero? (rem","Fragments":["year"]},{"Key":"(rem year","Fragments":["divisor)))]"]},{"Key":"(or (divisible?","Fragments":["400)"]},{"Key":"(and (divisible?","Fragments":["4)"]},{"Key":"(not (divisible?","Fragments":["100))))))"]},{"Key":" Macros","Fragments":["with","are"]},{"Key":"Macros with","Fragments":["complete"]},{"Key":"with complete","Fragments":["expansion."]},{"Key":"complete expansion.","Fragments":["Realized"]},{"Key":"expansion. Realized","Fragments":["problems"]},{"Key":"Realized problems","Fragments":["were"]},{"Key":"problems were","Fragments":["related"]},{"Key":"were related","Fragments":["to"]},{"Key":"to mixing","Fragments":["compile"]},{"Key":"mixing compile","Fragments":["time"]},{"Key":"and runtime","Fragments":["values."]},{"Key":" def","Fragments":["and"]},{"Key":"defn always","Fragments":["affect"]},{"Key":"always affect","Fragments":["global"]},{"Key":"affect global","Fragments":["scope"]},{"Key":"global scope","Fragments":["--"]},{"Key":"scope --","Fragments":["\"response\""]},{"Key":"-- \"response\"","Fragments":["and"]},{"Key":"\"response\" and","Fragments":["\"matches\""]},{"Key":"and \"matches\"","Fragments":["and"]},{"Key":"\"matches\" and","Fragments":["\"patterns\""]},{"Key":"and \"patterns\"","Fragments":["from"]},{"Key":"\"patterns\" from","Fragments":["this"]},{"Key":"example will","Fragments":["all"]},{"Key":"will all","Fragments":["be"]},{"Key":"all be","Fragments":["visible"]},{"Key":"be visible","Fragments":["globally."]},{"Key":"visible globally.","Fragments":["You"]},{"Key":"globally. You","Fragments":["probably"]},{"Key":"use \"let\"","Fragments":["rather"]},{"Key":"\"let\" rather","Fragments":["than"]},{"Key":"than \"def\"","Fragments":["here","here"]},{"Key":"\"def\" here","Fragments":["to","could"]},{"Key":"define local","Fragments":["names","bindings."]},{"Key":"local names","Fragments":["that"]},{"Key":"aren't visible","Fragments":["to"]},{"Key":"visible to","Fragments":["outside"]},{"Key":"user=\u003e (defn","Fragments":["scope-test","scope-test"]},{"Key":"(defn scope-test","Fragments":["[]","[]"]},{"Key":" #_=\u003e","Fragments":["(def","(let"]},{"Key":"#_=\u003e (def","Fragments":["my-value"]},{"Key":"(def my-value","Fragments":["1))"]},{"Key":"#_=\u003e (let","Fragments":["[my-other-value"]},{"Key":"(let [my-other-value","Fragments":["1]))"]},{"Key":" CompilerException","Fragments":["java.lang.RuntimeException:"]},{"Key":"CompilerException java.lang.RuntimeException:","Fragments":["Unable"]},{"Key":"symbol: my-other-value","Fragments":["in"]},{"Key":"my-other-value in","Fragments":["this"]},{"Key":"string operation","Fragments":["you're"]},{"Key":"operation you're","Fragments":["doing","actually"]},{"Key":"doing could","Fragments":["be"]},{"Key":"replaced by","Fragments":["another","a"]},{"Key":"by another","Fragments":["\"mod\""]},{"Key":"another \"mod\"","Fragments":["to"]},{"Key":"\"mod\" to","Fragments":["make"]},{"Key":" Rather","Fragments":["than","brute-force","than","than"]},{"Key":"Rather than","Fragments":["code","individually","defining"]},{"Key":"than code","Fragments":["cleverness,"]},{"Key":"code cleverness,","Fragments":["I"]},{"Key":"cleverness, I","Fragments":["opted"]},{"Key":"I opted","Fragments":["for","to"]},{"Key":"relying solely","Fragments":["on"]},{"Key":"solely on","Fragments":["regular"]},{"Key":"expressions makes","Fragments":["it"]},{"Key":"harder for","Fragments":["readers"]},{"Key":"for readers","Fragments":["to"]},{"Key":"readers to","Fragments":["parse"]},{"Key":"parse the","Fragments":["intent","input"]},{"Key":"used ```(=","Fragments":["(last"]},{"Key":"(last convo)","Fragments":["\\?)```"]},{"Key":"convo) \\?)```","Fragments":["rather"]},{"Key":"\\?)``` rather","Fragments":["than"]},{"Key":"than ```(.endsWith","Fragments":["convo"]},{"Key":"```(.endsWith convo","Fragments":["\"?\")```"]},{"Key":"convo \"?\")```","Fragments":["for"]},{"Key":"\"?\")``` for","Fragments":["```is-question?```"]},{"Key":"for ```is-question?```","Fragments":["because"]},{"Key":"```is-question?``` because","Fragments":["it"]},{"Key":"very straightforward","Fragments":["and"]},{"Key":"straightforward and","Fragments":["easy","the"]},{"Key":"understand. I","Fragments":["would"]},{"Key":"would however","Fragments":["consider"]},{"Key":"however consider","Fragments":["using```(ns"]},{"Key":"consider using```(ns","Fragments":["bob"]},{"Key":"using```(ns bob","Fragments":["[:require"]},{"Key":"bob [:require","Fragments":["[clojure.string"]},{"Key":"[:require [clojure.string","Fragments":[":refer"]},{"Key":":refer (upper-case)]])```","Fragments":["since"]},{"Key":"(upper-case)]])``` since","Fragments":["it"]},{"Key":"only method","Fragments":["being"]},{"Key":"method being","Fragments":["used"]},{"Key":"in str","Fragments":["namespace.","that"]},{"Key":"thing changing","Fragments":["was"]},{"Key":"changing was","Fragments":["\"T\""]},{"Key":"was \"T\"","Fragments":["to"]},{"Key":"\"T\" to","Fragments":["\"U\""]},{"Key":"You got","Fragments":["rid"]},{"Key":"this later","Fragments":["on,","on"]},{"Key":"later on,","Fragments":["but"]},{"Key":"use `when`","Fragments":["instead","instead"]},{"Key":"`when` instead","Fragments":["of","of"]},{"Key":"`if` in","Fragments":["the","that","there,"]},{"Key":"case where","Fragments":["there","the","the","Clojure","you","the","I"]},{"Key":"no else","Fragments":["expression.","is","clause."]},{"Key":"looks clean.","Fragments":["The"]},{"Key":"clean. The","Fragments":["only"]},{"Key":"descriptive var","Fragments":["name"]},{"Key":"var name","Fragments":["for"]},{"Key":"to leap-year?","Fragments":["--"]},{"Key":"leap-year? --","Fragments":["it'd"]},{"Key":"-- it'd","Fragments":["make"]},{"Key":"it'd make","Fragments":["the"]},{"Key":"function slightly","Fragments":["clearer."]},{"Key":"can appreciate","Fragments":["how"]},{"Key":"appreciate how","Fragments":["concise"]},{"Key":"concise this","Fragments":["is,","is!"]},{"Key":"this is,","Fragments":["but"]},{"Key":"is, but","Fragments":["I"]},{"Key":"more maintainable","Fragments":["if"]},{"Key":"maintainable if","Fragments":["you"]},{"Key":"you refactored","Fragments":["your","to"]},{"Key":"refactored your","Fragments":["conditions"]},{"Key":"into standalone","Fragments":["functions,"]},{"Key":"standalone functions,","Fragments":["maybe"]},{"Key":"functions, maybe","Fragments":["`yelling?`","there"]},{"Key":"maybe `yelling?`","Fragments":["and"]},{"Key":"`question?`, for","Fragments":["example.","example,"]},{"Key":"does work,","Fragments":["did"]},{"Key":"work, did","Fragments":["you"]},{"Key":"the `s`","Fragments":["variables"]},{"Key":"`s` variables","Fragments":["in"]},{"Key":"variables in","Fragments":["the"]},{"Key":"`silence?` functions?","Fragments":["They're"]},{"Key":"functions? They're","Fragments":["currently"]},{"Key":"They're currently","Fragments":["unused."]},{"Key":"expressions? For","Fragments":["instance,"]},{"Key":"instance, `question?`","Fragments":["would"]},{"Key":"`question?` would","Fragments":["return"]},{"Key":"true for","Fragments":["strings","that","empty"]},{"Key":"strings such","Fragments":["as"]},{"Key":"as \"4?\".","Fragments":["Perhaps"]},{"Key":"\"4?\". Perhaps","Fragments":["you"]},{"Key":"use `clojure.string/blank?`","Fragments":["instead.","instead","instead","to"]},{"Key":":pre condition","Fragments":["in"]},{"Key":"that manner.","Fragments":["The"]},{"Key":"manner. The","Fragments":["absence"]},{"Key":"The absence","Fragments":["or"]},{"Key":"absence or","Fragments":["presence"]},{"Key":"or presence","Fragments":["of"]},{"Key":"of preconditions","Fragments":["should"]},{"Key":"preconditions should","Fragments":["not"]},{"Key":"not effect","Fragments":["the"]},{"Key":"effect the","Fragments":["semantics"]},{"Key":"a required","Fragments":["feature"]},{"Key":"required feature","Fragments":["(according"]},{"Key":"feature (according","Fragments":["to"]},{"Key":"the tests),","Fragments":["hence"]},{"Key":"tests), hence","Fragments":["it"]},{"Key":"hence it","Fragments":["would"]},{"Key":"would fail","Fragments":["if"]},{"Key":"fail if","Fragments":["preconditions","all","you"]},{"Key":"if preconditions","Fragments":["were"]},{"Key":"preconditions were","Fragments":["ever"]},{"Key":"were ever","Fragments":["disabled."]},{"Key":" Ug.","Fragments":["This"]},{"Key":"Ug. This","Fragments":["problem"]},{"Key":"This problem","Fragments":["was"]},{"Key":"problem was","Fragments":["a","the"]},{"Key":"poor fit","Fragments":["for"]},{"Key":"fit for","Fragments":["Clojure","this","this"]},{"Key":"Clojure ...","Fragments":["and"]},{"Key":"... and","Fragments":["the"]},{"Key":"tests did","Fragments":["not","not"]},{"Key":"the README.","Fragments":["Plus","The","It's","Well"]},{"Key":"README. Plus","Fragments":["the"]},{"Key":"Plus the","Fragments":["supplied"]},{"Key":"the supplied","Fragments":["tests","expressions","tests"]},{"Key":"supplied tests","Fragments":["did","but","don't"]},{"Key":"not test","Fragments":["what"]},{"Key":"test what","Fragments":["they"]},{"Key":"they claimed","Fragments":["to"]},{"Key":"claimed to","Fragments":["test"]},{"Key":"Good call","Fragments":["using","on"]},{"Key":"call using","Fragments":["the"]},{"Key":"a fn.","Fragments":["One"]},{"Key":"fn. One","Fragments":["nitpick:"]},{"Key":"One nitpick:","Fragments":["map"]},{"Key":"nitpick: map","Fragments":["calls"]},{"Key":"map calls","Fragments":["seq"]},{"Key":"calls seq","Fragments":["on"]},{"Key":"seq on","Fragments":["its","the"]},{"Key":"its argument,","Fragments":["so"]},{"Key":"the `(seq","Fragments":["dna)`"]},{"Key":"`(seq dna)`","Fragments":["call","is"]},{"Key":"a `:pre`","Fragments":["condition","annotation"]},{"Key":"input. You","Fragments":["could"]},{"Key":"use string","Fragments":["functions"]},{"Key":"for replacing","Fragments":["the"]},{"Key":"T with","Fragments":["a"]},{"Key":"a U","Fragments":["instead"]},{"Key":"U instead","Fragments":["of"]},{"Key":"reduce repetition","Fragments":["slightly"]},{"Key":"repetition slightly","Fragments":["--"]},{"Key":"slightly --","Fragments":["there"]},{"Key":"-- there","Fragments":["are","might"]},{"Key":"two (get","Fragments":["db"]},{"Key":"(get db","Fragments":["grade"]},{"Key":"db grade","Fragments":["[])"]},{"Key":"grade [])","Fragments":["calls"]},{"Key":"[]) calls","Fragments":["and"]},{"Key":"something a","Fragments":["bit","bit","little","little"]},{"Key":"shorter for","Fragments":["one"]},{"Key":"looks generally","Fragments":["good."]},{"Key":"the explicit","Fragments":["use","conversion","test."]},{"Key":"explicit use","Fragments":["of"]},{"Key":"of vectors","Fragments":["in","is"]},{"Key":"vectors in","Fragments":["(sorted)"]},{"Key":"in (sorted)","Fragments":["since"]},{"Key":"(sorted) since","Fragments":["the"]},{"Key":"specification just","Fragments":["says"]},{"Key":"just says","Fragments":["you"]},{"Key":"says you","Fragments":["need"]},{"Key":"return lists","Fragments":["of"]},{"Key":"of names,","Fragments":["not"]},{"Key":"names, not","Fragments":["specific"]},{"Key":"specific types","Fragments":["of"]},{"Key":"of lists,","Fragments":["and"]},{"Key":"lists, and","Fragments":["Clojure"]},{"Key":"and Clojure","Fragments":["considers"]},{"Key":"Clojure considers","Fragments":["[1"]},{"Key":"considers [1","Fragments":["2"]},{"Key":"3] and","Fragments":["'(1"]},{"Key":"and '(1","Fragments":["2"]},{"Key":"2 3)","Fragments":["equal."]},{"Key":"3) equal.","Fragments":["That"]},{"Key":"equal. That","Fragments":["would"]},{"Key":"implementation a","Fragments":["bit","bit."]},{"Key":"not crazy","Fragments":["about"]},{"Key":"crazy about","Fragments":["my"]},{"Key":"my `zipvec`","Fragments":["function,"]},{"Key":"`zipvec` function,","Fragments":["but"]},{"Key":"reasonable thing","Fragments":["to"]},{"Key":"do at","Fragments":["the","some"]},{"Key":" @freida","Fragments":["Thanks,"]},{"Key":"@freida Thanks,","Fragments":["good"]},{"Key":"good point!","Fragments":["Tried"]},{"Key":"point! Tried","Fragments":["to"]},{"Key":"Tried to","Fragments":["improve","keep"]},{"Key":"in fourth","Fragments":["iteration."]},{"Key":"you incorporated","Fragments":["the"]},{"Key":"incorporated the","Fragments":["`frequencies`","regular"]},{"Key":"`frequencies` function,","Fragments":["which"]},{"Key":"built-in way","Fragments":["to"]},{"Key":"build these","Fragments":["sorts"]},{"Key":"these sorts","Fragments":["of"]},{"Key":"Good catch","Fragments":["on"]},{"Key":"catch on","Fragments":["the","putting","removing"]},{"Key":"the unused","Fragments":["s"]},{"Key":"unused s","Fragments":["variable."]},{"Key":"s variable.","Fragments":["Yes,"]},{"Key":"variable. Yes,","Fragments":["I"]},{"Key":"Using blank?","Fragments":["instead"]},{"Key":"blank? instead","Fragments":["of"]},{"Key":"a RE","Fragments":["sounds"]},{"Key":"RE sounds","Fragments":["good"]},{"Key":"the \"4?\"","Fragments":["comment."]},{"Key":"\"4?\" comment.","Fragments":["The"]},{"Key":"comment. The","Fragments":["tests"]},{"Key":"question? should","Fragments":["return"]},{"Key":"tests require","Fragments":["entries"]},{"Key":"require entries","Fragments":["with"]},{"Key":"entries with","Fragments":["zero"]},{"Key":"with zero","Fragments":["counts","counts,"]},{"Key":"zero counts","Fragments":["for"]},{"Key":"counts for","Fragments":["missing"]},{"Key":"for missing","Fragments":["nucleotides.","mappings"]},{"Key":"missing nucleotides.","Fragments":["Using"]},{"Key":"nucleotides. Using","Fragments":["frequencies"]},{"Key":"Using frequencies","Fragments":["would"]},{"Key":"frequencies would","Fragments":["omit"]},{"Key":"would omit","Fragments":["those"]},{"Key":"omit those","Fragments":["entries"]},{"Key":"those entries","Fragments":["rather"]},{"Key":"entries rather","Fragments":["than"]},{"Key":"than leave","Fragments":["a"]},{"Key":"a zero","Fragments":["entry."]},{"Key":"DNA problems","Fragments":["both"]},{"Key":"problems both","Fragments":["turned"]},{"Key":"both turned","Fragments":["out"]},{"Key":"turned out","Fragments":["nice"]},{"Key":"out nice","Fragments":["with"]},{"Key":"nice with","Fragments":["the"]},{"Key":"the -\u003e","Fragments":["macro.","macro","and"]},{"Key":"I briefly","Fragments":["experimented"]},{"Key":"briefly experimented","Fragments":["with"]},{"Key":"experimented with","Fragments":["making","changing","breaking"]},{"Key":"with making","Fragments":["space-age"]},{"Key":"making space-age","Fragments":["a"]},{"Key":"space-age a","Fragments":["macro"]},{"Key":"macro and","Fragments":["combining"]},{"Key":"and combining","Fragments":["31557600"]},{"Key":"combining 31557600","Fragments":["and"]},{"Key":"31557600 and","Fragments":["earth-ratio"]},{"Key":"and earth-ratio","Fragments":["at"]},{"Key":"earth-ratio at","Fragments":["compile"]},{"Key":"decided the","Fragments":["benefits"]},{"Key":"benefits were","Fragments":["small"]},{"Key":"were small","Fragments":["w.r.t"]},{"Key":"small w.r.t","Fragments":["the"]},{"Key":"w.r.t the","Fragments":["complexity."]},{"Key":" @pearl","Fragments":["I"]},{"Key":"@pearl I","Fragments":["agree"]},{"Key":"your suggestion","Fragments":["is"]},{"Key":"explicit concerning","Fragments":["intention,"]},{"Key":"concerning intention,","Fragments":["but"]},{"Key":"intention, but","Fragments":["I"]},{"Key":"my brain","Fragments":["more","was","a"]},{"Key":"brain more","Fragments":["effort"]},{"Key":"understand what's","Fragments":["going"]},{"Key":"I'm sticking","Fragments":["with"]},{"Key":"sticking with","Fragments":["the"]},{"Key":"lot harder","Fragments":["than"]},{"Key":"harder than","Fragments":["it","I"]},{"Key":"should be,","Fragments":["mainly","so"]},{"Key":"be, mainly","Fragments":["because"]},{"Key":"the poor","Fragments":["date"]},{"Key":"poor date","Fragments":["support"]},{"Key":"date support","Fragments":["in"]},{"Key":"support in","Fragments":["standard"]},{"Key":"in standard","Fragments":["Java."]},{"Key":" sort-by,","Fragments":["into"]},{"Key":"sort-by, into","Fragments":["set"]},{"Key":"into set","Fragments":["and"]},{"Key":"set and","Fragments":["case","nil"]},{"Key":"and case","Fragments":["are","together,"]},{"Key":"case are","Fragments":["the"]},{"Key":"three workhorses","Fragments":["of"]},{"Key":"workhorses of","Fragments":["this"]},{"Key":"I included","Fragments":["the"]},{"Key":"the :refer-clojure","Fragments":["clause"]},{"Key":":refer-clojure clause","Fragments":["in"]},{"Key":"ns directive","Fragments":["to"]},{"Key":"directive to","Fragments":["suppress"]},{"Key":"to suppress","Fragments":["the"]},{"Key":"suppress the","Fragments":["warning"]},{"Key":"overriding the","Fragments":["core"]},{"Key":"the information","Fragments":["@krystina.","in"]},{"Key":"information @krystina.","Fragments":["At"]},{"Key":"@krystina. At","Fragments":["the"]},{"Key":"writing I","Fragments":["wasn't"]},{"Key":"but looking","Fragments":["at"]},{"Key":"it know","Fragments":["you're"]},{"Key":"right again,","Fragments":["it"]},{"Key":"again, it","Fragments":["does"]},{"Key":"does look","Fragments":["slightly","nice."]},{"Key":"more consistent","Fragments":["for","for"]},{"Key":"consistent for","Fragments":["me","some"]},{"Key":"me putting","Fragments":["the"]},{"Key":"Rather brute-force","Fragments":["and"]},{"Key":"brute-force and","Fragments":["not"]},{"Key":"too fast.","Fragments":["Takes"]},{"Key":"fast. Takes","Fragments":["a"]},{"Key":"Takes a","Fragments":["bit"]},{"Key":"over 2","Fragments":["minutes","minutes"]},{"Key":"2 minutes","Fragments":["to","to"]},{"Key":"minutes to","Fragments":["run","less"]},{"Key":"case on","Fragments":["my"]},{"Key":"am particularly","Fragments":["happy"]},{"Key":"the infinite","Fragments":["prime"]},{"Key":"infinite prime","Fragments":["number"]},{"Key":"prime number","Fragments":["sequence","generating"]},{"Key":"number sequence","Fragments":["however."]},{"Key":" Ha!","Fragments":["I"]},{"Key":"discovered [:refer-clojure","Fragments":[":rename"]},{"Key":"[:refer-clojure :rename","Fragments":["{list"]},{"Key":":rename {list","Fragments":["core-list}]"]},{"Key":"{list core-list}]","Fragments":["as"]},{"Key":"core-list}] as","Fragments":["a"]},{"Key":"of preventing","Fragments":["the"]},{"Key":"preventing the","Fragments":["warning"]},{"Key":"redefining core","Fragments":["functions."]},{"Key":"core functions.","Fragments":["I"]},{"Key":"some earlier","Fragments":["exercises."]},{"Key":"Added a","Fragments":["char-range","doc","second","test"]},{"Key":"a char-range","Fragments":["function"]},{"Key":"char-range function","Fragments":["for"]},{"Key":"the alphabets","Fragments":["for"]},{"Key":"alphabets for","Fragments":["valid"]},{"Key":"In context","Fragments":["of"]},{"Key":"of threading,","Fragments":["you"]},{"Key":"threading, you","Fragments":["can"]},{"Key":"drop parentheses","Fragments":["in"]},{"Key":"argument functions.","Fragments":["However"]},{"Key":"functions. However","Fragments":["it"]},{"Key":"However it","Fragments":["may"]},{"Key":"may feel","Fragments":["more"]},{"Key":"feel more","Fragments":["consistent"]},{"Key":"some to","Fragments":["leave"]},{"Key":"more idiomatically","Fragments":["Clojure","written","written","written","written","as"]},{"Key":"idiomatically Clojure","Fragments":["way"]},{"Key":"Clojure way","Fragments":["of"]},{"Key":"writing that","Fragments":["sort"]},{"Key":"I reconsidered","Fragments":["the"]},{"Key":"reconsidered the","Fragments":["feedback"]},{"Key":"on frequencies.","Fragments":["By"]},{"Key":"frequencies. By","Fragments":["using"]},{"Key":"By using","Fragments":["an","\".add\","]},{"Key":"an initialized","Fragments":["map"]},{"Key":"initialized map","Fragments":["with"]},{"Key":"zero counts,","Fragments":["frequencies"]},{"Key":"counts, frequencies","Fragments":["can"]},{"Key":"frequencies can","Fragments":["be"]},{"Key":"to populate","Fragments":["that"]},{"Key":"populate that","Fragments":["map."]},{"Key":"The interesting","Fragments":["thing"]},{"Key":"interesting thing","Fragments":["is"]},{"Key":"now \"nucleotide-counts\"","Fragments":["is"]},{"Key":"\"nucleotide-counts\" is","Fragments":["the"]},{"Key":"the basis","Fragments":["function"]},{"Key":"basis function","Fragments":["and"]},{"Key":"and \"count\"","Fragments":["is"]},{"Key":"\"count\" is","Fragments":["implemented"]},{"Key":"is implemented","Fragments":["in","as"]},{"Key":"I reused","Fragments":["the","my"]},{"Key":"reused the","Fragments":["code"]},{"Key":"the prime","Fragments":["factorization","factors","factors","number"]},{"Key":"prime factorization","Fragments":["exercise"]},{"Key":"factorization exercise","Fragments":["for"]},{"Key":"Fixed typo","Fragments":["in"]},{"Key":"typo in","Fragments":["comment."]},{"Key":"long one,","Fragments":["generating"]},{"Key":"one, generating","Fragments":["a"]},{"Key":"of helper","Fragments":["functions."]},{"Key":"keep each","Fragments":["helper"]},{"Key":"each helper","Fragments":["function"]},{"Key":"function small","Fragments":["and"]},{"Key":"and focused.","Fragments":["The"]},{"Key":"focused. The","Fragments":["high"]},{"Key":"The high","Fragments":["level"]},{"Key":"level public","Fragments":["functions"]},{"Key":"functions (mostly","Fragments":["defined"]},{"Key":"(mostly defined","Fragments":["by"]},{"Key":"defined by","Fragments":["the"]},{"Key":"given tests)","Fragments":["are"]},{"Key":"tests) are","Fragments":["mainly"]},{"Key":"are mainly","Fragments":["transforming"]},{"Key":"mainly transforming","Fragments":["functions"]},{"Key":"transforming functions","Fragments":["(done"]},{"Key":"functions (done","Fragments":["using"]},{"Key":"(done using","Fragments":["the"]},{"Key":"the -\u003e\u003e","Fragments":["macro).","macro.","macro.","macro"]},{"Key":" Renamed","Fragments":["parameter","the"]},{"Key":"Renamed parameter","Fragments":["to"]},{"Key":"to spaced-groups-of","Fragments":["to"]},{"Key":"spaced-groups-of to","Fragments":["make"]},{"Key":"gets a","Fragments":["string","new","bit"]},{"Key":"string (or","Fragments":["at"]},{"Key":"least a","Fragments":["sequence"]},{"Key":"Thanks, resubmitted","Fragments":["with"]},{"Key":"resubmitted with","Fragments":["standalone"]},{"Key":"with standalone","Fragments":["functions."]},{"Key":"things of","Fragments":["note"]},{"Key":"of note","Fragments":["on"]},{"Key":"note on","Fragments":["this"]},{"Key":"this project.","Fragments":["I"]},{"Key":"project. I","Fragments":["wanted"]},{"Key":"to experiment","Fragments":["with","with","with?"]},{"Key":"experiment with","Fragments":["the","breaking","extracting"]},{"Key":"the protocol","Fragments":["and"]},{"Key":"protocol and","Fragments":["record","is","defrecord."]},{"Key":"and record","Fragments":["features"]},{"Key":"record features","Fragments":["of"]},{"Key":"features of","Fragments":["Clojure","Atoms"]},{"Key":"this seemed","Fragments":["like"]},{"Key":"good opportunity.","Fragments":["A"]},{"Key":"opportunity. A","Fragments":["generic"]},{"Key":"A generic","Fragments":["robot"]},{"Key":"generic robot","Fragments":["protocol"]},{"Key":"robot protocol","Fragments":["using","is"]},{"Key":"protocol using","Fragments":["left/right/advance"]},{"Key":"using left/right/advance","Fragments":["functions"]},{"Key":"left/right/advance functions","Fragments":["is"]},{"Key":"is defined.","Fragments":["Then"]},{"Key":"defined. Then","Fragments":["a"]},{"Key":"Then a","Fragments":["concrete"]},{"Key":"protocol is","Fragments":["provided"]},{"Key":"is provided","Fragments":["(based"]},{"Key":"provided (based","Fragments":["on"]},{"Key":"the low","Fragments":["level"]},{"Key":"level turn-left/turn-right/move","Fragments":["functions)."]},{"Key":"turn-left/turn-right/move functions).","Fragments":["This"]},{"Key":"functions). This","Fragments":["leaves"]},{"Key":"This leaves","Fragments":["open","the"]},{"Key":"leaves open","Fragments":["the"]},{"Key":"open the","Fragments":["possibility"]},{"Key":"of other","Fragments":["robotic","things","problems"]},{"Key":"other robotic","Fragments":["implementations."]},{"Key":"The simulate","Fragments":["function"]},{"Key":"simulate function","Fragments":["was"]},{"Key":"originally written","Fragments":["using"]},{"Key":"written using","Fragments":["an"]},{"Key":"an explicit","Fragments":["loop.","_do_"]},{"Key":"explicit loop.","Fragments":["I"]},{"Key":"loop. I","Fragments":["turned"]},{"Key":"I turned","Fragments":["it"]},{"Key":"turned it","Fragments":["into"]},{"Key":"a reduce","Fragments":["function","function","fairly"]},{"Key":"reduce function","Fragments":["and","to","where"]},{"Key":"step function","Fragments":["made"]},{"Key":"function made","Fragments":["the"]},{"Key":"perfect reducer","Fragments":["once"]},{"Key":"reducer once","Fragments":["I"]},{"Key":"once I","Fragments":["swapped"]},{"Key":"I swapped","Fragments":["the"]},{"Key":"swapped the","Fragments":["order"]},{"Key":" Converted","Fragments":["a","board-string"]},{"Key":"Converted a","Fragments":["couple"]},{"Key":"nested calls","Fragments":["into"]},{"Key":"calls into","Fragments":["using"]},{"Key":"Another possible","Fragments":["approach"]},{"Key":"possible approach","Fragments":["to"]},{"Key":"(def empty-count","Fragments":["(zipmap"]},{"Key":"empty-count (zipmap","Fragments":["valid-dna-nucleotides"]},{"Key":"(zipmap valid-dna-nucleotides","Fragments":["(repeat"]},{"Key":"valid-dna-nucleotides (repeat","Fragments":["0))"]},{"Key":"also just","Fragments":["use"]},{"Key":"`:exclude` to","Fragments":["avoid"]},{"Key":"avoid importing","Fragments":["it"]},{"Key":"importing it","Fragments":["altogether."]},{"Key":"Took the","Fragments":["advice","advice"]},{"Key":"on zipmap.","Fragments":["Good"]},{"Key":"zipmap. Good","Fragments":["call."]},{"Key":"1. Casting","Fragments":["string"]},{"Key":"Casting string","Fragments":["to"]},{"Key":"string extends","Fragments":["sequence"]},{"Key":"extends sequence","Fragments":["protocol"]},{"Key":"sequence protocol","Fragments":["and"]},{"Key":"treated by","Fragments":["all"]},{"Key":"by all","Fragments":["functions","the"]},{"Key":"functions operating","Fragments":["on"]},{"Key":"on sequences","Fragments":["as"]},{"Key":"sequences as","Fragments":["a"]},{"Key":"seq of","Fragments":["characters.","nulls"]},{"Key":"2. No","Fragments":["need"]},{"Key":"for `do`","Fragments":["in"]},{"Key":"`do` in","Fragments":["`set-name`","a"]},{"Key":"in `set-name`","Fragments":["-"]},{"Key":"`set-name` -","Fragments":["`defn`/`fn`","`reset!`"]},{"Key":"- `defn`/`fn`","Fragments":["has"]},{"Key":"`defn`/`fn` has","Fragments":["implicit"]},{"Key":"has implicit","Fragments":["`do`"]},{"Key":"implicit `do`","Fragments":["for"]},{"Key":"`do` for","Fragments":["the"]},{"Key":"the `body`","Fragments":["part"]},{"Key":"`body` part","Fragments":["of"]},{"Key":"4. No","Fragments":["need"]},{"Key":"explicitly return","Fragments":["`name`","a"]},{"Key":"return `name`","Fragments":["at"]},{"Key":"`name` at","Fragments":["the"]},{"Key":"of `set-name`","Fragments":["-"]},{"Key":"- `reset!`","Fragments":["returns"]},{"Key":"`reset!` returns","Fragments":["the"]},{"Key":"new value","Fragments":["anyway."]},{"Key":"5. You","Fragments":["could"]},{"Key":"use short-circuitring","Fragments":["`or`"]},{"Key":"short-circuitring `or`","Fragments":["in"]},{"Key":"in `robot-name`,","Fragments":["however"]},{"Key":"`robot-name`, however","Fragments":["that"]},{"Key":"however that","Fragments":["may"]},{"Key":"6. Lazy","Fragments":["initialization"]},{"Key":"Lazy initialization","Fragments":["of"]},{"Key":"initialization of","Fragments":["robot's"]},{"Key":"of robot's","Fragments":["name"]},{"Key":"robot's name","Fragments":["is"]},{"Key":"nice touch","Fragments":["-"]},{"Key":"touch -","Fragments":["but"]},{"Key":"doesn't it","Fragments":["hamper"]},{"Key":"it hamper","Fragments":["a"]},{"Key":"hamper a","Fragments":["bit"]},{"Key":"bit understanding","Fragments":["the"]},{"Key":"can limit","Fragments":["the"]},{"Key":"regex in","Fragments":["`yelling?`","your","`sanitize`","code."]},{"Key":"in `yelling?`","Fragments":["to"]},{"Key":"`yelling?` to","Fragments":["`#\"[A-Z]`"]},{"Key":"to `#\"[A-Z]`","Fragments":["because"]},{"Key":"`#\"[A-Z]` because","Fragments":["you've"]},{"Key":"because you've","Fragments":["already"]},{"Key":"already checked","Fragments":["that"]},{"Key":"all alphabetic","Fragments":["characters"]},{"Key":" Items","Fragments":["1-4"]},{"Key":"Items 1-4","Fragments":["..."]},{"Key":"1-4 ...","Fragments":["Yes,"]},{"Key":"... Yes,","Fragments":["agreed."]},{"Key":"Yes, agreed.","Fragments":["Thanks."]},{"Key":" Item","Fragments":["5"]},{"Key":"Item 5","Fragments":["..."]},{"Key":"5 ...","Fragments":["The"]},{"Key":"... The","Fragments":["lazy"]},{"Key":"The lazy","Fragments":["initialization"]},{"Key":"lazy initialization","Fragments":["was"]},{"Key":"initialization was","Fragments":["my"]},{"Key":"my take-away","Fragments":["from"]},{"Key":"take-away from","Fragments":["the"]},{"Key":"readme for","Fragments":["this"]},{"Key":"example. Although","Fragments":["I"]},{"Key":"will grant","Fragments":["the"]},{"Key":"grant the","Fragments":["readme"]},{"Key":"readme was","Fragments":["pretty"]},{"Key":"was pretty","Fragments":["vague"]},{"Key":"pretty vague","Fragments":["in"]},{"Key":"vague in","Fragments":["the"]},{"Key":"requirements and","Fragments":["I"]},{"Key":"have read","Fragments":["too"]},{"Key":"read too","Fragments":["much"]},{"Key":"much into","Fragments":["that."]},{"Key":" Addressed","Fragments":["items"]},{"Key":"Addressed items","Fragments":["1-4"]},{"Key":"items 1-4","Fragments":["in"]},{"Key":"1-4 in","Fragments":["previous"]},{"Key":"first form","Fragments":["in"]},{"Key":"in arrow","Fragments":["macro"]},{"Key":"arrow macro","Fragments":["invocation"]},{"Key":"macro invocation","Fragments":["by"]},{"Key":"invocation by","Fragments":["putting"]},{"Key":"putting a","Fragments":["and","`defn-`"]},{"Key":"a and","Fragments":["b"]},{"Key":"and b","Fragments":["directly"]},{"Key":"b directly","Fragments":["in"]},{"Key":"one. The","Fragments":["anon"]},{"Key":"The anon","Fragments":["function"]},{"Key":"anon function","Fragments":["could"]},{"Key":"could optionally","Fragments":["use"]},{"Key":"optionally use","Fragments":["`partial`"]},{"Key":"`partial` but","Fragments":["that's","I"]},{"Key":"of `bottles`,","Fragments":["`case`"]},{"Key":"`bottles`, `case`","Fragments":["(sic!)"]},{"Key":"`case` (sic!)","Fragments":["would"]},{"Key":"(sic!) would","Fragments":["be"]},{"Key":"be helpful","Fragments":["in","as"]},{"Key":"in uncluttering","Fragments":["the"]},{"Key":"uncluttering the","Fragments":["code."]},{"Key":" my","Fragments":["brain","first","very"]},{"Key":"brain was","Fragments":["not"]},{"Key":"not processing","Fragments":["the"]},{"Key":"README so","Fragments":["I"]},{"Key":"I relied","Fragments":["mostly"]},{"Key":"relied mostly","Fragments":["on"]},{"Key":"mostly on","Fragments":["the"]},{"Key":" next","Fragments":["rev,"]},{"Key":"next rev,","Fragments":["i'm"]},{"Key":"rev, i'm","Fragments":["going"]},{"Key":"i'm going","Fragments":["to"]},{"Key":" TIL:","Fragments":["merge","\\W+"]},{"Key":"TIL: merge","Fragments":["and"]},{"Key":"merge and","Fragments":["disj"]},{"Key":" new","Fragments":["found"]},{"Key":"new found","Fragments":["appreciation"]},{"Key":"found appreciation","Fragments":["for"]},{"Key":"appreciation for","Fragments":["those"]},{"Key":"those familiar","Fragments":["python"]},{"Key":"familiar python","Fragments":["data"]},{"Key":"python data","Fragments":["structures"]},{"Key":" Personally,","Fragments":["I","I","I"]},{"Key":"Personally, I","Fragments":["would","prefer","find","would"]},{"Key":"make `normalize-digits`","Fragments":["a"]},{"Key":"`normalize-digits` a","Fragments":["process"]},{"Key":"a process","Fragments":["where"]},{"Key":"where data","Fragments":["flows"]},{"Key":"data flows","Fragments":["through"]},{"Key":"flows through","Fragments":["a"]},{"Key":"of sanitizing","Fragments":["and"]},{"Key":"and validating","Fragments":["functions"]},{"Key":"validating functions","Fragments":["putting"]},{"Key":"functions putting","Fragments":["the"]},{"Key":"in auxiliary","Fragments":["fns."]},{"Key":"auxiliary fns.","Fragments":["The"]},{"Key":"fns. The","Fragments":["final"]},{"Key":"final result","Fragments":["could"]},{"Key":"result could","Fragments":["look","be"]},{"Key":" Returning","Fragments":["invalid"]},{"Key":"Returning invalid","Fragments":["number"]},{"Key":"invalid number","Fragments":["could"]},{"Key":"number could","Fragments":["be"]},{"Key":"done by","Fragments":["short-circuitring","checking","let:"]},{"Key":"by short-circuitring","Fragments":["the"]},{"Key":"short-circuitring the","Fragments":["threading"]},{"Key":"threading form","Fragments":["with","(and"]},{"Key":"for invalid","Fragments":["input","values"]},{"Key":"invalid input","Fragments":["by"]},{"Key":"input by","Fragments":["`or`."]},{"Key":"by `or`.","Fragments":["To"]},{"Key":"`or`. To","Fragments":["avoid"]},{"Key":"To avoid","Fragments":["tripping","processing","warning"]},{"Key":"avoid tripping","Fragments":["up"]},{"Key":"tripping up","Fragments":["on"]},{"Key":"on `nil`","Fragments":["in"]},{"Key":"`nil` in","Fragments":["the"]},{"Key":"form (and","Fragments":["eliminate"]},{"Key":"(and eliminate","Fragments":["redundant"]},{"Key":"eliminate redundant","Fragments":["checks),"]},{"Key":"redundant checks),","Fragments":["an"]},{"Key":"checks), an","Fragments":["alternative"]},{"Key":"alternative `some-\u003e`","Fragments":["macro"]},{"Key":"`some-\u003e` macro","Fragments":["can"]},{"Key":"used -","Fragments":["it"]},{"Key":"it stops","Fragments":["processing"]},{"Key":"stops processing","Fragments":["as"]},{"Key":"processing as","Fragments":["soon"]},{"Key":"chain returns","Fragments":["`nil`."]},{"Key":"Regarding spacing","Fragments":["in"]},{"Key":"spacing in","Fragments":["`defn`,"]},{"Key":"in `defn`,","Fragments":["both"]},{"Key":"`defn`, both","Fragments":["styles"]},{"Key":"both styles","Fragments":["are"]},{"Key":"styles are","Fragments":["correct."]},{"Key":"are correct.","Fragments":["The"]},{"Key":"correct. The","Fragments":["reason"]},{"Key":"for putting","Fragments":["arguments"]},{"Key":"putting arguments","Fragments":["list"]},{"Key":"generally because","Fragments":["there"]},{"Key":"because there","Fragments":["can"]},{"Key":"there can","Fragments":["be"]},{"Key":"or metadata","Fragments":["that"]},{"Key":"metadata that","Fragments":["are","validates"]},{"Key":"put between","Fragments":["the"]},{"Key":"and arg","Fragments":["list,"]},{"Key":"arg list,","Fragments":["like:"]},{"Key":" \"Does","Fragments":["bar"]},{"Key":"\"Does bar","Fragments":["baz"]},{"Key":"bar baz","Fragments":["with"]},{"Key":"baz with","Fragments":["x\""]},{"Key":" (some-body","Fragments":["...))"]},{"Key":"Nice catch","Fragments":["on"]},{"Key":"on putting","Fragments":["a/b"]},{"Key":"putting a/b","Fragments":["directly"]},{"Key":"a/b directly","Fragments":["in"]},{"Key":"next form.","Fragments":["Took"]},{"Key":"form. Took","Fragments":["a"]},{"Key":"Took a","Fragments":["bit"]},{"Key":"forgetting that","Fragments":["strings"]},{"Key":"partial comment.","Fragments":["I'm"]},{"Key":"comment. I'm","Fragments":["not","checking"]},{"Key":"seeing that.","Fragments":["Could"]},{"Key":"that. Could","Fragments":["you"]},{"Key":"you elaborate?","Fragments":["Thanks."]},{"Key":"I noticed","Fragments":["that"]},{"Key":"was inconsistent","Fragments":["in"]},{"Key":"inconsistent in","Fragments":["putting"]},{"Key":"in putting","Fragments":["the"]},{"Key":"args on","Fragments":["the","the"]},{"Key":"line, or","Fragments":["the"]},{"Key":"the defn.","Fragments":["So"]},{"Key":"defn. So","Fragments":["I"]},{"Key":"made all","Fragments":["the"]},{"Key":"the defns","Fragments":["consistent.[1]"]},{"Key":"think putting","Fragments":["args"]},{"Key":"putting args","Fragments":["on"]},{"Key":"line seems","Fragments":["to","much"]},{"Key":"style I've","Fragments":["seen"]},{"Key":"I've read,","Fragments":["but"]},{"Key":"seen enough","Fragments":["diverse"]},{"Key":"enough diverse","Fragments":["code"]},{"Key":"diverse code","Fragments":["to"]},{"Key":"community standard","Fragments":["..."]},{"Key":"standard ...","Fragments":["or"]},{"Key":"... or","Fragments":["if"]},{"Key":"anyone really","Fragments":["cares."]},{"Key":" [1]","Fragments":["I","https://github.com/bbatsov/clojure-style-guide#naming"]},{"Key":"[1] I","Fragments":["feel"]},{"Key":"to invoke","Fragments":["Emmerson"]},{"Key":"invoke Emmerson","Fragments":["and"]},{"Key":"Emmerson and","Fragments":["Hobgoblins"]},{"Key":"and Hobgoblins","Fragments":["at"]},{"Key":"Hobgoblins at","Fragments":["this"]},{"Key":"a long-time","Fragments":["lisper,"]},{"Key":"long-time lisper,","Fragments":["\"cond\""]},{"Key":"lisper, \"cond\"","Fragments":["is"]},{"Key":"\"cond\" is","Fragments":["my"]},{"Key":"my goto","Fragments":["conditional."]},{"Key":"goto conditional.","Fragments":["But"]},{"Key":"conditional. But","Fragments":["case"]},{"Key":"But case","Fragments":["is"]},{"Key":" Incorporated","Fragments":["advice"]},{"Key":"Incorporated advice","Fragments":["on"]},{"Key":"on merging","Fragments":["the"]},{"Key":"merging the","Fragments":["first"]},{"Key":"two forms","Fragments":["of"]},{"Key":"forms of","Fragments":["the","`filter`,"]},{"Key":" Simplified","Fragments":["normalize","`generate-name`","a"]},{"Key":"Simplified normalize","Fragments":["function."]},{"Key":"By partial","Fragments":["I"]},{"Key":"partial I","Fragments":["meant"]},{"Key":"meant creating","Fragments":["a"]},{"Key":"a partial","Fragments":["application","function"]},{"Key":"application of","Fragments":["function,","anagram?,"]},{"Key":"of function,","Fragments":["like"]},{"Key":"this `(partial","Fragments":["apply"]},{"Key":"`(partial apply","Fragments":["=)`."]},{"Key":"apply =)`.","Fragments":["However,"]},{"Key":"=)`. However,","Fragments":["seeing"]},{"Key":"However, seeing","Fragments":["you"]},{"Key":"seeing you","Fragments":["updated"]},{"Key":"you updated","Fragments":["code"]},{"Key":"updated code","Fragments":["I've","using","to"]},{"Key":"I've forgot","Fragments":["that"]},{"Key":"that `=`","Fragments":["is","is"]},{"Key":"`=` is","Fragments":["variadic,","simply"]},{"Key":"is variadic,","Fragments":["so"]},{"Key":"variadic, so","Fragments":["`(map"]},{"Key":"so `(map","Fragments":["="]},{"Key":"`(map =","Fragments":["a"]},{"Key":"a b)`","Fragments":["does"]},{"Key":"b)` does","Fragments":["the"]},{"Key":" Per","Fragments":["advice,","advice,"]},{"Key":"Per advice,","Fragments":["I","simplified"]},{"Key":"broke the","Fragments":["normalize"]},{"Key":"the normalize","Fragments":["digits"]},{"Key":"normalize digits","Fragments":["into"]},{"Key":"digits into","Fragments":["a"]},{"Key":"of filters.","Fragments":["I"]},{"Key":"filters. I","Fragments":["agree,"]},{"Key":"agree, it","Fragments":["is"]},{"Key":"read in","Fragments":["this"]},{"Key":"That's completely","Fragments":["tangential","a"]},{"Key":"completely tangential","Fragments":["and"]},{"Key":"tangential and","Fragments":["unimprotant,"]},{"Key":"and unimprotant,","Fragments":["but"]},{"Key":"unimprotant, but","Fragments":["is"]},{"Key":"is `sanatize`","Fragments":["really"]},{"Key":"`sanatize` really","Fragments":["a"]},{"Key":"word? Can't","Fragments":["seem"]},{"Key":"Can't seem","Fragments":["to"]},{"Key":"a dictionary.","Fragments":["I"]},{"Key":"dictionary. I","Fragments":["suppose"]},{"Key":"you've meant","Fragments":["`sanitize`?"]},{"Key":" Yep","Fragments":["..."]},{"Key":"Yep ...","Fragments":["spelling"]},{"Key":"... spelling","Fragments":["failure"]},{"Key":"Fixed spelling","Fragments":["of","error"]},{"Key":"spelling of","Fragments":["sanitize."]},{"Key":"advice, simplified","Fragments":["the"]},{"Key":"simplified the","Fragments":["\"into","code.","conditional."]},{"Key":"the \"into","Fragments":["[]\""]},{"Key":"\"into []\"","Fragments":["and"]},{"Key":"[]\" and","Fragments":["\"sort-by\"."]},{"Key":"and \"sort-by\".","Fragments":["Thanks."]},{"Key":"future reference","Fragments":["-"]},{"Key":"reference -","Fragments":["there's"]},{"Key":"Another helpful","Fragments":["function"]},{"Key":"helpful function","Fragments":["for"]},{"Key":"with associative","Fragments":["data"]},{"Key":"associative data","Fragments":["structures"]},{"Key":"structures (like","Fragments":["hash-map)"]},{"Key":"(like hash-map)","Fragments":["-"]},{"Key":"hash-map) -","Fragments":["`reduce-kv`"]},{"Key":" `defn-`","Fragments":["prevents"]},{"Key":"`defn-` prevents","Fragments":["it"]},{"Key":"prevents it","Fragments":["from"]},{"Key":"being imported","Fragments":["from"]},{"Key":"imported from","Fragments":["other"]},{"Key":"from other","Fragments":["namespaces,","namespaces"]},{"Key":"other namespaces,","Fragments":["however"]},{"Key":"namespaces, however","Fragments":["it's"]},{"Key":"however it's","Fragments":["still"]},{"Key":"dynamic binding","Fragments":["in"]},{"Key":"binding in","Fragments":["the"]},{"Key":"current namespace,","Fragments":["not"]},{"Key":"namespace, not","Fragments":["the"]},{"Key":"the encolsing,","Fragments":["lexical"]},{"Key":"encolsing, lexical","Fragments":["one."]},{"Key":"lexical one.","Fragments":["You"]},{"Key":"one. You","Fragments":["can","make"]},{"Key":"either move","Fragments":["it"]},{"Key":"move it","Fragments":["out","into","up"]},{"Key":"`response-for` or","Fragments":["inline"]},{"Key":"inline it","Fragments":["into"]},{"Key":"into existing","Fragments":["`let`,"]},{"Key":"existing `let`,","Fragments":["where"]},{"Key":"`let`, where","Fragments":["the"]},{"Key":"the bindings'","Fragments":["values"]},{"Key":"bindings' values","Fragments":["are"]},{"Key":"are evaluated","Fragments":["in","on"]},{"Key":"evaluated in","Fragments":["the","the"]},{"Key":"Your `zipvec`","Fragments":["could"]},{"Key":"`zipvec` could","Fragments":["be"]},{"Key":"simple `(map","Fragments":["vector"]},{"Key":"a b)`.","Fragments":["The","In"]},{"Key":"b)`. The","Fragments":["resulting"]},{"Key":"The resulting","Fragments":["sequence"]},{"Key":"resulting sequence","Fragments":["will"]},{"Key":"sequence will","Fragments":["terminate"]},{"Key":"will terminate","Fragments":["at"]},{"Key":"terminate at","Fragments":["the"]},{"Key":"shortest passed","Fragments":["collection."]},{"Key":"passed collection.","Fragments":["You"]},{"Key":"collection. You","Fragments":["can"]},{"Key":"even exploit","Fragments":["that"]},{"Key":"exploit that","Fragments":["further"]},{"Key":"that further","Fragments":["and"]},{"Key":"further and","Fragments":["limit","write","implementing"]},{"Key":"and limit","Fragments":["the"]},{"Key":"whole logic","Fragments":["to"]},{"Key":"nested forms","Fragments":["of"]},{"Key":"of `filter`,","Fragments":["`map`"]},{"Key":"`filter`, `map`","Fragments":["and"]},{"Key":"use `case`","Fragments":["for","instead.","instead","instead"]},{"Key":"`case` for","Fragments":["`so-many`","the"]},{"Key":"for `so-many`","Fragments":["in"]},{"Key":"`so-many` in","Fragments":["order"]},{"Key":"avoid nested","Fragments":["`if`s."]},{"Key":"function `not=`","Fragments":["which","on"]},{"Key":"`not=` which","Fragments":["spares"]},{"Key":"which spares","Fragments":["one"]},{"Key":"spares one","Fragments":["pair"]},{"Key":"of parentheses","Fragments":["-"]},{"Key":"this may","Fragments":["be","become"]},{"Key":"more consistent,","Fragments":["it"]},{"Key":"consistent, it","Fragments":["would"]},{"Key":"bind `blank?`","Fragments":["to"]},{"Key":"more fitting","Fragments":["name,","here"]},{"Key":"fitting name,","Fragments":["like"]},{"Key":"name, like","Fragments":["`silence?`."]},{"Key":"first `or`","Fragments":["gave"]},{"Key":"`or` gave","Fragments":["me"]},{"Key":"moment of","Fragments":["pause","laziness."]},{"Key":"of pause","Fragments":["-"]},{"Key":"`if` would","Fragments":["be","probably","have"]},{"Key":"case. The","Fragments":["second"]},{"Key":"second `or`","Fragments":["is"]},{"Key":"`or` is","Fragments":["unnecessary"]},{"Key":"set callable","Fragments":["accepts"]},{"Key":"callable accepts","Fragments":["a"]},{"Key":"argument returned","Fragments":["when"]},{"Key":"returned when","Fragments":["the"]},{"Key":"one isn't","Fragments":["found"]},{"Key":"isn't found","Fragments":["in"]},{"Key":"using native","Fragments":["methods"]},{"Key":"native methods","Fragments":["of"]},{"Key":"methods of","Fragments":["String"]},{"Key":"of String","Fragments":["is"]},{"Key":"String is","Fragments":["perfectly","treated"]},{"Key":"fine, please","Fragments":["keep"]},{"Key":"also treated","Fragments":["as","as"]},{"Key":"where all","Fragments":["sequence","possible"]},{"Key":"fitting here","Fragments":["instead"]},{"Key":"these `def`s,","Fragments":["which"]},{"Key":"`def`s, which","Fragments":["are"]},{"Key":"are bound","Fragments":["to"]},{"Key":"namespace anyway.","Fragments":["`(fn"]},{"Key":"anyway. `(fn","Fragments":["[a"]},{"Key":"`(fn [a","Fragments":["b]"]},{"Key":"[a b]","Fragments":["[a","(+"]},{"Key":"b] [a","Fragments":["b])`"]},{"Key":"[a b])`","Fragments":["can"]},{"Key":"b])` can","Fragments":["be"]},{"Key":"expressed more","Fragments":["simply"]},{"Key":"more simply","Fragments":["by","using"]},{"Key":"simply by","Fragments":["`vector`"]},{"Key":"by `vector`","Fragments":["which"]},{"Key":"`vector` which","Fragments":["is"]},{"Key":"is variadic","Fragments":["(takes"]},{"Key":"variadic (takes","Fragments":["varying"]},{"Key":"(takes varying","Fragments":["number"]},{"Key":"varying number","Fragments":["of","of","of"]},{"Key":"to cast","Fragments":["to","it"]},{"Key":"`seq` -","Fragments":["strings"]},{"Key":"characters already.","Fragments":["You"]},{"Key":"already. You","Fragments":["could","don't"]},{"Key":"actually make","Fragments":["it"]},{"Key":"one step","Fragments":["with","without","further"]},{"Key":"step with","Fragments":["a"]},{"Key":"Clojure doesn't","Fragments":["use","seem"]},{"Key":"use Python's","Fragments":["\"\"\""]},{"Key":"Python's \"\"\"","Fragments":["syntax"]},{"Key":"\"\"\" syntax","Fragments":["for"]},{"Key":"syntax for","Fragments":["strings."]},{"Key":"strings. Using","Fragments":["\"\"\"xyz\"\"\""]},{"Key":"Using \"\"\"xyz\"\"\"","Fragments":["will"]},{"Key":"\"\"\"xyz\"\"\" will","Fragments":["actually"]},{"Key":"will actually","Fragments":["give"]},{"Key":"you three","Fragments":["strings,"]},{"Key":"three strings,","Fragments":["which"]},{"Key":"strings, which","Fragments":["is"]},{"Key":"user=\u003e (list","Fragments":["\"\"\"xyz\"\"\")"]},{"Key":" (\"\"","Fragments":["\"xyz\""]},{"Key":"(\"\" \"xyz\"","Fragments":["\"\")"]},{"Key":"put newlines","Fragments":["in"]},{"Key":"newlines in","Fragments":["regular"]},{"Key":"in regular","Fragments":["string"]},{"Key":"regular string","Fragments":["literals"]},{"Key":"reader will","Fragments":["keep"]},{"Key":"will keep","Fragments":["reading"]},{"Key":"keep reading","Fragments":["until"]},{"Key":"reading until","Fragments":["it"]},{"Key":"until it","Fragments":["hits","dawned","was"]},{"Key":"it hits","Fragments":["the"]},{"Key":"hits the","Fragments":["terminating"]},{"Key":"the terminating","Fragments":["double"]},{"Key":"terminating double","Fragments":["quote."]},{"Key":"double quote.","Fragments":["No"]},{"Key":"quote. No","Fragments":["need"]},{"Key":"for special","Fragments":["syntax"]},{"Key":"special syntax","Fragments":["since"]},{"Key":"syntax since","Fragments":["Clojure's"]},{"Key":"since Clojure's","Fragments":["syntax"]},{"Key":"Clojure's syntax","Fragments":["isn't"]},{"Key":"syntax isn't","Fragments":["line-oriented"]},{"Key":"isn't line-oriented","Fragments":["like"]},{"Key":"line-oriented like","Fragments":["Python's."]},{"Key":"In normalize-sentence,","Fragments":["you"]},{"Key":"normalize-sentence, you","Fragments":["have"]},{"Key":"string after","Fragments":["the"]},{"Key":"the parameter;","Fragments":["it"]},{"Key":"parameter; it","Fragments":["should"]},{"Key":"Looks reasonable","Fragments":["other"]},{"Key":"reasonable other","Fragments":["than"]},{"Key":"more a","Fragments":["style"]},{"Key":"style preference,","Fragments":["but"]},{"Key":"but \"%\"","Fragments":["is"]},{"Key":"\"%\" is","Fragments":["more"]},{"Key":"common than","Fragments":["\"%1\"","in"]},{"Key":"than \"%1\"","Fragments":["in"]},{"Key":"\"%1\" in","Fragments":["anonymous"]},{"Key":"in anonymous","Fragments":["function"]},{"Key":"function literals.","Fragments":["\"%1\""]},{"Key":"literals. \"%1\"","Fragments":["isn't"]},{"Key":"\"%1\" isn't","Fragments":["incorrect,"]},{"Key":"isn't incorrect,","Fragments":["though."]},{"Key":"the \"includes-letters?\"","Fragments":["function"]},{"Key":"\"includes-letters?\" function","Fragments":["name"]},{"Key":" bob=\u003e","Fragments":["(includes-letters?"]},{"Key":"bob=\u003e (includes-letters?","Fragments":["\"abc\")"]},{"Key":"In (add),","Fragments":["you"]},{"Key":"(add), you","Fragments":["could"]},{"Key":"could call","Fragments":["(grade)"]},{"Key":"call (grade)","Fragments":["instead"]},{"Key":"(grade) instead","Fragments":["of"]},{"Key":"duplicating its","Fragments":["body"]},{"Key":"its body","Fragments":["inline."]},{"Key":"body inline.","Fragments":["Looks"]},{"Key":"inline. Looks","Fragments":["pretty"]},{"Key":"clojure.string/blank? already","Fragments":["disregards"]},{"Key":"already disregards","Fragments":["whitespace,","whitespace,"]},{"Key":"disregards whitespace,","Fragments":["so","so"]},{"Key":"whitespace, so","Fragments":["you","you","you"]},{"Key":"you probably","Fragments":["don't","don't","don't"]},{"Key":"probably don't","Fragments":["need","have","have"]},{"Key":"expressions. Most","Fragments":["of"]},{"Key":"other implementations","Fragments":["of"]},{"Key":"implementations of","Fragments":["this"]},{"Key":"problem are","Fragments":["checking"]},{"Key":"are checking","Fragments":["for"]},{"Key":"for all-caps","Fragments":["sentences"]},{"Key":"all-caps sentences","Fragments":["rather"]},{"Key":"sentences rather","Fragments":["than"]},{"Key":"a minimum","Fragments":["number"]},{"Key":"minimum number","Fragments":["of"]},{"Key":"capital letters,","Fragments":["which","but"]},{"Key":"letters, which","Fragments":["might"]},{"Key":"sense given","Fragments":["the"]},{"Key":"problem definition.","Fragments":["But"]},{"Key":"definition. But","Fragments":["the"]},{"Key":"But the","Fragments":["specification"]},{"Key":"specification is","Fragments":["vague"]},{"Key":"is vague","Fragments":["and"]},{"Key":"vague and","Fragments":["this"]},{"Key":" Algorithm","Fragments":["looks"]},{"Key":"Algorithm looks","Fragments":["good."]},{"Key":"good. It's","Fragments":["slightly"]},{"Key":"It's slightly","Fragments":["more"]},{"Key":"use (zero?","Fragments":["x)"]},{"Key":"(zero? x)","Fragments":["rather"]},{"Key":"x) rather","Fragments":["than"]},{"Key":"x 0).","Fragments":["And"]},{"Key":"0). And","Fragments":["\"divisible\""]},{"Key":"And \"divisible\"","Fragments":["doesn't"]},{"Key":"\"divisible\" doesn't","Fragments":["have"]},{"Key":"an \"a\"","Fragments":["(hey,"]},{"Key":"\"a\" (hey,","Fragments":["we're"]},{"Key":"(hey, we're","Fragments":["supposed"]},{"Key":"we're supposed","Fragments":["to"]},{"Key":" (assoc","Fragments":["map"]},{"Key":"(assoc map","Fragments":["key"]},{"Key":"map key","Fragments":["value)"]},{"Key":"key value)","Fragments":["is"]},{"Key":"value) is","Fragments":["more"]},{"Key":"idiomatic and","Fragments":["slightly","that","doesn't","allows"]},{"Key":"and slightly","Fragments":["more"]},{"Key":"than (conj","Fragments":["map"]},{"Key":"(conj map","Fragments":["{key"]},{"Key":"map {key","Fragments":["value})."]},{"Key":"Using `let`","Fragments":["blocks"]},{"Key":"`let` blocks","Fragments":["for"]},{"Key":"blocks for","Fragments":["storing"]},{"Key":"for storing","Fragments":["`sanitized-message`"]},{"Key":"using `string`","Fragments":["as"]},{"Key":"`string` as","Fragments":["an"]},{"Key":"an alias","Fragments":["to","for"]},{"Key":"got .endsWith","Fragments":["function."]},{"Key":"make short","Fragments":["are_ya_shouting?"]},{"Key":"short are_ya_shouting?","Fragments":["function."]},{"Key":" there","Fragments":["is"]},{"Key":"need (.endsWith","Fragments":["\"!\")."]},{"Key":"check about","Fragments":["there"]},{"Key":"about there","Fragments":["is"]},{"Key":"is alphabet","Fragments":["and"]},{"Key":"alphabet and","Fragments":["input_string"]},{"Key":"and input_string","Fragments":["is"]},{"Key":"input_string is","Fragments":["same"]},{"Key":"is same","Fragments":["with"]},{"Key":"with input_string","Fragments":["upper"]},{"Key":"input_string upper","Fragments":["case."]},{"Key":"good! There's","Fragments":["a"]},{"Key":"to calculate","Fragments":["`gram`...","the","that"]},{"Key":"calculate `gram`...","Fragments":["and"]},{"Key":"`gram`... and","Fragments":["there's"]},{"Key":"there's an","Fragments":["actual","overhead"]},{"Key":"an actual","Fragments":["name"]},{"Key":"actual name","Fragments":["for"]},{"Key":"it is!","Fragments":["It's"]},{"Key":"is! It's","Fragments":["called"]},{"Key":"It's called","Fragments":["an"]},{"Key":"called an","Fragments":["\"alphagram\".","\"alphagram\"","[Alphagram]"]},{"Key":"Possibly could","Fragments":["be"]},{"Key":"split up","Fragments":["into"]},{"Key":"up into","Fragments":["a","smaller"]},{"Key":"few smaller","Fragments":["functions?"]},{"Key":"avoided using","Fragments":["partial"]},{"Key":"of anagram?,","Fragments":["because"]},{"Key":"anagram?, because","Fragments":["I"]},{"Key":"generally don't","Fragments":["like"]},{"Key":"the aesthetics","Fragments":["of"]},{"Key":"aesthetics of","Fragments":["(partial"]},{"Key":"of (partial","Fragments":["anagram?"]},{"Key":"(partial anagram?","Fragments":["word).","word)","word)"]},{"Key":"anagram? word).","Fragments":["Instead"]},{"Key":"word). Instead","Fragments":["I"]},{"Key":"chose for","Fragments":["anagram?"]},{"Key":"for anagram?","Fragments":["to"]},{"Key":"anagram? to","Fragments":["return"]},{"Key":"your comments!","Fragments":["I've"]},{"Key":"comments! I've","Fragments":["improved"]},{"Key":"I've improved","Fragments":["upon","my"]},{"Key":"improved upon","Fragments":["it."]},{"Key":"used (:require","Fragments":["[clojure.string"]},{"Key":"made code","Fragments":["short."]},{"Key":"find last","Fragments":["\"?\""]},{"Key":"last \"?\"","Fragments":["by"]},{"Key":"\"?\" by","Fragments":["using"]},{"Key":"will find","Fragments":["blank"]},{"Key":"find blank","Fragments":["string"]},{"Key":"blank string","Fragments":["with"]},{"Key":"with blank?","Fragments":["function."]},{"Key":" Three","Fragments":["is"]},{"Key":"Three is","Fragments":["a"]},{"Key":"use to","Fragments":["replace","replace","your","simplify","make","implement","determine"]},{"Key":"replace your","Fragments":["add-word.","count","regex","\"cond\"","silence?","check"]},{"Key":"java string","Fragments":["methods"]},{"Key":"Also nesting","Fragments":["defn"]},{"Key":"nesting defn","Fragments":["does"]},{"Key":"defn does","Fragments":["not"]},{"Key":"work how","Fragments":["you"]},{"Key":"works perhaps?","Fragments":["This"]},{"Key":"perhaps? This","Fragments":["does"]},{"Key":"not lexically","Fragments":["scope,"]},{"Key":"lexically scope,","Fragments":["but"]},{"Key":"scope, but","Fragments":["instead"]},{"Key":"instead defines","Fragments":["the"]},{"Key":"defines the","Fragments":["function"]},{"Key":"the global","Fragments":["level","expression"]},{"Key":"global level","Fragments":["of"]},{"Key":"has functions","Fragments":["for","`lower-case`"]},{"Key":"for converting","Fragments":["to"]},{"Key":"converting to","Fragments":["upper","upper","a","string"]},{"Key":"to upper","Fragments":["and","and"]},{"Key":"upper and","Fragments":["lower","lower"]},{"Key":"lower case;","Fragments":["the"]},{"Key":"case; the","Fragments":["String"]},{"Key":"String method","Fragments":["calls"]},{"Key":"method calls","Fragments":["work"]},{"Key":"calls work","Fragments":["too,"]},{"Key":"work too,","Fragments":["of"]},{"Key":"too, of","Fragments":["course,"]},{"Key":"usually preferred","Fragments":["to"]},{"Key":"use native","Fragments":["functions"]},{"Key":"native functions","Fragments":["when"]},{"Key":"when possible.","Fragments":["You"]},{"Key":"possible. You","Fragments":["can"]},{"Key":"also replace","Fragments":["\".endsWith\"","\"if-not..\""]},{"Key":"replace \".endsWith\"","Fragments":["with"]},{"Key":"\".endsWith\" with","Fragments":["\"last\""]},{"Key":"with \"last\"","Fragments":["if"]},{"Key":"\"last\" if","Fragments":["you"]},{"Key":"you like.","Fragments":["The"]},{"Key":"like. The","Fragments":["cond"]},{"Key":"The cond","Fragments":["looks","with"]},{"Key":"cond looks","Fragments":["good."]},{"Key":"expression in","Fragments":["your","your"]},{"Key":"your silence?","Fragments":["function;"]},{"Key":"silence? function;","Fragments":["it's"]},{"Key":"function; it's","Fragments":["likely"]},{"Key":"it's likely","Fragments":["to"]},{"Key":" Likewise,","Fragments":["it's"]},{"Key":"Likewise, it's","Fragments":["slightly"]},{"Key":"it's slightly","Fragments":["more"]},{"Key":"clojure.string for","Fragments":["things"]},{"Key":"for things","Fragments":["like"]},{"Key":"like converting","Fragments":["to"]},{"Key":"lower case,","Fragments":["though"]},{"Key":"case, though","Fragments":["the","--"]},{"Key":"methods obviously","Fragments":["also"]},{"Key":"obviously also","Fragments":["work."]},{"Key":"out clojure.string/blank?","Fragments":["--","--"]},{"Key":"clojure.string/blank? --","Fragments":["it","it"]},{"Key":"simplify a","Fragments":["bit"]},{"Key":"Also, all-caps?","Fragments":["potentially"]},{"Key":"all-caps? potentially","Fragments":["does"]},{"Key":"potentially does","Fragments":["more"]},{"Key":"does more","Fragments":["work"]},{"Key":"more work","Fragments":["than","than","for"]},{"Key":"work than","Fragments":["it","required."]},{"Key":"really needs","Fragments":["to.","to"]},{"Key":"needs to.","Fragments":["It"]},{"Key":"to. It","Fragments":["should"]},{"Key":"return false","Fragments":["if","or"]},{"Key":"false if","Fragments":["there"]},{"Key":"are any","Fragments":["lower-case","letters","line"]},{"Key":"any lower-case","Fragments":["letters,"]},{"Key":"lower-case letters,","Fragments":["so"]},{"Key":"letters, so","Fragments":["you"]},{"Key":"off scanning","Fragments":["the"]},{"Key":"scanning the","Fragments":["input","result.","input"]},{"Key":"string looking","Fragments":["for"]},{"Key":"one rather","Fragments":["than"]},{"Key":"than filtering","Fragments":["the"]},{"Key":"filtering the","Fragments":["entire","base","bad"]},{"Key":"then scanning","Fragments":["the"]},{"Key":"the result.","Fragments":["If","I"]},{"Key":"result. If","Fragments":["the"]},{"Key":"second character","Fragments":["is"]},{"Key":"is lower","Fragments":["case"]},{"Key":"even need","Fragments":["to"]},{"Key":"replace some","Fragments":["code"]},{"Key":"strings count","Fragments":["as"]},{"Key":"as true","Fragments":["in"]},{"Key":"in boolean","Fragments":["contexts:"]},{"Key":"user=\u003e (if","Fragments":["\"abcd\"","\"abcd\""]},{"Key":"(if \"abcd\"","Fragments":[":yes",":true"]},{"Key":"\"abcd\" :yes","Fragments":[":no)"]},{"Key":"at clojure.string/blank?","Fragments":["for"]},{"Key":"clojure.string/blank? for","Fragments":["a"]},{"Key":"of simplification","Fragments":["here."]},{"Key":"Clojure, strings","Fragments":["always"]},{"Key":"strings always","Fragments":["count"]},{"Key":"always count","Fragments":["as"]},{"Key":"as true,","Fragments":["which"]},{"Key":"true, which","Fragments":["you"]},{"Key":"your advantage","Fragments":["here."]},{"Key":"\"abcd\" :true","Fragments":[":false)"]},{"Key":"using (declare)","Fragments":["rather"]},{"Key":"(declare) rather","Fragments":["than"]},{"Key":"than putting","Fragments":["the"]},{"Key":"functions above","Fragments":["their"]},{"Key":"above their","Fragments":["first"]},{"Key":"their first","Fragments":["use?"]},{"Key":"first use?","Fragments":["In"]},{"Key":"use? In","Fragments":["the"]},{"Key":"wild, (declare)","Fragments":["is"]},{"Key":"(declare) is","Fragments":["pretty"]},{"Key":"pretty rare","Fragments":["and"]},{"Key":"rare and","Fragments":["mostly"]},{"Key":"mostly used","Fragments":["for","in"]},{"Key":"situations like","Fragments":["a","your"]},{"Key":"each invokes","Fragments":["the"]},{"Key":"invokes the","Fragments":["other."]},{"Key":"the spirit","Fragments":["of","of","of","of"]},{"Key":"spirit of","Fragments":["familiarizing","exercism...","the","this"]},{"Key":"of familiarizing","Fragments":["you"]},{"Key":"familiarizing you","Fragments":["with"]},{"Key":"with clojure.core,","Fragments":["check"]},{"Key":"clojure.core, check","Fragments":["out"]},{"Key":"\"frequencies\" function;","Fragments":["it"]},{"Key":"function; it","Fragments":["should"]},{"Key":"of interest","Fragments":["for"]},{"Key":"interest for","Fragments":["this"]},{"Key":"would perhaps","Fragments":["be"]},{"Key":"perhaps be","Fragments":["a"]},{"Key":"it used","Fragments":["-\u003e","in"]},{"Key":"used -\u003e","Fragments":["rather"]},{"Key":"-\u003e rather","Fragments":["than"]},{"Key":"than nested","Fragments":["function"]},{"Key":"using `declare`","Fragments":["just","and"]},{"Key":"`declare` just","Fragments":["because"]},{"Key":"functions implemented","Fragments":["before"]},{"Key":"implemented before","Fragments":["in"]},{"Key":"before in","Fragments":["the"]},{"Key":"file. It's","Fragments":["just"]},{"Key":"It's just","Fragments":["a","that","a","an"]},{"Key":"taste, and","Fragments":["in"]},{"Key":"in fact,","Fragments":["if"]},{"Key":"fact, if","Fragments":["you"]},{"Key":"you see","Fragments":["my","yourself","the"]},{"Key":"submission, there's","Fragments":["a"]},{"Key":"positive comment","Fragments":["about"]},{"Key":"comment about","Fragments":["this"]},{"Key":"common and","Fragments":["accepted"]},{"Key":"and accepted","Fragments":["practice"]},{"Key":"accepted practice","Fragments":["in"]},{"Key":"community, as","Fragments":["I'm"]},{"Key":"learned it","Fragments":["reading"]},{"Key":"it reading","Fragments":["the"]},{"Key":"the book","Fragments":["\"The"]},{"Key":"book \"The","Fragments":["Joy"]},{"Key":"\"The Joy","Fragments":["of"]},{"Key":"Joy of","Fragments":["Clojure\"","Clojure's"]},{"Key":"of Clojure\"","Fragments":["and"]},{"Key":"Clojure\" and","Fragments":["I"]},{"Key":"I noted","Fragments":["it"]},{"Key":"noted it","Fragments":["was"]},{"Key":"was used","Fragments":["very","in"]},{"Key":"often (probably","Fragments":["in"]},{"Key":"(probably in","Fragments":["order"]},{"Key":"to enable","Fragments":["a"]},{"Key":"enable a","Fragments":["more"]},{"Key":"more outside-in","Fragments":["design"]},{"Key":"outside-in design","Fragments":["model,"]},{"Key":"design model,","Fragments":["declaring"]},{"Key":"model, declaring","Fragments":["public"]},{"Key":"declaring public","Fragments":["and"]},{"Key":"generic functions","Fragments":["before"]},{"Key":"functions before","Fragments":["and"]},{"Key":"before and","Fragments":["dealing","cobbled"]},{"Key":"and dealing","Fragments":["with"]},{"Key":"the guts","Fragments":["of"]},{"Key":"guts of","Fragments":["it"]},{"Key":"it afterwards).","Fragments":["The"]},{"Key":"afterwards). The","Fragments":["[https://github.com/bbatsov/clojure-style-guide#syntax](clojure-style-guide)"]},{"Key":"The [https://github.com/bbatsov/clojure-style-guide#syntax](clojure-style-guide)","Fragments":["encourages"]},{"Key":"[https://github.com/bbatsov/clojure-style-guide#syntax](clojure-style-guide) encourages","Fragments":["the"]},{"Key":"encourages the","Fragments":["use"]},{"Key":"is replacing","Fragments":["the"]},{"Key":"an if-let","Fragments":["and"]},{"Key":"if-let and","Fragments":["a"]},{"Key":"(defn- transcribe","Fragments":["[char]","[char]"]},{"Key":" (if-let","Fragments":["[rchar","[v"]},{"Key":"(if-let [rchar","Fragments":["({\\C"]},{"Key":"[rchar ({\\C","Fragments":["\\C,"]},{"Key":"({\\C \\C,","Fragments":["\\G"]},{"Key":"\\G \\G,","Fragments":["\\A"]},{"Key":"\\G, \\A","Fragments":["\\A,"]},{"Key":"\\A \\A,","Fragments":["\\T"]},{"Key":"\\T \\U}","Fragments":["char)]"]},{"Key":" (throw","Fragments":["(AssertionError."]},{"Key":"(throw (AssertionError.","Fragments":["\"Invalid","\"Invalid","\"Invalid","\"Invalid"]},{"Key":"(AssertionError. \"Invalid","Fragments":["input!\"))))","input!\"))))","input!\"))))","nucleotide\")))"]},{"Key":"Just a","Fragments":["personal","style"]},{"Key":"looked for","Fragments":["those—these","a"]},{"Key":"for those—these","Fragments":["were"]},{"Key":"those—these were","Fragments":["just"]},{"Key":"were just","Fragments":["the"]},{"Key":"first solutions","Fragments":["I"]},{"Key":"solutions I","Fragments":["found","realized"]},{"Key":"found on","Fragments":["the"]},{"Key":"the interwebs...","Fragments":["thanks!"]},{"Key":" blcooley's","Fragments":["post"]},{"Key":"blcooley's post","Fragments":["is"]},{"Key":"post is","Fragments":["nifty."]},{"Key":"is nifty.","Fragments":["If"]},{"Key":"nifty. If","Fragments":["you"]},{"Key":"keep your","Fragments":["code"]},{"Key":"code structure","Fragments":["(which","reflects"]},{"Key":"structure (which","Fragments":["is"]},{"Key":"clearer IMO),","Fragments":["another"]},{"Key":"IMO), another","Fragments":["use"]},{"Key":"another use","Fragments":["of"]},{"Key":"(some #{char}","Fragments":["#{\\C","#{\\C"]},{"Key":"#{char} #{\\C","Fragments":["\\G","\\G"]},{"Key":"#{\\C \\G","Fragments":["\\A})","\\A","\\T"]},{"Key":"\\G \\A})","Fragments":["char"]},{"Key":"(= char","Fragments":["\\T)"]},{"Key":"char \\T)","Fragments":["\\U"]},{"Key":":else (throw","Fragments":["(AssertionError."]},{"Key":"Also a","Fragments":["small"]},{"Key":"char `\\U`","Fragments":["instead"]},{"Key":"`\\U` instead","Fragments":["of"]},{"Key":"string `\"U\"`","Fragments":["for"]},{"Key":"`\"U\"` for","Fragments":["consistency."]},{"Key":"i think","Fragments":["the"]},{"Key":"the shout?","Fragments":["predicate"]},{"Key":"shout? predicate","Fragments":["is"]},{"Key":"my favorite.","Fragments":["it"]},{"Key":"favorite. it","Fragments":["reminds"]},{"Key":"visual basic","Fragments":["I"]},{"Key":"basic I","Fragments":["used"]},{"Key":"discovered `frequencies`","Fragments":["in"]},{"Key":"later exercise,","Fragments":["just"]},{"Key":"exercise, just","Fragments":["didn't"]},{"Key":"to update","Fragments":["this"]},{"Key":"update this","Fragments":["one","time"]},{"Key":"Yes, thank","Fragments":["you."]},{"Key":"Still getting","Fragments":["used"]},{"Key":"to scoping","Fragments":["in"]},{"Key":"scoping in","Fragments":["clojure."]},{"Key":"first stab","Fragments":["at"]},{"Key":"stab at","Fragments":["this"]},{"Key":"tests pass.","Fragments":["which"]},{"Key":"pass. which","Fragments":["it"]},{"Key":"it does,","Fragments":["however"]},{"Key":"does, however","Fragments":["it"]},{"Key":"really describe","Fragments":["what"]},{"Key":"accomplish or","Fragments":["model."]},{"Key":"So maybe,","Fragments":["I"]},{"Key":"maybe, I","Fragments":["should"]},{"Key":"verbose and","Fragments":["write","possibly"]},{"Key":"and write","Fragments":["these","`(dna-rna-map"]},{"Key":"write these","Fragments":["as"]},{"Key":"these as","Fragments":["business"]},{"Key":"as business","Fragments":["rules"]},{"Key":"business rules","Fragments":["of"]},{"Key":"rules of","Fragments":["some"]},{"Key":" perhaps","Fragments":["I'll"]},{"Key":"perhaps I'll","Fragments":["try"]},{"Key":"a multimethod","Fragments":["and"]},{"Key":"multimethod and","Fragments":["some"]},{"Key":"some constants","Fragments":["and"]},{"Key":"constants and","Fragments":["see"]},{"Key":"always create","Fragments":["separate"]},{"Key":"create separate","Fragments":["functions","functions"]},{"Key":"also `letfn`","Fragments":["that"]},{"Key":"`letfn` that","Fragments":["might","can"]},{"Key":"might useful","Fragments":["if"]},{"Key":"useful if","Fragments":["you","the"]},{"Key":"spelling error","Fragments":["and"]},{"Key":"error and","Fragments":["switched"]},{"Key":"and switched","Fragments":["to"]},{"Key":"Even when","Fragments":["there"]},{"Key":"two arguments?","Fragments":["#(="]},{"Key":"arguments? #(=","Fragments":["%"]},{"Key":"#(= %","Fragments":["%2)"]},{"Key":"% %2)","Fragments":["looks"]},{"Key":"%2) looks","Fragments":["\"unbalanced\""]},{"Key":"looks \"unbalanced\"","Fragments":["to"]},{"Key":"\"unbalanced\" to","Fragments":["me."]},{"Key":"there performance","Fragments":["gains"]},{"Key":"performance gains","Fragments":["for"]},{"Key":"gains for","Fragments":["using"]},{"Key":"clojure functions","Fragments":["over","where"]},{"Key":"functions over","Fragments":["java"]},{"Key":"over java","Fragments":["functions?"]},{"Key":"at `clojure.core/frequencies`","Fragments":["(unless"]},{"Key":"`clojure.core/frequencies` (unless","Fragments":["you"]},{"Key":"(unless you","Fragments":["already"]},{"Key":"already know","Fragments":["of","that"]},{"Key":"it of","Fragments":["course)."]},{"Key":"of course).","Fragments":["Also,"]},{"Key":"course). Also,","Fragments":["you"]},{"Key":"always use","Fragments":["`clojure.string/lower-case`","`dec`"]},{"Key":"use `clojure.string/lower-case`","Fragments":["instead"]},{"Key":"you @jeanne,","Fragments":["your"]},{"Key":"@jeanne, your","Fragments":["feedback"]},{"Key":" holy","Fragments":["crap"]},{"Key":"holy crap","Fragments":["I","that's"]},{"Key":"crap I","Fragments":["can't"]},{"Key":"can't believe","Fragments":["I","it","it"]},{"Key":"believe I","Fragments":["missed"]},{"Key":"missed that!","Fragments":["That's"]},{"Key":"that! That's","Fragments":["what"]},{"Key":"these after","Fragments":["being"]},{"Key":"after being","Fragments":["up"]},{"Key":"being up","Fragments":["for"]},{"Key":"for too","Fragments":["long","long"]},{"Key":" Macro","Fragments":["mania!"]},{"Key":"Tried out","Fragments":["a"]},{"Key":"and defrecord.","Fragments":["Also"]},{"Key":"defrecord. Also","Fragments":["simplified"]},{"Key":"Also simplified","Fragments":["`advance`"]},{"Key":"simplified `advance`","Fragments":["using"]},{"Key":"`advance` using","Fragments":["`update-in`"]},{"Key":"using `update-in`","Fragments":["along"]},{"Key":"`update-in` along","Fragments":["with"]},{"Key":"with movement","Fragments":["data."]},{"Key":" `zero?`","Fragments":["and"]},{"Key":"`zero?` and","Fragments":["`pos?`"]},{"Key":"and `pos?`","Fragments":["can"]},{"Key":"`pos?` can","Fragments":["be"]},{"Key":"for `=","Fragments":["0`"]},{"Key":"`= 0`","Fragments":["and"]},{"Key":"0` and","Fragments":["`not="]},{"Key":"and `not=","Fragments":["0`"]},{"Key":"`not= 0`","Fragments":["respectively."]},{"Key":"`cond` might","Fragments":["not","be"]},{"Key":"necessary at","Fragments":["all.","all?"]},{"Key":"all. It's","Fragments":["a"]},{"Key":"logical evaluation","Fragments":["where"]},{"Key":"evaluation where","Fragments":["true"]},{"Key":"where true","Fragments":["expressions"]},{"Key":"true expressions","Fragments":["return"]},{"Key":"expressions return","Fragments":["true"]},{"Key":"true and","Fragments":["otherwise"]},{"Key":"and otherwise","Fragments":["returns"]},{"Key":"otherwise returns","Fragments":["false.","a"]},{"Key":"Your `radiator`","Fragments":["solution,"]},{"Key":"`radiator` solution,","Fragments":["while"]},{"Key":"solution, while","Fragments":["interesting,"]},{"Key":"while interesting,","Fragments":["is"]},{"Key":"interesting, is","Fragments":["quite"]},{"Key":"quite complex.","Fragments":["I"]},{"Key":"complex. I","Fragments":["think"]},{"Key":"simpler mathematical","Fragments":["approach"]},{"Key":"mathematical approach","Fragments":["to"]},{"Key":"to finding","Fragments":["if"]},{"Key":"finding if","Fragments":["the"]},{"Key":"the Queens","Fragments":["are"]},{"Key":"Queens are","Fragments":["on"]},{"Key":"are on","Fragments":["the","the"]},{"Key":"same row,","Fragments":["column,"]},{"Key":"row, column,","Fragments":["or"]},{"Key":"column, or","Fragments":["diagonal"]},{"Key":"or diagonal","Fragments":["from"]},{"Key":"diagonal from","Fragments":["each"]},{"Key":"the building","Fragments":["of"]},{"Key":"building of","Fragments":["the"]},{"Key":"the for","Fragments":["comprehension.","in","macro."]},{"Key":"The `can-attack`","Fragments":["function"]},{"Key":"`can-attack` function","Fragments":["might"]},{"Key":"function might","Fragments":["be"]},{"Key":"simplified by","Fragments":["using","using"]},{"Key":"using destructuring.","Fragments":["See:"]},{"Key":"destructuring. See:","Fragments":["http://clojure.org/special_forms"]},{"Key":"The `board-string`","Fragments":["let"]},{"Key":"`board-string` let","Fragments":["values"]},{"Key":"let values","Fragments":["have"]},{"Key":"a common","Fragments":["pattern","function","method","combination"]},{"Key":"common pattern","Fragments":["where"]},{"Key":"pattern where","Fragments":["the"]},{"Key":"last value","Fragments":["passed"]},{"Key":"value passed","Fragments":["to"]},{"Key":"one. This","Fragments":["is"]},{"Key":"thread last","Fragments":["macro","macro","macro."]},{"Key":"last macro","Fragments":["`-\u003e\u003e`","which"]},{"Key":"macro `-\u003e\u003e`","Fragments":["might"]},{"Key":"`-\u003e\u003e` might","Fragments":["be"]},{"Key":"be possible","Fragments":["to","to"]},{"Key":"simplify that","Fragments":["function","function"]},{"Key":"function down","Fragments":["to"]},{"Key":"single map","Fragments":["by"]},{"Key":"map by","Fragments":["making","concatenating","key"]},{"Key":"that `join`","Fragments":["will"]},{"Key":"`join` will","Fragments":["convert"]},{"Key":"will convert","Fragments":["a"]},{"Key":"also append","Fragments":["the"]},{"Key":"append the","Fragments":["newline"]},{"Key":"the newline","Fragments":["onto"]},{"Key":"newline onto","Fragments":["those"]},{"Key":"onto those","Fragments":["values"]},{"Key":"those values","Fragments":["in","instead"]},{"Key":"same map","Fragments":["function"]},{"Key":"that every","Fragments":["line","function,"]},{"Key":"every line","Fragments":["will"]},{"Key":"line will","Fragments":["have"]},{"Key":"newline and","Fragments":["you"]},{"Key":"to append","Fragments":["another"]},{"Key":"one at","Fragments":["the"]},{"Key":"`letfn` usage","Fragments":["closing"]},{"Key":"usage closing","Fragments":["over"]},{"Key":"closing over","Fragments":["the"]},{"Key":"year value.","Fragments":["That"]},{"Key":"value. That","Fragments":["makes"]},{"Key":"function read","Fragments":["really"]},{"Key":"read really","Fragments":["nicely."]},{"Key":"Converted board-string","Fragments":["to"]},{"Key":"board-string to","Fragments":["use"]},{"Key":"which reads","Fragments":["a"]},{"Key":"reads a","Fragments":["lot","lot"]},{"Key":"you're only","Fragments":["using"]},{"Key":"only using","Fragments":["a"]},{"Key":"a handful","Fragments":["of"]},{"Key":"handful of","Fragments":["functions"]},{"Key":"from clojure.string,","Fragments":["it"]},{"Key":"clojure.string, it","Fragments":["is"]},{"Key":"slightly better","Fragments":["form","in"]},{"Key":"better form","Fragments":["to"]},{"Key":"form to","Fragments":["explicitly","just","reduce"]},{"Key":"explicitly name","Fragments":["them"]},{"Key":"name them","Fragments":["using","\"s\""]},{"Key":"using :only","Fragments":["in"]},{"Key":":only in","Fragments":["your"]},{"Key":"your ns","Fragments":["form;","form","declaration,"]},{"Key":"ns form;","Fragments":["that"]},{"Key":"form; that","Fragments":["way"]},{"Key":"way a","Fragments":["reader"]},{"Key":"reader can","Fragments":["easily"]},{"Key":"easily see","Fragments":["which"]},{"Key":"which functions","Fragments":["come","form"]},{"Key":"functions come","Fragments":["from","from.","from.","from."]},{"Key":"come from","Fragments":["where."]},{"Key":"actual code","Fragments":["looks"]},{"Key":"should help","Fragments":["you"]},{"Key":"you simplify","Fragments":["the","your","your"]},{"Key":"than individually","Fragments":["folding"]},{"Key":"individually folding","Fragments":["each"]},{"Key":"folding each","Fragments":["word"]},{"Key":"case using","Fragments":["\"map\","]},{"Key":"using \"map\",","Fragments":["you"]},{"Key":"\"map\", you","Fragments":["could"]},{"Key":"also fold","Fragments":["the"]},{"Key":"fold the","Fragments":["entire"]},{"Key":"entire input","Fragments":["string","string"]},{"Key":"string before","Fragments":["splitting","tokenizing","you"]},{"Key":"splitting it;","Fragments":["that'd"]},{"Key":"it; that'd","Fragments":["be"]},{"Key":"that'd be","Fragments":["a"]},{"Key":"to remember","Fragments":["is"]},{"Key":"remember is","Fragments":["that"]},{"Key":"or filter","Fragments":["if"]},{"Key":"filter if","Fragments":["it"]},{"Key":"the arity","Fragments":["needed."]},{"Key":"arity needed.","Fragments":["When"]},{"Key":"needed. When","Fragments":["you"]},{"Key":"see yourself","Fragments":["making"]},{"Key":"yourself making","Fragments":["an"]},{"Key":"making an","Fragments":["anonymous"]},{"Key":"just passes","Fragments":["through"]},{"Key":"passes through","Fragments":["the"]},{"Key":"the arguments,","Fragments":["you"]},{"Key":"arguments, you","Fragments":["can"]},{"Key":"can generally","Fragments":["just"]},{"Key":"generally just","Fragments":["use"]},{"Key":" e.g.","Fragments":["`#(not=","`#(vector","you","`let"]},{"Key":"e.g. `#(not=","Fragments":["%1"]},{"Key":"`#(not= %1","Fragments":["%2)`"]},{"Key":"%1 %2)`","Fragments":["calls","is"]},{"Key":"%2)` calls","Fragments":["`not=`"]},{"Key":"calls `not=`","Fragments":["with"]},{"Key":"`not=` with","Fragments":["2"]},{"Key":"2 arguments,","Fragments":["but"]},{"Key":"arguments, but","Fragments":["the"]},{"Key":"same is","Fragments":["true"]},{"Key":"is true","Fragments":["of","(anding"]},{"Key":"true of","Fragments":["the"]},{"Key":"the simpler","Fragments":["function","approach"]},{"Key":"simpler function","Fragments":["`not=`"]},{"Key":"`not=` on","Fragments":["its"]},{"Key":"its own.","Fragments":["Similarly"]},{"Key":"own. Similarly","Fragments":["there"]},{"Key":"Similarly there","Fragments":["is"]},{"Key":"a `true?`","Fragments":["function"]},{"Key":"`true?` function","Fragments":["that"]},{"Key":"tests the","Fragments":["truth"]},{"Key":"the truth","Fragments":["of"]},{"Key":"truth of","Fragments":["an"]},{"Key":"was typing","Fragments":["the"]},{"Key":"version, I","Fragments":["realized","got"]},{"Key":"function wasn't","Fragments":["needed"]},{"Key":"wasn't needed","Fragments":["at"]},{"Key":"all. I","Fragments":["could","saw"]},{"Key":"could simply","Fragments":["map","check"]},{"Key":"simply map","Fragments":["the"]},{"Key":"the \"=\"","Fragments":["function."]},{"Key":" `interleave`","Fragments":["and"]},{"Key":"`interleave` and","Fragments":["`partition","really"]},{"Key":"and `partition","Fragments":["2`"]},{"Key":"2` could","Fragments":["be"]},{"Key":"be combined","Fragments":["into","like","to","into"]},{"Key":"combined into","Fragments":["a","a"]},{"Key":"simple `map`","Fragments":["function"]},{"Key":"`map` function","Fragments":["call.","instead"]},{"Key":"also idiomatic","Fragments":["to"]},{"Key":"leave parens","Fragments":["on"]},{"Key":"last function","Fragments":["line,","that"]},{"Key":"function line,","Fragments":["so"]},{"Key":"line, so","Fragments":["I'd"]},{"Key":"I'd end","Fragments":["it"]},{"Key":"the Protocol.","Fragments":["The"]},{"Key":"Protocol. The","Fragments":["turn"]},{"Key":"The turn","Fragments":["functions"]},{"Key":"turn functions","Fragments":["as"]},{"Key":"as just","Fragments":["a","`%`","`join`","`%`","a"]},{"Key":"map are","Fragments":["also"]},{"Key":"For `move`","Fragments":["you"]},{"Key":"`move` you","Fragments":["might"]},{"Key":"the `update-in`","Fragments":["function.","function"]},{"Key":"`update-in` function.","Fragments":["It"]},{"Key":"With your","Fragments":["Robot"]},{"Key":"your Robot","Fragments":["record,"]},{"Key":"Robot record,","Fragments":["you"]},{"Key":"record, you","Fragments":["don't"]},{"Key":"actually need","Fragments":["to","to","the","to","a"]},{"Key":"the coordinates","Fragments":["or"]},{"Key":"coordinates or","Fragments":["bearings"]},{"Key":"or bearings","Fragments":["from"]},{"Key":"bearings from","Fragments":["the"]},{"Key":"the `this`","Fragments":["as"]},{"Key":"`this` as","Fragments":["a"]},{"Key":"map because","Fragments":["you"]},{"Key":"because you","Fragments":["already","could","can","can"]},{"Key":"already have","Fragments":["them"]},{"Key":"the record","Fragments":["itself."]},{"Key":"record itself.","Fragments":["e.g."]},{"Key":" (-\u003eRobot","Fragments":["coordinates"]},{"Key":"(-\u003eRobot coordinates","Fragments":["(turn-left"]},{"Key":"coordinates (turn-left","Fragments":["bearing)))"]},{"Key":" `total`","Fragments":["could","could"]},{"Key":"`total` could","Fragments":["be","be"]},{"Key":"avoid having","Fragments":["to","to","to"]},{"Key":"go backwards","Fragments":["on"]},{"Key":"backwards on","Fragments":["the"]},{"Key":"last day","Fragments":["of"]},{"Key":"day of","Fragments":["the"]},{"Key":"month by","Fragments":["taking"]},{"Key":"by taking","Fragments":["into"]},{"Key":"account the","Fragments":["fact"]},{"Key":"a day","Fragments":["that's"]},{"Key":"day that's","Fragments":["in"]},{"Key":"last 7","Fragments":["days"]},{"Key":"7 days","Fragments":["of"]},{"Key":"days of","Fragments":["the"]},{"Key":"the month.","Fragments":["That"]},{"Key":"month. That","Fragments":["would"]},{"Key":"to always","Fragments":["search"]},{"Key":"always search","Fragments":["forward"]},{"Key":"search forward","Fragments":["from"]},{"Key":"forward from","Fragments":["a"]},{"Key":" `(+","Fragments":["-6)`"]},{"Key":"`(+ -6)`","Fragments":["is"]},{"Key":"-6)` is","Fragments":["a"]},{"Key":"little funny.","Fragments":["Couldn't"]},{"Key":"funny. Couldn't","Fragments":["that"]},{"Key":"Couldn't that","Fragments":["just"]},{"Key":"be `(-","Fragments":["6)`?"]},{"Key":" Multiple","Fragments":["`doseq`"]},{"Key":"Multiple `doseq`","Fragments":["can"]},{"Key":"`doseq` can","Fragments":["be"]},{"Key":"combined like","Fragments":["`let`"]},{"Key":"like `let`","Fragments":["bindings"]},{"Key":" `(doseq","Fragments":["[day-name"]},{"Key":"`(doseq [day-name","Fragments":["(keys"]},{"Key":"[day-name (keys","Fragments":["day-map)"]},{"Key":"(keys day-map)","Fragments":["range-name"]},{"Key":"day-map) range-name","Fragments":["['first"]},{"Key":"range-name ['first","Fragments":["'second"]},{"Key":"['first 'second","Fragments":["'third"]},{"Key":"'second 'third","Fragments":["'fourth"]},{"Key":"'third 'fourth","Fragments":["'last]]`"]},{"Key":"Why the","Fragments":["map"]},{"Key":"to lookup","Fragments":["the"]},{"Key":"lookup the","Fragments":["planet"]},{"Key":"the planet","Fragments":["period?","factor","factor"]},{"Key":"planet period?","Fragments":["You're"]},{"Key":"period? You're","Fragments":["passing"]},{"Key":"You're passing","Fragments":["a"]},{"Key":"passing a","Fragments":["hardcoded"]},{"Key":"a hardcoded","Fragments":["value"]},{"Key":"hardcoded value","Fragments":["into"]},{"Key":"value into","Fragments":["the"]},{"Key":"the `on-planet`","Fragments":["function."]},{"Key":"`on-planet` function.","Fragments":["Couldn't"]},{"Key":"function. Couldn't","Fragments":["it"]},{"Key":"Couldn't it","Fragments":["just"]},{"Key":"the period","Fragments":["itself?","values"]},{"Key":"the periods,","Fragments":["then"]},{"Key":"periods, then","Fragments":["you"]},{"Key":"at creating","Fragments":["the"]},{"Key":"creating the","Fragments":["functions"]},{"Key":"things look","Fragments":["very"]},{"Key":"look very","Fragments":["nice?"]},{"Key":"probably help","Fragments":["to","clean"]},{"Key":"help to","Fragments":["separate","make","think"]},{"Key":"separate out","Fragments":["and"]},{"Key":"and name","Fragments":["a"]},{"Key":"or two.","Fragments":["I"]},{"Key":"two. I","Fragments":["think","don't"]},{"Key":"are cleaner","Fragments":["solutions."]},{"Key":"cleaner solutions.","Fragments":["I"]},{"Key":"solutions. I","Fragments":["found"]},{"Key":"found a","Fragments":["solution","blank?","more","bunch"]},{"Key":"using `reduce-kv`","Fragments":["and","would"]},{"Key":"`reduce-kv` and","Fragments":["`into`"]},{"Key":"and `into`","Fragments":["fairly"]},{"Key":"`into` fairly","Fragments":["clean."]},{"Key":"First solution","Fragments":["I've"]},{"Key":"solution I've","Fragments":["seen","seen"]},{"Key":"Java Calendar","Fragments":["objects.","is","APIs,","APIs"]},{"Key":"Calendar objects.","Fragments":["So"]},{"Key":"objects. So","Fragments":["props"]},{"Key":"So props","Fragments":["on"]},{"Key":"props on","Fragments":["that."]},{"Key":"that. It","Fragments":["looks"]},{"Key":"The \"teenth\"","Fragments":["days"]},{"Key":"\"teenth\" days","Fragments":["could"]},{"Key":"days could","Fragments":["be"]},{"Key":"be derived","Fragments":["from"]},{"Key":"derived from","Fragments":["your"]},{"Key":"your `day-names`","Fragments":["data."]},{"Key":"`response-for` read","Fragments":["as"]},{"Key":"read as","Fragments":["much"]},{"Key":"requirements as","Fragments":["possible"]},{"Key":"possible through","Fragments":["the"]},{"Key":"of problem-specific","Fragments":["predicates"]},{"Key":"problem-specific predicates","Fragments":["`question?`"]},{"Key":"predicates `question?`","Fragments":["`shout?`"]},{"Key":"`question?` `shout?`","Fragments":["and"]},{"Key":"and `nothing-said?`.","Fragments":["Then"]},{"Key":"`nothing-said?`. Then","Fragments":["I"]},{"Key":"implement each","Fragments":["of"]},{"Key":"those predicates","Fragments":["in"]},{"Key":"abstraction they","Fragments":["care"]},{"Key":"they care","Fragments":["about"]},{"Key":"care about","Fragments":["(so,","is"]},{"Key":"about (so,","Fragments":["defining"]},{"Key":"(so, defining","Fragments":["`question?`"]},{"Key":"`question?` in","Fragments":["terms"]},{"Key":"of `ends-with?`,","Fragments":["for"]},{"Key":"`ends-with?`, for","Fragments":["example."]},{"Key":"x y)","Fragments":["is"]},{"Key":"y) is","Fragments":["often"]},{"Key":"is often","Fragments":["a","written","preferred","a","written","written"]},{"Key":"often a","Fragments":["good","good","good"]},{"Key":"good time","Fragments":["to","to","to","to"]},{"Key":" `join","Fragments":["\"\"`","\"\"`","\"\"`"]},{"Key":"`join \"\"`","Fragments":["is","is","can"]},{"Key":"\"\"` is","Fragments":["equivalent","often"]},{"Key":"to `apply","Fragments":["str`"]},{"Key":"str` which","Fragments":["seems"]},{"Key":"could work","Fragments":["here"]},{"Key":"work here","Fragments":["if"]},{"Key":"here if","Fragments":["you","it"]},{"Key":"you separated","Fragments":["out"]},{"Key":"validation from","Fragments":["the","the","the","the"]},{"Key":"good, just","Fragments":["a"]},{"Key":" Map","Fragments":["lookups","equal"]},{"Key":"Map lookups","Fragments":["can"]},{"Key":"lookups can","Fragments":["take"]},{"Key":"optional default","Fragments":["argument"]},{"Key":"default argument","Fragments":["for"]},{"Key":"not matched.","Fragments":["You"]},{"Key":"matched. You","Fragments":["could"]},{"Key":"that fact","Fragments":["to","might"]},{"Key":"fact to","Fragments":["combine"]},{"Key":"the 2","Fragments":["map"]},{"Key":"2 map","Fragments":["functions"]},{"Key":"map functions","Fragments":["into"]},{"Key":"functions into","Fragments":["a","one","your","a"]},{"Key":"single one.","Fragments":["In"]},{"Key":"one. In","Fragments":["that"]},{"Key":"case a","Fragments":["simple"]},{"Key":"simple `if`","Fragments":["might"]},{"Key":"`if` might","Fragments":["function"]},{"Key":"might function","Fragments":["just"]},{"Key":"function just","Fragments":["as"]},{"Key":"well though","Fragments":["since"]},{"Key":"though since","Fragments":["it's"]},{"Key":"always either","Fragments":["1"]},{"Key":"either 1","Fragments":["or"]},{"Key":"1 or","Fragments":["0."]},{"Key":"could `reduce`","Fragments":["across"]},{"Key":"`reduce` across","Fragments":["the"]},{"Key":"the `binary-number`","Fragments":["string"]},{"Key":"`binary-number` string","Fragments":["without"]},{"Key":"string without","Fragments":["creating"]},{"Key":"without creating","Fragments":["an"]},{"Key":"creating an","Fragments":["intermediate"]},{"Key":"an intermediate","Fragments":["sequence"]},{"Key":"intermediate sequence","Fragments":["as"]},{"Key":"sequence as","Fragments":["well"]},{"Key":"well by","Fragments":["converting"]},{"Key":"by converting","Fragments":["the"]},{"Key":"converting the","Fragments":["bin-digit","individual","string.","character"]},{"Key":"the bin-digit","Fragments":["inside"]},{"Key":"bin-digit inside","Fragments":["the"]},{"Key":" Subtracting","Fragments":["one"]},{"Key":"Subtracting one","Fragments":["can"]},{"Key":"with `dec`","Fragments":["as"]},{"Key":"`dec` as","Fragments":["well"]},{"Key":"well which","Fragments":["seems"]},{"Key":"Isn't `nucleotide-count`","Fragments":["supposed"]},{"Key":"`nucleotide-count` supposed","Fragments":["to"]},{"Key":"called just","Fragments":["`count`."]},{"Key":"just `count`.","Fragments":["You"]},{"Key":"`count`. You","Fragments":["can"]},{"Key":"can still","Fragments":["reference"]},{"Key":"still reference","Fragments":["the"]},{"Key":"built-in count","Fragments":["function"]},{"Key":"count function","Fragments":["by"]},{"Key":"using it's","Fragments":["fully-qualified"]},{"Key":"it's fully-qualified","Fragments":["name"]},{"Key":"fully-qualified name","Fragments":["`clojure.core/count`"]},{"Key":"name `clojure.core/count`","Fragments":["if"]},{"Key":"`clojure.core/count` if","Fragments":["you"]},{"Key":"In `bottle-phrase`","Fragments":["and"]},{"Key":"`bottle-phrase` and","Fragments":["`second-line`"]},{"Key":"and `second-line`","Fragments":["if"]},{"Key":"`second-line` if","Fragments":["you"]},{"Key":"you reorder","Fragments":["the"]},{"Key":"conditions you","Fragments":["could"]},{"Key":"case function","Fragments":["which"]},{"Key":"little cleaner?","Fragments":["It's"]},{"Key":"cleaner? It's","Fragments":["also"]},{"Key":"also common","Fragments":["to","in"]},{"Key":"in either","Fragments":["cond"]},{"Key":"either cond","Fragments":["or"]},{"Key":"cond or","Fragments":["case"]},{"Key":"or case","Fragments":["so"]},{"Key":"case so","Fragments":["that"]},{"Key":"there aren't","Fragments":["any"]},{"Key":"aren't any","Fragments":["unexpected"]},{"Key":"any unexpected","Fragments":["conditions."]},{"Key":"In `first-line`","Fragments":["you"]},{"Key":"`first-line` you","Fragments":["generate"]},{"Key":"the bottle","Fragments":["phrase"]},{"Key":"bottle phrase","Fragments":["twice."]},{"Key":"phrase twice.","Fragments":["Could"]},{"Key":"twice. Could","Fragments":["you"]},{"Key":"only generate","Fragments":["it"]},{"Key":"generate it","Fragments":["once"]},{"Key":"it once","Fragments":["and"]},{"Key":"and reuse","Fragments":["it?"]},{"Key":"string accumulator","Fragments":["with"]},{"Key":"accumulator with","Fragments":["recursion","loop/recur."]},{"Key":"with recursion","Fragments":["in"]},{"Key":"recursion in","Fragments":["`sing`"]},{"Key":"`sing` is","Fragments":["interesting.","great,"]},{"Key":"is interesting.","Fragments":["You"]},{"Key":"interesting. You","Fragments":["might"]},{"Key":"a range?","Fragments":["That"]},{"Key":"range? That","Fragments":["might"]},{"Key":"use `(int","Fragments":["\\A)`,"]},{"Key":"`(int \\A)`,","Fragments":["for"]},{"Key":"\\A)`, for","Fragments":["example,"]},{"Key":"example, to","Fragments":["make"]},{"Key":"the ascii","Fragments":["range","chars"]},{"Key":"ascii range","Fragments":["a"]},{"Key":"range a","Fragments":["bit"]},{"Key":"the `make-comparable`","Fragments":["returning"]},{"Key":"`make-comparable` returning","Fragments":["a"]},{"Key":"be unexpected.","Fragments":["If"]},{"Key":"unexpected. If","Fragments":["you"]},{"Key":"normalized value","Fragments":["and"]},{"Key":"and passed","Fragments":["the"]},{"Key":"base `word`","Fragments":["value"]},{"Key":"`word` value","Fragments":["separately"]},{"Key":"value separately","Fragments":["to"]},{"Key":"separately to","Fragments":["`anagram-of?`"]},{"Key":"to `anagram-of?`","Fragments":["it"]},{"Key":"`anagram-of?` it","Fragments":["would"]},{"Key":"simplify things","Fragments":["a","sometimes.","quite","quite","a","a","a","a"]},{"Key":"lot and","Fragments":["allow","pulling"]},{"Key":"and allow","Fragments":["you"]},{"Key":"of `base-word`","Fragments":["and"]},{"Key":"`base-word` and","Fragments":["`normalized-word`"]},{"Key":"and `normalized-word`","Fragments":["functions"]},{"Key":"`normalized-word` functions","Fragments":["entirely."]},{"Key":"seen nice","Fragments":["solutions"]},{"Key":"nice solutions","Fragments":["using"]},{"Key":"solutions using","Fragments":["Regex","a"]},{"Key":"using Regex","Fragments":["instead"]},{"Key":"Regex instead","Fragments":["of"]},{"Key":"the Character","Fragments":["functions"]},{"Key":"Character functions","Fragments":["for"]},{"Key":"what that's","Fragments":["worth."]},{"Key":"understand. It's","Fragments":["good"]},{"Key":"functional decomposition","Fragments":["which"]},{"Key":"decomposition which","Fragments":["makes"]},{"Key":"makes each","Fragments":["of"]},{"Key":"the levels","Fragments":["of"]},{"Key":"abstraction pretty","Fragments":["clear."]},{"Key":"the `sorted-lowered`","Fragments":["back"]},{"Key":"`sorted-lowered` back","Fragments":["to"]},{"Key":"string. The","Fragments":["`=`"]},{"Key":"The `=`","Fragments":["will"]},{"Key":"will compare","Fragments":["lists"]},{"Key":"compare lists","Fragments":["as"]},{"Key":"pretty common","Fragments":["in"]},{"Key":"common in","Fragments":["Clojure","Clojure","Clojure","Clojure","files."]},{"Key":"end predicates","Fragments":["like"]},{"Key":"like `is-anagram`","Fragments":["with"]},{"Key":"`is-anagram` with","Fragments":["a"]},{"Key":"mark indicating","Fragments":["it"]},{"Key":"indicating it","Fragments":["returns"]},{"Key":"`(not (=","Fragments":["x","x","word","xx","w"]},{"Key":"x y))`","Fragments":["can","could"]},{"Key":"y))` can","Fragments":["also"]},{"Key":"as `(not=","Fragments":["x","word","a"]},{"Key":"`(not= x","Fragments":["y)`","y)`."]},{"Key":"y)` which","Fragments":["is"]},{"Key":"The recursive","Fragments":["solution","function"]},{"Key":"recursive solution","Fragments":["for"]},{"Key":"for matching","Fragments":["anagrams"]},{"Key":"matching anagrams","Fragments":["could"]},{"Key":"anagrams could","Fragments":["probably"]},{"Key":"simplified a","Fragments":["lot","bit,"]},{"Key":"lot with","Fragments":["a"]},{"Key":"Overall very","Fragments":["clear"]},{"Key":"y))` could","Fragments":["be"]},{"Key":"be simplifed","Fragments":["to","a"]},{"Key":"simplifed to","Fragments":["`(not="]},{"Key":"to `(not=","Fragments":["x"]},{"Key":"`(= (count","Fragments":["x)"]},{"Key":"(count x)","Fragments":["(count","0)`"]},{"Key":"x) (count","Fragments":["y))`"]},{"Key":"(count y))`","Fragments":["isn't"]},{"Key":"y))` isn't","Fragments":["really"]},{"Key":"necessary is","Fragments":["it?"]},{"Key":"is it?","Fragments":["The"]},{"Key":"it? The","Fragments":["comparison"]},{"Key":"The comparison","Fragments":["of","functions"]},{"Key":"the sorted/upper-cased","Fragments":["values"]},{"Key":"sorted/upper-cased values","Fragments":["would"]},{"Key":"values would","Fragments":["cover"]},{"Key":"would cover","Fragments":["that"]},{"Key":"cover that","Fragments":["condition"]},{"Key":"that condition","Fragments":["I"]},{"Key":"condition I","Fragments":["think."]},{"Key":"often good","Fragments":["to"]},{"Key":"extract repeated","Fragments":["ideas"]},{"Key":"repeated ideas","Fragments":["into"]},{"Key":"ideas into","Fragments":["a"]},{"Key":"function. e.g.","Fragments":["`sort"]},{"Key":"e.g. `sort","Fragments":["upper-case`"]},{"Key":"`sort upper-case`","Fragments":["is"]},{"Key":"upper-case` is","Fragments":["a"]},{"Key":"named and","Fragments":["reused?"]},{"Key":"think `sorted-chars`","Fragments":["can"]},{"Key":"`sorted-chars` can","Fragments":["be"]},{"Key":"simplified. `clojure.string/lower-case`","Fragments":["acts"]},{"Key":"`clojure.string/lower-case` acts","Fragments":["on"]},{"Key":"acts on","Fragments":["strings,"]},{"Key":"on strings,","Fragments":["so"]},{"Key":"strings, so","Fragments":["there's","no"]},{"Key":"turn it","Fragments":["into","into","into"]},{"Key":"and map","Fragments":["over","seems"]},{"Key":"(= word","Fragments":["poss))`"]},{"Key":"word poss))`","Fragments":["can"]},{"Key":"poss))` can","Fragments":["be"]},{"Key":"simplifed a","Fragments":["bit"]},{"Key":"bit as","Fragments":["`(not="]},{"Key":"Good calls","Fragments":["all"]},{"Key":"calls all","Fragments":["around."]},{"Key":"all around.","Fragments":["Thanks!"]},{"Key":" Strings","Fragments":["act","in","can","can","can","can","can","in","are"]},{"Key":"Strings act","Fragments":["as"]},{"Key":"act as","Fragments":["collections,"]},{"Key":"as collections,","Fragments":["so","so","so","so"]},{"Key":"collections, so","Fragments":["`sort`","there","you","you"]},{"Key":"so `sort`","Fragments":["will"]},{"Key":"`sort` will","Fragments":["work"]},{"Key":"on them","Fragments":["directly"]},{"Key":"them directly","Fragments":["without"]},{"Key":"directly without","Fragments":["turning"]},{"Key":"without turning","Fragments":["them"]},{"Key":"turning them","Fragments":["into"]},{"Key":"to normalize","Fragments":["words","the"]},{"Key":"normalize words","Fragments":["multiple"]},{"Key":"words multiple","Fragments":["times."]},{"Key":"multiple times.","Fragments":["It","Possibly"]},{"Key":"times. It","Fragments":["might"]},{"Key":"declare a","Fragments":["function"]},{"Key":"function (either","Fragments":["external","in"]},{"Key":"(either external","Fragments":["or"]},{"Key":"external or","Fragments":["in"]},{"Key":"let block)","Fragments":["so"]},{"Key":"block) so","Fragments":["you"]},{"Key":"repeat that","Fragments":["logic","here."]},{"Key":"logic multiple","Fragments":["times."]},{"Key":"When there","Fragments":["is"]},{"Key":"can write","Fragments":["it","`%1`","`nucleotide-counts`","it"]},{"Key":"just `%`","Fragments":["instead","as"]},{"Key":"`%` instead","Fragments":["of"]},{"Key":"of `%1`","Fragments":["if"]},{"Key":"`%1` if","Fragments":["you"]},{"Key":"When you're","Fragments":["declaring","using"]},{"Key":"you're declaring","Fragments":["functions"]},{"Key":"block there's","Fragments":["a"]},{"Key":"form `letfn`","Fragments":["that"]},{"Key":"might makes","Fragments":["things"]},{"Key":"Thanks about","Fragments":["the"]},{"Key":"reminder about","Fragments":["attributes"]},{"Key":"about attributes","Fragments":["in"]},{"Key":"attributes in","Fragments":["a"]},{"Key":"a record.","Fragments":["I"]},{"Key":"record. I","Fragments":["incorporated"]},{"Key":"I incorporated","Fragments":["that"]},{"Key":"incorporated that","Fragments":["change"]},{"Key":"change with","Fragments":["the","time."]},{"Key":"the update-in","Fragments":["suggestion."]},{"Key":"update-in suggestion.","Fragments":["Thanks."]},{"Key":"did combine","Fragments":["the"]},{"Key":"two mapping","Fragments":["functions,"]},{"Key":"mapping functions,","Fragments":["but"]},{"Key":"I'm leaving","Fragments":["the"]},{"Key":"leaving the","Fragments":["-\u003e\u003e"]},{"Key":"-\u003e\u003e macro","Fragments":["in."]},{"Key":"macro in.","Fragments":["I'm"]},{"Key":"in. I'm","Fragments":["rather"]},{"Key":"I'm rather","Fragments":["enamored"]},{"Key":"rather enamored","Fragments":["of"]},{"Key":"enamored of","Fragments":["the"]},{"Key":"the thought","Fragments":["of"]},{"Key":"passing sequences","Fragments":["through"]},{"Key":"sequences through","Fragments":["a"]},{"Key":"of transforms.","Fragments":["This"]},{"Key":"transforms. This","Fragments":["leaves"]},{"Key":"leaves the","Fragments":["\"parse\""]},{"Key":"the \"parse\"","Fragments":["logic"]},{"Key":"\"parse\" logic","Fragments":["separate"]},{"Key":"logic separate","Fragments":["from"]},{"Key":"separate from","Fragments":["the"]},{"Key":"the \"combine\"","Fragments":["logic,"]},{"Key":"\"combine\" logic,","Fragments":["IMHO."]},{"Key":" `re-find`","Fragments":["might","could"]},{"Key":"`re-find` might","Fragments":["be","be"]},{"Key":"validation function","Fragments":["a"]},{"Key":"the transcription","Fragments":["you","which","in"]},{"Key":"transcription you","Fragments":["could"]},{"Key":"Keep it","Fragments":["simple."]},{"Key":"it simple.","Fragments":["Multimethods"]},{"Key":"simple. Multimethods","Fragments":["would"]},{"Key":"Multimethods would","Fragments":["probably"]},{"Key":"the transformation.","Fragments":["There"]},{"Key":"transformation. There","Fragments":["are"]},{"Key":"some benefits","Fragments":["including"]},{"Key":"benefits including","Fragments":["being"]},{"Key":"including being","Fragments":["able"]},{"Key":"use very","Fragments":["simple"]},{"Key":"very simple","Fragments":["functions","`next-index`.","regular"]},{"Key":"simple functions","Fragments":["like"]},{"Key":"like string","Fragments":["replacement"]},{"Key":"replacement to","Fragments":["do"]},{"Key":" Characters","Fragments":["can","can","in","in"]},{"Key":"Characters can","Fragments":["be","be"]},{"Key":"written like","Fragments":["`\\T`","`(def","`(fn"]},{"Key":"like `\\T`","Fragments":["and"]},{"Key":"Clojure which","Fragments":["might","should","might"]},{"Key":"might allow","Fragments":["you","you","you"]},{"Key":"avoid converting","Fragments":["the","to"]},{"Key":"characters back","Fragments":["to"]},{"Key":"to Strings","Fragments":["in"]},{"Key":"Strings in","Fragments":["`(upper-case","Clojure","Clojure","Java,","Clojure"]},{"Key":"in `(upper-case","Fragments":["(str"]},{"Key":"`(upper-case (str","Fragments":["c))`."]},{"Key":"often written","Fragments":["as","as","as"]},{"Key":"as `apply","Fragments":["str`","str`."]},{"Key":"When your","Fragments":["only"]},{"Key":"your only","Fragments":["comparisons"]},{"Key":"only comparisons","Fragments":["in"]},{"Key":"comparisons in","Fragments":["a"]},{"Key":"`cond` are","Fragments":["(="]},{"Key":"are (=","Fragments":["x"]},{"Key":"x y),","Fragments":["it's"]},{"Key":"y), it's","Fragments":["often"]},{"Key":"good indicator","Fragments":["that"]},{"Key":"indicator that","Fragments":["a","you"]},{"Key":"a `case`","Fragments":["might","with","statement","and"]},{"Key":"be better.","Fragments":["In"]},{"Key":"better. In","Fragments":["this"]},{"Key":"case though,","Fragments":["you"]},{"Key":"though, you","Fragments":["only","might"]},{"Key":"have 2","Fragments":["conditions"]},{"Key":"2 conditions","Fragments":["so","is"]},{"Key":"an `if`","Fragments":["would","in","would"]},{"Key":"Clojure builtin","Fragments":["`(bigint"]},{"Key":"builtin `(bigint","Fragments":["2)`"]},{"Key":"`(bigint 2)`","Fragments":["or"]},{"Key":"2)` or","Fragments":["`2N`"]},{"Key":"or `2N`","Fragments":["instead"]},{"Key":"`2N` instead","Fragments":["of"]},{"Key":"of `(BigInteger.","Fragments":["\"2\")`."]},{"Key":"`(BigInteger. \"2\")`.","Fragments":["Although"]},{"Key":"\"2\")`. Although","Fragments":["if"]},{"Key":"Although if","Fragments":["you"]},{"Key":"go that","Fragments":["route"]},{"Key":"that route","Fragments":["you'll"]},{"Key":"route you'll","Fragments":["have"]},{"Key":"else instead","Fragments":["of"]},{"Key":"of `.pow`","Fragments":["as"]},{"Key":"`.pow` as","Fragments":["well."]},{"Key":"`re-find` could","Fragments":["be"]},{"Key":"are string","Fragments":["replace"]},{"Key":"replace functions","Fragments":["that","particularly"]},{"Key":"actual translation","Fragments":["simpler"]},{"Key":"translation simpler","Fragments":["as"]},{"Key":"simpler as","Fragments":["well."]},{"Key":"seen good","Fragments":["solution"]},{"Key":"that make","Fragments":["use"]},{"Key":"for validation","Fragments":["and"]},{"Key":"and string","Fragments":["replacement"]},{"Key":"replacement for","Fragments":["the"]},{"Key":" `(fn","Fragments":["[c]","[x]"]},{"Key":"`(fn [c]","Fragments":["(if","(validate"]},{"Key":"[c] (if","Fragments":["(="]},{"Key":"(= \\T","Fragments":["c)","%)"]},{"Key":"\\T c)","Fragments":["\\U"]},{"Key":"c) \\U","Fragments":["c))`"]},{"Key":"\\U c))`","Fragments":["can"]},{"Key":"c))` can","Fragments":["be"]},{"Key":"shortened using","Fragments":["the"]},{"Key":"function syntax","Fragments":["`#(if","which"]},{"Key":"syntax `#(if","Fragments":["(="]},{"Key":"`#(if (=","Fragments":["\\T"]},{"Key":"\\T %)","Fragments":["\\U"]},{"Key":"%) \\U","Fragments":["%)`."]},{"Key":"\\U %)`.","Fragments":["maps"]},{"Key":"%)`. maps","Fragments":["are"]},{"Key":"like `#({\\T","Fragments":["\\U}"]},{"Key":"`#({\\T \\U}","Fragments":["%"]},{"Key":"\\U} %","Fragments":["%)`"]},{"Key":"% %)`","Fragments":["would"]},{"Key":"%)` would","Fragments":["also"]},{"Key":"input prior","Fragments":["to"]},{"Key":"to converting","Fragments":["the"]},{"Key":"string. Possibly","Fragments":["a"]},{"Key":"Possibly a","Fragments":["pre"]},{"Key":"condition or","Fragments":["using"]},{"Key":"convert without","Fragments":["using"]},{"Key":"and having","Fragments":["to"]},{"Key":"convert back","Fragments":["to"]},{"Key":" @wilfred","Fragments":["thanks,"]},{"Key":"@wilfred thanks,","Fragments":["i'm"]},{"Key":"thanks, i'm","Fragments":["just"]},{"Key":"i'm just","Fragments":["getting"]},{"Key":"getting into","Fragments":["clojure","a"]},{"Key":"into clojure","Fragments":["so"]},{"Key":"so every","Fragments":["push"]},{"Key":"every push","Fragments":["in"]},{"Key":"push in","Fragments":["the"]},{"Key":"right direction","Fragments":["counts","and"]},{"Key":"direction counts","Fragments":[":)"]},{"Key":"function more","Fragments":["efficient","clear","readable."]},{"Key":"efficient by","Fragments":["avoiding"]},{"Key":"by avoiding","Fragments":["processing"]},{"Key":"avoiding processing","Fragments":["the"]},{"Key":"feedback geoff.","Fragments":["I'll"]},{"Key":"geoff. I'll","Fragments":["probably"]},{"Key":"probably submit","Fragments":["another"]},{"Key":"submit another","Fragments":["revision"]},{"Key":"another revision","Fragments":["at"]},{"Key":"revision at","Fragments":["some"]},{"Key":"partial functions.","Fragments":["I"]},{"Key":"similar approach,","Fragments":["but"]},{"Key":"approach, but","Fragments":["used","the","be"]},{"Key":"but used","Fragments":["`letfn`"]},{"Key":"used `letfn`","Fragments":["to"]},{"Key":"`letfn` to","Fragments":["capture"]},{"Key":"to capture","Fragments":["the","the"]},{"Key":"capture the","Fragments":["parameter","*intent*","requirements."]},{"Key":"to `leap-year?`","Fragments":["in"]},{"Key":"`leap-year?` in","Fragments":["a"]},{"Key":" changed","Fragments":[":require/:all","from"]},{"Key":"changed :require/:all","Fragments":["to"]},{"Key":":require/:all to","Fragments":[":use/:only"]},{"Key":"to :use/:only","Fragments":["as"]},{"Key":":use/:only as","Fragments":["suggested"]},{"Key":"Thanks sgrimm.","Fragments":["I'm"]},{"Key":"sgrimm. I'm","Fragments":["still"]},{"Key":"still new","Fragments":["at","to"]},{"Key":"at this,","Fragments":["and"]},{"Key":"the require/use/import","Fragments":["in"]},{"Key":"require/use/import in","Fragments":["the"]},{"Key":"ns form","Fragments":["is","to"]},{"Key":"mystery to","Fragments":["me,"]},{"Key":"me, I","Fragments":["knew","was","just","don't"]},{"Key":"that :refer","Fragments":[":all"]},{"Key":":all would","Fragments":["probably"]},{"Key":"probably work.","Fragments":["But"]},{"Key":"work. But","Fragments":["I"]},{"Key":"do agree","Fragments":["with"]},{"Key":"reference what","Fragments":["you"]},{"Key":"using directly.","Fragments":["I'll"]},{"Key":"directly. I'll","Fragments":["probably"]},{"Key":"probably revise","Fragments":["this"]},{"Key":"revise this","Fragments":["later"]},{"Key":"My approach","Fragments":["was","is"]},{"Key":"to record","Fragments":["the"]},{"Key":"record the","Fragments":["information"]},{"Key":"information in","Fragments":["one"]},{"Key":"place and","Fragments":["use","not"]},{"Key":"one or","Fragments":["more","more","more"]},{"Key":"more places.","Fragments":["Inlining"]},{"Key":"places. Inlining","Fragments":["the"]},{"Key":"Inlining the","Fragments":["period"]},{"Key":"period values","Fragments":["is"]},{"Key":"values is","Fragments":["fine"]},{"Key":"fine for","Fragments":["this"]},{"Key":"simple example","Fragments":["but"]},{"Key":"example but","Fragments":["what"]},{"Key":"what if","Fragments":["the","after"]},{"Key":"requirements changed","Fragments":["and"]},{"Key":"changed and","Fragments":["I"]},{"Key":"them again,","Fragments":["for"]},{"Key":"again, for","Fragments":["example"]},{"Key":"example `(defn","Fragments":["venus-year-on-mars"]},{"Key":"`(defn venus-year-on-mars","Fragments":["...`"]},{"Key":"never quite","Fragments":["grasped"]},{"Key":"quite grasped","Fragments":["the"]},{"Key":"grasped the","Fragments":["`partial`"]},{"Key":"`partial` idiom,","Fragments":["can"]},{"Key":"idiom, can","Fragments":["you"]},{"Key":"give an","Fragments":["example"]},{"Key":"Good start.","Fragments":["It's"]},{"Key":"start. It's","Fragments":["not"]},{"Key":"not covering","Fragments":["all"]},{"Key":"covering all","Fragments":["of"]},{"Key":"start extracting","Fragments":["some"]},{"Key":"to perform","Fragments":["the","runtime"]},{"Key":"perform the","Fragments":["cond","validation"]},{"Key":"cond tests.","Fragments":["That"]},{"Key":"tests. That","Fragments":["will"]},{"Key":"That will","Fragments":["allow","give","help"]},{"Key":"will allow","Fragments":["you"]},{"Key":"complex and","Fragments":["cover"]},{"Key":"and cover","Fragments":["more"]},{"Key":"cover more","Fragments":["of"]},{"Key":"own functions.","Fragments":["It"]},{"Key":"It allows","Fragments":["the"]},{"Key":"response-for to","Fragments":["stay"]},{"Key":"stay at","Fragments":["a"]},{"Key":"a higher","Fragments":["level","order","order"]},{"Key":"individual conditions","Fragments":["to"]},{"Key":"to contain","Fragments":["the","a"]},{"Key":" just","Fragments":["a"]},{"Key":" you","Fragments":["might","should"]},{"Key":"consider moving","Fragments":["the"]},{"Key":"`(defn name","Fragments":["[args])`"]},{"Key":"name [args])`","Fragments":["is"]},{"Key":"[args])` is","Fragments":["just"]},{"Key":"a shortcut","Fragments":["for"]},{"Key":"shortcut for","Fragments":["`(def"]},{"Key":"for `(def","Fragments":["name"]},{"Key":"`(def name","Fragments":["(fn"]},{"Key":"name (fn","Fragments":["[args]))`."]},{"Key":"(fn [args]))`.","Fragments":["In"]},{"Key":"[args]))`. In","Fragments":["the"]},{"Key":"end they","Fragments":["both"]},{"Key":"they both","Fragments":["create"]},{"Key":"both create","Fragments":["Vars"]},{"Key":"create Vars","Fragments":["bound"]},{"Key":"Vars bound","Fragments":["to"]},{"Key":"if things","Fragments":["like"]},{"Key":"`(= test-char","Fragments":["(last"]},{"Key":"test-char (last","Fragments":["message))`"]},{"Key":"(last message))`","Fragments":["is"]},{"Key":"message))` is","Fragments":["just"]},{"Key":"as easy","Fragments":["to","to"]},{"Key":"understand as","Fragments":["`(ends-with?","a"]},{"Key":"as `(ends-with?","Fragments":["\\?"]},{"Key":"`(ends-with? \\?","Fragments":["message)`"]},{"Key":"\\? message)`","Fragments":["though?"]},{"Key":"message)` though?","Fragments":["Sometimes"]},{"Key":"though? Sometimes","Fragments":["less"]},{"Key":"Sometimes less","Fragments":["code"]},{"Key":"just easier","Fragments":["to"]},{"Key":"other regex","Fragments":["functions"]},{"Key":"regex functions","Fragments":["like","that"]},{"Key":"like `re-find`","Fragments":["and"]},{"Key":"and `re-match`","Fragments":["that"]},{"Key":"`re-match` that","Fragments":["you"]},{"Key":"with slight","Fragments":["modifications"]},{"Key":"slight modifications","Fragments":["to"]},{"Key":"modifications to","Fragments":["your"]},{"Key":"regex that","Fragments":["would","wouldn't"]},{"Key":"them more","Fragments":["\"boolean\"","than"]},{"Key":"more \"boolean\"","Fragments":["in"]},{"Key":"\"boolean\" in","Fragments":["nature"]},{"Key":"in nature","Fragments":["as"]},{"Key":"nature as","Fragments":["opposed"]},{"Key":"to having","Fragments":["to","to"]},{"Key":"do regex,","Fragments":["count,"]},{"Key":"regex, count,","Fragments":["and"]},{"Key":"and assert","Fragments":["positive."]},{"Key":"Clojure are","Fragments":["also","'seqable'"]},{"Key":"also Collections,","Fragments":["so"]},{"Key":"Collections, so","Fragments":["you"]},{"Key":"things sometimes.","Fragments":["For"]},{"Key":"sometimes. For","Fragments":["example,"]},{"Key":"example, in","Fragments":["`nothing-said?`"]},{"Key":"in `nothing-said?`","Fragments":["you"]},{"Key":"`nothing-said?` you","Fragments":["use"]},{"Key":"use zero?","Fragments":["and","and"]},{"Key":"zero? and","Fragments":["count","pos?"]},{"Key":"count but","Fragments":["could"]},{"Key":"Calling `first`","Fragments":["on"]},{"Key":"`first` on","Fragments":["response"]},{"Key":"on response","Fragments":["twice"]},{"Key":"response twice","Fragments":["in"]},{"Key":"different place","Fragments":["is"]},{"Key":"place is","Fragments":["kind"]},{"Key":"of awkward.","Fragments":["I"]},{"Key":"awkward. I","Fragments":["would","find"]},{"Key":"call them","Fragments":["both"]},{"Key":"them both","Fragments":["in","Refs"]},{"Key":"binding so","Fragments":["that"]},{"Key":"final statement","Fragments":["is"]},{"Key":"just `(or","Fragments":["response"]},{"Key":"`(or response","Fragments":["\"Whatever.\")`"]},{"Key":"response \"Whatever.\")`","Fragments":["which"]},{"Key":"\"Whatever.\")` which","Fragments":["would"]},{"Key":"would seem","Fragments":["the","like","more"]},{"Key":"seem the","Fragments":["clearest"]},{"Key":"specific function","Fragments":["`ffirst`"]},{"Key":"function `ffirst`","Fragments":["for"]},{"Key":"`ffirst` for","Fragments":["exactly"]},{"Key":"for exactly","Fragments":["this"]},{"Key":"exactly this","Fragments":["case"]},{"Key":" Uses","Fragments":["of"]},{"Key":"Uses of","Fragments":["`first`"]},{"Key":"of `first`","Fragments":["and"]},{"Key":"`first` and","Fragments":["`second`"]},{"Key":"and `second`","Fragments":["are"]},{"Key":"`second` are","Fragments":["often"]},{"Key":"are often","Fragments":["an"]},{"Key":"often an","Fragments":["indicator"]},{"Key":"an indicator","Fragments":["that"]},{"Key":"your bindings","Fragments":["to"]},{"Key":"bindings to","Fragments":["good"]},{"Key":"to good","Fragments":["effect."]},{"Key":"example, these","Fragments":["are"]},{"Key":"are equivalent","Fragments":["to","to"]},{"Key":"using first","Fragments":["and"]},{"Key":" `matches","Fragments":["(fn"]},{"Key":"`matches (fn","Fragments":["[[_"]},{"Key":"[[_ regex]","Fragments":["(re-matches"]},{"Key":"regex] (re-matches","Fragments":["regex"]},{"Key":"(re-matches regex","Fragments":["input))`"]},{"Key":" `[response","Fragments":["_]"]},{"Key":"`[response _]","Fragments":["(first"]},{"Key":"_] (first","Fragments":["(filter"]},{"Key":"(filter matches","Fragments":["patterns))`"]},{"Key":"Those look","Fragments":["cleaner"]},{"Key":"look cleaner","Fragments":["to"]},{"Key":"looks real","Fragments":["good.","good.","good"]},{"Key":"Since your","Fragments":["tests"]},{"Key":"all private","Fragments":["functions,"]},{"Key":"private functions,","Fragments":["it"]},{"Key":"functions, it","Fragments":["might"]},{"Key":"simplify them","Fragments":["a"]},{"Key":"bit. Since","Fragments":["you"]},{"Key":"you control","Fragments":["the"]},{"Key":"control the","Fragments":["ordering"]},{"Key":"how they're","Fragments":["applied"]},{"Key":"they're applied","Fragments":["in"]},{"Key":"applied in","Fragments":["the"]},{"Key":"`response-for` method","Fragments":["you"]},{"Key":"to recheck","Fragments":["`yell`"]},{"Key":"recheck `yell`","Fragments":["and"]},{"Key":"`yell` and","Fragments":["`blank`"]},{"Key":"and `blank`","Fragments":["in"]},{"Key":"`blank` in","Fragments":["the"]},{"Key":"Calling `use`","Fragments":["and","and"]},{"Key":"`use` and","Fragments":["`require`","`require`"]},{"Key":"and `require`","Fragments":["as","as"]},{"Key":"`require` as","Fragments":["functions","a","functions","a","a"]},{"Key":"generally only","Fragments":["recommended","recommended","recommended"]},{"Key":"only recommended","Fragments":["in","in","in"]},{"Key":"recommended in","Fragments":["the","the","the","functional"]},{"Key":"the repl.","Fragments":["The","Having","The","The","In","Where"]},{"Key":"repl. The","Fragments":["preferred","preferred","preferred"]},{"Key":"namespace `:require","Fragments":["[clojure.string","[clojure.string","[clojure.string"]},{"Key":":refer :all]`","Fragments":["form","is"]},{"Key":":all]` form","Fragments":["if"]},{"Key":"form if","Fragments":["you"]},{"Key":"include all","Fragments":["functions."]},{"Key":"all functions.","Fragments":["Even"]},{"Key":"functions. Even","Fragments":["better"]},{"Key":"Even better","Fragments":["is"]},{"Key":"better is","Fragments":["to"]},{"Key":"refer in","Fragments":["specific","the","my","just"]},{"Key":"in specific","Fragments":["functions"]},{"Key":"specific functions","Fragments":["so","come","so"]},{"Key":"your reader","Fragments":["knows"]},{"Key":"reader knows","Fragments":["where"]},{"Key":"knows where","Fragments":["specific"]},{"Key":"where specific","Fragments":["functions"]},{"Key":"come from.","Fragments":["(It","(Of"]},{"Key":"from. (It","Fragments":["also"]},{"Key":"(It also","Fragments":["looks"]},{"Key":"also looks","Fragments":["like","like"]},{"Key":"extra trailing","Fragments":["parenthesis"]},{"Key":"parenthesis after","Fragments":["the"]},{"Key":"nested ifs","Fragments":["are","-","are"]},{"Key":"ifs are","Fragments":["a","probably"]},{"Key":"bit awkward.","Fragments":["This","I"]},{"Key":"awkward. This","Fragments":["form"]},{"Key":"This form","Fragments":["of"]},{"Key":"nesting ifs","Fragments":["is"]},{"Key":"ifs is","Fragments":["a"]},{"Key":"`cond` form","Fragments":["of"]},{"Key":"of conditionals","Fragments":["instead."]},{"Key":"the lets","Fragments":["containing"]},{"Key":"lets containing","Fragments":["the"]},{"Key":"containing the","Fragments":["constant"]},{"Key":"constant strings","Fragments":["adds"]},{"Key":"strings adds","Fragments":["a"]},{"Key":"adds a","Fragments":["lot."]},{"Key":"lot. I'd","Fragments":["probably"]},{"Key":"just inline","Fragments":["those","it.","them.","the"]},{"Key":"inline those","Fragments":["values."]},{"Key":"This can","Fragments":["also"]},{"Key":"done as","Fragments":["a","`apply","`(apply","`(apply"]},{"Key":"a `reduce`","Fragments":["operation","function.","function","function"]},{"Key":"`reduce` operation","Fragments":["which"]},{"Key":"operation which","Fragments":["might"]},{"Key":" `if-not","Fragments":["(seq"]},{"Key":"`if-not (seq","Fragments":["bits)`"]},{"Key":"(seq bits)`","Fragments":["can"]},{"Key":"bits)` can","Fragments":["also"]},{"Key":"expressed as","Fragments":["`if-not","partial"]},{"Key":"as `if-not","Fragments":["(empty?"]},{"Key":"`if-not (empty?","Fragments":["bits)`"]},{"Key":"(empty? bits)`","Fragments":["which"]},{"Key":"bits)` which","Fragments":["might"]},{"Key":"clearer. Using","Fragments":["seq"]},{"Key":"Using seq","Fragments":["to"]},{"Key":"seq to","Fragments":["return"]},{"Key":"nil in","Fragments":["the"]},{"Key":"empty case","Fragments":["is"]},{"Key":"those Clojure","Fragments":["tricks"]},{"Key":"Clojure tricks","Fragments":["that"]},{"Key":"tricks that","Fragments":["maybe"]},{"Key":"maybe should","Fragments":["be"]},{"Key":"for specific","Fragments":["cases"]},{"Key":"specific cases","Fragments":["like","such"]},{"Key":" might","Fragments":["have"]},{"Key":"have gone","Fragments":["too"]},{"Key":"gone too","Fragments":["far"]},{"Key":"far with","Fragments":["this"]},{"Key":"the heck","Fragments":["it"]},{"Key":"heck it","Fragments":["was"]},{"Key":" only","Fragments":["characters"]},{"Key":"only characters","Fragments":["are"]},{"Key":"passed around","Fragments":["now,"]},{"Key":"around now,","Fragments":["and"]},{"Key":"refactored transform-char","Fragments":["to"]},{"Key":"transform-char to","Fragments":["it's"]},{"Key":"it's basic","Fragments":["components"]},{"Key":"basic components","Fragments":["to"]},{"Key":"components to","Fragments":["make"]},{"Key":"more readable(i","Fragments":["hope)"]},{"Key":" mine","Fragments":["had"]},{"Key":"mine had","Fragments":["a"]},{"Key":"replace for","Fragments":["the"]},{"Key":"the unwanted","Fragments":["chars."]},{"Key":"unwanted chars.","Fragments":["yours"]},{"Key":"chars. yours","Fragments":["is"]},{"Key":"more concise.","Fragments":["awesome"]},{"Key":"saying about","Fragments":["needing"]},{"Key":"about needing","Fragments":["the"]},{"Key":"needing the","Fragments":["data"]},{"Key":"data in","Fragments":["more","the","some"]},{"Key":"place possibly.","Fragments":["There"]},{"Key":"possibly. There","Fragments":["are"]},{"Key":"are ways","Fragments":["to","to"]},{"Key":"the data-driven","Fragments":["approach"]},{"Key":"data-driven approach","Fragments":["with"]},{"Key":"macros or","Fragments":["`intern`"]},{"Key":"or `intern`","Fragments":["that"]},{"Key":"`intern` that","Fragments":["would"]},{"Key":"methods from","Fragments":["the"]},{"Key":"the map.","Fragments":["That","If","Why","You"]},{"Key":"of `partial`.","Fragments":["The"]},{"Key":"`partial`. The","Fragments":["idea"]},{"Key":"new function","Fragments":["from","with","that"]},{"Key":"from an","Fragments":["existing","outsider's","unsorted"]},{"Key":"existing function","Fragments":["by"]},{"Key":"by pre-applying","Fragments":["one"]},{"Key":"pre-applying one","Fragments":["or"]},{"Key":"existing functions","Fragments":["arguments."]},{"Key":"functions arguments.","Fragments":["This"]},{"Key":"arguments. This","Fragments":["produces"]},{"Key":"This produces","Fragments":["a"]},{"Key":"a smaller","Fragments":["arity"]},{"Key":"smaller arity","Fragments":["than"]},{"Key":"arity than","Fragments":["the"]},{"Key":"`(defn add","Fragments":["[a"]},{"Key":"add [a","Fragments":["b]"]},{"Key":"b] (+","Fragments":["a"]},{"Key":"(+ a","Fragments":["b))`"]},{"Key":"a b))`","Fragments":["#"]},{"Key":"b))` #","Fragments":["function"]},{"Key":"# function","Fragments":["takes"]},{"Key":"function takes","Fragments":["2"]},{"Key":"takes 2","Fragments":["arguments","arguments.","or","or"]},{"Key":"`(def add-two","Fragments":["(partial"]},{"Key":"add-two (partial","Fragments":["add"]},{"Key":"(partial add","Fragments":["2))`"]},{"Key":"add 2))`","Fragments":["#"]},{"Key":"2))` #","Fragments":["created"]},{"Key":"# created","Fragments":["a"]},{"Key":"created a","Fragments":["new"]},{"Key":"takes 1","Fragments":["argument"]},{"Key":"So if","Fragments":["you","you"]},{"Key":"`(defn- on-planet","Fragments":["[planet-period"]},{"Key":"on-planet [planet-period","Fragments":["seconds]"]},{"Key":"[planet-period seconds]","Fragments":["...)`"]},{"Key":"create your","Fragments":["Mercury"]},{"Key":"your Mercury","Fragments":["function"]},{"Key":"Mercury function","Fragments":["like:"]},{"Key":"`(def on-mercury","Fragments":["(partial"]},{"Key":"on-mercury (partial","Fragments":["on-planet"]},{"Key":"(partial on-planet","Fragments":["(planet-periods"]},{"Key":"on-planet (planet-periods","Fragments":["\"mercury\")))`"]},{"Key":" Hope","Fragments":["that","that","this"]},{"Key":"Hope that","Fragments":["helps.","helps."]},{"Key":" Style","Fragments":["wise,"]},{"Key":"Style wise,","Fragments":["I"]},{"Key":"wise, I","Fragments":["generally"]},{"Key":"generally find","Fragments":["it"]},{"Key":"cond to","Fragments":["have"]},{"Key":"result on","Fragments":["the"]},{"Key":"same line.","Fragments":["If"]},{"Key":"them on","Fragments":["separate"]},{"Key":"on separate","Fragments":["lines,"]},{"Key":"separate lines,","Fragments":["it's"]},{"Key":"lines, it's","Fragments":["common"]},{"Key":"some visual","Fragments":["separate"]},{"Key":"visual separate","Fragments":["with"]},{"Key":"separate with","Fragments":["whitespace"]},{"Key":"with whitespace","Fragments":["or","after"]},{"Key":"or comments","Fragments":["so"]},{"Key":"comments so","Fragments":["that"]},{"Key":"result are","Fragments":["\"grouped\""]},{"Key":"are \"grouped\"","Fragments":["together"]},{"Key":"\"grouped\" together","Fragments":["a"]},{"Key":"Code looks","Fragments":["good."]},{"Key":"to slightly","Fragments":["disagree","improve."]},{"Key":"slightly disagree","Fragments":["with"]},{"Key":"with @alfreda","Fragments":["here"]},{"Key":"@alfreda here","Fragments":["on"]},{"Key":"here on","Fragments":["use.","exercism."]},{"Key":"on use.","Fragments":["I"]},{"Key":"use. I","Fragments":["think","saw"]},{"Key":"think use","Fragments":["is"]},{"Key":"use is","Fragments":["functionally","perfect"]},{"Key":"is functionally","Fragments":["deprecated","equivalent","an"]},{"Key":"functionally deprecated","Fragments":["at"]},{"Key":"deprecated at","Fragments":["this"]},{"Key":"point and","Fragments":["is"]},{"Key":"only really","Fragments":["used","needs"]},{"Key":"really used","Fragments":["in"]},{"Key":"repl. Having","Fragments":["the"]},{"Key":"Having the","Fragments":["declaration"]},{"Key":"the declaration","Fragments":["directly"]},{"Key":"declaration directly","Fragments":["in"]},{"Key":"to as","Fragments":["a"]},{"Key":"call is","Fragments":["definitely"]},{"Key":"definitely preferred","Fragments":["though."]},{"Key":" From:","Fragments":["https://github.com/bbatsov/clojure-style-guide"]},{"Key":" \"Prefer","Fragments":["using"]},{"Key":"\"Prefer using","Fragments":[":require"]},{"Key":":require :refer","Fragments":[":all"]},{"Key":":all over","Fragments":[":use\""]},{"Key":" `:require","Fragments":["[clojure.string","[clojure.string"]},{"Key":"(upper-case blank?)]`","Fragments":["is"]},{"Key":"blank?)]` is","Fragments":["functionally"]},{"Key":"functionally equivalent","Fragments":["to"]},{"Key":"use declaration","Fragments":["you"]},{"Key":"declaration you","Fragments":["have."]},{"Key":"try using","Fragments":["a","a","`let`","a"]},{"Key":"a range","Fragments":["instead","instead","and","instead","of","that","of"]},{"Key":"range instead","Fragments":["of","of","of"]},{"Key":"recursion for","Fragments":["building","building"]},{"Key":"for building","Fragments":["the","the"]},{"Key":"a bounded","Fragments":["problem,","problem,"]},{"Key":"bounded problem,","Fragments":["so","so"]},{"Key":"problem, so","Fragments":["you","you"]},{"Key":"worry about,","Fragments":["but","but"]},{"Key":"about, but","Fragments":["it's","it's"]},{"Key":"good in","Fragments":["Clojure","Clojure"]},{"Key":"use recur","Fragments":["when"]},{"Key":"recur when","Fragments":["possible"]},{"Key":"when possible","Fragments":["instead","instead"]},{"Key":"possible instead","Fragments":["of","of"]},{"Key":"direct recursion","Fragments":["to","to"]},{"Key":"recursion to","Fragments":["avoid","avoid"]},{"Key":"avoid consuming","Fragments":["stack","stack"]},{"Key":"consuming stack","Fragments":["space","space"]},{"Key":"stack space","Fragments":["since","since"]},{"Key":"space since","Fragments":["the","the"]},{"Key":"the JVM","Fragments":["doesn't","doesn't"]},{"Key":"JVM doesn't","Fragments":["support","support"]},{"Key":"doesn't support","Fragments":["tail-call","tail-call"]},{"Key":"support tail-call","Fragments":["optimization.","optimization."]},{"Key":"out different","Fragments":["ideas"]},{"Key":"different ideas","Fragments":["on"]},{"Key":"ideas on","Fragments":["these"]},{"Key":"on these","Fragments":["problems."]},{"Key":"these problems.","Fragments":["Just"]},{"Key":"problems. Just","Fragments":["keep"]},{"Key":"Just keep","Fragments":["trying"]},{"Key":"keep trying","Fragments":["new"]},{"Key":"trying new","Fragments":["things"]},{"Key":"things till","Fragments":["you"]},{"Key":"till you","Fragments":["like"]},{"Key":"Calling `require`","Fragments":["as"]},{"Key":":as str]`","Fragments":["form."]},{"Key":"improved by","Fragments":["extracting"]},{"Key":"by extracting","Fragments":["the"]},{"Key":"to digit","Fragments":["into"]},{"Key":"digit into","Fragments":["a"]},{"Key":":all]` is","Fragments":["equivalent"]},{"Key":"the `:use`","Fragments":["construct"]},{"Key":"`:use` construct","Fragments":["you"]},{"Key":"construct you","Fragments":["have"]},{"Key":"have and","Fragments":["is"]},{"Key":"often preferred","Fragments":["over"]},{"Key":"over :use.","Fragments":["It"]},{"Key":":use. It","Fragments":["can"]},{"Key":"to :refer","Fragments":["specific"]},{"Key":":refer specific","Fragments":["functions"]},{"Key":"reader where","Fragments":["the"]},{"Key":"wonder about","Fragments":["using"]},{"Key":"data structure?","Fragments":["Generally","Remember"]},{"Key":"structure? Generally","Fragments":["transients"]},{"Key":"Generally transients","Fragments":["are"]},{"Key":"transients are","Fragments":["used"]},{"Key":"for local","Fragments":["mutation","mutable"]},{"Key":"local mutation","Fragments":["inside"]},{"Key":"mutation inside","Fragments":["a"]},{"Key":"performance reasons,","Fragments":["but"]},{"Key":"reasons, but","Fragments":["are"]},{"Key":"are then","Fragments":["turned"]},{"Key":"then turned","Fragments":["back"]},{"Key":"turned back","Fragments":["into"]},{"Key":"into persistent","Fragments":["data"]},{"Key":"persistent data","Fragments":["structures","structures"]},{"Key":"structures when","Fragments":["they're"]},{"Key":"when they're","Fragments":["returned."]},{"Key":"they're returned.","Fragments":["Transients"]},{"Key":"returned. Transients","Fragments":["will"]},{"Key":"Transients will","Fragments":["explicitly"]},{"Key":"will explicitly","Fragments":["throw"]},{"Key":"throw exceptions","Fragments":["if"]},{"Key":"exceptions if","Fragments":["they're"]},{"Key":"if they're","Fragments":["accessed","better"]},{"Key":"they're accessed","Fragments":["from"]},{"Key":"accessed from","Fragments":["multiple"]},{"Key":"from multiple","Fragments":["threads."]},{"Key":"using Refs,","Fragments":["Atoms,"]},{"Key":"Refs, Atoms,","Fragments":["or"]},{"Key":"Atoms, or","Fragments":["Agents"]},{"Key":"or Agents","Fragments":["instead"]},{"Key":"Agents instead","Fragments":["which"]},{"Key":"instead which","Fragments":["are"]},{"Key":"are explicitly","Fragments":["about"]},{"Key":"explicitly about","Fragments":["shared,"]},{"Key":"about shared,","Fragments":["mutable"]},{"Key":"shared, mutable","Fragments":["state.","value."]},{"Key":" `(range","Fragments":["65","65"]},{"Key":"91)` might","Fragments":["be"]},{"Key":"by casting","Fragments":["of"]},{"Key":"casting of","Fragments":["the"]},{"Key":"the ASCII","Fragments":["values","value"]},{"Key":"ASCII values","Fragments":["from","maybe?"]},{"Key":"values from","Fragments":["chars"]},{"Key":"from chars","Fragments":["like"]},{"Key":"chars like","Fragments":["`(int"]},{"Key":"like `(int","Fragments":["\\A)`.","\\A)`"]},{"Key":"the Atoms","Fragments":["is","is"]},{"Key":"Atoms is","Fragments":["fine","fine"]},{"Key":"fine in","Fragments":["a","a"]},{"Key":"a non-concurrent","Fragments":["environment,","environment,"]},{"Key":"non-concurrent environment,","Fragments":["but","but"]},{"Key":"environment, but","Fragments":["the","the"]},{"Key":"to recognize","Fragments":["is","is","yelling"]},{"Key":"recognize is","Fragments":["that","that","the"]},{"Key":"access an","Fragments":["atom","atom"]},{"Key":"an atom","Fragments":["is","is","directly","containing"]},{"Key":"atom is","Fragments":["run","run","intended"]},{"Key":"is run","Fragments":["in","in","in"]},{"Key":"run in","Fragments":["it's","it's","compare-and-set"]},{"Key":"own independent","Fragments":["\"transaction\"","\"transaction\""]},{"Key":"independent \"transaction\"","Fragments":["so","so"]},{"Key":"\"transaction\" so","Fragments":["`@austin`","`@spencer`"]},{"Key":"so `@austin`","Fragments":["and"]},{"Key":"`@austin` and","Fragments":["`reset!`"]},{"Key":"and `reset!`","Fragments":["are"]},{"Key":"`reset!` are","Fragments":["called"]},{"Key":"called separately","Fragments":["and","and"]},{"Key":"separately and","Fragments":["the","the"]},{"Key":"value could","Fragments":["have","have"]},{"Key":"have changed","Fragments":["in","the"]},{"Key":"between those","Fragments":["calls.","calls."]},{"Key":"those calls.","Fragments":["To","To"]},{"Key":"calls. To","Fragments":["make","make"]},{"Key":"it atomic,","Fragments":["you","you"]},{"Key":"atomic, you","Fragments":["can","can"]},{"Key":"`swap!` with","Fragments":["a","a"]},{"Key":"comparison inside","Fragments":["the","the"]},{"Key":"function passed.","Fragments":["`compare-and-set!`","Also,"]},{"Key":"passed. `compare-and-set!`","Fragments":["is"]},{"Key":"`compare-and-set!` is","Fragments":["also"]},{"Key":"also available","Fragments":["but"]},{"Key":"available but","Fragments":["only"]},{"Key":"only returns","Fragments":["a"]},{"Key":"a boolean,","Fragments":["so"]},{"Key":"boolean, so","Fragments":["probably"]},{"Key":"so probably","Fragments":["not"]},{"Key":"not right","Fragments":["for"]},{"Key":"use Refs","Fragments":["which","which"]},{"Key":"Refs which","Fragments":["have","have"]},{"Key":"which have","Fragments":["explicit","explicit","some"]},{"Key":"have explicit","Fragments":["transaction","transaction"]},{"Key":"explicit transaction","Fragments":["boundaries.","boundaries"]},{"Key":"(blank? lower-case","Fragments":["upper-case)]`"]},{"Key":"lower-case upper-case)]`","Fragments":["form."]},{"Key":"upper-case)]` form.","Fragments":[":require"]},{"Key":"form. :require","Fragments":["is"]},{"Key":":require is","Fragments":["preferred"]},{"Key":":use by","Fragments":["many"]},{"Key":"by many","Fragments":["people"]},{"Key":"people as","Fragments":["well."]},{"Key":"of `every-pred`","Fragments":["and"]},{"Key":"`every-pred` and","Fragments":["aliasing"]},{"Key":"and aliasing","Fragments":["`silence?`"]},{"Key":"aliasing `silence?`","Fragments":["to"]},{"Key":"to `blank?`.","Fragments":["Overall"]},{"Key":"`blank?`. Overall","Fragments":["looks"]},{"Key":"In `line2`","Fragments":["you've"]},{"Key":"`line2` you've","Fragments":["got"]},{"Key":"`case` with","Fragments":["only"]},{"Key":"only 2","Fragments":["conditions.","conditions","conditions,","functions.","functions"]},{"Key":"2 conditions.","Fragments":["It"]},{"Key":"conditions. It","Fragments":["might"]},{"Key":"use an","Fragments":["`if`","atom","`if`.","`atom`","exponent"]},{"Key":"use `recur`","Fragments":["when"]},{"Key":"`recur` when","Fragments":["possible"]},{"Key":"My understanding","Fragments":["is","is"]},{"Key":"that Atoms","Fragments":["don't"]},{"Key":"Atoms don't","Fragments":["participate"]},{"Key":"don't participate","Fragments":["in"]},{"Key":"participate in","Fragments":["the"]},{"Key":"the `dosync`","Fragments":["transactions"]},{"Key":"`dosync` transactions","Fragments":["like"]},{"Key":"transactions like","Fragments":["Refs"]},{"Key":"like Refs","Fragments":["do."]},{"Key":"Refs do.","Fragments":["Atoms"]},{"Key":"do. Atoms","Fragments":["are"]},{"Key":"Atoms are","Fragments":["each"]},{"Key":"are each","Fragments":["independent,"]},{"Key":"each independent,","Fragments":["where"]},{"Key":"independent, where","Fragments":["Refs"]},{"Key":"where Refs","Fragments":["can"]},{"Key":"Refs can","Fragments":["be"]},{"Key":"be transactional","Fragments":["as"]},{"Key":"transactional as","Fragments":["a"]},{"Key":"you assume","Fragments":["that"]},{"Key":"it's single","Fragments":["threaded,"]},{"Key":"single threaded,","Fragments":["it's"]},{"Key":"threaded, it's","Fragments":["probably"]},{"Key":"probably OK","Fragments":["just"]},{"Key":"OK just","Fragments":["to"]},{"Key":"use Atoms","Fragments":["for"]},{"Key":"Atoms for","Fragments":["both."]},{"Key":"for both.","Fragments":["If"]},{"Key":"both. If","Fragments":["you"]},{"Key":"want concurrency-safety","Fragments":["to"]},{"Key":"concurrency-safety to","Fragments":["protect"]},{"Key":"to protect","Fragments":["both"]},{"Key":"protect both","Fragments":["the"]},{"Key":"robot and","Fragments":["the"]},{"Key":"names at","Fragments":["the"]},{"Key":"same time,","Fragments":["you"]},{"Key":"both Refs","Fragments":["and"]},{"Key":"Refs and","Fragments":["access"]},{"Key":"and access","Fragments":["them"]},{"Key":"access them","Fragments":["in"]},{"Key":"and kind","Fragments":["reviewing"]},{"Key":"kind reviewing","Fragments":["my"]},{"Key":"reviewing my","Fragments":["codes."]},{"Key":"about inline","Fragments":["constants"]},{"Key":"inline constants","Fragments":["strings."]},{"Key":"general, using","Fragments":["constants"]},{"Key":"using constants","Fragments":["is"]},{"Key":"constants is","Fragments":["recommended"]},{"Key":"is recommended","Fragments":["rather"]},{"Key":"recommended rather","Fragments":["than"]},{"Key":"than inline","Fragments":["string"]},{"Key":"inline string","Fragments":["in"]},{"Key":"in imperative","Fragments":["language"]},{"Key":"imperative language","Fragments":["style,"]},{"Key":"language style,","Fragments":["that's"]},{"Key":"style, that's","Fragments":["why"]},{"Key":"used `let","Fragments":["statement`."]},{"Key":"`let statement`.","Fragments":["I"]},{"Key":"statement`. I","Fragments":["admit"]},{"Key":"admit that","Fragments":["it"]},{"Key":"using raw","Fragments":["string"]},{"Key":"raw string","Fragments":["recommended"]},{"Key":"string recommended","Fragments":["in"]},{"Key":"functional language?,","Fragments":["which"]},{"Key":"language?, which","Fragments":["make"]},{"Key":"which make","Fragments":["code"]},{"Key":"code short","Fragments":["but"]},{"Key":"short but","Fragments":["not"]},{"Key":"that it'","Fragments":["would"]},{"Key":"it' would","Fragments":["be"]},{"Key":"prefix the","Fragments":["namespace"]},{"Key":"function when","Fragments":["you"]},{"Key":"namespace where","Fragments":["it's"]},{"Key":"it's defined.","Fragments":["e.g."]},{"Key":"defined. e.g.","Fragments":["`bob/is-silence`"]},{"Key":"e.g. `bob/is-silence`","Fragments":["can"]},{"Key":"`bob/is-silence` can","Fragments":["just"]},{"Key":"name functions","Fragments":["that"]},{"Key":"booleans so","Fragments":["that"]},{"Key":"they end","Fragments":["with"]},{"Key":"mark. e.g.","Fragments":["`is-silence?`"]},{"Key":"not call","Fragments":["the"]},{"Key":"`clojure.string` prefix","Fragments":["for"]},{"Key":"prefix for","Fragments":["all"]},{"Key":"string methods.","Fragments":["That's"]},{"Key":"methods. That's","Fragments":["a"]},{"Key":"a place","Fragments":["that"]},{"Key":"place that","Fragments":["I'd"]},{"Key":"that I'd","Fragments":["like"]},{"Key":"clean stuff","Fragments":["up."]},{"Key":"also added","Fragments":["a"]},{"Key":"a project.clj","Fragments":["file"]},{"Key":"project.clj file","Fragments":["because"]},{"Key":"file because","Fragments":["it"]},{"Key":"make `leiningen`","Fragments":["happier."]},{"Key":"`leiningen` happier.","Fragments":["I'm"]},{"Key":"happier. I'm","Fragments":["not"]},{"Key":"how much","Fragments":["of","less","not"]},{"Key":"a role","Fragments":["that"]},{"Key":"role that","Fragments":["plays."]},{"Key":"that plays.","Fragments":["I"]},{"Key":"plays. I","Fragments":["suppose"]},{"Key":"suppose if","Fragments":["I"]},{"Key":"were running","Fragments":["it"]},{"Key":"running it","Fragments":["from"]},{"Key":"from java,","Fragments":["the"]},{"Key":"java, the","Fragments":["info"]},{"Key":"info in","Fragments":["the"]},{"Key":"the project.clj","Fragments":["would"]},{"Key":"project.clj would","Fragments":["end"]},{"Key":"the commandline","Fragments":["as"]},{"Key":"commandline as","Fragments":["class"]},{"Key":"as class","Fragments":["path"]},{"Key":"class path","Fragments":["and"]},{"Key":"path and","Fragments":["jar"]},{"Key":"and jar","Fragments":["extras."]},{"Key":"jar extras.","Fragments":["Probably"]},{"Key":"extras. Probably","Fragments":["not"]},{"Key":"Probably not","Fragments":["a"]},{"Key":"big deal","Fragments":["there.","but"]},{"Key":"fixed up","Fragments":["the"]},{"Key":"function descriptions","Fragments":["in"]},{"Key":"descriptions in","Fragments":["iteration2"]},{"Key":"Thanks @garrick,","Fragments":["excellent"]},{"Key":"@garrick, excellent","Fragments":["suggestion."]},{"Key":"suggestion. I've","Fragments":["updated"]},{"Key":" cleaned","Fragments":["up"]},{"Key":"cleaned up","Fragments":["the"]},{"Key":"the \"use\"","Fragments":["statement"]},{"Key":"\"use\" statement","Fragments":["by"]},{"Key":"statement by","Fragments":["removing","[ben5stars](http://exercism.io/ben5stars)"]},{"Key":"removing unused","Fragments":["\"strip\""]},{"Key":" i'm","Fragments":["curious"]},{"Key":"i'm curious","Fragments":["about"]},{"Key":"when i","Fragments":["should"]},{"Key":"i should","Fragments":["wrap","be"]},{"Key":"should wrap","Fragments":["the"]},{"Key":"wrap the","Fragments":["call"]},{"Key":"call with","Fragments":["()"]},{"Key":"with ()","Fragments":["or"]},{"Key":"() or","Fragments":["not."]},{"Key":"not. It","Fragments":["seems"]},{"Key":"that means","Fragments":["\"execute","it's","more"]},{"Key":"means \"execute","Fragments":["this"]},{"Key":"\"execute this","Fragments":["method\","]},{"Key":"this method\",","Fragments":["right?"]},{"Key":"method\", right?","Fragments":["Is"]},{"Key":"right? Is","Fragments":["this"]},{"Key":"this about","Fragments":["lazy"]},{"Key":"about lazy","Fragments":["execution?","execution."]},{"Key":"example -","Fragments":["what"]},{"Key":"between these","Fragments":["two:"]},{"Key":"(defn clean-string","Fragments":["[s]","[s]"]},{"Key":" lower-case","Fragments":["(remove-non-word-chars"]},{"Key":"lower-case (remove-non-word-chars","Fragments":["s))"]},{"Key":" (lower-case","Fragments":["(remove-non-word-chars"]},{"Key":"(lower-case (remove-non-word-chars","Fragments":["s)))"]},{"Key":"wouldn't say","Fragments":["that"]},{"Key":"that raw","Fragments":["strings"]},{"Key":"are recommended","Fragments":["for"]},{"Key":"recommended for","Fragments":["a"]},{"Key":"functional language","Fragments":["exactly."]},{"Key":"language exactly.","Fragments":["More"]},{"Key":"exactly. More","Fragments":["that"]},{"Key":"More that","Fragments":["if"]},{"Key":"not shared","Fragments":["that"]},{"Key":"shared that","Fragments":["it's"]},{"Key":"bad thing","Fragments":["to"]},{"Key":"inline it.","Fragments":["Also"]},{"Key":"it. Also","Fragments":["`let`"]},{"Key":"Also `let`","Fragments":["bindings"]},{"Key":"`let` bindings","Fragments":["are"]},{"Key":"bindings are","Fragments":["evaluated"]},{"Key":"every usage.","Fragments":["If"]},{"Key":"usage. If","Fragments":["I"]},{"Key":"introduce actual","Fragments":["constants,"]},{"Key":"actual constants,","Fragments":["I"]},{"Key":"constants, I","Fragments":["would"]},{"Key":"`(def answer-to-question","Fragments":["\"Sure\")`"]},{"Key":"answer-to-question \"Sure\")`","Fragments":["in"]},{"Key":"\"Sure\")` in","Fragments":["the"]},{"Key":"After you","Fragments":["refactored"]},{"Key":"`cond` I","Fragments":["think"]},{"Key":" @bethany,","Fragments":["thanks"]},{"Key":"@bethany, thanks","Fragments":["for"]},{"Key":"the nitpick.","Fragments":["Are"]},{"Key":"nitpick. Are","Fragments":["you"]},{"Key":"you saying","Fragments":["that","that","that,"]},{"Key":"already small","Fragments":["enough"]},{"Key":"small enough","Fragments":["a"]},{"Key":"enough a","Fragments":["problem"]},{"Key":"introduce an","Fragments":["abstraction"]},{"Key":"an abstraction","Fragments":["of"]},{"Key":"abstraction of","Fragments":["a"]},{"Key":"a comparable","Fragments":["word"]},{"Key":"comparable word","Fragments":["and","is"]},{"Key":"and doing","Fragments":["so"]},{"Key":"so confuses","Fragments":["the"]},{"Key":"confuses the","Fragments":["problem?"]},{"Key":"My earlier","Fragments":["revision"]},{"Key":"earlier revision","Fragments":["thought"]},{"Key":"revision thought","Fragments":["of"]},{"Key":"without \"caching\"","Fragments":["the"]},{"Key":"\"caching\" the","Fragments":["sort/lower-case"]},{"Key":"the sort/lower-case","Fragments":["work"]},{"Key":"sort/lower-case work","Fragments":["and"]},{"Key":"and `anagram-of?`","Fragments":["naturally"]},{"Key":"`anagram-of?` naturally","Fragments":["works"]},{"Key":"naturally works","Fragments":["on"]},{"Key":"a \"word\"","Fragments":["(aka"]},{"Key":"\"word\" (aka","Fragments":["a"]},{"Key":"(aka a","Fragments":["string)."]},{"Key":"a string).","Fragments":["This"]},{"Key":"string). This","Fragments":["version"]},{"Key":"preserve that","Fragments":["feel"]},{"Key":"that feel","Fragments":["in"]},{"Key":"feel in","Fragments":["the"]},{"Key":"the signature","Fragments":["of"]},{"Key":"signature of","Fragments":["`anagram-of?`."]},{"Key":" @ramona","Fragments":["destructuring"]},{"Key":"@ramona destructuring","Fragments":["is"]},{"Key":"destructuring is","Fragments":["awesome!","super"]},{"Key":"is awesome!","Fragments":["Thank"]},{"Key":"awesome! Thank","Fragments":["you."]},{"Key":"actually 2","Fragments":["separate"]},{"Key":"separate expressions","Fragments":["`lower-case`"]},{"Key":"expressions `lower-case`","Fragments":["is"]},{"Key":"expression that","Fragments":["is"]},{"Key":"a Var","Fragments":["that","to","with"]},{"Key":"Var that","Fragments":["references"]},{"Key":"that references","Fragments":["a"]},{"Key":"references a","Fragments":["function."]},{"Key":"second expression","Fragments":["is"]},{"Key":"is `(remove-non-word-chars","Fragments":["s)`"]},{"Key":"`(remove-non-word-chars s)`","Fragments":["which","value"]},{"Key":"s)` which","Fragments":["is"]},{"Key":"is evaluated","Fragments":["because"]},{"Key":"evaluated because","Fragments":["it's"]},{"Key":"it's in","Fragments":["parenthesis.","my","a"]},{"Key":"in parenthesis.","Fragments":["As"]},{"Key":"parenthesis. As","Fragments":["with"]},{"Key":"all Clojure","Fragments":["functions,"]},{"Key":"last expression","Fragments":["evaluated"]},{"Key":"expression evaluated","Fragments":["is"]},{"Key":"evaluated is","Fragments":["the"]},{"Key":"value. So","Fragments":["in"]},{"Key":"the `(remove-non-word-chars","Fragments":["s)`"]},{"Key":"s)` value","Fragments":["would"]},{"Key":"value would","Fragments":["be"]},{"Key":"be returned,","Fragments":["but"]},{"Key":"returned, but","Fragments":["the"]},{"Key":" @tracy,","Fragments":["thanks,","thanks,"]},{"Key":"@tracy, thanks,","Fragments":["I'm","I"]},{"Key":"thanks, I'm","Fragments":["aware"]},{"Key":"of `letfn`;","Fragments":["however,"]},{"Key":"`letfn`; however,","Fragments":["this"]},{"Key":"however, this","Fragments":["one"]},{"Key":"one looks","Fragments":["clean"]},{"Key":"looks clean","Fragments":["enough"]},{"Key":"clean enough","Fragments":["to"]},{"Key":"thanks, I","Fragments":["didn't"]},{"Key":" nice.","Fragments":["thanks."]},{"Key":"nice. thanks.","Fragments":["I"]},{"Key":"\"?\" as","Fragments":["a"]},{"Key":"name character.","Fragments":["Coming"]},{"Key":"character. Coming","Fragments":["from"]},{"Key":"from Ruby","Fragments":["i"]},{"Key":"Ruby i","Fragments":["like"]},{"Key":"i like","Fragments":["that"]},{"Key":"Use \"math\"","Fragments":["he"]},{"Key":"\"math\" he","Fragments":["says."]},{"Key":"he says.","Fragments":["So"]},{"Key":"says. So","Fragments":["I"]},{"Key":"use \"math\"","Fragments":["And"]},{"Key":"\"math\" And","Fragments":["suddenly"]},{"Key":"And suddenly","Fragments":["the","the"]},{"Key":"suddenly the","Fragments":["size","size"]},{"Key":"Thanks Geoff","Fragments":["for"]},{"Key":"Geoff for","Fragments":["the"]},{"Key":"The funny","Fragments":["thing"]},{"Key":"funny thing","Fragments":["is"]},{"Key":"the board-string","Fragments":["and"]},{"Key":"board-string and","Fragments":["can-attack"]},{"Key":"and can-attack","Fragments":["functions"]},{"Key":"can-attack functions","Fragments":["are"]},{"Key":"now totally","Fragments":["independent."]},{"Key":"totally independent.","Fragments":["The"]},{"Key":"independent. The","Fragments":["can-attack"]},{"Key":"The can-attack","Fragments":["does"]},{"Key":"can-attack does","Fragments":["not"]},{"Key":"board representation","Fragments":["at"]},{"Key":"representation at","Fragments":["all."]},{"Key":"And since","Fragments":["it"]},{"Key":"it didn't,","Fragments":["I"]},{"Key":"didn't, I","Fragments":["experimented"]},{"Key":"I experimented","Fragments":["with"]},{"Key":"with changing","Fragments":["the"]},{"Key":"representation to","Fragments":["a"]},{"Key":"a 2-D","Fragments":["vector"]},{"Key":"2-D vector","Fragments":["(i.e."]},{"Key":"vector (i.e.","Fragments":["a"]},{"Key":"(i.e. a","Fragments":["vector"]},{"Key":"of vectors)","Fragments":["rather"]},{"Key":"vectors) rather","Fragments":["than"]},{"Key":"a linear","Fragments":["array."]},{"Key":"linear array.","Fragments":["And"]},{"Key":"array. And","Fragments":["suddenly"]},{"Key":"formatting code","Fragments":["dropped"]},{"Key":"code dropped","Fragments":["as"]},{"Key":"dropped as","Fragments":["well."]},{"Key":"Use letfn","Fragments":["to"]},{"Key":"letfn to","Fragments":["make"]},{"Key":"reduce call","Fragments":["easier","being"]},{"Key":"call easier","Fragments":["to"]},{"Key":" Agreed,","Fragments":["I"]},{"Key":"Agreed, I","Fragments":["was"]},{"Key":"was wrong","Fragments":["to"]},{"Key":"suggest :use","Fragments":["and"]},{"Key":"use :require.","Fragments":["The"]},{"Key":":require. The","Fragments":["blind"]},{"Key":"The blind","Fragments":["leading"]},{"Key":"blind leading","Fragments":["the"]},{"Key":"leading the","Fragments":["blind."]},{"Key":"Now it's","Fragments":["faster,"]},{"Key":"it's faster,","Fragments":["but"]},{"Key":"faster, but","Fragments":["looks"]},{"Key":"looks ugly.","Fragments":["Is","Probably"]},{"Key":"ugly. Is","Fragments":["there"]},{"Key":"It's recommended","Fragments":["that"]},{"Key":"recommended that","Fragments":["use"]},{"Key":"use and","Fragments":["required"]},{"Key":"and required","Fragments":["functions"]},{"Key":"required functions","Fragments":["only"]},{"Key":"repl. In","Fragments":["code"]},{"Key":"In code","Fragments":["it's"]},{"Key":"code it's","Fragments":["preferred"]},{"Key":"namespace forms","Fragments":["`:use`"]},{"Key":"forms `:use`","Fragments":["and"]},{"Key":"`:use` and","Fragments":["`:required`."]},{"Key":"and `:required`.","Fragments":["`:required`"]},{"Key":"`:required`. `:required`","Fragments":["is"]},{"Key":"`:required` is","Fragments":["generally"]},{"Key":"preferred and","Fragments":["could"]},{"Key":"done like","Fragments":["`:required"]},{"Key":"like `:required","Fragments":["[clojure.string"]},{"Key":"`:required [clojure.string","Fragments":[":refer"]},{"Key":":refer (join)]`","Fragments":["to"]},{"Key":"(join)]` to","Fragments":["have"]},{"Key":"as `\\A`,","Fragments":["for","`\\G`,"]},{"Key":"`\\A`, for","Fragments":["example."]},{"Key":"example. That","Fragments":["would"]},{"Key":"keyword for","Fragments":["your"]},{"Key":"explicitly throwing","Fragments":["an"]},{"Key":"as collections","Fragments":["in","of","and","of"]},{"Key":"collections in","Fragments":["Clojure,","Clojure"]},{"Key":"there shouldn't","Fragments":["normally","be"]},{"Key":"shouldn't normally","Fragments":["be"]},{"Key":"a need","Fragments":["to","to","to"]},{"Key":"explicitly turn","Fragments":["a","the","them"]},{"Key":"turn a","Fragments":["string","string"]},{"Key":"\"\"` can","Fragments":["be"]},{"Key":"just `join`","Fragments":["but"]},{"Key":"`join` but","Fragments":["can"]},{"Key":"but can","Fragments":["also","be","simply"]},{"Key":"might try","Fragments":["separating","using"]},{"Key":"try separating","Fragments":["the"]},{"Key":"transcription which","Fragments":["would"]},{"Key":"use simple","Fragments":["string"]},{"Key":"replacement functions","Fragments":["as"]},{"Key":"think pre-calculating","Fragments":["the"]},{"Key":"pre-calculating the","Fragments":["comparable"]},{"Key":"fine. It's","Fragments":["just"]},{"Key":"values when","Fragments":["I","converting"]},{"Key":"expect it","Fragments":["to"]},{"Key":"the \"comparable\"","Fragments":["value."]},{"Key":"\"comparable\" value.","Fragments":["If"]},{"Key":"value. If","Fragments":["your"]},{"Key":"your `anagram-of?`","Fragments":["just"]},{"Key":"just took","Fragments":["one"]},{"Key":"took one","Fragments":["extra"]},{"Key":"one extra","Fragments":["argument"]},{"Key":"extra argument","Fragments":["(the"]},{"Key":"argument (the","Fragments":["original"]},{"Key":"(the original","Fragments":["word"]},{"Key":"original word","Fragments":["separated"]},{"Key":"word separated","Fragments":["from"]},{"Key":"separated from","Fragments":["the"]},{"Key":"comparable word)","Fragments":["it"]},{"Key":"word) it","Fragments":["would"]},{"Key":"whole program","Fragments":["simpler"]},{"Key":"program simpler","Fragments":["I"]},{"Key":"simpler I","Fragments":["think."]},{"Key":"your prompt","Fragments":["reply."]},{"Key":"have learned","Fragments":["with"]},{"Key":"learned with","Fragments":["your"]},{"Key":"is efficiency.","Fragments":["I"]},{"Key":"efficiency. I","Fragments":["have"]},{"Key":"have ignored","Fragments":["the"]},{"Key":"ignored the","Fragments":["frequency"]},{"Key":"frequency to","Fragments":["evaluation"]},{"Key":"to evaluation","Fragments":["the"]},{"Key":"evaluation the","Fragments":["expressions."]},{"Key":"using constant","Fragments":["even"]},{"Key":"constant even","Fragments":["in"]},{"Key":"short codes","Fragments":["due"]},{"Key":"codes due","Fragments":["to"]},{"Key":" GregorianCalendar","Fragments":["inherits"]},{"Key":"GregorianCalendar inherits","Fragments":["from"]},{"Key":"inherits from","Fragments":["Calendar,"]},{"Key":"from Calendar,","Fragments":["so"]},{"Key":"Calendar, so","Fragments":["you"]},{"Key":"a Calendar","Fragments":["instance"]},{"Key":"Calendar instance","Fragments":["to"]},{"Key":"instance to","Fragments":["call"]},{"Key":"the .get","Fragments":["functions"]},{"Key":".get functions","Fragments":["on"]},{"Key":"functions on","Fragments":["it.","it."]},{"Key":"fact might","Fragments":["allow"]},{"Key":"But yes,","Fragments":["the"]},{"Key":"yes, the","Fragments":["Java","Java"]},{"Key":"Calendar is","Fragments":["terrible."]},{"Key":"is terrible.","Fragments":[":)"]},{"Key":"the score-letter","Fragments":["function"]},{"Key":"score-letter function","Fragments":["a"]},{"Key":"have score-letter","Fragments":["that's"]},{"Key":"score-letter that's","Fragments":["used"]},{"Key":"that's used","Fragments":["by"]},{"Key":"the score-word","Fragments":["in"]},{"Key":"score-word in","Fragments":["the"]},{"Key":"natural I","Fragments":["guess."]},{"Key":"guess. Maybe","Fragments":["a"]},{"Key":"actually converting","Fragments":["between"]},{"Key":"converting between","Fragments":["GregorianCalendar"]},{"Key":"between GregorianCalendar","Fragments":["and"]},{"Key":"GregorianCalendar and","Fragments":["Date,"]},{"Key":"and Date,","Fragments":["not"]},{"Key":"Date, not","Fragments":["Calendar"]},{"Key":"not Calendar","Fragments":["and"]},{"Key":"Calendar and","Fragments":["GregorianCalendar."]},{"Key":"and GregorianCalendar.","Fragments":["I"]},{"Key":"GregorianCalendar. I","Fragments":["was"]},{"Key":"using Date","Fragments":["because"]},{"Key":"Date because","Fragments":["you"]},{"Key":"easily add","Fragments":["seconds"]},{"Key":"add seconds","Fragments":["to"]},{"Key":"seconds to","Fragments":["it."]},{"Key":"and reviewed","Fragments":["the"]},{"Key":"reviewed the","Fragments":["Calendar"]},{"Key":"Calendar documentation","Fragments":["and"]},{"Key":"documentation and","Fragments":["discovered"]},{"Key":"and discovered","Fragments":["the"]},{"Key":"the \".add\"","Fragments":["method."]},{"Key":"\".add\" method.","Fragments":["Previously"]},{"Key":"method. Previously","Fragments":["I"]},{"Key":"Previously I","Fragments":["had"]},{"Key":"had only","Fragments":["seen"]},{"Key":"the \".roll\"","Fragments":["method"]},{"Key":"\".roll\" method","Fragments":["which"]},{"Key":"method which","Fragments":["is","solves","I've","I"]},{"Key":"using \".add\",","Fragments":["I"]},{"Key":"\".add\", I","Fragments":["could"]},{"Key":"could ditch","Fragments":["the"]},{"Key":"ditch the","Fragments":["Date"]},{"Key":"the Date","Fragments":["object"]},{"Key":"Date object","Fragments":["and"]},{"Key":"object and","Fragments":["related"]},{"Key":"and related","Fragments":["conversions"]},{"Key":"related conversions","Fragments":["and"]},{"Key":"conversions and","Fragments":["simplify"]},{"Key":"and simplify","Fragments":["the"]},{"Key":"Java calendar","Fragments":["interface"]},{"Key":"calendar interface","Fragments":["is"]},{"Key":"interface is","Fragments":["stupid."]},{"Key":"Just realized","Fragments":["I"]},{"Key":"my doc","Fragments":["strings"]},{"Key":"strings on","Fragments":["this"]},{"Key":"wrong place.","Fragments":["Corrected"]},{"Key":"place. Corrected","Fragments":["now."]},{"Key":"Nice tip","Fragments":["on"]},{"Key":"mapping shortcuts,","Fragments":["those"]},{"Key":"shortcuts, those","Fragments":["are"]},{"Key":"replace is","Fragments":["clearer,"]},{"Key":"is clearer,","Fragments":["though."]},{"Key":"clearer, though.","Fragments":["I'll"]},{"Key":"though. I'll","Fragments":["go"]},{"Key":"I'll go","Fragments":["with"]},{"Key":"Java number","Fragments":["classes"]},{"Key":"number classes","Fragments":["to"]},{"Key":"classes to","Fragments":["avoid"]},{"Key":"avoid implementing","Fragments":["exponentiation"]},{"Key":"implementing exponentiation","Fragments":["yourself?"]},{"Key":"like nucleotide-counts","Fragments":["could"]},{"Key":"nucleotide-counts could","Fragments":["be"]},{"Key":"be implemented","Fragments":["without","without"]},{"Key":"implemented without","Fragments":["scanning","the"]},{"Key":"without scanning","Fragments":["the"]},{"Key":"string four","Fragments":["separate"]},{"Key":"four separate","Fragments":["times,"]},{"Key":"separate times,","Fragments":["e.g.,"]},{"Key":"times, e.g.,","Fragments":["by"]},{"Key":"e.g., by","Fragments":["using"]},{"Key":"\"frequencies\" function.","Fragments":["For"]},{"Key":"function. For","Fragments":["the"]},{"Key":"the trivial","Fragments":["test"]},{"Key":"trivial test","Fragments":["inputs"]},{"Key":"test inputs","Fragments":["it's"]},{"Key":"inputs it's","Fragments":["no"]},{"Key":"it's no","Fragments":["big"]},{"Key":"no big","Fragments":["deal","difference"]},{"Key":"deal but","Fragments":["if"]},{"Key":"if one","Fragments":["were","of","will"]},{"Key":"one were","Fragments":["dealing"]},{"Key":"were dealing","Fragments":["with"]},{"Key":"real sequence","Fragments":["of"]},{"Key":"of many","Fragments":["thousands"]},{"Key":"many thousands","Fragments":["of"]},{"Key":"thousands of","Fragments":["nucleotides"]},{"Key":"nucleotides it","Fragments":["could"]},{"Key":"Very minor","Fragments":["nit:"]},{"Key":"minor nit:","Fragments":["string/blank?"]},{"Key":"nit: string/blank?","Fragments":["already"]},{"Key":"string/blank? already","Fragments":["disregards"]},{"Key":"trim its","Fragments":["input."]},{"Key":"than defining","Fragments":["your"]},{"Key":"defining your","Fragments":["own"]},{"Key":"own version","Fragments":["of","(although","for"]},{"Key":"of blank?,","Fragments":["you"]},{"Key":"blank?, you","Fragments":["could"]},{"Key":"use :refer","Fragments":["in"]},{"Key":":refer in","Fragments":["your"]},{"Key":"just directly","Fragments":["bring"]},{"Key":"directly bring","Fragments":["the"]},{"Key":"bring the","Fragments":["one","[x]"]},{"Key":"one from","Fragments":["clojure.string"]},{"Key":"clojure.string into","Fragments":["your"]},{"Key":"your namespace.","Fragments":["Alternately,","You"]},{"Key":"namespace. Alternately,","Fragments":["you"]},{"Key":"Alternately, you","Fragments":["could"]},{"Key":"local alias","Fragments":["explicitly"]},{"Key":"alias explicitly","Fragments":["using"]},{"Key":"explicitly using","Fragments":["def"]},{"Key":"def rather","Fragments":["than"]},{"Key":"than defn,","Fragments":["e.g.,"]},{"Key":"foo [x]","Fragments":["(println"]},{"Key":"[x] (println","Fragments":["x))"]},{"Key":"(def bar","Fragments":["foo)"]},{"Key":"(bar \"hello","Fragments":["world\")"]},{"Key":"; hello","Fragments":["world"]},{"Key":" @velma","Fragments":["Thanks"]},{"Key":"@velma Thanks","Fragments":["for"]},{"Key":"a rubyist","Fragments":["and"]},{"Key":"rubyist and","Fragments":["this"]},{"Key":"Clojure program.","Fragments":["So"]},{"Key":"program. So","Fragments":["feel"]},{"Key":"So feel","Fragments":["free"]},{"Key":"to bash","Fragments":["the"]},{"Key":"bash the","Fragments":["hell"]},{"Key":"the hell","Fragments":["out"]},{"Key":"hell out","Fragments":["this"]},{"Key":"* Is","Fragments":["there"]},{"Key":"an idiomatic","Fragments":["way"]},{"Key":"for if","Fragments":["something","another"]},{"Key":"is `present?`.","Fragments":["I"]},{"Key":"`present?`. I","Fragments":["needed"]},{"Key":"a `present?`","Fragments":["check"]},{"Key":"`present?` check","Fragments":["in"]},{"Key":"iterations and","Fragments":["eventually","managed"]},{"Key":"eventually I","Fragments":["was"]},{"Key":"was pushed","Fragments":["to"]},{"Key":"pushed to","Fragments":["do"]},{"Key":"a (not","Fragments":["(empty?"]},{"Key":"(not (empty?","Fragments":["))","f))"]},{"Key":"(empty? ))","Fragments":["which"]},{"Key":")) which","Fragments":["IMHO"]},{"Key":"which IMHO","Fragments":["is"]},{"Key":"IMHO is","Fragments":["not"]},{"Key":"very pleasing","Fragments":["to"]},{"Key":"pleasing to","Fragments":["look"]},{"Key":"* A","Fragments":["friend"]},{"Key":"A friend","Fragments":["mentioned"]},{"Key":"friend mentioned","Fragments":["to"]},{"Key":"mentioned to","Fragments":["avoid"]},{"Key":"avoid Java","Fragments":["interop"]},{"Key":"interop as","Fragments":["much"]},{"Key":"possible. Would","Fragments":["you"]},{"Key":"you recommend","Fragments":["getting"]},{"Key":"recommend getting","Fragments":["rid"]},{"Key":"the (.endsWith)","Fragments":["call"]},{"Key":"(.endsWith) call","Fragments":["and"]},{"Key":"that `letfn`","Fragments":["is"]},{"Key":"`letfn` is","Fragments":["particularly"]},{"Key":"is particularly","Fragments":["useful"]},{"Key":"when function","Fragments":["is"]},{"Key":"is recursive","Fragments":["(`let`"]},{"Key":"recursive (`let`","Fragments":["does"]},{"Key":"(`let` does","Fragments":["not"]},{"Key":"not allow","Fragments":["for"]},{"Key":"allow for","Fragments":["self","local"]},{"Key":"for self","Fragments":["reference"]},{"Key":"self reference","Fragments":["on"]},{"Key":"reference on","Fragments":["the"]},{"Key":"the right-hand","Fragments":["of"]},{"Key":"right-hand of","Fragments":["the"]},{"Key":"binding form).","Fragments":["It's"]},{"Key":"form). It's","Fragments":["also"]},{"Key":"also useful","Fragments":["in"]},{"Key":"of mutual","Fragments":["recursion"]},{"Key":"mutual recursion","Fragments":["(when"]},{"Key":"recursion (when","Fragments":["function"]},{"Key":"(when function","Fragments":["a"]},{"Key":"a calls","Fragments":["function"]},{"Key":"calls function","Fragments":["b","a,"]},{"Key":"function b","Fragments":["and","calls"]},{"Key":"b and","Fragments":["in"]},{"Key":"in turn,","Fragments":["function"]},{"Key":"turn, function","Fragments":["b"]},{"Key":"b calls","Fragments":["function"]},{"Key":"function a,","Fragments":["both"]},{"Key":"a, both","Fragments":["defined"]},{"Key":"both defined","Fragments":["in"]},{"Key":"same `letfn`","Fragments":["form)."]},{"Key":"nice explanation.","Fragments":["thanks"]},{"Key":"i have","Fragments":["been"]},{"Key":"leave out","Fragments":["the"]},{"Key":"commas because","Fragments":["clearly"]},{"Key":"because clearly","Fragments":["that's"]},{"Key":"clearly that's","Fragments":["what"]},{"Key":"but i've","Fragments":["been"]},{"Key":"i've been","Fragments":["doing"]},{"Key":"doing ruby/javascript","Fragments":["for"]},{"Key":"ruby/javascript for","Fragments":["too"]},{"Key":"long and","Fragments":["it's"]},{"Key":"my muscle","Fragments":["memory"]},{"Key":"muscle memory","Fragments":["that"]},{"Key":"memory that","Fragments":["a"]},{"Key":"list requires","Fragments":["a"]},{"Key":"requires a","Fragments":["comma."]},{"Key":"a comma.","Fragments":["I'll"]},{"Key":"comma. I'll","Fragments":["clean"]},{"Key":"I'll clean","Fragments":["that"]},{"Key":"Sorry twillis,","Fragments":["i"]},{"Key":"twillis, i","Fragments":["misunderstood"]},{"Key":"i misunderstood","Fragments":["your"]},{"Key":"your nitpick.","Fragments":["I"]},{"Key":"nitpick. I","Fragments":["will","did"]},{"Key":"will change","Fragments":["my"]},{"Key":"change my","Fragments":["code.Thank","mind.","mind,"]},{"Key":"my code.Thank","Fragments":["you."]},{"Key":" sgrimm,","Fragments":["thank"]},{"Key":"sgrimm, thank","Fragments":["you."]},{"Key":" twillis,","Fragments":["there"]},{"Key":"twillis, there","Fragments":["is"]},{"Key":"a discussion","Fragments":["on"]},{"Key":"this topic","Fragments":["going"]},{"Key":"topic going","Fragments":["on"]},{"Key":"on here:","Fragments":["http://exercism.io/submissions/509c816d8a4ccaa34e254025"]},{"Key":"my english","Fragments":["mistakes."]},{"Key":"letters you","Fragments":["can"]},{"Key":" (rand-nth","Fragments":["(map"]},{"Key":"(rand-nth (map","Fragments":["char"]},{"Key":"(range (int","Fragments":["\\A)"]},{"Key":"sure whether","Fragments":["that's","`only-numbers?`","your"]},{"Key":"whether that's","Fragments":["better"]},{"Key":"that's better","Fragments":["or","or"]},{"Key":"or worse.","Fragments":[";)"]},{"Key":"about performance,","Fragments":["but"]},{"Key":"performance, but","Fragments":["it"]},{"Key":"use core","Fragments":["clojure"]},{"Key":"functions where","Fragments":["applicable"]},{"Key":"where applicable","Fragments":["than"]},{"Key":"applicable than","Fragments":["dropping"]},{"Key":"than dropping","Fragments":["to"]},{"Key":"dropping to","Fragments":["java."]},{"Key":"to java.","Fragments":["However"]},{"Key":"java. However","Fragments":["having"]},{"Key":"However having","Fragments":["said"]},{"Key":"having said","Fragments":["that,","that"]},{"Key":"I certainly","Fragments":["would"]},{"Key":"certainly would","Fragments":["trust"]},{"Key":"would trust","Fragments":["the"]},{"Key":"trust the","Fragments":["clojure"]},{"Key":"clojure core","Fragments":["team","method"]},{"Key":"core team","Fragments":["to"]},{"Key":"team to","Fragments":["make"]},{"Key":"make better","Fragments":["performance"]},{"Key":"better performance","Fragments":["decisions"]},{"Key":"performance decisions","Fragments":["over"]},{"Key":"decisions over","Fragments":["mine"]},{"Key":"over mine","Fragments":[":)"]},{"Key":"However, having","Fragments":["said"]},{"Key":"are performance","Fragments":["penalties"]},{"Key":"performance penalties","Fragments":["to"]},{"Key":"penalties to","Fragments":["using"]},{"Key":"using persistent","Fragments":["data"]},{"Key":"structures (such","Fragments":["as"]},{"Key":"(such as","Fragments":["with","this","clojurescript"]},{"Key":"with large","Fragments":["matrix","number"]},{"Key":"large matrix","Fragments":["calculations),"]},{"Key":"matrix calculations),","Fragments":["so"]},{"Key":"calculations), so","Fragments":["when"]},{"Key":"so when","Fragments":["raw"]},{"Key":"when raw","Fragments":["performance"]},{"Key":"raw performance","Fragments":["is"]},{"Key":"an issue","Fragments":["there"]},{"Key":"issue there","Fragments":["may"]},{"Key":"there may","Fragments":["be"]},{"Key":"be need","Fragments":["to"]},{"Key":"drop to","Fragments":["native"]},{"Key":"to native","Fragments":["data"]},{"Key":"native data","Fragments":["structures."]},{"Key":"Nice overall","Fragments":["solution."]},{"Key":"I've mentioned","Fragments":["the"]},{"Key":"mentioned the","Fragments":["use"]},{"Key":"of `use`","Fragments":["functions"]},{"Key":"`use` functions","Fragments":["in"]},{"Key":"in another","Fragments":["nitpicks","solution","exercise"]},{"Key":"another nitpicks","Fragments":["to"]},{"Key":"nitpicks to","Fragments":["you,"]},{"Key":"to you,","Fragments":["so"]},{"Key":"you, so","Fragments":["won't"]},{"Key":"so won't","Fragments":["repeat"]},{"Key":"won't repeat","Fragments":["that"]},{"Key":"of `fnil`","Fragments":["and"]},{"Key":"`fnil` and","Fragments":["`update-in`."]},{"Key":"turn the","Fragments":["string","dna"]},{"Key":"a `seq`","Fragments":["in","of"]},{"Key":"`seq` in","Fragments":["your"]},{"Key":"your `letter-count`","Fragments":["functions."]},{"Key":" `doall`","Fragments":["isn't"]},{"Key":"`doall` isn't","Fragments":["necessary"]},{"Key":"case. It's","Fragments":["primary"]},{"Key":"It's primary","Fragments":["purpose"]},{"Key":"primary purpose","Fragments":["is"]},{"Key":"purpose is","Fragments":["to"]},{"Key":"force evaluation","Fragments":["of","of"]},{"Key":"of lazy","Fragments":["or"]},{"Key":"lazy or","Fragments":["side-effect"]},{"Key":"or side-effect","Fragments":["only"]},{"Key":"side-effect only","Fragments":["code."]},{"Key":"only code.","Fragments":["Filter,"]},{"Key":"code. Filter,","Fragments":["while"]},{"Key":"Filter, while","Fragments":["lazy,"]},{"Key":"while lazy,","Fragments":["will"]},{"Key":"lazy, will","Fragments":["have"]},{"Key":"have it's","Fragments":["value"]},{"Key":"it's value","Fragments":["evaluated"]},{"Key":"value evaluated","Fragments":["in"]},{"Key":"test cases.","Fragments":["Most"]},{"Key":"cases. Most","Fragments":["of"]},{"Key":"time, I","Fragments":["think,"]},{"Key":"think, you","Fragments":["should","could"]},{"Key":"should prefer","Fragments":["to","recur"]},{"Key":"be lazy.","Fragments":[":)"]},{"Key":"lazy `seq`,","Fragments":["it's"]},{"Key":"`seq`, it's","Fragments":["common"]},{"Key":"concrete collection","Fragments":["using"]},{"Key":"collection using","Fragments":["`vec`"]},{"Key":"using `vec`","Fragments":["or"]},{"Key":"`vec` or","Fragments":["`set`."]},{"Key":"While commas","Fragments":["are"]},{"Key":"are considered","Fragments":["whitespace"]},{"Key":"considered whitespace","Fragments":["and"]},{"Key":"and perfectly","Fragments":["legal,"]},{"Key":"perfectly legal,","Fragments":["it's"]},{"Key":"legal, it's","Fragments":["idiomatic"]},{"Key":"it's idiomatic","Fragments":["to","to","in","in"]},{"Key":"leave them","Fragments":["out","there."]},{"Key":"many cases.","Fragments":["Your"]},{"Key":"cases. Your","Fragments":["function"]},{"Key":"Your function","Fragments":["definitions"]},{"Key":"definitions look","Fragments":["\"funny\""]},{"Key":"look \"funny\"","Fragments":["with"]},{"Key":"\"funny\" with","Fragments":["them"]},{"Key":"with them","Fragments":["in"]},{"Key":"think most","Fragments":["Clojurists"]},{"Key":"most Clojurists","Fragments":["reserve","are"]},{"Key":"Clojurists reserve","Fragments":["them"]},{"Key":"reserve them","Fragments":["for"]},{"Key":"them for","Fragments":["very","use"]},{"Key":"very specific","Fragments":["cases","fit"]},{"Key":"cases such","Fragments":["as"]},{"Key":"as wanting","Fragments":["to"]},{"Key":"wanting to","Fragments":["write","use"]},{"Key":"map literal","Fragments":["on"]},{"Key":"literal on","Fragments":["a"]},{"Key":" @jaquan","Fragments":["this"]},{"Key":"@jaquan this","Fragments":["I"]},{"Key":"didn't know.","Fragments":["Thank"]},{"Key":"know. Thank","Fragments":["you!"]},{"Key":"Using hash-set","Fragments":["to"]},{"Key":"hash-set to","Fragments":["count"]},{"Key":"count the","Fragments":["distinct"]},{"Key":"the distinct","Fragments":["sides"]},{"Key":"distinct sides","Fragments":["is"]},{"Key":"sides is","Fragments":["a"]},{"Key":"compact (not","Fragments":["necessarily"]},{"Key":"(not necessarily","Fragments":["better)"]},{"Key":"necessarily better)","Fragments":["way"]},{"Key":"better) way","Fragments":["to"]},{"Key":"for validity","Fragments":["too...","could"]},{"Key":"Overall really","Fragments":["good"]},{"Key":"think with","Fragments":["a","a"]},{"Key":"split without","Fragments":["having"]},{"Key":"to also","Fragments":["do","be","fix"]},{"Key":"a replace.","Fragments":["If"]},{"Key":"replace. If","Fragments":["you"]},{"Key":"you capture","Fragments":["that"]},{"Key":"capture that","Fragments":["correctly,"]},{"Key":"that correctly,","Fragments":["you"]},{"Key":"correctly, you","Fragments":["could"]},{"Key":"also then","Fragments":["remove"]},{"Key":"then remove","Fragments":["the"]},{"Key":"the `dissoc`","Fragments":["to"]},{"Key":"`dissoc` to","Fragments":["take"]},{"Key":"take out","Fragments":["the"]},{"Key":"string key.","Fragments":["(Hint:"]},{"Key":"key. (Hint:","Fragments":["try"]},{"Key":"(Hint: try","Fragments":["splitting"]},{"Key":"try splitting","Fragments":["on"]},{"Key":"more characters","Fragments":["that"]},{"Key":"characters that","Fragments":["are","were"]},{"Key":"Your codes","Fragments":["looks"]},{"Key":"codes looks","Fragments":["good","awesome"]},{"Key":"good and","Fragments":["gave","so","some"]},{"Key":"and gave","Fragments":["me","me"]},{"Key":"some insight","Fragments":["like"]},{"Key":"insight like","Fragments":["using"]},{"Key":"`declare` and","Fragments":["`defn-`"]},{"Key":"Overall it","Fragments":["looks","looks"]},{"Key":"Using `cond`","Fragments":["where"]},{"Key":"`cond` where","Fragments":["you","the"]},{"Key":"same comparison","Fragments":["used"]},{"Key":"comparison used","Fragments":["in"]},{"Key":"use `condp`.","Fragments":["When"]},{"Key":"`condp`. When","Fragments":["it's"]},{"Key":"When it's","Fragments":["just"]},{"Key":"an equality","Fragments":["comparison,"]},{"Key":"equality comparison,","Fragments":["you"]},{"Key":"comparison, you","Fragments":["can"]},{"Key":"use `case`.","Fragments":["One"]},{"Key":"`case`. One","Fragments":["of"]},{"Key":"those might","Fragments":["be"]},{"Key":"nicer for","Fragments":["you're"]},{"Key":"for you're","Fragments":["conditions?"]},{"Key":"`range` will","Fragments":["take"]},{"Key":"a 3rd","Fragments":["argument"]},{"Key":"argument which","Fragments":["is","is"]},{"Key":"the \"step\",","Fragments":["so"]},{"Key":"\"step\", so","Fragments":["you"]},{"Key":"`(range start","Fragments":["end"]},{"Key":"start end","Fragments":["-1)`"]},{"Key":"end -1)`","Fragments":["to"]},{"Key":"-1)` to","Fragments":["count"]},{"Key":"count down.","Fragments":["That"]},{"Key":"down. That","Fragments":["would"]},{"Key":"range and","Fragments":["then","vector"]},{"Key":"then reversing","Fragments":["it."]},{"Key":"reversing it.","Fragments":["That"]},{"Key":"it. That","Fragments":["would"]},{"Key":"would collapse","Fragments":["the"]},{"Key":"first 4","Fragments":["expressions"]},{"Key":"4 expressions","Fragments":["of"]},{"Key":"expressions of","Fragments":["the"]},{"Key":"thread macro","Fragments":["down"]},{"Key":"macro down","Fragments":["into"]},{"Key":"single expression","Fragments":["which"]},{"Key":"expression which","Fragments":["might"]},{"Key":"better overall","Fragments":["as"]},{"Key":"overall as","Fragments":["well."]},{"Key":"Thanks, I'm","Fragments":["glad"]},{"Key":"I'm glad","Fragments":["I"]},{"Key":"glad I","Fragments":["could"]},{"Key":"so `@spencer`","Fragments":["and"]},{"Key":"`@spencer` and","Fragments":["`swap!`"]},{"Key":"and `swap!`","Fragments":["are"]},{"Key":"`swap!` are","Fragments":["called"]},{"Key":"been changed","Fragments":["in"]},{"Key":"the `swap!`","Fragments":["with"]},{"Key":"passed. Also,","Fragments":["`swap!`"]},{"Key":"Also, `swap!`","Fragments":["returns"]},{"Key":"`swap!` returns","Fragments":["the"]},{"Key":"new value,","Fragments":["so"]},{"Key":"value, so","Fragments":["you"]},{"Key":"of dereferencing","Fragments":["r"]},{"Key":"dereferencing r","Fragments":["again."]},{"Key":"transaction boundaries","Fragments":["and"]},{"Key":"boundaries and","Fragments":["would"]},{"Key":"a concurrent","Fragments":["situation."]},{"Key":"better because","Fragments":["that"]},{"Key":"way it's","Fragments":["harder"]},{"Key":"it's harder","Fragments":["to"]},{"Key":"to miss","Fragments":["one."]},{"Key":"miss one.","Fragments":["Thanks!"]},{"Key":"define your","Fragments":["method"]},{"Key":"method outside","Fragments":["of"]},{"Key":"`response-for` method,","Fragments":["it"]},{"Key":"method, it","Fragments":["would"]},{"Key":"look prettier","Fragments":["than"]},{"Key":"prettier than","Fragments":["now,"]},{"Key":"than now,","Fragments":["I"]},{"Key":"I reckon","Fragments":["like","I'd"]},{"Key":" `sorted`","Fragments":["can"]},{"Key":"`sorted` can","Fragments":["be"]},{"Key":"composition with","Fragments":["`comp`."]},{"Key":"`comp`. Besides,","Fragments":["a"]},{"Key":"Besides, a","Fragments":["verb"]},{"Key":"a verb","Fragments":["form"]},{"Key":"verb form","Fragments":["is"]},{"Key":"appropriate for","Fragments":["a"]},{"Key":"of style,","Fragments":["but"]},{"Key":"start bindings","Fragments":["list"]},{"Key":"of like","Fragments":["this"]},{"Key":"this triangle","Fragments":["validation"]},{"Key":"triangle validation","Fragments":["actually."]},{"Key":"validation actually.","Fragments":["It's"]},{"Key":"actually. It's","Fragments":["much"]},{"Key":"It's much","Fragments":["closer"]},{"Key":"much closer","Fragments":["to"]},{"Key":"the mathematical","Fragments":["version","definition."]},{"Key":"mathematical version","Fragments":["of"]},{"Key":"of determining","Fragments":["whether"]},{"Key":"of lines","Fragments":["can"]},{"Key":"lines can","Fragments":["be"]},{"Key":"be formed","Fragments":["based"]},{"Key":"formed based","Fragments":["on"]},{"Key":"on length.","Fragments":["But"]},{"Key":"length. But","Fragments":["hey,"]},{"Key":"hey, you","Fragments":["can"]},{"Key":"always go","Fragments":["back"]},{"Key":"go back","Fragments":["to"]},{"Key":"other one.","Fragments":[":)"]},{"Key":"the `valid-triangle?`","Fragments":["function"]},{"Key":"`valid-triangle?` function","Fragments":["to"]},{"Key":"longest side","Fragments":["to"]},{"Key":"side to","Fragments":["the"]},{"Key":"two other","Fragments":["sides,"]},{"Key":"other sides,","Fragments":["which"]},{"Key":"sides, which","Fragments":["is"]},{"Key":"more compact,","Fragments":["although"]},{"Key":"compact, although","Fragments":["arguably"]},{"Key":"although arguably","Fragments":["less"]},{"Key":"arguably less","Fragments":["expressive"]},{"Key":"expressive of","Fragments":["its"]},{"Key":"read nicer","Fragments":["if"]},{"Key":"nicer if","Fragments":["you"]},{"Key":"extract some","Fragments":["of","operations"]},{"Key":" Nested","Fragments":["ifs"]},{"Key":"Nested ifs","Fragments":["like"]},{"Key":"ifs like","Fragments":["that"]},{"Key":"are kind","Fragments":["of"]},{"Key":"awkward and","Fragments":["might"]},{"Key":"and might","Fragments":["be"]},{"Key":"different conditional","Fragments":["function"]},{"Key":"conditional function","Fragments":["like","and"]},{"Key":"like `cond`","Fragments":["might"]},{"Key":"think `require`","Fragments":["is"]},{"Key":"`require` is","Fragments":["preferred","more"]},{"Key":"over `use`","Fragments":["generally."]},{"Key":" upper-case","Fragments":["will"]},{"Key":"upper-case will","Fragments":["work"]},{"Key":"characters or","Fragments":["strings,"]},{"Key":"or strings,","Fragments":["so"]},{"Key":"so no","Fragments":["need","one"]},{"Key":"cast it","Fragments":["to"]},{"Key":"function `re-find`","Fragments":["that"]},{"Key":"`re-find` that","Fragments":["might"]},{"Key":"be interesting","Fragments":["to","to"]},{"Key":"interesting to","Fragments":["try","look"]},{"Key":"try for","Fragments":["your"]},{"Key":"your condp","Fragments":["predicate."]},{"Key":"your advice.","Fragments":["I"]},{"Key":"advice. I","Fragments":["updated"]},{"Key":"code using","Fragments":["`cond`.","`not=`,"]},{"Key":"of `sorted`,","Fragments":["using"]},{"Key":"`sorted`, using","Fragments":["`reduce-kv`"]},{"Key":"`reduce-kv` would","Fragments":["feel"]},{"Key":"would feel","Fragments":["clearer","if"]},{"Key":"feel clearer","Fragments":["to"]},{"Key":"me. The","Fragments":["added","`swap!`"]},{"Key":"The added","Fragments":["benefit"]},{"Key":"appreciate feedback","Fragments":["on","on"]},{"Key":"my third","Fragments":["iteration","iteration","example.","revision."]},{"Key":"third iteration","Fragments":["if","if"]},{"Key":"iteration if","Fragments":["you","you"]},{"Key":"Yes, but","Fragments":["`assert`"]},{"Key":"but `assert`","Fragments":["throws"]},{"Key":"`assert` throws","Fragments":["`AssertionError`"]},{"Key":"throws `AssertionError`","Fragments":["and"]},{"Key":"`AssertionError` and","Fragments":["breaks"]},{"Key":"and breaks","Fragments":["the"]},{"Key":"breaks the","Fragments":["test"]},{"Key":" ERROR","Fragments":["in"]},{"Key":"ERROR in","Fragments":["(validates-nucleotides)"]},{"Key":"in (validates-nucleotides)","Fragments":["(dna.clj:8)"]},{"Key":"expected: (thrown-with-msg?","Fragments":["Exception"]},{"Key":"(thrown-with-msg? Exception","Fragments":["#\"invalid"]},{"Key":"Exception #\"invalid","Fragments":["nucleotide\""]},{"Key":"#\"invalid nucleotide\"","Fragments":["(dna/count"]},{"Key":"nucleotide\" (dna/count","Fragments":["\\X"]},{"Key":"(dna/count \\X","Fragments":["\"GACT\"))"]},{"Key":"actual: java.lang.AssertionError:","Fragments":["Assert"]},{"Key":"java.lang.AssertionError: Assert","Fragments":["failed:"]},{"Key":"Assert failed:","Fragments":["invalid"]},{"Key":"failed: invalid","Fragments":["nucleotide"]},{"Key":" (valid-nucleotides?","Fragments":["n)"]},{"Key":" at","Fragments":["dna$count.invoke"]},{"Key":"at dna$count.invoke","Fragments":["(dna.clj:8)"]},{"Key":" take","Fragments":["a"]},{"Key":"at frequencies","Fragments":["function"]},{"Key":" @dylan","Fragments":["thank","-"]},{"Key":"@dylan thank","Fragments":["you!"]},{"Key":"you! `reduce-kv`","Fragments":["is"]},{"Key":" Thinking","Fragments":["there's"]},{"Key":"Thinking there's","Fragments":["a"]},{"Key":" @lavada","Fragments":["i"]},{"Key":"@lavada i","Fragments":["definitely"]},{"Key":"i definitely","Fragments":["should"]},{"Key":"definitely should","Fragments":["use"]},{"Key":"use function","Fragments":["composition"]},{"Key":"composition more","Fragments":["often,"]},{"Key":"more often,","Fragments":["thanks"]},{"Key":"often, thanks","Fragments":[":)"]},{"Key":"conditions is","Fragments":["normally","more"]},{"Key":"normally better","Fragments":["written"]},{"Key":"dna)` is","Fragments":["not"]},{"Key":"since a","Fragments":["String","more"]},{"Key":"Keep going","Fragments":["in"]},{"Key":"of separating","Fragments":["the"]},{"Key":"the transcription.","Fragments":[":)"]},{"Key":"some or","Fragments":["to","every?"]},{"Key":"wrap char","Fragments":["in"]},{"Key":"char in","Fragments":["a","the"]},{"Key":"a set.","Fragments":["Sets","You"]},{"Key":"set. Sets","Fragments":["implement"]},{"Key":"Sets implement","Fragments":["IFn,"]},{"Key":"implement IFn,","Fragments":["and"]},{"Key":"IFn, and","Fragments":["passing"]},{"Key":"and passing","Fragments":["the"]},{"Key":"char to","Fragments":["the","char,"]},{"Key":"set function","Fragments":["call"]},{"Key":"char (which","Fragments":["-"]},{"Key":"(which -","Fragments":["given"]},{"Key":"- given","Fragments":["the"]},{"Key":"set members","Fragments":["-"]},{"Key":"members -","Fragments":["will"]},{"Key":"- will","Fragments":["be","help"]},{"Key":"be truthy","Fragments":["in"]},{"Key":"truthy in","Fragments":["this","Clojure."]},{"Key":"this case)","Fragments":["if"]},{"Key":"case) if","Fragments":["it"]},{"Key":"nil if","Fragments":["it","for"]},{"Key":"is not.","Fragments":["Since"]},{"Key":"not. Since","Fragments":["in"]},{"Key":"Since in","Fragments":["this"]},{"Key":"case you're","Fragments":["just","totally"]},{"Key":"you're just","Fragments":["trying","looking"]},{"Key":"just trying","Fragments":["to"]},{"Key":"to short","Fragments":["circuit"]},{"Key":"short circuit","Fragments":["the"]},{"Key":"circuit the","Fragments":["call"]},{"Key":"throw when","Fragments":["the"]},{"Key":"char is","Fragments":["in"]},{"Key":"the set,","Fragments":["you"]},{"Key":"set, you","Fragments":["can"]},{"Key":"slightly shorter","Fragments":["form","and"]},{"Key":"shorter form","Fragments":["below:"]},{"Key":"(defn- validate","Fragments":["[char]"]},{"Key":"(or (#{\\C","Fragments":["\\G"]},{"Key":"(#{\\C \\G","Fragments":["\\A","\\A","\\T"]},{"Key":"\\G \\A","Fragments":["\\T}","\\T}","\\T})","\\U"]},{"Key":"\\A \\T}","Fragments":["char)","char)"]},{"Key":"\\T} char)","Fragments":["(throw"]},{"Key":"char) (throw","Fragments":["(AssertionError."]},{"Key":"some would","Fragments":["say"]},{"Key":"say idiomatic,","Fragments":["but"]},{"Key":"idiomatic, but","Fragments":["whether"]},{"Key":"but whether","Fragments":["you"]},{"Key":"consider this","Fragments":["good"]},{"Key":"this good","Fragments":["practice"]},{"Key":"practice or","Fragments":["just"]},{"Key":"just clever","Fragments":["and"]},{"Key":"clever and","Fragments":["hard","it"]},{"Key":"and hard","Fragments":["to"]},{"Key":"read is","Fragments":["probably"]},{"Key":"probably up","Fragments":["to"]},{"Key":"have mentioned","Fragments":["that"]},{"Key":" (#{\\C","Fragments":["\\G"]},{"Key":"is around","Fragments":["an"]},{"Key":"around an","Fragments":["order"]},{"Key":"an order","Fragments":["of"]},{"Key":"of magnitude","Fragments":["faster"]},{"Key":"magnitude faster","Fragments":["than"]},{"Key":"Just doing","Fragments":["a"]},{"Key":"rough benchmark","Fragments":["using"]},{"Key":"benchmark using","Fragments":["the"]},{"Key":"time macro,","Fragments":["I"]},{"Key":"macro, I","Fragments":["got"]},{"Key":"(dotimes [_","Fragments":["10000]","10000]"]},{"Key":"[_ 10000]","Fragments":["(some","(#{\\C"]},{"Key":"10000] (some","Fragments":["#{\\A}"]},{"Key":"(some #{\\A}","Fragments":["#{\\C"]},{"Key":"#{\\A} #{\\C","Fragments":["\\G"]},{"Key":"time: 16.048","Fragments":["msecs\""]},{"Key":"10000] (#{\\C","Fragments":["\\G"]},{"Key":"\\T \\A}","Fragments":["\\A)))","dna)}"]},{"Key":"time: 1.17","Fragments":["msecs\""]},{"Key":" Obviously","Fragments":["as","not","using"]},{"Key":"Obviously as","Fragments":["the"]},{"Key":"of dna","Fragments":["grows,"]},{"Key":"dna grows,","Fragments":["this"]},{"Key":"grows, this","Fragments":["may"]},{"Key":"may become","Fragments":["very"]},{"Key":"become very","Fragments":["important."]},{"Key":"Not nuts","Fragments":["about"]},{"Key":"nuts about","Fragments":["(require)"]},{"Key":"about (require)","Fragments":["but"]},{"Key":"(require) but","Fragments":["the"]},{"Key":"test wanted","Fragments":["this"]},{"Key":"wanted this","Fragments":["to"]},{"Key":"its current","Fragments":["namespace"]},{"Key":"namespace so","Fragments":["(ns)","you"]},{"Key":"so (ns)","Fragments":["wasn't"]},{"Key":"(ns) wasn't","Fragments":["appropriate."]},{"Key":" @martin","Fragments":["If"]},{"Key":"@martin If","Fragments":["I"]},{"Key":"correctly, there's","Fragments":["no"]},{"Key":"big difference","Fragments":["in"]},{"Key":"case (since","Fragments":["I"]},{"Key":"(since I","Fragments":["use"]},{"Key":"use `:only`),","Fragments":["but"]},{"Key":"`:only`), but","Fragments":["it's"]},{"Key":"Changed it","Fragments":["fifth"]},{"Key":"it fifth","Fragments":["iteration."]},{"Key":" `sort`","Fragments":["would"]},{"Key":"`sort` would","Fragments":["be"]},{"Key":"case. `sort-by`","Fragments":["is"]},{"Key":"`sort-by` is","Fragments":["really"]},{"Key":"really when","Fragments":["you"]},{"Key":"literal set","Fragments":["instead"]},{"Key":"set instead","Fragments":["of","of"]},{"Key":"of needing","Fragments":["to","a"]},{"Key":"needing to","Fragments":["do","dive"]},{"Key":"do into.","Fragments":["e.g."]},{"Key":"into. e.g.","Fragments":["`#{a"]},{"Key":"e.g. `#{a","Fragments":["b"]},{"Key":"`#{a b","Fragments":["c}`"]},{"Key":"lot easier","Fragments":["to","and"]},{"Key":"like `beer`","Fragments":["and"]},{"Key":"`beer` and","Fragments":["`on-the-wall`"]},{"Key":"and `on-the-wall`","Fragments":["etc"]},{"Key":"`on-the-wall` etc","Fragments":["into"]},{"Key":"etc into","Fragments":["their"]},{"Key":"return vectors","Fragments":["of"]},{"Key":"vectors of","Fragments":["strings"]},{"Key":"strings from","Fragments":["those"]},{"Key":"from those","Fragments":["methods"]},{"Key":"those methods","Fragments":["as"]},{"Key":"just constructing","Fragments":["the"]},{"Key":"constructing the","Fragments":["strings"]},{"Key":"strings themselves.","Fragments":["I"]},{"Key":"themselves. I","Fragments":["think"]},{"Key":"think taking","Fragments":["the"]},{"Key":"simpler approach","Fragments":["of"]},{"Key":"just making","Fragments":["the"]},{"Key":"string cases","Fragments":["would"]},{"Key":"cases would","Fragments":["probably"]},{"Key":"probably simplify","Fragments":["things"]},{"Key":"Minor nit.","Fragments":["It's"]},{"Key":"nit. It's","Fragments":["idiomatic"]},{"Key":"It's idiomatic","Fragments":["to","to"]},{"Key":"start the","Fragments":["let"]},{"Key":"let value","Fragments":["on"]},{"Key":"the let.","Fragments":["e.g."]},{"Key":"let. e.g.","Fragments":["`let"]},{"Key":"e.g. `let","Fragments":["[x","[words"]},{"Key":"`let [x","Fragments":["1`"]},{"Key":"[x 1`","Fragments":["without"]},{"Key":"1` without","Fragments":["a"]},{"Key":"the overall","Fragments":["separation","solution","structure","structure"]},{"Key":"overall separation","Fragments":["of"]},{"Key":" `(take","Fragments":["10"]},{"Key":"`(take 10","Fragments":["(repeat"]},{"Key":"10 (repeat","Fragments":["\\0))`"]},{"Key":"(repeat \\0))`","Fragments":["is"]},{"Key":"\\0))` is","Fragments":["the"]},{"Key":"as `(repeat","Fragments":["10"]},{"Key":"`(repeat 10","Fragments":["\\0)`"]},{"Key":"10 \\0)`","Fragments":["which"]},{"Key":"\\0)` which","Fragments":["is"]},{"Key":"is maybe","Fragments":["a"]},{"Key":"easier just","Fragments":["to"]},{"Key":"to manipulate","Fragments":["most"]},{"Key":"manipulate most","Fragments":["of"]},{"Key":"as Strings","Fragments":["though."]},{"Key":"Strings though.","Fragments":["`(apply"]},{"Key":"though. `(apply","Fragments":["str"]},{"Key":"str some-str)`","Fragments":["just"]},{"Key":"some-str)` just","Fragments":["returns"]},{"Key":"the some-str.","Fragments":["There's"]},{"Key":"some-str. There's","Fragments":["also"]},{"Key":"`subs` function","Fragments":["that"]},{"Key":"that allows","Fragments":["you","you"]},{"Key":"to substring.","Fragments":["Maybe"]},{"Key":"substring. Maybe","Fragments":["that"]},{"Key":"Maybe that","Fragments":["would"]},{"Key":"little cleaner","Fragments":["than"]},{"Key":"than take/drop","Fragments":["and"]},{"Key":"take/drop and","Fragments":["then"]},{"Key":"then recreating","Fragments":["the"]},{"Key":"recreating the","Fragments":["string?"]},{"Key":"Thanks! Using","Fragments":["`count`"]},{"Key":"Using `count`","Fragments":["is"]},{"Key":"`count` is","Fragments":["definitely","in"]},{"Key":"show intent,","Fragments":["so"]},{"Key":"the cond-part","Fragments":["on"]},{"Key":"cond-part on","Fragments":["L9"]},{"Key":"on L9","Fragments":["as"]},{"Key":"L9 as","Fragments":["descriptive"]},{"Key":"as descriptive","Fragments":["as"]},{"Key":"descriptive as","Fragments":["possible."]},{"Key":"now (more","Fragments":["clearly)"]},{"Key":"(more clearly)","Fragments":["shows"]},{"Key":"clearly) shows","Fragments":["that"]},{"Key":"logic behind","Fragments":["`shout?`"]},{"Key":"behind `shout?`","Fragments":["is"]},{"Key":"`shout?` is","Fragments":["somewhat","really"]},{"Key":"somewhat weird;","Fragments":["first"]},{"Key":"weird; first","Fragments":["candidate"]},{"Key":"first candidate","Fragments":["for"]},{"Key":"(= message","Fragments":["(upper-case","(lower-case"]},{"Key":"message (upper-case","Fragments":["message))"]},{"Key":"message (lower-case","Fragments":["message))`"]},{"Key":"love this","Fragments":["statement"]},{"Key":"this statement","Fragments":[":)"]},{"Key":"And love","Fragments":["your"]},{"Key":"your naming","Fragments":["like"]},{"Key":"naming like","Fragments":["yelling?"]},{"Key":"learning Scala","Fragments":["as"]},{"Key":"Scala as","Fragments":["well"]},{"Key":"and hope","Fragments":["that"]},{"Key":"use '?'","Fragments":["character"]},{"Key":"'?' character","Fragments":["for"]},{"Key":"character for","Fragments":["predicate"]},{"Key":"predicate var","Fragments":["or"]},{"Key":"var or","Fragments":["method."]},{"Key":" Look","Fragments":["Great","at"]},{"Key":"Look Great","Fragments":["for"]},{"Key":"Great for","Fragments":["me!"]},{"Key":"think `:require","Fragments":["[clojure.string"]},{"Key":":refer (lower-case","Fragments":["split"]},{"Key":"(lower-case split","Fragments":["replace)]`"]},{"Key":"split replace)]`","Fragments":["would"]},{"Key":"replace)]` would","Fragments":["be"]},{"Key":"most preferred.","Fragments":["There's"]},{"Key":"preferred. There's","Fragments":["a"]},{"Key":"of overlap","Fragments":["in"]},{"Key":"overlap in","Fragments":["loading"]},{"Key":"in loading","Fragments":["required"]},{"Key":"loading required","Fragments":["code"]},{"Key":"required code","Fragments":["in"]},{"Key":"like most","Fragments":["Clojurists"]},{"Key":"Clojurists are","Fragments":["leaning"]},{"Key":"are leaning","Fragments":["toward"]},{"Key":"leaning toward","Fragments":["using"]},{"Key":"toward using","Fragments":["the"]},{"Key":"you lowercase","Fragments":["the"]},{"Key":"lowercase the","Fragments":["input","`word`"]},{"Key":"input before","Fragments":["you","you"]},{"Key":"the split,","Fragments":["you"]},{"Key":"split, you","Fragments":["can"]},{"Key":"(= xx","Fragments":["yy))`"]},{"Key":"xx yy))`","Fragments":["can"]},{"Key":"yy))` can","Fragments":["also"]},{"Key":"written with","Fragments":["`not=`"]},{"Key":"In `anagrams-for`","Fragments":["you"]},{"Key":"`anagrams-for` you","Fragments":["might"]},{"Key":"try either","Fragments":["an"]},{"Key":"either an","Fragments":["anonymous"]},{"Key":"a `partial`","Fragments":["function"]},{"Key":" `question`","Fragments":["shouldn't"]},{"Key":"`question` shouldn't","Fragments":["need"]},{"Key":"shouldn't need","Fragments":["to","to","to","to","to","to"]},{"Key":"be lower-case","Fragments":["to"]},{"Key":"lower-case to","Fragments":["check"]},{"Key":"`?` I","Fragments":["don't"]},{"Key":" `silence`","Fragments":["could"]},{"Key":"`silence` could","Fragments":["also"]},{"Key":"silence? blank?)`","Fragments":["taking"]},{"Key":"blank?)` taking","Fragments":["advantage"]},{"Key":"Var to","Fragments":["a"]},{"Key":"so function","Fragments":["application"]},{"Key":"function application","Fragments":["would","help"]},{"Key":"application would","Fragments":["work"]},{"Key":"work the","Fragments":["same","first","way"]},{"Key":"same and","Fragments":["you"]},{"Key":"wouldn't explicitly","Fragments":["have"]},{"Key":"explicitly have","Fragments":["to"]},{"Key":"argument in","Fragments":["the"]},{"Key":"inline these","Fragments":["in"]},{"Key":"these in","Fragments":["a"]},{"Key":"a let,","Fragments":["you"]},{"Key":"let, you","Fragments":["could"]},{"Key":"values instead","Fragments":["of","of"]},{"Key":"the boolean","Fragments":["values","methods."]},{"Key":"values `blank?`,","Fragments":["`shout?`,"]},{"Key":"`blank?`, `shout?`,","Fragments":["etc."]},{"Key":"With one","Fragments":["input"]},{"Key":"one input","Fragments":["in"]},{"Key":"input in","Fragments":["an"]},{"Key":"write `%1`","Fragments":["as"]},{"Key":"`%1` as","Fragments":["just"]},{"Key":"`%` as","Fragments":["well."]},{"Key":"well. Which","Fragments":["I"]},{"Key":"Which I","Fragments":["think"]},{"Key":"from :use","Fragments":["to"]},{"Key":":use to","Fragments":[":require"]},{"Key":"to :require","Fragments":["and"]},{"Key":"split from","Fragments":["\\s+"]},{"Key":"from \\s+","Fragments":["\\W+"]},{"Key":"\\s+ \\W+","Fragments":["which"]},{"Key":"\\W+ which","Fragments":["takes"]},{"Key":"takes care","Fragments":["of","of"]},{"Key":"all non","Fragments":["character"]},{"Key":"non character","Fragments":["things(i"]},{"Key":"character things(i","Fragments":["think)"]},{"Key":"things(i think)","Fragments":["so"]},{"Key":"think) so","Fragments":["I"]},{"Key":"the invalids","Fragments":["string"]},{"Key":"invalids string","Fragments":["and"]},{"Key":"the replace.","Fragments":["also"]},{"Key":"replace. also","Fragments":["lower-cased"]},{"Key":"also lower-cased","Fragments":["input"]},{"Key":"lower-cased input","Fragments":["to"]},{"Key":"suggested by","Fragments":["@weston","@rogelio"]},{"Key":" pretty","Fragments":["concise"]},{"Key":"pretty concise","Fragments":["so","and"]},{"Key":"concise so","Fragments":["I'm"]},{"Key":"definitely prefer","Fragments":["it."]},{"Key":" @hazel","Fragments":["Thanks"]},{"Key":"@hazel Thanks","Fragments":["again"]},{"Key":"again :)","Fragments":["At"]},{"Key":":) At","Fragments":["first"]},{"Key":"At first","Fragments":["I","blush,","I","I"]},{"Key":"first I","Fragments":["wanted","generated","tried"]},{"Key":"to insert","Fragments":["spaces","correctly"]},{"Key":"insert spaces","Fragments":["between"]},{"Key":"spaces between","Fragments":["words"]},{"Key":"between words","Fragments":["out"]},{"Key":"the box,","Fragments":["however"]},{"Key":"box, however","Fragments":["it"]},{"Key":"it caused","Fragments":["unnecessary"]},{"Key":"caused unnecessary","Fragments":["complexity."]},{"Key":"Ahh, good","Fragments":["call"]},{"Key":"good call","Fragments":["on"]},{"Key":"syntax throwing","Fragments":["an"]},{"Key":"an exception.","Fragments":["You"]},{"Key":"exception. You","Fragments":["can"]},{"Key":"also write","Fragments":["`(set"]},{"Key":"write `(set","Fragments":["[a"]},{"Key":"`(set [a","Fragments":["b"]},{"Key":"[a b","Fragments":["c])`"]},{"Key":"b c])`","Fragments":["though"]},{"Key":"c])` though","Fragments":["without"]},{"Key":"though without","Fragments":["error."]},{"Key":"without error.","Fragments":["That's"]},{"Key":"error. That's","Fragments":["a"]},{"Key":"less verbose","Fragments":["and"]},{"Key":"efficient (that's","Fragments":["a"]},{"Key":"(that's a","Fragments":["guess)."]},{"Key":"a guess).","Fragments":["`into`"]},{"Key":"guess). `into`","Fragments":["is"]},{"Key":"`into` is","Fragments":["implemented"]},{"Key":"implemented as","Fragments":["a"]},{"Key":"where `set`","Fragments":["is"]},{"Key":"`set` is","Fragments":["just","used","wrapped"]},{"Key":"a constructor","Fragments":["call."]},{"Key":"prefer `convert`","Fragments":["to"]},{"Key":"`convert` to","Fragments":["be"]},{"Key":"a map,","Fragments":["but","like","I'm"]},{"Key":"then is","Fragments":["there"]},{"Key":"any simple","Fragments":["way"]},{"Key":"simple way","Fragments":["to"]},{"Key":"an `AssertionError`","Fragments":["when"]},{"Key":"`AssertionError` when","Fragments":["it"]},{"Key":" `if`","Fragments":["when","with"]},{"Key":"`if` when","Fragments":["there's"]},{"Key":"is can","Fragments":["also"]},{"Key":"as `when`","Fragments":["which"]},{"Key":"`when` which","Fragments":["seems"]},{"Key":"more intentional","Fragments":["that"]},{"Key":"intentional that","Fragments":["you"]},{"Key":"want an","Fragments":["else"]},{"Key":"an else","Fragments":["clause."]},{"Key":"`(if boolean","Fragments":["x"]},{"Key":"boolean x","Fragments":["nil)`"]},{"Key":"x nil)`","Fragments":["should","can"]},{"Key":"nil)` should","Fragments":["be"]},{"Key":"as `(when","Fragments":["boolean"]},{"Key":"`(when boolean","Fragments":["x)`"]},{"Key":" `(-","Fragments":["x","x","x","bottles_number"]},{"Key":"`(- x","Fragments":["1)`","1)`","1)`"]},{"Key":"x 1)`","Fragments":["might","is","is"]},{"Key":"1)` might","Fragments":["be"]},{"Key":"idiomatic as","Fragments":["`(dec"]},{"Key":"as `(dec","Fragments":["x)`","x)`.","x)`.","bottles_number)`"]},{"Key":" Pre-calculating","Fragments":["the"]},{"Key":"Pre-calculating the","Fragments":["possible"]},{"Key":"possible date","Fragments":["ranges"]},{"Key":"date ranges","Fragments":["makes"]},{"Key":"ranges makes","Fragments":["for"]},{"Key":"And macros","Fragments":["are"]},{"Key":"hard so","Fragments":["I"]},{"Key":"won't comment","Fragments":["too"]},{"Key":"comment too","Fragments":["much"]},{"Key":"much on","Fragments":["them."]},{"Key":"an good","Fragments":["use"]},{"Key":"good use","Fragments":["of","of","of"]},{"Key":" @alysha","Fragments":["Thanks!"]},{"Key":"@alysha Thanks!","Fragments":["I"]},{"Key":"I treated","Fragments":["`let`"]},{"Key":"treated `let`","Fragments":["like"]},{"Key":"`let` like","Fragments":["Haskell's"]},{"Key":"like Haskell's","Fragments":["`where`"]},{"Key":"Haskell's `where`","Fragments":["clause,"]},{"Key":"`where` clause,","Fragments":["but"]},{"Key":"clause, but","Fragments":["now"]},{"Key":"have separate","Fragments":["functions"]},{"Key":"as inner","Fragments":["variables"]},{"Key":"inner variables","Fragments":["to"]},{"Key":"reuse the","Fragments":["given"]},{"Key":"given parameter","Fragments":["`msg`"]},{"Key":"parameter `msg`","Fragments":["instead"]},{"Key":"`msg` instead","Fragments":["of"]},{"Key":"to each","Fragments":["function.","of","predicate."]},{"Key":"function. Does","Fragments":["Clojure's"]},{"Key":"Does Clojure's","Fragments":["lazy"]},{"Key":"Clojure's lazy","Fragments":["evaluation"]},{"Key":"lazy evaluation","Fragments":["work"]},{"Key":"evaluation work","Fragments":["in"]},{"Key":"as lazy","Fragments":["as"]},{"Key":"lazy as","Fragments":["Haskell"]},{"Key":"as Haskell","Fragments":["is"]},{"Key":"Haskell is","Fragments":["by"]},{"Key":"that `seq`s","Fragments":["are"]},{"Key":"only lazy","Fragments":["collections"]},{"Key":"lazy collections","Fragments":["in"]},{"Key":"the generic","Fragments":["Collections"]},{"Key":"generic Collections","Fragments":["(List,"]},{"Key":"Collections (List,","Fragments":["Vector,"]},{"Key":"(List, Vector,","Fragments":["Sets,"]},{"Key":"Vector, Sets,","Fragments":["and"]},{"Key":"Sets, and","Fragments":["Maps)"]},{"Key":"and Maps)","Fragments":["are"]},{"Key":"Maps) are","Fragments":["not."]},{"Key":"are not.","Fragments":["`some`"]},{"Key":"not. `some`","Fragments":["and"]},{"Key":"`not-any?` are","Fragments":["Collection"]},{"Key":"are Collection","Fragments":["functions."]},{"Key":"Collection functions.","Fragments":["(not-any?"]},{"Key":"functions. (not-any?","Fragments":["is"]},{"Key":"(not-any? is","Fragments":["actually"]},{"Key":"actually implement","Fragments":["with"]},{"Key":"implement with","Fragments":["some,"]},{"Key":"with some,","Fragments":["too.)"]},{"Key":"In either","Fragments":["case,"]},{"Key":"either case,","Fragments":["you"]},{"Key":"you immediately","Fragments":["use"]},{"Key":"immediately use","Fragments":["the"]},{"Key":"evaluated either","Fragments":["way"]},{"Key":"way and","Fragments":["I","remove"]},{"Key":"think laziness","Fragments":["would"]},{"Key":"laziness would","Fragments":["help"]},{"Key":" Terminating","Fragments":["the"]},{"Key":"Terminating the","Fragments":["search"]},{"Key":"the search","Fragments":["for"]},{"Key":"for prime","Fragments":["factors"]},{"Key":"prime factors","Fragments":["at","of","a"]},{"Key":"factors at","Fragments":["the"]},{"Key":"square root","Fragments":["of"]},{"Key":"root of","Fragments":["the"]},{"Key":"the incoming","Fragments":["number"]},{"Key":"incoming number","Fragments":["sped"]},{"Key":"number sped","Fragments":["up"]},{"Key":"up this","Fragments":["algorithm","answer"]},{"Key":"this algorithm","Fragments":["from"]},{"Key":"algorithm from","Fragments":["over"]},{"Key":"from over","Fragments":["2"]},{"Key":"to less","Fragments":["than","\"noise\""]},{"Key":"I normally","Fragments":["wouldn't"]},{"Key":"normally wouldn't","Fragments":["expect"]},{"Key":"wouldn't expect","Fragments":["to"]},{"Key":"see `clojure.test`","Fragments":["required"]},{"Key":"`clojure.test` required","Fragments":["into"]},{"Key":"required into","Fragments":["a"]},{"Key":"a non-test","Fragments":["namespace."]},{"Key":"might help","Fragments":["you","you","here","to","you","simplify"]},{"Key":"Characters in","Fragments":["Clojure","Clojure"]},{"Key":"`\\A`, `\\G`,","Fragments":["etc."]},{"Key":"collections of","Fragments":["Characters.","Characters."]},{"Key":" Maps","Fragments":["can","can","can"]},{"Key":"Maps can","Fragments":["be","be","be"]},{"Key":"functions, where","Fragments":["the","the"]},{"Key":"argument passed","Fragments":["to","to","conformed"]},{"Key":"a key","Fragments":["lookup.","lookup.","in"]},{"Key":"`assert` is","Fragments":["a"]},{"Key":"on sort.","Fragments":["I"]},{"Key":"sort. I","Fragments":["learned"]},{"Key":"learned sort-by","Fragments":["before"]},{"Key":"sort-by before","Fragments":["I"]},{"Key":"about sort,","Fragments":["so"]},{"Key":"sort, so","Fragments":["there"]},{"Key":"of exercises","Fragments":["where"]},{"Key":"exercises where","Fragments":["I"]},{"Key":"used sort-by","Fragments":["because"]},{"Key":"sort-by because","Fragments":["I"]},{"Key":"the #{a","Fragments":["b"]},{"Key":"#{a b","Fragments":["c}"]},{"Key":"b c}","Fragments":["set,"]},{"Key":"c} set,","Fragments":["I"]},{"Key":"set, I","Fragments":["don't"]},{"Key":"syntax will","Fragments":["work"]},{"Key":"are duplicate","Fragments":["values."]},{"Key":"duplicate values.","Fragments":["I.e."]},{"Key":"values. I.e.","Fragments":["(let"]},{"Key":"I.e. (let","Fragments":["[a"]},{"Key":"(let [a","Fragments":["1"]},{"Key":"[a 1","Fragments":["b"]},{"Key":"1 b","Fragments":["1]"]},{"Key":"b 1]","Fragments":["#{a"]},{"Key":"1] #{a","Fragments":["b})"]},{"Key":"#{a b})","Fragments":["will"]},{"Key":"b}) will","Fragments":["throw"]},{"Key":"will throw","Fragments":["an"]},{"Key":" @jaylen,","Fragments":["You're"]},{"Key":"@jaylen, You're","Fragments":["correct"]},{"Key":"You're correct","Fragments":["that"]},{"Key":"correct that","Fragments":["they're"]},{"Key":"they're equivalent.","Fragments":["I"]},{"Key":"equivalent. I","Fragments":["think"]},{"Key":"just more","Fragments":["idiomatic"]},{"Key":"`:require` so","Fragments":["I'm","you"]},{"Key":"personal mission","Fragments":["to"]},{"Key":"mission to","Fragments":["get"]},{"Key":"get people","Fragments":["to"]},{"Key":"stop using","Fragments":["`use`."]},{"Key":"using `use`.","Fragments":[":)"]},{"Key":" @myrtie","Fragments":["Then"]},{"Key":"@myrtie Then","Fragments":["it"]},{"Key":"Then it","Fragments":["must"]},{"Key":"separate them","Fragments":["as"]},{"Key":" @kyle-choi","Fragments":["Didn't"]},{"Key":"@kyle-choi Didn't","Fragments":["know"]},{"Key":"also \"alias\"","Fragments":["a"]},{"Key":"\"alias\" a","Fragments":["method"]},{"Key":"`(def nothing?","Fragments":["str/blank?)`"]},{"Key":"nothing? str/blank?)`","Fragments":["which"]},{"Key":"str/blank?)` which","Fragments":["will"]},{"Key":"will create","Fragments":["a"]},{"Key":"Var with","Fragments":["a"]},{"Key":"a reference","Fragments":["to"]},{"Key":"reference to","Fragments":["the","the"]},{"Key":"original function.","Fragments":["That's"]},{"Key":"function. That's","Fragments":["called"]},{"Key":"That's called","Fragments":["exactly"]},{"Key":"called exactly","Fragments":["the"]},{"Key":"as `nothing?`","Fragments":["would"]},{"Key":"`nothing?` would","Fragments":["be."]},{"Key":"it private","Fragments":["you"]},{"Key":"private you","Fragments":["can"]},{"Key":"the `^:private`","Fragments":["annotation."]},{"Key":"a lamba","Fragments":["and"]},{"Key":"lamba and","Fragments":["just"]},{"Key":"arguments through","Fragments":["to"]},{"Key":"through to","Fragments":["another"]},{"Key":"another function,","Fragments":["you"]},{"Key":"lambda and","Fragments":["args"]},{"Key":"and args","Fragments":["and"]},{"Key":"args and","Fragments":["just"]},{"Key":"e.g. `#(vector","Fragments":["%1"]},{"Key":"`#(vector %1","Fragments":["%2)`"]},{"Key":"%2)` is","Fragments":["the"]},{"Key":" Similarly","Fragments":["you"]},{"Key":"Similarly you","Fragments":["could"]},{"Key":"also create","Fragments":["`*"]},{"Key":"create `*","Fragments":["2`"]},{"Key":"`* 2`","Fragments":["function"]},{"Key":"2` function","Fragments":["using"]},{"Key":"function using","Fragments":["partial","`reduce`","let,"]},{"Key":"application without","Fragments":["the"]},{"Key":" Switched","Fragments":["to","to"]},{"Key":"string based","Fragments":["algorithm,"]},{"Key":"based algorithm,","Fragments":["so"]},{"Key":"algorithm, so","Fragments":["normalize"]},{"Key":"so normalize","Fragments":["still"]},{"Key":"normalize still","Fragments":["works"]},{"Key":"still works","Fragments":["with"]},{"Key":"with sequences,","Fragments":["but"]},{"Key":"sequences, but","Fragments":["now"]},{"Key":"now returns","Fragments":["a"]},{"Key":"string. Functions","Fragments":["built"]},{"Key":"Functions built","Fragments":["on"]},{"Key":"built on","Fragments":["top"]},{"Key":"of normalize","Fragments":["works"]},{"Key":"normalize works","Fragments":["with"]},{"Key":" Hate","Fragments":["to"]},{"Key":"Hate to","Fragments":["rain"]},{"Key":"to rain","Fragments":["on"]},{"Key":"rain on","Fragments":["your"]},{"Key":"your parade...","Fragments":["\u003crimshot\u003e"]},{"Key":" 3,","Fragments":["5,"]},{"Key":"3, 5,","Fragments":["and"]},{"Key":"5, and","Fragments":["7"]},{"Key":"and 7","Fragments":["are"]},{"Key":"7 are","Fragments":["known"]},{"Key":"are known","Fragments":["to"]},{"Key":"known to","Fragments":["be","be"]},{"Key":"be prime","Fragments":["numbers"]},{"Key":"prime numbers","Fragments":["already."]},{"Key":"numbers already.","Fragments":["You"]},{"Key":"actually have","Fragments":["to","certain"]},{"Key":"factors of","Fragments":["a"]},{"Key":"given number","Fragments":["to"]},{"Key":"determine whether","Fragments":["one","or"]},{"Key":"those is","Fragments":["a"]},{"Key":"factor of","Fragments":["the"]},{"Key":"As much","Fragments":["as"]},{"Key":"hate the","Fragments":["Java"]},{"Key":"Calendar APIs,","Fragments":["this"]},{"Key":"APIs, this","Fragments":["looks"]},{"Key":"Overall the","Fragments":["solution","solution"]},{"Key":"very clean","Fragments":["looking.","and"]},{"Key":"a next","Fragments":["exercise,"]},{"Key":"next exercise,","Fragments":["you"]},{"Key":"exercise, you","Fragments":["might"]},{"Key":"into `eval`","Fragments":["or"]},{"Key":"`eval` or","Fragments":["macros"]},{"Key":"or macros","Fragments":["to"]},{"Key":"macros to","Fragments":["generate"]},{"Key":"write them","Fragments":["all"]},{"Key":"`if` with","Fragments":["one"]},{"Key":"values as","Fragments":["nil","truthy.","falsey,"]},{"Key":"as nil","Fragments":["might"]},{"Key":"nil might","Fragments":["be"]},{"Key":"the `when`","Fragments":["functions.","is"]},{"Key":"`when` functions.","Fragments":["There"]},{"Key":"functions. There","Fragments":["are","might"]},{"Key":"also `if-not`","Fragments":["and"]},{"Key":"`if-not` and","Fragments":["`when-not`"]},{"Key":"and `when-not`","Fragments":["if"]},{"Key":"`when-not` if","Fragments":["you"]},{"Key":"to negate","Fragments":["the"]},{"Key":"negate the","Fragments":["logical"]},{"Key":"the logical","Fragments":["condition."]},{"Key":"The short","Fragments":["variable"]},{"Key":"short variable","Fragments":["names"]},{"Key":"names n,","Fragments":["i,"]},{"Key":"n, i,","Fragments":["m,"]},{"Key":"i, m,","Fragments":["etc"]},{"Key":"m, etc","Fragments":["might"]},{"Key":"etc might","Fragments":["make"]},{"Key":"bit harder","Fragments":["to"]},{"Key":"You do","Fragments":["the"]},{"Key":"number validation/cleaning","Fragments":["twice"]},{"Key":"validation/cleaning twice","Fragments":["in"]},{"Key":"the pretty-print","Fragments":["function"]},{"Key":"pretty-print function","Fragments":["(once"]},{"Key":"function (once","Fragments":["for"]},{"Key":"(once for","Fragments":["digits"]},{"Key":"for digits","Fragments":["and"]},{"Key":"digits and","Fragments":["once"]},{"Key":"for area-code).","Fragments":["It"]},{"Key":"area-code). It","Fragments":["might"]},{"Key":"that multiple","Fragments":["times.","refs"]},{"Key":" `pair-up`","Fragments":["could"]},{"Key":"`pair-up` could","Fragments":["just"]},{"Key":"as `(def","Fragments":["pair-up"]},{"Key":"`(def pair-up","Fragments":["vector)`"]},{"Key":"pair-up vector)`","Fragments":["since"]},{"Key":"vector)` since","Fragments":["they"]},{"Key":"some built-in","Fragments":["functions","functions"]},{"Key":"should make","Fragments":["`grouping`"]},{"Key":"make `grouping`","Fragments":["quite"]},{"Key":"`grouping` quite","Fragments":["a"]},{"Key":"kind words,","Fragments":["tried"]},{"Key":"words, tried","Fragments":["to"]},{"Key":"You shouldn't","Fragments":["need","need"]},{"Key":"dna string","Fragments":["into"]},{"Key":"sequence since","Fragments":["Strings"]},{"Key":"since Strings","Fragments":["can","are"]},{"Key":"collections and","Fragments":["`map`","then"]},{"Key":"and `map`","Fragments":["and"]},{"Key":"and `every?`","Fragments":["will"]},{"Key":"`every?` will","Fragments":["work"]},{"Key":"also string","Fragments":["and"]},{"Key":"and regex","Fragments":["functions"]},{"Key":"same things.","Fragments":["I","For"]},{"Key":"Wow, This","Fragments":["codes"]},{"Key":"This codes","Fragments":["looks"]},{"Key":"looks awesome","Fragments":["and"]},{"Key":"awesome and","Fragments":["gave"]},{"Key":"me lots","Fragments":["of"]},{"Key":"of insightful","Fragments":["idea"]},{"Key":"insightful idea","Fragments":["about"]},{"Key":"about functional","Fragments":["programming."]},{"Key":"your great","Fragments":["code!"]},{"Key":" #1:","Fragments":["not"]},{"Key":"#1: not","Fragments":["very"]},{"Key":"very pleased","Fragments":["with"]},{"Key":"pleased with","Fragments":["the"]},{"Key":"string formatting/templating","Fragments":["at"]},{"Key":"formatting/templating at","Fragments":["all."]},{"Key":"saw some","Fragments":["supposed","warnings"]},{"Key":"some supposed","Fragments":["solutions"]},{"Key":"supposed solutions","Fragments":["on"]},{"Key":"solutions on","Fragments":["SO"]},{"Key":"on SO","Fragments":["that"]},{"Key":"SO that","Fragments":["I"]},{"Key":" #2:","Fragments":["the"]},{"Key":"#2: the","Fragments":["range-from-args"]},{"Key":"the range-from-args","Fragments":["holy"]},{"Key":"range-from-args holy","Fragments":["crap"]},{"Key":"crap that's","Fragments":["ugly."]},{"Key":" so","Fragments":["yeah,"]},{"Key":"so yeah,","Fragments":["plenty"]},{"Key":"yeah, plenty","Fragments":["of"]},{"Key":"plenty of","Fragments":["opportunity"]},{"Key":"of opportunity","Fragments":["for"]},{"Key":"opportunity for","Fragments":["re-factoring"]},{"Key":"for re-factoring","Fragments":["that"]},{"Key":"re-factoring that","Fragments":["I'll"]},{"Key":"your insightful","Fragments":["nitpick."]},{"Key":"insightful nitpick.","Fragments":["I"]},{"Key":"think string","Fragments":["in","comparison"]},{"Key":"will revise","Fragments":["my"]},{"Key":"revise my","Fragments":["codes"]},{"Key":"my codes","Fragments":["to","much"]},{"Key":"codes to","Fragments":["reflect"]},{"Key":"reflect your","Fragments":["opinion"]},{"Key":"your opinion","Fragments":["since","it","and"]},{"Key":"opinion since","Fragments":["I"]},{"Key":"much concise","Fragments":["and"]},{"Key":" Below","Fragments":["is"]},{"Key":"Below is","Fragments":["the"]},{"Key":"advice from","Fragments":["@opal","@kathryne","@ramona."]},{"Key":"from @opal","Fragments":["and"]},{"Key":"@opal and","Fragments":["it"]},{"Key":"was really","Fragments":["insightful","starting"]},{"Key":"really insightful","Fragments":["and"]},{"Key":"insightful and","Fragments":["made"]},{"Key":"and made","Fragments":["my"]},{"Key":"codes much","Fragments":["better"]},{"Key":"as \\A,","Fragments":["\\G,"]},{"Key":"\\A, \\G,","Fragments":["etc."]},{"Key":"assert is","Fragments":["a"]},{"Key":"found there","Fragments":["is"]},{"Key":"do assert","Fragments":["in"]},{"Key":"assert in","Fragments":["clojure"]},{"Key":"clojure like","Fragments":["`:pre"]},{"Key":"like `:pre","Fragments":["and"]},{"Key":"`:pre and","Fragments":[":post`"]},{"Key":"and :post`","Fragments":["thanks"]},{"Key":":post` thanks","Fragments":["to"]},{"Key":"tip I","Fragments":["have"]},{"Key":"Java 8","Fragments":["time"]},{"Key":"8 time","Fragments":["APIs"]},{"Key":"time APIs","Fragments":["and"]},{"Key":"APIs and","Fragments":["the"]},{"Key":" dont","Fragments":["think"]},{"Key":"dont think","Fragments":["it"]},{"Key":"concise than","Fragments":["this."]},{"Key":"this yet.","Fragments":["the"]},{"Key":"yet. the","Fragments":["cleanse-phone"]},{"Key":"the cleanse-phone","Fragments":["is"]},{"Key":"cleanse-phone is","Fragments":["a"]},{"Key":"little janky,","Fragments":["will"]},{"Key":"janky, will","Fragments":["probably"]},{"Key":"know this","Fragments":["code"]},{"Key":"better, just","Fragments":["don't"]},{"Key":"just don't","Fragments":["know","know"]},{"Key":"how for","Fragments":["now,"]},{"Key":"now, appreciate","Fragments":["some"]},{"Key":"appreciate some","Fragments":["comments."]},{"Key":"Basically just","Fragments":["a"]},{"Key":"a tutorial","Fragments":["on"]},{"Key":"tutorial on","Fragments":["Refs..."]},{"Key":"Could do","Fragments":["this"]},{"Key":"a loop/recur","Fragments":["or"]},{"Key":"loop/recur or","Fragments":["a"]},{"Key":"reduce fairly","Fragments":["easily."]},{"Key":"using grade","Fragments":["in"]},{"Key":"grade in","Fragments":["add","`add`"]},{"Key":"in add","Fragments":["was",";-)"]},{"Key":"add was","Fragments":["not"]},{"Key":"apparent until","Fragments":["after"]},{"Key":"until after","Fragments":["I"]},{"Key":"got everything","Fragments":["working."]},{"Key":"everything working.","Fragments":["and"]},{"Key":"working. and","Fragments":["then"]},{"Key":"it sort","Fragments":["of"]},{"Key":"just cleaned","Fragments":["itself"]},{"Key":"cleaned itself","Fragments":["up."]},{"Key":"forgot that.","Fragments":["Good"]},{"Key":"that. Good","Fragments":["point."]},{"Key":" though","Fragments":["the"]},{"Key":"in robot","Fragments":["makes"]},{"Key":"robot makes","Fragments":["things"]},{"Key":"verbose, since","Fragments":["we're"]},{"Key":"we're allocating","Fragments":["atoms,"]},{"Key":"allocating atoms,","Fragments":["the"]},{"Key":"atoms, the","Fragments":["let"]},{"Key":"let makes","Fragments":["the"]},{"Key":"intent a","Fragments":["little","bit,","bit","bit"]},{"Key":"the test-suite","Fragments":["also"]},{"Key":"test-suite also","Fragments":["had"]},{"Key":"be modified","Fragments":["to"]},{"Key":"modified to","Fragments":["include"]},{"Key":"robot namespace","Fragments":["for"]},{"Key":"functions it","Fragments":["was"]},{"Key":"was testing,","Fragments":["that"]},{"Key":"testing, that","Fragments":["was"]},{"Key":"the empty/nil","Fragments":["atom"]},{"Key":"empty/nil atom","Fragments":["when"]},{"Key":"atom when","Fragments":["`robot`"]},{"Key":"when `robot`","Fragments":["is"]},{"Key":"`robot` is","Fragments":["called"]},{"Key":"then wait","Fragments":["until"]},{"Key":"wait until","Fragments":["`robot-name`"]},{"Key":"until `robot-name`","Fragments":["is"]},{"Key":"`robot-name` is","Fragments":["called","called.","just"]},{"Key":"called to","Fragments":["generate"]},{"Key":"that's more","Fragments":["inline"]},{"Key":"more inline","Fragments":["with"]},{"Key":"inline with","Fragments":["with"]},{"Key":"with with","Fragments":["the"]},{"Key":"for modifying","Fragments":["the"]},{"Key":"modifying the","Fragments":["test..."]},{"Key":"the test...","Fragments":["It's"]},{"Key":"test... It's","Fragments":["a"]},{"Key":"test inconsistency.","Fragments":["The"]},{"Key":"inconsistency. The","Fragments":["test"]},{"Key":"test expects","Fragments":["that"]},{"Key":"expects that","Fragments":["you're"]},{"Key":"you're NOT","Fragments":["defining"]},{"Key":"NOT defining","Fragments":["these"]},{"Key":"defining these","Fragments":["functions"]},{"Key":"namespace. Probably","Fragments":["something"]},{"Key":"Probably something","Fragments":["that"]},{"Key":"be fixed,","Fragments":["but"]},{"Key":"fixed, but","Fragments":["I"]},{"Key":"know you'll","Fragments":["run"]},{"Key":"you'll run","Fragments":["into"]},{"Key":"these if","Fragments":["you"]},{"Key":"you keep","Fragments":["going.","things"]},{"Key":" Next","Fragments":["work","I'd","I'll"]},{"Key":"Next work","Fragments":["on"]},{"Key":"on functional","Fragments":["decomposition."]},{"Key":"functional decomposition.","Fragments":["For"]},{"Key":"decomposition. For","Fragments":["each"]},{"Key":"For each","Fragments":["of"]},{"Key":"conditions that","Fragments":["you're","distinguished"]},{"Key":"you're attempting","Fragments":["to"]},{"Key":"attempting to","Fragments":["test","be"]},{"Key":"test for,","Fragments":["create"]},{"Key":"for, create","Fragments":["a"]},{"Key":"that handles","Fragments":["just"]},{"Key":"handles just","Fragments":["that"]},{"Key":"`response-for` down","Fragments":["to"]},{"Key":"one clause","Fragments":["per"]},{"Key":"clause per","Fragments":["response"]},{"Key":"per response","Fragments":["instead"]},{"Key":"response instead","Fragments":["of"]},{"Key":"of repeating","Fragments":["a"]},{"Key":"repeating a","Fragments":["couple"]},{"Key":"Then look","Fragments":["into"]},{"Key":"`:require` form","Fragments":["for","instead.","is"]},{"Key":"functions available","Fragments":["to"]},{"Key":"namespace. You","Fragments":["can"]},{"Key":"shorten up","Fragments":["your","your","your","your"]},{"Key":"your `clojure.string/*`","Fragments":["usage"]},{"Key":"`clojure.string/*` usage","Fragments":["if"]},{"Key":"usage if","Fragments":["you"]},{"Key":" Hint","Fragments":["#1:"]},{"Key":"Hint #1:","Fragments":["range"]},{"Key":"#1: range","Fragments":["takes"]},{"Key":"range takes","Fragments":["an"]},{"Key":"takes an","Fragments":["optional"]},{"Key":"optional third","Fragments":["argument"]},{"Key":"the \"step\"","Fragments":["which"]},{"Key":"\"step\" which","Fragments":["could"]},{"Key":"break apart","Fragments":["the"]},{"Key":"apart the","Fragments":["verses.","functions.","verse","partition"]},{"Key":"the verses.","Fragments":["The"]},{"Key":"verses. The","Fragments":["functions"]},{"Key":"with 5","Fragments":["arguments"]},{"Key":"5 arguments","Fragments":["(with"]},{"Key":"arguments (with","Fragments":["non-descriptive"]},{"Key":"(with non-descriptive","Fragments":["names)"]},{"Key":"non-descriptive names)","Fragments":["makes"]},{"Key":"names) makes","Fragments":["things"]},{"Key":"1)` is","Fragments":["more","more","often"]},{"Key":"idiomatically written","Fragments":["as","as","as","as"]},{"Key":"`(= n","Fragments":["0)`","0)`","0)`"]},{"Key":"n 0)`","Fragments":["is","is","--"]},{"Key":"0)` is","Fragments":["more","more","often"]},{"Key":"as `(zero?","Fragments":["n)`","n)`","bottle_number)`","n)`","x)`."]},{"Key":" Way","Fragments":["cleaner"]},{"Key":"Way cleaner","Fragments":["after"]},{"Key":"cleaner after","Fragments":["you"]},{"Key":"after you","Fragments":["broke"]},{"Key":"you broke","Fragments":["apart","it"]},{"Key":"broke apart","Fragments":["the"]},{"Key":" `nucleotide-counts`","Fragments":["where","hurts"]},{"Key":"`nucleotide-counts` where","Fragments":["you"]},{"Key":"then merge","Fragments":["could","in"]},{"Key":"merge could","Fragments":["also"]},{"Key":"`reduce` function.","Fragments":["That"]},{"Key":"function. That","Fragments":["might"]},{"Key":"think `count`","Fragments":["could"]},{"Key":"`count` could","Fragments":["definitely"]},{"Key":"simplified. I","Fragments":["guess"]},{"Key":"multiple `0`","Fragments":["values"]},{"Key":"values returned.","Fragments":["It"]},{"Key":"returned. It","Fragments":["just"]},{"Key":"just doesn't","Fragments":["feel"]},{"Key":"feel \"refined\".","Fragments":[":)"]},{"Key":"to golf","Fragments":["this,"]},{"Key":"golf this,","Fragments":["then"]},{"Key":"then I'll","Fragments":["tell"]},{"Key":"I'll tell","Fragments":["you"]},{"Key":"One hint:","Fragments":["`map`"]},{"Key":"hint: `map`","Fragments":["can"]},{"Key":"take multiple","Fragments":["collections"]},{"Key":"then will","Fragments":["pass"]},{"Key":"will pass","Fragments":["the"]},{"Key":"the nth","Fragments":["of"]},{"Key":"nth of","Fragments":["each"]},{"Key":"those collections","Fragments":["to"]},{"Key":"collections to","Fragments":["the","strings"]},{"Key":"given function.","Fragments":["So"]},{"Key":"function. So","Fragments":["if"]},{"Key":"it 2","Fragments":["collections"]},{"Key":"2 collections","Fragments":["it"]},{"Key":"collections it","Fragments":["will"]},{"Key":"will expect","Fragments":["a"]},{"Key":"expect a","Fragments":["mapping"]},{"Key":"a mapping","Fragments":["function"]},{"Key":"mapping function","Fragments":["that"]},{"Key":"feedback, I've","Fragments":["tried"]},{"Key":"the `yelled?`","Fragments":["function."]},{"Key":"thing, is","Fragments":["that"]},{"Key":"as functions.","Fragments":["e.g.","It","e.g."]},{"Key":"functions. e.g.","Fragments":["The","`({:a"]},{"Key":"e.g. The","Fragments":["`db`"]},{"Key":"The `db`","Fragments":["parameter"]},{"Key":"`db` parameter","Fragments":["of"]},{"Key":"parameter of","Fragments":["the"]},{"Key":"the `grade`","Fragments":["function.","function)."]},{"Key":"`grade` function.","Fragments":["Map"]},{"Key":"function. Map","Fragments":["lookup"]},{"Key":"Map lookup","Fragments":["can"]},{"Key":"lookup can","Fragments":["also"]},{"Key":"optional argument","Fragments":["for"]},{"Key":"for \"not","Fragments":["found\""]},{"Key":"\"not found\"","Fragments":["values."]},{"Key":"found\" values.","Fragments":["You"]},{"Key":"values. You","Fragments":["could"]},{"Key":"better after","Fragments":["the"]},{"Key":"new methods.","Fragments":["It's"]},{"Key":"methods. It's","Fragments":["common"]},{"Key":"It's common","Fragments":["in","in"]},{"Key":"end methods","Fragments":["that"]},{"Key":"booleans with","Fragments":["a","a"]},{"Key":"mark e.g.","Fragments":["`blank?`,"]},{"Key":"e.g. `blank?`,","Fragments":["`asking?`,"]},{"Key":"`blank?`, `asking?`,","Fragments":["`shouting?`"]},{"Key":"`:require` namespace","Fragments":["form."]},{"Key":"namespace form.","Fragments":["Using"]},{"Key":"form. Using","Fragments":["`require`"]},{"Key":"Using `require`","Fragments":["as"]},{"Key":"only done","Fragments":["in"]},{"Key":"`blank?` checks","Fragments":["for"]},{"Key":"or only","Fragments":["whitespace,"]},{"Key":"only whitespace,","Fragments":["so"]},{"Key":"trim as","Fragments":["well."]},{"Key":" `(re-find","Fragments":["#\"^\\d+\""]},{"Key":"`(re-find #\"^\\d+\"","Fragments":["message)`"]},{"Key":"#\"^\\d+\" message)`","Fragments":["and"]},{"Key":"and `:else`","Fragments":["are"]},{"Key":"`:else` are","Fragments":["redundant"]},{"Key":"are redundant","Fragments":["since"]},{"Key":"redundant since","Fragments":["`:else`"]},{"Key":"since `:else`","Fragments":["covers"]},{"Key":"`:else` covers","Fragments":["everything"]},{"Key":"covers everything","Fragments":["else"]},{"Key":"checking some","Fragments":["things"]},{"Key":"like uppercase","Fragments":["more"]},{"Key":"uppercase more","Fragments":["times"]},{"Key":"than necessary.","Fragments":["The"]},{"Key":"necessary. The","Fragments":["ordering"]},{"Key":"The ordering","Fragments":["of","here","here"]},{"Key":"in response-for","Fragments":["might","is"]},{"Key":"response-for might","Fragments":["help"]},{"Key":" @connie,","Fragments":["thanks!"]},{"Key":" @alvena","Fragments":["Good","-"]},{"Key":"@alvena Good","Fragments":["to"]},{"Key":"know that.","Fragments":["Thanks!"]},{"Key":" removed","Fragments":["partition","(or"]},{"Key":"removed partition","Fragments":["and"]},{"Key":"partition and","Fragments":["interleave"]},{"Key":"and interleave","Fragments":["stuff"]},{"Key":"interleave stuff","Fragments":["since"]},{"Key":"since map","Fragments":["can"]},{"Key":" with","Fragments":["shorthand","the"]},{"Key":"with shorthand","Fragments":["for"]},{"Key":"for anonymous","Fragments":["function","function.","function"]},{"Key":"removed (or","Fragments":["...)"]},{"Key":"(or ...)","Fragments":["based"]},{"Key":"...) based","Fragments":["on"]},{"Key":" replaced","Fragments":["apply/merge/map"]},{"Key":"replaced apply/merge/map","Fragments":["with"]},{"Key":"apply/merge/map with","Fragments":["reduce/conj/{}"]},{"Key":"with reduce/conj/{}","Fragments":["and"]},{"Key":"reduce/conj/{} and","Fragments":["short"]},{"Key":"and short","Fragments":["form"]},{"Key":" moved","Fragments":["let"]},{"Key":"moved let","Fragments":["form"]},{"Key":"form out","Fragments":["a"]},{"Key":"a level","Fragments":["and"]},{"Key":"level and","Fragments":["got"]},{"Key":"and got","Fragments":["rid"]},{"Key":"the contains?","Fragments":["since"]},{"Key":"contains? since","Fragments":["the"]},{"Key":"result would","Fragments":["be","remove"]},{"Key":"be nil","Fragments":["if"]},{"Key":" ((frequencies","Fragments":["val)"]},{"Key":"((frequencies val)","Fragments":["nucleotide),"]},{"Key":"val) nucleotide),","Fragments":["the"]},{"Key":"nucleotide), the","Fragments":["contains"]},{"Key":"the contains","Fragments":["was"]},{"Key":"contains was","Fragments":["redundant."]},{"Key":"was redundant.","Fragments":["this","I"]},{"Key":"redundant. this","Fragments":["cleaned"]},{"Key":"this cleaned","Fragments":["things"]},{"Key":"cleaned things","Fragments":["up","up"]},{"Key":" Extracting","Fragments":["the","out"]},{"Key":"conditions for","Fragments":["`cond`"]},{"Key":"for `cond`","Fragments":["into","clause"]},{"Key":"`cond` into","Fragments":["named","its"]},{"Key":"functions could","Fragments":["make"]},{"Key":"lot clearer...","Fragments":["you"]},{"Key":"clearer... you","Fragments":["could"]},{"Key":"use names","Fragments":["like"]},{"Key":"like `yelling?`,","Fragments":["`asking?`,","`silent?`"]},{"Key":"`yelling?`, `asking?`,","Fragments":["etc."]},{"Key":"`asking?`, etc.","Fragments":["which"]},{"Key":"etc. which","Fragments":["communicate"]},{"Key":"which communicate","Fragments":["the"]},{"Key":"communicate the","Fragments":["higher"]},{"Key":"the higher","Fragments":["level"]},{"Key":"good points!","Fragments":["changed"]},{"Key":"points! changed","Fragments":["accordingly."]},{"Key":"name `dna-\u003erna`","Fragments":["and"]},{"Key":"`dna-\u003erna` and","Fragments":["the"]},{"Key":"bit odd","Fragments":["to"]},{"Key":"to conclude","Fragments":["after"]},{"Key":"conclude after","Fragments":["the"]},{"Key":"fact (based","Fragments":["on"]},{"Key":"the translation)","Fragments":["that"]},{"Key":"translation) that","Fragments":["the"]},{"Key":"DNA was","Fragments":["invalid."]},{"Key":" At","Fragments":["first","a"]},{"Key":"first blush,","Fragments":["it"]},{"Key":"blush, it","Fragments":["looks"]},{"Key":"your `all`","Fragments":["function"]},{"Key":"`all` function","Fragments":["is"]},{"Key":"a re-implementation","Fragments":["of"]},{"Key":"re-implementation of","Fragments":["[`every?`](http://clojuredocs.org/clojure_core/clojure.core/every_q)."]},{"Key":"the `in?`","Fragments":["function."]},{"Key":"`in?` function.","Fragments":["I"]},{"Key":"love deleting","Fragments":["code!"]},{"Key":"the `clean`","Fragments":["function"]},{"Key":"`clean` function","Fragments":["to"]},{"Key":"the `all-upper?`","Fragments":["predicate."]},{"Key":"`all-upper?` predicate.","Fragments":["But"]},{"Key":"predicate. But","Fragments":["since"]},{"Key":"uses a","Fragments":["cleaned"]},{"Key":"a cleaned","Fragments":["string,"]},{"Key":"cleaned string,","Fragments":["would"]},{"Key":"string, would","Fragments":["it"]},{"Key":"clean the","Fragments":["string"]},{"Key":"string inside","Fragments":["of"]},{"Key":"your `:else`","Fragments":["clause"]},{"Key":"`:else` clause","Fragments":["is"]},{"Key":"clause is","Fragments":["actually"]},{"Key":"actually [`zero?`](http://clojuredocs.org/clojure_core/clojure.core/zero_q)","Fragments":["or"]},{"Key":"[`zero?`](http://clojuredocs.org/clojure_core/clojure.core/zero_q) or","Fragments":["`(="]},{"Key":"or `(=","Fragments":["0"]},{"Key":"0 x)`.","Fragments":["If"]},{"Key":"x)`. If","Fragments":["you"]},{"Key":"you swap","Fragments":["the"]},{"Key":"swap the","Fragments":["`(\u003e"]},{"Key":"`(\u003e x","Fragments":["2)`"]},{"Key":"x 2)`","Fragments":["with"]},{"Key":"2)` with","Fragments":["`:else`"]},{"Key":"with `:else`","Fragments":["clause."]},{"Key":"`:else` clause.","Fragments":["Then"]},{"Key":"clause. Then","Fragments":["you"]},{"Key":"at [`case`](http://clojuredocs.org/clojure_core/clojure.core/case).","Fragments":["When"]},{"Key":"[`case`](http://clojuredocs.org/clojure_core/clojure.core/case). When","Fragments":["It"]},{"Key":"When It","Fragments":["was"]},{"Key":"was supprized","Fragments":["at"]},{"Key":"supprized at","Fragments":["how"]},{"Key":"less was","Fragments":["in"]},{"Key":"my verse","Fragments":["function."]},{"Key":"your `[from","Fragments":["to]`"]},{"Key":"`[from to]`","Fragments":["version"]},{"Key":"to]` version","Fragments":["of"]},{"Key":"is great,","Fragments":["but"]},{"Key":"one learning","Fragments":["possibility"]},{"Key":"learning possibility","Fragments":["might"]},{"Key":"possibility might","Fragments":["be"]},{"Key":"macro, [`-\u003e\u003e`](http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E),","Fragments":["if"]},{"Key":"[`-\u003e\u003e`](http://clojuredocs.org/clojure_core/clojure.core/-%3E%3E), if","Fragments":["you're"]},{"Key":"not yet","Fragments":["familiar","learning"]},{"Key":"yet familiar","Fragments":["with"]},{"Key":"That's great","Fragments":["thanks."]},{"Key":"great thanks.","Fragments":["Too"]},{"Key":"thanks. Too","Fragments":["used"]},{"Key":"Too used","Fragments":["to"]},{"Key":"to python's","Fragments":["all"]},{"Key":"python's all","Fragments":["to"]},{"Key":"all to","Fragments":["think","only"]},{"Key":"called anything","Fragments":["else!"]},{"Key":"Didn't quite","Fragments":["understand"]},{"Key":"task first","Fragments":["time"]},{"Key":"thought more","Fragments":["than"]},{"Key":"one character","Fragments":["would","thing"]},{"Key":"character would","Fragments":["be"]},{"Key":"be changed","Fragments":["-","to"]},{"Key":"changed -","Fragments":["hence"]},{"Key":"- hence","Fragments":["the"]},{"Key":"hence the","Fragments":["dna-rna-map","beauty"]},{"Key":"the dna-rna-map","Fragments":["which"]},{"Key":"dna-rna-map which","Fragments":["is"]},{"Key":"Great and","Fragments":["concise!","unique"]},{"Key":"Your verse","Fragments":["uses"]},{"Key":"verse uses","Fragments":["`cond`,"]},{"Key":"uses `cond`,","Fragments":["but"]},{"Key":"a textbook","Fragments":["reason"]},{"Key":"textbook reason","Fragments":["to"]},{"Key":"to `apply`","Fragments":["in"]},{"Key":"`apply` in","Fragments":["line"]},{"Key":"in line","Fragments":["9.","with"]},{"Key":"line 9.","Fragments":["You"]},{"Key":"9. You","Fragments":["might"]},{"Key":"To eliminate","Fragments":["your"]},{"Key":"eliminate your","Fragments":["use"]},{"Key":"of `reverse`,","Fragments":["you"]},{"Key":"`reverse`, you","Fragments":["might"]},{"Key":"might check","Fragments":["out"]},{"Key":"out using","Fragments":["a"]},{"Key":"a negative","Fragments":["step"]},{"Key":"negative step","Fragments":["in"]},{"Key":"step in","Fragments":["your","this"]},{"Key":"to [`range`](http://clojuredocs.org/clojure_core/clojure.core/range).","Fragments":["I"]},{"Key":"[`range`](http://clojuredocs.org/clojure_core/clojure.core/range). I","Fragments":["did"]},{"Key":"forgetting about","Fragments":["the"]},{"Key":"the `for`","Fragments":["form.","statement"]},{"Key":"`for` form.","Fragments":["I"]},{"Key":"form. I","Fragments":["went"]},{"Key":"to [`map`](http://clojuredocs.org/clojure_core/clojure.core/map),","Fragments":["instead."]},{"Key":"My biggest","Fragments":["problem"]},{"Key":"biggest problem","Fragments":["was"]},{"Key":"the yelling","Fragments":["case.","case.","\u0026"]},{"Key":"yelling case.","Fragments":["I","I"]},{"Key":"case. I","Fragments":["think","think"]},{"Key":"shorter solution","Fragments":["which"]},{"Key":"solution which","Fragments":["doesn't"]},{"Key":"which doesn't","Fragments":["use","require"]},{"Key":"Java but","Fragments":["i"]},{"Key":"but i","Fragments":["haven't","couldn't","didn't"]},{"Key":"i haven't","Fragments":["found"]},{"Key":"haven't found","Fragments":["it..."]},{"Key":"good readable","Fragments":["special"]},{"Key":"readable special","Fragments":["because"]},{"Key":"special because","Fragments":["of"]},{"Key":"good function","Fragments":["names."]},{"Key":"the build-finder","Fragments":["inside"]},{"Key":"build-finder inside","Fragments":["of"]},{"Key":"a `doseq`","Fragments":["to"]},{"Key":"`doseq` to","Fragments":["build"]},{"Key":"build this","Fragments":["out"]},{"Key":"out from","Fragments":["a"]},{"Key":"For my","Fragments":["taste","taste,"]},{"Key":"my taste","Fragments":["this"]},{"Key":"taste this","Fragments":["are"]},{"Key":"this are","Fragments":["too"]},{"Key":"are too","Fragments":["much,"]},{"Key":"too much,","Fragments":["too","for"]},{"Key":"much, too","Fragments":["similar"]},{"Key":"- dna-to-rna-lut","Fragments":["can"]},{"Key":"dna-to-rna-lut can","Fragments":["already"]},{"Key":"can already","Fragments":["be","be"]},{"Key":" (dna-to-rna-lut","Fragments":["\\A)"]},{"Key":"(dna-to-rna-lut \\A)","Fragments":[";"]},{"Key":"\\A) ;","Fragments":["=\u003e","true"]},{"Key":"; =\u003e","Fragments":["\"A\""]},{"Key":"i would","Fragments":["only"]},{"Key":"only keep","Fragments":["dna-to-rna-lut"]},{"Key":"keep dna-to-rna-lut","Fragments":["and"]},{"Key":"dna-to-rna-lut and","Fragments":["to-rna."]},{"Key":"As @nels","Fragments":["says,"]},{"Key":"@nels says,","Fragments":["using"]},{"Key":"says, using","Fragments":["maps"]},{"Key":"using maps","Fragments":["as"]},{"Key":"maps as","Fragments":["functions","functions,"]},{"Key":"definitely idiomatic","Fragments":["in"]},{"Key":"not uncommon","Fragments":["to"]},{"Key":"uncommon to","Fragments":["see","use"]},{"Key":"see functions","Fragments":["`dna-to-rna`"]},{"Key":"functions `dna-to-rna`","Fragments":["or"]},{"Key":"`dna-to-rna` or","Fragments":["even"]},{"Key":"even `dna-\u003erna`","Fragments":["(which"]},{"Key":"`dna-\u003erna` (which","Fragments":["is"]},{"Key":"is legal","Fragments":["as"]},{"Key":"legal as","Fragments":["well)"]},{"Key":"well) which","Fragments":["are"]},{"Key":" `generate-name`","Fragments":["inside"]},{"Key":"`generate-name` inside","Fragments":["the"]},{"Key":"let is","Fragments":["kind"]},{"Key":"of odd","Fragments":["to"]},{"Key":"The `swap!`","Fragments":["function"]},{"Key":"`swap!` function","Fragments":["gets"]},{"Key":"function gets","Fragments":["passed","passed"]},{"Key":"gets passed","Fragments":["the","to"]},{"Key":"the atom","Fragments":["as","to","being","being","inside","usage."]},{"Key":"atom as","Fragments":["an"]},{"Key":"an argument.","Fragments":["You"]},{"Key":"current values","Fragments":["if"]},{"Key":"values if","Fragments":["you"]},{"Key":"to at","Fragments":["that"]},{"Key":"at that","Fragments":["point.","and"]},{"Key":" `swap!`","Fragments":["is"]},{"Key":"`swap!` is","Fragments":["run"]},{"Key":"in compare-and-set","Fragments":["fashion"]},{"Key":"compare-and-set fashion","Fragments":["where"]},{"Key":"fashion where","Fragments":["the"]},{"Key":"is read,","Fragments":["the"]},{"Key":"read, the","Fragments":["function"]},{"Key":"function executed,","Fragments":["and"]},{"Key":"executed, and","Fragments":["then"]},{"Key":"is attempted","Fragments":["to"]},{"Key":"be set","Fragments":["again."]},{"Key":"set again.","Fragments":["If,"]},{"Key":"again. If,","Fragments":["in"]},{"Key":"If, in","Fragments":["the"]},{"Key":"the meantime","Fragments":["something"]},{"Key":"meantime something","Fragments":["else"]},{"Key":"else has","Fragments":["change"]},{"Key":"has change","Fragments":["the"]},{"Key":"the value,","Fragments":["it"]},{"Key":"value, it","Fragments":["will"]},{"Key":"be run","Fragments":["again."]},{"Key":"run again.","Fragments":["Having"]},{"Key":"again. Having","Fragments":["multiple"]},{"Key":"Having multiple","Fragments":["nested"]},{"Key":"multiple nested","Fragments":["`swap!`"]},{"Key":"nested `swap!`","Fragments":["calls"]},{"Key":"`swap!` calls","Fragments":["to"]},{"Key":"modify different","Fragments":["parts"]},{"Key":"different parts","Fragments":["of"]},{"Key":"same atom","Fragments":["might"]},{"Key":"atom might","Fragments":["have"]},{"Key":"have unintended","Fragments":["consequences."]},{"Key":"of atoms","Fragments":["and"]},{"Key":"that behavior:","Fragments":["http://clojure.org/atoms"]},{"Key":"I notice","Fragments":["is","\"of"]},{"Key":"notice is","Fragments":["that"]},{"Key":"between your","Fragments":["`teenths`,"]},{"Key":"your `teenths`,","Fragments":["`firsts`,"]},{"Key":"`teenths`, `firsts`,","Fragments":["etc"]},{"Key":"`firsts`, etc","Fragments":["functions"]},{"Key":"etc functions","Fragments":["is"]},{"Key":"the range.","Fragments":["You"]},{"Key":"range. You","Fragments":["might"]},{"Key":"those a","Fragments":["bit","little"]},{"Key":"generic to","Fragments":["avoid"]},{"Key":"repeating the","Fragments":["map"]},{"Key":"to calendar","Fragments":["creation"]},{"Key":"calendar creation","Fragments":["multiple"]},{"Key":"creation multiple","Fragments":["times."]},{"Key":"times. Possibly","Fragments":["using"]},{"Key":"Possibly using","Fragments":["partial"]},{"Key":"application to","Fragments":["a","create"]},{"Key":"common function","Fragments":["or"]},{"Key":"the macros,","Fragments":["this"]},{"Key":"macros, this","Fragments":["is"]},{"Key":"bad hint,","Fragments":["but"]},{"Key":"hint, but","Fragments":["I'll"]},{"Key":"I'll attempt","Fragments":["it"]},{"Key":"attempt it","Fragments":["anyway:"]},{"Key":"started by","Fragments":["attempting"]},{"Key":"by attempting","Fragments":["`doseq`"]},{"Key":"attempting `doseq`","Fragments":["as"]},{"Key":"`doseq` as","Fragments":["well,"]},{"Key":"never got","Fragments":["it"]},{"Key":"got it","Fragments":["working."]},{"Key":"it working.","Fragments":["I"]},{"Key":"working. I","Fragments":["instead"]},{"Key":"I instead","Fragments":["ended"]},{"Key":"instead ended","Fragments":["up"]},{"Key":"using 2","Fragments":["macros."]},{"Key":"2 macros.","Fragments":["One"]},{"Key":"macros. One","Fragments":["to"]},{"Key":"One to","Fragments":["build"]},{"Key":"individual function","Fragments":["(like"]},{"Key":"function (like","Fragments":["your"]},{"Key":"(like your","Fragments":["`build-finder`)"]},{"Key":"your `build-finder`)","Fragments":["and"]},{"Key":"`build-finder`) and","Fragments":["second"]},{"Key":"and second","Fragments":["macro"]},{"Key":"second macro","Fragments":["to","recursively"]},{"Key":"to expand","Fragments":["the"]},{"Key":"expand the","Fragments":["data"]},{"Key":"data using","Fragments":["a"]},{"Key":"`for` comprehension.","Fragments":["The"]},{"Key":"comprehension. The","Fragments":["second"]},{"Key":"macro recursively","Fragments":["called"]},{"Key":"recursively called","Fragments":["itself"]},{"Key":"called itself","Fragments":["to"]},{"Key":"itself to","Fragments":["work"]},{"Key":"work through","Fragments":["the"]},{"Key":"data and","Fragments":["call"]},{"Key":"the `build-finder`","Fragments":["function."]},{"Key":"`build-finder` function.","Fragments":["It"]},{"Key":"bit tricky.","Fragments":[":)","It's"]},{"Key":"`defn` nested","Fragments":["in"]},{"Key":"`let` is","Fragments":["meant"]},{"Key":"to encapsulate","Fragments":["the","the"]},{"Key":"encapsulate the","Fragments":["`name-seed`","data."]},{"Key":"the `name-seed`","Fragments":["atom"]},{"Key":"`name-seed` atom","Fragments":["so"]},{"Key":"atom so","Fragments":["no"]},{"Key":"no one","Fragments":["else"]},{"Key":"one else","Fragments":["can"]},{"Key":"else can","Fragments":["modify"]},{"Key":"modify it.","Fragments":["It's"]},{"Key":"only place","Fragments":["it's"]},{"Key":"place it's","Fragments":["used."]},{"Key":"it's used.","Fragments":["I've"]},{"Key":"used. I've","Fragments":["not"]},{"Key":"seen it","Fragments":["often","done"]},{"Key":"it often","Fragments":["(but"]},{"Key":"often (but","Fragments":["admittedly"]},{"Key":"(but admittedly","Fragments":["I'm"]},{"Key":"admittedly I'm","Fragments":["new"]},{"Key":"to lisps),","Fragments":["but"]},{"Key":"lisps), but","Fragments":["I"]},{"Key":"I first","Fragments":["saw"]},{"Key":"first saw","Fragments":["it"]},{"Key":"saw it","Fragments":["used"]},{"Key":"in [Let","Fragments":["Over"]},{"Key":"[Let Over","Fragments":["Lambda](http://letoverlambda.com/index.cl/guest/chap2.html#sec_5)."]},{"Key":"for calling","Fragments":["out"]},{"Key":"the issue","Fragments":["of"]},{"Key":"issue of","Fragments":["a","multiple"]},{"Key":"a double","Fragments":["call","instead"]},{"Key":"to `swap!`.","Fragments":["Fortunately"]},{"Key":"`swap!`. Fortunately","Fragments":["each"]},{"Key":"Fortunately each","Fragments":["atom"]},{"Key":"each atom","Fragments":["type"]},{"Key":"atom type","Fragments":["is"]},{"Key":"type is","Fragments":["only"]},{"Key":"only swapped","Fragments":["once,"]},{"Key":"swapped once,","Fragments":["and"]},{"Key":"once, and","Fragments":["non-recursively."]},{"Key":"and non-recursively.","Fragments":["In"]},{"Key":"non-recursively. In","Fragments":["this"]},{"Key":"the worst","Fragments":["that","readable"]},{"Key":"worst that","Fragments":["could"]},{"Key":"could happen","Fragments":["is"]},{"Key":"happen is","Fragments":["I"]},{"Key":"is I","Fragments":["skip"]},{"Key":"I skip","Fragments":["a"]},{"Key":"skip a","Fragments":["robot"]},{"Key":"robot name.","Fragments":["I'll"]},{"Key":"name. I'll","Fragments":["keep"]},{"Key":"keep an","Fragments":["eye"]},{"Key":"an eye","Fragments":["out"]},{"Key":"eye out","Fragments":["when"]},{"Key":"out when","Fragments":["using"]},{"Key":"using atoms","Fragments":["in"]},{"Key":"Putting an","Fragments":["if"]},{"Key":"if in","Fragments":["the"]},{"Key":"the reduction","Fragments":["feels","could"]},{"Key":"reduction feels","Fragments":["odd."]},{"Key":"feels odd.","Fragments":["Wouldn't"]},{"Key":"odd. Wouldn't","Fragments":["it"]},{"Key":"Wouldn't it","Fragments":["be"]},{"Key":"list before","Fragments":["the"]},{"Key":"the reduction?","Fragments":["That"]},{"Key":"reduction? That","Fragments":["way"]},{"Key":"reduction could","Fragments":["be"]},{"Key":" (-\u003e\u003e","Fragments":["words","(range","(range","(interleave","(interleave","number","(convert_number","db","(range","dna-nucleotide","dow","dna"]},{"Key":" (remove","Fragments":["#(string/blank?"]},{"Key":"(remove #(string/blank?","Fragments":["%))"]},{"Key":"(reduce (fn","Fragments":["[acc"]},{"Key":"(fn [acc","Fragments":["word]"]},{"Key":"[acc word]","Fragments":["(update-in"]},{"Key":"word] (update-in","Fragments":["acc"]},{"Key":"(update-in acc","Fragments":["[word]"]},{"Key":"acc [word]","Fragments":["inc-nil))))"]},{"Key":"different use","Fragments":["of"]},{"Key":"bit (and","Fragments":["only"]},{"Key":"(and only","Fragments":["do"]},{"Key":"only do","Fragments":["one"]},{"Key":"time I've","Fragments":["seen","ever","seen"]},{"Key":"seen map","Fragments":["reduce"]},{"Key":"map reduce","Fragments":["for"]},{"Key":"reduce for","Fragments":["this"]},{"Key":"this solution.","Fragments":[":)","Apparently,"]},{"Key":"It's interesting,","Fragments":["but"]},{"Key":"better with","Fragments":["some"]},{"Key":" \"I","Fragments":["feel"]},{"Key":"\"I feel","Fragments":["that\""]},{"Key":"feel that\"","Fragments":["(meaning"]},{"Key":"that\" (meaning","Fragments":["that"]},{"Key":"(meaning that","Fragments":["I've"]},{"Key":"not measured)","Fragments":["The"]},{"Key":"measured) The","Fragments":["difference"]},{"Key":"in performance","Fragments":["between"]},{"Key":"performance between","Fragments":["filter"]},{"Key":"between filter","Fragments":["and"]},{"Key":"filter and","Fragments":["an","used"]},{"Key":"statement should","Fragments":["be"]},{"Key":"be overshadowed","Fragments":["by"]},{"Key":"overshadowed by","Fragments":["the"]},{"Key":"what ever","Fragments":["operation"]},{"Key":"ever operation","Fragments":["you're"]},{"Key":"you're actually","Fragments":["doing"]},{"Key":"actually doing","Fragments":["in"]},{"Key":"world example.","Fragments":["In"]},{"Key":"example. In","Fragments":["other"]},{"Key":"words, that's","Fragments":["probably"]},{"Key":"probably (more","Fragments":["weasel"]},{"Key":"(more weasel","Fragments":["words)"]},{"Key":"weasel words)","Fragments":["not"]},{"Key":"words) not","Fragments":["your"]},{"Key":"not your","Fragments":["real"]},{"Key":"your real","Fragments":["performance"]},{"Key":"real performance","Fragments":["problem."]},{"Key":"be fun","Fragments":["to"]},{"Key":"fun to","Fragments":["word"]},{"Key":"to word","Fragments":["count"]},{"Key":"count something","Fragments":["like"]},{"Key":"like [Moby","Fragments":["Dick](http://www.gutenberg.org/cache/epub/2701/pg2701.txt)"]},{"Key":"[Moby Dick](http://www.gutenberg.org/cache/epub/2701/pg2701.txt)","Fragments":["about"]},{"Key":"Dick](http://www.gutenberg.org/cache/epub/2701/pg2701.txt) about","Fragments":["1000"]},{"Key":"about 1000","Fragments":["times"]},{"Key":"1000 times","Fragments":["to"]},{"Key":"times to","Fragments":["compare","get"]},{"Key":"Using `GregorianCalendar`","Fragments":["might"]},{"Key":"`GregorianCalendar` might","Fragments":["simplify"]},{"Key":"by allowing","Fragments":["you"]},{"Key":"allowing you","Fragments":["to"]},{"Key":"construct an","Fragments":["instance"]},{"Key":"an instance","Fragments":["without"]},{"Key":"instance without","Fragments":["setting"]},{"Key":"without setting","Fragments":["each"]},{"Key":"setting each","Fragments":["property"]},{"Key":"each property","Fragments":["individually."]},{"Key":"property individually.","Fragments":["Admittedly"]},{"Key":"individually. Admittedly","Fragments":["the"]},{"Key":"Admittedly the","Fragments":["Java"]},{"Key":"Calendar APIs","Fragments":["are"]},{"Key":"APIs are","Fragments":["terrible..."]},{"Key":"Extracting out","Fragments":["a"]},{"Key":"common method","Fragments":["to"]},{"Key":"to share","Fragments":["between"]},{"Key":"share between","Fragments":["the"]},{"Key":"the planets","Fragments":["would"]},{"Key":"planets would","Fragments":["help"]},{"Key":"help reduce","Fragments":["the"]},{"Key":"of `(/","Fragments":["(on-earth"]},{"Key":"`(/ (on-earth","Fragments":["s)"]},{"Key":"(on-earth s)","Fragments":["x)`."]},{"Key":"s) x)`.","Fragments":["You"]},{"Key":"x)`. You","Fragments":["could"]},{"Key":"into partial","Fragments":["application"]},{"Key":"application which","Fragments":["would"]},{"Key":"would turn","Fragments":["all"]},{"Key":"turn all","Fragments":["of"]},{"Key":"into simple","Fragments":["defs"]},{"Key":"simple defs","Fragments":["as"]},{"Key":"defs as","Fragments":["well."]},{"Key":"@dylan -","Fragments":["Yah,"]},{"Key":"- Yah,","Fragments":["I'm"]},{"Key":"Yah, I'm","Fragments":["still"]},{"Key":"best with","Fragments":["Regex,"]},{"Key":"with Regex,","Fragments":["I"]},{"Key":"Regex, I","Fragments":["played"]},{"Key":"I played","Fragments":["around","around"]},{"Key":"few ways","Fragments":["to"]},{"Key":"for second","Fragments":["regex.","submission:"]},{"Key":"second regex.","Fragments":["Couldn't"]},{"Key":"regex. Couldn't","Fragments":["get"]},{"Key":"Couldn't get","Fragments":["the"]},{"Key":" @sydney","Fragments":["I"]},{"Key":"@sydney I","Fragments":["came"]},{"Key":"one while","Fragments":["solving"]},{"Key":"while solving","Fragments":["this"]},{"Key":"solving this","Fragments":["problem","problem,"]},{"Key":"in javascript;","Fragments":["I"]},{"Key":"javascript; I","Fragments":["must"]},{"Key":"must admit","Fragments":["it"]},{"Key":"admit it","Fragments":["looks"]},{"Key":"looks cleaner","Fragments":["there"]},{"Key":"cleaner there","Fragments":["since"]},{"Key":"there since","Fragments":["you"]},{"Key":"convert booleans","Fragments":["to"]},{"Key":"to numbers,","Fragments":["so","if"]},{"Key":"numbers, so","Fragments":["it"]},{"Key":"is solved","Fragments":["in"]},{"Key":"two simple","Fragments":["operations."]},{"Key":"A solution","Fragments":["with","without"]},{"Key":"with conditionals","Fragments":["is"]},{"Key":"conditionals is","Fragments":["obvious,"]},{"Key":"is obvious,","Fragments":["but"]},{"Key":"obvious, but","Fragments":["not"]},{"Key":"not fun","Fragments":["at"]},{"Key":"fun at","Fragments":["all"]},{"Key":"Overall, clean","Fragments":["and"]},{"Key":"and combine","Fragments":["the"]},{"Key":"the `numbers-only?`","Fragments":["condition"]},{"Key":"`numbers-only?` condition","Fragments":["and"]},{"Key":"the `else`","Fragments":["condition"]},{"Key":"`else` condition","Fragments":["since"]},{"Key":"condition since","Fragments":["they"]},{"Key":"reason in","Fragments":["separating"]},{"Key":"in separating","Fragments":["out"]},{"Key":"separating out","Fragments":["the"]},{"Key":"the `sentiment`","Fragments":["from"]},{"Key":"`sentiment` from","Fragments":["the"]},{"Key":"the `response-for`.","Fragments":["You"]},{"Key":"just user","Fragments":["your"]},{"Key":"user your","Fragments":["sentiment"]},{"Key":"your sentiment","Fragments":["functions"]},{"Key":"sentiment functions","Fragments":["things"]},{"Key":"functions things","Fragments":["like"]},{"Key":"like `angry?`,","Fragments":["`question?`,"]},{"Key":"`angry?`, `question?`,","Fragments":["etc."]},{"Key":"`question?`, etc.","Fragments":["right?"]},{"Key":"etc. right?","Fragments":["Wouldn't"]},{"Key":"right? Wouldn't","Fragments":["that"]},{"Key":"Wouldn't that","Fragments":["give"]},{"Key":"similar level","Fragments":["of"]},{"Key":"with less","Fragments":["code?"]},{"Key":"also wondering","Fragments":["if"]},{"Key":"you're overusing","Fragments":["the"]},{"Key":"overusing the","Fragments":["thrush"]},{"Key":"the thrush","Fragments":["macros?","methods"]},{"Key":"thrush macros?","Fragments":["`(-\u003e"]},{"Key":"macros? `(-\u003e","Fragments":["statement"]},{"Key":"`(-\u003e statement","Fragments":["clean"]},{"Key":"statement clean","Fragments":["sentiment)`"]},{"Key":"clean sentiment)`","Fragments":["vs."]},{"Key":"sentiment)` vs.","Fragments":["`(sentiment"]},{"Key":"vs. `(sentiment","Fragments":["(clean"]},{"Key":"`(sentiment (clean","Fragments":["statement))`."]},{"Key":"(clean statement))`.","Fragments":["I"]},{"Key":"statement))`. I","Fragments":["think"]},{"Key":"that threading","Fragments":["is"]},{"Key":"often reserved","Fragments":["for"]},{"Key":"for longer","Fragments":["pipelines"]},{"Key":"longer pipelines","Fragments":["of"]},{"Key":"pipelines of","Fragments":["operations."]},{"Key":"Awesome! Those","Fragments":["are"]},{"Key":"are great","Fragments":["tips.","points."]},{"Key":"great tips.","Fragments":["Applied"]},{"Key":"tips. Applied","Fragments":["to"]},{"Key":"Applied to","Fragments":["my"]},{"Key":" Aye,","Fragments":["the"]},{"Key":"Aye, the","Fragments":["java"]},{"Key":"java Calendar","Fragments":["API"]},{"Key":"Calendar API","Fragments":["is"]},{"Key":"quite pants","Fragments":["indeed."]},{"Key":"pants indeed.","Fragments":["I'd"]},{"Key":"indeed. I'd","Fragments":["probably"]},{"Key":"use `clj-time`","Fragments":["here"]},{"Key":"`clj-time` here","Fragments":["if"]},{"Key":"was real","Fragments":["code"]},{"Key":"real code","Fragments":["but"]},{"Key":"sure that's","Fragments":["in"]},{"Key":"of exercism...","Fragments":["will"]},{"Key":"exercism... will","Fragments":["have"]},{"Key":"at `GregorianCalendar`,","Fragments":["thanks!"]},{"Key":"was separating","Fragments":["the"]},{"Key":"the concerns","Fragments":["here.","of"]},{"Key":"concerns here.","Fragments":["\"response"]},{"Key":"here. \"response","Fragments":["for\""]},{"Key":"\"response for\"","Fragments":["gives"]},{"Key":"for\" gives","Fragments":["the"]},{"Key":"gives the","Fragments":["response"]},{"Key":"given sentiment,","Fragments":["the"]},{"Key":"sentiment, the","Fragments":["sentiment"]},{"Key":"the sentiment","Fragments":["function","statements","analysis"]},{"Key":"sentiment function","Fragments":["decides"]},{"Key":"function decides","Fragments":["what"]},{"Key":"decides what","Fragments":["the"]},{"Key":"on simple","Fragments":["rules."]},{"Key":"simple rules.","Fragments":["I"]},{"Key":"rules. I","Fragments":["think"]},{"Key":"of moving","Fragments":["all"]},{"Key":"sentiment statements","Fragments":["into"]},{"Key":"statements into","Fragments":["the"]},{"Key":"response-for breaks","Fragments":["this"]},{"Key":"breaks this","Fragments":["separation"]},{"Key":"this separation","Fragments":["and"]},{"Key":"separation and","Fragments":["yes"]},{"Key":"and yes","Fragments":["would"]},{"Key":"yes would","Fragments":["make"]},{"Key":"less lines","Fragments":["but"]},{"Key":"lines but","Fragments":["more"]},{"Key":"more difficult","Fragments":["to","to","to"]},{"Key":"eyes there","Fragments":["are"]},{"Key":"many different","Fragments":["rules"]},{"Key":"different rules","Fragments":["at"]},{"Key":"rules at","Fragments":["play"]},{"Key":"at play","Fragments":["in"]},{"Key":"play in","Fragments":["the","clojure."]},{"Key":"sentiment analysis","Fragments":["and"]},{"Key":"analysis and","Fragments":["I"]},{"Key":"considered de-composing","Fragments":["even"]},{"Key":"de-composing even","Fragments":["more"]},{"Key":"as \"shouty-question?\"","Fragments":["\"number-question?\"."]},{"Key":"My angry?","Fragments":["function"]},{"Key":"angry? function","Fragments":["I"]},{"Key":"am lest","Fragments":["happy"]},{"Key":"lest happy","Fragments":["with"]},{"Key":"with as","Fragments":["it"]},{"Key":"specific fit","Fragments":["to"]},{"Key":"fit to","Fragments":["the"]},{"Key":"examples given","Fragments":["and"]},{"Key":"given and","Fragments":["has"]},{"Key":"has too","Fragments":["much"]},{"Key":"do use","Fragments":["a"]},{"Key":"macros :)","Fragments":["I"]},{"Key":"am undecided","Fragments":["on"]},{"Key":"idiomatic style.","Fragments":["I"]},{"Key":"style. I","Fragments":["like","like"]},{"Key":"another stage","Fragments":["easily."]},{"Key":"stage easily.","Fragments":["eg:"]},{"Key":"easily. eg:","Fragments":["explicit-filter"]},{"Key":" Though","Fragments":["I","it's"]},{"Key":"do take","Fragments":["your"]},{"Key":"point that","Fragments":["it","I"]},{"Key":"for shorter","Fragments":["chains."]},{"Key":" yep","Fragments":["-"]},{"Key":"yep -","Fragments":["looking"]},{"Key":"- looking","Fragments":["at"]},{"Key":"it now,","Fragments":["i"]},{"Key":"now, i","Fragments":["wonder"]},{"Key":"i wonder","Fragments":["why"]},{"Key":"wonder why","Fragments":["i"]},{"Key":"why i","Fragments":["didn't"]},{"Key":"i didn't","Fragments":["see","understand"]},{"Key":"see that.","Fragments":["i","Thanks"]},{"Key":"that. i","Fragments":["love"]},{"Key":"i love","Fragments":["that"]},{"Key":"love that","Fragments":["`dna-\u003erna`","dictionaries"]},{"Key":"that `dna-\u003erna`","Fragments":["is"]},{"Key":"`dna-\u003erna` is","Fragments":["a"]},{"Key":"valid name.","Fragments":["I've"]},{"Key":"name. I've","Fragments":["cleaned"]},{"Key":"I've cleaned","Fragments":["things"]},{"Key":"up and","Fragments":["submitted"]},{"Key":"and submitted","Fragments":["another"]},{"Key":"the `validate`","Fragments":["method","and"]},{"Key":"`validate` method","Fragments":["(to"]},{"Key":"method (to","Fragments":["me)"]},{"Key":"(to me)","Fragments":["seems"]},{"Key":"me) seems","Fragments":["kind"]},{"Key":"of heavy.","Fragments":["that"]},{"Key":"heavy. that","Fragments":["is,"]},{"Key":"is, is","Fragments":["there"]},{"Key":"to roll","Fragments":["that","this"]},{"Key":"roll that","Fragments":["into"]},{"Key":"the map?","Fragments":["It"]},{"Key":"map? It","Fragments":["seems"]},{"Key":"like i","Fragments":["should"]},{"Key":"roll this","Fragments":["whole"]},{"Key":"thing into","Fragments":["one"]},{"Key":"one method","Fragments":["but","and","didn't"]},{"Key":"method but","Fragments":["i"]},{"Key":"i couldn't","Fragments":["quite"]},{"Key":"i want","Fragments":["it"]},{"Key":"read more","Fragments":["like"]},{"Key":" (join","Fragments":["\"\""]},{"Key":"(join \"\"","Fragments":["(map"]},{"Key":"\"\" (map","Fragments":["(validate"]},{"Key":"(map (validate","Fragments":["(dna-\u003erna"]},{"Key":"(validate (dna-\u003erna","Fragments":["X))","c))`."]},{"Key":"(dna-\u003erna X))","Fragments":["dna_sequence)"]},{"Key":" how","Fragments":["can","about"]},{"Key":"how can","Fragments":["i","I"]},{"Key":"i pass","Fragments":["a"]},{"Key":"pass a","Fragments":["function"]},{"Key":"map which","Fragments":["i'm","you"]},{"Key":"which i'm","Fragments":["defining"]},{"Key":"i'm defining","Fragments":["in"]},{"Key":"defining in","Fragments":["that"]},{"Key":"that line?","Fragments":["can"]},{"Key":"line? can","Fragments":["i"]},{"Key":"i do","Fragments":["that?"]},{"Key":"Definitely makes","Fragments":["the"]},{"Key":"more readable!","Fragments":["Obviously"]},{"Key":"readable! Obviously","Fragments":["in"]},{"Key":"Obviously in","Fragments":["this"]},{"Key":"much but","Fragments":["would"]},{"Key":"would separating","Fragments":["it"]},{"Key":"separating it","Fragments":["out"]},{"Key":"be bad","Fragments":["for"]},{"Key":"bad for","Fragments":["performance?","having"]},{"Key":"much happier","Fragments":["with"]},{"Key":"this submission.","Fragments":["Have"]},{"Key":"submission. Have","Fragments":["reversed"]},{"Key":"Have reversed","Fragments":["my"]},{"Key":"reversed my","Fragments":["thoughts"]},{"Key":"my thoughts","Fragments":["on"]},{"Key":"on separating","Fragments":["the"]},{"Key":"concerns of","Fragments":["response"]},{"Key":"of response","Fragments":["and"]},{"Key":"response and","Fragments":["sentiment"]},{"Key":"and sentiment","Fragments":["after"]},{"Key":"sentiment after","Fragments":["seeing"]},{"Key":"after seeing","Fragments":["the"]},{"Key":"use condp","Fragments":["with"]},{"Key":"condp with","Fragments":["apply","apply"]},{"Key":"with apply","Fragments":["to","is","str."]},{"Key":"to list","Fragments":["through"]},{"Key":"list through","Fragments":["predicate"]},{"Key":"through predicate","Fragments":["functions"]},{"Key":"I'd never","Fragments":["seen"]},{"Key":"the `apply`","Fragments":["usage,"]},{"Key":"`apply` usage,","Fragments":["but"]},{"Key":"usage, but","Fragments":["yeah"]},{"Key":"but yeah","Fragments":["that"]},{"Key":"yeah that","Fragments":["does"]},{"Key":"function passed","Fragments":["to"]},{"Key":"to `reduce-kv`","Fragments":["is"]},{"Key":"probably on","Fragments":["the"]},{"Key":"the borderline","Fragments":["for"]},{"Key":"borderline for","Fragments":["me"]},{"Key":"me where","Fragments":["I'd"]},{"Key":"where I'd","Fragments":["extract","go"]},{"Key":"I'd extract","Fragments":["it"]},{"Key":"extract it","Fragments":["into"]},{"Key":"own function","Fragments":["(either","and","is"]},{"Key":"a letfn","Fragments":["or"]},{"Key":"letfn or","Fragments":["externally)."]},{"Key":"or externally).","Fragments":["You"]},{"Key":"externally). You","Fragments":["might"]},{"Key":"with extracting","Fragments":["it","those"]},{"Key":"extracting it","Fragments":["into"]},{"Key":"with breaking","Fragments":["apart","it"]},{"Key":"breaking apart","Fragments":["the"]},{"Key":"verse function","Fragments":["to"]},{"Key":"repetition. Especially","Fragments":["in"]},{"Key":"Especially in","Fragments":["the"]},{"Key":"the 1,","Fragments":["2,"]},{"Key":"1, 2,","Fragments":["x"]},{"Key":"2, x","Fragments":["cases,"]},{"Key":"x cases,","Fragments":["they"]},{"Key":"cases, they","Fragments":["share"]},{"Key":"they share","Fragments":["a"]},{"Key":"share a","Fragments":["lot"]},{"Key":"of structure","Fragments":["in"]},{"Key":"a lambda","Fragments":["function"]},{"Key":"lambda function","Fragments":["or"]},{"Key":"or anonymous","Fragments":["function."]},{"Key":"[c] (validate","Fragments":["(dna-\u003erna"]},{"Key":"(dna-\u003erna c))`.","Fragments":["There"]},{"Key":"c))`. There","Fragments":["is"]},{"Key":"a shorter,","Fragments":["anonymous"]},{"Key":"shorter, anonymous","Fragments":["form"]},{"Key":"anonymous form","Fragments":["`#(validate"]},{"Key":"form `#(validate","Fragments":["(dna-\u003erna"]},{"Key":"`#(validate (dna-\u003erna","Fragments":["%))`"]},{"Key":"(dna-\u003erna %))`","Fragments":["where"]},{"Key":"%))` where","Fragments":["%"]},{"Key":"where %","Fragments":["gets"]},{"Key":"% gets","Fragments":["the"]},{"Key":"also want","Fragments":["to"]},{"Key":"at sets","Fragments":["and"]},{"Key":"sets and","Fragments":["collection","maps","maps"]},{"Key":"and collection","Fragments":["predicates"]},{"Key":"collection predicates","Fragments":["like"]},{"Key":"like `every?`","Fragments":["and","`contains?`"]},{"Key":"`every?` and","Fragments":["`not-every?`."]},{"Key":"and `not-every?`.","Fragments":["They"]},{"Key":"`not-every?`. They","Fragments":["are"]},{"Key":"a concise","Fragments":["way"]},{"Key":"way expressing","Fragments":["the"]},{"Key":"expressing the","Fragments":["idea"]},{"Key":"of \"everything","Fragments":["in"]},{"Key":"\"everything in","Fragments":["a"]},{"Key":"one of\"","Fragments":["(or"]},{"Key":"of\" (or","Fragments":["the"]},{"Key":"Relying just","Fragments":["on"]},{"Key":"just on","Fragments":["regex"]},{"Key":"on regex","Fragments":["may","(almost"]},{"Key":"regex may","Fragments":["have"]},{"Key":"less pure","Fragments":["clojure"]},{"Key":"pure clojure","Fragments":["style,"]},{"Key":"clojure style,","Fragments":["but"]},{"Key":"probably where","Fragments":["I'd"]},{"Key":"go first","Fragments":["for"]},{"Key":"first for","Fragments":["real"]},{"Key":"for real","Fragments":["life"]},{"Key":"real life","Fragments":["string"]},{"Key":"life string","Fragments":["pattern"]},{"Key":"string pattern","Fragments":["matching."]},{"Key":"pattern matching.","Fragments":["Using"]},{"Key":"matching. Using","Fragments":["regex"]},{"Key":"question test","Fragments":["is","in"]},{"Key":"I coded","Fragments":["this","myself."]},{"Key":"coded this","Fragments":["to"]},{"Key":"suite, so","Fragments":["a"]},{"Key":"string like","Fragments":["\"I...\""]},{"Key":"like \"I...\"","Fragments":["would"]},{"Key":"\"I...\" would","Fragments":["be"]},{"Key":"considered yelling,","Fragments":["let's"]},{"Key":"yelling, let's","Fragments":["just"]},{"Key":"let's just","Fragments":["say"]},{"Key":"say Bob","Fragments":["can"]},{"Key":"Bob can","Fragments":["get"]},{"Key":"get moody","Fragments":["sometimes..."]},{"Key":"Looks clean","Fragments":["and"]},{"Key":"and concise.","Fragments":["As"]},{"Key":"concise. As","Fragments":["a"]},{"Key":"a newcomer,","Fragments":["reading"]},{"Key":"newcomer, reading","Fragments":["condp"]},{"Key":"reading condp","Fragments":["with"]},{"Key":"apply is","Fragments":["a"]},{"Key":"than plain","Fragments":["cond,"]},{"Key":"plain cond,","Fragments":["but"]},{"Key":"cond, but","Fragments":["each","discovered"]},{"Key":"but each","Fragments":["predicate"]},{"Key":"predicate line","Fragments":["is"]},{"Key":"cleaner in","Fragments":["the"]},{"Key":"tip from","Fragments":["blcooley.","rcolinray"]},{"Key":"from blcooley.","Fragments":["To"]},{"Key":"blcooley. To","Fragments":["add"]},{"Key":"To add","Fragments":["a"]},{"Key":"From [the","Fragments":["clojure"]},{"Key":"[the clojure","Fragments":["docs](http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/some):"]},{"Key":"\u003e One","Fragments":["common"]},{"Key":"One common","Fragments":["idiom"]},{"Key":"idiom is","Fragments":["to"]},{"Key":"as pred,","Fragments":["for"]},{"Key":"pred, for","Fragments":["example"]},{"Key":"example this","Fragments":["will"]},{"Key":"this will","Fragments":["return","eliminate","automatically"]},{"Key":"return :fred","Fragments":["if"]},{"Key":":fred if","Fragments":[":fred"]},{"Key":"if :fred","Fragments":["is"]},{"Key":":fred is","Fragments":["in"]},{"Key":"the sequence,","Fragments":["otherwise"]},{"Key":"sequence, otherwise","Fragments":["nil:"]},{"Key":" `(some","Fragments":["#{:fred}"]},{"Key":"`(some #{:fred}","Fragments":["coll)`"]},{"Key":"The important","Fragments":["thing"]},{"Key":"important thing","Fragments":["that"]},{"Key":"didn't recognize","Fragments":["is"]},{"Key":"general `coll`.","Fragments":["`Sets`,"]},{"Key":"`coll`. `Sets`,","Fragments":["`Vectors`,"]},{"Key":"`Sets`, `Vectors`,","Fragments":["and"]},{"Key":"`Vectors`, and","Fragments":["`Maps`"]},{"Key":"and `Maps`","Fragments":["implement"]},{"Key":"`Maps` implement","Fragments":["`IFn`","`IFn`"]},{"Key":"implement `IFn`","Fragments":["while","by","by","by"]},{"Key":"`IFn` while","Fragments":["`Lists`"]},{"Key":"while `Lists`","Fragments":["don't."]},{"Key":"`Lists` don't.","Fragments":["You"]},{"Key":"don't. You","Fragments":["would"]},{"Key":"use `some`","Fragments":["if"]},{"Key":"`some` if","Fragments":["your"]},{"Key":"your collection","Fragments":["isn't"]},{"Key":"collection isn't","Fragments":["a"]},{"Key":" `Sets`","Fragments":["implement"]},{"Key":"`Sets` implement","Fragments":["`IFn`"]},{"Key":"`IFn` by","Fragments":["returning","returning","returning"]},{"Key":"by returning","Fragments":["the","the","the"]},{"Key":"the element","Fragments":["if","at"]},{"Key":"element if","Fragments":["it"]},{"Key":"it exists","Fragments":["(which"]},{"Key":"exists (which","Fragments":["is"]},{"Key":"this case).","Fragments":["`Vectors`"]},{"Key":"case). `Vectors`","Fragments":["implement"]},{"Key":"`Vectors` implement","Fragments":["`IFn`"]},{"Key":"element at","Fragments":["the"]},{"Key":"given index.","Fragments":["`Maps`"]},{"Key":"index. `Maps`","Fragments":["implement"]},{"Key":"value matching","Fragments":["the"]},{"Key":"matching the","Fragments":["given"]},{"Key":"I've experimented","Fragments":["with"]},{"Key":"breaking it","Fragments":["down"]},{"Key":"down more","Fragments":["but"]},{"Key":"more but","Fragments":["ultimately","I'd","it"]},{"Key":"but ultimately","Fragments":["feel"]},{"Key":"ultimately feel","Fragments":["like"]},{"Key":"was introducing","Fragments":["complexity"]},{"Key":"introducing complexity","Fragments":["before"]},{"Key":"complexity before","Fragments":["it's"]},{"Key":"before it's","Fragments":["really"]},{"Key":"really needed.","Fragments":["For"]},{"Key":"needed. For","Fragments":["instance"]},{"Key":"For instance","Fragments":["[my","you"]},{"Key":"instance [my","Fragments":["solution"]},{"Key":"[my solution","Fragments":["in"]},{"Key":"in Javascript](http://exercism.io/submissions/2f68013a2d8cecc8ac177907),","Fragments":["while"]},{"Key":"Javascript](http://exercism.io/submissions/2f68013a2d8cecc8ac177907), while","Fragments":["technically"]},{"Key":"while technically","Fragments":["more"]},{"Key":"technically more","Fragments":["modular,"]},{"Key":"more modular,","Fragments":["doesn't"]},{"Key":"modular, doesn't","Fragments":["feel"]},{"Key":"feel as","Fragments":["easy"]},{"Key":" @marlin","Fragments":["alright,"]},{"Key":"@marlin alright,","Fragments":["thanks!"]},{"Key":"alright, thanks!","Fragments":["I'll"]},{"Key":"thanks! I'll","Fragments":["think"]},{"Key":"of str/trim","Fragments":["here."]},{"Key":"str/trim here.","Fragments":["My"]},{"Key":"here. My","Fragments":["solution"]},{"Key":"solution wasn't","Fragments":["as"]},{"Key":"wasn't as","Fragments":["concise.","focused"]},{"Key":" @burley","Fragments":["nice.","I"]},{"Key":"@burley nice.","Fragments":["`blank`"]},{"Key":"nice. `blank`","Fragments":["looks"]},{"Key":"`blank` looks","Fragments":["like"]},{"Key":"it fits","Fragments":["the","nicely"]},{"Key":"the bill","Fragments":["perfectly,"]},{"Key":"bill perfectly,","Fragments":["and"]},{"Key":"perfectly, and","Fragments":["more"]},{"Key":"efficient and","Fragments":["readable","you"]},{"Key":"and readable","Fragments":["than",";-)"]},{"Key":"Looks just","Fragments":["about"]},{"Key":"about perfect","Fragments":["to"]},{"Key":"tests better","Fragments":["when"]},{"Key":"when they","Fragments":["more"]},{"Key":"they more","Fragments":["closely"]},{"Key":"more closely","Fragments":["match","to"]},{"Key":"closely match","Fragments":["the"]},{"Key":"the scenario.","Fragments":["So"]},{"Key":"scenario. So","Fragments":["`letters-all-caps?`"]},{"Key":"So `letters-all-caps?`","Fragments":["while"]},{"Key":"`letters-all-caps?` while","Fragments":["literally"]},{"Key":"while literally","Fragments":["true,"]},{"Key":"literally true,","Fragments":["might"]},{"Key":"true, might","Fragments":["be"]},{"Key":"as `yelling?`","Fragments":["or"]},{"Key":"`yelling?` or","Fragments":["something"]},{"Key":"that. Similarly","Fragments":["`q?`"]},{"Key":"Similarly `q?`","Fragments":["is"]},{"Key":"`q?` is","Fragments":["probably"]},{"Key":"better spelled","Fragments":["out"]},{"Key":"spelled out","Fragments":["as"]},{"Key":"out as","Fragments":["`question?`."]},{"Key":"as `question?`.","Fragments":["Then"]},{"Key":"`question?`. Then","Fragments":["the"]},{"Key":"whole cond","Fragments":["becomes"]},{"Key":"cond becomes","Fragments":["very"]},{"Key":"becomes very","Fragments":["clear"]},{"Key":"The double-negative","Fragments":["of"]},{"Key":"double-negative of","Fragments":["`no-non-caps?`"]},{"Key":"of `no-non-caps?`","Fragments":["can"]},{"Key":"`no-non-caps?` can","Fragments":["also"]},{"Key":"also experiment","Fragments":["with"]},{"Key":"extracting those","Fragments":["cases"]},{"Key":"cases into","Fragments":["their"]},{"Key":"While `{name","Fragments":["(atom"]},{"Key":"`{name (atom","Fragments":["(make-a-name))}`"]},{"Key":"(atom (make-a-name))}`","Fragments":["works,"]},{"Key":"(make-a-name))}` works,","Fragments":["it"]},{"Key":"works, it","Fragments":["might"]},{"Key":"be what","Fragments":["you"]},{"Key":" `name`","Fragments":["is"]},{"Key":"`name` is","Fragments":["a"]},{"Key":"probably intended","Fragments":["to"]},{"Key":"intended to","Fragments":["use","hold"]},{"Key":"symbol like","Fragments":["`:name`"]},{"Key":"like `:name`","Fragments":["instead."]},{"Key":"atom to","Fragments":["contain"]},{"Key":"map instead","Fragments":["of"]},{"Key":"atom being","Fragments":["a","a","a"]},{"Key":"map. If","Fragments":["you"]},{"Key":"atom directly","Fragments":["though,"]},{"Key":"directly though,","Fragments":["you"]},{"Key":"map at","Fragments":["all","the"]},{"Key":"all and","Fragments":["could"]},{"Key":"atom containing","Fragments":["a"]},{"Key":"changes for","Fragments":["it"]},{"Key":"more clojure","Fragments":["idiomatic.","idiomatic."]},{"Key":"clojure idiomatic.","Fragments":["Many"]},{"Key":"idiomatic. Many","Fragments":["thanks"]},{"Key":"Many thanks","Fragments":["for"]},{"Key":"pointing them","Fragments":["out."]},{"Key":" @kirk","Fragments":["Thanks!"]},{"Key":"@kirk Thanks!","Fragments":["Should"]},{"Key":"have followed","Fragments":["the"]},{"Key":"followed the","Fragments":["`?`"]},{"Key":"the `?`","Fragments":["idiom"]},{"Key":"`?` idiom","Fragments":["on"]},{"Key":"idiom on","Fragments":["the"]},{"Key":"boolean methods.","Fragments":["Per"]},{"Key":"methods. Per","Fragments":["your"]},{"Key":"Per your","Fragments":["other"]},{"Key":"your other","Fragments":["feedback,","functions"]},{"Key":"other feedback,","Fragments":["can"]},{"Key":"feedback, can","Fragments":["you"]},{"Key":"specific about","Fragments":["which","the"]},{"Key":"which of","Fragments":["my"]},{"Key":"my helpers","Fragments":["could"]},{"Key":"helpers could","Fragments":["be"]},{"Key":"could certainly","Fragments":["write"]},{"Key":"certainly write","Fragments":["a"]},{"Key":"solve `silence`:","Fragments":["`(re-find"]},{"Key":"`silence`: `(re-find","Fragments":["#\"^\\s*$\""]},{"Key":"`(re-find #\"^\\s*$\"","Fragments":["s)`.","utterance)`"]},{"Key":"#\"^\\s*$\" s)`.","Fragments":["`question`"]},{"Key":"s)`. `question`","Fragments":["could"]},{"Key":"`question` could","Fragments":["be"]},{"Key":"be `(=","Fragments":["\\?"]},{"Key":"this what","Fragments":["you","you"]},{"Key":"were hinting","Fragments":["at?"]},{"Key":"use sets","Fragments":["(and"]},{"Key":"sets (and","Fragments":["maps)"]},{"Key":"(and maps)","Fragments":["as"]},{"Key":"maps) as","Fragments":["functions"]},{"Key":"should allow","Fragments":["you"]},{"Key":"simplify `valid-dna?`","Fragments":["some."]},{"Key":"of `translate`,","Fragments":["you"]},{"Key":"`translate`, you","Fragments":["might"]},{"Key":"the `map`","Fragments":["function","to","function.","(adding"]},{"Key":"`for` comprehension","Fragments":["which"]},{"Key":"comprehension which","Fragments":["would"]},{"Key":"Clojure. There","Fragments":["are"]},{"Key":"also clojure","Fragments":["string"]},{"Key":"clojure string","Fragments":["functions"]},{"Key":"require in","Fragments":["that"]},{"Key":"do `=`","Fragments":["and"]},{"Key":"and `last`","Fragments":["instead"]},{"Key":"of `.endsWith`.","Fragments":["It's"]},{"Key":"`.endsWith`. It's","Fragments":["sometimes"]},{"Key":"It's sometimes","Fragments":["nice"]},{"Key":"sometimes nice","Fragments":["to"]},{"Key":"function even","Fragments":["for"]},{"Key":"simple like","Fragments":["the"]},{"Key":"the `endsWith`","Fragments":["case."]},{"Key":"`endsWith` case.","Fragments":["You"]},{"Key":"can name","Fragments":["it"]},{"Key":"it `question?`,","Fragments":["for"]},{"Key":"example, which","Fragments":["makes"]},{"Key":"`response-for` a","Fragments":["bit"]},{"Key":" `require`","Fragments":["as"]},{"Key":"normally reserved","Fragments":["for"]},{"Key":"for use","Fragments":["in","of","on","in"]},{"Key":"the Repl.","Fragments":["The"]},{"Key":"Repl. The","Fragments":["preferred"]},{"Key":"namespace `:require`","Fragments":["form"]},{"Key":"idiomatic ways","Fragments":["to","to"]},{"Key":"things you've","Fragments":["got:","done"]},{"Key":"`(- bottles_number","Fragments":["1)`"]},{"Key":"bottles_number 1)`","Fragments":["is"]},{"Key":" `","Fragments":["(="]},{"Key":"(= bottle_number","Fragments":["0)`"]},{"Key":"bottle_number 0)`","Fragments":["is"]},{"Key":"can re-arrange","Fragments":["your"]},{"Key":"re-arrange your","Fragments":["operations"]},{"Key":"operations a","Fragments":["bit"]},{"Key":"simplify things.","Fragments":["e.g."]},{"Key":"things. e.g.","Fragments":["If"]},{"Key":"e.g. If","Fragments":["you"]},{"Key":"you lower-case","Fragments":["the"]},{"Key":"individual words","Fragments":["to"]},{"Key":"words to","Fragments":["lower-case"]},{"Key":"to lower-case","Fragments":["them."]},{"Key":"lower-case them.","Fragments":["That's"]},{"Key":"needing a","Fragments":["wrapper."]},{"Key":"and looks","Fragments":["good."]},{"Key":"shorten `clojure.string`","Fragments":["with"]},{"Key":"`clojure.string` with","Fragments":["a"]},{"Key":" Nil","Fragments":["and"]},{"Key":"Nil and","Fragments":["non-nil"]},{"Key":"and non-nil","Fragments":["are"]},{"Key":"non-nil are","Fragments":["truthy"]},{"Key":"are truthy","Fragments":["in"]},{"Key":"Clojure. So","Fragments":["you"]},{"Key":"with leaving","Fragments":["out"]},{"Key":"leaving out","Fragments":["the"]},{"Key":"the `not=","Fragments":["nil`"]},{"Key":"`not= nil`","Fragments":["in"]},{"Key":"nil` in","Fragments":["the"]},{"Key":"the match","Fragments":["if","function"]},{"Key":"match if","Fragments":["you"]},{"Key":"`assert` function.","Fragments":["You"]},{"Key":"then pull","Fragments":["the"]},{"Key":"validation out","Fragments":["of"]},{"Key":"thrush methods","Fragments":["which"]},{"Key":"methods which","Fragments":["might"]},{"Key":"might clean","Fragments":["things"]},{"Key":"clean things","Fragments":["up"]},{"Key":"a little.","Fragments":["(It"]},{"Key":"little. (It","Fragments":["would"]},{"Key":"(It would","Fragments":["also"]},{"Key":"also allow","Fragments":["you"]},{"Key":"simplify or","Fragments":["remove"]},{"Key":"the validate","Fragments":["method).","function"]},{"Key":"2 conditions,","Fragments":["you"]},{"Key":"conditions, you","Fragments":["could"]},{"Key":"Good overall","Fragments":["structure.","structure.","structure"]},{"Key":"other string","Fragments":["functions"]},{"Key":"bit though,","Fragments":["especially"]},{"Key":"though, especially","Fragments":["the"]},{"Key":"the `silence`","Fragments":["function."]},{"Key":"`silence` function.","Fragments":["I'll"]},{"Key":"function. I'll","Fragments":["leave"]},{"Key":"leave that","Fragments":["as","one"]},{"Key":"that as","Fragments":["a"]},{"Key":"hint without","Fragments":["giving"]},{"Key":"it away","Fragments":["entirely."]},{"Key":"away entirely.","Fragments":[":)"]},{"Key":"end functions","Fragments":["that"]},{"Key":"boolean with","Fragments":["a"]},{"Key":"mark. So","Fragments":["your"]},{"Key":"So your","Fragments":["cond","word-count"]},{"Key":"your cond","Fragments":["could","call?"]},{"Key":"cond could","Fragments":["contain"]},{"Key":"contain `silence?`,","Fragments":["`shouting?`,"]},{"Key":"`silence?`, `shouting?`,","Fragments":["etc."]},{"Key":"`shouting?`, etc.","Fragments":["That's"]},{"Key":"etc. That's","Fragments":["just"]},{"Key":"visual style","Fragments":["that"]},{"Key":"style that","Fragments":["you"]},{"Key":" `upper-cased-and-letter?`","Fragments":["kind"]},{"Key":"`upper-cased-and-letter?` kind","Fragments":["of"]},{"Key":"of stands","Fragments":["out"]},{"Key":"stands out","Fragments":["to"]},{"Key":"me. While","Fragments":["it's"]},{"Key":"function does,","Fragments":["it"]},{"Key":"does, it","Fragments":["doesn't"]},{"Key":"doesn't capture","Fragments":["the"]},{"Key":"the *intent*","Fragments":["of"]},{"Key":"*intent* of","Fragments":["the"]},{"Key":"name `question?`","Fragments":["does."]},{"Key":"good. Regex","Fragments":["is"]},{"Key":"Regex is","Fragments":["a"]},{"Key":"a declarative","Fragments":["mini-language","one.)"]},{"Key":"declarative mini-language","Fragments":["and"]},{"Key":"mini-language and","Fragments":["fits"]},{"Key":"and fits","Fragments":["well"]},{"Key":"fits well","Fragments":["in"]},{"Key":"functional paradigm","Fragments":["in"]},{"Key":"paradigm in","Fragments":["my"]},{"Key":"as lists,","Fragments":["which"]},{"Key":"lists, which","Fragments":["have"]},{"Key":"options for","Fragments":["looking"]},{"Key":"last element.","Fragments":["That"]},{"Key":"element. That","Fragments":["might"]},{"Key":"extracting question?","Fragments":["to"]},{"Key":"more litterate.","Fragments":["This"]},{"Key":"litterate. This","Fragments":["time,"]},{"Key":"This time,","Fragments":["however,"]},{"Key":"time, however,","Fragments":["I"]},{"Key":"I choose","Fragments":["to"]},{"Key":"let statement","Fragments":["to","rather"]},{"Key":"more encapsulated.","Fragments":["Thinking"]},{"Key":"encapsulated. Thinking","Fragments":["it's"]},{"Key":"Thinking it's","Fragments":["easy"]},{"Key":"easy enough","Fragments":["to"]},{"Key":"extract to","Fragments":["functions"]},{"Key":"functions _if_","Fragments":["they're"]},{"Key":"_if_ they're","Fragments":["needed"]},{"Key":"they're needed","Fragments":["somewhere"]},{"Key":"needed somewhere","Fragments":["else."]},{"Key":"somewhere else.","Fragments":["What"]},{"Key":"else. What","Fragments":["do"]},{"Key":" @cecilia:","Fragments":["Thanks"]},{"Key":"@cecilia: Thanks","Fragments":["for"]},{"Key":"feedback. Both","Fragments":["are"]},{"Key":"great points.","Fragments":["I"]},{"Key":"points. I","Fragments":["totally"]},{"Key":"totally whiffed","Fragments":["on"]},{"Key":"whiffed on","Fragments":["remembering"]},{"Key":"on remembering","Fragments":["`assert`"]},{"Key":"remembering `assert`","Fragments":["(not"]},{"Key":"`assert` (not","Fragments":["sure"]},{"Key":"(not sure","Fragments":["how)."]},{"Key":"sure how).","Fragments":["And"]},{"Key":"how). And","Fragments":["for"]},{"Key":"And for","Fragments":["some","`question?`,","line"]},{"Key":"you're totally","Fragments":["right,"]},{"Key":"totally right,","Fragments":["an"]},{"Key":"right, an","Fragments":["`if`"]},{"Key":"question could","Fragments":["be"]},{"Key":"with `last`.","Fragments":["That's","`last`"]},{"Key":"`last`. That's","Fragments":["maybe"]},{"Key":"That's maybe","Fragments":["a"]},{"Key":"than regex,","Fragments":["but"]},{"Key":"huge difference?","Fragments":["For"]},{"Key":"difference? For","Fragments":["silence,"]},{"Key":"For silence,","Fragments":["there"]},{"Key":"silence, there","Fragments":["is"]},{"Key":"a `clojure.string/blank?`","Fragments":["function"]},{"Key":"`clojure.string/blank?` function","Fragments":["that"]},{"Key":"think does","Fragments":["exactly"]},{"Key":"exactly what's","Fragments":["needed."]},{"Key":"what's needed.","Fragments":["(The"]},{"Key":"needed. (The","Fragments":["implementation"]},{"Key":"(The implementation","Fragments":["of"]},{"Key":"of blank?","Fragments":["is"]},{"Key":"blank? is","Fragments":["different","wrapped"]},{"Key":"is different","Fragments":["because"]},{"Key":"different because","Fragments":["it"]},{"Key":"it avoids","Fragments":["creating"]},{"Key":"avoids creating","Fragments":["a"]},{"Key":"new string","Fragments":["and"]},{"Key":"instead loops","Fragments":["through"]},{"Key":"loops through","Fragments":["each"]},{"Key":"through each","Fragments":["character"]},{"Key":"character looking","Fragments":["for"]},{"Key":" ```no-quiet?```","Fragments":["is"]},{"Key":"```no-quiet?``` is","Fragments":["kind"]},{"Key":"of double","Fragments":["negation."]},{"Key":"double negation.","Fragments":["I'd"]},{"Key":"negation. I'd","Fragments":["inline"]},{"Key":"I'd inline","Fragments":["```no-quit?```"]},{"Key":"inline ```no-quit?```","Fragments":["and"]},{"Key":"```no-quit?``` and","Fragments":["```some-loud?```"]},{"Key":"and ```some-loud?```","Fragments":["anyways."]},{"Key":"bit lost","Fragments":["here,"]},{"Key":"lost here,","Fragments":["@gregg."]},{"Key":"here, @gregg.","Fragments":["I've"]},{"Key":"@gregg. I've","Fragments":["tried"]},{"Key":"tried with","Fragments":["`bigint`"]},{"Key":"with `bigint`","Fragments":["and"]},{"Key":"`bigint` and","Fragments":["`Math/pow`"]},{"Key":"and `Math/pow`","Fragments":["-"]},{"Key":"`Math/pow` -","Fragments":["is"]},{"Key":"- is","Fragments":["that","it","this"]},{"Key":"you intended?","Fragments":["-"]},{"Key":"intended? -","Fragments":["but"]},{"Key":"but all","Fragments":["the"]},{"Key":"tests fail","Fragments":["as"]},{"Key":"fail as","Fragments":["the"]},{"Key":"the results,","Fragments":["though"]},{"Key":"results, though","Fragments":["they"]},{"Key":"though they","Fragments":["appear"]},{"Key":"they appear","Fragments":["reasonably"]},{"Key":"appear reasonably","Fragments":["correct,"]},{"Key":"reasonably correct,","Fragments":["come"]},{"Key":"correct, come","Fragments":["back"]},{"Key":"back with","Fragments":["the"]},{"Key":"wrong type","Fragments":["and/or"]},{"Key":"type and/or","Fragments":["level"]},{"Key":"and/or level","Fragments":["of"]},{"Key":"of accuracy","Fragments":["-"]},{"Key":"accuracy -","Fragments":["like"]},{"Key":"in (square-4)","Fragments":["(grains_test.clj:14)"]},{"Key":"(= 8","Fragments":["(grains/square","8.0))"]},{"Key":"8 (grains/square","Fragments":["4))"]},{"Key":"in (square-2)","Fragments":["(grains_test.clj:8)"]},{"Key":"(= 2","Fragments":["(grains/square","2.0))"]},{"Key":"2 (grains/square","Fragments":["2))"]},{"Key":"in (square-16)","Fragments":["(grains_test.clj:17)"]},{"Key":"(= 32768","Fragments":["(grains/square","32768.0))"]},{"Key":"32768 (grains/square","Fragments":["16))"]},{"Key":"in (square-64)","Fragments":["(grains_test.clj:23)"]},{"Key":"(= 9223372036854775808N","Fragments":["(grains/square","9.223372036854776E18))"]},{"Key":"9223372036854775808N (grains/square","Fragments":["64))"]},{"Key":"in (square-3)","Fragments":["(grains_test.clj:11)"]},{"Key":"(= 4","Fragments":["(grains/square","4.0))"]},{"Key":"4 (grains/square","Fragments":["3))"]},{"Key":"in (square-1)","Fragments":["(grains_test.clj:5)"]},{"Key":"(= 1","Fragments":["(grains/square","1.0))"]},{"Key":"1 (grains/square","Fragments":["1))"]},{"Key":"in (total-grains)","Fragments":["(grains_test.clj:26)"]},{"Key":"(= 18446744073709551615N","Fragments":["(grains/total))","1.8446744073709552E19))"]},{"Key":"in (square-32)","Fragments":["(grains_test.clj:20)"]},{"Key":"(= 2147483648","Fragments":["(grains/square","2.147483648E9))"]},{"Key":"2147483648 (grains/square","Fragments":["32))"]},{"Key":"it's one","Fragments":["method"]},{"Key":"method and","Fragments":["yet","call"]},{"Key":"and yet","Fragments":["the"]},{"Key":"yet the","Fragments":["cond"]},{"Key":"The intent","Fragments":["in","is"]},{"Key":"really clear,","Fragments":["great!"]},{"Key":" shouting","Fragments":["could"]},{"Key":"be simpler.","Fragments":["One"]},{"Key":"simpler. One","Fragments":["idea"]},{"Key":"One idea","Fragments":["is"]},{"Key":"to uppercase","Fragments":["once"]},{"Key":"uppercase once","Fragments":["in"]},{"Key":"a let.","Fragments":["Then"]},{"Key":"let. Then","Fragments":["you"]},{"Key":"for uppercase","Fragments":["letters"]},{"Key":"uppercase letters","Fragments":["in"]},{"Key":"use ``Character/isLetter```","Fragments":["to"]},{"Key":"``Character/isLetter``` to","Fragments":["test"]},{"Key":"for \"letterness\"","Fragments":["of"]},{"Key":"\"letterness\" of","Fragments":["a"]},{"Key":"my view","Fragments":["though,"]},{"Key":"view though,","Fragments":["always"]},{"Key":"though, always","Fragments":["trimming"]},{"Key":"always trimming","Fragments":["leads"]},{"Key":"trimming leads","Fragments":["to"]},{"Key":"more robust","Fragments":["solution."]},{"Key":" Intent","Fragments":["is"]},{"Key":"Intent is","Fragments":["clear,"]},{"Key":" noise","Fragments":["might"]},{"Key":"noise might","Fragments":["not"]},{"Key":"best parameter","Fragments":["name."]},{"Key":"use re-match","Fragments":["instead"]},{"Key":"re-match instead","Fragments":["of"]},{"Key":"of anchors","Fragments":["to"]},{"Key":"anchors to","Fragments":["match"]},{"Key":"Thanks @gracie","Fragments":["this"]},{"Key":"@gracie this","Fragments":["is"]},{"Key":"first bit","Fragments":["of","of"]},{"Key":"written after","Fragments":["doing"]},{"Key":"after doing","Fragments":["a"]},{"Key":"koans so","Fragments":["the"]},{"Key":" Once","Fragments":["the","again,","I","again","I"]},{"Key":"Once the","Fragments":["not="]},{"Key":"the not=","Fragments":["was"]},{"Key":"not= was","Fragments":["gone"]},{"Key":"was gone","Fragments":["there"]},{"Key":"gone there","Fragments":["didn't"]},{"Key":"there didn't","Fragments":["seem"]},{"Key":"seem any","Fragments":["point"]},{"Key":"any point","Fragments":["in"]},{"Key":"in keeping","Fragments":["the"]},{"Key":"match function","Fragments":["so"]},{"Key":"I dropped","Fragments":["it."]},{"Key":"find ```(=","Fragments":["sentence"]},{"Key":"```(= sentence","Fragments":["(upper-case"]},{"Key":"sentence (upper-case","Fragments":["sentence))```"]},{"Key":"(upper-case sentence))```","Fragments":["a"]},{"Key":"sentence))``` a","Fragments":["little"]},{"Key":"little unclear,","Fragments":["something"]},{"Key":"unclear, something","Fragments":["like"]},{"Key":"like ```(every?","Fragments":["#(or"]},{"Key":"```(every? #(or","Fragments":["(Character/isUpperCase"]},{"Key":"#(or (Character/isUpperCase","Fragments":["%)"]},{"Key":"(Character/isUpperCase %)","Fragments":["(not"]},{"Key":"%) (not","Fragments":["(Character/isLetter"]},{"Key":"(not (Character/isLetter","Fragments":["%))"]},{"Key":"(Character/isLetter %))","Fragments":["sentence))```"]},{"Key":"%)) sentence))```","Fragments":["expresses"]},{"Key":"sentence))``` expresses","Fragments":["the"]},{"Key":"expresses the","Fragments":["intention","intent"]},{"Key":"replace ``has-match?```","Fragments":["by"]},{"Key":"``has-match?``` by","Fragments":["```re-matches```"]},{"Key":"by ```re-matches```","Fragments":["directly"]},{"Key":" Trimming","Fragments":["is"]},{"Key":"Trimming is","Fragments":["not"]},{"Key":"you'd check","Fragments":["with"]},{"Key":"check with","Fragments":["```str/bank?```"]},{"Key":"with ```str/bank?```","Fragments":["instead"]},{"Key":"```str/bank?``` instead","Fragments":["of"]},{"Key":"The else","Fragments":["case"]},{"Key":"else case","Fragments":["captures"]},{"Key":"case captures","Fragments":["the"]},{"Key":"captures the","Fragments":["forceful"]},{"Key":"the forceful","Fragments":["case"]},{"Key":"forceful case","Fragments":["as"]},{"Key":"case as","Fragments":["well,"]},{"Key":"just leave","Fragments":["that","them"]},{"Key":"one out.","Fragments":["Also,"]},{"Key":"out. Also,","Fragments":["condp"]},{"Key":"Also, condp","Fragments":["can"]},{"Key":"condp can","Fragments":["take"]},{"Key":"default expression","Fragments":["(the"]},{"Key":"expression (the","Fragments":["last"]},{"Key":"(the last","Fragments":["one)"]},{"Key":"last one)","Fragments":["without"]},{"Key":"one) without","Fragments":["a"]},{"Key":"predicate to","Fragments":["test","test","avoid"]},{"Key":"test and","Fragments":["that"]},{"Key":"will cover","Fragments":["the"]},{"Key":"case. For","Fragments":["example"]},{"Key":"example `:\u003e","Fragments":[":else"]},{"Key":"`:\u003e :else","Fragments":["\"Whatever.\"`"]},{"Key":":else \"Whatever.\"`","Fragments":["can"]},{"Key":"\"Whatever.\"` can","Fragments":["just"]},{"Key":"Looking good..","Fragments":["But"]},{"Key":"good.. But","Fragments":["there"]},{"Key":"But there","Fragments":["is","are"]},{"Key":"more optimisation","Fragments":["you"]},{"Key":"optimisation you","Fragments":["can"]},{"Key":"make by","Fragments":["changing"]},{"Key":"changing your","Fragments":["regex."]},{"Key":"your regex.","Fragments":["Do"]},{"Key":"regex. Do","Fragments":["you"]},{"Key":"couple more","Fragments":["improvements","expressions"]},{"Key":"more improvements","Fragments":["you"]},{"Key":"improvements you","Fragments":["can"]},{"Key":" Firstly,","Fragments":["in"]},{"Key":"Firstly, in","Fragments":["the"]},{"Key":"the filter-words","Fragments":["function,"]},{"Key":"filter-words function,","Fragments":["there"]},{"Key":"function, there","Fragments":["is"]},{"Key":"an inverse","Fragments":["core"]},{"Key":"inverse core","Fragments":["function"]},{"Key":"to \"filter\"","Fragments":["which"]},{"Key":"\"filter\" which","Fragments":["you"]},{"Key":"look for..","Fragments":["this"]},{"Key":"for.. this","Fragments":["will"]},{"Key":"will eliminate","Fragments":["need"]},{"Key":"eliminate need","Fragments":["for"]},{"Key":" Secondly,","Fragments":["is","when"]},{"Key":"Secondly, is","Fragments":["filter-words"]},{"Key":"is filter-words","Fragments":["necessary"]},{"Key":"filter-words necessary","Fragments":["at"]},{"Key":"Hi and","Fragments":["thanks"]},{"Key":" Revision","Fragments":["#2"]},{"Key":"Revision #2","Fragments":["takes"]},{"Key":"#2 takes","Fragments":["your"]},{"Key":"takes your","Fragments":["remark"]},{"Key":"remark into","Fragments":["account."]},{"Key":"defining `dist`.","Fragments":["Or"]},{"Key":"`dist`. Or","Fragments":["you"]},{"Key":"syntax which","Fragments":["would"]},{"Key":"solved `nucelotide-counts`","Fragments":["using"]},{"Key":"`nucelotide-counts` using","Fragments":["by"]},{"Key":"using by","Fragments":["mapping"]},{"Key":"by mapping","Fragments":["the"]},{"Key":"the valid","Fragments":["dna","dna","input"]},{"Key":"dna markers","Fragments":["and"]},{"Key":"markers and","Fragments":["their"]},{"Key":"and their","Fragments":["counts"]},{"Key":"their counts","Fragments":["into"]},{"Key":"counts into","Fragments":["a"]},{"Key":"a Map.","Fragments":["The"]},{"Key":"Map. The","Fragments":["code"]},{"Key":"code ended","Fragments":["up"]},{"Key":"have here.","Fragments":["I"]},{"Key":"this same","Fragments":["expressiveness"]},{"Key":"same expressiveness","Fragments":["without"]},{"Key":"expressiveness without","Fragments":["a"]},{"Key":"Your `for`","Fragments":["macro"]},{"Key":"`for` macro","Fragments":["use"]},{"Key":"macro use","Fragments":["is"]},{"Key":"perfect for","Fragments":["setting"]},{"Key":"for setting","Fragments":["up"]},{"Key":"setting up","Fragments":["a"]},{"Key":"a simplification","Fragments":["of"]},{"Key":"simplification of","Fragments":["the"]},{"Key":"/ `merge-with`","Fragments":["call."]},{"Key":"The for","Fragments":["returns"]},{"Key":"for returns","Fragments":["stuff"]},{"Key":"returns stuff","Fragments":["like:"]},{"Key":" ([\"apple\"","Fragments":["1]"]},{"Key":"([\"apple\" 1]","Fragments":["[\"artichoke\""]},{"Key":"1] [\"artichoke\"","Fragments":["1]"]},{"Key":"[\"artichoke\" 1]","Fragments":["[\"boat\""]},{"Key":"1] [\"boat\"","Fragments":["2]"]},{"Key":"[\"boat\" 2]","Fragments":["[\"ballerina\""]},{"Key":"2] [\"ballerina\"","Fragments":["2])"]},{"Key":"you're already","Fragments":["using","using"]},{"Key":"using `into","Fragments":["{}`,"]},{"Key":"`into {}`,","Fragments":["so"]},{"Key":"{}`, so","Fragments":["pass"]},{"Key":"so pass","Fragments":["the"]},{"Key":"for in","Fragments":["to"]},{"Key":"the `into`","Fragments":["and"]},{"Key":"`into` and","Fragments":["its"]},{"Key":"its all","Fragments":["done!"]},{"Key":" @dawn,","Fragments":["could"]},{"Key":"@dawn, could","Fragments":["you"]},{"Key":"why atom","Fragments":["being"]},{"Key":"than being","Fragments":["a"]},{"Key":"a value?","Fragments":["Thanks!"]},{"Key":"just fine.","Fragments":["I"]},{"Key":"just wouldn't","Fragments":["have"]},{"Key":"atom inside","Fragments":["a"]},{"Key":"map. An","Fragments":["atom"]},{"Key":"An atom","Fragments":["is"]},{"Key":"hold shared,","Fragments":["mutable"]},{"Key":"mutable value.","Fragments":["A"]},{"Key":"value. A","Fragments":["map"]},{"Key":"A map","Fragments":["is"]},{"Key":"immutable and","Fragments":["mixing"]},{"Key":"and mixing","Fragments":["that"]},{"Key":"mixing that","Fragments":["immutability"]},{"Key":"that immutability","Fragments":["with"]},{"Key":"immutability with","Fragments":["a"]},{"Key":"a mutable","Fragments":["value","var"]},{"Key":"mutable value","Fragments":["seem"]},{"Key":"value seem","Fragments":["like"]},{"Key":"might introduce","Fragments":["some"]},{"Key":"some unintended","Fragments":["consequences."]},{"Key":"a closer","Fragments":["look"]},{"Key":"closer look","Fragments":["at"]},{"Key":"README. The","Fragments":["intent"]},{"Key":"intent is","Fragments":["that","to"]},{"Key":"robot starts","Fragments":["without"]},{"Key":"starts without","Fragments":["a"]},{"Key":"only created","Fragments":["the"]},{"Key":"created the","Fragments":["first"]},{"Key":"time `robot-name`","Fragments":["is"]},{"Key":"is called.","Fragments":["Subsequent"]},{"Key":"called. Subsequent","Fragments":["calls"]},{"Key":"Subsequent calls","Fragments":["to"]},{"Key":"to `robot-name`","Fragments":["will","and"]},{"Key":"`robot-name` will","Fragments":["return"]},{"Key":"value until","Fragments":["`reset-name`"]},{"Key":"until `reset-name`","Fragments":["is"]},{"Key":"`reset-name` is","Fragments":["called","called"]},{"Key":"called when","Fragments":["it"]},{"Key":"becomes null","Fragments":["again."]},{"Key":"tests might","Fragments":["not"]},{"Key":"not capture","Fragments":["all"]},{"Key":"capture all","Fragments":["of"]},{"Key":"that exactly,","Fragments":["but"]},{"Key":"think if","Fragments":["you"]},{"Key":"you implement","Fragments":["it"]},{"Key":"mind, it","Fragments":["might"]},{"Key":"cleaner overall","Fragments":["solution.","solution."]},{"Key":"`cond` only","Fragments":["has"]},{"Key":"only has","Fragments":["one"]},{"Key":"call per","Fragments":["response."]},{"Key":"per response.","Fragments":["I"]},{"Key":"response. I","Fragments":["think"]},{"Key":"named ending","Fragments":["with"]},{"Key":"your cases","Fragments":["are"]},{"Key":"cases are","Fragments":["probably","very"]},{"Key":"too literal","Fragments":["to"]},{"Key":"literal to","Fragments":["the"]},{"Key":"test case.","Fragments":["e.g."]},{"Key":"case. e.g.","Fragments":["`(="]},{"Key":"e.g. `(=","Fragments":["\\4"]},{"Key":"`(= \\4","Fragments":["(first"]},{"Key":"\\4 (first","Fragments":["request))`"]},{"Key":"(first request))`","Fragments":["makes"]},{"Key":"request))` makes","Fragments":["the"]},{"Key":"one test","Fragments":["case"]},{"Key":"case pass,","Fragments":["but"]},{"Key":"but should","Fragments":["probably","be"]},{"Key":"general solution","Fragments":["to","working"]},{"Key":"your Regex","Fragments":["would"]},{"Key":"Regex would","Fragments":["allow"]},{"Key":"the `remove","Fragments":["empty?`."]},{"Key":"`remove empty?`.","Fragments":["Other"]},{"Key":"empty?`. Other","Fragments":["than"]},{"Key":"real good","Fragments":["to"]},{"Key":"String in","Fragments":["Clojure"]},{"Key":"turn them","Fragments":["into"]},{"Key":"write `nucleotide-counts`","Fragments":["using"]},{"Key":"`nucleotide-counts` using","Fragments":["your"]},{"Key":"using your","Fragments":["`count`","`counts`"]},{"Key":"your `count`","Fragments":["method."]},{"Key":"`count` method.","Fragments":["You"]},{"Key":"method. You","Fragments":["might"]},{"Key":"at doing","Fragments":["it"]},{"Key":"`reduce` function","Fragments":["which","that's"]},{"Key":"which wouldn't","Fragments":["need"]},{"Key":"need merge","Fragments":["(but"]},{"Key":"merge (but","Fragments":["might"]},{"Key":"(but might","Fragments":["be"]},{"Key":"Yeah, `Math/pow`","Fragments":["returns"]},{"Key":"`Math/pow` returns","Fragments":["a"]},{"Key":"double instead","Fragments":["of"]},{"Key":"a bigint.","Fragments":["You'd","Then"]},{"Key":"bigint. You'd","Fragments":["need"]},{"Key":"You'd need","Fragments":["to"]},{"Key":"own `square`","Fragments":["function"]},{"Key":"`square` function","Fragments":["a"]},{"Key":"bit differently.","Fragments":["I"]},{"Key":"differently. I","Fragments":["think"]},{"Key":"think trying","Fragments":["that"]},{"Key":"good Clojure","Fragments":["experiment"]},{"Key":"Clojure experiment","Fragments":["to"]},{"Key":" Couple","Fragments":["of"]},{"Key":"Couple of","Fragments":["my"]},{"Key":"(-\u003e\u003e (range","Fragments":["ve","ve","start"]},{"Key":"(range ve","Fragments":["(+","(inc"]},{"Key":"ve (+","Fragments":["1"]},{"Key":" could","Fragments":["be"]},{"Key":"ve (inc","Fragments":["vs)"]},{"Key":"(inc vs)","Fragments":["-1)"]},{"Key":"And should","Fragments":["have"]},{"Key":"also used","Fragments":["`inc`"]},{"Key":"used `inc`","Fragments":["and"]},{"Key":"and `dec`...","Fragments":["my"]},{"Key":"`dec`... my","Fragments":["Clojure's"]},{"Key":"my Clojure's","Fragments":["so"]},{"Key":"Clojure's so","Fragments":["rusty!"]},{"Key":"so rusty!","Fragments":[":D"]},{"Key":"your attempt","Fragments":["to"]},{"Key":"`verse` method,","Fragments":["but","I"]},{"Key":"method, but","Fragments":["in"]},{"Key":"process I","Fragments":["think"]},{"Key":"method more","Fragments":["complicated","readable."]},{"Key":"for `verse`","Fragments":["ends"]},{"Key":"`verse` ends","Fragments":["up"]},{"Key":"being hard","Fragments":["to"]},{"Key":"expressive as","Fragments":["a"]},{"Key":"Your `cond`","Fragments":["is"]},{"Key":"good example","Fragments":["of"]},{"Key":"`case` statement","Fragments":["since"]},{"Key":"statement since","Fragments":["you're"]},{"Key":"just looking","Fragments":["for"]},{"Key":"equality of","Fragments":["an"]},{"Key":"an item.","Fragments":["Also"]},{"Key":"item. Also","Fragments":["maps"]},{"Key":"Also maps","Fragments":["in"]},{"Key":"maps in","Fragments":["Clojure","the"]},{"Key":"would offer","Fragments":["a"]},{"Key":"offer a","Fragments":["different"]},{"Key":"implement `classify-dna`","Fragments":["function."]},{"Key":"`classify-dna` function.","Fragments":["(The"]},{"Key":"function. (The","Fragments":["mappings"]},{"Key":"(The mappings","Fragments":["are"]},{"Key":"mappings are","Fragments":["not"]},{"Key":"right there","Fragments":["either)"]},{"Key":"the \"thread","Fragments":["last\"","first\"","first\""]},{"Key":"\"thread last\"","Fragments":["macro"]},{"Key":"last\" macro","Fragments":["which"]},{"Key":"is `-\u003e\u003e`","Fragments":["instead"]},{"Key":"`-\u003e\u003e` instead","Fragments":["of"]},{"Key":"\"thread first\"","Fragments":["that","macro"]},{"Key":"first\" that","Fragments":["you"]},{"Key":"you used.","Fragments":["That"]},{"Key":"used. That","Fragments":["threads"]},{"Key":"That threads","Fragments":["the"]},{"Key":"threads the","Fragments":["argument"]},{"Key":"argument through","Fragments":["the"]},{"Key":"supplied expressions","Fragments":["as"]},{"Key":"expressions as","Fragments":["the","they"]},{"Key":"to \"DRY\"","Fragments":["up"]},{"Key":"\"DRY\" up","Fragments":["the"]},{"Key":"strings. `0`","Fragments":["and"]},{"Key":"`0` and","Fragments":["`1`"]},{"Key":"and `1`","Fragments":["were"]},{"Key":"`1` were","Fragments":["both"]},{"Key":"were both","Fragments":["special"]},{"Key":"both special","Fragments":["cases"]},{"Key":"special cases","Fragments":["in","like"]},{"Key":"my opinion,","Fragments":["and"]},{"Key":"opinion, and","Fragments":["making"]},{"Key":"to programmatically","Fragments":["build"]},{"Key":"programmatically build","Fragments":["those"]},{"Key":"build those","Fragments":["strings"]},{"Key":"strings seemed","Fragments":["silly"]},{"Key":"seemed silly","Fragments":["and"]},{"Key":"silly and","Fragments":["makes"]},{"Key":"code terribly","Fragments":["inflexible."]},{"Key":"README again.","Fragments":["It"]},{"Key":"again. It","Fragments":["implies"]},{"Key":"It implies","Fragments":["that"]},{"Key":"new robot","Fragments":["shouldn't","name"]},{"Key":"robot shouldn't","Fragments":["have"]},{"Key":"name at","Fragments":["all,","the"]},{"Key":"at all,","Fragments":["and"]},{"Key":"all, and","Fragments":["only"]},{"Key":"only when","Fragments":["you","both"]},{"Key":"call `robot-name`","Fragments":["should"]},{"Key":"`robot-name` should","Fragments":["one"]},{"Key":"should one","Fragments":["be"]},{"Key":"one be","Fragments":["generated."]},{"Key":"be generated.","Fragments":["And"]},{"Key":"generated. And","Fragments":["when"]},{"Key":"And when","Fragments":["`reset-name`"]},{"Key":"when `reset-name`","Fragments":["is"]},{"Key":"called then","Fragments":["name"]},{"Key":"then name","Fragments":["is"]},{"Key":"is nulled","Fragments":["out."]},{"Key":"nulled out.","Fragments":["I"]},{"Key":"out. I","Fragments":["think","probably"]},{"Key":"the features","Fragments":["of"]},{"Key":"of Atoms","Fragments":["(or"]},{"Key":"Atoms (or","Fragments":["Refs)."]},{"Key":"use `repeatedly`","Fragments":["in"]},{"Key":"`repeatedly` in","Fragments":["the"]},{"Key":"the `robot-name-generator`.","Fragments":["Since"]},{"Key":"`robot-name-generator`. Since","Fragments":["you're"]},{"Key":"you're always","Fragments":["just"]},{"Key":"always just","Fragments":["getting"]},{"Key":"first value,","Fragments":["you"]},{"Key":"value, you","Fragments":["can"]},{"Key":"string which","Fragments":["simplifies"]},{"Key":" `(int","Fragments":["\\A)`"]},{"Key":"\\A)` can","Fragments":["be"]},{"Key":"ASCII value","Fragments":["of"]},{"Key":"the A","Fragments":["character."]},{"Key":"A character.","Fragments":["That"]},{"Key":"character. That","Fragments":["might"]},{"Key":"make `letter-generator`","Fragments":["a"]},{"Key":"`letter-generator` a","Fragments":["bit"]},{"Key":"validation function.","Fragments":["Other"]},{"Key":"function. Other","Fragments":["than"]},{"Key":" range","Fragments":["can"]},{"Key":"range can","Fragments":["also"]},{"Key":"an options","Fragments":["3rd"]},{"Key":"options 3rd","Fragments":["argument"]},{"Key":"the *step*.","Fragments":["Using"]},{"Key":"*step*. Using","Fragments":["that"]},{"Key":"Using that","Fragments":["would","will"]},{"Key":"Your nitpicks","Fragments":["all"]},{"Key":"nitpicks all","Fragments":["seem"]},{"Key":"all seem","Fragments":["reasonable"]},{"Key":"seem reasonable","Fragments":["to"]},{"Key":" @lilian","Fragments":["great"]},{"Key":"@lilian great","Fragments":["catch"]},{"Key":"great catch","Fragments":["on"]},{"Key":"on removing","Fragments":["the"]},{"Key":"`seq` call","Fragments":["on"]},{"Key":"explicitly don't","Fragments":["want"]},{"Key":"to incur","Fragments":["the"]},{"Key":"incur the","Fragments":["overhead"]},{"Key":"multiple full","Fragments":["string"]},{"Key":"string scans","Fragments":["for"]},{"Key":"scans for","Fragments":["each"]},{"Key":"each marker","Fragments":["in"]},{"Key":"marker in","Fragments":["`nucleotide-counts`."]},{"Key":"`nucleotide-counts`. `frequencies`","Fragments":["does"]},{"Key":"`frequencies` does","Fragments":["exactly","exactly"]},{"Key":"what i","Fragments":["need."]},{"Key":"i need.","Fragments":["In"]},{"Key":"need. In","Fragments":["hindsight,"]},{"Key":"In hindsight,","Fragments":["though,"]},{"Key":"hindsight, though,","Fragments":["I"]},{"Key":"use `nucleotide-counts`","Fragments":["to"]},{"Key":"`nucleotide-counts` to","Fragments":["implement"]},{"Key":"implement `count`;","Fragments":["getting"]},{"Key":"`count`; getting","Fragments":["the"]},{"Key":"of reuse","Fragments":["without"]},{"Key":"reuse without","Fragments":["the"]},{"Key":"performance issue","Fragments":["of"]},{"Key":" @enola,","Fragments":["excellent"]},{"Key":"@enola, excellent","Fragments":["explanation,"]},{"Key":"excellent explanation,","Fragments":["thank"]},{"Key":"explanation, thank","Fragments":["you!"]},{"Key":"that bit","Fragments":["about"]},{"Key":"about robot","Fragments":["starting"]},{"Key":"robot starting","Fragments":["without"]},{"Key":"starting without","Fragments":["a"]},{"Key":" Got","Fragments":["carried"]},{"Key":"Got carried","Fragments":["away"]},{"Key":"carried away","Fragments":["by"]},{"Key":"away by","Fragments":["the"]},{"Key":"tests that","Fragments":["are"]},{"Key":"are ambiguous","Fragments":["as"]},{"Key":"ambiguous as","Fragments":["you"]},{"Key":"also pointed","Fragments":["out."]},{"Key":"for brining","Fragments":["my"]},{"Key":"brining my","Fragments":["attention"]},{"Key":"my attention","Fragments":["to"]},{"Key":"README. It's","Fragments":["interesting"]},{"Key":"It's interesting","Fragments":["that","that"]},{"Key":"interesting that","Fragments":["the","you"]},{"Key":"don't drive","Fragments":["the"]},{"Key":"drive the","Fragments":["behavior","full"]},{"Key":"the behavior","Fragments":["implied","of"]},{"Key":"behavior implied","Fragments":["in"]},{"Key":"implied in","Fragments":["the"]},{"Key":"the README...","Fragments":["perhaps"]},{"Key":"README... perhaps","Fragments":["I"]},{"Key":"perhaps I","Fragments":["have"]},{"Key":"some nits","Fragments":["to"]},{"Key":"pick with","Fragments":["the"]},{"Key":"as focused","Fragments":["on"]},{"Key":"focused on","Fragments":["the","something"]},{"Key":"the generators","Fragments":["as"]},{"Key":"generators as","Fragments":["I"]},{"Key":"was on","Fragments":["the"]},{"Key":"atom usage.","Fragments":["Will"]},{"Key":"usage. Will","Fragments":["have"]},{"Key":"Will have","Fragments":["to"]},{"Key":"rewrite to","Fragments":["capture"]},{"Key":"the requirements.","Fragments":[":)"]},{"Key":" @lura","Fragments":["Second"]},{"Key":"@lura Second","Fragments":["iteration"]},{"Key":"Second iteration","Fragments":["addresses"]},{"Key":"iteration addresses","Fragments":["all"]},{"Key":"addresses all","Fragments":["of"]},{"Key":"your feedback.","Fragments":[":)"]},{"Key":" @mary","Fragments":["I"]},{"Key":"@mary I","Fragments":["tried"]},{"Key":"tried out","Fragments":["both"]},{"Key":"out both","Fragments":["of"]},{"Key":"those options.","Fragments":["I"]},{"Key":"options. I","Fragments":["don't"]},{"Key":"multiple parameters","Fragments":["(ie."]},{"Key":"parameters (ie.","Fragments":["`%1`"]},{"Key":"(ie. `%1`","Fragments":["`%2`)."]},{"Key":"`%1` `%2`).","Fragments":["Although"]},{"Key":"`%2`). Although","Fragments":["on"]},{"Key":"Although on","Fragments":["4clojure"]},{"Key":"on 4clojure","Fragments":["I"]},{"Key":"4clojure I","Fragments":["would"]},{"Key":"would totally","Fragments":["rock"]},{"Key":"totally rock","Fragments":["the"]},{"Key":"rock the","Fragments":["anonymous"]},{"Key":"the golf","Fragments":["qualities."]},{"Key":"golf qualities.","Fragments":["`letfn`"]},{"Key":"qualities. `letfn`","Fragments":["just"]},{"Key":"`letfn` just","Fragments":["seemed"]},{"Key":"like syntactic","Fragments":["sugar"]},{"Key":"syntactic sugar","Fragments":["to"]},{"Key":"sugar to","Fragments":["me."]},{"Key":"me. It","Fragments":["didn't"]},{"Key":"more expressive,","Fragments":["and","so"]},{"Key":"expressive, and","Fragments":["it"]},{"Key":"do `remove-consecutive-space`,","Fragments":["`remove-special-char`,"]},{"Key":"`remove-consecutive-space`, `remove-special-char`,","Fragments":["and"]},{"Key":"`remove-special-char`, and","Fragments":["`split-by-space`"]},{"Key":"and `split-by-space`","Fragments":["in"]},{"Key":"`split-by-space` in","Fragments":["one"]},{"Key":"step without","Fragments":["loosing"]},{"Key":"without loosing","Fragments":["meaning?"]},{"Key":"good with","Fragments":["minor"]},{"Key":"with minor","Fragments":["remarks:"]},{"Key":"* the","Fragments":["3","regexps"]},{"Key":"the 3","Fragments":["conditions","4"]},{"Key":"3 conditions","Fragments":["are"]},{"Key":"not at","Fragments":["the"]},{"Key":"same abstraction","Fragments":["level"]},{"Key":"abstraction level","Fragments":["(first"]},{"Key":"level (first","Fragments":["one"]},{"Key":"(first one","Fragments":["versus"]},{"Key":"one versus","Fragments":["2"]},{"Key":"versus 2","Fragments":["and"]},{"Key":"2 and","Fragments":["3"]},{"Key":"and 3","Fragments":["that"]},{"Key":"3 that","Fragments":["are"]},{"Key":"are proper","Fragments":["functions)"]},{"Key":"* is-xxx?","Fragments":["I"]},{"Key":"is-xxx? I","Fragments":["think"]},{"Key":"think is-","Fragments":["is"]},{"Key":"is- is","Fragments":["superfluous"]},{"Key":"the regexps","Fragments":["can"]},{"Key":"regexps can","Fragments":["be"]},{"Key":"My 2","Fragments":["cents."]},{"Key":"the isYelling","Fragments":["test"]},{"Key":"isYelling test","Fragments":["in"]},{"Key":"in isQuestion","Fragments":["by"]},{"Key":"isQuestion by","Fragments":["reordering"]},{"Key":"by reordering","Fragments":["the"]},{"Key":"reordering the","Fragments":["conds"]},{"Key":"the conds","Fragments":["in"]},{"Key":"conds in","Fragments":["response-for."]},{"Key":"(question? more","Fragments":["idiomatic"]},{"Key":"simpler from","Fragments":["the"]},{"Key":"the perspective","Fragments":["of"]},{"Key":"perspective of","Fragments":["what"]},{"Key":"to *keep*","Fragments":["in"]},{"Key":"*keep* in","Fragments":["the"]},{"Key":"the string,","Fragments":["rather","for","but"]},{"Key":"string, rather","Fragments":["than"]},{"Key":" @darien","Fragments":["@darien"]},{"Key":"@darien @darien","Fragments":["I"]},{"Key":"@darien I","Fragments":["will"]},{"Key":"be trying","Fragments":["to","to"]},{"Key":"suggestion to","Fragments":["keep"]},{"Key":"keep what","Fragments":["needs"]},{"Key":"what needs","Fragments":["in"]},{"Key":"needs in","Fragments":["the"]},{"Key":"As your","Fragments":["opinion"]},{"Key":"make my","Fragments":["code","own"]},{"Key":"of string/blank?","Fragments":["on"]},{"Key":"string/blank? on","Fragments":["line"]},{"Key":"line 11.","Fragments":["That"]},{"Key":"11. That","Fragments":["seems"]},{"Key":"That seems","Fragments":["simpler","like"]},{"Key":"seems simpler","Fragments":["than","to"]},{"Key":"regex there.","Fragments":["I"]},{"Key":"to familiarize","Fragments":["myself"]},{"Key":"familiarize myself","Fragments":["with"]},{"Key":"myself with","Fragments":["more"]},{"Key":" @adaline","Fragments":["I"]},{"Key":"@adaline I","Fragments":["agree"]},{"Key":"will trying","Fragments":["to"]},{"Key":"way not","Fragments":["to"]},{"Key":"the \"case\"","Fragments":["statement"]},{"Key":"\"case\" statement","Fragments":["in",":"]},{"Key":"iteration. As","Fragments":["you"]},{"Key":"can see,","Fragments":["i"]},{"Key":"see, i","Fragments":["used"]},{"Key":"first\" macro","Fragments":["in"]},{"Key":"iteration because","Fragments":["i"]},{"Key":"because i","Fragments":["thougt"]},{"Key":"i thougt","Fragments":["it"]},{"Key":"thougt it","Fragments":["makes"]},{"Key":" there's","Fragments":["probably"]},{"Key":"functional way","Fragments":["do"]},{"Key":"way do","Fragments":["this"]},{"Key":"I see!","Fragments":["Ok,"]},{"Key":"see! Ok,","Fragments":["new"]},{"Key":"Ok, new","Fragments":["version"]},{"Key":"made use","Fragments":["of","of"]},{"Key":"Next I'd","Fragments":["recommend"]},{"Key":"I'd recommend","Fragments":["trying","is","is","is","to"]},{"Key":"recommend trying","Fragments":["to"]},{"Key":"the `pow`","Fragments":["function"]},{"Key":"`pow` function","Fragments":["using"]},{"Key":"of loop/recur.","Fragments":["That"]},{"Key":"loop/recur. That","Fragments":["will"]},{"Key":"another option","Fragments":["that"]},{"Key":"predicate names,","Fragments":["makes"]},{"Key":"names, makes","Fragments":["the"]},{"Key":"`cond` very","Fragments":["expressive."]},{"Key":"I spot","Fragments":["some"]},{"Key":"spot some","Fragments":["duplication"]},{"Key":"some duplication","Fragments":["in","in"]},{"Key":"regexes though.","Fragments":["Also,"]},{"Key":"though. Also,","Fragments":["what's"]},{"Key":"Also, what's","Fragments":["the"]},{"Key":"between `$`","Fragments":["and"]},{"Key":"`$` and","Fragments":["`\\z`"]},{"Key":"and `\\z`","Fragments":["in"]},{"Key":"`\\z` in","Fragments":["this"]},{"Key":"And do","Fragments":["you"]},{"Key":"the regexes,","Fragments":["or"]},{"Key":"regexes, or","Fragments":["is"]},{"Key":"on built-in","Fragments":["functions"]},{"Key":" (could","Fragments":["also"]},{"Key":"(could also","Fragments":["have"]},{"Key":"been written","Fragments":["```"]},{"Key":"written ```","Fragments":["(re-find"]},{"Key":"``` (re-find","Fragments":["#\"\\?$\""]},{"Key":"(re-find #\"\\?$\"","Fragments":["s))```"]},{"Key":"changed ```shout?```","Fragments":["to"]},{"Key":"```shout?``` to","Fragments":["systematically"]},{"Key":"to systematically","Fragments":["use"]},{"Key":"systematically use","Fragments":["regular"]},{"Key":"use regular","Fragments":["expressions.","expressions"]},{"Key":" yes","Fragments":["you"]},{"Key":"yes you","Fragments":["are"]},{"Key":"are correct..","Fragments":["thanks."]},{"Key":"correct.. thanks.","Fragments":["re-submitted"]},{"Key":"were trying","Fragments":["to"]},{"Key":"implement from","Fragments":["scratch,"]},{"Key":"from scratch,","Fragments":["but"]},{"Key":"scratch, but","Fragments":["there"]},{"Key":"clojure.core to","Fragments":["count","do"]},{"Key":"count numbers","Fragments":["of"]},{"Key":"numbers of","Fragments":["things"]},{"Key":"function within","Fragments":["clojure.core"]},{"Key":"within clojure.core","Fragments":["which"]},{"Key":"clojure.core which","Fragments":["can"]},{"Key":"your count","Fragments":["function."]},{"Key":"also remove","Fragments":["the","the"]},{"Key":"for filter-words","Fragments":["\u0026"]},{"Key":"filter-words \u0026","Fragments":["blank?"]},{"Key":"\u0026 blank?","Fragments":["function"]},{"Key":"blank? function","Fragments":["by","http://clojuredocs.org/clojure_core/clojure.string/blank_q","which"]},{"Key":"by choosing","Fragments":["a"]},{"Key":"choosing a","Fragments":["different"]},{"Key":"not create","Fragments":["a"]},{"Key":"for not-blank?,","Fragments":["this"]},{"Key":"not-blank?, this","Fragments":["can"]},{"Key":"be composed","Fragments":["from"]},{"Key":"composed from","Fragments":["core"]},{"Key":"functions alone","Fragments":["(comp"]},{"Key":"alone (comp","Fragments":["not"]},{"Key":"(comp not","Fragments":["blank?)."]},{"Key":"not blank?).","Fragments":["But"]},{"Key":"blank?). But","Fragments":["I"]},{"Key":"different choice","Fragments":["of","of"]},{"Key":"good -","Fragments":["but"]},{"Key":"functions the","Fragments":["sentence"]},{"Key":"sentence is","Fragments":["threaded","forceful","not"]},{"Key":"is threaded","Fragments":["through"]},{"Key":"threaded through","Fragments":["at"]},{"Key":"through at","Fragments":["the"]},{"Key":"Ah yes,","Fragments":["that's"]},{"Key":"simpler -","Fragments":["don't"]},{"Key":"I didnt'","Fragments":["think"]},{"Key":"didnt' think","Fragments":["of"]},{"Key":" look","Fragments":["good!"]},{"Key":"This submissions","Fragments":["differs"]},{"Key":"submissions differs","Fragments":["from"]},{"Key":"differs from","Fragments":["the"]},{"Key":"in indentation","Fragments":["(untabify)."]},{"Key":"considered extending","Fragments":["the"]},{"Key":"extending the","Fragments":["`true-anagram?`","data"]},{"Key":"the `true-anagram?`","Fragments":["with"]},{"Key":"`true-anagram?` with","Fragments":["a"]},{"Key":"a pre-calculated","Fragments":["canonical"]},{"Key":"pre-calculated canonical","Fragments":["version"]},{"Key":"canonical version","Fragments":["of"]},{"Key":"the reference","Fragments":["so"]},{"Key":"reference so","Fragments":["that"]},{"Key":"be calculated","Fragments":["again"]},{"Key":"candidate. I","Fragments":["found"]},{"Key":"it obfuscates","Fragments":["the"]},{"Key":"code, however,","Fragments":["and"]},{"Key":"however, and","Fragments":["of"]},{"Key":"and of","Fragments":["course"]},{"Key":"course does","Fragments":["not"]},{"Key":"a measurable","Fragments":["difference"]},{"Key":"measurable difference","Fragments":["for"]},{"Key":"difference for","Fragments":["the"]},{"Key":"given unit","Fragments":["tests."]},{"Key":"believe `join`","Fragments":["and"]},{"Key":"and `seq`","Fragments":["are"]},{"Key":"`seq` are","Fragments":["unnecessary?"]},{"Key":"Here's my","Fragments":["version"]},{"Key":"my version","Fragments":["avoiding","of","of"]},{"Key":"version avoiding","Fragments":["re-evaluation."]},{"Key":"avoiding re-evaluation.","Fragments":["I"]},{"Key":"re-evaluation. I","Fragments":["find"]},{"Key":"with re-evaluation","Fragments":["much"]},{"Key":"re-evaluation much","Fragments":["clearer."]},{"Key":"to become","Fragments":["a","visible"]},{"Key":"more familiar","Fragments":["with"]},{"Key":"with `clojure.string`","Fragments":["so"]},{"Key":"`clojure.string` so","Fragments":["you"]},{"Key":"call out","Fragments":["to"]},{"Key":"as much.","Fragments":["For"]},{"Key":"much. For","Fragments":["instance"]},{"Key":"(= statement","Fragments":["(.toUpperCase","(upper-case"]},{"Key":"statement (.toUpperCase","Fragments":["statement))"]},{"Key":"(.toUpperCase statement))","Fragments":["-\u003e"]},{"Key":"statement)) -\u003e","Fragments":["(="]},{"Key":"-\u003e (=","Fragments":["statement","\\?"]},{"Key":"statement (upper-case","Fragments":["statement))"]},{"Key":" (.endsWith","Fragments":["statement","message","s"]},{"Key":"(.endsWith statement","Fragments":["\"?\"))"]},{"Key":"statement \"?\"))","Fragments":["-\u003e"]},{"Key":"\"?\")) -\u003e","Fragments":["(="]},{"Key":"solution. Apparently,","Fragments":["good"]},{"Key":"Apparently, good","Fragments":["Ruby"]},{"Key":"good Ruby","Fragments":["is"]},{"Key":"Ruby is","Fragments":["hard"]},{"Key":"is hard","Fragments":["to"]},{"Key":"to disginguish","Fragments":["from"]},{"Key":"disginguish from","Fragments":["good"]},{"Key":"from good","Fragments":["Clojure."]},{"Key":"good Clojure.","Fragments":["I"]},{"Key":"Clojure. I","Fragments":["like","would","updated","had"]},{"Key":"like short","Fragments":["functions"]},{"Key":"short functions","Fragments":["I"]},{"Key":"see here","Fragments":["and"]},{"Key":"and usage","Fragments":["of"]},{"Key":"`clojure.string` where","Fragments":["appropriate."]},{"Key":"where appropriate.","Fragments":["Styllistically,"]},{"Key":"appropriate. Styllistically,","Fragments":["my"]},{"Key":"Styllistically, my","Fragments":["only"]},{"Key":"complaint would","Fragments":["be"]},{"Key":"hanging closing","Fragments":["paren"]},{"Key":"closing paren","Fragments":["in"]},{"Key":"paren in","Fragments":["the"]},{"Key":"line. Now","Fragments":["let's"]},{"Key":"Now let's","Fragments":["take"]},{"Key":"let's take","Fragments":["a"]},{"Key":" Typically,","Fragments":["all"]},{"Key":"Typically, all","Fragments":["`require`s"]},{"Key":"all `require`s","Fragments":["are"]},{"Key":"`require`s are","Fragments":["put"]},{"Key":"It this","Fragments":["case"]},{"Key":"use functions","Fragments":["from","for"]},{"Key":"particular namespace","Fragments":["more"]},{"Key":"namespace more","Fragments":["often"]},{"Key":"often it's","Fragments":["useful"]},{"Key":"it's useful","Fragments":["to","for","if"]},{"Key":"Then `clojure.string/upper-case`","Fragments":["becomes"]},{"Key":"`clojure.string/upper-case` becomes","Fragments":["`string/upper-case`."]},{"Key":"Since all","Fragments":["functions"]},{"Key":"functions apart","Fragments":["from"]},{"Key":"apart from","Fragments":["`response-for`","'all","the"]},{"Key":"from `response-for`","Fragments":["are"]},{"Key":"`response-for` are","Fragments":["implementational"]},{"Key":"are implementational","Fragments":["details"]},{"Key":"implementational details","Fragments":["I'd"]},{"Key":"details I'd","Fragments":["define"]},{"Key":"I'd define","Fragments":["them"]},{"Key":"using `defn-`;","Fragments":["it"]},{"Key":"`defn-`; it","Fragments":["would"]},{"Key":"and inaccessible","Fragments":["in"]},{"Key":"inaccessible in","Fragments":["other"]},{"Key":"other namespaces.","Fragments":["It"]},{"Key":"namespaces. It","Fragments":["helps"]},{"Key":"helps in","Fragments":["communicating"]},{"Key":"in communicating","Fragments":["which"]},{"Key":"communicating which","Fragments":["functions"]},{"Key":"functions form","Fragments":["the"]},{"Key":"form the","Fragments":["public"]},{"Key":"API and","Fragments":["which"]},{"Key":"which do","Fragments":["not."]},{"Key":"used Java","Fragments":["API"]},{"Key":"API in","Fragments":["`question?`"]},{"Key":"and `silence?`.","Fragments":["Both"]},{"Key":"`silence?`. Both","Fragments":["of"]},{"Key":"Both of","Fragments":["them"]},{"Key":"them could","Fragments":["have"]},{"Key":"been easily","Fragments":["implemented"]},{"Key":"easily implemented","Fragments":["just"]},{"Key":"implemented just","Fragments":["in"]},{"Key":"be neither","Fragments":["more"]},{"Key":"neither more","Fragments":["consice"]},{"Key":"more consice","Fragments":["nor"]},{"Key":"consice nor","Fragments":["faster."]},{"Key":"nor faster.","Fragments":["If"]},{"Key":"faster. If","Fragments":["there's"]},{"Key":"If there's","Fragments":["a"]},{"Key":"built-in Java","Fragments":["method"]},{"Key":"which solves","Fragments":["the"]},{"Key":"solves the","Fragments":["problem"]},{"Key":"for which","Fragments":["I'd","the","predicate"]},{"Key":"which I'd","Fragments":["have"]},{"Key":"one-liner in","Fragments":["Clojure"]},{"Key":"Clojure I'd","Fragments":["rather"]},{"Key":"Java API.","Fragments":["The"]},{"Key":"API. The","Fragments":["exception"]},{"Key":"The exception","Fragments":["would"]},{"Key":"exception would","Fragments":["be"]},{"Key":"Clojure would","Fragments":["allow"]},{"Key":"solution working","Fragments":["for"]},{"Key":"working for","Fragments":["a"]},{"Key":"broader scope","Fragments":["of"]},{"Key":"There's one","Fragments":["performant"]},{"Key":"one performant","Fragments":["issue"]},{"Key":"performant issue","Fragments":["to"]},{"Key":"issue to","Fragments":["keep"]},{"Key":"mind though.","Fragments":["Each"]},{"Key":"though. Each","Fragments":["time"]},{"Key":"Each time","Fragments":["`question?`"]},{"Key":"time `question?`","Fragments":["and"]},{"Key":"`silence?` are","Fragments":["invoked"]},{"Key":"are invoked","Fragments":["Clojure"]},{"Key":"invoked Clojure","Fragments":["has"]},{"Key":"perform runtime","Fragments":["check"]},{"Key":"runtime check","Fragments":["of"]},{"Key":"check of","Fragments":["the","`(.isEmpty"]},{"Key":"the object","Fragments":["whose","is"]},{"Key":"object whose","Fragments":["method"]},{"Key":"whose method","Fragments":["is"]},{"Key":"being called.","Fragments":["This"]},{"Key":"called. This","Fragments":["reflection"]},{"Key":"This reflection","Fragments":["comes"]},{"Key":"reflection comes","Fragments":["with"]},{"Key":"comes with","Fragments":["a"]},{"Key":"certain cost.","Fragments":["Usually"]},{"Key":"cost. Usually","Fragments":["it's"]},{"Key":"Usually it's","Fragments":["negligible"]},{"Key":"it's negligible","Fragments":["but"]},{"Key":"negligible but","Fragments":["if"]},{"Key":"a hot","Fragments":["spot"]},{"Key":"hot spot","Fragments":["of"]},{"Key":"spot of","Fragments":["the"]},{"Key":"the application","Fragments":["it"]},{"Key":"application it","Fragments":["might"]},{"Key":"might become","Fragments":["costly."]},{"Key":"become costly.","Fragments":["If"]},{"Key":"costly. If","Fragments":["the"]},{"Key":"problem starts","Fragments":["to"]},{"Key":"become visible","Fragments":["in"]},{"Key":"visible in","Fragments":["a"]},{"Key":"a CPU","Fragments":["profiler"]},{"Key":"CPU profiler","Fragments":["all"]},{"Key":"profiler all","Fragments":["you"]},{"Key":"need is","Fragments":["to"]},{"Key":"simply hint","Fragments":["what"]},{"Key":"hint what","Fragments":["type"]},{"Key":"what type","Fragments":["the"]},{"Key":"type the","Fragments":["object"]},{"Key":"object is","Fragments":["expected"]},{"Key":"is expected","Fragments":["to"]},{"Key":"(defn silence?","Fragments":["[^String"]},{"Key":"silence? [^String","Fragments":["msg]"]},{"Key":"(= (.trim","Fragments":["msg)"]},{"Key":"(.trim msg)","Fragments":["\"\"))"]},{"Key":"make `.trim`","Fragments":["a"]},{"Key":"`.trim` a","Fragments":["cheap"]},{"Key":"a cheap","Fragments":["method"]},{"Key":"cheap method","Fragments":["call,"]},{"Key":"method call,","Fragments":["just"]},{"Key":"call, just","Fragments":["like"]},{"Key":"[x] (Character/isLetter","Fragments":["x))`"]},{"Key":"(Character/isLetter x))`","Fragments":["can"]},{"Key":"x))` can","Fragments":["be"]},{"Key":"simplified using","Fragments":["the","```every?```"]},{"Key":"the `#()`","Fragments":["notation"]},{"Key":"`#()` notation","Fragments":["to"]},{"Key":"to `#(Character/isLetter","Fragments":["%)`."]},{"Key":"`#(Character/isLetter %)`.","Fragments":["It's"]},{"Key":"%)`. It's","Fragments":["a"]},{"Key":"whether `only-numbers?`","Fragments":["is"]},{"Key":"`only-numbers?` is","Fragments":["a","a"]},{"Key":"good name,","Fragments":["since"]},{"Key":"since `(bob/only-numbers?","Fragments":["\""]},{"Key":"`(bob/only-numbers? \"","Fragments":["\")`"]},{"Key":"\" \")`","Fragments":["evaluates"]},{"Key":"\")` evaluates","Fragments":["to"]},{"Key":"to `(empty?","Fragments":["(filter"]},{"Key":"`(empty? (filter","Fragments":["...))`"]},{"Key":"(filter ...))`","Fragments":["you"]},{"Key":"...))` you","Fragments":["might"]},{"Key":"(some ...))`","Fragments":["idiom."]},{"Key":" Additionally,","Fragments":["it"]},{"Key":"Additionally, it","Fragments":["might"]},{"Key":"another condition","Fragments":["to"]},{"Key":"to `shouting?`","Fragments":["to"]},{"Key":"return `true`","Fragments":["only"]},{"Key":"`true` only","Fragments":["for"]},{"Key":"strings containing","Fragments":["a","only"]},{"Key":"a capital","Fragments":["letter."]},{"Key":"capital letter.","Fragments":["Then"]},{"Key":"letter. Then","Fragments":["`(bob/shouting?"]},{"Key":"Then `(bob/shouting?","Fragments":["\".\")`"]},{"Key":"`(bob/shouting? \".\")`","Fragments":["will"]},{"Key":"\".\")` will","Fragments":["not"]},{"Key":"will not","Fragments":["evaluate"]},{"Key":"not evaluate","Fragments":["to"]},{"Key":"evaluate to","Fragments":["`true`"]},{"Key":"to `true`","Fragments":["and"]},{"Key":"`true` and","Fragments":["we'll"]},{"Key":"and we'll","Fragments":["be"]},{"Key":"we'll be","Fragments":["able","able"]},{"Key":"simplify `response-for`","Fragments":["even"]},{"Key":"`response-for` even","Fragments":["more:"]},{"Key":"even more:","Fragments":["by"]},{"Key":"more: by","Fragments":["rearranging"]},{"Key":"by rearranging","Fragments":["and"]},{"Key":"rearranging and","Fragments":["removing"]},{"Key":"removing some","Fragments":["conditions"]},{"Key":"some conditions","Fragments":["in"]},{"Key":"`cond` we'll","Fragments":["be"]},{"Key":"remove `only-numbers?`","Fragments":["and"]},{"Key":"`only-numbers?` and","Fragments":["still"]},{"Key":"still pass","Fragments":["the","the"]},{"Key":"whole test","Fragments":["suite.","is"]},{"Key":"Finally, as","Fragments":["an"]},{"Key":"an excercise","Fragments":["you'd"]},{"Key":"excercise you'd","Fragments":["might"]},{"Key":"you'd might","Fragments":["want"]},{"Key":"string through","Fragments":["the"]},{"Key":"the lens","Fragments":["of"]},{"Key":"lens of","Fragments":["the"]},{"Key":"seq abstraction.","Fragments":["In"]},{"Key":"abstraction. In","Fragments":["such"]},{"Key":"In such","Fragments":["case","cases,"]},{"Key":"such case","Fragments":["you'd"]},{"Key":"you'd treat","Fragments":["the"]},{"Key":"`response-for` argument","Fragments":["as"]},{"Key":"argument as","Fragments":["a","value"]},{"Key":"seq instead","Fragments":["of"]},{"Key":"string. Your","Fragments":["implementation"]},{"Key":"of `only-numbers?`","Fragments":["is"]},{"Key":"this direction.","Fragments":["Other"]},{"Key":"direction. Other","Fragments":["three"]},{"Key":"Other three","Fragments":["predicates"]},{"Key":"predicates you","Fragments":["defined"]},{"Key":"defined shouldn't","Fragments":["be"]},{"Key":"be difficult","Fragments":["to"]},{"Key":"hope this","Fragments":["helps!"]},{"Key":"Great balance","Fragments":["of"]},{"Key":"balance of","Fragments":["concision"]},{"Key":"of concision","Fragments":["and"]},{"Key":"concision and","Fragments":["expressiveness."]},{"Key":"and expressiveness.","Fragments":["My"]},{"Key":"expressiveness. My","Fragments":["only"]},{"Key":"simplify `(first","Fragments":["(string/reverse"]},{"Key":"`(first (string/reverse","Fragments":["s))`"]},{"Key":"(string/reverse s))`","Fragments":["to"]},{"Key":"s))` to","Fragments":["`(last"]},{"Key":" Latest","Fragments":["iteration"]},{"Key":"Latest iteration","Fragments":["took"]},{"Key":"iteration took","Fragments":["made"]},{"Key":"took made","Fragments":["the"]},{"Key":"That was","Fragments":["fun"]},{"Key":"was fun","Fragments":["XD"]},{"Key":"see jumping","Fragments":["off"]},{"Key":"jumping off","Fragments":["the"]},{"Key":"the page","Fragments":["is"]},{"Key":"page is","Fragments":["that"]},{"Key":"a require","Fragments":["at"]},{"Key":"require at","Fragments":["the"]},{"Key":"top such","Fragments":["as:"]},{"Key":" `(:require","Fragments":["[clojure.string"]},{"Key":" then","Fragments":["you"]},{"Key":" `(str/trim`","Fragments":["instead"]},{"Key":"`(str/trim` instead","Fragments":["of"]},{"Key":"long `(clojure.string/\u003cmethod\u003e`","Fragments":["that"]},{"Key":"`(clojure.string/\u003cmethod\u003e` that","Fragments":["is"]},{"Key":"get more","Fragments":["examples","efficient"]},{"Key":"more examples","Fragments":["of"]},{"Key":"`require` usage","Fragments":["here:"]},{"Key":"Your definition","Fragments":["of"]},{"Key":"of `:scalene`","Fragments":["matches"]},{"Key":"`:scalene` matches","Fragments":["the"]},{"Key":"mathematical definition.","Fragments":["Basically,"]},{"Key":"definition. Basically,","Fragments":["it's"]},{"Key":"Basically, it's","Fragments":["any"]},{"Key":"it's any","Fragments":["triangle"]},{"Key":"any triangle","Fragments":["that"]},{"Key":"triangle that","Fragments":["isn't","happens"]},{"Key":"isn't equilateral","Fragments":["or"]},{"Key":"equilateral or","Fragments":["isosceles"]},{"Key":"or isosceles","Fragments":["(all"]},{"Key":"isosceles (all","Fragments":["three"]},{"Key":"(all three","Fragments":["sides"]},{"Key":"three sides","Fragments":["are"]},{"Key":"sides are","Fragments":["different"]},{"Key":"are different","Fragments":["lengths)."]},{"Key":"different lengths).","Fragments":["Since"]},{"Key":"lengths). Since","Fragments":["you"]},{"Key":"have invalid","Fragments":["triangles"]},{"Key":"invalid triangles","Fragments":["covered"]},{"Key":"triangles covered","Fragments":["already,"]},{"Key":"covered already,","Fragments":["you"]},{"Key":"already, you","Fragments":["can"]},{"Key":"clause with","Fragments":["`:scalene`"]},{"Key":"with `:scalene`","Fragments":["and"]},{"Key":"`:scalene` and","Fragments":["be"]},{"Key":"and be","Fragments":["done!","written"]},{"Key":"The scalene","Fragments":["test"]},{"Key":"scalene test","Fragments":["is"]},{"Key":"3 4","Fragments":["5"]},{"Key":"4 5","Fragments":["triangle"]},{"Key":"5 triangle","Fragments":["that"]},{"Key":"that happens","Fragments":["to"]},{"Key":"a right","Fragments":["triangle,"]},{"Key":"right triangle,","Fragments":["one"]},{"Key":"triangle, one","Fragments":["with"]},{"Key":"a 90","Fragments":["degree"]},{"Key":"90 degree","Fragments":["angle."]},{"Key":"degree angle.","Fragments":["But,"]},{"Key":"angle. But,","Fragments":["since"]},{"Key":"But, since","Fragments":["all"]},{"Key":"all three","Fragments":["lengths"]},{"Key":"three lengths","Fragments":["are"]},{"Key":"lengths are","Fragments":["different,"]},{"Key":"are different,","Fragments":["it"]},{"Key":"different, it","Fragments":["happens"]},{"Key":"it happens","Fragments":["to"]},{"Key":"guess all-caps?","Fragments":["can"]},{"Key":"all-caps? can","Fragments":["be"]},{"Key":"done shorter/better,","Fragments":["otherwise"]},{"Key":"shorter/better, otherwise","Fragments":["cond"]},{"Key":"otherwise cond","Fragments":["was"]},{"Key":"obvious fit","Fragments":["for"]},{"Key":"every function,","Fragments":["even"]},{"Key":"function, even","Fragments":["a"]},{"Key":"simple one","Fragments":["such"]},{"Key":"one such","Fragments":["as"]},{"Key":"as blank?","Fragments":["is"]},{"Key":"is wrapped","Fragments":["inside","in"]},{"Key":"wrapped inside","Fragments":["another,"]},{"Key":"inside another,","Fragments":["which"]},{"Key":"another, which","Fragments":["has"]},{"Key":"a meaningful","Fragments":["name,"]},{"Key":"meaningful name,","Fragments":["describing"]},{"Key":"name, describing","Fragments":["exactly"]},{"Key":"describing exactly","Fragments":["what"]},{"Key":"function checks.","Fragments":["I"]},{"Key":"checks. I","Fragments":["didn't"]},{"Key":"that way,","Fragments":["but"]},{"Key":"way, but","Fragments":["I'll"]},{"Key":"I'll use","Fragments":["this"]},{"Key":"style surely","Fragments":["later."]},{"Key":"surely later.","Fragments":["The"]},{"Key":"later. The","Fragments":["code"]},{"Key":"code becomes","Fragments":["much"]},{"Key":"becomes much","Fragments":["more"]},{"Key":"The work","Fragments":["your"]},{"Key":"work your","Fragments":["doing"]},{"Key":"your doing","Fragments":["with"]},{"Key":"doing with","Fragments":["the"]},{"Key":"following snippet","Fragments":["can"]},{"Key":"snippet can","Fragments":["be"]},{"Key":"be tightened","Fragments":["up."]},{"Key":"(split string1","Fragments":["#\"\")"]},{"Key":"(split string2","Fragments":["#\"\"))"]},{"Key":" (partition","Fragments":["2)","2)"]},{"Key":"the splits,","Fragments":["since"]},{"Key":"splits, since","Fragments":["Strings"]},{"Key":"(-\u003e\u003e (interleave","Fragments":["string1"]},{"Key":"(interleave string1","Fragments":["string2)"]},{"Key":"can leverage","Fragments":["that"]},{"Key":"leverage that","Fragments":["by"]},{"Key":"by exploring","Fragments":["the"]},{"Key":"exploring the","Fragments":["multi-collection"]},{"Key":"multi-collection calls","Fragments":["to"]},{"Key":"to [`map`](http://clojuredocs.org/clojure_core/clojure.core/map)","Fragments":["combined"]},{"Key":"[`map`](http://clojuredocs.org/clojure_core/clojure.core/map) combined","Fragments":["with"]},{"Key":" `matching?`","Fragments":["can"]},{"Key":"`matching?` can","Fragments":["use"]},{"Key":"destructuring to","Fragments":["pick"]},{"Key":"pick apart","Fragments":["the"]},{"Key":"the partition","Fragments":["making"]},{"Key":"partition making","Fragments":["it"]},{"Key":"(defn matching?","Fragments":["[[char1"]},{"Key":"matching? [[char1","Fragments":["char2]]"]},{"Key":"(= char1","Fragments":["char2))"]},{"Key":"of `number`","Fragments":["is","more"]},{"Key":"`number` is","Fragments":["nothing"]},{"Key":"nothing but","Fragments":["a"]},{"Key":"to `convert_number`.","Fragments":["I'd"]},{"Key":"`convert_number`. I'd","Fragments":["just"]},{"Key":"I'd just","Fragments":["have","filter:","test"]},{"Key":"since splitting","Fragments":["them"]},{"Key":"splitting them","Fragments":["isn't","out"]},{"Key":"them isn't","Fragments":["getting"]},{"Key":"isn't getting","Fragments":["you"]},{"Key":"getting you","Fragments":["anything."]},{"Key":"your let","Fragments":["on"]},{"Key":"let on","Fragments":["line"]},{"Key":"15 has","Fragments":["a"]},{"Key":"to only_digit.","Fragments":["Then"]},{"Key":"only_digit. Then","Fragments":["you"]},{"Key":"again on","Fragments":["line"]},{"Key":"line 24.","Fragments":["In","I"]},{"Key":"24. In","Fragments":["addition,"]},{"Key":"addition, number_length","Fragments":["calls"]},{"Key":"number_length calls","Fragments":["only_digit."]},{"Key":"calls only_digit.","Fragments":["You"]},{"Key":"only_digit. You","Fragments":["have"]},{"Key":"already sanitized","Fragments":["the"]},{"Key":"sanitized the","Fragments":["input,"]},{"Key":"to reapply","Fragments":["so"]},{"Key":"reapply so","Fragments":["often."]},{"Key":"same principle","Fragments":["applies"]},{"Key":"principle applies","Fragments":["to"]},{"Key":"applies to","Fragments":["`pretty-print`.","strings!"]},{"Key":"to `pretty-print`.","Fragments":["Use"]},{"Key":"`pretty-print`. Use","Fragments":["a"]},{"Key":"Use a","Fragments":["let"]},{"Key":"the `convert_number`","Fragments":["and"]},{"Key":"`convert_number` and","Fragments":["use"]},{"Key":"that value","Fragments":["in"]},{"Key":"understand `drop_and_show`.","Fragments":["I"]},{"Key":"`drop_and_show`. I","Fragments":["expected"]},{"Key":"expected the","Fragments":["`drop`"]},{"Key":"the `drop`","Fragments":["and"]},{"Key":"`drop` and","Fragments":["`take`"]},{"Key":"and `take`","Fragments":["to"]},{"Key":"`take` to","Fragments":["be"]},{"Key":"be switched.","Fragments":["Check"]},{"Key":"switched. Check","Fragments":["out"]},{"Key":"(defn- drop_and_show","Fragments":["[begin"]},{"Key":"drop_and_show [begin","Fragments":["end"]},{"Key":"[begin end","Fragments":["number]"]},{"Key":"(-\u003e\u003e number","Fragments":["(drop"]},{"Key":"number (drop","Fragments":["begin)"]},{"Key":"(drop begin)","Fragments":["(take"]},{"Key":"begin) (take","Fragments":["end)"]},{"Key":"(take end)","Fragments":["str/join))"]},{"Key":"will drive","Fragments":["changes"]},{"Key":"drive changes","Fragments":["to"]},{"Key":"changes to","Fragments":["your","the","the"]},{"Key":"but picking","Fragments":["out"]},{"Key":"picking out","Fragments":["the"]},{"Key":"the area","Fragments":["code"]},{"Key":"area code","Fragments":["looks"]},{"Key":"like \"drop","Fragments":["0"]},{"Key":"\"drop 0","Fragments":["then"]},{"Key":"0 then","Fragments":["take"]},{"Key":"then take","Fragments":["3","3","4"]},{"Key":"take 3","Fragments":["characters\".","characters\""]},{"Key":"3 characters\".","Fragments":["Same"]},{"Key":"characters\". Same","Fragments":["with"]},{"Key":"Same with","Fragments":["the"]},{"Key":"the rest,","Fragments":["\"drop"]},{"Key":"rest, \"drop","Fragments":["3"]},{"Key":"\"drop 3","Fragments":["then"]},{"Key":"3 then","Fragments":["take"]},{"Key":"3 characters\"","Fragments":["and"]},{"Key":"characters\" and","Fragments":["\"drop"]},{"Key":"and \"drop","Fragments":["6"]},{"Key":"\"drop 6","Fragments":["then"]},{"Key":"6 then","Fragments":["take"]},{"Key":"take 4","Fragments":["characters\"."]},{"Key":"4 characters\".","Fragments":["But"]},{"Key":"characters\". But","Fragments":["this"]},{"Key":"this ordering","Fragments":["may"]},{"Key":"ordering may","Fragments":["be"]},{"Key":"(-\u003e\u003e (convert_number","Fragments":["raw_string)"]},{"Key":" (drop_and_show","Fragments":["0","3","6"]},{"Key":"(drop_and_show 0","Fragments":["3)))","3"]},{"Key":" (format","Fragments":["\"(%s)"]},{"Key":"(format \"(%s)","Fragments":["%s-%s\""]},{"Key":"\"(%s) %s-%s\"","Fragments":["(drop_and_show"]},{"Key":"%s-%s\" (drop_and_show","Fragments":["0"]},{"Key":"0 3","Fragments":["(convert_number"]},{"Key":"3 (convert_number","Fragments":["phone_number))","phone_number))"]},{"Key":"(drop_and_show 3","Fragments":["3"]},{"Key":"3 3","Fragments":["(convert_number"]},{"Key":"(drop_and_show 6","Fragments":["4"]},{"Key":"6 4","Fragments":["(convert_number"]},{"Key":"4 (convert_number","Fragments":["phone_number))))"]},{"Key":"Oh, neat!","Fragments":["That"]},{"Key":"neat! That","Fragments":["is"]},{"Key":"definitely simpler","Fragments":["then."]},{"Key":"simpler then.","Fragments":[":)"]},{"Key":"For fun,","Fragments":["try"]},{"Key":"fun, try","Fragments":["this"]},{"Key":"try this","Fragments":["without"]},{"Key":"to `char-array`.","Fragments":["Java"]},{"Key":"`char-array`. Java","Fragments":["[strings](http://clojuredocs.org/clojure_core/clojure.core/fn)"]},{"Key":"Java [strings](http://clojuredocs.org/clojure_core/clojure.core/fn)","Fragments":["implement"]},{"Key":"[strings](http://clojuredocs.org/clojure_core/clojure.core/fn) implement","Fragments":["the"]},{"Key":"the CharSequence","Fragments":["Interface"]},{"Key":"CharSequence Interface","Fragments":["and"]},{"Key":"Interface and","Fragments":["seq-able."]},{"Key":"Your use","Fragments":["of"]},{"Key":"a full-on","Fragments":["[`anonymous"]},{"Key":"full-on [`anonymous","Fragments":["function`](http://clojuredocs.org/clojure_core/clojure.core/fn)"]},{"Key":"[`anonymous function`](http://clojuredocs.org/clojure_core/clojure.core/fn)","Fragments":["to"]},{"Key":"function`](http://clojuredocs.org/clojure_core/clojure.core/fn) to","Fragments":["support"]},{"Key":"support destructuring","Fragments":["is"]},{"Key":"in expressive","Fragments":["code,"]},{"Key":"expressive code,","Fragments":["have"]},{"Key":"code, have","Fragments":["a"]},{"Key":"a fantastic","Fragments":["book"]},{"Key":"fantastic book","Fragments":["IMHO."]},{"Key":"using actual","Fragments":["`:pre`"]},{"Key":"actual `:pre`","Fragments":["conditions"]},{"Key":"`:pre` conditions","Fragments":["is","(DBC)"]},{"Key":"more clojuresque.","Fragments":["Unfortunately"]},{"Key":"clojuresque. Unfortunately","Fragments":["that"]},{"Key":"Unfortunately that","Fragments":["doesn't"]},{"Key":"doesn't produce","Fragments":["an"]},{"Key":"produce an","Fragments":["`AssertionException`,"]},{"Key":"an `AssertionException`,","Fragments":["but"]},{"Key":"`AssertionException`, but","Fragments":["`AssertionError`,"]},{"Key":"but `AssertionError`,","Fragments":["and"]},{"Key":"`AssertionError`, and","Fragments":["we"]},{"Key":"can't add","Fragments":["messages"]},{"Key":"add messages","Fragments":["to"]},{"Key":"messages to","Fragments":["preconditions."]},{"Key":" (deftest","Fragments":["validates-nucleotides"]},{"Key":" (is","Fragments":["(thrown?"]},{"Key":"(is (thrown?","Fragments":["AssertionError"]},{"Key":"(thrown? AssertionError","Fragments":["(dna/count-one-nucleotide"]},{"Key":"AssertionError (dna/count-one-nucleotide","Fragments":["\\X"]},{"Key":"(dna/count-one-nucleotide \\X","Fragments":["\"GACT\"))))"]},{"Key":"Very minor,","Fragments":["guessing"]},{"Key":"minor, guessing","Fragments":["you"]},{"Key":"guessing you","Fragments":["left","can"]},{"Key":"you left","Fragments":["it","around"]},{"Key":"left it","Fragments":["in","in"]},{"Key":"in by","Fragments":["accident,"]},{"Key":"by accident,","Fragments":["but"]},{"Key":"accident, but","Fragments":["you"]},{"Key":"define dna-re-pattern","Fragments":["and"]},{"Key":"dna-re-pattern and","Fragments":["don't"]},{"Key":" Whoops...","Fragments":["didn't"]},{"Key":"Whoops... didn't","Fragments":["see"]},{"Key":"Yes, all","Fragments":["tests"]},{"Key":"all tests","Fragments":["pass."]},{"Key":" `yell?`","Fragments":["will"]},{"Key":"`yell?` will","Fragments":["also"]},{"Key":"will also","Fragments":["be"]},{"Key":"strings or","Fragments":["strings"]},{"Key":"or strings","Fragments":["containing"]},{"Key":"containing only","Fragments":["non-alphabetic"]},{"Key":"only non-alphabetic","Fragments":["characters."]},{"Key":"non-alphabetic characters.","Fragments":["Tests"]},{"Key":"characters. Tests","Fragments":["are"]},{"Key":"Tests are","Fragments":["probably"]},{"Key":"probably flawed","Fragments":["in"]},{"Key":"flawed in","Fragments":["that"]},{"Key":"this finds","Fragments":["the"]},{"Key":"finds the","Fragments":["complement"]},{"Key":"the complement","Fragments":["of"]},{"Key":"complement of","Fragments":["the"]},{"Key":"DNA sequence,","Fragments":["C-\u003eG,"]},{"Key":"sequence, C-\u003eG,","Fragments":["T-\u003eA,"]},{"Key":"C-\u003eG, T-\u003eA,","Fragments":["etc."]},{"Key":"T-\u003eA, etc.","Fragments":["Have"]},{"Key":"etc. Have","Fragments":["you"]},{"Key":"tests against","Fragments":["it?"]},{"Key":"could normalize","Fragments":["(convert"]},{"Key":"normalize (convert","Fragments":["to"]},{"Key":"(convert to","Fragments":["uppercase)"]},{"Key":"to uppercase)","Fragments":["the"]},{"Key":"uppercase) the","Fragments":["DNA"]},{"Key":"DNA strand","Fragments":["in","you've"]},{"Key":"strand in","Fragments":["`to-rna`"]},{"Key":"in `to-rna`","Fragments":["so"]},{"Key":"`to-rna` so","Fragments":["that"]},{"Key":"function wouldn't","Fragments":["be"]},{"Key":"have broken","Fragments":["up"]},{"Key":"broken up","Fragments":["into"]},{"Key":"smaller meaningful","Fragments":["functions,"]},{"Key":"meaningful functions,","Fragments":["they"]},{"Key":"functions, they","Fragments":["feel"]},{"Key":"they feel","Fragments":["a"]},{"Key":"feel a","Fragments":["nice"]},{"Key":"nice level","Fragments":["of"]},{"Key":"few idiomatic","Fragments":["suggestions."]},{"Key":"idiomatic suggestions.","Fragments":["When"]},{"Key":"suggestions. When","Fragments":["threading,"]},{"Key":"When threading,","Fragments":["on"]},{"Key":"threading, on","Fragments":["line"]},{"Key":"line 5,","Fragments":["I","could"]},{"Key":"5, I","Fragments":["would"]},{"Key":"put each","Fragments":["section"]},{"Key":"each section","Fragments":["on"]},{"Key":"section on","Fragments":["a","for"]},{"Key":"Also on","Fragments":["line"]},{"Key":"19 a","Fragments":["more"]},{"Key":"map from","Fragments":["list","an","`sort`,","actual","char"]},{"Key":"from list","Fragments":["of"]},{"Key":"vectors is","Fragments":["(into"]},{"Key":"is (into","Fragments":["{}"]},{"Key":"(into {}","Fragments":["'([:a"]},{"Key":"{} '([:a","Fragments":["1]"]},{"Key":"'([:a 1]","Fragments":["[:b"]},{"Key":"1] [:b","Fragments":["2]"]},{"Key":"[:b 2]","Fragments":["[:c"]},{"Key":"2] [:c","Fragments":["3]))"]},{"Key":"function called","Fragments":["frequencies.","\"evenly-divisible?\"","only-numbers?","`keys`"]},{"Key":"Also, with","Fragments":["a"]},{"Key":"your split..","Fragments":["you"]},{"Key":"split.. you","Fragments":["could"]},{"Key":"could remove","Fragments":["the","some","some"]},{"Key":"nice code","Fragments":["overall,"]},{"Key":"code overall,","Fragments":["with"]},{"Key":"overall, with","Fragments":["a"]},{"Key":"clear structure","Fragments":["and"]},{"Key":"and good","Fragments":["readability.","code"]},{"Key":"good readability.","Fragments":["I"]},{"Key":"of nits","Fragments":["to","to"]},{"Key":"pick as","Fragments":["far"]},{"Key":"as Clojure","Fragments":["idioms","being"]},{"Key":"Clojure idioms","Fragments":["go:"]},{"Key":"1. Clojure","Fragments":["uses"]},{"Key":"uses \"kebab-case\"","Fragments":["rather"]},{"Key":"\"kebab-case\" rather","Fragments":["than"]},{"Key":"2. Hash","Fragments":["sets"]},{"Key":"Hash sets","Fragments":["implement"]},{"Key":"sets implement","Fragments":["IFn"]},{"Key":"implement IFn","Fragments":["(i.e.,"]},{"Key":"IFn (i.e.,","Fragments":["you"]},{"Key":"(i.e., you","Fragments":["can"]},{"Key":"call one","Fragments":["as"]},{"Key":"one as","Fragments":["a"]},{"Key":"a function),","Fragments":["so"]},{"Key":"function), so","Fragments":["you"]},{"Key":"call `contains?`","Fragments":["on"]},{"Key":"`contains?` on","Fragments":["them."]},{"Key":"3. Although","Fragments":["your","the"]},{"Key":"quite elegant,","Fragments":["you"]},{"Key":"elegant, you","Fragments":["should"]},{"Key":"out clojure.core's","Fragments":["`frequencies`"]},{"Key":"clojure.core's `frequencies`","Fragments":["function."]},{"Key":" Lower-case","Fragments":["string"]},{"Key":"Lower-case string","Fragments":["before"]},{"Key":"before tokenizing","Fragments":["to"]},{"Key":"tokenizing to","Fragments":["avoid"]},{"Key":"avoid mapping","Fragments":["`lower-case`"]},{"Key":"`lower-case` on","Fragments":["each"]},{"Key":"found it!","Fragments":["It's"]},{"Key":"it! It's","Fragments":["`frequencies`,"]},{"Key":"It's `frequencies`,","Fragments":["isn't"]},{"Key":"`frequencies`, isn't","Fragments":["it?"]},{"Key":"isn't it?","Fragments":["I"]},{"Key":"it? I","Fragments":["submitted","sometimes"]},{"Key":"submitted updated","Fragments":["code"]},{"Key":"the pointer.","Fragments":["I've"]},{"Key":"pointer. I've","Fragments":["changed"]},{"Key":"regex. It","Fragments":["made"]},{"Key":" Removes","Fragments":["contain?"]},{"Key":"Removes contain?","Fragments":["since"]},{"Key":"contain? since","Fragments":["set"]},{"Key":"since set","Fragments":["can","is"]},{"Key":"Checking if","Fragments":["a"]},{"Key":"given nucleotide","Fragments":["is"]},{"Key":"in `dna/count`","Fragments":["could"]},{"Key":"`dna/count` could","Fragments":["be"]},{"Key":"is present","Fragments":["in","in"]},{"Key":"nucleotides using","Fragments":["`contains?`."]},{"Key":"Have map","Fragments":["return"]},{"Key":"map return","Fragments":["a"]},{"Key":"of numbers:","Fragments":["zeros"]},{"Key":"numbers: zeros","Fragments":["if"]},{"Key":"zeros if","Fragments":["the"]},{"Key":"the items","Fragments":["match"]},{"Key":"items match","Fragments":["or"]},{"Key":"match or","Fragments":["one"]},{"Key":"one if","Fragments":["they"]},{"Key":"they differ","Fragments":["then"]},{"Key":"differ then","Fragments":["sum"]},{"Key":"then sum","Fragments":["with"]},{"Key":"sum with","Fragments":["reduce"]},{"Key":"consistent approach","Fragments":["of"]},{"Key":"of parsing","Fragments":["then","a"]},{"Key":"parsing then","Fragments":["functions"]},{"Key":"then functions","Fragments":["that"]},{"Key":"that operate","Fragments":["on"]},{"Key":"operate on","Fragments":["the"]},{"Key":"in `sanitize`","Fragments":["could"]},{"Key":"`sanitize` could","Fragments":["be"]},{"Key":"Really like","Fragments":["the","your"]},{"Key":"the destructuring","Fragments":["in"]},{"Key":"in `parse`","Fragments":["to"]},{"Key":"`parse` to","Fragments":["avoid"]},{"Key":"`seq` returned","Fragments":["by"]},{"Key":"returned by","Fragments":["`re-find`,","the","valid-dna"]},{"Key":"by `re-find`,","Fragments":["I've"]},{"Key":"`re-find`, I've","Fragments":["updated"]},{"Key":"updated [my","Fragments":["submission](http://exercism.io/submissions/92e558c0412c959be9e7d896)"]},{"Key":"[my submission](http://exercism.io/submissions/92e558c0412c959be9e7d896)","Fragments":["to"]},{"Key":"submission](http://exercism.io/submissions/92e558c0412c959be9e7d896) to","Fragments":["use"]},{"Key":"same technique","Fragments":["in"]},{"Key":"technique in","Fragments":["`pretty-print`."]},{"Key":"with minimal","Fragments":["calls"]},{"Key":"minimal calls","Fragments":["to"]},{"Key":"Java (will","Fragments":["replace"]},{"Key":"(will replace","Fragments":["the"]},{"Key":"`.endsWith` with","Fragments":["something","Clojure"]},{"Key":"more clojure-esk","Fragments":["in"]},{"Key":"clojure-esk in","Fragments":["the"]},{"Key":" `shouting?`","Fragments":["looks"]},{"Key":"`shouting?` looks","Fragments":["overly"]},{"Key":"looks overly","Fragments":["complicated"]},{"Key":"overly complicated","Fragments":["to"]},{"Key":"me right","Fragments":["now,"]},{"Key":"right now,","Fragments":["but","is"]},{"Key":"works. Ship","Fragments":["it."]},{"Key":"My general","Fragments":["principal"]},{"Key":"general principal","Fragments":["is"]},{"Key":"principal is","Fragments":["to"]},{"Key":"have `digits`","Fragments":["parse"]},{"Key":"`digits` parse","Fragments":["the"]},{"Key":"`seq` of","Fragments":["the"]},{"Key":"the digits","Fragments":["then"]},{"Key":"digits then","Fragments":["have"]},{"Key":"then have","Fragments":["the"]},{"Key":"functions format","Fragments":["for"]},{"Key":"format for","Fragments":["display."]},{"Key":"version cleans","Fragments":["up"]},{"Key":"up `pretty-print`","Fragments":["a"]},{"Key":"`pretty-print` a","Fragments":["little"]},{"Key":"using format","Fragments":["instead"]},{"Key":"format instead","Fragments":["of"]},{"Key":"of manual","Fragments":["string"]},{"Key":"manual string","Fragments":["concatenation."]},{"Key":"with `pretty-print`","Fragments":["using"]},{"Key":"`pretty-print` using","Fragments":["format,"]},{"Key":"using format,","Fragments":["I've"]},{"Key":"format, I've","Fragments":["updated"]},{"Key":"my [latest","Fragments":["submission](http://exercism.io/submissions/07ae06a257e8d88d693c60dd)"]},{"Key":"[latest submission](http://exercism.io/submissions/07ae06a257e8d88d693c60dd)","Fragments":["along"]},{"Key":"submission](http://exercism.io/submissions/07ae06a257e8d88d693c60dd) along","Fragments":["similar"]},{"Key":"along similar","Fragments":["lines."]},{"Key":"The duplicate","Fragments":["calls"]},{"Key":"duplicate calls","Fragments":["to"]},{"Key":"to `count`","Fragments":["in"]},{"Key":"`count` in","Fragments":["`number`"]},{"Key":"`number` could","Fragments":["be"]},{"Key":"be factored","Fragments":["into"]},{"Key":"factored into","Fragments":["a"]},{"Key":"possibly get","Fragments":["away"]},{"Key":"single `apply","Fragments":["str`"]},{"Key":"str` wrapping","Fragments":["the"]},{"Key":"Try pulling","Fragments":["the"]},{"Key":"the negation","Fragments":["out","removed."]},{"Key":"negation out","Fragments":["of"]},{"Key":"possible, not","Fragments":["sure"]},{"Key":"simplified much","Fragments":["more"]},{"Key":"I'd welcome","Fragments":["any"]},{"Key":"welcome any","Fragments":["feedback"]},{"Key":"implement shouted?","Fragments":["I","I"]},{"Key":"shouted? I","Fragments":["also","also"]},{"Key":"also thought","Fragments":["of","of"]},{"Key":"a regexp,","Fragments":["but","but"]},{"Key":"regexp, but","Fragments":["I","I"]},{"Key":"shouting is","Fragments":["a"]},{"Key":"understand. Would","Fragments":["it"]},{"Key":"simpler to","Fragments":["have","use","me."]},{"Key":"few regexps","Fragments":["extracted"]},{"Key":"regexps extracted","Fragments":["into"]},{"Key":"with explanatory","Fragments":["names?"]},{"Key":"Oh and","Fragments":["don't"]},{"Key":"`clojure.string` dependency","Fragments":["but"]},{"Key":"dependency but","Fragments":["if"]},{"Key":"do I'd","Fragments":["declare"]},{"Key":"I'd declare","Fragments":["it"]},{"Key":"declare it","Fragments":["to"]},{"Key":"it explicit:","Fragments":["`(ns"]},{"Key":"explicit: `(ns","Fragments":["bob"]},{"Key":"[clojure.string as","Fragments":["str]))`.","str]))"]},{"Key":"as str]))`.","Fragments":["and"]},{"Key":"str]))`. and","Fragments":["then"]},{"Key":"use `str/replace`.","Fragments":["(replace"]},{"Key":"`str/replace`. (replace","Fragments":["annoyingly"]},{"Key":"(replace annoyingly","Fragments":["conflicts"]},{"Key":"annoyingly conflicts","Fragments":["with"]},{"Key":"conflicts with","Fragments":["a"]},{"Key":"you :refer","Fragments":["it.)"]},{"Key":":refer it.)","Fragments":["this"]},{"Key":"it.) this","Fragments":["won't"]},{"Key":"won't trample","Fragments":["the"]},{"Key":"trample the","Fragments":["core"]},{"Key":"core `str`","Fragments":["function."]},{"Key":"It'll only","Fragments":["be"]},{"Key":"in namespace","Fragments":["contexts."]},{"Key":"It's difficult","Fragments":["to"]},{"Key":"conditions means","Fragments":["semantically."]},{"Key":"means semantically.","Fragments":["I"]},{"Key":"semantically. I","Fragments":["think"]},{"Key":"the non-trivial","Fragments":["checks"]},{"Key":"non-trivial checks","Fragments":["were"]},{"Key":"checks were","Fragments":["extracted","extracted"]},{"Key":"were extracted","Fragments":["into","into"]},{"Key":"use clojure.string","Fragments":["in"]},{"Key":"in three","Fragments":["different","different"]},{"Key":"three different","Fragments":["places,","places"]},{"Key":"places, it","Fragments":["probably"]},{"Key":"probably makes","Fragments":["sense"]},{"Key":"add (:require","Fragments":["[clojure.string"]},{"Key":":refer :all])","Fragments":["into"]},{"Key":":all]) into","Fragments":["the"]},{"Key":"ns declaration.","Fragments":["It's"]},{"Key":"declaration. It's","Fragments":["distracting"]},{"Key":"It's distracting","Fragments":["to"]},{"Key":"distracting to","Fragments":["see"]},{"Key":"see clojure.string/","Fragments":["everywhere."]},{"Key":"this difficult","Fragments":["to"]},{"Key":"parse is","Fragments":["that"]},{"Key":"that conditions","Fragments":["and"]},{"Key":"and results","Fragments":["are"]},{"Key":"indentation level,","Fragments":["but"]},{"Key":"level, but","Fragments":["if"]},{"Key":"functions both","Fragments":["condition"]},{"Key":"both condition","Fragments":["and"]},{"Key":"and result","Fragments":["could"]},{"Key":"same link","Fragments":["as"]},{"Key":"link as","Fragments":["in"]},{"Key":"Simplified `generate-name`","Fragments":["to"]},{"Key":"`generate-name` to","Fragments":["reduce","`let`"]},{"Key":"reduce complexity","Fragments":["and"]},{"Key":"Nice. With","Fragments":["regards"]},{"Key":"to uniqueness,","Fragments":["as"]},{"Key":"uniqueness, as","Fragments":["you"]},{"Key":"scheme is","Fragments":["pretty"]},{"Key":"pretty limiting.","Fragments":["You"]},{"Key":"limiting. You","Fragments":["could"]},{"Key":"counter incremented","Fragments":["with"]},{"Key":"incremented with","Fragments":["every"]},{"Key":"every new","Fragments":["robot"]},{"Key":"robot name","Fragments":["and"]},{"Key":"generate names","Fragments":["as"]},{"Key":"names as","Fragments":["a","well."]},{"Key":"that counter.","Fragments":["However,"]},{"Key":"However, I'm","Fragments":["not"]},{"Key":"OK -","Fragments":["thoughts"]},{"Key":"- thoughts","Fragments":["off"]},{"Key":"thoughts off","Fragments":["the"]},{"Key":"head without","Fragments":["any"]},{"Key":"any testing.","Fragments":["May"]},{"Key":"testing. May","Fragments":["be"]},{"Key":"May be","Fragments":["wrong","consider","I'll"]},{"Key":"be wrong","Fragments":["in"]},{"Key":"wrong in","Fragments":["places:","Clojure"]},{"Key":"else branch,","Fragments":["prefer"]},{"Key":"branch, prefer","Fragments":["`when`"]},{"Key":"prefer `when`","Fragments":["to"]},{"Key":"`when` to","Fragments":["`if`."]},{"Key":"Why `replace`","Fragments":["when"]},{"Key":"`replace` when","Fragments":["you"]},{"Key":"string output","Fragments":["-"]},{"Key":"output -","Fragments":["just"]},{"Key":"a seq?","Fragments":["I'd"]},{"Key":"seq? I'd","Fragments":["just"]},{"Key":"just filter:","Fragments":["`(filter"]},{"Key":"filter: `(filter","Fragments":["#(Character/isLetter"]},{"Key":"`(filter #(Character/isLetter","Fragments":["%)"]},{"Key":"Generally instead","Fragments":["of"]},{"Key":"`map` to","Fragments":["1/0"]},{"Key":"to 1/0","Fragments":["trick"]},{"Key":"1/0 trick","Fragments":["just"]},{"Key":"trick just","Fragments":["`count`"]},{"Key":"just `count`","Fragments":["a"]},{"Key":"`count` a","Fragments":["`filter`:"]},{"Key":"a `filter`:","Fragments":["`(count"]},{"Key":"`filter`: `(count","Fragments":["(filter"]},{"Key":"`(count (filter","Fragments":["#(Character/isUpperCase"]},{"Key":"(filter #(Character/isUpperCase","Fragments":["%)"]},{"Key":"%) address)`.","Fragments":["(And"]},{"Key":"address)`. (And","Fragments":["note"]},{"Key":"(And note","Fragments":["that"]},{"Key":"that `(apply","Fragments":["+"]},{"Key":"`(apply +","Fragments":["...)`"]},{"Key":"+ ...)`","Fragments":["is"]},{"Key":"is broadly","Fragments":["equivalent"]},{"Key":"broadly equivalent","Fragments":["to"]},{"Key":"to `(reduce","Fragments":["+"]},{"Key":"`(reduce +","Fragments":["...)`,","(map"]},{"Key":"+ ...)`,","Fragments":["not"]},{"Key":"...)`, not","Fragments":["sure"]},{"Key":"if either","Fragments":["is"]},{"Key":"really more","Fragments":["idiomatic"]},{"Key":"...but better,","Fragments":["we're"]},{"Key":"better, we're","Fragments":["categorising"]},{"Key":"we're categorising","Fragments":["and"]},{"Key":"categorising and","Fragments":["counting"]},{"Key":"and counting","Fragments":["so","their"]},{"Key":"counting so","Fragments":["why"]},{"Key":"use just","Fragments":["use"]},{"Key":"use `group-by`","Fragments":["to"]},{"Key":"`group-by` to","Fragments":["split"]},{"Key":"split into","Fragments":["the"]},{"Key":"the upper","Fragments":["case"]},{"Key":"case characters","Fragments":["`(group-by"]},{"Key":"characters `(group-by","Fragments":["#(Character/isUpperCase"]},{"Key":"`(group-by #(Character/isUpperCase","Fragments":["%)"]},{"Key":"%) address)`","Fragments":["then"]},{"Key":"address)` then","Fragments":["`count`"]},{"Key":"then `count`","Fragments":["each","to"]},{"Key":"`count` each","Fragments":["set."]},{"Key":"(let [by-case","Fragments":["(-\u003e\u003e"]},{"Key":"[by-case (-\u003e\u003e","Fragments":["input"]},{"Key":"(filter #(Character/isLetter","Fragments":["%))","%)","%)"]},{"Key":" (group-by","Fragments":["#(Character/isUpperCase"]},{"Key":"(group-by #(Character/isUpperCase","Fragments":["%)))]"]},{"Key":" (\u003e","Fragments":["(count"]},{"Key":"(\u003e (count","Fragments":["(by-case"]},{"Key":"(count (by-case","Fragments":["true))","false)))"]},{"Key":"(by-case true))","Fragments":["(count"]},{"Key":"true)) (count","Fragments":["(by-case"]},{"Key":"In calculate-response,","Fragments":["manual"]},{"Key":"calculate-response, manual","Fragments":["recursion"]},{"Key":"manual recursion","Fragments":["usually"]},{"Key":"recursion usually","Fragments":["not"]},{"Key":"necessary when","Fragments":["higher"]},{"Key":"when higher","Fragments":["order"]},{"Key":"order fns","Fragments":["exist"]},{"Key":"fns exist","Fragments":["to"]},{"Key":"exist to","Fragments":["do"]},{"Key":"you. (And","Fragments":["you"]},{"Key":"(And you","Fragments":["should"]},{"Key":"prefer recur","Fragments":["for"]},{"Key":"recur for","Fragments":["tail"]},{"Key":"for tail","Fragments":["recursion"]},{"Key":"tail recursion","Fragments":["rather"]},{"Key":"recursion rather","Fragments":["than"]},{"Key":"than named","Fragments":["recursion"]},{"Key":"named recursion","Fragments":["as"]},{"Key":"recursion as","Fragments":["we've"]},{"Key":"as we've","Fragments":["no"]},{"Key":"we've no","Fragments":["TCO"]},{"Key":"no TCO","Fragments":["in"]},{"Key":"TCO in","Fragments":["clojure.)"]},{"Key":"case I'd","Fragments":["probably"]},{"Key":"of `juxt`","Fragments":["and","(it's"]},{"Key":"`juxt` and","Fragments":["`keep`."]},{"Key":" `((apply","Fragments":["juxt"]},{"Key":"`((apply juxt","Fragments":["my-test-fns)"]},{"Key":"juxt my-test-fns)","Fragments":["address)`"]},{"Key":"my-test-fns) address)`","Fragments":["gives"]},{"Key":"address)` gives","Fragments":["you"]},{"Key":"of nulls","Fragments":["and"]},{"Key":"nulls and","Fragments":["keywords."]},{"Key":"and keywords.","Fragments":["you're"]},{"Key":"keywords. you're","Fragments":["interested"]},{"Key":"first non-null.","Fragments":["So"]},{"Key":"non-null. So","Fragments":["something"]},{"Key":"(defn calc-response","Fragments":["[address"]},{"Key":"calc-response [address","Fragments":["testfns]"]},{"Key":" (first","Fragments":["(keep","\"ACATA\")"]},{"Key":"(first (keep","Fragments":["identity"]},{"Key":"(keep identity","Fragments":["((apply"]},{"Key":"identity ((apply","Fragments":["juxt"]},{"Key":"((apply juxt","Fragments":["testfns)"]},{"Key":"juxt testfns)","Fragments":["address)))"]},{"Key":"But actually","Fragments":["I"]},{"Key":"actually I","Fragments":["reckon"]},{"Key":"reckon I'd","Fragments":["just"]},{"Key":"test simple","Fragments":["boolean-predicates"]},{"Key":"simple boolean-predicates","Fragments":["in"]},{"Key":"boolean-predicates in","Fragments":["a"]},{"Key":" (is-question?","Fragments":["address)"]},{"Key":"(is-question? address)","Fragments":["\"Sure.\")"]},{"Key":" (is-yelling?","Fragments":["address)"]},{"Key":"(is-yelling? address)","Fragments":["\"Woah...\")"]},{"Key":"address) \"Woah...\")","Fragments":["etc.)"]},{"Key":"the verdict","Fragments":["output"]},{"Key":"verdict output","Fragments":["required"]},{"Key":"output required","Fragments":["by"]},{"Key":"required by","Fragments":["the","the"]},{"Key":"the test?","Fragments":["`prn`'s"]},{"Key":"test? `prn`'s","Fragments":["an"]},{"Key":"`prn`'s an","Fragments":["odd"]},{"Key":"odd choice,","Fragments":["`pr`"]},{"Key":"choice, `pr`","Fragments":["and"]},{"Key":"`pr` and","Fragments":["`prn`"]},{"Key":"and `prn`","Fragments":["are"]},{"Key":"`prn` are","Fragments":["the"]},{"Key":"the \"print\"","Fragments":["as"]},{"Key":"\"print\" as","Fragments":["in"]},{"Key":"the P","Fragments":["in"]},{"Key":"P in","Fragments":["REPL."]},{"Key":"in REPL.","Fragments":["For"]},{"Key":"REPL. For","Fragments":["normal"]},{"Key":"For normal","Fragments":["human"]},{"Key":"normal human","Fragments":["readable"]},{"Key":"human readable","Fragments":["output"]},{"Key":"readable output","Fragments":["I'd"]},{"Key":"output I'd","Fragments":["use"]},{"Key":"use `print`","Fragments":["/"]},{"Key":"`print` /","Fragments":["`println`."]},{"Key":" `rnas`","Fragments":["should"]},{"Key":"`rnas` should","Fragments":["be"]},{"Key":"set. You","Fragments":["could"]},{"Key":"simplify `count`","Fragments":["to"]},{"Key":"`count` to","Fragments":["a","get"]},{"Key":"single `if`","Fragments":["conditional"]},{"Key":"`if` conditional","Fragments":["which"]},{"Key":"conditional which","Fragments":["checks"]},{"Key":"which checks","Fragments":["if","whether"]},{"Key":"checks if","Fragments":["`rnas`"]},{"Key":"if `rnas`","Fragments":["contains"]},{"Key":"`rnas` contains","Fragments":["`nucleotide`."]},{"Key":"contains `nucleotide`.","Fragments":["By"]},{"Key":"`nucleotide`. By","Fragments":["the"]},{"Key":"way, sets","Fragments":["and"]},{"Key":"and maps","Fragments":["can","being"]},{"Key":"for presence","Fragments":["of"]},{"Key":"given argument","Fragments":["as"]},{"Key":"as value","Fragments":["or"]},{"Key":"or key","Fragments":["respectively."]},{"Key":"tests? What","Fragments":["about"]},{"Key":"of variants","Fragments":["of"]},{"Key":"variants of","Fragments":["words"]},{"Key":"with mixed","Fragments":["lower/upper"]},{"Key":"mixed lower/upper","Fragments":["case?"]},{"Key":"completely a","Fragments":["matter"]},{"Key":"personally find","Fragments":["`format`"]},{"Key":"find `format`","Fragments":["with"]},{"Key":"`format` with","Fragments":["large"]},{"Key":"of substitutions","Fragments":["hard"]},{"Key":"substitutions hard","Fragments":["to"]},{"Key":"read. In","Fragments":["such"]},{"Key":"such cases,","Fragments":["I"]},{"Key":"simple `str`","Fragments":["interleaving"]},{"Key":"`str` interleaving","Fragments":["bindings"]},{"Key":"interleaving bindings","Fragments":["with"]},{"Key":"1. `swap!`","Fragments":["and"]},{"Key":"`swap!` and","Fragments":["be"]},{"Key":"cluttered way","Fragments":["-"]},{"Key":"it accepts","Fragments":["additional"]},{"Key":"accepts additional","Fragments":["arguments"]},{"Key":"additional arguments","Fragments":["to"]},{"Key":"end. You","Fragments":["can"]},{"Key":"2. To","Fragments":["keep"]},{"Key":"intent even","Fragments":["more"]},{"Key":"clear, in","Fragments":["`rand-char`"]},{"Key":"in `rand-char`","Fragments":["you"]},{"Key":"`rand-char` you","Fragments":["can"]},{"Key":"can declare","Fragments":["also"]},{"Key":"declare also","Fragments":["the"]},{"Key":"lower boundary","Fragments":["(`(int"]},{"Key":"boundary (`(int","Fragments":["\\Z)`)"]},{"Key":"(`(int \\Z)`)","Fragments":["and"]},{"Key":"\\Z)`) and","Fragments":["sample"]},{"Key":"and sample","Fragments":["letters"]},{"Key":"sample letters","Fragments":["from"]},{"Key":"letters from","Fragments":["a"]},{"Key":"sequence generated","Fragments":["with"]},{"Key":"generated with","Fragments":["`range`."]},{"Key":"approach obscures","Fragments":["the"]},{"Key":"pretty smart.","Fragments":["Why"]},{"Key":"smart. Why","Fragments":["`mapv`?"]},{"Key":"Why `mapv`?","Fragments":["Is"]},{"Key":"`mapv`? Is","Fragments":["it"]},{"Key":"avoid overhead","Fragments":["incurred"]},{"Key":"overhead incurred","Fragments":["by"]},{"Key":"incurred by","Fragments":["lazy"]},{"Key":"by lazy","Fragments":["seqs?"]},{"Key":"lazy seqs?","Fragments":["Isn't"]},{"Key":"seqs? Isn't","Fragments":["that"]},{"Key":"Isn't that","Fragments":["a"]},{"Key":"a premature","Fragments":["optimization?"]},{"Key":"premature optimization?","Fragments":[":)"]},{"Key":"optimization? :)","Fragments":["Naming"]},{"Key":":) Naming","Fragments":["arguments"]},{"Key":"Naming arguments","Fragments":["more"]},{"Key":"arguments more","Fragments":["meaningfully"]},{"Key":"more meaningfully","Fragments":["would"]},{"Key":"meaningfully would","Fragments":["be"]},{"Key":"to alter","Fragments":["the"]},{"Key":"naming so","Fragments":["that"]},{"Key":"there's need","Fragments":["to"]},{"Key":"to referring","Fragments":["to"]},{"Key":"to symbols","Fragments":["with"]},{"Key":"with namespace","Fragments":["prefixed."]},{"Key":"of `add`,","Fragments":["have"]},{"Key":"`add`, have","Fragments":["a"]},{"Key":"at `update-in`","Fragments":["and/or"]},{"Key":"`update-in` and/or","Fragments":["`assoc-in`."]},{"Key":"For `sorted`,","Fragments":["`reduce-kv`"]},{"Key":"`sorted`, `reduce-kv`","Fragments":["can"]},{"Key":"`reduce-kv` can","Fragments":["be"]},{"Key":"The check","Fragments":["for"]},{"Key":"validity could","Fragments":["be"]},{"Key":"if done","Fragments":["directly"]},{"Key":"done directly","Fragments":["in"]},{"Key":"in `if`","Fragments":["predicate"]},{"Key":"`if` predicate","Fragments":["check."]},{"Key":"predicate check.","Fragments":["Even"]},{"Key":"check. Even","Fragments":["better,"]},{"Key":"Even better,","Fragments":["you"]},{"Key":"better, you","Fragments":["could"]},{"Key":"could leverage","Fragments":["`defn`s"]},{"Key":"leverage `defn`s","Fragments":["`:pre`"]},{"Key":"`defn`s `:pre`","Fragments":["meta"]},{"Key":"`:pre` meta","Fragments":["attribute"]},{"Key":"meta attribute","Fragments":["to"]},{"Key":"attribute to","Fragments":["separate"]},{"Key":"separate check","Fragments":["completely"]},{"Key":"check completely","Fragments":["from"]},{"Key":"completely from","Fragments":["logic."]},{"Key":" @milo","Fragments":["thanks"]},{"Key":"@milo thanks","Fragments":["for"]},{"Key":"feedback, here's","Fragments":["what"]},{"Key":"here's what","Fragments":["I've","your"]},{"Key":"what I've","Fragments":["changed:","read"]},{"Key":"1. Cleaned","Fragments":["up"]},{"Key":"Cleaned up","Fragments":["`swap!`","`bottles`"]},{"Key":"up `swap!`","Fragments":["form"]},{"Key":"`swap!` form","Fragments":["as"]},{"Key":"form as","Fragments":["suggested"]},{"Key":"remove need","Fragments":["for"]},{"Key":"and moved","Fragments":["call","most"]},{"Key":"moved call","Fragments":["to"]},{"Key":"to `generate-name`","Fragments":["to"]},{"Key":"to `let`","Fragments":["binding"]},{"Key":"binding to","Fragments":["avoid","help"]},{"Key":"being called","Fragments":["multiple"]},{"Key":"called multiple","Fragments":["times"]},{"Key":"times if","Fragments":["`swap!`"]},{"Key":"if `swap!`","Fragments":["needs"]},{"Key":"`swap!` needs","Fragments":["to"]},{"Key":"call `assoc`","Fragments":["more"]},{"Key":"`assoc` more","Fragments":["than"]},{"Key":"than once","Fragments":["(which"]},{"Key":"once (which","Fragments":["I"]},{"Key":"is unlikely","Fragments":["in"]},{"Key":"unlikely in","Fragments":["this"]},{"Key":"2. The","Fragments":["implementation"]},{"Key":"The implementation","Fragments":["of","was","is","for"]},{"Key":"of `rand-char`","Fragments":["is"]},{"Key":"`rand-char` is","Fragments":["longer"]},{"Key":"is longer","Fragments":["using"]},{"Key":"longer using","Fragments":["`range`","`clojure.string`."]},{"Key":"using `range`","Fragments":["and"]},{"Key":"`range` and","Fragments":["`shuffle`"]},{"Key":"and `shuffle`","Fragments":["but"]},{"Key":"`shuffle` but","Fragments":["it's"]},{"Key":"more self-explanatory","Fragments":["which"]},{"Key":"self-explanatory which","Fragments":["I"]},{"Key":"I like,","Fragments":["especially"]},{"Key":"like, especially","Fragments":["as"]},{"Key":"especially as","Fragments":["it"]},{"Key":"Next I'll","Fragments":["probably"]},{"Key":"at ensuring","Fragments":["names"]},{"Key":"ensuring names","Fragments":["are"]},{"Key":"are unique","Fragments":["(as"]},{"Key":"unique (as","Fragments":["far"]},{"Key":"(as far","Fragments":["as"]},{"Key":"is sensible","Fragments":["given"]},{"Key":"sensible given","Fragments":["the"]},{"Key":"again, really","Fragments":["appreciate"]},{"Key":" Event","Fragments":["though"]},{"Key":"Event though","Fragments":["naming"]},{"Key":"though naming","Fragments":["scheme"]},{"Key":"scheme with","Fragments":["`_`"]},{"Key":"with `_`","Fragments":["prefix"]},{"Key":"`_` prefix","Fragments":["is"]},{"Key":"prefix is","Fragments":["short","needed","redundant"]},{"Key":"and smart,","Fragments":["it's"]},{"Key":"smart, it's","Fragments":["rather"]},{"Key":"rather uncommon","Fragments":["to"]},{"Key":"in symbols/keywords.","Fragments":["`lower-w/c`"]},{"Key":"symbols/keywords. `lower-w/c`","Fragments":["would"]},{"Key":"`lower-w/c` would","Fragments":["be"]},{"Key":"an overhead","Fragments":["of"]},{"Key":"`word` along","Fragments":["with"]},{"Key":" Assertion","Fragments":["could"]},{"Key":"Assertion could","Fragments":["be"]},{"Key":"also written","Fragments":["as"]},{"Key":"as `(every?","Fragments":["(-\u003e"]},{"Key":"`(every? (-\u003e","Fragments":["tr"]},{"Key":"(-\u003e tr","Fragments":["keys"]},{"Key":"tr keys","Fragments":["set)"]},{"Key":"keys set)","Fragments":["s)`."]},{"Key":"set) s)`.","Fragments":["To"]},{"Key":"s)`. To","Fragments":["avoid"]},{"Key":"of translations,","Fragments":["you"]},{"Key":"translations, you","Fragments":["could"]},{"Key":"it outside","Fragments":["of"]},{"Key":"function along","Fragments":["with"]},{"Key":"the derived","Fragments":["set"]},{"Key":"derived set","Fragments":["of"]},{"Key":"nucleotides. `defn`","Fragments":["has"]},{"Key":"`defn` has","Fragments":["`:pre`"]},{"Key":"has `:pre`","Fragments":["for"]},{"Key":"`:pre` for","Fragments":["making"]},{"Key":"making assertions","Fragments":["on","about"]},{"Key":"assertions on","Fragments":["passed"]},{"Key":"on passed","Fragments":["arguments"]},{"Key":"passed arguments","Fragments":["-"]},{"Key":"arguments -","Fragments":["this","no"]},{"Key":"help separate","Fragments":["the"]},{"Key":"actual logic","Fragments":["from","follows"]},{"Key":"if only","Fragments":["for"]},{"Key":"meaningful names,","Fragments":["like"]},{"Key":"`yelling?`, `silent?`","Fragments":["etc."]},{"Key":"`silent?` etc.","Fragments":["Also,"]},{"Key":"etc. Also,","Fragments":["I"]},{"Key":"for yelling/shouting","Fragments":["could"]},{"Key":"yelling/shouting could","Fragments":["be"]},{"Key":"version takes","Fragments":["advantage"]},{"Key":"takes advantage","Fragments":["of","of"]},{"Key":"a `hash-map`","Fragments":["(`db`)"]},{"Key":"`hash-map` (`db`)","Fragments":["can"]},{"Key":"(`db`) can","Fragments":["be"]},{"Key":"key in","Fragments":["`grade`"]},{"Key":"`grade` and","Fragments":["based"]},{"Key":"and based","Fragments":["on"]},{"Key":"on @valentin's","Fragments":["feedback"]},{"Key":"@valentin's feedback","Fragments":["avoids"]},{"Key":"feedback avoids","Fragments":["the"]},{"Key":"to `school/grade`","Fragments":["in"]},{"Key":"`school/grade` in","Fragments":["`add`"]},{"Key":"`add` by","Fragments":["using"]},{"Key":"originally looking","Fragments":["to"]},{"Key":"looking to","Fragments":["use","replace"]},{"Key":"`update-in` to","Fragments":["add"]},{"Key":"a pupil","Fragments":["to"]},{"Key":"pupil to","Fragments":["a"]},{"Key":"given grade","Fragments":["in","to"]},{"Key":"`add` but","Fragments":["couldn't"]},{"Key":"couldn't think","Fragments":["how","of","of"]},{"Key":"think how","Fragments":["to"]},{"Key":"to initialise","Fragments":["the"]},{"Key":"initialise the","Fragments":["`vector`"]},{"Key":"the `vector`","Fragments":["when"]},{"Key":"`vector` when","Fragments":["the"]},{"Key":"the pupil","Fragments":["was"]},{"Key":"pupil was","Fragments":["the"]},{"Key":"first of","Fragments":["a"]},{"Key":"grade to","Fragments":["be"]},{"Key":"the db.","Fragments":["This"]},{"Key":"db. This","Fragments":["solution"]},{"Key":"solution takes","Fragments":["advantage"]},{"Key":"that `(vec","Fragments":["nil)`"]},{"Key":"`(vec nil)`","Fragments":["evaluates"]},{"Key":"nil)` evaluates","Fragments":["to"]},{"Key":"empty vector","Fragments":["`[]`"]},{"Key":"vector `[]`","Fragments":["which"]},{"Key":"`[]` which","Fragments":["is"]},{"Key":"what's required.","Fragments":["The"]},{"Key":"required. The","Fragments":["implementation"]},{"Key":"implementation was","Fragments":["lifted","much"]},{"Key":"was lifted","Fragments":["from"]},{"Key":"lifted from","Fragments":["@valentin's"]},{"Key":"from @valentin's","Fragments":["[solution](http://exercism.io/submissions/52210c667f52dfe323000057)"]},{"Key":"@valentin's [solution](http://exercism.io/submissions/52210c667f52dfe323000057)","Fragments":["but"]},{"Key":"[solution](http://exercism.io/submissions/52210c667f52dfe323000057) but","Fragments":["I"]},{"Key":"worth submitting","Fragments":["to"]},{"Key":"submitting to","Fragments":["round-out"]},{"Key":"to round-out","Fragments":["the"]},{"Key":"round-out the","Fragments":["exercise."]},{"Key":"is updated","Fragments":["as"]},{"Key":"updated as","Fragments":["your"]},{"Key":" Alright","Fragments":["-"]},{"Key":"Alright -","Fragments":["I"]},{"Key":"know, it's","Fragments":["not"]},{"Key":"not complete.","Fragments":["This"]},{"Key":"complete. This","Fragments":["is"]},{"Key":"first (!)","Fragments":["piece"]},{"Key":"(!) piece","Fragments":["of"]},{"Key":"need some","Fragments":["inspiration","help."]},{"Key":"some inspiration","Fragments":["from"]},{"Key":"inspiration from","Fragments":["you"]},{"Key":"from you","Fragments":["other","here."]},{"Key":"you other","Fragments":["guys"]},{"Key":"other guys","Fragments":[":)"]},{"Key":"concrete example","Fragments":["of"]},{"Key":"(def valid-nucleotides","Fragments":["(keys"]},{"Key":"valid-nucleotides (keys","Fragments":["dna-nucleotides))"]},{"Key":"{:pre [(valid-nucleotides","Fragments":["(str/upper-case"]},{"Key":"[(valid-nucleotides (str/upper-case","Fragments":["nucleotide))]}"]},{"Key":";; actual","Fragments":["logic"]},{"Key":"the constraint","Fragments":["in"]},{"Key":"constraint in","Fragments":["`:pre`"]},{"Key":"in `:pre`","Fragments":["is"]},{"Key":"`:pre` is","Fragments":["not"]},{"Key":"not satisfied,","Fragments":["AssertionError"]},{"Key":"satisfied, AssertionError","Fragments":["is"]},{"Key":"AssertionError is","Fragments":["thrown."]},{"Key":"Thanks zoldar.","Fragments":["This"]},{"Key":"zoldar. This","Fragments":["looks"]},{"Key":"Wow, pretty","Fragments":["similar"]},{"Key":"pretty similar","Fragments":["to"]},{"Key":"Just found","Fragments":["out"]},{"Key":"about `:pre`","Fragments":["conditions"]},{"Key":"conditions (DBC)","Fragments":[":)"]},{"Key":"Also replaced","Fragments":["the"]},{"Key":"replaced the","Fragments":["`cond`","clojure.string/join"]},{"Key":"a straight","Fragments":["`map`"]},{"Key":"straight `map`","Fragments":["instead"]},{"Key":"instead (since","Fragments":["the"]},{"Key":"(since the","Fragments":["hash-map"]},{"Key":"the hash-map","Fragments":["is"]},{"Key":"hash-map is","Fragments":["an"]},{"Key":"implicit function","Fragments":["key"]},{"Key":"function key","Fragments":["-\u003e"]},{"Key":"key -\u003e","Fragments":["value)."]},{"Key":"one actually","Fragments":["passes"]},{"Key":"actually passes","Fragments":["the"]},{"Key":"tests as","Fragments":["well"]},{"Key":"your review","Fragments":["but"]},{"Key":"review but","Fragments":["i"]},{"Key":"didn't understand","Fragments":["what"]},{"Key":"mean ?","Fragments":["Can"]},{"Key":"? Can","Fragments":["you"]},{"Key":"you explain","Fragments":["clearly"]},{"Key":"explain clearly","Fragments":["?"]},{"Key":"could still","Fragments":["avoid"]},{"Key":"still avoid","Fragments":["sorting"]},{"Key":"avoid sorting","Fragments":["the"]},{"Key":"It always","Fragments":["feels"]},{"Key":"always feels","Fragments":["a"]},{"Key":"awkward when","Fragments":["I"]},{"Key":"do an","Fragments":["assertion","extra"]},{"Key":"an assertion","Fragments":["in"]},{"Key":"in these","Fragments":["functional","two"]},{"Key":"these functional","Fragments":["constructs."]},{"Key":"functional constructs.","Fragments":["I"]},{"Key":"constructs. I","Fragments":["feel"]},{"Key":"intermediate value,","Fragments":["which"]},{"Key":"value, which","Fragments":["always"]},{"Key":"which always","Fragments":["seems"]},{"Key":"always seems","Fragments":["to"]},{"Key":"to lead","Fragments":["to"]},{"Key":"meant as","Fragments":["entirely"]},{"Key":"as entirely","Fragments":["separate"]},{"Key":"entirely separate","Fragments":["functions."]},{"Key":"functions. Defining","Fragments":["the"]},{"Key":"Defining the","Fragments":["functions"]},{"Key":"functions internally","Fragments":["creates"]},{"Key":"internally creates","Fragments":["too"]},{"Key":"creates too","Fragments":["much"]},{"Key":"much separation","Fragments":["between"]},{"Key":"of anagrams-for","Fragments":["and"]},{"Key":"anagrams-for and","Fragments":["the"]},{"Key":"core of","Fragments":["its"]},{"Key":"that robot","Fragments":["names"]},{"Key":"robot names","Fragments":["are"]},{"Key":"A `set`","Fragments":["is"]},{"Key":"to track","Fragments":["the","names,","the"]},{"Key":"track the","Fragments":["names","last"]},{"Key":"been used,","Fragments":["the"]},{"Key":"used, the","Fragments":["`set`"]},{"Key":"the `set`","Fragments":["is","are","on"]},{"Key":"wrapped in","Fragments":["a"]},{"Key":"a `ref`","Fragments":["to","so","and"]},{"Key":"`ref` to","Fragments":["preserve"]},{"Key":"preserve the","Fragments":["state."]},{"Key":"the state.","Fragments":["I've"]},{"Key":"state. I've","Fragments":["used"]},{"Key":"`ref` so","Fragments":["that"]},{"Key":"the operations","Fragments":["to"]},{"Key":"operations to","Fragments":["find"]},{"Key":"a unique","Fragments":["name","name"]},{"Key":"unique name","Fragments":["and","being"]},{"Key":"add it","Fragments":["to"]},{"Key":"`set` are","Fragments":["done"]},{"Key":"are done","Fragments":["in"]},{"Key":"As the","Fragments":["naming"]},{"Key":"scheme for","Fragments":["robots"]},{"Key":"for robots","Fragments":["is"]},{"Key":"robots is","Fragments":["finite"]},{"Key":"is finite","Fragments":["a"]},{"Key":"finite a","Fragments":["condition"]},{"Key":"a condition","Fragments":["is","and"]},{"Key":"condition is","Fragments":["added","a"]},{"Key":"is added","Fragments":["to"]},{"Key":"to `unique-name`","Fragments":["so"]},{"Key":"`unique-name` so","Fragments":["that"]},{"Key":"by default","Fragments":["it","if"]},{"Key":"default it","Fragments":["will"]},{"Key":"only try","Fragments":["up"]},{"Key":"try up","Fragments":["to"]},{"Key":"to 1,000","Fragments":["names"]},{"Key":"1,000 names","Fragments":["to"]},{"Key":"avoid getting","Fragments":["into"]},{"Key":"a position","Fragments":["where"]},{"Key":"position where","Fragments":["all"]},{"Key":"possible names","Fragments":["have"]},{"Key":"names have","Fragments":["already"]},{"Key":"- In","Fragments":["clojure"]},{"Key":"all ending","Fragments":["')'"]},{"Key":"ending ')'","Fragments":["on"]},{"Key":"line right","Fragments":["after"]},{"Key":"right after","Fragments":["each"]},{"Key":"each other,","Fragments":["like"]},{"Key":"other, like","Fragments":["this"]},{"Key":"- Rename","Fragments":["isUpper?"]},{"Key":"Rename isUpper?","Fragments":["to"]},{"Key":"isUpper? to","Fragments":["isShout?"]},{"Key":"to isShout?","Fragments":["to"]},{"Key":"isShout? to","Fragments":["make"]},{"Key":"- While","Fragments":["your"]},{"Key":"While your","Fragments":["at"]},{"Key":"your at","Fragments":["it"]},{"Key":"make little","Fragments":["helper"]},{"Key":"little helper","Fragments":["functions"]},{"Key":"functions isSilent?","Fragments":["and"]},{"Key":"isSilent? and","Fragments":["isAsking?"]},{"Key":"and isAsking?","Fragments":["to"]},{"Key":"isAsking? to","Fragments":["make"]},{"Key":"just listing","Fragments":["the"]},{"Key":"listing the","Fragments":["functions,"]},{"Key":"was good","Fragments":["practice","to"]},{"Key":"me writing","Fragments":["macros."]},{"Key":"comment, zoldar.","Fragments":["I"]},{"Key":"zoldar. I","Fragments":["did"]},{"Key":"did find","Fragments":["out","the"]},{"Key":"about 'frequencies'","Fragments":["but"]},{"Key":"'frequencies' but","Fragments":["it"]},{"Key":"felt a","Fragments":["bit"]},{"Key":"You yelling?","Fragments":["function"]},{"Key":"yelling? function","Fragments":["will"]},{"Key":"are outside","Fragments":["the"]},{"Key":"range A-Z","Fragments":["(while"]},{"Key":"A-Z (while","Fragments":["still"]},{"Key":"(while still","Fragments":["being"]},{"Key":"still being","Fragments":["uppercase)."]},{"Key":"of comparing","Fragments":["the"]},{"Key":"comparing the","Fragments":["result","strings.","string","string","string"]},{"Key":"of trim","Fragments":["with"]},{"Key":"trim with","Fragments":["the"]},{"Key":" @noble","Fragments":["I"]},{"Key":"@noble I","Fragments":["may"]},{"Key":"may of","Fragments":["misunderstood"]},{"Key":"of misunderstood","Fragments":["what"]},{"Key":"misunderstood what","Fragments":["I've"]},{"Key":"read about","Fragments":["atoms","interop","`interleave`","(and"]},{"Key":"about atoms","Fragments":["and"]},{"Key":"and refs","Fragments":["but"]},{"Key":"refs but","Fragments":["I"]},{"Key":"an `atom`","Fragments":["then","to"]},{"Key":"`atom` then","Fragments":["there"]},{"Key":"then there","Fragments":["is"]},{"Key":"possibility that","Fragments":["another"]},{"Key":"that another","Fragments":["thread","entry"]},{"Key":"another thread","Fragments":["could"]},{"Key":"thread could","Fragments":["change"]},{"Key":"the `names`","Fragments":["in"]},{"Key":"`names` in","Fragments":["the"]},{"Key":"time between","Fragments":["a"]},{"Key":"being being","Fragments":["found"]},{"Key":"found at","Fragments":["line"]},{"Key":"line 21","Fragments":["and","might"]},{"Key":"21 and","Fragments":["it"]},{"Key":"being `conj`ed","Fragments":["into"]},{"Key":"`conj`ed into","Fragments":["the"]},{"Key":"`set` on","Fragments":["line"]},{"Key":"24. I","Fragments":["think"]},{"Key":"is avoided","Fragments":["due"]},{"Key":"avoided due","Fragments":["to"]},{"Key":"`ref` and","Fragments":["the"]},{"Key":"the associated","Fragments":["requirement"]},{"Key":"associated requirement","Fragments":["for"]},{"Key":"for mutation","Fragments":["to"]},{"Key":"mutation to","Fragments":["occur"]},{"Key":"to occur","Fragments":["in"]},{"Key":"occur in","Fragments":["a"]},{"Key":"a `dosync`","Fragments":["block"]},{"Key":"`dosync` block","Fragments":["which"]},{"Key":"block which","Fragments":["implements"]},{"Key":"which implements","Fragments":["a"]},{"Key":"implements a","Fragments":["transaction."]},{"Key":"whole and","Fragments":["in"]},{"Key":"particular the","Fragments":["various"]},{"Key":"various ways","Fragments":["of"]},{"Key":"ways of","Fragments":["managing","doing"]},{"Key":"of managing","Fragments":["state"]},{"Key":"managing state","Fragments":["so"]},{"Key":"state so","Fragments":["I"]},{"Key":"could very","Fragments":["well"]},{"Key":"well be","Fragments":["wrong,"]},{"Key":"be wrong,","Fragments":["any"]},{"Key":"wrong, any","Fragments":["further"]},{"Key":"further insight","Fragments":["appreciated"]},{"Key":"insight appreciated","Fragments":[":-)"]},{"Key":"Please remember","Fragments":["that"]},{"Key":"is simply","Fragments":["a","`(if"]},{"Key":"simply a","Fragments":["function","beautiful"]},{"Key":"with varying","Fragments":["number"]},{"Key":"Hi zoldar,","Fragments":["good"]},{"Key":"zoldar, good","Fragments":["suggestion."]},{"Key":"good suggestion.","Fragments":["I"]},{"Key":"just reading","Fragments":["the"]},{"Key":"test, that","Fragments":["said"]},{"Key":"that said","Fragments":["something"]},{"Key":"said something","Fragments":["about"]},{"Key":"about punctuation.","Fragments":["But"]},{"Key":"punctuation. But","Fragments":["just"]},{"Key":"But just","Fragments":["picking"]},{"Key":"just picking","Fragments":["what"]},{"Key":"picking what","Fragments":["you"]},{"Key":"want is","Fragments":["much"]},{"Key":"Although code","Fragments":["is"]},{"Key":"fine, think","Fragments":["about"]},{"Key":"`number` more","Fragments":["expressive,"]},{"Key":"expressive, so","Fragments":["that"]},{"Key":"that comments","Fragments":["wouldn't"]},{"Key":"comments wouldn't","Fragments":["be"]},{"Key":"said is","Fragments":["of"]},{"Key":"is of","Fragments":["course"]},{"Key":"course true.","Fragments":["But"]},{"Key":"true. But","Fragments":["if"]},{"Key":"do both","Fragments":["operations"]},{"Key":"both operations","Fragments":["in"]},{"Key":"in one,","Fragments":["atomic"]},{"Key":"one, atomic","Fragments":["step,"]},{"Key":"atomic step,","Fragments":["this"]},{"Key":"step, this","Fragments":["is"]},{"Key":"no longer","Fragments":["a","using","need","have","needs"]},{"Key":"longer a","Fragments":["problem."]},{"Key":" (swap!","Fragments":["names"]},{"Key":"(swap! names","Fragments":["(fn"]},{"Key":"names (fn","Fragments":["[names]"]},{"Key":"(fn [names]","Fragments":["(generate-and-conj-new-name-to-names)))"]},{"Key":"require extending","Fragments":["the"]},{"Key":"structure tracking","Fragments":["already"]},{"Key":"tracking already","Fragments":["generated"]},{"Key":"map, like","Fragments":["`{:last-name"]},{"Key":"like `{:last-name","Fragments":["_"]},{"Key":"`{:last-name _","Fragments":[":names"]},{"Key":"_ :names","Fragments":["#(...)}`"]},{"Key":":names #(...)}`","Fragments":["-"]},{"Key":"#(...)}` -","Fragments":["then"]},{"Key":"- then","Fragments":["`get-last-generated-name`"]},{"Key":"then `get-last-generated-name`","Fragments":["would"]},{"Key":"`get-last-generated-name` would","Fragments":["be"]},{"Key":"Anyway, your","Fragments":["version"]},{"Key":"your version","Fragments":["is","doesn't"]},{"Key":"fine -","Fragments":["I"]},{"Key":"point out","Fragments":["that","is"]},{"Key":"also possible","Fragments":["with"]},{"Key":" `#(anagram","Fragments":["s"]},{"Key":"`#(anagram s","Fragments":["%)`"]},{"Key":"s %)`","Fragments":["can"]},{"Key":"%)` can","Fragments":["be"]},{"Key":"also expressed","Fragments":["as"]},{"Key":"as partial","Fragments":["application"]},{"Key":"application with","Fragments":["`partial`."]},{"Key":"`partial`. Some","Fragments":["prefer"]},{"Key":"prefer it","Fragments":["due","when"]},{"Key":"it due","Fragments":["to"]},{"Key":"less \"noise\"","Fragments":["in"]},{"Key":"\"noise\" in","Fragments":["syntax"]},{"Key":"in syntax","Fragments":["introduced"]},{"Key":"syntax introduced","Fragments":["by"]},{"Key":"introduced by","Fragments":["anonymous","Java's"]},{"Key":"by anonymous","Fragments":["function"]},{"Key":"Try to","Fragments":["avoid"]},{"Key":"As currently","Fragments":["implemented"]},{"Key":"currently implemented","Fragments":["`invalid?`"]},{"Key":"implemented `invalid?`","Fragments":["works"]},{"Key":"`invalid?` works","Fragments":["for"]},{"Key":"but does","Fragments":["not"]},{"Key":"logic described","Fragments":["in"]},{"Key":"readme as","Fragments":["strings"]},{"Key":"as strings","Fragments":["of"]},{"Key":"of less","Fragments":["than"]},{"Key":"than 9","Fragments":["or"]},{"Key":"9 or","Fragments":["more"]},{"Key":"than 11","Fragments":["numbers"]},{"Key":"11 numbers","Fragments":["would"]},{"Key":"numbers would","Fragments":["classed"]},{"Key":"would classed","Fragments":["as"]},{"Key":"classed as","Fragments":["valid."]},{"Key":"All uppercase","Fragments":["names"]},{"Key":"uppercase names","Fragments":["(or"]},{"Key":"names (or","Fragments":["rather"]},{"Key":"rather names","Fragments":["with"]},{"Key":"any uppercase","Fragments":["character)"]},{"Key":"uppercase character)","Fragments":["are"]},{"Key":"character) are","Fragments":["rather"]},{"Key":"are rather","Fragments":["uncommon."]},{"Key":"rather uncommon.","Fragments":["They"]},{"Key":"uncommon. They","Fragments":["are"]},{"Key":"for protocol","Fragments":["names"]},{"Key":"protocol names","Fragments":["and"]},{"Key":"in context","Fragments":["of"]},{"Key":"of Java","Fragments":["interop,","interop"]},{"Key":"then names","Fragments":["usually"]},{"Key":"names usually","Fragments":["use"]},{"Key":"use CamelCased","Fragments":["form."]},{"Key":"Code could","Fragments":["be"]},{"Key":"if character","Fragments":["literals"]},{"Key":"literals were","Fragments":["used"]},{"Key":"for range","Fragments":["boundaries"]},{"Key":"range boundaries","Fragments":["instead"]},{"Key":"boundaries instead","Fragments":["of"]},{"Key":"of raw","Fragments":["integers"]},{"Key":"raw integers","Fragments":["-"]},{"Key":"integers -","Fragments":["like"]},{"Key":"and `(int","Fragments":["\\Z)`."]},{"Key":"although conversion","Fragments":["to"]},{"Key":"to `sorted-map`","Fragments":["is"]},{"Key":"avoid warning","Fragments":["about"]},{"Key":"about `count`","Fragments":["shadowing"]},{"Key":"`count` shadowing","Fragments":["the"]},{"Key":"shadowing the","Fragments":["function"]},{"Key":"`clojure.core` you","Fragments":["can"]},{"Key":"a following","Fragments":["form"]},{"Key":"following form","Fragments":["inside"]},{"Key":" `map`","Fragments":["/"]},{"Key":"`map` /","Fragments":["`filter`","`reduce`."]},{"Key":"/ `filter`","Fragments":["works"]},{"Key":"`filter` works","Fragments":["with"]},{"Key":"multiple sequences","Fragments":["-"]},{"Key":"sequences -","Fragments":["the"]},{"Key":"stops at","Fragments":["the"]},{"Key":"shortest sequence","Fragments":["passed."]},{"Key":"sequence passed.","Fragments":["Please"]},{"Key":"passed. Please","Fragments":["also"]},{"Key":"also keep","Fragments":["in"]},{"Key":"that predicates","Fragments":["like"]},{"Key":"like `=`,","Fragments":["`not=`"]},{"Key":"`=`, `not=`","Fragments":["etc."]},{"Key":"`not=` etc.","Fragments":["are"]},{"Key":"just functions","Fragments":["accepting"]},{"Key":"functions accepting","Fragments":["varying"]},{"Key":"accepting varying","Fragments":["number"]},{"Key":"wrap them","Fragments":["in"]},{"Key":" @linnie","Fragments":["-"]},{"Key":"@linnie -","Fragments":["thanks!"]},{"Key":"- thanks!","Fragments":["That's"]},{"Key":"thanks! That's","Fragments":["even"]},{"Key":"@alvena -","Fragments":["thanks,"]},{"Key":"- thanks,","Fragments":["that's"]},{"Key":"thanks, that's","Fragments":["much"]},{"Key":"that's much","Fragments":["clearer"]},{"Key":"clearer with","Fragments":["the"]},{"Key":"explicit conversion","Fragments":["from"]},{"Key":"conversion from","Fragments":["char"]},{"Key":" `(into","Fragments":["{}"]},{"Key":"{} seq)`","Fragments":["is"]},{"Key":"seq)` is","Fragments":["more"]},{"Key":"idiomatic. Anyway,","Fragments":["`reduce-kv`"]},{"Key":"Anyway, `reduce-kv`","Fragments":["is"]},{"Key":"also handy","Fragments":["for"]},{"Key":"handy for","Fragments":["such"]},{"Key":" @dena","Fragments":["Is"]},{"Key":"@dena Is","Fragments":["this"]},{"Key":"more along","Fragments":["the"]},{"Key":"along the","Fragments":["lines"]},{"Key":"the lines","Fragments":["of","shorter."]},{"Key":"were thinking?","Fragments":["http://exercism.io/submissions/2ef4e1473f265f4de70864a4"]},{"Key":"thinking? http://exercism.io/submissions/2ef4e1473f265f4de70864a4","Fragments":["I"]},{"Key":"http://exercism.io/submissions/2ef4e1473f265f4de70864a4 I","Fragments":["think"]},{"Key":"it loses","Fragments":["some"]},{"Key":"loses some","Fragments":["readability"]},{"Key":"the unnecessary","Fragments":["sort","`and`"]},{"Key":"unnecessary sort","Fragments":["each"]},{"Key":"sort each","Fragments":["iteration"]},{"Key":"each iteration","Fragments":[".."]},{"Key":"great. You","Fragments":["could"]},{"Key":"use `dec`","Fragments":["on"]},{"Key":"`dec` on","Fragments":["line"]},{"Key":"well if","Fragments":["you"]},{"Key":"OK I","Fragments":["think"]},{"Key":"I'm done","Fragments":["with"]},{"Key":"this now,","Fragments":["very"]},{"Key":"now, very","Fragments":["minor"]},{"Key":"minor update","Fragments":["this"]},{"Key":"remove anonymous","Fragments":["function"]},{"Key":" @isaiah","Fragments":["thanks"]},{"Key":"@isaiah thanks","Fragments":["for"]},{"Key":"feedback and","Fragments":["discussion"]},{"Key":"Thanks @esmeralda.","Fragments":["I"]},{"Key":"@esmeralda. I","Fragments":["replaced"]},{"Key":"I replaced","Fragments":["`filter`","`lc-char-freqs`","my"]},{"Key":"replaced `filter`","Fragments":["with"]},{"Key":"`filter` with","Fragments":["`remove`","a"]},{"Key":"with `remove`","Fragments":["and","with"]},{"Key":"`remove` and","Fragments":["simplified"]},{"Key":"and simplified","Fragments":["that"]},{"Key":"simplified that","Fragments":["bit."]},{"Key":"that bit.","Fragments":["However,"]},{"Key":"bit. However,","Fragments":["I"]},{"Key":"don't quite","Fragments":["get","know","understand"]},{"Key":"get why","Fragments":["we"]},{"Key":"why we","Fragments":["wouldn't"]},{"Key":"we wouldn't","Fragments":["need"]},{"Key":"need `filter-words`","Fragments":["-"]},{"Key":"`filter-words` -","Fragments":["are"]},{"Key":"that because,","Fragments":["after"]},{"Key":"because, after","Fragments":["using"]},{"Key":"after using","Fragments":["`remove`"]},{"Key":"using `remove`","Fragments":["it"]},{"Key":"`remove` it","Fragments":["is"]},{"Key":" @rose","Fragments":["just"]},{"Key":"@rose just","Fragments":["for"]},{"Key":"just for","Fragments":["fun","the"]},{"Key":"fun I","Fragments":["thought"]},{"Key":"version using","Fragments":["an"]},{"Key":"`atom` to","Fragments":["track"]},{"Key":"track names,","Fragments":["I'm"]},{"Key":"names, I'm","Fragments":["undecided"]},{"Key":"I'm undecided","Fragments":["as"]},{"Key":"undecided as","Fragments":["to"]},{"Key":"like more","Fragments":["but"]},{"Key":"some experience","Fragments":["with"]},{"Key":"experience with","Fragments":["`atom`s","Clojure,","clojure,"]},{"Key":"with `atom`s","Fragments":["and"]},{"Key":"`atom`s and","Fragments":["`ref`s."]},{"Key":"and `ref`s.","Fragments":["What"]},{"Key":"`ref`s. What","Fragments":["do"]},{"Key":" IMHO","Fragments":["`ref`"]},{"Key":"IMHO `ref`","Fragments":["version"]},{"Key":"`ref` version","Fragments":["can"]},{"Key":"version can","Fragments":["be"]},{"Key":"bit misleading,","Fragments":["because"]},{"Key":"misleading, because","Fragments":["it"]},{"Key":"it suggests","Fragments":["that"]},{"Key":"suggests that","Fragments":["coordination"]},{"Key":"that coordination","Fragments":["is"]},{"Key":"coordination is","Fragments":["required"]},{"Key":"is required","Fragments":["which","by"]},{"Key":"required which","Fragments":["in"]},{"Key":"in turn","Fragments":["usually"]},{"Key":"turn usually","Fragments":["implies"]},{"Key":"usually implies","Fragments":["that"]},{"Key":"are involved.","Fragments":["`atom`"]},{"Key":"involved. `atom`","Fragments":["gives"]},{"Key":"`atom` gives","Fragments":["clear"]},{"Key":"gives clear","Fragments":["signal"]},{"Key":"clear signal","Fragments":["that"]},{"Key":"signal that","Fragments":["the"]},{"Key":"change involves","Fragments":["only"]},{"Key":"involves only","Fragments":["a"]},{"Key":"point with","Fragments":["using"]},{"Key":"using `ordered-set`","Fragments":["-"]},{"Key":"`ordered-set` -","Fragments":["however,"]},{"Key":"- however,","Fragments":["we"]},{"Key":"however, we","Fragments":["are"]},{"Key":"only limited","Fragments":["to"]},{"Key":"to what's","Fragments":["in"]},{"Key":"core here","Fragments":[":)"]},{"Key":"small nit:","Fragments":["`#((:all"]},{"Key":"nit: `#((:all","Fragments":["names)"]},{"Key":"`#((:all names)","Fragments":["%)`"]},{"Key":"names) %)`","Fragments":["-"]},{"Key":"%)` -","Fragments":["`#()`"]},{"Key":"- `#()`","Fragments":["is","?"]},{"Key":"`#()` is","Fragments":["redundant"]},{"Key":"redundant -","Fragments":["set","there's"]},{"Key":"set already","Fragments":["extends"]},{"Key":"already extends","Fragments":["IFn"]},{"Key":"that occurred","Fragments":["to"]},{"Key":"an `ordered-set`","Fragments":["(https://github.com/flatland/ordered)"]},{"Key":"`ordered-set` (https://github.com/flatland/ordered)","Fragments":["would"]},{"Key":"(https://github.com/flatland/ordered) would","Fragments":["simplify"]},{"Key":"the `atom`","Fragments":["avoiding"]},{"Key":"`atom` avoiding","Fragments":["the"]},{"Key":"extra `:last`","Fragments":["field"]},{"Key":"`:last` field","Fragments":["to"]},{"Key":"field to","Fragments":["track"]},{"Key":"last generated","Fragments":["name"]},{"Key":"generated name","Fragments":["it"]},{"Key":"be accessed","Fragments":["with"]},{"Key":"accessed with","Fragments":["`first`."]},{"Key":"Good tip","Fragments":["to"]},{"Key":"tip to","Fragments":["use"]},{"Key":"`not=` as","Fragments":["a"]},{"Key":"function. Now","Fragments":["I"]},{"Key":"found naming","Fragments":["of"]},{"Key":"method arguments","Fragments":["easier"]},{"Key":"arguments easier","Fragments":["to"]},{"Key":"to send","Fragments":["lists"]},{"Key":"send lists","Fragments":["to"]},{"Key":"lists to","Fragments":["anagrams?"]},{"Key":"to anagrams?","Fragments":["and"]},{"Key":"anagrams? and","Fragments":["same?,"]},{"Key":"and same?,","Fragments":["but"]},{"Key":"same?, but","Fragments":["I'm"]},{"Key":"completely satisfied","Fragments":["with"]},{"Key":"satisfied with","Fragments":["the"]},{"Key":"Looking over","Fragments":["some"]},{"Key":"over some","Fragments":["of"]},{"Key":"other submissions","Fragments":["I"]},{"Key":"submissions I","Fragments":["realized","learned"]},{"Key":"that clojure.string","Fragments":["would"]},{"Key":"clojure.string would","Fragments":["simplify"]},{"Key":"and pulling","Fragments":["out"]},{"Key":"conditions makes","Fragments":["it"]},{"Key":"validate on","Fragments":["every"]},{"Key":" re-seq","Fragments":["simplifies","works"]},{"Key":"re-seq simplifies","Fragments":["things"]},{"Key":"1. apply","Fragments":["str"]},{"Key":"apply str","Fragments":["is","many"]},{"Key":"str is","Fragments":["more"]},{"Key":"standard than","Fragments":["using"]},{"Key":"using join","Fragments":["which"]},{"Key":"join which","Fragments":["I"]},{"Key":"see more","Fragments":["when"]},{"Key":"more when","Fragments":["you"]},{"Key":"join with","Fragments":["a"]},{"Key":"a optional","Fragments":["separator"]},{"Key":"optional separator","Fragments":["like"]},{"Key":"separator like","Fragments":["space,"]},{"Key":"like space,","Fragments":["comma."]},{"Key":"(map transform","Fragments":["data))"]},{"Key":"clojure.string requirement","Fragments":["then."]},{"Key":"2. Anonymous","Fragments":["functions"]},{"Key":"Anonymous functions","Fragments":["are","can"]},{"Key":"more commonly","Fragments":["seen"]},{"Key":"commonly seen","Fragments":["in"]},{"Key":"in map","Fragments":["-"]},{"Key":"optional thing","Fragments":["I"]},{"Key":"would say.","Fragments":["If"]},{"Key":"say. If","Fragments":["the"]},{"Key":"place (transform","Fragments":["I"]},{"Key":"(transform I","Fragments":["mean"]},{"Key":"mean in","Fragments":["your"]},{"Key":"case) it","Fragments":["would"]},{"Key":"would certainly","Fragments":["be","be"]},{"Key":"certainly be","Fragments":["better","interested"]},{"Key":"define separate","Fragments":["functions"]},{"Key":"using letfn,","Fragments":["things"]},{"Key":"letfn, things","Fragments":["end"]},{"Key":"things end","Fragments":["up"]},{"Key":"up nested","Fragments":["so"]},{"Key":"nested so","Fragments":["deeply"]},{"Key":"so deeply","Fragments":["with"]},{"Key":"deeply with","Fragments":["letfn."]},{"Key":"think prepared-words","Fragments":["should"]},{"Key":"prepared-words should","Fragments":["be"]},{"Key":"inlined or","Fragments":["made"]},{"Key":"or made","Fragments":["more"]},{"Key":"more expressive.","Fragments":["I"]},{"Key":"expressive. I","Fragments":["don't"]},{"Key":"means for","Fragments":["a"]},{"Key":"be \"prepared\",","Fragments":["so"]},{"Key":"\"prepared\", so","Fragments":["I"]},{"Key":"to jump","Fragments":["up"]},{"Key":"jump up","Fragments":["to"]},{"Key":"definition to","Fragments":["figure"]},{"Key":"out its","Fragments":["purpose."]},{"Key":" find-equals","Fragments":["is"]},{"Key":"find-equals is","Fragments":["a"]},{"Key":"a misleading","Fragments":["name,"]},{"Key":"misleading name,","Fragments":["as"]},{"Key":"name, as","Fragments":["the"]},{"Key":"don't equal","Fragments":["word."]},{"Key":" Simplifies","Fragments":["not="]},{"Key":" Found","Fragments":["much"]},{"Key":"Found much","Fragments":["better"]},{"Key":"better examples","Fragments":["using"]},{"Key":"examples using","Fragments":["clojure's"]},{"Key":"using clojure's","Fragments":["built"]},{"Key":"functions. Much","Fragments":["better"]},{"Key":" into","Fragments":["makes"]},{"Key":"into makes","Fragments":["this"]},{"Key":"this so","Fragments":["much"]},{"Key":"I'm trying","Fragments":["to","to","to"]},{"Key":"write Ruby","Fragments":["in"]},{"Key":"Ruby in","Fragments":["Clojure."]},{"Key":"Clojure. Please,","Fragments":["help"]},{"Key":"Please, help","Fragments":["me"]},{"Key":"help me","Fragments":["make","learn","debug","learn"]},{"Key":"me make","Fragments":["it"]},{"Key":"time writing","Fragments":["clojure","in"]},{"Key":"writing clojure","Fragments":["code"]},{"Key":"REPL, any","Fragments":["feedback"]},{"Key":"If using","Fragments":["recursion"]},{"Key":"using recursion","Fragments":["the"]},{"Key":"recursion the","Fragments":["`loop`"]},{"Key":"the `loop`","Fragments":["/"]},{"Key":"`loop` /","Fragments":["`recur`"]},{"Key":"/ `recur`","Fragments":["is"]},{"Key":"`recur` is","Fragments":["a"]},{"Key":"common combination","Fragments":["(see:"]},{"Key":"combination (see:","Fragments":["http://clojure.org/special_forms#recur)."]},{"Key":"(see: http://clojure.org/special_forms#recur).","Fragments":["Recursion"]},{"Key":"http://clojure.org/special_forms#recur). Recursion","Fragments":["could"]},{"Key":"Recursion could","Fragments":["be"]},{"Key":"be avoided","Fragments":["altogether","if"]},{"Key":"avoided altogether","Fragments":["though"]},{"Key":"altogether though","Fragments":["in"]},{"Key":"though in","Fragments":["favour"]},{"Key":"in favour","Fragments":["of","of"]},{"Key":"favour of","Fragments":["`map`","`(:require"]},{"Key":"simple solution,","Fragments":["could"]},{"Key":"solution, could","Fragments":["maybe"]},{"Key":"could maybe","Fragments":["factor"]},{"Key":"maybe factor","Fragments":["out"]},{"Key":"out `(=","Fragments":["0"]},{"Key":"0 (mod","Fragments":["num"]},{"Key":"(mod num","Fragments":["div)`"]},{"Key":"num div)`","Fragments":["to"]},{"Key":"div)` to","Fragments":["reduce"]},{"Key":"the needing","Fragments":["recursion"]},{"Key":"needing recursion","Fragments":["using"]},{"Key":"recursion using","Fragments":["a"]},{"Key":"a combination","Fragments":["of","of","of"]},{"Key":"* To","Fragments":["test"]},{"Key":"To test","Fragments":["for"]},{"Key":"equality you","Fragments":["can"]},{"Key":"* clojure/string","Fragments":["has"]},{"Key":"clojure/string has","Fragments":["functions"]},{"Key":"functions `lower-case`","Fragments":["and"]},{"Key":"Ran 6","Fragments":["tests"]},{"Key":"6 tests","Fragments":["containing"]},{"Key":"containing 6","Fragments":["assertions."]},{"Key":" 6","Fragments":["failures,"]},{"Key":"6 failures,","Fragments":["0"]},{"Key":"statement rather","Fragments":["than"]},{"Key":"here could","Fragments":["make"]},{"Key":"it! I've","Fragments":["got"]},{"Key":"just two","Fragments":["minor"]},{"Key":"two minor","Fragments":["comments"]},{"Key":"minor comments","Fragments":["for"]},{"Key":"Notice that","Fragments":["whenever"]},{"Key":"that whenever","Fragments":["you"]},{"Key":"whenever you","Fragments":["use"]},{"Key":"a `filter`","Fragments":["with"]},{"Key":"a negated","Fragments":["predicate,"]},{"Key":"negated predicate,","Fragments":["like"]},{"Key":"predicate, like","Fragments":["in"]},{"Key":"in `silence?`,","Fragments":["you"]},{"Key":"`remove` with","Fragments":["the"]},{"Key":"go a","Fragments":["bit","little"]},{"Key":"bit further","Fragments":["down"]},{"Key":"further down","Fragments":["the"]},{"Key":"the path","Fragments":["of"]},{"Key":"path of","Fragments":["first-class"]},{"Key":"of first-class","Fragments":["functions"]},{"Key":"first-class functions","Fragments":["and"]},{"Key":"and sequences","Fragments":["try"]},{"Key":"sequences try","Fragments":["to"]},{"Key":"to rethink","Fragments":["`silence?`"]},{"Key":"rethink `silence?`","Fragments":["having"]},{"Key":"`silence?` having","Fragments":["following"]},{"Key":"having following","Fragments":["points"]},{"Key":"following points","Fragments":["in"]},{"Key":"points in","Fragments":["mind:"]},{"Key":"- sets,","Fragments":["e.g."]},{"Key":"sets, e.g.","Fragments":["`#{1"]},{"Key":"e.g. `#{1","Fragments":["2"]},{"Key":"`#{1 2","Fragments":["3}`,"]},{"Key":"2 3}`,","Fragments":["can"]},{"Key":"3}`, can","Fragments":["be"]},{"Key":"used like","Fragments":["functions;"]},{"Key":"like functions;","Fragments":["they"]},{"Key":"functions; they","Fragments":["return"]},{"Key":"return non-nil","Fragments":["if"]},{"Key":"non-nil if","Fragments":["the"]},{"Key":"value they're","Fragments":["called"]},{"Key":"they're called","Fragments":["on"]},{"Key":"on is","Fragments":["an"]},{"Key":"an element","Fragments":["of"]},{"Key":"the set:","Fragments":["`(#{1"]},{"Key":"set: `(#{1","Fragments":["2"]},{"Key":"- we","Fragments":["already"]},{"Key":"we already","Fragments":["know","found"]},{"Key":"that `some`","Fragments":["can"]},{"Key":"`some` can","Fragments":["be"]},{"Key":"reason about","Fragments":["contents"]},{"Key":"about contents","Fragments":["of"]},{"Key":"contents of","Fragments":["a"]},{"Key":"string, and","Fragments":["since"]},{"Key":"function we","Fragments":["can","simply"]},{"Key":"in `some`:","Fragments":["`(some"]},{"Key":"`some`: `(some","Fragments":["#{\\a"]},{"Key":"`(some #{\\a","Fragments":["\\b"]},{"Key":"#{\\a \\b","Fragments":["\\c}"]},{"Key":"- `complement`","Fragments":["is"]},{"Key":"`complement` is","Fragments":["a"]},{"Key":"which given","Fragments":["a"]},{"Key":"returns its","Fragments":["negation:"]},{"Key":"its negation:","Fragments":["`(complement"]},{"Key":"negation: `(complement","Fragments":["even?)`"]},{"Key":"`(complement even?)`","Fragments":["is"]},{"Key":"even?)` is","Fragments":["`odd?`."]},{"Key":"Can those","Fragments":["facts"]},{"Key":"those facts","Fragments":["be"]},{"Key":"facts be","Fragments":["combined"]},{"Key":"combined to","Fragments":["rewrite"]},{"Key":"Oh, sorry","Fragments":["-)"]},{"Key":"There's only","Fragments":["one"]},{"Key":"of prime","Fragments":["factors."]},{"Key":"prime factors.","Fragments":["We"]},{"Key":"factors. We","Fragments":["can"]},{"Key":"simply finding","Fragments":["the"]},{"Key":"finding the","Fragments":["smallest","sequence"]},{"Key":"the smallest","Fragments":["divisor","set"]},{"Key":"smallest divisor","Fragments":["each"]},{"Key":"divisor each","Fragments":["time,"]},{"Key":"each time,","Fragments":["and"]},{"Key":"time, and","Fragments":["then"]},{"Key":"then recursing","Fragments":["on"]},{"Key":"recursing on","Fragments":["the"]},{"Key":"Very busy","Fragments":["at"]},{"Key":"busy at","Fragments":["this"]},{"Key":"this time,","Fragments":["so"]},{"Key":"very active","Fragments":["on"]},{"Key":"active on","Fragments":["exercism.io"]},{"Key":"on exercism.io","Fragments":["these"]},{"Key":"exercism.io these","Fragments":["days."]},{"Key":"more time,","Fragments":["I'll"]},{"Key":"time, I'll","Fragments":["try"]},{"Key":" s","Fragments":["t"]},{"Key":" trying","Fragments":["out"]},{"Key":"trying out","Fragments":["macros"]},{"Key":"indentation is","Fragments":["a"]},{"Key":"bit off,","Fragments":["fixing"]},{"Key":"off, fixing","Fragments":["that"]},{"Key":"fixing that","Fragments":["will"]},{"Key":"readable. Also,","Fragments":["calling"]},{"Key":"Also, calling","Fragments":["into"]},{"Key":"calling into","Fragments":["Java"]},{"Key":"into Java","Fragments":["seems","eg:"]},{"Key":"Java seems","Fragments":["unessecary,"]},{"Key":"seems unessecary,","Fragments":["a"]},{"Key":"unessecary, a","Fragments":["better"]},{"Key":"solution might","Fragments":["be","not","be"]},{"Key":"Clojure's regex","Fragments":["capabilities."]},{"Key":"Didn't read","Fragments":["to"]},{"Key":"read to","Fragments":["spec"]},{"Key":"to spec","Fragments":["properly"]},{"Key":"spec properly","Fragments":["-"]},{"Key":"properly -","Fragments":["this"]},{"Key":"this goes","Fragments":["Roman-\u003eArabic."]},{"Key":"goes Roman-\u003eArabic.","Fragments":["Figured"]},{"Key":"Roman-\u003eArabic. Figured","Fragments":["I"]},{"Key":"Figured I","Fragments":["would"]},{"Key":"would push","Fragments":["it"]},{"Key":"Unfortunately, though","Fragments":["it"]},{"Key":"it compiles,","Fragments":["having"]},{"Key":"compiles, having","Fragments":["`def`s"]},{"Key":"having `def`s","Fragments":["or"]},{"Key":"`def`s or","Fragments":["`defns`"]},{"Key":"or `defns`","Fragments":["nested"]},{"Key":"`defns` nested","Fragments":["inside"]},{"Key":"nested inside","Fragments":["each"]},{"Key":"other doesn't","Fragments":["work"]},{"Key":"might expect.","Fragments":["They"]},{"Key":"expect. They","Fragments":["end"]},{"Key":"They end","Fragments":["up"]},{"Key":"as top","Fragments":["level"]},{"Key":"level bindings.","Fragments":["(I"]},{"Key":"bindings. (I","Fragments":["assume"]},{"Key":"(I assume","Fragments":["you"]},{"Key":"assume you","Fragments":["want"]},{"Key":"want local","Fragments":["bindings"]},{"Key":"local bindings","Fragments":["only"]},{"Key":"bindings only","Fragments":["for"]},{"Key":"your nested","Fragments":["`def`s)."]},{"Key":" Instead,","Fragments":["try"]},{"Key":"Instead, try","Fragments":["using"]},{"Key":"bit, forgot","Fragments":["about"]},{"Key":"using Java,","Fragments":["seems"]},{"Key":"Java, seems","Fragments":["to"]},{"Key":"easier and","Fragments":["a"]},{"Key":"bit faster.","Fragments":["Wish"]},{"Key":"faster. Wish","Fragments":["I"]},{"Key":"Wish I","Fragments":["could"]},{"Key":"use 2N","Fragments":["instead"]},{"Key":"2N instead","Fragments":["of"]},{"Key":"of (BigInteger.","Fragments":["\"2\")"]},{"Key":"(BigInteger. \"2\")","Fragments":["though."]},{"Key":"duplication on","Fragments":["\"bottles"]},{"Key":"on \"bottles","Fragments":["of"]},{"Key":"\"bottles of","Fragments":["beer"]},{"Key":"the wall\".","Fragments":["Have"]},{"Key":"wall\". Have","Fragments":["you"]},{"Key":"considered interpolating","Fragments":["\"n"]},{"Key":"interpolating \"n","Fragments":["bottles"]},{"Key":"\"n bottles","Fragments":["of"]},{"Key":"beer\" somehow","Fragments":["so"]},{"Key":"somehow so","Fragments":["that"]},{"Key":"the beer","Fragments":["on"]},{"Key":"the wall","Fragments":["line"]},{"Key":"wall line","Fragments":["only"]},{"Key":"line only","Fragments":["needs"]},{"Key":"hash-map instead","Fragments":["of"]},{"Key":"of replace","Fragments":["to"]},{"Key":"to dynamically","Fragments":["replace","generate"]},{"Key":"dynamically replace","Fragments":["each"]},{"Key":"replace each","Fragments":["nucleotide."]},{"Key":" adds","Fragments":[":double"]},{"Key":"adds :double","Fragments":[":triple"]},{"Key":":double :triple","Fragments":["multipliers"]},{"Key":"the conciseness","Fragments":["of","of"]},{"Key":"conciseness of","Fragments":["this","this"]},{"Key":"good aside","Fragments":["from"]},{"Key":"aside from","Fragments":["the"]},{"Key":"the %c's","Fragments":["at"]},{"Key":"%c's at","Fragments":["the"]},{"Key":"end. Have","Fragments":["you"]},{"Key":"considered iteratively","Fragments":["adding"]},{"Key":"iteratively adding","Fragments":["0's"]},{"Key":"adding 0's","Fragments":["10"]},{"Key":"0's 10","Fragments":["times?"]},{"Key":"Hi @lucinda","Fragments":["-"]},{"Key":"@lucinda -","Fragments":["thanks"]},{"Key":"the review.","Fragments":["I"]},{"Key":"review. I","Fragments":["have"]},{"Key":"the redundancy","Fragments":["and"]},{"Key":"used cl-format","Fragments":["to"]},{"Key":"cl-format to","Fragments":["figure"]},{"Key":"the pluralization","Fragments":["etc."]},{"Key":"Thanks @nicola","Fragments":["-"]},{"Key":"@nicola -","Fragments":["I"]},{"Key":"changed all","Fragments":["these"]},{"Key":"is correct","Fragments":["and"]},{"Key":"correct and","Fragments":["technically","acceptable,"]},{"Key":"and technically","Fragments":["good."]},{"Key":"technically good.","Fragments":["A"]},{"Key":"few nits,","Fragments":["mostly"]},{"Key":"nits, mostly","Fragments":["Clojure"]},{"Key":"mostly Clojure","Fragments":["coding-style"]},{"Key":"Clojure coding-style","Fragments":["related:"]},{"Key":" +","Fragments":["the","instead","or","`atleast-one-ascii?`","In","The","So","Is"]},{"Key":"+ the","Fragments":["var"]},{"Key":"the var","Fragments":["`ans`"]},{"Key":"var `ans`","Fragments":["is"]},{"Key":"`ans` is","Fragments":["unused"]},{"Key":"is unused","Fragments":["and"]},{"Key":"unused and","Fragments":["should"]},{"Key":"and should","Fragments":["be"]},{"Key":"+ instead","Fragments":["of"]},{"Key":"mutable var","Fragments":["`words`,"]},{"Key":"var `words`,","Fragments":["use"]},{"Key":"`words`, use","Fragments":["a"]},{"Key":"let expression","Fragments":["to"]},{"Key":"+ or","Fragments":["better"]},{"Key":"or better","Fragments":["yet,"]},{"Key":"better yet,","Fragments":["extract"]},{"Key":"yet, extract","Fragments":["this"]},{"Key":"extract this","Fragments":["code"]},{"Key":"code out","Fragments":["into"]},{"Key":"that from","Fragments":["here."]},{"Key":"from here.","Fragments":["This"]},{"Key":"here. This","Fragments":["way,"]},{"Key":"This way,","Fragments":["you","because"]},{"Key":"remove creating","Fragments":["vars."]},{"Key":"write `yell?`","Fragments":["-"]},{"Key":"`yell?` -","Fragments":["still"]},{"Key":"- still","Fragments":["without"]},{"Key":"still without","Fragments":["using"]},{"Key":"of `upper-case`","Fragments":["*and*"]},{"Key":"`upper-case` *and*","Fragments":["`lower-case`."]},{"Key":"first lines","Fragments":["of"]},{"Key":"I ever","Fragments":["wrote."]},{"Key":"ever wrote.","Fragments":["Feedback"]},{"Key":"wrote. Feedback","Fragments":["very"]},{"Key":"Feedback very","Fragments":["welcome!"]},{"Key":"very welcome!","Fragments":[":)"]},{"Key":"the `(=","Fragments":["dna-nucleotide","str"]},{"Key":"`(= dna-nucleotide","Fragments":["...`"]},{"Key":"dna-nucleotide ...`","Fragments":["redundancy"]},{"Key":"...` redundancy","Fragments":["using"]},{"Key":"redundancy using","Fragments":["`condp`"]},{"Key":"using `condp`","Fragments":["instead"]},{"Key":"`condp` instead","Fragments":["of"]},{"Key":"of `cond`.","Fragments":["http://clojuredocs.org/clojure_core/clojure.core/condp"]},{"Key":"your dns","Fragments":["def"]},{"Key":"My intention","Fragments":["is"]},{"Key":" `-\u003ewords`","Fragments":["means"]},{"Key":"`-\u003ewords` means","Fragments":["converting"]},{"Key":"means converting","Fragments":["a"]},{"Key":"converting a","Fragments":["thing","string","string"]},{"Key":"to words","Fragments":["maybe","really"]},{"Key":"words maybe","Fragments":["`str-\u003ewords`"]},{"Key":"maybe `str-\u003ewords`","Fragments":["would"]},{"Key":"`str-\u003ewords` would","Fragments":["be"]},{"Key":"your `nucleotide?`","Fragments":["function"]},{"Key":"`nucleotide?` function","Fragments":["by"]},{"Key":"using `some`","Fragments":["to"]},{"Key":"an item","Fragments":["is"]},{"Key":"item is","Fragments":["present"]},{"Key":"(some #{chr}","Fragments":["'(\\A"]},{"Key":"#{chr} '(\\A","Fragments":["\\T"]},{"Key":"'(\\A \\T","Fragments":["\\C"]},{"Key":"\\T \\C","Fragments":["\\G"]},{"Key":" (nucleotide?","Fragments":["\\A)"]},{"Key":"(nucleotide? \\A)","Fragments":[";"]},{"Key":"Java functions","Fragments":["and"]},{"Key":"other white","Fragments":["space"]},{"Key":"white space","Fragments":["characters","on"]},{"Key":"space characters","Fragments":["besides"]},{"Key":"characters besides","Fragments":["space"]},{"Key":"besides space","Fragments":["and"]},{"Key":"space and","Fragments":["tab","helps"]},{"Key":" check","Fragments":["out"]},{"Key":"out alphagram","Fragments":["on"]},{"Key":"alphagram on","Fragments":["wikipedia"]},{"Key":"good, with","Fragments":["one"]},{"Key":"minor minor","Fragments":["nit..."]},{"Key":"minor nit...","Fragments":["is"]},{"Key":"nit... is","Fragments":["the"]},{"Key":"clojure convention","Fragments":["for"]},{"Key":"of methods","Fragments":["named"]},{"Key":"named with","Fragments":["`-\u003e`"]},{"Key":"`-\u003e` arrows","Fragments":["that"]},{"Key":"arrows that","Fragments":["they"]},{"Key":"they convert","Fragments":["one"]},{"Key":"convert one","Fragments":["type"]},{"Key":"one type","Fragments":["to"]},{"Key":"type to","Fragments":["another?"]},{"Key":"to another?","Fragments":["`int-\u003estr`"]},{"Key":"another? `int-\u003estr`","Fragments":["for"]},{"Key":"`int-\u003estr` for","Fragments":["example?"]},{"Key":"for example?","Fragments":["I'm"]},{"Key":"example? I'm","Fragments":["not"]},{"Key":"this prefix","Fragments":["is"]},{"Key":"needed on","Fragments":["the"]},{"Key":"the `-\u003ewords`","Fragments":["function."]},{"Key":"Very concise","Fragments":["solution."]},{"Key":"concise solution.","Fragments":["Though"]},{"Key":"solution. Though","Fragments":["in"]},{"Key":"opinion some","Fragments":["definitions"]},{"Key":"definitions would","Fragments":["make"]},{"Key":"explicit :","Fragments":["dna?"]},{"Key":"Is converting","Fragments":["a"]},{"Key":"words really","Fragments":["a"]},{"Key":"a *type*","Fragments":["conversion"]},{"Key":"*type* conversion","Fragments":["though?"]},{"Key":"the sense","Fragments":["you"]},{"Key":"sense you","Fragments":["describe"]},{"Key":"describe it,","Fragments":["almost"]},{"Key":"it, almost","Fragments":["*any*"]},{"Key":"almost *any*","Fragments":["function"]},{"Key":"*any* function","Fragments":["qualifies"]},{"Key":"function qualifies","Fragments":["as"]},{"Key":"qualifies as","Fragments":["converting"]},{"Key":"as converting","Fragments":["something"]},{"Key":"converting something","Fragments":["to"]},{"Key":"something else..","Fragments":["So"]},{"Key":"else.. So","Fragments":["your"]},{"Key":"your word-count","Fragments":["function"]},{"Key":"word-count function","Fragments":["could","from","to"]},{"Key":"called `text-\u003eword-count`,","Fragments":["and"]},{"Key":"`text-\u003eword-count`, and","Fragments":["`lower-case`"]},{"Key":"and `lower-case`","Fragments":["would"]},{"Key":"`lower-case` would","Fragments":["be"]},{"Key":"called `-\u003elower-case`.","Fragments":["I"]},{"Key":"`-\u003elower-case`. I","Fragments":["think"]},{"Key":"fact a","Fragments":["function"]},{"Key":"function converts","Fragments":["some"]},{"Key":"converts some","Fragments":["input"]},{"Key":"some input","Fragments":["into"]},{"Key":"some output","Fragments":["is"]},{"Key":"output is","Fragments":["so"]},{"Key":"so baked","Fragments":["in"]},{"Key":"baked in","Fragments":["it"]},{"Key":"doesn't need","Fragments":["to","to"]},{"Key":"made explicit","Fragments":["in"]},{"Key":"this immensely","Fragments":["with"]},{"Key":"immensely with","Fragments":["`map`,"]},{"Key":"with `map`,","Fragments":["which"]},{"Key":"`map`, which","Fragments":["will"]},{"Key":"will stop","Fragments":["iterating"]},{"Key":"stop iterating","Fragments":["if"]},{"Key":"iterating if","Fragments":["one"]},{"Key":"the collections","Fragments":["is"]},{"Key":"collections is","Fragments":["exhausted."]},{"Key":"e.g. you","Fragments":["can"]},{"Key":"get `true`","Fragments":["or"]},{"Key":"`true` or","Fragments":["`false`"]},{"Key":"or `false`","Fragments":["for"]},{"Key":"`false` for","Fragments":["whether"]},{"Key":"for whether","Fragments":["each"]},{"Key":"whether each","Fragments":["entry"]},{"Key":"entry matches","Fragments":["its"]},{"Key":"matches its","Fragments":["partner"]},{"Key":"its partner","Fragments":["with"]},{"Key":"partner with","Fragments":["this"]},{"Key":"(map not=","Fragments":["\"abcde\"","\"abcde\"","\"abcde\"","seq1"]},{"Key":"not= \"abcde\"","Fragments":["\"zbcd\")","\"zbcd\")","\"zbcd\")))"]},{"Key":"; (true","Fragments":["false","false"]},{"Key":"(true false","Fragments":["false","false"]},{"Key":"false false","Fragments":["false)","false)","false))"]},{"Key":"improvement, but","Fragments":["still"]},{"Key":"still has","Fragments":["a"]},{"Key":"of misdirection","Fragments":["-"]},{"Key":"misdirection -","Fragments":["we're"]},{"Key":"- we're","Fragments":["checking"]},{"Key":"we're checking","Fragments":["to"]},{"Key":"the entries","Fragments":["aren't"]},{"Key":"entries aren't","Fragments":["equal,"]},{"Key":"aren't equal,","Fragments":["so"]},{"Key":"equal, so","Fragments":["let's"]},{"Key":"let's reflect","Fragments":["that"]},{"Key":"using `not=`,","Fragments":["as"]},{"Key":"`not=`, as","Fragments":["in"]},{"Key":"Using the","Fragments":["[identity][]","threading"]},{"Key":"the [identity][]","Fragments":["method"]},{"Key":"[identity][] method","Fragments":["as"]},{"Key":"method as","Fragments":["an"]},{"Key":"to `filter`,","Fragments":["we"]},{"Key":"`filter`, we","Fragments":["can"]},{"Key":"get only","Fragments":["truthy"]},{"Key":"only truthy","Fragments":["values:"]},{"Key":" [identity]:","Fragments":["http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/identity"]},{"Key":"(filter identity","Fragments":["'(true","(map","(map"]},{"Key":"identity '(true","Fragments":["false"]},{"Key":"'(true false","Fragments":["false"]},{"Key":"And throwing","Fragments":["this"]},{"Key":"into `count`","Fragments":["gives"]},{"Key":"`count` gives","Fragments":["us"]},{"Key":"gives us","Fragments":["the"]},{"Key":"us the","Fragments":["number"]},{"Key":"of entries","Fragments":["in"]},{"Key":"entries in","Fragments":["the"]},{"Key":"the list,","Fragments":["which"]},{"Key":"list, which","Fragments":["is"]},{"Key":"what we're","Fragments":["looking"]},{"Key":" (count","Fragments":["'(true))","(filter","(filter"]},{"Key":" Throwing","Fragments":["these"]},{"Key":"Throwing these","Fragments":["all"]},{"Key":"these all","Fragments":["together,"]},{"Key":"all together,","Fragments":["we"]},{"Key":"together, we","Fragments":["get"]},{"Key":"we get","Fragments":["an"]},{"Key":"get an","Fragments":["answer"]},{"Key":"an answer","Fragments":["that's"]},{"Key":"answer that's","Fragments":["the"]},{"Key":"same length,","Fragments":["but"]},{"Key":"length, but","Fragments":["feels"]},{"Key":"but feels","Fragments":["more"]},{"Key":"(count (filter","Fragments":["identity","identity"]},{"Key":"identity (map","Fragments":["not=","not="]},{"Key":"a detailed","Fragments":["response,"]},{"Key":"detailed response,","Fragments":["@clotilde."]},{"Key":"response, @clotilde.","Fragments":["I"]},{"Key":"@clotilde. I","Fragments":["had"]},{"Key":"had figured","Fragments":["out"]},{"Key":"the filter,","Fragments":["not="]},{"Key":"filter, not=","Fragments":["and"]},{"Key":"not= and","Fragments":["count"]},{"Key":"count part","Fragments":["but"]},{"Key":"part but","Fragments":["didn't"]},{"Key":"the identity","Fragments":["part."]},{"Key":"identity part.","Fragments":["I"]},{"Key":"again today","Fragments":["when"]},{"Key":"today when","Fragments":["I"]},{"Key":"saw your","Fragments":["response.","code."]},{"Key":"your response.","Fragments":["The"]},{"Key":"response. The","Fragments":["elegance,"]},{"Key":"The elegance,","Fragments":["simplicity"]},{"Key":"elegance, simplicity","Fragments":["and"]},{"Key":"simplicity and","Fragments":["hence"]},{"Key":"and hence","Fragments":["the","really"]},{"Key":"the beauty","Fragments":["of"]},{"Key":"beauty of","Fragments":["Clojure"]},{"Key":"Clojure continues","Fragments":["to"]},{"Key":"continues to","Fragments":["amaze"]},{"Key":"to amaze","Fragments":["me!"]},{"Key":"In `grade`:","Fragments":["there"]},{"Key":"`grade`: there","Fragments":["is"]},{"Key":"looks up","Fragments":["keys"]},{"Key":"up keys","Fragments":["in"]},{"Key":"keys in","Fragments":["a"]},{"Key":"can default","Fragments":["to"]},{"Key":"default to","Fragments":["a"]},{"Key":"value when","Fragments":["the"]},{"Key":"not found.","Fragments":["Using"]},{"Key":"found. Using","Fragments":["that"]},{"Key":"will simplify","Fragments":["the","the"]},{"Key":"the grade","Fragments":["method","order,","function)."]},{"Key":"grade method","Fragments":["a"]},{"Key":"method a","Fragments":["lot."]},{"Key":" Similarly,","Fragments":["in"]},{"Key":"Similarly, in","Fragments":["`add`:"]},{"Key":"in `add`:","Fragments":["There"]},{"Key":"`add`: There","Fragments":["are"]},{"Key":"are multiple","Fragments":["methods"]},{"Key":"multiple methods","Fragments":["that"]},{"Key":"to \"merge\"","Fragments":["existing"]},{"Key":"\"merge\" existing","Fragments":["key/vals"]},{"Key":"existing key/vals","Fragments":["into"]},{"Key":"key/vals into","Fragments":["a"]},{"Key":"by concatenating","Fragments":["existing"]},{"Key":"concatenating existing","Fragments":["the"]},{"Key":"existing the","Fragments":["values."]},{"Key":"the values.","Fragments":["This"]},{"Key":"values. This","Fragments":["will"]},{"Key":"the add","Fragments":["method."]},{"Key":"In essence,","Fragments":["you"]},{"Key":"essence, you","Fragments":["won't"]},{"Key":"different if-else","Fragments":["branches"]},{"Key":"if-else branches","Fragments":["in"]},{"Key":"branches in","Fragments":["these"]},{"Key":"these two","Fragments":["methods.","functions","parts"]},{"Key":"you're committed","Fragments":["to"]},{"Key":"committed to","Fragments":["using"]},{"Key":"using regexes,","Fragments":["it"]},{"Key":"regexes, it","Fragments":["may"]},{"Key":"test not","Fragments":["for"]},{"Key":"not for","Fragments":["invalid"]},{"Key":"invalid values","Fragments":["but"]},{"Key":"values but","Fragments":["for"]},{"Key":"valid ones.","Fragments":["Lines"]},{"Key":"ones. Lines","Fragments":["14-15"]},{"Key":"Lines 14-15","Fragments":["could"]},{"Key":"14-15 could","Fragments":["be"]},{"Key":"changed to","Fragments":["`(re-seq"]},{"Key":"to `(re-seq","Fragments":["#\"[A-z0-9]\""]},{"Key":"`(re-seq #\"[A-z0-9]\"","Fragments":["phrase)`,"]},{"Key":"#\"[A-z0-9]\" phrase)`,","Fragments":["which"]},{"Key":"phrase)`, which","Fragments":["has"]},{"Key":"the advantages","Fragments":["of"]},{"Key":"advantages of","Fragments":["being","functional"]},{"Key":"being shorter","Fragments":["and"]},{"Key":"and excluding","Fragments":["a"]},{"Key":"excluding a","Fragments":["larger"]},{"Key":"larger set","Fragments":["of"]},{"Key":"of special","Fragments":["characters."]},{"Key":"that `re-seq`","Fragments":["returns"]},{"Key":"`re-seq` returns","Fragments":["nil","a","nil"]},{"Key":"nil (which","Fragments":["is"]},{"Key":"is false-y)","Fragments":["when"]},{"Key":"false-y) when","Fragments":["no"]},{"Key":"when no","Fragments":["matches"]},{"Key":"matches are","Fragments":["found."]},{"Key":"are found.","Fragments":["So"]},{"Key":"found. So","Fragments":["there"]},{"Key":"So there","Fragments":["is"]},{"Key":"the `atleast-one-ascii?`","Fragments":["method","fn"]},{"Key":"`atleast-one-ascii?` method","Fragments":["at"]},{"Key":"method at","Fragments":["all"]},{"Key":"Thanks @bethany!","Fragments":["Very"]},{"Key":"@bethany! Very","Fragments":["nice"]},{"Key":"guess this","Fragments":["could","won't"]},{"Key":"single loop,","Fragments":["but"]},{"Key":"loop, but","Fragments":["since"]},{"Key":"since we","Fragments":["already"]},{"Key":"already found","Fragments":["the"]},{"Key":"factors a","Fragments":["few"]},{"Key":"few exercises","Fragments":["back.."]},{"Key":" Overriding","Fragments":["list"]},{"Key":"Overriding list","Fragments":["and"]},{"Key":"list and","Fragments":["underscores"]},{"Key":"and underscores","Fragments":["in"]},{"Key":"underscores in","Fragments":["function"]},{"Key":"function names?","Fragments":["blech."]},{"Key":"The explanation","Fragments":["for"]},{"Key":"explanation for","Fragments":["this"]},{"Key":"tricky. It's","Fragments":["talking"]},{"Key":"It's talking","Fragments":["about"]},{"Key":"the score","Fragments":["as"]},{"Key":"score as","Fragments":["a"]},{"Key":"to @fidel","Fragments":["'s"]},{"Key":"@fidel 's","Fragments":["idea"]},{"Key":"'s idea","Fragments":["for"]},{"Key":"Overall, looks","Fragments":["good"]},{"Key":"+ `atleast-one-ascii?`","Fragments":["can"]},{"Key":"`atleast-one-ascii?` can","Fragments":["be"]},{"Key":"good regex","Fragments":["which"]},{"Key":"regex which","Fragments":["filters"]},{"Key":"which filters","Fragments":["out"]},{"Key":"filters out","Fragments":["ascii"]},{"Key":"out ascii","Fragments":["characters"]},{"Key":"ascii characters","Fragments":["(a-z,"]},{"Key":"characters (a-z,","Fragments":["A-Z)."]},{"Key":"(a-z, A-Z).","Fragments":["This"]},{"Key":"A-Z). This","Fragments":["will"]},{"Key":"will remove","Fragments":["the","the"]},{"Key":"the `ascii-letter?`","Fragments":["fn"]},{"Key":"`ascii-letter?` fn","Fragments":["too."]},{"Key":"+ In","Fragments":["`yelling?`,"]},{"Key":"In `yelling?`,","Fragments":["if"]},{"Key":"`yelling?`, if","Fragments":["you"]},{"Key":"first filter","Fragments":["all"]},{"Key":"filter all","Fragments":["the"]},{"Key":"ascii chars","Fragments":["and"]},{"Key":"chars and","Fragments":["then"]},{"Key":"then run","Fragments":["the"]},{"Key":"`(= str","Fragments":["(uppercase"]},{"Key":"str (uppercase","Fragments":["str))`"]},{"Key":"(uppercase str))`","Fragments":["case"]},{"Key":"str))` case","Fragments":["I"]},{"Key":"think it'll","Fragments":["make","get"]},{"Key":"it'll make","Fragments":["it"]},{"Key":"Thanks @rashad!","Fragments":["I"]},{"Key":"@rashad! I","Fragments":["have"]},{"Key":"have incorporated","Fragments":["the"]},{"Key":"expression comment.","Fragments":["I"]},{"Key":"comment. I","Fragments":["prefer"]},{"Key":"prefer yelling?","Fragments":["to"]},{"Key":"yelling? to","Fragments":["use"]},{"Key":"two step","Fragments":["process"]},{"Key":"step process","Fragments":["because"]},{"Key":"process because","Fragments":["it"]},{"Key":"it reflects","Fragments":["my"]},{"Key":"reflects my","Fragments":["understanding"]},{"Key":"problem. For","Fragments":["instance,"]},{"Key":"instance, I","Fragments":["don't"]},{"Key":"why \"4?\"","Fragments":["and"]},{"Key":"\"4?\" and","Fragments":["\"1,"]},{"Key":"and \"1,","Fragments":["2,"]},{"Key":"2, 3\"","Fragments":["are"]},{"Key":"3\" are","Fragments":["not"]},{"Key":"is near","Fragments":["perfect,"]},{"Key":"near perfect,","Fragments":["IMO."]},{"Key":"perfect, IMO.","Fragments":["There"]},{"Key":"IMO. There","Fragments":["is"]},{"Key":"is scope","Fragments":["in"]},{"Key":"scope in","Fragments":["the"]},{"Key":"`atleast-one-ascii?` fn","Fragments":["to"]},{"Key":"fn to","Fragments":["remove"]},{"Key":"the `not,","Fragments":["nil,"]},{"Key":"`not, nil,","Fragments":["first`"]},{"Key":"nil, first`","Fragments":["parts."]},{"Key":"first` parts.","Fragments":["`re-seq`"]},{"Key":"parts. `re-seq`","Fragments":["returns"]},{"Key":"seq. There","Fragments":["is"]},{"Key":"a fn","Fragments":["in","from"]},{"Key":"fn in","Fragments":["core"]},{"Key":"you if","Fragments":["a","you"]},{"Key":"collection (including","Fragments":["a"]},{"Key":"(including a","Fragments":["seq)"]},{"Key":"a seq)","Fragments":["is"]},{"Key":"seq) is","Fragments":["empty"]},{"Key":"problem. I","Fragments":["would"]},{"Key":"love feedback","Fragments":["in"]},{"Key":"feedback in","Fragments":["my"]},{"Key":"my exercises","Fragments":["too"]},{"Key":"exercises too","Fragments":[";)"]},{"Key":"is redundant,","Fragments":["IMO."]},{"Key":"redundant, IMO.","Fragments":["You"]},{"Key":"IMO. You","Fragments":["can"]},{"Key":"use characters","Fragments":["everywhere"]},{"Key":"characters everywhere","Fragments":["with"]},{"Key":"(def dna-to-rna","Fragments":["{\\G"]},{"Key":"dna-to-rna {\\G","Fragments":["\\C,"]},{"Key":"{\\G \\C,","Fragments":["\\C"]},{"Key":"\\C, \\C","Fragments":["\\G,\\T"]},{"Key":"\\C \\G,\\T","Fragments":["\\A,\\A"]},{"Key":"\\G,\\T \\A,\\A","Fragments":["\\U})"]},{"Key":"is unusual","Fragments":["that"]},{"Key":"unusual that","Fragments":["a"]},{"Key":"named validate-something","Fragments":["throws"]},{"Key":"validate-something throws","Fragments":["an"]},{"Key":"throws an","Fragments":["error."]},{"Key":"an error.","Fragments":["Maybe"]},{"Key":"error. Maybe","Fragments":["the"]},{"Key":"should change","Fragments":["or"]},{"Key":"change or","Fragments":["the"]},{"Key":"validate function","Fragments":["should"]},{"Key":"that threw","Fragments":["me"]},{"Key":"me off","Fragments":["for"]},{"Key":"off for","Fragments":["a"]},{"Key":"bit was","Fragments":["`seq`."]},{"Key":"was `seq`.","Fragments":["Since"]},{"Key":"`seq`. Since","Fragments":["that's"]},{"Key":"Since that's","Fragments":["a"]},{"Key":"a heavily","Fragments":["used"]},{"Key":"heavily used","Fragments":["clojure"]},{"Key":"used clojure","Fragments":["fn,"]},{"Key":"clojure fn,","Fragments":["perhaps"]},{"Key":"fn, perhaps","Fragments":["rename"]},{"Key":"perhaps rename","Fragments":["your"]},{"Key":"your val","Fragments":["to"]},{"Key":"val to","Fragments":["something"]},{"Key":"like `dna-seq`","Fragments":["or"]},{"Key":"but left","Fragments":["it"]},{"Key":"of laziness.","Fragments":["I"]},{"Key":"laziness. I","Fragments":["have"]},{"Key":"to ```acc```","Fragments":["which"]},{"Key":"```acc``` which","Fragments":["I"]},{"Key":"a canonical","Fragments":["variable"]},{"Key":"canonical variable","Fragments":["name"]},{"Key":"an accumulator","Fragments":["with"]},{"Key":" Exactly.","Fragments":["`acc`"]},{"Key":"Exactly. `acc`","Fragments":["is"]},{"Key":"`acc` is","Fragments":["very"]},{"Key":"very apt","Fragments":[":)"]},{"Key":"Thanks @marvin","Fragments":["-"]},{"Key":"@marvin -","Fragments":["you"]},{"Key":"are right","Fragments":["-","that"]},{"Key":"the str-to-char","Fragments":["translation"]},{"Key":"str-to-char translation","Fragments":["was"]},{"Key":"translation was","Fragments":["redundant."]},{"Key":"redundant. I","Fragments":["fixed"]},{"Key":"of validation","Fragments":["functions."]},{"Key":"validation functions.","Fragments":["My"]},{"Key":"functions. My","Fragments":["convention"]},{"Key":"My convention","Fragments":["comes"]},{"Key":"convention comes","Fragments":["from"]},{"Key":"Ruby world,","Fragments":["where"]},{"Key":"world, where","Fragments":["predicate"]},{"Key":"where predicate","Fragments":["functions"]},{"Key":"functions (those","Fragments":["that"]},{"Key":"(those that","Fragments":["return"]},{"Key":"a true/false-y","Fragments":["value)"]},{"Key":"true/false-y value)","Fragments":["end"]},{"Key":"value) end","Fragments":["with"]},{"Key":"a `?`,","Fragments":["e.g."]},{"Key":"`?`, e.g.","Fragments":["`valid-dna-starnd?`."]},{"Key":"e.g. `valid-dna-starnd?`.","Fragments":["`validate`"]},{"Key":"`valid-dna-starnd?`. `validate`","Fragments":["in"]},{"Key":"`validate` in","Fragments":["the"]},{"Key":"Ruby world","Fragments":["would"]},{"Key":"world would","Fragments":["imply"]},{"Key":"would imply","Fragments":["that"]},{"Key":"will perform","Fragments":["the"]},{"Key":"validation action","Fragments":["(perhaps"]},{"Key":"action (perhaps","Fragments":["by"]},{"Key":"(perhaps by","Fragments":["calling"]},{"Key":"calling `valid?`)","Fragments":["and"]},{"Key":"`valid?`) and","Fragments":["return"]},{"Key":"false or","Fragments":["throw","nil"]},{"Key":"or throw","Fragments":["an"]},{"Key":"error if","Fragments":["it's"]},{"Key":"it's invalid.","Fragments":["`validate!`"]},{"Key":"invalid. `validate!`","Fragments":["would"]},{"Key":"`validate!` would","Fragments":["be"]},{"Key":"a fine","Fragments":["choice"]},{"Key":"fine choice","Fragments":["too."]},{"Key":"Since Clojure","Fragments":["also"]},{"Key":"have `?`","Fragments":["in"]},{"Key":"`?` in","Fragments":["method"]},{"Key":"in method","Fragments":["names,"]},{"Key":"method names,","Fragments":["I","very"]},{"Key":"names, I","Fragments":["went"]},{"Key":"Just consulted","Fragments":["the"]},{"Key":"consulted the","Fragments":["Clojure"]},{"Key":"guide [1].","Fragments":["It"]},{"Key":"[1]. It","Fragments":["seems"]},{"Key":"similar convention","Fragments":["exists"]},{"Key":"convention exists","Fragments":["in"]},{"Key":"exists in","Fragments":["the"]},{"Key":"Clojure world.","Fragments":["Predicate"]},{"Key":"world. Predicate","Fragments":["functions"]},{"Key":"Predicate functions","Fragments":["end"]},{"Key":"functions end","Fragments":["with"]},{"Key":"`?` (while","Fragments":["`!`"]},{"Key":"(while `!`","Fragments":["is"]},{"Key":"`!` is","Fragments":["for"]},{"Key":"The need","Fragments":["for"]},{"Key":"`cond` clause","Fragments":["could"]},{"Key":"clause could","Fragments":["be"]},{"Key":"map. Applying","Fragments":["`str`"]},{"Key":"Applying `str`","Fragments":["to"]},{"Key":"`str` to","Fragments":["the"]},{"Key":"a join.","Fragments":["Take"]},{"Key":"join. Take","Fragments":["a"]},{"Key":"at :pre","Fragments":["and"]},{"Key":":post clauses","Fragments":["for"]},{"Key":"clauses for","Fragments":["functions."]},{"Key":"be consider","Fragments":["a"]},{"Key":"consider a","Fragments":["more"]},{"Key":"descriptive name","Fragments":["for"]},{"Key":"argument instead","Fragments":["of"]},{"Key":"Like the","Fragments":["variable","little"]},{"Key":"read since","Fragments":["arguments"]},{"Key":"since arguments","Fragments":["are"]},{"Key":"So, the","Fragments":["regex"]},{"Key":"regex `\\s+`","Fragments":["is"]},{"Key":"`\\s+` is","Fragments":["for"]},{"Key":"for continuous","Fragments":["spaces."]},{"Key":"continuous spaces.","Fragments":["Because"]},{"Key":"spaces. Because","Fragments":["you"]},{"Key":"Because you","Fragments":["are"]},{"Key":"are splitting","Fragments":["on","on"]},{"Key":"to `depunctuate`","Fragments":["and"]},{"Key":"`depunctuate` and","Fragments":["check"]},{"Key":"and check","Fragments":["for","how"]},{"Key":"letters etc.","Fragments":["If"]},{"Key":"etc. If","Fragments":["you"]},{"Key":"you replace","Fragments":["your"]},{"Key":"can represent","Fragments":["any"]},{"Key":"represent any","Fragments":["non-word"]},{"Key":"any non-word","Fragments":["character,"]},{"Key":"non-word character,","Fragments":["you","so"]},{"Key":"character, you","Fragments":["can"]},{"Key":"simplify these","Fragments":["three"]},{"Key":"these three","Fragments":["functions"]},{"Key":"three functions","Fragments":["quite","with"]},{"Key":"functions quite","Fragments":["a"]},{"Key":"For extra","Fragments":["hints"]},{"Key":"extra hints","Fragments":["on"]},{"Key":"hints on","Fragments":["regex"]},{"Key":"regex (almost","Fragments":["a"]},{"Key":"(almost a","Fragments":["spoiler"]},{"Key":"a spoiler","Fragments":["alert)"]},{"Key":"spoiler alert)","Fragments":["see"]},{"Key":"alert) see","Fragments":["[rubular](http://rubular.com/)."]},{"Key":"see [rubular](http://rubular.com/).","Fragments":["Although"]},{"Key":"[rubular](http://rubular.com/). Although","Fragments":["it's"]},{"Key":"Although it's","Fragments":["meant"]},{"Key":"it's meant","Fragments":["for"]},{"Key":"meant for","Fragments":["Ruby,"]},{"Key":"for Ruby,","Fragments":["these"]},{"Key":"Ruby, these","Fragments":["regex"]},{"Key":"these regex","Fragments":["patterns"]},{"Key":"regex patterns","Fragments":["work"]},{"Key":"patterns work","Fragments":["mostly"]},{"Key":"work mostly","Fragments":["across"]},{"Key":"mostly across","Fragments":["all"]},{"Key":"all PCRE","Fragments":["based"]},{"Key":"PCRE based","Fragments":["systems."]},{"Key":"The `process-word`","Fragments":["and"]},{"Key":"`process-word` and","Fragments":["and"]},{"Key":"and and","Fragments":["the"]},{"Key":"the loop-recur","Fragments":["blocks"]},{"Key":"loop-recur blocks","Fragments":["are","as"]},{"Key":"blocks are","Fragments":["basically"]},{"Key":"are basically","Fragments":["grouping"]},{"Key":"basically grouping","Fragments":["the"]},{"Key":"grouping the","Fragments":["words"]},{"Key":"words and","Fragments":["counting","removed"]},{"Key":"counting their","Fragments":["occurrences."]},{"Key":"their occurrences.","Fragments":["There"]},{"Key":"occurrences. There","Fragments":["is"]},{"Key":"just that,","Fragments":["which"]},{"Key":"that, which","Fragments":["will"]},{"Key":"will essentially","Fragments":["collapse"]},{"Key":"essentially collapse","Fragments":["these"]},{"Key":"collapse these","Fragments":["two"]},{"Key":"Thanks @jett!","Fragments":["Yup,"]},{"Key":"@jett! Yup,","Fragments":["a"]},{"Key":"Yup, a","Fragments":["proper"]},{"Key":"proper regex","Fragments":["simplified"]},{"Key":"regex simplified","Fragments":["the"]},{"Key":"the process-word","Fragments":["and"]},{"Key":"process-word and","Fragments":["loop-recur"]},{"Key":"and loop-recur","Fragments":["blocks"]},{"Key":"blocks as","Fragments":["my"]},{"Key":"as my","Fragments":["version"]},{"Key":"of frequencies","Fragments":[":)","do"]},{"Key":"Ha ha,","Fragments":["this"]},{"Key":"ha, this","Fragments":["is"]},{"Key":"exact progression","Fragments":["I"]},{"Key":"progression I","Fragments":["went"]},{"Key":"went through.","Fragments":["A"]},{"Key":"through. A","Fragments":["few"]},{"Key":"more things","Fragments":["(don't"]},{"Key":"things (don't","Fragments":["necessarily"]},{"Key":"(don't necessarily","Fragments":["have"]},{"Key":"necessarily have","Fragments":["to"]},{"Key":"to change,","Fragments":["but"]},{"Key":"like that'll","Fragments":["make"]},{"Key":"+ The","Fragments":["filter"]},{"Key":"The filter","Fragments":["fn"]},{"Key":"filter fn","Fragments":["`#(not"]},{"Key":"fn `#(not","Fragments":["(blank?"]},{"Key":"`#(not (blank?","Fragments":["%))`"]},{"Key":"(blank? %))`","Fragments":["can"]},{"Key":"%))` can","Fragments":["be"]},{"Key":"simplified as","Fragments":["a"]},{"Key":"composition using","Fragments":["`compose`"]},{"Key":"using `compose`","Fragments":["(which"]},{"Key":"`compose` (which","Fragments":["is"]},{"Key":"was talking","Fragments":["about"]},{"Key":"about in","Fragments":["the"]},{"Key":"the meetup","Fragments":["the","exercise."]},{"Key":"meetup the","Fragments":["last"]},{"Key":"+ So","Fragments":["with"]},{"Key":"So with","Fragments":["`\\W`","this"]},{"Key":"with `\\W`","Fragments":["you"]},{"Key":"`\\W` you","Fragments":["are"]},{"Key":"every non-word","Fragments":["character"]},{"Key":"non-word character","Fragments":["and"]},{"Key":"character and","Fragments":["then"]},{"Key":"then filtering","Fragments":["out."]},{"Key":"filtering out.","Fragments":["If"]},{"Key":"out. If","Fragments":["you"]},{"Key":"use `\\W+`","Fragments":["you"]},{"Key":"filter part.","Fragments":["Or"]},{"Key":"part. Or","Fragments":["even"]},{"Key":"even better,","Fragments":["instead"]},{"Key":"better, instead","Fragments":["of"]},{"Key":"non-word chars,","Fragments":["you"]},{"Key":"chars, you","Fragments":["can"]},{"Key":"select only","Fragments":["continuous"]},{"Key":"only continuous","Fragments":["word"]},{"Key":"continuous word","Fragments":["characters."]},{"Key":"word characters.","Fragments":["That'll"]},{"Key":"characters. That'll","Fragments":["get"]},{"Key":"That'll get","Fragments":["rid"]},{"Key":"chaining inside","Fragments":["`tokenize`."]},{"Key":"+ Is","Fragments":["pride"]},{"Key":"Is pride","Fragments":["for"]},{"Key":"pride for","Fragments":["coming"]},{"Key":"for coming","Fragments":["up"]},{"Key":"`frequencies` the","Fragments":["reason"]},{"Key":"not replacing","Fragments":["these"]},{"Key":"replacing these","Fragments":["two"]},{"Key":"with `frequencies`?","Fragments":["I"]},{"Key":"`frequencies`? I","Fragments":["felt"]},{"Key":"felt bad","Fragments":["for"]},{"Key":"having deleted","Fragments":["my"]},{"Key":"deleted my","Fragments":["implementation"]},{"Key":"my implementation","Fragments":["too","of"]},{"Key":"implementation too","Fragments":[":)"]},{"Key":"Clojure treated","Fragments":["strings"]},{"Key":"treated strings","Fragments":["as"]},{"Key":"one line;","Fragments":["rather"]},{"Key":"line; rather","Fragments":["than"]},{"Key":"`-\u003e\u003e` macro,","Fragments":["just"]},{"Key":"macro, just","Fragments":["do"]},{"Key":"not= seq1","Fragments":["seq2)))"]},{"Key":" (apologies","Fragments":["for"]},{"Key":"(apologies for","Fragments":["accidental"]},{"Key":"for accidental","Fragments":["double-comment;"]},{"Key":"accidental double-comment;","Fragments":["on"]},{"Key":"double-comment; on","Fragments":["hotel"]},{"Key":"on hotel","Fragments":["wifi)"]},{"Key":" @jesus,","Fragments":["thanks"]},{"Key":"@jesus, thanks","Fragments":["for"]},{"Key":"the suggestions.","Fragments":["They"]},{"Key":"suggestions. They","Fragments":["are"]},{"Key":"Since these","Fragments":["are"]},{"Key":"are programs","Fragments":["for"]},{"Key":"programs for","Fragments":["fun,"]},{"Key":"fun, I","Fragments":["believe"]},{"Key":"is ok","Fragments":["to"]},{"Key":"ok to","Fragments":["re-implement","me,"]},{"Key":"re-implement some","Fragments":["built-in"]},{"Key":"own education.","Fragments":["I"]},{"Key":"education. I","Fragments":["will"]},{"Key":"will now","Fragments":["go"]},{"Key":"now go","Fragments":["and"]},{"Key":"the authors","Fragments":["of"]},{"Key":"authors of","Fragments":["frequencies"]},{"Key":"frequencies do","Fragments":["it."]},{"Key":"best exercise","Fragments":["of"]},{"Key":"exercise of","Fragments":["the"]},{"Key":"the lot.","Fragments":["Took"]},{"Key":"lot. Took","Fragments":["me"]},{"Key":"wrap my","Fragments":["head","head"]},{"Key":"around how","Fragments":["to"]},{"Key":"handle mutability,","Fragments":["to"]},{"Key":"mutability, to","Fragments":["achieve"]},{"Key":"generation using","Fragments":["seqs."]},{"Key":"using seqs.","Fragments":["Finally,"]},{"Key":"seqs. Finally,","Fragments":["the"]},{"Key":"Finally, the","Fragments":["Joy"]},{"Key":"the Joy","Fragments":["of"]},{"Key":"Clojure's section","Fragments":["on"]},{"Key":"on for","Fragments":["comprehensions"]},{"Key":"for comprehensions","Fragments":["opened"]},{"Key":"comprehensions opened","Fragments":["me"]},{"Key":"opened me","Fragments":["up"]},{"Key":"me up","Fragments":["to"]},{"Key":"a beautiful","Fragments":["world.","piece"]},{"Key":"beautiful world.","Fragments":["See"]},{"Key":"world. See","Fragments":["the"]},{"Key":"See the","Fragments":["evolution"]},{"Key":"the evolution","Fragments":["of"]},{"Key":"evolution of","Fragments":["this"]},{"Key":"program at","Fragments":["https://github.com/arnab/exercism/commits/master/clojure/robot-name/robot.clj"]},{"Key":"done outside","Fragments":["a"]},{"Key":"outside a","Fragments":["book."]},{"Key":"a book.","Fragments":["I"]},{"Key":"book. I","Fragments":["think"]},{"Key":"looks correct","Fragments":["to"]},{"Key":"correct to","Fragments":["me"]},{"Key":"me and","Fragments":["the"]},{"Key":"tests passed.","Fragments":["The"]},{"Key":"passed. The","Fragments":["has-char?"]},{"Key":"The has-char?","Fragments":["took"]},{"Key":"has-char? took","Fragments":["me"]},{"Key":"that regular","Fragments":["expressions"]},{"Key":"this exercise.","Fragments":["I'm"]},{"Key":"exercise. I'm","Fragments":["not"]},{"Key":"entirely happy","Fragments":["with"]},{"Key":"the and'ed","Fragments":["regexes"]},{"Key":"and'ed regexes","Fragments":["for"]},{"Key":"sure at","Fragments":["all"]},{"Key":"all if","Fragments":["this"]},{"Key":"clojure, as","Fragments":["I"]},{"Key":"am just","Fragments":["starting"]},{"Key":"just starting","Fragments":["with"]},{"Key":" `clojure.string/trim`","Fragments":["is"]},{"Key":"`clojure.string/trim` is","Fragments":["a"]},{"Key":"for detecting","Fragments":["empty/whitespace-only"]},{"Key":"detecting empty/whitespace-only","Fragments":["strings,"]},{"Key":"empty/whitespace-only strings,","Fragments":["I"]},{"Key":"strings, I","Fragments":["think."]},{"Key":"little over-engineered","Fragments":[":)."]},{"Key":"over-engineered :).","Fragments":["Is"]},{"Key":":). Is","Fragments":["it"]},{"Key":"not simpler","Fragments":["to"]},{"Key":"use entire","Fragments":["strings"]},{"Key":"entire strings","Fragments":["with"]},{"Key":"a `map`","Fragments":["call"]},{"Key":"`map` call","Fragments":["and"]},{"Key":"then matching","Fragments":["every"]},{"Key":"matching every","Fragments":["character"]},{"Key":"every character","Fragments":["individually"]},{"Key":"character individually","Fragments":["on"]},{"Key":"individually on","Fragments":["a"]},{"Key":"a `cond`.","Fragments":["This"]},{"Key":"`cond`. This","Fragments":["was"]},{"Key":"was straightforward","Fragments":["and"]},{"Key":"`:else` threw","Fragments":["the"]},{"Key":"threw the","Fragments":["exception."]},{"Key":"the exception.","Fragments":["I"]},{"Key":"exception. I","Fragments":["then"]},{"Key":"then found","Fragments":["out"]},{"Key":"the counting","Fragments":["logic"]},{"Key":"counting logic","Fragments":["to"]},{"Key":"separate function.","Fragments":["I'm"]},{"Key":"function. I'm","Fragments":["still"]},{"Key":"fn and","Fragments":["parameters"]},{"Key":"and parameters","Fragments":["though."]},{"Key":"parameters though.","Fragments":["I'm"]},{"Key":"though. I'm","Fragments":["also"]},{"Key":"the normalisation","Fragments":["of"]},{"Key":"normalisation of","Fragments":["the"]},{"Key":"phrase case","Fragments":["(the"]},{"Key":"case (the","Fragments":["`string/lower-case`"]},{"Key":"(the `string/lower-case`","Fragments":["transform)"]},{"Key":"`string/lower-case` transform)","Fragments":["should"]},{"Key":"transform) should","Fragments":["be"]},{"Key":"different binding","Fragments":["to"]},{"Key":"Updated for","Fragments":["second"]},{"Key":"* Better","Fragments":["to"]},{"Key":"Better to","Fragments":["use"]},{"Key":"use string/blank?","Fragments":["than"]},{"Key":"string/blank? than","Fragments":["some"]},{"Key":"than some","Fragments":["hand-written"]},{"Key":"some hand-written","Fragments":["regex"]},{"Key":"hand-written regex","Fragments":["solution"]},{"Key":"* Using","Fragments":["if-let"]},{"Key":"Using if-let","Fragments":["to"]},{"Key":"if-let to","Fragments":["get"]},{"Key":"the empty?","Fragments":["check"]},{"Key":"empty? check","Fragments":["in"]},{"Key":"this new","Fragments":["iteration"]},{"Key":"iteration as","Fragments":["it"]},{"Key":"it tidies","Fragments":["up"]},{"Key":"tidies up","Fragments":["the"]},{"Key":"validation -","Fragments":["making"]},{"Key":"- making","Fragments":["it"]},{"Key":"missing mappings","Fragments":["and"]},{"Key":"mappings and","Fragments":["gets"]},{"Key":"and gets","Fragments":["rid"]},{"Key":"gets rid","Fragments":["of"]},{"Key":"the `or`","Fragments":["shortcut"]},{"Key":"`or` shortcut","Fragments":["like"]},{"Key":"shortcut like","Fragments":["this"]},{"Key":"clojure but","Fragments":["it","I"]},{"Key":"certainly looks","Fragments":["nicer"]},{"Key":"looks nicer","Fragments":["than"]},{"Key":" Super.","Fragments":["Shows"]},{"Key":"Super. Shows","Fragments":["that"]},{"Key":"Shows that","Fragments":["knowledge"]},{"Key":"that knowledge","Fragments":["of"]},{"Key":"library helps","Fragments":["produce"]},{"Key":"helps produce","Fragments":["concise"]},{"Key":"produce concise","Fragments":["code."]},{"Key":"Updated after","Fragments":["looking"]},{"Key":"at niftyn8's","Fragments":["solution"]},{"Key":"niftyn8's solution","Fragments":["-"]},{"Key":"solution -","Fragments":["really"]},{"Key":"- really","Fragments":["nice"]},{"Key":"of standard","Fragments":["functions."]},{"Key":"Your to-rna,","Fragments":["function"]},{"Key":"to-rna, function","Fragments":["looks"]},{"Key":"good. Mapping","Fragments":["across"]},{"Key":"Mapping across","Fragments":["the"]},{"Key":"a translate","Fragments":["function"]},{"Key":"translate function","Fragments":["seems"]},{"Key":"about translate","Fragments":["as"]},{"Key":"translate as","Fragments":["a"]},{"Key":"function between","Fragments":["two"]},{"Key":"between two","Fragments":["values"]},{"Key":"two values","Fragments":["how"]},{"Key":"values how","Fragments":["does"]},{"Key":"this compare","Fragments":["to"]},{"Key":"map data","Fragments":["structure?"]},{"Key":"structure? Remember","Fragments":["in"]},{"Key":"Remember in","Fragments":["Clojure"]},{"Key":"its keys.","Fragments":["Using"]},{"Key":"keys. Using","Fragments":["a"]},{"Key":"map might","Fragments":["simplify"]},{"Key":"your translate","Fragments":["function."]},{"Key":"think (str","Fragments":["\"Failed\")"]},{"Key":"(str \"Failed\")","Fragments":["is"]},{"Key":"\"Failed\") is","Fragments":["necessary,"]},{"Key":"necessary, as","Fragments":["\"Failed\""]},{"Key":"as \"Failed\"","Fragments":["is"]},{"Key":"\"Failed\" is","Fragments":["already"]},{"Key":"see `replace`","Fragments":["being"]},{"Key":"`replace` being","Fragments":["used."]},{"Key":"the mappings","Fragments":["out","to"]},{"Key":"mappings out","Fragments":["into"]},{"Key":"named var","Fragments":["might","and"]},{"Key":"var might","Fragments":["make"]},{"Key":"the dna-to-rna","Fragments":["map"]},{"Key":"dna-to-rna map","Fragments":["as"]},{"Key":"individual fn","Fragments":["for"]},{"Key":"fn for","Fragments":["each","reduce"]},{"Key":"each test","Fragments":["case.","case","one"]},{"Key":"The `.*`","Fragments":["in"]},{"Key":"the `asking?`","Fragments":["fn"]},{"Key":"`asking?` fn","Fragments":["regex"]},{"Key":"fn regex","Fragments":["is"]},{"Key":"not necessary:","Fragments":["the"]},{"Key":"necessary: the","Fragments":["only"]},{"Key":"about is","Fragments":["the"]},{"Key":"the line.","Fragments":["I"]},{"Key":"like regexes","Fragments":["as"]},{"Key":"regexes as","Fragments":["simple"]},{"Key":"possible, they","Fragments":["are"]},{"Key":"are easier","Fragments":["to"]},{"Key":" @owen","Fragments":["I"]},{"Key":"@owen I","Fragments":["moved"]},{"Key":"mappings to","Fragments":["a"]},{"Key":"is better.","Fragments":["Thank"]},{"Key":"better. Thank","Fragments":["you"]},{"Key":"I'm _sure_","Fragments":["there's"]},{"Key":"_sure_ there's","Fragments":["a"]},{"Key":"Small nit,","Fragments":["`counter`"]},{"Key":"nit, `counter`","Fragments":["is"]},{"Key":"`counter` is","Fragments":["a"]},{"Key":"a confusing","Fragments":["name"]},{"Key":"confusing name","Fragments":["from"]},{"Key":"an outsider's","Fragments":["perspective."]},{"Key":"outsider's perspective.","Fragments":["It"]},{"Key":"perspective. It","Fragments":["sounds"]},{"Key":"It sounds","Fragments":["like"]},{"Key":"function that's","Fragments":["going","a"]},{"Key":"that's going","Fragments":["to"]},{"Key":"be counting.","Fragments":["`words`"]},{"Key":"counting. `words`","Fragments":["isn't"]},{"Key":"`words` isn't","Fragments":["a"]},{"Key":"a terrible","Fragments":["name","person."]},{"Key":"terrible name","Fragments":["and"]},{"Key":"Haskell for","Fragments":["the"]},{"Key":"that split","Fragments":["a"]},{"Key":"split a","Fragments":["string"]},{"Key":"into seperate","Fragments":["words."]},{"Key":"seperate words.","Fragments":["`get-words`"]},{"Key":"words. `get-words`","Fragments":["maybe?"]},{"Key":"`get-words` maybe?","Fragments":["Something..."]},{"Key":" Checkout","Fragments":["the"]},{"Key":"Checkout the","Fragments":["`frequencies`"]},{"Key":"function. Might","Fragments":["help"]},{"Key":"Might help","Fragments":["you"]},{"Key":"you reduce","Fragments":["the"]},{"Key":"of work","Fragments":["you're"]},{"Key":"Not 100%","Fragments":["happy"]},{"Key":"100% happy","Fragments":["with"]},{"Key":"and `reduce`","Fragments":["in"]},{"Key":"`reduce` in","Fragments":["`score-word`"]},{"Key":"in `score-word`","Fragments":["so"]},{"Key":"`score-word` so","Fragments":["you"]},{"Key":"custom reduce","Fragments":["function?"]},{"Key":"some operations","Fragments":["into"]},{"Key":"operations into","Fragments":["named"]},{"Key":"new binding","Fragments":["with"]},{"Key":"same name","Fragments":["as"]},{"Key":"store a","Fragments":["modified"]},{"Key":"a modified","Fragments":["param."]},{"Key":"was happy","Fragments":["to"]},{"Key":"find `group-by`,","Fragments":["my"]},{"Key":"`group-by`, my","Fragments":["implementation"]},{"Key":"similar thing","Fragments":["was"]},{"Key":"thing was","Fragments":["looking"]},{"Key":"looking quite","Fragments":["ugly."]},{"Key":"To me","Fragments":["(who"]},{"Key":"me (who","Fragments":["don't"]},{"Key":"(who don't","Fragments":["know"]},{"Key":"know clojure)","Fragments":["this"]},{"Key":"clojure) this","Fragments":["is"]},{"Key":"is unreadable...","Fragments":["Whats"]},{"Key":"unreadable... Whats","Fragments":["your"]},{"Key":"Whats your","Fragments":["comment"]},{"Key":"comment strategy","Fragments":["Marcelo?!?","XD,"]},{"Key":"strategy Marcelo?!?","Fragments":[":-)"]},{"Key":"After submitting","Fragments":["my"]},{"Key":"submitting my","Fragments":["first"]},{"Key":"first lisp","Fragments":["I've"]},{"Key":"lisp I've","Fragments":["ever"]},{"Key":"written. So","Fragments":["this"]},{"Key":"was basically","Fragments":["my"]},{"Key":"basically my","Fragments":["first","Ruby"]},{"Key":"at trying","Fragments":["to"]},{"Key":"After reading","Fragments":["a"]},{"Key":"the submissions,","Fragments":["I"]},{"Key":"submissions, I","Fragments":["tried"]},{"Key":"different approach:","Fragments":["do","to"]},{"Key":"approach: do","Fragments":["less"]},{"Key":"do less","Fragments":["work"]},{"Key":"less work","Fragments":["on"]},{"Key":"moved most","Fragments":["of"]},{"Key":"a `anagram-of?`","Fragments":["function."]},{"Key":"`anagram-of?` function.","Fragments":["I"]},{"Key":"better approach,","Fragments":["smaller"]},{"Key":"approach, smaller","Fragments":["functions"]},{"Key":"smaller functions","Fragments":["that"]},{"Key":"single thing:","Fragments":["one"]},{"Key":"thing: one","Fragments":["finds"]},{"Key":"one finds","Fragments":["whether"]},{"Key":"finds whether","Fragments":["a"]},{"Key":"of another,","Fragments":["the"]},{"Key":"another, the","Fragments":["other"]},{"Key":"other applies","Fragments":["this"]},{"Key":"applies this","Fragments":["to"]},{"Key":"am happier","Fragments":["with"]},{"Key":"this approach,","Fragments":["and"]},{"Key":"approach, and","Fragments":["I"]},{"Key":"some quick","Fragments":["research"]},{"Key":"quick research","Fragments":["about"]},{"Key":"research about","Fragments":["memoizing"]},{"Key":"about memoizing","Fragments":["the"]},{"Key":"memoizing the","Fragments":["`frequencies`"]},{"Key":"`frequencies` call,","Fragments":["as"]},{"Key":"call, as","Fragments":["it"]},{"Key":"be repeated","Fragments":["for"]},{"Key":"repeated for","Fragments":["the","each"]},{"Key":"good, you","Fragments":["could"]},{"Key":"to memoize","Fragments":["the"]},{"Key":"memoize the","Fragments":["results"]},{"Key":"of finding","Fragments":["the"]},{"Key":"chars for","Fragments":["the"]},{"Key":"not repeated","Fragments":["for"]},{"Key":"- s","Fragments":["means"]},{"Key":"s means","Fragments":["an"]},{"Key":"means an","Fragments":["argument"]},{"Key":"argument of","Fragments":["type"]},{"Key":"of type","Fragments":["string."]},{"Key":"- n","Fragments":["for"]},{"Key":"n for","Fragments":["a"]},{"Key":"- coll","Fragments":["for"]},{"Key":"coll for","Fragments":["a"]},{"Key":"collection (vector,","Fragments":["list...)."]},{"Key":" Straight","Fragments":["forward"]},{"Key":"Straight forward","Fragments":["implementation"]},{"Key":"forward implementation","Fragments":["with"]},{"Key":"the particular","Fragments":["cases","cases,"]},{"Key":"particular cases","Fragments":["for"]},{"Key":"cases for","Fragments":["the"]},{"Key":"verses fully","Fragments":["spelled"]},{"Key":"fully spelled","Fragments":["out."]},{"Key":"spelled out.","Fragments":["This"]},{"Key":"out. This","Fragments":["has"]},{"Key":"has lots","Fragments":["of"]},{"Key":"As suggested","Fragments":["in"]},{"Key":"suggested in","Fragments":["the"]},{"Key":"the \"bonus","Fragments":["points\""]},{"Key":"\"bonus points\"","Fragments":["section,"]},{"Key":"points\" section,","Fragments":["I"]},{"Key":"section, I","Fragments":["tried"]},{"Key":"approach: to","Fragments":["reduce"]},{"Key":"reduce duplication.","Fragments":["I","If"]},{"Key":"case this","Fragments":["leads"]},{"Key":"this leads","Fragments":["to"]},{"Key":"complicated code.","Fragments":["There"]},{"Key":"code. There","Fragments":["might"]},{"Key":"some idioms","Fragments":["that"]},{"Key":"idioms that","Fragments":["I"]},{"Key":"help in","Fragments":["this"]},{"Key":"my experience","Fragments":["sometimes"]},{"Key":"experience sometimes","Fragments":["it"]},{"Key":"sometimes it","Fragments":["is"]},{"Key":"to spell","Fragments":["out"]},{"Key":"spell out","Fragments":["the"]},{"Key":"particular cases,","Fragments":["even"]},{"Key":"cases, even","Fragments":["if"]},{"Key":"you end","Fragments":["up"]},{"Key":"with duplicated","Fragments":["strings."]},{"Key":"With this","Fragments":["solution","in"]},{"Key":"solution it","Fragments":["is"]},{"Key":"doing, at","Fragments":["a"]},{"Key":"a glance.","Fragments":["And"]},{"Key":"glance. And","Fragments":["the"]},{"Key":"not shorter","Fragments":["than"]},{"Key":"more interesting","Fragments":["\u0026"]},{"Key":"interesting \u0026","Fragments":["efficient"]},{"Key":"\u0026 efficient","Fragments":["form."]},{"Key":"By making","Fragments":["`respondIf`"]},{"Key":"making `respondIf`","Fragments":["also"]},{"Key":"`respondIf` also","Fragments":["accept"]},{"Key":"also accept","Fragments":["an"]},{"Key":"accept an","Fragments":["option"]},{"Key":"an option","Fragments":["`elseFn`,"]},{"Key":"option `elseFn`,","Fragments":["which"]},{"Key":"`elseFn`, which","Fragments":["is"]},{"Key":"then called","Fragments":["with"]},{"Key":"same `input`","Fragments":["if"]},{"Key":"`input` if","Fragments":["the"]},{"Key":"the `testFn`","Fragments":["doesn't"]},{"Key":"`testFn` doesn't","Fragments":["match,"]},{"Key":"doesn't match,","Fragments":["I"]},{"Key":"match, I","Fragments":["can"]},{"Key":"efficient computation,","Fragments":["since"]},{"Key":"computation, since","Fragments":["we'll"]},{"Key":"since we'll","Fragments":["return"]},{"Key":"we'll return","Fragments":["the"]},{"Key":"first matching","Fragments":["response"]},{"Key":"matching response","Fragments":["we"]},{"Key":"response we","Fragments":["find"]},{"Key":"we find","Fragments":["immediately,"]},{"Key":"find immediately,","Fragments":["instead"]},{"Key":"immediately, instead","Fragments":["of"]},{"Key":"evaluating all","Fragments":["matching"]},{"Key":"all matching","Fragments":["responses"]},{"Key":"matching responses","Fragments":["\u0026"]},{"Key":"responses \u0026","Fragments":["then"]},{"Key":"\u0026 then","Fragments":["returning"]},{"Key":"then returning","Fragments":["the"]},{"Key":"The `-\u003e\u003e`","Fragments":["macro","is"]},{"Key":"`-\u003e\u003e` macro","Fragments":["helps","to"]},{"Key":"macro helps","Fragments":["make"]},{"Key":"helps make","Fragments":["it"]},{"Key":"more readable:","Fragments":["the"]},{"Key":"readable: the","Fragments":["alternative"]},{"Key":"the alternative","Fragments":["would"]},{"Key":"alternative would","Fragments":["have"]},{"Key":" (((((respondIf","Fragments":["any?"]},{"Key":"(((((respondIf any?","Fragments":["\"Whatever.\""]},{"Key":" (respondIf","Fragments":["question?","shout?","silence?"]},{"Key":"(respondIf question?","Fragments":["\"Sure.\"))"]},{"Key":"(respondIf shout?","Fragments":["\"Woah,"]},{"Key":"shout? \"Woah,","Fragments":["chill"]},{"Key":"(respondIf silence?","Fragments":["\"Fine."]},{"Key":" )","Fragments":["input))"]},{"Key":"macro makes","Fragments":["this"]},{"Key":"readable list","Fragments":["of"]},{"Key":"of potential","Fragments":["matchers"]},{"Key":"potential matchers","Fragments":["in"]},{"Key":"matchers in","Fragments":["reverse-order"]},{"Key":"in reverse-order","Fragments":["of"]},{"Key":"reverse-order of","Fragments":["priority,"]},{"Key":"of priority,","Fragments":["with"]},{"Key":"priority, with","Fragments":["the"]},{"Key":"actual input","Fragments":["being"]},{"Key":"input being","Fragments":["passed"]},{"Key":"resulting `fn`","Fragments":["the"]},{"Key":"`fn` the","Fragments":["macro"]},{"Key":"comparison functions","Fragments":["already"]},{"Key":"functions already","Fragments":["return"]},{"Key":"already return","Fragments":["a"]},{"Key":"boolean result,","Fragments":["so"]},{"Key":"result, so","Fragments":["there's"]},{"Key":"apply a","Fragments":["conditional"]},{"Key":"and explicitly","Fragments":["return"]},{"Key":"a boolean.","Fragments":["For"]},{"Key":"boolean. For","Fragments":["example:"]},{"Key":"(= a","Fragments":["b)"]},{"Key":"a b)","Fragments":["false"]},{"Key":" can","Fragments":["be"]},{"Key":"`(not= a","Fragments":["b)`."]},{"Key":"b)`. In","Fragments":["`is-anagram`"]},{"Key":"In `is-anagram`","Fragments":["you"]},{"Key":"`is-anagram` you","Fragments":["can"]},{"Key":"use `and`","Fragments":["to"]},{"Key":"`and` to","Fragments":["return"]},{"Key":"a `true`","Fragments":["value"]},{"Key":"`true` value","Fragments":["only"]},{"Key":"value only","Fragments":["when"]},{"Key":"when both","Fragments":["conditions"]},{"Key":"both conditions","Fragments":["are"]},{"Key":"that test","Fragments":["for","your"]},{"Key":"value usually","Fragments":["end"]},{"Key":"usually end","Fragments":["up"]},{"Key":"question mark,","Fragments":["and","I"]},{"Key":"mark, and","Fragments":["don't"]},{"Key":"don't start","Fragments":["with"]},{"Key":"with 'is':","Fragments":["`anagram?`"]},{"Key":"'is': `anagram?`","Fragments":["instead"]},{"Key":"`anagram?` instead","Fragments":["of","of"]},{"Key":"some documentation,","Fragments":["as"]},{"Key":"documentation, as","Fragments":["well"]},{"Key":"as mark","Fragments":["as"]},{"Key":"private the","Fragments":["functions"]},{"Key":"is fairly","Fragments":["straightforward,","readable"]},{"Key":"fairly straightforward,","Fragments":["I"]},{"Key":"straightforward, I","Fragments":["think."]},{"Key":"This time","Fragments":["I"]},{"Key":"combine maps","Fragments":["in"]},{"Key":"library before","Fragments":["implementing"]},{"Key":"before implementing","Fragments":["one"]},{"Key":"implementing one","Fragments":["myself,"]},{"Key":"one myself,","Fragments":["and"]},{"Key":"myself, and","Fragments":["sure"]},{"Key":"and sure","Fragments":["enough"]},{"Key":"sure enough","Fragments":["`merge`"]},{"Key":"enough `merge`","Fragments":["was"]},{"Key":"`merge` was","Fragments":["there."]},{"Key":"a clojurist(?)","Fragments":["so"]},{"Key":"clojurist(?) so","Fragments":["can’t"]},{"Key":"so can’t","Fragments":["critique"]},{"Key":"can’t critique","Fragments":["language"]},{"Key":"critique language","Fragments":["choices."]},{"Key":"shouting, is","Fragments":["the"]},{"Key":"idea that","Fragments":["`(not="]},{"Key":"that `(not=","Fragments":["msg"]},{"Key":"`(not= msg","Fragments":["(lower-case"]},{"Key":"msg (lower-case","Fragments":["msg))`"]},{"Key":"(lower-case msg))`","Fragments":["will"]},{"Key":"msg))` will","Fragments":["ensure"]},{"Key":"will ensure","Fragments":["that"]},{"Key":"that non","Fragments":["alphabetical"]},{"Key":"non alphabetical","Fragments":["responses"]},{"Key":"alphabetical responses","Fragments":["are"]},{"Key":"responses are","Fragments":["filtered"]},{"Key":"are filtered","Fragments":["out?"]},{"Key":"Beyond that,","Fragments":["the"]},{"Key":"that, the","Fragments":["only"]},{"Key":"only “nitpick”","Fragments":["I"]},{"Key":"“nitpick” I","Fragments":["could"]},{"Key":"could say","Fragments":["is"]},{"Key":"clojure I’ve","Fragments":["read"]},{"Key":"I’ve read","Fragments":["keeps"]},{"Key":"read keeps","Fragments":["closing"]},{"Key":"keeps closing","Fragments":["parens"]},{"Key":"last statement","Fragments":["instead"]},{"Key":"of on","Fragments":["newlines."]},{"Key":"only trade-off","Fragments":["I"]},{"Key":"trade-off I","Fragments":["considered"]},{"Key":"considered was","Fragments":["passing"]},{"Key":"was passing","Fragments":["tests"]},{"Key":"tests vs.","Fragments":["not"]},{"Key":"vs. not","Fragments":["passing"]},{"Key":"not passing","Fragments":["tests."]},{"Key":" Originally","Fragments":["the"]},{"Key":"Originally the","Fragments":["implementation"]},{"Key":"much simpler,","Fragments":["but"]},{"Key":"simpler, but","Fragments":["the"]},{"Key":"the “WHAT","Fragments":["THE"]},{"Key":"“WHAT THE","Fragments":["HELL"]},{"Key":"YOU THINKING?”","Fragments":["and"]},{"Key":"THINKING?” and","Fragments":["“4?”"]},{"Key":"and “4?”","Fragments":["tests"]},{"Key":"“4?” tests","Fragments":["through"]},{"Key":"tests through","Fragments":["me"]},{"Key":"through me","Fragments":["for"]},{"Key":" (This","Fragments":["is"]},{"Key":"(This is","Fragments":["the"]},{"Key":"clojure I","Fragments":["have"]},{"Key":"Well, I","Fragments":["think"]},{"Key":"that boolean","Fragments":["functions"]},{"Key":"boolean functions","Fragments":["typically"]},{"Key":"functions typically","Fragments":["end"]},{"Key":"typically end","Fragments":["with"]},{"Key":" silent?","Fragments":["..."]},{"Key":" questioning?","Fragments":["..."]},{"Key":"nice. One","Fragments":["thing"]},{"Key":"is take","Fragments":["the"]},{"Key":"conditional apart","Fragments":["and"]},{"Key":"apart and","Fragments":["make"]},{"Key":"make different","Fragments":["functions"]},{"Key":"different functions","Fragments":["for"]},{"Key":"Please close","Fragments":["the"]},{"Key":"exercises that","Fragments":["you","you"]},{"Key":"feel are","Fragments":["\"done\""]},{"Key":"are \"done\"","Fragments":["(such"]},{"Key":"\"done\" (such","Fragments":["as"]},{"Key":"this one).","Fragments":["That"]},{"Key":"one). That","Fragments":["will"]},{"Key":"other reviewers","Fragments":["concentrate"]},{"Key":"reviewers concentrate","Fragments":["on"]},{"Key":"concentrate on","Fragments":["the"]},{"Key":"need feedback","Fragments":["on."]},{"Key":"Was really","Fragments":["confused"]},{"Key":"really confused","Fragments":["about"]},{"Key":"confused about","Fragments":["the","the"]},{"Key":"the \"forced","Fragments":["talking\""]},{"Key":"\"forced talking\"","Fragments":["test,"]},{"Key":"talking\" test,","Fragments":["but"]},{"Key":"test, but","Fragments":["I"]},{"Key":"guess that's","Fragments":["because"]},{"Key":"that's because","Fragments":["I'm"]},{"Key":"native English","Fragments":["speaker"]},{"Key":"English speaker","Fragments":["and"]},{"Key":"speaker and","Fragments":["it's"]},{"Key":"some grammatical","Fragments":["aspect"]},{"Key":"grammatical aspect","Fragments":["I've"]},{"Key":"aspect I've","Fragments":["never"]},{"Key":"Really happy","Fragments":["about"]},{"Key":"my clever","Fragments":["use"]},{"Key":"clever use","Fragments":["of"]},{"Key":"of if-let,","Fragments":["which"]},{"Key":"if-let, which","Fragments":["I"]},{"Key":"believe to","Fragments":["be"]},{"Key":"good but","Fragments":["can","what"]},{"Key":"clojure data","Fragments":["structures"]},{"Key":"structures like","Fragments":["hash-maps"]},{"Key":"like hash-maps","Fragments":["sets"]},{"Key":"hash-maps sets","Fragments":["are"]},{"Key":"sets are","Fragments":["also","functions,"]},{"Key":"That allows","Fragments":["more"]},{"Key":"allows more","Fragments":["readable"]},{"Key":"readable code","Fragments":["IMHO"]},{"Key":"code IMHO","Fragments":[";)"]},{"Key":"I spent","Fragments":["most"]},{"Key":"spent most","Fragments":["of"]},{"Key":"my time","Fragments":["struggling"]},{"Key":"time struggling","Fragments":["with"]},{"Key":"with not","Fragments":["having"]},{"Key":"having variables,","Fragments":["adjusting"]},{"Key":"variables, adjusting","Fragments":["to"]},{"Key":"adjusting to","Fragments":["the","the"]},{"Key":"the syntax,","Fragments":["and"]},{"Key":"syntax, and","Fragments":["just"]},{"Key":"clojure environment.","Fragments":["I"]},{"Key":"environment. I","Fragments":["know"]},{"Key":"an Object","Fragments":["Oriented"]},{"Key":"Object Oriented","Fragments":["fashion,"]},{"Key":"Oriented fashion,","Fragments":["but"]},{"Key":"fashion, but","Fragments":["I"]},{"Key":"little lost","Fragments":["here."]},{"Key":" \"Great\"","Fragments":["for"]},{"Key":"\"Great\" for","Fragments":["your"]},{"Key":"can \"reduce\"","Fragments":["this"]},{"Key":"\"reduce\" this","Fragments":["much"]},{"Key":" (`=","Fragments":["dn1"]},{"Key":"(`= dn1","Fragments":["dn2`)"]},{"Key":"dn1 dn2`)","Fragments":["returns"]},{"Key":"dn2`) returns","Fragments":["`true/false`."]},{"Key":"returns `true/false`.","Fragments":["Instead"]},{"Key":"`true/false`. Instead","Fragments":["of"]},{"Key":"converting those","Fragments":["to"]},{"Key":"numbers, if","Fragments":["you"]},{"Key":"the `truthyness`","Fragments":["and"]},{"Key":"`truthyness` and","Fragments":["filter"]},{"Key":"results you","Fragments":["can"]},{"Key":"(for my","Fragments":["curiosity/learning)"]},{"Key":"particular reason","Fragments":["you"]},{"Key":" `(filter","Fragments":["(partial"]},{"Key":"`(filter (partial","Fragments":["anagram?"]},{"Key":"anagram? word)","Fragments":["candidates)`","candidates))"]},{"Key":"word) candidates)`","Fragments":["?"]},{"Key":"For reference,","Fragments":["I"]},{"Key":"reference, I","Fragments":["usually"]},{"Key":"usually write","Fragments":["such"]},{"Key":"write such","Fragments":["an"]},{"Key":"such an","Fragments":["expression","exhaustive"]},{"Key":"expression as","Fragments":["`(filter"]},{"Key":"as `(filter","Fragments":["#(anagram?"]},{"Key":"`(filter #(anagram?","Fragments":["word"]},{"Key":"#(anagram? word","Fragments":["%)"]},{"Key":"for Alphagram","Fragments":["as"]},{"Key":"Alphagram as","Fragments":["it"]},{"Key":"might influence","Fragments":["your"]},{"Key":"influence your","Fragments":["approach"]},{"Key":"Think the","Fragments":["predicate"]},{"Key":"predicate tests","Fragments":["should","into"]},{"Key":"be encapsulated","Fragments":["as"]},{"Key":"encapsulated as","Fragments":["functions."]},{"Key":"is difficult","Fragments":["to"]},{"Key":"are trying","Fragments":["to"]},{"Key":"I'd start","Fragments":["of"]},{"Key":"start of","Fragments":["with"]},{"Key":"of with","Fragments":["a"]},{"Key":"a really,","Fragments":["really"]},{"Key":"really, really","Fragments":["bad"]},{"Key":"bad solution","Fragments":["and"]},{"Key":"it later","Fragments":[":-)"]},{"Key":" @cierra","Fragments":["I"]},{"Key":"@cierra I","Fragments":["took"]},{"Key":"as purely","Fragments":["one"]},{"Key":"purely one","Fragments":["in"]},{"Key":"in calisthenics","Fragments":["to"]},{"Key":"calisthenics to","Fragments":["reduce"]},{"Key":"duplication. If","Fragments":["you"]},{"Key":"at [the","Fragments":["history"]},{"Key":"[the history","Fragments":["of"]},{"Key":"history of","Fragments":["this"]},{"Key":"on github](https://github.com/arnab/exercism/commits/master/clojure/beer-song/beer.clj)","Fragments":["you'll"]},{"Key":"github](https://github.com/arnab/exercism/commits/master/clojure/beer-song/beer.clj) you'll","Fragments":["see"]},{"Key":"you'll see","Fragments":["that"]},{"Key":"basically just","Fragments":["carried"]},{"Key":"just carried","Fragments":["on"]},{"Key":"carried on","Fragments":["reducing"]},{"Key":"on reducing","Fragments":["the"]},{"Key":"be about","Fragments":["reducing"]},{"Key":"duplication (which","Fragments":["is"]},{"Key":"is mentioned","Fragments":["in"]},{"Key":"mentioned in","Fragments":["the"]},{"Key":"the README).","Fragments":["In"]},{"Key":"README). In","Fragments":["that"]},{"Key":"that light,","Fragments":["I"]},{"Key":"light, I","Fragments":["feel"]},{"Key":"feel these","Fragments":["verses"]},{"Key":"these verses","Fragments":["can"]},{"Key":"verses can","Fragments":["be"]},{"Key":"be \"calculated\"","Fragments":["much"]},{"Key":"\"calculated\" much","Fragments":["more,"]},{"Key":"much more,","Fragments":["from"]},{"Key":"more, from","Fragments":["smaller"]},{"Key":"from smaller","Fragments":["pieces."]},{"Key":"the `anagram-insensitive`","Fragments":["fn"]},{"Key":"`anagram-insensitive` fn","Fragments":["is"]},{"Key":"fn is","Fragments":["to"]},{"Key":"sort both","Fragments":["`w1`"]},{"Key":"both `w1`","Fragments":["and"]},{"Key":"`w1` and","Fragments":["`w2`"]},{"Key":"and `w2`","Fragments":["and"]},{"Key":"`w2` and","Fragments":["see"]},{"Key":"the same.","Fragments":["Do"]},{"Key":"same. Do","Fragments":["you"]},{"Key":"if these","Fragments":["are"]},{"Key":"this is!","Fragments":["I"]},{"Key":"is! I","Fragments":["do"]},{"Key":"Your `add`","Fragments":["function"]},{"Key":"`add` function","Fragments":["calls","calls"]},{"Key":"calls `assoc`","Fragments":["and","and"]},{"Key":"`assoc` and","Fragments":["manually","manually"]},{"Key":"and manually","Fragments":["supplies","supplies"]},{"Key":"manually supplies","Fragments":["it","it"]},{"Key":"supplies it","Fragments":["with","with"]},{"Key":"existing value","Fragments":["(using","(using"]},{"Key":"value (using","Fragments":["the","the"]},{"Key":"(using the","Fragments":["`grade`","grade"]},{"Key":"`grade` function).","Fragments":["There's"]},{"Key":"function). There's","Fragments":["another","another"]},{"Key":"for updating","Fragments":["values","values"]},{"Key":"updating values","Fragments":["in","in"]},{"Key":"in maps","Fragments":["that","that"]},{"Key":"maps that","Fragments":["would","would","you"]},{"Key":"2. Your","Fragments":["`sorted`","clue"]},{"Key":"Your `sorted`","Fragments":["function"]},{"Key":"doesn't sort","Fragments":["the"]},{"Key":"the grades,","Fragments":["only"]},{"Key":"grades, only","Fragments":["the"]},{"Key":"each grade.","Fragments":["The"]},{"Key":"grade. The","Fragments":["supplied"]},{"Key":"The supplied","Fragments":["tests"]},{"Key":"grade order,","Fragments":["but"]},{"Key":"order, but","Fragments":["it"]},{"Key":"is specified","Fragments":["as"]},{"Key":"specified as","Fragments":["a"]},{"Key":"requirement in","Fragments":["the"]},{"Key":" Within","Fragments":["`count`,","`valid-dna?`,"]},{"Key":"Within `count`,","Fragments":["if"]},{"Key":"`count`, if","Fragments":["you"]},{"Key":"the statements","Fragments":["inside","in"]},{"Key":"statements inside","Fragments":["`if`"]},{"Key":"inside `if`","Fragments":["we"]},{"Key":"`if` we","Fragments":["can"]},{"Key":"the `not`.","Fragments":["Essentially,"]},{"Key":"`not`. Essentially,","Fragments":["the"]},{"Key":"Essentially, the","Fragments":["form"]},{"Key":"be `if","Fragments":["valid;"]},{"Key":"`if valid;","Fragments":["then"]},{"Key":"valid; then","Fragments":["count;"]},{"Key":"then count;","Fragments":["else"]},{"Key":"count; else","Fragments":["error`"]},{"Key":"else error`","Fragments":["rather"]},{"Key":"error` rather","Fragments":["than"]},{"Key":"than `if","Fragments":["not"]},{"Key":"`if not","Fragments":["this;"]},{"Key":"not this;","Fragments":["then"]},{"Key":"this; then","Fragments":["error;"]},{"Key":"then error;","Fragments":["else"]},{"Key":"error; else","Fragments":["count`."]},{"Key":"else count`.","Fragments":["To"]},{"Key":"count`. To","Fragments":["me,"]},{"Key":"me, the","Fragments":["former","`lower-case`ing"]},{"Key":"former looks","Fragments":["more"]},{"Key":"In these","Fragments":["situations"]},{"Key":"these situations","Fragments":["(validation"]},{"Key":"situations (validation","Fragments":["errors)"]},{"Key":"(validation errors)","Fragments":["I"]},{"Key":"errors) I","Fragments":["would"]},{"Key":"would throw","Fragments":["`IllegalArgumentException"]},{"Key":"throw `IllegalArgumentException","Fragments":["`,"]},{"Key":"`IllegalArgumentException `,","Fragments":["instead"]},{"Key":"`, instead","Fragments":["of"]},{"Key":"Within `valid-dna?`,","Fragments":["there"]},{"Key":"`valid-dna?`, there","Fragments":["is"]},{"Key":"the strands.","Fragments":["Maybe"]},{"Key":"strands. Maybe","Fragments":["we"]},{"Key":"Maybe we","Fragments":["can","can't"]},{"Key":"strands as","Fragments":["a"]},{"Key":"map (as","Fragments":["in"]},{"Key":"(as in","Fragments":["`nucleotide-counts`)"]},{"Key":"in `nucleotide-counts`)","Fragments":["and"]},{"Key":"`nucleotide-counts`) and","Fragments":["use"]},{"Key":"those inside","Fragments":["the"]},{"Key":"the `valid-dna?`","Fragments":["fn?"]},{"Key":"where we","Fragments":["are"]},{"Key":"are throwing","Fragments":["the"]},{"Key":"throwing the","Fragments":["`invalid"]},{"Key":"the `invalid","Fragments":["nucleotide`"]},{"Key":"`invalid nucleotide`","Fragments":["error."]},{"Key":"nucleotide` error.","Fragments":["Can"]},{"Key":"error. Can","Fragments":["we"]},{"Key":"Can we","Fragments":["de-dupe"]},{"Key":"we de-dupe","Fragments":["those?"]},{"Key":"makes good","Fragments":["use"]},{"Key":"Clojure's higher-order","Fragments":["functions."]},{"Key":"higher-order functions.","Fragments":["There"]},{"Key":"a sorted","Fragments":["map","map"]},{"Key":"sorted map","Fragments":["from","from"]},{"Key":"an unsorted","Fragments":["one,"]},{"Key":"unsorted one,","Fragments":["but"]},{"Key":"one, but","Fragments":["this"]},{"Key":"seems acceptable","Fragments":["to"]},{"Key":"acceptable to","Fragments":["me"]},{"Key":"me given","Fragments":["that"]},{"Key":"the students'","Fragments":["names"]},{"Key":"students' names","Fragments":["as"]},{"Key":" @lloyd","Fragments":["Thanks"]},{"Key":"@lloyd Thanks","Fragments":["for"]},{"Key":"1) I","Fragments":["assume"]},{"Key":"assume you're","Fragments":["talking"]},{"Key":"you're talking","Fragments":["about"]},{"Key":"2) Yea.","Fragments":["I'm"]},{"Key":"Yea. I'm","Fragments":["mostly"]},{"Key":"I'm mostly","Fragments":["depending"]},{"Key":"mostly depending","Fragments":["on"]},{"Key":"on tests","Fragments":["to"]},{"Key":"to dictate","Fragments":["the"]},{"Key":"dictate the","Fragments":["behavior"]},{"Key":"behavior of","Fragments":["the"]},{"Key":"code. Perhaps,","Fragments":["if"]},{"Key":"Perhaps, if","Fragments":["I'd"]},{"Key":"if I'd","Fragments":["read"]},{"Key":"I'd read","Fragments":["the"]},{"Key":"the README,","Fragments":["I"]},{"Key":"README, I","Fragments":["could"]},{"Key":"some tests","Fragments":["to"]},{"Key":"to drive","Fragments":["the"]},{"Key":"great overall.","Fragments":["Very"]},{"Key":"overall. Very","Fragments":["concise,"]},{"Key":"Very concise,","Fragments":["and"]},{"Key":"concise, and","Fragments":["you"]},{"Key":"made sure","Fragments":["to"]},{"Key":"from `sort`,","Fragments":["even"]},{"Key":"`sort`, even","Fragments":["though"]},{"Key":"don't cover","Fragments":["that."]},{"Key":"one nit","Fragments":["to"]},{"Key":"to pick:","Fragments":["your"]},{"Key":"pick: your","Fragments":["`add`"]},{"Key":"your `add`","Fragments":["function","is"]},{"Key":"grade function).","Fragments":["There's"]},{"Key":"tricky one","Fragments":["because"]},{"Key":"the state","Fragments":["and"]},{"Key":"state and","Fragments":["the"]},{"Key":"general thrust","Fragments":["towards"]},{"Key":"thrust towards","Fragments":["robots"]},{"Key":"towards robots","Fragments":["as"]},{"Key":"robots as","Fragments":["objects,"]},{"Key":"as objects,","Fragments":["but"]},{"Key":"objects, but","Fragments":["I"]},{"Key":"I handled","Fragments":["it"]},{"Key":"handled it","Fragments":["fairly"]},{"Key":"it fairly","Fragments":["well."]},{"Key":"fairly well.","Fragments":["I"]},{"Key":"well. I","Fragments":["especially"]},{"Key":"I especially","Fragments":["like","like"]},{"Key":"that `robot-name`","Fragments":["is"]},{"Key":"that `new-robot-name`","Fragments":["is"]},{"Key":"`new-robot-name` is","Fragments":["quite"]},{"Key":"could be,","Fragments":["but"]},{"Key":"be, but","Fragments":["using"]},{"Key":"using `repeatedly`","Fragments":["to"]},{"Key":"`repeatedly` to","Fragments":["shorten"]},{"Key":"just came","Fragments":["out"]},{"Key":"came out","Fragments":["looking"]},{"Key":"out looking","Fragments":["even"]},{"Key":"looking even","Fragments":["worse."]},{"Key":"Clojure programs.","Fragments":["I'm"]},{"Key":"programs. I'm","Fragments":["not"]},{"Key":"sure I'm","Fragments":["doing"]},{"Key":"doing anything","Fragments":["right"]},{"Key":"anything right","Fragments":["here."]},{"Key":"here. I'd","Fragments":["love"]},{"Key":"some suggestions","Fragments":["on"]},{"Key":"readable, whether","Fragments":["I'm"]},{"Key":"whether I'm","Fragments":["using"]},{"Key":"Clojure language","Fragments":["features"]},{"Key":"language features","Fragments":["properly,"]},{"Key":"features properly,","Fragments":["and"]},{"Key":"properly, and","Fragments":["general"]},{"Key":"general strategies","Fragments":["for"]},{"Key":"strategies for","Fragments":["making"]},{"Key":"making Clojure","Fragments":["code"]},{"Key":"code readable","Fragments":["and"]},{"Key":"would decompose","Fragments":["the","the"]},{"Key":"decompose the","Fragments":["predicate","predicates"]},{"Key":"smaller functions.","Fragments":["This"]},{"Key":"improve readability.","Fragments":["Indentation"]},{"Key":"readability. Indentation","Fragments":["looks"]},{"Key":"Indentation looks","Fragments":["fine."]},{"Key":"Generally I","Fragments":["would"]},{"Key":"core method","Fragments":["over"]},{"Key":"method over","Fragments":["calling"]},{"Key":"over calling","Fragments":["down"]},{"Key":"calling down","Fragments":["into"]},{"Key":"Java eg:","Fragments":["(.trim"]},{"Key":"eg: (.trim","Fragments":["s)"]},{"Key":"Also you","Fragments":["could","could"]},{"Key":"require the","Fragments":["clojure.string","string","string"]},{"Key":"of entering","Fragments":["the"]},{"Key":"entering the","Fragments":["namespace"]},{"Key":"Otherwise I","Fragments":["think","don't"]},{"Key":"as indentation","Fragments":["goes"]},{"Key":"indentation goes","Fragments":["I"]},{"Key":"goes I","Fragments":["might"]},{"Key":"might put","Fragments":["a"]},{"Key":"the predicate/body","Fragments":["pairs,"]},{"Key":"predicate/body pairs,","Fragments":["which"]},{"Key":"pairs, which","Fragments":["adds"]},{"Key":"which adds","Fragments":["to"]},{"Key":"adds to","Fragments":["the","the"]},{"Key":"into functions..","Fragments":["again"]},{"Key":"functions.. again","Fragments":["this"]},{"Key":"again this","Fragments":["adds"]},{"Key":"this adds","Fragments":["to"]},{"Key":" Cleaning","Fragments":["up"]},{"Key":"Cleaning up","Fragments":["a"]},{"Key":"bit the","Fragments":["code"]},{"Key":"readable after","Fragments":["the"]},{"Key":"feedback for","Fragments":["the"]},{"Key":"are missed,","Fragments":["Jim."]},{"Key":"reused my","Fragments":["word-count"]},{"Key":"my word-count","Fragments":["function"]},{"Key":"the previous,","Fragments":["only"]},{"Key":"previous, only","Fragments":["adapting"]},{"Key":"only adapting","Fragments":["it"]},{"Key":"adapting it","Fragments":["to"]},{"Key":"a letter-counter.","Fragments":["For"]},{"Key":"letter-counter. For","Fragments":["anagrams,"]},{"Key":"For anagrams,","Fragments":["the"]},{"Key":"anagrams, the","Fragments":["letter"]},{"Key":"letter counts","Fragments":["will"]},{"Key":"counts will","Fragments":["be"]},{"Key":"Your code","Fragments":["can"]},{"Key":"hint :","Fragments":["`({:a"]},{"Key":": `({:a","Fragments":["1}"]},{"Key":"`({:a 1}","Fragments":[":b"]},{"Key":"1} :b","Fragments":["\"Not"]},{"Key":":b \"Not","Fragments":["Found\")`"]},{"Key":"\"Not Found\")`","Fragments":["returns"]},{"Key":"Found\")` returns","Fragments":["\"Not"]},{"Key":"returns \"Not","Fragments":["Found\""]},{"Key":"is bit","Fragments":["weird."]},{"Key":"bit weird.","Fragments":["I"]},{"Key":"weird. I","Fragments":["generated"]},{"Key":"I generated","Fragments":["all","a"]},{"Key":"generated all","Fragments":["the"]},{"Key":"Perhaps the","Fragments":["fn"]},{"Key":"for reduce","Fragments":["could"]},{"Key":"reduce could","Fragments":["be"]},{"Key":"done on","Fragments":["its"]},{"Key":"own as","Fragments":["a"]},{"Key":"I'm ok","Fragments":["with"]},{"Key":"ok with","Fragments":["inline"]},{"Key":"with inline","Fragments":["definition."]},{"Key":"how i","Fragments":["can"]},{"Key":"better (though","Fragments":["i"]},{"Key":"(though i","Fragments":["know"]},{"Key":"i know","Fragments":["it"]},{"Key":" steps","Fragments":["i"]},{"Key":"steps i","Fragments":["tried"]},{"Key":"i tried","Fragments":["to"]},{"Key":"implement here","Fragments":["is:"]},{"Key":" angarams-for","Fragments":["is"]},{"Key":"angarams-for is","Fragments":["the"]},{"Key":"the filtered","Fragments":["list","string,"]},{"Key":"filtered list","Fragments":["of"]},{"Key":"of candidates","Fragments":["for"]},{"Key":"candidates for","Fragments":["which"]},{"Key":"the candidate","Fragments":["is","and","word"]},{"Key":"candidate is","Fragments":["an","the"]},{"Key":"anagram for","Fragments":["the"]},{"Key":" an","Fragments":["anagram"]},{"Key":"such if","Fragments":["the"]},{"Key":"word does","Fragments":["not"]},{"Key":"not equal","Fragments":["the"]},{"Key":"equal the","Fragments":["candidate"]},{"Key":"candidate and","Fragments":["the"]},{"Key":"word are","Fragments":["equivalent"]},{"Key":" character","Fragments":["equivalency"]},{"Key":"character equivalency","Fragments":["is"]},{"Key":"equivalency is","Fragments":["determined"]},{"Key":"is determined","Fragments":["by"]},{"Key":"by sorting","Fragments":["and"]},{"Key":"and comparing","Fragments":["the"]},{"Key":"function transcribe-to-rna","Fragments":["is"]},{"Key":"transcribe-to-rna is","Fragments":["rather"]},{"Key":"rather unidiomatic.","Fragments":["It"]},{"Key":"unidiomatic. It","Fragments":["can"]},{"Key":"simplified significantly","Fragments":["by"]},{"Key":"map function—take","Fragments":["a"]},{"Key":"function—take a","Fragments":["look,"]},{"Key":"a look,","Fragments":["it'll"]},{"Key":"look, it'll","Fragments":["be"]},{"Key":"it'll be","Fragments":["more"]},{"Key":"more profitable","Fragments":["if"]},{"Key":"profitable if","Fragments":["you"]},{"Key":" Why'd","Fragments":["you"]},{"Key":"Why'd you","Fragments":["put"]},{"Key":"put (create-ns","Fragments":["'dna)?"]},{"Key":"(create-ns 'dna)?","Fragments":["That's"]},{"Key":"'dna)? That's","Fragments":["only"]},{"Key":"That's only","Fragments":["needed"]},{"Key":"needed if","Fragments":["you"]},{"Key":"are planning","Fragments":["to"]},{"Key":"planning to","Fragments":["use"]},{"Key":"namespace that","Fragments":["you've"]},{"Key":"you've created","Fragments":["without"]},{"Key":"created without","Fragments":["actually"]},{"Key":"actually being","Fragments":["in"]},{"Key":"being in","Fragments":["it,"]},{"Key":"in it,","Fragments":["which"]},{"Key":"it, which","Fragments":["you","made"]},{"Key":"trouble understanding","Fragments":["the"]},{"Key":"of convert-nucleotide—does","Fragments":["it"]},{"Key":"convert-nucleotide—does it","Fragments":["do"]},{"Key":"it do","Fragments":["anything?"]},{"Key":"start! You","Fragments":["could"]},{"Key":"use blank","Fragments":["instead"]},{"Key":"blank instead","Fragments":["of"]},{"Key":"of empty","Fragments":["+"]},{"Key":"empty +","Fragments":["trim."]},{"Key":"+ trim.","Fragments":["Also"]},{"Key":"trim. Also","Fragments":["you"]},{"Key":"check equality","Fragments":["at"]},{"Key":"equality at","Fragments":["10"]},{"Key":"10 line","Fragments":["without"]},{"Key":"line without","Fragments":["converting"]},{"Key":"without converting","Fragments":["to"]},{"Key":"string ``(=","Fragments":["\\?"]},{"Key":"``(= \\?","Fragments":["(last"]},{"Key":"(last request))``.","Fragments":["What"]},{"Key":"request))``. What","Fragments":["do"]},{"Key":"adding function","Fragments":["like"]},{"Key":"like shout?","Fragments":["or"]},{"Key":"shout? or","Fragments":["question?"]},{"Key":"or question?","Fragments":["to"]},{"Key":"lot better.","Fragments":["Thanks!"]},{"Key":"consider: Instead","Fragments":["of"]},{"Key":"using `every?`","Fragments":["to"]},{"Key":"`every?` to","Fragments":["check"]},{"Key":"empty string,","Fragments":["you"]},{"Key":"string, you","Fragments":["could"]},{"Key":"use `clojure.string/blank?`.","Fragments":["I"]},{"Key":"`clojure.string/blank?`. I","Fragments":["am"]},{"Key":"am also","Fragments":["inclined"]},{"Key":"also inclined","Fragments":["to"]},{"Key":"inclined to","Fragments":["create"]},{"Key":"case to","Fragments":["improve","assert","make"]},{"Key":"have three","Fragments":["things"]},{"Key":"three things","Fragments":["to"]},{"Key":"1. Instead","Fragments":["of"]},{"Key":"of `(re-find","Fragments":["#\"^\\s*$\""]},{"Key":"#\"^\\s*$\" utterance)`","Fragments":["you"]},{"Key":"utterance)` you","Fragments":["could"]},{"Key":"use `clojure.string/blank?`,","Fragments":["which"]},{"Key":"`clojure.string/blank?`, which","Fragments":["does"]},{"Key":"basically what","Fragments":["your"]},{"Key":"regex does","Fragments":["but"]},{"Key":"does but","Fragments":["reads"]},{"Key":"but reads","Fragments":["a"]},{"Key":"2. Import","Fragments":["the"]},{"Key":"Import the","Fragments":["functions"]},{"Key":"functions you","Fragments":["need","are"]},{"Key":"need directly,","Fragments":["and"]},{"Key":"directly, and","Fragments":["not"]},{"Key":"name space.","Fragments":["Use"]},{"Key":"space. Use","Fragments":["`(:require"]},{"Key":"Use `(:require","Fragments":["[clojure.string"]},{"Key":":refer [upper-case])`.","Fragments":["This"]},{"Key":"[upper-case])`. This","Fragments":["way"]},{"Key":"write `s/upper-case`","Fragments":["but"]},{"Key":"`s/upper-case` but","Fragments":["can"]},{"Key":"simply write","Fragments":["`upper-case`."]},{"Key":"3. Put","Fragments":["the"]},{"Key":"Put the","Fragments":["test","conditionals","argument"]},{"Key":"test into","Fragments":["separate"]},{"Key":"will improve","Fragments":["readability","my"]},{"Key":"a pre-condition","Fragments":["to"]},{"Key":"pre-condition to","Fragments":["check"]},{"Key":"check whether","Fragments":["the"]},{"Key":"passed conformed","Fragments":["to"]},{"Key":"conformed to","Fragments":["dna"]},{"Key":"to dna","Fragments":["rules."]},{"Key":"dna rules.","Fragments":["This"]},{"Key":"rules. This","Fragments":["might"]},{"Key":"explicit for","Fragments":["the"]},{"Key":"the reader;","Fragments":["however,"]},{"Key":"reader; however,","Fragments":["I"]},{"Key":"assert would","Fragments":["be"]},{"Key":"performant without","Fragments":["losing"]},{"Key":"was immediately","Fragments":["drawn"]},{"Key":"immediately drawn","Fragments":["towards"]},{"Key":"drawn towards","Fragments":["mapping"]},{"Key":"towards mapping","Fragments":["across"]},{"Key":"mapping across","Fragments":["a","a"]},{"Key":"characters. I","Fragments":["initially"]},{"Key":"initially reached","Fragments":["for"]},{"Key":"reached for","Fragments":["cond,"]},{"Key":"for cond,","Fragments":["but"]},{"Key":"but discovered","Fragments":["case"]},{"Key":"discovered case","Fragments":["in"]},{"Key":"process and","Fragments":["feel"]},{"Key":"feel it","Fragments":["fits"]},{"Key":"fits nicely","Fragments":["here."]},{"Key":"Using regular","Fragments":["expressions"]},{"Key":"only good","Fragments":["solution"]},{"Key":"came to","Fragments":["mind."]},{"Key":"to mind.","Fragments":["I"]},{"Key":"defining predicates","Fragments":["for"]},{"Key":"predicates for","Fragments":["each"]},{"Key":"each specific","Fragments":["different"]},{"Key":"specific different","Fragments":["reply,"]},{"Key":"different reply,","Fragments":["but"]},{"Key":"reply, but","Fragments":["figured"]},{"Key":"but figured","Fragments":["that"]},{"Key":"wouldn't really","Fragments":["be"]},{"Key":"match yelling.","Fragments":["I"]},{"Key":"yelling. I","Fragments":["found"]},{"Key":"least 1","Fragments":["uppercase"]},{"Key":"1 uppercase","Fragments":["letter,"]},{"Key":"uppercase letter,","Fragments":["but"]},{"Key":"letter, but","Fragments":["I"]},{"Key":"doesn't conflate","Fragments":["the"]},{"Key":"conflate the","Fragments":["regex."]},{"Key":"Looking through","Fragments":["other"]},{"Key":"through other","Fragments":["solutions"]},{"Key":"iteration is","Fragments":["utterly"]},{"Key":"is utterly","Fragments":["unreadable."]},{"Key":"utterly unreadable.","Fragments":["Using"]},{"Key":"unreadable. Using","Fragments":["predicates"]},{"Key":"Using predicates","Fragments":["with"]},{"Key":"with cond","Fragments":["over"]},{"Key":"cond over","Fragments":["regex's"]},{"Key":"over regex's","Fragments":["with"]},{"Key":"regex's with","Fragments":["condp"]},{"Key":"with condp","Fragments":["is"]},{"Key":"condp is","Fragments":["not"]},{"Key":"only more","Fragments":["readable,"]},{"Key":"readable, it's","Fragments":["much"]},{"Key":"I enjoyed","Fragments":["the"]},{"Key":"and public","Fragments":["functions"]},{"Key":"another solution","Fragments":["and"]},{"Key":"and decided","Fragments":["to"]},{"Key":"to replicate","Fragments":["that"]},{"Key":"replicate that","Fragments":["here."]},{"Key":"that here.","Fragments":["Also,"]},{"Key":"of :else","Fragments":["instead"]},{"Key":":else instead","Fragments":["of"]},{"Key":"a catch-all","Fragments":["regex"]},{"Key":"catch-all regex","Fragments":["is"]},{"Key":"nested \"ifs\"","Fragments":["is"]},{"Key":"\"ifs\" is","Fragments":["the"]},{"Key":"Now this","Fragments":["looks"]},{"Key":"`clojure.string/blank?` instead","Fragments":["of","of"]},{"Key":"\"\" message)`,","Fragments":["since"]},{"Key":"message)`, since","Fragments":["`blank?`"]},{"Key":"`blank?` covers","Fragments":["a"]},{"Key":"covers a","Fragments":["few"]},{"Key":"more edge","Fragments":["cases"]},{"Key":"edge cases","Fragments":["and","in"]},{"Key":"and states","Fragments":["the"]},{"Key":"states the","Fragments":["intent"]},{"Key":"idiomatic clojure!","Fragments":["Except"]},{"Key":"clojure! Except","Fragments":["for"]},{"Key":"Except for","Fragments":["one"]},{"Key":"one thing:","Fragments":["For"]},{"Key":"thing: For","Fragments":["functions"]},{"Key":"return booleans,","Fragments":["in"]},{"Key":"booleans, in","Fragments":["clojure"]},{"Key":"clojure we","Fragments":["usually"]},{"Key":"we usually","Fragments":["use"]},{"Key":"use `\u003cfunction-name\u003e?`","Fragments":["without"]},{"Key":"`\u003cfunction-name\u003e?` without","Fragments":["the"]},{"Key":"`is-` like","Fragments":["you"]},{"Key":"you did,","Fragments":["since"]},{"Key":"did, since","Fragments":["the"]},{"Key":"mark already","Fragments":["states"]},{"Key":"already states","Fragments":["it"]},{"Key":"states it","Fragments":["as"]},{"Key":"question. So","Fragments":["in"]},{"Key":"you code,","Fragments":["instead"]},{"Key":"code, instead","Fragments":["of"]},{"Key":"using `is-silence?`","Fragments":["it"]},{"Key":"`is-silence?` it","Fragments":["would"]},{"Key":"overall structure","Fragments":["and","of","and"]},{"Key":"functions. Two","Fragments":["things"]},{"Key":"Two things","Fragments":["I","I"]},{"Key":"would change,","Fragments":["though:"]},{"Key":"1. `last-character-of-senctence`","Fragments":["could"]},{"Key":"`last-character-of-senctence` could","Fragments":["be"]},{"Key":"`last`. `last`","Fragments":["gives"]},{"Key":"`last` gives","Fragments":["you"]},{"Key":"a sequence,","Fragments":["and"]},{"Key":"sequence, and","Fragments":["strings"]},{"Key":"and strings","Fragments":["can"]},{"Key":"2. `is-\u003cfunction-name\u003e?`","Fragments":["isn't"]},{"Key":"`is-\u003cfunction-name\u003e?` isn't","Fragments":["idiomatic"]},{"Key":"isn't idiomatic","Fragments":["clojure."]},{"Key":"idiomatic clojure.","Fragments":["In"]},{"Key":"clojure. In","Fragments":["idiomatic"]},{"Key":"In idiomatic","Fragments":["clojure,"]},{"Key":"called `\u003cfunction-name\u003e?`.","Fragments":["For"]},{"Key":"`\u003cfunction-name\u003e?`. For","Fragments":["example"]},{"Key":"example `is-shout?`","Fragments":["would"]},{"Key":"`is-shout?` would","Fragments":["only"]},{"Key":" Someone","Fragments":["who"]},{"Key":"Someone who","Fragments":["writes"]},{"Key":"who writes","Fragments":["comments!"]},{"Key":"writes comments!","Fragments":["Yay!"]},{"Key":"comments! Yay!","Fragments":[":)"]},{"Key":"of `(empty?","Fragments":["(string/trim"]},{"Key":"`(empty? (string/trim","Fragments":["phrase))`."]},{"Key":"2. Put","Fragments":["the"]},{"Key":"conditionals in","Fragments":["separate","`response-for`,"]},{"Key":"in separate","Fragments":["functions"]},{"Key":"better state","Fragments":["the"]},{"Key":"state the","Fragments":["intent"]},{"Key":"give this","Fragments":["submission"]},{"Key":"submission a","Fragments":["near"]},{"Key":"a near","Fragments":["perfect"]},{"Key":"near perfect","Fragments":["score."]},{"Key":"perfect score.","Fragments":[":)"]},{"Key":"replace `(=","Fragments":["(s/trim"]},{"Key":"`(= (s/trim","Fragments":["statement)"]},{"Key":"(s/trim statement)","Fragments":["\"\"))`"]},{"Key":"statement) \"\"))`","Fragments":["with"]},{"Key":"\"\"))` with","Fragments":["a"]},{"Key":"to `clojure.string/blank?`.","Fragments":["It"]},{"Key":"`clojure.string/blank?`. It","Fragments":["just"]},{"Key":"reads slightly","Fragments":["better"]},{"Key":"the `bob/`","Fragments":["in"]},{"Key":"`bob/` in","Fragments":["`(defn"]},{"Key":"in `(defn","Fragments":["bob/response-for"]},{"Key":"`(defn bob/response-for","Fragments":["[message])`."]},{"Key":"bob/response-for [message])`.","Fragments":["The"]},{"Key":"[message])`. The","Fragments":["namespace"]},{"Key":"is defined","Fragments":["with"]},{"Key":"defined with","Fragments":["the"]},{"Key":"macro, so","Fragments":["the"]},{"Key":"be placed","Fragments":["in"]},{"Key":"placed in","Fragments":["the"]},{"Key":" See","Fragments":["if","my","comments","comment"]},{"Key":"if `frequencies`","Fragments":["library"]},{"Key":"`frequencies` library","Fragments":["function"]},{"Key":"great. In","Fragments":["addition,"]},{"Key":"addition, you","Fragments":["could"]},{"Key":"`partial` with","Fragments":["`anagram?`"]},{"Key":"need lambdas","Fragments":["for"]},{"Key":"lambdas for","Fragments":["`Character/isLetter`,"]},{"Key":"for `Character/isLetter`,","Fragments":["can"]},{"Key":"`Character/isLetter`, can","Fragments":["you"]},{"Key":"(filter Character/isLetter","Fragments":["question)"]},{"Key":"structure reflects","Fragments":["the"]},{"Key":"reflects the","Fragments":["solution"]},{"Key":"solution well","Fragments":["enough,"]},{"Key":"well enough,","Fragments":["although"]},{"Key":"enough, although","Fragments":["note,"]},{"Key":"although note,","Fragments":["that:"]},{"Key":"* `remove`","Fragments":["function"]},{"Key":"`remove` function","Fragments":["expects"]},{"Key":"expects a","Fragments":["collection,"]},{"Key":"a collection,","Fragments":["so"]},{"Key":"collection, so","Fragments":["it"]},{"Key":"calls `seq`","Fragments":["on"]},{"Key":"argument automatically,","Fragments":["which"]},{"Key":"automatically, which","Fragments":["applied"]},{"Key":"which applied","Fragments":["to"]},{"Key":"string results","Fragments":["in"]},{"Key":"of chars.","Fragments":["So,"]},{"Key":"chars. So,","Fragments":["`split`"]},{"Key":"So, `split`","Fragments":["is"]},{"Key":"`split` is","Fragments":["unnecessary."]},{"Key":"* using","Fragments":["`def`"]},{"Key":"using `def`","Fragments":["inside"]},{"Key":"`def` inside","Fragments":["a"]},{"Key":"is non-idiomatic","Fragments":["and"]},{"Key":"non-idiomatic and","Fragments":["discouraged,"]},{"Key":"and discouraged,","Fragments":["but"]},{"Key":"discouraged, but","Fragments":["you"]},{"Key":"may use","Fragments":["`let`","`re-seq`"]},{"Key":"`let` form,","Fragments":["instead."]},{"Key":"* there's","Fragments":["idiomatic"]},{"Key":"there's idiomatic","Fragments":["way"]},{"Key":"convert collections","Fragments":["to"]},{"Key":"to strings","Fragments":["with","a"]},{"Key":"with `(apply","Fragments":["str"]},{"Key":"* think,","Fragments":["if"]},{"Key":"think, if","Fragments":["you"]},{"Key":"wrap `to-rna-by-char`","Fragments":["into"]},{"Key":"`to-rna-by-char` into","Fragments":["another"]},{"Key":"into another","Fragments":["function"]},{"Key":"* do","Fragments":["you"]},{"Key":"map data-structure","Fragments":["in"]},{"Key":"data-structure in","Fragments":["`to-rna-by-char`"]},{"Key":"in `to-rna-by-char`","Fragments":["?"]},{"Key":"about \"blank?\"","Fragments":["so"]},{"Key":"\"blank?\" so","Fragments":["I've"]},{"Key":"added that","Fragments":["to"]},{"Key":"version. I","Fragments":["also"]},{"Key":"also replaced","Fragments":["\"(not"]},{"Key":"replaced \"(not","Fragments":["(=\""]},{"Key":"\"(not (=\"","Fragments":["with"]},{"Key":"(=\" with","Fragments":["\"(not=\","]},{"Key":"with \"(not=\",","Fragments":["which"]},{"Key":"\"(not=\", which","Fragments":["I"]},{"Key":"about subsequent","Fragments":["to"]},{"Key":"subsequent to","Fragments":["writing"]},{"Key":"to writing","Fragments":["version"]},{"Key":"writing version","Fragments":["2."]},{"Key":" @johnny","Fragments":["(nice,"]},{"Key":"@johnny (nice,","Fragments":["nick"]},{"Key":"(nice, nick","Fragments":["BTW."]},{"Key":"nick BTW.","Fragments":["I"]},{"Key":"BTW. I","Fragments":["already"]},{"Key":"already love","Fragments":["you!)"]},{"Key":"love you!)","Fragments":["thanks"]},{"Key":"you!) thanks","Fragments":["for"]},{"Key":"So are","Fragments":["you"]},{"Key":"saying that,","Fragments":["instead"]},{"Key":"that, instead","Fragments":["of"]},{"Key":"of `#(anagram?","Fragments":["w"]},{"Key":"`#(anagram? w","Fragments":["%)`"]},{"Key":"w %)`","Fragments":["I"]},{"Key":"%)` I","Fragments":["can"]},{"Key":"use `(partial","Fragments":["anagram?"]},{"Key":"anagram? w)`?","Fragments":["If"]},{"Key":"w)`? If","Fragments":["that's"]},{"Key":"the note,","Fragments":["yeah"]},{"Key":"note, yeah","Fragments":["I"]},{"Key":"yeah I","Fragments":["could"]},{"Key":"think fn-literals","Fragments":["are"]},{"Key":"fn-literals are","Fragments":["idiomatic"]},{"Key":"are idiomatic","Fragments":["with"]},{"Key":"with map/filter","Fragments":["etc.,"]},{"Key":"map/filter etc.,","Fragments":["aren't"]},{"Key":"etc., aren't","Fragments":["they?"]},{"Key":"two with","Fragments":["a"]},{"Key":"called \"evenly-divisible?\"","Fragments":["extracted"]},{"Key":"\"evenly-divisible?\" extracted","Fragments":["to"]},{"Key":"reduce duplication,","Fragments":["as"]},{"Key":"duplication, as","Fragments":["you"]},{"Key":"Right, this","Fragments":["is"]},{"Key":"is why","Fragments":["I","I","I"]},{"Key":"like exercism:","Fragments":["brings"]},{"Key":"exercism: brings","Fragments":["out"]},{"Key":"brings out","Fragments":["such"]},{"Key":"out such","Fragments":["discussions.","an"]},{"Key":"such discussions.","Fragments":["So,"]},{"Key":"discussions. So,","Fragments":["yes,"]},{"Key":"So, yes,","Fragments":["in"]},{"Key":"yes, in","Fragments":["essence,"]},{"Key":"in essence,","Fragments":["both"]},{"Key":"essence, both","Fragments":["are"]},{"Key":"both are","Fragments":["correct"]},{"Key":"and acceptable,","Fragments":["IMO."]},{"Key":"acceptable, IMO.","Fragments":["Personal"]},{"Key":"IMO. Personal","Fragments":["choice,"]},{"Key":"Personal choice,","Fragments":["I'd"]},{"Key":"choice, I'd","Fragments":["say."]},{"Key":"test your","Fragments":["`shouting?`"]},{"Key":"your `shouting?`","Fragments":["does."]},{"Key":"You've probably","Fragments":["found"]},{"Key":"probably found","Fragments":["it"]},{"Key":"it already,","Fragments":["but"]},{"Key":"already, but","Fragments":["`cond`","makes"]},{"Key":"but `cond`","Fragments":["is"]},{"Key":"were looking","Fragments":["to"]},{"Key":"`if` expressions","Fragments":["with."]},{"Key":"know -","Fragments":["I'm"]},{"Key":"I'm that","Fragments":["of"]},{"Key":"of idiomaticity","Fragments":["expert."]},{"Key":"idiomaticity expert.","Fragments":["Just"]},{"Key":"expert. Just","Fragments":["wanted"]},{"Key":"that other","Fragments":["possibility."]},{"Key":"Looks fine.","Fragments":["Note,"]},{"Key":"fine. Note,","Fragments":["that"]},{"Key":"Note, that","Fragments":["you"]},{"Key":"`re-seq` for","Fragments":["sequence","this"]},{"Key":"for sequence","Fragments":["of"]},{"Key":"of words,","Fragments":["too."]},{"Key":"words, too.","Fragments":["Also,"]},{"Key":"too. Also,","Fragments":["take"]},{"Key":"at `merge-with`","Fragments":["function"]},{"Key":"`merge-with` function","Fragments":["-"]},{"Key":" Strictly","Fragments":["speaking,"]},{"Key":"Strictly speaking,","Fragments":["the"]},{"Key":"speaking, the","Fragments":["error"]},{"Key":"the error","Fragments":["message"]},{"Key":"message from","Fragments":["`transcribe-char`"]},{"Key":"from `transcribe-char`","Fragments":["should"]},{"Key":"`transcribe-char` should","Fragments":["be"]},{"Key":"like \"Invalid","Fragments":["nucleotide"]},{"Key":"\"Invalid nucleotide","Fragments":["character\"."]},{"Key":"nucleotide character\".","Fragments":["`to-rna`"]},{"Key":"character\". `to-rna`","Fragments":["can"]},{"Key":"`to-rna` can","Fragments":["catch"]},{"Key":"can catch","Fragments":["and"]},{"Key":"catch and","Fragments":["raise"]},{"Key":"and raise","Fragments":["your"]},{"Key":"raise your","Fragments":["\"Invalid"]},{"Key":"your \"Invalid","Fragments":["DNA"]},{"Key":"\"Invalid DNA","Fragments":["string\""]},{"Key":"so feel","Fragments":["free"]},{"Key":"include comments","Fragments":["on"]},{"Key":"comments on","Fragments":["formatting","version"]},{"Key":"formatting or","Fragments":["other"]},{"Key":"or other","Fragments":["conventions."]},{"Key":"test this,","Fragments":["but"]},{"Key":"but from","Fragments":["my"]},{"Key":"my read,","Fragments":["it"]},{"Key":"read, it","Fragments":["looks"]},{"Key":"your 'shouting'","Fragments":["method"]},{"Key":"'shouting' method","Fragments":["would"]},{"Key":"method would","Fragments":["catch"]},{"Key":" \"SAT","Fragments":["is"]},{"Key":"\"SAT is","Fragments":["more"]},{"Key":"more valuable","Fragments":["than"]},{"Key":"valuable than","Fragments":["ACT\""]},{"Key":"other sandwich","Fragments":["of"]},{"Key":"sandwich of","Fragments":["capital"]},{"Key":"error in","Fragments":["the"]},{"Key":"the 'spec'","Fragments":["though"]},{"Key":"'spec' though","Fragments":[";-)"]},{"Key":"should replace","Fragments":["your"]},{"Key":"your \"cond\"","Fragments":["statement"]},{"Key":"\"cond\" statement","Fragments":["with"]},{"Key":"statement with","Fragments":["a","the"]},{"Key":"a \"case\"","Fragments":["statement"]},{"Key":" 1","Fragments":["\"...\""]},{"Key":"Since convert-nucleotide","Fragments":["is"]},{"Key":"convert-nucleotide is","Fragments":["so"]},{"Key":"so simple,","Fragments":["to"]},{"Key":"simple, to","Fragments":["me"]},{"Key":":pre clause","Fragments":["adds"]},{"Key":"clause adds","Fragments":["repetition"]},{"Key":"adds repetition","Fragments":["but"]},{"Key":"repetition but","Fragments":["not"]},{"Key":"not clarity.","Fragments":["Could"]},{"Key":"clarity. Could","Fragments":["you"]},{"Key":"you detect","Fragments":["and"]},{"Key":"detect and","Fragments":["deal"]},{"Key":"and deal","Fragments":["with"]},{"Key":"with nonexistent","Fragments":["nucleotides"]},{"Key":"nonexistent nucleotides","Fragments":["right"]},{"Key":"nucleotides right","Fragments":["in"]},{"Key":"The long","Fragments":["visual"]},{"Key":"long visual","Fragments":["distance"]},{"Key":"visual distance","Fragments":["between"]},{"Key":"distance between","Fragments":["the"]},{"Key":"defn of","Fragments":["to-rna"]},{"Key":"of to-rna","Fragments":["and"]},{"Key":"to-rna and","Fragments":["the"]},{"Key":"body makes","Fragments":["the"]},{"Key":"flow a","Fragments":["bit"]},{"Key":" Smaller","Fragments":["things:"]},{"Key":"Smaller things:","Fragments":["as"]},{"Key":"things: as","Fragments":["MatthewWest"]},{"Key":"as MatthewWest","Fragments":["says,"]},{"Key":"MatthewWest says,","Fragments":["create-ns"]},{"Key":"says, create-ns","Fragments":["is"]},{"Key":"create-ns is","Fragments":["not"]},{"Key":"needed here.","Fragments":["You"]},{"Key":"also bundle","Fragments":["the"]},{"Key":"bundle the","Fragments":["require"]},{"Key":"require call","Fragments":["into"]},{"Key":"call into","Fragments":["your"]},{"Key":"ns declaration,","Fragments":["but"]},{"Key":"declaration, but","Fragments":["it"]},{"Key":"library at","Fragments":["all."]},{"Key":"your variable","Fragments":["and"]},{"Key":"variable and","Fragments":["function"]},{"Key":"function naming","Fragments":["a"]},{"Key":"naming a","Fragments":["lot."]},{"Key":"lot. I","Fragments":["think"]},{"Key":"think \"assert","Fragments":["false\""]},{"Key":"\"assert false\"","Fragments":["is","instead"]},{"Key":"false\" is","Fragments":["a"]},{"Key":"unclear about","Fragments":["what's"]},{"Key":"about what's","Fragments":["wrong"]},{"Key":"what's wrong","Fragments":["-"]},{"Key":"you created","Fragments":["an"]},{"Key":"created an","Fragments":["AssertionError"]},{"Key":"AssertionError by","Fragments":["hand?"]},{"Key":"string manipulation","Fragments":["functions."]},{"Key":"manipulation functions.","Fragments":["Breaking"]},{"Key":"functions. Breaking","Fragments":["out"]},{"Key":"Breaking out","Fragments":["the"]},{"Key":"validation into","Fragments":["its"]},{"Key":"nice touch,","Fragments":["too."]},{"Key":"touch, too.","Fragments":["Naming"]},{"Key":"too. Naming","Fragments":["the"]},{"Key":"Naming the","Fragments":["nucleotides"]},{"Key":"different places","Fragments":["is"]},{"Key":"places is","Fragments":["a"]},{"Key":"a touch","Fragments":["repetitive.","inefficient"]},{"Key":"re-seq works","Fragments":["really"]},{"Key":"works really","Fragments":["well"]},{"Key":"really well","Fragments":["here","here."]},{"Key":"well here","Fragments":["-"]},{"Key":"Your lambda","Fragments":["is"]},{"Key":"lambda is","Fragments":["definitely"]},{"Key":"definitely readable,","Fragments":["but"]},{"Key":"also results","Fragments":["in"]},{"Key":"call being","Fragments":["far"]},{"Key":"being far","Fragments":["from"]},{"Key":"far from","Fragments":["its"]},{"Key":"from its","Fragments":["argument"]},{"Key":"argument (lines","Fragments":["6"]},{"Key":"(lines 6","Fragments":["and"]},{"Key":"and 11).","Fragments":["Personally,"]},{"Key":"11). Personally,","Fragments":["I"]},{"Key":"shorter lambda","Fragments":["you"]},{"Key":"lambda you","Fragments":["had"]},{"Key":"makes reduce","Fragments":["the"]},{"Key":"the clear","Fragments":["star"]},{"Key":"clear star","Fragments":["of"]},{"Key":"star of","Fragments":["the"]},{"Key":" Man,","Fragments":["that"]},{"Key":"Man, that","Fragments":["\"4?\""]},{"Key":"that \"4?\"","Fragments":["test"]},{"Key":"\"4?\" test","Fragments":["hit"]},{"Key":"test hit","Fragments":["me"]},{"Key":"hit me","Fragments":["hard,"]},{"Key":"me hard,","Fragments":["too!"]},{"Key":"just taught","Fragments":["me","me"]},{"Key":"that 'last'","Fragments":["applies"]},{"Key":"'last' applies","Fragments":["to"]},{"Key":"to strings!","Fragments":["(More"]},{"Key":"strings! (More","Fragments":["importantly,"]},{"Key":"(More importantly,","Fragments":["strings"]},{"Key":"importantly, strings","Fragments":["are"]},{"Key":"are lists.","Fragments":["like,"]},{"Key":"lists. like,","Fragments":["I"]},{"Key":"like, I","Fragments":["shoulda"]},{"Key":"I shoulda","Fragments":["known,"]},{"Key":"shoulda known,","Fragments":["but"]},{"Key":"known, but","Fragments":["somehow"]},{"Key":"but somehow","Fragments":["didn't.)"]},{"Key":"pretty gross,","Fragments":["but"]},{"Key":"gross, but","Fragments":["it's"]},{"Key":"it's succinct!","Fragments":["that's"]},{"Key":"succinct! that's","Fragments":["worth...something...right?"]},{"Key":" Fine.","Fragments":["Be"]},{"Key":"Fine. Be","Fragments":["that"]},{"Key":"clojure code,","Fragments":["so"]},{"Key":"have zero","Fragments":["idea"]},{"Key":"zero idea","Fragments":["what"]},{"Key":"what i'm","Fragments":["doing..."]},{"Key":"few thoughts","Fragments":["about"]},{"Key":"thoughts about","Fragments":["this"]},{"Key":"feels kinda","Fragments":["verbose,"]},{"Key":"kinda verbose,","Fragments":["but"]},{"Key":"it mirrors","Fragments":["my"]},{"Key":"mirrors my","Fragments":["solution"]},{"Key":"bob problem","Fragments":["in"]},{"Key":"languages, so","Fragments":["I"]},{"Key":"it's too","Fragments":["bad.","much"]},{"Key":"too bad.","Fragments":["I","Also"]},{"Key":"bad. I","Fragments":["think"]},{"Key":"the named","Fragments":["functions"]},{"Key":"are worth","Fragments":["the"]},{"Key":"surprised not","Fragments":["to"]},{"Key":"find and","Fragments":["```ends-with```"]},{"Key":"and ```ends-with```","Fragments":["function."]},{"Key":"nested functions","Fragments":["like"]},{"Key":"have. It","Fragments":["feels"]},{"Key":"feels right,","Fragments":["but"]},{"Key":"also separates","Fragments":["the"]},{"Key":"separates the","Fragments":["function"]},{"Key":"function head","Fragments":["from"]},{"Key":"head from","Fragments":["it's"]},{"Key":"from it's","Fragments":["\"real\""]},{"Key":"it's \"real\"","Fragments":["body."]},{"Key":"\"real\" body.","Fragments":["Is"]},{"Key":"body. Is","Fragments":["there"]},{"Key":"are better","Fragments":["way"]},{"Key":"create _private_","Fragments":["functions?"]},{"Key":" Replaced","Fragments":["```(.endsWith"]},{"Key":"Replaced ```(.endsWith","Fragments":["\"?\""]},{"Key":"```(.endsWith \"?\"","Fragments":["statement)```"]},{"Key":"\"?\" statement)```","Fragments":["with"]},{"Key":"statement)``` with","Fragments":["the"]},{"Key":"the (hopefully)","Fragments":["more"]},{"Key":"(hopefully) more","Fragments":["idiomatic"]},{"Key":"idiomatic ```(=","Fragments":["\\?"]},{"Key":"Renamed the","Fragments":["predicate"]},{"Key":"of merging","Fragments":["with"]},{"Key":"of default","Fragments":["values."]},{"Key":"a doc","Fragments":["string."]},{"Key":"my comments","Fragments":["on"]},{"Key":"on version","Fragments":["1"]},{"Key":"1 for","Fragments":["my"]},{"Key":"add one","Fragments":["more"]},{"Key":"the impression","Fragments":["that"]},{"Key":"impression that","Fragments":["the"]},{"Key":":use flag","Fragments":["is"]},{"Key":"flag is","Fragments":["generally"]},{"Key":"frowned upon,","Fragments":["but"]},{"Key":"upon, but","Fragments":["in"]},{"Key":"just can't","Fragments":["see"]},{"Key":"the harm.","Fragments":["Am"]},{"Key":"harm. Am","Fragments":["I"]},{"Key":"The frequencies","Fragments":["and"]},{"Key":"and re-seq","Fragments":["functions"]},{"Key":"re-seq functions","Fragments":["really"]},{"Key":"functions really","Fragments":["do"]},{"Key":"code up.","Fragments":["Same"]},{"Key":"up. Same","Fragments":["results,"]},{"Key":"Same results,","Fragments":["but"]},{"Key":"results, but","Fragments":["the"]},{"Key":"now hidden","Fragments":["behind"]},{"Key":"behind core","Fragments":["functions."]},{"Key":"first pass,","Fragments":["focusing"]},{"Key":"pass, focusing","Fragments":["on"]},{"Key":"focusing on","Fragments":["cleanliness"]},{"Key":"on cleanliness","Fragments":["and"]},{"Key":"cleanliness and","Fragments":["readability"]},{"Key":"but ignoring","Fragments":["the"]},{"Key":"ignoring the","Fragments":["duplication"]},{"Key":"duplication caused","Fragments":["by"]},{"Key":"caused by","Fragments":["all","removing"]},{"Key":"Very concise!","Fragments":["Though"]},{"Key":"concise! Though","Fragments":["I"]},{"Key":"wouldn't map","Fragments":["`lower-case`"]},{"Key":"map `lower-case`","Fragments":["over"]},{"Key":"`lower-case` over","Fragments":["all"]},{"Key":"over all","Fragments":["the"]},{"Key":"terms and","Fragments":["instead"]},{"Key":"instead apply","Fragments":["`lower-case`"]},{"Key":"apply `lower-case`","Fragments":["to"]},{"Key":"text than","Fragments":["then"]},{"Key":"than then","Fragments":["`split`"]},{"Key":"then `split`","Fragments":["it."]},{"Key":"nice split.","Fragments":["I"]},{"Key":"split. I","Fragments":["used","might"]},{"Key":"few workarounds","Fragments":["to"]},{"Key":"workarounds to","Fragments":["get"]},{"Key":"result you","Fragments":["get"]},{"Key":"get in","Fragments":["one"]},{"Key":"I blow","Fragments":["your"]},{"Key":"blow your","Fragments":["mind?"]},{"Key":"your mind?","Fragments":["Clojure"]},{"Key":"mind? Clojure","Fragments":["already"]},{"Key":"Clojure already","Fragments":["has","so"]},{"Key":"already has","Fragments":["a","a"]},{"Key":"should start","Fragments":["to"]},{"Key":"start to","Fragments":["use","delve"]},{"Key":"`defn-` more...","Fragments":[":)"]},{"Key":"But you","Fragments":["could","can"]},{"Key":"could skip","Fragments":["the"]},{"Key":"cleanup step","Fragments":["if"]},{"Key":"step if","Fragments":["you"]},{"Key":"you split","Fragments":["on","it?"]},{"Key":"split on","Fragments":["`[^\\w]+`,","everything"]},{"Key":"on `[^\\w]+`,","Fragments":["this"]},{"Key":"`[^\\w]+`, this","Fragments":["will"]},{"Key":"will automatically","Fragments":["ignore"]},{"Key":"automatically ignore","Fragments":["all"]},{"Key":"ignore all","Fragments":["the"]},{"Key":"Very simple","Fragments":["and"]},{"Key":"small things:","Fragments":["Clojure"]},{"Key":"things: Clojure","Fragments":["actually"]},{"Key":"Clojure actually","Fragments":["already"]},{"Key":"actually already","Fragments":["has"]},{"Key":" Directly","Fragments":["to"]},{"Key":"Directly to","Fragments":["the"]},{"Key":"the point,","Fragments":["I"]},{"Key":"Two things,","Fragments":["though."]},{"Key":"would extract","Fragments":["`#(assoc"]},{"Key":"extract `#(assoc","Fragments":["%1"]},{"Key":"`#(assoc %1","Fragments":["%2"]},{"Key":"%2 (inc","Fragments":["(%1"]},{"Key":"(inc (%1","Fragments":["%2"]},{"Key":"(%1 %2","Fragments":["0)))`"]},{"Key":"%2 0)))`","Fragments":["into"]},{"Key":"0)))` into","Fragments":["its"]},{"Key":"own function.","Fragments":["By"]},{"Key":"function. By","Fragments":["just"]},{"Key":"By just","Fragments":["quickly"]},{"Key":"just quickly","Fragments":["glancing"]},{"Key":"quickly glancing","Fragments":["at"]},{"Key":"glancing at","Fragments":["it"]},{"Key":"2. Clojure","Fragments":["has"]},{"Key":"in `frequencies`","Fragments":["function."]},{"Key":"probably validate","Fragments":["that"]},{"Key":"DNA strands","Fragments":["contain"]},{"Key":"strands contain","Fragments":["only"]},{"Key":"only valid","Fragments":["nucleotides"]},{"Key":"nucleotides before","Fragments":["comparing"]},{"Key":"before comparing","Fragments":["them."]},{"Key":"of `=","Fragments":["\\?`."]},{"Key":"`= \\?`.","Fragments":["I"]},{"Key":"\\?`. I","Fragments":["found"]},{"Key":" Performance","Fragments":["was"]},{"Key":"Performance was","Fragments":["not"]},{"Key":"a consideration","Fragments":["at"]},{"Key":"consideration at","Fragments":["all."]},{"Key":"all. I'm","Fragments":["trying"]},{"Key":"get into","Fragments":["idiomatic"]},{"Key":"into idiomatic","Fragments":["Clojure"]},{"Key":"the (=","Fragments":["msg"]},{"Key":"(upper-case msg))","Fragments":["part,"]},{"Key":"msg)) part,","Fragments":["which"]},{"Key":"part, which","Fragments":["looks"]},{"Key":"which looks","Fragments":["logical"]},{"Key":"looks logical","Fragments":["when"]},{"Key":"logical when","Fragments":["read"]},{"Key":"read here,","Fragments":["but"]},{"Key":"didn't come","Fragments":["to"]},{"Key":"It surely","Fragments":["pays"]},{"Key":"surely pays","Fragments":["off"]},{"Key":"pays off","Fragments":["to"]},{"Key":"know your","Fragments":["libraries"]},{"Key":"I'm by","Fragments":["no"]},{"Key":"by no","Fragments":["means"]},{"Key":"no means","Fragments":["a"]},{"Key":"means a","Fragments":["Clojure"]},{"Key":"Clojure expert,","Fragments":["but"]},{"Key":"expert, but","Fragments":["I"]},{"Key":"usually no","Fragments":["indentation"]},{"Key":"no indentation","Fragments":["after"]},{"Key":"indentation after","Fragments":["the"]},{"Key":"the (ns","Fragments":["...)"]},{"Key":"(ns ...)","Fragments":["function,"]},{"Key":"...) function,","Fragments":["and"]},{"Key":"newline separating","Fragments":["the"]},{"Key":"various (defn)s","Fragments":["would"]},{"Key":"(defn)s would","Fragments":["be"]},{"Key":"from this,","Fragments":["it"]},{"Key":"this, it","Fragments":["looks"]},{"Key":"A quick","Fragments":["Google"]},{"Key":"quick Google","Fragments":["search"]},{"Key":"Google search","Fragments":["didn't"]},{"Key":"search didn't","Fragments":["return"]},{"Key":"didn't return","Fragments":["anything"]},{"Key":"return anything","Fragments":["for"]},{"Key":"anything for","Fragments":["the"]},{"Key":"the 'as-\u003e'","Fragments":["and"]},{"Key":"'as-\u003e' and","Fragments":["'\u003c\u003e'"]},{"Key":"and '\u003c\u003e'","Fragments":["forms."]},{"Key":"'\u003c\u003e' forms.","Fragments":["Could"]},{"Key":"forms. Could","Fragments":["you"]},{"Key":"me any","Fragments":["hints/links?"]},{"Key":"+1 on","Fragments":["mapping","the","using"]},{"Key":"on mapping","Fragments":["across"]},{"Key":"character sequence","Fragments":["and","to"]},{"Key":"find map","Fragments":["definitions"]},{"Key":"map definitions","Fragments":["using"]},{"Key":"definitions using","Fragments":["a"]},{"Key":"a comma","Fragments":["separator"]},{"Key":"comma separator","Fragments":["more"]},{"Key":"separator more","Fragments":["readable."]},{"Key":"nested replace","Fragments":["functions"]},{"Key":"functions particularly","Fragments":["readable."]},{"Key":"particularly readable.","Fragments":["You"]},{"Key":"readable. You","Fragments":["could"]},{"Key":"-\u003e macro","Fragments":["form"]},{"Key":"macro form","Fragments":["to"]},{"Key":"Also, IMHO,","Fragments":["this"]},{"Key":"IMHO, this","Fragments":["problem"]},{"Key":"problem begs","Fragments":["for"]},{"Key":"begs for","Fragments":["a"]},{"Key":"a usage","Fragments":["of"]},{"Key":"Very close","Fragments":["to"]},{"Key":"close to","Fragments":["my"]},{"Key":"with nice","Fragments":["naming"]},{"Key":"nice naming","Fragments":["and"]},{"Key":"hence really","Fragments":["self-explanatory!"]},{"Key":"would go","Fragments":["for","for"]},{"Key":"for comma","Fragments":["separation"]},{"Key":"comma separation","Fragments":["in"]},{"Key":"the map's","Fragments":["declaration,"]},{"Key":"map's declaration,","Fragments":["since"]},{"Key":"declaration, since","Fragments":["your"]},{"Key":"since your","Fragments":["horizontal"]},{"Key":"your horizontal","Fragments":["alignment"]},{"Key":"horizontal alignment","Fragments":["visually"]},{"Key":"alignment visually","Fragments":["suggests"]},{"Key":"visually suggests","Fragments":["vertical"]},{"Key":"suggests vertical","Fragments":["pairs"]},{"Key":"vertical pairs","Fragments":["(at"]},{"Key":"pairs (at","Fragments":["least"]},{"Key":"Since regex","Fragments":["class"]},{"Key":"regex class","Fragments":["\\w"]},{"Key":"class \\w","Fragments":["contains"]},{"Key":"\\w contains","Fragments":["digits,"]},{"Key":"contains digits,","Fragments":["you"]},{"Key":"digits, you","Fragments":["don't"]},{"Key":"the \\d","Fragments":["part:"]},{"Key":"\\d part:","Fragments":["#\"[^\\w]+\"."]},{"Key":"Also, reloading","Fragments":["of"]},{"Key":"reloading of","Fragments":["the"]},{"Key":"file leads","Fragments":["to"]},{"Key":"name clash","Fragments":["on"]},{"Key":"clash on","Fragments":["the"]},{"Key":"function (defined","Fragments":["in"]},{"Key":"(defined in","Fragments":["core,"]},{"Key":"in core,","Fragments":["too),"]},{"Key":"core, too),","Fragments":["so"]},{"Key":"too), so","Fragments":["that's"]},{"Key":"why many","Fragments":["people"]},{"Key":"people use","Fragments":["(:require"]},{"Key":"use (:require","Fragments":["[clojure.string"]},{"Key":"suite? Because","Fragments":["the"]},{"Key":"Because the","Fragments":["expected"]},{"Key":"expected namespace","Fragments":["is"]},{"Key":"is 'word-count',","Fragments":["not"]},{"Key":"'word-count', not","Fragments":["'phrase'..."]},{"Key":"using `anagram?`","Fragments":["instead"]},{"Key":"of `is_anagram?`","Fragments":["is"]},{"Key":"`is_anagram?` is","Fragments":["a"]},{"Key":"idiomatic. If","Fragments":["you"]},{"Key":"the `is`","Fragments":["you"]},{"Key":"`is` you","Fragments":["should"]},{"Key":"should at","Fragments":["least"]},{"Key":"least change","Fragments":["the"]},{"Key":"the underscore.","Fragments":["It"]},{"Key":"underscore. It","Fragments":["just"]},{"Key":"in there,","Fragments":["`get`"]},{"Key":"there, `get`","Fragments":["accepts"]},{"Key":"`get` accepts","Fragments":["a"]},{"Key":"a `not-found`","Fragments":["value"]},{"Key":"`not-found` value","Fragments":["as"]},{"Key":"value as","Fragments":["the"]},{"Key":"third parameter.","Fragments":["This"]},{"Key":"Nice solution","Fragments":["idea,","idea."]},{"Key":"solution idea,","Fragments":["but"]},{"Key":"the similar","Fragments":["naming"]},{"Key":"similar naming","Fragments":["of"]},{"Key":"of 'cleaned-options'","Fragments":["in"]},{"Key":"'cleaned-options' in","Fragments":["fn"]},{"Key":"fn 'anagrams-for'","Fragments":["and"]},{"Key":"'anagrams-for' and","Fragments":["'cleaned-option'"]},{"Key":"and 'cleaned-option'","Fragments":["in"]},{"Key":"'cleaned-option' in","Fragments":["'anagram?',"]},{"Key":"in 'anagram?',","Fragments":["although"]},{"Key":"'anagram?', although","Fragments":["they"]},{"Key":"they signify","Fragments":["very"]},{"Key":"signify very","Fragments":["different"]},{"Key":"very different","Fragments":["concepts."]},{"Key":"Nice concept,","Fragments":["but"]},{"Key":"concept, but","Fragments":["'dna-nucleotide-\u003erna-nucleotide'"]},{"Key":"but 'dna-nucleotide-\u003erna-nucleotide'","Fragments":["is"]},{"Key":"'dna-nucleotide-\u003erna-nucleotide' is","Fragments":["a"]},{"Key":"long name,","Fragments":["in"]},{"Key":"name, in","Fragments":["my"]},{"Key":"my book","Fragments":[":-)"]},{"Key":"of syntax,","Fragments":["I"]},{"Key":"syntax, I","Fragments":["find"]},{"Key":"find comma-separated","Fragments":["maps"]},{"Key":"comma-separated maps","Fragments":["much"]},{"Key":"maps much","Fragments":["more"]},{"Key":"readable, and","Fragments":["I","prefer"]},{"Key":"would insert","Fragments":["a"]},{"Key":"insert a","Fragments":["newline"]},{"Key":"newline before","Fragments":["the"]},{"Key":"the 'if'","Fragments":["function"]},{"Key":"'if' function","Fragments":["in"]},{"Key":"in 'translate","Fragments":["letter'."]},{"Key":"Also, although","Fragments":["I"]},{"Key":"prefer shorter","Fragments":["names"]},{"Key":"shorter names","Fragments":["these"]},{"Key":"names these","Fragments":["days,"]},{"Key":"these days,","Fragments":["mixing"]},{"Key":"days, mixing","Fragments":["'m'"]},{"Key":"mixing 'm'","Fragments":["and"]},{"Key":"'m' and","Fragments":["'n'"]},{"Key":"and 'n'","Fragments":["is"]},{"Key":"'n' is","Fragments":["stretching"]},{"Key":"is stretching","Fragments":["it"]},{"Key":"stretching it","Fragments":["too"]},{"Key":"much, for","Fragments":["me"]},{"Key":"some redundancy","Fragments":["by"]},{"Key":"redundancy by","Fragments":["working"]},{"Key":"by working","Fragments":["on"]},{"Key":"the uppercase","Fragments":["representation","vs"]},{"Key":"uppercase representation","Fragments":["of"]},{"Key":"my taste,","Fragments":["there"]},{"Key":"taste, there","Fragments":["is"]},{"Key":"tad too","Fragments":["much"]},{"Key":"much nesting","Fragments":["of"]},{"Key":"nesting of","Fragments":["functions"]},{"Key":"and conditions","Fragments":["going"]},{"Key":"conditions going","Fragments":["on"]},{"Key":"how -","Fragments":["with"]},{"Key":"- with","Fragments":["good"]},{"Key":"with good","Fragments":["names"]},{"Key":"the lengthy,","Fragments":["nested"]},{"Key":"lengthy, nested","Fragments":["code"]},{"Key":"still clear","Fragments":["and"]},{"Key":"for combining","Fragments":["sorted"]},{"Key":"combining sorted","Fragments":["character"]},{"Key":"sorted character","Fragments":["sequences"]},{"Key":"character sequences","Fragments":["with"]},{"Key":"It's sufficient","Fragments":["to"]},{"Key":"sufficient to","Fragments":["just"]},{"Key":"just filter","Fragments":["in-words","over"]},{"Key":"filter in-words","Fragments":["(no"]},{"Key":"in-words (no","Fragments":["need"]},{"Key":"(no need","Fragments":["to"]},{"Key":"new result","Fragments":["vector)."]},{"Key":"like if","Fragments":["you","you"]},{"Key":"the 'thread","Fragments":["first'"]},{"Key":"'thread first'","Fragments":["macro"]},{"Key":"first' macro","Fragments":["`(-\u003e"]},{"Key":"macro `(-\u003e","Fragments":["input"]},{"Key":"Nice handling","Fragments":["of"]},{"Key":"handling of","Fragments":["the"]},{"Key":"the \\U","Fragments":["base."]},{"Key":"mapping -1","Fragments":["to"]},{"Key":"-1 to","Fragments":["the"]},{"Key":"the 99","Fragments":["wraparound"]},{"Key":"99 wraparound","Fragments":["value."]},{"Key":" Interestingly,","Fragments":["due"]},{"Key":"Interestingly, due","Fragments":["to"]},{"Key":"duplication, I","Fragments":["find"]},{"Key":"solution rather","Fragments":["clear"]},{"Key":"rather clear","Fragments":["and"]},{"Key":"again, +1","Fragments":["for"]},{"Key":"Good points.","Fragments":["The"]},{"Key":"points. The","Fragments":["UPPER_CASE_CONSTANTS"]},{"Key":"The UPPER_CASE_CONSTANTS","Fragments":["was"]},{"Key":"UPPER_CASE_CONSTANTS was","Fragments":["my"]},{"Key":"ruby coming","Fragments":["through,"]},{"Key":"coming through,","Fragments":["and"]},{"Key":"through, and","Fragments":["the"]},{"Key":"of privacy","Fragments":["was"]},{"Key":"privacy was","Fragments":["my"]},{"Key":"my clojure","Fragments":["inexperience."]},{"Key":"clojure inexperience.","Fragments":["Thanks"]},{"Key":"inexperience. Thanks","Fragments":["for"]},{"Key":"to 'seq'","Fragments":["the","the"]},{"Key":"'seq' the","Fragments":["inputs","inputs"]},{"Key":"the inputs","Fragments":["here.","to"]},{"Key":"inputs here.","Fragments":["'map'"]},{"Key":"here. 'map'","Fragments":["does"]},{"Key":"'map' does","Fragments":["this"]},{"Key":"inputs to","Fragments":["'map',"]},{"Key":"to 'map',","Fragments":["it"]},{"Key":"'map', it","Fragments":["does"]},{"Key":"the all-uppercase","Fragments":["naming"]},{"Key":"all-uppercase naming","Fragments":["of"]},{"Key":"of vars.","Fragments":["Perhaps"]},{"Key":"vars. Perhaps","Fragments":["they"]},{"Key":"Perhaps they","Fragments":["could"]},{"Key":"they could","Fragments":["benefit","be"]},{"Key":"made private,","Fragments":["too"]},{"Key":"private, too","Fragments":["(\\^:private)?"]},{"Key":" @katrine","Fragments":["hmmm"]},{"Key":"@katrine hmmm","Fragments":["I"]},{"Key":"hmmm I","Fragments":["must"]},{"Key":"an old","Fragments":["version"]},{"Key":"old version","Fragments":["of"]},{"Key":"suite. Fixing","Fragments":["it."]},{"Key":"Fixing it.","Fragments":["Thanks!"]},{"Key":"need verse-8","Fragments":["defined?"]},{"Key":"verse-8 defined?","Fragments":["Doesn't"]},{"Key":"defined? Doesn't","Fragments":["seem"]},{"Key":"Doesn't seem","Fragments":["to"]},{"Key":"in 'nucleotide-counts'","Fragments":["by"]},{"Key":"'nucleotide-counts' by","Fragments":["using"]},{"Key":"using map,","Fragments":["but"]},{"Key":"then frequencies","Fragments":["comes"]},{"Key":"frequencies comes","Fragments":["to"]},{"Key":"to mind","Fragments":["to"]},{"Key":"mind to","Fragments":["avoid"]},{"Key":"avoid filtering","Fragments":["the"]},{"Key":"base collection","Fragments":["multiple"]},{"Key":"collection multiple","Fragments":["times."]},{"Key":"Or '(map","Fragments":["not="]},{"Key":"'(map not=","Fragments":["s1"]},{"Key":"It certainly","Fragments":["improves"]},{"Key":"improves golf","Fragments":["score"]},{"Key":"golf score","Fragments":["=)."]},{"Key":" ..","Fragments":["and"]},{"Key":".. and","Fragments":["readability"]},{"Key":"Made use","Fragments":["of"]},{"Key":"Oh, right,","Fragments":["I"]},{"Key":"hadn't realized.","Fragments":["Thanks!"]},{"Key":"terrible person.","Fragments":["Due"]},{"Key":"person. Due","Fragments":["to"]},{"Key":"of experience","Fragments":["with"]},{"Key":"I honestly","Fragments":["googled"]},{"Key":"honestly googled","Fragments":["up"]},{"Key":"googled up","Fragments":["this"]},{"Key":"this answer","Fragments":["and","by"]},{"Key":"answer and","Fragments":["typed"]},{"Key":"and typed","Fragments":["it"]},{"Key":"typed it","Fragments":["out"]},{"Key":"by hand","Fragments":["for"]},{"Key":"hand for","Fragments":["the"]},{"Key":"exercise. I","Fragments":["don't"]},{"Key":"quite know","Fragments":["how"]},{"Key":"community here","Fragments":["works,"]},{"Key":"works, yet;","Fragments":["I'll"]},{"Key":"yet; I'll","Fragments":["close"]},{"Key":"I'll close","Fragments":["the"]},{"Key":"submission if","Fragments":["it's","about"]},{"Key":"it's kosher","Fragments":["but"]},{"Key":"kosher but","Fragments":["having"]},{"Key":"but having","Fragments":["other"]},{"Key":"having other","Fragments":["people's"]},{"Key":"other people's","Fragments":["submissions","solutions"]},{"Key":"people's submissions","Fragments":["available"]},{"Key":"submissions available","Fragments":["to"]},{"Key":"me will","Fragments":["help"]},{"Key":"me learn","Fragments":["while","a","some"]},{"Key":"learn while","Fragments":["the"]},{"Key":"submission is","Fragments":["open."]},{"Key":"of `(:require","Fragments":["[name.space"]},{"Key":"`(:require [name.space","Fragments":[":refer"]},{"Key":"[name.space :refer","Fragments":["(symbol1"]},{"Key":":refer (symbol1","Fragments":["symbol2)])`"]},{"Key":"1. Aliasing","Fragments":["the"]},{"Key":"Aliasing the","Fragments":["the"]},{"Key":"2. `is-`","Fragments":["prefix"]},{"Key":"there's already","Fragments":["a"]},{"Key":"`cond` makes","Fragments":["it"]},{"Key":"it somewhat","Fragments":["order"]},{"Key":"somewhat order","Fragments":["independent,"]},{"Key":"order independent,","Fragments":["I"]},{"Key":"independent, I","Fragments":["think"]},{"Key":"to organize","Fragments":["the"]},{"Key":"that additional","Fragments":["test"]},{"Key":"for yelling","Fragments":["is"]},{"Key":"yelling is","Fragments":["unnecessary.","_all"]},{"Key":"doesn't pass","Fragments":["the"]},{"Key":"suite, since","Fragments":["names"]},{"Key":"since names","Fragments":["should"]},{"Key":"be stored","Fragments":["in"]},{"Key":"order they","Fragments":["are"]},{"Key":"are given","Fragments":["(and"]},{"Key":"given (and","Fragments":["not"]},{"Key":" Somehow","Fragments":["I"]},{"Key":"Somehow I","Fragments":["don't"]},{"Key":"empty db","Fragments":["in"]},{"Key":"db in","Fragments":["add"]},{"Key":"think 'grade'","Fragments":["and"]},{"Key":"'grade' and","Fragments":["'name'"]},{"Key":"and 'name'","Fragments":["would"]},{"Key":"'name' would","Fragments":["be"]},{"Key":"better parameter","Fragments":["names"]},{"Key":"parameter names","Fragments":["than"]},{"Key":"names than","Fragments":["'key'"]},{"Key":"than 'key'","Fragments":["and"]},{"Key":"'key' and","Fragments":["'value',"]},{"Key":"and 'value',","Fragments":["even"]},{"Key":"'value', even","Fragments":["more"]},{"Key":"more so","Fragments":["as"]},{"Key":"in 'add'","Fragments":["they","(what"]},{"Key":"'add' they","Fragments":["seem"]},{"Key":"they seem","Fragments":["to"]},{"Key":"used just","Fragments":["the"]},{"Key":"way round","Fragments":[":-)"]},{"Key":" 'sorted'","Fragments":["is"]},{"Key":"'sorted' is","Fragments":["much"]},{"Key":"too long,","Fragments":["IMHO,"]},{"Key":"long, IMHO,","Fragments":["since"]},{"Key":"IMHO, since","Fragments":["it"]},{"Key":"a rather","Fragments":["imperative","simpler"]},{"Key":"rather imperative","Fragments":["way."]},{"Key":"Learned about","Fragments":["'fnil'"]},{"Key":"about 'fnil'","Fragments":["right"]},{"Key":"'fnil' right","Fragments":["here."]},{"Key":"here. Makes","Fragments":["a"]},{"Key":"Makes a","Fragments":["great"]},{"Key":"great combination","Fragments":["with"]},{"Key":"combination with","Fragments":["'update-in'!"]},{"Key":"can supply","Fragments":["a"]},{"Key":"supply a","Fragments":["default"]},{"Key":"value with","Fragments":["'get',"]},{"Key":"with 'get',","Fragments":["then"]},{"Key":"'get', then","Fragments":["you"]},{"Key":"the rationale","Fragments":["for"]},{"Key":"rationale for","Fragments":["using"]},{"Key":"using 'mapcat'","Fragments":["in"]},{"Key":"'mapcat' in","Fragments":["'add'"]},{"Key":"'add' (what","Fragments":["do"]},{"Key":"(what do","Fragments":["you"]},{"Key":"the concat","Fragments":["part"]},{"Key":"concat part","Fragments":["for?)."]},{"Key":"part for?).","Fragments":["I"]},{"Key":"for?). I","Fragments":["played"]},{"Key":"little bit,","Fragments":["and"]},{"Key":"bit, and","Fragments":["a"]},{"Key":"a normal","Fragments":["'map'","context."]},{"Key":"normal 'map'","Fragments":["would"]},{"Key":"'map' would","Fragments":["seem"]},{"Key":"seem more","Fragments":["logical"]},{"Key":"more logical","Fragments":["to"]},{"Key":"logical to","Fragments":["me:","me..."]},{"Key":"(map (fn","Fragments":["[[k"]},{"Key":"(fn [[k","Fragments":["v]]"]},{"Key":"[[k v]]","Fragments":["[k"]},{"Key":"v]] [k","Fragments":["(vec"]},{"Key":"[k (vec","Fragments":["(sort"]},{"Key":"(vec (sort","Fragments":["v))]))"]},{"Key":" (into","Fragments":["{})))"]},{"Key":"little convenience","Fragments":["function"]},{"Key":"convenience function","Fragments":["`reduce-kv`"]},{"Key":"function `reduce-kv`","Fragments":["in"]},{"Key":"`reduce-kv` in","Fragments":["core."]},{"Key":"you're computing","Fragments":["a"]},{"Key":"computing a","Fragments":["\"anagram"]},{"Key":"a \"anagram","Fragments":["fingerprint\""]},{"Key":"\"anagram fingerprint\"","Fragments":["of","that's"]},{"Key":"fingerprint\" of","Fragments":["each"]},{"Key":"each word,","Fragments":["by"]},{"Key":"word, by","Fragments":["summing"]},{"Key":"by summing","Fragments":["the"]},{"Key":"summing the","Fragments":["character"]},{"Key":"character values.","Fragments":["It"]},{"Key":"values. It","Fragments":["seems"]},{"Key":"this creates","Fragments":["the"]},{"Key":"creates the","Fragments":["risk"]},{"Key":"of false","Fragments":["positives:"]},{"Key":"false positives:","Fragments":["wouldn't"]},{"Key":"positives: wouldn't","Fragments":["\"ac\""]},{"Key":"wouldn't \"ac\"","Fragments":["have"]},{"Key":"\"ac\" have","Fragments":["the"]},{"Key":"same \"weigh","Fragments":["count\""]},{"Key":"\"weigh count\"","Fragments":["as","for"]},{"Key":"count\" as","Fragments":["\"bb\"?"]},{"Key":"different \"anagram","Fragments":["fingerprint\""]},{"Key":"fingerprint\" that's","Fragments":["not"]},{"Key":"not susceptible","Fragments":["to"]},{"Key":"susceptible to","Fragments":["false"]},{"Key":"to false","Fragments":["positives?"]},{"Key":"have computed","Fragments":["the"]},{"Key":"computed the","Fragments":["\"weigh"]},{"Key":"the \"weigh","Fragments":["count\""]},{"Key":"count\" for","Fragments":["a"]},{"Key":"word more","Fragments":["simply"]},{"Key":"simply using","Fragments":["separate"]},{"Key":"separate map/reduce,","Fragments":["avoiding"]},{"Key":"map/reduce, avoiding","Fragments":["the"]},{"Key":"pass \"currval\"","Fragments":["into"]},{"Key":"\"currval\" into","Fragments":["\"char-value\"."]},{"Key":"into \"char-value\".","Fragments":["e.g."]},{"Key":"\"char-value\". e.g.","Fragments":["`(reduce"]},{"Key":"e.g. `(reduce","Fragments":["+"]},{"Key":"+ (map","Fragments":["int"]},{"Key":"(map int","Fragments":["\"word\")`"]},{"Key":"with @alex","Fragments":["about"]},{"Key":"@alex about","Fragments":["avoiding"]},{"Key":"about avoiding","Fragments":["re-computation"]},{"Key":"avoiding re-computation","Fragments":["of"]},{"Key":"re-computation of","Fragments":["`(alphagram"]},{"Key":"of `(alphagram","Fragments":["a)`"]},{"Key":" True,","Fragments":["that"]},{"Key":"True, that","Fragments":["takes"]},{"Key":"the [k","Fragments":["v]"]},{"Key":"[k v]","Fragments":["vector."]},{"Key":" @emmett,","Fragments":["thanks"]},{"Key":"@emmett, thanks","Fragments":["for"]},{"Key":"your comment.","Fragments":["This"]},{"Key":"comment. This","Fragments":["error"]},{"Key":"This error","Fragments":["will"]},{"Key":"error will","Fragments":["be"]},{"Key":"be fixed","Fragments":["in","if"]},{"Key":"Once I","Fragments":["finally","realized"]},{"Key":"finally said","Fragments":["to"]},{"Key":"said to","Fragments":["myself,"]},{"Key":"to myself,","Fragments":["this"]},{"Key":"myself, this","Fragments":["is"]},{"Key":"functional language,","Fragments":["and"]},{"Key":"language, and","Fragments":["stopped"]},{"Key":"stopped looking","Fragments":["for"]},{"Key":"an iterative","Fragments":["method","transcribe"]},{"Key":"iterative method","Fragments":["of"]},{"Key":"of singing","Fragments":["the"]},{"Key":"singing the","Fragments":["verses,"]},{"Key":"the verses,","Fragments":["my"]},{"Key":"verses, my","Fragments":["next"]},{"Key":"next point","Fragments":["of"]},{"Key":"of trouble","Fragments":["was","getting","with","getting"]},{"Key":"trouble was","Fragments":["optional/default"]},{"Key":"was optional/default","Fragments":["parameters."]},{"Key":"tried having","Fragments":["two"]},{"Key":"having two","Fragments":["argument"]},{"Key":"two argument","Fragments":["patterns"]},{"Key":"argument patterns","Fragments":["such"]},{"Key":"patterns such","Fragments":["that"]},{"Key":" ([start","Fragments":["end]"]},{"Key":"([start end]","Fragments":["\"verses...\")"]},{"Key":" ([start]","Fragments":["(sing"]},{"Key":"([start] (sing","Fragments":["start"]},{"Key":"(sing start","Fragments":["0)))"]},{"Key":"didn't look","Fragments":["quite","any"]},{"Key":"look quite","Fragments":["right"]},{"Key":"right as","Fragments":["all"]},{"Key":"wanted was","Fragments":["a"]},{"Key":"default value.","Fragments":["Then"]},{"Key":"value. Then","Fragments":["I"]},{"Key":"ran across","Fragments":["the"]},{"Key":"which I've","Fragments":["used"]},{"Key":"that sets","Fragments":["or"]},{"Key":"sets or","Fragments":["uses"]},{"Key":"or uses","Fragments":["the"]},{"Key":"variable in","Fragments":["a"]},{"Key":"the comment.","Fragments":["I'm"]},{"Key":"I'm checking","Fragments":["that"]},{"Key":"question isn't","Fragments":["a"]},{"Key":"a yell","Fragments":["in"]},{"Key":"yell in","Fragments":["is-asking-question"]},{"Key":"in is-asking-question","Fragments":["so"]},{"Key":"is-asking-question so","Fragments":["the"]},{"Key":"the \"cond","Fragments":["block\""]},{"Key":"\"cond block\"","Fragments":["isn't"]},{"Key":"block\" isn't","Fragments":["relevant."]},{"Key":"isn't relevant.","Fragments":["Dunno"]},{"Key":"relevant. Dunno","Fragments":["if"]},{"Key":"Dunno if","Fragments":["this"]},{"Key":"good practice,","Fragments":["but"]},{"Key":"practice, but","Fragments":["that's"]},{"Key":"between `(reduce","Fragments":["str"]},{"Key":"`(reduce str","Fragments":["\"\""]},{"Key":"str \"\"","Fragments":["[...])`"]},{"Key":"\"\" [...])`","Fragments":["and"]},{"Key":"[...])` and","Fragments":["`(apply"]},{"Key":"and `(apply","Fragments":["str"]},{"Key":"few linebreaks","Fragments":["and"]},{"Key":"linebreaks and","Fragments":["not"]},{"Key":"not choose","Fragments":["identifiers"]},{"Key":"choose identifiers","Fragments":["s"]},{"Key":"identifiers s","Fragments":["(also"]},{"Key":"s (also","Fragments":["namespace"]},{"Key":"(also namespace","Fragments":["string),"]},{"Key":"namespace string),","Fragments":["w"]},{"Key":"string), w","Fragments":["and"]},{"Key":"w and","Fragments":["wl"]},{"Key":"and wl","Fragments":[":-)"]},{"Key":"that, very","Fragments":["nice"]},{"Key":"solution without","Fragments":["'for'.","prime"]},{"Key":"something different,","Fragments":["yet"]},{"Key":"different, yet","Fragments":["highly"]},{"Key":"yet highly","Fragments":["readable,"]},{"Key":"highly readable,","Fragments":["without"]},{"Key":"readable, without","Fragments":["using"]},{"Key":"use regexps","Fragments":["for"]},{"Key":"regexps for","Fragments":["such"]},{"Key":"simple translations.","Fragments":["You"]},{"Key":"translations. You","Fragments":["have"]},{"Key":"for assertion","Fragments":["and"]},{"Key":"assertion and","Fragments":["translations","the"]},{"Key":"and translations","Fragments":["directly."]},{"Key":"translations directly.","Fragments":["Why"]},{"Key":"directly. Why","Fragments":["repeat"]},{"Key":"Why repeat","Fragments":["the"]},{"Key":"same info","Fragments":["(keys)"]},{"Key":"info (keys)","Fragments":["3"]},{"Key":"(keys) 3","Fragments":["times?"]},{"Key":"Great code.","Fragments":["The","It"]},{"Key":"recommend is","Fragments":["to","that","requiring"]},{"Key":"namespace clojure.string","Fragments":["to"]},{"Key":"clojure.string to","Fragments":["shorten"]},{"Key":"your expressions.","Fragments":["I.e."]},{"Key":"expressions. I.e.","Fragments":["\u003ccode\u003e(ns"]},{"Key":"I.e. \u003ccode\u003e(ns","Fragments":["bob","bob"]},{"Key":"\u003ccode\u003e(ns bob","Fragments":["(require","(require","(require"]},{"Key":"bob (require","Fragments":["[clojure.string","[clojure.string","[clojure.string","[clojure.string"]},{"Key":"the \"inner","Fragments":["sort\"."]},{"Key":"rather simpler","Fragments":["way"]},{"Key":"your \"chill","Fragments":["out\""]},{"Key":"\"chill out\"","Fragments":["condition;"]},{"Key":"out\" condition;","Fragments":["you"]},{"Key":"condition; you","Fragments":["want"]},{"Key":"if everything","Fragments":["is","is"]},{"Key":"in upper-case,","Fragments":["right?"]},{"Key":"take another","Fragments":["look"]},{"Key":"look in","Fragments":["`clojure.string`","my"]},{"Key":"`clojure.string` --","Fragments":["there"]},{"Key":"function there","Fragments":["which"]},{"Key":"there which","Fragments":["serves"]},{"Key":"which serves","Fragments":["the"]},{"Key":"serves the","Fragments":["purpose"]},{"Key":"\"\" (clojure.string/trim","Fragments":["x))`."]},{"Key":"looks fine,","Fragments":["though"]},{"Key":"fine, though","Fragments":["some"]},{"Key":"though some","Fragments":["people"]},{"Key":"some people","Fragments":["would"]},{"Key":"be broken","Fragments":["out"]},{"Key":"into predicates,","Fragments":["such"]},{"Key":"predicates, such","Fragments":["as"]},{"Key":"as `(silent?","Fragments":["x)`"]},{"Key":"`(silent? x)`","Fragments":["where"]},{"Key":"x)` where","Fragments":["you"]},{"Key":"define `silent?`","Fragments":["separately."]},{"Key":"the verbosity","Fragments":["introduced"]},{"Key":"verbosity introduced","Fragments":["by"]},{"Key":"by Java's","Fragments":["Calendar"]},{"Key":"Java's Calendar","Fragments":["class,"]},{"Key":"Calendar class,","Fragments":["take"]},{"Key":"class, take","Fragments":["a"]},{"Key":"the clj-time","Fragments":["library..."]},{"Key":"using regexps","Fragments":["you"]},{"Key":"regexps you","Fragments":["could"]},{"Key":"just `(re-seq","Fragments":["phrase"]},{"Key":"`(re-seq phrase","Fragments":["#\"\\w+\")`"]},{"Key":"phrase #\"\\w+\")`","Fragments":["to"]},{"Key":"#\"\\w+\")` to","Fragments":["get"]},{"Key":"get non-empty","Fragments":["words."]},{"Key":"the recommendation!","Fragments":["I'm"]},{"Key":"recommendation! I'm","Fragments":["always"]},{"Key":"always glad","Fragments":["to"]},{"Key":"hear about","Fragments":["better"]},{"Key":"about better","Fragments":["practices,"]},{"Key":"better practices,","Fragments":["especially"]},{"Key":"practices, especially","Fragments":["because"]},{"Key":"especially because","Fragments":["I'm"]},{"Key":"so new","Fragments":["to"]},{"Key":"So did","Fragments":["I."]},{"Key":"did I.","Fragments":["I"]},{"Key":"I. I","Fragments":["think"]},{"Key":"generally ok,","Fragments":["since"]},{"Key":"ok, since","Fragments":["it's"]},{"Key":"two or","Fragments":["three,"]},{"Key":"or three,","Fragments":["accordingly"]},{"Key":"three, accordingly","Fragments":["parameterized."]},{"Key":"for function","Fragments":["generation","composition"]},{"Key":"function generation","Fragments":["in"]},{"Key":"generation in","Fragments":["appropriately"]},{"Key":"in appropriately","Fragments":["commented"]},{"Key":"appropriately commented","Fragments":["functions"]},{"Key":"commented functions","Fragments":["themselves,"]},{"Key":"functions themselves,","Fragments":["just"]},{"Key":"themselves, just","Fragments":["to"]},{"Key":"make clear","Fragments":["what's"]},{"Key":"protocol makes","Fragments":["the"]},{"Key":"Line 49","Fragments":["is"]},{"Key":"49 is","Fragments":["a"]},{"Key":"a leftover","Fragments":["from"]},{"Key":"leftover from","Fragments":["testing,"]},{"Key":"from testing,","Fragments":["I"]},{"Key":"quite some","Fragments":["code"]},{"Key":"code duplication","Fragments":["between"]},{"Key":"various xxx-nday","Fragments":["functions,"]},{"Key":"xxx-nday functions,","Fragments":["and"]},{"Key":"the hard-coded","Fragments":["ranges"]},{"Key":"hard-coded ranges","Fragments":["and"]},{"Key":"ranges and","Fragments":["hacks"]},{"Key":"and hacks","Fragments":["like"]},{"Key":"hacks like","Fragments":["line"]},{"Key":"like line","Fragments":["116"]},{"Key":"line 116","Fragments":[";-)"]},{"Key":"116 ;-)","Fragments":["Perhaps"]},{"Key":";-) Perhaps","Fragments":["some"]},{"Key":"Perhaps some","Fragments":["factoring"]},{"Key":"some factoring","Fragments":["out"]},{"Key":"factoring out","Fragments":["could"]},{"Key":"out could","Fragments":["be"]},{"Key":" Cool.","Fragments":["Yeah,"]},{"Key":"Cool. Yeah,","Fragments":["that's"]},{"Key":"Yeah, that's","Fragments":["definitely"]},{"Key":"that's definitely","Fragments":["a"]},{"Key":"My pleasure!","Fragments":["="]},{"Key":"pleasure! =","Fragments":[")"]},{"Key":"try Clojure's","Fragments":["multimethods,"]},{"Key":"Clojure's multimethods,","Fragments":["Once"]},{"Key":"multimethods, Once","Fragments":["it"]},{"Key":"Once it","Fragments":["was"]},{"Key":"was working,","Fragments":["I"]},{"Key":"working, I","Fragments":["tried"]},{"Key":"of cond,","Fragments":["and"]},{"Key":"cond, and","Fragments":["good","then"]},{"Key":"code overall.","Fragments":["Definitely"]},{"Key":"overall. Definitely","Fragments":["much"]},{"Key":"Definitely much","Fragments":["more"]},{"Key":"more terse","Fragments":["than"]},{"Key":"terse than","Fragments":["your"]},{"Key":"than your","Fragments":["first"]},{"Key":"iteration, although","Fragments":["I"]},{"Key":"of descriptiveness","Fragments":["in"]},{"Key":"descriptiveness in","Fragments":["your"]},{"Key":"iteration to","Fragments":["be"]},{"Key":"Two (very)","Fragments":["small"]},{"Key":"(very) small","Fragments":["things"]},{"Key":"- Put","Fragments":["the"]},{"Key":"argument [s]","Fragments":["on"]},{"Key":"[s] on","Fragments":["the"]},{"Key":"your defn","Fragments":["statement."]},{"Key":"defn statement.","Fragments":["It's"]},{"Key":"one argument,","Fragments":["and"]},{"Key":"argument, and","Fragments":["it's"]},{"Key":"it's after","Fragments":["a"]},{"Key":"after a","Fragments":["very","bug","`let`.","test.","year","tip"]},{"Key":"very short","Fragments":["function","and"]},{"Key":"short function","Fragments":["name."]},{"Key":"- Consider","Fragments":["moving"]},{"Key":"Consider moving","Fragments":["your"]},{"Key":"moving your","Fragments":["regex"]},{"Key":"regex conditions","Fragments":["into"]},{"Key":"into descriptively","Fragments":["named"]},{"Key":"or simply","Fragments":["replace"]},{"Key":"simply replace","Fragments":["them"]},{"Key":"Clojure functions.","Fragments":["It's"]},{"Key":"functions. It's","Fragments":["extra"]},{"Key":"It's extra","Fragments":["cognitive"]},{"Key":"extra cognitive","Fragments":["load"]},{"Key":"cognitive load","Fragments":["(and"]},{"Key":"load (and","Fragments":["in"]},{"Key":"(and in","Fragments":["some","mine"]},{"Key":"cases a","Fragments":["need"]},{"Key":"to consult","Fragments":["documentation)"]},{"Key":"consult documentation)","Fragments":["to"]},{"Key":"documentation) to","Fragments":["parse"]},{"Key":"parse regex","Fragments":["while"]},{"Key":"regex while","Fragments":["figuring"]},{"Key":"while figuring","Fragments":["out"]},{"Key":"does when","Fragments":["you"]},{"Key":"you didn't","Fragments":["author","want","know"]},{"Key":"didn't author","Fragments":["it."]},{"Key":"code. It","Fragments":["actually","looks"]},{"Key":"just nitpicking.","Fragments":["="]},{"Key":"nitpicking. =","Fragments":["P"]},{"Key":"only I'd","Fragments":["recommend"]},{"Key":"for clojure.string","Fragments":["so","(which"]},{"Key":"your expressions","Fragments":["a"]},{"Key":"expressions a","Fragments":["bit"]},{"Key":"bit instead","Fragments":["of"]},{"Key":"thing 3","Fragments":["times."]},{"Key":"3 times.","Fragments":["I.e."]},{"Key":"times. I.e.","Fragments":["\u003ccode\u003e(ns"]},{"Key":"Good effort;","Fragments":["you"]},{"Key":"effort; you","Fragments":["put"]},{"Key":"in writing","Fragments":["out"]},{"Key":"an exhaustive","Fragments":["case"]},{"Key":"exhaustive case","Fragments":["statement"]},{"Key":"statement like","Fragments":["that."]},{"Key":"only trouble","Fragments":["is"]},{"Key":"trouble is","Fragments":["that"]},{"Key":"very brittle","Fragments":["in"]},{"Key":"brittle in","Fragments":["a"]},{"Key":"real application","Fragments":["(what"]},{"Key":"application (what","Fragments":["if"]},{"Key":"(what if","Fragments":["Bob"]},{"Key":"if Bob","Fragments":["was"]},{"Key":"was asked","Fragments":["a"]},{"Key":"asked a","Fragments":["question"]},{"Key":"question that","Fragments":["wasn't","you"]},{"Key":"wasn't in","Fragments":["the"]},{"Key":"the tests?)","Fragments":["and"]},{"Key":"tests?) and","Fragments":["there"]},{"Key":"First, good","Fragments":["use"]},{"Key":"of let,","Fragments":["but"]},{"Key":"let, but","Fragments":["you","the","rather"]},{"Key":"need it.","Fragments":["Also,"]},{"Key":"it. Also,","Fragments":["have"]},{"Key":"you checked","Fragments":["out"]},{"Key":"checked out","Fragments":["\u003ccode\u003econd\u003c/code\u003e"]},{"Key":"out \u003ccode\u003econd\u003c/code\u003e","Fragments":["at"]},{"Key":"\u003ccode\u003econd\u003c/code\u003e at","Fragments":["all?"]},{"Key":"all? It","Fragments":["lets"]},{"Key":"It lets","Fragments":["you"]},{"Key":"lets you","Fragments":["use","pass"]},{"Key":"use expressions,","Fragments":["which"]},{"Key":"expressions, which","Fragments":["means"]},{"Key":"your questions","Fragments":["actually"]},{"Key":"questions actually","Fragments":["have"]},{"Key":"have certain","Fragments":["characteristics."]},{"Key":"certain characteristics.","Fragments":["Here's"]},{"Key":"characteristics. Here's","Fragments":["an"]},{"Key":"past a","Fragments":["few"]},{"Key":"(cond (clojure.string/blank?","Fragments":["string)"]},{"Key":"(clojure.string/blank? string)","Fragments":["\"Fine."]},{"Key":"string) \"Fine.","Fragments":["Be"]},{"Key":"From there","Fragments":["you"]},{"Key":"there you","Fragments":["would","can"]},{"Key":"just need","Fragments":["a"]},{"Key":"more expressions","Fragments":["inside"]},{"Key":"expressions inside","Fragments":["of"]},{"Key":"the \u003ccode\u003econd\u003c/code\u003e","Fragments":["statement,"]},{"Key":"\u003ccode\u003econd\u003c/code\u003e statement,","Fragments":["and","you"]},{"Key":"statement, and","Fragments":["you'd"]},{"Key":"and you'd","Fragments":["have"]},{"Key":"this thing","Fragments":["nailed"]},{"Key":"thing nailed","Fragments":["in"]},{"Key":"nailed in","Fragments":["much"]},{"Key":"in much","Fragments":["fewer"]},{"Key":"much fewer","Fragments":["lines"]},{"Key":"fewer lines","Fragments":["of"]},{"Key":"code. Not","Fragments":["only"]},{"Key":"Not only","Fragments":["that,"]},{"Key":"handle questions","Fragments":["that"]},{"Key":"questions that","Fragments":["aren't"]},{"Key":"aren't even","Fragments":["in"]},{"Key":"Nice. The","Fragments":["main"]},{"Key":"main nitpicks","Fragments":["I"]},{"Key":"nitpicks I","Fragments":["have"]},{"Key":"have are","Fragments":["just"]},{"Key":"just stylistic;","Fragments":["your"]},{"Key":"stylistic; your","Fragments":["thinking"]},{"Key":"your thinking","Fragments":["and"]},{"Key":"thinking and","Fragments":["function"]},{"Key":"function use","Fragments":["are"]},{"Key":"use are","Fragments":["great."]},{"Key":"For style,","Fragments":["you"]},{"Key":"style, you","Fragments":["could"]},{"Key":"could bring","Fragments":["the"]},{"Key":"the [x]","Fragments":["argument"]},{"Key":"[x] argument","Fragments":["up"]},{"Key":"argument up","Fragments":["to"]},{"Key":"you \u003ccode\u003eresponse-for\u003c/code\u003e","Fragments":["definition,"]},{"Key":"\u003ccode\u003eresponse-for\u003c/code\u003e definition,","Fragments":["since"]},{"Key":"definition, since","Fragments":["the"]},{"Key":"one argument.","Fragments":["I'd"]},{"Key":"argument. I'd","Fragments":["also"]},{"Key":"also recommend","Fragments":["naming"]},{"Key":"recommend naming","Fragments":["it"]},{"Key":"naming it","Fragments":["something"]},{"Key":"descriptive than","Fragments":["'x'.","'arg'?"]},{"Key":"After that,","Fragments":["you"]},{"Key":"require clojure.string","Fragments":["as"]},{"Key":"clojure.string as","Fragments":["something","something"]},{"Key":"shorter in","Fragments":["your","your"]},{"Key":"thing out","Fragments":["three"]},{"Key":"out three","Fragments":["times,"]},{"Key":"three times,","Fragments":["like"]},{"Key":"times, like","Fragments":["so:"]},{"Key":" \u003ccode\u003e(ns","Fragments":["bob"]},{"Key":"Nice. Only","Fragments":["thing"]},{"Key":"Only thing","Fragments":["I'd"]},{"Key":"is requiring","Fragments":["clojure.string"]},{"Key":"requiring clojure.string","Fragments":["as"]},{"Key":"something shorter","Fragments":["in"]},{"Key":"thing so","Fragments":["many"]},{"Key":"many times,","Fragments":["i.e.","to"]},{"Key":"times, i.e.","Fragments":["\u003ccode\u003e"]},{"Key":"i.e. \u003ccode\u003e","Fragments":["(ns"]},{"Key":"\u003ccode\u003e (ns","Fragments":["bob"]},{"Key":"that, maybe","Fragments":["call"]},{"Key":"maybe call","Fragments":["your"]},{"Key":"call your","Fragments":["argument"]},{"Key":"your argument","Fragments":["to"]},{"Key":"to \u003ccode\u003eresponse-for\u003c/code\u003e","Fragments":["something"]},{"Key":"\u003ccode\u003eresponse-for\u003c/code\u003e something","Fragments":["a"]},{"Key":" @macy","Fragments":["thanks"]},{"Key":"@macy thanks","Fragments":["for"]},{"Key":"so descriptive.","Fragments":["I"]},{"Key":"descriptive. I","Fragments":["really"]},{"Key":"see anything","Fragments":["that","wrong,"]},{"Key":"improve much","Fragments":["here."]},{"Key":"much here.","Fragments":["You"]},{"Key":"use \u003ccode\u003ere-find\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003ere-find\u003c/code\u003e and","Fragments":["a"]},{"Key":"your \u003ccode\u003eshout?\u003c/code\u003e","Fragments":["function,"]},{"Key":"\u003ccode\u003eshout?\u003c/code\u003e function,","Fragments":["which"]},{"Key":"actually prefer","Fragments":["it"]},{"Key":"see regex","Fragments":["in"]},{"Key":"thing is,","Fragments":["in"]},{"Key":"is, in","Fragments":["your"]},{"Key":"your \u003ccode\u003econd\u003c/code\u003e","Fragments":["statement,"]},{"Key":"statement, you","Fragments":["could"]},{"Key":"put \u003ccode\u003eshout?\u003c/code\u003e","Fragments":["before"]},{"Key":"\u003ccode\u003eshout?\u003c/code\u003e before","Fragments":["\u003ccode\u003equestion?\u003c/code\u003e"]},{"Key":"before \u003ccode\u003equestion?\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003equestion?\u003c/code\u003e and","Fragments":["get"]},{"Key":"the \u003ccode\u003e(not","Fragments":["(shout?"]},{"Key":"\u003ccode\u003e(not (shout?","Fragments":["text))\u003c/code\u003e"]},{"Key":"(shout? text))\u003c/code\u003e","Fragments":["on"]},{"Key":"text))\u003c/code\u003e on","Fragments":["line"]},{"Key":"about rearranging","Fragments":["the"]},{"Key":"cond ordering,","Fragments":["but"]},{"Key":"ordering, but","Fragments":["I"]},{"Key":"the implicitness","Fragments":["it"]},{"Key":"implicitness it","Fragments":["introduces."]},{"Key":"it introduces.","Fragments":["Thanks"]},{"Key":"introduces. Thanks","Fragments":["a"]},{"Key":"lot for","Fragments":["the","your"]},{"Key":"the feedback--I","Fragments":["appreciate"]},{"Key":"feedback--I appreciate","Fragments":["it."]},{"Key":" Concerning","Fragments":["_let_:"]},{"Key":"Concerning _let_:","Fragments":["You"]},{"Key":"_let_: You","Fragments":["don't"]},{"Key":"need an","Fragments":["explicit"]},{"Key":"explicit _do_","Fragments":["function"]},{"Key":"_do_ function","Fragments":["after"]},{"Key":"function after","Fragments":["the"]},{"Key":"the bindings,","Fragments":["this"]},{"Key":"bindings, this","Fragments":["is"]},{"Key":"already done","Fragments":["by"]},{"Key":"(let [name","Fragments":["\"Jon\"]"]},{"Key":" (println","Fragments":["\"Hi\"","\"Hello"]},{"Key":"(println \"Hi\"","Fragments":["name)"]},{"Key":"(println \"Hello","Fragments":["again,\""]},{"Key":"\"Hello again,\"","Fragments":["name))"]},{"Key":" (lines","Fragments":["55,"]},{"Key":"(lines 55,","Fragments":["73,"]},{"Key":"55, 73,","Fragments":["78)"]},{"Key":"Decided to","Fragments":["break","move"]},{"Key":"out another","Fragments":["function"]},{"Key":"it good","Fragments":["form","to"]},{"Key":"good form","Fragments":["here"]},{"Key":"form here","Fragments":["to"]},{"Key":"use defonce","Fragments":["over"]},{"Key":"defonce over","Fragments":["def?"]},{"Key":"Any other","Fragments":["feedback","feedback?"]},{"Key":"other feedback","Fragments":["would"]},{"Key":"feedback would","Fragments":["be"]},{"Key":"avoid exporting","Fragments":["`to-rna-nucleotide`","`compliment`","`to-rna-by-char`"]},{"Key":"exporting `to-rna-nucleotide`","Fragments":["(assuming"]},{"Key":"`to-rna-nucleotide` (assuming","Fragments":["that"]},{"Key":"(assuming that","Fragments":["you","you"]},{"Key":"Maybe `case`","Fragments":["instead"]},{"Key":"`case` instead","Fragments":["of","of","in","of"]},{"Key":" ok,","Fragments":["tomorrow"]},{"Key":"ok, tomorrow","Fragments":["i'll"]},{"Key":"tomorrow i'll","Fragments":["submit"]},{"Key":"i'll submit","Fragments":["a"]},{"Key":" @walter,","Fragments":["maybe"]},{"Key":"@walter, maybe","Fragments":["instead"]},{"Key":"of `(\u003e","Fragments":["(count"]},{"Key":"x) 0)`","Fragments":["you"]},{"Key":"0)` you","Fragments":["can"]},{"Key":"use `(not","Fragments":["(blank?","(contains?"]},{"Key":"`(not (blank?","Fragments":["x))`?"]},{"Key":"spec is","Fragments":["a"]},{"Key":"little ambiguous","Fragments":["about"]},{"Key":"ambiguous about","Fragments":["yelling"]},{"Key":"about yelling","Fragments":["vs"]},{"Key":"yelling vs","Fragments":["question."]},{"Key":"the turkish","Fragments":["I"]},{"Key":"turkish I","Fragments":["tests"]},{"Key":"I tests","Fragments":["-"]},{"Key":"tests -","Fragments":["but"]},{"Key":"how are","Fragments":["you"]},{"Key":"you suppose","Fragments":["to"]},{"Key":"suppose to","Fragments":["recognize"]},{"Key":"recognize yelling","Fragments":["in"]},{"Key":"general, apart","Fragments":["from"]},{"Key":"from 'all","Fragments":["letters"]},{"Key":"'all letters","Fragments":["are"]},{"Key":"are caps'","Fragments":["?"]},{"Key":"used `not-any?`","Fragments":["inside"]},{"Key":"`not-any?` inside","Fragments":["`shout?`"]},{"Key":"inside `shout?`","Fragments":["to"]},{"Key":"`shout?` to","Fragments":["create"]},{"Key":"will gracefully","Fragments":["handle"]},{"Key":"gracefully handle","Fragments":["really"]},{"Key":"handle really","Fragments":["long"]},{"Key":"really long","Fragments":["sequences"]},{"Key":"long sequences","Fragments":["(as"]},{"Key":"sequences (as","Fragments":["opposed"]},{"Key":"(as opposed","Fragments":["to"]},{"Key":"to comparing","Fragments":["the"]},{"Key":"string, for","Fragments":["example)."]},{"Key":"Also, props","Fragments":["for"]},{"Key":"props for","Fragments":["using"]},{"Key":"for non-public","Fragments":["methods."]},{"Key":"non-public methods.","Fragments":["You"]},{"Key":"You just","Fragments":["taught"]},{"Key":"me something.","Fragments":["=-)"]},{"Key":"private `responses`","Fragments":["def"]},{"Key":"`responses` def","Fragments":["is"]},{"Key":"def is","Fragments":["nice,"]},{"Key":"is nice,","Fragments":["too,"]},{"Key":"nice, too,","Fragments":["since"]},{"Key":"too, since","Fragments":["it"]},{"Key":"it keeps","Fragments":["`response-for`"]},{"Key":"keeps `response-for`","Fragments":["_very_"]},{"Key":"`response-for` _very_","Fragments":["legible."]},{"Key":"_very_ legible.","Fragments":["Well-done."]},{"Key":"exporting `compliment`","Fragments":["(assuming"]},{"Key":"`compliment` (assuming","Fragments":["you"]},{"Key":"(assuming you","Fragments":["don't"]},{"Key":"most pragmatic","Fragments":["way"]},{"Key":"pragmatic way","Fragments":["to"]},{"Key":"the problem,","Fragments":["but"]},{"Key":"problem, but","Fragments":["probably"]},{"Key":"definitely went","Fragments":["to"]},{"Key":"other extreme","Fragments":["with"]},{"Key":"extreme with","Fragments":["iteration"]},{"Key":"iteration 2.","Fragments":["I"]},{"Key":"try one","Fragments":["more..."]},{"Key":"use _require_","Fragments":["on"]},{"Key":"_require_ on","Fragments":["the"]},{"Key":"and alias","Fragments":["it,"]},{"Key":"alias it,","Fragments":["since"]},{"Key":"it overrides","Fragments":["existent"]},{"Key":"overrides existent","Fragments":["functions"]},{"Key":"existent functions","Fragments":["in"]},{"Key":"in _core_,","Fragments":["which"]},{"Key":"_core_, which","Fragments":["leads"]},{"Key":"to problems","Fragments":["when"]},{"Key":"problems when","Fragments":["reloading"]},{"Key":"when reloading","Fragments":["the"]},{"Key":"reloading the","Fragments":["source"]},{"Key":"file via","Fragments":["the"]},{"Key":"via the","Fragments":["tests:"]},{"Key":" Usages","Fragments":["would"]},{"Key":"Usages would","Fragments":["then"]},{"Key":" (str/trim","Fragments":["message)"]},{"Key":"Nice, apart","Fragments":["from"]},{"Key":"name _get!_,","Fragments":["which"]},{"Key":"_get!_, which","Fragments":["implies"]},{"Key":"which implies","Fragments":["muting"]},{"Key":"implies muting","Fragments":["state"]},{"Key":"muting state","Fragments":["to"]},{"Key":"state to","Fragments":["me,"]},{"Key":"me, which","Fragments":["it"]},{"Key":"the commented-out","Fragments":["test"]},{"Key":"commented-out test","Fragments":["code"]},{"Key":"separate file.","Fragments":["Depending"]},{"Key":"file. Depending","Fragments":["on"]},{"Key":"Depending on","Fragments":["your"]},{"Key":"your coding","Fragments":["environment,"]},{"Key":"coding environment,","Fragments":["you"]},{"Key":"environment, you","Fragments":["can"]},{"Key":"then send","Fragments":["snippets"]},{"Key":"send snippets","Fragments":["from"]},{"Key":"snippets from","Fragments":["that"]},{"Key":"that file","Fragments":["to"]},{"Key":"file to","Fragments":["your"]},{"Key":"your REPL","Fragments":["(e.g.,"]},{"Key":"REPL (e.g.,","Fragments":["via"]},{"Key":"(e.g., via","Fragments":["emacs-slime"]},{"Key":"via emacs-slime","Fragments":["or"]},{"Key":"emacs-slime or","Fragments":["vim"]},{"Key":"or vim","Fragments":["whimrepl)."]},{"Key":"already alias","Fragments":["the"]},{"Key":"as _str_,","Fragments":["you"]},{"Key":"_str_, you","Fragments":["could"]},{"Key":"then use,","Fragments":["e.g.,"]},{"Key":"use, e.g.,","Fragments":["`str/trim`"]},{"Key":"e.g., `str/trim`","Fragments":["instead"]},{"Key":"`str/trim` instead","Fragments":["of"]},{"Key":"Line 25:","Fragments":["Have"]},{"Key":"25: Have","Fragments":["a"]},{"Key":"Line 8:","Fragments":["Since"]},{"Key":"8: Since","Fragments":["_nil_"]},{"Key":"Since _nil_","Fragments":["is"]},{"Key":"_nil_ is","Fragments":["boolean"]},{"Key":"is boolean","Fragments":["_false_,"]},{"Key":"boolean _false_,","Fragments":["the"]},{"Key":"_false_, the","Fragments":["function"]},{"Key":"(defn has-letters","Fragments":["[message]"]},{"Key":" (find-letters","Fragments":["message))"]},{"Key":"But then,","Fragments":["you"]},{"Key":"then, you","Fragments":["could"]},{"Key":"of _find-letters_","Fragments":["into"]},{"Key":"_find-letters_ into","Fragments":["_has-letters_"]},{"Key":"into _has-letters_","Fragments":["completely."]},{"Key":"Line 41:","Fragments":["This"]},{"Key":"41: This","Fragments":["whole"]},{"Key":"So, _\u003e50-pc-uc_","Fragments":["tests"]},{"Key":"_\u003e50-pc-uc_ tests","Fragments":["for"]},{"Key":"than 50%","Fragments":["of"]},{"Key":"50% of","Fragments":["the"]},{"Key":"letters being","Fragments":["uppercase,"]},{"Key":"being uppercase,","Fragments":["right?"]},{"Key":"uppercase, right?","Fragments":["This"]},{"Key":"right? This","Fragments":["might"]},{"Key":"given test","Fragments":["suite,"]},{"Key":"suite, but","Fragments":["I"]},{"Key":"interpret the","Fragments":["test"]},{"Key":"test data","Fragments":["in"]},{"Key":"that yelling","Fragments":["is","takes"]},{"Key":"is _all","Fragments":["letters"]},{"Key":"_all letters","Fragments":["are"]},{"Key":"Regarding performance,","Fragments":["`memoize`"]},{"Key":"performance, `memoize`","Fragments":["should"]},{"Key":"`memoize` should","Fragments":["do"]},{"Key":"the trick,","Fragments":["no?"]},{"Key":"trick, no?","Fragments":["Because"]},{"Key":"no? Because","Fragments":["I"]},{"Key":"overall solution","Fragments":["structure"]},{"Key":"solution structure","Fragments":["as"]},{"Key":"for line","Fragments":["8!","23,"]},{"Key":"in _define-converters_","Fragments":["instead"]},{"Key":"_define-converters_ instead","Fragments":["of"]},{"Key":"of _m,","Fragments":["f_,"]},{"Key":"_m, f_,","Fragments":["like"]},{"Key":"f_, like","Fragments":["_map_"]},{"Key":"like _map_","Fragments":["and"]},{"Key":"_map_ and","Fragments":["_factor_."]},{"Key":"include earth","Fragments":["in","in"]},{"Key":"earth in","Fragments":["the","the"]},{"Key":"planet factor","Fragments":["map,","map,"]},{"Key":"factor map,","Fragments":["so","so"]},{"Key":"map, so","Fragments":["that","that"]},{"Key":"no special","Fragments":["function","function","trimming"]},{"Key":"special function","Fragments":["for","for"]},{"Key":"Very clean.","Fragments":["Not"]},{"Key":"clean. Not","Fragments":["the"]},{"Key":"the fastest","Fragments":["approach,"]},{"Key":"fastest approach,","Fragments":["but"]},{"Key":"the total","Fragments":["times"]},{"Key":"total times","Fragments":["don't"]},{"Key":"times don't","Fragments":["really"]},{"Key":"matter here,","Fragments":["IMO."]},{"Key":"Line 4:","Fragments":["Consider"]},{"Key":"4: Consider","Fragments":["reducing"]},{"Key":"Consider reducing","Fragments":["over"]},{"Key":"reducing over","Fragments":["a"]},{"Key":"of looping.","Fragments":["Seems"]},{"Key":"looping. Seems","Fragments":["more"]},{"Key":"prefer `(biginteger","Fragments":["2)`"]},{"Key":"`(biginteger 2)`","Fragments":["instead"]},{"Key":"2)` instead","Fragments":["of"]},{"Key":"parsing a","Fragments":["string"]},{"Key":"string (shudder)","Fragments":[";-)"]},{"Key":"(= w","Fragments":["%))`"]},{"Key":"w %))`","Fragments":["could"]},{"Key":"%))` could","Fragments":["be"]},{"Key":"be `(not=","Fragments":["w"]},{"Key":"`(not= w","Fragments":["%)`."]},{"Key":"Line 10,","Fragments":["huh?"]},{"Key":"10, huh?","Fragments":[";-)"]},{"Key":"Nice ideas,","Fragments":["but"]},{"Key":"ideas, but","Fragments":["consider"]},{"Key":"but consider","Fragments":["putting"]},{"Key":"consider putting","Fragments":["closing"]},{"Key":"putting closing","Fragments":["parentheses"]},{"Key":"line (see","Fragments":["here:"]},{"Key":"(see here:","Fragments":["https://github.com/bbatsov/clojure-style-guide).","http://dev.clojure.org/display/design/Documentation+for+1.3+Numerics)"]},{"Key":"Overall, I","Fragments":["like"]},{"Key":"code. But,","Fragments":["I"]},{"Key":"But, I","Fragments":["wonder","do"]},{"Key":"feel if","Fragments":["we"]},{"Key":"we moved","Fragments":["each"]},{"Key":"moved each","Fragments":["of"]},{"Key":"own named","Fragments":["function."]},{"Key":"function. Mostly","Fragments":["this"]},{"Key":"Mostly this","Fragments":["is"]},{"Key":"like `response-for`","Fragments":["should"]},{"Key":"of `yell?`,","Fragments":["`question?`"]},{"Key":"`yell?`, `question?`","Fragments":["etc."]},{"Key":"`question?` etc.","Fragments":["It"]},{"Key":"etc. It","Fragments":["makes"]},{"Key":"code longer,","Fragments":["but"]},{"Key":"longer, but","Fragments":["keeps"]},{"Key":"bit closer","Fragments":["to"]},{"Key":"domain we're","Fragments":["working"]},{"Key":"we're working","Fragments":["in."]},{"Key":"your `is-shouting?`","Fragments":["function,"]},{"Key":"`is-shouting?` function,","Fragments":["we're"]},{"Key":"function, we're","Fragments":["comparing"]},{"Key":"we're comparing","Fragments":["the"]},{"Key":"as efficient","Fragments":["as"]},{"Key":"efficient as","Fragments":["checking"]},{"Key":"as checking","Fragments":["for"]},{"Key":"any lowercase","Fragments":["letters"]},{"Key":"string? That","Fragments":["might"]},{"Key":"faster since","Fragments":["it"]},{"Key":"just walk","Fragments":["`string`"]},{"Key":"walk `string`","Fragments":["and"]},{"Key":"`string` and","Fragments":["not"]},{"Key":"to first","Fragments":["create"]},{"Key":"first create","Fragments":["a"]},{"Key":"new uppercased","Fragments":["version"]},{"Key":"compare it","Fragments":["to."]},{"Key":"it to.","Fragments":["I'm"]},{"Key":"to. I'm","Fragments":["pretty"]},{"Key":"to clojure,","Fragments":["though,","so"]},{"Key":"clojure, though,","Fragments":["so"]},{"Key":"so perhaps","Fragments":["the"]},{"Key":"the versions","Fragments":["are"]},{"Key":"versions are","Fragments":["equally"]},{"Key":" @tre","Fragments":["Thanks!"]},{"Key":"approach using","Fragments":["nested"]},{"Key":"using nested","Fragments":["threading"]},{"Key":"nested threading","Fragments":["macros."]},{"Key":"threading macros.","Fragments":["I"]},{"Key":"macros. I","Fragments":["could"]},{"Key":"done a","Fragments":["version"]},{"Key":"one thread-first","Fragments":["and"]},{"Key":"thread-first and","Fragments":["an"]},{"Key":"function around","Fragments":["my"]},{"Key":"around my","Fragments":["`map`"]},{"Key":"my `map`","Fragments":["like"]},{"Key":"`map` like","Fragments":["this:"]},{"Key":"(let [not-letter-or-number","Fragments":["#\"[^a-zA-Z0-9]\""]},{"Key":" words","Fragments":["(clojure.string/split"]},{"Key":"words (clojure.string/split","Fragments":["phrase"]},{"Key":" (#(map","Fragments":["clojure.string/lower-case"]},{"Key":"(#(map clojure.string/lower-case","Fragments":["%))"]},{"Key":" (dissoc","Fragments":["\"\"))))","\"\"))","ws"]},{"Key":"really new","Fragments":["to"]},{"Key":"Clojure. Are","Fragments":["either"]},{"Key":"Are either","Fragments":["of"]},{"Key":"these solutions","Fragments":["more"]},{"Key":"solutions more","Fragments":["idiomatic?"]},{"Key":"Great point,","Fragments":["@jovan!"]},{"Key":"point, @jovan!","Fragments":["Thank"]},{"Key":"@jovan! Thank","Fragments":["you."]},{"Key":"about `defn-`","Fragments":["the"]},{"Key":"`defn-` the","Fragments":["other"]},{"Key":"day when","Fragments":["reviewing"]},{"Key":"when reviewing","Fragments":["other"]},{"Key":"reviewing other","Fragments":["people's"]},{"Key":"people's solutions","Fragments":["to"]},{"Key":"the Bob","Fragments":["exercise"]},{"Key":"Bob exercise","Fragments":["here"]},{"Key":"exercise here","Fragments":["on"]},{"Key":"on exercism.","Fragments":["(Very"]},{"Key":"exercism. (Very","Fragments":["new"]},{"Key":"(Very new","Fragments":["to"]},{"Key":"Clojure here.)","Fragments":["Thanks"]},{"Key":"here.) Thanks","Fragments":["for"]},{"Key":" (note","Fragments":["that"]},{"Key":"(note that","Fragments":["I'm"]},{"Key":"a blank?","Fragments":["function","function"]},{"Key":"function http://clojuredocs.org/clojure_core/clojure.string/blank_q","Fragments":["to"]},{"Key":"http://clojuredocs.org/clojure_core/clojure.string/blank_q to","Fragments":["maybe"]},{"Key":"to maybe","Fragments":["replace"]},{"Key":"maybe replace","Fragments":["your"]},{"Key":"a naive","Fragments":["implementation"]},{"Key":"naive implementation","Fragments":["that"]},{"Key":"that simply","Fragments":["passes"]},{"Key":"simply passes","Fragments":["each"]},{"Key":"passes each","Fragments":["test"]},{"Key":"test one","Fragments":["by"]},{"Key":" Need","Fragments":["to"]},{"Key":"Need to","Fragments":["find","look"]},{"Key":"a pattern","Fragments":["that"]},{"Key":"pattern that","Fragments":["I","the"]},{"Key":" Wonder","Fragments":["how"]},{"Key":"Wonder how","Fragments":["regex"]},{"Key":"how regex","Fragments":["works"]},{"Key":"regex works","Fragments":["in"]},{"Key":"In reference","Fragments":["to"]},{"Key":"threading issue,","Fragments":["in"]},{"Key":"issue, in","Fragments":["this"]},{"Key":"whole lowercase","Fragments":["map"]},{"Key":"lowercase map","Fragments":["as"]},{"Key":"first operation","Fragments":["(untested):"]},{"Key":"(-\u003e (map","Fragments":["clojure.string/lower-case"]},{"Key":"(map clojure.string/lower-case","Fragments":["words)","ws)"]},{"Key":" Sometimes","Fragments":["that's"]},{"Key":"Sometimes that's","Fragments":["not"]},{"Key":"possible (e.g.","Fragments":["if"]},{"Key":"(e.g. if","Fragments":["that"]},{"Key":"second operation).","Fragments":["Another"]},{"Key":"operation). Another","Fragments":["option"]},{"Key":"option is","Fragments":["the"]},{"Key":"the under-appreciated","Fragments":["as-\u003e"]},{"Key":"under-appreciated as-\u003e","Fragments":["threading"]},{"Key":"as-\u003e threading","Fragments":["macro:"]},{"Key":" (as-\u003e","Fragments":["words"]},{"Key":"(as-\u003e words","Fragments":["ws"]},{"Key":"(dissoc ws","Fragments":["\"\"))"]},{"Key":" Or...","Fragments":["you"]},{"Key":"Or... you","Fragments":["could"]},{"Key":"just keep","Fragments":["going"]},{"Key":"keep going","Fragments":["with"]},{"Key":"It passes","Fragments":["the"]},{"Key":"Great suggestions,","Fragments":["@cade;"]},{"Key":"suggestions, @cade;","Fragments":["thank"]},{"Key":"@cade; thank","Fragments":["you!"]},{"Key":"agree, in","Fragments":["this"]},{"Key":"case, moving","Fragments":["the"]},{"Key":"`-\u003e` seems","Fragments":["to"]},{"Key":" And,","Fragments":["in"]},{"Key":"And, in","Fragments":["the"]},{"Key":"the `as-\u003e`","Fragments":["macro,"]},{"Key":"`as-\u003e` macro,","Fragments":["I'm"]},{"Key":"macro, I'm","Fragments":["thinking"]},{"Key":"I'm thinking","Fragments":["that","about"]},{"Key":"since I've","Fragments":["already"]},{"Key":"already got","Fragments":["a"]},{"Key":"`let`, it","Fragments":["makes"]},{"Key":"just stick","Fragments":["the"]},{"Key":"stick the","Fragments":["`words`"]},{"Key":"`words` definition","Fragments":["inside"]},{"Key":"definition inside","Fragments":["it,"]},{"Key":"inside it,","Fragments":["rather"]},{"Key":"it, rather","Fragments":["than"]},{"Key":"an `as-\u003e`.","Fragments":["But"]},{"Key":"`as-\u003e`. But","Fragments":["that's"]},{"Key":"`anagrams-for` should","Fragments":["be"]},{"Key":"filtering `candidates`","Fragments":["for"]},{"Key":"`candidates` for","Fragments":["those"]},{"Key":"are anagrams.","Fragments":["The","It"]},{"Key":"anagrams. The","Fragments":["hero"]},{"Key":"The hero","Fragments":["piece"]},{"Key":"hero piece","Fragments":["anagram-predicate-like"]},{"Key":"piece anagram-predicate-like","Fragments":["code"]},{"Key":"anagram-predicate-like code","Fragments":["here"]},{"Key":"`(= (normalize","Fragments":["candidate)"]},{"Key":"(normalize candidate)","Fragments":["normalized-word)`,"]},{"Key":"candidate) normalized-word)`,","Fragments":["which"]},{"Key":"normalized-word)`, which","Fragments":["I"]},{"Key":"is conflating","Fragments":["the"]},{"Key":"conflating the","Fragments":["concepts."]},{"Key":"the concepts.","Fragments":["To"]},{"Key":"concepts. To","Fragments":["me,"]},{"Key":"the `lower-case`ing","Fragments":["is"]},{"Key":"`lower-case`ing is","Fragments":["the"]},{"Key":"the normalization","Fragments":["part,"]},{"Key":"normalization part,","Fragments":["while"]},{"Key":"part, while","Fragments":["the"]},{"Key":"sorted word","Fragments":["against"]},{"Key":"word against","Fragments":["the"]},{"Key":"sorted candidate","Fragments":["is"]},{"Key":"the anagram-ish","Fragments":["part,"]},{"Key":"anagram-ish part,","Fragments":["and"]},{"Key":"part, and","Fragments":["I'd"]},{"Key":"and I'd","Fragments":["like"]},{"Key":"see those","Fragments":["concepts"]},{"Key":"those concepts","Fragments":["more"]},{"Key":"concepts more","Fragments":["concretely"]},{"Key":"more concretely","Fragments":["defined"]},{"Key":"concretely defined","Fragments":["in"]},{"Key":"a hell","Fragments":["of"]},{"Key":"hell of","Fragments":["a"]},{"Key":"tiny nit","Fragments":["pick,"]},{"Key":"nit pick,","Fragments":["though."]},{"Key":"pick, though.","Fragments":["=-)"]},{"Key":"Try defining","Fragments":["all"]},{"Key":"the requested","Fragments":["functions"]},{"Key":"requested functions","Fragments":["dynamically,"]},{"Key":"functions dynamically,","Fragments":["that"]},{"Key":"dynamically, that","Fragments":["made"]},{"Key":"that made","Fragments":["me","split-words"]},{"Key":"learn a","Fragments":["lot...","little"]},{"Key":" Mr","Fragments":["Date-Protocol-Man"]},{"Key":"Mr Date-Protocol-Man","Fragments":["strikes"]},{"Key":"Date-Protocol-Man strikes","Fragments":["again"]},{"Key":"strikes again","Fragments":[":-)"]},{"Key":"again :-)","Fragments":["But"]},{"Key":":-) But","Fragments":["somehow,"]},{"Key":"But somehow,","Fragments":["this"]},{"Key":"somehow, this","Fragments":["is"]},{"Key":"rather lengthy","Fragments":["this"]},{"Key":"lengthy this","Fragments":["time..."]},{"Key":"Line 36","Fragments":["is"]},{"Key":"36 is","Fragments":["redundant."]},{"Key":"of `(filter","Fragments":["(every-pred"]},{"Key":"`(filter (every-pred","Fragments":["not-same?"]},{"Key":"(every-pred not-same?","Fragments":["anagram?)"]},{"Key":"not-same? anagram?)","Fragments":["candidates))`!"]},{"Key":"use partial","Fragments":["because"]},{"Key":"partial because","Fragments":["of"]},{"Key":"function arguments,","Fragments":["I"]},{"Key":"arguments, I","Fragments":["prefer"]},{"Key":"to supply","Fragments":["filter"]},{"Key":"supply filter","Fragments":["with"]},{"Key":"filter with","Fragments":["an"]},{"Key":"function rather","Fragments":["than"]},{"Key":"than return","Fragments":["a"]},{"Key":"fn from","Fragments":["anagram?."]},{"Key":"using clj-time.format,","Fragments":["but"]},{"Key":"clj-time.format, but","Fragments":["I"]},{"Key":"the aliases","Fragments":["`c-t`"]},{"Key":"aliases `c-t`","Fragments":["and"]},{"Key":"`c-t` and","Fragments":["`c-f`"]},{"Key":"and `c-f`","Fragments":["too"]},{"Key":"`c-f` too","Fragments":["typographically"]},{"Key":"too typographically","Fragments":["similar..."]},{"Key":"don't particularly","Fragments":["like"]},{"Key":"particularly like","Fragments":["where"]},{"Key":"you return","Fragments":["the"]},{"Key":"your function.","Fragments":["I"]},{"Key":"very readable,","Fragments":["and","nice!"]},{"Key":"and prefer","Fragments":["something"]},{"Key":"(defn anagram?","Fragments":["[word","[a"]},{"Key":"anagram? [word","Fragments":["other-word]"]},{"Key":"(let [normalized-word","Fragments":["(lower-case"]},{"Key":"[normalized-word (lower-case","Fragments":["word)"]},{"Key":" normalized-other","Fragments":["(lower-case"]},{"Key":"normalized-other (lower-case","Fragments":["other-word)]"]},{"Key":"(= (sort","Fragments":["normalized-word)"]},{"Key":"(sort normalized-word)","Fragments":["(sort"]},{"Key":"normalized-word) (sort","Fragments":["normalized-other)))))"]},{"Key":"anagrams-for [word,","Fragments":["candidates]"]},{"Key":"The indirection","Fragments":["with"]},{"Key":"indirection with","Fragments":["unix"]},{"Key":"with unix","Fragments":["time"]},{"Key":"unix time","Fragments":["stamps"]},{"Key":"time stamps","Fragments":["seems"]},{"Key":"stamps seems","Fragments":["somehow"]},{"Key":"seems somehow","Fragments":["not"]},{"Key":"somehow not","Fragments":["logical"]},{"Key":"not logical","Fragments":["to"]},{"Key":"Weird, with","Fragments":["your"]},{"Key":"your original","Fragments":["version,"]},{"Key":"original version,","Fragments":["I"]},{"Key":"got an","Fragments":["exception"]},{"Key":"exception during","Fragments":["loading"]},{"Key":"during loading","Fragments":["the"]},{"Key":"loading the","Fragments":["test"]},{"Key":"file in","Fragments":["the"]},{"Key":" `CompilerException","Fragments":["java.lang.ClassCastException:"]},{"Key":"`CompilerException java.lang.ClassCastException:","Fragments":["clojure.lang.Var"]},{"Key":"java.lang.ClassCastException: clojure.lang.Var","Fragments":["cannot"]},{"Key":"clojure.lang.Var cannot","Fragments":["be"]},{"Key":"cannot be","Fragments":["cast"]},{"Key":"be cast","Fragments":["to"]},{"Key":" (:import","Fragments":["[java.text.SimpleDateFormat]"]},{"Key":"Why calculate","Fragments":["using"]},{"Key":"calculate using","Fragments":["milliseconds?"]},{"Key":" hm),","Fragments":["read"]},{"Key":"hm), read","Fragments":["about"]},{"Key":"about interop","Fragments":["http://clojure.org/java_interop"]},{"Key":"interop http://clojure.org/java_interop","Fragments":["and"]},{"Key":"http://clojure.org/java_interop and","Fragments":["try"]},{"Key":"replace that","Fragments":["by","whole"]},{"Key":"by clojure","Fragments":["calls."]},{"Key":"exporting `to-rna-by-char`","Fragments":["with"]},{"Key":"`to-rna-by-char` with","Fragments":["`defn-`"]},{"Key":"`defn-` (assuming","Fragments":["that"]},{"Key":" didn't","Fragments":["know"]},{"Key":"about biginteger,","Fragments":["thanks!"]},{"Key":"of quick","Fragments":["points:"]},{"Key":"* That","Fragments":["regex"]},{"Key":"That regex","Fragments":["looks"]},{"Key":"looks pretty...","Fragments":["exotic"]},{"Key":"pretty... exotic","Fragments":["to"]},{"Key":"exotic to","Fragments":["me."]},{"Key":"comment would","Fragments":["not"]},{"Key":"not go","Fragments":["amiss."]},{"Key":"* `re-find`","Fragments":["might"]},{"Key":"than `re-seq`","Fragments":["for"]},{"Key":" @aisha","Fragments":["That's"]},{"Key":"@aisha That's","Fragments":["such"]},{"Key":"That's such","Fragments":["a"]},{"Key":"great suggestion.","Fragments":["In"]},{"Key":"suggestion. In","Fragments":["my"]},{"Key":"my budding","Fragments":["functional"]},{"Key":"budding functional","Fragments":["programming"]},{"Key":"programming experience,","Fragments":["I'm"]},{"Key":"experience, I'm","Fragments":["not"]},{"Key":"yet learning","Fragments":["to"]},{"Key":"learning to","Fragments":["think"]},{"Key":"partial application,","Fragments":["but"]},{"Key":"application, but","Fragments":["that's","I'm"]},{"Key":"that's *exactly*","Fragments":["what's"]},{"Key":"*exactly* what's","Fragments":["going"]},{"Key":"you so","Fragments":["clearly"]},{"Key":"so clearly","Fragments":["pointed"]},{"Key":"clearly pointed","Fragments":["out."]},{"Key":"pointed out.","Fragments":["Thank"]},{"Key":"out. Thank","Fragments":["you!"]},{"Key":"Like you've","Fragments":["said,"]},{"Key":"you've said,","Fragments":["learning"]},{"Key":"said, learning","Fragments":["a"]},{"Key":"learning a","Fragments":["bit"]},{"Key":"Clojure will","Fragments":["help","treat"]},{"Key":"tried delving","Fragments":["into"]},{"Key":"delving into","Fragments":["that"]},{"Key":"into that","Fragments":["yet?"]},{"Key":"that yet?","Fragments":["Want"]},{"Key":"yet? Want","Fragments":["any"]},{"Key":"Want any","Fragments":["specific"]},{"Key":"any specific","Fragments":["pointers?"]},{"Key":"result. I","Fragments":["would"]},{"Key":"dynamically generate","Fragments":["all"]},{"Key":"tests use,","Fragments":["like"]},{"Key":"use, like","Fragments":["for"]},{"Key":"like for","Fragments":["example:"]},{"Key":"(def monteenth","Fragments":["(day-teenth"]},{"Key":"monteenth (day-teenth","Fragments":[":MON))"]},{"Key":"(def tuesteenth","Fragments":["(day-teenth"]},{"Key":"tuesteenth (day-teenth","Fragments":[":TUE))"]},{"Key":"(def wednesteenth","Fragments":["(day-teenth"]},{"Key":"wednesteenth (day-teenth","Fragments":[":WED))"]},{"Key":"(def thursteenth","Fragments":["(day-teenth"]},{"Key":"thursteenth (day-teenth","Fragments":[":THU))"]},{"Key":"(def friteenth","Fragments":["(day-teenth"]},{"Key":"friteenth (day-teenth","Fragments":[":FRI))"]},{"Key":"(def saturteenth","Fragments":["(day-teenth"]},{"Key":"saturteenth (day-teenth","Fragments":[":SAT))"]},{"Key":"(def sunteenth","Fragments":["(day-teenth"]},{"Key":"sunteenth (day-teenth","Fragments":[":SUN))"]},{"Key":"There must","Fragments":["be","be"]},{"Key":"less cumbersome","Fragments":["way"]},{"Key":"cumbersome way","Fragments":["to"]},{"Key":"More readable","Fragments":["version"]},{"Key":"readable version","Fragments":["of"]},{"Key":" Playing","Fragments":["with"]},{"Key":"Playing with","Fragments":["comp"]},{"Key":"with comp","Fragments":["and"]},{"Key":"comp and","Fragments":["partial"]},{"Key":"and partial","Fragments":["in"]},{"Key":"partial in","Fragments":["make-on-planet-function"]},{"Key":"in make-on-planet-function","Fragments":["to"]},{"Key":"make-on-planet-function to","Fragments":["create"]},{"Key":"create \"on-planet\"","Fragments":["functions"]},{"Key":"\"on-planet\" functions","Fragments":["as","use"]},{"Key":"as compositions","Fragments":["of"]},{"Key":"compositions of","Fragments":["on-earth"]},{"Key":"of on-earth","Fragments":["function"]},{"Key":"All \"on-planet\"","Fragments":["functions"]},{"Key":"functions use","Fragments":["on-earth"]},{"Key":"use on-earth","Fragments":["function."]},{"Key":"on-earth function.","Fragments":["I"]},{"Key":"used let","Fragments":["forms"]},{"Key":"avoid magic","Fragments":["numbers."]},{"Key":"magic numbers.","Fragments":["There's"]},{"Key":"numbers. There's","Fragments":["a"]},{"Key":"duplication that","Fragments":["is"]},{"Key":"is addressed","Fragments":["in"]},{"Key":"addressed in","Fragments":["next"]},{"Key":"you coded","Fragments":["the"]},{"Key":"coded the","Fragments":["shout"]},{"Key":"would include","Fragments":["again"]},{"Key":"include again","Fragments":["the"]},{"Key":"again the","Fragments":["helpers"]},{"Key":"helpers shout,","Fragments":["silence"]},{"Key":"shout, silence","Fragments":["and"]},{"Key":"and question","Fragments":["that","in"]},{"Key":"iterations because","Fragments":["I"]},{"Key":"they helped","Fragments":["to"]},{"Key":"helped to","Fragments":["improve"]},{"Key":"also add","Fragments":["a"]},{"Key":"of their","Fragments":["names,"]},{"Key":"their names,","Fragments":["i.e."]},{"Key":"names, i.e.","Fragments":["shout?,"]},{"Key":"i.e. shout?,","Fragments":["silence?"]},{"Key":"shout?, silence?","Fragments":["and"]},{"Key":"silence? and","Fragments":["question?,"]},{"Key":"and question?,","Fragments":["to"]},{"Key":"question?, to","Fragments":["denote"]},{"Key":"denote that","Fragments":["they"]},{"Key":"pretty concise,","Fragments":["but"]},{"Key":"but we've","Fragments":["got"]},{"Key":"we've got","Fragments":["duplicated"]},{"Key":"got duplicated","Fragments":["strings"]},{"Key":"duplicated strings","Fragments":["here"]},{"Key":"strings here","Fragments":["for"]},{"Key":"verse due","Fragments":["to"]},{"Key":"three branches","Fragments":["of"]},{"Key":"`case` statement.","Fragments":["How"]},{"Key":"statement. How","Fragments":["do"]},{"Key":"first pass","Fragments":["at","but,"]},{"Key":"pass at","Fragments":["a"]},{"Key":"a solution.","Fragments":["It"]},{"Key":"solution. It","Fragments":["feels"]},{"Key":"Assuming the","Fragments":["method"]},{"Key":"method extractions","Fragments":["are"]},{"Key":"extractions are","Fragments":["a"]},{"Key":"good idea,","Fragments":["I'm"]},{"Key":"idea, I'm","Fragments":["not"]},{"Key":"they're better","Fragments":["as-is"]},{"Key":"better as-is","Fragments":["or"]},{"Key":"as-is or","Fragments":["if"]},{"Key":"if `bottles-of-beer`","Fragments":["and"]},{"Key":"`bottles-of-beer` and","Fragments":["`drink-or-buy`"]},{"Key":"and `drink-or-buy`","Fragments":["should"]},{"Key":"`drink-or-buy` should","Fragments":["be"]},{"Key":"moved in","Fragments":["as"]},{"Key":"as lets","Fragments":["to"]},{"Key":"lets to","Fragments":["`verse`"]},{"Key":"to `verse`","Fragments":["instead"]},{"Key":"`verse` instead","Fragments":["of"]},{"Key":"of top-level","Fragments":["un-exported"]},{"Key":"top-level un-exported","Fragments":["functions."]},{"Key":"un-exported functions.","Fragments":["But,"]},{"Key":"functions. But,","Fragments":["I"]},{"Key":"of `verse`","Fragments":["is"]},{"Key":"`verse` is","Fragments":["less"]},{"Key":"cluttered this","Fragments":["way."]},{"Key":"same (verbatim)","Fragments":["implementation"]},{"Key":"(verbatim) implementation","Fragments":["of"]},{"Key":"of `sing`!","Fragments":["(my"]},{"Key":"`sing`! (my","Fragments":["submission"]},{"Key":"(my submission","Fragments":["here:"]},{"Key":"submission here:","Fragments":["http://exercism.io/submissions/6e463337c195978cd814fd3f)"]},{"Key":"your `n-bottles`","Fragments":["approach,"]},{"Key":"`n-bottles` approach,","Fragments":["too."]},{"Key":"approach, too.","Fragments":["Very"]},{"Key":"too. Very","Fragments":["different"]},{"Key":"Very different","Fragments":["from"]},{"Key":"different from","Fragments":["mine."]},{"Key":"use `(zero?","Fragments":["n)`"]},{"Key":"`(zero? n)`","Fragments":["instead"]},{"Key":"n)` instead","Fragments":["of"]},{"Key":"0)` --","Fragments":["more"]},{"Key":"-- more","Fragments":["idiomatic."]},{"Key":"using shortcut","Fragments":["(reader"]},{"Key":"shortcut (reader","Fragments":["macros)"]},{"Key":"(reader macros)","Fragments":["for"]},{"Key":"macros) for","Fragments":["lambda"]},{"Key":"for lambda","Fragments":["-"]},{"Key":"lambda -","Fragments":["`#()`"]},{"Key":"for introducing","Fragments":["me"]},{"Key":"introducing me","Fragments":["to"]},{"Key":"the :private","Fragments":["true"]},{"Key":":private true","Fragments":["metadata"]},{"Key":"true metadata","Fragments":["key"]},{"Key":"metadata key","Fragments":["value"]},{"Key":"key value","Fragments":["pair,"]},{"Key":"value pair,","Fragments":["the"]},{"Key":"pair, the","Fragments":["reset!"]},{"Key":"the reset!","Fragments":["function"]},{"Key":"reset! function","Fragments":["and"]},{"Key":"the rand-nth","Fragments":["function."]},{"Key":" `transform`","Fragments":["doesn't"]},{"Key":"`transform` doesn't","Fragments":["feel"]},{"Key":"great name","Fragments":["here.","for"]},{"Key":"name here.","Fragments":["What"]},{"Key":"here. What","Fragments":["else","if"]},{"Key":"What else","Fragments":["could"]},{"Key":"call this","Fragments":["operation","sort"]},{"Key":"this operation","Fragments":["that's"]},{"Key":"operation that's","Fragments":["closer"]},{"Key":"that's closer","Fragments":["to"]},{"Key":"problem domain's","Fragments":["language?"]},{"Key":"like splitting","Fragments":["them"]},{"Key":"out via","Fragments":["defns"]},{"Key":"via defns","Fragments":["as"]},{"Key":"defns as","Fragments":["you"]},{"Key":"have. However,","Fragments":["I'd"]},{"Key":"I'd think","Fragments":["about"]},{"Key":"about just","Fragments":["using"]},{"Key":"let rather","Fragments":["than"]},{"Key":"than extract","Fragments":["bottle-count"]},{"Key":"extract bottle-count","Fragments":["function."]},{"Key":"bottle-count function.","Fragments":["It"]},{"Key":"useful function","Fragments":["to"]},{"Key":"to have,","Fragments":["and"]},{"Key":"have, and","Fragments":["using"]},{"Key":"let means","Fragments":["that"]},{"Key":"is closer","Fragments":["to"]},{"Key":"to where","Fragments":["it"]},{"Key":"used (if","Fragments":["you're"]},{"Key":"(if you're","Fragments":["reading"]},{"Key":"you're reading","Fragments":["the"]},{"Key":"(defn- bottles-of-beer","Fragments":["[n]"]},{"Key":"(let [bottle-count","Fragments":["(if"]},{"Key":"[bottle-count (if","Fragments":["(zero?"]},{"Key":"(if (zero?","Fragments":["n)"]},{"Key":"(zero? n)","Fragments":["\"no"]},{"Key":"n) \"no","Fragments":["more\""]},{"Key":"\"no more\"","Fragments":["n)]"]},{"Key":"(str bottle-count","Fragments":["\""]},{"Key":"bottle-count \"","Fragments":["\""]},{"Key":"\" \"","Fragments":["(pluralize"]},{"Key":"\" (pluralize","Fragments":["\"bottle\""]},{"Key":"(pluralize \"bottle\"","Fragments":["n)"]},{"Key":"\"bottle\" n)","Fragments":["\""]},{"Key":"n) \"","Fragments":["of"]},{"Key":"about bringing","Fragments":["in"]},{"Key":"bringing in","Fragments":["the"]},{"Key":"let with","Fragments":["descriptor"]},{"Key":"with descriptor","Fragments":["in"]},{"Key":"descriptor in","Fragments":["drink-or-buy"]},{"Key":"in drink-or-buy","Fragments":["inside"]},{"Key":"drink-or-buy inside","Fragments":["the"]},{"Key":"true branch,","Fragments":["so"]},{"Key":"branch, so","Fragments":["it's"]},{"Key":"it's closer","Fragments":["to"]},{"Key":"to use,","Fragments":["especially"]},{"Key":"use, especially","Fragments":["since"]},{"Key":"the false","Fragments":["branch."]},{"Key":"false branch.","Fragments":["Either"]},{"Key":"branch. Either","Fragments":["that"]},{"Key":"Either that","Fragments":["or"]},{"Key":"that or","Fragments":["inlining"]},{"Key":"or inlining","Fragments":["it"]},{"Key":"inlining it","Fragments":["-"]},{"Key":"and pos?","Fragments":["in"]},{"Key":"pos? in","Fragments":["lieu"]},{"Key":"in lieu","Fragments":["of"]},{"Key":"lieu of","Fragments":["(="]},{"Key":"of (=","Fragments":["n"]},{"Key":"(= n","Fragments":["1)"]},{"Key":"n 1)","Fragments":["and"]},{"Key":"1) and","Fragments":["(\u003e"]},{"Key":"and (\u003e","Fragments":["n"]},{"Key":"(\u003e n","Fragments":["0),"]},{"Key":"n 0),","Fragments":["and"]},{"Key":"0), and","Fragments":["you"]},{"Key":"use clojure.string/join","Fragments":["instead"]},{"Key":"clojure.string/join instead","Fragments":["of"]},{"Key":"the interpose","Fragments":["and","function."]},{"Key":"interpose and","Fragments":["apply."]},{"Key":"and apply.","Fragments":["By"]},{"Key":"apply. By","Fragments":["the"]},{"Key":"way, lein","Fragments":["kibit"]},{"Key":"lein kibit","Fragments":["is"]},{"Key":"kibit is","Fragments":["a"]},{"Key":"tool for","Fragments":["suggesting"]},{"Key":"for suggesting","Fragments":["more"]},{"Key":"suggesting more","Fragments":["idiomatic"]},{"Key":"idiomatic functions","Fragments":["/"]},{"Key":"functions /","Fragments":["patterns"]},{"Key":"/ patterns","Fragments":["that"]},{"Key":"name count","Fragments":["in"]},{"Key":"count in","Fragments":["pluralize"]},{"Key":"in pluralize","Fragments":["slightly"]},{"Key":"pluralize slightly","Fragments":["jarring"]},{"Key":"slightly jarring","Fragments":["as"]},{"Key":"jarring as","Fragments":["it"]},{"Key":"a broken","Fragments":["use"]},{"Key":"broken use","Fragments":["of"]},{"Key":"function count.","Fragments":["It"]},{"Key":"count. It","Fragments":["can"]},{"Key":"be hard","Fragments":["to"]},{"Key":"avoid these","Fragments":["and"]},{"Key":"these and","Fragments":["still"]},{"Key":"still choose","Fragments":["descriptive"]},{"Key":"choose descriptive","Fragments":["names"]},{"Key":" PS.","Fragments":["Bring"]},{"Key":"PS. Bring","Fragments":["in"]},{"Key":"Bring in","Fragments":["those"]},{"Key":"those dangling","Fragments":["parens"]},{"Key":"dangling parens","Fragments":["at"]},{"Key":"parens at","Fragments":["the"]},{"Key":"the bottom","Fragments":["when"]},{"Key":"bottom when","Fragments":["you're"]},{"Key":"function zero?","Fragments":["might"]},{"Key":"zero? might","Fragments":["help"]},{"Key":"Also creating","Fragments":["a"]},{"Key":"function, divisible-by?,","Fragments":["would"]},{"Key":"divisible-by?, would","Fragments":["reduce"]},{"Key":"predicates of","Fragments":["the"]},{"Key":"Agreed. Thanks","Fragments":["for"]},{"Key":"I talked","Fragments":["about"]},{"Key":"talked about","Fragments":["it"]},{"Key":"it here:","Fragments":["http://garajeando.blogspot.com.es/2014/07/exercism-grains-in-clojure.html"]},{"Key":"Using Exercism","Fragments":["to"]},{"Key":"Exercism to","Fragments":["learn"]},{"Key":"Clojure. Any","Fragments":["thoughts"]},{"Key":"on areas","Fragments":["I"]},{"Key":"areas I","Fragments":["can"]},{"Key":"improve or","Fragments":["techniques"]},{"Key":"or techniques","Fragments":["to"]},{"Key":"techniques to","Fragments":["look"]},{"Key":"into are","Fragments":["appreciated."]},{"Key":"are appreciated.","Fragments":["As"]},{"Key":"appreciated. As","Fragments":["of"]},{"Key":"As of","Fragments":["now,"]},{"Key":"of now,","Fragments":["this"]},{"Key":"now, this","Fragments":["is"]},{"Key":"is basically","Fragments":["my"]},{"Key":"Ruby implementation","Fragments":["in"]},{"Key":"read like","Fragments":["the"]},{"Key":"problem description.","Fragments":["Therefore,"]},{"Key":"description. Therefore,","Fragments":["I"]},{"Key":"Therefore, I","Fragments":["opted"]},{"Key":"opted to","Fragments":["break"]},{"Key":"break each","Fragments":["condition"]},{"Key":"own predicate","Fragments":["function."]},{"Key":"the trade-offs","Fragments":["of"]},{"Key":"trade-offs of","Fragments":["this"]},{"Key":"approach is","Fragments":["that","very"]},{"Key":"that `yelling?`","Fragments":["could"]},{"Key":"`yelling?` could","Fragments":["potentially"]},{"Key":"potentially be","Fragments":["called"]},{"Key":"called twice.","Fragments":["This"]},{"Key":"twice. This","Fragments":["could"]},{"Key":"avoided if","Fragments":["I"]},{"Key":"had instead","Fragments":["used"]},{"Key":"instead used","Fragments":["nested"]},{"Key":"used nested","Fragments":["`if`s"]},{"Key":" `(-\u003e","Fragments":["s"]},{"Key":"`(-\u003e s","Fragments":["reverse"]},{"Key":"s reverse","Fragments":["first"]},{"Key":"reverse first","Fragments":["(="]},{"Key":"first (=","Fragments":["\\?))`"]},{"Key":"(= \\?))`","Fragments":["could"]},{"Key":"\\?))` could","Fragments":["be"]},{"Key":"to `(=","Fragments":["(last"]},{"Key":"(last s)","Fragments":["\\?)`."]},{"Key":"s) \\?)`.","Fragments":["It"]},{"Key":"\\?)`. It","Fragments":["makes"]},{"Key":"little easier","Fragments":["to"]},{"Key":"read, in","Fragments":["my"]},{"Key":" Tiny","Fragments":["nitpick:"]},{"Key":"Tiny nitpick:","Fragments":["`silent?`"]},{"Key":"nitpick: `silent?`","Fragments":["could"]},{"Key":"to `(def","Fragments":["silent?"]},{"Key":"`(def silent?","Fragments":["blank?)`,"]},{"Key":"silent? blank?)`,","Fragments":["although"]},{"Key":"blank?)`, although","Fragments":["perhaps"]},{"Key":"although perhaps","Fragments":["this"]},{"Key":"perhaps this","Fragments":["doesn't"]},{"Key":"doesn't immediately","Fragments":["convey","show"]},{"Key":"immediately convey","Fragments":["that"]},{"Key":"convey that","Fragments":["it"]},{"Key":"to reorder","Fragments":["the"]},{"Key":"in `response-for`,","Fragments":["which"]},{"Key":"`response-for`, which","Fragments":["allowed"]},{"Key":"which allowed","Fragments":["me"]},{"Key":"to eliminate","Fragments":["the"]},{"Key":"to `yelling?`","Fragments":["in"]},{"Key":"`yelling?` in","Fragments":["`question?`."]},{"Key":" Enumerating","Fragments":["the"]},{"Key":"Enumerating the","Fragments":["known"]},{"Key":"the known","Fragments":["'special"]},{"Key":"known 'special","Fragments":["differences'"]},{"Key":"'special differences'","Fragments":["(e.g.,"]},{"Key":"differences' (e.g.,","Fragments":["IX)"]},{"Key":"(e.g., IX)","Fragments":["makes"]},{"Key":"IX) makes","Fragments":["the"]},{"Key":"code very","Fragments":["short"]},{"Key":"Obviously not","Fragments":["the"]},{"Key":"shortest solution,","Fragments":["primarily"]},{"Key":"solution, primarily","Fragments":["because"]},{"Key":"primarily because","Fragments":["special"]},{"Key":"because special","Fragments":["cases"]},{"Key":"like 'IX'","Fragments":["or"]},{"Key":"'IX' or","Fragments":["'CD'"]},{"Key":"or 'CD'","Fragments":["are"]},{"Key":"'CD' are","Fragments":["handled"]},{"Key":"are handled","Fragments":["in"]},{"Key":"generic way,","Fragments":["plus"]},{"Key":"way, plus","Fragments":["I"]},{"Key":"plus I","Fragments":["wanted"]},{"Key":"out some","Fragments":["Clojure","of"]},{"Key":"some Clojure","Fragments":["stuff","functions"]},{"Key":"Clojure stuff","Fragments":["like"]},{"Key":"even define","Fragments":["new"]},{"Key":"define new","Fragments":["Roman"]},{"Key":"new Roman","Fragments":["literals"]},{"Key":"Roman literals","Fragments":["for,"]},{"Key":"literals for,","Fragments":["e.g.,"]},{"Key":"for, e.g.,","Fragments":["5000,"]},{"Key":"e.g., 5000,","Fragments":["10000,"]},{"Key":"5000, 10000,","Fragments":["50000..."]},{"Key":"10000, 50000...","Fragments":["(useless"]},{"Key":"50000... (useless","Fragments":["but"]},{"Key":"(useless but","Fragments":["cool)."]},{"Key":"In reality,","Fragments":["I"]},{"Key":"reality, I","Fragments":["simply"]},{"Key":"I simply","Fragments":["suck"]},{"Key":"simply suck","Fragments":["at"]},{"Key":"suck at","Fragments":["more"]},{"Key":"at more","Fragments":["mathematical"]},{"Key":"more mathematical","Fragments":["problems"]},{"Key":"mathematical problems","Fragments":[":-)"]},{"Key":"Would `(map","Fragments":["dna-\u003erna"]},{"Key":"`(map dna-\u003erna","Fragments":["s)`"]},{"Key":"dna-\u003erna s)`","Fragments":["work?"]},{"Key":"You're perfectly","Fragments":["right,"]},{"Key":"perfectly right,","Fragments":["I"]},{"Key":"it later.","Fragments":["There"]},{"Key":"later. There","Fragments":["were"]},{"Key":"other problems","Fragments":["that"]},{"Key":"problems that","Fragments":["I"]},{"Key":"also fix","Fragments":["in"]},{"Key":"the 2nd","Fragments":["submission."]},{"Key":"Yes it","Fragments":["would!"]},{"Key":"it would!","Fragments":["The"]},{"Key":"would! The","Fragments":["anonymous"]},{"Key":"The anonymous","Fragments":["function"]},{"Key":"was completely","Fragments":["superfluous."]},{"Key":"completely superfluous.","Fragments":["For"]},{"Key":"superfluous. For","Fragments":["some"]},{"Key":"include that","Fragments":["-"]},{"Key":"probably some","Fragments":["remnant"]},{"Key":"some remnant","Fragments":["from"]},{"Key":"remnant from","Fragments":["a"]},{"Key":"map tutorial","Fragments":["that"]},{"Key":"tutorial that","Fragments":["had"]},{"Key":"had broken","Fragments":["off"]},{"Key":"broken off","Fragments":["and"]},{"Key":"off and","Fragments":["solidified"]},{"Key":"and solidified","Fragments":["in"]},{"Key":"solidified in","Fragments":["my"]},{"Key":"brain. Thank","Fragments":["you"]},{"Key":"right direction.","Fragments":[":)"]},{"Key":"and unique","Fragments":["solution"]},{"Key":"unique solution","Fragments":["idea!","approach."]},{"Key":"Very short","Fragments":["and"]},{"Key":"still highly","Fragments":["understandable!"]},{"Key":"seen so","Fragments":["far","far."]},{"Key":"using `case`","Fragments":["instead"]},{"Key":"little string-replacement","Fragments":["goes"]},{"Key":"string-replacement goes","Fragments":["a"]},{"Key":"goes a","Fragments":["long","bit"]},{"Key":"long way...","Fragments":["+1"]},{"Key":"way... +1","Fragments":["for"]},{"Key":"the unique","Fragments":["solution","ids"]},{"Key":"for character","Fragments":["destructuring."]},{"Key":"Great idea","Fragments":["to"]},{"Key":"reduce 'from","Fragments":["the"]},{"Key":"'from the","Fragments":["left'!"]},{"Key":"part that","Fragments":["compares"]},{"Key":"that compares","Fragments":["the"]},{"Key":"compares the","Fragments":["uppercase"]},{"Key":"uppercase vs","Fragments":["lowercase"]},{"Key":"vs lowercase","Fragments":["letters."]},{"Key":"lowercase letters.","Fragments":["Otherwise"]},{"Key":"letters. Otherwise","Fragments":["it"]},{"Key":"seems straightforward","Fragments":["-"]},{"Key":"straightforward -","Fragments":["apply"]},{"Key":"- apply","Fragments":["predicates"]},{"Key":"apply predicates","Fragments":["and"]},{"Key":"and respond","Fragments":["with"]},{"Key":" Short,","Fragments":["concise,"]},{"Key":"Short, concise,","Fragments":["uses"]},{"Key":"concise, uses","Fragments":["descriptive"]},{"Key":"uses descriptive","Fragments":["method"]},{"Key":"descriptive method","Fragments":["names,"]},{"Key":"names, very","Fragments":["readable."]},{"Key":"beneficial to","Fragments":["extract"]},{"Key":"separate structure","Fragments":["which"]},{"Key":"structure which","Fragments":["response-for"]},{"Key":"which response-for","Fragments":["could"]},{"Key":"response-for could","Fragments":["then"]},{"Key":"No arguments","Fragments":["there"]},{"Key":"arguments there","Fragments":["-"]},{"Key":"there -","Fragments":["that"]},{"Key":"that cleans","Fragments":["things"]},{"Key":"cleans things","Fragments":["up"]},{"Key":"up nicely.","Fragments":["Thanks"]},{"Key":"nicely. Thanks","Fragments":["for"]},{"Key":"The complex","Fragments":["condition"]},{"Key":"complex condition","Fragments":["on"]},{"Key":"condition on","Fragments":["line"]},{"Key":"line 8–9","Fragments":["should"]},{"Key":"8–9 should","Fragments":["probably"]},{"Key":" Perfect","Fragments":["implementation."]},{"Key":"Perfect implementation.","Fragments":["Instead"]},{"Key":"implementation. Instead","Fragments":["of"]},{"Key":"of (not","Fragments":["(some","(some"]},{"Key":"(some ....,","Fragments":["you","you"]},{"Key":"...., you","Fragments":["can","can"]},{"Key":"use (not-any?","Fragments":["....","...."]},{"Key":"readability I","Fragments":["agree"]},{"Key":"with you:","Fragments":["I"]},{"Key":"you: I","Fragments":["would"]},{"Key":"put at","Fragments":["least"]},{"Key":"big condition","Fragments":["in"]},{"Key":"a (yell?)","Fragments":["function;"]},{"Key":"(yell?) function;","Fragments":["and"]},{"Key":"function; and","Fragments":["possible"]},{"Key":"and possible","Fragments":["the"]},{"Key":"possible the","Fragments":["others"]},{"Key":"(cond (blank?","Fragments":["s)"]},{"Key":"(blank? s)","Fragments":["....","\"Fine.","\"Fine."]},{"Key":" (yell?","Fragments":["s)"]},{"Key":"(yell? s)","Fragments":["..."]},{"Key":"way, because","Fragments":["the"]},{"Key":"readable you","Fragments":["can"]},{"Key":"more concise:","Fragments":["all"]},{"Key":"concise: all","Fragments":["the"]},{"Key":"the (cond)","Fragments":["logic"]},{"Key":"(cond) logic","Fragments":["in"]},{"Key":"in 4","Fragments":["lines,"]},{"Key":"4 lines,","Fragments":["so"]},{"Key":"lines, so","Fragments":["the"]},{"Key":"the eye","Fragments":["gets"]},{"Key":"eye gets","Fragments":["it"]},{"Key":"gets it","Fragments":["at"]},{"Key":"a glance:","Fragments":["\"So"]},{"Key":"glance: \"So","Fragments":["what"]},{"Key":"\"So what","Fragments":["does"]},{"Key":"does he","Fragments":["react"]},{"Key":"he react","Fragments":["to?"]},{"Key":"react to?","Fragments":["yelling,"]},{"Key":"to? yelling,","Fragments":["questions,"]},{"Key":"yelling, questions,","Fragments":["blank,"]},{"Key":"questions, blank,","Fragments":["else\""]},{"Key":" Compact","Fragments":["is"]},{"Key":"Compact is","Fragments":["bad,"]},{"Key":"is bad,","Fragments":["but"]},{"Key":"bad, but","Fragments":["concise","I'm"]},{"Key":"but concise","Fragments":["and"]},{"Key":"and focused","Fragments":["is"]},{"Key":"focused is","Fragments":["good."]},{"Key":" Separate","Fragments":["this"]},{"Key":"Separate this","Fragments":["code"]},{"Key":"into at","Fragments":["least"]},{"Key":"least two","Fragments":["functions:"]},{"Key":" (anagram?)","Fragments":["which"]},{"Key":"(anagram?) which","Fragments":["checks"]},{"Key":"checks whether","Fragments":["a"]},{"Key":"an anagram,","Fragments":["and"]},{"Key":"anagram, and","Fragments":["(anagrams-for)"]},{"Key":"and (anagrams-for)","Fragments":["just"]},{"Key":"(anagrams-for) just","Fragments":["to"]},{"Key":"to (filter)","Fragments":["the"]},{"Key":"(filter) the","Fragments":["words"]},{"Key":"words based","Fragments":["on"]},{"Key":"of (anagram?).","Fragments":["You"]},{"Key":"(anagram?). You","Fragments":["won't"]},{"Key":"You won't","Fragments":["need"]},{"Key":"a reduce,","Fragments":["the"]},{"Key":"reduce, the","Fragments":["code"]},{"Key":"code must","Fragments":["be"]},{"Key":"code `\"BAnaNA\"`","Fragments":["and"]},{"Key":"`\"BAnaNA\"` and","Fragments":["`\"banana\"`"]},{"Key":"and `\"banana\"`","Fragments":["are"]},{"Key":"`\"banana\"` are","Fragments":["anagrams."]},{"Key":"anagrams. It","Fragments":["still"]},{"Key":"still passes","Fragments":["all"]},{"Key":"the tests;","Fragments":["but"]},{"Key":"tests; but","Fragments":["what"]},{"Key":"if after","Fragments":["a"]},{"Key":"bug report","Fragments":["someone"]},{"Key":"report someone","Fragments":["decided"]},{"Key":"someone decided","Fragments":["that"]},{"Key":"new test","Fragments":["for"]},{"Key":" `(is","Fragments":["(="]},{"Key":"`(is (=","Fragments":["[]"]},{"Key":"(= []","Fragments":["(anagram/anagrams-for"]},{"Key":"[] (anagram/anagrams-for","Fragments":["\"BAnaNA\""]},{"Key":"(anagram/anagrams-for \"BAnaNA\"","Fragments":["[\"banana\"]))))`"]},{"Key":"you refactor","Fragments":["this"]},{"Key":"refactor this","Fragments":["code"]},{"Key":"work, while","Fragments":["keeping"]},{"Key":"while keeping","Fragments":["the"]},{"Key":"code elegant","Fragments":["(readable"]},{"Key":"elegant (readable","Fragments":["and"]},{"Key":"(readable and","Fragments":["concise)?"]},{"Key":"and concise)?","Fragments":["I'm"]},{"Key":"concise)? I'm","Fragments":["curious"]},{"Key":"curious what","Fragments":["solution"]},{"Key":"what solution","Fragments":["you"]},{"Key":"solution you","Fragments":["will"]},{"Key":"will come","Fragments":["up"]},{"Key":"with :)","Fragments":["(Just"]},{"Key":":) (Just","Fragments":["add"]},{"Key":"(Just add","Fragments":["this"]},{"Key":"add this","Fragments":["test"]},{"Key":"this test","Fragments":["in"]},{"Key":"suite if","Fragments":["you"]},{"Key":"readable, nice!","Fragments":["Apart"]},{"Key":"nice! Apart","Fragments":["from"]},{"Key":"from too","Fragments":["many"]},{"Key":"many newlines","Fragments":["for"]},{"Key":"newlines for","Fragments":["me:"]},{"Key":"for me:","Fragments":["`anagram?`"]},{"Key":"me: `anagram?`","Fragments":["doesn't"]},{"Key":"`anagram?` doesn't","Fragments":["need"]},{"Key":"be 6","Fragments":["lines"]},{"Key":"6 lines","Fragments":["long."]},{"Key":"lines long.","Fragments":["One"]},{"Key":"long. One","Fragments":["line"]},{"Key":"One line","Fragments":["per"]},{"Key":"per idea","Fragments":["is"]},{"Key":"anagram? [a","Fragments":["b]"]},{"Key":" \"Same","Fragments":["unordered"]},{"Key":"\"Same unordered","Fragments":["characters,"]},{"Key":"unordered characters,","Fragments":["but"]},{"Key":"(not= a","Fragments":["b)"]},{"Key":"(= (alphagram","Fragments":["a)"]},{"Key":"(alphagram a)","Fragments":["(alphagram"]},{"Key":"a) (alphagram","Fragments":["b))))"]},{"Key":"Haha, I","Fragments":["was","didn't"]},{"Key":"was mainly","Fragments":["just"]},{"Key":"mainly just","Fragments":["testing"]},{"Key":"just testing","Fragments":["the"]},{"Key":"testing the","Fragments":["upload"]},{"Key":"the upload","Fragments":["functionality"]},{"Key":"upload functionality","Fragments":["of"]},{"Key":"exercism.io after","Fragments":["quickly"]},{"Key":"after quickly","Fragments":["typing"]},{"Key":"quickly typing","Fragments":["up"]},{"Key":"typing up","Fragments":["worst"]},{"Key":"up worst","Fragments":["possible"]},{"Key":"worst possible","Fragments":["solution."]},{"Key":"possible solution.","Fragments":["Will"]},{"Key":"solution. Will","Fragments":["do"]},{"Key":"Will do","Fragments":["better"]},{"Key":"better next","Fragments":["revision!"]},{"Key":"Fair enough","Fragments":[":)"]},{"Key":"with these","Fragments":["macros"]},{"Key":"these macros","Fragments":["is"]},{"Key":"with on","Fragments":["argument,"]},{"Key":"on argument,","Fragments":["so"]},{"Key":"often manipulate","Fragments":["one"]},{"Key":"manipulate one","Fragments":["vector,"]},{"Key":"one vector,","Fragments":["which"]},{"Key":"vector, which","Fragments":["means"]},{"Key":"means extra","Fragments":["`apply`"]},{"Key":"extra `apply`","Fragments":["all"]},{"Key":"`apply` all","Fragments":["over"]},{"Key":"The upside","Fragments":["is"]},{"Key":"upside is","Fragments":["readability,"]},{"Key":"is readability,","Fragments":["and"]},{"Key":"readability, and","Fragments":["that"]},{"Key":"it's dead","Fragments":["easy"]},{"Key":"dead easy","Fragments":["to","to"]},{"Key":"add steps","Fragments":["in"]},{"Key":"steps in","Fragments":["the"]},{"Key":"now how","Fragments":["to"]},{"Key":"use assert","Fragments":["as"]},{"Key":"assert as","Fragments":["part"]},{"Key":"My eyes","Fragments":["are"]},{"Key":"eyes are","Fragments":["still"]},{"Key":"still adjusting","Fragments":["to"]},{"Key":"-\u003e and","Fragments":["-\u003e\u003e"]},{"Key":"and -\u003e\u003e","Fragments":["macros."]},{"Key":"-\u003e\u003e macros.","Fragments":["At"]},{"Key":"macros. At","Fragments":["the"]},{"Key":"find them","Fragments":["harder"]},{"Key":"them harder","Fragments":["to"]},{"Key":"read than","Fragments":["the"]},{"Key":"the equivalent","Fragments":["chain"]},{"Key":"equivalent chain","Fragments":["of"]},{"Key":"Hey Rich","Fragments":[":)",":-)"]},{"Key":"Rich :)","Fragments":["the"]},{"Key":":) the","Fragments":["`assert`"]},{"Key":"`assert` could","Fragments":["go"]},{"Key":"the `case`,","Fragments":["so"]},{"Key":"`case`, so","Fragments":["you"]},{"Key":"That's REALLY","Fragments":["nittpicking."]},{"Key":"REALLY nittpicking.","Fragments":["Just"]},{"Key":"nittpicking. Just","Fragments":["tell"]},{"Key":"Just tell","Fragments":["me"]},{"Key":"want that","Fragments":["level"]},{"Key":"that level","Fragments":["of","of"]},{"Key":"shall use","Fragments":["the"]},{"Key":"clojure stdlib","Fragments":["functions"]},{"Key":"stdlib functions","Fragments":["rather"]},{"Key":"functions rather","Fragments":["than"]},{"Key":"The prime","Fragments":["(')"]},{"Key":"prime (')","Fragments":["notation"]},{"Key":"(') notation","Fragments":["is"]},{"Key":"notation is","Fragments":["used"]},{"Key":"Haskell, and","Fragments":["I"]},{"Key":"the Lisp","Fragments":["world"]},{"Key":"Lisp world","Fragments":["too."]},{"Key":"world too.","Fragments":["I'll"]},{"Key":"too. I'll","Fragments":["change"]},{"Key":"I'll change","Fragments":["it.","it","mine."]},{"Key":"use `'`","Fragments":["as"]},{"Key":"`'` as","Fragments":["part"]},{"Key":"variable names.","Fragments":["It's"]},{"Key":"names. It's","Fragments":["confusing,"]},{"Key":"It's confusing,","Fragments":["initially"]},{"Key":"confusing, initially","Fragments":["I"]},{"Key":"initially I","Fragments":["thought"]},{"Key":"thought you","Fragments":["where"]},{"Key":"you where","Fragments":["`quote`ing"]},{"Key":"where `quote`ing","Fragments":["stuff."]},{"Key":"end I","Fragments":["almost","gave"]},{"Key":"I almost","Fragments":["wrote"]},{"Key":"almost wrote","Fragments":["the"]},{"Key":"same code","Fragments":["as"]},{"Key":"as you,","Fragments":["it's"]},{"Key":"you, it's","Fragments":["very"]},{"Key":"readable. But","Fragments":["I've"]},{"Key":"But I've","Fragments":["kept"]},{"Key":"kept an","Fragments":["alternative"]},{"Key":"still hoping","Fragments":["to"]},{"Key":"No, that's","Fragments":["a"]},{"Key":"good level","Fragments":["of"]},{"Key":"of nitpicking.","Fragments":["The"]},{"Key":"nitpicking. The","Fragments":["duplication"]},{"Key":"The duplication","Fragments":["does"]},{"Key":"duplication does","Fragments":["bug"]},{"Key":"does bug","Fragments":["me,"]},{"Key":"bug me,","Fragments":["so"]},{"Key":"me, so","Fragments":["I'll"]},{"Key":"indent the","Fragments":["code"]},{"Key":"code after","Fragments":["a","looking","you.","a","the"]},{"Key":"a `let`.","Fragments":["In"]},{"Key":"`let`. In","Fragments":["my"]},{"Key":"code too,","Fragments":["I"]},{"Key":"too, I","Fragments":["always"]},{"Key":"always think","Fragments":["it"]},{"Key":"looks messy","Fragments":[":-/"]},{"Key":"solution :-)","Fragments":["Your"]},{"Key":":-) Your","Fragments":["`case`"]},{"Key":"Your `case`","Fragments":["statements"]},{"Key":"`case` statements","Fragments":["give"]},{"Key":"statements give","Fragments":["the"]},{"Key":"perfect level","Fragments":["of"]},{"Key":"of detail,","Fragments":["for"]},{"Key":"detail, for","Fragments":["describing"]},{"Key":"describing what","Fragments":["happens."]},{"Key":"happens. If","Fragments":["you"]},{"Key":"attempt, I","Fragments":["over-engineered"]},{"Key":"I over-engineered","Fragments":["it,"]},{"Key":"over-engineered it,","Fragments":["which"]},{"Key":"it unreadable.","Fragments":["It"]},{"Key":"unreadable. It","Fragments":["seems"]},{"Key":"a trend","Fragments":["with"]},{"Key":"trend with","Fragments":["me..."]},{"Key":"changed lots","Fragments":["and"]},{"Key":"lots and","Fragments":["lots"]},{"Key":"and lots","Fragments":["of"]},{"Key":"at yours,","Fragments":["cheers."]},{"Key":"You last","Fragments":["line"]},{"Key":"is tough","Fragments":["to"]},{"Key":"tough to","Fragments":["read."]},{"Key":"read. You","Fragments":["should"]},{"Key":"(range start","Fragments":["(dec"]},{"Key":"start (dec","Fragments":["end)"]},{"Key":"(dec end)","Fragments":["-1)"]},{"Key":" (s/join","Fragments":["\"\\n\"))"]},{"Key":"The result","Fragments":["of"]},{"Key":"each function","Fragments":["gets"]},{"Key":"didn't I","Fragments":["think"]},{"Key":"of `join`!","Fragments":["Ah,"]},{"Key":"`join`! Ah,","Fragments":["because"]},{"Key":"Ah, because","Fragments":["I"]},{"Key":"had just","Fragments":["read"]},{"Key":"about `interleave`","Fragments":["and"]},{"Key":"and really","Fragments":["wanted"]},{"Key":"- silly","Fragments":[":p."]},{"Key":"silly :p.","Fragments":["I'll"]},{"Key":":p. I'll","Fragments":["change"]},{"Key":"change it","Fragments":["to"]},{"Key":"to `join`","Fragments":["in"]},{"Key":"`join` in","Fragments":["my"]},{"Key":"code, you'll","Fragments":["find"]},{"Key":"find two","Fragments":["functions"]},{"Key":"wrote to","Fragments":["help"]},{"Key":"me debug","Fragments":["in"]},{"Key":"debug in","Fragments":["this"]},{"Key":"this exercise;","Fragments":["in"]},{"Key":"exercise; in","Fragments":["case"]},{"Key":"case it's","Fragments":["useful"]},{"Key":"you too,","Fragments":["or"]},{"Key":"too, or","Fragments":["in"]},{"Key":"know a","Fragments":["better","whole"]},{"Key":"better source","Fragments":["of"]},{"Key":"source of","Fragments":["debug","it,"]},{"Key":"of debug","Fragments":["tools"]},{"Key":"debug tools","Fragments":["and"]},{"Key":"tools and","Fragments":["tell"]},{"Key":"It's subjective,","Fragments":["but"]},{"Key":"subjective, but","Fragments":["I"]},{"Key":"like `frequencies`","Fragments":["is"]},{"Key":"to `nucleotide-count`,","Fragments":["so"]},{"Key":"`nucleotide-count`, so","Fragments":["it"]},{"Key":"use there.","Fragments":["Then"]},{"Key":"there. Then","Fragments":["`count`"]},{"Key":"Then `count`","Fragments":["can"]},{"Key":"`count` can","Fragments":["just"]},{"Key":"call `nucleotide-count`.","Fragments":["And"]},{"Key":"`nucleotide-count`. And","Fragments":["nucleotide-count"]},{"Key":"And nucleotide-count","Fragments":["doesn't"]},{"Key":"nucleotide-count doesn't","Fragments":["have"]},{"Key":"the tedious","Fragments":["job"]},{"Key":"tedious job","Fragments":["of"]},{"Key":"job of","Fragments":["harvesting","`core/frequencies`,"]},{"Key":"of harvesting","Fragments":["the"]},{"Key":"harvesting the","Fragments":["results"]},{"Key":"of count","Fragments":["(calling"]},{"Key":"count (calling","Fragments":["`frequencies`"]},{"Key":"(calling `frequencies`","Fragments":["4"]},{"Key":"`frequencies` 4","Fragments":["times"]},{"Key":"4 times","Fragments":["when"]},{"Key":"really Nitpicking","Fragments":["here."]},{"Key":"of `for`","Fragments":["I","when"]},{"Key":"`for` I","Fragments":["would"]},{"Key":"used `map`,","Fragments":["but"]},{"Key":"`map`, but","Fragments":["I"]},{"Key":"just personal","Fragments":["preference:"]},{"Key":"(map #(hash-map","Fragments":["%"]},{"Key":"#(hash-map %","Fragments":["(count"]},{"Key":"% (count","Fragments":["%"]},{"Key":"(count %","Fragments":["s)))"]},{"Key":"like -\u003e\u003e","Fragments":["macros"]},{"Key":"-\u003e\u003e macros","Fragments":["because"]},{"Key":"macros because","Fragments":["they"]},{"Key":"they force","Fragments":["me"]},{"Key":"force me","Fragments":["to"]},{"Key":"of successive","Fragments":["data"]},{"Key":"successive data","Fragments":["transformations:"]},{"Key":"data transformations:","Fragments":["how"]},{"Key":"transformations: how","Fragments":["do"]},{"Key":"a get","Fragments":["data"]},{"Key":"get data","Fragments":["with"]},{"Key":"data with","Fragments":["shape","shape"]},{"Key":"with shape","Fragments":["A,","B."]},{"Key":"shape A,","Fragments":["into"]},{"Key":"A, into","Fragments":["data"]},{"Key":"into data","Fragments":["with"]},{"Key":"shape B.","Fragments":["It's"]},{"Key":"B. It's","Fragments":["a"]},{"Key":"very generic","Fragments":["way"]},{"Key":"generic way","Fragments":["to"]},{"Key":"And lastly,","Fragments":["I"]},{"Key":"lastly, I","Fragments":["like"]},{"Key":"call collections","Fragments":["(lists,"]},{"Key":"collections (lists,","Fragments":["sets,"]},{"Key":"(lists, sets,","Fragments":["etc)"]},{"Key":"sets, etc)","Fragments":["with"]},{"Key":"etc) with","Fragments":["plural"]},{"Key":"with plural","Fragments":["names"]},{"Key":"plural names","Fragments":["(eg"]},{"Key":"names (eg","Fragments":["`dna-nucleotides`)."]},{"Key":"(eg `dna-nucleotides`).","Fragments":["This"]},{"Key":"`dna-nucleotides`). This","Fragments":["way"]},{"Key":"I'm manipulating.","Fragments":["Sometimes"]},{"Key":"manipulating. Sometimes","Fragments":["I"]},{"Key":"Sometimes I","Fragments":["tripped"]},{"Key":"I tripped","Fragments":["on"]},{"Key":"tripped on","Fragments":["`data-nucleotide`"]},{"Key":"on `data-nucleotide`","Fragments":["in"]},{"Key":"`data-nucleotide` in","Fragments":["your"]},{"Key":"your code,","Fragments":["thinking"]},{"Key":"code, thinking","Fragments":["it"]},{"Key":"thinking it","Fragments":["might"]},{"Key":" \"Nitpick\"","Fragments":[":)"]},{"Key":"This removes","Fragments":["some","the","the"]},{"Key":"removes some","Fragments":["of"]},{"Key":"and changes","Fragments":["the"]},{"Key":"changes the","Fragments":["ordering"]},{"Key":"statement so","Fragments":["that"]},{"Key":"`question?` method","Fragments":["doesn't"]},{"Key":"method doesn't","Fragments":["have"]},{"Key":"no `shouting?`.","Fragments":["It's"]},{"Key":"`shouting?`. It's","Fragments":["a"]},{"Key":"succinct version,","Fragments":["however"]},{"Key":"version, however","Fragments":["some"]},{"Key":"however some","Fragments":["readability"]},{"Key":"readability may","Fragments":["be"]},{"Key":"be lost","Fragments":["in"]},{"Key":"lost in","Fragments":["the"]},{"Key":"process. Trying","Fragments":["to"]},{"Key":"that balance","Fragments":["between"]},{"Key":"balance between","Fragments":["brevity"]},{"Key":"between brevity","Fragments":["and"]},{"Key":"brevity and","Fragments":["clarity.","speed,"]},{"Key":"unnecessary `and`","Fragments":["function"]},{"Key":"`and` function","Fragments":["in"]},{"Key":"`question?` that","Fragments":["was"]},{"Key":"was left","Fragments":["over"]},{"Key":"over from","Fragments":["the","the"]},{"Key":" Let's","Fragments":["see"]},{"Key":"whether I","Fragments":["can"]},{"Key":"can motivate","Fragments":["myself"]},{"Key":"motivate myself","Fragments":["to"]},{"Key":"to a)","Fragments":["understand"]},{"Key":"a) understand","Fragments":["the"]},{"Key":"number generating","Fragments":["function"]},{"Key":"generating function","Fragments":["or"]},{"Key":"even b)","Fragments":["write"]},{"Key":"b) write","Fragments":["my"]},{"Key":"version (although","Fragments":["it"]},{"Key":"(although it","Fragments":["would"]},{"Key":"be worse","Fragments":["than"]},{"Key":"worse than","Fragments":["Grand's"]},{"Key":"than Grand's","Fragments":["version)."]},{"Key":"without prime","Fragments":["numbers!"]},{"Key":"not avoid","Fragments":["the"]},{"Key":"and put","Fragments":["directly"]},{"Key":"put directly","Fragments":["`(string/lower-case"]},{"Key":"directly `(string/lower-case","Fragments":["phrase)`"]},{"Key":"`(string/lower-case phrase)`","Fragments":["into"]},{"Key":"phrase)` into","Fragments":["the"]},{"Key":"the others?","Fragments":["It's"]},{"Key":"others? It's","Fragments":["just"]},{"Key":"a chain","Fragments":["of"]},{"Key":"transformations after","Fragments":["all."]},{"Key":" use","Fragments":["the"]},{"Key":"of stray","Fragments":["`str`s"]},{"Key":"stray `str`s","Fragments":["on"]},{"Key":"`str`s on","Fragments":["lines"]},{"Key":"lines 54","Fragments":["and"]},{"Key":"54 and","Fragments":["55."]},{"Key":"shall give","Fragments":["`c`"]},{"Key":"give `c`","Fragments":["and"]},{"Key":"`c` and","Fragments":["`cc`"]},{"Key":"and `cc`","Fragments":["a"]},{"Key":"`cc` a","Fragments":["go"]},{"Key":"go when","Fragments":["I"]},{"Key":"start using","Fragments":["thread"]},{"Key":"using thread","Fragments":["macros"]},{"Key":"thread macros","Fragments":[":)"]},{"Key":"Agreed. I","Fragments":["shall"]},{"Key":"shall change","Fragments":["the"]},{"Key":"be like","Fragments":["yours.","1"]},{"Key":"make some","Fragments":["very"]},{"Key":"some very","Fragments":["good"]},{"Key":"require clojure.core","Fragments":["(required"]},{"Key":"clojure.core (required","Fragments":["by"]},{"Key":"(required by","Fragments":["default?)"]},{"Key":"For a","Fragments":["few"]},{"Key":"few seconds","Fragments":["I"]},{"Key":"seconds I","Fragments":["found"]},{"Key":"found `identity`","Fragments":["confusing"]},{"Key":"`identity` confusing","Fragments":["in"]},{"Key":"confusing in","Fragments":["your"]},{"Key":"(filter false?","Fragments":["(map"]},{"Key":"false? (map","Fragments":["="]},{"Key":"which expresses","Fragments":["the"]},{"Key":"more clearly","Fragments":["in"]},{"Key":"clearly in","Fragments":["my"]},{"Key":"eyes (","Fragments":["subjective"]},{"Key":"( subjective","Fragments":["indeed"]},{"Key":"subjective indeed","Fragments":[":)"]},{"Key":"used `true?`","Fragments":["at"]},{"Key":"`true?` at","Fragments":["first,"]},{"Key":"at first,","Fragments":["and"]},{"Key":"first, and","Fragments":["then"]},{"Key":"found my","Fragments":["mistake"]},{"Key":"my mistake","Fragments":["by"]},{"Key":"mistake by","Fragments":["using"]},{"Key":"using my","Fragments":["(c)"]},{"Key":"my (c)","Fragments":["function,"]},{"Key":"(c) function,","Fragments":["which"]},{"Key":"which shows","Fragments":["what"]},{"Key":"shows what","Fragments":["is"]},{"Key":"is returned","Fragments":["at"]},{"Key":"returned at","Fragments":["each"]},{"Key":"at each","Fragments":["step"]},{"Key":"each step","Fragments":["of"]},{"Key":"the -\u003e\u003e.","Fragments":["The"]},{"Key":"-\u003e\u003e. The","Fragments":["output"]},{"Key":"The output","Fragments":["looks"]},{"Key":"output looks","Fragments":["like"]},{"Key":" Words","Fragments":["[42/436]"]},{"Key":" [\"ACCAGGG\"","Fragments":["\"ACTATGG\"]"]},{"Key":" (true","Fragments":["true"]},{"Key":"(true true","Fragments":["false"]},{"Key":"true false","Fragments":["true","true"]},{"Key":"false true","Fragments":["false","true)"]},{"Key":" (false","Fragments":["false)"]},{"Key":"course you","Fragments":["have"]},{"Key":"for division","Fragments":["with"]},{"Key":"division with","Fragments":["each"]},{"Key":"with each","Fragments":["possible"]},{"Key":"each possible","Fragments":["'raindrop"]},{"Key":"possible 'raindrop","Fragments":["factor'"]},{"Key":"'raindrop factor'","Fragments":["only"]},{"Key":"factor' only","Fragments":["once."]},{"Key":"once. Great","Fragments":["idea!"]},{"Key":"Haha, cheers","Fragments":[":)"]},{"Key":"cheers :)","Fragments":["They"]},{"Key":":) They","Fragments":["survived"]},{"Key":"They survived","Fragments":["refactoring"]},{"Key":"survived refactoring","Fragments":[":p"]},{"Key":"tried `diff`,","Fragments":["or"]},{"Key":"`diff`, or","Fragments":["found"]},{"Key":"or found","Fragments":["anything"]},{"Key":"found anything","Fragments":["better?"]},{"Key":"anything better?","Fragments":["There"]},{"Key":"better? There","Fragments":["must"]},{"Key":"Woops, I'm","Fragments":["not"]},{"Key":"one got","Fragments":["there."]},{"Key":"got there.","Fragments":["Corrected."]},{"Key":"You've motivated","Fragments":["me"]},{"Key":"motivated me","Fragments":["to"]},{"Key":"to print","Fragments":["the"]},{"Key":"print the","Fragments":["Java"]},{"Key":"String documentation,","Fragments":["so"]},{"Key":"documentation, so","Fragments":["I"]},{"Key":"that `(.startsWith","Fragments":["digits"]},{"Key":"`(.startsWith digits","Fragments":["\"1\")`"]},{"Key":"digits \"1\")`","Fragments":["reads"]},{"Key":"\"1\")` reads","Fragments":["better"]},{"Key":"than `(=","Fragments":["\\1"]},{"Key":"`(= \\1","Fragments":["(first"]},{"Key":"\\1 (first","Fragments":["digits))"]},{"Key":"(first digits))","Fragments":["`."]},{"Key":"big part","Fragments":["of"]},{"Key":"is reading","Fragments":["the"]},{"Key":"the \"Clojure","Fragments":["Cheatsheet\"","way\"."]},{"Key":"\"Clojure Cheatsheet\"","Fragments":["again"]},{"Key":"Cheatsheet\" again","Fragments":["and"]},{"Key":"and again,","Fragments":["to"]},{"Key":"again, to","Fragments":["get"]},{"Key":"which tasty","Fragments":["functions"]},{"Key":"tasty functions","Fragments":["hide"]},{"Key":"functions hide","Fragments":["in"]},{"Key":"hide in","Fragments":["there."]},{"Key":"there. Add","Fragments":["Java"]},{"Key":"Add Java","Fragments":["libraries"]},{"Key":"Java libraries","Fragments":["to"]},{"Key":"libraries to","Fragments":["this,"]},{"Key":"to this,","Fragments":["and"]},{"Key":"compose existing","Fragments":["function."]},{"Key":"existing function.","Fragments":["It"]},{"Key":"feels powerful","Fragments":["because"]},{"Key":"powerful because","Fragments":["you"]},{"Key":"apply the","Fragments":["same"]},{"Key":"same transformations","Fragments":["to"]},{"Key":"transformations to","Fragments":["pretty"]},{"Key":"to pretty","Fragments":["much"]},{"Key":"much anything,","Fragments":["but"]},{"Key":"anything, but","Fragments":["it's"]},{"Key":"Line 22:","Fragments":["I"]},{"Key":"22: I","Fragments":["would"]},{"Key":"for `when`,","Fragments":["since"]},{"Key":"`when`, since","Fragments":["there"]},{"Key":"for list","Fragments":["comprehension;"]},{"Key":"list comprehension;","Fragments":["I"]},{"Key":"comprehension; I","Fragments":["always"]},{"Key":"always seem","Fragments":["to"]},{"Key":"to forget","Fragments":["about"]},{"Key":"forget about","Fragments":["it"]},{"Key":"Could I","Fragments":["avoid"]},{"Key":"I avoid","Fragments":["using"]},{"Key":"using `reset!`,","Fragments":["to"]},{"Key":"`reset!`, to","Fragments":["change"]},{"Key":"change `db`","Fragments":["in"]},{"Key":"`db` in","Fragments":["place?"]},{"Key":"Ah, it's","Fragments":["frustrating"]},{"Key":"it's frustrating","Fragments":["to"]},{"Key":"frustrating to","Fragments":["not"]},{"Key":"not understand","Fragments":["why"]},{"Key":"first `sort`","Fragments":["behaves"]},{"Key":"`sort` behaves","Fragments":["like"]},{"Key":"behaves like","Fragments":["`sort-by"]},{"Key":"like `sort-by","Fragments":["first`."]},{"Key":"To sort","Fragments":["a"]},{"Key":"by key","Fragments":["you"]},{"Key":"use `(into","Fragments":["(sorted-map)"]},{"Key":"big fan","Fragments":["of","of"]},{"Key":"`for` when","Fragments":["I"]},{"Key":"`map`, because","Fragments":["a"]},{"Key":"because a","Fragments":["map"]},{"Key":"be threaded,","Fragments":["thus"]},{"Key":"threaded, thus","Fragments":["increasing"]},{"Key":"thus increasing","Fragments":["readability"]},{"Key":"increasing readability","Fragments":["(in"]},{"Key":"readability (in","Fragments":["my"]},{"Key":"(in my","Fragments":["eyes),"]},{"Key":"my eyes),","Fragments":["because"]},{"Key":"eyes), because","Fragments":["you"]},{"Key":"can visualize","Fragments":["one"]},{"Key":"visualize one","Fragments":["transformation"]},{"Key":"one transformation","Fragments":["at"]},{"Key":"transformation at","Fragments":["a"]},{"Key":"a time,","Fragments":["on"]},{"Key":"time, on","Fragments":["each"]},{"Key":"But `for`","Fragments":["is"]},{"Key":"`for` is","Fragments":["great"]},{"Key":"great if","Fragments":["you"]},{"Key":"to say,","Fragments":["get","your"]},{"Key":"say, get","Fragments":["all"]},{"Key":"possible combinations","Fragments":["of"]},{"Key":"combinations of","Fragments":["two"]},{"Key":"(for [a","Fragments":["[1"]},{"Key":"[a [1","Fragments":["10"]},{"Key":"[1 10","Fragments":["100]"]},{"Key":" b","Fragments":["[3"]},{"Key":"b [3","Fragments":["7]]"]},{"Key":" (*","Fragments":["a"]},{"Key":"(* a","Fragments":["b))"]},{"Key":" =\u003e","Fragments":["(3"]},{"Key":"=\u003e (3","Fragments":["7"]},{"Key":"(3 7","Fragments":["30"]},{"Key":"7 30","Fragments":["70"]},{"Key":"30 70","Fragments":["300"]},{"Key":"70 300","Fragments":["700)"]},{"Key":"Oh, forgot","Fragments":["to"]},{"Key":"say, your","Fragments":["`add`"]},{"Key":"is convoluted.","Fragments":["You"]},{"Key":"convoluted. You","Fragments":["don't"]},{"Key":"explicitly read","Fragments":["the"]},{"Key":"all students","Fragments":["of"]},{"Key":"students of","Fragments":["a"]},{"Key":"a grade,","Fragments":["just"]},{"Key":"grade, just","Fragments":["to"]},{"Key":"add one.","Fragments":["If"]},{"Key":"one. If","Fragments":["you"]},{"Key":"add one,","Fragments":["you"]},{"Key":"one, you","Fragments":["can"]},{"Key":"you `merge`","Fragments":["a"]},{"Key":"`merge` a","Fragments":["new"]},{"Key":"new student","Fragments":["into"]},{"Key":"student into","Fragments":["the"]},{"Key":"in fact.","Fragments":["How"]},{"Key":"fact. How","Fragments":["does"]},{"Key":"the `db`","Fragments":["get"]},{"Key":"`db` get","Fragments":["replaced"]},{"Key":"get replaced","Fragments":["in"]},{"Key":"replaced in","Fragments":["place?","the"]},{"Key":"in place?","Fragments":["I"]},{"Key":"place? I","Fragments":["had"]},{"Key":"use `reset!`","Fragments":["for"]},{"Key":"`reset!` for","Fragments":["that,"]},{"Key":"do otherwise...","Fragments":["I'm"]},{"Key":"otherwise... I'm","Fragments":["going"]},{"Key":"understand your","Fragments":["solution."]},{"Key":" Lines","Fragments":["15ff:","8","4,"]},{"Key":"Lines 15ff:","Fragments":["You"]},{"Key":"15ff: You","Fragments":["might"]},{"Key":"have want","Fragments":["a"]},{"Key":"suggest using","Fragments":["char"]},{"Key":"using char","Fragments":["literals"]},{"Key":"char literals","Fragments":["to","look"]},{"Key":"literals to","Fragments":["skip"]},{"Key":"skip converting","Fragments":["`s`"]},{"Key":"converting `s`","Fragments":["to"]},{"Key":"`s` to","Fragments":["a"]},{"Key":"in `change-letter`.","Fragments":["char"]},{"Key":"`change-letter`. char","Fragments":["literals"]},{"Key":"literals look","Fragments":["like"]},{"Key":"like `\\A`","Fragments":["in"]},{"Key":"`\\A` in","Fragments":["clojure."]},{"Key":"Your transcribe","Fragments":["function"]},{"Key":"transcribe function","Fragments":["can","to"]},{"Key":"be entirely","Fragments":["replaced"]},{"Key":"entirely replaced","Fragments":["with"]},{"Key":"`map` function.","Fragments":["the"]},{"Key":"function. the","Fragments":["builtin"]},{"Key":"the builtin","Fragments":["`str`"]},{"Key":"builtin `str`","Fragments":["function"]},{"Key":"`str` function","Fragments":["will"]},{"Key":"will join","Fragments":["all"]},{"Key":"join all","Fragments":["arguments"]},{"Key":"all arguments","Fragments":["into"]},{"Key":"arguments into","Fragments":["a"]},{"Key":"in `change-letter`","Fragments":["with"]},{"Key":"`change-letter` with","Fragments":["case"]},{"Key":"with case","Fragments":["for"]},{"Key":"both brevity","Fragments":["and"]},{"Key":"and speed,","Fragments":["and"]},{"Key":"speed, and","Fragments":["make"]},{"Key":"the `change-letter`","Fragments":["function"]},{"Key":"`change-letter` function","Fragments":["private."]},{"Key":"name choice","Fragments":["is"]},{"Key":"choice is","Fragments":["pretty"]},{"Key":"pretty sh*tty","Fragments":["in"]},{"Key":"sh*tty in","Fragments":["this"]},{"Key":"exercise (looks","Fragments":["like"]},{"Key":"(looks like","Fragments":["copied"]},{"Key":"like copied","Fragments":["over"]},{"Key":"copied over","Fragments":["from"]},{"Key":"Line 15:","Fragments":["`(not"]},{"Key":"15: `(not","Fragments":["(zero?"]},{"Key":"`(not (zero?","Fragments":["...))`"]},{"Key":"(zero? ...))`","Fragments":["could"]},{"Key":"...))` could","Fragments":["be"]},{"Key":"be `(pos?","Fragments":["...)`,"]},{"Key":"`(pos? ...)`,","Fragments":["which"]},{"Key":"...)`, which","Fragments":["would"]},{"Key":"solution the","Fragments":["shortest"]},{"Key":"replace anything","Fragments":["in"]},{"Key":"anything in","Fragments":["place,"]},{"Key":"in place,","Fragments":["just"]},{"Key":"place, just","Fragments":["to"]},{"Key":"map. Why","Fragments":["did"]},{"Key":"did my","Fragments":["code"]},{"Key":"code not","Fragments":["pass"]},{"Key":"not pass","Fragments":["the"]},{"Key":"test without","Fragments":["`reset!`"]},{"Key":"without `reset!`","Fragments":["in"]},{"Key":"`reset!` in","Fragments":["the"]},{"Key":"first place","Fragments":["then?"]},{"Key":"Ok it","Fragments":["works"]},{"Key":"works now,","Fragments":["I"]},{"Key":"need `reset!`,","Fragments":["I"]},{"Key":"`reset!`, I","Fragments":["don't"]},{"Key":"did to","Fragments":["not"]},{"Key":"Lines 8","Fragments":["and"]},{"Key":"8 and","Fragments":["10:"]},{"Key":"and 10:","Fragments":["I"]},{"Key":"10: I","Fragments":["would"]},{"Key":"rather go","Fragments":["with"]},{"Key":"with `(int","Fragments":["\\a)`"]},{"Key":"`(int \\a)`","Fragments":["etc"]},{"Key":"\\a)` etc","Fragments":["to"]},{"Key":"etc to","Fragments":["make"]},{"Key":"clear where","Fragments":["the"]},{"Key":"magic numbers","Fragments":["come"]},{"Key":"numbers come","Fragments":["from."]},{"Key":"Fixed broken","Fragments":["isoceles"]},{"Key":"broken isoceles","Fragments":["check"]},{"Key":"Obviously using","Fragments":["mundane"]},{"Key":"using mundane","Fragments":["recursion..."]},{"Key":"Nice :-)","Fragments":["How"]},{"Key":":-) How","Fragments":["do"]},{"Key":" FYI,","Fragments":["the"]},{"Key":"FYI, the","Fragments":["`(as-\u003e`"]},{"Key":"the `(as-\u003e`","Fragments":["macro"]},{"Key":"`(as-\u003e` macro","Fragments":["lets"]},{"Key":"macro lets","Fragments":["you"]},{"Key":"value explicitly","Fragments":["at"]},{"Key":"explicitly at","Fragments":["any"]},{"Key":"any position","Fragments":["in"]},{"Key":"position in","Fragments":["the"]},{"Key":"argument list;","Fragments":["just"]},{"Key":"list; just","Fragments":["as"]},{"Key":"were using","Fragments":["it"]},{"Key":" Heh,","Fragments":["I"]},{"Key":"at collection","Fragments":["content","content"]},{"Key":"collection content","Fragments":["tests.","tests."]},{"Key":"content tests.","Fragments":["I"]},{"Key":"believe you'll","Fragments":["find"]},{"Key":"more happy-making","Fragments":["replacement"]},{"Key":"happy-making replacement","Fragments":["there."]},{"Key":"replacement there.","Fragments":[":)"]},{"Key":"there. :)","Fragments":["Hint:"]},{"Key":":) Hint:","Fragments":["you'll"]},{"Key":"Hint: you'll","Fragments":["need"]},{"Key":"you'll need","Fragments":["to"]},{"Key":"\u003e Heh,","Fragments":["I"]},{"Key":"just decided","Fragments":["to"]},{"Key":"instead in","Fragments":["order"]},{"Key":"cleaner error","Fragments":["handling"]},{"Key":"error handling","Fragments":["and"]},{"Key":"handling and","Fragments":["better"]},{"Key":"and better","Fragments":["performance."]},{"Key":"\u003e Take","Fragments":["a"]},{"Key":"this is;","Fragments":["care"]},{"Key":"is; care","Fragments":["to"]},{"Key":"to elaborate?","Fragments":["(I'm"]},{"Key":"elaborate? (I'm","Fragments":["new"]},{"Key":"(I'm new","Fragments":["here.)"]},{"Key":"\u003e Instead","Fragments":["of"]},{"Key":"had missed","Fragments":["that"]},{"Key":"that one.","Fragments":["(The"]},{"Key":"one. (The","Fragments":["lack"]},{"Key":"(The lack","Fragments":["of"]},{"Key":"name symmetry","Fragments":["underlines"]},{"Key":"symmetry underlines","Fragments":["what"]},{"Key":"underlines what","Fragments":["a"]},{"Key":"bad name","Fragments":["`some`"]},{"Key":"name `some`","Fragments":["is;"]},{"Key":"`some` is;","Fragments":["`any?`"]},{"Key":"is; `any?`","Fragments":["would"]},{"Key":"`any?` would","Fragments":["have"]},{"Key":"been much","Fragments":["better.)"]},{"Key":"have now","Fragments":["published"]},{"Key":"now published","Fragments":["the"]},{"Key":"published the","Fragments":["second"]},{"Key":"the `(or","Fragments":["(lookup"]},{"Key":"`(or (lookup","Fragments":["%)"]},{"Key":"(lookup %)","Fragments":["(assert"]},{"Key":"%) (assert","Fragments":["false"]},{"Key":"(assert false","Fragments":["\"Invalid"]},{"Key":"false \"Invalid","Fragments":["input\"))`…"]},{"Key":"does (unfortunately)","Fragments":["not"]},{"Key":"(unfortunately) not","Fragments":["support"]},{"Key":"not support","Fragments":["nested","unicode,"]},{"Key":"support nested","Fragments":["definitions;"]},{"Key":"nested definitions;","Fragments":["your"]},{"Key":"definitions; your","Fragments":["inner"]},{"Key":"your inner","Fragments":["`defn`"]},{"Key":"inner `defn`","Fragments":["will"]},{"Key":"`defn` will","Fragments":["redefine"]},{"Key":"will redefine","Fragments":["`rna-to-dna`"]},{"Key":"redefine `rna-to-dna`","Fragments":["in"]},{"Key":"`rna-to-dna` in","Fragments":["the"]},{"Key":"the `dna`","Fragments":["namespace"]},{"Key":"`dna` namespace","Fragments":["on"]},{"Key":"namespace on","Fragments":["every"]},{"Key":"every invocation.","Fragments":["You"]},{"Key":"invocation. You","Fragments":["probably"]},{"Key":"use `letfn`","Fragments":["instead."]},{"Key":"use `for`","Fragments":["you"]},{"Key":"`for` you","Fragments":["can't"]},{"Key":"really avoid","Fragments":["the"]},{"Key":"duplication there.","Fragments":["So"]},{"Key":"there. So","Fragments":["yes,"]},{"Key":"yes, simply","Fragments":["a"]},{"Key":"beautiful piece","Fragments":["of"]},{"Key":"improved my","Fragments":["code."]},{"Key":"like yours","Fragments":["now.","better."]},{"Key":"yours now.","Fragments":["Only"]},{"Key":"now. Only","Fragments":["the"]},{"Key":"Only the","Fragments":["readability"]},{"Key":"`for` statement","Fragments":["is"]},{"Key":"Wow, a","Fragments":["robot"]},{"Key":"robot is","Fragments":["just","first"]},{"Key":"name! Great!","Fragments":["I"]},{"Key":"Great! I","Fragments":["don't"]},{"Key":"know why,","Fragments":["I"]},{"Key":"why, I","Fragments":["felt"]},{"Key":"felt I","Fragments":["had"]},{"Key":"map. `(def","Fragments":["robot-name"]},{"Key":"`(def robot-name","Fragments":["deref)`"]},{"Key":"robot-name deref)`","Fragments":["is"]},{"Key":"deref)` is","Fragments":["a"]},{"Key":"of possible","Fragments":["names,"]},{"Key":"possible names,","Fragments":["nice"]},{"Key":"names, nice","Fragments":[":-)"]},{"Key":"nice :-)","Fragments":["There"]},{"Key":":-) There","Fragments":["is"]},{"Key":"unnecessary duplication","Fragments":["in"]},{"Key":"that part","Fragments":["of","another"]},{"Key":"code though.","Fragments":["(and"]},{"Key":"though. (and","Fragments":["in"]},{"Key":"in mine","Fragments":["I"]},{"Key":"mine I","Fragments":["cheated"]},{"Key":"cheated with","Fragments":["the"]},{"Key":"it enables","Fragments":["you"]},{"Key":"enables you","Fragments":["to"]},{"Key":"used random","Fragments":["numbers"]},{"Key":"random numbers","Fragments":["I"]},{"Key":"numbers I","Fragments":["have"]},{"Key":"extra check,","Fragments":["and"]},{"Key":"and because","Fragments":["I"]},{"Key":"all used","Fragments":["names,"]},{"Key":"used names,","Fragments":["I've"]},{"Key":"names, I've","Fragments":["got"]},{"Key":"got unnecessary","Fragments":["complication"]},{"Key":"unnecessary complication","Fragments":["there."]},{"Key":"complication there.","Fragments":["I"]},{"Key":"guess, it's","Fragments":["useful"]},{"Key":"the robots","Fragments":["names"]},{"Key":"robots names","Fragments":["are"]},{"Key":"are changed","Fragments":["often"]},{"Key":"changed often","Fragments":["enough"]},{"Key":"often enough","Fragments":["that"]},{"Key":"re-use the","Fragments":["same"]},{"Key":"same names","Fragments":["again;"]},{"Key":"names again;","Fragments":["but"]},{"Key":"again; but","Fragments":["as"]},{"Key":"as that's","Fragments":["not"]},{"Key":"necessary, my","Fragments":["code"]},{"Key":"code just","Fragments":["does"]},{"Key":"Once again","Fragments":["you"]},{"Key":"again you","Fragments":["beat"]},{"Key":"you beat","Fragments":["me"]},{"Key":"beat me","Fragments":["by"]},{"Key":"me by","Fragments":["your"]},{"Key":"by your","Fragments":["well"]},{"Key":"your well","Fragments":["thought"]},{"Key":"well thought","Fragments":["simplicity"]},{"Key":"thought simplicity","Fragments":["Rich"]},{"Key":"simplicity Rich","Fragments":[":-)"]},{"Key":"must learn","Fragments":["to"]},{"Key":"learn to","Fragments":["stop"]},{"Key":"stop over","Fragments":["engineering."]},{"Key":" @herman:","Fragments":["Thanks!"]},{"Key":" @austen","Fragments":["sure."]},{"Key":"@austen sure.","Fragments":["Take"]},{"Key":"sure. Take","Fragments":["a"]},{"Key":"look under","Fragments":["the"]},{"Key":"the Content","Fragments":["Tests"]},{"Key":"Content Tests","Fragments":["subgroup"]},{"Key":"Tests subgroup","Fragments":["in"]},{"Key":"subgroup in","Fragments":["the"]},{"Key":"the Collections","Fragments":["section"]},{"Key":"Collections section","Fragments":["here:"]},{"Key":"`every?` `contains?`","Fragments":["and"]},{"Key":"`contains?` and","Fragments":["whatnot."]},{"Key":"and whatnot.","Fragments":["further"]},{"Key":"whatnot. further","Fragments":["hint:"]},{"Key":"further hint:","Fragments":["there's"]},{"Key":"hint: there's","Fragments":["a"]},{"Key":"a pre-made","Fragments":["predicate"]},{"Key":"pre-made predicate","Fragments":["to"]},{"Key":"is nil","Fragments":["(`nil?`)."]},{"Key":" Here","Fragments":["are"]},{"Key":"2 more","Fragments":["really"]},{"Key":"good references","Fragments":["for"]},{"Key":"Personally I'm","Fragments":["not"]},{"Key":"of catching","Fragments":["an"]},{"Key":"catching an","Fragments":["exception"]},{"Key":"exception just","Fragments":["so"]},{"Key":"can throw","Fragments":["a"]},{"Key":"throw a","Fragments":["different"]},{"Key":"different one.","Fragments":["Which"]},{"Key":"one. Which","Fragments":["is"]},{"Key":"liked your","Fragments":["solution,"]},{"Key":"your solution,","Fragments":["because"]},{"Key":"solution, because","Fragments":["I"]},{"Key":"originally solved","Fragments":["it"]},{"Key":"solved it","Fragments":["using"]},{"Key":"it using","Fragments":["a","[LightTable](http://www.lighttable.com/)"]},{"Key":"a `case`,","Fragments":["and"]},{"Key":"`case`, and","Fragments":["actually"]},{"Key":"and actually","Fragments":["switched"]},{"Key":"actually switched","Fragments":["over"]},{"Key":"switched over","Fragments":["to"]},{"Key":"regexes if","Fragments":["possible."]},{"Key":"if possible.","Fragments":["I"]},{"Key":"possible. I","Fragments":["did"]},{"Key":"using `Character/isLowerCase`","Fragments":["and"]},{"Key":"`Character/isLowerCase` and","Fragments":["`Character/isUpperCase`."]},{"Key":"and `Character/isUpperCase`.","Fragments":["Saw"]},{"Key":"`Character/isUpperCase`. Saw","Fragments":["someone"]},{"Key":"Saw someone","Fragments":["else"]},{"Key":"else comparing","Fragments":["uppercased"]},{"Key":"comparing uppercased","Fragments":["and"]},{"Key":"uppercased and","Fragments":["lowercased"]},{"Key":"and lowercased","Fragments":["strings"]},{"Key":"lowercased strings","Fragments":["to"]},{"Key":"input. Both","Fragments":["are"]},{"Key":"are good","Fragments":["options."]},{"Key":"one error","Fragments":["on"]},{"Key":"error on","Fragments":["the","bad"]},{"Key":"last test,","Fragments":["I"]},{"Key":"test, I","Fragments":["am"]},{"Key":"am confused","Fragments":["about"]},{"Key":"advice of","Fragments":["@jamey"]},{"Key":"of @jamey","Fragments":["and"]},{"Key":"@jamey and","Fragments":["used"]},{"Key":"macro at","Fragments":["the"]},{"Key":"also been","Fragments":["looking"]},{"Key":"been looking","Fragments":["at"]},{"Key":"at (a?","Fragments":["the?)"]},{"Key":"(a? the?)","Fragments":["Clojure"]},{"Key":"the?) Clojure","Fragments":["style"]},{"Key":"guide, which","Fragments":["advises"]},{"Key":"which advises","Fragments":["not"]},{"Key":"advises not","Fragments":["to"]},{"Key":"make functions","Fragments":["more"]},{"Key":"functions more","Fragments":["than","reusable"]},{"Key":"than 5","Fragments":["lines."]},{"Key":"5 lines.","Fragments":["So,"]},{"Key":"lines. So,","Fragments":["I"]},{"Key":" more","Fragments":["good"]},{"Key":"more good","Fragments":["advice"]},{"Key":"good advice","Fragments":["from"]},{"Key":"from @kathryne","Fragments":["--"]},{"Key":"@kathryne --","Fragments":["use"]},{"Key":"-- use","Fragments":["`merge`"]},{"Key":"use `merge`","Fragments":["rather"]},{"Key":"`merge` rather","Fragments":["than"]},{"Key":"than `into","Fragments":["{}`"]},{"Key":"`into {}`","Fragments":["since","?"]},{"Key":"{}` since","Fragments":["the"]},{"Key":"I've thrown","Fragments":["in"]},{"Key":"thrown in","Fragments":["a"]},{"Key":"to `-\u003e`","Fragments":["and"]},{"Key":"`-\u003e` and","Fragments":["`-\u003e\u003e`"]},{"Key":"and `-\u003e\u003e`","Fragments":["now."]},{"Key":"`-\u003e\u003e` now.","Fragments":["And"]},{"Key":"now. And","Fragments":["I'm"]},{"Key":"And I'm","Fragments":["thinking"]},{"Key":"making macros","Fragments":["of"]},{"Key":"macros of","Fragments":["my"]},{"Key":"own for","Fragments":["the"]},{"Key":"If it's","Fragments":["already","'...","on"]},{"Key":"map, I'm","Fragments":["guessing"]},{"Key":"I'm guessing","Fragments":["you"]},{"Key":"can `merge`","Fragments":["instead"]},{"Key":"`merge` instead","Fragments":["of"]},{"Key":"of `concat`","Fragments":["+"]},{"Key":"`concat` +","Fragments":["`into"]},{"Key":"+ `into","Fragments":["{}`"]},{"Key":" Ever","Fragments":["since"]},{"Key":"Ever since","Fragments":["the"]},{"Key":"nitpick I've","Fragments":["been"]},{"Key":"a useful,","Fragments":["more-or-less"]},{"Key":"useful, more-or-less","Fragments":["language-agnostic,"]},{"Key":"more-or-less language-agnostic,","Fragments":["idiom"]},{"Key":"language-agnostic, idiom","Fragments":["for"]},{"Key":"idiom for","Fragments":["naming"]},{"Key":"naming functions","Fragments":["that"]},{"Key":"return truthy","Fragments":["or"]},{"Key":"truthy or","Fragments":["error,"]},{"Key":"or error,","Fragments":["rather"]},{"Key":"error, rather","Fragments":["than"]},{"Key":"than falsey","Fragments":["or"]},{"Key":"falsey or","Fragments":["nil."]},{"Key":"or nil.","Fragments":["So"]},{"Key":"nil. So","Fragments":["far,"]},{"Key":"far, appending","Fragments":["`-r`"]},{"Key":"appending `-r`","Fragments":["or"]},{"Key":"`-r` or","Fragments":["`_r`"]},{"Key":"or `_r`","Fragments":["to"]},{"Key":"`_r` to","Fragments":["the"]},{"Key":"the function/method","Fragments":["name"]},{"Key":"function/method name","Fragments":["is"]},{"Key":"best I've","Fragments":["come"]},{"Key":"I've come","Fragments":["up"]},{"Key":"Which bit","Fragments":["in"]},{"Key":"particular am","Fragments":["I"]},{"Key":"not complying","Fragments":["with?"]},{"Key":"complying with?","Fragments":["If"]},{"Key":"with? If","Fragments":["it's"]},{"Key":"it's '...","Fragments":["off"]},{"Key":"'... off","Fragments":["the"]},{"Key":"the factory","Fragments":["floor,","floor,"]},{"Key":"factory floor,","Fragments":["they","they"]},{"Key":"floor, they","Fragments":["have","have"]},{"Key":"no name',","Fragments":["I'm"]},{"Key":"name', I'm","Fragments":["not"]},{"Key":"what part","Fragments":["of"]},{"Key":"API implied","Fragments":["by"]},{"Key":"tests represents","Fragments":["'booting"]},{"Key":"represents 'booting","Fragments":["up'."]},{"Key":"suggestions, @amie","Fragments":["!"]},{"Key":"@amie !","Fragments":["I"]},{"Key":"am very","Fragments":["new"]},{"Key":"so things","Fragments":["like"]},{"Key":"this help","Fragments":["me"]},{"Key":"learn some","Fragments":["of"]},{"Key":"the idioms","Fragments":["and"]},{"Key":"idioms and","Fragments":["techniques."]},{"Key":"and techniques.","Fragments":["This"]},{"Key":"techniques. This","Fragments":["version"]},{"Key":"more succinct.","Fragments":["I"]},{"Key":"succinct. I","Fragments":["appreciate"]},{"Key":"to nitpick.","Fragments":[":)"]},{"Key":" rewrote","Fragments":["such"]},{"Key":"rewrote such","Fragments":["that"]},{"Key":"of `nucleotide-counts`,","Fragments":["as"]},{"Key":"`nucleotide-counts`, as","Fragments":["suggested"]},{"Key":"finding `zipmap`","Fragments":["to"]},{"Key":"`zipmap` to","Fragments":["be"]},{"Key":"handy all","Fragments":["over"]},{"Key":"the place.","Fragments":["My"]},{"Key":"place. My","Fragments":["new"]},{"Key":"My new","Fragments":["favourite"]},{"Key":"new favourite","Fragments":["function!"]},{"Key":" now","Fragments":["using"]},{"Key":"using `loop`","Fragments":["instead"]},{"Key":"`loop` instead","Fragments":["of"]},{"Key":"of multi-arity","Fragments":["function."]},{"Key":" also","Fragments":["removed"]},{"Key":"removed pointless","Fragments":["use"]},{"Key":"pointless use","Fragments":["of"]},{"Key":"`juxt` (it's","Fragments":["a"]},{"Key":"a cool","Fragments":["function,"]},{"Key":"cool function,","Fragments":["but"]},{"Key":"a time","Fragments":["and"]},{"Key":" zipmap,","Fragments":["cheers"]},{"Key":"zipmap, cheers","Fragments":[":)"]},{"Key":"into vectors","Fragments":["and"]},{"Key":"then back","Fragments":["it"]},{"Key":"back it","Fragments":["into"]},{"Key":"map. I","Fragments":["used","suppose"]},{"Key":"used `zipmap`","Fragments":["thanks"]},{"Key":"`zipmap` thanks","Fragments":["to"]},{"Key":"using briefer","Fragments":["`prime-factors`"]},{"Key":"briefer `prime-factors`","Fragments":["impl"]},{"Key":"`prime-factors` impl","Fragments":["from"]},{"Key":"impl from","Fragments":["that"]},{"Key":"Now rewritten","Fragments":["(see"]},{"Key":"rewritten (see","Fragments":["next"]},{"Key":"(see next","Fragments":["iteration)."]},{"Key":"the constructive","Fragments":["feedback,"]},{"Key":"constructive feedback,","Fragments":["Pierre!"]},{"Key":" @stefan","Fragments":["yes,"]},{"Key":"@stefan yes,","Fragments":["tests"]},{"Key":"yes, tests","Fragments":["don't"]},{"Key":"don't enforce","Fragments":["it,"]},{"Key":"enforce it,","Fragments":["so"]},{"Key":"missed this","Fragments":["bit"]},{"Key":"this bit","Fragments":["myself"]},{"Key":"bit myself","Fragments":["at"]},{"Key":"myself at","Fragments":["first"]},{"Key":" @toni","Fragments":["reminded"]},{"Key":"@toni reminded","Fragments":["me"]},{"Key":"reminded me","Fragments":["that"]},{"Key":"Wow, looking","Fragments":["forward"]},{"Key":"looking forward","Fragments":["to"]},{"Key":"that (^c^)","Fragments":["I"]},{"Key":"(^c^) I","Fragments":["haven't"]},{"Key":"haven't looked","Fragments":["into"]},{"Key":"into writing","Fragments":["macros"]},{"Key":"writing macros","Fragments":["yet."]},{"Key":"find uppercase","Fragments":["or"]},{"Key":"uppercase or","Fragments":["lowercase"]},{"Key":"or lowercase","Fragments":["letters"]},{"Key":"comply with","Fragments":["this:","the"]},{"Key":"\u003e When","Fragments":["robots"]},{"Key":"When robots","Fragments":["come"]},{"Key":"robots come","Fragments":["off"]},{"Key":"come off","Fragments":["the"]},{"Key":"no name.","Fragments":["The"]},{"Key":"name. The","Fragments":["first"]},{"Key":"you boot","Fragments":["them"]},{"Key":"boot them","Fragments":["up,"]},{"Key":"them up,","Fragments":["a"]},{"Key":"up, a","Fragments":["random"]},{"Key":"is generated,","Fragments":["such"]},{"Key":"generated, such","Fragments":["as"]},{"Key":"as RX837","Fragments":["or"]},{"Key":"RX837 or","Fragments":["BC811."]},{"Key":"or BC811.","Fragments":["Every"]},{"Key":"BC811. Every","Fragments":["once"]},{"Key":"Every once","Fragments":["in"]},{"Key":"while we","Fragments":["need"]},{"Key":"to reset","Fragments":["a"]},{"Key":"reset a","Fragments":["robot"]},{"Key":"robot to","Fragments":["its"]},{"Key":"its factory","Fragments":["settings,"]},{"Key":"factory settings,","Fragments":["which"]},{"Key":"settings, which","Fragments":["means"]},{"Key":"their name","Fragments":["gets"]},{"Key":"name gets","Fragments":["wiped."]},{"Key":"gets wiped.","Fragments":["The"]},{"Key":"wiped. The","Fragments":["next"]},{"Key":"The next","Fragments":["time"]},{"Key":"next time","Fragments":["you"]},{"Key":"you ask,","Fragments":["it"]},{"Key":"ask, it","Fragments":["gets"]},{"Key":"you modify","Fragments":["your"]},{"Key":"modify your","Fragments":["program"]},{"Key":"program to","Fragments":["work"]},{"Key":"work that","Fragments":["way?"]},{"Key":"how idiomatic","Fragments":["it"]},{"Key":"idiomatic it","Fragments":["is"]},{"Key":"for Clojure,","Fragments":["but"]},{"Key":"be surpised","Fragments":["if"]},{"Key":"surpised if","Fragments":["it"]},{"Key":"wasn't encouraged","Fragments":["that"]},{"Key":"encouraged that","Fragments":["the"]},{"Key":"first line","Fragments":["of"]},{"Key":"the docstring","Fragments":["describe"]},{"Key":"docstring describe","Fragments":["the"]},{"Key":"arguments and","Fragments":["expected"]},{"Key":"and expected","Fragments":["returns"]},{"Key":"expected returns","Fragments":["as"]},{"Key":"returns as","Fragments":["briefly"]},{"Key":"as briefly","Fragments":["as"]},{"Key":"briefly as","Fragments":["possible."]},{"Key":"really it.","Fragments":["I'm"]},{"Key":"it. I'm","Fragments":["looking"]},{"Key":"I'm looking","Fragments":["lots","for"]},{"Key":"looking lots","Fragments":["of"]},{"Key":"done here","Fragments":["that"]},{"Key":"haven't used","Fragments":["in"]},{"Key":"OK, I've","Fragments":["had"]},{"Key":"your (very","Fragments":["neat)"]},{"Key":"(very neat)","Fragments":["solution"]},{"Key":"neat) solution","Fragments":["and"]},{"Key":"you mean.","Fragments":["You"]},{"Key":"mean. You","Fragments":["are"]},{"Key":"are allocating","Fragments":["a"]},{"Key":"allocating a","Fragments":["name"]},{"Key":"`robot-name` and","Fragments":["I'm"]},{"Key":"I'm allocating","Fragments":["at"]},{"Key":"allocating at","Fragments":["construction"]},{"Key":"at construction","Fragments":["time."]},{"Key":"construction time.","Fragments":["Although"]},{"Key":"time. Although","Fragments":["the"]},{"Key":"don't care","Fragments":["either"]},{"Key":"care either","Fragments":["way,"]},{"Key":"way, I","Fragments":["see"]},{"Key":"spec. So","Fragments":["I'll"]},{"Key":"So I'll","Fragments":["change"]},{"Key":"change mine.","Fragments":["Thanks!"]},{"Key":"Now adhering","Fragments":["more"]},{"Key":"adhering more","Fragments":["closely"]},{"Key":"closely to","Fragments":["the"]},{"Key":"spec (shouldn't","Fragments":["assign"]},{"Key":"(shouldn't assign","Fragments":["name"]},{"Key":"assign name","Fragments":["when"]},{"Key":"name when","Fragments":["robot"]},{"Key":"when robot","Fragments":["is"]},{"Key":"is first","Fragments":["constructed)."]},{"Key":"to @adelle","Fragments":["for"]},{"Key":"@adelle for","Fragments":["pointing"]},{"Key":"pointing this","Fragments":["out."]},{"Key":"See comments","Fragments":["of"]},{"Key":"comments of","Fragments":["previous"]},{"Key":"of previous","Fragments":["iteration,"]},{"Key":"iteration, too.","Fragments":["I"]},{"Key":"not comfortable","Fragments":["with"]},{"Key":"comfortable with","Fragments":["handing"]},{"Key":"with handing","Fragments":["out"]},{"Key":"handing out","Fragments":["`ref`s"]},{"Key":"out `ref`s","Fragments":["directly,"]},{"Key":"`ref`s directly,","Fragments":["so"]},{"Key":"directly, so","Fragments":["only"]},{"Key":"so only","Fragments":["integer"]},{"Key":"only integer","Fragments":["ids"]},{"Key":"integer ids","Fragments":["are"]},{"Key":"ids are","Fragments":["seen","not"]},{"Key":"are seen","Fragments":["by"]},{"Key":"a client","Fragments":["now."]},{"Key":" Hm,","Fragments":["being"]},{"Key":"Hm, being","Fragments":["an"]},{"Key":"being an","Fragments":["ESLer,","\"imperative"]},{"Key":"an ESLer,","Fragments":["what"]},{"Key":"ESLer, what","Fragments":["would"]},{"Key":"would `-r`","Fragments":["signify?"]},{"Key":" Surely","Fragments":["the"]},{"Key":"Surely the","Fragments":["internal"]},{"Key":"the internal","Fragments":["collection"]},{"Key":"internal collection","Fragments":["of"]},{"Key":"all accounts,","Fragments":["as"]},{"Key":"accounts, as","Fragments":["well"]},{"Key":"unique ids","Fragments":["are"]},{"Key":"Also, individual","Fragments":["accounts"]},{"Key":"individual accounts","Fragments":["are"]},{"Key":"accounts are","Fragments":["`ref`s,"]},{"Key":"are `ref`s,","Fragments":["since"]},{"Key":"`ref`s, since","Fragments":["a"]},{"Key":"more sophisticated","Fragments":["bank"]},{"Key":"sophisticated bank","Fragments":["would"]},{"Key":"bank would","Fragments":["surely"]},{"Key":"would surely","Fragments":["want"]},{"Key":"surely want","Fragments":["to"]},{"Key":"to transfer","Fragments":["amounts","your"]},{"Key":"transfer amounts","Fragments":["from"]},{"Key":"amounts from","Fragments":["one"]},{"Key":"account to","Fragments":["another"]},{"Key":"another within","Fragments":["a"]},{"Key":" Automated","Fragments":["generation"]},{"Key":"Automated generation","Fragments":["of"]},{"Key":"generation of","Fragments":["the","a"]},{"Key":"the `wednesteenth-*`","Fragments":["etc"]},{"Key":"`wednesteenth-*` etc","Fragments":["functions."]},{"Key":"Do we","Fragments":["still"]},{"Key":"we still","Fragments":["call"]},{"Key":"still call","Fragments":["this"]},{"Key":"a macro,","Fragments":["even"]},{"Key":"macro, even","Fragments":["though"]},{"Key":"though we're","Fragments":["not"]},{"Key":"not manipulating","Fragments":["a"]},{"Key":"manipulating a","Fragments":["syntax"]},{"Key":"a syntax","Fragments":["tree?","tree."]},{"Key":"syntax tree?","Fragments":["I"]},{"Key":"tree? I","Fragments":["don't"]},{"Key":" `intern`","Fragments":["is"]},{"Key":"`intern` is","Fragments":["your"]},{"Key":"chose it","Fragments":["because"]},{"Key":"because pronouncing","Fragments":["\"r\""]},{"Key":"pronouncing \"r\"","Fragments":["is"]},{"Key":"\"r\" is","Fragments":["a"]},{"Key":"slight vowel","Fragments":["shift"]},{"Key":"vowel shift","Fragments":["away"]},{"Key":"shift away","Fragments":["from"]},{"Key":"from pronouncing","Fragments":["\"err\"."]},{"Key":"pronouncing \"err\".","Fragments":["So,"]},{"Key":"\"err\". So,","Fragments":["kind"]},{"Key":"So, kind","Fragments":["of"]},{"Key":"a pun.","Fragments":["But"]},{"Key":"pun. But","Fragments":["also"]},{"Key":"But also","Fragments":["an"]},{"Key":"an extreme","Fragments":["contraction"]},{"Key":"extreme contraction","Fragments":["of"]},{"Key":"contraction of","Fragments":["`-or-error`"]},{"Key":"of `-or-error`","Fragments":["if"]},{"Key":"`-or-error` if","Fragments":["you"]},{"Key":"were spelling","Fragments":["it"]},{"Key":"make up","Fragments":["stuff"]},{"Key":"up stuff","Fragments":["like"]},{"Key":" (One,","Fragments":["less"]},{"Key":"(One, less","Fragments":["extreme"]},{"Key":"less extreme","Fragments":["but"]},{"Key":"extreme but","Fragments":["still"]},{"Key":"still punny","Fragments":["contraction,"]},{"Key":"punny contraction,","Fragments":["is"]},{"Key":"contraction, is","Fragments":["`-rrr`"]},{"Key":"is `-rrr`","Fragments":["but"]},{"Key":"`-rrr` but","Fragments":["I"]},{"Key":"reasonable one","Fragments":["character"]},{"Key":"character thing","Fragments":["like"]},{"Key":"thing like","Fragments":["the"]},{"Key":"way `?`/`p`","Fragments":["and"]},{"Key":"`?`/`p` and","Fragments":["`!`"]},{"Key":"and `!`","Fragments":["are)"]},{"Key":"After feedback","Fragments":["from"]},{"Key":"from @bridget","Fragments":["I"]},{"Key":"@bridget I","Fragments":["replaced"]},{"Key":"replaced `lc-char-freqs`","Fragments":["by"]},{"Key":"`lc-char-freqs` by","Fragments":["`alphagram`."]},{"Key":"by `alphagram`.","Fragments":["I"]},{"Key":"`alphagram`. I","Fragments":["think"]},{"Key":"better, starting","Fragments":["by"]},{"Key":"starting by","Fragments":["the"]},{"Key":"the clearer","Fragments":["function"]},{"Key":"clearer function","Fragments":["name."]},{"Key":"function name.","Fragments":["thanks!"]},{"Key":"Simplified a","Fragments":["bit"]},{"Key":"bit (strings","Fragments":["are"]},{"Key":"(strings are","Fragments":["already"]},{"Key":"already char","Fragments":["sequences"]},{"Key":"char sequences","Fragments":["(doh!))"]},{"Key":"Not really","Fragments":["a"]},{"Key":"suite forces","Fragments":["a"]},{"Key":"forces a","Fragments":["special"]},{"Key":"special style","Fragments":["of"]},{"Key":"of solution","Fragments":["(if"]},{"Key":"solution (if","Fragments":["you"]},{"Key":"(if you","Fragments":["are"]},{"Key":"are to","Fragments":["avoid"]},{"Key":"avoid code","Fragments":["duplication)."]},{"Key":"Using `nil`","Fragments":["instead"]},{"Key":"of `\\space`","Fragments":["for"]},{"Key":"`\\space` for","Fragments":["padding,"]},{"Key":"for padding,","Fragments":["since"]},{"Key":"padding, since","Fragments":["no"]},{"Key":"since no","Fragments":["special"]},{"Key":"special trimming","Fragments":["is"]},{"Key":"trimming is","Fragments":["needed"]},{"Key":"needed when","Fragments":["converting"]},{"Key":"when converting","Fragments":["the","from"]},{"Key":"Line 6:","Fragments":["`#\"\\W\"`"]},{"Key":"haven't read","Fragments":["your"]},{"Key":"read your","Fragments":["code"]},{"Key":"code yet","Fragments":["(as"]},{"Key":"yet (as","Fragments":["I"]},{"Key":"(as I","Fragments":["haven't"]},{"Key":"haven't written","Fragments":["mine"]},{"Key":"written mine","Fragments":["-"]},{"Key":"I'm focused","Fragments":["on"]},{"Key":"something else),","Fragments":["but"]},{"Key":"else), but","Fragments":["what"]},{"Key":"describe is","Fragments":["a"]},{"Key":"order function:","Fragments":["a"]},{"Key":"function: a","Fragments":["function"]},{"Key":"Macros are","Fragments":["created"]},{"Key":"created with","Fragments":["`defmacro`."]},{"Key":"with `defmacro`.","Fragments":["Macro"]},{"Key":"`defmacro`. Macro","Fragments":["expansion"]},{"Key":"Macro expansion","Fragments":["happens"]},{"Key":"expansion happens","Fragments":["after"]},{"Key":"happens after","Fragments":["the"]},{"Key":"the Read","Fragments":["cycle"]},{"Key":"Read cycle","Fragments":["and"]},{"Key":"cycle and","Fragments":["before"]},{"Key":"and before","Fragments":["the"]},{"Key":"the Eval.","Fragments":["It's"]},{"Key":"Eval. It's","Fragments":["very"]},{"Key":"It's very","Fragments":["well"]},{"Key":"explained on","Fragments":["the"]},{"Key":"the website","Fragments":["BraveClojure."]},{"Key":"website BraveClojure.","Fragments":["Basically,"]},{"Key":"BraveClojure. Basically,","Fragments":["it"]},{"Key":"Basically, it","Fragments":["gets"]},{"Key":"gets replaced","Fragments":["in"]},{"Key":"code by","Fragments":["the"]},{"Key":"expression returned","Fragments":["by"]},{"Key":"the macro.","Fragments":["It"]},{"Key":"It enables","Fragments":["to"]},{"Key":"enables to","Fragments":["create"]},{"Key":"create new","Fragments":["syntax."]},{"Key":"new syntax.","Fragments":["For"]},{"Key":"syntax. For","Fragments":["instance"]},{"Key":"instance you","Fragments":["could"]},{"Key":"turn postfix","Fragments":["notation"]},{"Key":"postfix notation","Fragments":["`(1"]},{"Key":"notation `(1","Fragments":["+"]},{"Key":"`(1 +","Fragments":["1)`"]},{"Key":"+ 1)`","Fragments":["into"]},{"Key":"1)` into","Fragments":["prefix"]},{"Key":"into prefix","Fragments":["notation"]},{"Key":"prefix notation","Fragments":["`(+","(+"]},{"Key":"notation `(+","Fragments":["1"]},{"Key":"`(+ 1","Fragments":["1)`."]},{"Key":"1 1)`.","Fragments":["Which"]},{"Key":"1)`. Which","Fragments":["you"]},{"Key":"Which you","Fragments":["could"]},{"Key":"could never","Fragments":["do"]},{"Key":"never do","Fragments":["with"]},{"Key":" `select`","Fragments":["is"]},{"Key":"`select` is","Fragments":["indeed"]},{"Key":"is indeed","Fragments":["a"]},{"Key":"indeed a","Fragments":["higher-order"]},{"Key":"a higher-order","Fragments":["function,"]},{"Key":"higher-order function,","Fragments":["and"]},{"Key":"what `defmacro`","Fragments":["does,"]},{"Key":"`defmacro` does,","Fragments":["but"]},{"Key":"does, but","Fragments":["I"]},{"Key":"code generation","Fragments":["was"]},{"Key":"also called","Fragments":["a"]},{"Key":"called a","Fragments":["'macro',","docstring,"]},{"Key":"a 'macro',","Fragments":["even"]},{"Key":"'macro', even","Fragments":["though"]},{"Key":"use `defmacro`","Fragments":["or"]},{"Key":"`defmacro` or","Fragments":["rewrite"]},{"Key":"or rewrite","Fragments":["a"]},{"Key":"rewrite a","Fragments":["syntax"]},{"Key":"just called","Fragments":["higher"]},{"Key":"called higher","Fragments":["order"]},{"Key":"order function,","Fragments":["but"]},{"Key":"it code","Fragments":["generation."]},{"Key":"a multimethod,","Fragments":["but"]},{"Key":"multimethod, but","Fragments":["did"]},{"Key":"but did","Fragments":["not"]},{"Key":"not see","Fragments":["any","this?"]},{"Key":"any big","Fragments":["gain."]},{"Key":"big gain.","Fragments":["I"]},{"Key":"gain. I","Fragments":["am"]},{"Key":"am quite","Fragments":["unhappy"]},{"Key":"quite unhappy","Fragments":["with"]},{"Key":"unhappy with","Fragments":["the"]},{"Key":"the not-forceful-talking","Fragments":["special"]},{"Key":"not-forceful-talking special","Fragments":["case,"]},{"Key":"special case,","Fragments":["feels"]},{"Key":"case, feels","Fragments":["like"]},{"Key":"be dealt","Fragments":["with"]},{"Key":"dealt with","Fragments":["much"]},{"Key":"with much","Fragments":["more"]},{"Key":"a million","Fragments":["moog!"]},{"Key":"next two","Fragments":["iterations"]},{"Key":"two iterations","Fragments":["and"]},{"Key":"and managed","Fragments":["to"]},{"Key":"that shouting","Fragments":["can"]},{"Key":"shouting can","Fragments":["be"]},{"Key":"sentence with","Fragments":["no"]},{"Key":"and at","Fragments":["least"]},{"Key":"uppercase letter.","Fragments":["I"]},{"Key":"letter. I","Fragments":["have"]},{"Key":"reflect this.","Fragments":["Thanks"]},{"Key":"this. Thanks","Fragments":["for"]},{"Key":"Hi there.","Fragments":["I"]},{"Key":"think 'Forceful","Fragments":["talking!'"]},{"Key":"'Forceful talking!'","Fragments":["is"]},{"Key":"talking!' is","Fragments":["actually"]},{"Key":"a thing,","Fragments":["if"]},{"Key":"look again","Fragments":["at"]},{"Key":"(I was","Fragments":["caught"]},{"Key":"was caught","Fragments":["out"]},{"Key":"caught out","Fragments":["by"]},{"Key":" Unless","Fragments":["you"]},{"Key":"functions yourself,","Fragments":["you"]},{"Key":"yourself, you","Fragments":["might"]},{"Key":"line 21:","Fragments":["`partition`,"]},{"Key":"21: `partition`,","Fragments":["`partition-all`"]},{"Key":"line 32:","Fragments":["`partition`,"]},{"Key":"32: `partition`,","Fragments":["`interpose`"]},{"Key":"line 40:","Fragments":["`clojure.string/trim`"]},{"Key":"line 97:","Fragments":["`Math/ceil`,"]},{"Key":"97: `Math/ceil`,","Fragments":["`Math/sqrt`"]},{"Key":"line 109:","Fragments":["`clojure.string/replace"]},{"Key":"109: `clojure.string/replace","Fragments":["#\"\\W\""]},{"Key":"`clojure.string/replace #\"\\W\"","Fragments":["\"\"`"]},{"Key":"whether your","Fragments":["usage"]},{"Key":"your usage","Fragments":["of"]},{"Key":"of higher-order-functions","Fragments":["(lines"]},{"Key":"higher-order-functions (lines","Fragments":["48,"]},{"Key":"(lines 48,","Fragments":["93)"]},{"Key":"48, 93)","Fragments":["makes"]},{"Key":"93) makes","Fragments":["things"]},{"Key":"things more","Fragments":["understandable.","explicit"]},{"Key":"very similar,","Fragments":["but"]},{"Key":"similar, but","Fragments":["I","IMO"]},{"Key":"wrote a","Fragments":["function"]},{"Key":"called only-numbers?","Fragments":["and"]},{"Key":"only-numbers? and","Fragments":["then"]},{"Key":"then negated","Fragments":["it"]},{"Key":"negated it","Fragments":["in"]},{"Key":"of shout?.","Fragments":["I"]},{"Key":"shout?. I","Fragments":["prefer"]},{"Key":"using has-letter?.","Fragments":["I"]},{"Key":"has-letter?. I","Fragments":["also"]},{"Key":"the alignment","Fragments":["of"]},{"Key":"alignment of","Fragments":["the"]},{"Key":"of last","Fragments":["to"]},{"Key":"last to","Fragments":["check"]},{"Key":"mark, I","Fragments":["used"]},{"Key":"regexp which","Fragments":["is"]},{"Key":"probably less","Fragments":["clear."]},{"Key":"See comment","Fragments":["on"]},{"Key":"on word-count","Fragments":["about"]},{"Key":"word-count about","Fragments":["use"]},{"Key":"use vs.","Fragments":["require."]},{"Key":" Sets","Fragments":["and","can"]},{"Key":"Sets and","Fragments":["Maps"]},{"Key":"and Maps","Fragments":["in"]},{"Key":"Maps in","Fragments":["Clojure"]},{"Key":"Clojure have","Fragments":["an"]},{"Key":"interesting property","Fragments":["where"]},{"Key":"property where","Fragments":["they"]},{"Key":"e.g. `({:a","Fragments":["1"]},{"Key":":a) =\u003e","Fragments":["1`"]},{"Key":"=\u003e 1`","Fragments":["or"]},{"Key":"1` or","Fragments":["`({:a"]},{"Key":"or `({:a","Fragments":["1"]},{"Key":"2} :c)","Fragments":["=\u003e"]},{"Key":":c) =\u003e","Fragments":["nil`"]},{"Key":"For more:","Fragments":["http://java.dzone.com/articles/clojure-using-sets-and-maps"]},{"Key":"called `keys`","Fragments":["for"]},{"Key":"`keys` for","Fragments":["maps"]},{"Key":"for maps","Fragments":["that"]},{"Key":"find useful.","Fragments":[":)"]},{"Key":"are 'seqable'","Fragments":["already"]},{"Key":"'seqable' already","Fragments":["(a"]},{"Key":"already (a","Fragments":["list"]},{"Key":"(a list","Fragments":["of"]},{"Key":"of chars),","Fragments":["so"]},{"Key":"chars), so","Fragments":["it's"]},{"Key":"generally not","Fragments":["needed","be"]},{"Key":"sequence explicitly","Fragments":["to"]},{"Key":"explicitly to","Fragments":["use"]},{"Key":"use list","Fragments":["type"]},{"Key":"list type","Fragments":["functions"]},{"Key":"type functions","Fragments":["on"]},{"Key":" Welcome","Fragments":["to"]},{"Key":"Welcome to","Fragments":["Clojure!"]},{"Key":"to Clojure!","Fragments":[":)"]},{"Key":"is idiomatically","Fragments":["reserved"]},{"Key":"idiomatically reserved","Fragments":["for"]},{"Key":"use on","Fragments":["the"]},{"Key":"repl. Where","Fragments":["the"]},{"Key":"Where the","Fragments":["`require`"]},{"Key":"in files.","Fragments":["Require","`require`"]},{"Key":"files. Require","Fragments":["is"]},{"Key":"Require is","Fragments":["more"]},{"Key":"more conservative","Fragments":["in"]},{"Key":"its approach","Fragments":["in"]},{"Key":"approach in","Fragments":["that"]},{"Key":"doesn't import","Fragments":["the"]},{"Key":"namespace by","Fragments":["default."]},{"Key":"by default.","Fragments":["The"]},{"Key":"default. The","Fragments":["`(ns"]},{"Key":"The `(ns","Fragments":["my-namespace"]},{"Key":"`(ns my-namespace","Fragments":[":require"]},{"Key":"my-namespace :require","Fragments":["[...])`"]},{"Key":":require [...])`","Fragments":["is"]},{"Key":"[...])` is","Fragments":["probably"]},{"Key":"preferred form","Fragments":["overall."]},{"Key":"you cleaned","Fragments":["the"]},{"Key":"cleaned the","Fragments":["string"]},{"Key":"split it?","Fragments":["You"]},{"Key":"it? You","Fragments":["would"]},{"Key":"the clean-string","Fragments":["function"]},{"Key":"clean-string function","Fragments":["once"]},{"Key":"function once","Fragments":["then","and"]},{"Key":"once then","Fragments":["right?"]},{"Key":"then right?","Fragments":["You"]},{"Key":"right? You","Fragments":["should"]},{"Key":"do more","Fragments":["with"]},{"Key":"the Regex","Fragments":["in"]},{"Key":"Regex in","Fragments":["a"]},{"Key":"single split","Fragments":["as"]},{"Key":"splitting and","Fragments":["removing"]},{"Key":"removing punctuation","Fragments":["as"]},{"Key":"as separate","Fragments":["functions."]},{"Key":" @chelsie","Fragments":["-"]},{"Key":"@chelsie -","Fragments":["thanks"]},{"Key":"just pushed","Fragments":["a"]},{"Key":"1. It","Fragments":["definitely"]},{"Key":"definitely makes","Fragments":["sense"]},{"Key":"to require.","Fragments":["I"]},{"Key":"require. I","Fragments":["saw"]},{"Key":"some warnings","Fragments":["in"]},{"Key":"warnings in","Fragments":["another"]},{"Key":"another exercise","Fragments":["related"]},{"Key":"exercise related","Fragments":["to"]},{"Key":"to overriding","Fragments":["some"]},{"Key":"overriding some","Fragments":["functions."]},{"Key":"some functions.","Fragments":["Do"]},{"Key":"functions. Do","Fragments":["you"]},{"Key":"alias or","Fragments":["use"]},{"Key":"or use","Fragments":["the"]},{"Key":"original namespace","Fragments":["name?"]},{"Key":"normalize the","Fragments":["case"]},{"Key":"case before","Fragments":["I"]},{"Key":"I split","Fragments":["the"]},{"Key":"anything similar","Fragments":["to"]},{"Key":"to ruby's","Fragments":["String#gsub"]},{"Key":"ruby's String#gsub","Fragments":["to"]},{"Key":"String#gsub to","Fragments":["clean"]},{"Key":"clean out","Fragments":["the"]},{"Key":"the punctuation.","Fragments":["My"]},{"Key":"punctuation. My","Fragments":["current"]},{"Key":"My current","Fragments":["solution"]},{"Key":"for cleaning","Fragments":["the"]},{"Key":"cleaning the","Fragments":["punctuation"]},{"Key":"the punctuation","Fragments":["is"]},{"Key":"punctuation is","Fragments":["not"]},{"Key":"3. My","Fragments":["skills"]},{"Key":"My skills","Fragments":["with"]},{"Key":"skills with","Fragments":["regex"]},{"Key":"with regex","Fragments":["aren't"]},{"Key":"regex aren't","Fragments":["strong"]},{"Key":"aren't strong","Fragments":["enough"]},{"Key":"strong enough","Fragments":["to"]},{"Key":"more advanced","Fragments":["version","because"]},{"Key":"advanced version","Fragments":["of"]},{"Key":"of split.","Fragments":["I"]},{"Key":"might come","Fragments":["back"]},{"Key":"to tackle","Fragments":["the"]},{"Key":"tackle the","Fragments":["regex"]},{"Key":"regex another","Fragments":["time."]},{"Key":"4. As","Fragments":["you"]},{"Key":"see line","Fragments":["14"]},{"Key":"14 is","Fragments":["getting"]},{"Key":"bit long,","Fragments":["I"]},{"Key":"long, I","Fragments":["pulled"]},{"Key":"I pulled","Fragments":["out"]},{"Key":"out string-parts","Fragments":["as"]},{"Key":"string-parts as","Fragments":["a"]},{"Key":"extract more","Fragments":["functions,"]},{"Key":"more functions,","Fragments":["but"]},{"Key":"seems excessive.","Fragments":["How"]},{"Key":"excessive. How","Fragments":["would"]},{"Key":"you break","Fragments":["this"]},{"Key":"up /","Fragments":["indent"]},{"Key":"/ indent","Fragments":["something"]},{"Key":"indent something","Fragments":["like"]},{"Key":"The basic","Fragments":["structure"]},{"Key":"basic structure","Fragments":["of"]},{"Key":"expect and","Fragments":["what"]},{"Key":"keep all","Fragments":["of"]},{"Key":"your declare's","Fragments":["in"]},{"Key":"declare's in","Fragments":["the"]},{"Key":"Making hasAlphabetic?","Fragments":["a"]},{"Key":"hasAlphabetic? a","Fragments":["recursive"]},{"Key":"interesting idea.","Fragments":["I"]},{"Key":"expression, which","Fragments":["would"]},{"Key":"also eliminate","Fragments":["the"]},{"Key":"the alphabetic?","Fragments":["function."]},{"Key":"clojure.string provides","Fragments":["a"]},{"Key":"the nitpick","Fragments":["@abdiel"]},{"Key":"nitpick @abdiel","Fragments":["!"]},{"Key":"Using `last`","Fragments":["was"]},{"Key":"was OK,","Fragments":["but"]},{"Key":"OK, but","Fragments":["I"]},{"Key":"elegant solution.","Fragments":["There's"]},{"Key":"solution. There's","Fragments":["`.endsWith`"]},{"Key":"There's `.endsWith`","Fragments":["defined"]},{"Key":"`.endsWith` defined","Fragments":["on"]},{"Key":"defined on","Fragments":["Strings"]},{"Key":"on Strings","Fragments":["in"]},{"Key":"in Java,","Fragments":["so"]},{"Key":"Java, so","Fragments":["I"]},{"Key":"of `questions?`","Fragments":["in"]},{"Key":"`questions?` in","Fragments":["the"]},{"Key":" @jess","Fragments":["-"]},{"Key":"@jess -","Fragments":["I"]},{"Key":"had read","Fragments":["about"]},{"Key":"about (and","Fragments":["promptly"]},{"Key":"(and promptly","Fragments":["forgot)"]},{"Key":"promptly forgot)","Fragments":["sets"]},{"Key":"forgot) sets","Fragments":["and"]},{"Key":"maps being","Fragments":["used"]},{"Key":"must say","Fragments":["that's"]},{"Key":"say that's","Fragments":["pretty"]},{"Key":"have assumed","Fragments":["the"]},{"Key":"keys thing.","Fragments":["My"]},{"Key":"thing. My","Fragments":["brain"]},{"Key":"My brain","Fragments":["is"]},{"Key":"brain is","Fragments":["still"]},{"Key":"completely connecting","Fragments":["everything"]},{"Key":"connecting everything","Fragments":["I"]},{"Key":"everything I","Fragments":["know"]},{"Key":"about Ruby","Fragments":["hashes"]},{"Key":"Ruby hashes","Fragments":["and"]},{"Key":"hashes and","Fragments":["applying"]},{"Key":"and applying","Fragments":["them"]},{"Key":"applying them","Fragments":["to"]},{"Key":"to Maps.","Fragments":["The"]},{"Key":"Maps. The","Fragments":["same"]},{"Key":"thing happens","Fragments":["when"]},{"Key":"happens when","Fragments":["I'm"]},{"Key":"I'm in","Fragments":["python"]},{"Key":"in python","Fragments":["with"]},{"Key":"python with","Fragments":["dicts."]},{"Key":"with dicts.","Fragments":["I'm"]},{"Key":"dicts. I'm","Fragments":["sure"]},{"Key":"are subtle","Fragments":["differences"]},{"Key":"subtle differences","Fragments":["between"]},{"Key":"between each,","Fragments":["but"]},{"Key":"each, but","Fragments":["I"]},{"Key":"wish there","Fragments":["was"]},{"Key":"more ubiquitous","Fragments":["language."]},{"Key":"generally either","Fragments":["alias"]},{"Key":"something short","Fragments":["or"]},{"Key":"short or","Fragments":["refer"]},{"Key":"or refer","Fragments":["in"]},{"Key":"methods directly","Fragments":["if"]},{"Key":"directly if","Fragments":["there's"]},{"Key":"them that","Fragments":["I'm"]},{"Key":"I'm using.","Fragments":["Referring"]},{"Key":"using. Referring","Fragments":["isn't"]},{"Key":"Referring isn't","Fragments":["bad"]},{"Key":"isn't bad","Fragments":["when"]},{"Key":"bad when","Fragments":["you"]},{"Key":"do require","Fragments":["because"]},{"Key":"require because","Fragments":["then"]},{"Key":"because then","Fragments":["it's"]},{"Key":"then it's","Fragments":["explicit"]},{"Key":"it's explicit","Fragments":["and"]},{"Key":"explicit and","Fragments":["you"]},{"Key":"what namespace","Fragments":["they"]},{"Key":"namespace they","Fragments":["come"]},{"Key":"they come","Fragments":["from."]},{"Key":"2. (and","Fragments":["3)"]},{"Key":"(and 3)","Fragments":["Instead"]},{"Key":"3) Instead","Fragments":["of"]},{"Key":"about \"cleaning","Fragments":["up\""]},{"Key":"\"cleaning up\"","Fragments":["using"]},{"Key":"up\" using","Fragments":["a"]},{"Key":"regex, maybe","Fragments":["it"]},{"Key":"about splitting","Fragments":["differently."]},{"Key":"splitting differently.","Fragments":["Your"]},{"Key":"differently. Your","Fragments":["goal"]},{"Key":"Your goal","Fragments":["is"]},{"Key":"to word-like","Fragments":["things"]},{"Key":"word-like things","Fragments":["(alphabetical"]},{"Key":"things (alphabetical","Fragments":["characters)."]},{"Key":"(alphabetical characters).","Fragments":["You"]},{"Key":"removing other","Fragments":["characters,"]},{"Key":"other characters,","Fragments":["or"]},{"Key":"characters, or","Fragments":["maybe"]},{"Key":"everything that","Fragments":["wasn't"]},{"Key":"character that","Fragments":["you"]},{"Key":"shorter if","Fragments":["your"]},{"Key":"regex changes.","Fragments":["But"]},{"Key":"changes. But","Fragments":["you"]},{"Key":"also introduce","Fragments":["\"variables\""]},{"Key":"introduce \"variables\"","Fragments":["using"]},{"Key":"\"variables\" using","Fragments":["let"]},{"Key":"using let","Fragments":["statements.","very"]},{"Key":"let statements.","Fragments":["That"]},{"Key":"statements. That","Fragments":["can"]},{"Key":"lines shorter.","Fragments":["e.g."]},{"Key":" `(let","Fragments":["[normalized-string"]},{"Key":"`(let [normalized-string","Fragments":["(normalize-case"]},{"Key":"[normalized-string (normalize-case","Fragments":["str)"]},{"Key":" parts","Fragments":["(string-parts"]},{"Key":"parts (string-parts","Fragments":["normalized-string)]"]},{"Key":"(frequencies (map","Fragments":["remove-punctuation"]},{"Key":"(map remove-punctuation","Fragments":["parts)))`"]},{"Key":"Improved :-)","Fragments":["I"]},{"Key":":-) I","Fragments":["didn't"]},{"Key":"and month,","Fragments":["in"]},{"Key":"month, in","Fragments":["the"]},{"Key":"Just did","Fragments":["it"]},{"Key":"it :-)","Fragments":["It"]},{"Key":":-) It","Fragments":["was"]},{"Key":"was harder","Fragments":["than"]},{"Key":"I thought.","Fragments":["I"]},{"Key":"thought. I","Fragments":["hate"]},{"Key":"hate dates","Fragments":["(^c^)."]},{"Key":"dates (^c^).","Fragments":["And"]},{"Key":"(^c^). And","Fragments":["the"]},{"Key":"the external","Fragments":["API"]},{"Key":"external API","Fragments":["declared"]},{"Key":"API declared","Fragments":["in"]},{"Key":"tests was","Fragments":["just"]},{"Key":" `intern`...","Fragments":["Never"]},{"Key":"`intern`... Never","Fragments":["seen"]},{"Key":"Never seen","Fragments":["this"]},{"Key":"this before,","Fragments":["will"]},{"Key":"before, will","Fragments":["look"]},{"Key":"look it","Fragments":["up."]},{"Key":"it up.","Fragments":["That"]},{"Key":"up. That","Fragments":["line"]},{"Key":"That line","Fragments":["seems"]},{"Key":"seems much","Fragments":["simpler"]},{"Key":"my macro","Fragments":["`defn-all-API-fns`,"]},{"Key":"macro `defn-all-API-fns`,","Fragments":["but"]},{"Key":"`defn-all-API-fns`, but","Fragments":["the"]},{"Key":"previous 5","Fragments":["lines"]},{"Key":"5 lines","Fragments":["are"]},{"Key":"lines are","Fragments":["repetitive.","repetitive,"]},{"Key":"are repetitive.","Fragments":["I"]},{"Key":"repetitive. I","Fragments":["think"]},{"Key":"be reduced,","Fragments":["but"]},{"Key":"reduced, but","Fragments":["is"]},{"Key":"worth it?","Fragments":["I"]},{"Key":"sometimes wonder","Fragments":["whether"]},{"Key":"wonder whether","Fragments":["that"]},{"Key":"whether that","Fragments":["level","solution"]},{"Key":"of nitpicking","Fragments":["is"]},{"Key":"nitpicking is","Fragments":["counter"]},{"Key":"is counter","Fragments":["productive"]},{"Key":"counter productive","Fragments":["-"]},{"Key":"productive -","Fragments":["your"]},{"Key":"- your","Fragments":["repetitive"]},{"Key":"your repetitive","Fragments":["lines"]},{"Key":"repetitive lines","Fragments":["are"]},{"Key":"are repetitive,","Fragments":["but"]},{"Key":"repetitive, but","Fragments":["they"]},{"Key":"they work;","Fragments":["why"]},{"Key":"work; why","Fragments":["put"]},{"Key":"why put","Fragments":["the"]},{"Key":"extra effort,","Fragments":["then?"]},{"Key":"Oh, the","Fragments":["day"]},{"Key":"the day","Fragments":["names"]},{"Key":"day names","Fragments":["are"]},{"Key":"just `(str","Fragments":["prefix"]},{"Key":"`(str prefix","Fragments":["\"day\")`!"]},{"Key":"prefix \"day\")`!","Fragments":["Well"]},{"Key":"\"day\")`! Well","Fragments":["done."]},{"Key":"Well done.","Fragments":["How"]},{"Key":"done. How","Fragments":["could"]},{"Key":"see this?","Fragments":["I"]},{"Key":"this? I","Fragments":["will"]},{"Key":"improve my","Fragments":["code."]},{"Key":"find `dow-\u003esequence`","Fragments":["more"]},{"Key":"`dow-\u003esequence` more","Fragments":["readable"]},{"Key":"readable like","Fragments":["this,"]},{"Key":"that's personal","Fragments":["preference:"]},{"Key":"(defn dow-sequence","Fragments":["[dow]"]},{"Key":" (iterate","Fragments":["inc)"]},{"Key":"(map #(mod","Fragments":["%"]},{"Key":"#(mod %","Fragments":["7)))"]},{"Key":"would maybe","Fragments":["separate"]},{"Key":"maybe separate","Fragments":["`month-facts`"]},{"Key":"separate `month-facts`","Fragments":["into"]},{"Key":"`month-facts` into","Fragments":["two"]},{"Key":"two separate","Fragments":["functions."]},{"Key":"functions. Then","Fragments":["add"]},{"Key":"Then add","Fragments":["`length-of-month`"]},{"Key":"add `length-of-month`","Fragments":["and"]},{"Key":"`length-of-month` and","Fragments":["`(take"]},{"Key":"`(take length-of-month)`","Fragments":["in"]},{"Key":"length-of-month)` in","Fragments":["dow-\u003esequence,"]},{"Key":"in dow-\u003esequence,","Fragments":["and"]},{"Key":"dow-\u003esequence, and","Fragments":["rename"]},{"Key":"rename it:","Fragments":["`all-dows-in-month`"]},{"Key":"it: `all-dows-in-month`","Fragments":["which"]},{"Key":"`all-dows-in-month` which","Fragments":["would"]},{"Key":"take `month`","Fragments":["and"]},{"Key":"`month` and","Fragments":["`year`"]},{"Key":"and `year`","Fragments":["as"]},{"Key":"`year` as","Fragments":["arguments."]},{"Key":"as arguments.","Fragments":["But"]},{"Key":"arguments. But","Fragments":["I'm"]},{"Key":"sure as","Fragments":["long"]},{"Key":"haven't tried","Fragments":["it.","it"]},{"Key":"tried it.","Fragments":["It's"]},{"Key":"an idea.","Fragments":["I"]},{"Key":"it, because","Fragments":["the"]},{"Key":"name `dow-\u003esequence`","Fragments":["was"]},{"Key":"`dow-\u003esequence` was","Fragments":["too"]},{"Key":"too vague","Fragments":["for"]},{"Key":"vague for","Fragments":["me"]},{"Key":"understand immediately","Fragments":["what"]},{"Key":"immediately what","Fragments":["it"]},{"Key":"it did;","Fragments":["so"]},{"Key":"did; so","Fragments":["I"]},{"Key":"your sequence","Fragments":["of"]},{"Key":"of dows,","Fragments":["it"]},{"Key":"dows, it","Fragments":["makes"]},{"Key":"it dead","Fragments":["easy"]},{"Key":"do `last`,","Fragments":["while"]},{"Key":"`last`, while","Fragments":["`last`"]},{"Key":"while `last`","Fragments":["made"]},{"Key":"`last` made","Fragments":["me"]},{"Key":"pass month","Fragments":["and"]},{"Key":"and year","Fragments":["in"]},{"Key":"year in","Fragments":["all"]},{"Key":"functions -","Fragments":["silly.","it"]},{"Key":"- silly.","Fragments":["I"]},{"Key":"silly. I","Fragments":["will"]},{"Key":"will rework","Fragments":["that"]},{"Key":"rework that","Fragments":["part"]},{"Key":"part another","Fragments":["day."]},{"Key":"another day.","Fragments":["Maybe"]},{"Key":"day. Maybe","Fragments":[";)"]},{"Key":"1. Got","Fragments":["it."]},{"Key":"Got it.","Fragments":["This"]},{"Key":"This convention","Fragments":["makes"]},{"Key":"convention makes","Fragments":["a"]},{"Key":"of sense.","Fragments":["I"]},{"Key":"started using","Fragments":["refer"]},{"Key":"using refer","Fragments":["in"]},{"Key":"Your clue","Fragments":["about"]},{"Key":"clue about","Fragments":["the"]},{"Key":"regex pushed","Fragments":["me"]},{"Key":"pushed me","Fragments":["in"]},{"Key":"direction and","Fragments":["I"]},{"Key":"cut down","Fragments":["the"]},{"Key":"solution quite","Fragments":["a"]},{"Key":"have come","Fragments":["across"]},{"Key":"across let","Fragments":["before."]},{"Key":"let before.","Fragments":["I"]},{"Key":"see myself","Fragments":["not"]},{"Key":"myself not","Fragments":["using"]},{"Key":"let very","Fragments":["often,"]},{"Key":"very often,","Fragments":["but"]},{"Key":"often, but","Fragments":["instead"]},{"Key":"instead extracting","Fragments":["separate"]},{"Key":"extracting separate","Fragments":["functions."]},{"Key":"what's conventional","Fragments":["in"]},{"Key":"Ruby I","Fragments":["would"]},{"Key":"method than","Fragments":["logic"]},{"Key":"than logic","Fragments":["inline,"]},{"Key":"logic inline,","Fragments":["with"]},{"Key":"inline, with","Fragments":["the"]},{"Key":"result assigned","Fragments":["to"]},{"Key":"assigned to","Fragments":["a"]},{"Key":"Thanks @ciara","Fragments":["I"]},{"Key":"@ciara I","Fragments":["really"]},{"Key":"Line 37:","Fragments":["`(case"]},{"Key":"37: `(case","Fragments":["b"]},{"Key":"`(case b","Fragments":["...)`"]},{"Key":"the `merge-with`","Fragments":["idea!"]},{"Key":"think having","Fragments":["a"]},{"Key":"a `do`","Fragments":["in"]},{"Key":"`for` expr","Fragments":["blows"]},{"Key":"expr blows","Fragments":["away"]},{"Key":"blows away","Fragments":["it's"]},{"Key":"away it's","Fragments":["laziness;"]},{"Key":"it's laziness;","Fragments":["is"]},{"Key":"laziness; is","Fragments":["it"]},{"Key":"an assert","Fragments":["statement"]},{"Key":"assert statement","Fragments":["and"]},{"Key":" fyi","Fragments":["Rich,"]},{"Key":"fyi Rich,","Fragments":["the"]},{"Key":"Rich, the","Fragments":["+',"]},{"Key":"the +',","Fragments":["*',"]},{"Key":"+', *',","Fragments":["/',"]},{"Key":"*', /',","Fragments":["-'"]},{"Key":"/', -'","Fragments":["functions"]},{"Key":"-' functions","Fragments":["autopromote"]},{"Key":"functions autopromote","Fragments":["numbers"]},{"Key":"autopromote numbers","Fragments":["to"]},{"Key":"numbers to","Fragments":["bigint"]},{"Key":"to bigint","Fragments":["when"]},{"Key":"bigint when","Fragments":["needed"]},{"Key":"when needed","Fragments":["(see"]},{"Key":"needed (see","Fragments":["here:"]},{"Key":"worse solution,","Fragments":["just,"]},{"Key":"solution, just,","Fragments":["it's"]},{"Key":"just, it's","Fragments":["good"]},{"Key":"solution of","Fragments":["returning"]},{"Key":"function each","Fragments":["time."]},{"Key":"each time.","Fragments":["There"]},{"Key":"time. There","Fragments":["are"]},{"Key":"less functions","Fragments":["to"]},{"Key":"define than","Fragments":["in"]},{"Key":"the `meetup`","Fragments":["exercise,"]},{"Key":"`meetup` exercise,","Fragments":["so"]},{"Key":"exercise, so","Fragments":["less"]},{"Key":"less need","Fragments":["for"]},{"Key":"a macro.","Fragments":["I"]},{"Key":"macro. I","Fragments":["went","agree"]},{"Key":"went for","Fragments":["the","an"]},{"Key":"I remembered","Fragments":["that"]},{"Key":"remembered that","Fragments":["fns"]},{"Key":"that fns","Fragments":["have"]},{"Key":"fns have","Fragments":["implicit"]},{"Key":"have implicit","Fragments":["dos"]},{"Key":"implicit dos","Fragments":["and"]},{"Key":"dos and","Fragments":["map"]},{"Key":"map seems","Fragments":["more"]},{"Key":"do away","Fragments":["with"]},{"Key":"the `valid`","Fragments":["set,"]},{"Key":"`valid` set,","Fragments":["but"]},{"Key":"set, but","Fragments":["I"]},{"Key":"valid input","Fragments":["very"]},{"Key":"input very","Fragments":["clear."]},{"Key":"the `(some","Fragments":["identity"]},{"Key":"`(some identity","Fragments":["...)`"]},{"Key":"identity ...)`","Fragments":["part"]},{"Key":"...)` part","Fragments":["in"]},{"Key":"part in","Fragments":["`shout?`"]},{"Key":"`shout?` was","Fragments":["redundant"]},{"Key":"was redundant","Fragments":["because"]},{"Key":"redundant because","Fragments":["`re-seq`"]},{"Key":"because `re-seq`","Fragments":["returns"]},{"Key":"nil when","Fragments":["there"]},{"Key":"had `(=","Fragments":["(last"]},{"Key":"sentence) \\?)`","Fragments":["in"]},{"Key":"\\?)` in","Fragments":["the"]},{"Key":"version, but","Fragments":["switched"]},{"Key":"but switched","Fragments":["to"]},{"Key":"to `.endsWith`","Fragments":["because"]},{"Key":"`.endsWith` because","Fragments":["it"]},{"Key":"sounds more","Fragments":["natural"]},{"Key":" @waylon","Fragments":["that"]},{"Key":"@waylon that","Fragments":["makes"]},{"Key":"makes sense,","Fragments":["I"]},{"Key":"had another","Fragments":["iteration"]},{"Key":"of this.","Fragments":["I'm"]},{"Key":"I'm actually","Fragments":["curious"]},{"Key":"actually curious","Fragments":["to"]},{"Key":"will outperform","Fragments":["the"]},{"Key":"outperform the","Fragments":["other."]},{"Key":"My guess","Fragments":["is"]},{"Key":"guess is","Fragments":["that"]},{"Key":"that `.endsWith`","Fragments":["will"]},{"Key":"`.endsWith` will","Fragments":["be"]},{"Key":"a docstring;","Fragments":["that's"]},{"Key":"docstring; that's","Fragments":["something"]},{"Key":"that's something","Fragments":["that"]},{"Key":"overlooked for","Fragments":["my"]},{"Key":"my submissions","Fragments":["so"]},{"Key":"submissions so","Fragments":["far."]},{"Key":" Qualifying","Fragments":["`response-for`"]},{"Key":"Qualifying `response-for`","Fragments":["in"]},{"Key":"`response-for` in","Fragments":["the"]},{"Key":"`bob` ns","Fragments":["isn't"]},{"Key":"ns isn't","Fragments":["necessary,"]},{"Key":"isn't necessary,","Fragments":["because"]},{"Key":"necessary, because","Fragments":["it"]},{"Key":"already happens","Fragments":["due"]},{"Key":"happens due","Fragments":["to"]},{"Key":"your `(ns","Fragments":["bob..)`"]},{"Key":"`(ns bob..)`","Fragments":["declaration."]},{"Key":"At a","Fragments":["quick"]},{"Key":"a quick","Fragments":["glance,"]},{"Key":"quick glance,","Fragments":["I"]},{"Key":"glance, I","Fragments":["can't"]},{"Key":"tell what","Fragments":["kind","is"]},{"Key":"inputs would","Fragments":["map"]},{"Key":"would map","Fragments":["to"]},{"Key":"given outputs.","Fragments":["I"]},{"Key":"outputs. I","Fragments":["think"]},{"Key":"think pulling","Fragments":["the"]},{"Key":"into separate/named","Fragments":["functions"]},{"Key":"separate/named functions","Fragments":["would"]},{"Key":"help people","Fragments":["understand"]},{"Key":"people understand","Fragments":["the"]},{"Key":"you lined","Fragments":["up"]},{"Key":"`cond` outputs,","Fragments":["it's"]},{"Key":"outputs, it's","Fragments":["a"]},{"Key":"nice touch.","Fragments":["The"]},{"Key":"touch. The","Fragments":["way"]},{"Key":"you built","Fragments":["up"]},{"Key":"built up","Fragments":["`shout?`"]},{"Key":"up `shout?`","Fragments":["is"]},{"Key":"nice too;","Fragments":["I"]},{"Key":"too; I","Fragments":["used"]},{"Key":"used more","Fragments":["regexps"]},{"Key":"more regexps","Fragments":["than"]},{"Key":"regexps than","Fragments":["I"]},{"Key":"benefit to","Fragments":["making"]},{"Key":"`.endsWith` host","Fragments":["call"]},{"Key":"host call","Fragments":["in"]},{"Key":"`question?` over","Fragments":["doing"]},{"Key":"over doing","Fragments":["something"]},{"Key":"doing something","Fragments":["like"]},{"Key":"version I've","Fragments":["changed"]},{"Key":"changed use+only","Fragments":["to"]},{"Key":"use+only to","Fragments":["require+refer,"]},{"Key":"to require+refer,","Fragments":["which"]},{"Key":"require+refer, which","Fragments":["seems"]},{"Key":"preferred way,","Fragments":["at"]},{"Key":"way, at","Fragments":["least"]},{"Key":"least according","Fragments":["to:"]},{"Key":"according to:","Fragments":["http://stackoverflow.com/questions/10358149/in-clojure-1-4-what-is-the-use-of-refer-within-require/10370672#10370672"]},{"Key":"helper predicates","Fragments":["and"]},{"Key":"and without","Fragments":["the"]},{"Key":"quite straightforward","Fragments":["implementation."]},{"Key":"straightforward implementation.","Fragments":["It"]},{"Key":"implementation. It","Fragments":["does"]},{"Key":"support unicode,","Fragments":["may"]},{"Key":"unicode, may","Fragments":["fail"]},{"Key":"may fail","Fragments":["on"]},{"Key":"fail on","Fragments":["some","false"]},{"Key":"some complicated","Fragments":["input"]},{"Key":" this","Fragments":["is"]},{"Key":"just @madison's","Fragments":["imitation."]},{"Key":"You're definitely","Fragments":["on"]},{"Key":"definitely on","Fragments":["the"]},{"Key":"right track","Fragments":["with"]},{"Key":"track with","Fragments":["`map`ing."]},{"Key":"with `map`ing.","Fragments":["However,"]},{"Key":"`map`ing. However,","Fragments":["check"]},{"Key":"However, check","Fragments":["out"]},{"Key":"use Clojure","Fragments":["data"]},{"Key":"Clojure data","Fragments":["structures"]},{"Key":"structures idiomatically","Fragments":["to"]},{"Key":"idiomatically to","Fragments":["do"]},{"Key":"the \"lookup\"","Fragments":["leg"]},{"Key":"\"lookup\" leg","Fragments":["work"]},{"Key":"leg work","Fragments":["for"]},{"Key":" Specifically,","Fragments":["look"]},{"Key":"Specifically, look","Fragments":["into"]},{"Key":"into how","Fragments":["Clojure","looping"]},{"Key":"Clojure [maps](http://www.braveclojure.com/do-things/#2_4__Maps)","Fragments":["and"]},{"Key":"[maps](http://www.braveclojure.com/do-things/#2_4__Maps) and","Fragments":["[sets](http://www.braveclojure.com/do-things/#2_8__Sets)"]},{"Key":"and [sets](http://www.braveclojure.com/do-things/#2_8__Sets)","Fragments":["can"]},{"Key":"[sets](http://www.braveclojure.com/do-things/#2_8__Sets) can","Fragments":["be"]},{"Key":"(def one-to-four","Fragments":["#{1"]},{"Key":"one-to-four #{1","Fragments":["2"]},{"Key":"2 3","Fragments":["4})"]},{"Key":" (one-to-four","Fragments":["2)","5)"]},{"Key":"(one-to-four 2)","Fragments":[";;"]},{"Key":"2) ;;","Fragments":["=\u003e"]},{"Key":";; =\u003e","Fragments":["2","nil",":small",":woah!","true"]},{"Key":"(one-to-four 5)","Fragments":[";;"]},{"Key":"5) ;;","Fragments":["=\u003e"]},{"Key":"(def num-map","Fragments":["{1"]},{"Key":"num-map {1","Fragments":[":small"]},{"Key":"{1 :small","Fragments":["1000"]},{"Key":":small 1000","Fragments":[":woah!})"]},{"Key":" (num-map","Fragments":["1)","1000)"]},{"Key":"(num-map 1)","Fragments":[";;"]},{"Key":"1) ;;","Fragments":["=\u003e"]},{"Key":"(num-map 1000)","Fragments":[";;"]},{"Key":"1000) ;;","Fragments":["=\u003e"]},{"Key":"did without","Fragments":["the"]},{"Key":"the (not","Fragments":["(nil?"]},{"Key":"(not (nil?","Fragments":[",","..))","nuc-comp)))"]},{"Key":"(nil? ,","Fragments":["but"]},{"Key":"remember seeing","Fragments":["that"]},{"Key":"seeing that","Fragments":["the"]},{"Key":"global expression","Fragments":["was"]},{"Key":"expression was","Fragments":["returning"]},{"Key":"was returning","Fragments":["the"]},{"Key":"the re-req,","Fragments":["which"]},{"Key":"re-req, which","Fragments":["was"]},{"Key":"which was","Fragments":["not"]},{"Key":"boolean ;","Fragments":["so"]},{"Key":"; so","Fragments":["to"]},{"Key":"so to","Fragments":["avoid"]},{"Key":"avoid surprise,","Fragments":["I"]},{"Key":"surprise, I","Fragments":["coeerced"]},{"Key":"I coeerced","Fragments":["it"]},{"Key":"coeerced it","Fragments":["to"]},{"Key":"Now, I","Fragments":["should"]},{"Key":"the re-xxx","Fragments":["functions,"]},{"Key":"re-xxx functions,","Fragments":["maybe"]},{"Key":"a re-match","Fragments":["or"]},{"Key":"re-match or","Fragments":["something.."]},{"Key":"Much simpler","Fragments":["using"]},{"Key":"using iterate","Fragments":["function."]},{"Key":"started to","Fragments":["learn"]},{"Key":"Clojure I'm","Fragments":["sure"]},{"Key":"not of","Fragments":["the"]},{"Key":"\"Clojure way\".","Fragments":["Also,"]},{"Key":"way\". Also,","Fragments":["thanks"]},{"Key":"Also, thanks","Fragments":["to"]},{"Key":"the @vince","Fragments":["for"]},{"Key":"@vince for","Fragments":["the"]},{"Key":"the shouts?","Fragments":["function,"]},{"Key":"shouts? function,","Fragments":["as"]},{"Key":"was struggling","Fragments":["to"]},{"Key":"come with","Fragments":["my"]},{"Key":"to `(apply","Fragments":["str"]},{"Key":"str (sort","Fragments":["w))`."]},{"Key":"(sort w))`.","Fragments":["You"]},{"Key":"w))`. You","Fragments":["can"]},{"Key":"can compare","Fragments":["sets"]},{"Key":"compare sets","Fragments":["of"]},{"Key":"chars as","Fragments":["produced"]},{"Key":"as produced","Fragments":["by"]},{"Key":"produced by","Fragments":["`(sort"]},{"Key":"by `(sort","Fragments":["w)`."]},{"Key":"second iteration:","Fragments":["function"]},{"Key":"iteration: function","Fragments":["to"]},{"Key":"justify merge-with.","Fragments":["You"]},{"Key":"merge-with. You","Fragments":["can"]},{"Key":"can ignore","Fragments":["it"]},{"Key":"it here,","Fragments":["that"]},{"Key":"here, that","Fragments":["was"]},{"Key":"an innacurate","Fragments":["cleanup."]},{"Key":"sure I've","Fragments":["followed"]},{"Key":"I've followed","Fragments":["conventions","your"]},{"Key":"followed conventions","Fragments":["in"]},{"Key":"conventions in","Fragments":["any"]},{"Key":"any way.","Fragments":["I"]},{"Key":"way. I","Fragments":["think"]},{"Key":"think /has-words?,","Fragments":["/shout?,"]},{"Key":"/has-words?, /shout?,","Fragments":["and"]},{"Key":"/shout?, and","Fragments":["/question?"]},{"Key":"and /question?","Fragments":["are"]},{"Key":"/question? are","Fragments":["publicly"]},{"Key":"are publicly","Fragments":["exposed"]},{"Key":"publicly exposed","Fragments":["-"]},{"Key":"exposed -","Fragments":["I"]},{"Key":"be 'private',","Fragments":["but"]},{"Key":"'private', but","Fragments":["I'm"]},{"Key":"that concept","Fragments":["comes"]},{"Key":"concept comes","Fragments":["into"]},{"Key":"comes into","Fragments":["play"]},{"Key":"into play","Fragments":["in"]},{"Key":"So confused","Fragments":["by"]},{"Key":"by tests","Fragments":["file."]},{"Key":"tests file.","Fragments":["Should"]},{"Key":"file. Should","Fragments":["I"]},{"Key":"my own,","Fragments":["or"]},{"Key":"own, or","Fragments":["should"]},{"Key":"or should","Fragments":["I"]},{"Key":"provide function","Fragments":["returning"]},{"Key":"returning requested","Fragments":["strings?"]},{"Key":"requested strings?","Fragments":["If"]},{"Key":"strings? If","Fragments":["so"]},{"Key":"If so","Fragments":["what's"]},{"Key":"so what's","Fragments":["the"]},{"Key":"this function?","Fragments":["Sorry,"]},{"Key":"function? Sorry,","Fragments":["I'm"]},{"Key":"Sorry, I'm","Fragments":["totally"]},{"Key":"I'm totally","Fragments":["confused,"]},{"Key":"totally confused,","Fragments":["need"]},{"Key":"confused, need","Fragments":["some"]},{"Key":"the task.","Fragments":["It's"]},{"Key":"task. It's","Fragments":["a"]},{"Key":"simple generation","Fragments":["of"]},{"Key":"random tribe","Fragments":["consisting"]},{"Key":"tribe consisting","Fragments":["men"]},{"Key":"consisting men","Fragments":["and"]},{"Key":"men and","Fragments":["women.","women"]},{"Key":"and women.","Fragments":["What's"]},{"Key":"women. What's","Fragments":["the"]},{"Key":"solve that","Fragments":["problem?"]},{"Key":"that problem?","Fragments":["At"]},{"Key":"problem? At","Fragments":["first"]},{"Key":"generated a","Fragments":["list"]},{"Key":"list for","Fragments":["each"]},{"Key":"each gender.","Fragments":["So"]},{"Key":"gender. So","Fragments":["I"]},{"Key":"use ratio","Fragments":["number"]},{"Key":"ratio number","Fragments":["(how"]},{"Key":"number (how","Fragments":["many"]},{"Key":"(how many","Fragments":["men"]},{"Key":"many men","Fragments":["and"]},{"Key":"and women","Fragments":["will"]},{"Key":"women will","Fragments":["the"]},{"Key":"will the","Fragments":["tribe"]},{"Key":"the tribe","Fragments":["consist"]},{"Key":"tribe consist","Fragments":["of)."]},{"Key":"consist of).","Fragments":["But"]},{"Key":"of). But","Fragments":["then"]},{"Key":"But then","Fragments":["I"]},{"Key":"functional to","Fragments":["create"]},{"Key":"create array","Fragments":["of"]},{"Key":"array of","Fragments":["gender"]},{"Key":"of gender","Fragments":["tags"]},{"Key":"gender tags","Fragments":["and"]},{"Key":"tags and","Fragments":["them"]},{"Key":"and them","Fragments":["map"]},{"Key":"them map","Fragments":["generation"]},{"Key":"map generation","Fragments":["function"]},{"Key":"generation function","Fragments":["over"]},{"Key":"Lines 4,","Fragments":["7:"]},{"Key":"4, 7:","Fragments":["You"]},{"Key":"7: You","Fragments":["might"]},{"Key":"me. Only","Fragments":["things"]},{"Key":"might possibly","Fragments":["want"]},{"Key":"possibly want","Fragments":["to"]},{"Key":"Clojure often","Fragments":["makes"]},{"Key":"succinct to","Fragments":["create"]},{"Key":"create anonymous","Fragments":["functions"]},{"Key":"functions than","Fragments":["to"]},{"Key":"to partially","Fragments":["apply","apply"]},{"Key":"apply functions","Fragments":["as"]},{"Key":"line 4.","Fragments":["(I"]},{"Key":"4. (I","Fragments":["personally"]},{"Key":"(I personally","Fragments":["would"]},{"Key":"apply functions,","Fragments":["or"]},{"Key":"even have","Fragments":["full-blown"]},{"Key":"have full-blown","Fragments":["currying,"]},{"Key":"full-blown currying,","Fragments":["but"]},{"Key":"currying, but","Fragments":["that's"]},{"Key":"the design","Fragments":["decision"]},{"Key":"design decision","Fragments":["Clojure"]},{"Key":"decision Clojure","Fragments":["has"]},{"Key":"has taken.","Fragments":["I"]},{"Key":"taken. I","Fragments":["remember"]},{"Key":"remember @bartholome","Fragments":["summing"]},{"Key":"@bartholome summing","Fragments":["it"]},{"Key":"summing it","Fragments":["up"]},{"Key":"up well","Fragments":["as"]},{"Key":"Clojure being","Fragments":["an"]},{"Key":"an \"imperative","Fragments":["functional"]},{"Key":"\"imperative functional","Fragments":["language\""]},{"Key":"functional language\"","Fragments":["rather"]},{"Key":"language\" rather","Fragments":["than"]},{"Key":"declarative one.)","Fragments":["So"]},{"Key":"one.) So","Fragments":["you"]},{"Key":"rewrite that","Fragments":["partial"]},{"Key":"that partial","Fragments":["function"]},{"Key":"partial function","Fragments":["as","application,"]},{"Key":"as `#(*","Fragments":["%"]},{"Key":"`#(* %","Fragments":["2)`"]},{"Key":"% 2)`","Fragments":["to"]},{"Key":"2)` to","Fragments":["make"]},{"Key":"it slightly","Fragments":["shorter"]},{"Key":"more idiomatic?","Fragments":["But"]},{"Key":"idiomatic? But","Fragments":["I"]},{"Key":"other possible","Fragments":["change"]},{"Key":"possible change","Fragments":["you"]},{"Key":"change you","Fragments":["could"]},{"Key":"replace `apply`","Fragments":["with"]},{"Key":"`apply` with","Fragments":["`reduce`"]},{"Key":"with `reduce`","Fragments":["on"]},{"Key":"`reduce` on","Fragments":["line"]},{"Key":"10 for","Fragments":["the"]},{"Key":"exact same","Fragments":["behaviour."]},{"Key":"same behaviour.","Fragments":["I"]},{"Key":"behaviour. I","Fragments":["only"]},{"Key":"only suggest","Fragments":["this"]},{"Key":"suggest this","Fragments":["because"]},{"Key":"this because","Fragments":["`reduce`"]},{"Key":"because `reduce`","Fragments":["for"]},{"Key":"`reduce` for","Fragments":["me"]},{"Key":"me makes","Fragments":["it"]},{"Key":"explicit -","Fragments":["for"]},{"Key":"least -","Fragments":["that"]},{"Key":"is reducing","Fragments":["down"]},{"Key":"reducing down","Fragments":["a"]},{"Key":"down a","Fragments":["list"]},{"Key":" Neither","Fragments":["of"]},{"Key":"Neither of","Fragments":["these"]},{"Key":"are problems,","Fragments":["just"]},{"Key":"problems, just","Fragments":["choices"]},{"Key":"just choices","Fragments":["to"]},{"Key":"choices to","Fragments":["make"]},{"Key":"make about","Fragments":["your"]},{"Key":"well have","Fragments":["already"]},{"Key":"already considered","Fragments":["and"]},{"Key":"considered and","Fragments":["made."]},{"Key":"Why you","Fragments":["are"]},{"Key":"are defining","Fragments":["shouting?"]},{"Key":"defining shouting?","Fragments":["asking?"]},{"Key":"shouting? asking?","Fragments":["..."]},{"Key":"asking? ...","Fragments":["fncs"]},{"Key":"... fncs","Fragments":["locally"]},{"Key":"fncs locally","Fragments":["with"]},{"Key":"locally with","Fragments":["let?"]},{"Key":"your using","Fragments":["of"]},{"Key":"using of","Fragments":["filter"]},{"Key":"of filter","Fragments":["to"]},{"Key":"filter to","Fragments":["ensure"]},{"Key":"ensure there","Fragments":["are"]},{"Key":"one char","Fragments":["in"]},{"Key":"is cool","Fragments":["but"]},{"Key":"cool but","Fragments":["It"]},{"Key":"but It","Fragments":["looks"]},{"Key":"do (=","Fragments":["(upper-case"]},{"Key":"(upper-case string)","Fragments":["string)"]},{"Key":"string) string)","Fragments":["to"]},{"Key":"string) to","Fragments":["check"]},{"Key":"check all","Fragments":["string"]},{"Key":"all string","Fragments":["is"]},{"Key":"last block","Fragments":["in"]},{"Key":"the cond,","Fragments":["and"]},{"Key":"the tricky","Fragments":["tests."]},{"Key":"Overall I'm","Fragments":["not"]},{"Key":"using both","Fragments":["cond"]},{"Key":"both cond","Fragments":["and"]},{"Key":"case together,","Fragments":["there"]},{"Key":"together, there","Fragments":["probably"]},{"Key":"there probably","Fragments":["is"]},{"Key":"probably is","Fragments":["a"]},{"Key":"does both","Fragments":["very"]},{"Key":"both very","Fragments":["easily."]},{"Key":"very easily.","Fragments":["Also"]},{"Key":"easily. Also","Fragments":["the"]},{"Key":"string \"I?\"","Fragments":["and"]},{"Key":"\"I?\" and","Fragments":["similar"]},{"Key":"and similar","Fragments":["is"]},{"Key":"similar is","Fragments":["considered"]},{"Key":"checking uppercase","Fragments":["and"]},{"Key":"uppercase and","Fragments":["\"let's\"","if"]},{"Key":"and \"let's\"","Fragments":["looks"]},{"Key":"\"let's\" looks","Fragments":["ugly."]},{"Key":"ugly. Probably","Fragments":["should"]},{"Key":"Probably should","Fragments":["have"]},{"Key":"written a","Fragments":["helper"]},{"Key":"(let [str","Fragments":["\"ALL"]},{"Key":"[str \"ALL","Fragments":["CAPS"]},{"Key":"\"ALL CAPS","Fragments":["STRING\""]},{"Key":" upper?","Fragments":["#(="]},{"Key":"upper? #(=","Fragments":["(clojure.string/upper-case"]},{"Key":"#(= (clojure.string/upper-case","Fragments":["%)"]},{"Key":"(clojure.string/upper-case %)","Fragments":["%)]"]},{"Key":" (upper?","Fragments":["str))"]},{"Key":"much rougher","Fragments":["than"]},{"Key":"rougher than","Fragments":["I"]},{"Key":"I expected.","Fragments":["At"]},{"Key":"expected. At","Fragments":["first"]},{"Key":"to bit","Fragments":["shift"]},{"Key":"bit shift","Fragments":["but","on"]},{"Key":"shift but","Fragments":["the"]},{"Key":"standard integer","Fragments":["isn't"]},{"Key":"integer isn't","Fragments":["big"]},{"Key":"isn't big","Fragments":["enough"]},{"Key":"big enough","Fragments":["for"]},{"Key":"problem and","Fragments":["you"]},{"Key":"can't bit","Fragments":["shift"]},{"Key":"shift on","Fragments":["a"]},{"Key":"bigint. Then","Fragments":["I"]},{"Key":"to wanting","Fragments":["to"]},{"Key":"an exponent","Fragments":["method"]},{"Key":"exponent method","Fragments":["which"]},{"Key":"assumed I","Fragments":["could"]},{"Key":"Java for.","Fragments":["No"]},{"Key":"for. No","Fragments":["matter"]},{"Key":"No matter","Fragments":["what"]},{"Key":"matter what","Fragments":["I"]},{"Key":"tried I","Fragments":["kept"]},{"Key":"kept getting","Fragments":["integer"]},{"Key":"getting integer","Fragments":["overflows"]},{"Key":"integer overflows","Fragments":["or"]},{"Key":"overflows or","Fragments":["slightly"]},{"Key":"or slightly","Fragments":["incorrect"]},{"Key":"slightly incorrect","Fragments":["values"]},{"Key":"incorrect values","Fragments":["when"]},{"Key":"converting from","Fragments":["decimal"]},{"Key":"from decimal","Fragments":["to"]},{"Key":"decimal to","Fragments":["`bigint`"]},{"Key":"to `bigint`","Fragments":["in"]},{"Key":"`bigint` in","Fragments":["Clojure."]},{"Key":"Clojure. In","Fragments":["the"]},{"Key":"gave into","Fragments":["my"]},{"Key":"my frustration","Fragments":["and"]},{"Key":"frustration and","Fragments":["wrote"]},{"Key":"and wrote","Fragments":["my"]},{"Key":"wrote my","Fragments":["own"]},{"Key":"own exponent","Fragments":["method."]},{"Key":"exponent method.","Fragments":["If"]},{"Key":"method. If","Fragments":["someone"]},{"Key":"If someone","Fragments":["can"]},{"Key":"someone can","Fragments":["point"]},{"Key":"correct way","Fragments":["to"]},{"Key":"Java I","Fragments":["would"]},{"Key":"would appreciate","Fragments":["it."]},{"Key":"little wrappers","Fragments":["for"]},{"Key":"wrappers for","Fragments":["each"]},{"Key":"the conditions,","Fragments":["makes"]},{"Key":"conditions, makes","Fragments":["it"]},{"Key":"read between","Fragments":["the"]},{"Key":"spec and","Fragments":["the"]},{"Key":"code. Totally","Fragments":["nabbed"]},{"Key":"Totally nabbed","Fragments":["your"]},{"Key":"nabbed your","Fragments":["use"]},{"Key":"of 'blank?'","Fragments":["by"]},{"Key":"'blank?' by","Fragments":["the"]},{"Key":"of ':use',","Fragments":["it's"]},{"Key":"':use', it's","Fragments":["considered"]},{"Key":"it's considered","Fragments":["more"]},{"Key":"to ':require","Fragments":[":refer',"]},{"Key":"':require :refer',","Fragments":["like:"]},{"Key":"In 'contains-some-letter?'","Fragments":["you"]},{"Key":"'contains-some-letter?' you","Fragments":["could"]},{"Key":"use 'not-empty',","Fragments":["save"]},{"Key":"'not-empty', save","Fragments":["a"]},{"Key":" Further,","Fragments":["I"]},{"Key":"Further, I","Fragments":["think"]},{"Key":"implementation does","Fragments":["a"]},{"Key":"than required.","Fragments":["In"]},{"Key":"required. In","Fragments":["order"]},{"Key":"a SHOUT,","Fragments":["you"]},{"Key":"SHOUT, you","Fragments":["only"]},{"Key":"are upper","Fragments":["case","case"]},{"Key":"but no","Fragments":["lower"]},{"Key":"no lower","Fragments":["case"]},{"Key":"case characters.","Fragments":["Applying","You"]},{"Key":"characters. Applying","Fragments":["'upper-case'"]},{"Key":"Applying 'upper-case'","Fragments":["to"]},{"Key":"'upper-case' to","Fragments":["the"]},{"Key":"whole message","Fragments":["seems"]},{"Key":"message seems","Fragments":["a"]},{"Key":"kill to","Fragments":["me."]},{"Key":"wanted those","Fragments":["helpers"]},{"Key":"helpers to","Fragments":["be"]},{"Key":"private to","Fragments":["the"]},{"Key":"very smoothly","Fragments":["in"]},{"Key":"smoothly in","Fragments":["other"]},{"Key":"Lisp dialects","Fragments":["such"]},{"Key":"dialects such","Fragments":["as"]},{"Key":"as Scheme","Fragments":["or"]},{"Key":"Scheme or","Fragments":["Racket."]},{"Key":"I commented","Fragments":["about"]},{"Key":"commented about","Fragments":["this"]},{"Key":"this post:","Fragments":["http://garajeando.blogspot.com.es/2014/07/exercism-extract-transform-load-in.html"]},{"Key":"Clojure it","Fragments":["seems"]},{"Key":"only nest","Fragments":["functions"]},{"Key":"nest functions","Fragments":["definitions"]},{"Key":"functions definitions","Fragments":["inside"]},{"Key":"definitions inside","Fragments":["a"]},{"Key":"using let,","Fragments":["but"]},{"Key":"nice. May","Fragments":["be"]},{"Key":"be I'll","Fragments":["discover"]},{"Key":"I'll discover","Fragments":["a"]},{"Key":"discover a","Fragments":["better"]},{"Key":"discovered later","Fragments":["was"]},{"Key":"later was","Fragments":["defn-"]},{"Key":"was defn-","Fragments":["which"]},{"Key":"that can't","Fragments":["be","be"]},{"Key":"seen from","Fragments":["outside"]},{"Key":"from outside","Fragments":["the"]},{"Key":"and helps","Fragments":["the"]},{"Key":"right it's","Fragments":["much"]},{"Key":"for capitalized","Fragments":["string"]},{"Key":"capitalized string","Fragments":["the"]},{"Key":"for nitpicking","Fragments":["my"]},{"Key":"nitpicking my","Fragments":["exercise."]},{"Key":"noob but","Fragments":["I"]},{"Key":"newbie ...","Fragments":["I'm"]},{"Key":"... I'm","Fragments":["coming"]},{"Key":"coming from","Fragments":["OOP"]},{"Key":"from OOP","Fragments":["so"]},{"Key":"OOP so","Fragments":["for"]},{"Key":"for sure","Fragments":["I"]},{"Key":"have lots","Fragments":["of"]},{"Key":"for discover","Fragments":["me"]},{"Key":"discover me","Fragments":["the"]},{"Key":"the :refer","Fragments":["keyword"]},{"Key":":refer keyword","Fragments":["and"]},{"Key":"keyword and","Fragments":["the"]},{"Key":"the non-empty","Fragments":["function."]},{"Key":"The (not","Fragments":["(nil?"]},{"Key":"(nil? ..))","Fragments":["isn't"]},{"Key":"..)) isn't","Fragments":["needed"]},{"Key":"needed as","Fragments":["will"]},{"Key":"as will","Fragments":["be"]},{"Key":"be falsey","Fragments":["if"]},{"Key":"falsey if","Fragments":["it's"]},{"Key":"it's nil","Fragments":["anyways."]},{"Key":"anything wrong,","Fragments":["but"]},{"Key":"I'm certainly","Fragments":["no"]},{"Key":"for English:","Fragments":["*trimmed"]},{"Key":"English: *trimmed","Fragments":[";)"]},{"Key":"call `upper-case`","Fragments":["in"]},{"Key":"`upper-case` in","Fragments":["`score-word`.","the"]},{"Key":"in `score-word`.","Fragments":["It's"]},{"Key":"`score-word`. It's","Fragments":["already"]},{"Key":"It's already","Fragments":["handled"]},{"Key":"already handled","Fragments":["in"]},{"Key":"first problem","Fragments":["I"]},{"Key":"my life","Fragments":["using"]},{"Key":"life using","Fragments":["clojure."]},{"Key":"using clojure.","Fragments":["It's"]},{"Key":"clojure. It's","Fragments":["probably"]},{"Key":"probably very","Fragments":["influenced"]},{"Key":"very influenced","Fragments":["by"]},{"Key":"influenced by","Fragments":["my"]},{"Key":"my python","Fragments":["experience."]},{"Key":"python experience.","Fragments":["Please,"]},{"Key":"experience. Please,","Fragments":["any"]},{"Key":"Please, any","Fragments":["feedback"]},{"Key":"the DRYest","Fragments":["code"]},{"Key":"DRYest code","Fragments":["but"]},{"Key":" Accidentally","Fragments":["named"]},{"Key":"Accidentally named","Fragments":["the"]},{"Key":"the helperfunction","Fragments":["after"]},{"Key":"helperfunction after","Fragments":["a"]},{"Key":" well...","Fragments":["test"]},{"Key":"well... test","Fragments":["review"]},{"Key":"test review","Fragments":["code."]},{"Key":" syntax","Fragments":["highlight"]},{"Key":"syntax highlight","Fragments":["check"]},{"Key":"(defn helloworld","Fragments":["[]"]},{"Key":"helloworld []","Fragments":["1)"]},{"Key":"The \"Fine.","Fragments":["Be"]},{"Key":"that way!\"","Fragments":["and"]},{"Key":"way!\" and","Fragments":["\"Sure\""]},{"Key":"and \"Sure\"","Fragments":["cases"]},{"Key":"\"Sure\" cases","Fragments":["are"]},{"Key":"the \"Woah,","Fragments":["chill"]},{"Key":"chill out\"","Fragments":["case"]},{"Key":"out\" case","Fragments":["we"]},{"Key":"case we","Fragments":["need"]},{"Key":"need check","Fragments":["if"]},{"Key":"in uppercase","Fragments":["and"]},{"Key":"any letters","Fragments":["in","with"]},{"Key":"test whether","Fragments":["a"]},{"Key":"letter. Thus","Fragments":["we"]},{"Key":"Thus we","Fragments":["need"]},{"Key":"the static","Fragments":["java"]},{"Key":"static java","Fragments":["function"]},{"Key":"java function","Fragments":["Character.isLetter"]},{"Key":"function Character.isLetter","Fragments":["-"]},{"Key":"Character.isLetter -","Fragments":["which"]},{"Key":"means the","Fragments":["solution"]},{"Key":"clojure implementation","Fragments":["(such"]},{"Key":"implementation (such","Fragments":["as"]},{"Key":"as clojurescript","Fragments":["or"]},{"Key":"clojurescript or","Fragments":["clojure-clr)."]},{"Key":"consider ascii","Fragments":["letters,"]},{"Key":"ascii letters,","Fragments":["i.e."]},{"Key":"letters, i.e.","Fragments":["use"]},{"Key":"i.e. use","Fragments":["a"]},{"Key":"(defn ascii-letter?","Fragments":["[c]"]},{"Key":"(let [x","Fragments":["(int"]},{"Key":"[x (int","Fragments":["c)]"]},{"Key":"(or (and","Fragments":["(\u003e="]},{"Key":"(and (\u003e=","Fragments":["x","x"]},{"Key":"(\u003e= x","Fragments":["65)","97)"]},{"Key":"x 65)","Fragments":["(\u003c="]},{"Key":"65) (\u003c=","Fragments":["x"]},{"Key":"(\u003c= x","Fragments":["90))","122)))))"]},{"Key":"x 97)","Fragments":["(\u003c="]},{"Key":"97) (\u003c=","Fragments":["x"]},{"Key":"missed `string/blank?`","Fragments":["when"]},{"Key":"`string/blank?` when","Fragments":["looking"]},{"Key":"looking through","Fragments":["the"]},{"Key":"did notice","Fragments":["that"]},{"Key":"the inputs.","Fragments":["(Which"]},{"Key":"inputs. (Which","Fragments":["is"]},{"Key":"(Which is","Fragments":["what"]},{"Key":"kinda hacked","Fragments":["into"]},{"Key":"hacked into","Fragments":["in"]},{"Key":"into in","Fragments":["my"]},{"Key":"An alternative","Fragments":["is"]},{"Key":"alternative is","Fragments":["to"]},{"Key":"use \"sort\"","Fragments":["instead"]},{"Key":"\"sort\" instead","Fragments":["of"]},{"Key":"simple case","Fragments":["the"]},{"Key":"choice shouldn't","Fragments":["matter."]},{"Key":"`-\u003e\u003e` is","Fragments":["redundant."]},{"Key":"for sorted","Fragments":["is"]},{"Key":"is incorrect.","Fragments":["Note"]},{"Key":"incorrect. Note","Fragments":["that"]},{"Key":"an normal","Fragments":["map"]},{"Key":"normal map","Fragments":["(ArrayMap)"]},{"Key":"map (ArrayMap)","Fragments":["does"]},{"Key":"(ArrayMap) does","Fragments":["not"]},{"Key":"not guarantee","Fragments":["that"]},{"Key":"keys will","Fragments":["be"]},{"Key":"in increasing","Fragments":["order,"]},{"Key":"increasing order,","Fragments":["which"]},{"Key":"order, which","Fragments":["is"]},{"Key":"On my","Fragments":["machine"]},{"Key":"my machine","Fragments":["your"]},{"Key":"machine your","Fragments":["version"]},{"Key":"version doesn't","Fragments":["even"]},{"Key":"even pass","Fragments":["the"]},{"Key":"the unit","Fragments":["tests:","tests,"]},{"Key":"in (sorted-grade_school-keys-sorted)","Fragments":["(NO_SOURCE_FILE:2)"]},{"Key":"(= [3","Fragments":["4","4"]},{"Key":"[3 4","Fragments":["6]","6]"]},{"Key":"4 6]","Fragments":["(-\u003e","(3"]},{"Key":"6] (-\u003e","Fragments":["db"]},{"Key":"(-\u003e db","Fragments":["(grade_school/add"]},{"Key":"db (grade_school/add","Fragments":["\"Jennifer\""]},{"Key":"(grade_school/add \"Jennifer\"","Fragments":["4)"]},{"Key":"\"Jennifer\" 4)","Fragments":["(grade_school/add"]},{"Key":"4) (grade_school/add","Fragments":["\"Kareem\"","\"Kyle\""]},{"Key":"(grade_school/add \"Kareem\"","Fragments":["6)"]},{"Key":"\"Kareem\" 6)","Fragments":["(grade_school/add"]},{"Key":"6) (grade_school/add","Fragments":["\"Christopher\""]},{"Key":"(grade_school/add \"Christopher\"","Fragments":["4)"]},{"Key":"\"Christopher\" 4)","Fragments":["(grade_school/add"]},{"Key":"(grade_school/add \"Kyle\"","Fragments":["3)"]},{"Key":"\"Kyle\" 3)","Fragments":["(grade_school/sorted)"]},{"Key":"3) (grade_school/sorted)","Fragments":["(keys)))"]},{"Key":"6] (3","Fragments":["6"]},{"Key":"(3 6","Fragments":["4)))"]},{"Key":" **Disclaimer:**","Fragments":["*I'm"]},{"Key":"**Disclaimer:** *I'm","Fragments":["NOT"]},{"Key":"*I'm NOT","Fragments":["an"]},{"Key":"NOT an","Fragments":["expert.*"]},{"Key":"The U","Fragments":["nucleotide"]},{"Key":"U nucleotide","Fragments":["only"]},{"Key":"nucleotide only","Fragments":["may"]},{"Key":"only may","Fragments":["be"]},{"Key":"be present","Fragments":["on"]},{"Key":"present on","Fragments":["the"]},{"Key":"RNA strand.","Fragments":["If"]},{"Key":"it's on","Fragments":["the"]},{"Key":"strand you've","Fragments":["got"]},{"Key":"some weird","Fragments":["DNA."]},{"Key":"weird DNA.","Fragments":["For"]},{"Key":"DNA. For","Fragments":["such"]},{"Key":"For such","Fragments":["a"]},{"Key":"a weird","Fragments":["DNA"]},{"Key":"weird DNA","Fragments":["you"]},{"Key":"DNA you","Fragments":["should"]},{"Key":"should throw","Fragments":["an"]},{"Key":"error (that's","Fragments":["what"]},{"Key":"(that's what","Fragments":["the"]},{"Key":"last test","Fragments":["wants"]},{"Key":"test wants","Fragments":["you"]},{"Key":"wants you","Fragments":["to"]},{"Key":"to do).","Fragments":["Same"]},{"Key":"do). Same","Fragments":["for"]},{"Key":"Same for","Fragments":["if"]},{"Key":"if another","Fragments":["nucleotide"]},{"Key":"another nucleotide","Fragments":["is"]},{"Key":"the recursive","Fragments":["approach,"]},{"Key":"recursive approach,","Fragments":["but"]},{"Key":"but be","Fragments":["sure"]},{"Key":"be sure","Fragments":["it"]},{"Key":"it terminates.","Fragments":["For"]},{"Key":"terminates. For","Fragments":["example"]},{"Key":"example `(to-rna","Fragments":["\"X\")`"]},{"Key":"`(to-rna \"X\")`","Fragments":["would"]},{"Key":"\"X\")` would","Fragments":["run"]},{"Key":"would run","Fragments":["forever"]},{"Key":"run forever","Fragments":["(or"]},{"Key":"forever (or","Fragments":["overflow"]},{"Key":"(or overflow","Fragments":["a"]},{"Key":"overflow a","Fragments":["stack)!"]},{"Key":"a stack)!","Fragments":["That's"]},{"Key":"stack)! That's","Fragments":["where"]},{"Key":"That's where","Fragments":["the"]},{"Key":"the `AssertionError`","Fragments":["comes"]},{"Key":"`AssertionError` comes","Fragments":["in"]},{"Key":"comes in","Fragments":["handy!"]},{"Key":"the substring","Fragments":["without"]},{"Key":"substring without","Fragments":["the"]},{"Key":"first char","Fragments":["until"]},{"Key":"char until","Fragments":["the"]},{"Key":"until the","Fragments":["end"]},{"Key":"end you","Fragments":["can"]},{"Key":" @gisselle","Fragments":["The"]},{"Key":"@gisselle The","Fragments":["test"]},{"Key":"suite and","Fragments":["specification","spec"]},{"Key":"and specification","Fragments":["for"]},{"Key":"specification for","Fragments":["exercises"]},{"Key":"for exercises","Fragments":["change"]},{"Key":"exercises change","Fragments":["with"]},{"Key":"with time.","Fragments":["This"]},{"Key":"time. This","Fragments":["submission"]},{"Key":"This submission","Fragments":["if"]},{"Key":"if about","Fragments":["half"]},{"Key":"about half","Fragments":["year"]},{"Key":"half year","Fragments":["old"]},{"Key":"year old","Fragments":["and"]},{"Key":"old and","Fragments":["-"]},{"Key":"and -","Fragments":["AFAIR"]},{"Key":"- AFAIR","Fragments":["-"]},{"Key":"AFAIR -","Fragments":["the"]},{"Key":"and spec","Fragments":["didn't"]},{"Key":"spec didn't","Fragments":["mention"]},{"Key":"didn't mention","Fragments":["`sorted`"]},{"Key":"mention `sorted`","Fragments":["returning"]},{"Key":"`sorted` returning","Fragments":["ordered"]},{"Key":"returning ordered","Fragments":["map."]},{"Key":"ordered map.","Fragments":["I"]},{"Key":"suppose it","Fragments":["would"]},{"Key":"a logic","Fragments":["that"]},{"Key":"logic that","Fragments":["would"]},{"Key":"would display","Fragments":["a"]},{"Key":"display a","Fragments":["warning"]},{"Key":"a submission","Fragments":["may"]},{"Key":"submission may","Fragments":["not"]},{"Key":"not comply","Fragments":["with"]},{"Key":"current test","Fragments":["suite"]},{"Key":"suite and/or","Fragments":["spec."]},{"Key":"and/or spec.","Fragments":["/cc"]},{"Key":"spec. /cc","Fragments":["@gisselle"]},{"Key":"tests. Some","Fragments":["should"]},{"Key":"Some should","Fragments":["be"]},{"Key":"be failing:","Fragments":["your"]},{"Key":"failing: your","Fragments":["yelling?"]},{"Key":"your yelling?","Fragments":["will"]},{"Key":"yelling? will","Fragments":["return"]},{"Key":"sentence contains","Fragments":["no"]},{"Key":"contains no","Fragments":["letters(instead"]},{"Key":"no letters(instead","Fragments":["it"]},{"Key":"letters(instead it","Fragments":["could"]},{"Key":"be all","Fragments":["numbers,","caps,"]},{"Key":"all numbers,","Fragments":["or"]},{"Key":"numbers, or","Fragments":["crazy"]},{"Key":"or crazy","Fragments":["!@#$^\u0026)."]},{"Key":" (last","Fragments":["sentence)"]},{"Key":"sentence) will","Fragments":["return"]},{"Key":"a character.","Fragments":["No"]},{"Key":"character. No","Fragments":["need"]},{"Key":"to string.","Fragments":["Or"]},{"Key":"string. Or","Fragments":["use"]},{"Key":"Or use","Fragments":["the"]},{"Key":"love any","Fragments":["feedback"]},{"Key":" @ruth","Fragments":["Thank"]},{"Key":"@ruth Thank","Fragments":["you"]},{"Key":"the explanation","Fragments":["-"]},{"Key":"explanation -","Fragments":["I'll"]},{"Key":"more careful","Fragments":["in"]},{"Key":"careful in","Fragments":["the"]},{"Key":"future when","Fragments":["nitpicking"]},{"Key":"when nitpicking","Fragments":["old"]},{"Key":"nitpicking old","Fragments":["submissions."]},{"Key":" @anjali","Fragments":["@anjali"]},{"Key":"@anjali @anjali","Fragments":["do"]},{"Key":"@anjali do","Fragments":["either"]},{"Key":"do either","Fragments":["of"]},{"Key":"to fetch","Fragments":["the"]},{"Key":"fetch the","Fragments":["latest"]},{"Key":"latest version","Fragments":["of","of","of"]},{"Key":" @annalise","Fragments":["The"]},{"Key":"@annalise The","Fragments":["command"]},{"Key":"The command","Fragments":["line"]},{"Key":"line client's","Fragments":["\"fetch\""]},{"Key":"client's \"fetch\"","Fragments":["command"]},{"Key":"\"fetch\" command","Fragments":["will"]},{"Key":"command will","Fragments":["download"]},{"Key":"will download","Fragments":["the"]},{"Key":"download the","Fragments":["latest"]},{"Key":"exercise files","Fragments":["don't"]},{"Key":"files don't","Fragments":["already"]},{"Key":"don't already","Fragments":["exist"]},{"Key":"already exist","Fragments":["on"]},{"Key":"exist on","Fragments":["the"]},{"Key":"detect changes","Fragments":["to"]},{"Key":"exercises I'd","Fragments":["recommend"]},{"Key":"recommend to","Fragments":["put"]},{"Key":"the files","Fragments":["in","in"]},{"Key":"files in","Fragments":["a","git"]},{"Key":"a git","Fragments":["repository"]},{"Key":"git repository","Fragments":["and"]},{"Key":"repository and","Fragments":["remove"]},{"Key":"and remove","Fragments":["all","the"]},{"Key":"all exercise","Fragments":["description"]},{"Key":"exercise description","Fragments":["/"]},{"Key":"description /","Fragments":["test"]},{"Key":"/ test","Fragments":["casees"]},{"Key":"test casees","Fragments":["followed"]},{"Key":"casees followed","Fragments":["by"]},{"Key":"by running","Fragments":["the"]},{"Key":"the fetch","Fragments":["command."]},{"Key":"fetch command.","Fragments":["Running"]},{"Key":"command. Running","Fragments":["a"]},{"Key":"Running a","Fragments":["\"git"]},{"Key":"a \"git","Fragments":["diff\""]},{"Key":"\"git diff\"","Fragments":["should"]},{"Key":"diff\" should","Fragments":["then"]},{"Key":"should then","Fragments":["show"]},{"Key":"then show","Fragments":["you"]},{"Key":"you all","Fragments":["the"]},{"Key":"in git","Fragments":["would"]},{"Key":"git would","Fragments":["look"]},{"Key":"look something","Fragments":["like"]},{"Key":" cd","Fragments":["~/exercism"]},{"Key":" git","Fragments":["init","add","commit","diff"]},{"Key":"git add","Fragments":["*"]},{"Key":"git commit","Fragments":["-m"]},{"Key":"commit -m","Fragments":["\"Initial"]},{"Key":"-m \"Initial","Fragments":["Commit\""]},{"Key":"for updates","Fragments":["would"]},{"Key":"updates would","Fragments":["look"]},{"Key":" rm","Fragments":["clojure/*/README.md"]},{"Key":"rm clojure/*/README.md","Fragments":["clojure/*/*_test.clj"]},{"Key":" ~/.local/bin/exercism","Fragments":["fetch"]},{"Key":" @darius","Fragments":["updated"]},{"Key":"@darius updated","Fragments":["to"]},{"Key":"to latest","Fragments":["version"]},{"Key":"of exercise,","Fragments":["thanks"]},{"Key":"exercise, thanks","Fragments":["for"]},{"Key":"good. Minor","Fragments":["nitpick"]},{"Key":"yelling takes","Fragments":["precedence"]},{"Key":"over asking","Fragments":["a"]},{"Key":"asking a","Fragments":["question."]},{"Key":"The `is-asking-question?`","Fragments":["function"]},{"Key":"`is-asking-question?` function","Fragments":["could"]},{"Key":"be removed,","Fragments":["and"]},{"Key":"removed, and","Fragments":["the"]},{"Key":"conditional switched","Fragments":["so"]},{"Key":"switched so","Fragments":["that"]},{"Key":"that `is-yelling?`","Fragments":["is"]},{"Key":"`is-yelling?` is","Fragments":["the"]},{"Key":"thing evaluated.","Fragments":["Then"]},{"Key":"evaluated. Then","Fragments":["you"]},{"Key":"simply check","Fragments":["`(ends-with?"]},{"Key":"check `(ends-with?","Fragments":["msg"]},{"Key":"`(ends-with? msg","Fragments":["\"?\")`"]},{"Key":"msg \"?\")`","Fragments":["instead"]},{"Key":"\"?\")` instead","Fragments":["of"]},{"Key":"of `(is-asking-question?","Fragments":["msg)`."]},{"Key":"(empty? y))`,","Fragments":["line"]},{"Key":"y))`, line","Fragments":["5,"]},{"Key":"5, could","Fragments":["be"]},{"Key":"with `(seq","Fragments":["y)`."]},{"Key":"`(seq y)`.","Fragments":["The"]},{"Key":"y)`. The","Fragments":["[docs](http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/empty?)"]},{"Key":"The [docs](http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/empty?)","Fragments":["recommend"]},{"Key":"[docs](http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/empty?) recommend","Fragments":["it."]},{"Key":"for `\"Let's\"`?","Fragments":["That"]},{"Key":"`\"Let's\"`? That","Fragments":["seems"]},{"Key":"a hack.","Fragments":["Maybe"]},{"Key":"hack. Maybe","Fragments":["we"]},{"Key":"use `\"!\"`","Fragments":["as"]},{"Key":"`\"!\"` as","Fragments":["the"]},{"Key":"the judge","Fragments":["of"]},{"Key":"judge of","Fragments":["whether"]},{"Key":"of whether","Fragments":["the"]},{"Key":"person is","Fragments":["yelling"]},{"Key":"is yelling","Fragments":["--"]},{"Key":"yelling --","Fragments":["can"]},{"Key":"-- can","Fragments":["you"]},{"Key":"other pattern","Fragments":["that"]},{"Key":"is forceful","Fragments":["or"]},{"Key":"forceful or","Fragments":["not?"]},{"Key":"You comment","Fragments":["way"]},{"Key":"comment way","Fragments":["better"]},{"Key":"way better","Fragments":["than"]},{"Key":"I do.","Fragments":["This"]},{"Key":"do. This","Fragments":["was"]},{"Key":"private methods!","Fragments":["I"]},{"Key":"methods! I","Fragments":["forgot"]},{"Key":"not mad","Fragments":["keen"]},{"Key":"mad keen","Fragments":["on"]},{"Key":"keen on","Fragments":["the"]},{"Key":"name `nb-left`","Fragments":["on"]},{"Key":"`nb-left` on","Fragments":["line"]},{"Key":"line 16","Fragments":["—"]},{"Key":"16 —","Fragments":["took"]},{"Key":"— took","Fragments":["my"]},{"Key":"took my","Fragments":["brain"]},{"Key":"brain a","Fragments":["second"]},{"Key":"to parse.","Fragments":["Maybe"]},{"Key":"parse. Maybe","Fragments":["`bottles-left`"]},{"Key":"Maybe `bottles-left`","Fragments":["or"]},{"Key":"`bottles-left` or","Fragments":["something"]},{"Key":" `action`","Fragments":["is"]},{"Key":"`action` is","Fragments":["a"]},{"Key":"the method.","Fragments":["I"]},{"Key":"that one!","Fragments":["You"]},{"Key":"one! You","Fragments":["could"]},{"Key":"use `zero?`","Fragments":["instead"]},{"Key":"`zero?` instead","Fragments":["of"]},{"Key":"doing `(=","Fragments":["0"]},{"Key":"notice \"of","Fragments":["beer\""]},{"Key":"\"of beer\"","Fragments":["is"]},{"Key":"beer\" is","Fragments":["repeated"]},{"Key":"is repeated","Fragments":["three"]},{"Key":"repeated three","Fragments":["times"]},{"Key":"three times","Fragments":["in"]},{"Key":"times in","Fragments":["`verse`."]},{"Key":"the terseness","Fragments":["of"]},{"Key":"terseness of","Fragments":["your"]},{"Key":"solution! It's","Fragments":["the"]},{"Key":"shortest one","Fragments":["I've"]},{"Key":"one I've","Fragments":["seen"]},{"Key":"ever seen","Fragments":["`cl-format`"]},{"Key":"seen `cl-format`","Fragments":["after"]},{"Key":"`cl-format` after","Fragments":["a"]},{"Key":"year of","Fragments":["using"]},{"Key":"using Clojure!","Fragments":["Not"]},{"Key":"Clojure! Not","Fragments":["sure"]},{"Key":"means it's","Fragments":["not"]},{"Key":"not idiomatic","Fragments":["or"]},{"Key":"just been","Fragments":["reading"]},{"Key":"been reading","Fragments":["the"]},{"Key":"wrong code","Fragments":["=)"]},{"Key":"duplicate “Take","Fragments":["x"]},{"Key":"“Take x","Fragments":["down"]},{"Key":"x down","Fragments":["and"]},{"Key":"down and","Fragments":["pass"]},{"Key":"and pass","Fragments":["it","the"]},{"Key":"it around”","Fragments":["bit?"]},{"Key":"you've formatted","Fragments":["the"]},{"Key":"formatted the","Fragments":["square"]},{"Key":"brackets on","Fragments":["lines"]},{"Key":"lines 14","Fragments":["and"]},{"Key":"14 and","Fragments":["18"]},{"Key":"and 18","Fragments":["is"]},{"Key":"18 is","Fragments":["at"]},{"Key":"at odds","Fragments":["with"]},{"Key":"odds with","Fragments":["how"]},{"Key":"how I've","Fragments":["seen"]},{"Key":"it done","Fragments":["anywhere"]},{"Key":"done anywhere","Fragments":["else."]},{"Key":"anywhere else.","Fragments":["Also"]},{"Key":"else. Also","Fragments":["the"]},{"Key":"the camelCase","Fragments":["names"]},{"Key":"camelCase names","Fragments":["you"]},{"Key":"names you","Fragments":["give"]},{"Key":"didn't realise","Fragments":["`mod`"]},{"Key":"realise `mod`","Fragments":["worked"]},{"Key":"`mod` worked","Fragments":["that"]},{"Key":"worked that","Fragments":["way"]},{"Key":"with negative","Fragments":["numbers!"]},{"Key":"negative numbers!","Fragments":["Thanks."]},{"Key":"how short","Fragments":["your"]},{"Key":"short your","Fragments":["solution"]},{"Key":"is =)","Fragments":["Funny"]},{"Key":"=) Funny","Fragments":["how"]},{"Key":"Funny how","Fragments":["going"]},{"Key":"how going","Fragments":["for"]},{"Key":"really DRY","Fragments":["solution"]},{"Key":"DRY solution","Fragments":["(like"]},{"Key":"solution (like","Fragments":["I"]},{"Key":"I did)","Fragments":["can"]},{"Key":"did) can","Fragments":["make"]},{"Key":"functions `case`","Fragments":["and"]},{"Key":"`case` and","Fragments":["`dec`.","`cond`","changed"]},{"Key":"and `dec`.","Fragments":["I'm"]},{"Key":"`dec`. I'm","Fragments":["also"]},{"Key":"your one-character","Fragments":["variable"]},{"Key":"one-character variable","Fragments":["names."]},{"Key":"flexible. It","Fragments":["selects"]},{"Key":"It selects","Fragments":["first"]},{"Key":"selects first","Fragments":["value"]},{"Key":"from predicate-\u003eresponse","Fragments":["map,"]},{"Key":"predicate-\u003eresponse map,","Fragments":["for"]},{"Key":"map, for","Fragments":["which"]},{"Key":"which predicate","Fragments":["is"]},{"Key":"is fulfilled.","Fragments":["Special"]},{"Key":"fulfilled. Special","Fragments":["case"]},{"Key":"Special case","Fragments":["is"]},{"Key":"is handled","Fragments":["when"]},{"Key":"handled when","Fragments":["none"]},{"Key":"when none","Fragments":["of"]},{"Key":"predicates matches","Fragments":["input."]},{"Key":"matches input.","Fragments":["To"]},{"Key":"input. To","Fragments":["extends"]},{"Key":"To extends","Fragments":["function"]},{"Key":"extends function","Fragments":["we"]},{"Key":"we simply","Fragments":["need"]},{"Key":"simply need","Fragments":["to"]},{"Key":"add new","Fragments":["predicate-response"]},{"Key":"new predicate-response","Fragments":["pair"]},{"Key":"predicate-response pair","Fragments":["to"]},{"Key":"pair to","Fragments":["the"]},{"Key":"the `response-matches`","Fragments":["map."]},{"Key":"bit shaky","Fragments":["about"]},{"Key":"shaky about","Fragments":["the"]},{"Key":"line 8-9.","Fragments":["I'm"]},{"Key":"8-9. I'm","Fragments":["wondering"]},{"Key":"concise ways","Fragments":["to","of"]},{"Key":"found strange","Fragments":["right"]},{"Key":"strange right","Fragments":["now,"]},{"Key":"now, is","Fragments":["the"]},{"Key":"check at","Fragments":["line"]},{"Key":"line 16.","Fragments":["I"]},{"Key":"16. I","Fragments":["haven't"]},{"Key":"think switch","Fragments":["line"]},{"Key":"switch line","Fragments":["20"]},{"Key":"line 20","Fragments":["and"]},{"Key":"20 and","Fragments":["line"]},{"Key":"21 might","Fragments":["help"]},{"Key":"For `blank?`,","Fragments":["I"]},{"Key":"`blank?`, I","Fragments":["think"]},{"Key":"`clojure.string/blank?` to","Fragments":["determine"]},{"Key":"for `question?`,","Fragments":["specifically"]},{"Key":"`question?`, specifically","Fragments":["at"]},{"Key":"specifically at","Fragments":["line"]},{"Key":"line 15,","Fragments":["I"]},{"Key":"15, I","Fragments":["would"]},{"Key":"see `(last","Fragments":["prompt)`"]},{"Key":"`(last prompt)`","Fragments":["first"]},{"Key":"prompt)` first","Fragments":["and"]},{"Key":"and `\\?`","Fragments":["second.","but"]},{"Key":"line 23,","Fragments":["maybe"]},{"Key":"23, maybe","Fragments":["use"]},{"Key":"maybe use","Fragments":["`:else`"]},{"Key":"`:else` would","Fragments":["be"]},{"Key":"more appropriate.","Fragments":["See"]},{"Key":"appropriate. See","Fragments":["[link"]},{"Key":"See [link","Fragments":["at"]},{"Key":"[link at","Fragments":["Clojure"]},{"Key":"at Clojure","Fragments":["style"]},{"Key":"of chaining.","Fragments":["There"]},{"Key":"chaining. There","Fragments":["is"]},{"Key":"`validate` and","Fragments":["the"]},{"Key":"`map` (adding","Fragments":["another"]},{"Key":"(adding another","Fragments":["map"]},{"Key":"map entry","Fragments":["to"]},{"Key":"entry to","Fragments":["the"]},{"Key":"map doesn't","Fragments":["immediately"]},{"Key":"immediately show","Fragments":["that"]},{"Key":"another entry","Fragments":["needs"]},{"Key":"entry needs","Fragments":["to"]},{"Key":"not all","Fragments":["that"]},{"Key":"that confident","Fragments":["about"]},{"Key":"confident about","Fragments":["this"]},{"Key":"call triml","Fragments":["on"]},{"Key":"triml on","Fragments":["stmt-1"]},{"Key":"on stmt-1","Fragments":["and"]},{"Key":"stmt-1 and","Fragments":["stmt-2,"]},{"Key":"and stmt-2,","Fragments":["although"]},{"Key":"stmt-2, although","Fragments":["I"]},{"Key":"where in","Fragments":["the"]},{"Key":"code beginning","Fragments":["spaces"]},{"Key":"beginning spaces","Fragments":["may"]},{"Key":"spaces may","Fragments":["have"]},{"Key":"trouble getting","Fragments":["the","a"]},{"Key":"the newlines","Fragments":["to"]},{"Key":"newlines to","Fragments":["insert"]},{"Key":"insert correctly","Fragments":["until"]},{"Key":"correctly until","Fragments":["it"]},{"Key":"it dawned","Fragments":["on"]},{"Key":"dawned on","Fragments":["me"]},{"Key":"on me","Fragments":["to"]},{"Key":"3. There","Fragments":["are"]},{"Key":"to `str`","Fragments":["here;"]},{"Key":"`str` here;","Fragments":["I'm"]},{"Key":"here; I'm","Fragments":["sure"]},{"Key":"sure some","Fragments":["of"]},{"Key":"them can","Fragments":["be"]},{"Key":"removed somehow","Fragments":["-"]},{"Key":"somehow -","Fragments":["I"]},{"Key":"4. s/capitalize","Fragments":["is"]},{"Key":"s/capitalize is","Fragments":["in"]},{"Key":"in stmt-1","Fragments":["just"]},{"Key":"stmt-1 just","Fragments":["for"]},{"Key":"final case","Fragments":["where","would"]},{"Key":"an integer.","Fragments":["Seems"]},{"Key":"integer. Seems","Fragments":["inefficient"]},{"Key":"Seems inefficient","Fragments":["but"]},{"Key":"inefficient but","Fragments":["I"]},{"Key":"Nice thing","Fragments":["with"]},{"Key":"with `cond`","Fragments":["macro!"]},{"Key":"`cond` macro!","Fragments":["I"]},{"Key":"macro! I","Fragments":["also"]},{"Key":"you avoided","Fragments":["`.upperCase`"]},{"Key":"avoided `.upperCase`","Fragments":["and"]},{"Key":"`.upperCase` and","Fragments":["`.endsWith`"]},{"Key":"and `.endsWith`","Fragments":["with"]},{"Key":"Clojure built-ins","Fragments":["`upper-case`"]},{"Key":"built-ins `upper-case`","Fragments":["and"]},{"Key":"and `(str","Fragments":["(last"]},{"Key":"`(str (last","Fragments":["%))`"]},{"Key":"(last %))`","Fragments":[":)"]},{"Key":"The `hamming-distance-seq`","Fragments":["function"]},{"Key":"`hamming-distance-seq` function","Fragments":["has"]},{"Key":"function has","Fragments":["some"]},{"Key":"some duplication,","Fragments":["I'm"]},{"Key":"duplication, I'm","Fragments":["wondering"]},{"Key":"I express","Fragments":["it"]},{"Key":"express it","Fragments":["in"]},{"Key":" Discovered","Fragments":["the"]},{"Key":"built-in assert","Fragments":["function."]},{"Key":"make `yelled?`","Fragments":["work"]},{"Key":"`yelled?` work","Fragments":["with"]},{"Key":"one regular","Fragments":["expression","expression"]},{"Key":"expression instead","Fragments":["of"]},{"Key":"of two.","Fragments":["I"]},{"Key":"know Clojure","Fragments":["well"]},{"Key":"Clojure well","Fragments":["enough"]},{"Key":"well enough","Fragments":["to"]},{"Key":"say whether","Fragments":["that"]},{"Key":"that solution","Fragments":["would"]},{"Key":"really elegant","Fragments":["overall"]},{"Key":"elegant overall","Fragments":["structure."]},{"Key":"I explained","Fragments":["my","my"]},{"Key":"explained my","Fragments":["solution","solution"]},{"Key":"bit here:","Fragments":["http://garajeando.blogspot.com.es/2014/08/kata-roman-numerals-in-clojure.html"]},{"Key":"solution here:","Fragments":["http://garajeando.blogspot.com.es/2014/08/kata-prime-factors-in-clojure.html","http://exercism.io/submissions/90e8a26fd7bf2d88914b7674"]},{"Key":" @mustafa","Fragments":["thanks"]},{"Key":"@mustafa thanks","Fragments":["again!"]},{"Key":"thanks again!","Fragments":["I've"]},{"Key":"again! I've","Fragments":["updated"]},{"Key":"some repetition","Fragments":["at"]},{"Key":"repetition at","Fragments":["line"]},{"Key":"13 but","Fragments":["I"]},{"Key":"Now take","Fragments":["a"]},{"Key":"to [preconditions](http://onclojure.com/2010/03/05/pre-and-post-conditions-a-quest-for-a-nicer-syntax/)","Fragments":["-"]},{"Key":"[preconditions](http://onclojure.com/2010/03/05/pre-and-post-conditions-a-quest-for-a-nicer-syntax/) -","Fragments":["it"]},{"Key":"the ```assert```","Fragments":["more"]},{"Key":"```assert``` more","Fragments":["declarative"]},{"Key":"P.S. ```(re-match","Fragments":["...)```"]},{"Key":"```(re-match ...)```","Fragments":["may"]},{"Key":"...)``` may","Fragments":["be"]},{"Key":"a ```(every?","Fragments":["rna-map"]},{"Key":"```(every? rna-map","Fragments":["sequence)```."]},{"Key":"rna-map sequence)```.","Fragments":["And"]},{"Key":"sequence)```. And","Fragments":["voila!"]},{"Key":"And voila!","Fragments":["Now"]},{"Key":"voila! Now","Fragments":["the"]},{"Key":"Now the","Fragments":["precondition"]},{"Key":"precondition will","Fragments":["adapt"]},{"Key":"will adapt","Fragments":["to"]},{"Key":"adapt to","Fragments":["any"]},{"Key":"any changes","Fragments":["of"]},{"Key":"changes of","Fragments":["```rna-map```"]},{"Key":"of ```rna-map```","Fragments":["automatically"]},{"Key":"```rna-map``` automatically","Fragments":[":)"]},{"Key":"Pretty good","Fragments":["I"]},{"Key":"used let,","Fragments":["but"]},{"Key":"but rather","Fragments":["functions"]},{"Key":"rather functions","Fragments":["for"]},{"Key":"for is-question","Fragments":["et"]},{"Key":"is-question et","Fragments":["al."]},{"Key":"of all:","Fragments":["I"]},{"Key":"all: I","Fragments":["am"]},{"Key":"beginner when","Fragments":["it"]},{"Key":"short which","Fragments":["sometimes"]},{"Key":"which sometimes","Fragments":["is"]},{"Key":"sometimes is","Fragments":["good"]},{"Key":"some times","Fragments":["is"]},{"Key":"times is","Fragments":["bad."]},{"Key":"In general","Fragments":["functions"]},{"Key":"general functions","Fragments":["are"]},{"Key":"are free,","Fragments":["so"]},{"Key":"free, so","Fragments":["I"]},{"Key":"would sugges","Fragments":["you"]},{"Key":"sugges you","Fragments":["make"]},{"Key":"make some,","Fragments":["so"]},{"Key":"some, so","Fragments":["the"]},{"Key":"code gets","Fragments":["a"]},{"Key":"However since","Fragments":["this"]},{"Key":"very simple,","Fragments":["it"]},{"Key":"simple, it","Fragments":["is"]},{"Key":"that totally","Fragments":["makes"]},{"Key":"totally makes","Fragments":["sense."]},{"Key":"line 8-9","Fragments":["into"]},{"Key":"8-9 into","Fragments":["a"]},{"Key":"function now.","Fragments":["For"]},{"Key":"now. For","Fragments":["the"]},{"Key":"other 2","Fragments":["cond,"]},{"Key":"2 cond,","Fragments":["since"]},{"Key":"cond, since","Fragments":["they"]},{"Key":"just one-liners,","Fragments":["I"]},{"Key":"one-liners, I","Fragments":["think"]},{"Key":"Hey this","Fragments":["is"]},{"Key":"my submission","Fragments":["and"]},{"Key":"and nitpick","Fragments":["it?"]},{"Key":"mention some","Fragments":["more"]},{"Key":"more things,","Fragments":["that"]},{"Key":"things, that","Fragments":["could"]},{"Key":"Just so","Fragments":["I"]},{"Key":"write idiomatic","Fragments":["Clojure"]},{"Key":"it readable.","Fragments":["The"]},{"Key":"readable. The","Fragments":["second"]},{"Key":"second condition","Fragments":["is"]},{"Key":"little dense.","Fragments":["Maybe"]},{"Key":"dense. Maybe","Fragments":["it"]},{"Key":"fairly readable","Fragments":["code."]},{"Key":"code. But","Fragments":["there"]},{"Key":"things. For","Fragments":["example,"]},{"Key":"letters with","Fragments":["(re-find"]},{"Key":"with (re-find","Fragments":["#\"[a-z||A-Z]+\""]},{"Key":"(re-find #\"[a-z||A-Z]+\"","Fragments":["input)."]},{"Key":"go about","Fragments":["the"]},{"Key":"parameter validation","Fragments":["would"]},{"Key":"Clojure's `:pre`","Fragments":["keyword"]},{"Key":"`:pre` keyword","Fragments":["in"]},{"Key":"keyword in","Fragments":["the"]},{"Key":"1. Indentation","Fragments":["would"]},{"Key":"Indentation would","Fragments":["definitely"]},{"Key":"avoid use","Fragments":["Java"]},{"Key":"Java function(`.endWith`)","Fragments":["if"]},{"Key":"function(`.endWith`) if","Fragments":["it"]},{"Key":"done using","Fragments":["Clojure"]},{"Key":"Wouldn't a","Fragments":["```case```"]},{"Key":"a ```case```","Fragments":["be"]},{"Key":"```case``` be","Fragments":["better"]},{"Key":"```cond``` in","Fragments":["this"]},{"Key":"particular case?","Fragments":["Or"]},{"Key":"even hash-map","Fragments":["in"]},{"Key":"hash-map in","Fragments":["role"]},{"Key":"in role","Fragments":["of"]},{"Key":"role of","Fragments":["function?"]},{"Key":"char from","Fragments":["```char-to-rna```,"]},{"Key":"from ```char-to-rna```,","Fragments":["there"]},{"Key":"```char-to-rna```, there","Fragments":["you"]},{"Key":"replace ```mapcat```","Fragments":["with"]},{"Key":"```mapcat``` with","Fragments":["```map```."]},{"Key":"P.S. The","Fragments":["vectorisation"]},{"Key":"The vectorisation","Fragments":["of"]},{"Key":"vectorisation of","Fragments":["sequence"]},{"Key":"of sequence","Fragments":["is"]},{"Key":"Can the","Fragments":["procondition"]},{"Key":"the procondition","Fragments":["be"]},{"Key":"procondition be","Fragments":["simplified"]},{"Key":"using ```every?```","Fragments":["and"]},{"Key":"```every?``` and","Fragments":["the"]},{"Key":"the ```IFn```","Fragments":["property"]},{"Key":"```IFn``` property","Fragments":["of"]},{"Key":"property of","Fragments":["sets?"]},{"Key":" @matilde","Fragments":["I've"]},{"Key":"@matilde I've","Fragments":["followed"]},{"Key":"followed your","Fragments":["suggestions"]},{"Key":"a [new","Fragments":["iteration](http://exercism.io/submissions/3ddf4c2c7db84da06ef813ee)."]},{"Key":"[new iteration](http://exercism.io/submissions/3ddf4c2c7db84da06ef813ee).","Fragments":["Thanks"]},{"Key":"the all","Fragments":["caps/\"chill"]},{"Key":"all caps/\"chill","Fragments":["out\""]},{"Key":"caps/\"chill out\"","Fragments":["condition."]},{"Key":"out\" condition.","Fragments":["On"]},{"Key":"condition. On","Fragments":["lines"]},{"Key":"On lines","Fragments":["7-8"]},{"Key":"lines 7-8","Fragments":["I"]},{"Key":"7-8 I","Fragments":["traded"]},{"Key":"I traded","Fragments":["readability"]},{"Key":"traded readability","Fragments":["and"]},{"Key":"and brevity","Fragments":["in"]},{"Key":"brevity in","Fragments":["order"]},{"Key":"code working.","Fragments":["If"]},{"Key":"working. If","Fragments":["this"]},{"Key":"this condition","Fragments":["can't"]},{"Key":"condition can't","Fragments":["be"]},{"Key":"made shorter","Fragments":["(maybe"]},{"Key":"shorter (maybe","Fragments":["with"]},{"Key":"(maybe with","Fragments":["a"]},{"Key":"more clever","Fragments":["re-seq)"]},{"Key":"clever re-seq)","Fragments":["then"]},{"Key":"re-seq) then","Fragments":["maybe"]},{"Key":"then maybe","Fragments":["cond"]},{"Key":"maybe cond","Fragments":["isn't"]},{"Key":"cond isn't","Fragments":["the"]},{"Key":"Thanks, will","Fragments":["look"]},{"Key":"Though it's","Fragments":["seemingly"]},{"Key":"it's seemingly","Fragments":["more"]},{"Key":"seemingly more","Fragments":["verbose."]},{"Key":"more verbose.","Fragments":["So"]},{"Key":"verbose. So","Fragments":["I"]},{"Key":"guess I'm","Fragments":["also"]},{"Key":"the neatness/readability","Fragments":["of"]},{"Key":"neatness/readability of","Fragments":["your"]},{"Key":"code. Using","Fragments":["a"]},{"Key":"a blackbox","Fragments":["design"]},{"Key":"blackbox design","Fragments":["for"]},{"Key":"design for","Fragments":["the"]},{"Key":"for is-all-caps?","Fragments":["and"]},{"Key":"is-all-caps? and","Fragments":["ends-with-questionmark?"]},{"Key":"and ends-with-questionmark?","Fragments":["is"]},{"Key":"ends-with-questionmark? is","Fragments":["done"]},{"Key":"done really","Fragments":["well"]},{"Key":" (ends-with-questionmark?","Fragments":["s)"]},{"Key":"(ends-with-questionmark? s)","Fragments":["\"Sure.\""]},{"Key":"(.endsWith s","Fragments":["\"?\")"]},{"Key":"s \"?\")","Fragments":["\"Sure.\""]},{"Key":"be well","Fragments":["served"]},{"Key":"well served","Fragments":["by"]},{"Key":"served by","Fragments":["making"]},{"Key":"making `remove-punctuation`","Fragments":["its"]},{"Key":"`remove-punctuation` its","Fragments":["own"]},{"Key":"own top-level","Fragments":["function"]},{"Key":"top-level function","Fragments":["in"]},{"Key":"simple regular","Fragments":["expression"]},{"Key":"expression would","Fragments":["make"]},{"Key":"make `remove-punctuation`","Fragments":["a"]},{"Key":"`remove-punctuation` a","Fragments":["lot"]},{"Key":"think `(comp","Fragments":["(partial"]},{"Key":"`(comp (partial","Fragments":["...)"]},{"Key":"(partial ...)","Fragments":["(partial"]},{"Key":"...) (partial","Fragments":["...)`"]},{"Key":"(partial ...)`","Fragments":["can"]},{"Key":"...)` can","Fragments":["be","also"]},{"Key":"more succinctly","Fragments":["expressed","with"]},{"Key":"succinctly expressed","Fragments":["by"]},{"Key":"expressed by","Fragments":["using"]},{"Key":"think declaring","Fragments":["lexical"]},{"Key":"declaring lexical","Fragments":["bindings"]},{"Key":"bindings inside","Fragments":["of"]},{"Key":"a `#(...)`","Fragments":["function"]},{"Key":"`#(...)` function","Fragments":["goes"]},{"Key":"function goes","Fragments":["a"]},{"Key":"bit against","Fragments":["the"]},{"Key":"validation somehwere","Fragments":["outside"]},{"Key":"somehwere outside","Fragments":["of"]},{"Key":"body, look","Fragments":["into"]},{"Key":"solved more","Fragments":["elegantly"]},{"Key":"more elegantly","Fragments":["with"]},{"Key":"elegantly with","Fragments":["a"]},{"Key":"certain function","Fragments":["from"]},{"Key":"`core` namespace,","Fragments":["something"]},{"Key":"namespace, something","Fragments":["with"]},{"Key":"using `assert`,","Fragments":["I"]},{"Key":"`assert`, I","Fragments":["think"]},{"Key":"`:pre` annotation","Fragments":["in"]},{"Key":"annotation in","Fragments":["the"]},{"Key":"the `to-rna`","Fragments":["metadata"]},{"Key":"`to-rna` metadata","Fragments":["that"]},{"Key":"that validates","Fragments":["the"]},{"Key":"validates the","Fragments":["argument."]},{"Key":" @rosemarie","Fragments":["thanks"]},{"Key":"@rosemarie thanks","Fragments":["for"]},{"Key":"I routinely","Fragments":["overlook"]},{"Key":"routinely overlook","Fragments":["the"]},{"Key":"overlook the","Fragments":["metadata"]},{"Key":"the metadata","Fragments":["portion"]},{"Key":"metadata portion","Fragments":["of"]},{"Key":"portion of","Fragments":["the"]},{"Key":"definition when","Fragments":["I'm"]},{"Key":"my submission.","Fragments":["http://exercism.io/submissions/e8d6797b60879748b0e1c777"]},{"Key":" @gaetano","Fragments":["alright."]},{"Key":"@gaetano alright.","Fragments":["So,"]},{"Key":"alright. So,","Fragments":["I"]},{"Key":"caught your","Fragments":["last"]},{"Key":"last hint;","Fragments":["using"]},{"Key":"hint; using","Fragments":["every"]},{"Key":"using every","Fragments":["and"]},{"Key":"every and","Fragments":["a"]},{"Key":"of regex.","Fragments":["I"]},{"Key":"regex. I","Fragments":["also"]},{"Key":"some refactoring.","Fragments":["Any"]},{"Key":"refactoring. Any","Fragments":["other"]},{"Key":"Another hint:","Fragments":["sets"]},{"Key":"hint: sets","Fragments":["are"]},{"Key":"are functions,","Fragments":["too,"]},{"Key":"functions, too,","Fragments":["and"]},{"Key":"too, and","Fragments":["can"]},{"Key":"is among","Fragments":["a"]},{"Key":"among a","Fragments":["set"]},{"Key":"`clojure.core` namespace","Fragments":[":-)"]},{"Key":" @brianne","Fragments":["i"]},{"Key":"@brianne i","Fragments":["see."]},{"Key":"i see.","Fragments":["replacing"]},{"Key":"see. replacing","Fragments":["the"]},{"Key":"to `every?`","Fragments":["with"]},{"Key":"`every?` with","Fragments":["a"]},{"Key":"set checking","Fragments":["for"]},{"Key":"for membership.","Fragments":["New"]},{"Key":"membership. New","Fragments":["solution"]},{"Key":"New solution","Fragments":["here:"]},{"Key":"code. Breaking","Fragments":["the"]},{"Key":"the all-alpha-caps?","Fragments":["down"]},{"Key":"all-alpha-caps? down","Fragments":["the"]},{"Key":"did makes","Fragments":["it"]},{"Key":"little long","Fragments":["winded."]},{"Key":"long winded.","Fragments":["I'm"]},{"Key":"winded. I'm","Fragments":["curious"]},{"Key":"use didn't","Fragments":["just"]},{"Key":"didn't just","Fragments":["use"]},{"Key":"the parse-phrase","Fragments":["as"]},{"Key":"parse-phrase as","Fragments":["response-for?"]},{"Key":"Very beautiful","Fragments":["code"]},{"Key":"beautiful code","Fragments":["though."]},{"Key":"naming your","Fragments":["function"]},{"Key":"function parameters","Fragments":["\"input\","]},{"Key":"parameters \"input\",","Fragments":["maybe"]},{"Key":"\"input\", maybe","Fragments":["name"]},{"Key":"maybe name","Fragments":["them"]},{"Key":"them \"s\"","Fragments":["(for"]},{"Key":"\"s\" (for","Fragments":["string),"]},{"Key":"(for string),","Fragments":["the"]},{"Key":"string), the","Fragments":["way"]},{"Key":"`frequencies` directly","Fragments":["in"]},{"Key":"`nucleotide-counts`. But","Fragments":["since"]},{"Key":"the `count`","Fragments":["I"]},{"Key":"`count` I","Fragments":["decided"]},{"Key":"clojure.string/blank? worked.","Fragments":["I"]},{"Key":"worked. I","Fragments":["think"]},{"Key":"was where","Fragments":["that"]},{"Key":"that first","Fragments":["suggestion"]},{"Key":"first suggestion","Fragments":["was"]},{"Key":"suggestion was","Fragments":["leading."]},{"Key":" \\W","Fragments":["is"]},{"Key":"\\W is","Fragments":["a"]},{"Key":"a non-word","Fragments":["character,"]},{"Key":"character, so","Fragments":["that"]},{"Key":"made split-words","Fragments":["simpler."]},{"Key":"Thanks! Didn't","Fragments":["know"]},{"Key":"about blank?","Fragments":["!"]},{"Key":"of if","Fragments":["statements"]},{"Key":"if statements","Fragments":["you're","on"]},{"Key":"statements you're","Fragments":["using."]},{"Key":"you're using.","Fragments":["I"]},{"Key":"using. I","Fragments":["like"]},{"Key":"use separate","Fragments":["functions"]},{"Key":"everything but","Fragments":["the"]},{"Key":"the \"is-yelling\"","Fragments":["test"]},{"Key":"\"is-yelling\" test","Fragments":["-"]},{"Key":"test -","Fragments":["I"]},{"Key":"well for","Fragments":["consistency.","a"]},{"Key":"considered \"yelling\"","Fragments":["to"]},{"Key":"\"yelling\" to","Fragments":["be"]},{"Key":"caps, except","Fragments":["if"]},{"Key":"except if","Fragments":["there"]},{"Key":"no alphabetic","Fragments":["characters."]},{"Key":"alphabetic characters.","Fragments":["Interesting"]},{"Key":"characters. Interesting","Fragments":["that"]},{"Key":"a ratio","Fragments":["instead."]},{"Key":"ratio instead.","Fragments":["You're"]},{"Key":"instead. You're","Fragments":["using"]},{"Key":"string replaces,","Fragments":["but"]},{"Key":"replaces, but","Fragments":["I"]},{"Key":"may suit","Fragments":["what"]},{"Key":"suit what","Fragments":["you"]},{"Key":"want better.","Fragments":["With"]},{"Key":"only get","Fragments":["letters"]},{"Key":"get letters","Fragments":["that"]},{"Key":"letters that","Fragments":["are"]},{"Key":"or lower","Fragments":["case"]},{"Key":"case from","Fragments":["a"]},{"Key":"string. Strings","Fragments":["in"]},{"Key":"actually be","Fragments":["treated"]},{"Key":"treated the","Fragments":["same"]},{"Key":" @alycia,","Fragments":["thanks."]},{"Key":"@alycia, thanks.","Fragments":["However,"]},{"Key":"thanks. However,","Fragments":["I'll"]},{"Key":"However, I'll","Fragments":["still"]},{"Key":"I'll still","Fragments":["need"]},{"Key":"the `upper-case`d","Fragments":["and"]},{"Key":"`upper-case`d and","Fragments":["`lower-case`d"]},{"Key":"and `lower-case`d","Fragments":["versions"]},{"Key":"`lower-case`d versions","Fragments":["since"]},{"Key":"versions since","Fragments":["\"123\""]},{"Key":"since \"123\"","Fragments":["is"]},{"Key":"\"123\" is","Fragments":["not"]},{"Key":"not shouting","Fragments":["even"]},{"Key":"though `(=","Fragments":["(upper-case"]},{"Key":"`(= (upper-case","Fragments":["\"123\")"]},{"Key":"(upper-case \"123\")","Fragments":["\"123\")`."]},{"Key":"\"123\") \"123\")`.","Fragments":["So"]},{"Key":"\"123\")`. So","Fragments":["what"]},{"Key":"doing now","Fragments":["isn't"]},{"Key":"now isn't","Fragments":["that"]},{"Key":"1. `reduce-kv`","Fragments":["could"]},{"Key":"`reduce-kv` could","Fragments":["help"]},{"Key":"make `sorted`","Fragments":["neater."]},{"Key":"2. `let`","Fragments":["block"]},{"Key":"block and","Fragments":["`nil`"]},{"Key":"and `nil`","Fragments":["check"]},{"Key":"`nil` check","Fragments":["in"]},{"Key":"`grade` are","Fragments":["redundant."]},{"Key":"are redundant.","Fragments":["`coll"]},{"Key":"redundant. `coll","Fragments":["grade"]},{"Key":"`coll grade","Fragments":["[]`"]},{"Key":"grade []`","Fragments":["is"]},{"Key":"[]` is","Fragments":["enough"]},{"Key":"of lowercasing","Fragments":["is"]},{"Key":"lowercasing is","Fragments":["spread"]},{"Key":"is spread","Fragments":["out"]},{"Key":"spread out","Fragments":["in"]},{"Key":"different functions.","Fragments":["Better"]},{"Key":"functions. Better","Fragments":["have"]},{"Key":"Better have","Fragments":["them"]},{"Key":"how everything","Fragments":["is"]},{"Key":"contained in","Fragments":["a","the"]},{"Key":"letters (re-find","Fragments":["#\"[A-Z]\""]},{"Key":"(re-find #\"[A-Z]\"","Fragments":["v)."]},{"Key":"#\"[A-Z]\" v).","Fragments":["There"]},{"Key":"v). There","Fragments":["are"]},{"Key":"many capital","Fragments":["letters"]},{"Key":"letters (for","Fragments":["example"]},{"Key":"example Cyrillic)","Fragments":["that"]},{"Key":"Cyrillic) that","Fragments":["will"]},{"Key":"be missed","Fragments":["by"]},{"Key":"missed by","Fragments":["this"]},{"Key":"this pattern.","Fragments":["You"]},{"Key":"pattern. You","Fragments":["can"]},{"Key":"can look","Fragments":["into"]},{"Key":"into isLetter","Fragments":["or"]},{"Key":"isLetter or","Fragments":["isAlphabetical."]},{"Key":"or isAlphabetical.","Fragments":["The"]},{"Key":"isAlphabetical. The","Fragments":["spec"]},{"Key":"spec if","Fragments":["as"]},{"Key":"if as","Fragments":["open-ended"]},{"Key":"as open-ended","Fragments":["as"]},{"Key":"open-ended as","Fragments":["they"]},{"Key":"they get,","Fragments":["but"]},{"Key":"get, but","Fragments":["it"]},{"Key":"say \"Good","Fragments":["code"]},{"Key":"\"Good code","Fragments":["doesn't"]},{"Key":"doesn't just","Fragments":["pass","pass"]},{"Key":"suite, it","Fragments":["works","works"]},{"Key":"that fits","Fragments":["the","the"]},{"Key":"the specification\".","Fragments":["And"]},{"Key":"specification\". And","Fragments":["in"]},{"Key":"And in","Fragments":["today's"]},{"Key":"in today's","Fragments":["world"]},{"Key":"today's world","Fragments":["a"]},{"Key":"world a","Fragments":["lot"]},{"Key":"people expect","Fragments":["to"]},{"Key":"to shout","Fragments":["at"]},{"Key":"shout at","Fragments":["Bob"]},{"Key":"at Bob","Fragments":["in"]},{"Key":"Bob in","Fragments":["their"]},{"Key":"their native","Fragments":["language"]},{"Key":"native language","Fragments":[":-)"]},{"Key":"about trimming","Fragments":["the"]},{"Key":"trimming the","Fragments":["phrase"]},{"Key":"phrase ?","Fragments":["(Should"]},{"Key":"? (Should","Fragments":["we"]},{"Key":"(Should we","Fragments":["treat"]},{"Key":"we treat","Fragments":["\"How"]},{"Key":"treat \"How","Fragments":["are"]},{"Key":"\"How are","Fragments":["you"]},{"Key":"you ?","Fragments":["\""]},{"Key":"? \"","Fragments":["as"]},{"Key":"\" as","Fragments":["a"]},{"Key":"question with","Fragments":["whitespace"]},{"Key":"mark would","Fragments":["not"]},{"Key":"at clojure.","Fragments":["any"]},{"Key":"clojure. any","Fragments":["comments"]},{"Key":"any comments","Fragments":["regarding"]},{"Key":"comments regarding","Fragments":["style/coding"]},{"Key":"regarding style/coding","Fragments":["conventions"]},{"Key":"style/coding conventions","Fragments":["much"]},{"Key":"conventions much","Fragments":["appreciated"]},{"Key":"for loop","Fragments":["to"]},{"Key":"to loop","Fragments":["over"]},{"Key":"nucleotides and","Fragments":["transcribe"]},{"Key":"and transcribe","Fragments":["them"]},{"Key":"transcribe them","Fragments":["and"]},{"Key":"and accumulate","Fragments":["the"]},{"Key":"accumulate the","Fragments":["result"]},{"Key":"result I","Fragments":["went"]},{"Key":"iterative transcribe","Fragments":["method."]},{"Key":"how errors","Fragments":["work"]},{"Key":"errors work","Fragments":["in"]},{"Key":"I built","Fragments":["my"]},{"Key":"built my","Fragments":["own"]},{"Key":"own string","Fragments":["methods"]},{"Key":"methods to","Fragments":["use"]},{"Key":"the transcribe","Fragments":["algorithm.","function"]},{"Key":" user:","Fragments":["\\A","\"A\""]},{"Key":" (first-str","Fragments":["\"ACATA\")"]},{"Key":"Which made","Fragments":["it"]},{"Key":"to concatenate","Fragments":["the","everything"]},{"Key":"concatenate the","Fragments":["growing"]},{"Key":"the growing","Fragments":["rna"]},{"Key":"growing rna","Fragments":["string"]},{"Key":"rna string","Fragments":["and"]},{"Key":"and chop","Fragments":["up"]},{"Key":"chop up","Fragments":["the"]},{"Key":"the shortening","Fragments":["dna"]},{"Key":"shortening dna","Fragments":["string"]},{"Key":"Oh nice!","Fragments":["I'm"]},{"Key":"nice! I'm","Fragments":["still"]},{"Key":"neat that","Fragments":["you"]},{"Key":"filter over","Fragments":["it."]},{"Key":"the `is-yelling`","Fragments":["thing,"]},{"Key":"`is-yelling` thing,","Fragments":["I"]},{"Key":"that because","Fragments":["having"]},{"Key":"because having","Fragments":["the","sentence"]},{"Key":"comparison there","Fragments":["looked"]},{"Key":"there looked","Fragments":["a"]},{"Key":"ugly. However,","Fragments":["that"]},{"Key":"out easily.","Fragments":["(And"]},{"Key":"easily. (And","Fragments":["yea,"]},{"Key":"(And yea,","Fragments":["would"]},{"Key":"yea, would","Fragments":["look"]},{"Key":"more uniform","Fragments":["overall.)"]},{"Key":"good! Easy","Fragments":["to"]},{"Key":"Easy to","Fragments":["read."]},{"Key":"would privatize","Fragments":["the"]},{"Key":"privatize the","Fragments":["first"]},{"Key":"first three","Fragments":["functions"]},{"Key":"with `defn-`.","Fragments":["And"]},{"Key":"`defn-`. And","Fragments":["you"]},{"Key":"consider renaming","Fragments":["`uppercase-only?`"]},{"Key":"renaming `uppercase-only?`","Fragments":["so"]},{"Key":"`uppercase-only?` so","Fragments":["that"]},{"Key":"it describes","Fragments":["a"]},{"Key":"describes a","Fragments":["concept"]},{"Key":"a concept","Fragments":["in","called"]},{"Key":"concept in","Fragments":["the","Anagrams","Anagrams"]},{"Key":"domain rather","Fragments":["than"]},{"Key":"it's doing","Fragments":["in"]},{"Key":"the implementation.","Fragments":["Maybe"]},{"Key":"implementation. Maybe","Fragments":["something"]},{"Key":" @garland","Fragments":["I"]},{"Key":"@garland I","Fragments":["have"]},{"Key":"no comment","Fragments":["strategy"]},{"Key":"strategy XD,","Fragments":["and"]},{"Key":"XD, and","Fragments":["I'm"]},{"Key":"clojure n00b.","Fragments":["I"]},{"Key":"n00b. I","Fragments":["try"]},{"Key":"try come","Fragments":["up"]},{"Key":"end function","Fragments":["names"]},{"Key":"mark. I","Fragments":["don't"]},{"Key":"basics of","Fragments":["the"]},{"Key":"language. There's","Fragments":["a"]},{"Key":"great interactive","Fragments":["tutorial"]},{"Key":"interactive tutorial","Fragments":["here"]},{"Key":"tutorial here","Fragments":["http://tryclj.com/"]},{"Key":"here http://tryclj.com/","Fragments":["=)"]},{"Key":"Seems like","Fragments":["I'm","you"]},{"Key":"using str/lower-case","Fragments":["way"]},{"Key":"str/lower-case way","Fragments":["too"]},{"Key":"much. BUT","Fragments":["i"]},{"Key":"BUT i","Fragments":["figured"]},{"Key":"i figured","Fragments":["out"]},{"Key":"that (fn","Fragments":["[arg]"]},{"Key":"(fn [arg]","Fragments":["(println"]},{"Key":"[arg] (println","Fragments":["arg))"]},{"Key":"(println arg))","Fragments":["is"]},{"Key":"arg)) is","Fragments":["equivalent"]},{"Key":"to #(println","Fragments":["%)."]},{"Key":"#(println %).","Fragments":["so"]},{"Key":"%). so","Fragments":["that's"]},{"Key":"Well, at","Fragments":["least"]},{"Key":"least it's","Fragments":["not"]},{"Key":"not LISP","Fragments":[":-)"]},{"Key":"disagree :-)","Fragments":["If"]},{"Key":":-) If","Fragments":["the"]},{"Key":"not pseudo-explicatory,","Fragments":["the"]},{"Key":"pseudo-explicatory, the","Fragments":["comments"]},{"Key":"will really","Fragments":["help"]},{"Key":"really help","Fragments":["those"]},{"Key":"help those","Fragments":["coming"]},{"Key":"those coming","Fragments":["to"]},{"Key":"coming to","Fragments":["touch"]},{"Key":"to touch","Fragments":["the"]},{"Key":"touch the","Fragments":["code"]},{"Key":"after you.","Fragments":["I"]},{"Key":"I dont","Fragments":["mean"]},{"Key":"dont mean","Fragments":["one"]},{"Key":"mean one","Fragments":["should"]},{"Key":"one should","Fragments":["comment"]},{"Key":"should comment","Fragments":["every"]},{"Key":"comment every","Fragments":["line,"]},{"Key":"every line,","Fragments":["but"]},{"Key":"line, but","Fragments":["give"]},{"Key":"but give","Fragments":["some"]},{"Key":"clarity where","Fragments":["you"]},{"Key":"made distinct","Fragments":["tradeoffs."]},{"Key":"no previous","Fragments":["experience"]},{"Key":"previous experience","Fragments":["with"]},{"Key":"really starting","Fragments":["from"]},{"Key":"from scratch.","Fragments":["After"]},{"Key":"scratch. After","Fragments":["about"]},{"Key":"After about","Fragments":["6"]},{"Key":"about 6","Fragments":["hours,"]},{"Key":"6 hours,","Fragments":["this"]},{"Key":"hours, this","Fragments":["was"]},{"Key":"It's amazing","Fragments":["how"]},{"Key":"amazing how","Fragments":["a"]},{"Key":"how a","Fragments":["person"]},{"Key":"person unacclimated","Fragments":["to"]},{"Key":"unacclimated to","Fragments":["Lispy"]},{"Key":"to Lispy","Fragments":["languages"]},{"Key":"Lispy languages","Fragments":["can"]},{"Key":"languages can","Fragments":["overcomplicate"]},{"Key":"can overcomplicate","Fragments":["them"]},{"Key":"overcomplicate them","Fragments":["with"]},{"Key":"such great","Fragments":["ease."]},{"Key":"great ease.","Fragments":["Homoidiotic"]},{"Key":"ease. Homoidiotic","Fragments":["code"]},{"Key":"Homoidiotic code","Fragments":["was"]},{"Key":"code was","Fragments":["not"]},{"Key":"much massaged","Fragments":["as"]},{"Key":"massaged as","Fragments":["given"]},{"Key":"as given","Fragments":["crush-syndrome"]},{"Key":"given crush-syndrome","Fragments":["in"]},{"Key":"crush-syndrome in","Fragments":["order"]},{"Key":"those tests,","Fragments":["but"]},{"Key":"but (with","Fragments":["thanks"]},{"Key":"(with thanks","Fragments":["to"]},{"Key":"to [Clojure","Fragments":["for"]},{"Key":"[Clojure for","Fragments":["the","the"]},{"Key":"the Brave","Fragments":["and","and"]},{"Key":"Brave and","Fragments":["True](http://braveclojure.com))","True](http://www.braveclojure.com/)"]},{"Key":"and True](http://braveclojure.com))","Fragments":["I"]},{"Key":"True](http://braveclojure.com)) I","Fragments":["was"]},{"Key":"to accomplish.","Fragments":["I"]},{"Key":"accomplish. I","Fragments":["had"]},{"Key":"had originally","Fragments":["attempted"]},{"Key":"originally attempted","Fragments":["to"]},{"Key":"the bizarro-world","Fragments":["version"]},{"Key":"bizarro-world version","Fragments":["of"]},{"Key":"this, in","Fragments":["which"]},{"Key":"which `(apply","Fragments":["str"]},{"Key":"...)` was","Fragments":["a"]},{"Key":"a contraption","Fragments":["utilizing"]},{"Key":"contraption utilizing","Fragments":["`string/split`,"]},{"Key":"utilizing `string/split`,","Fragments":["`string/join`,"]},{"Key":"`string/split`, `string/join`,","Fragments":["`map`"]},{"Key":"`string/join`, `map`","Fragments":["and"]},{"Key":"and `transcribe`,","Fragments":["the"]},{"Key":"`transcribe`, the","Fragments":["last"]},{"Key":"last of","Fragments":["which"]},{"Key":"which attempting","Fragments":["to"]},{"Key":"too witty","Fragments":["for"]},{"Key":"witty for","Fragments":["its"]},{"Key":"own good,","Fragments":["never"]},{"Key":"good, never","Fragments":["both"]},{"Key":"never both","Fragments":["working"]},{"Key":"both working","Fragments":["and"]},{"Key":"working and","Fragments":["compiling"]},{"Key":"and compiling","Fragments":["at"]},{"Key":"compiling at","Fragments":["the"]},{"Key":"time. But","Fragments":["by"]},{"Key":"But by","Fragments":["simplifying"]},{"Key":"simplifying a","Fragments":["lot"]},{"Key":"lot (and","Fragments":["finally"]},{"Key":"(and finally","Fragments":["making"]},{"Key":"finally making","Fragments":["sense"]},{"Key":"making sense","Fragments":["of"]},{"Key":"the `(apply)`","Fragments":["function),"]},{"Key":"`(apply)` function),","Fragments":["I"]},{"Key":"function), I","Fragments":["was"]},{"Key":"finally pass","Fragments":["the"]},{"Key":" Clojure,","Fragments":["man."]},{"Key":"Clojure, man.","Fragments":["Maybe"]},{"Key":"man. Maybe","Fragments":["the"]},{"Key":"worst readable","Fragments":["language"]},{"Key":"readable language","Fragments":["since"]},{"Key":"language since","Fragments":["assembler"]},{"Key":"since assembler","Fragments":[":S"]},{"Key":"yeah, but","Fragments":["nothing"]},{"Key":"but nothing","Fragments":["that"]},{"Key":"fixed if","Fragments":["our"]},{"Key":"if our","Fragments":["friend"]},{"Key":"our friend","Fragments":["Marcelo"]},{"Key":"friend Marcelo","Fragments":["would"]},{"Key":"Marcelo would","Fragments":["care"]},{"Key":"would care","Fragments":["to"]},{"Key":"to COMMENT","Fragments":["HIS"]},{"Key":"COMMENT HIS","Fragments":["CODE"]},{"Key":"HIS CODE","Fragments":["!!!!"]},{"Key":"CODE !!!!","Fragments":[":-)"]},{"Key":" `is-shouting-char`","Fragments":["could"]},{"Key":"`is-shouting-char` could","Fragments":["probably"]},{"Key":"be inlined,","Fragments":["same"]},{"Key":"inlined, same","Fragments":["as"]},{"Key":"as `is-alphabetic`","Fragments":["I"]},{"Key":"`is-alphabetic` I","Fragments":["guess."]},{"Key":"another version","Fragments":["with"]},{"Key":" comments","Fragments":["in"]},{"Key":"comments in","Fragments":["clojure"]},{"Key":"clojure start","Fragments":["with"]},{"Key":"a semicolon","Fragments":["\";\""]},{"Key":" functions","Fragments":["are"]},{"Key":"are declared","Fragments":["with"]},{"Key":"declared with","Fragments":["defn,"]},{"Key":"with defn,","Fragments":["and"]},{"Key":"defn, and","Fragments":["the"]},{"Key":"string that","Fragments":["follows"]},{"Key":"that follows","Fragments":["the"]},{"Key":"follows the","Fragments":["function's"]},{"Key":"function's name","Fragments":["is"]},{"Key":"a docstring,","Fragments":["it's"]},{"Key":"docstring, it's","Fragments":["better"]},{"Key":"(defn function-name","Fragments":["[function-args]"]},{"Key":"function-name [function-args]","Fragments":["(function-body))"]},{"Key":"uses prefix","Fragments":["notation"]},{"Key":"notation (+","Fragments":["1"]},{"Key":"1 2","Fragments":["3),"]},{"Key":"2 3),","Fragments":["we"]},{"Key":"3), we","Fragments":["are"]},{"Key":"to infix","Fragments":["notation"]},{"Key":"infix notation","Fragments":["(1"]},{"Key":"notation (1","Fragments":["+"]},{"Key":"(1 +","Fragments":["2"]},{"Key":"+ 2","Fragments":["+"]},{"Key":"2 +","Fragments":["3)"]},{"Key":"+ 3)","Fragments":["so"]},{"Key":"3) so","Fragments":["at"]},{"Key":"first this","Fragments":["seems"]},{"Key":"this seems","Fragments":["alien"]},{"Key":"seems alien","Fragments":["to"]},{"Key":"alien to","Fragments":["us."]},{"Key":"Hope this","Fragments":["helps"]},{"Key":"this helps","Fragments":["clarify"]},{"Key":"helps clarify","Fragments":["some"]},{"Key":"clarify some","Fragments":["things"]},{"Key":"Yeah, everything","Fragments":["hurts"]},{"Key":"everything hurts","Fragments":["at"]},{"Key":"hurts at","Fragments":["fists"]},{"Key":"at fists","Fragments":[":)"]},{"Key":"First thing","Fragments":["ever"]},{"Key":"thing ever","Fragments":["with"]},{"Key":"ever with","Fragments":["Clojure."]},{"Key":"with Clojure.","Fragments":["I"]},{"Key":"the ***shouting***","Fragments":["function."]},{"Key":"***shouting*** function.","Fragments":["Had"]},{"Key":"function. Had","Fragments":["lots"]},{"Key":"Had lots","Fragments":["of"]},{"Key":"loop working","Fragments":["how"]},{"Key":"working how","Fragments":["I"]},{"Key":"wanted it.","Fragments":["Need"]},{"Key":"it. Need","Fragments":["to"]},{"Key":"how looping","Fragments":["works"]},{"Key":"looping works","Fragments":["in"]},{"Key":"Try putting","Fragments":["a"]},{"Key":"a `defn-`","Fragments":["up"]},{"Key":"`defn-` up","Fragments":["before"]},{"Key":"up before","Fragments":["your"]},{"Key":"before your","Fragments":["`response-for`"]},{"Key":"can encapsulate","Fragments":["determining"]},{"Key":"encapsulate determining","Fragments":["whether"]},{"Key":"shout. Then","Fragments":["you"]},{"Key":"your main","Fragments":["method"]},{"Key":"`:refer` up","Fragments":["in"]},{"Key":"your `:require`","Fragments":["so"]},{"Key":"namespace join","Fragments":["in"]},{"Key":"join in","Fragments":["`to-rna`."]},{"Key":"Overall, it's","Fragments":["nice"]},{"Key":"readable. Maybe","Fragments":["create"]},{"Key":"Maybe create","Fragments":["a"]},{"Key":"to abstract","Fragments":["out"]},{"Key":"abstract out","Fragments":["some"]},{"Key":"what `to-rna`","Fragments":["is"]},{"Key":"`to-rna` is","Fragments":["doing."]},{"Key":"code fails","Fragments":["if"]},{"Key":"fails if","Fragments":["you"]},{"Key":"conditional checks.","Fragments":["Is"]},{"Key":"checks. Is","Fragments":["there"]},{"Key":"conditional checks","Fragments":["in"]},{"Key":"any order","Fragments":["you"]},{"Key":"order you","Fragments":["want?"]},{"Key":" \"Generates","Fragments":["Bob's","Bob's"]},{"Key":"\"Generates Bob's","Fragments":["response","response"]},{"Key":"Bob's response","Fragments":["to","to"]},{"Key":"given stmt.","Fragments":["The","The"]},{"Key":"stmt. The","Fragments":["ordering","ordering"]},{"Key":"ordering here","Fragments":["is","is"]},{"Key":"is important,","Fragments":["for","for"]},{"Key":"the interpreted","Fragments":["priority","priority"]},{"Key":"interpreted priority","Fragments":["of","of"]},{"Key":"priority of","Fragments":["different","different"]},{"Key":"(silence? stmt)","Fragments":["\"Fine.","\"Fine."]},{"Key":"stmt) \"Fine.","Fragments":["Be","Be"]},{"Key":"(shouting? stmt)","Fragments":["\"Woah,","\"Woah,"]},{"Key":"stmt) \"Woah,","Fragments":["chill","chill"]},{"Key":"(question? stmt)","Fragments":["\"Sure.\"","\"Sure.\""]},{"Key":"a Regular","Fragments":["Expression"]},{"Key":"Regular Expression","Fragments":["problem"]},{"Key":"Expression problem","Fragments":["although"]},{"Key":"problem although","Fragments":["I"]},{"Key":"people coding","Fragments":["it"]},{"Key":"coding it","Fragments":["by"]},{"Key":"by comparing","Fragments":["the"]},{"Key":"it's upper","Fragments":["case"]},{"Key":"case transform,","Fragments":["etc."]},{"Key":"transform, etc.","Fragments":["Some"]},{"Key":"etc. Some","Fragments":["make"]},{"Key":"Some make","Fragments":["the"]},{"Key":"any language,","Fragments":["not"]},{"Key":"language, not","Fragments":["just"]},{"Key":"just English.","Fragments":["I"]},{"Key":"English. I","Fragments":["think"]},{"Key":"the RE","Fragments":["approach"]},{"Key":"RE approach","Fragments":["allows"]},{"Key":"approach allows","Fragments":["one"]},{"Key":"allows one","Fragments":["to"]},{"Key":"the target","Fragments":["language","word","in"]},{"Key":"target language","Fragments":["as"]},{"Key":"know Java","Fragments":["and"]},{"Key":"of tutorial","Fragments":["information"]},{"Key":"tutorial information","Fragments":["on"]},{"Key":"information on","Fragments":["Regexps"]},{"Key":"on Regexps","Fragments":["in"]},{"Key":"Regexps in","Fragments":["Clojure"]},{"Key":"Clojure out","Fragments":["there."]},{"Key":"out there.","Fragments":["I"]},{"Key":"the Shouting!","Fragments":["part"]},{"Key":"Shouting! part","Fragments":["of"]},{"Key":"exercise. Any","Fragments":["suggestions"]},{"Key":"Any suggestions","Fragments":["on"]},{"Key":"on improvements","Fragments":["are"]},{"Key":"improvements are","Fragments":["welcome!"]},{"Key":" (string/blank?","Fragments":["s)","s)"]},{"Key":"(string/blank? s)","Fragments":["\"Fine.","\"Fine."]},{"Key":" (all-upper-case?","Fragments":["s)","s)"]},{"Key":"(all-upper-case? s)","Fragments":["\"Woah,","\"Woah,"]},{"Key":" (ends-with-q?","Fragments":["s)","s)"]},{"Key":"(ends-with-q? s)","Fragments":["\"Sure.\"","\"Sure.\""]},{"Key":"Hey, code","Fragments":["creator"]},{"Key":"code creator","Fragments":["here,"]},{"Key":" Bit","Fragments":["of"]},{"Key":"Bit of","Fragments":["a"]},{"Key":"a nasty","Fragments":["loaded"]},{"Key":"nasty loaded","Fragments":["function,"]},{"Key":"loaded function,","Fragments":["would"]},{"Key":"function, would","Fragments":["be"]},{"Key":"be keen","Fragments":["to"]},{"Key":"keen to","Fragments":["learn"]},{"Key":"new ways","Fragments":["to"]},{"Key":"at this.","Fragments":["I'm"]},{"Key":"the SHOUTING!","Fragments":["isn't"]},{"Key":"SHOUTING! isn't","Fragments":["complete,"]},{"Key":"isn't complete,","Fragments":["but"]},{"Key":"complete, but","Fragments":["wanted"]},{"Key":"some good","Fragments":["feedback"]},{"Key":"feedback to","Fragments":["get"]},{"Key":"it set","Fragments":["up"]},{"Key":"up more","Fragments":["logically."]},{"Key":"only solution","Fragments":["I"]},{"Key":"I an","Fragments":["come"]},{"Key":"an come","Fragments":["up"]},{"Key":"with at","Fragments":["the"]},{"Key":"moment is","Fragments":["more"]},{"Key":"more repetitive","Fragments":["than"]},{"Key":"repetitive than","Fragments":["I"]},{"Key":"be, so","Fragments":["at"]},{"Key":"very moment","Fragments":["I'm"]},{"Key":"moment I'm","Fragments":["a"]},{"Key":"bit stumped,","Fragments":["@keely."]},{"Key":"stumped, @keely.","Fragments":["There"]},{"Key":"@keely. There","Fragments":["might"]},{"Key":"a single-recurse","Fragments":["option"]},{"Key":"single-recurse option","Fragments":["I"]},{"Key":"option I","Fragments":["can"]},{"Key":"can refactor","Fragments":["the"]},{"Key":"the repetitive","Fragments":["idea"]},{"Key":"repetitive idea","Fragments":["into,"]},{"Key":"idea into,","Fragments":["but"]},{"Key":"into, but","Fragments":["I"]},{"Key":"a break.","Fragments":[";)"]},{"Key":"Ooh, I","Fragments":["wasn't"]},{"Key":"that construction.","Fragments":["Thanks!"]},{"Key":"Just trying","Fragments":["to"]},{"Key":"work. I'm","Fragments":["not"]},{"Key":"is spaced","Fragments":["out."]},{"Key":"spaced out.","Fragments":["I'd"]},{"Key":"out. I'd","Fragments":["rather"]},{"Key":"return values","Fragments":["on"]},{"Key":"values on","Fragments":["the"]},{"Key":"same lines","Fragments":["as"]},{"Key":"lines as","Fragments":["their"]},{"Key":"as their","Fragments":["triggering"]},{"Key":"their triggering","Fragments":["conditions."]},{"Key":"(assert (nil?","Fragments":["nuc-comp))"]},{"Key":"calling Java's","Fragments":["`AssertionError`."]},{"Key":"Edit: It","Fragments":["also"]},{"Key":"The naming","Fragments":["nucleotid"]},{"Key":"naming nucleotid","Fragments":["is"]},{"Key":"nucleotid is","Fragments":["clear"]},{"Key":"clear (but","Fragments":["domain-specific)."]},{"Key":"the efficiency","Fragments":["of"]},{"Key":"efficiency of","Fragments":["that."]},{"Key":"that. If","Fragments":["I"]},{"Key":"I follow","Fragments":["correctly,"]},{"Key":"follow correctly,","Fragments":["for"]},{"Key":"correctly, for","Fragments":["the"]},{"Key":" \"CGTAX\",","Fragments":["you"]},{"Key":"\"CGTAX\", you","Fragments":["will"]},{"Key":"* The","Fragments":["sequence"]},{"Key":"The sequence","Fragments":["`(\\C"]},{"Key":"sequence `(\\C","Fragments":["\\G"]},{"Key":"`(\\C \\G","Fragments":["\\A"]},{"Key":"\\A \\U","Fragments":["nil)`"]},{"Key":"\\U nil)`","Fragments":["(after"]},{"Key":"nil)` (after","Fragments":["the"]},{"Key":"* Then","Fragments":["during"]},{"Key":"Then during","Fragments":["the"]},{"Key":"the reduction,","Fragments":["you'll"]},{"Key":"reduction, you'll","Fragments":["produce"]},{"Key":"you'll produce","Fragments":["all"]},{"Key":"produce all","Fragments":["the"]},{"Key":"intermediate strings","Fragments":["(unless"]},{"Key":"strings (unless","Fragments":["there"]},{"Key":"(unless there","Fragments":["is"]},{"Key":"an optimisation","Fragments":["in"]},{"Key":"optimisation in","Fragments":["str"]},{"Key":"str that","Fragments":["I"]},{"Key":"know of)","Fragments":[":"]},{"Key":"of) :","Fragments":["\"C\","]},{"Key":": \"C\",","Fragments":["\"CG\","]},{"Key":"\"C\", \"CG\",","Fragments":["\"CGA\","]},{"Key":"\"CG\", \"CGA\",","Fragments":["etc..."]},{"Key":"* All","Fragments":["that"]},{"Key":"All that","Fragments":["to"]},{"Key":"up throwing","Fragments":["an"]},{"Key":"exception because","Fragments":["the"]},{"Key":"last base","Fragments":["was"]},{"Key":"base was","Fragments":["invalid."]},{"Key":"solution, I","Fragments":["chose"]},{"Key":"directly produce","Fragments":["a"]},{"Key":"produce a","Fragments":["sequence"]},{"Key":"RNA base,","Fragments":["throwing"]},{"Key":"base, throwing","Fragments":["as"]},{"Key":"throwing as","Fragments":["soon"]},{"Key":"is invalid,","Fragments":["and"]},{"Key":"invalid, and","Fragments":["using"]},{"Key":"single \"str\"","Fragments":["call"]},{"Key":"\"str\" call","Fragments":["to"]},{"Key":"concatenate everything","Fragments":["(although"]},{"Key":"everything (although","Fragments":["I"]},{"Key":"(although I","Fragments":["don't"]},{"Key":"how optimized","Fragments":["a"]},{"Key":"optimized a","Fragments":["single"]},{"Key":"single str","Fragments":["call"]},{"Key":"str call","Fragments":["can"]},{"Key":"call can","Fragments":["be.)"]},{"Key":"The is-cap-or-nonalpha","Fragments":["name"]},{"Key":"is-cap-or-nonalpha name","Fragments":["is"]},{"Key":"good (it","Fragments":["clarifies"]},{"Key":"(it clarifies","Fragments":["that"]},{"Key":"clarifies that","Fragments":["you"]},{"Key":"against '!',","Fragments":["'?'"]},{"Key":"'!', '?'","Fragments":["and"]},{"Key":"'?' and","Fragments":["such)."]},{"Key":"main body,","Fragments":["you'll"]},{"Key":"body, you'll","Fragments":["compute"]},{"Key":"you'll compute","Fragments":["is-yelling"]},{"Key":"compute is-yelling","Fragments":["and"]},{"Key":"is-yelling and","Fragments":["question"]},{"Key":"all cases,","Fragments":["whereas"]},{"Key":"cases, whereas","Fragments":["you"]},{"Key":"whereas you","Fragments":["could"]},{"Key":"could stop","Fragments":["as"]},{"Key":"stop as","Fragments":["soon"]},{"Key":"Also, is","Fragments":["the"]},{"Key":"the (seq","Fragments":["text)"]},{"Key":"(seq text)","Fragments":["needed"]},{"Key":"text) needed","Fragments":["to"]},{"Key":"to iterate","Fragments":["with","as"]},{"Key":"iterate with","Fragments":["some"]},{"Key":"or every?","Fragments":["?"]},{"Key":"the detailed","Fragments":["comment!"]},{"Key":"detailed comment!","Fragments":["I'll"]},{"Key":"comment! I'll","Fragments":["give"]},{"Key":"it another","Fragments":["try."]},{"Key":"Could optimize","Fragments":["it"]},{"Key":"optimize it","Fragments":["by"]},{"Key":"calling \"valid?\"","Fragments":["only"]},{"Key":"\"valid?\" only","Fragments":["once"]},{"Key":"once but","Fragments":["then"]},{"Key":"then how","Fragments":["to"]},{"Key":" Mostly","Fragments":["in"]},{"Key":"Mostly in","Fragments":["the"]},{"Key":"comments. Defined","Fragments":["the"]},{"Key":"Defined the","Fragments":["predicates"]},{"Key":"be self-contained","Fragments":["tests"]},{"Key":"self-contained tests","Fragments":["on"]},{"Key":"tests on","Fragments":["the"]},{"Key":"input. Added","Fragments":["a"]},{"Key":"the bob-question","Fragments":["predicate"]},{"Key":"bob-question predicate","Fragments":["to"]},{"Key":"a dependency","Fragments":["on"]},{"Key":"dependency on","Fragments":["the"]},{"Key":"big clump","Fragments":["of"]},{"Key":"clump of","Fragments":["logic"]},{"Key":"Testing separate","Fragments":["parts"]},{"Key":"separate parts","Fragments":["of"]},{"Key":"now impossible,","Fragments":["`response-for`"]},{"Key":"impossible, `response-for`","Fragments":["is"]},{"Key":"function left","Fragments":["that"]},{"Key":"left that","Fragments":["can"]},{"Key":" Hmm.","Fragments":["Having"]},{"Key":"Hmm. Having","Fragments":["had"]},{"Key":"Having had","Fragments":["a"]},{"Key":"of others,","Fragments":["I"]},{"Key":"others, I","Fragments":["appear"]},{"Key":"I appear","Fragments":["to"]},{"Key":"appear to","Fragments":["have"]},{"Key":"not read","Fragments":["the"]},{"Key":"README. Well","Fragments":["done"]},{"Key":"Well done","Fragments":["me."]},{"Key":"done me.","Fragments":["I"]},{"Key":"should possibly","Fragments":["go"]},{"Key":"possibly go","Fragments":["and"]},{"Key":"some food,","Fragments":["but"]},{"Key":"food, but","Fragments":["I'm"]},{"Key":"still amused","Fragments":["at"]},{"Key":"amused at","Fragments":["the"]},{"Key":"the small","Fragments":["amount"]},{"Key":"small amount","Fragments":["of"]},{"Key":"code needed","Fragments":["to"]},{"Key":"a throughly","Fragments":["TDD"]},{"Key":"throughly TDD","Fragments":["fashion!"]},{"Key":" Considered","Fragments":["cond,"]},{"Key":"Considered cond,","Fragments":["then"]},{"Key":"cond, then","Fragments":["condp."]},{"Key":"then condp.","Fragments":["Got"]},{"Key":"condp. Got","Fragments":["as"]},{"Key":"Got as","Fragments":["far"]},{"Key":"as case,","Fragments":["but"]},{"Key":"but was","Fragments":["then"]},{"Key":"was then","Fragments":["regretting"]},{"Key":"then regretting","Fragments":["my"]},{"Key":"regretting my","Fragments":["decision"]},{"Key":"my decision","Fragments":["when"]},{"Key":"decision when","Fragments":["I"]},{"Key":"of identical","Fragments":["responses,"]},{"Key":"identical responses,","Fragments":["but"]},{"Key":"I spotted","Fragments":["it's"]},{"Key":"spotted it's","Fragments":["support"]},{"Key":"it's support","Fragments":["for"]},{"Key":"support for","Fragments":["multiple"]},{"Key":"for multiple","Fragments":["constants"]},{"Key":"multiple constants","Fragments":["as"]},{"Key":"constants as","Fragments":["the"]},{"Key":"first option","Fragments":[":)"]},{"Key":"simplify you","Fragments":["regular"]},{"Key":"you regular","Fragments":["expressions."]},{"Key":"expressions. I","Fragments":["went"]},{"Key":"regex route","Fragments":["on"]},{"Key":"route on","Fragments":["mine,"]},{"Key":"on mine,","Fragments":["too,"]},{"Key":"mine, too,","Fragments":["though"]},{"Key":"too, though","Fragments":["I"]},{"Key":"string comparison","Fragments":["is"]},{"Key":"efficient (regexes","Fragments":["are"]},{"Key":"(regexes are","Fragments":["slow)."]},{"Key":"unit tests,","Fragments":["questions"]},{"Key":"tests, questions","Fragments":["are"]},{"Key":"questions are","Fragments":["any"]},{"Key":"any line","Fragments":["that"]},{"Key":"line that","Fragments":["ends"]},{"Key":"that ends","Fragments":["in"]},{"Key":"ends in","Fragments":["a"]},{"Key":"a '?',","Fragments":["so"]},{"Key":"'?', so","Fragments":["you"]},{"Key":"the $","Fragments":["operator"]},{"Key":"$ operator","Fragments":["to"]},{"Key":"operator to","Fragments":["match"]},{"Key":"a ?","Fragments":["at"]},{"Key":"? at","Fragments":["the"]},{"Key":"that simple.","Fragments":["#\"\\?$\""]},{"Key":" Shouts","Fragments":["are"]},{"Key":"Shouts are","Fragments":["a"]},{"Key":"more tricky.","Fragments":["I"]},{"Key":"tricky. I","Fragments":["actually"]},{"Key":"actually used","Fragments":["2"]},{"Key":"used 2","Fragments":["expressions"]},{"Key":"2 expressions","Fragments":["for"]},{"Key":"that. The","Fragments":["first"]},{"Key":"first was","Fragments":["to"]},{"Key":"any lower","Fragments":["case"]},{"Key":"characters, if","Fragments":["none"]},{"Key":"none were","Fragments":["found,"]},{"Key":"were found,","Fragments":["I"]},{"Key":"found, I","Fragments":["checked"]},{"Key":"checked for","Fragments":["upper"]},{"Key":"for upper","Fragments":["case"]},{"Key":"solution at","Fragments":["http://exercism.io/submissions/1914387014d9f9368a25ce4b"]},{"Key":"at http://exercism.io/submissions/1914387014d9f9368a25ce4b","Fragments":["if"]},{"Key":"http://exercism.io/submissions/1914387014d9f9368a25ce4b if","Fragments":["you're"]},{"Key":"For V2","Fragments":["I"]},{"Key":"V2 I","Fragments":["got"]},{"Key":"of most","Fragments":["of"]},{"Key":"regexes since","Fragments":["they're"]},{"Key":"they're known","Fragments":["to"]},{"Key":"originally used","Fragments":["a"]},{"Key":"for 'shouted?'","Fragments":["but"]},{"Key":"'shouted?' but","Fragments":["I"]},{"Key":"string conversion","Fragments":["and"]},{"Key":"conversion and","Fragments":["comparison","validation"]},{"Key":"and comparison","Fragments":["better."]},{"Key":"use (last)","Fragments":["to"]},{"Key":"(last) to","Fragments":["get"]},{"Key":"compare that,","Fragments":["if"]},{"Key":"that, if","Fragments":["you"]},{"Key":"put this","Fragments":["in"]},{"Key":"in perspective,","Fragments":["I"]},{"Key":"perspective, I","Fragments":["have"]},{"Key":"have never","Fragments":["written"]},{"Key":"and cobbled","Fragments":["together"]},{"Key":"cobbled together","Fragments":["this"]},{"Key":"together this","Fragments":["answer"]},{"Key":"answer by","Fragments":["dipping"]},{"Key":"by dipping","Fragments":["into"]},{"Key":"dipping into","Fragments":["[Clojure"]},{"Key":"into [Clojure","Fragments":["for"]},{"Key":"and True](http://www.braveclojure.com/)","Fragments":["and"]},{"Key":"True](http://www.braveclojure.com/) and","Fragments":["the"]},{"Key":"[Clojure Cheat","Fragments":["Sheet](http://clojure.org/cheatsheet)"]},{"Key":"Cheat Sheet](http://clojure.org/cheatsheet)","Fragments":["and"]},{"Key":"Sheet](http://clojure.org/cheatsheet) and","Fragments":["debugging"]},{"Key":"and debugging","Fragments":["it"]},{"Key":"debugging it","Fragments":["using"]},{"Key":"using [LightTable](http://www.lighttable.com/)","Fragments":["(thought"]},{"Key":"[LightTable](http://www.lighttable.com/) (thought","Fragments":["I"]},{"Key":"(thought I","Fragments":["couldn't"]},{"Key":"get LightTable","Fragments":["to"]},{"Key":"LightTable to","Fragments":["work"]},{"Key":"with bob_test.clj","Fragments":["without"]},{"Key":"bob_test.clj without","Fragments":["changing"]},{"Key":"without changing","Fragments":["the"]},{"Key":"the `load-file`","Fragments":["to"]},{"Key":"`load-file` to","Fragments":["reference"]},{"Key":"reference an","Fragments":["absolute"]},{"Key":"an absolute","Fragments":["path"]},{"Key":"absolute path","Fragments":["name."]},{"Key":"to lay","Fragments":["out"]},{"Key":"lay out","Fragments":["the"]},{"Key":"the Clojure?","Fragments":["Coming"]},{"Key":"Clojure? Coming","Fragments":["from"]},{"Key":"a background","Fragments":["in"]},{"Key":"background in","Fragments":["C"]},{"Key":"in C","Fragments":["and"]},{"Key":"C and","Fragments":["C++"]},{"Key":"and C++","Fragments":["it"]},{"Key":"C++ it","Fragments":["looks"]},{"Key":"looks kind","Fragments":["of"]},{"Key":"Tried using","Fragments":["one"]},{"Key":"of answer,","Fragments":["but"]},{"Key":"answer, but","Fragments":["ran"]},{"Key":"ran foul","Fragments":["of"]},{"Key":"foul of","Fragments":["the"]},{"Key":"number question","Fragments":["so"]},{"Key":"question so","Fragments":["had"]},{"Key":"so had","Fragments":["to"]},{"Key":"to double","Fragments":["up"]},{"Key":"double up","Fragments":["for"]},{"Key":"for \"Sure\".","Fragments":["Wasn't"]},{"Key":"\"Sure\". Wasn't","Fragments":["sure"]},{"Key":"Wasn't sure","Fragments":["of"]},{"Key":"sure of","Fragments":["any"]},{"Key":"other approach","Fragments":["to"]},{"Key":"to take,","Fragments":["so"]},{"Key":"take, so","Fragments":["open"]},{"Key":"so open","Fragments":["to"]},{"Key":"Much cleaner","Fragments":["IMO"]},{"Key":"many lines","Fragments":["of"]},{"Key":"written here.","Fragments":["I"]},{"Key":"about clojure","Fragments":["but"]},{"Key":"the theory","Fragments":["is"]},{"Key":"theory is","Fragments":["so"]},{"Key":"like 1","Fragments":["line"]},{"Key":"1 line","Fragments":["per"]},{"Key":"your \"assert","Fragments":["false\""]},{"Key":"false\" instead","Fragments":["of"]},{"Key":"my \"throw","Fragments":["AssertionError\"."]},{"Key":"your \"apply","Fragments":["str\""]},{"Key":"\"apply str\"","Fragments":["instead"]},{"Key":"str\" instead","Fragments":["of"]},{"Key":" Gonna","Fragments":["do"]},{"Key":"Gonna do","Fragments":["the"]},{"Key":"the same!","Fragments":["=)"]},{"Key":"right, it's","Fragments":["too"]},{"Key":"one function.","Fragments":["I"]},{"Key":"I rescind","Fragments":["my"]},{"Key":"rescind my","Fragments":["earlier"]},{"Key":"my earlier","Fragments":["suggestion!"]},{"Key":"seen to","Fragments":["do"]},{"Key":"do assertions","Fragments":["and"]},{"Key":"assertions and","Fragments":["make"]},{"Key":"caller of","Fragments":["the"]},{"Key":"code what","Fragments":["the"]},{"Key":"constraints are","Fragments":["is"]},{"Key":"are is","Fragments":["with"]},{"Key":"with :pre","Fragments":["and"]},{"Key":":post conditions.","Fragments":["See"]},{"Key":"conditions. See","Fragments":["http://blog.fogus.me/2009/12/21/clojures-pre-and-post/"]},{"Key":"See http://blog.fogus.me/2009/12/21/clojures-pre-and-post/","Fragments":["for"]},{"Key":"http://blog.fogus.me/2009/12/21/clojures-pre-and-post/ for","Fragments":["a"]},{"Key":"Finally got","Fragments":["round"]},{"Key":"got round","Fragments":["to"]},{"Key":"round to","Fragments":["looking"]},{"Key":"to looking","Fragments":["at"]},{"Key":"have submitted","Fragments":["another"]},{"Key":"One thought","Fragments":["would"]},{"Key":"thought would","Fragments":["be"]},{"Key":"use cond","Fragments":["instead"]},{"Key":"cond instead","Fragments":["of"]},{"Key":"ifs -","Fragments":["will"]},{"Key":"bit cleaner.","Fragments":["See"]},{"Key":"cleaner. See","Fragments":["http://clojuredocs.org/clojure_core/1.2.0/clojure.core/cond."]},{"Key":"input beforehand?","Fragments":["Can"]},{"Key":"beforehand? Can","Fragments":["you"]},{"Key":"you generalize","Fragments":["the"]},{"Key":"generalize the","Fragments":["the"]},{"Key":"answers and","Fragments":["not"]},{"Key":"include any","Fragments":["of"]},{"Key":"the specific","Fragments":["strings"]},{"Key":"specific strings","Fragments":["that"]},{"Key":"strings that","Fragments":["the"]},{"Key":"Well, clojure.string/join","Fragments":["would"]},{"Key":"clojure.string/join would","Fragments":["actually"]},{"Key":"would actually","Fragments":["look"]},{"Key":"actually look","Fragments":["more"]},{"Key":"explicit to","Fragments":["new"]},{"Key":"to new","Fragments":["coders"]},{"Key":"new coders","Fragments":["(but"]},{"Key":"coders (but","Fragments":["I've"]},{"Key":"(but I've","Fragments":["seen"]},{"Key":"seen apply","Fragments":["str"]},{"Key":"str many","Fragments":["times,"]},{"Key":"times, to","Fragments":["it's"]},{"Key":"Having been","Fragments":["pointed"]},{"Key":"been pointed","Fragments":["at"]},{"Key":"pointed at","Fragments":["the"]},{"Key":"by [ben5stars](http://exercism.io/ben5stars)","Fragments":["I"]},{"Key":"[ben5stars](http://exercism.io/ben5stars) I","Fragments":["have"]},{"Key":"have reworked","Fragments":["my"]},{"Key":"reworked my","Fragments":["code."]},{"Key":"also tried","Fragments":["to"]},{"Key":"to structure","Fragments":["it"]},{"Key":"structure it","Fragments":["in"]},{"Key":"with [The","Fragments":["Clojure"]},{"Key":"[The Clojure","Fragments":["Style"]},{"Key":"Clojure Style","Fragments":["Guide](https://github.com/bbatsov/clojure-style-guide#the-clojure-style-guide)."]},{"Key":"of white","Fragments":["space"]},{"Key":"the lines,","Fragments":["but"]},{"Key":"but hopefully","Fragments":["it"]},{"Key":"hopefully it","Fragments":["makes"]},{"Key":" Running","Fragments":["the"]},{"Key":"Running the","Fragments":["code"]},{"Key":"code within","Fragments":["a"]},{"Key":"a `lein","Fragments":["repl`"]},{"Key":"`lein repl`","Fragments":["means"]},{"Key":"repl` means","Fragments":["I"]},{"Key":"means I","Fragments":["no"]},{"Key":"I no","Fragments":["longer"]},{"Key":"longer need","Fragments":["to"]},{"Key":"The `lower-case-all-words`","Fragments":["function"]},{"Key":"`lower-case-all-words` function","Fragments":["is"]},{"Key":"is here","Fragments":["both"]},{"Key":"here both","Fragments":["to"]},{"Key":"both to","Fragments":["clarify"]},{"Key":"clarify intent,","Fragments":["and"]},{"Key":"intent, and","Fragments":["to"]},{"Key":" (Note","Fragments":["that"]},{"Key":"learnt about","Fragments":["the"]},{"Key":"the as-\u003e","Fragments":["macro,"]},{"Key":"as-\u003e macro,","Fragments":["which"]},{"Key":"macro, which","Fragments":["I"]},{"Key":"up not","Fragments":["using"]},{"Key":"using :","Fragments":["http://jdevuyst.blogspot.fr/2013/11/thoughts-on-clojure-threading-macros.html"]},{"Key":": http://jdevuyst.blogspot.fr/2013/11/thoughts-on-clojure-threading-macros.html","Fragments":[")"]},{"Key":"about `re-seq`,","Fragments":["which"]},{"Key":"`re-seq`, which","Fragments":["fits"]},{"Key":"which fits","Fragments":["the"]},{"Key":"the spliting","Fragments":["nicely."]},{"Key":"But 'reducing'","Fragments":["this"]},{"Key":"'reducing' this","Fragments":["way"]},{"Key":"is precisely","Fragments":["the"]},{"Key":"precisely the","Fragments":["job"]},{"Key":"of `core/frequencies`,","Fragments":["isn't"]},{"Key":"`core/frequencies`, isn't","Fragments":["it"]},{"Key":"fine as","Fragments":["a"]},{"Key":"pass but,","Fragments":["as"]},{"Key":"the [Readme](http://exercism.io/exercises/clojure/bob/readme)","Fragments":["says:"]},{"Key":"\u003e Please","Fragments":["make"]},{"Key":"Please make","Fragments":["your"]},{"Key":"solution as","Fragments":["general"]},{"Key":"as general","Fragments":["as"]},{"Key":"general as","Fragments":["possible."]},{"Key":"possible. Good","Fragments":["code"]},{"Key":"Good code","Fragments":["doesn't"]},{"Key":"words, consider","Fragments":["what"]},{"Key":"consider what","Fragments":["would"]},{"Key":"suite changed","Fragments":["but"]},{"Key":"changed but","Fragments":["the"]},{"Key":"rules you","Fragments":["were"]},{"Key":"were coding","Fragments":["to"]},{"Key":"coding to","Fragments":["didn't."]},{"Key":"to didn't.","Fragments":["Would"]},{"Key":"didn't. Would","Fragments":["you"]},{"Key":"about re-req","Fragments":[";"]},{"Key":"re-req ;","Fragments":["Why"]},{"Key":"; Why","Fragments":["reinvent"]},{"Key":"Why reinvent","Fragments":["\\w+"]},{"Key":"reinvent \\w+","Fragments":["?"]},{"Key":" `(require)`","Fragments":["is"]},{"Key":"`(require)` is","Fragments":["normally"]},{"Key":"normally written","Fragments":["in"]},{"Key":"the `(:require)`","Fragments":["form"]},{"Key":"`(:require)` form","Fragments":["in"]},{"Key":"files. `require`","Fragments":["function"]},{"Key":"`require` function","Fragments":["is"]},{"Key":"simplify some","Fragments":["things."]},{"Key":"are `seq-able`","Fragments":["in"]},{"Key":"`seq-able` in","Fragments":["Clojure"]},{"Key":"already so","Fragments":["`(seq"]},{"Key":"so `(seq","Fragments":["(char-array"]},{"Key":"`(seq (char-array","Fragments":["input))`"]},{"Key":"(char-array input))`","Fragments":["is"]},{"Key":"find combining","Fragments":["the"]},{"Key":"combining the","Fragments":["matching"]},{"Key":"matching and","Fragments":["the"]},{"Key":"validation of","Fragments":["the","the"]},{"Key":"me. Maybe","Fragments":["those"]},{"Key":"Maybe those","Fragments":["should"]},{"Key":"those should","Fragments":["be"]},{"Key":"that. Have","Fragments":["updated"]},{"Key":"Have updated","Fragments":["the"]},{"Key":"and (hopefully)","Fragments":["tidied"]},{"Key":"(hopefully) tidied","Fragments":["it"]},{"Key":"tidied it","Fragments":["up"]},{"Key":"In rna-complement,","Fragments":["I"]},{"Key":"rna-complement, I","Fragments":["think"]},{"Key":"from actual","Fragments":["strings"]},{"Key":"actual strings","Fragments":["to"]},{"Key":"to strings,","Fragments":["to"]},{"Key":"strings, to","Fragments":["avoid"]},{"Key":"avoid avoid","Fragments":["to"]},{"Key":"avoid to","Fragments":["transform"]},{"Key":"to transform","Fragments":["the"]},{"Key":"string returned","Fragments":["by"]},{"Key":"by valid-dna","Fragments":["to"]},{"Key":"valid-dna to","Fragments":["a"]},{"Key":" ##","Fragments":["Good","String","Names","Conditional","All"]},{"Key":"## Good","Fragments":["##"]},{"Key":" Concise.","Fragments":["Nice"]},{"Key":"Concise. Nice","Fragments":["that"]},{"Key":"whole problem","Fragments":["fits"]},{"Key":"problem fits","Fragments":["into"]},{"Key":"fits into","Fragments":["a"]},{"Key":"simple `cond`","Fragments":["expression."]},{"Key":"`cond` expression.","Fragments":["Good"]},{"Key":"expression. Good","Fragments":["use"]},{"Key":"interop where","Fragments":["it"]},{"Key":"## String","Fragments":["Handling"]},{"Key":"String Handling","Fragments":["##"]},{"Key":"built-in `clojure.string`","Fragments":["namespace."]},{"Key":"`clojure.string` namespace.","Fragments":["It"]},{"Key":"namespace. It","Fragments":["contains"]},{"Key":"It contains","Fragments":["a"]},{"Key":"contains a","Fragments":["`blank?`"]},{"Key":"`blank?` function","Fragments":["that","can","from"]},{"Key":"of `(.isEmpty","Fragments":["(.trim"]},{"Key":"`(.isEmpty (.trim","Fragments":["s))`."]},{"Key":"(.trim s))`.","Fragments":["The"]},{"Key":"s))`. The","Fragments":["`blank?`"]},{"Key":"The `blank?`","Fragments":["function"]},{"Key":"whole expression,","Fragments":["but"]},{"Key":"expression, but","Fragments":["if"]},{"Key":"a trimming","Fragments":["function"]},{"Key":"trimming function","Fragments":["in"]},{"Key":"future, look","Fragments":["at"]},{"Key":"the `trim`,","Fragments":["`triml`"]},{"Key":"`trim`, `triml`","Fragments":["and"]},{"Key":"`triml` and","Fragments":["`trimr`"]},{"Key":"and `trimr`","Fragments":["functions."]},{"Key":"`trimr` functions.","Fragments":["So"]},{"Key":"functions. So","Fragments":["add"]},{"Key":"So add","Fragments":["the"]},{"Key":"Then use","Fragments":["it"]},{"Key":"first `cond`","Fragments":["pair:"]},{"Key":"## Names","Fragments":["##"]},{"Key":"Functions that","Fragments":["return"]},{"Key":"booleans generally","Fragments":["have"]},{"Key":"generally have","Fragments":["a"]},{"Key":"`?` appended","Fragments":["to"]},{"Key":"appended to","Fragments":["the"]},{"Key":"name, so","Fragments":["`all-uppercase`"]},{"Key":"so `all-uppercase`","Fragments":["would"]},{"Key":"`all-uppercase` would","Fragments":["be"]},{"Key":"Inside `all-uppercase`,","Fragments":["you"]},{"Key":"`all-uppercase`, you","Fragments":["use"]},{"Key":"use `f`","Fragments":["to"]},{"Key":"`f` to","Fragments":["represent"]},{"Key":"filtered string,","Fragments":["but"]},{"Key":"but `f`","Fragments":["is"]},{"Key":"`f` is","Fragments":["generally"]},{"Key":"to functions.","Fragments":["Either"]},{"Key":"functions. Either","Fragments":["shadow"]},{"Key":"Either shadow","Fragments":["the"]},{"Key":"shadow the","Fragments":["original"]},{"Key":"original `s`","Fragments":["binding"]},{"Key":"`s` binding","Fragments":["(since"]},{"Key":"binding (since","Fragments":["you"]},{"Key":"(since you","Fragments":["don't"]},{"Key":"original after","Fragments":["that"]},{"Key":"that point),","Fragments":["or"]},{"Key":"point), or","Fragments":["give"]},{"Key":"or give","Fragments":["it"]},{"Key":"meaningful name","Fragments":["like"]},{"Key":"## Conditional","Fragments":["Expressions"]},{"Key":"Conditional Expressions","Fragments":["##"]},{"Key":"Inside the","Fragments":["`all-uppercase`"]},{"Key":"the `all-uppercase`","Fragments":["function"]},{"Key":"`all-uppercase` function","Fragments":["your"]},{"Key":"function your","Fragments":["conditional"]},{"Key":"conditional expression","Fragments":["could","with"]},{"Key":"expression could","Fragments":["be"]},{"Key":"idiomatic. Whenever","Fragments":["you"]},{"Key":"Whenever you","Fragments":["have"]},{"Key":"expression with","Fragments":["one"]},{"Key":"branch being","Fragments":["`false`,"]},{"Key":"being `false`,","Fragments":["it's"]},{"Key":"`false`, it's","Fragments":["more"]},{"Key":"of `if`.","Fragments":["So"]},{"Key":"`if`. So","Fragments":["first"]},{"Key":"So first","Fragments":["improvement:"]},{"Key":" (when","Fragments":["(not","(seq"]},{"Key":"(when (not","Fragments":["(empty?"]},{"Key":" (every?","Fragments":["#(Character/isUpperCase","#(Character/isUpperCase","#(Character/isUpperCase","#(Character/isUpperCase"]},{"Key":"(every? #(Character/isUpperCase","Fragments":["%)","%)","%)","%)"]},{"Key":"If `(not","Fragments":["(empty?"]},{"Key":"(empty? f))`","Fragments":["is"]},{"Key":"f))` is","Fragments":["true,"]},{"Key":"is true,","Fragments":["the"]},{"Key":"true, the","Fragments":["body"]},{"Key":"`when` is","Fragments":["evaluated,"]},{"Key":"is evaluated,","Fragments":["else"]},{"Key":"evaluated, else","Fragments":["the"]},{"Key":"else the","Fragments":["whole"]},{"Key":"whole `when`","Fragments":["expression"]},{"Key":"`when` expression","Fragments":["returns"]},{"Key":"expression returns","Fragments":["`nil`."]},{"Key":"returns `nil`.","Fragments":["In"]},{"Key":"`nil`. In","Fragments":["Clojure,"]},{"Key":"Clojure, `nil`","Fragments":["and"]},{"Key":"both \"falsey\"","Fragments":["values"]},{"Key":"\"falsey\" values","Fragments":["that"]},{"Key":"`cond` (they're","Fragments":["the"]},{"Key":"(they're the","Fragments":["only"]},{"Key":"two falsey,","Fragments":["everything"]},{"Key":"falsey, everything","Fragments":["else"]},{"Key":"language is","Fragments":["truthy)."]},{"Key":"Secondly, when","Fragments":["you"]},{"Key":"sequence has","Fragments":["items"]},{"Key":"has items","Fragments":["in"]},{"Key":"items in","Fragments":["it"]},{"Key":"it before","Fragments":["trying"]},{"Key":"before trying","Fragments":["to"]},{"Key":"it, it's","Fragments":["more"]},{"Key":"to `seq`.","Fragments":["The"]},{"Key":"`seq`. The","Fragments":["`seq`"]},{"Key":"The `seq`","Fragments":["function"]},{"Key":"`seq` function","Fragments":["will"]},{"Key":"`nil` if","Fragments":["the","it"]},{"Key":"sequence you","Fragments":["pass"]},{"Key":"is empty.","Fragments":["So"]},{"Key":"empty. So","Fragments":["with"]},{"Key":"this second","Fragments":["improvement:"]},{"Key":"(when (seq","Fragments":["f)"]},{"Key":"can go","Fragments":["a"]},{"Key":"little further.","Fragments":["We"]},{"Key":"further. We","Fragments":["can"]},{"Key":"combine your","Fragments":["`filter`"]},{"Key":"your `filter`","Fragments":["and"]},{"Key":"that its","Fragments":["not"]},{"Key":"its not","Fragments":["empty"]},{"Key":"not empty","Fragments":["with"]},{"Key":"with `seq`.","Fragments":["As"]},{"Key":"`seq`. As","Fragments":["I"]},{"Key":"I mentioned,","Fragments":["`seq`"]},{"Key":"mentioned, `seq`","Fragments":["will"]},{"Key":"`seq` will","Fragments":["return"]},{"Key":"is empty,","Fragments":["but"]},{"Key":"empty, but","Fragments":["otherwise"]},{"Key":"the collection.","Fragments":["With"]},{"Key":"collection. With","Fragments":["this"]},{"Key":"mind, we","Fragments":["can"]},{"Key":"use `when-let`","Fragments":["to"]},{"Key":"`when-let` to","Fragments":["accomplish"]},{"Key":"accomplish all","Fragments":["of"]},{"Key":"separate `let`","Fragments":["and"]},{"Key":" (when-let","Fragments":["[f","[chars"]},{"Key":"(when-let [f","Fragments":["(seq"]},{"Key":"[f (seq","Fragments":["(filter"]},{"Key":"(seq (filter","Fragments":["#(Character/isLetter","#(Character/isLetter"]},{"Key":"## All","Fragments":["Together"]},{"Key":"All Together","Fragments":["##"]},{"Key":"the combined","Fragments":["suggestions"]},{"Key":"combined suggestions","Fragments":["from"]},{"Key":"suggestions from","Fragments":["above,"]},{"Key":"from above,","Fragments":["here's"]},{"Key":"above, here's","Fragments":["what"]},{"Key":"(defn all-uppercase?","Fragments":["[s]"]},{"Key":"(when-let [chars","Fragments":["(seq"]},{"Key":"[chars (seq","Fragments":["(filter"]},{"Key":" (all-uppercase?","Fragments":["s)"]},{"Key":"(all-uppercase? s)","Fragments":["\"Whoa,"]},{"Key":"s) \"Whoa,","Fragments":["chill"]},{"Key":"\"Whoa, chill","Fragments":["out!\""]},{"Key":"(last s))","Fragments":["\"Sure.\""]},{"Key":"`clojure.string/join` can","Fragments":["be"]},{"Key":"as `(apply","Fragments":["str...)`","str"]},{"Key":"`(apply str...)`","Fragments":["which"]},{"Key":"str...)` which","Fragments":["might"]},{"Key":"doesn't require","Fragments":["the","the"]},{"Key":"string import.","Fragments":["It"]},{"Key":"import. It","Fragments":["would"]},{"Key":"Maybe try","Fragments":["pre-computing"]},{"Key":"try pre-computing","Fragments":["the"]},{"Key":"pre-computing the","Fragments":["lowercase"]},{"Key":"the lowercase","Fragments":["value"]},{"Key":"lowercase value","Fragments":["of"]},{"Key":"target word","Fragments":["to"]},{"Key":"avoid recomputing","Fragments":["it"]},{"Key":"recomputing it","Fragments":["for"]},{"Key":"every iteration.","Fragments":["Would"]},{"Key":"iteration. Would","Fragments":["`partial`"]},{"Key":"Would `partial`","Fragments":["function"]},{"Key":"application help","Fragments":["here?"]},{"Key":"domain concept","Fragments":["in","in","called"]},{"Key":"in Anagrams","Fragments":["called","called"]},{"Key":"Anagrams called","Fragments":["Alphagrams","Alphagrams"]},{"Key":"called Alphagrams","Fragments":["which","which"]},{"Key":"Alphagrams which","Fragments":["might","might"]},{"Key":" `every-pred`","Fragments":["is","is"]},{"Key":"`every-pred` is","Fragments":["a","a","used"]},{"Key":"2 or","Fragments":["more","more"]},{"Key":"more predicates","Fragments":["and","and"]},{"Key":"and composes","Fragments":["them","them"]},{"Key":"composes them","Fragments":["into","into"]},{"Key":"single predicate.","Fragments":["Would","Would"]},{"Key":"predicate. Would","Fragments":["using","using"]},{"Key":"Would using","Fragments":["that","that"]},{"Key":"using that","Fragments":["with","with"]},{"Key":"that with","Fragments":["`filter`","`filter`"]},{"Key":"`filter` allow","Fragments":["you","you"]},{"Key":"composable set","Fragments":["of","of"]},{"Key":"move away","Fragments":["as"]},{"Key":"away as","Fragments":["much"]},{"Key":"possible from","Fragments":["regular"]},{"Key":"from regular","Fragments":["expressions"]},{"Key":"that intuitive","Fragments":["and"]},{"Key":"intuitive and","Fragments":["easy"]},{"Key":"get wrong.","Fragments":["Also"]},{"Key":"wrong. Also","Fragments":["decided"]},{"Key":"Also decided","Fragments":["to"]},{"Key":"create some","Fragments":["local"]},{"Key":"some local","Fragments":["functions"]},{"Key":"local functions","Fragments":["so"]},{"Key":"as tight","Fragments":["as","as"]},{"Key":"tight as","Fragments":["possible.","a"]},{"Key":"Oops, slightly","Fragments":["too"]},{"Key":"slightly too","Fragments":["much"]},{"Key":"much indent","Fragments":["on"]},{"Key":"indent on","Fragments":["line"]},{"Key":"line 4!","Fragments":["I'll"]},{"Key":"4! I'll","Fragments":["just"]},{"Key":"I'll just","Fragments":["resubmit"]},{"Key":"just resubmit","Fragments":["for"]},{"Key":"resubmit for","Fragments":["the"]},{"Key":"Ignore the","Fragments":["down-to"]},{"Key":"the down-to","Fragments":["function,"]},{"Key":"down-to function,","Fragments":["it's"]},{"Key":"function, it's","Fragments":["not"]},{"Key":" Dat","Fragments":["recursion"]},{"Key":"Dat recursion","Fragments":["doe"]},{"Key":"Just as","Fragments":["a"]},{"Key":"a side,","Fragments":["Clojure"]},{"Key":"side, Clojure","Fragments":["has"]},{"Key":"has pre","Fragments":["and"]},{"Key":"post assertion","Fragments":["functions"]},{"Key":"assertion functions","Fragments":["that"]},{"Key":"pretty cool","Fragments":["for"]},{"Key":"cool for","Fragments":["making"]},{"Key":"about input","Fragments":["and"]},{"Key":"and output.","Fragments":["Instead"]},{"Key":"output. Instead","Fragments":["of"]},{"Key":"of directly","Fragments":["asserting"]},{"Key":"directly asserting","Fragments":["we"]},{"Key":"asserting we","Fragments":["can"]},{"Key":"[(every? dna-\u003erna","Fragments":["nucleotides)]}"]},{"Key":"(map dna-\u003erna","Fragments":["nucleotides)))"]},{"Key":"looks super","Fragments":["similar,"]},{"Key":"super similar,","Fragments":["but"]},{"Key":"but IMO","Fragments":["it's"]},{"Key":"IMO it's","Fragments":["a"]},{"Key":"really cool","Fragments":["feature"]},{"Key":"cool feature","Fragments":["for"]},{"Key":"feature for","Fragments":["validating."]},{"Key":"for validating.","Fragments":["Also"]},{"Key":"validating. Also","Fragments":["more"]},{"Key":"Also more","Fragments":["information"]},{"Key":"regex on","Fragments":["question?."]},{"Key":"on question?.","Fragments":["A"]},{"Key":"question?. A","Fragments":["la:"]},{"Key":"asking? [msg]","Fragments":["(="]},{"Key":"[msg] (=","Fragments":["(last"]},{"Key":" @cortez","Fragments":["I"]},{"Key":"@cortez I","Fragments":["think"]},{"Key":"just style.","Fragments":["I"]},{"Key":"like doing","Fragments":["it"]},{"Key":"of because","Fragments":["having"]},{"Key":"having sentence","Fragments":["as"]},{"Key":"sentence as","Fragments":["just"]},{"Key":"line doesn't","Fragments":["add"]},{"Key":"doesn't add","Fragments":["a"]},{"Key":"at `case`","Fragments":["for"]},{"Key":"in `formatted-bottles`","Fragments":["it"]},{"Key":"`formatted-bottles` it","Fragments":["allows"]},{"Key":"just match","Fragments":["on"]},{"Key":"match on","Fragments":["the"]},{"Key":"about mapping","Fragments":["over"]},{"Key":"of recursion?","Fragments":["That"]},{"Key":"recursion? That","Fragments":["would"]},{"Key":"be another","Fragments":["way"]},{"Key":"0 n)`","Fragments":["can"]},{"Key":"n)` can","Fragments":["be"]},{"Key":"idiomatically as","Fragments":["`(zero?"]},{"Key":"macro feels","Fragments":["a"]},{"Key":"bit overkill","Fragments":["to"]},{"Key":"overkill to","Fragments":["me"]},{"Key":"2 functions.","Fragments":["Looks"]},{"Key":"functions. Looks","Fragments":["good"]},{"Key":"good overall","Fragments":["thought."]},{"Key":" @jeramie","Fragments":["-"]},{"Key":"@jeramie -","Fragments":["is"]},{"Key":"have sentence","Fragments":["within"]},{"Key":"sentence within","Fragments":["the"]},{"Key":"split words","Fragments":["or"]},{"Key":"words or","Fragments":["to"]},{"Key":"initial arg","Fragments":["for"]},{"Key":"arg for","Fragments":["the"]},{"Key":"macro with","Fragments":["only"]},{"Key":"2 functions","Fragments":["feels"]},{"Key":"functions feels","Fragments":["a"]},{"Key":"bit gratuitous","Fragments":["to"]},{"Key":"gratuitous to","Fragments":["me."]},{"Key":"really prefer","Fragments":["to"]},{"Key":"reserve it","Fragments":["for"]},{"Key":"otherwise be","Fragments":["very"]},{"Key":"very deeply","Fragments":["nested"]},{"Key":"nested if","Fragments":["statements"]},{"Key":"lines 13-15,","Fragments":["you"]},{"Key":"13-15, you","Fragments":["can"]},{"Key":"Clojure's [`cond`](http://clojuredocs.org/clojure_core/1.2.0/clojure.core/cond).","Fragments":["`(nth"]},{"Key":"[`cond`](http://clojuredocs.org/clojure_core/1.2.0/clojure.core/cond). `(nth","Fragments":["(take-last"]},{"Key":"`(nth (take-last","Fragments":["1"]},{"Key":"(take-last 1","Fragments":["st)"]},{"Key":"1 st)","Fragments":["0)`"]},{"Key":"st) 0)`","Fragments":["may"]},{"Key":"0)` may","Fragments":["also"]},{"Key":"`(last st)`.","Fragments":["You"]},{"Key":"st)`. You","Fragments":["can"]},{"Key":"use boolean","Fragments":["logic"]},{"Key":"boolean logic","Fragments":["for","can"]},{"Key":"for lines","Fragments":["3"]},{"Key":"lines 3","Fragments":["and"]},{"Key":"3 and","Fragments":["4,"]},{"Key":"and 4,","Fragments":["by"]},{"Key":"4, by","Fragments":["using"]},{"Key":"using `(and","Fragments":["(\u003c="]},{"Key":"`(and (\u003c=","Fragments":["(int"]},{"Key":"(\u003c= (int","Fragments":["c)"]},{"Key":"(int c)","Fragments":["122)","97))`."]},{"Key":"c) 122)","Fragments":["(\u003e="]},{"Key":"122) (\u003e=","Fragments":["(int"]},{"Key":"(\u003e= (int","Fragments":["c)"]},{"Key":"c) 97))`.","Fragments":["Similar"]},{"Key":"97))`. Similar","Fragments":["boolean"]},{"Key":"Similar boolean","Fragments":["logic"]},{"Key":"logic can","Fragments":["probably"]},{"Key":"help clean","Fragments":["up"]},{"Key":"the `shouting`","Fragments":["function,"]},{"Key":"`shouting` function,","Fragments":["too."]},{"Key":"All told,","Fragments":["though,"]},{"Key":"told, though,","Fragments":["this"]},{"Key":"though, this","Fragments":["is"]},{"Key":"is good;","Fragments":["I"]},{"Key":"good; I","Fragments":["especially"]},{"Key":"the integer","Fragments":["comparison"]},{"Key":"integer comparison","Fragments":["for"]},{"Key":"for ASCII","Fragments":["characters."]},{"Key":"My PCRE-fu","Fragments":["is"]},{"Key":"PCRE-fu is","Fragments":["strong,"]},{"Key":"is strong,","Fragments":["so"]},{"Key":"strong, so","Fragments":["this"]},{"Key":"was trivial","Fragments":["to"]},{"Key":"trivial to","Fragments":["implement."]},{"Key":"I've often","Fragments":["felt"]},{"Key":"often felt","Fragments":["that"]},{"Key":"a difference,","Fragments":["it's"]},{"Key":"difference, it's","Fragments":["mastery"]},{"Key":"it's mastery","Fragments":["of"]},{"Key":"mastery of","Fragments":["the"]},{"Key":"the library.","Fragments":["At"]},{"Key":"library. At","Fragments":["some"]},{"Key":"At some","Fragments":["point,"]},{"Key":"some point,","Fragments":["you"]},{"Key":"point, you","Fragments":["no"]},{"Key":"you no","Fragments":["longer"]},{"Key":"longer have","Fragments":["to"]},{"Key":"look stuff","Fragments":["up,"]},{"Key":"stuff up,","Fragments":["you"]},{"Key":"up, you","Fragments":["can"]},{"Key":"just write","Fragments":["it."]},{"Key":"write it.","Fragments":["PCRE"]},{"Key":"it. PCRE","Fragments":["(Perl-Style"]},{"Key":"PCRE (Perl-Style","Fragments":["Regular"]},{"Key":"(Perl-Style Regular","Fragments":["Expressions)"]},{"Key":"Regular Expressions)","Fragments":["is"]},{"Key":"Expressions) is","Fragments":["something"]},{"Key":"have long","Fragments":["*just"]},{"Key":"long *just","Fragments":["known*."]},{"Key":" Haskell","Fragments":["may"]},{"Key":"Haskell may","Fragments":["change"]},{"Key":"may change","Fragments":["my","my"]},{"Key":"my mind.","Fragments":["Lisp"]},{"Key":"mind. Lisp","Fragments":["may"]},{"Key":"Lisp may","Fragments":["change"]},{"Key":"my mind,","Fragments":["too,"]},{"Key":"mind, too,","Fragments":["if"]},{"Key":"too, if","Fragments":["macros"]},{"Key":"if macros","Fragments":["are"]},{"Key":"are as","Fragments":["much"]},{"Key":"a Big","Fragments":["Hairy"]},{"Key":"Big Hairy","Fragments":["Deal"]},{"Key":"Hairy Deal","Fragments":["as"]},{"Key":"Deal as","Fragments":["people"]},{"Key":"as people","Fragments":["make"]},{"Key":"people make","Fragments":["them"]},{"Key":"to be.","Fragments":["But"]},{"Key":"be. But","Fragments":["how"]},{"Key":"But how","Fragments":["long"]},{"Key":"how long","Fragments":["will"]},{"Key":"long will","Fragments":["it"]},{"Key":"will it","Fragments":["be"]},{"Key":"be before","Fragments":["Exercism's"]},{"Key":"before Exercism's","Fragments":["clojure"]},{"Key":"Exercism's clojure","Fragments":["exercises"]},{"Key":"exercises start","Fragments":["to"]},{"Key":"to delve","Fragments":["into"]},{"Key":"delve into","Fragments":["macros?"]},{"Key":"into macros?","Fragments":["Without"]},{"Key":"macros? Without","Fragments":["them,"]},{"Key":"Without them,","Fragments":["most"]},{"Key":"them, most","Fragments":["of"]},{"Key":"a mashup","Fragments":["between"]},{"Key":"mashup between","Fragments":["Haskell's"]},{"Key":"between Haskell's","Fragments":["functionality"]},{"Key":"Haskell's functionality","Fragments":["(witness"]},{"Key":"functionality (witness","Fragments":["the"]},{"Key":"(witness the","Fragments":["new"]},{"Key":"new Transducers","Fragments":["announced"]},{"Key":"Transducers announced","Fragments":["with"]},{"Key":"announced with","Fragments":["Clojure"]},{"Key":"Clojure 1.7)","Fragments":["and"]},{"Key":"1.7) and","Fragments":["Java's"]},{"Key":"and Java's","Fragments":["painfully"]},{"Key":"Java's painfully","Fragments":["vast"]},{"Key":"painfully vast","Fragments":["library."]},{"Key":" Oh!","Fragments":["Why,"]},{"Key":"Oh! Why,","Fragments":["thank"]},{"Key":"Why, thank","Fragments":["you"]},{"Key":"you very","Fragments":["much,"]},{"Key":"very much,","Fragments":["@pamela!"]},{"Key":" (do","Fragments":["(assert"]},{"Key":"(do (assert","Fragments":["(not"]},{"Key":"the `(not)`","Fragments":["in"]},{"Key":"`(not)` in","Fragments":["there."]},{"Key":"use `clojure.string/replace`.","Fragments":["Very"]},{"Key":"`clojure.string/replace`. Very","Fragments":["cool"]},{"Key":"Very cool","Fragments":["--"]},{"Key":"cool --","Fragments":["it"]},{"Key":"most succinct","Fragments":["solution"]},{"Key":"succinct solution","Fragments":["I"]},{"Key":"think I've","Fragments":["seen","learned"]},{"Key":"to @adah","Fragments":["for"]},{"Key":"@adah for","Fragments":["his"]},{"Key":"for his","Fragments":["advice"]},{"Key":"his advice","Fragments":["between"]},{"Key":"advice between","Fragments":["the"]},{"Key":"iteration and","Fragments":["this."]},{"Key":"and this.","Fragments":["Also,"]},{"Key":"this. Also,","Fragments":["oops,"]},{"Key":"Also, oops,","Fragments":["I"]},{"Key":"oops, I","Fragments":["forgot"]},{"Key":"After further","Fragments":["investigation,"]},{"Key":"further investigation,","Fragments":["it"]},{"Key":"investigation, it","Fragments":["looks"]},{"Key":"like `re-matches`","Fragments":["works"]},{"Key":"`re-matches` works","Fragments":["because","here,"]},{"Key":"works because","Fragments":["it"]},{"Key":"it expects","Fragments":["the"]},{"Key":" @trenton","Fragments":["pulled"]},{"Key":"@trenton pulled","Fragments":["out"]},{"Key":"like overkill,","Fragments":["just"]},{"Key":"overkill, just","Fragments":["wanted"]},{"Key":"`get` will","Fragments":["return"]},{"Key":"`nil` by","Fragments":["default"]},{"Key":"default if","Fragments":["the"]},{"Key":"not found,","Fragments":["so"]},{"Key":"found, so","Fragments":["`(get"]},{"Key":"so `(get","Fragments":["dna-rna-map","pairs"]},{"Key":"`(get dna-rna-map","Fragments":["x"]},{"Key":"dna-rna-map x","Fragments":["nil)`"]},{"Key":"nil)` can","Fragments":["be"]},{"Key":"to `((get","Fragments":["dna-rna-map"]},{"Key":"`((get dna-rna-map","Fragments":["x)`."]},{"Key":"dna-rna-map x)`.","Fragments":["Furthermore,"]},{"Key":"x)`. Furthermore,","Fragments":["you"]},{"Key":"Furthermore, you","Fragments":["can"]},{"Key":"treat maps","Fragments":["as"]},{"Key":"could take","Fragments":["it"]},{"Key":"take it","Fragments":["one"]},{"Key":"it one","Fragments":["step"]},{"Key":"step further","Fragments":["and"]},{"Key":"write `(dna-rna-map","Fragments":["x)`!"]},{"Key":"really sure","Fragments":["why"]},{"Key":"why `re-matches`","Fragments":["works"]},{"Key":"works here,","Fragments":["but"]},{"Key":"`nil` whenever","Fragments":["the"]},{"Key":"whenever the","Fragments":["DNA"]},{"Key":"DNA sequence","Fragments":["contains"]},{"Key":"sequence contains","Fragments":["any"]},{"Key":"contains any","Fragments":["non-DNA"]},{"Key":"any non-DNA","Fragments":["characters."]},{"Key":"that dictionaries","Fragments":["in"]},{"Key":"dictionaries in","Fragments":["Clojure"]},{"Key":"be applied","Fragments":["like"]},{"Key":"applied like","Fragments":["functions"]},{"Key":"function seem","Fragments":["very"]},{"Key":"seem very","Fragments":["intuitive."]},{"Key":"call `(str","Fragments":["nucleotide)`"]},{"Key":"`(str nucleotide)`","Fragments":["if"]},{"Key":"nucleotide)` if","Fragments":["`rna-to-dna`"]},{"Key":"if `rna-to-dna`","Fragments":["was"]},{"Key":"`rna-to-dna` was","Fragments":["a"]},{"Key":"from char","Fragments":["to"]},{"Key":"to char,","Fragments":["instead"]},{"Key":"char, instead","Fragments":["of"]},{"Key":"with `:refer","Fragments":[":all`."]},{"Key":":all`. What","Fragments":["does"]},{"Key":"does that","Fragments":["do?"]},{"Key":"reason was","Fragments":["to"]},{"Key":"`lower-case` several","Fragments":["times"]},{"Key":"several times","Fragments":["on","to"]},{"Key":"same word.","Fragments":["But"]},{"Key":"word. But","Fragments":["spreading"]},{"Key":"But spreading","Fragments":["out"]},{"Key":"spreading out","Fragments":["the"]},{"Key":"logic as","Fragments":["you"]},{"Key":"you mentioned","Fragments":["is"]},{"Key":"mentioned is","Fragments":["not"]},{"Key":"nice. I'm","Fragments":["putting"]},{"Key":"I'm putting","Fragments":["it"]},{"Key":"inside `anagram?`","Fragments":["instead."]},{"Key":"possible simplification","Fragments":["is"]},{"Key":"simplification is","Fragments":["that"]},{"Key":"treat dictionaries","Fragments":["as"]},{"Key":"dictionaries as","Fragments":["functions"]},{"Key":"Clojure. You","Fragments":["could"]},{"Key":"define `to-rna-nucleotid`","Fragments":["as:"]},{"Key":"(def to-rna-nucleotid","Fragments":["{\\T"]},{"Key":"to-rna-nucleotid {\\T","Fragments":["\\A,"]},{"Key":"{\\T \\A,","Fragments":["\\A"]},{"Key":"\\A, \\A","Fragments":["\\U,"]},{"Key":"\\A \\U,","Fragments":["\\C"]},{"Key":"\\C \\G,","Fragments":["\\G"]},{"Key":"\\G, \\G","Fragments":["\\C})"]},{"Key":"the assert.","Fragments":["Your"]},{"Key":"assert. Your","Fragments":["current"]},{"Key":"Your current","Fragments":["solution"]},{"Key":"nice since","Fragments":["it"]},{"Key":"assertion while","Fragments":["it"]},{"Key":"while it","Fragments":["converts"]},{"Key":"it converts","Fragments":["the"]},{"Key":"converts the","Fragments":["string."]},{"Key":"The `(re-seq","Fragments":["#\"\\w\""]},{"Key":"#\"\\w\" dna-string)`","Fragments":["seems"]},{"Key":"dna-string)` seems","Fragments":["unnecessary"]},{"Key":"seems unnecessary","Fragments":["since"]},{"Key":"unnecessary since","Fragments":["you","the"]},{"Key":"already throwing","Fragments":["an"]},{"Key":"on bad","Fragments":["input."]},{"Key":"the `pairs`","Fragments":["map"]},{"Key":"`pairs` map","Fragments":["as"]},{"Key":"`(get pairs","Fragments":["nucleotide)`"]},{"Key":"pairs nucleotide)`","Fragments":["becomes"]},{"Key":"nucleotide)` becomes","Fragments":["`(pairs"]},{"Key":"becomes `(pairs","Fragments":["nucleotide)`."]},{"Key":"`(pairs nucleotide)`.","Fragments":["However,"]},{"Key":"nucleotide)`. However,","Fragments":["maybe"]},{"Key":"However, maybe","Fragments":["explicitly"]},{"Key":"maybe explicitly","Fragments":["calling"]},{"Key":"calling `get`","Fragments":["makes"]},{"Key":"`get` makes","Fragments":["it"]},{"Key":"small optimization:","Fragments":["`not`"]},{"Key":"optimization: `not`","Fragments":["and"]},{"Key":"and `nil?`","Fragments":["were"]},{"Key":"`nil?` were","Fragments":["unnecessary"]},{"Key":"were unnecessary","Fragments":["since"]},{"Key":"assert evaluates","Fragments":["non-nil"]},{"Key":"evaluates non-nil","Fragments":["and"]},{"Key":"non-nil and","Fragments":["non-false"]},{"Key":"and non-false","Fragments":["values"]},{"Key":"non-false values","Fragments":["as"]},{"Key":"something similar","Fragments":["here"]},{"Key":"similar here","Fragments":["as"]},{"Key":"here as","Fragments":["well,"]},{"Key":"well, then","Fragments":["reading"]},{"Key":"then reading","Fragments":["others'"]},{"Key":"reading others'","Fragments":["submissions"]},{"Key":"others' submissions","Fragments":["I"]},{"Key":"frequencies function","Fragments":["(http://clojuredocs.org/clojure_core/clojure.core/frequencies)."]},{"Key":"function (http://clojuredocs.org/clojure_core/clojure.core/frequencies).","Fragments":["Comes"]},{"Key":"(http://clojuredocs.org/clojure_core/clojure.core/frequencies). Comes","Fragments":["in"]},{"Key":"Comes in","Fragments":["handy"]},{"Key":"Nice! clojure.string","Fragments":["also"]},{"Key":"clojure.string also","Fragments":["has"]},{"Key":"also has","Fragments":["a"]},{"Key":"a trim","Fragments":["function"]},{"Key":"trim function","Fragments":["(instead"]},{"Key":"function (instead","Fragments":["of"]},{"Key":"(instead of","Fragments":["invoking"]},{"Key":"of invoking","Fragments":["the"]},{"Key":"invoking the","Fragments":["java"]},{"Key":"method on","Fragments":["the"]},{"Key":"the string).","Fragments":["I'm"]},{"Key":"string). I'm","Fragments":["not"]},{"Key":"clojure expert","Fragments":["but"]},{"Key":"expert but","Fragments":["I"]},{"Key":"expect that","Fragments":["using"]},{"Key":"using something","Fragments":["like","like"]},{"Key":"like (=","Fragments":["(last"]},{"Key":"input) \\?)","Fragments":["over"]},{"Key":"\\?) over","Fragments":[".endswith"]},{"Key":"over .endswith","Fragments":["would"]},{"Key":".endswith would","Fragments":["be"]},{"Key":"more clojure-y,","Fragments":["especially"]},{"Key":"clojure-y, especially","Fragments":["if"]},{"Key":"especially if","Fragments":["you're"]},{"Key":"you're hoping","Fragments":["to"]},{"Key":"transfer your","Fragments":["skills"]},{"Key":"your skills","Fragments":["to"]},{"Key":"skills to","Fragments":["ClojureScript."]},{"Key":"to ClojureScript.","Fragments":["This"]},{"Key":"ClojureScript. This","Fragments":["version"]},{"Key":"than before","Fragments":["though."]},{"Key":"advice. Why","Fragments":["does"]},{"Key":"Why does","Fragments":["`last`","`last`"]},{"Key":"does `last`","Fragments":["on","on"]},{"Key":"`last` on","Fragments":["a","a"]},{"Key":"string end","Fragments":["with","with"]},{"Key":"an escaped","Fragments":["character","character"]},{"Key":"escaped character","Fragments":["with","with"]},{"Key":"character with","Fragments":["no","no"]},{"Key":"no double","Fragments":["quotes?","quotes?"]},{"Key":"double quotes?","Fragments":["Is","Is"]},{"Key":"quotes? Is","Fragments":["that","that"]},{"Key":"way single","Fragments":["characters","characters"]},{"Key":"single characters","Fragments":["and","and"]},{"Key":"and represented","Fragments":["in","in"]},{"Key":"represented in","Fragments":["clojure?","clojure?"]},{"Key":" Followed","Fragments":["advice"]},{"Key":"Followed advice","Fragments":["from"]},{"Key":"Two questions:","Fragments":["Why"]},{"Key":"questions: Why","Fragments":["does"]},{"Key":"looks good!","Fragments":["One"]},{"Key":"tiny nitpick:","Fragments":["You","`cond`"]},{"Key":"nitpick: You","Fragments":["don't"]},{"Key":"of `re-find`","Fragments":["is"]},{"Key":"`re-find` is","Fragments":["not"]},{"Key":"not `nil`.","Fragments":["Clojure"]},{"Key":"`nil`. Clojure","Fragments":["will"]},{"Key":"will treat","Fragments":["`nil`"]},{"Key":"treat `nil`","Fragments":["and"]},{"Key":"`false` values","Fragments":["as"]},{"Key":"as falsey,","Fragments":["and"]},{"Key":"falsey, and","Fragments":["everything"]},{"Key":" Dang,","Fragments":["those"]},{"Key":"Dang, those","Fragments":["are"]},{"Key":"some impressive","Fragments":["regexes."]},{"Key":"nitpick: `cond`","Fragments":["can"]},{"Key":"`cond` can","Fragments":["accept"]},{"Key":"can accept","Fragments":["the"]},{"Key":"`:else` keyword","Fragments":["as"]},{"Key":"keyword as","Fragments":["the"]},{"Key":"test of","Fragments":["the"]},{"Key":"last clause.","Fragments":["It"]},{"Key":"clause. It","Fragments":["does"]},{"Key":"done already,","Fragments":["but"]},{"Key":"but makes","Fragments":["it"]},{"Key":"and idiomatic.","Fragments":["Your"]},{"Key":"idiomatic. Your","Fragments":["final"]},{"Key":"Your final","Fragments":["case"]},{"Key":"be come:","Fragments":["`:else"]},{"Key":"come: `:else","Fragments":["\"Whatever.\"`"]},{"Key":"of `assert`","Fragments":["--"]},{"Key":"`assert` --","Fragments":["I"]},{"Key":"hadn't come","Fragments":["across"]},{"Key":"across that","Fragments":["before!"]},{"Key":"- Also","Fragments":["like"]},{"Key":"Also like","Fragments":["that"]},{"Key":"used meaningful","Fragments":["names"]},{"Key":"your input","Fragments":["parameters"]},{"Key":"input parameters","Fragments":["---"]},{"Key":"parameters ---","Fragments":["i.e."]},{"Key":"--- i.e.","Fragments":["`dna`"]},{"Key":"- rather","Fragments":["than"]},{"Key":"than `(not","Fragments":["(nil?"]},{"Key":"(nil? nuc-comp))`,","Fragments":["you"]},{"Key":"nuc-comp))`, you","Fragments":["could"]},{"Key":"`(not (contains?","Fragments":["comps"]},{"Key":"(contains? comps","Fragments":["nuc))`,"]},{"Key":"comps nuc))`,","Fragments":["which"]},{"Key":"nuc))`, which","Fragments":["might"]},{"Key":"might indicate","Fragments":["intent"]},{"Key":"indicate intent","Fragments":["a"]},{"Key":"the `do`","Fragments":["macro"]},{"Key":"`do` macro","Fragments":["is"]},{"Key":"in `transcribe`:","Fragments":["`let`"]},{"Key":"`transcribe`: `let`","Fragments":["allows"]},{"Key":"`let` allows","Fragments":["multiple"]},{"Key":"allows multiple","Fragments":["statements"]},{"Key":"multiple statements","Fragments":["in"]},{"Key":"the 'thrush'","Fragments":["macro"]},{"Key":"'thrush' macro","Fragments":["(`-\u003e\u003e`)"]},{"Key":"macro (`-\u003e\u003e`)","Fragments":["in"]},{"Key":"(`-\u003e\u003e`) in","Fragments":["situations"]},{"Key":"in situations","Fragments":["like"]},{"Key":"your `to-rna`","Fragments":["function"]},{"Key":"`to-rna` function","Fragments":["---"]},{"Key":"function ---","Fragments":["i.e.,"]},{"Key":"--- i.e.,","Fragments":["this"]},{"Key":"i.e., this","Fragments":["can"]},{"Key":" :refer","Fragments":["all"]},{"Key":":refer all","Fragments":["brings"]},{"Key":"all brings","Fragments":["in"]},{"Key":"brings in","Fragments":["all"]},{"Key":"string functions,","Fragments":["it's"]},{"Key":"functions, it's","Fragments":["pretty"]},{"Key":"like use.","Fragments":["I"]},{"Key":"saw other","Fragments":["solutions"]},{"Key":"char map","Fragments":["but","solutions"]},{"Key":"map but","Fragments":["wanted"]},{"Key":"to specifically","Fragments":["see"]},{"Key":"specifically see","Fragments":["if"]},{"Key":"strings (no","Fragments":["real"]},{"Key":"(no real","Fragments":["reason,"]},{"Key":"real reason,","Fragments":["just"]},{"Key":"reason, just","Fragments":["to"]},{"Key":"to challenge","Fragments":["myself)."]},{"Key":"challenge myself).","Fragments":["Agree"]},{"Key":"myself). Agree","Fragments":["char"]},{"Key":"Agree char","Fragments":["map"]},{"Key":"map solutions","Fragments":["is"]},{"Key":"solutions is","Fragments":["simpler."]},{"Key":"like surprisingly","Fragments":["much"]},{"Key":"surprisingly much","Fragments":["code,"]},{"Key":"much code,","Fragments":["with"]},{"Key":"code, with","Fragments":["way"]},{"Key":"with way","Fragments":["too"]},{"Key":"seem too","Fragments":["bad,","bad."]},{"Key":"too bad,","Fragments":["but"]},{"Key":"nice way","Fragments":["to"]},{"Key":"stop repeatedly","Fragments":["passing"]},{"Key":"repeatedly passing","Fragments":["phrase"]},{"Key":"passing phrase","Fragments":["to","to"]},{"Key":"phrase to","Fragments":["my","each"]},{"Key":"learned just","Fragments":["enough"]},{"Key":"enough Clojure","Fragments":["to"]},{"Key":"this done.","Fragments":["Very"]},{"Key":"done. Very","Fragments":["new"]},{"Key":"Very new","Fragments":["to"]},{"Key":"functional programming.","Fragments":["This"]},{"Key":"programming. This","Fragments":["seems"]},{"Key":"seems ok","Fragments":["to"]},{"Key":"me, not","Fragments":["sure"]},{"Key":"the \"if\"","Fragments":["chain."]},{"Key":"clause as","Fragments":["the"]},{"Key":"the error.","Fragments":["First"]},{"Key":"error. First","Fragments":["time"]},{"Key":"seen that.","Fragments":["But"]},{"Key":"does combine","Fragments":["conversion"]},{"Key":"combine conversion","Fragments":["and"]},{"Key":"and validation","Fragments":["which"]},{"Key":"validation which","Fragments":["may"]},{"Key":"may or","Fragments":["may"]},{"Key":"or may","Fragments":["not"]},{"Key":" `(clojure.string/join","Fragments":["...)`"]},{"Key":"`(clojure.string/join ...)`","Fragments":["can"]},{"Key":"...)` which","Fragments":["doesn't"]},{"Key":" `not=`","Fragments":["is"]},{"Key":"Now you","Fragments":["can"]},{"Key":"your higher-order","Fragments":["function"]},{"Key":"higher-order function","Fragments":["and"]},{"Key":"and pre-compute","Fragments":["the"]},{"Key":"pre-compute the","Fragments":["lower-case"]},{"Key":"the lower-case","Fragments":["version"]},{"Key":"lower-case version","Fragments":["of"]},{"Key":"avoid repeatedly","Fragments":["calling"]},{"Key":"repeatedly calling","Fragments":["lowercase"]},{"Key":"calling lowercase","Fragments":["on"]},{"Key":"lowercase on","Fragments":["it"]},{"Key":"That `case`","Fragments":["looks"]},{"Key":"`case` looks","Fragments":["complex..."]},{"Key":"looks complex...","Fragments":["The"]},{"Key":"complex... The","Fragments":["function"]},{"Key":"give to","Fragments":["`map`"]},{"Key":"to `map`","Fragments":["is"]},{"Key":"`map` is","Fragments":["simply"]},{"Key":"simply `(if","Fragments":["(="]},{"Key":"`(if (=","Fragments":["c"]},{"Key":"(= c","Fragments":["\\T)"]},{"Key":"c \\T)","Fragments":["\\U"]},{"Key":" (Anyway,","Fragments":["you"]},{"Key":"(Anyway, you","Fragments":["should"]},{"Key":"char back,","Fragments":["not"]},{"Key":"back, not","Fragments":["a"]},{"Key":" yelling?","Fragments":["passed"]},{"Key":"yelling? passed","Fragments":["the"]},{"Key":"but should've","Fragments":["used"]},{"Key":"should've used","Fragments":["and,"]},{"Key":"used and,","Fragments":["not"]},{"Key":"and, not","Fragments":["="]},{"Key":"probably an","Fragments":["anti-pattern."]},{"Key":"an anti-pattern.","Fragments":["You"]},{"Key":"anti-pattern. You","Fragments":["could"]},{"Key":"into `case`","Fragments":["and"]},{"Key":"and `cond`","Fragments":["instead."]},{"Key":"the `:requires`","Fragments":["arguments"]},{"Key":"`:requires` arguments","Fragments":["to"]},{"Key":"want from","Fragments":["other"]},{"Key":"other namespaces","Fragments":["like"]},{"Key":"namespaces like","Fragments":["`clojure.string`."]},{"Key":"like `clojure.string`.","Fragments":["That"]},{"Key":"`clojure.string`. That","Fragments":["would"]},{"Key":" `(str","Fragments":["\"Fine."]},{"Key":"`(str \"Fine.","Fragments":["Be"]},{"Key":"that way!\")`","Fragments":["is"]},{"Key":"way!\")` is","Fragments":["redundant."]},{"Key":"is redundant.","Fragments":["You","Assert"]},{"Key":"redundant. You","Fragments":["can"]},{"Key":"literal instead","Fragments":["of"]},{"Key":"of \"converting","Fragments":["it"]},{"Key":"\"converting it","Fragments":["to"]},{"Key":"of `:use`.","Fragments":["The"]},{"Key":"`:use`. The","Fragments":["`:require`"]},{"Key":"The `:require`","Fragments":["form"]},{"Key":"using which","Fragments":["makes"]},{"Key":"from. (Of","Fragments":["course"]},{"Key":"(Of course","Fragments":["in"]},{"Key":"course in","Fragments":["the"]},{"Key":"of only","Fragments":["a"]},{"Key":"single use","Fragments":["that's"]},{"Key":"use that's","Fragments":["not"]},{"Key":"but when","Fragments":["there's"]},{"Key":"one required","Fragments":["namespace"]},{"Key":"required namespace","Fragments":["it"]},{"Key":"namespace it","Fragments":["becomes"]},{"Key":"becomes more","Fragments":["important.)"]},{"Key":"concept called","Fragments":["an","an"]},{"Key":"an \"alphagram\"","Fragments":["in"]},{"Key":"\"alphagram\" in","Fragments":["the"]},{"Key":"of Anagrams.","Fragments":["It"]},{"Key":"Anagrams. It","Fragments":["might"]},{"Key":"more reusable","Fragments":["and"]},{"Key":"reusable and","Fragments":["composable?"]},{"Key":"and composable?","Fragments":["There's"]},{"Key":"composable? There's","Fragments":["a"]},{"Key":"predicate called","Fragments":["`every-pred`"]},{"Key":"called `every-pred`","Fragments":["that"]},{"Key":"`every-pred` that","Fragments":["can"]},{"Key":"combine multiple","Fragments":["predicates"]},{"Key":"multiple predicates","Fragments":["into"]},{"Key":"single filter,","Fragments":["for"]},{"Key":"filter, for","Fragments":["example."]},{"Key":"You're lower-casing","Fragments":["the"]},{"Key":"candidate word","Fragments":["for"]},{"Key":"each comparison.","Fragments":["You"]},{"Key":"comparison. You","Fragments":["might"]},{"Key":"that once,","Fragments":["possibly"]},{"Key":"once, possibly","Fragments":["even"]},{"Key":"possibly even","Fragments":["using"]},{"Key":"even using","Fragments":["something"]},{"Key":"like `partial`","Fragments":["application"]},{"Key":"`partial` application","Fragments":["to","or"]},{"Key":"specific word,","Fragments":["for"]},{"Key":"word, for","Fragments":["example."]},{"Key":"would the","Fragments":["solution"]},{"Key":"solution look","Fragments":["like"]},{"Key":"used `reduce`","Fragments":["instead"]},{"Key":"You're lower","Fragments":["casing"]},{"Key":"lower casing","Fragments":["each"]},{"Key":"casing each","Fragments":["individual"]},{"Key":"each individual","Fragments":["word"]},{"Key":"individual word","Fragments":["here."]},{"Key":"word here.","Fragments":["What"]},{"Key":"you lower","Fragments":["cased"]},{"Key":"cased the","Fragments":["whole"]},{"Key":"whole input","Fragments":["before"]},{"Key":"broke it","Fragments":["up?"]},{"Key":"`blank?` test","Fragments":["is"]},{"Key":"a failure","Fragments":["in"]},{"Key":"failure in","Fragments":["your"]},{"Key":"your splitting.","Fragments":["You're"]},{"Key":"splitting. You're","Fragments":["getting"]},{"Key":"You're getting","Fragments":["the"]},{"Key":"words out,","Fragments":["but"]},{"Key":"getting extra","Fragments":["things"]},{"Key":"extra things","Fragments":["with"]},{"Key":"it. Maybe","Fragments":["you"]},{"Key":"about filtering","Fragments":["the"]},{"Key":"bad values","Fragments":["out"]},{"Key":"values out","Fragments":["before"]},{"Key":"out before","Fragments":["you"]},{"Key":"you process","Fragments":["the"]},{"Key":"the rest?","Fragments":["Or"]},{"Key":"rest? Or","Fragments":["maybe"]},{"Key":"maybe think","Fragments":["about"]},{"Key":"that wouldn't","Fragments":["include"]},{"Key":"wouldn't include","Fragments":["blank"]},{"Key":"include blank","Fragments":["values"]},{"Key":"blank values","Fragments":["in"]},{"Key":"the composable","Fragments":["predicate"]},{"Key":"composable predicate","Fragments":["functions,"]},{"Key":"Is `rna-to-dna`","Fragments":["actually"]},{"Key":"`rna-to-dna` actually","Fragments":["mapping"]},{"Key":"actually mapping","Fragments":["dna"]},{"Key":"mapping dna","Fragments":["to"]},{"Key":"conversion of","Fragments":["string"]},{"Key":"bit puzzling","Fragments":["as"]},{"Key":"puzzling as","Fragments":["well."]},{"Key":"The validation","Fragments":["of"]},{"Key":"input mixed","Fragments":["in"]},{"Key":"mixed in","Fragments":["with"]},{"Key":"conversion also","Fragments":["feels"]},{"Key":"also feels","Fragments":["sub-optimal"]},{"Key":"feels sub-optimal","Fragments":["to"]},{"Key":"sub-optimal to","Fragments":["me."]},{"Key":"me. `rna-to-dna`","Fragments":["is"]},{"Key":"`rna-to-dna` is","Fragments":["functionally"]},{"Key":"functionally an","Fragments":["internal"]},{"Key":"an internal","Fragments":["implementation"]},{"Key":"internal implementation","Fragments":["detail"]},{"Key":"detail of","Fragments":["the"]},{"Key":"main `to-rna`","Fragments":["function."]},{"Key":"`to-rna` function.","Fragments":["I"]},{"Key":"prefer if","Fragments":["`to-rna`"]},{"Key":"if `to-rna`","Fragments":["validated"]},{"Key":"`to-rna` validated","Fragments":["its"]},{"Key":"validated its","Fragments":["input"]},{"Key":"input so","Fragments":["that"]},{"Key":"conversion (private","Fragments":["and"]},{"Key":"(private and","Fragments":["internal"]},{"Key":"and internal","Fragments":["implementation)"]},{"Key":"internal implementation)","Fragments":["could"]},{"Key":"implementation) could","Fragments":["be"]},{"Key":"it assumes","Fragments":["it's"]},{"Key":"assumes it's","Fragments":["getting"]},{"Key":"it's getting","Fragments":["valid"]},{"Key":"getting valid","Fragments":["data."]},{"Key":" `letters-match?`","Fragments":["is"]},{"Key":"`letters-match?` is","Fragments":["actually"]},{"Key":" `same-word?`","Fragments":["is"]},{"Key":"`same-word?` is","Fragments":["actually"]},{"Key":"actually testing","Fragments":["for"]},{"Key":"for `not-same-word?`","Fragments":["isn't"]},{"Key":"`not-same-word?` isn't","Fragments":["it?"]},{"Key":" `partial`","Fragments":["FTW!"]},{"Key":"`partial` FTW!","Fragments":["But"]},{"Key":"FTW! But","Fragments":["you're"]},{"Key":"But you're","Fragments":["missing"]},{"Key":"you're missing","Fragments":["some"]},{"Key":"other optimizations","Fragments":["there."]},{"Key":"optimizations there.","Fragments":["Each"]},{"Key":"there. Each","Fragments":["item"]},{"Key":"Each item","Fragments":["in"]},{"Key":"the word-list","Fragments":["will"]},{"Key":"word-list will","Fragments":["still"]},{"Key":"to lowercase","Fragments":["the"]},{"Key":"`word` 2","Fragments":["times."]},{"Key":"could functionally","Fragments":["compose"]},{"Key":"functionally compose","Fragments":["the"]},{"Key":"compose the","Fragments":["`same-word?`"]},{"Key":"the `same-word?`","Fragments":["and"]},{"Key":"`same-word?` and","Fragments":["the"]},{"Key":"the `letters-match?`","Fragments":["functions"]},{"Key":"`letters-match?` functions","Fragments":["into"]},{"Key":"function without","Fragments":["having"]},{"Key":"all yourself.","Fragments":["Maybe"]},{"Key":"yourself. Maybe","Fragments":["you"]},{"Key":"at `comp`","Fragments":["and"]},{"Key":"`comp` and","Fragments":["`every-pred`,"]},{"Key":"and `every-pred`,","Fragments":["for"]},{"Key":"`every-pred`, for","Fragments":["example."]},{"Key":" `(:use`","Fragments":["works"]},{"Key":"`(:use` works","Fragments":["but"]},{"Key":"but `(:require`","Fragments":["is"]},{"Key":"`(:require` is","Fragments":["more"]},{"Key":"idiomatic I","Fragments":["think."]},{"Key":" Passing","Fragments":["data"]},{"Key":"Passing data","Fragments":["to"]},{"Key":"data to","Fragments":["functions"]},{"Key":"probably going","Fragments":["to"]},{"Key":"OO where","Fragments":["you"]},{"Key":"have instance","Fragments":["variables"]},{"Key":"instance variables","Fragments":["to"]},{"Key":"the data.","Fragments":["One"]},{"Key":"data. One","Fragments":["way"]},{"Key":"to \"avoid\"","Fragments":["passing"]},{"Key":"\"avoid\" passing","Fragments":["that"]},{"Key":"passing that","Fragments":["data"]},{"Key":"that data","Fragments":["would"]},{"Key":"data would","Fragments":["be"]},{"Key":"into `partial`","Fragments":["application"]},{"Key":"application or","Fragments":["higher-order"]},{"Key":"or higher-order","Fragments":["functions"]},{"Key":"that closed","Fragments":["over"]},{"Key":"closed over","Fragments":["the"]},{"Key":"phrase data","Fragments":["in"]},{"Key":"some way?","Fragments":["For"]},{"Key":"way? For","Fragments":["example,"]},{"Key":"define an","Fragments":["anonymous"]},{"Key":"and bind","Fragments":["it"]},{"Key":"bind it","Fragments":["to"]},{"Key":"name using","Fragments":["`let`"]},{"Key":"`let` just","Fragments":["like"]},{"Key":"can any","Fragments":["value."]},{"Key":"any value.","Fragments":["You"]},{"Key":"value. You","Fragments":["might"]},{"Key":"things just","Fragments":["to"]},{"Key":"different solutions","Fragments":["work."]},{"Key":"as concisely","Fragments":["as"]},{"Key":"concisely as","Fragments":["possible,"]},{"Key":"possible, and","Fragments":["`condp`"]},{"Key":"and `condp`","Fragments":["is"]},{"Key":"is (I","Fragments":["think)"]},{"Key":"(I think)","Fragments":["the"]},{"Key":"think) the","Fragments":["best"]},{"Key":"best solution.","Fragments":["I"]},{"Key":"also wanted","Fragments":["to"]},{"Key":"one regexp","Fragments":["per"]},{"Key":"regexp per","Fragments":["case;"]},{"Key":"per case;","Fragments":["there"]},{"Key":"case; there","Fragments":["are"]},{"Key":"some clever","Fragments":["edge"]},{"Key":"clever edge","Fragments":["cases"]},{"Key":"tests, and","Fragments":["it"]},{"Key":"me longer","Fragments":["than"]},{"Key":"than I'd","Fragments":["like"]},{"Key":"solve for","Fragments":["the"]},{"Key":"more complete","Fragments":["solution"]},{"Key":"complete solution","Fragments":["than"]},{"Key":"solution than","Fragments":["my"]},{"Key":"my question","Fragments":["case,"]},{"Key":"question case,","Fragments":["though"]},{"Key":"though --","Fragments":["I"]},{"Key":"of at","Fragments":["least"]},{"Key":"one edge","Fragments":["case"]},{"Key":"edge case","Fragments":["that"]},{"Key":"question clause","Fragments":["would"]},{"Key":"clause would","Fragments":["erroneously"]},{"Key":"would erroneously","Fragments":["match"]},{"Key":"erroneously match","Fragments":["(\"WHO"]},{"Key":"match (\"WHO","Fragments":["IS"]},{"Key":"(\"WHO IS","Fragments":["NUMBER"]},{"Key":"IS NUMBER","Fragments":["1?\")"]},{"Key":"have rewritten","Fragments":["the"]},{"Key":"rewritten the","Fragments":["question"]},{"Key":"question regexp","Fragments":["to","since"]},{"Key":"just flip","Fragments":["the"]},{"Key":"yelling \u0026","Fragments":["question"]},{"Key":"\u0026 question","Fragments":["cases,"]},{"Key":"question cases,","Fragments":["to"]},{"Key":"cases, to","Fragments":["make"]},{"Key":"sure yelling","Fragments":["was"]},{"Key":"yelling was","Fragments":["always","indicated"]},{"Key":"was always","Fragments":["matched"]},{"Key":"always matched","Fragments":["first."]},{"Key":"matched first.","Fragments":["In"]},{"Key":"first. In","Fragments":["which"]},{"Key":"In which","Fragments":["case"]},{"Key":"have relaxed","Fragments":["the"]},{"Key":"relaxed the","Fragments":["question"]},{"Key":"regexp since","Fragments":["it"]},{"Key":"it no","Fragments":["longer"]},{"Key":"longer needs","Fragments":["to"]},{"Key":"exclude yelling,","Fragments":["but"]},{"Key":"yelling, but","Fragments":["I"]},{"Key":"learned what","Fragments":["I"]},{"Key":"to from","Fragments":["this"]},{"Key":" @nya","Fragments":["Thanks."]},{"Key":"@nya Thanks.","Fragments":["I"]},{"Key":"went through","Fragments":["the"]},{"Key":"in Javascript","Fragments":["already."]},{"Key":"Javascript already.","Fragments":["It's"]},{"Key":"already. It's","Fragments":["my"]},{"Key":"It's my","Fragments":["native"]},{"Key":"native tongue,","Fragments":["so"]},{"Key":"tongue, so","Fragments":["the"]},{"Key":"point was","Fragments":["to"]},{"Key":"iterate as","Fragments":["hard"]},{"Key":"as hard","Fragments":["as"]},{"Key":"hard as","Fragments":["possible"]},{"Key":"possible until","Fragments":["it"]},{"Key":"was as","Fragments":["tight"]},{"Key":"a choirboy's","Fragments":["bum."]},{"Key":"The 'true","Fragments":["\"Whatever\"'"]},{"Key":"'true \"Whatever\"'","Fragments":["is"]},{"Key":"\"Whatever\"' is","Fragments":["idiomatic"]},{"Key":"to older","Fragments":["Lisps,"]},{"Key":"older Lisps,","Fragments":["which"]},{"Key":"Lisps, which","Fragments":["is"]},{"Key":"it rather","Fragments":["than"]},{"Key":"decided my","Fragments":["last"]},{"Key":"my last","Fragments":["effort"]},{"Key":"last effort","Fragments":["was"]},{"Key":"effort was","Fragments":["more"]},{"Key":"about regular","Fragments":["expressions"]},{"Key":"expressions than","Fragments":["Clojure,"]},{"Key":"than Clojure,","Fragments":["so"]},{"Key":"I challenged","Fragments":["myself"]},{"Key":"challenged myself","Fragments":["to"]},{"Key":"rewrite it","Fragments":["without"]},{"Key":"any regexps.","Fragments":["I"]},{"Key":"regexps. I","Fragments":["had"]},{"Key":"peek to","Fragments":["figure"]},{"Key":"between `\"?\"`","Fragments":["and"]},{"Key":"`\"?\"` and","Fragments":["`\\?`"]},{"Key":"`\\?` but","Fragments":["on"]},{"Key":"whole this","Fragments":["feels"]},{"Key":"feels way","Fragments":["more"]},{"Key":"* Replaced","Fragments":["reversed"]},{"Key":"Replaced reversed","Fragments":["range"]},{"Key":"reversed range","Fragments":["and"]},{"Key":"and vector","Fragments":["with"]},{"Key":"range that","Fragments":["steps"]},{"Key":"that steps","Fragments":["backwards."]},{"Key":"* Removed","Fragments":["hard"]},{"Key":"Removed hard","Fragments":["coded"]},{"Key":"coded verse","Fragments":["for"]},{"Key":"verse for","Fragments":["0"]},{"Key":"for 0","Fragments":["bottles"]},{"Key":"0 bottles","Fragments":["remaining"]},{"Key":"is :)","Fragments":["I"]},{"Key":"for folds","Fragments":["when"]},{"Key":"folds when","Fragments":["I"]},{"Key":"found reduce","Fragments":["and"]},{"Key":"reduce and","Fragments":["the"]},{"Key":"exact solution","Fragments":["to"]},{"Key":"the documentation.","Fragments":["It"]},{"Key":"documentation. It","Fragments":["took"]},{"Key":"took some","Fragments":["time"]},{"Key":"look any","Fragments":["further."]},{"Key":"know, I","Fragments":["explicitely"]},{"Key":"I explicitely","Fragments":["changed"]},{"Key":"explicitely changed","Fragments":["the"]},{"Key":"tests pass","Fragments":["=$."]},{"Key":"pass =$.","Fragments":["Your"]},{"Key":"=$. Your","Fragments":["solution"]},{"Key":"using require","Fragments":["now,"]},{"Key":"require now,","Fragments":["as"]},{"Key":"now, as","Fragments":["it"]},{"Key":"that `use`","Fragments":["should"]},{"Key":"`use` should","Fragments":["generally"]},{"Key":"should generally","Fragments":["not"]},{"Key":"I make","Fragments":["a"]},{"Key":"function `check`","Fragments":["to"]},{"Key":"`check` to","Fragments":["avoid"]},{"Key":"avoid passing","Fragments":["phrase"]},{"Key":"each predicate.","Fragments":["It"]},{"Key":"predicate. It","Fragments":["was"]},{"Key":"interesting learning","Fragments":["exercise,"]},{"Key":"other version","Fragments":["seems"]},{"Key":"version seems","Fragments":["simpler"]},{"Key":" @audie","Fragments":["I"]},{"Key":"@audie I","Fragments":["liked"]},{"Key":"liked it","Fragments":["too."]},{"Key":"it too.","Fragments":["I"]},{"Key":"realized validation","Fragments":["with"]},{"Key":"validation with","Fragments":["`assert`"]},{"Key":"with `assert`","Fragments":["was"]},{"Key":"`assert` was","Fragments":["a"]},{"Key":"thing from","Fragments":["looking"]},{"Key":"at other's","Fragments":["solutions","code"]},{"Key":"other's solutions","Fragments":["after"]},{"Key":"solutions after","Fragments":["the"]},{"Key":"the fact.","Fragments":["I"]},{"Key":"fact. I","Fragments":["decided"]},{"Key":"I imported","Fragments":["the"]},{"Key":"imported the","Fragments":["`blank?`"]},{"Key":"my nested","Fragments":["`if`s"]},{"Key":"`if`s with","Fragments":["a"]},{"Key":"used `apply","Fragments":["str`"]},{"Key":"Yeah I'm","Fragments":["not"]},{"Key":"learned something","Fragments":["about"]},{"Key":"about `let`","Fragments":["from"]},{"Key":"`let` from","Fragments":["you"]},{"Key":"that `re-find`","Fragments":["was"]},{"Key":"`re-find` was","Fragments":["what"]},{"Key":"looking for,","Fragments":["not"]},{"Key":"for, not","Fragments":["`re-matches`"]},{"Key":"being done","Fragments":["multiple"]},{"Key":"done multiple","Fragments":["times"]},{"Key":"times can","Fragments":["be"]},{"Key":"done more","Fragments":["succinctly"]},{"Key":"succinctly with","Fragments":["`case`."]},{"Key":"`(= x","Fragments":["0)`"]},{"Key":"x 0)`","Fragments":["can"]},{"Key":"0)` can","Fragments":["also"]},{"Key":"be written,","Fragments":["maybe"]},{"Key":"written, maybe","Fragments":["more"]},{"Key":"maybe more","Fragments":["idiomatically,"]},{"Key":"more idiomatically,","Fragments":["as"]},{"Key":"idiomatically, as","Fragments":["`(zero?"]},{"Key":" `create`","Fragments":["doesn't"]},{"Key":"`create` doesn't","Fragments":["feel"]},{"Key":"Functions like","Fragments":["create"]},{"Key":"like create","Fragments":["can"]},{"Key":"create can","Fragments":["take"]},{"Key":"variable number","Fragments":["of"]},{"Key":"arguments using","Fragments":["`\u0026"]},{"Key":"using `\u0026","Fragments":["parts`"]},{"Key":"`\u0026 parts`","Fragments":["which"]},{"Key":"parts` which","Fragments":["would"]},{"Key":"a list.","Fragments":["That"]},{"Key":"list. That","Fragments":["would"]},{"Key":"`sing` function?","Fragments":["The"]},{"Key":"function? The","Fragments":["`apply`"]},{"Key":"The `apply`","Fragments":["function"]},{"Key":"`apply` function","Fragments":["basically"]},{"Key":"function basically","Fragments":["expands"]},{"Key":"basically expands","Fragments":["a"]},{"Key":"expands a","Fragments":["list"]},{"Key":"a varargs","Fragments":["for"]},{"Key":"varargs for","Fragments":["a"]},{"Key":"given method.","Fragments":["Those"]},{"Key":"method. Those","Fragments":["might"]},{"Key":"Those might","Fragments":["be"]},{"Key":"Really nice","Fragments":["use"]},{"Key":"with `check`.","Fragments":["I"]},{"Key":"`check`. I","Fragments":["like"]},{"Key":" Anonymous","Fragments":["functions"]},{"Key":"a short-hand","Fragments":["mode"]},{"Key":"short-hand mode","Fragments":["that"]},{"Key":"mode that","Fragments":["works"]},{"Key":"works very","Fragments":["well"]},{"Key":"a single-arity","Fragments":["function"]},{"Key":"single-arity function","Fragments":["like"]},{"Key":"like check.","Fragments":["e.g.:"]},{"Key":"check. e.g.:","Fragments":["`#(%"]},{"Key":"e.g.: `#(%","Fragments":["phrase)`"]},{"Key":"`#(% phrase)`","Fragments":["Just"]},{"Key":"phrase)` Just","Fragments":["a"]},{"Key":"style thing,","Fragments":["but"]},{"Key":"Good job","Fragments":["with"]},{"Key":"job with","Fragments":["the"]},{"Key":"the readable","Fragments":["code."]},{"Key":"multiple instances","Fragments":["of"]},{"Key":"of \"bottle\"","Fragments":["\"on"]},{"Key":"\"bottle\" \"on","Fragments":["the"]},{"Key":"\"on the","Fragments":["wall\""]},{"Key":"the wall\"","Fragments":["and"]},{"Key":"wall\" and","Fragments":["\"of"]},{"Key":"and \"of","Fragments":["beer\"."]},{"Key":"As someone","Fragments":["pointed"]},{"Key":"someone pointed","Fragments":["out"]},{"Key":"another code,","Fragments":["in"]},{"Key":"code, in","Fragments":["clojure"]},{"Key":"clojure there","Fragments":["is"]},{"Key":"test zero?","Fragments":["http://clojuredocs.org/clojure.core/zero_q"]},{"Key":"the instructions/test:","Fragments":["why"]},{"Key":"instructions/test: why","Fragments":["must"]},{"Key":"why must","Fragments":["X"]},{"Key":"must X","Fragments":["throw"]},{"Key":"X throw","Fragments":["an"]},{"Key":"exception while","Fragments":["U"]},{"Key":"while U","Fragments":["is"]},{"Key":"That case","Fragments":["statement"]},{"Key":"really concise","Fragments":["--"]},{"Key":"concise --","Fragments":["I"]},{"Key":"this working","Fragments":["was"]},{"Key":"working was","Fragments":["to"]},{"Key":"`cond` again.","Fragments":["I"]},{"Key":"again. I","Fragments":["decided"]},{"Key":"try looking","Fragments":["up"]},{"Key":"looking up","Fragments":["values"]},{"Key":"up values","Fragments":["in"]},{"Key":"was disappointed","Fragments":["to"]},{"Key":"disappointed to","Fragments":["find"]},{"Key":"this didn't","Fragments":["work","seem"]},{"Key":" (get","Fragments":["transcription-map"]},{"Key":"(get transcription-map","Fragments":["nucleotide"]},{"Key":"transcription-map nucleotide","Fragments":["(throw","AssertionError)"]},{"Key":"nucleotide (throw","Fragments":["(AssertionError."]},{"Key":"see why","Fragments":["this"]},{"Key":"why this","Fragments":["won't"]},{"Key":"won't work,","Fragments":["but"]},{"Key":"Ruby mind","Fragments":["was"]},{"Key":"mind was","Fragments":["hoping"]},{"Key":"it might.","Fragments":["Let"]},{"Key":"might. Let","Fragments":["me"]},{"Key":"get that","Fragments":["working"]},{"Key":"that working","Fragments":["the"]},{"Key":"make `def-`","Fragments":["but"]},{"Key":"`def-` but","Fragments":["I"]},{"Key":"saw that","Fragments":["it","I"]},{"Key":"was kind","Fragments":["of"]},{"Key":"of convoluted.","Fragments":["I"]},{"Key":"convoluted. I","Fragments":["suppose"]},{"Key":"use let","Fragments":["here,"]},{"Key":"let here,","Fragments":["but"]},{"Key":"means more","Fragments":["work"]},{"Key":"the computer","Fragments":["and"]},{"Key":"computer and","Fragments":["I"]},{"Key":"could handle","Fragments":["a"]},{"Key":"handle a","Fragments":["case"]},{"Key":"usually turn","Fragments":["to"]},{"Key":"other's code","Fragments":["I"]},{"Key":"unnecessary `seq`","Fragments":["before."]},{"Key":"Also now","Fragments":["I"]},{"Key":"about `assert`","Fragments":["in"]},{"Key":"`assert` in","Fragments":["this"]},{"Key":"tried throwing","Fragments":["that"]},{"Key":"throwing that","Fragments":["in."]},{"Key":"that in.","Fragments":["However"]},{"Key":"in. However","Fragments":["I'm"]},{"Key":"However I'm","Fragments":["not"]},{"Key":"that happy","Fragments":["with"]},{"Key":"my `let`","Fragments":["`result`"]},{"Key":"`let` `result`","Fragments":["dance"]},{"Key":"`result` dance","Fragments":["on"]},{"Key":"dance on","Fragments":["lines"]},{"Key":"lines 11-13.","Fragments":["Is"]},{"Key":"11-13. Is","Fragments":["there"]},{"Key":"express that?","Fragments":["Perhaps"]},{"Key":"that? Perhaps","Fragments":["without"]},{"Key":"Perhaps without","Fragments":["using"]},{"Key":" Tightened","Fragments":["up"]},{"Key":"Tightened up","Fragments":["the"]},{"Key":"a tip","Fragments":["from"]},{"Key":"from rcolinray","Fragments":["to"]},{"Key":"rcolinray to","Fragments":["use"]},{"Key":" @tevin","Fragments":["I"]},{"Key":"@tevin I","Fragments":["tried"]},{"Key":"tried several","Fragments":["times"]},{"Key":"something working","Fragments":["using"]},{"Key":"working using","Fragments":["either"]},{"Key":"either `comp`","Fragments":["or"]},{"Key":"`comp` or","Fragments":["`every-pred`"]},{"Key":"or `every-pred`","Fragments":["maybe"]},{"Key":"`every-pred` maybe","Fragments":["we"]},{"Key":"we cal","Fragments":["talk"]},{"Key":"cal talk","Fragments":["through"]},{"Key":"talk through","Fragments":["it"]},{"Key":"through it","Fragments":["Monday?"]},{"Key":"could refer","Fragments":["`upper-case`"]},{"Key":"refer `upper-case`","Fragments":["in"]},{"Key":"the fully-qualified","Fragments":["namespace"]},{"Key":"fully-qualified namespace","Fragments":["there"]},{"Key":"namespace there","Fragments":["too."]},{"Key":"A `def`","Fragments":["is"]},{"Key":"`def` is","Fragments":["a"]},{"Key":"constant since","Fragments":["you"]},{"Key":"you cannot","Fragments":["mutate"]},{"Key":"cannot mutate","Fragments":["the"]},{"Key":"mutate the","Fragments":["value"]},{"Key":"value bound","Fragments":["to"]},{"Key":"always make","Fragments":["a","my"]},{"Key":" (get-or-fail","Fragments":["[map","transcription-map"]},{"Key":"(get-or-fail [map","Fragments":["k"]},{"Key":"[map k","Fragments":["e]"]},{"Key":"(if-let [v","Fragments":["(get"]},{"Key":"[v (get","Fragments":["map"]},{"Key":"(get map","Fragments":["k)]"]},{"Key":" (thow","Fragments":["(e."]},{"Key":"(thow (e.","Fragments":["\"No"]},{"Key":"(e. \"No","Fragments":["such"]},{"Key":"\"No such","Fragments":["key\")))"]},{"Key":"(get-or-fail transcription-map","Fragments":["nucleotide"]},{"Key":"have realised","Fragments":["from"]},{"Key":"realised from","Fragments":["having"]},{"Key":"having completed","Fragments":["the"]},{"Key":"completed the","Fragments":["Clojure"]},{"Key":"Clojure koans","Fragments":["exercises,"]},{"Key":"koans exercises,","Fragments":["but"]},{"Key":"exercises, but","Fragments":["good"]},{"Key":"good tip","Fragments":["for"]},{"Key":"for tightening","Fragments":["up"]},{"Key":"tightening up","Fragments":["the"]},{"Key":" @cristian","Fragments":["Cleaned"]},{"Key":"@cristian Cleaned","Fragments":["up"]},{"Key":"up `bottles`","Fragments":["with"]},{"Key":"`bottles` with","Fragments":["a"]},{"Key":"changed `create`","Fragments":["to"]},{"Key":"`create` to","Fragments":["`build`"]},{"Key":"to `build`","Fragments":["which"]},{"Key":"`build` which","Fragments":["feels"]},{"Key":"which feels","Fragments":["better."]},{"Key":"feels better.","Fragments":["I"]},{"Key":"better. I","Fragments":["was"]},{"Key":"also leary","Fragments":["of"]},{"Key":"leary of","Fragments":["create"]},{"Key":"of create","Fragments":["but"]},{"Key":"create but","Fragments":["couldn't"]},{"Key":"couldn't at","Fragments":["the"]},{"Key":"time come","Fragments":["up"]},{"Key":"with anything","Fragments":["better."]},{"Key":"realized `reduce`","Fragments":["was"]},{"Key":"`reduce` was","Fragments":["the"]},{"Key":"thing this","Fragments":["didn't"]},{"Key":"bad. Also","Fragments":["this"]},{"Key":"Also this","Fragments":["is"]},{"Key":"first foray","Fragments":["with"]},{"Key":"foray with","Fragments":["the"]},{"Key":" @prudence","Fragments":["Oh"]},{"Key":"@prudence Oh","Fragments":["yeah,"]},{"Key":"Oh yeah,","Fragments":["I'm"]},{"Key":"yeah, I'm","Fragments":["feeling"]},{"Key":"I'm feeling","Fragments":["`update-in`."]},{"Key":"feeling `update-in`.","Fragments":["Check"]},{"Key":"`update-in`. Check","Fragments":["out"]},{"Key":"submission complete","Fragments":["with"]},{"Key":"complete with","Fragments":["`update-in`"]},{"Key":"with `update-in`","Fragments":["and"]},{"Key":"`update-in` and","Fragments":["`fnil`."]},{"Key":" @preston","Fragments":["Exactly."]},{"Key":"@preston Exactly.","Fragments":["That's"]},{"Key":"Exactly. That's","Fragments":["one"]},{"Key":"That's one","Fragments":["of"]},{"Key":"big advantages","Fragments":["of"]},{"Key":"of functional","Fragments":["and"]},{"Key":"functional and","Fragments":["\"no"]},{"Key":"and \"no","Fragments":["syntax\"."]},{"Key":"You're get","Fragments":["then"]},{"Key":"merge in","Fragments":["tally"]},{"Key":"in tally","Fragments":["could"]},{"Key":"tally could","Fragments":["be"]},{"Key":"simplified. Take","Fragments":["a"]},{"Key":"`update-in` function","Fragments":["for"]},{"Key":" @lyric","Fragments":["I"]},{"Key":"@lyric I","Fragments":["think"]},{"Key":"own \"primitive-feeling\"","Fragments":["functions"]},{"Key":"\"primitive-feeling\" functions","Fragments":["if"]},{"Key":"a recurring","Fragments":["need"]},{"Key":"recurring need","Fragments":["for"]},{"Key":"from @axel","Fragments":["I"]},{"Key":"@axel I","Fragments":["removed"]},{"Key":"require for","Fragments":["clojure.string"]},{"Key":"clojure.string (which","Fragments":["wasn't"]},{"Key":"(which wasn't","Fragments":["necessary"]},{"Key":"wasn't necessary","Fragments":["in"]},{"Key":"first place)","Fragments":["and"]},{"Key":"place) and","Fragments":["replaced"]},{"Key":"the clojure.string/join","Fragments":["with"]},{"Key":"clojure.string/join with","Fragments":["apply"]},{"Key":" @kristy","Fragments":["-"]},{"Key":"@kristy -","Fragments":["I"]},{"Key":"uses alphagrams","Fragments":["instead"]},{"Key":"alphagrams instead","Fragments":["of"]},{"Key":"character counts.","Fragments":["In"]},{"Key":"counts. In","Fragments":["it"]},{"Key":"In it","Fragments":["I"]},{"Key":"function application,","Fragments":["but"]},{"Key":"mind. I'm","Fragments":["also"]},{"Key":"about every-pred","Fragments":["and"]},{"Key":"every-pred and","Fragments":["how"]},{"Key":"Sets can","Fragments":["be"]},{"Key":"used directly","Fragments":["as"]},{"Key":"as predicate","Fragments":["functions"]},{"Key":"Clojure. They","Fragments":["answer"]},{"Key":"They answer","Fragments":["the"]},{"Key":"answer the","Fragments":["question"]},{"Key":"question true/false","Fragments":["of"]},{"Key":"true/false of","Fragments":["wether"]},{"Key":"of wether","Fragments":["the"]},{"Key":"wether the","Fragments":["argument"]},{"Key":"argument given","Fragments":["to"]},{"Key":"the set.","Fragments":["That"]},{"Key":"set. That","Fragments":["might"]},{"Key":"make `valid-dna?`","Fragments":["a"]},{"Key":"`valid-dna?` a","Fragments":["bit"]},{"Key":"bit simpler.","Fragments":["But"]},{"Key":"simpler. But","Fragments":["nil"]},{"Key":"But nil","Fragments":["is"]},{"Key":"also falsey,","Fragments":["so"]},{"Key":"falsey, so","Fragments":["you"]},{"Key":"use `dna-to-rna`","Fragments":["itself"]},{"Key":"`dna-to-rna` itself","Fragments":["in"]},{"Key":"itself in","Fragments":["the"]},{"Key":" @houston","Fragments":["I"]},{"Key":"@houston I","Fragments":["like"]},{"Key":"application there.","Fragments":["`every-pred`"]},{"Key":"there. `every-pred`","Fragments":["is"]},{"Key":"assert that","Fragments":["for"]},{"Key":"given item,","Fragments":["every"]},{"Key":"item, every","Fragments":["predicate"]},{"Key":"every predicate","Fragments":["is"]},{"Key":"true (anding","Fragments":["them"]},{"Key":"(anding them","Fragments":["all"]},{"Key":"all together).","Fragments":["It"]},{"Key":"together). It","Fragments":["would"]},{"Key":"an `anagram?`","Fragments":["and"]},{"Key":"and `not-same?`","Fragments":["predicate"]},{"Key":"`not-same?` predicate","Fragments":["distinct"]},{"Key":"predicate distinct","Fragments":["from"]},{"Key":"distinct from","Fragments":["each"]},{"Key":"other and","Fragments":["then"]},{"Key":"then combine","Fragments":["them"]},{"Key":"combine them","Fragments":["for"]},{"Key":"You and","Fragments":["@alverta"]},{"Key":"and @alverta","Fragments":["have"]},{"Key":"@alverta have","Fragments":["basically"]},{"Key":"have basically","Fragments":["the"]},{"Key":"same exact","Fragments":["solution!"]},{"Key":"bit inefficient","Fragments":["since"]},{"Key":"inefficient since","Fragments":["it","you"]},{"Key":"it counts","Fragments":["them"]},{"Key":"counts them","Fragments":["all"]},{"Key":"only extract","Fragments":["a"]},{"Key":"single solution.","Fragments":["What"]},{"Key":"solution. What","Fragments":["if"]},{"Key":"you inverted","Fragments":["it"]},{"Key":"inverted it","Fragments":["so"]},{"Key":"single solution","Fragments":["and"]},{"Key":"then used","Fragments":["that"]},{"Key":"count for","Fragments":["all"]},{"Key":"only bit","Fragments":["of"]},{"Key":"`nil` kind","Fragments":["of"]},{"Key":"of hangs","Fragments":["out"]},{"Key":"hangs out","Fragments":["there"]},{"Key":"there at","Fragments":["the","the"]},{"Key":"end. If","Fragments":["you"]},{"Key":"used `if-not`","Fragments":["then"]},{"Key":"`if-not` then","Fragments":["nil"]},{"Key":"then nil","Fragments":["would"]},{"Key":"nil would","Fragments":["be"]},{"Key":"maybe that","Fragments":["would"]},{"Key":"Awesome! Now","Fragments":["that"]},{"Key":"you've built","Fragments":["it"]},{"Key":"built it","Fragments":["yourself,"]},{"Key":"it yourself,","Fragments":["take"]},{"Key":"yourself, take","Fragments":["a"]},{"Key":"it, check","Fragments":["out:"]},{"Key":"advanced because","Fragments":["it"]},{"Key":"gets into","Fragments":["`transient`"]},{"Key":"into `transient`","Fragments":["which"]},{"Key":"`transient` which","Fragments":["allow"]},{"Key":"which allow","Fragments":["for"]},{"Key":"local mutable","Fragments":["state."]},{"Key":"Good reuse","Fragments":["of"]},{"Key":"reuse of","Fragments":["nucleotide-counts"]},{"Key":"nucleotide-counts to","Fragments":["get"]},{"Key":"an individual","Fragments":["nucleotide."]},{"Key":"individual nucleotide.","Fragments":["Maybe"]},{"Key":"nucleotide. Maybe","Fragments":["a"]},{"Key":"touch inefficient","Fragments":["since"]},{"Key":"count them","Fragments":["all"]},{"Key":"all just","Fragments":["to"]},{"Key":"get one","Fragments":["though."]},{"Key":"@burley I","Fragments":["agree"]},{"Key":"cleaner with","Fragments":["`nil`"]},{"Key":"with `nil`","Fragments":["not"]},{"Key":"`nil` not","Fragments":["hanging"]},{"Key":"not hanging","Fragments":["out"]},{"Key":"hanging out","Fragments":["there"]},{"Key":" @rolando","Fragments":["oh"]},{"Key":"@rolando oh","Fragments":["yeah"]},{"Key":"oh yeah","Fragments":["totally"]},{"Key":"yeah totally","Fragments":["missed"]},{"Key":" `refer`ed","Fragments":["upper-case"]},{"Key":"`refer`ed upper-case","Fragments":["of"]},{"Key":"upper-case of","Fragments":["`clojure.string`"]},{"Key":" get","Fragments":["is"]},{"Key":"get is","Fragments":["unnecessary"]},{"Key":"context unless","Fragments":["you"]},{"Key":"unless you","Fragments":["want"]},{"Key":"value if","Fragments":["the"]},{"Key":"target in","Fragments":["not"]},{"Key":"in not","Fragments":["found"]},{"Key":"not found","Fragments":["in"]},{"Key":"map. You","Fragments":["can"]},{"Key":"can instead","Fragments":["just"]},{"Key":"instead just","Fragments":["use"]},{"Key":"function. Small","Fragments":["nitpick,"]},{"Key":"Small nitpick,","Fragments":["but"]},{"Key":"nitpick, but","Fragments":["other"]},{"Key":"other then","Fragments":["that"]},{"Key":"then that","Fragments":["basically"]},{"Key":"that basically","Fragments":["identical"]},{"Key":"basically identical","Fragments":["to"]},{"Key":"feel very","Fragments":["\"clojurey\""]},{"Key":"very \"clojurey\"","Fragments":["to"]},{"Key":"\"clojurey\" to","Fragments":["me."]},{"Key":"me. Whenever","Fragments":["possible"]},{"Key":"Whenever possible","Fragments":["I"]},{"Key":"better clojure","Fragments":["practice"]},{"Key":"clojure practice","Fragments":["to"]},{"Key":"library over","Fragments":["recursion."]},{"Key":" assert","Fragments":["not"]},{"Key":"assert not","Fragments":["nil?"]},{"Key":"not nil?","Fragments":["is"]},{"Key":"nil? is","Fragments":["redundant."]},{"Key":"redundant. Assert","Fragments":["will"]},{"Key":"Assert will","Fragments":["fail"]},{"Key":"on false","Fragments":["or"]},{"Key":"nil according","Fragments":["to"]},{"Key":" `(assert","Fragments":["tr)`"]},{"Key":"core library.","Fragments":["Try"]},{"Key":"library. Try","Fragments":["splitting"]},{"Key":"Try splitting","Fragments":["on"]},{"Key":"on `#\"\\s+\"`,","Fragments":["that"]},{"Key":"`#\"\\s+\"`, that","Fragments":["will"]},{"Key":"the blanks","Fragments":["function."]},{"Key":"blanks function.","Fragments":["(That"]},{"Key":"function. (That","Fragments":["had"]},{"Key":"(That had","Fragments":["me"]},{"Key":"had me","Fragments":["thinking"]},{"Key":"me thinking","Fragments":["for"]},{"Key":"thinking for","Fragments":["a"]},{"Key":"replace \"if-not..\"","Fragments":["with"]},{"Key":"\"if-not..\" with","Fragments":["\"when\""]},{"Key":"with \"when\"","Fragments":["http://clojuredocs.org/clojure.core/when"]},{"Key":"\"when\" http://clojuredocs.org/clojure.core/when","Fragments":["."]},{"Key":"returns nothing","Fragments":["it"]},{"Key":"nothing it","Fragments":["\"returns\""]},{"Key":"it \"returns\"","Fragments":["nil."]},{"Key":" `#(dna-to-rna","Fragments":["%)`"]},{"Key":"`#(dna-to-rna %)`","Fragments":["is"]},{"Key":"%)` is","Fragments":["more"]},{"Key":"verbose than","Fragments":["you"]},{"Key":"pass `dna-to-rna`","Fragments":["by"]},{"Key":"`dna-to-rna` by","Fragments":["itself"]},{"Key":"itself and","Fragments":["it"]},{"Key":"well. The","Fragments":["map"]},{"Key":"map will","Fragments":["use"]},{"Key":"Maybe look","Fragments":["at"]},{"Key":"for `pretty-print`.","Fragments":["It"]},{"Key":"`pretty-print`. It","Fragments":["might"]},{"Key":"91)` is","Fragments":["odd"]},{"Key":"is odd","Fragments":["enough"]},{"Key":"odd enough","Fragments":["to"]},{"Key":"either write","Fragments":["differently"]},{"Key":"write differently","Fragments":["or"]},{"Key":"differently or","Fragments":["to"]},{"Key":"do `(int","Fragments":["\\A)`"]},{"Key":"\\A)` if","Fragments":["you"]},{"Key":"of ASCII","Fragments":["values"]},{"Key":"set the","Fragments":["name"]},{"Key":"to nil","Fragments":["to"]},{"Key":"nil to","Fragments":["start"]},{"Key":"start (and","Fragments":["on"]},{"Key":"(and on","Fragments":["reset)"]},{"Key":"on reset)","Fragments":["you"]},{"Key":"reset) you","Fragments":["could"]},{"Key":"use `if-let`","Fragments":["instead"]},{"Key":"`if-let` instead","Fragments":["of"]},{"Key":"the separate","Fragments":["`if-not`."]},{"Key":" @narciso","Fragments":["-"]},{"Key":"@narciso -","Fragments":["thanks."]},{"Key":"- thanks.","Fragments":["I"]},{"Key":"haven't connected","Fragments":["all"]},{"Key":"connected all","Fragments":["of"]},{"Key":"the dots","Fragments":["yet."]},{"Key":"dots yet.","Fragments":["I"]},{"Key":"yet. I","Fragments":["was"]},{"Key":"realize that's","Fragments":["possible"]},{"Key":"with every?","Fragments":["and"]},{"Key":"every? and","Fragments":["it"]},{"Key":"head that","Fragments":["it"]},{"Key":" @aric","Fragments":["I"]},{"Key":"@aric I","Fragments":["agree,"]},{"Key":"better using","Fragments":["`format`."]},{"Key":"used `or`","Fragments":["on"]},{"Key":"`or` on","Fragments":["my"]},{"Key":"the `let","Fragments":["result`"]},{"Key":"`let result`","Fragments":["dance."]},{"Key":"result` dance.","Fragments":["A"]},{"Key":"dance. A","Fragments":["la:"]},{"Key":" ```(or","Fragments":["(transcription-map"]},{"Key":"```(or (transcription-map","Fragments":["nucleotide)"]},{"Key":"(transcription-map nucleotide)","Fragments":["(throw"]},{"Key":"nucleotide) (throw","Fragments":["(AssertionError.)))```"]},{"Key":"However, @maye","Fragments":["pointed"]},{"Key":"@maye pointed","Fragments":["out"]},{"Key":"that doing","Fragments":["the"]},{"Key":"transcription in","Fragments":["one"]},{"Key":"method didn't","Fragments":["really"]},{"Key":"sense. You","Fragments":["can"]},{"Key":"actually just","Fragments":["validate"]},{"Key":"just validate","Fragments":["the"]},{"Key":"strand up","Fragments":["front"]},{"Key":"up front","Fragments":["by"]},{"Key":"front by","Fragments":["checking"]},{"Key":"letter has","Fragments":["a"]},{"Key":"a compliment","Fragments":["in"]},{"Key":"compliment in","Fragments":["the"]},{"Key":"use `apply`","Fragments":["and"]},{"Key":"`apply` and","Fragments":["inline"]},{"Key":"and inline","Fragments":["the"]},{"Key":"the `(parts","Fragments":["input)`"]},{"Key":"`(parts input)`","Fragments":["function?"]},{"Key":"had known","Fragments":["about"]},{"Key":"known about","Fragments":["that"]},{"Key":"that `clojure.core\\frequencies`...","Fragments":["That"]},{"Key":"`clojure.core\\frequencies`... That","Fragments":["would've"]},{"Key":"That would've","Fragments":["have"]},{"Key":"would've have","Fragments":["simplified"]},{"Key":"have simplified","Fragments":["so"]},{"Key":"simplified so","Fragments":["many"]},{"Key":"many of","Fragments":["my"]},{"Key":"you implemented","Fragments":["`count`"]},{"Key":"implemented `count`","Fragments":["using"]},{"Key":"`count` using","Fragments":["`nucleotide-counts`."]},{"Key":"The list","Fragments":["comprehension"]},{"Key":"comprehension is","Fragments":["nice."]},{"Key":"add to","Fragments":["use"]},{"Key":"use indentation","Fragments":["to"]},{"Key":"indentation to","Fragments":["separate"]},{"Key":"go all","Fragments":["the"]},{"Key":"way, and","Fragments":["just"]},{"Key":"just define","Fragments":["small"]},{"Key":"define small","Fragments":["functions."]},{"Key":"A more","Fragments":["encompassing"]},{"Key":"more encompassing","Fragments":["split"]},{"Key":"encompassing split","Fragments":["removes"]},{"Key":"split removes","Fragments":["all"]},{"Key":"removes all","Fragments":["of"]},{"Key":"special characters.","Fragments":["This"]},{"Key":"characters. This","Fragments":["removes"]},{"Key":"which removed","Fragments":["special"]},{"Key":"removed special","Fragments":["characters"]},{"Key":"from words","Fragments":["and"]},{"Key":"removed blanks","Fragments":["caused"]},{"Key":"blanks caused","Fragments":["by"]},{"Key":"removing special","Fragments":["characters"]},{"Key":"in isolation.","Fragments":["Thanks"]},{"Key":"isolation. Thanks","Fragments":["@jonathan"]},{"Key":" Until","Fragments":["solving"]},{"Key":"Until solving","Fragments":["this"]},{"Key":"not realize","Fragments":["that"]},{"Key":"that Clojure's","Fragments":["`contains?`"]},{"Key":"Clojure's `contains?`","Fragments":["function"]},{"Key":"`contains?` function","Fragments":["is"]},{"Key":"is designed","Fragments":["to"]},{"Key":"designed to","Fragments":["be"]},{"Key":"on associative","Fragments":["collections."]},{"Key":"associative collections.","Fragments":["It"]},{"Key":"collections. It","Fragments":["was"]},{"Key":"little annoying","Fragments":["that"]},{"Key":"for vectors.","Fragments":["If"]},{"Key":"vectors. If","Fragments":["anyone"]},{"Key":"anyone knows","Fragments":["a"]},{"Key":"knows a","Fragments":["better"]},{"Key":"do this,","Fragments":["I"]},{"Key":"`nucleotide-counts` hurts","Fragments":["my"]},{"Key":"repetition, but","Fragments":["I"]},{"Key":"than if","Fragments":["I"]},{"Key":"used some","Fragments":["kind"]},{"Key":"some kind","Fragments":["of"]},{"Key":"reducing function","Fragments":["to"]},{"Key":"what my","Fragments":["`(into"]},{"Key":"my `(into","Fragments":["{}"]},{"Key":"{} (for...`","Fragments":["did."]},{"Key":"(for...` did.","Fragments":["Thanks"]},{"Key":"did. Thanks","Fragments":["@leonardo"]},{"Key":"frequencies thanks","Fragments":["to"]},{"Key":"previous exercise.","Fragments":["This"]},{"Key":"exercise. This","Fragments":["site"]},{"Key":"This site","Fragments":["seems"]},{"Key":"site seems","Fragments":["great"]},{"Key":"seems great","Fragments":["for"]},{"Key":"that kind","Fragments":["of"]},{"Key":"bit afraid","Fragments":["of"]},{"Key":"afraid of","Fragments":["the"]},{"Key":"the \"idiomatic\"","Fragments":["part:"]},{"Key":"\"idiomatic\" part:","Fragments":["an"]},{"Key":"part: an","Fragments":["\"expert\""]},{"Key":"an \"expert\"","Fragments":["solution"]},{"Key":"\"expert\" solution","Fragments":["model"]},{"Key":"solution model","Fragments":["would"]},{"Key":"model would","Fragments":["be"]},{"Key":"left around","Fragments":["some"]},{"Key":"around some","Fragments":["dead"]},{"Key":"some dead","Fragments":["code"]},{"Key":"dead code","Fragments":["after"]},{"Key":"`let [words","Fragments":["(words-of"]},{"Key":"[words (words-of","Fragments":["phrase)]`,"]},{"Key":"(words-of phrase)]`,","Fragments":["`count-of`"]},{"Key":"phrase)]`, `count-of`","Fragments":["and"]},{"Key":"`count-of` and","Fragments":["some"]},{"Key":"Yep, exactly,","Fragments":["single"]},{"Key":"exactly, single","Fragments":["character"]},{"Key":"are preceded","Fragments":["by"]},{"Key":"preceded by","Fragments":["a"]},{"Key":"a backslash","Fragments":["in"]},{"Key":"backslash in","Fragments":["Clojure."]},{"Key":"Thanks! A","Fragments":["very"]},{"Key":"A very","Fragments":["interesting"]},{"Key":"interesting read,","Fragments":["I"]},{"Key":"read, I","Fragments":["didn't"]},{"Key":"about this.","Fragments":["However"]},{"Key":"this. However","Fragments":["it's"]},{"Key":"However it's","Fragments":["still"]},{"Key":"quite clear","Fragments":["for"]},{"Key":"clear for","Fragments":["me"]},{"Key":"me how","Fragments":["to"]},{"Key":"use :pre","Fragments":[":post"]},{"Key":":pre :post","Fragments":["in"]},{"Key":":post in","Fragments":["this"]},{"Key":"code easier","Fragments":["to"]},{"Key":"{:pre (every?","Fragments":["#{\\G"]},{"Key":"(every? #{\\G","Fragments":["\\C"]},{"Key":"#{\\G \\C","Fragments":["\\T"]},{"Key":"reader that","Fragments":["to-rna"]},{"Key":"that to-rna","Fragments":["requires"]},{"Key":"to-rna requires","Fragments":["strings"]},{"Key":"requires strings","Fragments":["with"]},{"Key":"characters GCTA,","Fragments":["as"]},{"Key":"GCTA, as","Fragments":["opposed"]},{"Key":"to needing","Fragments":["to"]},{"Key":"I misunderstood","Fragments":["the"]},{"Key":"misunderstood the","Fragments":["specification."]},{"Key":"the specification.","Fragments":["I"]},{"Key":"specification. I","Fragments":["assumed"]},{"Key":"assumed yelling","Fragments":["was"]},{"Key":"was indicated","Fragments":["by"]},{"Key":"indicated by","Fragments":["exclamation"]},{"Key":"by exclamation","Fragments":["point."]},{"Key":"exclamation point.","Fragments":["Realizing"]},{"Key":"point. Realizing","Fragments":["the"]},{"Key":"Realizing the","Fragments":["indicator"]},{"Key":"the indicator","Fragments":["was"]},{"Key":"indicator was","Fragments":["actually"]},{"Key":"actually all-caps","Fragments":["simplified"]},{"Key":"all-caps simplified","Fragments":["the"]},{"Key":" Still,","Fragments":["I"]},{"Key":"Still, I","Fragments":["couldn't"]},{"Key":"caps than","Fragments":["\"some"]},{"Key":"than \"some","Fragments":["upper-case,"]},{"Key":"\"some upper-case,","Fragments":["and"]},{"Key":"upper-case, and","Fragments":["no"]},{"Key":"And now","Fragments":["I"]},{"Key":"realize I","Fragments":["can"]},{"Key":"can redo","Fragments":["the"]},{"Key":"redo the","Fragments":["whole"]},{"Key":"thing without","Fragments":["regex's."]},{"Key":" Simple","Fragments":["and"]},{"Key":"Simple and","Fragments":["clean."]},{"Key":"clean. Really","Fragments":["nicely"]},{"Key":"Really nicely","Fragments":["done!"]},{"Key":" @bridget","Fragments":["-"]},{"Key":"@bridget -","Fragments":["is"]},{"Key":"submission made","Fragments":["me"]},{"Key":"realize how","Fragments":["much"]},{"Key":"much not","Fragments":["having"]},{"Key":"a JVM","Fragments":["background"]},{"Key":"JVM background","Fragments":["hurts."]},{"Key":"background hurts.","Fragments":["Going"]},{"Key":"hurts. Going","Fragments":["to"]},{"Key":"see about","Fragments":["generating"]},{"Key":"about generating","Fragments":["a"]},{"Key":"better stack","Fragments":["trace"]},{"Key":"trace from","Fragments":["the"]},{"Key":"Maybe take","Fragments":["queues"]},{"Key":"take queues","Fragments":["right"]},{"Key":"queues right","Fragments":["from"]},{"Key":"the Readme","Fragments":["and"]},{"Key":"Readme and","Fragments":["use"]},{"Key":"something names","Fragments":["like"]},{"Key":"like `every4`","Fragments":["`unless-100-except-400`"]},{"Key":"Might want","Fragments":["to"]},{"Key":" @paris","Fragments":["Definitely"]},{"Key":"@paris Definitely","Fragments":["seems"]},{"Key":"Definitely seems","Fragments":["better."]},{"Key":"was proposing","Fragments":["maybe"]},{"Key":"proposing maybe","Fragments":["going"]},{"Key":"maybe going","Fragments":["even"]},{"Key":"going even","Fragments":["further"]},{"Key":"even further","Fragments":["and"]},{"Key":"and implementing","Fragments":["`nucleotide-counts`"]},{"Key":"implementing `nucleotide-counts`","Fragments":["by"]},{"Key":"`nucleotide-counts` by","Fragments":["using"]},{"Key":"your `counts`","Fragments":["function."]},{"Key":" @otis","Fragments":["Thanks,"]},{"Key":"@otis Thanks,","Fragments":["I"]},{"Key":"discovered it","Fragments":["while"]},{"Key":"it while","Fragments":["reviewing"]},{"Key":"while reviewing","Fragments":["someone"]},{"Key":"reviewing someone","Fragments":["else's"]},{"Key":"else's submission.","Fragments":["I"]},{"Key":"consider doing","Fragments":["a"]},{"Key":"The obvious","Fragments":["approach"]},{"Key":"obvious approach","Fragments":["seemed"]},{"Key":"approach seemed","Fragments":["to"]},{"Key":"smallest set","Fragments":["of"]},{"Key":"that distinguished","Fragments":["the"]},{"Key":"distinguished the","Fragments":["various"]},{"Key":"various responses","Fragments":["so"]},{"Key":"responses so","Fragments":["I"]},{"Key":"case (\"Whatever.\")","Fragments":["and"]},{"Key":"(\"Whatever.\") and","Fragments":["built"]},{"Key":"and built","Fragments":["the"]},{"Key":"built the","Fragments":["conditions"]},{"Key":"conditions up","Fragments":["from"]},{"Key":"the sets","Fragments":["to"]},{"Key":"sets to","Fragments":["determine"]},{"Key":"input phrase","Fragments":["contains"]},{"Key":"phrase contains","Fragments":["all"]},{"Key":"contains all","Fragments":["capital"]},{"Key":"letters, but","Fragments":["it"]},{"Key":"works. Struggling","Fragments":["to"]},{"Key":"Struggling to","Fragments":["think"]},{"Key":"then clojure's","Fragments":["very"]},{"Key":"clojure's very","Fragments":["new"]},{"Key":"me so","Fragments":["I'm"]},{"Key":"all its","Fragments":["standard"]},{"Key":"its standard","Fragments":["functions"]},{"Key":"standard functions","Fragments":["yet."]}],"prefix_len":2}