{"Nodes":[{"Key":" ","Fragments":["Very","Good","Looks","Very","Coming","I","The","Neat!","If","Nice!","I","I'm","This","Awesome!","Check","Character","I","I","I","Right","Dude,","No","Very","Nice!","Love","How","Yeah,","Perfect","Good","Are","Ah,","Nice!","Hrm,","Are","2","Might","Is","I've","Maybe","You","Thanks,","I","-","-","Good","Could","It","I","This","Maybe","Awesome.","Nice!","Nice!","You","I","Thanks","`Enum.filter`","This","Nice,","*","*","Nice,","You","Also,","Nice,","You","Also,","Does","sentence","???","This","Oh,","Consider","At","Very","I","Nice!","I","Have","Check","Very","Well","You","Good","I","Would","Thanks!","Interesting...","I'm","Good","Isn't","Perfect","I","Nice!","What","Would","Perfect","Great","Oooh,","*","*","Neat!","Will","Ok,","You","I","Nice","Is","duh","my","flexible","i'm","Cool","I","Yeah,","Looks","Thanks!","Wonderful!","Try","Great","It's","Great","I","Nice","yeah","tnx,","Could","Nice","Your're","Great","Good","*that*","Is","I","Do","Looks","Hmm,","Um,","That","=","It","The","This","Now","Done..","Nice!","I","I","I","You","If","Fixed.","Good","Thanks!","Interesting","Love","Nice!!!","This","I","Oh,","Looks","Nice!","*","*","Looks","Oh","Good","You're","`def","Thanks","Once","Couldn't","I","Does","This","Nice!","Is","Also","Very","Is","I","I","Ooh,","Got","You","```","defp","...","end","defp","...","end","```","\"Why","Because","To","I","Check","Good","While","Do","I","I","Something","I","Readability","I'll","Elixir","Thanks","Sure,","However","Nice!","If","Well","Thanks!","I","Nice!","Couldn't","Well","As","Great","You've","It's","Goodluck!","Well","Great","Good","You're","The","Good","Nice,","Easier","One","Nicely","I","Nice!","I","Nope","Very","Do","Sorry,","From","Ok,","Thank","This","Another","The","\u003ccode\u003eis_forceful?\u003c/code\u003e","Much","Check","Do","Thanks","Thanks","Was","i","Probably","Good","Fair","I","Minor","\"The","gotcha!","You","good","Do","Also,","Good","Imagine","Good","Is","Maybe","Looks","When","Look","Also,","Why","Pretty","Great","Can","Hi","Would","Do","Great,","I","Let's","I","Good","Hi","Nice","Do","Could","Did","Also,","Thanks","I","Regarding","Clever,Thanks","Btw","One","else","and","Hey","1)","2)","Sweet!","Awesome!","This","I","Interesting,","The","At","I","Yep,","Which","You","Good","While","If","You","Good","Is","Thank","Do","Example:","Btw.","Thank","Thanks","Since","Nice","Is","This","One","Also,","Good","Love","Now,","While","I","Really","The","Thanks","I","I","Looks","Might","\u003ccode\u003eDict.update(...)","Looks","Check","I","I","Nice","Perhaps","Additionally,","By","I","Looks","The","I'll","Thanks","Do","Nice!","I","Could","You","Excellent!","Thanks","I","Thanks","Lines","What","1.","2.","3.","Much","Ok,","Ok,","Was","Check","I","Doctests","In","The","I","This","That's","It","Is","I","My","ooh","Submitted","Great.","```","@sarina","blah","##","Responds","iex\u003e","\"Sure.","\"\"\"","```","But","Appreciated!","Would","Definitely","Thanks!","Nice!","do","I","I","Basically","```","def","def","```","So","I","Nice,","Great","Is","Could","Could","In","Thanks","Cool,","This","It","Nice!","A","Nice!","Using","`Enum.filter","You","The","Looks","IMO","Just","Awesome!","Thanks,","I","You've","Good","Haha","If","Looks","Thanks!","This","Indeed.","bah","I","I","I","Also,","Looks","`Dict.update(scores,",":)","Thanks","you","Good","I","Thanks","See","Good","Great!","Great!","You","Good","Well","Why","I'd","Fixed","Ah,","Oh","Yes,","You","I'll","Very","Ha","Please","just","I","Nice","How","Thanks","And","`build_dictionary`,","I","You","Nice!","Oh","PS,","How","Thanks,","Looks","Good","Hmm,","Well","Have","Done!","I","Would","Reusable","This","Great!","Great!","First","Very","ahah","Also,","Nice","Thanks.","\\m/","Thanks","Nothing","Out","Ah.","I'm","`msg","That's","It's","OK,",":O","Oops,","I'm","*","*","I","Sure.","That","Have","*","Great","we","sorry,","I","I","Have","might","Also","Have","Can","Is","You","s/this/this","I'd","Good","Have","Very","Yeah","Just","Or","Do","I","Trying","What","Ok","Yup","Nice!","Have","Well","There's","Ah","Looks","thanks!","So...","bump...","Sorry,","concise","Have","That","Thank","Seriously,","Agreed,","I","I","Nice","I","I","I","and","new","I","By","That","What","Looks","Yeah,","Would","I","Looking","Not","Ah,","Tried","Very","I","Oh,","I'm","It","Good","Do","The","Beautiful!","Good","Great","That's","That","Hi","Would","Well","Love","Great!","Just","I","Perfect!","What","Thanks!","Nice!","Have","Aha,","Oh,","Awesome!","I","Hi","Did","Huh.","I'm","For","Consider","```elixir","cond","empty?","shouting?","question?","true","end","```","Actually,","Let's","```elixir","def","def","def","def","```","Certainly","I","```elixir","def","def","def","```","but","```elixir","def","def","def","```","Big","Great!","Going","Did","How","Sorry,","I","Hehe,","I","MOTHER","I","http://exercism.io/submissions/52017503f42c6ad670000480","Thanks","Yes,","Ah,","On","```elixir","Enum.reduce","```","might","Yea","You","def","I'd","or","def","something","…","end","But","I","Generally","Great","I","```elixir","true","false","```","construct,","Re:","Have","Looks","I","Did","I'd","Hey","You","Another","You","This","The","With","Nowhere.","The","I","But","```elixir","def","possible_anagrams","end","```","\u003e","Where","I've","Your","Yea","Great!!","One","Great","But","And","That's","Consider","Now","Just","I","Why","Same","fire","```","iex(1)\u003e","**",":erl_eval.expr/3","iex(1)\u003e","nil","```","I","However","Line","like","defp","true","end","defp","\"\"","end","To","I","This","of","Looks","I","You","By","If","I've","I","```elixir","sentence","```","Just","I","Cool,","Looks","Sorry,","I","Nice","\u003e","Less","\u003e","Because,","You","Why","That's","But","What","`_empty?(nil)`","Moreover,","```elixir","def","def","```","What","I","About","`to_words`","Nice","This","I","I","Overall,","I","I","I","As","The","I","That's","You","@nedra's","Ah","Well","I'd","-","-","-","Hi","Did","This","I","Sorry,","Have","My","Yeah,","See:","Hi","Have","You","Wow.","For","Since","The","That's","It's","Yes,","Thanks","Also","One","This","Oops,","right,","I","```elixir","defp","```","Neat!","Do","I","I'm","In","The","```elixir","defp","defp","```","Doh,","Hi","Another","Love","Hi","Would","Should","Given","Thanks!","What","```","str","```","Or","```","String.downcase(str)","```","Good","This","1)","2)","pattern","Here's","```","def","[]","end","def","....","end","```","You","It","Have","Sadly,","Thanks.","There","Great","Could","Well","Have","Also,","I","https://groups.google.com/forum/#!msg/elixir-lang-talk/ndmhWFlVczo/EcMPQGNG-wQJ","I","Let's","I","By","The","Great","That's","But","\u003e","Ok,","Cool,","I","Now","Also,","You","Have","What","I","Have","The","I'm","I","I","Do","I","I","The","No","Great!","What","```elixir","msg","```","That","How","```elixir","defp","msg","end","```","That's","I'll","This","Good","I've","I'm","This","If","If","Good","Yes","You're","Nice!","You","Also","Great","Could","Similar","So","Sorry","There's","The","As","Again","phrase","My","The","In","I","My","I","P.S.","You","No","There","Cool.","*","*","Looks","Thanks.","I'll","Hmm,","ah,","Great","I","Also,","I","There","Also,","Thank","@retha:","Naming","Alas,","You","Just","I","For","That's","Expanding","Also,","Doh","It","```hey(\"\")```","Looks","Very","Nice,","I","This","cond","I","Looks","*","*","Well","*","*","*","*","Wouldn't","It'd","There's","Naming","I'd","I'm","Well","*","*","*","Well","Have","Also,","As","My","I","Also,","This","That's","private","Thanks!","I","Good.","Looks","Also,","Tried","Right,","```","iex\u003e","[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]","```","I","I'm","Scan","Regex.scan(%r/\\d/,","This","Cool.","Might","Why","Nice","This","Aha,","My","True,","Let","The","But","Nice,","thanks,","Now","I'm","Nice,","I","While","But","Well,","Hi,","I","Overall","Good","Surely","You","Nice!","One","Check","The","Cool.","Surely","(At","Is","I","The","About","Just","I'm","So","Hi","Looking","Your","Looking","Any","Do","Would","Looks","I","I","Looks","Looks","Very","Hope","Julien:","I","Along","My","Given","Well,","Interesting!","I","I'm","Elixir","is_question","is_shouting","On","I","Forced","Good","3.","2.","4.","1.","I","I'll","Excellent!","I","I","I","Let's","1.","2.","3.","4.","Great","Definitively","Hi","It","This","I","Can","message.ends_with?(\"?\")","Since","That's","Looking","respond_to","respond_to","Also,","You","Nice.","Great!","Yup","Nice!","Do","Expounded","I","Having","I","For","And","Very","Hi","Would","The","Could","Example:","\u003ccode\u003e","def","def","def","\u003c/code\u003e","Just","@erick,","Have","Also","...for","In","You","```","iex\u003e","HashDict.new","```","About","About","Haha,","There","Nice!","You","I","I","While","Nice,","Nice,","Also,","Great","Not","Did","\u003ccode\u003edef","\u003ccode\u003edef","Cool,","Also,","\u003ccode\u003edef","\u003ccode\u003edef","Then","That","Thanks,","Agreed,","Will","Still","I","The","Oh,","Very","Does","Also","Thank","Looks","My","And","I","No","What","Ah","Looks","That's","The","is_something","Yeah,","If","I","That's","Seems","Nil","Sounds","Cool!","Nice","For","Reimplemented","Thanks","Another","Thanks,","Don't","I","I","Great!","Oh,","Look","_(","Good","I'd","Very","I'm","It's","I","Good","Thanks,","Check","Ah,","Ah","Ok","I","Haha,","Look","Oh","Thank","Nice!","That's","That's","Sorry,","I","Thanks","I","Looks","Seems","The","You","Goot","I","Ignore","^","I","Ah,","Looks","Good","Looks","Checkout","How","Trying","Sorry","You","Functional","Thanks,","If","I","I","If","Good","Ah","Agreed!","Nice!","Did","I","Awesome!","I","Thanks","Looks","Thanks,","Thanks!","Awesome.","Good","Updated","This","Did","Ok","Nice!","Sorry","Thanks!","Thanks","What's","Really","I","Ignore","Looks","I","http://exercism.io/submissions/520264412e0a71dcb50002e2","Is","I","I'm","Following","\u0026amp;1","is","fn(v1,","Does","Hi,","```elixir","Enum.filter","is_anagram?(word,","end","```","Turns","```elixir","Enum.filter","```","It's","For","I","I","In","I","I'm","I","It's","If","What","Hi","I","Secondly,","Elixir","It","np,","Ah,","Tests","```bash","$","Erlang","Elixir","```","Interesting,","When","I'm","I'm","```","Before","[submission","[submission","You","List.flatten","I","In","Is","I","Merging","Does","Is","Your","Stylistic","Thanks","I","1)","2)","Thanks","I'm","Are","The","```elixir","def","do_map(list,","end","def","...","end","```","Without","However,","Here's","```","defmodule","@jerry","def","def","sequence","end","def","@jerry","end","defp","Regex.replace(%r/[^#{nucleotide}]/,","end","end","```","Have","Can","I","Conventionally","Wow,","One","I","The","This","I","Thanks,","Looks","It's","Not","In","The","Have","Checking","Everything","Do","Other","Hey!","Just","My","Quick","```elixir","defp","```","can","```elixir","defp","```","The","The","Yeah,","I","Well,","I","https://github.com/kytrinyx/exercism.io/commit/4f5c26f204dec40a034a8796eb1ad52c8409861c#commitcomment-3835719","You're","I","It","I","Your","\u0026gt;","My","The","As","I'm","I","One","Using","Your","If","Thanks","I","I","I","The","Does","You","I","Have","Within","For","It","I","Thanks","Just","Will","The","I","I'm","Wouldn't","`Regex.run`","If","I'm","Haha,","Thanks.","A","Nice","The","-","-","-","You","I","I'm","I","Thank","I","I've","The","Also,","Yeah","I","Looking","I'd","For","For","/me","Oh,","```elixir","defmodule","def","anagrams","end","defp","sort(word1)","end","defp","word","|\u0026gt;","end","end","```","I","Thanks.","Looks","I","```elixir","iex\u0026gt;","\"one","iex\u0026gt;","[[\"one\"],","```","I've","Thanks!","You","wrightling","Getting","1.","2.","Looks","Why","`defp","Nice","*","*","Nice!","Will","1.","```elixir","sorted_word","anagrams","```","2.","Similar","Hey,","in","Is","String.codepoints","So","Why","I","The","I'm","Agreed","Hi","1.","2.","Nice","1.","2.","Hi","1.","2.","Oh,","But","Is","I","test","assert","end","Say","I","uploaded","I","I","Nice!","Yeah,","Agreed,","Hi","No,","It","I","Is","I'm","What","Looks","I","That's","As","Would","I","I","In","Yes,","I","I","FWIW,","Not","Getting","I","This","Compare","I","I'd","It","In","+1","A","1)","2)","Have","I","I'm","You","No.","I","This","Thank","Any","There's","I","```elixir","String.first(String.strip(content))","```","reads","```elixir","Regex.match?(%r/^\\s*$/,","```","Maybe","The","```elixir","def","value","end","test(1)","test()","test(nil)","```","I","*","*","Looks","I","*","*","They're","This","@axel,","I","The","Looks","Excellent","Yes.","You","```","defmodule","import","...","```","Yeah","Is","Good","I","```elixir","defmodule","import","...","```","It","Looking","*","Looks","*","*","*","Ok","See,","Nice!","The","I","You","```","iex(25)\u003e","```","```","[208,","```","this","in","```","16\u003e","```","```","[1076,1072,32,1085,1077,1090]","```","this","or,","```","iex(27)\u003e","```","```","[1076,","```","but","Thank","You","This","Is","There","Strictly","Nice!","Minor","I","Also,","The","Finally,","I","Would","Super-picky,","I","I","I","Would","Would","I","I","Maybe","This","Did","Hmmm","Due","Thanks!","Awesome,","Very","Nice","To","I","This","This","Also,","Have","Thanks,","The","One","I","Also,","Funny","```","if","upcase(speech)","else","false","end","```","can","This","This","While","Small","even","Have","I","Anyways,","Not","Hey","Thanks","I've","Great!","I","It","I","When","When","@audie","Thank","Wow,","Thanks!","Implemented","Any","Hey,","Clever","@kamron","I","yep,","This","Looks","Thanks!","Thanks","Thanks","I've","Quite","No","Love","This","Please","Yes","Totally","@dana:","This","Also,","Great","the","There","Cool,","Thanks","I","Yeah,","I","That","Neat!","Nice","Not","Very","Though,","First","Yeah,","Thanks","Okay,","Oeps","I","Ok","I","It","Nice!","Couldn't","Appreciate","This","Oops,","Thanks","Would","Haha,","Fair","Oh,","Maybe","You","Much","Hmm,","Looks","What","Any","Would","This","Ah","Submitted","Looks","Have","The","Unless","Aha,","You're","List.concat","Looks","Ah","Thanks,","I","Probably","My","Empty","Other","Yes,","Perhaps","Like","What","There's","Are","Elixir","Thank","\u0026gt;","4","I'm","I","I","(Looking","Some","Did","This","Same","There's","If","I'm","Yeah,","Not","Is","I","Neat!","Much","In","Heh,","Thanks!","I","Thanks","Seeing","Also,","`List.concat`","There","```","defp","```","The","catching","Should","Line","@elda","Good","Thoughts:","Should","Is","`shouty?`","I'm","`reticent?`","Elixir","To","Simplified","Looks","Would","The","Ah.","```","|\u0026gt;","```","...","```","**","```","Help?","Right","You","I","Something","There","Using","I'm","Yup,","Can","Helper","@adela","Wouldn't","A","I've","I","You","You","I'm","```elixir","defmodule","def","def","def","bottles_left","first_part_of_verse(bottles)","Take","\"\"\"","end","def","verses","verses","end","defp","\"#{bottles}","end","defp","defp","end","```","Nice","I'm","Generally,","```elixir","defp","defp","#","end","```","Also,","Nice","```","```","```","If","This","Also,","This","This","I","Very","Is","I","The","Fair","This","I","I","Do","Just","I","I'd","I","I","`List.concat`","That","```","word","|\u0026gt;","|\u0026gt;","```","I","Subsequently","Ha","Thanks","Yeah...","I","Maybe","You","Why","I","Semantically","List.concat","\u0026amp;(sorted_base_letters","I'll","You","I","Nice,","Can","Here's","I","This","For","So,","Ah,","I","Is","Also,","Could","Elixir","Thanks","I","You","You","Ah","I'd","Edit:","OK,","I","I","First","I","What","Thanks!","Thanks","I","I've","Not","Nice","I","I","Better","Do","What","@keegan:","Do","Yeah,","So","I","```","[[\"car\"],","```","Without","I","I","Do","How","Renamed","Ah,","I'm","Please","You","This","Thanks","@alessandra-w","All","Thanks","Ah,","You","Just","Otherwise,","I","Applied","Oops.","Indeed!","`@hayley`","On","I","Check","Can","It","Submitted","Boom.","Could","What","I","IMO,",":thumbsup:","I","I","@henry","@henry","Iteration","It","How","Appreciated,","/me","Yup,","Ah,","Is","Hrmm.","That's","Why","It's","That's","Very","From","Ah,","I'll","Thanks","I'm","`Enum.reduce(words,","Where","As","I","Ah,","Yeah,","Thanks","Nice","As","`Enum.filter(candidates,","but","Any","This","Couple","*","*","A","I","I","That","Hah,","Now,","More","Still","Looks","Is","What","I","After","Init","\u003cpre\u003eHasDict.new([])\u003c/pre\u003e","And","\u003cpre\u003e\u003ccode\u003e","#when","defp","dict","end","defp","#code","end","\u003c/code\u003e\u003c/pre\u003e","The","I","I","Hmm,","I'll","For","You","Thanks","Yeah!","```elixir","defmodule","def","String.downcase(word)","end","def","Enum.reject(list,","|\u0026gt;","end","end","```","Ah,","OK,","Just","There's","It","You've","I","A","I","I","`bottle_phrase`","That's","It's","I'd","Coding","Pulling","The","Now","I","The","Thanks","What","Other","`not_same_word?`","Without","I","Overall,","I","Having","In","The","The","From","The","The","I","Nice","It","But","Top-notch","You","Do","I","I","Maybe","Consider","Your","How","I","It","Your","The","This","I","I","I","I","How","I","`s`","I","The","This","Thank","About","```","**","stacktrace:","/Users/kimhyunkang/usr/src/elixir/lib/elixir/lib/hash_dict.ex:123:","/Users/kimhyunkang/usr/src/elixir/lib/elixir/lib/list.ex:111:","word-count_test.exs:33:","```","I","I'm","@bobbie","If","If","That's","Thanks","`defp","Good","Take","Also,","Generally,","```elixir","foo(bar)","```","becomes:","```elixir","foo(1),","```","Also,","From","Parens","Guards","Why","Would","Super","Great","I","I","Do","Very","Looks","I","(is_silence?(sentence)","||","||","||","This","I'm","I","is_silence?","And","Come","Awesome","You","```","iex\u0026gt;","\"Whatever.\"","```","I","check","I","Ah,","Thanks!","What","`String.strip(msg)","just","Building","There's","to_list","And","I","Nice","One","```","I'm","Also,","```dict","It's","I'm","Incorporated","Also","Still","That'd","I","Thanks.","Big","You","It","```","defp","```","Additionally,","That's","The","`'A'`","Why","Just","Just","You","Even","```Regex.replace","Now","I","This","Also,","When","Thanks","Looks","Just","Thanks","I","Thanks,","Good","It's","Really","\"\"","Thanks!","No,","And","\"\"","Actually,","two","1)","2)","Other","Look","For","\u0026gt;","Tried","Are","A","Here's","```","Enum.map","```","can","```","Enum.map","```","I","If","```elixir","defp","do_silence(sentence)","end","defp","defp","defp","defp","```","@kelsi","Good","I'm","I","I","Not","Actually,","`...","Aha,","Inexperience","to_char_list","I","As","I","Another","this","One","You","There","I","empty?","Interesting,","Good","Consider","You're","The","Also,","I","Mainly","Please","The","`List.flatten(Regex.scan(%r/[^","is","`String.split(string)`","I","When","One","Nice","If","I","I","Are","(You","In","This","It","Looks","What's","Could","It","Ah,","Moved","I'm","In","Pushing","I","Is","I","@jena",":)","I","It's","You","```","fn(candidate)","```","can","```","is_anagram(word,","```","Also,","This","One","This","I","Would","That's","If","I","Looks","-","-","-","```elixir","%r/\\A\\s*\\z/","```","I'm","Brand","Ignore","Ignore","Correct.","Very","I","Also,","|\u0026gt;","http://elixir-lang.org/docs/stable/Kernel.html#|\u0026gt;/2","You","Can","Alright,","I","Thanks","Your","_Two","-","-","This","defp","You","So,","Your","The","defp","These","Thanks","Indeed.","I'm","Great","On","You","Also,","Good","Not","Yes,","@henry,","`Regex.scan`","I","There","I","I","However,","There","Consider","I","I'm","Although","I","I'm","Not","Ideas","Do","@zetta","I","Hey,","I","I","Great","After","Thanks","Oh","When","Looks","```elixir","fn","{_a,","{_a,","end","```","Nice!","In","Also,","After","I","`Enum.zip`","It's","Ok","Code","This","-","-","-","-","-","If","Looks","You","Another","This","That","I","Enum.zip","Enum.count","-","-","It","Oops,","Cleaned","-","-","-","Elixir","I","You","There's","As","John,","I","Yep,","What","Also,","Personally,","I","Good","Yeah,","Having","This","@alfred:","@alfred:","In","```elixir","def","clean(words)","|\u0026gt;","|\u0026gt;","|\u0026gt;","|\u0026gt;","end","```","Nice","InputCategory","silence?","I","Yep,","Nice","If","I","```elixir","def","```","could","```elixir","def","```","It","Good","Wouldn't","One","Edit:","I","What","Thnx","You","And","Much","Yes","What","Cool,",":math.pow/2","Also:","I","Hey","I'm","Good","Can","I","Should","Very","ya","Oh,","p.s.","Good","Yes,","Thanks","Also","Thanks","But","I","True,","Also,","defp","Brilliant!","Thanks","Nice","A","Great","First","This","You","Hey","You're","Would","You","Otherwise","You","`defp","Also,","I'm","I","I","Okey","Conditionals","This","Your","I","Thanks","If","I","Check","Very","Thanks","As","I'll","Not","Ahh,","Looks","I've","Right","I","defp","defp","That","Anyways,","You","You","You","You","\u003cpre\u003e","Regex.scan(%r/\\w+/g,","|\u0026gt;","\u003c/pre\u003e","And","\u003cpre\u003e","defp","HashDict.update(dict,","end","\u003c/pre\u003e","I","I","compiler","```","text","```","```","**","```","Have","Thanks","I","This","I","Last,","Looks","Looks","You","```elixir","def","greeting","end","def","(greeting","end","```","edit","Hey","So,","Thanks","This","The","Also","This","This","This","Using","The","Hey,","Looks","First","When","While","Thanks","I","Thanks","This","Thanks,","*","*","*","Here's","```","Enum.filter(candidates,","```","Long","Have","Granted,","Submitted","I","The","That","Thanks","Well","*","*","*","I","This","Previous","In","Nice","IMHO","But","Seems","Also,","Great","I","You","Notice","Good","Thanks.","Ugh,","Very","okay.","I'm","Thanks","@anabel,","Why","defp","What","My","A","You","Normalize","Ergh,","This","Nice","Phew,","One","It's","sooo","Much","Are","love","I","I","I'm","Variables","Interesting","For","Consider","https://github.com/kytrinyx/exercism.io/blob/master/assignments/shared/bob.md","You","You","Looks","Thanks","Hi,","I","Great","```clean_string","On","```Regex.scan(%r/\\w/,","As","```","I'm","Ok...","On","Also,","Could","Other","You","You","But","`String.last(text)","Thanks","I'll","Brilliant!","For","Not","@javier","Looks","Looks","I'm","Hey","The","Also,","The","In","I","Sorry","def","def","def","`Enum.map_join/3`","I'm","You","\u003cpre\u003e","Enum.map_join(from..to,","\u003c/pre\u003e","This","Thanks","The","Thanks","The","Also","You","If","You","I","defp","I","clean_list","+1","Much","You","you","\u003cpre\u003e","List.foldl(list(words),","\u003c/pre\u003e","Changing","Good","It","You","\\w","For","@anthony","Also","Please","Also,","Thanks","Looks","My","It's","Is","\u003cpre\u003e","Enum.filter(","|\u0026gt;","\u003c/pre\u003e","And","Gotcha...","Always","@maxine","Yes,","This","Right","Thanks","I","This","@asha","@asha","Could","Apart","Sorry","For","```","def","```","Other","What","Hi.","*","*","Thanks!","One","But","Good","IMHO","Is","You","That","@rene","```elixir","@rene","My","##","iex\u0026gt;","\"rab\"","\"\"\"","```","Looks","One","@conrad","Looks","You","```elixir","defp","```","+1","For","I","However,","```elixir","HashDict.update(hash,","```","I'm","Thanks","I'll","Could","Also","Nice","@nicola","Thanks","@maxie","Maybe","I","Personally,","It","This","Hi","Thanks","You","Also",":lists.sort","This","@rod,","@rod,","Yeah,","Next","Nice","You","Is","@nicolas,","Looks","Much","I","Try","Yeah,","Looks","Instead","I","Only","For","```","defp","```","Other","That's","My","Other","Thanks","An","Instead","Thanks","Good","Whitespace","String","Consider","the","Consider","You","@haley,","```","iex(1)\u003e","iex(2)\u003e","[\"car\",","```","As","Thanks","Thanks","You","I've","I","@ronny","On","Ok,","1.","2.","For","I'm","You","I","Thanks","Much","Very","You","Is","*","*","*","*","```\u0026```","That","If","```elixir","def","num","end","```","you","```elixir","HashDict.update(counter,","```","I","I","Nice.","Anyway,","This","Yep","Thanks","A","Thanks","It","I","`:lists.append`","You","You","Ok","That","(I","You","Sorry","I'm","That","There's","def","Try","Try","In","Try","Try","Ok","Thanks","Good","List.zip","I","Was","I","Not","I","My","Ah,","I","What","seejee","Thanks","Yup,","Ah,","`Enum.count(List.zip([as,","I","Ah,","New","I","By","I'm","I","Nice","No","Not","I'd","Aside","No","def","potential_anagrams","|\u003e","|\u003e","end","Sorry","def","potential_anagrams","|\u003e","|\u003e","end","you","defp","word_a","end","Hadn't","Added","`\u0026(not_same?/1)`","This","I","That","I'd","You're","Pretty","Sounds","I'd","e.g:","```elixir","def","phrase","words_in","Enum.reduce(HashDict.new...)","end","```","`HashDict.update/4`","You","Also,","Aside","Thanks","One","@americo","At","@dagmar","The","This","I","For","If","Very","Check","I'll","Thanks","Nice!!","defp","First","at","Try","https://en.wikipedia.org/wiki/Tail_call","http://stackoverflow.com/questions/310974/what-is-tail-call-optimization","In","text","The","@buster","You","Although","Also","It","1.","2.","3.","I'm","Trying","Be","Also,","You're","Looks","BUT.","So","Ah,","EDIT:","It's","Sorting","It","Thank","\"Idiomatic\"","I","Instead","It's","I","Why","The","As","They","The","`cond`","Hmm..","Thanks","@darian","It","I'm","`''`","`String.strip(callout)","Ok","This","As","The","You","It's","I'm","As","@carol","I","Also,","There's","Interestingly","Have","With","Sometimes","So","def","phrase","end","...and","Do","Yo","Thanks","Well","Looking","As","The","In","Your","Have","You","@cathrine","While","I","Thanks","Realized","Looks","You","@maye","Yeah,","@sylvan","Passes","For","It","Ta,","`Enum.zip`","Your","Thanks","Thank","My","Why","Should","Shouldn't","I'd","Ok","Doh!","Thanks","Ah,","There","@haskell","Have","Also,","Well,","@hortense","Thanks","It's","Also","I","Why","@isaac","True","You're","Have","Just","`Dict.get`","`Enum.first/1`","this","-","-","(Edit:","`String.codepoints`","I'd","Hey","While","Concerning","Using","As","You're","A","I'm","What","Why","These","There's","Hey","Are","Yeah,","No","Ah,","@darien","The","A","The","@aileen","I","Heh,","I'd","@callie","Re:","If","I'm","Well","```elixir","@simone","@simone","Return","\"\"\"","@simone","def","Enum.reduce(dna,","Dict.update(counts,","end)","end","```","That","You","The","If","For","@vena","I'd","I","This","I","Thanks","Note","@chadd","Do","Other","@antonina","@antonina","\u003c\u003c","@pauline","Also,","Your","This","Use","You'll","Thanks","One","Again,","@verlie:","Well","Odds","[This](http://elixir-lang.org/docs/master/Kernel.SpecialForms.html#%3C%3C%3E%3E/1)","@jacquelyn","`one_or_it`","```elixir","defp","defp","```","In","@waylon","Thanks","\"DO","I'll","Ugh...","Gotcha.","Thanks","I","Yeah,","I","@frankie","The","I","Your","Also,","Have","Looks","@kaia","You're","Regexes","Have","It´s","*","*","*","*","@ethyl","Thanks","I","Why","You","Thanks","@randi,","@randi,","As","I'm","So,","In","Looks","@brandi","Nothing","And","A","The","Thanks,","I","One","The","Otherwise,","When","The","https://github.com/elixir-lang/elixir/blob/6a770579105f7b58877ac1a0e0b039513a8e85fc/lib/elixir/lib/kernel.ex#L3027","I","Line","Pipelines","That","This","Updated","@matt","Thanks,","I","I'm","Most","Secondly,","Also,","Stylistically","I","You","\"word\"","{","\"one","{","\"one","{","\"car","{\"car\",","\"testing,","{\"testing\",","\"go","{\"go\",","The","I","I","Thanks","`List.flatten/1`","`List.flatten/1`","`import`","You","A","Why","It's","`String.reverse(s)","Have","What","Why","1)","`x","Together,","`x","2)","I","You","https://github.com/gvaughn/elixir_kata/blob/master/roman/roman_numerals.exs#L11",":-)","I'm","Good","`List.zip`","The","Will","Are","`[[\"one\"],","I'm","Check","Is","I'm","You","I","@mavis","What","Take","No","But","That's","You","There","Do","Not","Btw,","Agreed.","Sometimes","I","At","`String.length(...)","You","Why","As","The","Thanks","Thanks","That","I","Interesting.","I","This","you","And","On","Why","A","*","*","*","Thanks","No","update_word_count([word],","I've","Why?","`String.strip(phrase)","I'd","Also,","`cond`","In","@melba","Thanks","Yep,","but","Thank","It's","Whereas","That's","@carey","ELSE","I","Check","Very","What","What","If","In","Why","Why","My","Pulling","Oh,","@katelin","Regarding","@patsy","I","@oma","+1,","Not","Yup,","Maybe","I","Using","This","I'm,","Tests","Actually","Thanks","I","But","You're","I'm","I'd","Ah,","Thanks","Thanks","I'm","One","I","Also,","Yes","Please","I","Looks","You","Nice","The","I","Consider","For","I","I","I","Also","I","For","Good","Incorporated","Switched","Just","In","I","Ok","I","Good","Thanks!","It","I","I","`String.graphemes`","You","Stylistically","You","`sing`","I'd","There's","Why","`List.foldl`","It's","A","@vickie,",":-D","So,","The","Thanks","So","Thanks","I","Not","I","I","Pretty","I","```","def","...","o","...","```","In","HashDicts","It's","I","I","Thanks!","@major","I","Also,","\"It's","That's","\"In","Nice.","Thanks","I","I","Regarding","I","Do","Ok,","I","You","Otherwise","Take","It's","Now","It","This","I","Yup,","Graphemes","You","Hé","I","On","Comme","Aussi,","Je","You","Thanks,","And","Yep,","Despite","...maybe","This","I've","...to","I","I'm","Plus,","Any","To","```elixir","@freddie","bla","\"\"\"","```","Just","There","How","Oops","Thanks.","My","For","Importing","If","For","Have","Have","On","Importing","Have","This","@constance","You","```","String.at(s,","```","to","```","String.last(s)","```","I","Hi","Yup,","Anyway,","Thanks","I","Integrated","Most","Noticed","The","Conciseness","Thought","As","I","While","```","def","```","(But","Thanks,","Instead","Yes,","Why","And","What","In","Will","Thanks,","The","@alfonso","@kameron","Just","Thanks,","Thanks","From","It's","This","The","Would","Do","Thanks","Will","Regarding","Yeah,","Btw,","Thanks","I'd","I","The","The","By","The","It","Interesting.","Thanks,","Why","I'll","This","You","```elixir","fn","{","a","end","```","Some","\"Why","How","Be","p.s.","p.p.s.","Analyzing","At","`String.last(string)","I","`String.strip(string)","I","`String.upcase(string)","The","You","That","This","One","Sloppy,","In","The","```","Enum.map_join","beer_counts(first,",")","```","But","Finally,","You","Can","What","Is","This","The","Good","Tip:","Why","It's","I'm","@enos","Re:","Re:","It","That's","Take","Did","It's","The","Your","My","Line","You","`@fae","To","@crawford,","I","I","One","ah,","I'm","It's","Parentheses","It's","Ah.","I","What","`u`","Regarding","Yes","I'd","With","Character","If","@herta","Parentheses","```elixir","Enum.reduce","fn(x,hh)","...","end","```","You","Yes","`Enum.first","It","This","Thanks","IMHO","Nice","Only","I've","I","Thanks.","I'm","@abelardo","I","```","prompt[/\\?$/]","```","instead","```","String.last(prompt)","```","Why","Personally,","You","```elixir","defmodule","@clark","Calculate","\"\"\"","#","@clark","@clark","@clark","@clark","@clark","@clark","@clark","@clark","@clark","@clark","lc","def","do:","end","lc","lc","def","do:","end","end","lc","def","fifth_date","month,","if","fifth_date","else","unquote(binary_to_atom(\"fourth_#{dp}day\"))(month,","end","end","end","#","#","defp","#","#","d","d,",":calendar.day_of_the_week(year,","d","else","nil","end","_,","end)","if","end","end","```","That","Hmm,","I'm","Oh","Thanks","This","There","I'll","```elixir","defmodule","@craig","Calculate","\"\"\"","#","@craig","@craig","@craig","@craig","@craig","@craig","@craig","@craig","@craig","@craig","lc","def","do:","end","lc","lc","def","do:","end","end","lc","def","fifth_date","month,","if","fifth_date","else","unquote(binary_to_atom(\"fourth_#{dp}day\"))(month,","end","end","end","#","#","defp","#","#","d","d,",":calendar.day_of_the_week(year,","d","else","nil","end","_,","end)","if","end","end","```","Btw,","[EDIT:","Nice","It","`contains_char`","Consider","I","Well,","Oh","Ugh,","Your","I","The","That's","Also,","I","I","Just","I","Really,","Error","Moved","For","You","Check","Ok","`\u0026Kernel.!=/2`","@demond","-","-","-","Cheers","This","`String.ends_with(phrase,","That","Did","Overall","Can","Tip:","In","In","Writing","```elixir","defp","defp","```","Do","Just","Take","And","Very","On","Also,","Ok","Having","Ooh,","I'm","Why","`String.at(a,","Can","Now","This","I","Well,","Note","Alternatively","Or","Figured","I've","`\"(\\\\1)","`%r/(.{3})(.{3})(.{4})/`","I'd","This","For","```elixir","@russell","```","And","The","`|\u003e","`from`","I","Thanks","One","What","It's","Mm,","@caterina","I've","Didn't","I","Well","Off","Don´t","Though","Why","The","```elixir","defmodule","def","matches","Enum.reduce(matches,","Dict.update(d,","end)","end","end","```","Should","That","Your","My","I","Thanks","To","Hum,","`Enum.reverse(:lists.seq(to,","`reduce`","Why","Yes,","While","Part","You","```elixir","def","do:","```","@stephany","As","Thank","This","I","I'm","Did","Now","I","Nope,","Generally","Wow,","Well...","Remember","Also,","Thanks","I'm","First","I","I've","I","Great","@chelsie","I'd","`\u0026({\u00261,0})`","I","I","I","Also,","```","@khalid","```","Finally,","Are","For","Nice,","It","Your","Only","Ha!","Browsing","I","I've","Mm,","I'd","I","You're","While","On","In","\u003e","~","I","Unfortunately,","```","comparisons","|\u003e","|\u003e","|\u003e","```","\u003e","Yeah,","I'd","Doing","They","Consider","Consider","Well","You","You","The","Any","Isn't","Overall","I","I","I'd","Do","I","A","I","```","def","```","than","```","def","```","But","Good","I","I","Regarding","I","It's","Using","I","I'm","Anything","How","Very","\u0026[...]","Looks","Minor","I","About","I","Ideally","But","Using","It","Is","Fixed","OK.","No,","There's","Another","I'm","I'm","Pushed","I","I","I","Nice","The","I","The","I","Did","I'd","That's","`String.last(s)","`String.length(s)","@rebecca","`String.graphemes`","To","Added","@thora","Much","A","Enum.filter(words,","But","`Regex.match?(%r/\\p{Lu}/,","Err,","@jaquan","Optimizing","Notice","I","I","I","Yeah,","I","Thanks","I","You","@rhett","And","def","There's","With","Looks","Beyond","I","Check","Dang,","Good","Verse","The","Aha.","Ah,","But","Thanks","Few","There","In","I","You","Is","No,","Yup.","I","Thanks.","Personally","I","What","I","Nice","Haha!","I","The","I'll","Look","I","There's","You're","That","I","I'm","Functions","I've","Is","That","Initially","Thanks.","The","The","```elixir","def","map_values","Enum.sort(roster)","end","end","defp","Dict.merge","fun.(roster)","end","end","```","That","@jovani","I","@asia","Minor","Good","@kristofer","Giving","@darius","I","With","verses","iolist_to_binary","Even","Take","You","I","Got","A","You","Did","I'd","Yes,","@norene","@ressie","iex(2)\u003e","true","The","Or","`Enum.map(...)","I'm","Thanks,","Is","```elixir","defp","acc","end","```","And","In","In","```elixir","Enum.reduce(split_lowercased_words,","HashDict.update(tally,","end)","```","I","`Enum.reduce`","Those","@jazmyn","If","@mauricio","Very","To","There's","The","Yikes.","Another","Ah,","I'm","This","I","Even","I","Is","Thanks","In","agreed.","@else","Just","I'm","bitstring_to_list,","Here's","```elixir","def","String.upcase(word)","|\u003e","|\u003e","c,","acc","_,","end)","end","scores","{8,","defp","unquote(Macro.escape(","(lc","|\u003e","|\u003e","|\u003e","))","end","```","Here's","```elixir","values","{","{","{","{","{","{","{","]","#","Enum.flat_map(values,","fn","Enum.map(chars,","defp","end)","end)","defp","def","String.upcase(word)","|\u003e","|\u003e","|\u003e","end","```","@kenton","@dashawn","@bell","I'd","No","Ambitious","I","As","You","Quick","(And","I'd","`\u0026({","`bitstring_to_list`","Can","@gertrude","You","@hudson","Sometimes,","It","The","I","`Enum.map","`Enum.map","`bitstring_to_list`","`@genesis[char]`","```elixir","anagram","```","And","I","You","What","A","You","In","I'm","Yeah,","Very","@nettie","Regarding","Put","Good:","Good:","Bad:","The","@amiya","Thanks","I'll","As","I'm","This","iex(1)\u003e","roman.exs:1:","==","**",":lists.keyfind(:import,","roman.exs:17:","Previous","I","Today","Tried","```elixir","Cell.add_enzyme(cell,","Cell.signal(cell,","RNAPolymerase.product(cell)","```","Maybe","Oh!","It","I've","Agreed.","@reta,","@alexandre","@alexandre,","Ah,","Looks","Sometimes/often","```elixir","def","l","HashDict.new","do:","end","```","Only","Looks","This","I'd","Yup,","I'd","Module","You","@earnest","It's","@katlyn","@katlyn","In","To","`HashDict.put(...,","Note","Hum,","Sure.","In","Fair","Agreed.","Did","I'm","I'd","Also,","What's","I","The","Of","It","Yeah,","If","@henriette","Here's","`:math.pow`","There","Nice,","A","Kept","It","Perhaps","More","But","I","Could","Ah,","It","This","I","@leone","Thanks","@kelli","But","Now","It's","The","Straight","If","Personally,","Well,","Yup.","@andy","For","`\u0026([student|\u00261])`","Oh","@candido","Just","@roxane","defp","which","defp","...","end","defp","...","end","which","What's","Well,","Ok,","I","@elza","It's","Simple","Does","Stop","Rather","I'm","Not","Oops,","Ok,","In","Take","`do_count`","Your","In","Your","@johnson,","Ok","The","Not","Thoughts","No","```elixir","def","Enum.reduce(stop..start,","[verse(x),","end)","end","```","@lukas","Is","Using","It","Btw,","It's","Instead","I","Congratulations","Thanks.","I","So,","Is","Well","Passing","For","Well,","I","Renaming","Thanks","I","Thanks","Ok","```","If","the","```","And","If","There","There","Odd","Things","I","```elixir","defp","defp","defp","```","Not","I","Gotcha.",":-D","OK.","There","Yup,","Once","Oh,","`Stream.with_index","`elem(t,","Creating","Haha.","For","elem","It","José","Also","I'm","I","Guards!","You're","If","I'm","On","This","This","I","That","Stream.concat","If","Woohoo,","I","You","Convention","All","I","The","@alexandre","`d==2","I've","OK.","No,","OK.","That's","I","Style","Only","Replace","@webster","@webster","According","Ah,","Although...","Nope,","`fn(count)","You","Is","Precedence","Yup,","Nope,","You","Yep,","When","I","Went","It's","`\u0026({","Ok,","Thanks!","I","Good","I","You're","Importing","I","This","Using","First","If","That","congrats","This","Just","When","Sorry","Ok...","@helena","Also,","Hmmm...","Oh,","hahahah","I","Did","@eva","You","```elixir","defp","defp","```","(`rem`","You","I'd","I","`\u0026(\u00261","@karolann","You","@johnnie","Maybe","I","This","Do","So,","Also,","```","defp","defp","```","If","Just","What","The","This","The","@violette","It","I","I","On","Did","`find_answer`","Thanks","BTW,","This","`cond`","But","```","cond","allCaps(input)","empty(input)","...","end","```","Just","One","Wouldn't","`allergic_to`","It","`cond`","Awesome,","Aha.","If","Very","I","Quick","@deangelo","##","Keep","provided","Solve","Ah,","Cool.","Yup,","I","I","I'm","But","This","-","-","-","-","@angus","https://github.com/elixir-lang/elixir","That's","In","I","Thanks.","I","Looks","Did","This","I","I","At","That's","The","Usually","`List.t`","Thanks","This","Well","@rudolph","Did","Gotcha.","I","A","The","I","My","@ronny",":-D","Well,","You","I","@gabe","Wanting","This","The","The","The","I","The","OK.","Object","The","That","@cassandre","Yeah,","I've","I","@bertram","This","This","Your","*","*","*","*","The","I","Did","Nice.","One","Another","I","Looks","Your","I","@alvis","I","I'm","They","Also,","This","I'm","I","This","```elixir","def","Enum.reduce(coll,","end","```","I'm","Wouldn't","In","You","@santina","@santina","Run","I","My","Works","Please","I","Beautiful,","Very","Good","Thanks!","Looks","This","Erlang","I","Looks","I","Minor","A","Looks","I'm","Your","A","Thanks","It's","Enum.join(","Pretty","I","```","def","from","|\u003e","|\u003e","|\u003e","end","```","While","Just","Do","Your","You","For","@tamara","I","It's","I'm","Why","Try","You","Here,","The","Agree","This","This","I","Anyway,","I","This","Elixir","In","You","There's","Thanks","Submitted","```elixir","defp","defp","```","etc.","Instead","```elixir","defp","``","Let's","```elixir","score_data","lc","defp","end","```","You","Minor","Yeah,","You","Not","This","@tressa","```elixir","defmodule","def","def","end","[","{","{","{","IO.puts(\"good","```","Thanks,","When","Can't","`calculate_score`","```elixir","defp","{","Enum.map(chars,","end","```","(No","I'd","I","To","No","There's","Very","Wow.","The","Using","Now","This","Elixir's","What","What","Btw,","I","Trying","Also,","Thanks","I","By","I","I'm","Yes,","The","`Code.eval_quoted`","I'd","Don't","Nice.","This","I'm","Yup,","Could","Also,","`import","`{","About","I","Yup,","Looks","Looks","One","Looks","Thanks,","That's","Gotcha.","And","Have","You're","I","Looks","Btw,","I'm","just","Sigh,","Having","As","Regarding","I'm","You","The","```elixir","defimpl","import","import","def","concat","end","end","```","Using","Looks","Thank","Ah,","Oh,","You","Instead","Oh!","If","Thanks.","The","I'll","I","Reusing","The","Alternative","Alternative","Alternative","As","@benjamin","I","Your","A","```elixir","@carlie","defp","set(list:","end","defp","set(s,","end","```","(Makes","Looks","The","```","[]","[1]","[1,","[1,","...","```","Append","So","There","Yeah,","I","Thank","I","Alrighty.","That","OK,","FYI:","About","Yeah,","In","A","The","Looms","But","Ah","Thanks!","You","Oh,","Thanks","Nope,","Looks","Great,","Generally","You","Instead","`Regex.scan(...)","Thanks","I","Based","You're","Also","As","Looks","Initially","```elixir","def","accumulate(collection,","end","defp","defp","processed_element","accumulate(tail,","end","```","It","Great","Changed","Nice.","Looks","Did","Instead","In","More","Not","Warning:","I've","What","Hi","Thank","Regarding","```elixir","test","assert","end","```","Because","I","Let","Here's","I","I","I'm","Of","`return`","With","Could","`Dict.update`","Btw,","Using","Obviously","Does","The","This","Yes,","Having","I","```","iex(1)\u003e","1..4","iex(2)\u003e","1","iex(3)\u003e","4","```","Btw,","Ok,","Maybe","\"head\"","Evaluating","Looks","In","`String.last(input)","In","Can","Definitely","I","Is","Well","As","It","No","This","This","As","You","This","@pietro","This","I'm","I","I'm","I","You'd","I'm","I","Cool,","```","def","keep(collection,","end","```","For","http://exercism.io/submissions/b3d649a860627c3f1f0f8bec","I","For","For","Just","Thanks","-","-","-","I","To","You","As","I","It's","A","Bear","That","`Dict`","The","If","Looks","You","Insisting","The","Brought","Mmm...","@jerel,","Thanks","As","@emmanuelle","I","Btw,","Looks","The","```","[]","[1]","[1,","[1,","...","```","Append","So","There","Thanks!","Thanks","Slight","Hum,","In","In","`fn(val)","Gotcha.","Thanks","Just","1.","2.","Other","Thanks","@lindsey,","@enola,","`List.flatten`","Usually","Took","What","I","An","Your","You're","Ah,","@cielo,","Thank","Thanks","@ocie","Looks","There","I","test","assert","end","That's","Yes,","Looks","One","Oh,","```","reduce(ll,","append(reverse(l),","end)","|\u003e","```","That","Was","Not","It","The","```elixir","Enum.map_reduce","{","end","```","To","You","```elixir","def","```","Single","How","@luella","So","```elixir","@alan","@alan","```","@devonte","@neha","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","Very","Most","@zelda","The","It","@chelsie","Ah,","I","I","I'm","I'm","@jamar,","Thanks","I","in","Looks","A","Typically","```elixir","def","defp","defp","```","Your","The","Looks","You're","`reduce`","I","That's","Both","I'll","Not","I'm","The","I","Take","```elixir","def","temp","1","end","```","This","The","Non-tail-recursive","Many","Hint:","Regarding","The","@rodger,","```","def","cond","f.(head)","true","end","end","```","I","Great,","I'm","I","I'll","You","The","Ok,","`String.length(s)","Excellent,","What","When","test","assert","end","On","Just","Yea,","I'm","Over-engineered","Looks","@janis","Tail","This","Thanks.","Nice.","Thanks.","Looks","Your","It's","This","Btw,","As","Also,","This","Looks","Pattern","You","@idell,","You","That's","```elixir","case","[]","[h|t]","end","```","Oh,","Just","Ugh,","I","Instead","Looks","A","`func","Helper","You","```elixir","case","[]","[head|tail]","end","```","Also","```elixir","def","def","```","It's","Makes","This","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","Looks","One","Ah,","Good","About","```elixir","def","...","end","```","And","Looks","One","Quality","I","Looks","One","Learned","Heh,","Welcome","You","Also","`","I","I","Good","@cale","Correct.","Thanks,","True,","Exercism","You","I","Looks","Only","With","This","Defaults","Try","Btw,","*","*","In","Looks","Just","A","(1)","(2)","(3)","That's","(1)","(2)","(3)","```elixir","case",":teenth",":teenth",":first","...","end","```","Unfortunately","Now","Is","I","I","Well","You","Elixir's","Alternatively","A","`lc`","It's","Try","Where","+1","Yeah","Looks","A","1.","2.","There","I","The","A","1.","2.","In","`lc`","Playing","No,","Let","```elixir","@kevin","{","{","{","{","{","{","{","]","```","Keep","You","```elixir","lc","```","This","You","Ooh,","nothing","Thanks","@bertram,","I'm","I'm","Ok,","Doesn't","You","Typically","Instead","I","Based","Trying","Also","Also","Nice","Just","1.","2.","3.","Ah,","While","As","1.","2.","I","I","Cool,","I","Thanks","Regarding","Looks","I'd","I","As","There","Your","There","Looks","pminten:","People","Cool,","As","As","Thanks","Yeah,","Thanks","Wouldn't","Your","I","Unfortunately","Thanks","Cool,","Ah...","Using","It's","This","In","Looks","Often","Hi,","1.","2.","3.","Thanks","P.S.","Looks","There","Looks","`\\w`","`List.first`","Hi,","1.","2.","Reviewing","Btw,","@harvey,","Welcome","Thanks","`List.zip`","List.zip","I","The","This","I","new","Indeed.","Two","```elixir","def","defp","defp","```","This","A","Looks","You","For","Take","I'm","A","Odd,","@percival","I","Surely","You","Thank","now","Again,","neat","Nice","1)","2)","Simplified","@tessie","Thanks.","Sure,","LOL;","Looks","Alternatively","Well","The","And","@alvina","Also,","A","Good","@elva,","Excellent","Is","It","Looks","Check","I","Please","Great","The","Considering","This","I","I","I","I","No","After","Nice!","Thanks","On","Thanks","So,","Maybe","I","Wouldn't","I","It","Took","The","I","```elixir","Enum.filter_map(@westley,","```","A","```elixir","Enum.flat_map(@westley,","if","end)","```","HashDicts","They","Btw,","Thanks","What","`Enum.map","Other","Well","Your","That","Thanks","Not","Cleaned","The","Thanks","I","You","Thanks","I'm","You","Oh,","Btw,","Alternatively","Something","Exactly.","I","I","Looks","The","And","Cool,","Supervisor","quick","Let","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","Looks","A","*","*","Thanks","This","Thanks","Also,","I","Seems","That's","Parens","Your","Also","Taking","**","stacktrace:","(elixir)","word_count.exs:6:","word_count_test.exs:38:","`close_bank`","You","On","It's","`Dict.update`","Instead","A","Thanks","I","Thanks","Thanks","Welcome","*","*","*","*","Nope,","Your","Thanks","I","Well","You","Be","\"co-operative\"","Ok,","1.","2.","Feedback","I","I","I","Gotcha.","Just","I'd","It's","I","Your","If","*","*","*","Notice","Now","The","Looks","A","In","Also","You","Also","Interesting,","Thanks!","Algorithmically","My","Thanks","I","I","I","Your","With","Realised","@halie","I","What","I","You","Why","Looks","Typically","Also,","Does","I","I","Nice","I","For","For","Yeah,","As","```","multiple_of?(year,","(multiple_of?(year,","```","Hmm...","I","it","Thanks","I","I","yeah,","No,","I","I",":)","Well,","Nice!","As","Another","Thanks!","I","1.","2.","Removed","That's","Since","First","Of","Ok,","This","One","```elixir","def","def","```","I","Other","Note","Why","Did","Probably","Suggestions","In","I","I","I","Another","Hope","Looks","This","Does","Hmmm","is_without","is_yell","I'm","The","In","There's","I'm","Btw,","Also","Well","The","Let's","*","*","*","*","*","*","*","And","*","*","*","*","*","*","*","Here's","Because","Thanks","Thanks","Do","Also:","Basically","To","```","```","but","```","```","It","Thanks","Instead","Also","Wow.","While","I've","Haha.","Same","In","Btw.","Hey","looks","Hi","Do","`:lists.sort`","Thanks","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","Did","Different","The","Let's","*","*","*","*","*","*","*","And","*","*","*","*","*","*","*","Here's","Because","Good","A","Oh,","```elixir","test","#","#","end","```","I","I","I'm","Thank-you","Sorry","You're","I'm","Looks","The","```elixir","if","```","And","The","@ezra","I'm","In","Instead","It's","You","`List.zip`","Instead","Btw,","Why","Huh,","Did","I","As","Just","Other","I","I","Definitely","```elixir","def","cond","silence?(input)","...","end","end","defp","```","You","```elixir","defp","String.strip(input)","end","```","Hope","Looks","One","Also,","I","Yeah,","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","Computing","Ist","`Enum.take`","Made","Yeah,","Not","Not","Could","Hmm.","You","Your","Looks","Thanks","Looks","Yep,","Is","```elixir","iex\u003e","\"13035551212\"","#","test","assert","end","#","```","Additionally","Although","Please","Hi","I","I","I","So,","Just","```elixir","input","String.upcase(input)","```","Upcasing","Yeah,","Updated","Looks","```elixir","String.upcase(input)","```","That's","Looks","Line","You","Thanks,","Very","Yes,","First","Also","Funny,","Looks","I","Instead","I'd","Looks","Yeah,","You","String.match?","I","And","Thanks!","For","All","Oops","You","```","defp","defp","```","Not","Instead","Now","Let","Not","Why","Did","Define","This","This","Is","Oh,","Thanks!","(He","@michele","But","I","I","That","Looks","Just","Yes,","Thanks","Just","So,","Regardless","If","@kaley","A","Thanks,","In","Some","A","I","http://www.regular-expressions.info/unicode.html","I","I","Stylistically:","```elixir","String.downcase(sentence)","|\u003e","|\u003e","|\u003e","Dict.update(dict,","end)","```","Be","@ilene","There's","I","I","Both","Take","Would","Do","@donna","```|\u003e","does","What","Would","Not","What","You","I'm","To","Look","One","Looks","One","```elixir","def","def","```","If","```","def","def","def","```","Thanks","Looks","I","I","Looks","Line","Similarly","And","```elixir","Enum.reduce(strand,","```","@burley","Looks","There's","I","Your","In","Creating","Oh","The","Exercism","If","Updated","Definitely","Much","For","Is","You","Mm,","The","I","There","Think","What","Finally,","`f","Personally","``elixir","Enum.each","...","end","```","I","I","Beyond","I","I","I","I","#","Ok.","Would","Amazing","A","I","Yup,","I","After","Aha!","Yeah,","Instead","Got","```Elixir","iex(16)\u003e","#HashDict\u003c[{\"apple\",","iex(17)\u003e","#HashDict\u003c[{\"boat\",","iex(18)\u003e","#HashDict\u003c[{\"apple\",","iex(19)\u003e","false","iex(20)\u003e","true","```","At","Btw,","The","This","Thank","Having","All","does","It","test","assert","end","update:","I","Thought","indifferent?","There","I","You","I","As","Ok,","Compressed","```","iex(1)\u003e","[\"Götterfunken\"]","```","Seems","For","Do","True,","iex(1)\u003e","[\"G\",","So","There","I","Also,","I","I","There","In","```elixir","split_sentence(sentence)","|\u003e","```","But","I","```elixir","cleanup_word(first_word)","|\u003e","|\u003e","```","Working","This","Thanks","For","Also,","Thanks","mmhhh","Ah,","Indeed.","Ok","Needing","Instead","Nice!","Could","Enumerating","`String.length`","Also,","@columbus","Still","Can","Also,","Can","Using","Really","I","I","And","Well","Shortcut","New","Wanted","*","*","Good","Indeed.","As","Elixir","I","For","For","For","def","Your","Just","Not","Elixir","Would","Doesn't","True","They","@marty","Tail-recursive","@armani","Using","It's","Isn't","Yes,","Why","True,","I","Beats","@jessica","Yeah,","Hmm,","What","Brand","**Note:**","Changed","Absolutely,","Cleaner","This","Feels","The","This","Well","I","Added","I","Nice","I","Bacause","Nicely","I","makes","in","if","Wouldn't","[_","contains(a,","why","contains(a,","But","That's","Here's","Enum.chunk:","Stream.chunk:","Oops,","Oops,","Clean","Changed","A","Instead","def","def","@thalia","*","*","*","*","*","@audra:","My","Ignore","This","For","I'm","What","```elixir","cond","is_empty?(input)","_","end","```","Upon","```","**","/private/tmp/elixir-cRJq/elixir-0.11.2/lib/elixir/lib/kernel.ex:2636:","bob.exs:3:","```","I","![regex](http://www.ludumdare.com/compo/wp-content/uploads/2013/04/i-have-no-idea-what-im-doing-dog.jpg)","This","This","I","This","My","1.","2.","```elixir","defp","#","end","```","You","Hi","I'm","@lennie","Now,","Please","http://exercism.io/submissions/dfd56ce62761b2f3d893ef02","@chris","@kelly","Learning","Yep,","A","So,","[llc]:","very","I","Not","This","I'd","```elixir","defp","defp","defp","```","I","The","@lesley,","defp","It","@clarissa,","Either","````","~/workspace/exercism/elixir/bob","**","(elixir)","bob_test.exs:4:","(elixir)","(elixir)","````","I","Not","The","Elixir","````","~/workspace/exercism/elixir/word-count","**","(elixir)","word_count_test.exs:4:","(elixir)","(elixir)","````","Should","Nice","What","The","In","I","Not","Previously","I","Good","@franz","The","The","The","I","You","If","This","The","The","One","Thanks","I","Good","I","It","Also,","Yes,","Useful","Neat!","Looks","As","Hmm,","Learned","Thanks","The","In","At","Yes,","@stanford","Thanks","[p]:","How","only_letters?","since","You","I","```","1)","**","expected","to","instead","stacktrace:","phone_number.exs:20:","```","What's","\u003e","Haha.","Ah,","This","The","Your","It","Great","Also,","Woah,","I","1)","2)","Márcio,","tem","This","I","Writing","Some","-","-","-","This","I'd","For","I","I","there","for","I","This","If","Another","The","I","And,","I","There","I'm","I","For","Hey","This","And","-","-","-","Fixed","I","-","iex(3)\u003e","**","that","-","-","-","Good","Regex'ing","Thanks","I","\u003e","I","\u003e","That's","\u003e","The","@carolyne,","I’d","downcase","With","I","Fixed","My","Had","And,","Interesting.","But,","Thanks","This","The","Using","Using","That's","re","Iteration2","Sorry","Although","This","I","This","I","Also,","Good","I","Tidying","Using","Seems","`count/1`","The","`summarize/1`","Short","The","The","```","test","assert","end","```","A","*","*","I've","So","The","Looks","The","```to_words_list/1```","Switching","```is_sublist?/2```","I","Elegant","Thanks","Thanks","I'm","I","Ugh.","On","https://github.com/exercism/xelixir/issues/7","I","...hmm...now","Fastest","Few","-","-","-","I","I'm","I'm","I","Interesting","About","```elixir","String.ends_with?(input,","#","```","Thanks","I'm","I'm","This","I","The","Inserts","The","Nice,","I","I","Ok,","\u003ccode\u003edef","\u0026nbsp;","\u003ccode\u003e","The","I've","I","This","That's","The","Btw,","Looks","In","Btw,","You","Is","Cleaned","This","Exercism","Actually,","I","That's","```elixir","defp","defp","sub_count","cond","sub_count","false","true","Stream.chunk(full,","|\u003e","end","end","```","This","One","Added","First,","This","One","I","You","Interesting.","\u003ccode\u003edefp","\u0026nbsp;","\u0026nbsp;","\u003ccode\u003eend\u003c/code\u003e","Also,","This","Yes,","One","I'm","I","One","Another","This","Primeiramente","Não","Mas","http://elixir-lang.org/docs/stable/elixir/Enum.html#concat/1","Este","```elixir","iex\u003e","[1,[2],3,4,5,6]","```","http://pygments.org/demo/435566/","Quando","Thanks","Hi","I","I","Not","Nice.","At","Finally,","I'm","Thanks","I","Thanks","*","*","*","Great","This","The","Great","One","`ends_with?`","I","Would","thanks!","@julien,","Like","This","```target","Code","I'd","The","@dawn","```elixir","@dawn","def","def","```","I'm","````","iex(2)\u003e","8","iex(3)\u003e","3","```","and","The","The","Succinct","The","Only","I","The","The","The","The","Maybe","Good","Bonus-nits","Also,","This","Not","The","You","Hi","I","About","Thanks","I've","I","The","The","On","Do","@florencio,","The","There's","Not","Other","Not","It","Final","Other","Not","Do","The","Very","Not","An","A","Tiny","```","That","@emely,","Let's","[1,2,3].inject(\u0026(:+))","And","[1,2,3].inject(0,","But","[1,2,3].inject(4,","To","(adding","Thanks","Regarding","Looks","I've","I","```elixir","def","def","append(first,","end","```","Maybe","I","I","One","```elixir","defp","hash","end","```","Can","```elixir","defp","```","for","This","One","Methods","I","Great,","I","\"map","First","Obviously","If","I","Thinking","Since","What","Also,","Good","I'm","This","Good","Have","Great","If","I","I","I","Instead","I","Initializes","Always","Really","This","This","score_gen()","Updated","Updated","For","You","I","Once","Changed","Good","Nested","I","```","def","String.ends_with?(speed,","end","```","-","-","-","```elixir","strip_punctuation(sentence)","```","Lance,","Changed","Abusing","Extremely","Then","I","Thanks","Is","Quite","The","This","I","This","Maybe","Clean","You","I","The","Exactly","Were","I'm","I","I","I","Using","Maybe","I","Quite","Is","Maybe","1)","2)","In","The","Your","```elixir","Teenager.hey(\"U","```","Can","Thank","```elixir","def","length","|\u003e","length","end","```","I","```elixir","defp","String.strip(input)","end","```","I","One","```elixir","defp","Dict.update(counts,","end","```","I","Fair","Rather","Also,","Looks","One","```elixir","current_count","unless","```","to","```elixir","current_count","```","Good","Nice","Hello,","What","In","I","The","I","Also","```elixir","test","assert","end","test","assert","end","```","The","```elixir","test","assert","end","#","test","assert","end","```","The","Hey","glad","There","-","-","-","-","Thanks","I","1.","2.","3.","4.","5.","I","The","But","Why","I'm","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","I","Tried","There","This","Take","```elixir","def","case","[]","[_|t]","rest","1","end","end","```","Here's","*","*","*","*","*","*","*","*","*","*","*","*","*","Note","There","```elixir","def","defp","case","[]","[_|t]","end","end","```","Now","*","*","*","*","*","*","*","*","*","*","*","*","*","Using","Looks","I","Thanks","I","Given","That's","Well","In","```elixir","x1","x2","[x1","```","When","Thanks,","So","Indeed.","Using","didn't","I'm","I","I","The","Hi","Your","I","Using","I","It's","You","You're","Right.","They're","You","```elixir","defp","Enum.flat_map","Enum.map","end","end","```","The","Implementing","My","*there","1.","2.","You",":)","I","*","*","Verifying","As","OK,","The","Then","To","I","I","for","Is","Really","Hi","I'm","I","I","I","Look","I","New","*","*","```","defmodule","def","cond","silent?(input)","yelling?(input)","question?(input)","true","end","end","def","String.upcase(input)","String.downcase(input)","end","def","String.ends_with?(input,","end","def","String.strip(input)","end","end","```","*","Actually,","```","Teenager.hey(\"Let's","```","The","A","This","Hi,","of","Greetings","Simplified","Extracted","Accidental,","I'm","http://elixir-lang.org/getting_started/3.html","Fun","I'm","@rickie,","What","```elixir","if","[head","else","filter(tail,","end","```","Thanks","@johnathan","I","This","My","Line","It","I","In","```elixir","defp","```","The","I","Sorry","Sure,","Looks","you","```","defp","end","defp","end","```","The","I","I","is","defp","defp","or","String.strip(str)","I","I","String.match?(input,","I","I","I'm","String.upcase(input)","String.upcase(input)","This","Ah,","In","With","defp","Otherwise","It","sentence","|\u003e","|\u003e","|\u003e","|\u003e","I'd","HTH","Consider","defp","Consider","defp","I","Thanks","`Regex.scan`","The","Changing","Only","Once","On","Instead,","Redefined","Also,","filter","```","def","for","end","```","Thanks","Yeah,","Nicely","1.","2.","`defp","Both","Oo...","It's","I","The","According","Regex","Any/all","I","Hmmm.","Also","Also,","agreeable,","This","Great","Interesting","I","```","@sincere","def","end","```","With","```","@sincere","def","sentence","end","defp","#","```","Lastly,","`Map.update(counts,","Yeah","I'm","This","Also,","Oh,","I","Looks","Nice","Sorry,","I'm","Won't","As","Is","Nice","Nice","@eugene","After","1.","2.","3.","No","No","@phoebe","There","test","assert","end","Good","Interesting","On","Looks","I","Also","I've","Read","I","Simplified","Nice","great","I'm","Looks","Thanks","What","Thanks","By","I"]},{"Key":" Very","Fragments":["nice","nice.","nice.","nice!","clear!","nice","nice","clean","nice!","clean.","clean.","nice!","clean.","good","good!","nice.","nice.","nice!","concise!","nice.","nice!","good","nice.","nice!","sorry","verbose,","nice","minor","minor:","interesting.","nice.","boring,","simplified","nice","interesting","minor,","rough","succinct."]},{"Key":"Very nice","Fragments":["--","and","and","work","and","indeed!"]},{"Key":"nice --","Fragments":["much"]},{"Key":"-- much","Fragments":["better"]},{"Key":"much better","Fragments":["than","in","name","than",":)","on","though.","time","written","memory"]},{"Key":"better than","Fragments":["my","_words.","the","my","the","the","_","this","`binary_to_list`","the","`binary_to_list`?","```","iteration","this.","foldr","`String.codepoints`,","recursion,","violating","to","O(n^2)","`String.codepoints`","the","your","this","using","if","regexes...","`Enum.filter`"]},{"Key":"than my","Fragments":["example,","example,","version","first","own."]},{"Key":"my example,","Fragments":["in","I"]},{"Key":"example, in","Fragments":["fact!"]},{"Key":" Good","Fragments":["point!","point,","job!","point.","job!","work.","points,","point","job!","Job!","point.","idea!","job!","job!","work.","job!","job!","job!","work!","point.","work!","point.","point.","call","job!","job.","point!","idea","call.","point.","points!","idea,","point.","catch.","point!","catch","point","start","job","catch.","point","predicate","start!","first","feedback.","points","suggestion.","question","points.","attempt!!","to","point,","question","feedback;","idea,","point!","point,","point","point!","catch","job!","suggestions.","point.","points","point,","point!","use","feedback!","catch","point,","structure","call,","use","point.","call.","work"]},{"Key":"Good point!","Fragments":["Thanks","Updated","Thanks","I'll","I"]},{"Key":"point! Thanks","Fragments":[":)","for"]},{"Key":" Looks","Fragments":["good.","good!","good!","pretty","pretty","good.","good.","really","good!","great!","good!","good","great!","like","good!","good.","good!","great,","nice.","good.","good.","nice.","like","like","like","good!","really","great.","nice!","great!","good!","great!","really","good,","good.","great.","good!","great","great.","pretty","pretty","great.","good,","great!","like","like","good!","great!","pretty","good.","pretty","good","nice!","good.","like","good!","good.","good.","good","pretty","good.","almost","very","pretty","like","pretty","great.","good","good","like","good.","like","nice.","good","good.","great,","quite","pretty","awesome.","great.","good.","good,","good,","good.","pretty","good.","pretty","good.","good,","good.","good.","good.","good.","good","great.","pretty","pretty","good.","a","good.","good.","good.","fairly","great.","pretty","good.","great.","great.","pretty","great.","good.","good","good.","good.","good","pretty","good!","pretty","pretty","pretty","great.","nice.","good.","nice.","pretty","good.","great.","pretty","good.","good","good","great!","a","good.","good.","good,","good.","good!","good,"]},{"Key":"Looks good.","Fragments":["Personally,","A","One","The","I","You","This","One","Pretty","Just","One","A","Just","You've","There","You've","You","Often","I","You","Just","You","There","I","Minor","I"]},{"Key":"good. Personally,","Fragments":["I"]},{"Key":"Personally, I","Fragments":["might","think","think","prefer","wouldn't"]},{"Key":"I might","Fragments":["extract","have","argue","make","consider","be","pull","try","fix","scan","use","go","like","keep","change","write","be","avoid","submit","have","call","have","be","be","offer","offer.","add","also","suggest","suggest"]},{"Key":"might extract","Fragments":["the"]},{"Key":"extract the","Fragments":["filter","matches","logic","other","individual","other","conditions","`String.length(text)","checks","reduce","words,","string","anonymous","conditions","\"Verse\"","code","characters","conditions","first","parts","letter","letter","\"chill"]},{"Key":"the filter","Fragments":["function","function","is","on","on","for","with","and","just","implementation,","step","to","step."]},{"Key":"filter function","Fragments":["so","might","easier","call"]},{"Key":"function so","Fragments":["that","i","the","it's","that","that"]},{"Key":"so that","Fragments":["you","all","you","other","you","you","the","a","i","I","it's","I","it","you","e.g.","you","it's","when","the","you","led","might","the","way","their","was","no","I","it","the","the","the","`keep`","won't","you","it","I'm","if","I","you","even","`Enum.any?/2`","you","could","it","I","the"]},{"Key":"that you","Fragments":["could","handle","might","are","can","mention","can","know,","have","may","can","don't","could","might","say","could","can","have","take","will","are","are","can","took","could","had","like","think","can","can","gain","added","exclude","can","could","can","are","can","check","can","then","don't","reference","could","can","get","need","pass","want,","could","then","have","shouldn't","can","build","wouldn't","make","are","don't","reminded","pass","saying,","need","can","can","don't","can","don't","extracted","can't","could","struggle","learn","seem","are","return","can","can't","were","can","use","can","gain","do","figure","ran","have","can","thought","can","gave","don't","don't","can","can","wouldn’t","need","need","fixed","wouldn’t","can","filter","mention","can","used."]},{"Key":"you could","Fragments":["do","submit","define","extract","probably","use","make","use","think","drop","simplify","just","pipeline","combine","wrap","use","use","do","collapse","make","simplify","have","at","use","get","avoid","clean","change","use","use","consider:","have","only","simplfy","try","write","have","use","use","just","probably","use","find","use","use","use","use","use?","consider","avoid","extract","sort","make","calculate","find","come","do","simplify","do","use","come","tighten","probably","check","have","have","make","do","make","break","keep","move","write","do","use","ignore","avoid","reduce","do","use","use","take","extract","use","check","use","make","clarify...","use","check","check","checkout","even","use","try","use","define","use","just","refactorice","use","have","use","do","do","change","do","just","fit","also","remove","validate","use","import","remove","use","pass","just","do","consider","extract","use","use","do","something","probably","use","do","traverse","use","normalize","compare","do","change","just","use","downcase","avoid","write","use","use","search","check","take","write","just","make:","also","slightly","improve:","also","express","reorder","consolidate","implement","strip","use","do","do","make:","simplify","alternatively","then","use","scan","try","use","do","use","create","write","get","write","use","cache","also","write:","make","make","pass","speed","use","use","do","make","try","move","inline","keep","get","get","use","use","eliminate","use","pipe","save","take","benefit","use","make","use"]},{"Key":"could do","Fragments":["e.g.","without","that.","it","that","that.","things","something","for","the","those",":","`\u0026count_word/2`",":","it","the","the","the","the","`Regex.scan(phone_pattern,","it","it,","here","is","that","is","with","the"]},{"Key":"do e.g.","Fragments":["`candidates"]},{"Key":"e.g. `candidates","Fragments":["|\u003e"]},{"Key":"`candidates |\u003e","Fragments":["select_anagrams`,","Enum.filter(\u0026anagram?(word,"]},{"Key":"|\u003e select_anagrams`,","Fragments":["but"]},{"Key":"select_anagrams`, but","Fragments":["that's"]},{"Key":"but that's","Fragments":["pretty","probably","probably","a","just","just","probably","being","very","my","mainly","probably","rather","fair","more","completely","already","a"]},{"Key":"that's pretty","Fragments":["minor.","close"]},{"Key":"Very nice.","Fragments":["Would","Have","The","It","I've","The"]},{"Key":"nice. Would","Fragments":["you"]},{"Key":"Would you","Fragments":["mind","agree","consider","mind","please","agree","be","like","consider","be"]},{"Key":"you mind","Fragments":["to","looking","posting"]},{"Key":"mind to","Fragments":["nitpick"]},{"Key":"to nitpick","Fragments":["the","on","with",":)","anymore.","once","other"]},{"Key":"nitpick the","Fragments":["examples?","hell"]},{"Key":"the examples?","Fragments":[":)"]},{"Key":" Coming","Fragments":["from"]},{"Key":"Coming from","Fragments":["Ruby"]},{"Key":"from Ruby","Fragments":["and"]},{"Key":"Ruby and","Fragments":["being","that's","I'm","didn't"]},{"Key":"and being","Fragments":["a","aware","introduced"]},{"Key":"being a","Fragments":["Elixir","total","teenager","giant","private","valid","truly","question,"]},{"Key":"a Elixir","Fragments":["novice"]},{"Key":"Elixir novice","Fragments":["and"]},{"Key":"novice and","Fragments":["FP"]},{"Key":"and FP","Fragments":["newbie,"]},{"Key":"FP newbie,","Fragments":["I"]},{"Key":"newbie, I","Fragments":["cannot"]},{"Key":"I cannot","Fragments":["judge","go","pass"]},{"Key":"cannot judge","Fragments":["other"]},{"Key":"judge other","Fragments":["people's"]},{"Key":"other people's","Fragments":["code","comments","\"bob\""]},{"Key":"people's code","Fragments":["yet"]},{"Key":"code yet","Fragments":[":-("]},{"Key":" I","Fragments":["like","think","like","don't","like","followed","have","like","think","would","tried","love","like","think","did","like","like","like","can't","would","think","like","like","probably","didn't","think","did,","think","think","think","think","like","was","agree","think","kind","know","like","would","like","like","looked","like","tried","can","like","didn't","understand","guess","don't","went","guess","agree","went","think","didn't","think","did","have","think","think","was","went","understand","did","see","like","think","like","do","don't","actually","like","think","really","just","think","hated","am","recognize","think","really","do","don't","actually","don't","can't","will","like","hate","extracted","also","forgot","am","like","think","usually","failed","used","would","could","see","thought","liked","didn't","prefer","agree","originally","can't","am","don't","actually","wanted","need","mean","think","can","find","like","initially","looked","submitted","agreed","suppose","discovered","think","love","also","also","have","wanted","was","thought","think","`do_like_it_better`","love","just","see","like","do","wouldn't","think","am","was","know","missed","think","would","think","added","notice","like","agree","don't","don't","like","agree","think","got","got","*think*","might","was","tracked","don't","don't","don't","aggree","think","like","really","have","can","agree","think","think","see","agree,","completely","do","was","submitted","thought","just","like","looked","don't","know,","think","think","was","set","feel","like","agree","agree","think","think","hadn't","think","think","like","was","personally","think","did","guess","also","would","like","recommended","wrote","love","must","think","think","believe","wanted","really","see","couldn't","debated","like","could","would","like","don't","managed","did","feel","also","like","personally","feel","like","think","toyed","submitted","tried","have","used","like","don't","was","am","think","know","reverted","agree;","would","am","really","think","was","originally","don't","am","was","like","like","don't","personally","like","think","haven't","find","don't","don't","like","wanted","thought","suppose","deemed","didn't","checked","like","dot","had","think","would","like","also","tried","don't","like","wasn't","used","like","don't","find","hadn't","don't","would","didn't","struggled","think","would","have","would","like","can","really","dig","would","disagree","would","also","couldn't","fiddled","think","don't","tried","originally","could","think","honestly","think","like","originally","think","usually","feel","like","have","may","did","originally","had","checked","feel,","had","think","like","like","am","like","agree","also","have","like","think","think","had","think","really","was","usually","believe.","like","pulled","wanted","found","find","find","went","agree","am","tried","like","expect","don't","think","originally","wouldn't","do","do","was","tried","don't","don't","surprised","saw","just","actually","can","did","was","guess","think","modified","guess","see.","think","don't","agree","think","would","want","don't","wonder","am","found","started","wanted","wouldn't","like","don't","think","think","second","haven't","missed","was","suggest","did","chose","tried","*know*","think","tried","like","think","finally","like","looked","could","guess","took","had","understand","assume","keep","will","was","was","would","don't","feel","like","don't","do","kinda","notice","assume","agree.","really","like","disagree,","think","did","was","only","see","somewhat","tend","thought","did","played","did","used","didn't","need","still","expected","like","wonder","can't","did","think","thought","started","may","personally","tend","used","was","definitely","like","think","don't","was","feel","used","may","think","don't","don't","thought","don't","don't","think","think","suspect","like","was","actually","liked","used","started","wouldn't","think","did","help","have","found","got","don't","agree","guess","don't","wanted","have","come","bet","think","would","meant","wasn't","was","had","didn't","really","used","don't","don't","fully","disagree","think","think","am","was","am","recognized","haven't","think","incorporated","was","don't","believe","guess","actually","also","didn't","initially","actually","think","like","think","looked","understand","think","feel","have","did","see","was","think","think","think","should","think","like","added","found","admit","think","just","can","find","hate","wonder","suspect","recently","may","fixed","couldn't","admit","expect","forgot","think","would","had","like","ended","am","am","think","tested","realized","know","tried","just","really","suspect","was","don't","think","thought","opted","think","re-extracted","opted","might","extracted","see","didn't","can't","*think*the","am","will","like","really","like","was","did","went","like","like","opted","don't","think","would","would","see","like","like","liked","will","suspect","think","actually","like","guess","can","saw","think","had","am","am","like","think","did","do","was","would","tried","wanted","like","like","like","strongly","*think*","started","see","like","didn't","changed","don't","think","made","couldn't","forgot","would","think","added","would","didnt","didn't","tweaked","wanted","get","really","really","really","didn't","like","like","like","haven't","have","don't","also","also","removed","like","like","second","second","have","went","think","realized","would","don't","thinks","don't","would","like","saw","left","refactored","see","just","managed","removed","like","updated","like","went","like","like","agree","took","did","see","do","think","figured","discovered","think","wish","realized","thought","had","would","think","realized","like","was","had","have","really","don't","like","personally","wouldn't","ended","am","didn't","did","decided","reviewed","didn't","guess","tried","think","decided","want","had","thought","suspect","agree","thought","had","think","think","think","removed","would","went","suppose","like","am","hate","refactored","don't","started","had","like","wrote"]},{"Key":"I like","Fragments":["the","your","it.","this.","the","this","the","the","that","it!","this.","this.","your","this","to","better.","how","the","the","it.","it.","the","this!","that","the","the","the","it.","it!","this","these:","about","how","the","to","the","the","the","how","how","the","it","the","this","it!","how","your","that","it","the","everything","this","the","this.","that","the","that","the","the","to","the","the","the","this.","that","the","the","how","the","this","the","that","it.","how","it","it,","the","the","that","crazymykl's","that","that","that","how","the","it.","this","`utterance`","the","the","the","how","it","this","your","it","the","the","it.","your","best","how","having","it","Clojure?","to","your","the","the","the","this","the","the","the","the","having","more","to","your","the","Enum.count/2","the","how","it!","the","to","it","the","it.","your","this","that","your","that","your","that","the","the","the","better","most","most","the","this","how","how","that","the","the","the","your","the","that","it","your","`silence?`","the","the","pipelines,","the","little,","the","the","the","how","keeping","the","the","the","the","that","your","the","the","the","it","the","it.","your","the","it.","that","that.","that.","the","it!","how","how","your","the","the","the","it!","your"]},{"Key":"like the","Fragments":["pipes.","descriptive","renaming","renaming","use","example","`\u003e","use","use","-1","names","use","logical","naming.","cond","pattern","declarative","use","names","import,","strategy","cond","\"is_XXX\"","names","`is_`","ends_with?","separation","abstraction","use","way","use","nested","name","pattern","`different_words?`","`Regex.scan`","pipeline","atoms","use","following","clear","use","body","presence","idea","way","`verse(n)`","multi-line","visual","only","`import`","only","collapsed","idea","shape","`\"\\n\"`","extra","short","name","function","fn","Regex.match?","way","PR.","reduce","reduce","way","indirection","`.`","abbreviations","data","use","lyrics","use","use","simplest","readability.","use","previous","way","improvement.","main","`ends_with?`","forward","idea","last","regex","two","`do_foo`","names","functions","easiest","use","idea","way","`clean`","name","looks","ternary","name","names.","way","suggestion","(slightly)","recursion","map/reduce","previous","thing,","flow","pipe-operator,","pipe-operator,","use","use","idea","use","way","use","best","extremely","fact","naming","use","look","fact","explaining","functions","just_letters","`|\u003e`","implementation","assumption","use","way","specs","succinct","macro","more","chaining"]},{"Key":"the pipes.","Fragments":["They"]},{"Key":"pipes. They","Fragments":["make"]},{"Key":"They make","Fragments":["the"]},{"Key":"make the","Fragments":["code","intent","test","3","code","code","intention","code","method","compiler","matches","`quiet?/1`","`silence`","logic","code","test","code","intent","#letters","doctest","tests","code","tests","changes","subject","hey","checks","`dna_to_rna`","predicate","predicates","code","`reduce`","tests","functions","example","purpose","3","3","reader","`silent?`,","anonymous","logic","code","relation","code","code","code","`\u003c\u003c\u003c`","code","computation","code","rules","function","code","`silent?`,","exception","clauses","code","regex","explanation","explanation","code","code","assert","code","explanation","`Dict.update`","helper","explanation","explanation","code","function","recursive","receiver","need","codes","flow","algorithm","code","code","explanation","explanation","meaning"]},{"Key":"the code","Fragments":["very","clearer?","much","more","might","more","the","more","common","to","better.","more","which","which","in","focused","reads","and","clearer.","is","in","to","clean?","more","never","would","when","a","in","would","the","clearer.","more","is","is","looks","is","is","here","that","points","were","better.","display","in","whether","in","I","fine","is","means","not","more","that","(like","less","more","does","more","harder","would","itself,","a","is","@morgan","in","as","considerably","because","to","simple","simpler.","got","to","easier","as","reflects","and","you","simpler.","a","look","easier","and","is","would","so","clearer.","that","so","significantly","(by","I","of","so","more","easier","consistent","look","is","called","assumes","a","a","in","doesn't","somewhat","work","is","as","for","block.","to","I","more","shorter.","short","more","is","read,","depends","to","is","that","to","implements","pretty"]},{"Key":"code very","Fragments":["clear!"]},{"Key":" The","Fragments":["'summerize'","update","idea","same","point","problem","use","\u003ccode\u003edef","main","same","downside","first","reduce","method","result","old","heart","`is_shouting?`","goal","reason","Erlang","main","`defp","markdown","pipeline","Elixir","one","`do_`","offending","nested","test","test","rubyist","function","construction","hey","Dict.update","[`Enum`](http://elixir-lang.org/docs/stable/Enum.html)","problem","intent","only","reuse","update","three","case","latest","newer","next","reject","pipe-rocket","math","`@camila","`rearranages_into?/2`","shorthand","character_set","only","rule","first","string","only","predicates","pipeline","way","way","extra","way","verse","code","`count`","reason","current","choice","general","`initial_counts`","`(\u00261","everything","only","downside","one-liner","one-liner","regex","parentheses","major","nitpicks:","way","biggest","idea","Unicode","idea","linebreak","`not_letters_or_yelling`","L12","awkward","trailing","parenless","Erlang","difference","`Regex.scan`","points","first","conditional","main","only","tests","`Dict.merge`","tests","`total`","downside","only","main","code","inter-dependency","zipper","regex","`\u0026(\u00261","point","tests","trick","intention","only","from_tree","`from_tree`","time","sorting","most","big","`Inspect`","reason","reason","problem","idea","idea","idea","good","problem","indentation","shorthand","if-statement","functions","call","thing","if","way","russian","`question?`","test","exercise","outer","OTP","`concat`","hardest","issue","issue","way","only","virtue","previous","perils","commented","Regexp","```","regular","`do_dna_rna_conversion/1`","`is_yelling?`","`is_shouting`","way","`@johnathan`","problem","only","third","idea","doctest","`sanitize/1`","`a","`contains_sequence?`","```contains/2```","```count```","relevant","transformation","private","questions,","README","`Enum.reduce`","`to_unicode_list`","`Enum.filter`","`match`","`sorted_str`","`anagram?`","`concat`","`p`","`count`","only","`stripPunctuation`","`stats`","`_make_comparable`","`normalize`","only","test","reason","bigger","smaller","main","trick","test","original","`A`","logic","first","character","test"]},{"Key":"The 'summerize'","Fragments":["method"]},{"Key":"'summerize' method","Fragments":["is"]},{"Key":"method is","Fragments":["hard","awesome.","overcomplicated,","O(n","necessary?","of","at","more","inefficient.","a","elegant.","(most","neat,","missing,","probably","explicitly"]},{"Key":"is hard","Fragments":["to","^^)","to","to"]},{"Key":"hard to","Fragments":["understand","read","tell,","read,","see","see","read","comprehend","parse","debug","let","find","get","follow","see","read/maintain/understand","put","follow.","read","comprehend.","name","talk","read.","read,","read.","read","understand","read"]},{"Key":"to understand","Fragments":["at","the","what","how","what","what","`filter`","the","than","since","what","and","with","for","at","it's","better.","as","because","and","that","why","why","what's","what","it","what","what","for","at"]},{"Key":"understand at","Fragments":["first","a","first."]},{"Key":"at first","Fragments":["sight","I","but","and","is"]},{"Key":"first sight","Fragments":["but"]},{"Key":"sight but","Fragments":["that's"]},{"Key":"that's probably","Fragments":["me","best","just","as","just","due","the","because"]},{"Key":"probably me","Fragments":["not"]},{"Key":"me not","Fragments":["understanding","reading","to"]},{"Key":"not understanding","Fragments":["idiomatic","the"]},{"Key":"understanding idiomatic","Fragments":["Elixir"]},{"Key":"idiomatic Elixir","Fragments":[":-)","to","to","to","is","is.","style,","code.","code"]},{"Key":" Neat!","Fragments":["I","Thanks","Probably"]},{"Key":"Neat! I","Fragments":["like"]},{"Key":"like your","Fragments":["implementation","is_whatever?","approach","line","indentation","suggestions,","code,","idea,","solution.","documentation","implementation","recursive","way","description","3","changes.","names","suggestion","solution","`silent?`,","oop","solution"]},{"Key":"your implementation","Fragments":["of","is","not","of","of","of","allows","of","type","of","anyway?"]},{"Key":"implementation of","Fragments":["count","nucleotide_counts...","\u003ccode\u003eis_nil?\u003c/code\u003e","pattern","count(text)","a","count(),","countWords","the","`concat`","count/1","the","the","the","Enum.map/2","`Enumerable`","`violates_triangle_inequality?`...","the","`sort`","`concat`","`count`?","`shouting?`,","this","concat","the","that","`count`,","`match`","```yelling?```.","the","`count`","`count/2`"]},{"Key":"of count","Fragments":["--"]},{"Key":"count --","Fragments":["I"]},{"Key":"-- I","Fragments":["did","think","like","would","think","think","hadn't","think"]},{"Key":"I did","Fragments":["a","in","not","not","not","it.","the","the","that.","in","drop","it","this","this","see","this","this","as","not","not","not","not","a","pretty","consider","this","this","notice","consider","spend","simplify","that","before,","such","in","in","a","with","totally","but","not","it","not","so","not","run","go","hit","in","it","some","it","actually","have","use","this","above,","the","know","so","learn","wrong","not","make","look","know","it.","not","this","it.","for","a"]},{"Key":"did a","Fragments":["recursive","nice","lot","version","contains.","stupid","new"]},{"Key":"a recursive","Fragments":["(re)implementation","solution","algorithm","function.","function","callback","function"]},{"Key":"recursive (re)implementation","Fragments":["in"]},{"Key":"(re)implementation in","Fragments":["the"]},{"Key":"in the","Fragments":["example.","cond","process,","new","\"hey\"","returned","`@jaylon`","last","future.","description.","pipeline?","readme,","code,","'all_caps?'","past","top","tests.","`is_a_question?`","provided","correct","spec,","@sarina","`silence`","requirements,","count","future","strings,","whole","list).","test","count","pipeline.","regex.","language","pipeline","erlang/elixir","beginning","previous","new","process","same","right","regex.","standard","strings","regex.","erlang","library","code?","wrong","comments,","lastest","doctest:","long","first","```shouting?```","do_*","tests","second","Enum","name","test","`Words`","tests","first","domain.","Elixir","order","list.","standard","beginning","pipeline.","previous","cases","language","`Teenager`","`silence`","`hey`","`cond`","docs","linguistic","elixir","regex","empty/silence","domain","tests","Elixir","`hey`","crowd.","`Enum`","```","exercise","strings","silence","perspective","book","next","second","argument","List","argument","docs.","source","`pair`)","`nucleotides_different?`","clause","third","code.","cond","domain,","documentation","right","module.","`cond`,","end.","pipeline.","past,","`is_all_caps?`","`count/1","middle,","test","helper","`is_all_caps?`","list","input,","first","versions","parameter","standard","```","```","function/method","next","pipeline","arguments","function","list.","phrase.","README.","list","standard","end.","domain","docs,","right","list","underlying","elixir","function","call","context","docs:","future.","condition","public","string","import","module","end","interest","habit","habit","parameters","second","`count`","second","function","list.","general","development","extra","`strip_country_code`","`validate`","String","code,","context","validate","binary","sentence.","absence","string","cond","slice","exercism","bigger","code","same","core","anagram?()","value","`List.foldr`'s","javascript","sing/2","future","future.","Elixir","case","declaration","main","top","passed","passed","right","character","amount","result","Elixir","stdlib.","file","style","first","ruby","[ruby","presence","sense","initializer","future.","next","`add`","order","case","test","erlang","sequence.","exercises.","next","nucleotide","Cell","underlying","event","Elixir","README.md:","code","pipeline,","loop","pipeline.","midst","regex","rest","spec","spec...","triangle","error","`anagram?`","getting","first","3","5","previous","standard","library","record","record","right","last","README","[mostly","grid","function","inner","sack,","exercism","hope","right","cond","example","exercise","square","exercise","stdlib,","list,","README","next","end","previous","readme","past","first","form","accumulator","`keep`","list,","functional","list","list","filter","version","exercise.","standard","process","recursive","same","list","tests","`String`","code","`cond`?","other","string?","Teenager","[String](http://elixir-lang.org/docs/master/String.html)","word","word","regex.","dict.","most","Nitpick","next","candidates","tuples,","expected","first","called","module","list","right","module.","code","mailing","mean","more","real","shouting","do...end","same","list","`Enum`","dictionary.","string?","same","string.","list","other","use","logic,","0.12.3-dev","original","docs,","right","ExDoc","sanitize/1","ExUnit","code.","Erlang","test","specification","tests","method","`largest_product`","code","language.","right","test","test","future,","interest","count","reverse","concat","domain","cond","last","count","ointment","case","README,","terminal.","higher","Programming","docs","meantime.","future.","guard","concat","first","doctest.","pretty","comments?","count","iteration","final","code.","implementation","very","`count`","Programming","elixir","previous","interest","link","Dict","naming,","base","top-level","catchall","language's","other","test","end","function","function","previous","list","test","list","docs.","unicode","result.","default","anonymous","previous","sublist","same","`next`","process","affirmative","docs","end,","\"getting","initial","concepts","conditions,","case"]},{"Key":"the example.","Fragments":[":-/"]},{"Key":" If","Fragments":["you","it's","you","I","you","something","you","you","I","you","the","you're","you","there","I","there's","you","you","I","you","you","you","you","you","you","you","you","I","you","you","your","you","I","it","you","your","you","the","you","you","I","I","I","you're","`concat`","you","you","you","you're","I","I","you"]},{"Key":"If you","Fragments":["take","come","would","want","went","prefer","moved","do","squint,","want","do","disagree,","try","have","want","moved","made","are","want","prefer","want","do","can","downcased","check","use","haven't","add","had","could","fed","think","have","want","use","have","do","feel","want","use","do","were","want","want","don't","want","think","didn't","think","allow","ensure","used","call","ever","try","see","didn't","don't","don't","write","want","know","want","append","are","could","want"]},{"Key":"you take","Fragments":["advantage","the","a"]},{"Key":"take advantage","Fragments":["of","of","of","of","of"]},{"Key":"advantage of","Fragments":["character","it's","`[","`flat_map`.","the","that","those","being","tail","them."]},{"Key":"of character","Fragments":["lists","lists?","property"]},{"Key":"character lists","Fragments":["being"]},{"Key":"lists being","Fragments":["enumerable,"]},{"Key":"being enumerable,","Fragments":["you"]},{"Key":"enumerable, you","Fragments":["can"]},{"Key":"you can","Fragments":["come","use","do","shorten","shorten","combine","use","really","use","take","change","make","remove","remove","completely","shrink","call","simplify","remove","get","visually","pattern","uses","use","treat","solicit","compare","see","read","determine","have","remove","use","use","actually","find","use","pipe","come","get","use","use","do","find.","separate","reuse","get","calculate,","do","use","continue","call","use","end","reduced","include","use","do","just","use","see","use","simply","replace","test","use","privatize","be","replace","use","easily","and","use","use","accomplish","call","reduce","use","call","define","put","see","use","determine","just","expand","write","use","use","simplify","use","give","just","configure","avoid","use.","do.","use","do","write:","use","prevent","see","write","make","use","see","solve","use","also","more","do","pattern","use","use","easily","make","use","use","write","use","do","use","be","first","use","use","comment","say","append","pre-compute","write","go","do","do","see","use","pass","share","write","use","delete","do","come","write","use","write","simply","write","delete","just","use","think","express","use","use","re-use","just","use","probably","kill","use","avoid","pattern","use","eliminate","use","easily","pull","make:","rewrite","try","replace","use","either","do","use","do","pass","substitute","use","assume","put","find"]},{"Key":"can come","Fragments":["up","up","in","up","inhandy.","up","up"]},{"Key":"come up","Fragments":["with","with","with","with","with","with","with","with","with","with","with","with,","with","with","with","with","with","with","with","with"]},{"Key":"up with","Fragments":["a","and","another","a","this","a","1","a","empty","anything","that","a","a","a","a","this,","an","a","a","\"cond\".","something","something","more","Process.whereis",":math.pow?","a","the","a","a","a","a","an","the","anything","a","a","comments.","a","a","a","a","a","to","is","a","a","a"]},{"Key":"with a","Fragments":["(imo)","separate","#capitalize","`_`","guard","quard","different","syntax","separate","way","certain","docstring","list","couple","monospaced","number","`case","`case`.","case","case.","doctest","question","question","descriptive","constraint","major","question","`?`.","`cond`.","clear","few","better","more","better","positive","negative","question",":otherwise.","name","custom","name","lot","couple","significant","function","question","good","cohesive,","single","`true`","`true`","similar","`hey`","single","code","bit_size","concurrent","German","German","non-ASCII","question","regex?","`Beer.Verse`","word","lesser","non-English","language","lot","regex","word","higher","range.","complexity","list","HashDict","function.","?","side","local","full","clear","keyword","version","nil","`Regex.scan`","large","question","`@santina`","much","hyphen","custom,","solution","lot","very","lot","backslash,","good","question","conditional","lot","good","trailing","certain","single","lot","single","way","lot","version","single","recursive","very","private","function","huge","`===`","more","`?`,","way","name","broader","question","bit","few","meaningful","quick","interrogation","lot","lot","few","more","timer","guard","very","new"]},{"Key":"a (imo)","Fragments":["more"]},{"Key":"(imo) more","Fragments":["concise"]},{"Key":"more concise","Fragments":["implementation","methods","and","way","and","way.","way","than"]},{"Key":"concise implementation","Fragments":["of"]},{"Key":"I think","Fragments":["this","I","I","the","having","about","`HashDict.update`","you","that","it","you","it's","there","I'll","it's","you've","if","it","that","that","either","it's","a","it","the","more","we","it","this","it","String.split","it","you","if","'?'","this","it","I","I'm","\"is_\"","that","we're","each","so.","this","that","that","this","it","the","it","aliasing","I","your","the","you","it","you","it's","that","it","you","you","you're","for","there","in","strictly-speaking,","I","this","this","about","I","this","it","using","it","it","the","you","it's","`String.codepoints`","a","this","I","that","it's","you're","I","it",":)","it","it's","you're","it's","you","it","using","would","you","`split_words`","it's","about","you","I","you","`dict`","@rasheed","the","this","your","the","I","this","there's","it's","it's","it's","\"silent?\"","you're","that","it","arguments","it","it","that","it's","the","that","that","it","that's","if","in","this","I","this","it","that","`Regex.scan`","it","the","that","that","that","idiomatic","you","the","that","the","Regex","I","reads","it's","you","shorthand","it","`Regex.scan`","I","it","I","the","this","it","this","I","the","you're","it","this","this","it","I","makes","it's","what","the","that","that","that","you","this","the","that","is","you","that","might","for","this","about","I","you","it","is","I","it","that's","those","my","your","it","you","it","reduces","putting","you're","`segment`","the","line","it's","that","you","I'll","the","this","we","it's","that","you'll","this","the","I","the","the","I","using","it","you're","it's","the","the","this","you're","that's","I","it","it's","it's","using","this","reusing","it","you","of","it'll","a","this","it","perhaps","the","it's","it's","you","the","what","I","it","regex","its","you're","special","this","I'll","I","that","I","I","it","snake_case","`split`","it","it's","I'm","get_counts","this","I","what","it's","you'll","that","I","you","it","the","I","list","it's","what","this","I","having","(it's","sufficiently","the","so,","it's","I","it","you","the","I","I'm","it","maybe","I","these","the","after","I","I","I","I'll","I","it","it's","it","the","that'll","`[head|tail]`","you've","you","`:alpha:`","the","that","of","we","I","I've","defining","I","it","the","using","you","Regex.scan","the","the","line","it","you","about","you","it","trying","we're","this","I","this","I","it","your","I","is","the","`silent?`","it's","this","this","maybe","that","is","the","about"]},{"Key":"think this","Fragments":["reads","will","is","is","one's","is","is","sort","is","would","looks","Regex","is","is","even","is","might","version","version","is","looks","one","will","looks","looks","may","exercise","looks","one","is","straightforward","looks","looks","use","way","was","is","is"]},{"Key":"this reads","Fragments":["better!","a"]},{"Key":"reads better!","Fragments":[":)"]},{"Key":" I'm","Fragments":["quite","curious:","struggling","out","complete","sure","the","looking","interested","more","not","thinking","sure","actually","having","having","not","not","flattening","definitely","just","guessing","tempted","using","tempted","not","not","interested","curious:","a","not","really","sure","not","just","not","not","not","pretty","still","still","not","making","with","novice","new","pretty","figuring","liking","new","still","not","not","trying","getting","going","being","not","not","quite","also","about","having","actually","not","assuming","curious","by","still","still","aware","not","a","sure","actually","not","pretty","also","aware","interested","pretty","curious","going","not","pleasantly","not","not","not","not","not","curious","not","not","probably","not","still","working","much","a","sure","not","still","having","not","also","not","still","also","guessing","mainly","not","submitting","wondering","not","not","guessing","sure","going","excited","having","curious","just","not","not","not","just","brand","sure","thinking","still","not","not","sure","in","new","really","curious","trying","guessing","stuck,"]},{"Key":"I'm quite","Fragments":["lost","new","happy"]},{"Key":"quite lost","Fragments":["here."]},{"Key":"lost here.","Fragments":["Could"]},{"Key":"here. Could","Fragments":["please"]},{"Key":"Could please","Fragments":["give"]},{"Key":"please give","Fragments":["me"]},{"Key":"give me","Fragments":["a","an","a"]},{"Key":"me a","Fragments":["hint?","way","syntax","while","whole","compiler","few","while","bit,","little","better","while","bit","bit","little","bit"]},{"Key":" This","Fragments":["looks","looks","is","is","is","is","is","is","makes","looks","isn't","wasn't","one's","code","is","is","was","might","could","could","is","is","looks","is","is","looks","brings","is","is","is","is","looks","looks","is","is","is","is","looks","is","seems","looks","looks","is","passes","is","is","is","is","just","works","looks","implementation","is","looked","is","is","looks","is","looks","is","is","doesn't","looks","looks","looks","has","looks","is","is","is","is","looks","is","looks","looks","else/if","is","looks","will","still","is","is","looks","most","one","is","first","is","looks","looks","looks","looks","code","may","feels","is","is","is","was","will","one","is","works,","is","is","is","is","is","is","second","pipe","exercise","feels","looks","actually","exercise","time","is","time","time","time","looks","is","is","is","confuses","is","answers","feels","seemed","exercise","doesn't","is","doesn't","is","is","exercise","style","is","is","is","has","kind","exercise","version","looks","is","exercise","exercise","looks","is","is","looks","one","looks","is","is","removes","extracts","looks","has","looks","seems","looks","looks","is","is","one","is","seems","is","is","is","has","is","is","is","line","is","all","code","exercise","problem","looks","is","exercise","exercise","is","is","will","is","is"]},{"Key":"This looks","Fragments":["good","a","pretty","very","nice!","nearly","good!","pretty","really","good!","pretty","awesome!","good.","good.","really","great!","good","way","good.","good!","really","quite","good.","good!","overgeneralized","much","good.","pretty","pretty","good,","good,","good!","like","great.","great","really","great..."]},{"Key":"looks good","Fragments":["to","to","to","to","in","to","to","to","to","to"]},{"Key":"good to","Fragments":["me!","me!","think","me.","me.","me.","me.","me.","me.","me.","me.","me.","me.","my","get","convert.","know.","me.","know.","make","me.","me.","me,","know.","me","me."]},{"Key":" Awesome!","Fragments":["Thanks","It's","I","I'll"]},{"Key":"Awesome! Thanks","Fragments":["for"]},{"Key":"Thanks for","Fragments":["being","the","sharing","your","your","the","the","spotting","the","the","the","going","the","the","really","the","the","pointing","the","the","the","the","the","investigating.","your","pointing","pointing","the","the","the","the","feedback.","letting","the","bringing","the","your","the","the","the","the","the","the","the","the","the","the","the","following","your","the","comment.","the","the","the","following","the","the","the","the","letting","the","the","the","the","the","the","the","the","looking","the","your","taking","the","comments","the","the","the","the","pointing","the","your","the","this.","the","the","the","the","the","the","throwing","that","the","the","the","the","the","the","the","the","the","the","the","the","the","the","comments","the","the","the","you","your","the","the","finding","the","those.","the","the","the","straightening","pointing","the","the","the","the","all","the","the","detailed","the","the","the","the","that!","the","the","all","your","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","submitting","helping","your","the","the","the","all","the","the","the","the","all","responding!","all","the","your","the","your","the","the","explaining","the","the","the"]},{"Key":"for being","Fragments":["brave","inconsistent"]},{"Key":"being brave","Fragments":["enough"]},{"Key":"brave enough","Fragments":["to"]},{"Key":"enough to","Fragments":["try","quite","claim","elixir","feel","warrant","do,","make","only","me","include","merit","support","write","pass","help,","not","produce"]},{"Key":"to try","Fragments":["out","my","the","it","a","to","to","not","to","these","implementing","it","with","it.","out","rewriting","it","messing"]},{"Key":"try out","Fragments":["elixir!","your","guard"]},{"Key":"out elixir!","Fragments":[";-)"]},{"Key":" Check","Fragments":["out","out","out","out","out","out","out","out","out","out","out","out","of","out","out","it"]},{"Key":"Check out","Fragments":["the","`Regex.scan`","\u003ccode\u003econd\u003c/code\u003e.","\u003ccode\u003econd\u003c/code\u003e.","\u003ccode\u003eHashDict.update/4\u003c/code\u003e","\u003ccode\u003eHashDict.update/4\u003c/code\u003e","`Enum.map_join`,","iteration","how","\u003ccode\u003eString.upcase/1\u003c/code\u003e","Enum.reduce","the","\u003ccode\u003eList.foldl/3\u003c/code\u003e","the","`List.zip/1`",".ends_with","functions","also","`List.zip/1`","`HashDict.update/4`","also","`List.zip/1`"]},{"Key":"out the","Fragments":["`cond`","logic","various","tests,","purpose","implementation","pattern","window.","`[]`","`|\u0026gt;`","new","memoization","[string","`filter`/`exclude_similar`/`different?`","less-than","two","downcase/codepoints/sort","docs","conditions","tests","areas","pipeline","different","separate","sort","year-on-planet-relative-to-earth","source","list","nil","syntax","conditionals","common","code.","specific","`Enum.reduce`","punctuation.","base","tests","Enum.into/3","ones","codepoints","`end`.","anagrams","code","expressions","parenthesis"]},{"Key":"the `cond`","Fragments":["form,","block","block","block","clauses.","down","patterns"]},{"Key":"`cond` form,","Fragments":["which"]},{"Key":"form, which","Fragments":["you"]},{"Key":"which you","Fragments":["can","could","could","can","don’t","might","might","can"]},{"Key":"can use","Fragments":["to","question","else","functions","String.last([phrase)","instead","`Regex.scan`","in","keyword","`defp`","`\u0026amp;M.f/a`","`\u0026amp;update_frequency/2`","the","a","`defp`","`?`","a","a","one-liner","that","`String.codepoints`","the","a","some","private","that","`Kernel.to_char_list`","so","for","`length(list)`","some","`some_range.first`","the","`Enum.map`","the","`defp`","unicode","`Enum.count(collection,","private","(i.e.","a","a","`Enum.map_join`","`[any]`","`defp`","`length`","any","the","whatever","`Enum.to_list(collection)`","Unicode","`[head","captures","`/\\p{L}/`","`/\\p{L}/`","head","guards:","the","`\\P{L}`","`acc`","\"or\"","the","unicode","`append`","some","Elixir's","a","the","to","the","`reduce/3`","the","the","Enum.into/3","4","Enum.count/2","a","the","the","`[h","the"]},{"Key":"use to","Fragments":["clean","improve","easily","split","split","good","your","do"]},{"Key":"to clean","Fragments":["up","things","this","this","up","up"]},{"Key":"clean up","Fragments":["your","the","nested","line","match","unwanted","the","the","the","the"]},{"Key":"up your","Fragments":["conditionals."]},{"Key":"your conditionals.","Fragments":["(see"]},{"Key":"conditionals. (see","Fragments":["http://elixir-lang.org/crash-course.html)"]},{"Key":" Character","Fragments":["lists","category"]},{"Key":"Character lists","Fragments":["(single"]},{"Key":"lists (single","Fragments":["quoted)"]},{"Key":"(single quoted)","Fragments":["are"]},{"Key":"quoted) are","Fragments":["enumerable,"]},{"Key":"are enumerable,","Fragments":["so"]},{"Key":"enumerable, so","Fragments":["you"]},{"Key":"so you","Fragments":["can","could","could","can","could","know,","could","are","don't","need","could","don't","end","could","don't","can","can","want","don't","can","can","need","still","can","can","can","can","tend","can","must","didn't","should","could","don't"]},{"Key":"can do","Fragments":["something","this","those","`def","that.","this:","`?T`","this","the","that","with","it","what's","pattern","`r","this:","this:","`Enum.map(\u0026hd/1)`","string","quite","it","this","is","line"]},{"Key":"do something","Fragments":["like:","like:","like","more","that"]},{"Key":"something like:","Fragments":["`Enum.map"]},{"Key":"like: `Enum.map","Fragments":["'abcd',"]},{"Key":"`Enum.map 'abcd',","Fragments":["fn(n)"]},{"Key":"'abcd', fn(n)","Fragments":["-\u003e"]},{"Key":"fn(n) -\u003e","Fragments":["..."]},{"Key":"-\u003e ...","Fragments":["end`","end`)","end`","end)`."]},{"Key":"... end`","Fragments":["to","in"]},{"Key":"end` to","Fragments":["generate","just","just"]},{"Key":"to generate","Fragments":["the","the","a","the","the","them.","the","that"]},{"Key":"generate the","Fragments":["list","responses","phrases.","list","predicates.","function","list"]},{"Key":"the list","Fragments":["of","of","to","in","into","or","might","of","stuff.","back","comprehension.","natively.","comprehension","beforehand","to","representation","of","transform","and","contains","version","of","comprehension","without","comprehension","comprehension.","you","of","module.","and","of","upon","when","sorted","of","a","is","a","once","of","at","of","trivial.","to","a","is","alphabetically","is","a","a","lengths","and","it","of","of","comparison","of","of","once,","(first","of","thing","before","a","a","works"]},{"Key":"list of","Fragments":["tuples","words","all","words.","single","binaries,","words.","individual","words","lists.","elements","words.","chars,","proper","lists","valid","matches","integers","binaries)","lists","lists\"","lists","list,","cases","things","functions.","characters.","words,","chars.","words","n","integers","codepoints","chars","words","list","words,","the","letters.","functions","bytes.","characters","letters","pairs","lists","nits","lists","strings","things","edges","10","1000","1000","500","matches.","matching","10","1000","1000","500","sides","lists.","characters.","lists,","lists","mapped","characters","scores","possibly","100","exercises","primes","a","a","small","small","allergens.","tuples","lists\"","students,","the","lists","many","many","small","words.","words","graphemes.","words.","words","words.","nucleotides","codepoints.","small","tuples,","simple","couples","lists,","captures,","matches.","small"]},{"Key":"of tuples","Fragments":["and","when"]},{"Key":"tuples and","Fragments":["then"]},{"Key":"and then","Fragments":["build","negate","you","having","you","you","you","pattern","a","a","`put`ting","`Enum#filter`","Enum.foldl","splitting","check","oddly","turn","rejoining","I","had","got","`flatten`","I","use","you","compare","validating.","you","I'll","putting","convert","let","use","to","the","split.","right","split","doing","just","reversing.","only","just","reversing.","find","compare","check","reversing","you","reject","making","splitting","splitting","using","I","use","to","map","you","perform","the","using","thrown","comparing","it"]},{"Key":"then build","Fragments":["your"]},{"Key":"build your","Fragments":["HashDict"]},{"Key":"your HashDict","Fragments":["from"]},{"Key":"HashDict from","Fragments":["that."]},{"Key":"I don't","Fragments":["think","know","know","understand","know","think","know","like","feel","know","know","believe","understand","agree","yet","see","think","think","think","think","flatten","think","know,","think","think","expect","think","agree.","like","care","think","know","follow","end","really","think","know","see","think","do","know","even","know","really","think","like","know","like","think","like","want","like","have","have","think","think","think","think","want","know","use","think","like","think","know","have","know","want","see","know","really","know","know","have","mean","think","think","think","really","expect","think","yet","think","know,","get","like","like","like","like","like","like","think","tend","think","know","need","know","like,","see","think","have","really","think","see","need","want","need","think","know","understand","know,","think","see","match","have","see","think","really","really","like","see","like","care","want","really","use","think","know","have","really","like","think","have","think","have","have","know","recall","know","really","like","see","like","particularly","feel","like","think","think","mind","have","want","know","know","have","mind","know","fully","know","think","understand","think","think","really","see","know","think","agree","quite","think","know","think","love","really","think","like","see","have","think","think","think"]},{"Key":"don't think","Fragments":["I","```something","there's","so.","that","List.flatten/1","it","it's","that","that","you","this","you","the","it's","you","that's","recursion","`Enum.map_join/3`","Elixir","that","it's","the","the","I'm","it's","that","it","so.","the","list","they're","I","you're","folding","you","your","the","it's","it","there's","that's","so.","it's","a","you","the","I","you"]},{"Key":"think I","Fragments":["am.","submitted","jumped","got","made","figured","went","probably","like","saw","found","a","tried","like","could","had","stopped","discovered","used","might","got","like","did","interpreted","like","use","want","solved","would","heard","know","didn't","know","was","may","have","want","need","want","did","will","still","like","actually","misunderstood","still","have"]},{"Key":"I am.","Fragments":["I"]},{"Key":"am. I","Fragments":["thought"]},{"Key":"I thought","Fragments":["I","about","about","that","about","\"is_\"","assigning","about","do_stuff","about","to","there","about","you","briefly","it","I","I","it","usage","about","I","the","I","those","about","the","it","they","part","I","I","you","passing","somebody","this","the","no","they","this","I'd","because","I","types","of","would","line","it","the","a","about","it","it","that","that"]},{"Key":"thought I","Fragments":["had","read","was","better","might","should","was","looked","could"]},{"Key":"I had","Fragments":["pushed","used","that","to","something","something","`respond_to","to","seen","ideas","to","to","the","some","to","been","a","a","a","originally","tried","submitted","a","to","to","to","to","mentioned","to","set","a","this","was","to","to","not","the","to","a","doubts","been","a","non-ascii","the","to","a","interpreted","one","the","to","a","to","it","a","problems","an","to","seen","read","already","a","used","to","misinterpreted","to","just","the","almost","issues","a","to","actually","some"]},{"Key":"had pushed","Fragments":["up"]},{"Key":"pushed up","Fragments":["more"]},{"Key":"up more","Fragments":["stuff."]},{"Key":"more stuff.","Fragments":["I"]},{"Key":"stuff. I","Fragments":["guess","kept","also","apologize","think"]},{"Key":"I guess","Fragments":["that","I","that","I","it's","this","I","this","is","I","I","for","I","a","in","I","I","I","it","not","I","I","I","you","I'm","it's","I","I'm","the","you","I","you're","that's","it's","`result`","you","I","it","I","not!","the"]},{"Key":"guess that","Fragments":["I","in"]},{"Key":"that I","Fragments":["hadn't....","would","don't","could","would","know","want","think","suggested","think","really","see","think","could","have","don't","could","made","saw","find","didn't","no","took.","define","didn't","couldn't","implemented.","had","was","like","don't","like","need","like","wrote.","find","should","know,","tend","did","almost","could","see","could","don't","feel","hit","didn't","don't","mean","did","have","shouldn't","didn't","can't","mean","am","have","have","don't","submitted","really","know.","know.","think","look","should","can","couldn't","used","look","could","know","have","can","can","don't","didn't","assume","think","can","didn't","am","saw"]},{"Key":" Right","Fragments":["on!","now,","on!","you"]},{"Key":" Dude,","Fragments":["that's"]},{"Key":"Dude, that's","Fragments":["sweet."]},{"Key":" No","Fragments":["I","I","bad","problem!","more","that",",",",","idea","if","idea","need","problem,","function","prob,","map/reduce","problem."]},{"Key":"No I","Fragments":["hadn't","prefer"]},{"Key":"I hadn't","Fragments":["thanks!","seen","known","considered","thought","thought","heard","seen","learnt","learnt","touched","considered","seen","considered","checked","thought","learned"]},{"Key":"hadn't thanks!","Fragments":["*updating*"]},{"Key":" Love","Fragments":["it.","the","the","it!","this","the"]},{"Key":" How","Fragments":["about","about","about","about","about","does","about","about","would","about","to","about","about","about","about"]},{"Key":"How about","Fragments":["\"candidates\"?","sentence","hiding","`HashDict.update(dict,","combining","private","making","now?","moving","stripping","something","this?","extracting","simplifying"]},{"Key":" Yeah,","Fragments":["I","much","the","one","since","defensive","I","I","this","me","I've","I","I","I'd","very","except","if","the","I","I","I'm","passing","the","the","not","I","I","I","I","that's","exactly.","I","there","I","they're","the"]},{"Key":"Yeah, I","Fragments":["agree.","started","should","noticed","trying","was","was","just","should","didn't","can","saw","wasn't","suppose.","honestly","like","figured"]},{"Key":"I agree.","Fragments":["It","Don't","Not"]},{"Key":"agree. It","Fragments":["struck"]},{"Key":"It struck","Fragments":["me"]},{"Key":"struck me","Fragments":["as"]},{"Key":"me as","Fragments":["a","a","a","more","I","a","a"]},{"Key":"as a","Fragments":["bit","way","first","pipeline","`@ford`","premature","module","default","different","list,","string,","string","parameter,","conditions","separate","string","potential","function","list","unified","parameter","second","very","format","function","genuine","function","parameter.","reader,","special","list.","fit.","possible","validation","reader","good","real","name.","cherry","point","method","module","whole,","way","one-liner","general","lot","result","result.","constant","second","String","single","valid","sign","\"larger\"","public","plain","one-liner,","problem.","validation","pipeline","private","parameter.","`filter`","function","save","good","`case`.","word","parameter","specific","special","function","fold","variable","regex","result","user","private","bit","result","new","convention,","parameter,","short","human","question","shouting),","kind","long","map/reduce,"]},{"Key":"a bit","Fragments":["off","complicated","unnecessary","clearer.","clearer.","of","more","more","more","and","more","about","more....","more","complicated","excessive","with","ashamed","more","of","--","of","better","more","of","more","terse","cleaner","of","more","simpler","inconsistent","inconsistent","over","redundant,","more","confusing,","more","to","over-used","more","difficult","long","cleaner","of","without","of","bewildered","heavy","faster","better,","by","hard","cleaner.","about","and","too","odd","simpler","more","in","expensive.","confusing:","of","overkill","better","involved","more","more","shorter","more","of","confusing.","workaday,","too","overkill","squished","weird.","using","more","confused","surprised","better.","ugly.","complicated","proud","strange.","odd","as","with","more","more","more","more","weird","reminiscent","allergic","scary,","misleading","on","better","more","too","more","more","less","by","too","more","complex","without","annoyed","nicer","more","about","rusty","faster","monolithic.","curious","of","raw.","more","of","by","verbose","nicer.","to","weird,","inconsistent","more","about","confusing.","to","confusing","more","of","weird.","more","harder","tricky","to","strange","too","weird.","to","as","more","of","and","confusing","to","of","with","to","of","of","more","wasteful.","with","of","heavy","faster,","clunky","arbitrary","more","clumsy,","of","heavy,","of","of","odd","more","in","complex","different,","to","about","to","about","about","of","simpler","to","about"]},{"Key":"bit off","Fragments":["but"]},{"Key":"off but","Fragments":["I"]},{"Key":"but I","Fragments":["wasn't","think","couldn't","dont","wanted","think","would","haven't","still","see","think","cannot","think","might","think","think","think","couldn't","happen","believe","wasn't","called","do","couldn't","couldn't","am","find","think","feel","consider","guess","figured","think","suppose","like","just","had","like","pushed","don't","get","took","think","think","think","would","find","spent","think","may","can","wanted","think","don't","think","think","think","could","could","think","feel","agree","couldn't","may","don't","think","really","think","think","not","think","couldn't","couldn't","like","think","think","don't","kept","don't","think","don't","am","suspect","can't","can","think","feel","must","couldn't","get","could","wasn't","assume","think","agree.","can't","kind","couldn't","couldn't","don't","think","plan","thought","converted","feel","decided","find","guess","don't","couldn't","don't","didn't","can't","think","just","still","can","can","didn't","didn't","do","don't","wouldn't","am","ported","think","thought","think","have","like","understand","feel","haven't","think","did","would","like","like","usually","wanted","asked","wasn't","think","just","may","don't","can't","like","figured","don't","feel","had","wanted","guess","don't","hate","think","wasn't","think","don't","really","wasn't","didn't","think","kind","didn't","could","was","didn't","think","didn't","generally","fear","haven't","have","think","am","personally","don't","haven't","tried","suspect","couldn't","don't","like","could","think","believe","didn't","doesn't","did","thought","suppose","think","will","was","thought","still","see","couldn't","had","got","do","think","personaly","wanted","think"]},{"Key":"I wasn't","Fragments":["sure","sure","not","confident","aware","thinking","clear.","sure","aware","really","too","aware","focused","sure","sure","familiar","totally","sure.","clear","super","sure","sure","sure","sure","happy"]},{"Key":"wasn't sure","Fragments":["what","about","if","exactly","if","if","what","how","if","if"]},{"Key":"sure what","Fragments":["to","you're","I","the","the","the","you","exactly","is","to","that","you","the","you","the","I","that"]},{"Key":"what to","Fragments":["replace","do","do.","do","do","expect."]},{"Key":"to replace","Fragments":["it","\"beer\"","\"fn","`roman","everything"]},{"Key":"replace it","Fragments":["with."]},{"Key":" Perfect","Fragments":["IMO!","IMO.","IMO"]},{"Key":"Good point,","Fragments":["thanks!","although","I","the","got","I","thanks"]},{"Key":" Are","Fragments":["you","there","you","you","silence?/question?/shout?","you","you","you","you","there"]},{"Key":"Are you","Fragments":["stuck?","familiar","aware","familiar","familiar","familiar","familiar","sure","converting","sure","a","helping"]},{"Key":" Ah,","Fragments":["I","I","your","that's","nice;","you're","thanks","I","hadn't","thanks!","indeed,","cool.","nice!","thanks.","now","cool.","cool!","cool.","I","thank","I","cool.","yes,","yes,","cool.","yes.","yes,","nice..","yeah,","good","gotcha.","gotcha.","I","that's","of","thanks!","I"]},{"Key":"Ah, I","Fragments":["now","was","most","see.","see","like","did"]},{"Key":"I now","Fragments":["get","abuse"]},{"Key":"now get","Fragments":["what"]},{"Key":"get what","Fragments":["you","you"]},{"Key":"what you","Fragments":["mean...","think.","meant,","mean","pass","meant?","have","mean","were","said.","are","are","do","think?","like!","mean","did","need.","might","don't","think","both","think","can","want?","want.","think.","have","said","have","mean","consider","mean","consider","want","mean.","want","don't","don't","did","think.","had","mean,","want","don't","don't","do","might","suggested),","want","don't","mean","don't","do","mean,","were","think.","think.","think.","think.","have"]},{"Key":" Nice!","Fragments":["I","I","I'm","Looks","I","One","I","You","But","updated","I","This","Looking","I","Just"]},{"Key":"Nice! I","Fragments":["like","like","like","really","would","think"]},{"Key":"the descriptive","Fragments":["method","function"]},{"Key":"descriptive method","Fragments":["names."]},{"Key":" Hrm,","Fragments":["perhaps"]},{"Key":"Hrm, perhaps","Fragments":["sentence"]},{"Key":"perhaps sentence","Fragments":["for"]},{"Key":"sentence for","Fragments":["input"]},{"Key":"for input","Fragments":["and","`\""]},{"Key":"input and","Fragments":["nothing?","output.","shifting","I","explain","walking","String.downcase(input)"]},{"Key":"and nothing?","Fragments":["for"]},{"Key":"nothing? for","Fragments":["empty?"]},{"Key":"Are there","Fragments":["better","any","names","names"]},{"Key":"there better","Fragments":["names"]},{"Key":"better names","Fragments":["for"]},{"Key":"names for","Fragments":["\u003ccode\u003eempty?\u003c/code\u003e","nil","empty?","empty?","your","both","the","the","your"]},{"Key":"for \u003ccode\u003eempty?\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eempty?\u003c/code\u003e and","Fragments":["\u003ccode\u003eupcase?\u003c/code\u003e"]},{"Key":"and \u003ccode\u003eupcase?\u003c/code\u003e","Fragments":["that"]},{"Key":"\u003ccode\u003eupcase?\u003c/code\u003e that","Fragments":["describe"]},{"Key":"that describe","Fragments":["the"]},{"Key":"describe the","Fragments":["intent","implementation","case","transformation.","behavior","Teenager,","greeting."]},{"Key":"the intent","Fragments":["better?","and","clear.","of","of","of","of","is.","of","of","is","was"]},{"Key":" 2","Fragments":["things,"]},{"Key":"2 things,","Fragments":["both"]},{"Key":"things, both","Fragments":["to"]},{"Key":"both to","Fragments":["do","follow","a"]},{"Key":"to do","Fragments":["with","is","the","that","that.","this","it","quite","it","it.","that.","that","this","the","that,","on","that,","with","the","it","this","the","that...","that","it","`fn(potential_match)","with","it,","(and","that","a","some","that","the","this?","it","this,","either","that","that.","it","that","exactly","this","this","this","it","that.","it","this","the","this,","a","the","a","that","with","more","with","it","all","it","that.","it,","it","pattern","a","the","it.","what","the","this","this","that","with","with","it.","a","explicit","the","so.","that,","with","the","something","are","with","things","more","so","with","it.","with","it","that","a","any","to","it,","`Stream.map(\u0026hd/1)","for","`filter`,","this","this","with","`(a","with","both","it","this.","to","with","what","ugly","an","it","something","the","it","it","such","manual","as","raw","all","the","chunks","a","this.","this","with","a","the","with","it","this"]},{"Key":"do with","Fragments":["naming.","the","the","my","the","`x","whether","the","`Enum.reduce`.","the","the","`Inspect.Algebra`","not","the","adjacent","the","a","a","a","the","the"]},{"Key":" Might","Fragments":["there","consider","\u003ccode\u003eEnum.reduce\u003c/code\u003e"]},{"Key":"Might there","Fragments":["be"]},{"Key":"there be","Fragments":["a"]},{"Key":"be a","Fragments":["better","good","little","bit","more","good","part","good","bit","matter","little","descriptively","better","lot","one-liner","little","multi-clause","moot","box","better","matter","list","1024","good","named","more","better","better","good","specific","friend","bit","good","bit","little","part","sign","speech","little","good","good","little","more","lot","cleaner","true","\"Grownup\"","comparison","bit","little","@vita","good","test","bit","math","letter","regex","long","good","little","big","cast","record","bit","small","little","favored","lot","fairly","word","problem","great","bit","very","little","word","new","bit","way","better","way","little","little","good","bit","little","way","cleaner","tiny","struggle","lot","shorter","better","way","one-liner,","simple","separate","nicer","nicer","more"]},{"Key":"a better","Fragments":["name","name,","way","way","function","way","way","story","word.","way","name","name","control","way","name","match","way","name.","choice.","way","version","way,","name","way.","parameter","domain","name","name","Regex","choice","way","way","way","way","name?","name","solution","way","fit","way?","way","way","way","way","way","solution.","choice.","solution","explanation","solution","way.","idea","way.","way","way.","way,","way","way","`String.t`","way.","name","way.","way","way","way","way.","way.","solution","functional","name","solution","way,"]},{"Key":"better name","Fragments":["for","than","for","to","for","--","for","for","for","would","than"]},{"Key":"name for","Fragments":["\u003ccode\u003eempty?\u003c/code\u003e","\u003ccode\u003einput\u003c/code\u003e?","this","a","the","that","your","the","the","your","the","one","`words/1`","me","some","this.","that","`sort_chars`","the","this","what","it.","the","the","a","the","the"]},{"Key":" Is","Fragments":["there","there","the","there","there","there","using","there","there","there","this","there","that","the","the","the","the","there","your","there","there","the","the","the","there","there","there","this","it","it","a","\"10!\"","\"something_with_underscores\"","there","`thymidineToUracil`","there","there","the","it","there","there","this","there","it","this","there","there","there","there","this","there","shouting"]},{"Key":"Is there","Fragments":["a","a","much","a","a","a","a","a","a","some","a","another","a","a","a","a","any","any","a","a","a","a","a","a","other","a","a","a","a","an","a","a","any","something","a","a","a","any","any","a","any","a","a","a","a","a","an","any","any","a","a","any","some","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a"]},{"Key":"there a","Fragments":["better,","way","reason","way","way","particular","reason","reason","way","reason","better","more","need","need","way","reason","better","way","place","more","simpler","way","way","way","way","way","reason","reason","performance","way","built-in","more","way","better","way","reason","way","way","test","character","name","clearer","reason","way","better","way","better","way","particular","way","similar","reason","specific","different","way","way","resource","way","way","way","name","better","way","reason","way","better","more","performance","way","`\u0026`","way","function","better"]},{"Key":"a better,","Fragments":["more"]},{"Key":"better, more","Fragments":["descriptive","idiomatic"]},{"Key":"more descriptive","Fragments":["name","variable","variable","names","of","name","or","name"]},{"Key":"descriptive name","Fragments":["for","for","(the"]},{"Key":" I've","Fragments":["just","made","just","been","added","also","updated","updated","removed","only","just","used","tried","just","been","worked","had","also","changed","send","also","taken","been","seen","used","gone","contemplated","gone","seen","chosen"]},{"Key":"I've just","Fragments":["added","taken","realised","had","started","learned","gotten"]},{"Key":"just added","Fragments":["and","`String.downcase`","busywork"]},{"Key":"added and","Fragments":["submitted"]},{"Key":"and submitted","Fragments":["that.","the","a"]},{"Key":"submitted that.","Fragments":["It's"]},{"Key":"that. It's","Fragments":["a"]},{"Key":"It's a","Fragments":["good","neat","lot","bit","bit","*function","private","personal","little","matter","shifty","similar","bit","bit","pretty","good","good","cool"]},{"Key":"a good","Fragments":["habit","idea","balance","idea","use","idea","candidate","deal","question,","variable","idea","change.","idea!","idea","argument","way","reference","solution,","balance","idea?","use","idea","time","point.","way","proxy","feature","feeling","name.","bit","point","solution,","alternative","addition,","habit","map-reduce","choice;","idea","candidate","sacrifice","way","name","idea","reason","sign","name","idea","idea.","exercice.","night's","feel","idea.","case","tip.","thing","reason","enough","fit","choice.","justification","idea","habit","habit","idea.","idea.","rule","choice.","reason","mental","idea,","chance","one.","name","idea","idea","way.","change","reason.","solution.","idea","flow","pattern","combination","idea","idea.","idea,","intro","idea.","habit","alternative:","idea"]},{"Key":"good habit","Fragments":["to","to","to","to","to"]},{"Key":"habit to","Fragments":["get","form,","put","take","get","get"]},{"Key":"to get","Fragments":["into,","the","you","rid","simple","up","the","rid","rid","much","hidden","the","approved,","familiar","rid","rid","my","lost","here.","rid","the","the","the","to","in","in","the","partial","every","the","the","rid","the","something","and","my","to","a","the","more","rid","started","it","into.","rid","it","swallowed","picky","the","a","a","it","the","a","an","around","problems","tail","the","it","back","the","a","some","some","back","around","a","the","rid","rid","a","it","into","all","something","this","to","into.","the","clear"]},{"Key":"get into,","Fragments":["thanks!"]},{"Key":" Maybe","Fragments":["you","you","consider","I","there","declare","I'm","there's","try","there","it's","this","it's","I'm","extract","that","there's","you","you"]},{"Key":"Maybe you","Fragments":["could","could","could","could","could","could","could","can","can","can"]},{"Key":"could submit","Fragments":["your"]},{"Key":"submit your","Fragments":["`word-count.exs`"]},{"Key":"your `word-count.exs`","Fragments":["?"]},{"Key":" You","Fragments":["could","are","might","might","could","are","could","can","are","are","right,","could","could","are","are","should","may","can","might","may","are","have","might","may","have","could","should","should","are","are","don't","can","can","mean","might","can","might","might","may","have","can","are","should","can","can","could","can","should","correct","can","should","shouldn't","can","are","can","could","could","could","have","might","can","don't","could","do","might","could","could","can","can","can","could","can","can","could","could","could","betcha!","might","could","could","could","could","could","could","could","maybe","could","could","maybe","can","could","are","could","should","should","are","could","could","were","could","might","can't","can","have","may","got","can","have","could","have","could","could","could","could","could","could","can","could","might","could","gained","end","could","could","can","could","could","could","could","laser-focused","could","could","need","are","can","could","could","could","could","can","don't","can","could","can","might","are","could","might","sometimes","can","could","might","could","can","can","could","avoided","may","do","can","actually","know","could","can","could","could","can","might","could","could","don't","could","might","actually","can","can","still","could","can","can","seem","might","should","seemingly","might","can","may","can","don't","would","could","can","can","look"]},{"Key":"You could","Fragments":["add","add","add","probably","use","start","use","use","add","always","easily","use","turn","use","golf","even","put","use","avoid","use","make","use","implement","probably","make","use","add","also","also","also","add","avoid","use","check","try","check","use","add","try","extract","normalize","then","consider","try","maybe","do","do","do","use","downcase","call","rewrite","immediately","use","use","do","extract","try","so","extract","use","also","write:","register","pre-sort","replace","implement","always","shorten","simplify","simplify","write","factor","use","simplify","alternatively","look","make","avoid","slightly","also","write","write","make","slightly","use","achieve","reduce","avoid","also","probably"]},{"Key":"could add","Fragments":["the","the","the","help","some","a","`not_same?/2`"]},{"Key":"add the","Fragments":["`@thea`","@daphnee","content","extra","optional","head"]},{"Key":"the `@thea`","Fragments":["from"]},{"Key":"`@thea` from","Fragments":["the"]},{"Key":"from the","Fragments":["`README.md`.","readme.md,","checks","shout?,","cond","implementations.","domain,","compiler","response","git","string","very","very","pipeline","phrase","start.","response","String","\"how\".","start.","previous","`verse`","`hey`","domain,","logic","condition","original","source.","previous","naming","`homologous_pairs`","looks","test","result","people","second","previous","implementation","previous","previous","non-list","Erlang","chain","comparison","remaining","list","calling","`Bitwise`","`String`","names","Kernel","sublist?","last","sentence.","sentence.","tail.","help","DNA!","candidates.","gigasecond,","top,","`List`","one","database","tests"]},{"Key":" Thanks,","Fragments":["I","comes","and","I've","that's","great","I'm","@micaela!","I","just","I'll","and","@elian.","@cecil.","@althea!","pminten,","fixed","already","@edd!","got","@adriana.","@spencer.","I","knew","that","@doyle,"]},{"Key":"Thanks, I","Fragments":["just","hadn't","added","had","fixed"]},{"Key":"I just","Fragments":["submitted","removed","really","wanted","used","took","wanted","like","wrote","updated","submitted","tried","pushed","submitted","added","rely","wanted","commented","sent","realized","figured","wanted","don't","don't","don't","caught","verified","set","couldn't","need","wanted","did","wanted","learned","used","caution","know","went","don't","saw,","noticed","grabbed","wonder","fixed","called","slapped","updated","copied","can't","can't","learned","submitted","split","got","extended"]},{"Key":"just submitted","Fragments":["a","a","a","it."]},{"Key":"submitted a","Fragments":["version","new","new","new","new","new","revision","revised","new","new","new","new","new","new","new","new","better","new","new","new","new","new","new","new","new","new","PR"]},{"Key":"a version","Fragments":["with","of","with","of","of","of","where","that","of"]},{"Key":"version with","Fragments":["the","that","naming","a","that","that","those","minimal","all"]},{"Key":"with the","Fragments":["specific","```?```","least","others.","larger","`@johnathan`","order","is_","gem","perfectly","same","first","stdlib","\"|\u003e\"","\"?\",","need","language","`@jamaal`","version","typo","short","`|\u0026gt;`","duplication","array","current","`if","intent","default","`Enum.filter`","?.","|\u0026gt;","example","hints","extraction.","\u003ccode\u003erespond\u003c/code\u003e","```\u0026amp;```","anonymous","case-insensitive","one-liner:","named","naming","method","name","pipeline","giant","fact,","regex","necessary","transform","latter.","pipeline","second","normalize","naming","empty","same","function","number.","number","public","\u003ccode\u003eHasDict.update/4\u003c/code\u003e","list","function","pipeline","final","word","code","pipe","hyphen","shape","count","duplication","character","multiple","chill","Elixir","Elixir","solution","guarded","same","very","regexes,","limited","same","pattern-matching","button","same","method","outer","accumulator","_sing","readability.","extra","HashDict;","**word_count**","sanity","`flat_map`","idea","*meaning*","increasing","range.","partition","teenth","current","recursion","docs","exercism","example.","fix.","compile","technique","module","range,","underlying","language","`\u0026`","`Dict`","rest","naming","updated","basics.","capability","standard","current","score","`case`","current","order","solution","`valid_number`","least","left","right","left","right","domain","multiple","music","goal","typical","last","class","test","language).","`_`","Elixir","[function","list","punctuation","append","code,","set","rules","test","leading","\u0026()","doctest","byte_size/1","numbers","`|\u003e`","flow","`defp","stdlib","provided","default","original","direct","following","Dict.update/4,","solution","liberal"]},{"Key":"the specific","Fragments":["methods.","dictionary","case"]},{"Key":"specific methods.","Fragments":["I"]},{"Key":"methods. I","Fragments":["thought","do"]},{"Key":"thought about","Fragments":["the","this","it!","using","other","using","breaking","the","breaking","that","making","it","_why_","adding","how","passing","Regex.scan?","sanitizing","it","splitting","using","using","guards"]},{"Key":"about the","Fragments":["pattern","pattern","`str`","is_anything_else?","imports","sequence","order","String.ends_with?/2","code","other","public","smallest","mixed","predicate","domain","Statement","functions","implemented","`Regex.scan`","`List`","difference","`@`","regex,","|\u0026gt;","interpolated","pipeline","approach","Single","value","value","protocol","single","order","name","special","name","same","guard","successive","`size`","list","80","`do`","notEmpty","parentheses","`|\u003e","order","contents","formatting.","zipper","names","different","error","repetition","Java","implementation","different","\"if\"","if","input","`input`,","teenager,","other","algorithm","`elem`","problem,","reason","input","shouting","question","\u0026","best","best","`/\\p{L}/`","ones","number","normalize/1","naming","regex","added","`split`","underscores","piping","underscore"]},{"Key":"the pattern","Fragments":["match","matched","matching","matching","matching","matching","matching","match","matching,","matching","match","matching","matching.","matching","matches.","of","matching","matching","matching","matching","matching..."]},{"Key":"pattern match","Fragments":["too","that?","another","on","on","on","against","into","an","version","on","that","one","when","to","for","as","for","to","in","on","on","over","on","on","against"]},{"Key":"match too","Fragments":["but"]},{"Key":"too but","Fragments":["decided","apparently"]},{"Key":"but decided","Fragments":["since","it"]},{"Key":"decided since","Fragments":["everything"]},{"Key":"since everything","Fragments":["else"]},{"Key":"everything else","Fragments":["is","about","(which","that"]},{"Key":"else is","Fragments":["in","good"]},{"Key":"is in","Fragments":["the","erlang","trail","the","Elixir;","Ruby","is_shut_up?","Haskell.","the","the","one","the","the","Kernel","the","all","the","Elixir","fact"]},{"Key":"the cond","Fragments":["that's","in","one,","branches","conditions","macro","macro","to","is","expressions","expressions","statement","will","block","version","block,","onto","as","block."]},{"Key":"cond that's","Fragments":["probably"]},{"Key":"probably best","Fragments":["there","to","not","to"]},{"Key":"best there","Fragments":["too"]},{"Key":"I followed","Fragments":["a"]},{"Key":"followed a","Fragments":["similar"]},{"Key":"a similar","Fragments":["approach,","approach","solution,","construct","solution","syntax","approach","way.","performance"]},{"Key":"similar approach,","Fragments":["just"]},{"Key":"approach, just","Fragments":["two"]},{"Key":"just two","Fragments":["things:","guards."]},{"Key":" -","Fragments":["how","maybe","silence","question","???","normalizing","classifying","responding","Someone","You","You","Do","In","downcasing","creating","accumulating","flattening","incrementing","`Enum.zip/2`","The","In","You","Do","`String.codepoints`","Sorting","I","I","I","`defp`...","change","`Regex.scan`...","Pipe","Regarding","It's","The","I","I","I'm","I","String","I","including","consider","consider","as","not","weird","2","There's","Instead","I","Please","Please","I","For"]},{"Key":"- how","Fragments":["about"]},{"Key":"how about","Fragments":["pattern","moving","making","matching"]},{"Key":"about pattern","Fragments":["matching","matching","matching."]},{"Key":"pattern matching","Fragments":["on","for","on","in","based.","version","but","that","however","strings","lets","in","in","=)","for","for","to","a","to","on","like","works.","here","is",":","on","(things","on","that","with","feels","stuff","was","to","on","is","instead","for","and","on","in","with","on","anonymous","for","with","on","in","to","to","to","to","where","limitations.","instead","over","inside","and","directly","in","with","in","for","so","directly","directly","but","and","and","for","is","as","with","in","here,","in","too,","is","for","in","for","for","the","is","for","it's","in","in","and","if","because","and","in","is","by","doesn't","doesn't","(with","a","(or","by","on","setup.","here.","that","with","to","in","with","in","in","expression.","within","version:","binary","made","perhaps?","and","in","will"]},{"Key":"matching on","Fragments":["an","arguments","`respond`","arguments,","the","`hey/3`?","the","the","function","the","\"\","]},{"Key":"on an","Fragments":["empty","external","iolist.","empty","empty"]},{"Key":"an empty","Fragments":["message","string","string,","message.","string.","dict,","string,","string,","string","string","string","string.","string","list,","string","string","string.","string","set","string","string.","string","string","string.","string","string.","string.","string.","list","tuple","string","list","list","string.","string","string.","string","list","list.","one.","string","list,"]},{"Key":"empty message","Fragments":["with"]},{"Key":"message with","Fragments":["a","only"]},{"Key":"a separate","Fragments":["method?","module?","module)?","module?","concern.","module?","function","function","clause","function","module?","module?","helper","module","module","method","private","function?","module,","module","module,","module","function","Query","module","and","module","markup","function.","`defp","function?","function"]},{"Key":"- maybe","Fragments":["you","you"]},{"Key":"maybe you","Fragments":["could","have","should","could","could","could","should"]},{"Key":"could define","Fragments":["specific","`nucleotides`"]},{"Key":"define specific","Fragments":["methods"]},{"Key":"specific methods","Fragments":["for"]},{"Key":"methods for","Fragments":["the","other","every","the","each","readability.","readability,","getting/putting"]},{"Key":"for the","Fragments":["conditions","current","`Anagram`,","pointer.","tip.","strings","different","tip","same","silent?","other","tip","test","\"string\"","feedback","tip!","next","shouting","feedback.","feedback.","feedback!","Message","feedback!","tips","feedback!","advices","advice.","push","pick!","\"silent\"","functions:","tip!","whole","guard.","insight.","tip.","`defp`,","feedback!","punctuation","\"s\"","size,","craziness!","\"string\"","same","empty","variable","msg","nil","Lazy","eye","```question?```","same","nitpicks.","tip!","feedback.","tips.","tip","update","iterative","feedback.","one","tip,","condition","same","sake","test","input!","tip!","input.","name","`nil`","empty","body","feedback.","heads","feedback","suggestion.","tips","question","private","feedback.","feedback.","same","tea-totalers","`words`","comments.","feedback.","tip!","\"clean\"","feedback.","`:lists`","feedback!","filter","filter","suggestions!","parameter","suggestion.","`HashDict`?","feedback!","second","head","```Regex#scan```.","length","regex","feedback!","pointer","regex:","feedback.","named","shorthand","tip","regex,","shorter","great","tips!","anonymous","win!","first","streaming","guard","shortcut","feedback!","rest","good","discussion!","first","feedback!","last","runtime","reader","feedback.","first","pipeline","feedback,","various","tip)","feedback.","```","clarification,","tip!","feedback.","feedback.","deault","hint","suggestions,","`end_verse`","default","helper","feedback!","exercise","sake","response,","reader","first","pointer,","confusion.","feedback,","feedback.","discussion!","brilliant","next","count","feedback.","lessons,","separate","feedback.","comment,","purposes","feedback.","\"word\"","feedback.","output...","purposes","null","feedback.","comments,","input.","`strip_country_code`","feedback.","comment,","various","feedback!","other","feedback!","feedback!","compiler","nit!","reviews.","feedback!","conditions","feedback.","feedback,","tip.","last","main","sake","great","latest","feedback!","module,","feedback,","great","insights","type","verse/1","head","feedback.","unit","purpose,","day","given","colons","code","weekday","day","given","reworked","split.","nudge","nits!","callee","clarification.","feedback.","feedback.","feedback","`same_word?`","anonymous","exercise,","map","first","anonymous","naive","feedback.","singalong","feedback!","`cond`","next","feedback,","feedback,","feedback,","feedback,","feedback","list","helpful","conversion","info.","US","specified","sake","stuff","stuff","foreseeable","pattern","implementation","sake","`dict`","insight","Elixir","logic","arguments","`generate`","top","reader.","comment!","case","case","case","graph","comments.","cases","tips","parameters","tip","characters","range,","other,","anonymous","recursive","whole","thorough","counting","feedback","triangle","feedback,","sake","strings","accumulator","error","two","tests","feedback!","feedback!","case","call","call","call","call","call,","call","advice.","reverse","reverse","feedback","last","call","call","call","call","call,","call","\"catch-all\"","shouting","response","properties","String","feedback.","feedback.","callback","silence","tip","last","feedback.","feedback","tip","naming","accumulator","suggestion","spec.","delayed","feedback....gotta","code,","feedback","feedback.","suggestion","ordering","comments","help.","feedback,","feedback.","job.","Enum.reduce?","call","call","call","call","call,","call","direction","heads","feedback!","feedback!","feedback","`append`,","comprehensive","feedback!","feedback!","domain.","`add`","anything","last","feedback","regex","feedback.","call","call","call","call","call,","call","delay","call","call","call","call","call,","call","values.","feedback.","there_are_letters","suggestion.","reminder","great","repetition","questions","German","`number`","`sort`","advice.","non-empty","characters?","number,","tip","feedback,","reverse,","link","advice","help,","entire","nits:","flatten","recursive","count","nit.","anonymous","map.","function","body","nucleotide_counts","tips!","fun","extra","tip.","happiness","filter.","`normalize_word`,","valuable","two","comment!","feedback!","lengths.","anonymous","feedback","string","accumulate_word_count","first","user","test","same","call","call","call","call","call,","call","call","call","call","call","call,","call","new","next","helper","tips,","info","item,","comment,"]},{"Key":"the conditions","Fragments":["(more","would","to","in","to","into","into","in","for","in","into","are","more","are","that","are","into",",","must","you","to","into","evaluated"]},{"Key":"conditions (more","Fragments":["intention"]},{"Key":"(more intention","Fragments":["revealing)."]},{"Key":" Could","Fragments":["`Enum.zip`","you","the","`Regex.scan`","the","the","the","the","you","we","you","you","you","use","you","I","you","you","eliminate","you"]},{"Key":"Could `Enum.zip`","Fragments":["help"]},{"Key":"`Enum.zip` help","Fragments":["you"]},{"Key":"help you","Fragments":["simplify","get","along.","remove","understand","write","clean","make","find","with","get"]},{"Key":"you simplify","Fragments":["this","by"]},{"Key":"simplify this","Fragments":["a","further.","a","using","using","using","code.","code"]},{"Key":"this a","Fragments":["bit?","bit","plus.","bit:","little","bit","bit","bit","fair","little","few","long","bit"]},{"Key":" It","Fragments":["happened","seems","felt","seems","seems","is","works","helps","seems","might","seems","can","seems","was","probably","is","might","seems","might","might","seems","might","does","does","looks","seems","was","also","might","would","would","would","might","is","seems","is","seems","is","ends","may","seems","is","may","feels","is","reminds","is","was","looks","actually","worked","is","might","seems","breathes","**is**","actually","looks","is","is","would","does","feels","would"]},{"Key":"It happened","Fragments":["in"]},{"Key":"happened in","Fragments":["another"]},{"Key":"in another","Fragments":["exercise,","function,","example","exercise","anonymous","language","exercise.","submissions.","solution"]},{"Key":"another exercise,","Fragments":["I"]},{"Key":"exercise, I","Fragments":["think","think","think","agree","think."]},{"Key":"I submitted","Fragments":["new","a","a","a","a","a","that...","a","an","a","a","a","a","a","the","a","the","followed"]},{"Key":"submitted new","Fragments":["exercises","code."]},{"Key":"new exercises","Fragments":["assuming"]},{"Key":"exercises assuming","Fragments":["it"]},{"Key":"assuming it","Fragments":["would"]},{"Key":"it would","Fragments":["use","be","not","make","have","depend","be","make","depend","be","be","improve","handle","fail","be","be","also","be","help","feel","be","improve","return","be","be","make","be","be","work.","be","be","be","be","look","be","change.","make","gain","help.","make","be","have","definitely","match","make","be","be","be","be","make","make","make","make","make","look","present","require","fit","no","work","make","result","still","be","be","return","be","be","be","probably","be","iterate","make","pass","be","return","return","appear","surface.","mean","be","be","only"]},{"Key":"would use","Fragments":["the","more","a","`cond`"]},{"Key":"use the","Fragments":["file","checks","pattern","functions","HashDict","\"word\"","imported","pipe","[pipeline","new","singular","`defp","functions","pipeline","\u0026amp;","|\u0026gt;","`?`","function","arguments","\u0026amp;","negation","\u0026amp;1,","question","`is_something`","pipe","`|\u0026gt;`","module","function.","natural","ruby","most","pipeline","pipeline","new","Dict","pattern","protocol","`[","pipe","one","capture","blunt","blunt","function","same","process","if-do-else-end","protocol","shorthand","former:","`Dict`","difference","built-in","ampersand","\u0026","standard","regex","functions","whole","`//`","much","right","`|\u003e`","`[","\"obvious\"","\"obvious\"","output","`==`","pipe","`[h|t]`","notation","notation:","`Enumerable`","pattern","first","Posix","\"\u0026\"","`ends_with?/2`","transformation","transformation","anonymous","function","Pipe","piping","folding","anonymous","language","built",",","pipeline"]},{"Key":"the file","Fragments":["name","when","as"]},{"Key":"file name","Fragments":["as"]},{"Key":"name as","Fragments":["a","it's","\u003ccode\u003eanagram?\u003c/code\u003e..","the"]},{"Key":"a way","Fragments":["to","to","to","to","not","to","to","to","to","to","to","to","to","to","to","that","that","to","to","to","to","to","that","of","to","to","to","to","to","yet","to","to","to","to","to","to","to","to","to","to","to","you","to","to","of","to","to","to","to","to","to","that","that","for","to","to","to","to","to","to","around","to","to","you","you","you","that","to","to","do","as","to","to","to","as","you","to","to","to","to","you","similar","of","around","to","to","for"]},{"Key":"way to","Fragments":["distinguish","use","only","take","deal","remove","test","make","make","detect","check","express","test","do","apprach","remove","make","simplify","get","get","implement","remove","remove","use","do","test","test","check","find","check","remove","check","have","make","get","DRY","pattern","write","make","do","factor","do","do","reference","clear","remove","do","produce","write","improve","send","simplify","DRY","only","simplify","do","only","move","simplify","go","do","build","implement","avoid","check","check","return","method","method","only","DRY","check","do","do","approach","do","handle","get","make","do","do","do","go.","implement","reference","do","fix","check","learn!","check","check","apply","hide","go,","do","use","do","do","not","approach","clean","do","accomplish","resolve","keep","do","approach","look","join","understanding","avoid","build","have","handle","avoid","avoid","convert","get","extract","do","give","finish","avoid","subtract","practice","have","go","do","reuse","know","accomplish","accomplish","go","do","do","be","do","implement","get","increment","know","test","manipulate","test","implement","cache","eliminate","use","send","reduce","do","append","deal","go.","turn","solve","compare","write","handle","express","use","mark","make","decompose","green,","not","calculate","determine","write","write","check","solve"]},{"Key":"to distinguish","Fragments":["them,","between"]},{"Key":"distinguish them,","Fragments":["instead"]},{"Key":"them, instead","Fragments":["it"]},{"Key":"instead it","Fragments":["submitted","returns"]},{"Key":"it submitted","Fragments":["for"]},{"Key":"submitted for","Fragments":["the"]},{"Key":"the current","Fragments":["\"open\"","`interpret/1`","exercise","solution,","`hey(\"\")`","value","naming","version.","`count`","line","version,","value","set","version","pair's","name.","one","nesting."]},{"Key":"current \"open\"","Fragments":["one"]},{"Key":"\"open\" one","Fragments":["for"]},{"Key":"one for","Fragments":["that","approval,","nil","non-nil?","`anagram?`","anagram","is","everything","me","the","the","the","\"censored"]},{"Key":"for that","Fragments":["language","on","function?","pattern","is","functionality.","function.","method","first","function","reason","and","reason.","character.","get","heads","if","unless","sort","section).","again.","in","matter.","case.","to","implementation","use-case,","tool.","case,"]},{"Key":"that language","Fragments":[":-("]},{"Key":"I have","Fragments":["almost","seen","seen","used","to","a","now,","done","implemented","strong","submitted","the","to","written","given","no","compared","to","definitely","no","a","one","to","not","Elixir","another","and","no","to","a","no","named","to","seen","have","no","a","Q","some","here,","duplicate","old","to","some","a","the","probably","updated","as","deliberately","been","*a","yet","something","no","a","not","developed","is","used","the","no","a","seen","thought","some","not","the","it","started","had","been","a","more","to","refactored","to","two","a","here.","some","addressed","non-obvious","to","here:","a","with","any"]},{"Key":"have almost","Fragments":["the"]},{"Key":"almost the","Fragments":["exact","same","same","same"]},{"Key":"the exact","Fragments":["same","same"]},{"Key":"exact same","Fragments":["approach","content,"]},{"Key":"same approach","Fragments":["as","as","as","the","the","the","the","the","the","the"]},{"Key":"approach as","Fragments":["you,","@stephany.","I've"]},{"Key":"as you,","Fragments":["but"]},{"Key":"you, but","Fragments":["for"]},{"Key":"but for","Fragments":["the","the","some","some","some","some","some","some"]},{"Key":"the `Anagram`,","Fragments":["I"]},{"Key":"`Anagram`, I","Fragments":["would"]},{"Key":"I would","Fragments":["assume","probably","assume","also","consider","like","advise","maybe","maybe","look","probably","prefer","change","consider","also","just","choose","probably","personally","suggest","tend","leave","go","say","love","also","keep","have","probably","consider","also","mention","argue","totally","give","do","expect","say","be","have","probably","love","make","prefer","prefer","follow","probably","use","recommend","still","suggest","go","like","need","make","probably","be","agree.","find","change","stick","stick","have","probably","write","make","have","explore","encode","love","like","find","just","focus","appreciate","maybe","do","suggest","get","think","maybe","add:","perform","consider","also","love","like","suggest","suggest","say","prefer","have","make","use","also","prefer","have","have"]},{"Key":"would assume","Fragments":["somehow","using"]},{"Key":"assume somehow","Fragments":["your"]},{"Key":"somehow your","Fragments":["`word-count`"]},{"Key":"your `word-count`","Fragments":["exercise"]},{"Key":"`word-count` exercise","Fragments":["got"]},{"Key":"exercise got","Fragments":["lost?"]},{"Key":"looks a","Fragments":["bit","little","lot","little","bit","bit","bit","little","bit","lot","bit","lot"]},{"Key":"bit complicated","Fragments":["IMO;","to",",","with"]},{"Key":"complicated IMO;","Fragments":["have"]},{"Key":"IMO; have","Fragments":["you"]},{"Key":"have you","Fragments":["heard","checked","considered","considered","considered","seen","thought","aboard"]},{"Key":"you heard","Fragments":["about"]},{"Key":"heard about","Fragments":["`cond`"]},{"Key":"about `cond`","Fragments":["in","."]},{"Key":"`cond` in","Fragments":["elixir","`hey(string)`"]},{"Key":"in elixir","Fragments":["?","0.10.1","which","v0.10.1.","has","to","so,",":)","you","they","or","for","can","brings","when","while","programs.","so"]},{"Key":"could extract","Fragments":["the","the","the","them","the","`?T`and","the","`seconds_in_earth_year`"]},{"Key":"the matches","Fragments":["into","would","more","into"]},{"Key":"matches into","Fragments":["private","separate"]},{"Key":"into private","Fragments":["functions","functions","functions?","methods.","methods","functions","methods","functions?","functions","methods","functions?","functions","functions","predicate","methods?","functions","predicate","predicate"]},{"Key":"private functions","Fragments":["and","is","with","or","within","in","with","to","so","have","directly","directly","(`defp`)","out","looks","with","to","before.","(or","with","with","in","in","into","always","that","might","with","I","for","to","to","(`defp`)","what","that","and","with","to","like","which","and","named","just","doing","very","you"]},{"Key":"functions and","Fragments":["add","their","especially","`Enum`","all.","an","this","there's","use","use","pattern","a","operators.","makes"]},{"Key":"and add","Fragments":["a","a","the"]},{"Key":"add a","Fragments":["`@andreane`","silence?","`@favian`","different-arity","guard","test","question","private","comment","note","student","little","new","few","case","new","possibly"]},{"Key":"a `@andreane`","Fragments":["based"]},{"Key":"`@andreane` based","Fragments":["on"]},{"Key":"based on","Fragments":["`README.md`?","`Enum.reverse`.","feedback.","what","the","it.","their","your","your","description.","the","the","ascii.","this","a","pattern","type","the","another","a","enumerators.","the","your","the","a","string","feedback","words,","`[","a","reduce().","how","character","inaspic's"]},{"Key":" Awesome.","Fragments":["`Enum.filter`","I"]},{"Key":"Awesome. `Enum.filter`","Fragments":["was"]},{"Key":"`Enum.filter` was","Fragments":["what"]},{"Key":"was what","Fragments":["I","alanpeabody","I"]},{"Key":"what I","Fragments":["was","have","have","understand","think","can","suggest?","understand,","was","wanted","wanted","need.","ended","think","am","want","wanted.","used","expected","wanted.","have","understand","was","figured.","suggested","consider","thought,","want.","came","did","was","already","pushed.","meant.","did","wrote,","can","did","think"]},{"Key":"I was","Fragments":["looking","looking","going","going","unable","supposed","looking","able","doing","trying...","trying","looking","actually","mostly","seeing","converting","actually","allowing","trying","concerned","writing","surprised","thinking","wrong.","hoping","delighted","able","reading","really","initially","talking","under","a","thinking","going","trying","experimenting","just","reminded","never","clever","hoping","doing","using","waiting","doing","looking","getting","looking","guarding","just","trying","pretty","using","referring","referring","just","quite","not","wondering","composing","going","not","previously","new","doing","kind","using","able","not","a","just","not","not","missing","not","conflating","using","pretty","being","trying","initially","doing","forgetting!","safe","surprised","inspired","surprised","unaware","trying","hoping","trying","wondering,","too","thinking","having","wondering","thinking","talking","grateful.","hoping","not","talking","wondering","actually","doing","expecting","stumbling","thinking","aware","more","a","pleased","working","leaning","somewhat","unsure","surprised,","going","Googling","guessing","just","attempting","greeted","disappointed","talking","talking","using","having","doing,","for","thinking","going","more","not","supposed","looking","not","kinda","doing","pretty","running","taking","doing"]},{"Key":"was looking","Fragments":["for","for","for","at","at","for","to"]},{"Key":"looking for","Fragments":["and",":)","that","a","a","2","a","by","something","other","have","a"]},{"Key":"for and","Fragments":["didn't","against"]},{"Key":"and didn't","Fragments":["find.","understand","find","seem","think","even","notice","go"]},{"Key":"didn't find.","Fragments":["Thanks!"]},{"Key":"You are","Fragments":["right.","right","right","right.","right","totally","right.","almost","already","asserting","very","right","totally","right,","right","correct.","correct"]},{"Key":"are right.","Fragments":["Removing","Simplified","Fixed.","This","I"]},{"Key":"right. Removing","Fragments":["sing_verse."]},{"Key":"like this","Fragments":["direction,","--","better","would","approach!","in","whether","and","one","too,","`:lists.sort","better","one.","one","version","style,","too?","will","in","`\u0026namefun`","fits","as","by","exercise","even","every","but","is","version,","exercise,","version","is","for","was","that","one","in","I'd"]},{"Key":"this direction,","Fragments":["what"]},{"Key":"direction, what","Fragments":["do"]},{"Key":"what do","Fragments":["you","you","you","you","you","you","you","you"]},{"Key":"do you","Fragments":["think?","think","think","think","know","know","get","think?","get","mean","need","think","think?","think","think","mean","mention","think?","think","need","think","think","think?","think","think?","think","think","think","think","think?","feel","feel","mind","think","have","think?","think?","handle","think?","think","get?","make","feel","think?","think?","think?","know","know","think?","compute","really","say","have","only","split","look","add","think?","think?","call","like","think?","use","do","use","put","think","think","think?","have","think?","think?","think?","scan","know","think?","think?","prefer?","think","think","think?","think?","think","think?","mean","use","think","wrap","think?","think?","think?","think?","think?","need","think?","think?","think?","think?","think?","think","mean?","think","need","feel","think","think?","have","think?"]},{"Key":"you think?","Fragments":["What","In","Would","If","Between","Kind","I'll","Are","Would","Are"]},{"Key":"think? What","Fragments":["if"]},{"Key":"What if","Fragments":["you","I","you","nil","the","you","I","you","you"]},{"Key":"if you","Fragments":["took","input","extracted","put","move","got","wanted","needed","play","pattern","had","use","fed","think","feel","moved","prepend","haven't.","do","kept","just","break","go","used","want","know","wanted","can","are","moved","can","use","used","wrapped","are","have","have","can","put","use","wanted","have","used","wanted","will","put","notice","put","do","use","pass","delete","know","want","decide","would","have","use","use","extracted","use","had","want.","use","look","think","extract","inline","find","like","think","explicitly","need","find","reverse","can","get","can","absolutely","did","were","were","made","just","use","find","like","can't","use","do","prefer","do","call","write","want","look","have","want","ever","have","do","don't","decide","have","might","need","still","wanted","like","have","need","get","don't","use","feel","do","use","wanted","wanted","want","change","change","have","already","do","didn't","had","wanted","managed","wanted","already","wanted","know","append","wanted.","tucked","downcase","and","downcase","craft","renamed","do","do","call","are","pass","have","remove","do"]},{"Key":"you took","Fragments":["it","a"]},{"Key":"took it","Fragments":["one"]},{"Key":"it one","Fragments":["step"]},{"Key":"one step","Fragments":["further","of","from"]},{"Key":"step further","Fragments":["and","and","and","and"]},{"Key":"further and","Fragments":["moved","get","used","extract"]},{"Key":"and moved","Fragments":["the","the","that"]},{"Key":"moved the","Fragments":["`Enum.reduce`","`|\u003e`","`downcase`","code","text","`downcase`","d==2","earth-specific","List.flatten"]},{"Key":"the `Enum.reduce`","Fragments":["into","in","some"]},{"Key":"`Enum.reduce` into","Fragments":["something"]},{"Key":"into something","Fragments":["that","descriptive","i'm"]},{"Key":"something that","Fragments":["could","looks","wasn't","can","feels","obviously","isn't","would","will","can't","makes","I","matters","I"]},{"Key":"that could","Fragments":["be","make","be","be","detect","cross","simplify","shorten","be","be","be","be"]},{"Key":"could be","Fragments":["the","implemented","wrong!","wrong!","renamed","useful","difficult","refactored","even","another","prettier","used","prettier","enough?","a","a","improved,","improved","everything","written","passed","simplified","`sanitize_and_extract`,","simplified","written","more","\"pop\"","made","clearer.","made","shortened","simpler","used","very","a","separate","replaced","written","wrong,","private.","argued","turned","`tokenizer`","`String.split/3`","more","useful,","an","written","easier","written","written","used","written","written","case-insensitive,","more","written","accomplished","made","simplified","implemented","done","written","written","the","useful","improved.","alternatively","some","replaced","simplified","expressed","made","written","written","doing","sped","fixed","using","made","used","more","extracted","a","written:","considered","made","improved","merged","done","improved.","reading"]},{"Key":"be the","Fragments":["final","right","solution","first","ones","first","first","convention","identity","sole","same.","best","joiner","normalized","most","cause.","safest","last","last","default,","way","first","most","exception.","same","last"]},{"Key":"the final","Fragments":["step","test","result.","string.","step"]},{"Key":"final step","Fragments":["of","of"]},{"Key":"step of","Fragments":["the","the","your","many"]},{"Key":"of the","Fragments":["pipeline?","essence","next","`README.md`","equation.","`other_words`","Ruby","number","awesomeness","first","module.","public","language.","method","code","solution?","program","exercise","four","tests","language","next","condition","language,","language!","language","response?","next","duplication?","private","`sing`","`Readme.md`","code.","Regex.","string?","function","function","one-liner","parameter","things","nitpick","?!,","answer","line,","class","class,","`cond`","`match/2`","phrase","`String.`","function","module","same","verse","method","phrase","guard","Haskell","way","phrase?","check","phrase","condition,","textual","built-in","words","`HashDict`,","private","function.","bleeding","line","`extract_nucleotide`,","function","function","empty","hey(...)","supervision","function),","process,","steps","`|\u0026gt;`","steps","general","guard","regex","solutions","key","noun;","problem,","algorithm","string","contents","scale.","duplication","domain","String.strip?","`String`","module","subject.","word.","`Words#count/1`,","```#hey```","value","test","administrators","\"!\"","pipe","naming","tests","`silence?`","Teenager","various","work","message,","```","above","operation","line,","show.","string","duplication","pipeline","story","pipe","convention.","Mostly","whole","HashDict.","two","`if,","strand","docstrings,","type","tests.","regex.","string,","result","cond","level","names","helper","nice","public","pattern","docs","filter_map,","`Enum`","public","function.","edge","gate","character","conditions.","equality","data","parameter","parameter,","paremeters","function.","`shout`","regex","`anagrams?`","standard","predicate","previous","[pipeline](http://elixir-lang.org/docs/stable/Kernel.html#|\u0026gt;/2)","implementation.","sorting","predicate","regexes","pipeline","List.foldl.","standard","high","string","verse,","verse.","function","opinion","method","elements","desired","process?","variable","helper","box?","functions","`replace_thymidine`","language,","words","`count`","code","main","method","domain","String","word","code","same","time","code.","pipeline","code","string,","functions","text","function","function","screen.","wartier","method","phone","phone","constant","variable","range","range.","conditions","code.","oft-overused","parameters","next","golfy","code.","subsequent","other","code","cleansed","function","student","k,v","list.","list.","\"lower_case()\"","source","word","concrete","list,","list.","`Beer`","solution","\u00261","Regex).","name","items","error","pound","song","private","pipeline","constants.","shorter","module,","regular","module.","week","phone","functions","shorter","more","caller","conditions","conditions","problem","viewport?","valid","code","target","fact","0","Erlang","BEAM","unicode","default","conditional?","language","file.","cond;","public","song).","keys","dict.","clauses","`Enum`","implementation-specific","implicit","same","return","server","challenge","original","same","problem","fundamental","language.","advantages","function","value.","function","value\"?","code","reverse.","process","function","precondition","`Dict`","slice","exercism","Elixir","exercises.","calculation","function","week","duplicate","`anagram?`","last","methods","time","callback","public","module?","functions","exercise","data","exercise","first","other","reducing","mill","list","pipeline","Elixir-lang.org","list,","base","implementation.","snooze.","end","reduce","reduce","list","Dicts","code.","border","`Record[a:","`Record[a:","song","same","capture","standard","lists","reduce","conditionals","assignment.","exercise.","same","same","test","most,","`strain`","test","areas","three","function","function","function","`count`","concat","candidate","`and`.","tradeoff.","tests","reduce","inputs","function","function","`count`","function","domain","code?","letters:","cases","different","test","string","if","pattern","callback,","types","spec.","file.","Sieve","items","dict","results","tuple","clarity","other","function","function","`count`","characters","more","input","first","first","second","third","optimizations","tests","students","input.","different","year","module","HashDict","HashDict","functions","leaf","tree","cases,","string","tests","left","function","function","`count`","left","code.","string","function","function","`count`","function.","domain.","`void?`","test","domain.","domain.","domain?","name","Elixir","parameters","usual","first","functions","first","past","application","time.","possible","multiples,","lists","`reduce`","difference","sieve.","numbers","codes","*standard*","tests","language","Regex:","```word_count```","Regex...","```word_count```","pipe","`word_count`","challenges","variable","issue!","other","private","Elixir","accumulator","pipe","line.","pipeline;","line","tests","unique","delivered","work.","sentence","issues","elements","list","pipelined","nucleotides_counts/1","private","'cons'","domain","transforms,","regexes.","domain?","different","current","`hey`","work.","implementation,","name","accumulator.","spec","kind","function","implementation","problem","conditions","`Enum`","functions.","second","function","function","`count`","function","function","`count`","expression","input","form","second","other","work,","exercise","Ruby","exercise,","huge","things","code","in-place","tests","functions","Enum.map","variables"]},{"Key":" Thanks","Fragments":["for","for","redmar,","for","for","for","-","for","for","for","again!","for","for","for","for","for","for","for","for","for","for","for","for","in","for","for","for",";)","for","for","@lydia!!","for","for","for","for",":)","for","again!","for","for","for","-","for","@kacie","very","for","@sharon.","@sibyl","to","for","@tamia-w","again","for","again","for","@adaline","for","for","guys!","for","for","again","@gregoria","very","for","for","for","@alysha,","@sidney","@kelsi","for","@stephan","for","for","@maymie","for","to","@finn","for","for","for","for","@celia,","for","for","for","again","for","again.","@randi","for","for","to","for","again.","for","for","to","for","again","again.","for","for","for","for","@eva!","for","@dawson.","again","for","for","for","for","for","for","for","as","@geo","pminten","for","-","for","for","pminten.","for","for","for",":)","guys.","again","for","for","for","again!","as","for","for","for","for","for","for","for","for","for","so","@kelli!","again","for","for","for","for","for","for","for","@davonte!","@gunnar!","for","for","for","for","for","for","for","for","for","for","rud,","for","for","@cathy,","for","for","for","rud,","@anderson!","for","for","for","Chris!","a","for"]},{"Key":"the pointer.","Fragments":["Got"]},{"Key":"pointer. Got","Fragments":["me"]},{"Key":"Got me","Fragments":["through"]},{"Key":"me through","Fragments":["it."]},{"Key":" `Enum.filter`","Fragments":["simplifies"]},{"Key":"`Enum.filter` simplifies","Fragments":["greatly,"]},{"Key":"simplifies greatly,","Fragments":["thanks"]},{"Key":"greatly, thanks","Fragments":["for"]},{"Key":"thanks for","Fragments":["the","the","catching","the","the","the","pointing","the","taking","sharing","all","comment","the","the","the","the","your","the","pointing","the","you","your","the","the","explanation!","the","the","the","the","the","feedback.","the","the","the","your","the"]},{"Key":"the tip.","Fragments":["I","I"]},{"Key":"tip. I","Fragments":["think","guess","wouldn't"]},{"Key":"I jumped","Fragments":["into"]},{"Key":"jumped into","Fragments":["the"]},{"Key":"into the","Fragments":["recursive","hey","count","pipeline","`cond`","Anagram","|\u0026gt;","first","filter.","next","string","is-tests","HashDict","function","details","regex","second","bit","smallest","first","method","code.","Teenager","nested","`count/1`'s","Regex","Erlang","source.","code,","mind","best","subsequent","pipeline","ASCII","pipeline","single","collectable","elixir","```cond```"]},{"Key":"the recursive","Fragments":["implementation","solution","call","strategy","calls","call","functions","function.","version.","call","dict","call"]},{"Key":"recursive implementation","Fragments":["as"]},{"Key":"implementation as","Fragments":["a"]},{"Key":"a first","Fragments":["approach","submission!","stab"]},{"Key":"first approach","Fragments":["but"]},{"Key":"approach but","Fragments":["it"]},{"Key":"but it","Fragments":["does","fails","would","seems","meant","might","might","usually","could","looks","can","is","would","is","seems","sure","doesn't","seems","should","was","kinda","looks","could","is/will","might","seems","is","would","was","could","will","was","seemed","always","looks","is","also","hasn't","couldn't","doesn't","feels","still","should","being","only","feels","would","was","works.","might","makes","seemed","seemed","just","doesn't","just","might","can","seems","doesn't","also","might","seems","seemed","didn't","seems","does","does","does","was","also","is","didn't","definitely","takes"]},{"Key":"it does","Fragments":["make","what","not","return","now.","look","make","something","the","pass","on","pass","narrow","seem","make","make"]},{"Key":"does make","Fragments":["it","this","the","it","4","the"]},{"Key":"make it","Fragments":["more","clearer","a","a","clearer.","clear","more","more","pass","readable,","more","more","more","look","more","shorter","more","more","a","a","more","a","a","read","more","work.","more","a","more","easier","more","any","a","more","longer.","better,","pretty","easier","work","much","clearer","more","so","clear","more","more","`cond`","easier","possible","difficult","work,","clearer?"]},{"Key":"it more","Fragments":["convoluted.","clear?","modular?","readable.","modular","modular?","readable","modular","readable","readable.","compact.","readable?","consistent.","accurately","readable","readable,","complex.","as","readable.","succinctly?","efficient.","like","efficient?","when","readable"]},{"Key":"more convoluted.","Fragments":["Thanks!"]},{"Key":"This is","Fragments":["super","already","great!","awesome!","very","better!","my","a","a","getting","great!","a","succinct,","very","my","looking","very","a","a","a","super-nitpicky,","really","great,","really","a","a","preferred","just","the","nice","very","very","probably","the","where","very","my","probably","very","a","also","a","my","the","interesting","My","the","obviously","practically","certainly","the","my","a","the","slowly","my","definitely","NOT","most","the","by","just","a","a","not","as","the","not","as","a","a","indeed","actually","nowhere","really","the","a","an","a","something","why","somewhat","something","a","effectively","a","my","a","used","the","the","based","my","an","what","the","really","a","where","incomplete;","looking","looking","looking","what","the","looking","looking","looking","looking","certainly","a","not","subjective,","not","my","excellent.","kind"]},{"Key":"is super","Fragments":["nit-picky,","cool,","small"]},{"Key":"super nit-picky,","Fragments":["but"]},{"Key":"nit-picky, but","Fragments":["I"]},{"Key":"think the","Fragments":["\"anagrams\"","code","intention","tradeoffs","only","only","`is_`","variable","`is_`,","`\\b`'s","most","protocol","name","sweet","typical","naming","code","previous","binary","new","`not_same?`","Elixir","preferred","tests","leading","`Enum.map/2`","compiler","logic","generic","`inc_counter/2`","String","fact","gain","idea","pair","init","confusion","main","last","test","definition","current","way","unicode","first","reason","results","site","!","culture"]},{"Key":"the \"anagrams\"","Fragments":["parameter"]},{"Key":"\"anagrams\" parameter","Fragments":["to"]},{"Key":"parameter to","Fragments":["match","`shouting?`?","`hey`","the","\"match\""]},{"Key":"to match","Fragments":["could","old","the","on","punctuation","[A-Z].","the","any","word","the","each"]},{"Key":"match could","Fragments":["have"]},{"Key":"could have","Fragments":["a","used","your","used","used","a","just","been","also","two","some","been","used","doubled","moved","done","done","done","omitted"]},{"Key":"have a","Fragments":["better","solution","variable","pretty","PR","strong","really","concept","nice","separate","point.","mix","preference","different","minor","personal","link","good","good","second","much","better","terribly","`Phrase`","good","lot","predicate","weird","couple","string","list","recursion","play","\"?\"","\"preprocess\"","feeling","chance!","version","reason","capture","good","look","much","single","zero","built-in","discard","helper","better","great","good","`String.Chars`","good","lot","lot","reference","note","go","`foo`","conversation","faster","notion","real","super","tree","pretty","very","key","reason","separate","look","nice","code","failing","real","couple","look","`count/1`","different","duplicated","`School`","non-empty","look"]},{"Key":"better name,","Fragments":["since"]},{"Key":"name, since","Fragments":["we"]},{"Key":"since we","Fragments":["don't","had","are"]},{"Key":"we don't","Fragments":["know","know"]},{"Key":"don't know","Fragments":["that","who","which","the","how","if","the","the","anything","if","if","that","that","what","the","the","it.","how","about","how","how","that","what","how...","what","actually","any","that","of","if","if","why","either.","the","what","what","if","because","how","I"]},{"Key":"know that","Fragments":["they","José","you","in","Elixir","you","you","you","having","it","about","it's","writing","you","allows","using","rem","-","a","use","shouting","trick."]},{"Key":"that they","Fragments":["are","don't","aren't","decided","are","must","are","return.","support"]},{"Key":"they are","Fragments":["anagrams","coming","not","doing.","anagrams","used.","private","implemented","internal","how","too","called","longer","defined.","partially","amazing","boolean.","binaries","a","not","easy","subtly","not","superfluous.","exercises,","both","defined","used.","matching","in","hearing,","fairly","all","all","dynamic","tail-recursive!","basically","doing","doing.","all","implemented","equal"]},{"Key":"are anagrams","Fragments":["when","or","of","into","and"]},{"Key":"anagrams when","Fragments":["they"]},{"Key":"when they","Fragments":["are","spot","make","are"]},{"Key":"are coming","Fragments":["in.","and"]},{"Key":" Nice,","Fragments":["we","I","I","I","I","that","I","I","the","I","I'd","thanks.","you've","I"]},{"Key":"Nice, we","Fragments":["handled"]},{"Key":"we handled","Fragments":["this"]},{"Key":"handled this","Fragments":["problem"]},{"Key":"this problem","Fragments":["pretty","and",":)","there","doesn't","I","because","if","btw.","should","may"]},{"Key":"problem pretty","Fragments":["much"]},{"Key":"pretty much","Fragments":["the","solid","identical","do","any","completely","always","always","always","the","a","the","everyone","required","never","just","just"]},{"Key":"much the","Fragments":["same","direction","same"]},{"Key":"the same","Fragments":["way.","thing","thing","in","arguments","effect,","conclusion","as","exercise","name","end?","thing.","type.","way","reason.","\"I","list","VM","code","function","string.","in","name","process","function","concerns","result","as:","way.","regex","for","task","result.","work","match.","line","result.","as","length.","result","as","thing,","as","kind","job.","for","thing","word.","word.","approach,","issue).","function","anonymous","argument","thing","as","word.","problem,","as","as","level","function","issue","thing,","that","as","reduce,","place","name.","time","either","word","as","call.","goal?","approach","constraints.","as","time","way","naming","as","two","but","approach,","name.","benefit","exercises","set.","word","distance","as","performance","use","semantics","approach","line","functions","comment","type","name","time,","and","approach","function","as","function.","effect,","approach","function","number","as","as","every","as","approach","function","list","approach","function","module,","approach","function","function","but","function","list","output,","choice","type.","regardless.","variable","by","goal?","name","result.","thing","thing.","principle","in","or","problem","solution","pipeline","use","approach","function","approach","function","teams","value.","boat","as","regex"]},{"Key":"same way.","Fragments":["Couple","You"]},{"Key":"way. Couple","Fragments":["of"]},{"Key":"Couple of","Fragments":["ideas:","things:"]},{"Key":" *","Fragments":["I","You","No.","Oh,","Is","You","Thanks","I've","What","There","I","Have","Does","A","Is","There","Is","You","There","What","Why","It's","How","Could","Check","I","Have","Would","What","I","You","You","Do","Predicate","Thanks","normally","in","you","On","On","For","The","The","You","you","like","you","you","It's","`\u0026normalize_word(\u00261)`","`fn(word)","`[]","`[1]","`[1,2]","`[1,2,3]","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because","`[?]`","`[a-z,","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because","You","You","You","The","Your","Why","`[]","`[1,2]","`[1,2,3,4]","`acc`","Compute","`acc`","Compute","`acc`","Compute","`acc`","`acc`","Compute","`acc`","Compute","`acc`","Compute","`acc`","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because","`acc`","Compute","`acc`","Compute","`acc`","Compute","`acc`","`acc`","Compute","`acc`","Compute","`acc`","Compute","`acc`","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because","In","Instead","Sorting","not","negative","inequalities:","isosceles:","The","The","Nice","I","I","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because","New","Case","Second","Recursion,","Case","Second","Recursion,","Case","First","`rest`","return","`rest`","return","`do_call(l,","New","Case","Second","`acc","Tail","Case","Second","`acc","Recursion,","Case","First","Because","Comparing","Verifying","This","My","One"]},{"Key":"* I","Fragments":["think","like","believe","don't","think","like"]},{"Key":"think having","Fragments":["a","exercises"]},{"Key":"having a","Fragments":["`cond`","hard","module","`Phrase.new`","`MultiSet`","different","limited","function","nice","separate","hard","hard","hard","hard"]},{"Key":"a `cond`","Fragments":["is","control","expression","clause","-","though."]},{"Key":"`cond` is","Fragments":["a","such","what","the","the","great","not","shorthand","pretty","doing"]},{"Key":"is a","Fragments":["bit","bit","different","necessary","little","good","bit","more","good","better","method","known","good","fairly","really","bit","nice","simpler","tad","great","clarifying","bit","guard","perfect","very","much","shorter","waste","step","great","more","function","simpler","string\".","standard","nice","much","simple","balance","single","fine","module","formatting","necessary","lot","game","bit","bit","good","resubmission","refactor","solid","bit","great","nice","very","feature","good","better","little","special","bit","good","lot","bit","performance","great","convention","function","`string`.","little","little","good","good","question","list.","great","character","little","really","new","good","lot","confusing","Regex","big","minor.","shout.","more","bit","lot","whole","little","thing.","thing,","really","minor","better","one-liner","minor","slightly","better/more","nested","blank","better","terribly","higher","gorgeous","single","great","sledgehammer","list","string","better","bit","redundant","little","matter","constant,","collection","bit","better","binary","bit","good","bit","macro","bit","big","bit","function","continuation).","specific","way","way,","way","good","lot","module","bit","little","call","lot","subjective","good","built-in","way","nice","bit","minor.","special","way","committer","catchall","very","ListDict","bad","`Dict`","limitation","bit","record","`ListDict`,","bit","bit","fair","local","bit","simpler","bit","weird","constant","guard","restriction","specific","performance","minor","list","nitpick","bit","simple","bit","little","little","point","right","pretty","problem","very","function","list?","bit","standard","big","lot","generalization","massive","standard","matter","little","little","better","call","common","bit","call","call","tail","bit","lot","better","call","reversed","character","low","`:math.pow/2`","little","pretty","slight","bit","little","great","more","call,","bit","nicer","bit","better","call","better","\"just","bit","functional","bit","second","right","better","better","call","right","pretty","better","call","call","big","known","known","bug.","general","trip.","bit","member.","function","test","\u003ccode\u003eString.match?\u003c/code\u003e","personal","solution.","downcased","little","bit","great","code","useful","bit","bit","rather","kind","bit","better","call","better","call","sublist","superlist","better","bit","lot","capitol","simple","list","good","yelling"]},{"Key":"bit unnecessary","Fragments":["when"]},{"Key":"unnecessary when","Fragments":["there's"]},{"Key":"when there's","Fragments":["just","no","only"]},{"Key":"there's just","Fragments":["one","one"]},{"Key":"just one","Fragments":["condition","pass","parameter:","or"]},{"Key":"one condition","Fragments":["you're"]},{"Key":"condition you're","Fragments":["checking,"]},{"Key":"you're checking,","Fragments":["so"]},{"Key":"checking, so","Fragments":["it"]},{"Key":"so it","Fragments":["might","requires","gets","limits","seems","was","has","works","won't","would","must","tells","doesn't","matches","can","will","should","will","will","will","might","matches","should","doesn't"]},{"Key":"it might","Fragments":["make","be","be","be","be","make","make","be","take","be","be","be","make","be","be","be","improve","work","be","be","be","be","be","be","be","be","help","be","be","not","be","be","be","be","help."]},{"Key":"might make","Fragments":["more","the","more","the","that","more","handling","your","it","it","line"]},{"Key":"make more","Fragments":["sense","sense","sense.","sense","sense","explicit","assumptions"]},{"Key":"more sense","Fragments":["to","now","to","in","than"]},{"Key":"sense to","Fragments":["just","encapsulate","extract","have","extract","extract","have","Enum.join","define","declare","me.","fuse","abstract","do","how","me","me."]},{"Key":"to just","Fragments":["collapse","`\u00261","`\u00261","pattern","insert","giving","move","before","substitute","use","put","define","write","\"give","`@meta`","use","verify","use","return","use","update","get","append","use","pass","four","upcase","iterate","learning"]},{"Key":"just collapse","Fragments":["it"]},{"Key":"collapse it","Fragments":["into"]},{"Key":"it into","Fragments":["an","a","`do_count`?","a","a","`String.capitalize`.","a","a","a","a","`Enum.reduce`","another"]},{"Key":"into an","Fragments":["`if`.","one-liner.","enumerable.","increment","attribute","equal","issue"]},{"Key":"an `if`.","Fragments":["I"]},{"Key":"`if`. I","Fragments":["do"]},{"Key":"I do","Fragments":["think","like","now!","not","it","like","think","not","think","feel","a","agree","understand","remember","coding","not","have","agree",":)","like",":)","think","this?","it","like","wonder","agree","agree","like","tend","believe","understand","if","find","feel","see","like","not","not","like","find","feel","want","not"]},{"Key":"do think","Fragments":["`cond`","it","it","it"]},{"Key":"think `cond`","Fragments":["looks"]},{"Key":"`cond` looks","Fragments":["really"]},{"Key":"looks really","Fragments":["nice","good.","nice.","nice.","good!"]},{"Key":"really nice","Fragments":["though,","to"]},{"Key":"nice though,","Fragments":["and"]},{"Key":"though, and","Fragments":["is","I","I"]},{"Key":"and is","Fragments":["more","probably","somewhat","much","small","fairly","less","a"]},{"Key":"is more","Fragments":["general.","or","readable","appropriate","complex","readable","elixir'ish","concise.","maintainable","common","appropriate","readable","than","elixirish.","…","fun.","self-documenting","of","readable","readable","expressive","readable","commonly","expensive","readable","idiomatic.","efficient","idiomatically","readable","convoluted","readable.","readable","idiomatic.","appropriate","international","readable","imperative,","elegant","semantic,","readable.","general","common","readable?","reliable","idiomatically","readable.","idiomatic,","preferred,","expressive.","elixiry"]},{"Key":"* You","Fragments":["might","can","have","can","can","could","could","could","can"]},{"Key":"You might","Fragments":["want","consider","consider","find","want","also","find","be","consider","find","look","be","format","consider","be","want","also","want","benefit","consider","want","be","find","want","add","try","want","also","consider","want","consider"]},{"Key":"might want","Fragments":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"want to","Fragments":["look","user","you","point","separate","play","consider","investigate","check","protect","wrap","share","know","try","refactor","simplify","have","perform","tweak.","limit","distinguish","perform","make","support","duplicate","expose","use","allow","make","write","chain","add","move","know","say","know","taint","use","write","reuse","iterate","stay","recurse","wait","split","split","go","banish","be","support","see","use","change","get","discard.","change","avoid","take","actually","support","do","read","force","reformat","shake","see,","see)","run","look","make","lose","use","know","mess","figure","look","take","take","look","return","have","experiment","experiment","check","avoid.","stick"]},{"Key":"to look","Fragments":["into","at","that","elsewhere,","up","into","for","for","for","at","back","at","up","at","for","at","for","into","at","up","there!","up","at","at.","further","at.","so","up","at:"]},{"Key":"look into","Fragments":["`Enum.filter`,","`Regex.scan`","the","reduce!","using","that.","Enum.reduce","macros","converting","trying","that."]},{"Key":"into `Enum.filter`,","Fragments":["which"]},{"Key":"`Enum.filter`, which","Fragments":["captures"]},{"Key":"which captures","Fragments":["a"]},{"Key":"captures a","Fragments":["lot"]},{"Key":"a lot","Fragments":["of","for","here,","of","cleaner","of","better","of","of","normally.","cleaner!","of","more","of","of","by","coding","about","of","nicer,","of","about","clearer.","from","of","better.","more","more","of","cleaner","of","of","of","of","about","of","better","more","of","-","these","going","of","easier","of","easier","of","longer","of","of","of","of","more","of","of","of","of","messier.","of","of","of","faster","of","cleaner.","simpler","of","of","of","for","more","of","of","faster","closer","more","better","cleaner","of","of","quicker","of","more","clearer.","of","more","more","more","of","of","of","for","cleaner.","less","more.","of","more","like","more","more","more","of","easier","of","of","of"]},{"Key":"lot of","Fragments":["the","places","sense.","readability","repetition","value","time","things:","string","repetition","\"syntax","functional","Guard","assumptions","stuff","time","overhead","sense.","functions","examples","people","behind","code","room","downcasing","downcasing","Ruby","different","use","trouble","duplicated","possible","refactoring","words","lines","sense,","renaming.","things,","enterprise","info","sense.","times,","students","time","things,","work","conventions","extra","people","the","reading","`cond"]},{"Key":"the essence","Fragments":["of","of"]},{"Key":"essence of","Fragments":["this","the"]},{"Key":"of this","Fragments":["question.","problem","exercise","check","looks","magnitude","problem","out","than","concurrent","exercise,","as","string?\",","one,","pattern.","the","code","exercise,","approach","be","exercise","code","kata","iteration","pipe","in","exercise.","code.","exercise,","exercise","page","exercise.","exercise.","is","solution","exercise","nicely.","exercise","since"]},{"Key":"Nice, I","Fragments":["really","really","really","like","really","really","like","think"]},{"Key":"I really","Fragments":["like","like","would","like","like","can't","do","grok","like","like","like","like","disliked","like","learn","enjoyed","should","learned","like","cannot","wish","like","don't","like","appreciate","love","can't","gained","like","wanted","disliked.","wanted","like","can't","dislike","like","understand.","like","like","like","like","liked","like","wanted","like","liked","don't"]},{"Key":"really like","Fragments":["the","the","the","it!","this!","it!","how","how","how","it","the","the","this.","`silence?`,","your","it,","it","either.","the","how","the","the","the","relying","your","the","the","the"]},{"Key":"the renaming","Fragments":["of","of"]},{"Key":"renaming of","Fragments":["`downcase`","`downcase`"]},{"Key":"of `downcase`","Fragments":["to","to"]},{"Key":"`downcase` to","Fragments":["`normalize`.","`normalize`."]},{"Key":"might consider","Fragments":["using","using","whether","cleaning","a","giving","why","`String.ends_with?`","using","for","reversing","downcasing","adding","experimenting","using"]},{"Key":"consider using","Fragments":["`\\w`,","`\\w`,","the","the","pattern","a","Pattern","two","any","HashDict.update","the","an","private","`Enum.count`","Regex.scan","Stream.chunk/3","regexp","one-line","Enum.reduce","list"]},{"Key":"using `\\w`,","Fragments":["meaning","meaning"]},{"Key":"`\\w`, meaning","Fragments":["a","a"]},{"Key":"meaning a","Fragments":["\"word","\"word"]},{"Key":"a \"word","Fragments":["character\",","character\","]},{"Key":"\"word character\",","Fragments":["instead","instead"]},{"Key":"character\", instead","Fragments":["of","of"]},{"Key":"instead of","Fragments":["`[a-zA-Z0-9]`","`[a-zA-Z0-9]`","`do_interpret`?","using","dispatching","string?","`list_of_nucleotides`","the","doing","simple","true.","all","implementation","`Dict.merge`","building","all","using","Regex?","a","`all_caps?`,","converting","using","`count`,","using","String.last","fn,","the","```","walking","the","`_count`","String.last.","the","a","Statement.nothing?).","`do_hey`,","just","applying","partially","explicitly","`isShouting`.","lowerCamelCase.","binarys","the","raw","a","returning","just","using","repeating","guard","deep(nested(calls)).","character","`HashDict.new()`","a","nested","the","`String.length","putting","`String.split/1`.","`x`.","explicitly","a","comparing","`isSilence`.","doing","`phase","doing","`Enum.zip/2`.","`def`).","\"\"","tabs.","`case`","a","referencing","`ten_digit`","HashDict","the","HashDict","public","private","a","at","`case`","def","separate","hiding","a","for","the","List,","HashDict).","calling","`Enum.reduce`","every","the","`Enum.map`?","`def","requiring","this:","explicit","replace?","the","descriptions).","Query","the","`cond`","1","for","`Enum.reduce`.","`Enum#reduce`,","Enum.map","prepending","the","`sequence","a","just","`Enum.flat_map`","`Enum.map`.","initialization","`_foo`.","require,","`filter`.","for","a","that","using","codepoints.","`head`,","`tail`","`function`.","what","`def`.","explanation).","a","the","`HashDict.get`.","using","`[func.(head)]","explicit","trying","using","a","`being_asked_a_question?(input)`","removing","my","`String.last(input)","capture","`\u0026String.to_char_list(\u00261)`","replacing","`HashDict.some_func`.","`def`.","`List.flatten`","`def`.","`%`","having","`result`","`String.length(String.strip(msg))","`HashDict.some_fun`.","single","matches","an","`:unequal`.","`HashDict.foo`","`f(x)","flattening","`Enum`","Enum.chunk.","Enum.reduce","`%r`","using","`Enum.chunk/2`","horizontally.","replacing","local","having","a","the","1","Regex.scan/3.","`Regex.split`?","`at`","3?","`HashDict.update`,","an","cond?","nesting","a","just","abusing","relying","\"silence?\"","regex.","having","doing","\"silent?\".","case)."]},{"Key":"of `[a-zA-Z0-9]`","Fragments":["for","for"]},{"Key":"`[a-zA-Z0-9]` for","Fragments":["your","your"]},{"Key":"for your","Fragments":["regex,","regex,","nit.","feedback!","feedback.","feedback,","program.","feedback.","feedback.","feedback.","approval.","explanation.","input","feedback.","feed","feedback.","`StringInquires`","feedback.","sanitize","supporting","feedback","`verse`","feedback;","`update`","insights.","application","feedback,","first","submissions.","comments.","help,","comments.","nitpick.","feedback;","help.","feedback!","count","time","feedback.","feedback.","feedback.","feedback.","feedback!","comments,","feedback.","feedback.","feedback,","feedback.","implementation","first","cases","action","suggestion.","tests","regex.","implementation","feedback.","or","review!","review.","comment!"]},{"Key":"your regex,","Fragments":["since","since"]},{"Key":"regex, since","Fragments":["they","they"]},{"Key":"since they","Fragments":["mean","mean","are","are","don't"]},{"Key":"they mean","Fragments":["almost","almost"]},{"Key":"mean almost","Fragments":["the","the"]},{"Key":"same thing","Fragments":["and","and","in","but","you"]},{"Key":"thing and","Fragments":["it's","it's"]},{"Key":"and it's","Fragments":["a","a","an","quite","not","awesome","in","a","very","not","valid","also","way","`Access`","possible","not","all","easier"]},{"Key":"it's a","Fragments":["bit","bit","good","more","more","common","real","pattern","bit","convention/preference","more","bit","little","bit","great","tradeoff","Beer","little","convention","more","more","good","strict","little","perfectly","question.","tradeoff.","good","lot","tiny,","limitation","single","win.","good","good","small","matter","bit","good","best","little","safe","bit","bit","couple","little","nice","simple","boolean"]},{"Key":" Also,","Fragments":["you","you","do","check","small","in","some","thanks!","`arg`","it","its","checking","check","finding","I","there","posted","is","it","if","look","I","there","how","although","for","I","is","I","in","yes,","Enum.each","how","do","I'd","I","I'm","I","think","not","I","as","`defp`","consider","please","yeah,","it's","how","use","take","you","I","take","your","beware","take","note","the","do","it","I'm","before","take","I","it","did","it's","you","as","I","the","punctuation","Elixir's","just","if","how","always","after","why","`append`","Capitalize","the"]},{"Key":"Also, you","Fragments":["can","can","could","could","might","might"]},{"Key":"can shorten","Fragments":["`fn(x)","`fn(x)","the"]},{"Key":"shorten `fn(x)","Fragments":["-\u003e","-\u003e"]},{"Key":"`fn(x) -\u003e","Fragments":["x","x","x","1"]},{"Key":"-\u003e x","Fragments":["+","+","+","end):","end):"]},{"Key":"x +","Fragments":["1","1","sum","1"]},{"Key":"+ 1","Fragments":["end`","end`","end\u003c/code\u003e",")`","end",")`","end\"","end\"","should",")","end`","end`","end`","=","=","end`","=","=","=","=","end`","+","+","=","=","+","=","=","end)","=","=","=","="]},{"Key":"1 end`","Fragments":["to","to","works","is","could","in","as"]},{"Key":"just `\u00261","Fragments":["+","+"]},{"Key":"`\u00261 +","Fragments":["1`","1`.","1`."]},{"Key":" Does","Fragments":["it","delegating","it","that","that","your","this","anyone","this","this"]},{"Key":"Does it","Fragments":["work","make","make","always","pass"]},{"Key":"it work","Fragments":["like","for","with","with"]},{"Key":"work like","Fragments":["this?"]},{"Key":" sentence","Fragments":["|\u003e","|\u0026gt;","|\u003e"]},{"Key":"sentence |\u003e","Fragments":["words","String.downcase"]},{"Key":"|\u003e words","Fragments":["|\u003e"]},{"Key":"words |\u003e","Fragments":["normalize"]},{"Key":"is already","Fragments":["looking","quite","present.","an","there,","sorting","longer","of"]},{"Key":"already looking","Fragments":["pretty"]},{"Key":"looking pretty","Fragments":["good,","good.","good.","good."]},{"Key":"pretty good,","Fragments":["but","there"]},{"Key":"good, but","Fragments":["do","`shouting?`","it","it","can","don't"]},{"Key":"but do","Fragments":["you","you"]},{"Key":"you think","Fragments":["restructuring","it's","it","it","about","the","\"is_\"","it's","about","the","about","that","is","for","about","that","`Regex.scan`","`sanitize`","line","\"is_\"","there's","about","of","of","of","the","of","of","of","it","of","you","you","it","of","about","the","about","about","that's","you're","just","if","it","it","it's","is","your","the","is","of","the","you","about","it","there","this","it","about","about","about","about","you","a","that","of","about","about","is","now?","of","of","your","you","of","it","of","about"]},{"Key":"think restructuring","Fragments":["as"]},{"Key":"restructuring as","Fragments":["a"]},{"Key":"a pipeline","Fragments":["(`something","massaging","might","(a","as","though.","is"]},{"Key":"pipeline (`something","Fragments":["|\u003e"]},{"Key":"(`something |\u003e","Fragments":["operation1"]},{"Key":"|\u003e operation1","Fragments":["|\u003e"]},{"Key":"operation1 |\u003e","Fragments":["operation2`)"]},{"Key":"|\u003e operation2`)","Fragments":["would"]},{"Key":"operation2`) would","Fragments":["be"]},{"Key":"would be","Fragments":["an","a","preferable.","mixing","the","more","to","a","appreciated.","a","in,","easy","to","more","implemented","more","for","more","more","more","great.","easier","fine.","adding","better","named","more","immediately","way","a","nice","a","simpler","cleaner","my","more","caught","more","more","more","welcome.","great.","much","good.","with","to","clearer","quite","more","\"silent?\"","worthwhile","good","that","the","clearer","more","an","to","the","more","relevant,","understood","funny.","minor","more","much","about","a","more","incorrect.","left","much","a","better","a","willing","much","like","responsible","useful","a","clearer,","considered","possible","faster","a","surprised","ones","better","best","quite","easier","overly","to","in","unicode","explicit","less","more","horrible","a","clearer","more","implemented","implemented","inverted:","helpful!","best","to","great","easy","most","a","nice","negligibly","more","much","`a`).","a","with","the","adding","more","greatly","considered","useful/necessary","something","something","cool","promising","a","counted","move","greatly","much","appreciated","nicer","harder","nice","just","to","a","written","less","more","surprised","written","more","using","more","considered","appreciated."]},{"Key":"be an","Fragments":["improvement?","idea","idea","idea","array,","advantage","attribute","exercise","alternative?","issue","option","`\u0026inc/1`"]},{"Key":" Oh,","Fragments":["awesome,","very","by","I","also,","I","I","and","nice","really?","right!","no","nevermind...","nice,","did","I","correct,","yeah,","sorry,","good","I"]},{"Key":"Oh, awesome,","Fragments":["I"]},{"Key":"awesome, I","Fragments":["didn't","couldn’t"]},{"Key":"I didn't","Fragments":["know","think","use","pattern","know","realize","know","knew","think","know","know","know","mean","realize","think","know","know","think","know","even","need","see","think","have","think","knwo","think","realize","consider","know","know","know","think","know","now!","inline","see","find","think","realize","want","spend","need","realize","know","thought","manage",";-)","think","think","have","realize","end","do","need","quite","think","think","think","see","think","have","know","expand","really","like","like","do","do","really","expect","want","realize","even","think","know","have","that","know","really","like","need","know","comment","know","want.","meant","realize"]},{"Key":"didn't know","Fragments":["about","about","about","about","about","`cond`","what","about,","about","there","about","about","it","about","how","you","what","about","already.","about","about","how","that","how"]},{"Key":"know about","Fragments":["`HashDict.update`,","String.ends_with/1","pipelining?","doctests!","`ends_with/2`,","that!","the","that.","```","that","these.","the","the","`String.last`?","the","yet.","the","the","using","hd","`defp`.","`Enum.count/2`?","list","the","that","the","the","tl,"]},{"Key":"about `HashDict.update`,","Fragments":["I'll"]},{"Key":"`HashDict.update`, I'll","Fragments":["update"]},{"Key":"I'll update","Fragments":["it","that.","that.","the","it.","my","my"]},{"Key":"update it","Fragments":["to","on","all"]},{"Key":"it to","Fragments":["use","simply","helper","me,","the","be","'query',","a","all_letters_match?","be","a","be","be","be","just","be","extract","try","get","`\"\"`","certain","make","work.","the","avoid","submit","use","be","a","instantiate","the","work.","be","minimize","be","pass,","essentially","`List.flatten`.","be","the","`do_reverse`","the","my","be","feel","reflect","something","use","count?","work,","me.","hang"]},{"Key":"to use","Fragments":["that,","a","guards","methods","pattern","guards,","method","String.ends_with?,","it","the","a","pattern","private","the","completely","\"?\"","multiple","`_`","guards","one","===","for","```===```?","the","guard","regex's","`Kernel.apply`.","module","separate","\"question?\"","a","that","recursion","the","parentheses","parentheses","String.ends_with?","Regexes","`String#codepoints`","a","Erlang's","a","String.first(...)","pattern","`String.codepoints`","parenthesis","defensive","binary","multiple","String.ends_with?/2","YARD","`Enum.reduce`,","partial","pattern","`\u0026amp;set_word/2`","here,","it","`List.flatten`","the","methods","snake_case","`Enum.reject`","`zip`,","|\u0026gt;","pattern","as","codepoints","nesting,","if","the","in","the","`String.split`","that.","pattern","`Enum.empty?`","`Regex.scan/2`","only","guards","it?","|\u003e","custom","an","just","something","a","`import`","`defp`","pattern","List.foldl","them","pattern","it","it.","range","multiple","any","the","once","pipelines","the","the","parentheses","that!","function","Elixir's","guard","that","HashDict.update","language","underscore","functions","parentheses","\"do:\"","`%r/\\p{L}/i`,","less","the","the","parens","`do","parentheses","a","an","`trunc()`","the","parentheses","String.to_char_list/1","that","cond","HashDict.new/2","single","single","it","the","private","the","`String.to_char_list`","Dict.get(@scarlett,","the","this","the","a","`defdelegate`.","'#'","parentheses","`nucleotide_counts/1`","it.","`Bitwise`","`Enum.reduce`.","Enum.reduce","a","them.","Regex.scan","the","nice","2","that","the","it","here)","`String.to_char_list!`?","`Enum.map_reduce`.","it","just","Erlang's","here.","`true`","a","the","parentheses","the","it","the","parentheses","`Dict.some_func`","it","higher","recursion","`true`","it","unqualified","`Enum`","```|\u003e```","String.ends_with,","it","`Enum.reduce`","it.","`Dict.foo`","a","\u0026.","character","`Enum`","the","Enum.filter","true","`~r`","a","raw","my","more","the","`Enum.into/3`","`count`","recursion","to_char_list,","String.replace/4","it","reduce","the","`under_score`","structs,","the","Dict.update","reduce","`++`.","the","the","reduce.","`reduce`"]},{"Key":"use that,","Fragments":["thanks!"]},{"Key":" Consider","Fragments":["looking","the","extracting","using","`cond`","using","how","renaming","if","Dict.update","using","inlining","using","moving","moving"]},{"Key":"Consider looking","Fragments":["at"]},{"Key":"looking at","Fragments":["\"cond\"","how","that","that,","`List.flatten`","line","this,","what","split","just","the","the","the","the","couple","the"]},{"Key":"at \"cond\"","Fragments":["http://elixir-lang.org/crash-course.html#control_flow"]},{"Key":" At","Fragments":["first","this","line","this","a","the","a","least","first"]},{"Key":"At first","Fragments":["I","I","I"]},{"Key":"first I","Fragments":["wasn't","thought","thought","used","was"]},{"Key":"sure about","Fragments":["the","\\w","what","indentation","the","the","the","that?","the","the","this","the","this","memory","the","concise","the","the","the","those"]},{"Key":"pattern matched","Fragments":["version","portions","version"]},{"Key":"matched version","Fragments":["of","of"]},{"Key":"version of","Fragments":["\"hey\"","the","the","the","`hey`,","`match/2`","the","`match/2`.","tests","tests","the","the","a","Elixir","Elixir","an","count:","`bottles`","your","elixir","`words_match?/2`.","`words_match?/2`","the","the","Elixir","this","the","Elixir.","Elixir.","`String.slice`","String.slice","`count`","Elixir.","def/defp.","singalong.","the","each","the","Elixir.","the","Elixir","concat","concat","those","Elixir","the","the","`count/1`","`reduce`.","the","Elixir."]},{"Key":"of \"hey\"","Fragments":["--"]},{"Key":"\"hey\" --","Fragments":["it"]},{"Key":"-- it","Fragments":["seemed","makes","would","could"]},{"Key":"it seemed","Fragments":["like","to","no","to","like","like","less","to"]},{"Key":"seemed like","Fragments":["an","I","overkill;","a","a","a","it","it"]},{"Key":"like an","Fragments":["arbitrary","excellent","area","`anagram?`","OO","html","integer","OO","expensive"]},{"Key":"an arbitrary","Fragments":["special"]},{"Key":"arbitrary special","Fragments":["case."]},{"Key":"special case.","Fragments":["The","When"]},{"Key":"case. The","Fragments":["more","`\u00261","reason"]},{"Key":"The more","Fragments":["I","I"]},{"Key":"more I","Fragments":["think","hear","have","look","need","think","like","could"]},{"Key":"think about","Fragments":["it,","this:","abstracting","abstracting","making","it,","`String.upcase`","the","that?","a","the","making","using","extracting","streaming.","just","that","the","adding","a","using","it,","it.","naming","that,","the","implementing","using","protocols","that","that","that.","giving","characters","that,","just","the","it","whether","replacing","the"]},{"Key":"about it,","Fragments":["the","first","but","but","`if","though."]},{"Key":"it, the","Fragments":["more","`!is_binary(something)`","three","@bianka",":all","next"]},{"Key":"the more","Fragments":["it","traditional","verbose,","I","I","readable","ruby-ish","verbose","basic","important","you","elements","elements","difficult","challenging","OO","input","I","I","idiomatic","\"erlang-esque\"","explicit"]},{"Key":"more it","Fragments":["grows"]},{"Key":"it grows","Fragments":["on"]},{"Key":"grows on","Fragments":["me,"]},{"Key":"on me,","Fragments":["though."]},{"Key":"Very nice!","Fragments":["I","I","I'm","The"]},{"Key":"nice! I","Fragments":["had","like","would","just","agree"]},{"Key":"had used","Fragments":["`Regex.split`","`^`","\u003ccode\u003e[:punct:]\u003c/code\u003e"]},{"Key":"used `Regex.split`","Fragments":["in"]},{"Key":"`Regex.split` in","Fragments":["my"]},{"Key":"in my","Fragments":["solution,","latest","Ruby","opinion.","opinion.","opinion.","opinion.","mind,","Ruby","submission","opinion,","Ruby","next","next","code","code.","code.","ruby","Ruby","life.","comment","latest","previous","current","latest","previous","replace","commit","own","lifetime","submission","submission.","first","opinion,","code","implementation:","opinion.","implementation,","submission","FP.","head","contains_letters?","Clojure","editor,","machine:","code,","code.","implementation.","implementation?","implementation"]},{"Key":"my solution,","Fragments":["but","though","but"]},{"Key":"solution, but","Fragments":["`Regex.scan`","it's","it's","I'm","I","I","I","I"]},{"Key":"but `Regex.scan`","Fragments":["is"]},{"Key":"`Regex.scan` is","Fragments":["nicer."]},{"Key":"think `HashDict.update`","Fragments":["might"]},{"Key":"`HashDict.update` might","Fragments":["help"]},{"Key":"might help","Fragments":["you","you","train","with","a","to","with","to","readability","with"]},{"Key":"you get","Fragments":["to","from","from","to","a","the","with","the","from","a","more","`do_reverse([],","stuck.","to","past","the","started"]},{"Key":"get to","Fragments":["a","learn","that","the","it.","refactor!","\"Whatever.\""]},{"Key":"to a","Fragments":["simpler","simpler","single","question","more","more","separate","single","cond","list","list,","variable","function","variable","variable","variable","more","function","capture-literal","separate","separate","statement","private","separate","list.","single","function,","handful","function,","list","hashset","char","binary","named","char","variable.","char","net","private","list.","list","list","list","bug.","single","tree","literal","`reduce`.","hashdict","reader","private","reduce","more","`List`","list,","change","number","character","helper","left","single","left","solution","function","separate","single","list","unicode","readable","private","new","empty","comment","distinct","single"]},{"Key":"a simpler","Fragments":["`do_count`","version:","`String.reverse`","way","way","way","way","and","way.","syntax.","solution","solution","algorithm","function"]},{"Key":"simpler `do_count`","Fragments":["implementation."]},{"Key":"the use","Fragments":["of","of","of","of","of","of","of","of","of","of","case","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"use of","Fragments":["Regex.scan","pattern","HashDict,","a","doc","the","the","the","pattern","atoms","pattern-matching","the","the","\"if\"","pattern","pattern","guards!","atoms","Enum.sort","\"_speak\"","\u0026amp;1","the","the","the","guard","`Enum.filter_map`","a","`ends_with?`!","the","Elixir's","Elixir's","the","module","`String.codepoints`.","`Enum.count`.","the","`filter_map`.","macros","the","the","Elixir","the","this","the","newlines.","memory?","@khalid.","the","`Stream.zip/2`.","the","HashDict.new/2","`bitstring_to_list`","`Enum.any?`","higher","regular","`cond`.","the","recursion","the","`reverse`.","`reverse`,","the","`cond`","the","POSIX","Regex","higher","the","the","`Enum.take`.","`cond`","Enum.chunk.","private","the","private","default","default","the","the","predicates!","recursion","pattern","`case`","the","the","the","`defp`","regexes","the","the","`reduce`","reverse()","accumulators)","reduce","`Map.get`"]},{"Key":"of Regex.scan","Fragments":["--","that"]},{"Key":"Regex.scan --","Fragments":["it"]},{"Key":"it makes","Fragments":["it","sense,","sense","sense","it","sense","for","matching","it","code","the","for","sense","me","the","a","for"]},{"Key":"makes it","Fragments":["cleaner","easier","clearer","pretty","harder","really","read","a","any","obvious.","hard","clear","stick","fit","easier","very","easier","easier","easy","hard","somewhat"]},{"Key":"it cleaner","Fragments":["than"]},{"Key":"cleaner than","Fragments":["my","the","the","most"]},{"Key":"example, I","Fragments":["think.","return"]},{"Key":"would probably","Fragments":["move","recommend","go","want","go","go","put","work","consider","choose","need","be","help","have","be"]},{"Key":"probably move","Fragments":["the"]},{"Key":"move the","Fragments":["`String.downcase`","interpret","interrogation","silence","`silence`","conditional","silence?","```","```","reject","checking","downcasing","second","Regex","helper","List.flatten","`is_sublist`"]},{"Key":"the `String.downcase`","Fragments":["earlier"]},{"Key":"`String.downcase` earlier","Fragments":["in"]},{"Key":"earlier in","Fragments":["the","the"]},{"Key":"the process,","Fragments":["but","could","instead"]},{"Key":"process, but","Fragments":["that's"]},{"Key":"probably just","Fragments":["personal","didn't","getting","a"]},{"Key":"just personal","Fragments":["preference."]},{"Key":" Have","Fragments":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","a","you","you","you","you","you","you","you","a","you","you","you","you","you","you","you","you","you","you","you"]},{"Key":"Have you","Fragments":["checked","looked","checked","considered","considerer","considered","considered","seen","considered","considered","seen","tried","considered","considered","considered","considered","thought","thought","thought","considered","considered","considered","considered","considered","considered","considered","seen","considered","thought","considered","seen","looked","considered","considered","considered","at","considered","consider","thought","thought","thought","thought","looked","thought","looked","considered","looked","considered","considered","considered","tried","looked","thought"]},{"Key":"you checked","Fragments":["out","the","out"]},{"Key":"checked out","Fragments":["`HashDict.update`?","`Enum.map_join`?","`v0.10.0`","`v0.10.0`","the","either"]},{"Key":"out `Regex.scan`","Fragments":["--"]},{"Key":"`Regex.scan` --","Fragments":["I","also"]},{"Key":"think you","Fragments":["can","could","could","can","can","could","could","could","should","could","can","need","need","could","could","could","need","could","are","should","can","made","should","could","can","can","are","could","can","could","need","are","could","might","can","could","can","might","can","could","need","needed"]},{"Key":"can combine","Fragments":["a"]},{"Key":"combine a","Fragments":["couple"]},{"Key":"a couple","Fragments":["of","of","of","of","of","of","of","suggestions","of","of","of","of","of","of","of","of","of","of","more","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"couple of","Fragments":["functions","things","thoughts.","small","tiny","Elixir","comments/questions:","things","things:","private","things:","small","comments:","these","simplifications.","nits.","small","things","the","thoughts:","thoughts:","formatting","times","thoughts:","small","small","functions","small","things","submissions,","`String`","things","nits","questions:","days","different","seconds.","thoughts:"]},{"Key":"of functions","Fragments":["into","you","`asking?`","on","used","like","before","to","that","are","is","like","like","like","being","is","from","callable","and"]},{"Key":"functions into","Fragments":["one.","`List`","smaller","a","private","your"]},{"Key":" Well","Fragments":["thanks!","the","on","done!","done!","done!","done!","done.","this","done!","done!","done!","done!",",","\\w","how","it","I'm","for","I","the","I","I've","you","readability","instead","`\u0026append/2`","the","you","`[a|b]`"]},{"Key":"Well thanks!","Fragments":["I'm"]},{"Key":"thanks! I'm","Fragments":["jumping"]},{"Key":"I'm jumping","Fragments":["on"]},{"Key":"jumping on","Fragments":["the"]},{"Key":"on the","Fragments":["next","Enum.to_list.","function","kind","numbers","implementation","abstractions.","fence.","match/2","family","parameter","things","string.","actual","other","elixir-lang","other","\"message\"","creation","left","right","standard","result","arguments","Erlang","readability","last","new","simple","simple","`silence?`","content.","line","`silence?/1`","`reduce/3`","same","line","right","wall,","wall.\\n\"","wall.\\n\"","wall.","wall,","\u003ccode\u003ehey\u003c/code\u003e","last","public","shorthand.","right","order","beginning","other","list","elixir","other","wall,","wall.\\n\"","wall,","wall.\\n\"","wall,","wall.\\n\"","left","right?","eyes.","codepoints","naming","current","`hey`","right","larger","result.","one-liners.","input","code","whole","front.","most","feedback","number","code","input","line","corner","list","length","LinkedIn","first","matter","lines","actual","defensive.","defensive","next","[elixir","Bob","subject","C","eyes.","number","end","order","fence","`sequence`","subject","first","exercise","character","language","Haskell","site","case","suggestions","list.","record","first","end","same","head","submitted","ruby","result","`input`","strict","overall","front","suggestions","append","right","last","last","implementation","feedback,","website","site","shortening,","other","tail","other","other","right","`case`","website.","Test","top","logic","nose.","grade","user","sentence","magic","large","speed.","accumulator","array","first","twitters","first","lines","topic),","\"sure\"","previous","order","elixir-talk","last","same","huge","tail","test,","pipeline","end.","large"]},{"Key":"the next","Fragments":["exercise","lesson","ones?","exercise(word-count)","exercise","exercises..","function.","version","block\")","exercise.","revision","exercise.","one...","iteration.","iteration.","thing","function","one","iteration.","reduce","call","exercise","line","iteration.","`fn`","iteration.","exercise,","submissioin.","exercise.","step","2,","iteration","step","2,","exercises.","number","implementation"]},{"Key":"next exercise","Fragments":["then","after","and"]},{"Key":"exercise then","Fragments":[":-)"]},{"Key":"the @daphnee","Fragments":["with"]},{"Key":"@daphnee with","Fragments":["examples"]},{"Key":"with examples","Fragments":["from"]},{"Key":"examples from","Fragments":["the"]},{"Key":"the readme.md,","Fragments":["and"]},{"Key":"readme.md, and","Fragments":["let"]},{"Key":"and let","Fragments":["doctest","pattern","the"]},{"Key":"let doctest","Fragments":["run"]},{"Key":"doctest run","Fragments":["those"]},{"Key":"run those","Fragments":["as"]},{"Key":"those as","Fragments":["well"]},{"Key":"Good point.","Fragments":["Updated","I","I","I've","I've","I","Submitted.","I"]},{"Key":"point. Updated","Fragments":["in"]},{"Key":"Updated in","Fragments":["latest"]},{"Key":"in latest","Fragments":["revision.","Elixir"]},{"Key":"I tried","Fragments":["pattern","to","using","to","adding","to","to","to","pattern","it","several","to","it","that","replacing","it","to","to","using","`@dora","to","to","to","to","to","here","to","to","that","to","out","aligning","to","short-circuiting","out","it","to","to","your","a","to","to","it","to","it","to"]},{"Key":"tried pattern","Fragments":["matching","matching"]},{"Key":"matching for","Fragments":["the","this","the","`silence?()`.","your","`verse`?","string","`increment_counter([key]`","writing","`shout?`","this","words"]},{"Key":"the strings","Fragments":["using","of","--","in","contained","all","you"]},{"Key":"strings using","Fragments":["guard"]},{"Key":"using guard","Fragments":["clauses,"]},{"Key":"guard clauses,","Fragments":["but","only","but","sorry,"]},{"Key":"clauses, but","Fragments":["they","it's","I","that"]},{"Key":"but they","Fragments":["are","hide","are","didn't","were","seem","are"]},{"Key":"are not","Fragments":["supported...","necessary,","likely","of","predicate","right","just","as","necessarily","it","needed","present","needed)","tail","necessarily","as","needed","needed.","written","telling"]},{"Key":"not supported...","Fragments":["As"]},{"Key":"supported... As","Fragments":["we"]},{"Key":"As we","Fragments":["are","always"]},{"Key":"we are","Fragments":["just","all","in","in","nitpicking,","grabbing"]},{"Key":"are just","Fragments":["returning","suggestions","as","copy","so","a","a","a"]},{"Key":"just returning","Fragments":["a","the","whatever","it"]},{"Key":"returning a","Fragments":["string,","lambda","list","list","segment","map"]},{"Key":"a string,","Fragments":["I","and","I","`replace`","would","not","you","you","and","sort"]},{"Key":"string, I","Fragments":["would","would"]},{"Key":"assume using","Fragments":["private"]},{"Key":"using private","Fragments":["functions","functions","functions."]},{"Key":"functions is","Fragments":["a","one","very","allowed","not","more"]},{"Key":"bit of","Fragments":["overkill?","duplication","work","code.","duplication","syntactic","logic","logic.","duplication","code","duplication","playing","duplication","extra","a","Elixir","time.","background","a","elixir,","a","a","an","duplication","a","the","the","trouble","the","newlines,","trial"]},{"Key":" Would","Fragments":["it","it","it","it","you","it","it","judicious","it","it","it","`String.codepoints`","it","a","it","declaring","it","it","it","it","you","`HashDict.new/2`","really","love","`Enum.count`","it"]},{"Key":"Would it","Fragments":["be","be","make","be","be","make","clarify","be","make","be","be","be","make","be","be","be","be","be","be","be","be"]},{"Key":"it be","Fragments":["worthwhile","worthwhile","an","an","an","better?","more","worthwhile","better","better","a","simpler","a","more","better","worthwhile","worthwhile","possible","worth","worth","more","broken","simpler","easier","easier","easier","said","easier","more","better","better","possible?"]},{"Key":"be worthwhile","Fragments":["to","separating","to","to","to","to"]},{"Key":"worthwhile to","Fragments":["extract","extract","extract","extract","extract"]},{"Key":"to extract","Fragments":["the","the","the","the","\"Enum.sort\"","some","the","private","the","the","that","the","methods","`downcase_anagrams?`","the","it","the","some","downcasing;","out"]},{"Key":"the logic","Fragments":["for","into","from","--","expressive.","inside","for","is","of","for","a","from","correct.","of","of","clearer,","would","was","of","inline","like","for","to","behind","of","though","behind","for","order","for","for","that","in"]},{"Key":"logic for","Fragments":["checking","each","determining","detecting","each","your","each"]},{"Key":"for checking","Fragments":["for","the","the","to","complex"]},{"Key":"checking for","Fragments":["the","an","a","capitals","the","the","a","`is_all_caps?`","equality.","unicode","in","any","the"]},{"Key":"the different","Fragments":["input","checks","parts","letters","anagrams","behaviors.","types","lines","verses","ways","cases?","responses","cases,","sections","cases.","cond","cases","types"]},{"Key":"different input","Fragments":["types"]},{"Key":"input types","Fragments":["into"]},{"Key":"types into","Fragments":["private"]},{"Key":"functions with","Fragments":["descriptive","intention-revealing","semantic","intention-revealing","intention-revealing","guards,","intention-revealing","intention-revealing","\u003ccode\u003e?\u003c/code\u003e","trivial","2","`defp`.","a","dynamically","guard","a","their","a","`defp`","intention-revealing","a","a","guard","names"]},{"Key":"with descriptive","Fragments":["names?"]},{"Key":" Interesting...","Fragments":["I'll"]},{"Key":"Interesting... I'll","Fragments":["try"]},{"Key":"I'll try","Fragments":[":-)","it","to","out","that!","to","another","that.","breaking","your"]},{"Key":"I'm curious:","Fragments":["why","Did"]},{"Key":"curious: why","Fragments":["are"]},{"Key":"why are","Fragments":["you","you","you"]},{"Key":"are you","Fragments":["guarding","familiar","familiar","deciding","using?","happy?\"","adding","trying","sure","importing","sure","discouraging","the","suggesting","using?","counting","aware","talking","getting","flattening"]},{"Key":"you guarding","Fragments":["with"]},{"Key":"guarding with","Fragments":["is_binary/1"]},{"Key":"with is_binary/1","Fragments":["on"]},{"Key":"is_binary/1 on","Fragments":["line"]},{"Key":"on line","Fragments":["2?","15?","25.","10","6:","23.","7!","30","18.","30,","12.","10","19","4,","4","22","16","8","20,","5,","4.","15.","17.","#20","4","6.","15","5","16.","7","48.","11","8","52).","12","5,","16.","34","13?","18.","15","16","12","`12-13`","14","17!","6.","20.","10,","40?"]},{"Key":" Isn't","Fragments":["the","`newline_appender`","`sorted`"]},{"Key":"Isn't the","Fragments":["```is_```","``ìs_```","idea"]},{"Key":"the ```is_```","Fragments":["redundant"]},{"Key":"```is_``` redundant","Fragments":["with"]},{"Key":"redundant with","Fragments":["the","the","```?```","the"]},{"Key":"the ```?```","Fragments":["in"]},{"Key":"```?``` in","Fragments":["your","your"]},{"Key":"in your","Fragments":["functions","code.","prior","regex?","`hey`","previous","regular","code?","`question?`","function","regex","function","code","accumulating","`question?`","`Teenager`","@verner.","primary","`bottles`","```","DSL","helper","count","`question?`","```HashDict.update```.","update","implementation","call","attribute.","table","footsteps","namespace","reduce","second","code","regex","first","code","example","implementation","`cond`","code","thoughts"]},{"Key":"your functions","Fragments":["names?","be"]},{"Key":"I love","Fragments":["this.","the","how","how","exercism,","Elixir!","these"]},{"Key":"Nice! I'm","Fragments":["not"]},{"Key":"I'm not","Fragments":["sure","a","familiar","taking","entirely","sure","sure","familiar","interested","sure","happy","really","quite","sure,","familiar","sure","so","sure","sure","so","really","a","sure","sure","sure","sure.","very","yet","convinced","sure","so","sure","really","really","convinced","exactly","happy","sure","sure","sure","certain.","sure","sure","sure","sure","aware","at","really","sure","sure","sold","sure","much","sure","completely","sure","excited","sure","sure","completely","sure","sure","as","so","sure","sure","a","sure","sure","really","going","sure","sure","quite","sure","sure","saying","a","a","a","quite","quite","sure","happy","sure","even","happy","completely","sure","sure","sure","exactly","sure","finding","a","finished,","happy","sure","clear","sure","mistaken)","familiar","a","very","super","sure","sure,","saying","sure","sure","sure","very","100%","sure","sure","totally","using","very","thrilled","finding","sure","crazy","sure","sure","sure","sure","very","sure","sure","entirely","aware","sure","sure","sure"]},{"Key":"not sure","Fragments":["there's","about","the","if","if","that","what","there's","I've","I","moving","if","that","if","it's","how","when...","I","about","why.","if","why","if","either,","what","why","that","if","I","I","if","if","how","how","whether","how","that's","how","I'd","it","if","which","if","how","if","if","why,","which","why","there's","if","what","if","about","this","if","about","how","it's","how","how","about","if","how","why","which","if","which","what","about","if","about","I","exactly","if","if","this","about","if","of","if","if","why","if","if"]},{"Key":"sure there's","Fragments":["a","a","some","better","going"]},{"Key":"there's a","Fragments":["way","fair","quite","cleaner/more","lot","neat","new","typo","fair","better","2-argument","lot","better","cleaner","function","better","better","good","more","way","nicer","good","technique","pitfall","better","very","general","standard","256-tuple","trick","way","really","\"better\"","different","difference","tradeoff","policy","shorter","way","compromise","simpler","gap","better"]},{"Key":"use a","Fragments":["guard","sentence","particular","name","guard","character","guard","shorthand","character","character","string","named","regex,","named","named","single","pipe:","module","module","[case](http://elixir-lang.org/docs/stable/Kernel.html#case/2)","default","filter,","regex","slice","regular","default","list","private","regex","list","pipeline","map","cond","list","higher","regex","decreasing","`cond`","link","higher-order","Graph","value","guard","ready","simpler","very","Supervisor","function","function","particular","simple","regex","combination","more","whitelist","Dict","map\""]},{"Key":"a guard","Fragments":["--","clause","on","for","statement","clause","to","condition","when","the","clause,","clause.","clause","clause","clause.","clause.",":-/"]},{"Key":"guard --","Fragments":["only"]},{"Key":"-- only","Fragments":["a"]},{"Key":"only a","Fragments":["few","question","single","proper","single","limited","single","single","very","small","few","limited"]},{"Key":"a few","Fragments":["functions","things:","days","options","of","times.","points:","other","weeks","days","things","ways","points:","more","lines","hours","with","days","days,","times","things","hd","hours,","minor","times.","things","weird","thoughts:","little","comments","more","exercises","pipes.","other","times","steps","ways","efficiency","problems","ideas","nits.","functions.","nits.","newlines,","submissions","second","functions","extra","things","million"]},{"Key":"few functions","Fragments":["are","that","here"]},{"Key":"functions are","Fragments":["supported.","limited,","named.","concise,","private,","all","uniquely","called","available","preferred,","defined","\"only\"","very","almost","lazy","more-or-less","not","private","not","all","efficient?","now","written","supposed"]},{"Key":"are supported.","Fragments":["(see"]},{"Key":"supported. (see","Fragments":["http://elixir-lang.org/getting_started/2.html,"]},{"Key":"(see http://elixir-lang.org/getting_started/2.html,","Fragments":["section"]},{"Key":"http://elixir-lang.org/getting_started/2.html, section","Fragments":["2.6.2)"]},{"Key":" What","Fragments":["I","about","do","do","if","the","do","do","you","do","do","would","I","do","other","I","are","about","would","would","does","would","version","was","you","would","I","are","are","would","happens","happens","happens","happens","does","a","about","an","do","I","I'm","would","do","about","do","do","is","I","is","you","I","do","do","you","if","does"]},{"Key":"What I","Fragments":["really","don't","wanted","was","meant","notice","would","could","did","discovered"]},{"Key":"really would","Fragments":["love"]},{"Key":"would love","Fragments":["to","more","to","pull","a","to","to","some"]},{"Key":"love to","Fragments":["do","add","get","hear","hear","hear","hear","hear","hear"]},{"Key":"do is","Fragments":["use","match","instead","to","implementing","change"]},{"Key":"is use","Fragments":["function"]},{"Key":"use function","Fragments":["signatures","guards"]},{"Key":"function signatures","Fragments":["with"]},{"Key":"signatures with","Fragments":["different","a"]},{"Key":"with different","Fragments":["guards,","arities","numbers"]},{"Key":"different guards,","Fragments":["but"]},{"Key":"guards, but","Fragments":["I","we"]},{"Key":"I couldn't","Fragments":["figure","quite","figure","find","find","find","find","find","find","get","figure","make","get","work","work","figure","work","think","quite","find","figure","figure","find","come","see","find","manage","think","get","figure","name","figure","come","find"]},{"Key":"couldn't figure","Fragments":["out","out","out","it","out","out","out,","out","out","any"]},{"Key":"figure out","Fragments":["how","how","a","pattern","how","how","how","what","String.split.","what","why...","how","this","which","how","how...and","how","how","a","how","how","how","how","the","how","how","a","how!","any","how","all","why"]},{"Key":"out how","Fragments":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","I","to","to","to","to","else","to","to","to","to","your","your","to","to","to","to","to","to"]},{"Key":"how to","Fragments":["use","make","use","do","utilize","specify","use","do","write","use","make","use","do","do","format","shorten","handle","bring","use","do","compose","submit","handle","parse","convert/cast","ensure","respond","decipher","break","optimize","update","update","use","apply","fix","use","update","pull","apply","go","do","do","do","sort","make","do","eliminate","use","make","reduce.","make","spec","maximize","parse","convert","get","work","get","do","get","review","properly","make","use","make","fix","implement","implement","break","check","ignore","reverse","append","do","easily","implement","work","simplify","determine","address","do"]},{"Key":"use guards","Fragments":["besides","everywhere","or","where"]},{"Key":"guards besides","Fragments":["'is_*'."]},{"Key":"worthwhile separating","Fragments":["the"]},{"Key":"separating the","Fragments":["different","logic","response","checks","response","checks","identification"]},{"Key":"different checks","Fragments":["into"]},{"Key":"checks into","Fragments":["private","functions","private","their","private","named"]},{"Key":"private functions?","Fragments":["Also,","Within"]},{"Key":"functions? Also,","Fragments":["I'd"]},{"Key":"Also, I'd","Fragments":["prefer","make","prefer"]},{"Key":"I'd prefer","Fragments":["to","to","using"]},{"Key":"prefer to","Fragments":["see","rearrange","use","compare","not","use","use","make","see","use","reduce","use","extract","write","do","use","use","encapsulate"]},{"Key":"to see","Fragments":["a","if","if","how","how","how","that","what","how:","if","how","how","pattern","the","if","what","the","your","if","what","here","the","extremely","if","what","that","it","how","what","what","(though","how","your","my","if","what","in","if","if","a","how","if","if","if","if","there's","if","if","if","if","if","why","what","how","if","that","if","if"]},{"Key":"see a","Fragments":["slightly","way","few","too","problem","list","straight","reduce","way"]},{"Key":"a slightly","Fragments":["more","different","quicker","more","difference","simpler","different","different","more","more"]},{"Key":"slightly more","Fragments":["descriptive","semantically","semantically","complicated","complexity","efficient","efficient,","common","\"clever\",","efficient","compact","generic","idiomatic.","expressive"]},{"Key":"descriptive variable","Fragments":["name","name"]},{"Key":"variable name","Fragments":["than","then","either,","be","than","more","should","for","prefixed","causes","is"]},{"Key":"name than","Fragments":["\"x\".","`is_upcase`,","`is_upcase?`","`x`.","\"n\"","`silence?`"]},{"Key":"than \"x\".","Fragments":[":)"]},{"Key":" Great","Fragments":["job!","job!","work!","job.","Job!","Job!","job!","job","nudge","feedback,","!","job!","idea,","job","idea!","work!","catch","start","nit!","job,","ideas,","function","job!","first","feedback,","advice,","idea.","job","code,","solution.","code!","use"]},{"Key":" Oooh,","Fragments":["nice"]},{"Key":"Oooh, nice","Fragments":["use"]},{"Key":"nice use","Fragments":["of","of","of"]},{"Key":"of pattern","Fragments":["matching!","matching,","matching","matching","matching","matching.","matching","matching,","matching","matching,","matching","matching.","in","matching"]},{"Key":"* No.","Fragments":["Remnants"]},{"Key":"No. Remnants","Fragments":["of"]},{"Key":"Remnants of","Fragments":["an"]},{"Key":"of an","Fragments":["earlier","expression","exercise","anonymous","operator","extra","active","object","opinion","argument","implementation","animated","append","inefficiently","anonymous","empty","Elixir","explicit","accumulator","issue","expressive"]},{"Key":"an earlier","Fragments":["attempt.","commenter"]},{"Key":"* Oh,","Fragments":["awesome!"]},{"Key":"Oh, awesome!","Fragments":["Forgot"]},{"Key":"awesome! Forgot","Fragments":["about"]},{"Key":"Forgot about","Fragments":["that..."]},{"Key":"Neat! Thanks","Fragments":["for"]},{"Key":" Will","Fragments":["do.","revert","check","search","rewrite","fix","fix"]},{"Key":" Ok,","Fragments":["still","now","I've","I've","think","just","I","so","long","on","interesting","this","I'm","this","I","learning","so"]},{"Key":"Ok, still","Fragments":["stuck."]},{"Key":"still stuck.","Fragments":["Anybody?"]},{"Key":"are right","Fragments":["on","on","about","in","that","next"]},{"Key":"right on","Fragments":["the","that.","my","accident."]},{"Key":"the Enum.to_list.","Fragments":["I","I'm"]},{"Key":"Enum.to_list. I","Fragments":["just"]},{"Key":"just removed","Fragments":["it."]},{"Key":"the example","Fragments":["better,","code","gets","in","in","but","more","first.","for","which","`@brayan`","in","instead","while","and"]},{"Key":"example better,","Fragments":["though"]},{"Key":"better, though","Fragments":[":)"]},{"Key":" Nice","Fragments":["--","job","work.","job!","use","work!","--","and","use","use","tips,","use","work.","use","--","job","suggestion:","work,","suggestion","docs","addition,","use","breakdown","use","solution!","solution","refactor.","solution!!","solution!!",",","recursive","attempt!","-","use","and","use","work,","use","one","and","and","with","naming","use","use"]},{"Key":"Nice --","Fragments":["I","still","I"]},{"Key":"like that","Fragments":["you're","but","you","you","in","you","better","part.","was","it's","you","the","is","`List.foldl`.","crazymykl","you","you","refactoring","syntax","too.","in","(such","one","it's","the","that","you","this","to","wrap/unwrap","might","all","a","syntax","implementation--checking","the","you've","I","you're"]},{"Key":"that you're","Fragments":["thinking","not","explicitly","using","trying","using","done,","checking","using"]},{"Key":"you're thinking","Fragments":["about","about"]},{"Key":"thinking about","Fragments":["flexibility!","it.","good","statements","this","how","it,","it,","the","the","other","the","this,","modules","the","the","it.","it,"]},{"Key":"to only","Fragments":["sort","sort","sort","sort","do","call","extract","use"]},{"Key":"only sort","Fragments":["the","the","the","the","the","the","the"]},{"Key":"sort the","Fragments":["main","main","\"root\"","\"root\"","base","baseword","baseword","base","chars","list","list","char","numbers.","base","grades,","individual"]},{"Key":"the main","Fragments":["word","word","word","strengths","method","method","code","elixir","point","word","problem","method,","point","clause,","function","method"]},{"Key":"main word","Fragments":["once","within","just","is"]},{"Key":"word once","Fragments":["while","and","without","instead","instead"]},{"Key":"once while","Fragments":["not"]},{"Key":"while not","Fragments":["sacrificing"]},{"Key":"not sacrificing","Fragments":["too"]},{"Key":"sacrificing too","Fragments":["much","much","much","much","much","much"]},{"Key":"too much","Fragments":["readability?","readability?","right","code","for","time","clarity?","readability?","clarity?","clarity?","of","of","in","overkill","code.","though,","tightness.","memory","in","about","difference","code"]},{"Key":" duh","Fragments":["```''```is"]},{"Key":"duh ```''```is","Fragments":["a"]},{"Key":"```''```is a","Fragments":["char"]},{"Key":"a char","Fragments":["list,","list","list","list,"]},{"Key":"char list,","Fragments":["sorry","match"]},{"Key":"list, sorry","Fragments":["I"]},{"Key":"sorry I","Fragments":["should","wasn't","forgot"]},{"Key":"I should","Fragments":["read","really","have","just","favour","improve","sort","have","have","only","use","go","use","know","use","have","get","have","be","have","have","add","go","have","get","get","just","look","have"]},{"Key":"should read","Fragments":["the","up"]},{"Key":"read the","Fragments":["docs","verses.","fn","function","code","docs","comments","main","tests","instructions,"]},{"Key":"the docs","Fragments":["more","and","again.","for","and","can","for","I","updated","for","and","indicate","for","for","that"]},{"Key":"docs more","Fragments":["^^"]},{"Key":" my","Fragments":["bad"]},{"Key":"my bad","Fragments":["it"]},{"Key":"bad it","Fragments":["fails"]},{"Key":"it fails","Fragments":["anyway","if","to","to","mixing"]},{"Key":" flexible","Fragments":["may"]},{"Key":"flexible may","Fragments":["not"]},{"Key":"may not","Fragments":["be","be","be","be","look","be"]},{"Key":"not be","Fragments":["the","affected.","Elixir","accessible","counted","visualising","quite","recognized","what","any","prime","true","public","the","always","simply","as","a"]},{"Key":"the right","Fragments":["word","solution","answer.","direction.","so","elixir","thing","Elixir","Elixir","track!","places.","tools.","track.","thing.","direction.","choice","way","name","thing","direction.","track,","way,","of","idea.","way","thing.","direction!","result","term","situations.","direction.","of","one.","thing.","tool(s)","direction.","idea","fold:","fold:","track","order.","choice","order"]},{"Key":"right word","Fragments":["but"]},{"Key":"word but","Fragments":["it"]},{"Key":"fails if","Fragments":["you","an","I"]},{"Key":"you input","Fragments":["```''```"]},{"Key":" i'm","Fragments":["curious,"]},{"Key":"i'm curious,","Fragments":["in"]},{"Key":"curious, in","Fragments":["what"]},{"Key":"in what","Fragments":["way","they","order","they","it"]},{"Key":"what way","Fragments":["more"]},{"Key":"way more","Fragments":["flexible?","code","efficient","elegant"]},{"Key":" Cool","Fragments":["use"]},{"Key":"Cool use","Fragments":["of"]},{"Key":"of HashDict,","Fragments":["though"]},{"Key":"HashDict, though","Fragments":["I"]},{"Key":"though I","Fragments":["agree","wasn't","am","do","don't","may","think"]},{"Key":"I agree","Fragments":["with","with","with","about","that","with","about","with","that","and","with","with","that","with","with","with","with","that","completely","that","that","having","that","with","with","with","\u003ccode\u003eString.ends_with?/2\u003c/code\u003e"]},{"Key":"agree with","Fragments":["marksim","you","your","you","your","your","not","@karli","both","all","you","@andy.","@elijah.","that,","you","you","your","that","your","some","@jerry","you","the"]},{"Key":"with marksim","Fragments":["that"]},{"Key":"marksim that","Fragments":["it"]},{"Key":"that it","Fragments":["might","could","is","captures","should","is","would","captures","is","is","was","reads","will","would","makes","takes),","doesn't","might","is","helps","can","was","may","works","doesn't","handles","gets","fits","doesn't","makes","was","comes","would","defines","matters,","would","was","makes","only","was","returns","is","was","would","would","is","gets","actually","gives","reads","returns","looks","is","is","saves"]},{"Key":"might be","Fragments":["overkill.","a","a","a","clearer","more","indicative","a","clearer","a","cleaner","more","more","nice","a","able","more","misunderstanding","a","worth","overly","interchangeable,","a","a","cleaner","a","clearer","inserted","considered","at","inconsistent","for","for","a","better.","still","able","a","able","clearer.","a","interesting","have","easier","clear","slightly","too","a","best","referring","better","a","alternately","my","interested","able","slightly","improved","able","a","better","better","worth","`silence?`","useful","a","easier","a","the","useful","able","the","easier","able","useful","worth","that","worth","my","a","doing","useful.","more","missing","because","faster","better","a","useful.","able","in","able","enhanced","called","more","a"]},{"Key":"think that","Fragments":["the","Elixir","Elixir","comes","would","was","the","would","Regex","option","silence?/1","Dict.update","it's","would","now","the","if","the","is","the","```","jah","piping","not","my","adding","word","`tokinizer`","there","it","*is*","is_question","Elixir","helps,","I","sort","would","through.","it","there"]},{"Key":"that the","Fragments":["Elixir","consensus","implementation","`silence?`","call","blank","if/else","test","question","\"?\"","cond","control","variable","elixir","input","code","compiler","implementation","\u0026amp;()","`is_anagram`","`Enum.join`","downcase","\u0026amp;(\u0026amp;1","`:lists.sort`","formatting","`sort_word`","second","```","`forceful?`","order","hash","string","grammar","inner","value,","```","iterative","is_","definition","`downcase`","unit-tests","value","program","`pretty`","determination","string","delimiters","list","algorithm","tests","code","filters","comprehensions","tests","lists","call","`anagram`","real","entire","client","code","input","range","README","function","word","README","unquoting","error","line","tests","real","last","accumulator","list","input","last","order","exercise","`is_prime?/2`","first","left","cost","values","letters","lists","function","flow","test","test","whole","sorting","test","`Stream.chunk/3`","`upperCasePattern`","function","recursive","write","algorithm","name","two"]},{"Key":"the Elixir","Fragments":["community","docs.","syntax","idiom","stdlib.","source","standard","convention","way","style","libraries.","standard","standard","solutions?","track.","version.","track.","track.","tests.","pipe","built-ins","idiom","train.","pipe"]},{"Key":"Elixir community","Fragments":["has"]},{"Key":"community has","Fragments":["taken"]},{"Key":"has taken","Fragments":["after","your"]},{"Key":"taken after","Fragments":["Ruby"]},{"Key":"after Ruby","Fragments":["when"]},{"Key":"Ruby when","Fragments":["it","it","it"]},{"Key":"when it","Fragments":["comes","comes","comes","makes","does,","is","has","really","was","becomes","came","would","is","is","comes","comes"]},{"Key":"it comes","Fragments":["to","to","to","up","down","down","to"]},{"Key":"comes to","Fragments":["the","the","the","solve","regex-fu."]},{"Key":"to the","Fragments":["naming","same","respond","'third'","convention","convention","next","method","predicate,","split.","`hey`","Elixir","approval","method","`empty?/1`","counting","beginning","function","next","exercise","unwritten","practice","parentheses,","\"heyp\"","mapping","intent","fact","state","\"?\"","conclusion","function","same","is_match","`silence?`","equivalent","pipeline","readability","fact","correct","reader.","global","phrase","nitpick","pipeline","function?","solution.","function","`_empty?`","structure","empty/silence","developer","next","letter.)","be","tests?","`silence?`","ideal.","`end`'s","same","right","store","next","need","use","notation.","anagram_matcher","code","call?","hey","specs.","code","module","function.","variables","current","end","variables","front.","reader,","code.","store","call","pipe","method","latest","beginning","other","normalisation","allowed","formatting,","output,","logic","caller.","intention","module","code","[tests](https://github.com/kytrinyx/exercism.io/blob/master/assignments/elixir/bob/bob_test.exs)","domain?","language.","elixir-core","next","input","end","_first_","general","language.","\"cond\"","catchall","back","end","code","beginning","main","end","head","`Beer`","clash","lack","place","function's","flat_map/join","code","song","magic","next","next","wrong","process.","end","other","list","lookup","next","end","end!","language","triangle","one","logic","distance,","standard","README.","module","final","`+`","list","\"map\"","big","\"DRY\"","Clojure","code","official","same","reduce","parts","functions,","same","Elixir","character","ListOps","power","number","server","result","different","Teenager","original","site!","regex","fact","list","elements","captures","same","empty","Elixir","length","tests.","head","database","different","root","non-Russian","`append`","size","same","size","regex.","logic","same","different","`upcase`d","store","fact","same","2nd","functions.","code.","head,","accumulator,","two","internal","conversation","transformation","[h|t]","list","new","point,","above","count","realization","README's","same","same","size","original","same","simple","one-line","existing","pattern","list,","language)"]},{"Key":"the naming","Fragments":["of","of","of","and","\"is_…?\"","of","here","and","is","of","of","of","of","of","tips.","standard","of","of"]},{"Key":"naming of","Fragments":["functions.","\u003ccode\u003elast_one\u003c/code\u003e","\u003ccode\u003elast_one\u003c/code\u003e","your","the","String.ends_with?","`update_word_in_dictionary`.","the","your","those","the","functions"]},{"Key":"of functions.","Fragments":["In","That's"]},{"Key":"functions. In","Fragments":["Ruby,","this"]},{"Key":"In Ruby,","Fragments":["multi-word"]},{"Key":"Ruby, multi-word","Fragments":["methods"]},{"Key":"multi-word methods","Fragments":["are"]},{"Key":"methods are","Fragments":["snake_case","all","on","the","typically","private"]},{"Key":"are snake_case","Fragments":["so"]},{"Key":"snake_case so","Fragments":["I"]},{"Key":"so I","Fragments":["think","ditched","think","can","could","just","end","can","changed","can","think","like","looked","can't","don't","wasn't","could","will","did","ended","thought","don't","have","decided","wouldn't","might","don't","have","could","have","had","used","don't","don't","assume","guess","was","can","don't","don't","think","would","suppose","skipped","played","modified","used","may","doubt","removed","can","had","split","wrote","might","didn't","can","felt","chose","don't","was","appreciate","think","could","tend","figured","just","doubt","can","could","can","wanted","would","wrote","could","modified","expect","removed","ended","just","did","could","decided"]},{"Key":"think it","Fragments":["might","might","works","might","would","helps","is","could","reads","could","is","shows","is","could","would","might","helps","helps","was","is","would","will","loses","would","would","goes","would","could","came","would","was","helps","would","belongs","reads","expects/requires","would","looks","adds","gives","has","does","would","improves","is","describes","could","would","buys","helps","would","goes","would","would","is","would","looks","gives","has","would","is","will","looks","might","flows","flows","might","could","doesn't","is","is","comes"]},{"Key":"good idea","Fragments":["to","to","in","that","in","to","here?","to","to","even","to","not","to","to","to","or"]},{"Key":"idea to","Fragments":["do","move","create","abstract","me.","put","extract","break","get","be","validate","keep","refactor","test","count","sanitize"]},{"Key":"do the","Fragments":["same","latter","actual","String.split","word","if-statments.","same","interpolation","private","same","downcasing","kind","strip","`String.downcase(word)`","downcasing","downcasing","mental","`unquote`","job,","`iolist_to_binary`","Enum.to_list.","recursion","implementation","uniq","right","`reverse`","alternate","upcasing","obvious","same","split.","flatten/String.from_char_list","same?","codepoints","String.length."]},{"Key":"same in","Fragments":["Elixir.","to_words?","the"]},{"Key":"Yeah, much","Fragments":["better,"]},{"Key":"much better,","Fragments":["thanks","but"]},{"Key":"better, thanks","Fragments":[":-)"]},{"Key":" Try","Fragments":["to","to","using","using","using","using","to","using","looking","`%r/\\p{L}/`"]},{"Key":"Try to","Fragments":["use","make","rename","use","remove","use"]},{"Key":"use methods","Fragments":["whose","names","that"]},{"Key":"methods whose","Fragments":["name"]},{"Key":"whose name","Fragments":["describe"]},{"Key":"name describe","Fragments":["what"]},{"Key":"describe what","Fragments":["they","you're"]},{"Key":"what they","Fragments":["are","might","represent.","can","can","try","support.","are","do","do.","are","do"]},{"Key":" It's","Fragments":["kind","possible","just","possible","[here](http://elixir-lang.org/docs/stable/),","beautiful","a","a","to","actually","true","legit.","probably","more","possible","a","probably","not","uncommon","good","common","a","common","generally","common","probably","common","valid","deprecated","common","inconsistent","way","not","a","not","common","pretty","a","very","a","common","also","possible.","always","generally","common","pretty","true,","funny","not"]},{"Key":"It's kind","Fragments":["of"]},{"Key":"kind of","Fragments":["part","implied","'future","figured","message","list-based","feedbacks.","instance","really","stuff","count,","a","ugly","dictionary","Anagram","accumulation","stuff","doing","message","communication","input","stuck.","like","reluctant","parenthesis","thing","knowledge","thing,","missing","construction).","ugly,","makes","subtle","facilitates","complicated.","clutters","stuff","hard","issue","wanted","hard","pictured","crap.","pattern","function","hard","complicated,","writing"]},{"Key":"of part","Fragments":["of"]},{"Key":"part of","Fragments":["conversation","your","the","the","where","the","it.","Elixir","my","the","the","the","the","the","the","the","the","a","the","this","the","`nucleotide_counts`","this","the","a","the","the","one).","this","the","why","the","the","the","what","why"]},{"Key":"of conversation","Fragments":["i"]},{"Key":"conversation i","Fragments":["had"]},{"Key":"i had","Fragments":["with","a"]},{"Key":"had with","Fragments":["other"]},{"Key":"with other","Fragments":["commenter","datatypes.","submissions","similarly"]},{"Key":"other commenter","Fragments":["about"]},{"Key":"commenter about","Fragments":["previous"]},{"Key":"about previous","Fragments":["version."]},{"Key":"previous version.","Fragments":["He"]},{"Key":"version. He","Fragments":["said"]},{"Key":"He said","Fragments":["that"]},{"Key":"said that","Fragments":["using","I","I"]},{"Key":"that using","Fragments":["regex","that","a","String","the","a","List","filter","`\u0026increment_count`","pattern-matching,"]},{"Key":"using regex","Fragments":["is"]},{"Key":"regex is","Fragments":["overkill","a","fine,","quite","the","a","generally","fine.","good.","looking","basically","so","not","a","that"]},{"Key":"is overkill","Fragments":["for"]},{"Key":"overkill for","Fragments":["this","the","this"]},{"Key":"for this","Fragments":["task.","problem.","assignment.","function.","problem","context,","=)","function?","simple","use","case","application.","is","sort","exercise.","case.","example","problem","example?","particular","exercise","info.","one","function","problem","case","simple","exercise","kind","use","case,","exercise),","exercise).","exercise","only","exercise.","exercise","exercise.","one?","exercise,","one.","problem.","function.","kind","usecase.","usecase.","exercise,","use","usecase","exercise,"]},{"Key":"did in","Fragments":["the","fact","http://exercism.io/submissions/cd2777c2cae7a6e5830c6a05","the","the","my"]},{"Key":"the new","Fragments":["submission.","submission","anonymous","syntax.","anonymous","anonymous","implementation","version","`String.slice/2`","students","student","element","order","nodes","`~`","list","`clone`"]},{"Key":" yeah","Fragments":["it"]},{"Key":"yeah it","Fragments":["reads"]},{"Key":"it reads","Fragments":["much","better","better","any","a","more","a","and","a","really"]},{"Key":"reads much","Fragments":["better","nicer"]},{"Key":"better in","Fragments":["my","this","DNA.to_rna."]},{"Key":"my latest","Fragments":["revision,","submission.","submission","submission."]},{"Key":"latest revision,","Fragments":["tnx!"]},{"Key":" tnx,","Fragments":["i've"]},{"Key":"tnx, i've","Fragments":["now"]},{"Key":"i've now","Fragments":["refactored"]},{"Key":"now refactored","Fragments":["it"]},{"Key":"refactored it","Fragments":["by"]},{"Key":"it by","Fragments":["using","using","minimizing","spreading","using"]},{"Key":"by using","Fragments":["String.upcase","Elixir's","some","a","pattern","a","functions","`String.last`","the","String.strip.","a","a","HashDict.update/4.","deft.","guards","defp","`Enum.reduce`","an","`Enum.find`.","the","ranges.","list","`/\\p{Lu}/`","`reduce`","an","the","`Enum.reduce`.","a","pattern","your","the","`defp`","```String.match?(str,","such","some","private","a","\\s","`Map.update/4`:"]},{"Key":"Could you","Fragments":["return","comment","explain","separate","break","simplify","separate","possibly","try","gain","do","do","avoid","make","then","make","come","use"]},{"Key":"you return","Fragments":["a","`true`,"]},{"Key":"return a","Fragments":["symbol","string","function","String.","boolean","list","list","list,","list","hash","bad","list","new,","10","single","boolean","truthy","`[{grade,","sorted","map,","map"]},{"Key":"a symbol","Fragments":["from"]},{"Key":"symbol from","Fragments":["the"]},{"Key":"the checks","Fragments":["and","outside","against","from","in","from","in","into","clearer"]},{"Key":"checks and","Fragments":["pattern"]},{"Key":"and pattern","Fragments":["match","matching","matching","matching","matching","matching","matching!"]},{"Key":"Nice job","Fragments":["but","separating"]},{"Key":"job but","Fragments":["I"]},{"Key":"I dont","Fragments":["think"]},{"Key":"dont think","Fragments":["this"]},{"Key":"this will","Fragments":["pass","raise","help"]},{"Key":"will pass","Fragments":["all","the"]},{"Key":"pass all","Fragments":["the","tests,","of","the","the","the","the","the","the","the"]},{"Key":"all the","Fragments":["tests.","complexity","not","documentation","logic","functions","languages","condition","right","right","methods","way","feedbacks","above","magic","function","other","way","test","time.","transforming","conditions","regex","individual","condition","tests","test","upper-case","tests","uses","`_for`","elixir","behavior","helpful","tests","potentially","other","tests","strings.","time","help","tests.","usual","punctuation","time.","tests?","tests,","students,","tests,","tests,","rest","tests?","great","time","iterations.","\"matching\"","functions","things.","feedback","feedback","work","ExUnit","conditions","other","rules","tests"]},{"Key":" Your're","Fragments":["totally"]},{"Key":"Your're totally","Fragments":["right,"]},{"Key":"totally right,","Fragments":["thanks"]},{"Key":"right, thanks","Fragments":["a","for"]},{"Key":"thanks a","Fragments":["lot","lot,","lot","lot"]},{"Key":"lot for","Fragments":["your","the","your"]},{"Key":"your nit.","Fragments":["I"]},{"Key":"nit. I","Fragments":["submitted","looked"]},{"Key":"a new","Fragments":["version.","version","version","module","requirement","version.","value","version","version.","version.","version.","version.","version.","version","version.","shorthand","value","iteration","version","version","version.","iteration.","iteration.","version,","version","version","version","HashDict,","version.","line","syntax","name","version","version","anonymous","version","version","version","version.","version","HashDict","version","version","version,","version.","copy.","students","iteration","solution","version","language.","interation.","version","version","version.","version","version.","`Graph`.","version.","test:","stack","version","stack","version","version","version","version.","version","frame.","version","version!","stack","copy","copy","one.","object","leaf","node","version.","version","stack","iteration.","version.","stack","`is_superlist/4`","list","test?","dict.","iteration","year,","type","test","stack","stack","list","value,","version"]},{"Key":" *that*","Fragments":["was"]},{"Key":"*that* was","Fragments":["the"]},{"Key":"was the","Fragments":["word","case","only","way","way","responsibility","best","motivation","key","rationale","same","return","most","best","best","first","same.","dryer","yelling.","base","reasoning"]},{"Key":"the word","Fragments":["I","criteria","to","in","passed","in","in","normalize","\"idiomatic\"","like","once","(before","list","list","rather","count"]},{"Key":"word I","Fragments":["was"]},{"Key":"Is the","Fragments":["`Enum.join`","regex","elixir","List.flatten","List.flatten","`question?`","`Enum.join`","`hey/0`","`String.from_char_list!`","\u0026amp;(...)","`String.from_char_list!`","HashDict.to_list(input)"]},{"Key":"the `Enum.join`","Fragments":["necessary?","necessary?","isn't","for"]},{"Key":" Do","Fragments":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","note","you","all","you","you","you","you","like","like"]},{"Key":"Do you","Fragments":["need","think","know","think","need","think","need","think","think","know","need","know","mean","know","think","think","know","know","think","prefer","think","really","know","think","know","mean","think","think","really","consider","think","need","really","gain","thinking","mean","think","know","want","have","think","deliberately","think","think","think","have","have","know","think","like","mean","think","mean","have","happen","mean","think,","think","think","know"]},{"Key":"you need","Fragments":["the","the","regex","to","a","the","to","this","to","to","Enum.reject;","to","all","the","the","at","to","a","an","to","the","the","the","to","to","`Set.equals`","to.","the","some","to","to","to","is","from","to","is","to","to","to","the"]},{"Key":"need the","Fragments":["\u003ccode\u003eRegex.scan/2\u003c/code\u003e","\u003ccode\u003eDict\u003c/code\u003e","import","`roll_up_counts`","parens","`is_list`","conditional","`sing(start,","semi-colons","parens","extra","`+`.","explicit","reverse.","outer","Dict","trimmed","guard","code","case","test"]},{"Key":"the \u003ccode\u003eRegex.scan/2\u003c/code\u003e","Fragments":["call?"]},{"Key":" Hmm,","Fragments":["I","the","submitted","lemme","I","come","that's","not"]},{"Key":"Hmm, I","Fragments":["didn't","wonder"]},{"Key":"didn't think","Fragments":["of","of","of","it","of","to","to","about","of","of","about","you","of","of","about","about","of","of"]},{"Key":"think of","Fragments":["using","is","doing","using","a","that?","where","modularizing","piping","a","a","a","this","it,","doing","as","some","any","a","using","a","\"d,","a","that","a","new","some","any","how","it","extracting","using","while","a","that.","a","someone","a","it,","that?","how","that.","to","a","that","that?","another"]},{"Key":"of using","Fragments":["that.","guards","2","`:else`","the","the","true","a","piping","```Regex.scan```","some","shorthand","them","a","guards","`defp`","a","parentheses","Map","library","bit","a","list_to_tuple","`end.method`","a","something","`Stream.map","`++`","it.","`String.replace`","predicates.","`[[:alpha:]]`.","a","`HashDict.fetch(@rosalyn,","`case","the","Regex.scan/3","an","map_reduce,"]},{"Key":"using that.","Fragments":["Let",":)"]},{"Key":"that. Let","Fragments":["me","me"]},{"Key":"Let me","Fragments":["try","know","know","know","know","know","update","know","know","put","know","rephrase","first","push","know","revisit","just","see","just"]},{"Key":"me try","Fragments":["it"]},{"Key":"try it","Fragments":["out.","out!","out.","again","as","out.","out,","without","out."]},{"Key":" Um,","Fragments":["i"]},{"Key":"Um, i","Fragments":["had"]},{"Key":"had a","Fragments":["markdown","cool","good","big","PR","PR","case","big","slightly","nicer","`zip`","hard","look","plural","list","range","lot","much","different","bit","bit","data","total","similar","bit","hard","working"]},{"Key":"a markdown","Fragments":["accident..."]},{"Key":" That","Fragments":["was","makes","is","does","sounds","is","said...","comes","I","`zip`","mess","may","being","only","being","doesn't","looks","was","is,","said,","tightened","is","said,","`%r/[a-z|A-Z]/`","pipeline","make","`Dict.merge`","Dict.merge","docstring","said","Range","README","won't","does","makes","is","comma"]},{"Key":"That was","Fragments":["an","my","driving","very","leftover"]},{"Key":"was an","Fragments":["accidental","accidental","accidental","erlang","accident.","implicit","issue.","`inc`","issue"]},{"Key":"an accidental","Fragments":["push","submission","submission"]},{"Key":"accidental push","Fragments":["for"]},{"Key":"push for","Fragments":["pulling"]},{"Key":"for pulling","Fragments":["a"]},{"Key":"pulling a","Fragments":["sneek"]},{"Key":"a sneek","Fragments":["peek"]},{"Key":"sneek peek","Fragments":["of"]},{"Key":"peek of","Fragments":["the"]},{"Key":"It seems","Fragments":["there's","like","like","a","like","like","the","like","like","like","weird","like","like","like","useful","about","a","you","like--as","reminiscent","like","a","a","more","like","like","so","to"]},{"Key":"seems there's","Fragments":["more"]},{"Key":"there's more","Fragments":["in"]},{"Key":"more in","Fragments":["revision","regular","`verse(0)`,","line","favor","the"]},{"Key":"in revision","Fragments":["2"]},{"Key":"revision 2","Fragments":["than"]},{"Key":"2 than","Fragments":["this"]},{"Key":"than this","Fragments":["latest","one.","version).","one"]},{"Key":"this latest","Fragments":["revision."]},{"Key":"The update","Fragments":["method","to"]},{"Key":"update method","Fragments":["is"]},{"Key":"is great!","Fragments":["Good","Congrats.","I"]},{"Key":"great! Good","Fragments":["job!"]},{"Key":" Now","Fragments":["I","that","that","I'm","you've","uses","that","I'm","I","the","I","look","look","lc","look","consider","look","look","all","look","look"]},{"Key":"Now I","Fragments":["know","do.","included"]},{"Key":"I know","Fragments":["why","these","that","better","you","the","when","this","you","for","you're","I","you","exercism","what's","what","there","I","to","these","I","it"]},{"Key":"know why","Fragments":["I","I","this","I"]},{"Key":"why I","Fragments":["didn't","decided","should","thought","prefer","chose","love","switched","went","didn't","had","ended","wrote","was","didn't","don't","did","didn't","went","think","didn't","think","tried","went","didn't","had","organized"]},{"Key":"didn't use","Fragments":["update.","the"]},{"Key":"use update.","Fragments":["The"]},{"Key":"update. The","Fragments":["docs"]},{"Key":"The docs","Fragments":["don't"]},{"Key":"docs don't","Fragments":["have"]},{"Key":"don't have","Fragments":["any","to","to","to.","to","trouble","to","the","to","to","to","much","the","niceties","to","any","a","much","a","a","that","much","so","a","to","that","good","to","to","to","more","to"]},{"Key":"have any","Fragments":["information.","chance","skipped","thoughts","examples","feel","thoughts","way","to","questions,","suggestions","nitpicks,"]},{"Key":"like this.","Fragments":["Good","Reading","I","I","I'd"]},{"Key":"this. Good","Fragments":["work."]},{"Key":"I can't","Fragments":["approve","figure","actually","call","mark","imagine","see","use","see","imagine","figure","figure","figure","find","see","figure","really","imagine","currently","think","figure","follow","(going","figure","believe","get","put"]},{"Key":"can't approve","Fragments":["it,"]},{"Key":"approve it,","Fragments":["don't"]},{"Key":"it, don't","Fragments":["know"]},{"Key":"know who","Fragments":["does"]},{"Key":"the content","Fragments":["of","of"]},{"Key":"content of","Fragments":["the","the"]},{"Key":"the `README.md`","Fragments":["as"]},{"Key":"`README.md` as","Fragments":["a"]},{"Key":"If it's","Fragments":["perfect,","something"]},{"Key":"it's perfect,","Fragments":["can"]},{"Key":"perfect, can","Fragments":["you"]},{"Key":"can you","Fragments":["approve","elaborate","give","replace","think","avoid","give","think","think","tell"]},{"Key":"you approve","Fragments":["it?"]},{"Key":"approve it?","Fragments":["or"]},{"Key":"it? or","Fragments":["how"]},{"Key":"or how","Fragments":["does","it","they","to"]},{"Key":"how does","Fragments":["that"]},{"Key":"does that","Fragments":["work?","work.","is","implementation","feel"]},{"Key":"Good points,","Fragments":["thanks"]},{"Key":"points, thanks","Fragments":["for"]},{"Key":"the tip","Fragments":["on","on","on",":)","on","about"]},{"Key":"tip on","Fragments":["`Enum.map_join`!","ends_with?","the","Unicode"]},{"Key":" Interesting","Fragments":["use","approach,","solution","approach.","use"]},{"Key":"Interesting use","Fragments":["of","of"]},{"Key":"of a","Fragments":["pseudo-type","function","function","string.","statement","larger","string?","string.","string.","boring","String","string,","difference","common","function,","way","tip.","test","guard.","native","second","function","function","way","way","word","way","way","drag,","cond/do/end.","list","slightly","second","`match_letters`","multi-line","pipeline","list","message.","macro,","character?","space","fan","list","Greeting","`cond`","constructor).","phone","case","newbie","particular","function","regex).","pipeline","language,","length","line","fn","parallel","list","way","string","`defp`","way","character","program.","string","value.","way","module","string","better","personal","call","word","string","matter","comprehension","tuple.","difference","map/map.","more","process,","macro","list","chain","conceptual","HashDict","list","list","line","prominent","recursive","list","list","function","function","process","catch-all","break","letter","way","hard","string","subtle","word","way","million","million","list.","game","leaf","hectic","list","and","way","programming","predicate","HashDict","HashDict","cleaner","function,","hidden","list","narrow","single","string?","word","function","function","binary","`\u0026()`","oneline","bit","string,","single","string,","regex","space.","reduction,","malicious,","yellow","teenager,"]},{"Key":"a pseudo-type","Fragments":["system!"]},{"Key":"pseudo-type system!","Fragments":["In"]},{"Key":"system! In","Fragments":["this"]},{"Key":"In this","Fragments":["case","specific","light,","case","context","exercise,","case,","case","implementation,","exercise","case","particular","particular","case","particular","case,","case,","case,","case","case","case","case"]},{"Key":"this case","Fragments":["though","maybe","statement","it","the","it's","I","because","it's","however.","(correct","though.","(sounds","results","because","as","because","it","I","the","I","it","the","they","I'd","you"]},{"Key":"case though","Fragments":["it","as"]},{"Key":"though it","Fragments":["might","always","does","was","seems","would","used","fails","itself"]},{"Key":"a little","Fragments":["bit","less","overkill","more","cleaner","more.","bit","odd.","more","better","weird","strange","more","easier","bit?","verbose.","too","nicer","abstract.","about","more","better.","more","harder","performance-optimization","bit","more","more","confused","with","messed","more","easier","disappointed","better.","unsettling.","redundant","more","easier","bit,","better.","unnecessary","better,","awkward","bit","more","more","bit","uncommon","inefficient.","lazy/complacent","nicer.","bit","bit","too","too","trick","easier","weird","better,","bit","bit","bit","better","bit","better.","brittle","clearer","while","slower","bit","odd","less","simpler","skeptical","less","tricky","awkward","bit","bit","awkward","confusing","more","fuzzy","bit","slow","verbose","bit","non-obvious.","easier","regex.","bit,","easier","style","less","better?","more","bit","carried","muddled.","unexpected,","with","weird,","cleaner,","more","more","bit","more"]},{"Key":"little bit","Fragments":["overkill","different","of","awkward","complicated","easier","condensed","and","complex","to","more","confusing,","awkward","hard","easier","clearer?","long.","more"]},{"Key":"bit overkill","Fragments":["and","for","to"]},{"Key":"overkill and","Fragments":["you","the"]},{"Key":"and you","Fragments":["could","have","had","needed","had","don't","can","no","can","can","wouldn't","should","have","could"]},{"Key":"could probably","Fragments":["get","drop","do","combine","improve","also","be","be","replace","make","figure","do","be","do","do","get"]},{"Key":"probably get","Fragments":["away","away","rid","rid"]},{"Key":"get away","Fragments":["with","with","with","with"]},{"Key":"away with","Fragments":["just","the","it,","being","it:","copy"]},{"Key":"with just","Fragments":["returning","one","the","two","`f`","a","a"]},{"Key":"returning the","Fragments":["response","phone"]},{"Key":"the response","Fragments":["right","logic","thus","logic","thus","of","to"]},{"Key":"response right","Fragments":["from"]},{"Key":"right from","Fragments":["the"]},{"Key":"the shout?,","Fragments":["question?"]},{"Key":"shout?, question?","Fragments":["and"]},{"Key":"question? and","Fragments":["silence?"]},{"Key":"and silence?","Fragments":["functions."]},{"Key":"silence? functions.","Fragments":["I"]},{"Key":"functions. I","Fragments":["would","might","believe","submitted","noticed","suppose","hadn't"]},{"Key":"would also","Fragments":["consider","rename","recommend","match","consider","let","make","look","avoid"]},{"Key":"also consider","Fragments":["combining","using","using","using"]},{"Key":"consider combining","Fragments":["lines"]},{"Key":"combining lines","Fragments":["26"]},{"Key":"lines 26","Fragments":["and"]},{"Key":"26 and","Fragments":["27"]},{"Key":"and 27","Fragments":["in"]},{"Key":"27 in","Fragments":["to"]},{"Key":"in to","Fragments":["one","their","their","a","their","abstracting","their","their","List.flatten.","the","Elixir.","be","the","each"]},{"Key":"to one","Fragments":["function","expression","clause","but"]},{"Key":"one function","Fragments":["called","to","as"]},{"Key":"function called","Fragments":["silence?.","`split/1`","'scan'","'graphemes',","'scan'"]},{"Key":"Love the","Fragments":["is_whatever?","descriptive","use","use","use","increment"]},{"Key":"the is_whatever?","Fragments":["function"]},{"Key":"is_whatever? function","Fragments":["(but"]},{"Key":"function (but","Fragments":["agree"]},{"Key":"(but agree","Fragments":["that"]},{"Key":"agree that","Fragments":["it","`sentence","is","renaming","I","that","pattern","it's","it","this","the","it's"]},{"Key":"it could","Fragments":["do","simplify","be","be","be","make","help","simplify","possibly","be","quickly","cause","be","have","help","silplify","be","be","be","lead","arguably","be","be","be"]},{"Key":"do without","Fragments":["the","the"]},{"Key":"without the","Fragments":["is_)","\"is_\"","commented","`amp;`.","module","qualified","tuple","\u0026amp;","need","flatten.","module","code.","`is_`","parens,","recursion","flatten","escape","regex?","__info__","extra"]},{"Key":"the is_)","Fragments":["Great"]},{"Key":"is_) Great","Fragments":["way"]},{"Key":"Great way","Fragments":["to"]},{"Key":"to take","Fragments":["the","a","care","much","credit","a","a","into","advantage","a","a","a","enough","these","to"]},{"Key":"take the","Fragments":["non-obvious","\"domain\"","result","`anagrams?`","'if'"]},{"Key":"the non-obvious","Fragments":["way"]},{"Key":"non-obvious way","Fragments":["to"]},{"Key":"to deal","Fragments":["with","with","with","with","with"]},{"Key":"deal with","Fragments":["\"else\"","punctuation","the","it","the","non-alpha","non-alphabetic","this."]},{"Key":"with \"else\"","Fragments":["in"]},{"Key":"\"else\" in","Fragments":["Elixir/Erlang"]},{"Key":"in Elixir/Erlang","Fragments":["out","you","you","you","you","you","you","you"]},{"Key":"Elixir/Erlang out","Fragments":["of"]},{"Key":"out of","Fragments":["the","consistency.","nitpicks","the","my","discussing","something","`count`","a","the","it!","place.","the","the","your","curiosity,","function","memory","\"for_iter\"","some","date","my","time."]},{"Key":" Nice!!!","Fragments":["Love"]},{"Key":"Nice!!! Love","Fragments":["the"]},{"Key":"descriptive function","Fragments":["names.","name"]},{"Key":"function names.","Fragments":["You","Looking","That"]},{"Key":"names. You","Fragments":["could"]},{"Key":"probably drop","Fragments":["the"]},{"Key":"drop the","Fragments":["is_","Enum.count","\"?\",","prefix","parens"]},{"Key":"the is_","Fragments":["prefix","prefix","seems","on","prefix"]},{"Key":"is_ prefix","Fragments":["though","from","a"]},{"Key":"prefix though","Fragments":["since"]},{"Key":"though since","Fragments":["that"]},{"Key":"since that","Fragments":["is","looks"]},{"Key":"that is","Fragments":["kind","Elixir's","\"","a","already","even","true,","reads","mostly","that","trivially","a","possible","now","really","specifically","not","prefixed","easier","still","specific","to","like","making","more","probably","one","so","the","not","a","0","the","because","the","a","a","why","that"]},{"Key":"is kind","Fragments":["of","of","of","smashed"]},{"Key":"of implied","Fragments":["by"]},{"Key":"implied by","Fragments":["the"]},{"Key":"by the","Fragments":["question","way,","pipe","way!","nesting.","tests,","first","conversions.","standard","`\\w+`","last","example","function","length","result","accumulator","input","compiler","millions."]},{"Key":"the question","Fragments":["mark.","is,","mark","better.","check,","and","mark","mark","mark","mark","mark.","and","one,"]},{"Key":"question mark.","Fragments":["Other","Doesn't","I'm"]},{"Key":"mark. Other","Fragments":["than"]},{"Key":"Other than","Fragments":["that","that","that,","that,","that,","that","that,","that,","that,","that","that,","that,","that,","that,","that","that,"]},{"Key":"than that","Fragments":["looks","nitpick,","my","not","it"]},{"Key":"that looks","Fragments":["great!","like","like","gross,","great.","more"]},{"Key":"is awesome!","Fragments":["Love","Like"]},{"Key":"awesome! Love","Fragments":["the"]},{"Key":"of doc","Fragments":["=)"]},{"Key":"would consider","Fragments":["breaking","not","a","replacing"]},{"Key":"consider breaking","Fragments":["out","the"]},{"Key":"breaking out","Fragments":["those","some","the"]},{"Key":"out those","Fragments":["things","transformation","internal"]},{"Key":"those things","Fragments":["that","is","in","were"]},{"Key":"things that","Fragments":["define","\"might","really","might","I","threw","work","iterators","are","I","are"]},{"Key":"that define","Fragments":["if","a"]},{"Key":"define if","Fragments":["someone"]},{"Key":"if someone","Fragments":["is","tells"]},{"Key":"someone is","Fragments":["shouting"]},{"Key":"is shouting","Fragments":["vs","if"]},{"Key":"shouting vs","Fragments":["ask"]},{"Key":"vs ask","Fragments":["a"]},{"Key":"ask a","Fragments":["question"]},{"Key":"a question","Fragments":["(ie","with","mark","like","mark","mark,","mark.","mark?","mark","mark","by","mark","mark","mark","mark:","mark,","mark,","mark","in","mark","mark.","mark.","and"]},{"Key":"question (ie","Fragments":["speech"]},{"Key":"(ie speech","Fragments":["=="]},{"Key":"speech ==","Fragments":["\"\"","String.upcase(speech))"]},{"Key":"== \"\"","Fragments":["or","as","end`.","instead","end","instead"]},{"Key":"\"\" or","Fragments":["speech"]},{"Key":"or speech","Fragments":["=="]},{"Key":"== String.upcase(speech))","Fragments":["in"]},{"Key":"String.upcase(speech)) in","Fragments":["to"]},{"Key":"to their","Fragments":["own","own","own","own","own","own","own","own","own","own"]},{"Key":"their own","Fragments":["named","in","named","named","named","named","functions","functions","thus","(defp","functions","methods?","functions.","methods.","private"]},{"Key":"own named","Fragments":["functions","functions,","method,","methods,","functions"]},{"Key":"named functions","Fragments":["to","(","you'd","to","or","with","one"]},{"Key":"functions to","Fragments":["improve","a","reveal","increase","increase","define","end","give","come","make","get","manipulate","be","give","encapsulate","name","anonymous","unpack","work","eval.","make","name","give","avoid","wrap","return","private.","do","use"]},{"Key":"to improve","Fragments":["readability.","the","encapsulation,","this","it.","performance.","readability.","performance?","performance,"]},{"Key":"improve readability.","Fragments":["Also,"]},{"Key":"readability. Also,","Fragments":["maybe","have"]},{"Key":"Also, maybe","Fragments":["there"]},{"Key":"maybe there","Fragments":["is","is"]},{"Key":"there is","Fragments":["something","another","a","a","a","a","a","a","a","not","a","a","a","a","`Enum.foldl`","a","a","a","in","in","a","probably","a","a","not","a","a","a","a","a","nothing","for","at","a","a","no","an","a","`Enum.count/2`","a","essentially","a","so","a","a","no","an","no","so","a","a","no","a","not","at","an","a","a","at","no","still","a","no","a","only","an","no","ever","some","a","any","always","another","no"]},{"Key":"is something","Fragments":["a","like","I'm","I","many","many","advanced","like"]},{"Key":"something a","Fragments":["little"]},{"Key":"little less","Fragments":["complicated","explicit","readable.","work"]},{"Key":"less complicated","Fragments":["than"]},{"Key":"complicated than","Fragments":["a"]},{"Key":"than a","Fragments":["regex","separate","simple","Regex.","Regex,","length","string)","counts","list","`cond`","big","list","small","list.","list","\"cond"]},{"Key":"a regex","Fragments":["you","that","is","and","in","in","which","for","instead","that","at","to","felt","to","(`\\p{}`","expert,","`\\p{L}`","to","expert","but"]},{"Key":"regex you","Fragments":["could","had,"]},{"Key":"could use","Fragments":["on","`Enum.filter`","doctests","`Regex.scan(%r/\\w+/,phrase)`","them","doctests","some","simple","`Enum.reduce`","the","`String.strip`.","`true`,","String.ends_with?","Regex.scan","a","on","here","a","a","the","the","`\u0026amp;add_or_increment/2`","pointers","pattern","for","`String.strip(statement)`","a","`String.ends_with?`","\u003ccode\u003eRegex.scan/2\u003c/code\u003e","in","`\u0026amp;1`","like","the","two","more","\u003ccode\u003eguards\u003c/code\u003e","pattern","something","a","`defp`","Erlang","it","in","`number/1`","`Regex.scan/2`","`String.to_char_list!`","a","a","`Regex.scan`","it","`Enum.count/2`","Dict.update/3","your","`Stream.map`","a","`|\u003e","`Regex.scan`","`unwrap`,","the","to","`String.ends_with?`.","bit","the","that","those","`translation_dict[x]`,","some","pattern","the","the","the","more","to","or","to"]},{"Key":"use on","Fragments":["line","line"]},{"Key":"Oh, very","Fragments":["cool."]},{"Key":"very cool.","Fragments":["Thanks"]},{"Key":"cool. Thanks","Fragments":["redmar!","for","for"]},{"Key":"Thanks redmar!","Fragments":["It"]},{"Key":"redmar! It","Fragments":["looks"]},{"Key":"It looks","Fragments":["like","like","like","good","nicer","a","a","like","like"]},{"Key":"looks like","Fragments":["from","shouting","ruby.","with","you're","the","if","a","it","you've","I","`[^[]`,","the","you're","an","it","we","it","the","you're","a","you're","it","a","the"]},{"Key":"like from","Fragments":["that"]},{"Key":"from that","Fragments":["the","looks"]},{"Key":"the consensus","Fragments":["is"]},{"Key":"consensus is","Fragments":["around","reached"]},{"Key":"is around","Fragments":["using"]},{"Key":"around using","Fragments":["parens"]},{"Key":"using parens","Fragments":["in"]},{"Key":"parens in","Fragments":["functions","Elixir","elixir.","if"]},{"Key":"in functions","Fragments":["of","declarations","will","instead","for","works.","and","\"String.strip\""]},{"Key":"functions of","Fragments":["arity","their","their","the"]},{"Key":"of arity","Fragments":["greater"]},{"Key":"arity greater","Fragments":["than"]},{"Key":"greater than","Fragments":["0.","the"]},{"Key":"Looks pretty","Fragments":["much","good.","good!","nice!","good.","good","good.","good","good.","good.","good.","good.","good.","good.","good.","good.","nice!","good!","good.","nice","nice.","nice."]},{"Key":"much solid","Fragments":["to"]},{"Key":"solid to","Fragments":["me,"]},{"Key":"to me,","Fragments":["one","I","I","but","`yelling?`","why","and","so","it's","but","but","so","I","any","even","feel","maybe"]},{"Key":"me, one","Fragments":["really"]},{"Key":"one really","Fragments":["nitpicky"]},{"Key":"really nitpicky","Fragments":["thing"]},{"Key":"nitpicky thing","Fragments":["I"]},{"Key":"thing I","Fragments":["can","want","would","see","will","suggest","can","could","could","would","think","could","notice","would","noticed,","didn't","would","could","realized","just","might","recently","might","suggest"]},{"Key":"I can","Fragments":["think","figure","simplify","see","see","see","move","resubmit","read","and","refine","only","use","match","discuss","avoid","think","offer","stomach","do.","see","see","add","submit","sort","just","see","imagine","use","do","make","learn","use","never","think","understand","look","use","take","improve?","understand","bring","see","see","submit","do","make","see","see","really","see","see","believe","spend","point","come","understand","get","use","visualize","solve","understand","add","see","see","make","make","see","tell,","use","see","use","tell,","add","do","with","come","see","access","probably"]},{"Key":"can think","Fragments":["of","of","of","of"]},{"Key":"of is","Fragments":["the"]},{"Key":"is the","Fragments":["name","same","naming","naming","river","point","line","application","name","best","name","best","anonymous","argument","most","`hash`","clause","first","same","correct","same","order","`verse(1)`","optimal","`!`","underscore","advantage","naming","Elixir","result","first","first","right","disadvantage","normal","last","difference","generally","last","“readable","if","best","first","best","same","right","same","interface","creation","idiomatic","correct","favored","only","biggest","very","first","main","nicer","way","forced","concept","best","last","wrong","same","convention","first","primitive","same","gist","most","reason","output","reverse","character","same","first","same","first","left","left","way","pipe","negation","convention,","first","way","representation","most","regex","right","issue.","doctest","```/4```","correct","change","more","important","downcased","last","last","case","expected","lesson","is_","same"]},{"Key":"the name","Fragments":["of","should","should","`_`,","of","of","of","of","of","`do_extract_words`","of","`characters_used_in`.","\"dna\"","`string`?","as","of","of","and","`replace_when_is_thymidine`.","of","of","(`has_letters?`).","and","of","is","of","of","`last_four`","`interval`...","of","of","could","whereas","can","doesn't"]},{"Key":"name of","Fragments":["the","your","the","the","the","predicate","String.ends_with?/2.","`something`","the","the","the","the","the","`dict`...","that","the","the","a"]},{"Key":"the `other_words`","Fragments":["parameter,"]},{"Key":"`other_words` parameter,","Fragments":["maybe"]},{"Key":"parameter, maybe","Fragments":["something"]},{"Key":"maybe something","Fragments":["like"]},{"Key":"something like","Fragments":["`candidates`","that","\"silent?\"","String.last(message)","this:","\"silent?\"","\"silent?\"","this","i18n,","e.g.:","`\u00261","```sentence","`%r/[a-z0-9]+/`","response_for","`@tre","```","that","this","this:","`is_pause?`","StatementType.","```","`Enum.count`","`words_in_sentence`,","\u003ccode\u003eupdate_words(\u0026amp;1,","`string_to_list`","```count_words_in_list```.","`rna_counterpart(nucleotide)`","that.","an","`String.uniq`","this:","`mutation?`","update,","`Regex.match?(%r/^[\\p{Sc}\\p{S}]+$/,","this:","the","`[area_code,","that.","this","`Enum.map(comparisons,","that","this:","that.","frequencies","`predicate`","`%r/\\w+/`","`acc`.","that,","\"This","String.starts_with(\"","`numerals_worker`","that.","that,","(warning:","`\\p{L}`","`contains_letters?`","this:","`silence?`","`previous_word_count`.","`sorted_graphemes`,","this"]},{"Key":"like `candidates`","Fragments":["or"]},{"Key":"`candidates` or","Fragments":["`potential_anagrams`"]},{"Key":"or `potential_anagrams`","Fragments":["would"]},{"Key":"`potential_anagrams` would","Fragments":["make"]},{"Key":"would make","Fragments":["it","sure","the","perfect","your","this","it","it","the","it","it","more","anything","things","this","this","your","sense","sense","sense","one","the","the","it","the","the","the","that","the","it","it","cleanup","the","better","the","the","is"]},{"Key":"it clearer","Fragments":["what","what's","to"]},{"Key":"clearer what","Fragments":["those","they","it's"]},{"Key":"what those","Fragments":["words","regexes","different","things"]},{"Key":"those words","Fragments":["represent?"]},{"Key":"Nice! Looks","Fragments":["good"]},{"Key":"Looks good","Fragments":["overall.","to","though.","to","to","to",",","in","in","now.","to","in","to","to"]},{"Key":"good overall.","Fragments":["A"]},{"Key":"overall. A","Fragments":["couple"]},{"Key":"A couple","Fragments":["more","of","of","of","of","improvements","of","of","of"]},{"Key":"couple more","Fragments":["nitpicks:","lines"]},{"Key":"* Is","Fragments":["there","a","there"]},{"Key":"there much","Fragments":["benefit"]},{"Key":"much benefit","Fragments":["to","to"]},{"Key":"benefit to","Fragments":["having","assigning","the","sorting"]},{"Key":"to having","Fragments":["`do_match`,","it","conditional","that"]},{"Key":"having `do_match`,","Fragments":["since"]},{"Key":"`do_match`, since","Fragments":["you"]},{"Key":"since you","Fragments":["just","can","don't","don't","can","initialize","can","have","can","noticed","have"]},{"Key":"you just","Fragments":["pass","keep","use","mark","found","felt","have","check"]},{"Key":"just pass","Fragments":["the","the","reducing_function","the","the"]},{"Key":"pass the","Fragments":["same","the","function","function","`what`","tests","generated","source","`/u`","tests.","pid","tests?","same","filter.","tests.","test","tests.","tests.","test","tests?","test","test","first"]},{"Key":"same arguments","Fragments":["directly"]},{"Key":"arguments directly","Fragments":["from"]},{"Key":"directly from","Fragments":["`match`?","Erlang"]},{"Key":"You can","Fragments":["simplify","avoid","add","use","default","make","simplify","leave","use","see","also","use","use","literally","simplify","use","still","use","shorten","clean","also","use","use","use","use","drop","check","move","look","run","use","omit","also","simplify","import","also","do","write","probably","do","define","pattern","condense","reduce","use","register","pass","just","use","find","do","write","write","use","use","use","express","fix","implement","use","use","simplify","use","convert","do","write","mark","simplify","write","create","use","use","modify","do","use","also","use","use","destructure","change"]},{"Key":"can simplify","Fragments":["your","it","the","the","your","the","the","count_all","this","your","some","that","your"]},{"Key":"simplify your","Fragments":["filtering","`sing/2`","#anagrams?","rollup","yelling?","regex.","`is_question()`","regex","`do_count`","sanitization","`match_word`","approach.","implementation.","pattern","code.","code","Hash","code"]},{"Key":"your filtering","Fragments":["function"]},{"Key":"filtering function","Fragments":["by","definition","which"]},{"Key":"function by","Fragments":["using","putting","using","using"]},{"Key":"using Elixir's","Fragments":["partial"]},{"Key":"Elixir's partial","Fragments":["application","application"]},{"Key":"partial application","Fragments":["syntax:","syntax,","or","to","syntax."]},{"Key":"application syntax:","Fragments":["`is_match(word,"]},{"Key":"syntax: `is_match(word,","Fragments":["\u00261)`"]},{"Key":"pretty good.","Fragments":["Is","`cond`","I","Just","Interesting","Just","The","A","One","A","There","You've","One","What","There's","For","I","One"]},{"Key":"good. Is","Fragments":["there"]},{"Key":"a reason","Fragments":["you","to","for","for","for","you","you","why","you",":)","for","you","you","for"]},{"Key":"reason you","Fragments":["use","set","compared","prefer","went","append","chose","use","didn't"]},{"Key":"you use","Fragments":["`Enum.reject`","strict","atoms","so","whitespace","a",":","default","pattern","`List.zip/1`","String","is","pattern","`String.downcase`","pattern","pipelines","so","imports","a","a","explicit","List.zip","pattern","Record.new(a:","functions","a","reduce","`Enum.reduce`","a","case","the","the","remove_number.","parentheses","the","it","that","a"]},{"Key":"use `Enum.reject`","Fragments":["and","with"]},{"Key":"`Enum.reject` and","Fragments":["then"]},{"Key":"then negate","Fragments":["the"]},{"Key":"negate the","Fragments":["clause?","result"]},{"Key":"the clause?","Fragments":["You"]},{"Key":"clause? You","Fragments":["could"]},{"Key":"use `Enum.filter`","Fragments":["and"]},{"Key":"`Enum.filter` and","Fragments":["remove"]},{"Key":"and remove","Fragments":["the","the","\u003ccode\u003eis_\u003c/code\u003e.","line","the"]},{"Key":"remove the","Fragments":["negation","whole","method","duplication.","String.","String.","call","nil","need","`!silence?(message)`","call","commented","filter","call","guard","Regex.replace","flatten","commented-out","parentheses","two","need","length","guards,","initial"]},{"Key":"the negation","Fragments":["for","operator.","of","of"]},{"Key":"negation for","Fragments":["the"]},{"Key":"same effect,","Fragments":["but","some"]},{"Key":"effect, but","Fragments":["it"]},{"Key":"bit more","Fragments":["direct.","like","clear.","intent","modular?","DRY).","modular?","intent","concise.","readable.","toward","liberally","readable,","readable.","verbose","generic,","speed","self","brevity.","awkward,","efficient","complicated.","complex","expensive","efficient","subtle","clearly,","direct","work","data:","more","explicit","concise.","readable","clear","nicely.","space","I","of"]},{"Key":" Oh","Fragments":["sorry,","great,","sure.","right,","wow,","I","my,","nice,","yes,"]},{"Key":"Oh sorry,","Fragments":["didn't"]},{"Key":"sorry, didn't","Fragments":["know."]},{"Key":"Good point","Fragments":["on","about","on","on","concerning"]},{"Key":"point on","Fragments":["the","the","the","iolist_to_binary."]},{"Key":"the function","Fragments":["naming.","ends","names","is","could","body","names","happens","names","names","'hey'.","into","ends","in","that","call","calls","calls","ends","so","names","that","names","itself","definition","is_saying_nothing?","params.","and","directly.","in","declarations,","in","passed","(or","`replace_thymidine`","is","with","name","name","(Dict.put","level.","head","extremely","bodies","etc","much","arguments,","please","capture","definition","of","of","is","(`x`","for","capture","that","the","heads.","arguments","parameters.","that","arguments,","would","interface","doesn’t","is","gets","works","appears","call","is","gets","named","for","for","is","gets","is","gets","is","gets","is","`update_dict`","is","even","in","names","short-hand","at","`is_anagram?/2`","of","names","head:","body.","is","gets","is","gets","and"]},{"Key":" You're","Fragments":["right,","right","right;","right,","right,","doing","probably","right","on","having","still","iterating","using","doing","scanning","missing","mixing","using","searching","recomputing","a","on","not"]},{"Key":"You're right,","Fragments":["reverse","the","thanks"]},{"Key":"right, reverse","Fragments":["could"]},{"Key":"reverse could","Fragments":["be"]},{"Key":"be implemented","Fragments":["much","differently","in","with","in","with","in","in","by","with","(it's","just","in"]},{"Key":"implemented much","Fragments":["simpler,"]},{"Key":"much simpler,","Fragments":["but","thanks"]},{"Key":"simpler, but","Fragments":["I"]},{"Key":"I wanted","Fragments":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","a","to","to","my","some","the","to","more","to","to","to","it","to","to","to","to","to","a","to"]},{"Key":"wanted to","Fragments":["practice","write","make","write","know","try","have","use","point","use","try","try","maximize","document","do","use","know.","avoid.","rebind","to","use","use","make","point","get","see","place","avoid","the","point","make","implement","avoid","go","submit","use","explain","like:","shorten","point","do","not","do","get","commit","split","use","use","say"]},{"Key":"to practice","Fragments":[":-).","regular","specifying","tail-recursion"]},{"Key":"practice :-).","Fragments":["Here's"]},{"Key":":-). Here's","Fragments":["a"]},{"Key":"Here's a","Fragments":["simpler","different","short","bit","'reimplementing","tail","tail","tail","tail","tail","tail","tail"]},{"Key":" `def","Fragments":["reverse(string),"]},{"Key":"`def reverse(string),","Fragments":["do:"]},{"Key":"reverse(string), do:","Fragments":["string"]},{"Key":"do: string","Fragments":["|\u003e"]},{"Key":"string |\u003e","Fragments":["String.graphemes"]},{"Key":"|\u003e String.graphemes","Fragments":["|\u003e"]},{"Key":"String.graphemes |\u003e","Fragments":["Enum.reverse"]},{"Key":"|\u003e Enum.reverse","Fragments":["|\u003e"]},{"Key":"Enum.reverse |\u003e","Fragments":["to_binary`"]},{"Key":" Once","Fragments":["an","you","I","I"]},{"Key":"Once an","Fragments":["exercise"]},{"Key":"an exercise","Fragments":["is","after","involving","requires","and","author,","you"]},{"Key":"exercise is","Fragments":["unlocked,","finished","not","to","now","being","about","to","to","also","not","great","pretty"]},{"Key":"is unlocked,","Fragments":["you"]},{"Key":"unlocked, you","Fragments":["can't"]},{"Key":"you can't","Fragments":["resubmit","use","do","mix","nest","find","use","comment"]},{"Key":"can't resubmit","Fragments":["the"]},{"Key":"resubmit the","Fragments":["previous"]},{"Key":"the previous","Fragments":["one,","comment,","feedback","line","submission:","version","line",":","`Enum.map_filter`","exercise","one.","one,","revision","versions,","(word_count)","exercise,","nitpickers","iteration;","one.","version","one.","iteration,","version","submission,","version:"]},{"Key":"previous one,","Fragments":["currently.","but"]},{"Key":"one, currently.","Fragments":["However,"]},{"Key":"currently. However,","Fragments":["here's"]},{"Key":"However, here's","Fragments":["some"]},{"Key":"here's some","Fragments":["feedback"]},{"Key":"some feedback","Fragments":["on","on","on"]},{"Key":"feedback on","Fragments":["this","the","stuff","stuff","which","this.","this.","cleaning","other","this,","the","that,","this.\"","how"]},{"Key":"on this","Fragments":["one","web","topic?","refactor","whole","site","code","one","and","one","or","with","and","page","one.","one","info,","one.","iteration","submission...se","webpage...","one"]},{"Key":"this one","Fragments":["anyway...","for","does.","good","better,","took","is","is","though.","before","has","up","was","because","seems","doesn't","(it","was","yourself","is","(not","has","and","is","takes","much","looked","as","minor","was","because"]},{"Key":"one anyway...","Fragments":[";)"]},{"Key":" Couldn't","Fragments":["you","you","you"]},{"Key":"Couldn't you","Fragments":["just","just","eliminate"]},{"Key":"just keep","Fragments":["the","in"]},{"Key":"keep the","Fragments":["`interpret`","public","\"is_\"","code","code","code","code","public","cond","following","last"]},{"Key":"the `interpret`","Fragments":["name","functions"]},{"Key":"`interpret` name","Fragments":["instead"]},{"Key":"name instead","Fragments":["of","of","of"]},{"Key":"of `do_interpret`?","Fragments":["Pattern"]},{"Key":"`do_interpret`? Pattern","Fragments":["matching"]},{"Key":"Pattern matching","Fragments":["on","isn't","is","the","supports","(case)","works"]},{"Key":"on arguments","Fragments":["would"]},{"Key":"arguments would","Fragments":["make"]},{"Key":"make sure","Fragments":["you","it's","that","you've","they're","you","it's","people","they","that"]},{"Key":"sure you","Fragments":["hit","wanted","noticed","changed"]},{"Key":"you hit","Fragments":["the"]},{"Key":"hit the","Fragments":["`interpret/2`","expected","range"]},{"Key":"the `interpret/2`","Fragments":["clauses,"]},{"Key":"`interpret/2` clauses,","Fragments":["not"]},{"Key":"clauses, not","Fragments":["the"]},{"Key":"not the","Fragments":["current","best","implementation.","`hey`","same","most","best","same","last","number","same.","best","same","best","case?","most","best","original","case","call.","case,","names","string.","way","target","first","case.","most"]},{"Key":"current `interpret/1`","Fragments":["clauses."]},{"Key":"could make","Fragments":["a","the","this","`roll_up_counts`","this","`count`","this","use","it","that","the","the","it","this","the","it","the","module","it"]},{"Key":"make a","Fragments":["simpler","regex","change.","cleaner","difference.","choice","difference,","binary","tradeoff,","word","point","few","module","single","difference.","whitelist","concise","boolean"]},{"Key":"simpler `String.reverse`","Fragments":["based"]},{"Key":"`String.reverse` based","Fragments":["on"]},{"Key":"Does delegating","Fragments":["from"]},{"Key":"delegating from","Fragments":["`verse`"]},{"Key":"from `verse`","Fragments":["to"]},{"Key":"`verse` to","Fragments":["`sing_verse`"]},{"Key":"to `sing_verse`","Fragments":["buy"]},{"Key":"`sing_verse` buy","Fragments":["you"]},{"Key":"buy you","Fragments":["anything","a"]},{"Key":"you anything","Fragments":["over","in","in"]},{"Key":"anything over","Fragments":["having","a"]},{"Key":"over having","Fragments":["the"]},{"Key":"having the","Fragments":["guards","message","functions","conditional","public","`hey/1","same","`identical?`","`Greeting`","newline","`@`","same","HashDict","'match'"]},{"Key":"the guards","Fragments":["directly","are","as","and"]},{"Key":"guards directly","Fragments":["on","on"]},{"Key":"directly on","Fragments":["`verse`?","`verse/1`."]},{"Key":"is very","Fragments":["readable,","nicely","clear,","readable!","simple","concise,","straightforward.","pretty.","clear,","clear,","similar","good.","hard","readable,","unreadable","cool)","straightforward","rare","appropriate","open","powerful,","neat","easy","easy","hard","large"]},{"Key":"very readable,","Fragments":["but","you"]},{"Key":"readable, but","Fragments":["there's","there's","the","either","I","if","kudos"]},{"Key":"but there's","Fragments":["a","a","some","a","quite","a","a","still","a","a"]},{"Key":"a fair","Fragments":["bit","bit","point,","understanding?"]},{"Key":"fair bit","Fragments":["of","of"]},{"Key":"of duplication","Fragments":["between","between","between","between","between","in"]},{"Key":"duplication between","Fragments":["the","the","the","the","the","the","`total`"]},{"Key":"between the","Fragments":["`sing_verse`","Ruby","`verse`","strings.","strings","strings.","strings.","strings.","name","expected","two","`filter_map`","first","concat","two","two."]},{"Key":"the `sing_verse`","Fragments":["clauses."]},{"Key":"`sing_verse` clauses.","Fragments":["Do"]},{"Key":"clauses. Do","Fragments":["you"]},{"Key":"think it's","Fragments":["a","readable,","a","a","better","important","a","slightly","a","necessary","a","the","in","still","a","better","less","worse","a","better","more","a","more","just","possible.","just","possible","possible","worth","my","clever","a","useful","always","a","bad,","totally","*wrong*,","actually","buggy"]},{"Key":"good balance","Fragments":["as","between"]},{"Key":"balance as","Fragments":["is,"]},{"Key":"as is,","Fragments":["or","but"]},{"Key":"is, or","Fragments":["is"]},{"Key":"or is","Fragments":["there","it","that","it","it","it"]},{"Key":"is there","Fragments":["a","a","a","a","a","another","a","any","a","any","a","an","a","a","a","a","a","an","a","a","any","a","a","to","some","a"]},{"Key":"to remove","Fragments":["some","the","the","some","duplication","the","the","some","some","some","your","the","the","`List.flatten/1`","the","characters","some","a","the","the","as","`cell","the","elements","a"]},{"Key":"remove some","Fragments":["duplication","of","logic","of","code","of","of","of"]},{"Key":"some duplication","Fragments":["without","in","between","between"]},{"Key":"duplication without","Fragments":["sacrificing"]},{"Key":"without sacrificing","Fragments":["too","much","readability?","too","too","too","at","too","readability","readability"]},{"Key":"way not","Fragments":["to"]},{"Key":"not to","Fragments":["have","use","make","mention","merge","import?","append","just","call","use","put","do","use","define","mention","be","use","move","read","call","improve"]},{"Key":"to have","Fragments":["an","the","a","it","the","to","intend","but","a","another","all","update/0","#anagram_for?","a","a","@cicero","the","a","to","an","both","ambiguities","idioms","some","only","explicit","something","to","instance","them.","a","to","no","the","a","early","separate","a","significantly","keywords).","repetition","repetition","the","the","issues.","someone","a","ugly","only","fun","the","a","two","a","broken","all","the","a","that","a","the","you","them","2","different"]},{"Key":"have an","Fragments":["if","update/2","older","errant","unnecessary","analog","`Enumerable`","`Enumerable`","easy","\u003ccode\u003einvalid_string?(str)\u003c/code\u003e","explicit","example","analog"]},{"Key":"an if","Fragments":["in","to"]},{"Key":"if in","Fragments":["a","doubt","filter"]},{"Key":"in a","Fragments":["case","different","bunch","function","project","lot","little","private","`guard`","guard.","simpler","simpler","ruby","way","different","single","single","different","language","couple","null,","language","single","different","chain","functional","pattern","tuple?","more","tuple.","question","possible","guard","largely","function","public","different","single","single","real-world","function","module","function","helper","predicate","`cond`","local","real","certain","very","boolean","real","separate","simple","function/method,","guard","function","language","module","PR.","`HashDict`","function","protocol","protocol","`fn`:","string","regex.","`priv`","module","more","function","module","string","particular","way","single","single","single","PR","lot","much","PR","hurry","tiny","list","real","functional","slightly","close","tight","different","single","loop","template","single","different","list.","bunch","function","function","non-imperative","similar","couple","wrong,","function","language","lot","wrong,","`case`.","different","bit.","list","parameter","def.","wrong,","supervised","guard.","double","tiny","school.","wrong,","case","range","wrong,","way","regex","pipeline?","tail-recursive","given","match","given","guard","larger","question","guard","way","shout:","interrogation","wrong,","wrong,","language","function","couple","tail","simple"]},{"Key":"a case","Fragments":["pattern","input,","for","statement","that","_and_","like","where"]},{"Key":"case pattern","Fragments":["that"]},{"Key":"pattern that","Fragments":["would"]},{"Key":"that would","Fragments":["make","be","be","simplify","make","read","return","help","convey","be","accomplish","be","rid","express","not","satisfy","be","fit","make","be","allow","improve","not","be","be","be","improve","really","I","fit","save","be","help.","be","be","filter","mean","be:","allow","tell","do"]},{"Key":"intent and","Fragments":["the"]},{"Key":"and the","Fragments":["code","implementation","short","two","expected","private","full","non-parallel","code's","actual","functions.","\u0026amp;","example:","only","interpreter","fact,","other","logic","expected","`?`","output","reader","other","other","arguments","other","solution","more","syntax","pipe","code","way","plus","use","embedded","result","single-letter","other","names","code","count","merely","`|\u003e`","values","rest?","call","normalized","second","efficiency","whole","list,","subset","previous,","downcased","output","previous","`String`","direction,","only","result,","examples","dash,","not","logic","first","semantics","tests","variable","overhead","fact","doctest","backing","top","second","whole","naming","fact","more"]},{"Key":" Also","Fragments":["it's","consider","really","there","you","you","fixed","take","a","you","it","check","you","I","it","I","it","your","you","it's","for","count_words","instead","you","`if(cond,","you","`Dict.update`","think","I","there","the"]},{"Key":"Also it's","Fragments":["just","common"]},{"Key":"it's just","Fragments":["a","a","returning","my","a","an","a","checking","a","easier","my","the","a"]},{"Key":"just a","Fragments":["matter","series","stylistic","single","small","tiny","proxy","week","convenience","little","style","little","little","residual","binary","convenience","matter","solution","nice","few","few","HashDict","lone","little","small","macro","lot","small","personal","bit.","beginner","nicety).","match","special","couple","guess."]},{"Key":"a matter","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"matter of","Fragments":["taste","taste.","taste","identity","`Words.count`","style,","personal","indifference","personal","personal","taste","what","what","me","taste","personal"]},{"Key":"of taste","Fragments":["but","(I'd","though.","when"]},{"Key":"taste but","Fragments":["it"]},{"Key":"it seems","Fragments":["to","like","like","to","like","to","prevalent.","like","like","to","that","like","that","to","to","to","to","to","to","that","to","like","using","like","ok,","but","to","like","that","Elixir","much","like","you"]},{"Key":"seems to","Fragments":["me","me","mirror","be","be","be","the","be","be","be","make","work","have","me,","be","be","me","me","be","make","be","work","be","fall","pass","be","suggest","just","be","run","have","contradict","work","make","be","be","be","be"]},{"Key":"to me","Fragments":["that","that","that","before","that","the","why","better","nested","than","so","that","that","like","that","as","that","that","in","was","to","to","-","at","like","to","in","it","in","when","as","because","when","in","like"]},{"Key":"me that","Fragments":["Elixir","the","I","\"sentence\"","`Regex.run`","`List.concat`","one.","it's","there","your","the","the","that","I"]},{"Key":"that Elixir","Fragments":["should","is","is","provides","is","supports","follows","needs","has","and","doesn't","kind","0.13","0.13"]},{"Key":"Elixir should","Fragments":["be","have"]},{"Key":"should be","Fragments":["written","extended","private","prettier","a","something","preferred.","removed.","something","equivalent","indented","responsible","avoided","a","able","sufficient.","in","avoided","avoided","split","closed","its","the","able","I","used.","O(n)","fairly","minimized","`\u0026(\u00261","a","is_shouting.","able","two","more","inserted","a","`1","possible.","lifted","slightly","able","golden","in","treated","way","able","asking","able","relatively","mentioned","improved","a","a","linearly","fixed","a","updated","a","failing","!Regex.match(~r/[[:alpha:]]/,","\"angered\".","based","generic","the","fine","a","reflected"]},{"Key":"be written","Fragments":["like","as","in","as:","as:","as:","as","as","as","as","as","(personal","as","using","using","as","as","`date_plus_giga_seconds_to","as","as","as","as","as","as","`\u0026{","as","as","with","using","as:","`chars","like","as","as","as","like","as","like","as","as:","as","should","as","as","as:"]},{"Key":"written like","Fragments":["Ruby","this:","`?a`.","this:"]},{"Key":"like Ruby","Fragments":["style-wise","you","does,","and"]},{"Key":"Ruby style-wise","Fragments":["so"]},{"Key":"style-wise so","Fragments":["maybe"]},{"Key":"so maybe","Fragments":["2","`strand`","that's"]},{"Key":"maybe 2","Fragments":["spaces"]},{"Key":"2 spaces","Fragments":["would","for","for","per","instead","per"]},{"Key":"spaces would","Fragments":["be"]},{"Key":"nice and","Fragments":["clean","concise.","concise:","good","straightforward,","the","simple,","explicit,","clean","easy,"]},{"Key":"and clean","Fragments":["solution!","use"]},{"Key":"a particular","Fragments":["reason","technique,","instance","need","order?","order.","solution","invariant","dict"]},{"Key":"particular reason","Fragments":["why","to","you","for","you","for"]},{"Key":"reason why","Fragments":["you","you","you","the","I","I"]},{"Key":"why you","Fragments":["use","use","went","prepend","wrapped","used","do","chose","use","need","might","do","don't","included","use","should","chose","used","need"]},{"Key":"use strict","Fragments":["comparision"]},{"Key":"strict comparision","Fragments":["(===)?"]},{"Key":"your is_whatever?","Fragments":["function,"]},{"Key":"is_whatever? function,","Fragments":["but"]},{"Key":"function, but","Fragments":["would","yours","this","I","I","note","it","didn't"]},{"Key":"but would","Fragments":["suggest","adding","this"]},{"Key":"would suggest","Fragments":["to","is","is","is","looking","that"]},{"Key":"suggest to","Fragments":["pass"]},{"Key":"to pass","Fragments":["it","in","a","to","into","the","the","the","a","data","it","both","arguments.","the","all","some","really","a","all","it","another","a","in"]},{"Key":"pass it","Fragments":["the","in","in","around,","around,","the","around,","around,","around.","into","without"]},{"Key":"it the","Fragments":["message","name","way","opener","|\u0026gt;","normalize","other","more","less","more"]},{"Key":"the message","Fragments":["out","module","related","that","being","result;"]},{"Key":"message out","Fragments":["of"]},{"Key":"this --","Fragments":["it's"]},{"Key":"-- it's","Fragments":["not","not","just","not"]},{"Key":"it's not","Fragments":["necessarily","a","always","part","that","something","as","a","checking","right","*always*","the","replacing","particularly","particularly","working","that","an","that.","really","working","been","common","a","necessarily","intended","exactly","`:gen_server`","much","working","a","the","something","really","an","necessarily","mostly","clear","necessary","actually","very","tail"]},{"Key":"not necessarily","Fragments":["the","a","problem.","smart","faster,","part"]},{"Key":"necessarily the","Fragments":["*shortest*","best"]},{"Key":"the *shortest*","Fragments":["implementation,"]},{"Key":"*shortest* implementation,","Fragments":["but"]},{"Key":"implementation, but","Fragments":["I","I","I'm"]},{"Key":"it's readable,","Fragments":["and"]},{"Key":"readable, and","Fragments":["it's","robust."]},{"Key":"it's an","Fragments":["interesting","anagram","area","overloaded"]},{"Key":"an interesting","Fragments":["approach","decision","solution!","point.","edge","exercise","point.","method"]},{"Key":"interesting approach","Fragments":["to","to"]},{"Key":"approach to","Fragments":["use","the","consider","is_anagram?.","downcasing","the","iterations","this"]},{"Key":"use pattern","Fragments":["matching","matching","matching","matching,","matching","matching","matching","matching","matching","matching","matching?","matching","matching","matching","matching","matching","matching","match","matching","matching","matching","matching","matching"]},{"Key":"on `respond`","Fragments":["to"]},{"Key":"`respond` to","Fragments":["produce"]},{"Key":"to produce","Fragments":["the","and","the","a","the","readable","the","a"]},{"Key":"produce the","Fragments":["correct","\"best\"","count","same","more","same"]},{"Key":"the correct","Fragments":["response.","idioms","order","boolean","operator","private","method","response.","answer,","form","key","return"]},{"Key":"correct response.","Fragments":["Good","Thoughts?"]},{"Key":"response. Good","Fragments":["job!"]},{"Key":" Ooh,","Fragments":["good","or","thanks."]},{"Key":"Ooh, good","Fragments":["point!"]},{"Key":"good point!","Fragments":["So"]},{"Key":"point! So","Fragments":["far"]},{"Key":"So far","Fragments":["the","I","with"]},{"Key":"far the","Fragments":["exercises","cleanest","most"]},{"Key":"the exercises","Fragments":["are","to","slightly","that"]},{"Key":"exercises are","Fragments":["straight","about","string"]},{"Key":"are straight","Fragments":["ports"]},{"Key":"straight ports","Fragments":["of"]},{"Key":"ports of","Fragments":["the"]},{"Key":"the Ruby","Fragments":["versions,","solution","influence","convention","usage","tests","convention","versions","code"]},{"Key":"Ruby versions,","Fragments":["but"]},{"Key":"versions, but","Fragments":["I"]},{"Key":"would like","Fragments":["to","to","to","to"]},{"Key":"like to","Fragments":["start","over","be","keep","say","consider","have","allow","chime","get","be","be","see","send","place","remove","keep","take","have","experiment","leave","go.","point","find","point","note","keep","offer","take","make","use","know"]},{"Key":"to start","Fragments":["incorporating","from","with","with"]},{"Key":"start incorporating","Fragments":["some"]},{"Key":"incorporating some","Fragments":["language-specific"]},{"Key":"some language-specific","Fragments":["goodness."]},{"Key":" Got","Fragments":["it.","rid","some"]},{"Key":"Got it.","Fragments":["I"]},{"Key":"it. I","Fragments":["had","found","don't","wonder","was","find","could","think","thought","like"]},{"Key":"had that","Fragments":["initially."]},{"Key":"that initially.","Fragments":["But"]},{"Key":"initially. But","Fragments":["decided"]},{"Key":"But decided","Fragments":["that"]},{"Key":"decided that","Fragments":["if","there","there's","comprehending"]},{"Key":"that if","Fragments":["I","you","you","the","in","you're","the","you","we","the","that","the","the","the","the","you","the","you","a","the","you","shouted","you","you","we're","you","I","you're","the","the"]},{"Key":"if I","Fragments":["was","decide","understand","was","can","like","prefer","can","could","rearrange","sound","don't","amp","think","like","did","do","use","have","could","can","recall","knew","got","should","asked","said","can","personally","don't","passed","there's","needed","say","agree","really","had","can","had","moved","qualify","can","want","can't","did","didn't","use","use","should","should","remove","twisted","change"]},{"Key":"was going","Fragments":["to","to","to","for","but","with","to","to"]},{"Key":"going to","Fragments":["use","give","nitpick","use,","have","be","change","need","use","change","do","try","look","unlock","be","reuse","do","see","work","move","bother","mark","point","change","try","be","move","cause","have","get.","work","multiple","get","multiple","call","be","tweak","mark","count","return","execute","suggest"]},{"Key":"use guards,","Fragments":["better"]},{"Key":"guards, better","Fragments":["use"]},{"Key":"better use","Fragments":["guards"]},{"Key":"guards everywhere","Fragments":["instead"]},{"Key":"everywhere instead","Fragments":["of"]},{"Key":"using guards","Fragments":["in","to","directly","on","but"]},{"Key":"guards in","Fragments":["some","Elixir?","the"]},{"Key":"in some","Fragments":["parts","cases","way","other","time.","tail","cases.","expected","newlines"]},{"Key":"some parts","Fragments":["and"]},{"Key":"parts and","Fragments":["pattern","is"]},{"Key":"matching in","Fragments":["others.","silence","function","the","the","HashDict.update/4","\u003ccode\u003everse/1\u003c/code\u003e","this","DNA.\"-hamming_distance/2-fun-0-\"/1`","DNA.\"-hamming_distance/2-fun-0-\"/1","the","`update_word_count`","the","functions","functions,","the","String.Unicode.split/1","`is_just_number?`","functions","the","function","function"]},{"Key":"can avoid","Fragments":["an","downcasing,","that","repeating"]},{"Key":"avoid an","Fragments":["`if`","empty"]},{"Key":"an `if`","Fragments":["by","or"]},{"Key":"`if` by","Fragments":["doing"]},{"Key":"by doing","Fragments":["something","`to_words`","it"]},{"Key":"doing something","Fragments":["like","the"]},{"Key":" defp","Fragments":["sing_verse(1)","sing_verse(2)","quiet?(something)","quiet?(something)","silence?(nil),","function_name(\"something","function_name(word),","yelling?(msg)","extract_nucleotide(sequence,","is_nothing?(str)","is_nothing?(nil),","anagrams?(word1,","sort(word)","increment(current_value),","first_part_of_verse(bottles)","bottle_classifier(1),","bottle_classifier(_),","count([],","count([word","update(\"\",","update(word,","is_silence?(instruction),","silence?(sentence)","do_silence(\"\"),","do_silence(\"","do_silence(\"","do_silence(_),","shouting?(phrase),","question?(statement),","same?(_word,","anagrams?(word1,","anagrams?(word1,","update(word,","silence?(message),","asking?(greeting),","question?(s),","dna_to_rna(?T),","are_not_identical?(word_a,","non_matching_pair?({nucleotide,","one_or_it(n)","one_or_it(_),","dow_in_range(first,","dow_in_range(first,","is_sublist([],","is_sublist(_,","map_values(db,","count_words([],","table","char_value(unquote(char)),","char_value(_),","bottleize(0),","line2(n)","line2(n)","convert(c)","convert(c)","convert(_),","pling(n)","pling(_),","do_hamming_distance([n1","do_hamming_distance([n1","score_letter(?a),","score_letter(?e),","score_letter(letter),","score_letter(unquote(letter)),","calculate_score(word)","wrap(l)","unwrap(s)","accumulate([],","accumulate([","do_count(l,","do_reverse([],","do_reverse([h|t],","do_count(l,","do_count([],","do_count([_|t],","do_count(l,","do_count(l,","silence?(input),","silence?(input)","do_count(l,","action(0),","action(beer_count),","count(words)","prefix?([],","prefix?([head|tail1],","prefix?(_,","prefix?(_,","contains?(_,","contains?(full,","do_count([],","do_count([],","silence?(input)","accumulate_word_count(word,","do_count(l,","do_count(l,","unnest(map)","check({:equal,","list_count([],","list_count[head|tail],","is_empty?(\"\"),","is_empty?(_str),","nothing?(input),","is_question(input),","is_blank(input),","count_words(words,"]},{"Key":"defp sing_verse(1)","Fragments":["do"]},{"Key":"defp sing_verse(2)","Fragments":["do"]},{"Key":" \"Why","Fragments":["would","do"]},{"Key":"\"Why would","Fragments":["you"]},{"Key":"would you","Fragments":["rather","rather","propose?","give","agree?","suggest","think","need","have","need","think","recommend","declaratively","think","think","add","expand","think","think","like","think","make","think","recommend","care","think"]},{"Key":"you rather","Fragments":["be","be"]},{"Key":"rather be","Fragments":["pattern","pattern"]},{"Key":"be pattern","Fragments":["matching?\"","matching?"]},{"Key":" Because","Fragments":["I","`alphabetize`","the","the"]},{"Key":"Because I","Fragments":["like"]},{"Key":"to over","Fragments":["apply","build"]},{"Key":"over apply","Fragments":["concepts"]},{"Key":"apply concepts","Fragments":["that"]},{"Key":"concepts that","Fragments":["are"]},{"Key":"that are","Fragments":["newer","named","way","relevant","asking","still","identical","stripped","the","allowed","really","dissimilar","passed","not","easy","easy","not","not","easy","easy","easy","easier","still","easy","easy","capable"]},{"Key":"are newer","Fragments":["to"]},{"Key":"newer to","Fragments":["me."]},{"Key":"to me.","Fragments":[":)","If","Elixir","I",":\\","The","Oh,","My","Nice","I","I've","Any","Is","What","Functions","Your","What's","Issue","Or","Thanks","Anyway,","It's",":^)","Nice","Funny","but","I'm","`check`"]},{"Key":" To","Fragments":["be","be","me","me,","make","get","be","match","your","avoid","be","select","reduce","be","get","me,","be"]},{"Key":"To be","Fragments":["honest,","honest","honest,","honest","honest","honest","fair,"]},{"Key":"be honest,","Fragments":["I'm","I","I've"]},{"Key":"honest, I'm","Fragments":["not"]},{"Key":"not a","Fragments":["huge","problem","friend","phrase.","lot","text.","fan","strong","single","win,","happy","whole","terribly","`skip`","good","list","general","space,","reducing","fan","sublist","bad","big","fan","public","fan","fan","list","problem.","letter,","valid","big","bad","problem,","boolean","keyword","fan","problem","regex","good","percent","reduce.","loop","primary"]},{"Key":"a huge","Fragments":["fan","time","time","list.","improvement.","list.","list.","list.","list.","memory","grain","fan","list.","list."]},{"Key":"huge fan","Fragments":["of","of"]},{"Key":"fan of","Fragments":["the","the","putting","only","this","Regex,","`is_`","having","elixir's","the","how","expressions","attributes","the","my","\"apply_accumulate\"","|\u003e,"]},{"Key":"the number","Fragments":["of","of","as","as","of","of","of","of","of","of","(instead","method","of","of","of","passed","of","of","111","10.","is","of","of","of","of"]},{"Key":"number of","Fragments":["times","reasons.","functions","handy","submissions","private","bottles","bottles","bottles","smaller","arguments","bytes","code","decisions","mutations","unequal","regexes?","clauses","bottles).","grains","arguments","grains","lines.","arguments:","clauses","tests.","test","tests","times","functions","arguments"]},{"Key":"of times","Fragments":["I","but","this"]},{"Key":"times I","Fragments":["had","written"]},{"Key":"had to","Fragments":["type","get","be","convert","handle","cut/paste","think","use","support","`Enum.at(earth_year_fraction,","and","look","do","scan","update","implement","use","take","go","use","move","say","use","explicitly","change","pass","have","research","look","complile","change"]},{"Key":"to type","Fragments":["\"words\"","else"]},{"Key":"type \"words\"","Fragments":["in"]},{"Key":"\"words\" in","Fragments":["the"]},{"Key":"the \"hey\"","Fragments":["function."]},{"Key":"\"hey\" function.","Fragments":["What"]},{"Key":"function. What","Fragments":["if"]},{"Key":"I decide","Fragments":["to","which"]},{"Key":"decide to","Fragments":["change","put","change"]},{"Key":"to change","Fragments":["'words'","\"beer\"","\"beer\"","that","the","the","it's","this","it?","the","it","my","this","the","in","in","\"y\"","in","(where","all","the","anything","the","it,","your","the","it","a","`concat`","the"]},{"Key":"change 'words'","Fragments":["to"]},{"Key":"'words' to","Fragments":["'statements'?"]},{"Key":"I probably","Fragments":["will","just","agree","would","need"]},{"Key":"probably will","Fragments":["give"]},{"Key":"will give","Fragments":["a","it","the","my"]},{"Key":"give a","Fragments":["pattern","proper","better","parser","look","look","false"]},{"Key":"a pattern","Fragments":["match","to","matching","matched","match","match","I'm"]},{"Key":"match another","Fragments":["go"]},{"Key":"another go","Fragments":["and","at"]},{"Key":"go and","Fragments":["see","try","make"]},{"Key":"and see","Fragments":["which","what","which","which","what","the","if","if","a","the","if","if"]},{"Key":"see which","Fragments":["one","one","one"]},{"Key":"which one","Fragments":["I","is","reads","it","is","is","do","is"]},{"Key":"one I","Fragments":["like","could","am"]},{"Key":"like better.","Fragments":["(If"]},{"Key":"better. (If","Fragments":["I"]},{"Key":"(If I","Fragments":["can"]},{"Key":"can figure","Fragments":["out","this"]},{"Key":"to make","Fragments":["that","use","a","it","a","the","the","use","it","it","those","the","the","the","it","it","the","this","it","#command","it","the","use","the","the","them","it","private?","public.","use","the","sense.","a","sure","a","```_count```","IMHO!","this","the","sure","`silent?`,","it","the","them","the","the","the","sure","the","lines","more","the","sure","sense","count","it","`question?`,","this","that","precedence","clear","the","the","the","the","the","it","it","people","this","the","the","`question?`,","`shouting?`","the","the","it","sure","you","them","the","`allergic_to?`","the","it","them","sure","the","them","the","the","clear","it","people","the","each","the","it","it","the","those","two","this","sure","this","the","the","it's","a","the","everything","the","the","your"]},{"Key":"make that","Fragments":["happen.)","change.","change.","construction","change!","code","change","work.","function","change."]},{"Key":"out \u003ccode\u003econd\u003c/code\u003e.","Fragments":["Pattern"]},{"Key":"\u003ccode\u003econd\u003c/code\u003e. Pattern","Fragments":["matching"]},{"Key":"matching isn't","Fragments":["the"]},{"Key":"isn't the","Fragments":["most","most","convention","right","protocol"]},{"Key":"the most","Fragments":["effective","readable","valuable.","surprise,","intention-revealing","appealing,","clear","but","important","readable","concise","is","recent","current","recent","challenging","standard","difficult","from.","important","important","elegant","efficient","important","recent","efficient","appropriate","general","readable"]},{"Key":"most effective","Fragments":["with"]},{"Key":"effective with","Fragments":["strings."]},{"Key":" While","Fragments":["the","your","the","do","I","I","you","you're","looking","your","we're","certainly","there","I","we"]},{"Key":"While the","Fragments":["is_shouting","case"]},{"Key":"the is_shouting","Fragments":["method"]},{"Key":"is_shouting method","Fragments":["might"]},{"Key":"method might","Fragments":["make","be","be"]},{"Key":"the test","Fragments":["pass,","you","suite","suite","case","suite","will","passes","cases?","case","cases","for","suite.","cases","doesn´t","suite","suite","cases,","as","suite","cases","pass?","suite","suite","suite","suite","for","if","function.","function","don't","to","expects","suite,","about","is","suit","!","when","change?)","suite,","suite","does)","suite","does)","suites","file","still","file","for","for","suite","file.","for","fails","codes","files.","files?","suite.","about","suite","suite,","suite.","suite,","suite","suite","suite","cases","that","login","on"]},{"Key":"test pass,","Fragments":["I"]},{"Key":"pass, I","Fragments":["think","guess"]},{"Key":"think there","Fragments":["might","a","is","is","should"]},{"Key":"there might","Fragments":["be","be","be","be","be"]},{"Key":"a more","Fragments":["general","flexible","flexible","clear","functional","elegant","descriptive","interesting","natural,","verbose","semantically","succinct","conceptually","powerful","consistent","clear","terse","straightforward","meaningful","complex","intention-revealing","descriptive","OO","OO","descriptive","erlang/elixir","descriptive","consistent","functional","linear","context-sensitive","elegant","realistic","general","general","idiomatic","straightforward","concise","concise","natural","readable","readable","complex","'elixir'"]},{"Key":"more general","Fragments":["and","solutions","(works","strain","approach","that"]},{"Key":"general and","Fragments":["precise"]},{"Key":"and precise","Fragments":["method"]},{"Key":"precise method","Fragments":["to"]},{"Key":"method to","Fragments":["check","check","use","look","`sublist?`","farm","downcase","have"]},{"Key":"to check","Fragments":["for","for","out","for","if","if","for","for","for","that","if","if","for","for","for","out","the","out","out","for","for","for","the","if","that","that","to","for","for","for","for","to","for","if","for","the","out","whether","the","if"]},{"Key":"check for","Fragments":["shouting.","empty","those","silence","an","silence","an","an","the","blank.","nil.","nil,","\"\"","nil","empty","sameness.","equality","length,","silence.","non-whitespace","this,","that.","non-whitespace","Regex.scan/2.","an","an","an","empty","numbers-only","that","that.","that.","characters","whether","letters","exclamation","a"]},{"Key":"you know","Fragments":["you","of","\u003ccode\u003e","how","about","about","the","that","about","this...","of","that","that","a","how","that","`bottle_count`","about","about","about","there","the","you're","that","`if`","that","if","when","what","about","about","you","you","you","that","the","a","you"]},{"Key":"know you","Fragments":["can","marked","could","would","could","understand","can","can","could","have"]},{"Key":"use question","Fragments":["marks"]},{"Key":"question marks","Fragments":["as","are","in"]},{"Key":"marks as","Fragments":["part"]},{"Key":"as part","Fragments":["of","of","of","of"]},{"Key":"of your","Fragments":["method","code.","variable","other","functions","`ignore_case`","cond","`count`","module","`_hey`","other","code","private","if/else","methods,","Regex.","code","solution","pipeline","predicate","function","way","iteration","test","pipeline.","regex.","helper","feedback!","creative","private","\u003ccode\u003etrimmed"]},{"Key":"your method","Fragments":["names?","calls."]},{"Key":"method names?","Fragments":["Could","(are"]},{"Key":"names? Could","Fragments":["that"]},{"Key":"Could that","Fragments":["improve"]},{"Key":"that improve","Fragments":["the"]},{"Key":"improve the","Fragments":["code?","regex,","signal","efficiency","efficiency","expressiveness","test","logic."]},{"Key":"didn't pattern","Fragments":["match"]},{"Key":"match on","Fragments":["1","the","`bottles_phrase`","constants?","`%r/\\w+/`","the","the","the","just","```_```","the","line","the","a"]},{"Key":"on 1","Fragments":["and"]},{"Key":"1 and","Fragments":["2","use"]},{"Key":"and 2","Fragments":["because"]},{"Key":"2 because","Fragments":["they"]},{"Key":"because they","Fragments":["return","work","are","are","are","can't."]},{"Key":"they return","Fragments":["different","means.","the"]},{"Key":"return different","Fragments":["texts."]},{"Key":"different texts.","Fragments":["Previously,"]},{"Key":"texts. Previously,","Fragments":["I"]},{"Key":"Previously, I","Fragments":["had"]},{"Key":"had something","Fragments":["like","in","to"]},{"Key":"that but","Fragments":["it","somewhat"]},{"Key":"it meant","Fragments":["adding","-"]},{"Key":"meant adding","Fragments":["and"]},{"Key":"adding and","Fragments":["'if',"]},{"Key":"and 'if',","Fragments":["that's"]},{"Key":"'if', that's","Fragments":["why"]},{"Key":"that's why","Fragments":["I","were","I","I","I","I"]},{"Key":"I decided","Fragments":["to","explicitly","to","this","I","to","that","to","I","to","to","to","to","that"]},{"Key":"decided to","Fragments":["separate","add","do","go","change","stop","use","import","move","make","separate","replace"]},{"Key":"to separate","Fragments":["them.","the","intention","cases.","concerns","methods?","concerns.","the","methods."]},{"Key":"think I'll","Fragments":["leave","spend","leave","implement"]},{"Key":"I'll leave","Fragments":["it","String.replace","my","it"]},{"Key":"leave it","Fragments":["as-is","up","as","around","at"]},{"Key":"it as-is","Fragments":["for"]},{"Key":"as-is for","Fragments":["readability."]},{"Key":"for readability.","Fragments":["I","I'm","I","e.g."]},{"Key":"readability. I","Fragments":["could","just","would"]},{"Key":"I could","Fragments":["move","do","be","be","create","just","not","move","extract","just","process","split","use","have","use","do","break.","write","leave","of","remove","get","come","easily","get","use","figure","do","figure","go","also","see","see","probably","just","just","still","think","say","be","use","sacrifice","squeeze","see","look","take","inline","suggest","simply","not","replace","replace","probably","name","achieve","also","have","not","downcase","move","use","contribute,","go","not","get","combine","find","clean","have","probably","find,","not","map","potentially","have","think","encapsulate","use","have","see","go","have","with","not","replace","be","then","just","have","turn","use","be","update","probably","come","easily","name","be"]},{"Key":"could move","Fragments":["alphabetize","the","the","it","the"]},{"Key":"move alphabetize","Fragments":["the"]},{"Key":"alphabetize the","Fragments":["main"]},{"Key":"word within","Fragments":["#match,"]},{"Key":"within #match,","Fragments":["but"]},{"Key":"#match, but","Fragments":["that"]},{"Key":"but that","Fragments":["would","might","felt","are","might","may","seems","was","does","doesn't","just","this","may","would","was","doesn't","might","is","threw","was","would","could","seems"]},{"Key":"be mixing","Fragments":["the"]},{"Key":"mixing the","Fragments":["implementation"]},{"Key":"the implementation","Fragments":["details","describes","or","of","was","methods","details","to","details","checks","details","change,","of","(not","of","inline","I","and/or","of","of","of","accordingly.","of","of","of","through","should"]},{"Key":"implementation details","Fragments":["of","a","of","with","(L16"]},{"Key":"details of","Fragments":["how","whitespace","the","how","macro's","regular","each"]},{"Key":"of how","Fragments":["#anagrams?","or","the","I","functions","I","it","having","the","you'd","else","I","`++`/`append`","your","I","to"]},{"Key":"how #anagrams?","Fragments":["works"]},{"Key":"#anagrams? works","Fragments":["into"]},{"Key":"works into","Fragments":["#match."]},{"Key":" Something","Fragments":["else","feels","like"]},{"Key":"Something else","Fragments":["I"]},{"Key":"else I","Fragments":["considered:"]},{"Key":"I considered:","Fragments":["I"]},{"Key":"considered: I","Fragments":["initially"]},{"Key":"I initially","Fragments":["wanted","handled","thought","had"]},{"Key":"initially wanted","Fragments":["to"]},{"Key":"to write","Fragments":["this","a","this.","Ruby.","the","code","the","Ruby","this","I","`Enum.count(\u0026equal_pairs?(\u00261))`","simple,","`{\u00261,","this:","it","`Enum.map_join([1,2,3],","`def","the","and","a","the","map,","an","`append`","`concat`","tail","my","a","explicitly","`defp","and","`f(x)`.","the","a","`\u0026([\u00261","`\u0026([\u00261"]},{"Key":"write this","Fragments":["using","instead:","in","in","code","so","without"]},{"Key":"this using","Fragments":["concurrency,","\u003ccode\u003eList.foldl/3\u003c/code\u003e","`List.foldl/3`","List.foldl/3","pattern","guards","`Enum.reduce`.","reduce."]},{"Key":"using concurrency,","Fragments":["so"]},{"Key":"concurrency, so","Fragments":["that"]},{"Key":"that all","Fragments":["words","but","other","the","other","the","three","of"]},{"Key":"all words","Fragments":["are"]},{"Key":"words are","Fragments":["checked","anagrams,","anagrams","the","anagrams","anagrams","anagrams."]},{"Key":"are checked","Fragments":["to"]},{"Key":"checked to","Fragments":["see"]},{"Key":"see if","Fragments":["they","I","it","it's","string","it","that","the","I","it","there's","you","I","something","the","I","an","the","i","the","the","there","they","it","there","the","it","they","the","exercism","they","certain"]},{"Key":"if they","Fragments":["are","don't","are","flowed","not","are","were","don't","are","are","add","all","are","are"]},{"Key":"anagrams or","Fragments":["not"]},{"Key":"or not","Fragments":["simultaneously,","you","two","I","though...","yet.","to","two","at","is",":)"]},{"Key":"not simultaneously,","Fragments":["but"]},{"Key":"simultaneously, but","Fragments":["doing"]},{"Key":"but doing","Fragments":["so"]},{"Key":"doing so","Fragments":["would","eluded"]},{"Key":"so would","Fragments":["mean"]},{"Key":"would mean","Fragments":["the","that","modifying"]},{"Key":"mean the","Fragments":["matches","sentence_to_check","strand","super-slow"]},{"Key":"matches would","Fragments":["come","be"]},{"Key":"would come","Fragments":["back"]},{"Key":"come back","Fragments":["in","to"]},{"Key":"back in","Fragments":["random","the"]},{"Key":"in random","Fragments":["order,"]},{"Key":"random order,","Fragments":["and"]},{"Key":"order, and","Fragments":["I"]},{"Key":"and I","Fragments":["believe","meant","don't","haven't","am","had","have","have","do","think","prefer","love","should","think","see","thought","like","think","don't","decided","used","did","was","agree,","wanted","had","like","updated","lose","don't","should","more-or-less","also","just","thought","don't","think","think","would't","tend","tend","actually","feel","`downcase`","got","wasn't","don't","think","welcome","will","like","felt","couldn't","didn't","wasn't","think","was","thus"]},{"Key":"I believe","Fragments":["the","Elixir","everything","it","that","that","the","the","the","string","will","`[]`","it's","I","it's"]},{"Key":"believe the","Fragments":["tests","way","reason","syntax","String.Chars"]},{"Key":"the tests","Fragments":["(as","make","passing","is","when","pass","pass,","pass","in","but","pass.","crashes","was","may've","and","currently","was","were","required","without","expect","in","in","pass,","I'm","constructed","are","pass!","to","don't","passing.","pass","required","again.","green!).","for","to","and","to","for","themselves","even","to","in","to","a","don't","need","require,","passing","forcing","run","should","are","are","to","most","to","run","to","run","to","fail,","to","into","to","took","ok,","into","to","only,","were","refactored"]},{"Key":"tests (as","Fragments":["written)"]},{"Key":"(as written)","Fragments":["would"]},{"Key":"written) would","Fragments":["fail"]},{"Key":"would fail","Fragments":["if","if","on","for"]},{"Key":"fail if","Fragments":["the","it","you"]},{"Key":"if the","Fragments":["words","conditions","second","requirements","`match`","key","requirements","string","key","function","requirements","test","string","tests","phrase","language","code","string","second","compiler","strings","resulting","order","order","input","only","prince","attributes","input","nucleotides","lowest","string","conversion","conversion","condition","exercise","test","HashSet","last","last","placeholder","input","uppercase","truth","accumulator","last","key","number","list","reader","string","last","string","last","empty","Teenager","string","one","function","rebinding","last","last"]},{"Key":"the words","Fragments":["were","strophe,","in","in","instead","are","when","you","once","once","are"]},{"Key":"words were","Fragments":["in"]},{"Key":"were in","Fragments":["a","a"]},{"Key":"a different","Fragments":["order","animal,","set","approach","problem","name","way","nitpick","approach","variable","way?","level","behaviour","module","solution","angle,","level","function","private","implementation","order","way","way","concept,","way","order","solution","solution","way","version","test","implementation"]},{"Key":"different order","Fragments":["in","than","than"]},{"Key":"order in","Fragments":["the","the","which","the","which"]},{"Key":"the returned","Fragments":["list.","list","value?"]},{"Key":"I did,","Fragments":["but"]},{"Key":"did, but","Fragments":["I"]},{"Key":"I haven't","Fragments":["picked","wrapped","got","checked","seem","seen","thought","seen","explored","used","successfully","seen","seen","actually","spent","been","spent","personally","really","been","convinced","looked","yet","figured","reached"]},{"Key":"haven't picked","Fragments":["up"]},{"Key":"picked up","Fragments":["the","from","by","somewhere?","the"]},{"Key":"up the","Fragments":["habit","\u003ccode\u003e\\w\u003c/code\u003e","return","cond?","verse","string","\u003ccode\u003einterpret\u003c/code\u003edecision","discussion.","`expected`","final","phrase","anagram","verses.","string.","formatting.","length","empty?","language.","rest","keys","code","counts","syntax","catch-all","exercise","unnecessary","code","code","value.","tests.","anonymous","\"do_concat\"","punctuation","implementation","regex","flow","`defp","logic","regular"]},{"Key":"the habit","Fragments":["yet.","of","of"]},{"Key":"habit yet.","Fragments":["Thanks!"]},{"Key":" Readability","Fragments":["is"]},{"Key":"Readability is","Fragments":["definitely"]},{"Key":"is definitely","Fragments":["top","the","something","a","the","more","the"]},{"Key":"definitely top","Fragments":["priority!"]},{"Key":"top priority!","Fragments":["If"]},{"Key":"priority! If","Fragments":["you"]},{"Key":"you come","Fragments":["to","up"]},{"Key":"come to","Fragments":["the","my","think"]},{"Key":"same conclusion","Fragments":["here,"]},{"Key":"conclusion here,","Fragments":["it's"]},{"Key":"here, it's","Fragments":["not","slightly","totally","`:gen_event`."]},{"Key":"a problem","Fragments":["--","of","(unless","that","but","with","into","here,","for","or","I","that","with","with","in","in"]},{"Key":"problem --","Fragments":["just"]},{"Key":"-- just","Fragments":["wanted"]},{"Key":"just wanted","Fragments":["you","to","to","it","to","to","to","a","to"]},{"Key":"wanted you","Fragments":["to"]},{"Key":"you to","Fragments":["consider","solve","be","the","define","remove","string","add","use","look","use","a","code","both","only","blend","move","remove","pass","try","greater","the","test","avoid","have","solutions","remove","leave","massively","use","look"]},{"Key":"to consider","Fragments":["it.","is","ways","that","it"]},{"Key":" I'll","Fragments":["take","see","go","definitely","refactor","refactor","resubmit.","also","write","submit","submit","submit","consider","refactor","give","just","second","submit","go","amend!","also"]},{"Key":"I'll take","Fragments":["a","a","another","a","a"]},{"Key":"take a","Fragments":["look.","look.","look","look","string","look","single","look","look","look","look","look","look","look","look","peak","look","step","brief","look","look","list","look","close","look","look","look"]},{"Key":"a look.","Fragments":["I","Thanks!"]},{"Key":"look. I","Fragments":["had"]},{"Key":"something in","Fragments":["place","mind","the"]},{"Key":"in place","Fragments":["to","of","just","of"]},{"Key":"place to","Fragments":["sort","change","urge"]},{"Key":"to sort","Fragments":["the","the","a","the","on"]},{"Key":"word just","Fragments":["once"]},{"Key":"just once","Fragments":["in","=)"]},{"Key":"once in","Fragments":["my","the","`new`?","`match`","the","a"]},{"Key":"my Ruby","Fragments":["implementation,","version","implementation","version","solution."]},{"Key":"Ruby implementation,","Fragments":["and"]},{"Key":"implementation, and","Fragments":["it","somehow","avoid"]},{"Key":"and it","Fragments":["was","got","contained","passes","won't","can","might","has","was","will","didn't","takes","would","gave","might","will","seems","uses","also","did","loses","didn't","looks","is","will","gave","seems","makes","might","was","seems","is","make","feels","would","will","is","is","slowed","will","looks","definitely"]},{"Key":"it was","Fragments":["making","late","easier","more","necessary","a","me","better","explicitly","a","more","something","giving","the","to","pointed","graphing","given.","important","a","reverted.","needed","suggested","recommended","worth","each","very","using.","used","fewer","split","an","forbidding","invalid.","easy.","worth","a","easy","clear","pretty","the","passing","on","preferable","much","really","still","simple.","too","wrong,"]},{"Key":"was making","Fragments":["the"]},{"Key":"making the","Fragments":["code","three","code","code","check","code","change,","version","computer","`leap_year?`"]},{"Key":"code much","Fragments":["less","less","harder","easier"]},{"Key":"much less","Fragments":["readable,","important)","readable","efficient","nice"]},{"Key":"less readable,","Fragments":["so"]},{"Key":"readable, so","Fragments":["I"]},{"Key":"I ditched","Fragments":["it"]},{"Key":"ditched it","Fragments":["as"]},{"Key":"it as","Fragments":["a","a","a","you","an","is","`(speak","bytes","`\u0026Int.inc/1`.","it's","`String.to_char_list!(word)","a","the","`foo(something)`","'ugly'","the"]},{"Key":"a premature","Fragments":["optimization.","optimization"]},{"Key":" Elixir","Fragments":["is","allows","has","0.10.1","does","allows","didn't","is","supports","is","does","0.13"]},{"Key":"Elixir is","Fragments":["a","following","following","how","*really*","great","hard!","an","moving","similar","I'm","that","messing","inspired","a","nice,","still"]},{"Key":"different animal,","Fragments":["however,"]},{"Key":"animal, however,","Fragments":["and"]},{"Key":"however, and","Fragments":["I'll"]},{"Key":"and I'll","Fragments":["take","make","revisit.","probably"]},{"Key":"Thanks redmar,","Fragments":["I"]},{"Key":"redmar, I","Fragments":["will"]},{"Key":"I will","Fragments":["give","try","adjust","rename","take","try","leave","update","mention","be","work","look","need","revise","be","check","try","think","try","submit","make","take","try","definitely","have","have","start","switch","work","keep","make","investigate","stay","trust","try,","update","give","try","actually"]},{"Key":"give it","Fragments":["a","the","a","a","a","much","a","a","a","a"]},{"Key":"it a","Fragments":["shot","tiny","shout.","lot!","bit","try?","bit","nice","bit","little","spin).","thought!","matter","distinct","name.","tad","lot","bit","private","public","Greeting?","bit","giant","bit","whirl,","try","local","little","bit","bit","bit,","bit","little","bit","bit","little","bit","bit","couple","name","bit","bit"]},{"Key":"a shot","Fragments":["tonight"]},{"Key":"shot tonight","Fragments":["and"]},{"Key":"tonight and","Fragments":["see"]},{"Key":"see what","Fragments":["feels","you","is","I","you're","you're","you","kinds","it","it","they","the","the","you","it's","I"]},{"Key":"what feels","Fragments":["better."]},{"Key":"feels better.","Fragments":["I"]},{"Key":"better. I","Fragments":["just","do","can't"]},{"Key":"just really","Fragments":["love"]},{"Key":"really love","Fragments":["Elixir's","open"]},{"Key":"love Elixir's","Fragments":["pattern"]},{"Key":"Elixir's pattern","Fragments":["matching.","matching"]},{"Key":"pattern matching.","Fragments":[":-D","Could","Overall","`cond`","This","This","Any","You","Maybe","One","For","Also","Sure,","Looking","I"]},{"Key":" Sure,","Fragments":["I","this","rud."]},{"Key":"Sure, I","Fragments":["could"]},{"Key":"do that.","Fragments":["I","I'll","But","I","Is"]},{"Key":"that. I","Fragments":["guess,","really","submitted","thought","try","think","do","guess","can"]},{"Key":"I guess,","Fragments":["that","considering"]},{"Key":"guess, that","Fragments":["would"]},{"Key":"the solution","Fragments":["most","too,","at","better.","so","looks","for","with","here","by","as"]},{"Key":"solution most","Fragments":["people"]},{"Key":"most people","Fragments":["come","seemed","don't","do","don't","like"]},{"Key":"people come","Fragments":["up"]},{"Key":"with and","Fragments":["it's","without"]},{"Key":"it's quite","Fragments":["similar"]},{"Key":"quite similar","Fragments":["to","to"]},{"Key":"similar to","Fragments":["my","a","the","how","idiomatic","Elixir's)","my","what","Ruby's","the","that,","some","the","[head|tail]","my"]},{"Key":"to my","Fragments":["first","mind.","eyes.","toolkit.","first","perl","approach.","Ruby","Elixir-newbie","point","own","way","post.","original","test","implementation","Elixir","initial"]},{"Key":"my first","Fragments":["submission.","day","functional","iteration,","iteration.","version.","code","foray","code","instinct","program","pull","iteration","pass","contact","few","unsubmitted","submission","implementation","submission","macro.","iteration","bit","solution","solution","attempt","elixir"]},{"Key":"first submission.","Fragments":["It","I"]},{"Key":"submission. It","Fragments":["could"]},{"Key":"It could","Fragments":["then","be"]},{"Key":"could then","Fragments":["also","call","do","concentrate"]},{"Key":"then also","Fragments":["serve"]},{"Key":"also serve","Fragments":["as"]},{"Key":"serve as","Fragments":["the"]},{"Key":"as the","Fragments":["Ruby","functions","first","initial","test","first","comparison","other","result","other","other","more","body","named","scan,","first","style","placeholder","first","equivalent","recursive","second","string","first","logic","left","target","numbers-only","delegates","accumulator","accumulator","other","function","first","return","candidate.","2nd","first","first","first","underlying","end","reverse","whole","implementation,","test","reverse","argument","last","condition","helper","regexes.","previous","implementation","name","function","`sort`","left","captures:","docs","left","implementation","external","`grade`","first","previous","need","German","publicly","string","algorithms","`defp`","first","input?","function"]},{"Key":"Ruby solution","Fragments":["to"]},{"Key":"solution to","Fragments":["that","somehow","copy/paste...","this","that","this","work","the","this"]},{"Key":"to that","Fragments":["exercise","in","same","altogether.","syntax."]},{"Key":"that exercise","Fragments":["-","properly"]},{"Key":"exercise -","Fragments":["well,","line"]},{"Key":"- well,","Fragments":["almost"]},{"Key":"well, almost","Fragments":[";-)."]},{"Key":" However","Fragments":["I","I"]},{"Key":"However I","Fragments":["wanted","think","fail","couldn't"]},{"Key":"make use","Fragments":["of","of","of","of","of","of"]},{"Key":"the awesomeness","Fragments":["this","that"]},{"Key":"awesomeness this","Fragments":["new"]},{"Key":"this new","Fragments":["language"]},{"Key":"new language","Fragments":["is","with"]},{"Key":"language is","Fragments":["giving","not","not"]},{"Key":"is giving","Fragments":["me."]},{"Key":"giving me.","Fragments":["Granted"]},{"Key":"me. Granted","Fragments":["it"]},{"Key":"Granted it","Fragments":["doesn't"]},{"Key":"it doesn't","Fragments":["make","make","have","have","look","matter","really","store","seem","allow","offer","crash","deal","always","give","deal","really","work","look","fit","pad.","feel","matter).","feel","handle","do","seem","make","loo","work","look","hinder","involve","come","seem"]},{"Key":"doesn't make","Fragments":["much","it","full","a","the","any","sense)."]},{"Key":"make much","Fragments":["sense","of"]},{"Key":"much sense","Fragments":["in"]},{"Key":"sense in","Fragments":["this","count","the"]},{"Key":"in this","Fragments":["simple","case","case?","case","case.","case.","case","pipeline.","assignment.","case","case,","program.","context.","instance?","instance.","case,","case,","problem.","case","link","window.","solution.","case.","case","way.","case,","example","mathematical","version","of","particular","solution,","case,","case.","case","case.","case\".","case,","viewport","case","case","case.","domain","case","exercism","case","case","exercise","case.","exercise.","form","case","context.","exercise.","case,","particular","case.","example:","specific","case.","case,"]},{"Key":"this simple","Fragments":["exercise","level","job,","example,"]},{"Key":"simple exercise","Fragments":["and"]},{"Key":"exercise and","Fragments":["code","decided","use","have","click"]},{"Key":"and code","Fragments":["is"]},{"Key":"code is","Fragments":["getting","more","just","the","read","\"OK-ish\".","more","occurs","to","certainly","doing.","easier","looks","on","ok","fine","nice","a","easy","definitely","a","efficient","easy","`if","`Code.eval_quoted`.","a","so","easier","passing","short","flexible","relatively","here,","doing","really","much","far","ugly."]},{"Key":"is getting","Fragments":["pretty","really","closer","a","a"]},{"Key":"getting pretty","Fragments":["long,"]},{"Key":"pretty long,","Fragments":["but","so"]},{"Key":"long, but","Fragments":["I"]},{"Key":"I still","Fragments":["like","think","needed","feel","prefer","think","struggle","missing","find","don't","learned","prefer","have","prefer","think"]},{"Key":"still like","Fragments":["how","to","to"]},{"Key":"like how","Fragments":["the","you","`List#foldl`","yours","all","the","`cond`","things","this","you","you","you","you","plain","they","it","it","you","the","it","you","Elixir"]},{"Key":"how the","Fragments":["hey","current","\u003ccode\u003e\u003c=\u003c/code\u003e","pattern","pipeline","code","reduce","whole","function","accumulator","`number`","list","tests","codes","brain","main"]},{"Key":"the hey","Fragments":["function","function","method","function?","function","function"]},{"Key":"hey function","Fragments":["reads:","and","\"tell"]},{"Key":"function reads:","Fragments":["\"msg"]},{"Key":"reads: \"msg","Fragments":["|\u003e"]},{"Key":"\"msg |\u003e","Fragments":["interpret"]},{"Key":"|\u003e interpret","Fragments":["|\u003e"]},{"Key":"interpret |\u003e","Fragments":["respond\"."]},{"Key":"you would","Fragments":["want","in","feel","probably","still","be","just","basically","absolutely","use","need","probably","define","only","pull","just","provide","do","not","write"]},{"Key":"would want","Fragments":["to,"]},{"Key":"want to,","Fragments":["you"]},{"Key":"to, you","Fragments":["could","can","could"]},{"Key":"use doctests","Fragments":["as","in"]},{"Key":"doctests as","Fragments":["well"]},{"Key":"as well","Fragments":["(i.e.","to","as","=)","as","in","as","as","as","pull","i.e.","as","but","as","as","(if","though)","with","as","to","as","just","as","as","as","as","go","and"]},{"Key":"well (i.e.","Fragments":["tests"]},{"Key":"(i.e. tests","Fragments":["in"]},{"Key":"tests in","Fragments":["the","the","the","functions?","functions","regexes:","this","regexes","any","`shout?`","named","my","the"]},{"Key":"the `@jaylon`","Fragments":["string)."]},{"Key":"Well the","Fragments":["community","idea","length"]},{"Key":"the community","Fragments":["is","prefers"]},{"Key":"community is","Fragments":["working","about,","more"]},{"Key":"is working","Fragments":["on","hard"]},{"Key":"working on","Fragments":["a","idiom","OS","after","--","making","lists.","lists.","filter,","finding"]},{"Key":"on a","Fragments":["coding","single","built-in","different","new","`Dict`","few","predicate","previous","single","list","module","module","single","one-line","numbers-only","lot","range","line.","single","single","single","suggestion","range...","range:","concept","Unicode","particular","new","redesign","line","word","single","dict,","lot","sorted","line,","bit,","method-body","string","single"]},{"Key":"a coding","Fragments":["style"]},{"Key":"coding style","Fragments":["guide!"]},{"Key":"style guide!","Fragments":["See"]},{"Key":"guide! See","Fragments":["here:"]},{"Key":"See here:","Fragments":["https://github.com/alco/elixir/wiki/Contribution-Guidelines#use-of-the-parenthesis-with-functions"]},{"Key":"more flexible","Fragments":["solution","solution","and","(for"]},{"Key":"flexible solution","Fragments":["than","than"]},{"Key":"solution than","Fragments":["```\"\"","\u003ccode\u003e\"\"","`Dict.merge`,","line"]},{"Key":"than ```\"\"","Fragments":["=="]},{"Key":"```\"\" ==","Fragments":["string```"]},{"Key":"== string```","Fragments":["but"]},{"Key":"string``` but","Fragments":["that's"]},{"Key":"that's a","Fragments":["moot","bug","common","good","good","good","good","bit","manually","good","tail","minor","good","list"]},{"Key":"a moot","Fragments":["point.","point,"]},{"Key":"just use","Fragments":["a","implicit","the","what","a","a","```str","the","an","`@fae`.","Elixir's","a","the","`func","`GenServer.Behaviour`,","a"]},{"Key":"a sentence","Fragments":["==","is","is","is","contains","without"]},{"Key":"sentence ==","Fragments":["\"\""]},{"Key":"\"\" as","Fragments":["pretty","silence).","the"]},{"Key":"as pretty","Fragments":["self"]},{"Key":"pretty self","Fragments":["describing"]},{"Key":"self describing","Fragments":["implementation"]},{"Key":"describing implementation","Fragments":["for"]},{"Key":"implementation for","Fragments":["the","intersect/union/subtract/addition,"]},{"Key":"the silent?","Fragments":["awkwardness"]},{"Key":"silent? awkwardness","Fragments":["that"]},{"Key":"awkwardness that","Fragments":["currently"]},{"Key":"that currently","Fragments":["needs"]},{"Key":"currently needs","Fragments":["a"]},{"Key":"needs a","Fragments":["comment?"]},{"Key":"Well on","Fragments":["your"]},{"Key":"on your","Fragments":["way!","Regex.","last","feedback.","previous","declarative","first","first","function","suggestions.","reaction.","next"]},{"Key":" As","Fragments":["we","for","a","I","someone","a","for","far","this","a","far","well","you","far","@summer","for","for","I","far","for","of","I","I","said","for","for","a","for","someone","far","far","I","far","for","far","far","far","far","far","for","there","for","for","seen"]},{"Key":"we always","Fragments":["strive"]},{"Key":"always strive","Fragments":["for"]},{"Key":"strive for","Fragments":["an"]},{"Key":"for an","Fragments":["implementation","elixir","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","answer.","exercise.","exercise","`if","input","`append`","append","append","update...","empty","experienced"]},{"Key":"an implementation","Fragments":["with","detail","of","detail."]},{"Key":"implementation with","Fragments":["the","pattern","better","a"]},{"Key":"the least","Fragments":["amount","resistance."]},{"Key":"least amount","Fragments":["of"]},{"Key":"amount of","Fragments":["code","code,","pattern","memory","comparisons","work","\"manual","\"flow\"."]},{"Key":"of code","Fragments":["possible","readability,","to","points.",".","in","that","and","and","in"]},{"Key":"code possible","Fragments":["while","I"]},{"Key":"possible while","Fragments":["still","trying"]},{"Key":"while still","Fragments":["keeping","being"]},{"Key":"still keeping","Fragments":["things"]},{"Key":"keeping things","Fragments":["readable,"]},{"Key":"things readable,","Fragments":["would"]},{"Key":"readable, would","Fragments":["it"]},{"Key":"would it","Fragments":["be","work"]},{"Key":"an idea","Fragments":["to","to","and","where","what","of"]},{"Key":"to move","Fragments":["the","on","on.","this","the","the","a","on","on","around","on","the","to","all","the","the","forward"]},{"Key":"the interpret","Fragments":["function"]},{"Key":"interpret function","Fragments":["back"]},{"Key":"function back","Fragments":["into"]},{"Key":"back into","Fragments":["the","a","the","a","the","a"]},{"Key":"function and","Fragments":["directly","pass","`Enum.filter`","give","send","have","```removed_punctuation```","shared","you","put","`!`","avoid","argument"]},{"Key":"and directly","Fragments":["output"]},{"Key":"directly output","Fragments":["strings"]},{"Key":"output strings","Fragments":["instead"]},{"Key":"strings instead","Fragments":["of"]},{"Key":"of dispatching","Fragments":["to"]},{"Key":"dispatching to","Fragments":["the"]},{"Key":"the respond","Fragments":["functions?"]},{"Key":"Great Job!","Fragments":["A","It's"]},{"Key":"Job! A","Fragments":["couple"]},{"Key":"of things","Fragments":["you","I","very","nicely.","to","(that","to","jump","you","I"]},{"Key":"things you","Fragments":["could","could","want","could","*could*"]},{"Key":"could think","Fragments":["about;","of.","of","of"]},{"Key":" You've","Fragments":["created","got","got"]},{"Key":"You've created","Fragments":["2"]},{"Key":"created 2","Fragments":["helpers"]},{"Key":"2 helpers","Fragments":["with"]},{"Key":"helpers with","Fragments":["intention"]},{"Key":"with intention","Fragments":["revealing","revealing","revealing"]},{"Key":"intention revealing","Fragments":["names,","code","names?","methods?","and","names"]},{"Key":"revealing names,","Fragments":["maybe"]},{"Key":"names, maybe","Fragments":["make"]},{"Key":"maybe make","Fragments":["this","its","the"]},{"Key":"make this","Fragments":["consistent","algorithm","simpler","easier","into","easier","a","simpler","a","clear","easier","a","work","any","slightly","solution","solution","calculation.","better"]},{"Key":"this consistent","Fragments":["and"]},{"Key":"consistent and","Fragments":["also","readable."]},{"Key":"and also","Fragments":["apply","on","Regex.scan/2?\"","\u003ccode\u003eRegex.scan/2\u003ccode\u003e?","the","for","a","would","me","allows"]},{"Key":"also apply","Fragments":["this"]},{"Key":"apply this","Fragments":["to","functions"]},{"Key":"this to","Fragments":["the","me","better","use","be","the","be","work","work"]},{"Key":"the 'third'","Fragments":["one?"]},{"Key":"It's possible","Fragments":["to","to","to","to","to","to"]},{"Key":"possible to","Fragments":["make","do","avoid","obtain","remove","DRY","DRY","infer","use","do","define","define","accomplish","do","do","define","split","pass","complete","get","define","remove","write","be","turn","pattern","merge"]},{"Key":"regex that","Fragments":["matches","could","doesn't"]},{"Key":"that matches","Fragments":["on","all"]},{"Key":"matches on","Fragments":["more","multiple","a"]},{"Key":"on more","Fragments":["than"]},{"Key":"more than","Fragments":["one","it","enough:","3X","the","returns","one","going","11","once.","renaming","a","one","the","once,","one","happy","I","once,","once.","one","lists).","once","my","converting"]},{"Key":"than one","Fragments":["upcase","line,","parameter?","argument.","byte","time."]},{"Key":"one upcase","Fragments":["character"]},{"Key":"upcase character","Fragments":["so"]},{"Key":"character so","Fragments":["you"]},{"Key":"could drop","Fragments":["the"]},{"Key":"the Enum.count","Fragments":["and"]},{"Key":"Enum.count and","Fragments":["Regex.scan","eliminate"]},{"Key":"and Regex.scan","Fragments":["in"]},{"Key":"Regex.scan in","Fragments":["favour"]},{"Key":"in favour","Fragments":["of","of"]},{"Key":"favour of","Fragments":["Regex.match?","doing"]},{"Key":"of Regex.match?","Fragments":["or"]},{"Key":"Regex.match? or","Fragments":["=~"]},{"Key":"or =~","Fragments":["operator."]},{"Key":"=~ operator.","Fragments":["But"]},{"Key":"operator. But","Fragments":["having"]},{"Key":"But having","Fragments":["said"]},{"Key":"having said","Fragments":["that"]},{"Key":"would advise","Fragments":["to"]},{"Key":"advise to","Fragments":["remove"]},{"Key":"the whole","Fragments":["Regex","functional","list,","string?","string","`fn","mess","list","this","looks","though","thing","looks","naming","thing.","reduce","this","looks","word","your","thing","Erlang","thing","collection","HashDict","string","thing?","string","looks","roster","list","string.","chunk","sentence","sentence","strand","really","string","test","test"]},{"Key":"whole Regex","Fragments":["altogether"]},{"Key":"Regex altogether","Fragments":["because"]},{"Key":"altogether because","Fragments":["there"]},{"Key":"because there","Fragments":["is","is","is","is"]},{"Key":"is another","Fragments":["way","way"]},{"Key":"another way","Fragments":["to","to","to","of"]},{"Key":"to test","Fragments":["for","for","anything","the","emptiness.","for","your","for","the","regexs","for","for","for","upcase","the"]},{"Key":"test for","Fragments":["SHOUTING.","shouting","a","this,","Elixir","shouting.","\"!\"","`nil`","the","it","a","`silence?`","that","questions","not","russian","(I've","the","this","an","equality","German"]},{"Key":"for SHOUTING.","Fragments":["Think"]},{"Key":"SHOUTING. Think","Fragments":["of"]},{"Key":"Think of","Fragments":["mutating","it","`Dict`"]},{"Key":"of mutating","Fragments":["the"]},{"Key":"mutating the","Fragments":["argument"]},{"Key":"the argument","Fragments":["to","to","to","is","to","as","`s`","to","that's"]},{"Key":"argument to","Fragments":["something","`String.ends_with?`","\u003ccode\u003egenerate_counts\u003c/code\u003e","`fact`","the","the","higher","`bottle_phrase`","`Words.count/1`","the","`count`","be","`Enum.map`,","reduce","a","append,","a","append,","Regex#replace/4"]},{"Key":"to something","Fragments":["that","like","else","like","like","longer","more","like","like","that","like","like","that","else?","else.","semantically","related"]},{"Key":"like shouting","Fragments":["and"]},{"Key":"shouting and","Fragments":["compare","question"]},{"Key":"and compare","Fragments":["it","it","with"]},{"Key":"compare it","Fragments":["with","with","to","with"]},{"Key":"it with","Fragments":["that!","a","List.foldl","an","predicate","a","a","an","a","Enum.","Enum,","pattern","`@laurine`,","them?","another","a","function","something","what","the","%r/\\p{L}/","guards","`concat`.","two","a","first","a","another"]},{"Key":"with that!","Fragments":["(hint"]},{"Key":"that! (hint","Fragments":["in"]},{"Key":"(hint in","Fragments":["the"]},{"Key":"the last","Fragments":["sentence)","character","character","character","`cond`","input","`sing/2`","test","element","function","tip,","thing","one).","character","function","expression","value","2","expression","two","test","(I","exercise","two","two","param","test","expression","line","line","expression","expression.","attempt","iteration.","clause","operation","expression","square...","word","clause","word","two","expression","expression","statement","two","expression","expression","expression","test","clause","default","iteration.","submission.","expression","expression","part","function","expression.","line","character's","three"]},{"Key":"Well done!","Fragments":["Why"]},{"Key":"done! Why","Fragments":["would"]},{"Key":"Why would","Fragments":["you","that","that"]},{"Key":"pattern matching?","Fragments":["As",";)","Now","It"]},{"Key":"matching? As","Fragments":["I"]},{"Key":"As I","Fragments":["think","discovered,","know","had","understand","understand","understand","understand"]},{"Key":"think you've","Fragments":["now","got"]},{"Key":"you've now","Fragments":["used"]},{"Key":"now used","Fragments":["good"]},{"Key":"used good","Fragments":["intention-revealing"]},{"Key":"good intention-revealing","Fragments":["names"]},{"Key":"intention-revealing names","Fragments":["and","--"]},{"Key":"names and","Fragments":["the","the","varaibles.","simple","variable"]},{"Key":"implementation describes","Fragments":["itself"]},{"Key":"describes itself","Fragments":["clearly"]},{"Key":"itself clearly","Fragments":["without"]},{"Key":"clearly without","Fragments":["having","just"]},{"Key":"without having","Fragments":["to","a","to","to","to","to","to","to","to","to","to","Bob"]},{"Key":"having to","Fragments":["read","use","manually","put","re-set","pass","create","compare","refactor","parse","guess,","enumerate","pass","iterate","convert","define","do","do","throw","read","then","do","know","dive","calculate","think","have"]},{"Key":"to read","Fragments":["any","and","up","on","the","but","to","when","in","in","that","your","that","if","and","if","--","(and","this","at","in","back",":-)","if","than","as","than","the","up","and","to","but","due","and","and","your","and","the","for","the","the","if","and","and","and","and","the","at","upon","e.g."]},{"Key":"read any","Fragments":["tests/specs,"]},{"Key":"any tests/specs,","Fragments":["I"]},{"Key":"tests/specs, I","Fragments":["doubt"]},{"Key":"I doubt","Fragments":["if","Stream.with_index","I'll","you'd"]},{"Key":"doubt if","Fragments":["that's"]},{"Key":"if that's","Fragments":["still","what","not","the","causing","a","just","better","not"]},{"Key":"that's still","Fragments":["the"]},{"Key":"still the","Fragments":["case","best"]},{"Key":"the case","Fragments":["if","but","statement","when","better","for","of","of","that","where","if","where","where","`a","of","though","of","where","expression","is","of","of","in"]},{"Key":"case if","Fragments":["your","you"]},{"Key":"if your","Fragments":["implementation","code","code","hey/1"]},{"Key":"implementation is","Fragments":["pattern","O(","the","certainly","a"]},{"Key":"is pattern","Fragments":["matching","matching?"]},{"Key":"matching based.","Fragments":["Could"]},{"Key":"based. Could","Fragments":["it"]},{"Key":"Could it","Fragments":["be","be"]},{"Key":"to create","Fragments":["the","a","a","the","a","as","mocks","an","the","the","the","an","a","a","dedicated"]},{"Key":"create the","Fragments":["pattern","same","HashDict","nucleotide_counts","list"]},{"Key":"matching version","Fragments":["and","and"]},{"Key":"version and","Fragments":["see","see","got","the","said"]},{"Key":"one is","Fragments":["best?","in","needed?","done!","interesting","more","better.","used.","that","verbose,","faster","a"]},{"Key":"Job! It's","Fragments":["one"]},{"Key":"It's one","Fragments":["of"]},{"Key":"one of","Fragments":["the","which","the","these,","them","your","the","the","the","the","these","those","previous","the","the","them","the","the","the","those","the","the","the"]},{"Key":"the first","Fragments":["versions","argument","argument","definition","one,","one,","argument","version","one.","version","one","doctest,","argument","place","two","level","time","`hey/1`","parameter","strand","test","strand.","strand","argument","condition","version","argument","version.","elixir","five","solution","run","attempt","param,","parameter","that","case.","part","implementation","it","character.","value","param","parameter","'count'","version.","2","one?","time","time.","iteration","generator.","params","or","element.","day","argument","one","just","exercise","exercise.","thing","argument","step","page","time:","step","matching","iteration","time:","step","practical","time","test","element","place.","list","append","argument.","time","to","code","parameter","and","argument","list","argument","argument,","is","could","number","10","character","version","condition","character","\u00261","one","argument","condition,","one","character","letter,","few"]},{"Key":"first versions","Fragments":["I've"]},{"Key":"versions I've","Fragments":["seen"]},{"Key":"I've seen","Fragments":["that's","it","with","the","some","of","have","a","2","so","a","this","the","do","the","a"]},{"Key":"seen that's","Fragments":["completely"]},{"Key":"that's completely","Fragments":["build","opaque."]},{"Key":"completely build","Fragments":["with"]},{"Key":"build with","Fragments":["pattern"]},{"Key":"with pattern","Fragments":["matching.","matching","matching","matching","matching?","matching.","matching","matching","matching,","matching","matching","matching.","matching","matching","matching."]},{"Key":"matching. Could","Fragments":["it"]},{"Key":"idea and","Fragments":["good","will"]},{"Key":"and good","Fragments":["exercise","functional","error"]},{"Key":"good exercise","Fragments":["to"]},{"Key":"exercise to","Fragments":["create","compare","not"]},{"Key":"create a","Fragments":["non-pattern","new","phrase.","zipped","list.","song-generator","dictionary","slightly","new","new","private,"]},{"Key":"a non-pattern","Fragments":["matching"]},{"Key":"non-pattern matching","Fragments":["version"]},{"Key":"one reads","Fragments":["better?"]},{"Key":"Good Job!","Fragments":["Almost"]},{"Key":"Job! Almost","Fragments":["there!"]},{"Key":"Almost there!","Fragments":["Maybe"]},{"Key":"there! Maybe","Fragments":["make"]},{"Key":"Maybe make","Fragments":["the"]},{"Key":"the 3","Fragments":["helper","methods","private","methods","components","and"]},{"Key":"3 helper","Fragments":["functions"]},{"Key":"helper functions","Fragments":["used","making","private","to","here","are","directly","for","to","private","uniform","which","go","to"]},{"Key":"functions used","Fragments":["inside","as","in"]},{"Key":"used inside","Fragments":["hey"]},{"Key":"inside hey","Fragments":["private?"]},{"Key":"hey private?","Fragments":["Maybe"]},{"Key":"private? Maybe","Fragments":["it's"]},{"Key":"Maybe it's","Fragments":["not","a","a","the","something","just"]},{"Key":"not always","Fragments":["needed","clear,","a"]},{"Key":"always needed","Fragments":["as"]},{"Key":"needed as","Fragments":["the","you"]},{"Key":"the functions","Fragments":["could","separated?","once.","are","nothing?,","you","instead","that","if","from","performs","elsewhere","in","*in*","in","at","in","didn't","are","in","should","you","`next_three`","are","correctly.","in","such","based","for","are","used"]},{"Key":"functions could","Fragments":["come"]},{"Key":"could come","Fragments":["in","up","up","up","up"]},{"Key":"come in","Fragments":["handy","handy.","handy","handy","handy.","handy"]},{"Key":"in handy","Fragments":["on","for","here.","here."]},{"Key":"handy on","Fragments":["their"]},{"Key":"on their","Fragments":["own","tastes"]},{"Key":"own in","Fragments":["the","a"]},{"Key":"You're right","Fragments":["the","about","of"]},{"Key":"right the","Fragments":["\"is_\""]},{"Key":"the \"is_\"","Fragments":["is","prefix.","and"]},{"Key":"\"is_\" is","Fragments":["redundant.","a","redundant","a"]},{"Key":"is redundant.","Fragments":["How"]},{"Key":"redundant. How","Fragments":["about"]},{"Key":"about sentence","Fragments":["instead"]},{"Key":"sentence instead","Fragments":["of"]},{"Key":"of string?","Fragments":["(naming"]},{"Key":"string? (naming","Fragments":["is"]},{"Key":"(naming is","Fragments":["hard"]},{"Key":"The idea","Fragments":["was","is","of","about","is","is","is","of","was","is"]},{"Key":"idea was","Fragments":["that","to","that","to","that"]},{"Key":"was that","Fragments":["'Bob'","\"1,","they're","it","you"]},{"Key":"that 'Bob'","Fragments":["would"]},{"Key":"'Bob' would","Fragments":["only"]},{"Key":"would only","Fragments":["'understand'","add","need"]},{"Key":"only 'understand'","Fragments":["speech"]},{"Key":"'understand' speech","Fragments":["(i.e."]},{"Key":"speech (i.e.","Fragments":["strings,"]},{"Key":"(i.e. strings,","Fragments":["which"]},{"Key":"strings, which","Fragments":["if"]},{"Key":"which if","Fragments":["I"]},{"Key":"I understand","Fragments":["it","you","those","your","your","correctly,","what","it,","it,","your","it","that","it's","the","that","the","why","it,","that","you","`/\\w+/`","the","of","the","what","the","it,","why","it,"]},{"Key":"understand it","Fragments":["correctly","is","by"]},{"Key":"it correctly","Fragments":["is","and"]},{"Key":"correctly is","Fragments":["the","important"]},{"Key":"same as","Fragments":["binary","3,","`[?A]`.","the","`replace_thymidine`,","the","Ruby.","input.","in","the","the","the","the","the","separate","if","6,","`[\\pL\\pN_]`,"]},{"Key":"as binary","Fragments":["in","0.\""]},{"Key":"binary in","Fragments":["elixir).","a"]},{"Key":"in elixir).","Fragments":["I"]},{"Key":"elixir). I","Fragments":["might"]},{"Key":"might have","Fragments":["over-interpreted","noticed","been","to","had","factored"]},{"Key":"have over-interpreted","Fragments":["the"]},{"Key":"over-interpreted the","Fragments":["exercise,"]},{"Key":"the exercise,","Fragments":["as","one","right?"]},{"Key":"exercise, as","Fragments":["this"]},{"Key":"as this","Fragments":["is","one","implementation,"]},{"Key":"this is","Fragments":["not","good\"","OK.","that","an","too","pretty","a","a","essentially","pretty","an","simply","not","wrong!","correct!","a","what","a","a","why","really","just","a","a","great.","a","hard.","not","a","what","about","on","not","one","one","to","[deprecated](https://groups.google.com/forum/#!topic/elixir-lang-core/FnlK6VjZ190).","more","the","every","my","probably","an","a","just","safe","not","a","the","bad","an","popular","a","that","really","clear","broken","kind","all","not","probably","because","a","indeed","Russian","great.","due","my","my","a","a","enough","not","looking","finished,","free","the","the","how","getting","what"]},{"Key":"is not","Fragments":["stated","to","specified","obvious","the","necessary,","to","a","an","a","approval","an","a","with","specified","passed","a","something","necessary","null.","sufficient","minor","as","part","limited","immediately","necessary.","a","having","the","an","the","the","capable","weird","tail","shouting","that","really","needed.","the","a","the","intended","advisable,","always","considered","perfect,","so","nil","unicode-aware","user-facing","exactly","tail","all","a","going","Elixir's","quite","recommended","else","a","the","the","tail-recursive,","really","only","enough","considered","valid","checking","enough.","a","handled.","obvious","necessary,","completely","strictly","idiomatic.","optimal","entirely","exposed","tail","always","really","a"]},{"Key":"not stated","Fragments":["explicitly"]},{"Key":"stated explicitly","Fragments":["anywhere"]},{"Key":"explicitly anywhere","Fragments":["in"]},{"Key":"anywhere in","Fragments":["the"]},{"Key":"point. I","Fragments":["thought","didn't","will","will","hadn't","will","went"]},{"Key":"about this","Fragments":["too","assignment,","implementation.","discussion","solution","syntax.","and","one,","to","is","one.","implementation",".","and"]},{"Key":"this too","Fragments":["and","old?"]},{"Key":"too and","Fragments":["decided"]},{"Key":"and decided","Fragments":["it","to","to"]},{"Key":"decided it","Fragments":["would","was"]},{"Key":"would not","Fragments":["give","only","be","cause","pad,","be","pass","have"]},{"Key":"not give","Fragments":["any","the"]},{"Key":"give any","Fragments":["benefits."]},{"Key":"any benefits.","Fragments":["I"]},{"Key":"benefits. I","Fragments":["think"]},{"Key":"think if","Fragments":["the","you","you","you"]},{"Key":"conditions would","Fragments":["be"]},{"Key":"be more","Fragments":["complex","readable","semantically","clear","idiomatic","internally","descriptive?","semantically","semantically","in","readable.","readable.","readable","appropriate","expressive","clear","consistent","consistent","clear","readable","clear","idiomatic","meaningful?","or","readable","readable","modular?","valuable","concise","specific","inclined","expressive","expressive,","flexible","readable.","\"standard\"","readable.","readable","readable","expressives.","than","efficient.","specific.","efficient","readable.","verbose","efficient.","readable","straightforward","efficient","readable","idiomatic","consistent","efficient","understandable,","expressive/clear","practical","readable,","readable.","efficient","consistent.","DRY,","idiomatic","idiomatic","telling","elegantly","expressive","performant.","Elixir"]},{"Key":"more complex","Fragments":["and/or","than","or","domain,","function","than","regex."]},{"Key":"complex and/or","Fragments":["should"]},{"Key":"and/or should","Fragments":["be"]},{"Key":"be extended","Fragments":["(i.e."]},{"Key":"extended (i.e.","Fragments":["yelling"]},{"Key":"(i.e. yelling","Fragments":["would"]},{"Key":"yelling would","Fragments":["not"]},{"Key":"not only","Fragments":["mean","perfectly","literally","the"]},{"Key":"only mean","Fragments":["upcase"]},{"Key":"mean upcase","Fragments":["but"]},{"Key":"upcase but","Fragments":["also","fails"]},{"Key":"but also","Fragments":["exclamation","things","what","possible:"]},{"Key":"also exclamation","Fragments":["mark)"]},{"Key":"exclamation mark)","Fragments":["it"]},{"Key":"mark) it","Fragments":["would"]},{"Key":"make perfect","Fragments":["sense"]},{"Key":"perfect sense","Fragments":["to"]},{"Key":"to encapsulate","Fragments":["them","the","the","their"]},{"Key":"encapsulate them","Fragments":["into"]},{"Key":"them into","Fragments":["private","a","one?","`anagrams?`","the"]},{"Key":"private methods.","Fragments":["After","You","And","I","Seems"]},{"Key":"methods. After","Fragments":["all"]},{"Key":"After all","Fragments":["it"]},{"Key":"all it","Fragments":["also"]},{"Key":"it also","Fragments":["depends","forces","matches","doesn't","means","makes","works","works","works","ends","extracts"]},{"Key":"also depends","Fragments":["on"]},{"Key":"depends on","Fragments":["the","the","knowing","the","the","whether","a","polymorphic","the","the"]},{"Key":"the kind","Fragments":["of","of","down","of","of","of","of","people"]},{"Key":"of 'future","Fragments":["readers',"]},{"Key":"'future readers',","Fragments":["but"]},{"Key":"readers', but","Fragments":["IMHO"]},{"Key":"but IMHO","Fragments":["the","is","is"]},{"Key":"IMHO the","Fragments":["standard","approach"]},{"Key":"the standard","Fragments":["elixir","library,","library","library.","library,","library?","is","library","lib.","library","library","library,","modules...it","library.","library.","mistakes","`Dict`","library","library."]},{"Key":"standard elixir","Fragments":["names"]},{"Key":"elixir names","Fragments":["and"]},{"Key":"the short","Fragments":["conditions","form","version","methods","form"]},{"Key":"short conditions","Fragments":["are"]},{"Key":"conditions are","Fragments":["perfectly","pretty","more","already"]},{"Key":"are perfectly","Fragments":["clear."]},{"Key":"the `\u003e","Fragments":["2`"]},{"Key":"`\u003e 2`","Fragments":["guard"]},{"Key":"2` guard","Fragments":["clauses"]},{"Key":"guard clauses","Fragments":["on","when","if","on","seem","are",":-)","in","in","with","instead","for","to","means","can"]},{"Key":"clauses on","Fragments":["`sing_verse`,","the","line"]},{"Key":"on `sing_verse`,","Fragments":["but"]},{"Key":"`sing_verse`, but","Fragments":["for"]},{"Key":"the other","Fragments":["ones,","conditions","message","refers","modules.","hand,","one,","bit","function","two","function","anonymous","comments","works","version","solutions","side","for","for","way,","hand","hand,","syntax.","that","parts","languages","solutions.","when","hand","exercise.","there's","approach","would","private","process.","suggestions","more","regexes","hand","language","branches.","hand","hand","functions.","case","functions,","functions","hand,","hand","methods,","functions"]},{"Key":"other ones,","Fragments":["do"]},{"Key":"ones, do","Fragments":["you"]},{"Key":"be clearer","Fragments":["to","for","to","to","to","what","if"]},{"Key":"clearer to","Fragments":["just","use","just","use","a","first"]},{"Key":"just pattern","Fragments":["match","match","matching."]},{"Key":"the numbers","Fragments":["`1`","in","really","after"]},{"Key":"numbers `1`","Fragments":["and"]},{"Key":"`1` and","Fragments":["`2`?"]},{"Key":"and `2`?","Fragments":["Also,"]},{"Key":"`2`? Also,","Fragments":["is"]},{"Key":"Also, is","Fragments":["there","there","there"]},{"Key":"reason to","Fragments":["have","use","use","use","use","ever","choose.","be.","have","prefer","restrict","create"]},{"Key":"have the","Fragments":["`Enum.to_list`","condition","feeling","right","confidence","\u003ccode\u003eMessage\u003c/code\u003e","table","operation","work","question","annoying","\"billion","ampersand","same","right","most","name","same","last","wrap","same","same","most","function","reminder.","number","`@rashawn`","advantage","Russian","\"shouting","same","edge-cases","same","\"tail\"","doctest"]},{"Key":"the `Enum.to_list`","Fragments":["in"]},{"Key":"`Enum.to_list` in","Fragments":["the"]},{"Key":"the pipeline?","Fragments":["I"]},{"Key":"pipeline? I","Fragments":["think"]},{"Key":"it works","Fragments":["fine","out","in","for","well","on","perfectly","btw","internally","and"]},{"Key":"works fine","Fragments":["without","to","with","as"]},{"Key":"fine without","Fragments":["it."]},{"Key":" Easier","Fragments":["to"]},{"Key":"Easier to","Fragments":["read,"]},{"Key":"to read,","Fragments":["no?","especially","what","specifically","IMO.","they","so"]},{"Key":" One","Fragments":["last","readability","thing","thing","comment","alternative","thing","result","of","thing:","of","small","small","other","of","thing","thing","way","thing","thing","tiny","nit","question","thing","final","possibility","more","thing","small","little","small","small","small","tiny","small","thing","thing","thing","thing","suggestion","thing","thing:","thing,","thing","thing"]},{"Key":"One last","Fragments":["nitpick"]},{"Key":"last nitpick","Fragments":["would"]},{"Key":"nitpick would","Fragments":["be","be","be"]},{"Key":"be to","Fragments":["include","see","just","add","test.","implement.)","put","reason","extract"]},{"Key":"to include","Fragments":["the","the","in","and","all","the"]},{"Key":"include the","Fragments":["check","String.downcase","words","`u`"]},{"Key":"the check","Fragments":["for","for","for","for","methods","would"]},{"Key":"for empty","Fragments":["string","strings.)","string?","or","lists"]},{"Key":"empty string","Fragments":["with","(==","as","being","in","`\"\"`","is","rather","to","\"\"","case.","multiple","literal.","case,","(I","special","I","is","would","instead","(probably","as","in","instead"]},{"Key":"string with","Fragments":["the","guards,","all","all","`\"\"`."]},{"Key":"the others.","Fragments":["I"]},{"Key":"others. I","Fragments":["understand"]},{"Key":"understand you","Fragments":["might","like"]},{"Key":"you might","Fragments":["want","have","find","want","consider","consider","as","consider","be","be","run","expect.","want","expect.","be","want","learn","think.","not","think","want","be","have","want","consider","consider","want","be","use","consider","be","use","consider","want","want","want"]},{"Key":"to user","Fragments":["pattern"]},{"Key":"user pattern","Fragments":["matching"]},{"Key":"matching but","Fragments":["it","opted"]},{"Key":"sense now","Fragments":["to"]},{"Key":"now to","Fragments":["add"]},{"Key":"to add","Fragments":["a","`respond_to`","them","a","an","that","a","the","those","a","things","new","a","`?0`","a"]},{"Key":"a silence?","Fragments":["method"]},{"Key":"silence? method","Fragments":["than"]},{"Key":"method than","Fragments":["to"]},{"Key":"than to","Fragments":["keep","put","use","write"]},{"Key":"to keep","Fragments":["they","meditating","the","the","the","proper","things","that","in","that","`yelling`","the","the","the","track","rambling...","it","things","this","in","things","variables","the","up","the","things"]},{"Key":"keep they","Fragments":["hey(\"\")"]},{"Key":"they hey(\"\")","Fragments":["one."]},{"Key":" Nicely","Fragments":["done!","done","done!"]},{"Key":"is following","Fragments":["Ruby","Ruby"]},{"Key":"following Ruby","Fragments":["when","when"]},{"Key":"the convention","Fragments":["of","of","is","based","for","I'm","is","in","is","for","is"]},{"Key":"convention of","Fragments":["putting","putting","method","naming","ending"]},{"Key":"of putting","Fragments":["parens","parens","private","to","the","this..."]},{"Key":"putting parens","Fragments":["around","around"]},{"Key":"parens around","Fragments":["arguments","arguments","`String.downcase`,","the","the"]},{"Key":"around arguments","Fragments":["when","when","to"]},{"Key":"arguments when","Fragments":["calling","calling"]},{"Key":"when calling","Fragments":["and","and","it","it"]},{"Key":"calling and","Fragments":["defining","defining"]},{"Key":"and defining","Fragments":["a","a"]},{"Key":"defining a","Fragments":["function.","function,","protocol"]},{"Key":"a function.","Fragments":["(But","In"]},{"Key":"function. (But","Fragments":["I"]},{"Key":"(But I","Fragments":["could","could"]},{"Key":"be wrong!","Fragments":["That's","That's"]},{"Key":"wrong! That's","Fragments":["what","what"]},{"Key":"That's what","Fragments":["I","I","I","that","exercism","I","we're"]},{"Key":"have seen","Fragments":["commonly","so","both.","the"]},{"Key":"seen commonly","Fragments":["so"]},{"Key":"commonly so","Fragments":["far"]},{"Key":"so far","Fragments":["though)","though)","has","as"]},{"Key":"a function,","Fragments":["like","for","instead","rather","rather","as","I","so"]},{"Key":"function, like","Fragments":["you","`characters_used_in`?"]},{"Key":"like you","Fragments":["did","could","would","could","could","have","did,","might","have","could","do","said.","have,","to","do"]},{"Key":"you did","Fragments":["on","a","here.","something","want","to","it","it","it","most"]},{"Key":"did on","Fragments":["line"]},{"Key":"line 25.","Fragments":["(But"]},{"Key":"25. (But","Fragments":["I"]},{"Key":"seen so","Fragments":["far","far."]},{"Key":" Nope","Fragments":["-"]},{"Key":"Nope -","Fragments":["removed"]},{"Key":"- removed","Fragments":["it"]},{"Key":"removed it","Fragments":["from",":)"]},{"Key":"it from","Fragments":["the","there.","the","breaking","there.","happening,","superlist?,","the"]},{"Key":"cond in","Fragments":["hey,","the","this"]},{"Key":"in hey,","Fragments":["but"]},{"Key":"hey, but","Fragments":["forgot"]},{"Key":"but forgot","Fragments":["to"]},{"Key":"forgot to","Fragments":["remove","make","remove","update","read"]},{"Key":"the method","Fragments":["itself..","uppercase","String.ends_with?/1","hey,","generic.","HashDict.update?","signature","names","name","is_blank?","definiition","on","call?","definitions","doesn't","names?","for","is","call","signature","to"]},{"Key":"and concise.","Fragments":["Just","I'm"]},{"Key":"concise. Just","Fragments":["a"]},{"Key":"Just a","Fragments":["couple","regular","little","couple","quick","couple","couple","minor","string","small","quick","general","couple","couple","couple","couple","tiny","couple","couple","note","thought."]},{"Key":"code more","Fragments":["clear","readable?","readable?","readable.","readable","readable.","readable.","readable.","efficient,","consistent","readable.","general,","readable."]},{"Key":"more clear","Fragments":["for","way","to","with","to","below","separation","as"]},{"Key":"clear for","Fragments":["future"]},{"Key":"for future","Fragments":["readers","readers,","exercises."]},{"Key":"future readers","Fragments":["if"]},{"Key":"readers if","Fragments":["you"]},{"Key":"you extracted","Fragments":["the","some","separate","a"]},{"Key":"extracted the","Fragments":["logic","reduce","`Word`","condition"]},{"Key":"logic into","Fragments":["private","private","separate","some","some","meaningful","a"]},{"Key":"private methods","Fragments":["with","that","inside","with","into","with","one","at","to","after","do","with","could","to","it","to","so","down","into","is","take","with","here,","and"]},{"Key":"methods with","Fragments":["intention-revealing","intention-revealing","intention","an","intention-revealing","no","default","intention","conditions"]},{"Key":"with intention-revealing","Fragments":["names?","names","names?","names,","names?","names?","names.","names.","names."]},{"Key":" Sorry,","Fragments":["it","couldn't","I","I","I","my","my"]},{"Key":"Sorry, it","Fragments":["was"]},{"Key":"was late","Fragments":["and"]},{"Key":"late and","Fragments":["I"]},{"Key":"I meant","Fragments":["to","something","extracting","to","was:","to","to"]},{"Key":"meant to","Fragments":["type","suggest","match,","ask","mention","make","use","submit"]},{"Key":"type else","Fragments":["="]},{"Key":"else =","Fragments":["true!"]},{"Key":" From","Fragments":["what","what","the","version","[`List`](http://elixir-lang.org/docs/stable/List.html),"]},{"Key":"From what","Fragments":["I","I","I"]},{"Key":"understand those","Fragments":["who"]},{"Key":"those who","Fragments":["have"]},{"Key":"who have","Fragments":["finished"]},{"Key":"have finished","Fragments":["the"]},{"Key":"finished the","Fragments":["exercise"]},{"Key":"the exercise","Fragments":["can","is","with","it's","I","is","instructions","of","expected","to","specific","using","you","is","is","(used","stub.","was","feels","as","works","here","ask","–","so"]},{"Key":"exercise can","Fragments":["say","be"]},{"Key":"can say","Fragments":["\"I","that","that"]},{"Key":"say \"I","Fragments":["think"]},{"Key":"\"I think","Fragments":["this"]},{"Key":"is good\"","Fragments":["but"]},{"Key":"good\" but","Fragments":["from"]},{"Key":"but from","Fragments":["there","what","an"]},{"Key":"from there","Fragments":["only"]},{"Key":"there only","Fragments":["moderators"]},{"Key":"only moderators","Fragments":["can"]},{"Key":"moderators can","Fragments":["say"]},{"Key":"say that","Fragments":["it","there","the","this","I","unless","a","you're","even","we","I"]},{"Key":"it is","Fragments":["\"picked","a","perfect","more","called","called","a","true.","an","a","in","`classify`.","possible","in","easier","more","only","true","much","responsible","available.","upcase?","idiomatic","(e.g.","checked","solid,","checking","a","shorter","a","more","an","used","quite","O(n),","idiomatic","probably","effectively","a","using","pretty","-","possible...I'd","to","optimal.","fine","more","a","to","a","quite","really","a","a","exactly","commonly","easier","to","common","one","missing","accepted?","a","already","a","much","so","very","always","specified","in","important","much","still","still","super-fast.","very","a","quite","very","the","checking","very","a","to","optimal."]},{"Key":"is \"picked","Fragments":["clean\""]},{"Key":"\"picked clean\"","Fragments":["as"]},{"Key":"clean\" as","Fragments":["katrina"]},{"Key":"as katrina","Fragments":["would"]},{"Key":"katrina would","Fragments":["say"]},{"Key":"would say","Fragments":["(https://twitter.com/exercism_io/status/360780304862031874)","yes.","I","that"]},{"Key":"Ok, now","Fragments":["I"]},{"Key":"now I","Fragments":["am","have","get","see","know.","see","don't","see","mean","realize","can","remembered"]},{"Key":"I am","Fragments":["stuck.","gonna","not","looking","a","finding","also","trying","only","not","no","not","as","actually","thinking","going","not","not","amazed","*really*","not","a","not","still","certain","very","saying","learning","somewhat","going","rather","not","looking","new","thinking","also","anxiously","extremely","unsure","still","somewhat","going","not","unsure","missing","missing,","familiar","sorting","still","still","still","new","too","using","calculating","pretty","no","sure","having","new"]},{"Key":"am stuck.","Fragments":["I'm"]},{"Key":"stuck. I'm","Fragments":["struggling"]},{"Key":"I'm struggling","Fragments":["to","to"]},{"Key":"struggling to","Fragments":["understand","find"]},{"Key":"understand the","Fragments":["whole","approach","functions'","code","high-level","exercism.","[relevant","issues","\"bare","usefulness","details","logic","spec","purpose","value","regex","issues"]},{"Key":"whole functional","Fragments":["and"]},{"Key":"functional and","Fragments":["pattern"]},{"Key":"matching that","Fragments":["is","Elixir","it"]},{"Key":"is Elixir's","Fragments":["awesomeness."]},{"Key":" Thank","Fragments":["you","you","you","you","you","you","you","you","you","you","you","you.","you","you","you","you","you","you!","you","you","you","you,","you","you"]},{"Key":"Thank you","Fragments":["for","for","for","for","for","for","for","for","so","for",":)","about","to","@willy!","so","@adelle,","all,","very","for","again","for","for","for","for","for"]},{"Key":"you for","Fragments":["your","your","your","taking","your","your","your","your","your","the","it.","your","making","teaching","your","your","your","your","thinking","it.","pointing","your","the","the"]},{"Key":"your feedback.","Fragments":["I","It","I","I","I","I","I","I've","I've","This","I","I","I"]},{"Key":"feedback. I","Fragments":["submitted","think","have","submitted","submitted","made","just","really","really","had","messed","was","will","spent","agree,","will","will","uploaded","uploaded","debated","have"]},{"Key":"new version","Fragments":["of","wit","uploaded","without","that","(4)","with","of","on","with","shortly!","with","is","though.","with","up.","using","of","that","with",":)","that","that","of","now.","taking","without","using","in","is","using","again","with","which"]},{"Key":" Another","Fragments":["way","thing","\"readability\"","suggestion","question:","potential","de-duplication:","alternative","observation","performance","suggestion","is","is"]},{"Key":"Another way","Fragments":["to","you"]},{"Key":"a tiny","Fragments":["bit","nit.","bit","way.","bit","bit","thought","bit"]},{"Key":"tiny bit","Fragments":["better","more","shorter.","more","slower).","less"]},{"Key":"bit better","Fragments":["is","by","than","than"]},{"Key":"better is","Fragments":["to","all"]},{"Key":"is to","Fragments":["use","say","use","set","just","produce","expose","\"update\"","keep","return","end","take","use","read","just","produce","figure","not","look","have","identify","return","use","support","end","first","have","be","stay","wrap","use","use","map/map","show","rename","use","make","have","generate","qualify","favor","`Enum.reduce`.","say","say","prefix","replace","put","use","say","think","make","say","say","write","minimize","use","create","`defp`","say,","say","say","write","most","name"]},{"Key":"use method","Fragments":["names"]},{"Key":"method names","Fragments":["that","could","can","are"]},{"Key":"names that","Fragments":["explain","end","explain"]},{"Key":"that explain","Fragments":["their","what"]},{"Key":"explain their","Fragments":["purpose","meaning"]},{"Key":"their purpose","Fragments":["and"]},{"Key":"purpose and","Fragments":["*not*"]},{"Key":"and *not*","Fragments":["how"]},{"Key":"*not* how","Fragments":["they"]},{"Key":"how they","Fragments":["do","worked.","look.","are"]},{"Key":"they do","Fragments":["it.","or","(more"]},{"Key":"do it.","Fragments":["For","I","Can","(There","The"]},{"Key":"it. For","Fragments":["example,"]},{"Key":"For example,","Fragments":["the","the","`a","what","the","calling","if","instead","if","if","I","the","there"]},{"Key":"example, the","Fragments":["method","expression","function","initial"]},{"Key":"method uppercase","Fragments":["could"]},{"Key":"uppercase could","Fragments":["be"]},{"Key":"be renamed","Fragments":["to"]},{"Key":"renamed to","Fragments":["shouting?,"]},{"Key":"to shouting?,","Fragments":["dont"]},{"Key":"shouting?, dont","Fragments":["you"]},{"Key":"dont you","Fragments":["think?"]},{"Key":"The same","Fragments":["applies","issue","word","goes"]},{"Key":"same applies","Fragments":["to"]},{"Key":"applies to","Fragments":["all","Elixir's"]},{"Key":"to all","Fragments":["string","the","dictionaries."]},{"Key":"all string","Fragments":["checks."]},{"Key":" \u003ccode\u003eis_forceful?\u003c/code\u003e","Fragments":["is"]},{"Key":"\u003ccode\u003eis_forceful?\u003c/code\u003e is","Fragments":["never"]},{"Key":"is never","Fragments":["called"]},{"Key":"never called","Fragments":["and","because"]},{"Key":"called and","Fragments":["it's","data"]},{"Key":"not part","Fragments":["of","of"]},{"Key":"the public","Fragments":["interface.","really","methods","ones,","interface","or","api?","interface","interface.","API","API","API","functions.","function","interface","sing","interface"]},{"Key":"public interface.","Fragments":["Is","Easy","I"]},{"Key":"interface. Is","Fragments":["there"]},{"Key":"reason for","Fragments":["it?","keeping","\u003ccode\u003eis_anything_else?(_)\u003c/code\u003e.","making","not","those","using","why","the","slowless","Enum.count","it.","`@demetrius`","not"]},{"Key":" Much","Fragments":["simpler.","better","clearer","nicer.","better!","Better!","better!","better!!","better!!","better!","better."]},{"Key":"the \u003ccode\u003eDict\u003c/code\u003e","Fragments":["data"]},{"Key":"\u003ccode\u003eDict\u003c/code\u003e data","Fragments":["structure?"]},{"Key":"data structure?","Fragments":["What"]},{"Key":"structure? What","Fragments":["benefit"]},{"Key":"What benefit","Fragments":["does","do","do"]},{"Key":"benefit does","Fragments":["it"]},{"Key":"does it","Fragments":["give","make","mean"]},{"Key":"it give","Fragments":["you?"]},{"Key":"your feedback,","Fragments":["I've","you're","I"]},{"Key":"feedback, I've","Fragments":["submitted"]},{"Key":"I've submitted","Fragments":["a","new","another","my","a","a","a","a","an","a","another","an","another","an"]},{"Key":"version wit","Fragments":["your"]},{"Key":"wit your","Fragments":["suggestions"]},{"Key":"your suggestions","Fragments":[":-)","I","to","into"]},{"Key":"on ends_with?","Fragments":["-"]},{"Key":"ends_with? -","Fragments":["that's"]},{"Key":"- that's","Fragments":["definitely","how","just"]},{"Key":"that's definitely","Fragments":["better."]},{"Key":" Was","Fragments":["thinking","the","able","there"]},{"Key":"Was thinking","Fragments":["'forceful'"]},{"Key":"thinking 'forceful'","Fragments":["messages"]},{"Key":"'forceful' messages","Fragments":["were"]},{"Key":"messages were","Fragments":["mentioned"]},{"Key":"were mentioned","Fragments":["in"]},{"Key":"mentioned in","Fragments":["the","my","the","the"]},{"Key":"the readme,","Fragments":["but"]},{"Key":"readme, but","Fragments":["I"]},{"Key":"I see","Fragments":["now","your","that","is","how","it","the","that","this:","the","is","how","also","you've","that","what","it,","that","I","your","it","guard","guard","the","it,","that","it","what's","what's","Kernel.length","you've","from","you've","you","now","what","how","now","where","other's","now"]},{"Key":"see now","Fragments":["that","how","after","how","that"]},{"Key":"now that","Fragments":["they're","I've","you","you're","I'm","you","I","you've","I","I","we","I","`+`"]},{"Key":"that they're","Fragments":["not,","not.","added","necessarily"]},{"Key":"they're not,","Fragments":["so"]},{"Key":"not, so","Fragments":["I'll"]},{"Key":"so I'll","Fragments":["remove","resubmit","do","add","leave","think","slowly","leave","try"]},{"Key":"I'll remove","Fragments":["that"]},{"Key":"remove that","Fragments":["clause"]},{"Key":"that clause","Fragments":["as"]},{"Key":"clause as","Fragments":["well.."]},{"Key":" i","Fragments":["was"]},{"Key":"i was","Fragments":["already","trying","pointed","wondering","trying"]},{"Key":"was already","Fragments":["doubting","counted,"]},{"Key":"already doubting","Fragments":["to"]},{"Key":"doubting to","Fragments":["use"]},{"Key":"use String.ends_with?,","Fragments":["now"]},{"Key":"String.ends_with?, now","Fragments":["you've"]},{"Key":"now you've","Fragments":["convinced"]},{"Key":"you've convinced","Fragments":["me"]},{"Key":"convinced me","Fragments":["to"]},{"Key":"me to","Fragments":["use","Elixir","parse","it!","look","stripping","make","augment","have","race","create","implement","implement","do","get","keep","anything","eliminate","then","sort","say","look","handle","understand","read","guess"]},{"Key":"use it","Fragments":[":D","lately,","when","in","you'll","in","in","for","throughout","in","in","to","for","if","in","because","however","because","only","on","when"]},{"Key":" Probably","Fragments":["it","a","doesn't"]},{"Key":"Probably it","Fragments":["would"]},{"Key":"would have","Fragments":["been","to","been","no","to","to","to","solved","thought","been","thought","thought","liked","been","thought","written","to"]},{"Key":"have been","Fragments":["\"simpler\"","some","updated","some","when","written","inlined","some","written","before","more","obvious!","lurking","cleaned","to","copied","detected."]},{"Key":"been \"simpler\"","Fragments":["by"]},{"Key":"\"simpler\" by","Fragments":["using"]},{"Key":"using some","Fragments":["sort","sort","form","sugar?"]},{"Key":"some sort","Fragments":["of","inside","of","of","of","of","of"]},{"Key":"sort of","Fragments":["conditional","default","pattern","dynamic","[`sprintf`](http://apidock.com/ruby/Kernel/sprintf)","the","interchangeable?","see","feeding","goes","thing","map_with_index","see","what","the","protocol","thing","thing","an","weird","hard","thing:"]},{"Key":"of conditional","Fragments":["if/else,"]},{"Key":"conditional if/else,","Fragments":["case,"]},{"Key":"if/else, case,","Fragments":["cond"]},{"Key":"case, cond","Fragments":["in"]},{"Key":"the code,","Fragments":["though","I","I","I","so","`Enum.join`","now","I"]},{"Key":"code, though","Fragments":["by","I"]},{"Key":"though by","Fragments":["being"]},{"Key":"by being","Fragments":["a","more"]},{"Key":"a total","Fragments":["elixir","Elixir","ordering","save"]},{"Key":"total elixir","Fragments":["noob"]},{"Key":"elixir noob","Fragments":["I"]},{"Key":"noob I","Fragments":["tried"]},{"Key":"tried to","Fragments":["stick","make","resubmit,","come","fix","over","implement","change","pull","make","find","define","do","extract","put","make","find","create","extract","test","remove","fix","keep","reproduce","think","mark","keep","find","DRY","do"]},{"Key":"to stick","Fragments":["to","to","with"]},{"Key":"stick to","Fragments":["guard","master,"]},{"Key":"to guard","Fragments":["clause","against"]},{"Key":"guard clause","Fragments":["instead","to","in","to","functions,","to","to","for","and"]},{"Key":"clause instead","Fragments":["and"]},{"Key":"instead and","Fragments":["think"]},{"Key":"and think","Fragments":["in","it","the"]},{"Key":"think in","Fragments":["term","this","some"]},{"Key":"in term","Fragments":["of","of","of","of"]},{"Key":"term of","Fragments":["transformation.","`reduce`","`reduce`","`reduce`"]},{"Key":"Good idea!","Fragments":["What"]},{"Key":"idea! What","Fragments":["do"]},{"Key":"What do","Fragments":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you"]},{"Key":"about this:","Fragments":["http://exercism.io/submissions/51f687daafd6c47513000220"]},{"Key":" Fair","Fragments":["point,","enough.","enough.","point!","enough!"]},{"Key":"Fair point,","Fragments":["functions"]},{"Key":"point, functions","Fragments":["it"]},{"Key":"functions it","Fragments":["is!","looks"]},{"Key":"it is!","Fragments":[":)"]},{"Key":"think either","Fragments":["of"]},{"Key":"either of","Fragments":["those","those"]},{"Key":"of those","Fragments":["strategies","operations","atomic","case","functions","two","requirements","syntactic","texts","things","and","seemed","things","I","some","extra","tests","operations","two","private","functions","domain"]},{"Key":"those strategies","Fragments":["are"]},{"Key":"strategies are","Fragments":["fine"]},{"Key":"are fine","Fragments":["for"]},{"Key":"fine for","Fragments":["this","all","almost","relatively"]},{"Key":"this problem.","Fragments":["In","The","Perhaps"]},{"Key":"problem. In","Fragments":["a","this"]},{"Key":"In a","Fragments":["larger","practical","language","basic"]},{"Key":"a larger","Fragments":["system,","magnitude,","codebase."]},{"Key":"larger system,","Fragments":["it"]},{"Key":"system, it","Fragments":["would"]},{"Key":"would depend","Fragments":["on","on"]},{"Key":"depend on","Fragments":["whether","how","the"]},{"Key":"on whether","Fragments":["or","predicate","to","someone"]},{"Key":"whether or","Fragments":["not","not","not","not"]},{"Key":"not you","Fragments":["needed","might"]},{"Key":"you needed","Fragments":["to","to","to","below","to"]},{"Key":"needed to","Fragments":["use","support","be","flatten","pass","check","use","guide","be","change"]},{"Key":"checks outside","Fragments":["this"]},{"Key":"outside this","Fragments":["module.","module"]},{"Key":" Minor","Fragments":["point,","point,","point:","nit,","style","stylistic"]},{"Key":"Minor point,","Fragments":["but","but","`Enum`"]},{"Key":"point, but","Fragments":["I'd","do","I"]},{"Key":"but I'd","Fragments":["argue","rather","rather"]},{"Key":"I'd argue","Fragments":["that"]},{"Key":"argue that","Fragments":["just","it","the"]},{"Key":"that just","Fragments":["because","didn't","seemed","using","doesn't"]},{"Key":"just because","Fragments":["a","I","they're","I'm","I'm","it","there","it"]},{"Key":"because a","Fragments":["message"]},{"Key":"a message","Fragments":["contains","with","to"]},{"Key":"message contains","Fragments":["an"]},{"Key":"contains an","Fragments":["exclamation"]},{"Key":"an exclamation","Fragments":["point","point.\""]},{"Key":"exclamation point","Fragments":["doesn't"]},{"Key":"point doesn't","Fragments":["make"]},{"Key":"a shout.","Fragments":["Consider:",":"]},{"Key":" \"The","Fragments":["character"]},{"Key":"\"The character","Fragments":["'!'"]},{"Key":"character '!'","Fragments":["is"]},{"Key":"'!' is","Fragments":["called"]},{"Key":"is called","Fragments":["an","with","(which","out","for","something","the","by"]},{"Key":"called an","Fragments":["exclamation"]},{"Key":" gotcha!","Fragments":["guess"]},{"Key":"gotcha! guess","Fragments":["I"]},{"Key":"guess I","Fragments":["am","don't","need","am","moved","don't","could","clicked","could","was","could","think","should","was","was","should've","leak","would"]},{"Key":"am gonna","Fragments":["rewrite"]},{"Key":"gonna rewrite","Fragments":["this"]},{"Key":"rewrite this","Fragments":["by"]},{"Key":"this by","Fragments":["throwing","using","coming","either"]},{"Key":"by throwing","Fragments":["in"]},{"Key":"throwing in","Fragments":["a"]},{"Key":"a bunch","Fragments":["of","in","of","of","more","of","of","of"]},{"Key":"bunch of","Fragments":["if/else,","time","tiny","cutting-edge","private","anonymous"]},{"Key":"of if/else,","Fragments":["when"]},{"Key":"if/else, when","Fragments":["cond"]},{"Key":"when cond","Fragments":["statements"]},{"Key":"cond statements","Fragments":[":)","much"]},{"Key":"on that.","Fragments":["Don't","I"]},{"Key":"that. Don't","Fragments":["focus"]},{"Key":"Don't focus","Fragments":["too"]},{"Key":"focus too","Fragments":["much"]},{"Key":"much right","Fragments":["now"]},{"Key":"right now","Fragments":["on","with","and","there","for","my","I","(aside"]},{"Key":"now on","Fragments":["using"]},{"Key":"on using","Fragments":["the","`Enum.filter_map`","that","`Regex.scan`"]},{"Key":"using the","Fragments":["correct","pipeline","content","one","\u0026","pattern","guarded","pipe","ampersand","\u00261","capture","shorthand","pipeline","shorthand","regex","|\u0026gt;","pipeline","binary","```fn```","module","pipeline","`\u0026`","`case`","pipeline","pipeline","UTF-8","pipeline","knowledge","shorter","most","functional","Erlang","\u0026","\u0026(...)","`\\P`","`Bitwise`","list","right","Stream","same","imports","fact","`HashDict`","`\\p{}`","tail-call","fact","three","awesomeness","shorthand","==","latest","length","pipe","```Enum.take/2```","`only:`","`|\u003e`","`\u0026`","reduce","built"]},{"Key":"correct idioms","Fragments":["or"]},{"Key":"idioms or","Fragments":["the"]},{"Key":"or the","Fragments":["features","standard","like.","results","standard","tests","first","5","non-syntactic-sugar","[elixir-lang-talk](https://groups.google.com/forum/?fromgroups#!forum/elixir-lang-talk)","accumulator.","emptiness","reducing"]},{"Key":"the features","Fragments":["of"]},{"Key":"features of","Fragments":["the","Elixir"]},{"Key":"the language.","Fragments":["Focus","That","I","Streams"]},{"Key":"language. Focus","Fragments":["first"]},{"Key":"Focus first","Fragments":["on"]},{"Key":"first on","Fragments":["readability/maintainability"]},{"Key":"on readability/maintainability","Fragments":["and"]},{"Key":"readability/maintainability and","Fragments":["work"]},{"Key":"and work","Fragments":["up"]},{"Key":"work up","Fragments":["from"]},{"Key":"up from","Fragments":["there.","a","the","doing","the"]},{"Key":" good","Fragments":["job!"]},{"Key":"code might","Fragments":["be","pass"]},{"Key":"more readable","Fragments":["if","than","in","if","code","as","than","now.","and","than",",","I","but","by","for","in","if","if","is","but","if","if","code.","here.","than","with","than","if",":","than","result","to","line.","and","regular","regex.","by","to"]},{"Key":"readable if","Fragments":["you","extract","you","you","you","you","you"]},{"Key":"you put","Fragments":["the","it,","\u003ccode\u003ecount_fnx\u003c/code\u003e","in","first","`_area_code`"]},{"Key":"put the","Fragments":["string","public","returns","body","name","intention","pipeline","`|\u003e`","main","attributes","module","86400","`@brady`","logic","`|\u003e`","`do_foo`","different","empty","comments"]},{"Key":"the string","Fragments":["tests","\"SHOUT\"","from","into","with","and","into","instead","check","is","actually","before","literal","is","checks","checks","before","get","before","I","would","is","\"ÉÑØ\".","is","but","to","to","concat","contained","again","doesn't","of","is","of","uniquely","after","is","match.","contains","into","instead","like","interpolation.","length."]},{"Key":"string tests","Fragments":["inside","actually"]},{"Key":"tests inside","Fragments":["methods"]},{"Key":"inside methods","Fragments":["that"]},{"Key":"methods that","Fragments":["are","abstract","read","test","represent","`String`","are","operate","can","end","use","each","would","don't","would","return"]},{"Key":"are named","Fragments":["for","in","after","with","using"]},{"Key":"named for","Fragments":["the"]},{"Key":"test you","Fragments":["are"]},{"Key":"you are","Fragments":["doing?","doing","using","enjoying","doing","using","adding","executing","talking","thinking?","protecting","not","going","spot","concerned","in","right.","using","doing","passing","not","referring","7","_very_","right.","currently","testing","looking","absolutely","the","exposing","satisfied","right,","looking","right.","still","stuck","interested"]},{"Key":"are doing?","Fragments":["Will"]},{"Key":"doing? Will","Fragments":["that"]},{"Key":"Will that","Fragments":["make"]},{"Key":"that make","Fragments":["the","the","sense?","sense?","people"]},{"Key":"Also, do","Fragments":["you","you","you","you","you"]},{"Key":"know of","Fragments":["the","any","other","a"]},{"Key":"method String.ends_with?/1","Fragments":["?"]},{"Key":" Imagine","Fragments":["for"]},{"Key":"Imagine for","Fragments":["a"]},{"Key":"for a","Fragments":["moment","better","separate","empty","teenager.","more","very","variable.","long","first","way","function","cartesian","lot","small","nil","better","question","way","single","string","String","bit","reason","few","readable","reason,","way","day","string,","binary","general","`Char`","macro","macro","one","good","function.","reason,","number","single","bit","call","constant.","bit","private","while,","few","map/reduce,","long","link","hint","rather","list","list","simpler","list","list","large","huge","helper","function","few","function","huge","main","large","huge","large","unicode","function","function","large","huge","function","list","side","chance","good","second","lot","large","huge","large","huge","reader","cleaner","list:","slightly","one-line","`reduce`-based","total","while,","nice","large","huge","large","huge","functional","call","little","newbie"]},{"Key":"a moment","Fragments":["that"]},{"Key":"moment that","Fragments":["someone"]},{"Key":"that someone","Fragments":["that","suggested","might","can"]},{"Key":"someone that","Fragments":["has","spends"]},{"Key":"that has","Fragments":["never","to","comprehensions","only","the","its","the","a"]},{"Key":"has never","Fragments":["seen"]},{"Key":"never seen","Fragments":["your","a","`hd/1`"]},{"Key":"seen your","Fragments":["code"]},{"Key":"your code","Fragments":["needs","might","is","and","a","is","has","is","a","line","by","handle","that","for","won't","is","runs","doesn't","is","and","expresses.","certainly","looks","with","is","updates","probably.","updates","though,","works","has","looks","does?","is","looks","is","that","changes","quite","is","here,","self","a","is","and"]},{"Key":"code needs","Fragments":["to"]},{"Key":"needs to","Fragments":["make","handle","be","respond","be.","be","be.","match","be.","added","traverse","be","be","be","be","be","be"]},{"Key":"a change.","Fragments":["Is"]},{"Key":"change. Is","Fragments":["your"]},{"Key":"Is your","Fragments":["current","`Statement`","way"]},{"Key":"your current","Fragments":["version"]},{"Key":"current version","Fragments":["of","of","is"]},{"Key":"code the","Fragments":["most","most"]},{"Key":"most readable","Fragments":["and","solution,","thing."]},{"Key":"readable and","Fragments":["understandable","easier","idiomatic","idiomatic.","use"]},{"Key":"and understandable","Fragments":["version"]},{"Key":"understandable version","Fragments":["of"]},{"Key":"the solution?","Fragments":["Can"]},{"Key":"solution? Can","Fragments":["it"]},{"Key":"Can it","Fragments":["be","even"]},{"Key":"be better?","Fragments":["Simpler?"]},{"Key":"the intention","Fragments":["of","of","of","of","of","anyways.)","behind","was","is","of"]},{"Key":"intention of","Fragments":["the","this","the","the","the","that"]},{"Key":"the program","Fragments":["more","is","will"]},{"Key":"program more","Fragments":["clear?"]},{"Key":"more clear?","Fragments":["Will","If"]},{"Key":"clear? Will","Fragments":["using"]},{"Key":"Will using","Fragments":["methods"]},{"Key":"using methods","Fragments":["that"]},{"Key":"that abstract","Fragments":["the"]},{"Key":"abstract the","Fragments":["tests","`true`"]},{"Key":"tests make","Fragments":["the"]},{"Key":"Maybe consider","Fragments":["deleting","putting"]},{"Key":"consider deleting","Fragments":["it"]},{"Key":"deleting it","Fragments":["entirely."]},{"Key":"it entirely.","Fragments":["Is"]},{"Key":"entirely. Is","Fragments":["there"]},{"Key":"for keeping","Fragments":["it"]},{"Key":"keeping it","Fragments":["around?","nice"]},{"Key":"good. A","Fragments":["couple","few","few","few"]},{"Key":"of small","Fragments":["things:","nits:","comments:","nits:","lists\"","comments:","suggestions:","lists).","lists","lists\"`","lists\"","lists\""]},{"Key":"small things:","Fragments":["the"]},{"Key":"things: the","Fragments":["second"]},{"Key":"the second","Fragments":["argument","parameter","reviewer","version","(but","point.","strand","strand","term","version","param","solution.","argument","strand","iteration","iteration.","is","one.","would","time","append","version,","argument","condition,","problem,","will","member"]},{"Key":"second argument","Fragments":["to","to","for","absolutely"]},{"Key":"to `String.ends_with?`","Fragments":["doesn't"]},{"Key":"`String.ends_with?` doesn't","Fragments":["have"]},{"Key":"doesn't have","Fragments":["to","a","to","the","to","that","an","a","`cond`","the","a","any"]},{"Key":"have to","Fragments":["be","disagree","change","agree","think","conform","worry","work","change","be","piece","use","agree,","maintain","put","suppress","replace","find","wait","do","change","change","update","do","look","map","read","put","strip","re-write","try","be","call","change","do,","add","downcase","ask","go","be","filter.","worry","use","manage","join","first","check","copy","call","change","think","use","write","be","pass","mess","dig","define","do","prefix","benchmark","it's","check","clarify","specify","write","reverse","do","factor","take","update","update","do","explicitly","benchmark","say,","read","notice","take","look","use","do","`reverse`","prefix","calculate","carry","change","run","do"]},{"Key":"to be","Fragments":["an","coy,","a","public*","public","one-liners","consistent.","the","the","in","helpful","more","moved","able","gained","'proper'","joined","able","inside","so","a","more","properly","a","`?`,","the","actual","approved.","assembled,","a","nested","more","a","for","faster","in","able","handled","reviewed","better","0.9.1","latest","wrong.","able","stripping","a","preferred","directly","the","given","on","partially","private?","without","akin","written","refactored,","called","sorted","a","named","guards","hard","faster","repeated.","written\".","handled,","a","faster.","slightly","expanded","all","rather","scrubbed","much","recalculated","considered","honest.","a","able","able","added","private.","differing","ordered,","considered","used","considered","exported,","exported,","silence?","commented","effective)","necessary","considerably","something","a","more","converted)","any","important","very","computed","recursive.","a","accessed","returned.","part","one","concerned","used","returned,","further","used","trueish","too","lazy","invoked.","honest.","more","the","changed","learning","public?","parsed","defining","being","quite","needed","sorted).","to","a","public","able","evaluated","used","a","a","created","passed","a","the","bad.","created","a","called","more","more","a","the","repeated","improved","honest).","`each_with_index`","a","some","able","in","intuitive","evaluated","in","a","created","proven","public","translated","thrown","able","created.","working","useful","traversed/copied).","traversed,","created","traversed/copied).","fancy.","created","sure,","some","bracketed","had","consistent","more","done.","completely","more","written","updated.","chunked.","instantiated","updated.","relevant","all","neat","solving","used","created","created","matching","an","using","`foo?`","doing.","only"]},{"Key":"an array,","Fragments":["so"]},{"Key":"array, so","Fragments":["you"]},{"Key":"could simplify","Fragments":["that","your","this","yelling?","#match","it","your","the","the","other","by","the"]},{"Key":"simplify that","Fragments":["a","`Dict.put(...,"]},{"Key":"that a","Fragments":["bit.","reader","reader","nil","string","letter","whirl...","line","variable","group","mistake","second","factor","good","while","couple","function","question","string","standard","real","list"]},{"Key":"a bit.","Fragments":["Also,","Also","You",":)"]},{"Key":"bit. Also,","Fragments":["it"]},{"Key":"Also, it","Fragments":["seems","seems","pattern","wouldn't","looks"]},{"Key":"seems like","Fragments":["you","it","you","a","you","the","a","you","hard-coding","good","`empty?`","a","it's","it","a","an","you","overkill.","the","it","a","you","a","the","it","a","String.codepoints","a","overkill.","you're","that","a","each","it's","the","the","it","the","a","the","a","an","a"]},{"Key":"could just","Fragments":["eliminate","use","reorder","add","become","do","work","call","define","test","pass","do","check","as"]},{"Key":"just eliminate","Fragments":["the"]},{"Key":"eliminate the","Fragments":["`is_forceful?`","regular","empty","test","need","need","up","need"]},{"Key":"the `is_forceful?`","Fragments":["check,"]},{"Key":"`is_forceful?` check,","Fragments":["since"]},{"Key":"check, since","Fragments":["it's"]},{"Key":"since it's","Fragments":["going","a","only","only","only","not","actually","only","not","a","clear"]},{"Key":"it's going","Fragments":["to"]},{"Key":"to give","Fragments":["the","a","these","a","them","the","feedback.","them","the","the","compile","it,","good"]},{"Key":"give the","Fragments":["default","same","same","`?T`","magic","list","correct","guard","same"]},{"Key":"the default","Fragments":["response","equality","argument","is","value","value","now).","value","value","value.","templates"]},{"Key":"default response","Fragments":["anyway."]},{"Key":" When","Fragments":["you","I","I","you","I","I","you","I","I","I","trying","I","I","writing"]},{"Key":"When you","Fragments":["read","asked","build","have"]},{"Key":"you read","Fragments":["this..."]},{"Key":"read this...","Fragments":["is"]},{"Key":"this... is","Fragments":["it"]},{"Key":"is it","Fragments":["simple","just","a","that","that","standard","better","cheating?","just","written","doing?)"]},{"Key":"it simple","Fragments":["to"]},{"Key":"simple to","Fragments":["understand?","understand"]},{"Key":" Look","Fragments":["at","great!","through","at","at","good.","at"]},{"Key":"Look at","Fragments":["your","`Dict.update/3`,","`Enum.reduce`","Dict.get","the"]},{"Key":"at your","Fragments":["structure","previous","solution.","code","solution","insistence"]},{"Key":"your structure","Fragments":["on"]},{"Key":"structure on","Fragments":["lines"]},{"Key":"on lines","Fragments":["14-22","30-35.","12-16.","3,"]},{"Key":"lines 14-22","Fragments":["and"]},{"Key":"14-22 and","Fragments":["also"]},{"Key":"also on","Fragments":["lines"]},{"Key":"lines 30-35.","Fragments":["They"]},{"Key":"30-35. They","Fragments":["are"]},{"Key":"They are","Fragments":["similar","just","called","only","equivalent,","nice"]},{"Key":"are similar","Fragments":["and"]},{"Key":"similar and","Fragments":["in"]},{"Key":"and in","Fragments":["many","this","a","other","Ruby","Clojure","certain","the","my","real"]},{"Key":"in many","Fragments":["ways","other","places.","cases","places"]},{"Key":"many ways","Fragments":["permanently","to"]},{"Key":"ways permanently","Fragments":["joined."]},{"Key":"permanently joined.","Fragments":["Should"]},{"Key":"joined. Should","Fragments":["they"]},{"Key":"Should they","Fragments":["be"]},{"Key":"they be","Fragments":["separate?"]},{"Key":"Also, check","Fragments":["out","out","out"]},{"Key":"check out","Fragments":["\u003ccode\u003eString#upcase/1\u003c/code\u003e","`Dict.update/4`,","`cond`","`Dict.merge/3`.","`Dict.merge/3`","`cond`","http://elixir-lang.org/getting_started/2.html","the","http://elixir-lang.org/docs/stable/","http://rubular.com/","\u003ccode\u003eList.foldl/3\u003c/code\u003e","\u003ccode\u003eHasDict.update/4\u003c/code\u003e","`HashDict.update`.","\u003ccode\u003eEnum.map_join/3\u003c/code\u003e","\u003ccode\u003eguards\u003c/code\u003e)","\u003ccode\u003eList.foldl/3\u003c/code\u003e","\u003ccode\u003eguards\u003c/code\u003e","`HashDict.update/4`","`Enum.map_join/3`","`Regex.scan/2`","@bart's","the","is"]},{"Key":" Why","Fragments":["two","do","not","not","\u003ccode\u003eString.split/1\u003c/code\u003e","use","not","did","count","use","`binary_to_list`","define","are","not","do","don't","the","`(filter","`(String.strip","do","do","in","do","do","not","do","do","are","run","doesn't","`:lists.sort`","do","do","the","`:lists.seq`","did","`Order.new(type:","don't"]},{"Key":"Why two","Fragments":["different"]},{"Key":"two different","Fragments":["implementations","ways.","directions.","places,","functions.","places"]},{"Key":"different implementations","Fragments":["of"]},{"Key":"implementations of","Fragments":["\"shouting\"?","frequency","Regex"]},{"Key":"of \"shouting\"?","Fragments":["Artifact"]},{"Key":"\"shouting\"? Artifact","Fragments":["left"]},{"Key":"Artifact left","Fragments":["over"]},{"Key":"left over","Fragments":["previously?"]},{"Key":" Pretty","Fragments":["cool!","much","much,","much"]},{"Key":"Pretty cool!","Fragments":["I"]},{"Key":"cool! I","Fragments":["did"]},{"Key":"did not","Fragments":["know","find","know","know","know","know","found","had","know","know","find","expect","know","work)","help.","really","use","capture","go"]},{"Key":"not know","Fragments":["that.","about","if","of","what","about","that","that","that","about","that","if","how"]},{"Key":"know that.","Fragments":["I'll"]},{"Key":"that. I'll","Fragments":["try","keep"]},{"Key":" Can","Fragments":["you","you","you","you","you","you","you","you","I","you","you","you","you","you","you","you","just","you"]},{"Key":"Can you","Fragments":["take","just","explain","help","think","think","think","think","DRY","reduce","talk","fold","collapse","replace","do","write","elaborate?","give","write","give","avoid","avoid","point","think","find","find","fix"]},{"Key":"the \"domain\"","Fragments":["of"]},{"Key":"\"domain\" of","Fragments":["this"]},{"Key":"problem and","Fragments":["hide","not","I've"]},{"Key":"and hide","Fragments":["the"]},{"Key":"hide the","Fragments":["implentation","simplicity"]},{"Key":"the implentation","Fragments":["of"]},{"Key":"implentation of","Fragments":["what"]},{"Key":"of what","Fragments":["you're","you're","each","you","a","I'm","you","you","I","you","it","I'd","the","it's","is","traits","constitutes","makes"]},{"Key":"what you're","Fragments":["asking","asking?","actually","going","doing","trying","doing","saying","trying","getting","saying,","doing","interested","saying","trying","getting","supposed"]},{"Key":"you're asking","Fragments":["in"]},{"Key":"asking in","Fragments":["private"]},{"Key":"in private","Fragments":["methods","functions","functions","methods."]},{"Key":"that read","Fragments":["a"]},{"Key":"read a","Fragments":["bit","bit","bit","little","the"]},{"Key":"more like","Fragments":["what","an","Regex.replace","that","CONSTANTS.","what","a","this:"]},{"Key":"like what","Fragments":["you're","was"]},{"Key":" Hi","Fragments":["there,","Julien,","Don.","Patrick!!!!!!!","Jason,","Svyatov,","there","there.","Alan,","there.","Matt,","there","there","there","there","drueck,","pminten,","@meghan,","@judah,","@arielle,","PierreBdR,","diogo,","@jaunita","Aaron!","Jordan,"]},{"Key":"it make","Fragments":["a","sense","sense","it","sense","sense","sense","more","me","sense"]},{"Key":"a cleaner","Fragments":["separation","way","way","solution,","way","counting"]},{"Key":"cleaner separation","Fragments":["of"]},{"Key":"separation of","Fragments":["responsibilities","responsibilities.","responsibilities","responsibilities.","concerns","functionality"]},{"Key":"of responsibilities","Fragments":["or","to"]},{"Key":"responsibilities or","Fragments":["more"]},{"Key":"or more","Fragments":["intention","pockets","occurrences,","likely","`x`.","\"word\"","\"word\"","word","expressive"]},{"Key":"more intention","Fragments":["revealing","revealing--no?"]},{"Key":"revealing code","Fragments":["if"]},{"Key":"code if","Fragments":["you","I","I"]},{"Key":"you move","Fragments":["the"]},{"Key":"the interrogation","Fragments":["of"]},{"Key":"interrogation of","Fragments":["whether","the"]},{"Key":"of whether","Fragments":["message","a","the"]},{"Key":"whether message","Fragments":["is"]},{"Key":"message is","Fragments":["silent,","silence","question","already","coming"]},{"Key":"is silent,","Fragments":["yelled,"]},{"Key":"silent, yelled,","Fragments":["etc"]},{"Key":"yelled, etc","Fragments":["into"]},{"Key":"etc into","Fragments":["either"]},{"Key":"into either","Fragments":["private"]},{"Key":"either private","Fragments":["functions"]},{"Key":"functions or","Fragments":["a","multiple","variables,"]},{"Key":"or a","Fragments":["separate","single","question.","pattern","local","calculated","space).","`Stream.map`","reduce","couple","dash","bunch","single","spaces."]},{"Key":"need regex","Fragments":["for"]},{"Key":"regex for","Fragments":["each","the","this","that,","\"chillOut\""]},{"Key":"for each","Fragments":["of","possibility.","clause","element","potential","case?","candidate?","element","transformation,","of","word.","possible","item","element","comparison.","comparison.","nucleotide","call.","word.","possible","stage.","of","of","element","candidate?","`candidate`.","list","entry","of","entry","world","entry","entry","case.","entry","pair?","case?","of","candidate.","candidate,","case","case","entry","entry"]},{"Key":"each of","Fragments":["these,","the","the","the","those","the","those","the","these","node","graph/nodes/edges,","these","the","these","the","the","the","the","the","the"]},{"Key":"of these,","Fragments":["or","or"]},{"Key":"these, or","Fragments":["are","eliminate"]},{"Key":"or are","Fragments":["there","they"]},{"Key":"are there","Fragments":["String","other","more"]},{"Key":"there String","Fragments":["functions"]},{"Key":"String functions","Fragments":["that","to","will"]},{"Key":"functions that","Fragments":["would","accept","return","return","only","return","determine","tell","generate","accomplish","take","transform","are","are","simply","might","will","are","are","seem","are","are","gave","are","are","are","were"]},{"Key":"would simplify","Fragments":["the","`list`,"]},{"Key":"simplify the","Fragments":["checks","regex.","regex","function","regex","iteration","reading","code.","conditions.","type","`Enum.reduce`","required","regex,","implementation,"]},{"Key":"checks against","Fragments":["message"]},{"Key":"against message","Fragments":["(i.e."]},{"Key":"message (i.e.","Fragments":["String.last,"]},{"Key":"(i.e. String.last,","Fragments":["String.upcase,"]},{"Key":"String.last, String.upcase,","Fragments":["String.length)?"]},{"Key":" Great,","Fragments":["thanks","thanks!","thanks.","thanks"]},{"Key":"Great, thanks","Fragments":["Mark","rud."]},{"Key":"thanks Mark","Fragments":["-"]},{"Key":"Mark -","Fragments":["implementation"]},{"Key":"- implementation","Fragments":["just"]},{"Key":"implementation just","Fragments":["got"]},{"Key":"just got","Fragments":["simpler","so"]},{"Key":"got simpler","Fragments":["and"]},{"Key":"simpler and","Fragments":["probably","more","(nearly)","more","more"]},{"Key":"and probably","Fragments":["more","more","harder","not"]},{"Key":"probably more","Fragments":["idiomatic","readable,","*elixir-fu-ninja-stylez*,","useful","importantly,","desirable"]},{"Key":"more idiomatic","Fragments":["to","or","to","approach","to","to","at","elixir","elixir?","way","to","and","than","I","way,"]},{"Key":"idiomatic to","Fragments":["elixir.","re-use","align","use","call","always","call","put"]},{"Key":"how you","Fragments":["separated","see","would","feel","pipe","explain","have","pulled","might","got","could","used","can","are","want","have","do","did","explained","do","would","name","defined","would"]},{"Key":"you separated","Fragments":["out"]},{"Key":"separated out","Fragments":["the"]},{"Key":"logic from","Fragments":["the","analyzing","the","the"]},{"Key":" Let's","Fragments":["look","see","just","consider","see.","take","take","say"]},{"Key":"Let's look","Fragments":["at"]},{"Key":"look at","Fragments":["the","is","is","the","`HashDict.update/4`.","`String`","Elixir's","the","`Regex.run`","`to_binary/1`,","would","`HashDict.update`","[Dict.update/4](http://elixir-lang.org/docs/stable/Dict.html#update/4)","`different?`","alternatives.","Kernel.SpecialForms.import/2.","what","using","the","`Enum.reduce`.","`Dict.update`.","`Regex.scan`","refactoring","Dict.update.","the","`HashDict.update`.","the","`Dict.update`,","`Dict.update`.","the","`List.zip`.","[elixir's","the","the","the","HashDict.new/2.","the","that.","Dict.update/4.","the","your","`Dict.update`,","it","`Dict.update`,","`Dict.update`,","the","it","`count`.","what","`count`.","what","the","them,","http://www.regular-expressions.info,","the","`cond`.","that","`count`.","what","`List.zip`.","`Regex.scan`","`count`.","what","`count`.","what","the","`Regex.scan`.","`Enum.chunk`.","`Dict.update`","[Erlang's","the","`String.ends_with?`.","the","refactoring","my","Enum.count/2","it","`Enum.count/2`.","the","anonymous","`count`.","what","`count`.","what","the"]},{"Key":"at the","Fragments":["names.","twice","end","end","end","end","end","end","top","\"bob\"","next","next","new","expense","beginning","difference","end.","top-level","bottom","front","beginning,","end.","end","top","start/end","end","end","end","end","example","first","same","Erlang","end","function","top","end.","Erlang","functions","imports.","imports.","end","import","start","end","String.strip()","end","imports.","example","example,","moment)","top","end","same","other","promptings","lengths","pipe","start","docs","top","end","HashDict.new/2","same","top","recursion","docos","end.","moment.","beginning.","first","end","top","end","end","end","end).","source","same","end.","general","end","end","top","suitcase","test","`HashDict.update`","end","time","`\\p`","erlang","functional","interactions","beginning","beginning","beginning","time","`defp`","elixir","solution","\u003ca","docs"]},{"Key":"the names.","Fragments":["Do","Would","Yeah,"]},{"Key":"names. Do","Fragments":["the"]},{"Key":"Do the","Fragments":["names","tests","tests"]},{"Key":"the names","Fragments":["simply","of","of","of","(shouting,","of","of","for","in","don't","of","of","of"]},{"Key":"names simply","Fragments":["describe"]},{"Key":"simply describe","Fragments":["the"]},{"Key":"implementation or","Fragments":["do"]},{"Key":"or do","Fragments":["they","you"]},{"Key":"do they","Fragments":["describe"]},{"Key":"they describe","Fragments":["what","the"]},{"Key":"you're actually","Fragments":["testing","implementing"]},{"Key":"actually testing","Fragments":["for?"]},{"Key":"testing for?","Fragments":["Take"]},{"Key":"for? Take","Fragments":["\u003ccode\u003eupcase\u003c/code\u003e"]},{"Key":"Take \u003ccode\u003eupcase\u003c/code\u003e","Fragments":["--"]},{"Key":"\u003ccode\u003eupcase\u003c/code\u003e --","Fragments":["what"]},{"Key":"-- what","Fragments":["is"]},{"Key":"what is","Fragments":["that","pattern","currently","supposed","going","going","inside","the","going","the","going","independent.","\"readable\"","the","in","known","going","going","happening."]},{"Key":"is that","Fragments":["actually","it","really","really","you","when","`frequency(word)`","the","HashDict","a","what","the","necessary?","you","you","the","it","I'd","it","nil","`binary_to_list`","the","you","things","I","you","you","there","I","Elixir's","while","it","you","if","`anagram_of?`","if","this","`pretty/1`'s","exercism's","I","a","an","usually","you","concatenating","the","a","the","it","this","otherwise","I","your","this","you","before","you","if","without","normal","there","there's","if","you","there","you","once","you","if","`f","you","the","if","if","you","if","it's","it","the","the","if","you","you","you","if","Regex","if","if","you","the","you","it","a","binaries/strings","in","it's","binaries","adding","using","the","he","the","I","the","there","a","perhaps"]},{"Key":"that actually","Fragments":["*testing*","reads","was","adds","messes"]},{"Key":"actually *testing*","Fragments":["for?"]},{"Key":"nitpick on","Fragments":["the"]},{"Key":"of \u003ccode\u003eis_nil?\u003c/code\u003e","Fragments":["but"]},{"Key":"\u003ccode\u003eis_nil?\u003c/code\u003e but","Fragments":["I"]},{"Key":"than \u003ccode\u003e\"\"","Fragments":["=="]},{"Key":"\u003ccode\u003e\"\" ==","Fragments":["string\u003c/code\u003e."]},{"Key":"Nice work.","Fragments":["A","I"]},{"Key":"work. A","Fragments":["few"]},{"Key":"A few","Fragments":["questions","nitpicks.","other","very","functions","comments:","small","small","things:","minor","things","additional","pointers:","remarks:","remarks:","notes:"]},{"Key":"few questions","Fragments":["for","though"]},{"Key":"questions for","Fragments":["you:"]},{"Key":"think \"is_\"","Fragments":["is","prefix","is"]},{"Key":"a necessary","Fragments":["prefix","prefix"]},{"Key":"necessary prefix","Fragments":["when","when"]},{"Key":"prefix when","Fragments":["the","the"]},{"Key":"when the","Fragments":["function","body","function","function","statement","steps","time","first","two","full","lists","comment","from","number","right-hand","problem","nucleotides","collection","sides","list","arity","assertion","\"bigger\""]},{"Key":"function ends","Fragments":["with","with","with"]},{"Key":"ends with","Fragments":["\"?\"","a","\"?\"","a","a","another","a"]},{"Key":"with \"?\"","Fragments":["already?","already?","which"]},{"Key":"Could the","Fragments":["function","abstractions","name","function","function"]},{"Key":"function names","Fragments":["for","unless","in","for","for","in","are","are","and","with","with","and","are","or"]},{"Key":"for nil","Fragments":["and","isn't","and","input","and"]},{"Key":"nil and","Fragments":["upcase","throw","another","spaces,","one"]},{"Key":"and upcase","Fragments":["be","conditions"]},{"Key":"upcase be","Fragments":["more"]},{"Key":"more semantically","Fragments":["meaningful","meaningful","meaningful","meaningful","correct","correct","correct"]},{"Key":"semantically meaningful","Fragments":["if","name","if","if"]},{"Key":"meaningful if","Fragments":["converted","converted","converted"]},{"Key":"if converted","Fragments":["to","to","to"]},{"Key":"converted to","Fragments":["something","something","something","codepoints"]},{"Key":"like \"silent?\"","Fragments":["and","?","?"]},{"Key":"\"silent?\" and","Fragments":["\"yelled?\"?"]},{"Key":"and \"yelled?\"?","Fragments":["Similar"]},{"Key":"\"yelled?\"? Similar","Fragments":["question"]},{"Key":"Similar question","Fragments":["for","for","for"]},{"Key":"question for","Fragments":["the","the","the"]},{"Key":"the \"string\"","Fragments":["parameter","parameter"]},{"Key":"\"string\" parameter","Fragments":["-","-"]},{"Key":"parameter -","Fragments":["could","could","could"]},{"Key":"- could","Fragments":["that","that","that","it","you"]},{"Key":"could that","Fragments":["be","be","be"]},{"Key":"that be","Fragments":["named","named","named","extracted","necessary?"]},{"Key":"be named","Fragments":["something","something","something","yelling?/1","things","something"]},{"Key":"named something","Fragments":["more","more","more","like"]},{"Key":"something more","Fragments":["meaningful","meaningful","meaningful","meaningful","specific?","like","succinct","general"]},{"Key":"more meaningful","Fragments":["than","than","than","-","name?"]},{"Key":"meaningful than","Fragments":["\"string\"?","\"s\"?","\"string\"?"]},{"Key":" Did","Fragments":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","I","you","you","you","you","the","not","you","you","you","you","you"]},{"Key":"Did you","Fragments":["know","consider","consider","consider","see","know","know","consider","consider","know","consider","consider","consider","know","intend","know","consider","try","try","refactor","consider","consider","avoid","mean","intend","know","submit","notice","consider","consider","do"]},{"Key":"know \u003ccode\u003e","Fragments":["fn(value)"]},{"Key":"\u003ccode\u003e fn(value)","Fragments":["-\u003e"]},{"Key":"fn(value) -\u003e","Fragments":["value"]},{"Key":"-\u003e value","Fragments":["+","+"]},{"Key":"value +","Fragments":["1","1"]},{"Key":"1 end\u003c/code\u003e","Fragments":["can"]},{"Key":"end\u003c/code\u003e can","Fragments":["be"]},{"Key":"can be","Fragments":["replaced","turned","accessed","fixed.","rewritten","shorter","done","more","write:","replaced","done","simplified","refactored","rewritten","improved","simplified","shouted,","written","used","written","used","rewritten","reduced","handy","reduced","written","*too*","combined,","used","abstracted","written","written","done","interpreted","used","written","made","written","written","written","used","implemented","computed","written","\"deprecated\"","combined","implemented","beneficial:","replaced","written","annoying.","written","expressed","found","cleaned","written","written","used","written","written","written","sure","efficiently","simplified","efficiently","a","replaced","done","replaced","a","written","used","useful","done","used","compared","cleaned","simplified","done"]},{"Key":"be replaced","Fragments":["with","by","by","by","by","using","by"]},{"Key":"replaced with","Fragments":["\u003ccode\u003e\u00261"]},{"Key":"with \u003ccode\u003e\u00261","Fragments":["+"]},{"Key":"\u003ccode\u003e\u00261 +","Fragments":["1\u003c/code\u003e?"]},{"Key":"+ 1\u003c/code\u003e?","Fragments":["Cool,"]},{"Key":"1\u003c/code\u003e? Cool,","Fragments":["eh?"]},{"Key":"Also, small","Fragments":["nit"]},{"Key":"small nit","Fragments":["on"]},{"Key":"nit on","Fragments":["your","this,"]},{"Key":"your Regex.","Fragments":["Have","There"]},{"Key":"Regex. Have","Fragments":["you"]},{"Key":"you looked","Fragments":["up","at","at","at","at","at"]},{"Key":"looked up","Fragments":["the","the"]},{"Key":"the \u003ccode\u003e\\w\u003c/code\u003e","Fragments":["character"]},{"Key":"\u003ccode\u003e\\w\u003c/code\u003e character","Fragments":["class?"]},{"Key":"the feedback","Fragments":["jazzdan.",":)","from","@margarett","guys.","as","guys.","and","and","and","pminten,","@kellen!","@rosario!","Daniel"]},{"Key":"with you","Fragments":["regarding","that","and","about","on","that","about"]},{"Key":"you regarding","Fragments":["#1,"]},{"Key":"regarding #1,","Fragments":["i"]},{"Key":"#1, i","Fragments":["uploaded"]},{"Key":"i uploaded","Fragments":["new"]},{"Key":"uploaded new","Fragments":["version."]},{"Key":" Regarding","Fragments":["#2","your","one","strings","`blank?`","the","the","new,","`shouting?`,","extracting","`anything_else`,","the"]},{"Key":"Regarding #2","Fragments":["--"]},{"Key":"#2 --","Fragments":["i"]},{"Key":"-- i","Fragments":["added","can"]},{"Key":"i added","Fragments":["another"]},{"Key":"added another","Fragments":["version"]},{"Key":"another version","Fragments":["that","unless"]},{"Key":"version that","Fragments":["doesn't","does","uses","keeps","takes","takes","I"]},{"Key":"that doesn't","Fragments":["use","necessitate","keep","seem","really","require","work.","repeat","contain","result","create","take","have","work,"]},{"Key":"doesn't use","Fragments":["regex,","the"]},{"Key":"use regex,","Fragments":["but"]},{"Key":"regex, but","Fragments":["i"]},{"Key":"but i","Fragments":["personally","think","can","forgot"]},{"Key":"i personally","Fragments":["think"]},{"Key":"personally think","Fragments":["first"]},{"Key":"think first","Fragments":["version"]},{"Key":"first version","Fragments":["is","of","of",":)","of","of","is.","because"]},{"Key":"version is","Fragments":["clearer.","idiomatic,","way","terrible.","great.","correct","a","pre","easy","a","more","much"]},{"Key":"is clearer.","Fragments":["Something","I"]},{"Key":"clearer. Something","Fragments":["doesn't"]},{"Key":"Something doesn't","Fragments":["feel"]},{"Key":"doesn't feel","Fragments":["right","right.","\"functional\"","like","as","\"right\""]},{"Key":"feel right","Fragments":["in"]},{"Key":"right in","Fragments":["the","the","the"]},{"Key":"the 'all_caps?'","Fragments":["version."]},{"Key":"'all_caps?' version.","Fragments":["I"]},{"Key":"version. I","Fragments":["probably","suspect","left","like","finally"]},{"Key":"just didn't","Fragments":["find","work."]},{"Key":"didn't find","Fragments":["the","one.","it","Keyword.keyword?","a"]},{"Key":"find the","Fragments":["right","most","last","`s`,","actual","List","imported","appropriate","\u0026","code","single-line","one","number","functions","lowest"]},{"Key":"right solution","Fragments":["yet,"]},{"Key":"solution yet,","Fragments":["will"]},{"Key":"yet, will","Fragments":["continue"]},{"Key":"will continue","Fragments":["to"]},{"Key":"continue to","Fragments":["dig."]},{"Key":" Clever,Thanks","Fragments":["for"]},{"Key":"Clever,Thanks for","Fragments":["the"]},{"Key":" Btw","Fragments":["do"]},{"Key":"Btw do","Fragments":["you"]},{"Key":"know how","Fragments":["the","to","to","to","to","to","smart","to","to","`Enum.sort`","to","to","to"]},{"Key":"current exercise","Fragments":["is"]},{"Key":"is finished","Fragments":["so"]},{"Key":"finished so","Fragments":["you"]},{"Key":"can really","Fragments":["move","see"]},{"Key":"really move","Fragments":["on"]},{"Key":"move on","Fragments":["to","to",":P","to","from","and","to"]},{"Key":"on to","Fragments":["the","a","try","the","the","complete","details."]},{"Key":"next ones?","Fragments":["I"]},{"Key":"ones? I","Fragments":["already"]},{"Key":"I already","Fragments":["'peeked'","have,","knew"]},{"Key":"already 'peeked'","Fragments":["for"]},{"Key":"'peeked' for","Fragments":["the"]},{"Key":"next exercise(word-count)","Fragments":["but"]},{"Key":"exercise(word-count) but","Fragments":["I"]},{"Key":"cannot go","Fragments":["any"]},{"Key":"go any","Fragments":["further"]},{"Key":"any further","Fragments":["than"]},{"Key":"further than","Fragments":["the","just"]},{"Key":"than the","Fragments":["next","last.","first","\u003ccode\u003ereplace\u003c/code\u003e.","named","1st","`if","second","concision","first","allowed","fourth","space","first","latter","first","regex","Erlang","type","prior","typical","`d","whole","previous","separate","current","recursive","anagram.","main","tail","potential","literal,","well-defined","(a"]},{"Key":"exercise after","Fragments":["this","I've"]},{"Key":"after this","Fragments":["one."]},{"Key":"this one.","Fragments":["Is","Any","Can","What","The","I","I","It’s","I"]},{"Key":"one. Is","Fragments":["there"]},{"Key":"there some","Fragments":["other","other","severely"]},{"Key":"some other","Fragments":["command-line","not-so-meaningful","way","way","tracks.","glyphs","reason","solutions"]},{"Key":"other command-line","Fragments":["command"]},{"Key":"command-line command","Fragments":["I've"]},{"Key":"command I've","Fragments":["missed?"]},{"Key":"One readability","Fragments":["hack"]},{"Key":"readability hack","Fragments":["I"]},{"Key":"hack I","Fragments":["have"]},{"Key":"have used","Fragments":["in","\"_\"","the","the","`ends_with?`","something","the","helper","defp"]},{"Key":"used in","Fragments":["Erlang","#command(0)?","a","one","Elixir.","place","`count/1`)","Ruby","a","functional","function-level","chains","higher","my","pattern","the","conjunction","later","the","one","the"]},{"Key":"in Erlang","Fragments":["in","world.","and","look","for","nor","(yes,","uses","(and"]},{"Key":"Erlang in","Fragments":["the"]},{"Key":"the past","Fragments":["is","but","submission."]},{"Key":"past is","Fragments":["to"]},{"Key":"to say","Fragments":["that","that","```is_```","this","is","with","object)","about","very","you've","very","you've","very","you've","here,","very","very","why","on","very","very","that"]},{"Key":" else","Fragments":["=="]},{"Key":"else ==","Fragments":["true"]},{"Key":" and","Fragments":["then","one","that"]},{"Key":"then you","Fragments":["can","can","can","count","could","wouldn't","wouldn't","don't","could","have","memoize","will","could","don't","don't"]},{"Key":"use else","Fragments":["like"]},{"Key":"else like","Fragments":["you"]},{"Key":"would in","Fragments":["many"]},{"Key":"many other","Fragments":["languages","ways","languages,"]},{"Key":"other languages","Fragments":["on","as","require","with","should"]},{"Key":"languages on","Fragments":["line"]},{"Key":"line 10","Fragments":["there.","by"]},{"Key":" Hey","Fragments":["(no","Mike,","Alan!!!","Gabe,","Ben,","@estrella,","@elisa,","@arlene,","@barry,","Richard,","Chad!","Richard,"]},{"Key":"Hey (no","Fragments":["pun"]},{"Key":"(no pun","Fragments":["intended)"]},{"Key":"pun intended)","Fragments":["two"]},{"Key":"intended) two","Fragments":["quick"]},{"Key":"two quick","Fragments":["suggestions:"]},{"Key":" 1)","Fragments":["I","`String`","why","does","`[^a-z0-9","`x","why","test","The","My"]},{"Key":"1) I","Fragments":["would"]},{"Key":"would maybe","Fragments":["think","think","consider","recommend"]},{"Key":"maybe think","Fragments":["about","about"]},{"Key":"about abstracting","Fragments":["the","the"]},{"Key":"abstracting the","Fragments":["various","various"]},{"Key":"the various","Fragments":["conditions","conditions","conditions","cases.","responses?","cases","inputs"]},{"Key":"various conditions","Fragments":["in","(ie","(String.length(message)"]},{"Key":"conditions in","Fragments":["to","methods","Teenager#hey.","helpers","order)"]},{"Key":"named functions,","Fragments":["so","each","which","and","but","such"]},{"Key":"functions, so","Fragments":["for"]},{"Key":"so for","Fragments":["String.length(input)"]},{"Key":"for String.length(input)","Fragments":["=="]},{"Key":"String.length(input) ==","Fragments":["0"]},{"Key":"== 0","Fragments":["maybe","end`"]},{"Key":"0 maybe","Fragments":["put"]},{"Key":"maybe put","Fragments":["it"]},{"Key":"put it","Fragments":["in","here.","on","on","this","inline"]},{"Key":"it in","Fragments":["a","as","just","the","```do_count()```","the","the","a","multiple","using","the","count_words","a","`counts`","a","my","general.","in","here","one","the","general.","one","sub","`second_line/1`","parentheses","a","the","my","a","a","production","the","the","a","the","8","any","the","my","to","here","a","words,","OO","each","two","the","elixir/erlang"]},{"Key":"a function","Fragments":["named","to","and","for","in","on","that","name!","(meaning","that","to","for","is","name","almost","name","which","closed","is","with","that","that","like","(`String.split`)","you","like","would","that","with","to","to","because","call","in","after","as","on","on","(for","is","to","return","automatically.","value,","for","`Enum.reduce`","guard.","clause","`next(iter)","`value(iter)","guard:","name","`map`","`foo`.","`(element,","`(acc,","is","eats","over","`x`","`count`.","like","regarding","`foo`","wants","from","in","head","where","that","name","called","that","when","for","call","declaration"]},{"Key":"function named","Fragments":["\"is_silence?\"","'transcribe'","`append`"]},{"Key":" 2)","Fragments":["I","Piping","Could","is","`[^[:alnum:]","`(String.strip","elixir","If","Yes,"]},{"Key":"2) I","Fragments":["think"]},{"Key":"think a","Fragments":["regex","heredoc","little","better","naive","list","programmer"]},{"Key":"little overkill","Fragments":["for"]},{"Key":"the shouting","Fragments":["detection.","case","case","in","in","in","in","in","check"]},{"Key":"shouting detection.","Fragments":["Maybe"]},{"Key":"detection. Maybe","Fragments":["look"]},{"Key":"Maybe look","Fragments":["in"]},{"Key":"look in","Fragments":["to","to","to","Erlang","the","[Regex.replace/4](https://github.com/elixir-lang/elixir/blob/28264c67923cf59f1fa96c104812aee234da2af3/lib/elixir/lib/regex.ex#L400-L423)"]},{"Key":"simpler way","Fragments":["to","to","to","to","when"]},{"Key":"to detect","Fragments":["if","these"]},{"Key":"detect if","Fragments":["something"]},{"Key":"if something","Fragments":["is","complains."]},{"Key":"something is","Fragments":["all","used.","not","not","a","broken.","tail"]},{"Key":"is all","Fragments":["uppercase?","upper","in","caps.","about.","mixed","you'd","the"]},{"Key":"all uppercase?","Fragments":["(Sorry"]},{"Key":"uppercase? (Sorry","Fragments":["to"]},{"Key":"(Sorry to","Fragments":["be"]},{"Key":"be coy,","Fragments":["but"]},{"Key":"coy, but","Fragments":["discovery"]},{"Key":"but discovery","Fragments":["is"]},{"Key":"discovery is","Fragments":["half"]},{"Key":"is half","Fragments":["the"]},{"Key":"half the","Fragments":["fun!)","list).","people"]},{"Key":" Sweet!","Fragments":["I"]},{"Key":"Sweet! I","Fragments":["would"]},{"Key":"conditions (ie","Fragments":["String.length(text)","String.upcase(input)"]},{"Key":"(ie String.length(text)","Fragments":["=="]},{"Key":"String.length(text) ==","Fragments":["0)"]},{"Key":"== 0)","Fragments":["in","in"]},{"Key":"0) in","Fragments":["to","to"]},{"Key":"named method,","Fragments":["in"]},{"Key":"method, in","Fragments":["this"]},{"Key":"case maybe","Fragments":["soemthing"]},{"Key":"maybe soemthing","Fragments":["like"]},{"Key":"soemthing like","Fragments":["is_silence?"]},{"Key":"Awesome! It's","Fragments":["wonderful"]},{"Key":"It's wonderful","Fragments":["how"]},{"Key":"wonderful how","Fragments":["succinct"]},{"Key":"how succinct","Fragments":["Elixir"]},{"Key":"succinct Elixir","Fragments":["can"]},{"Key":"Elixir can","Fragments":["be.","confirm","match"]},{"Key":"can be.","Fragments":["I"]},{"Key":"be. I","Fragments":["would","took","don't"]},{"Key":"would look","Fragments":["in","like","really","with","like:"]},{"Key":"to abstracting","Fragments":["out"]},{"Key":"abstracting out","Fragments":["the"]},{"Key":"conditions (String.length(message)","Fragments":["=="]},{"Key":"(String.length(message) ==","Fragments":["0)"]},{"Key":"named methods,","Fragments":["ie"]},{"Key":"methods, ie","Fragments":["is_empty?(message)."]},{"Key":"This makes","Fragments":["it","code"]},{"Key":"it easier","Fragments":["to","to","or","to","to","to","for","to"]},{"Key":"easier to","Fragments":["read","read.","read","me","read","maintain","read.","read.","digest","read","read.","read.","follow","read,","read","read","follow,","read","see","read.","comprehend.","read,","comprehend.","comprehend.","read.","read","understand","compute.","understand","read","read.","understand.","read","get","read","show","read","understand","maintain","just","read)","just","identify","look","use","do","follow:","understand","follow:","understand","comprehend","read.","avoid","follow,","switch","read","follow:","read","spot","understand.","understand","read","understand","follow:","read.","read","follow:","understand.","switch","understand","understand.","read","scan,","follow.","read","follow:","follow:","understand","follow,","read"]},{"Key":"read and","Fragments":["leaves","to","maintain","most","understand","less","comprehend.","reason","understand","understand."]},{"Key":"and leaves","Fragments":["less"]},{"Key":"leaves less","Fragments":["\"magic"]},{"Key":"less \"magic","Fragments":["numbers\""]},{"Key":"\"magic numbers\"","Fragments":["lying"]},{"Key":"numbers\" lying","Fragments":["around"]},{"Key":"lying around","Fragments":["in"]},{"Key":"around in","Fragments":["the","the","the"]},{"Key":"the top","Fragments":["level","shows","for","as","and","of","of","of","right","of","level.","level","of","of","level"]},{"Key":"top level","Fragments":["function.","to","private"]},{"Key":"to abstract","Fragments":["those","the"]},{"Key":"abstract those","Fragments":["conditions"]},{"Key":"those conditions","Fragments":["(ie","because"]},{"Key":"(ie String.upcase(input)","Fragments":["=="]},{"Key":"String.upcase(input) ==","Fragments":["input)","input","input","input","input","input"]},{"Key":"== input)","Fragments":["in"]},{"Key":"input) in","Fragments":["to"]},{"Key":"functions (","Fragments":["like,"]},{"Key":"( like,","Fragments":["is_shouting?)"]},{"Key":" Interesting,","Fragments":["I","I","I","I"]},{"Key":"Interesting, I","Fragments":["guess","wonder","would","thought"]},{"Key":"know which","Fragments":["way","one","names","is"]},{"Key":"which way","Fragments":["that"]},{"Key":"way that","Fragments":["should","you","suggests","you","you","it's","involves","involves","doesn't","makes","things","using"]},{"Key":"that should","Fragments":["go.","be","help"]},{"Key":"The point","Fragments":["of","of"]},{"Key":"point of","Fragments":["the","extracting","`n_bottles`","the","having","accessing","using","the","the","exercism","the","this","style:"]},{"Key":"particular technique,","Fragments":["but"]},{"Key":"technique, but","Fragments":["to"]},{"Key":"but to","Fragments":["have","produce","me,","call","call"]},{"Key":"a solution","Fragments":["that","that","as","in","to","I","with","which","like","at"]},{"Key":"solution that","Fragments":["is","used","doesn't","is","does.","passes","passes"]},{"Key":"is \"","Fragments":["simple,"]},{"Key":"\" simple,","Fragments":["readable,"]},{"Key":"simple, readable,","Fragments":["maintable,"]},{"Key":"readable, maintable,","Fragments":["and"]},{"Key":"maintable, and","Fragments":["modular\"."]},{"Key":"At this","Fragments":["point,","simple","point","point"]},{"Key":"this point,","Fragments":["dont","and"]},{"Key":"point, dont","Fragments":["overcomplicate"]},{"Key":"dont overcomplicate","Fragments":["things."]},{"Key":"overcomplicate things.","Fragments":["You"]},{"Key":"things. You","Fragments":["could"]},{"Key":"could start","Fragments":["by"]},{"Key":"start by","Fragments":["defining"]},{"Key":"by defining","Fragments":["methods"]},{"Key":"defining methods","Fragments":["that"]},{"Key":"that test","Fragments":["each","for","case.","was","or"]},{"Key":"test each","Fragments":["of"]},{"Key":"the four","Fragments":["types"]},{"Key":"four types","Fragments":["of"]},{"Key":"types of","Fragments":["phrases","the","beverages","utterances","sentences.","input."]},{"Key":"of phrases","Fragments":["defined"]},{"Key":"phrases defined","Fragments":["in"]},{"Key":"defined in","Fragments":["the","contexts","`Kernel`,","multiple"]},{"Key":"the tests.","Fragments":["And","The","on","It's","Thanks","So"]},{"Key":"tests. And","Fragments":["we"]},{"Key":"And we","Fragments":["take"]},{"Key":"we take","Fragments":["it"]},{"Key":"take it","Fragments":["from","with"]},{"Key":"I kind","Fragments":["of","of","of","of","of"]},{"Key":"of figured","Fragments":["this"]},{"Key":"figured this","Fragments":["was","version","was"]},{"Key":"this was","Fragments":["the","the","the","a","the","one","a","the","a","a"]},{"Key":"case but","Fragments":["attempted"]},{"Key":"but attempted","Fragments":["the"]},{"Key":"attempted the","Fragments":["easiest"]},{"Key":"the easiest","Fragments":["possible","to"]},{"Key":"easiest possible","Fragments":["solution"]},{"Key":"possible solution","Fragments":["instead"]},{"Key":"solution instead","Fragments":["to"]},{"Key":"instead to","Fragments":["get","match"]},{"Key":"get the","Fragments":["tests","expected","impression","last","point","list","doctest","idea","output","shortcut","counts.","value.","first","last","job","values?","value","tests","same","macro","current","tests","negation","`cond`","length","grouping","code","tests"]},{"Key":"tests passing","Fragments":["hoping","mind"]},{"Key":"passing hoping","Fragments":["for"]},{"Key":"hoping for","Fragments":["some"]},{"Key":"for some","Fragments":["feedback.","reason","reason)","useful","more","small","random","feedback","reason","reason","of","reason","reason...","more","reason","reason","reason","reason","functions"]},{"Key":"some feedback.","Fragments":["I",":)"]},{"Key":"this exercise","Fragments":["is","in","I","as","also","that","you","I","can","so","so","is","in","in","would","though.","either.","in","did","should","in","though,","as","will","didn't","is","as","in","without","is","never","in","in",";)","in","in","in","I","in","-","in","in","wanted"]},{"Key":"matching however","Fragments":["I"]},{"Key":"however I","Fragments":["was"]},{"Key":"was unable","Fragments":["to"]},{"Key":"unable to","Fragments":["find"]},{"Key":"to find","Fragments":["many","an","empty","question","the","a","a","a","docs","out.","a","out","a","that","an","files","those","a","the","something","the","any","that"]},{"Key":"find many","Fragments":["resources"]},{"Key":"many resources","Fragments":["surrounding"]},{"Key":"resources surrounding","Fragments":["pattern"]},{"Key":"surrounding pattern","Fragments":["matching"]},{"Key":"matching strings","Fragments":["in"]},{"Key":"strings in","Fragments":["elixir.","general,","`how_many?`","Elixir."]},{"Key":"in elixir.","Fragments":["Any","It's","For","So","It","I","Give"]},{"Key":"elixir. Any","Fragments":["help"]},{"Key":"Any help","Fragments":["or","would"]},{"Key":"help or","Fragments":["pointers"]},{"Key":"or pointers","Fragments":["would"]},{"Key":"pointers would","Fragments":["be"]},{"Key":" Yep,","Fragments":["I","typo.","that's","I","I","that's","I","that"]},{"Key":"Yep, I","Fragments":["missed","also","did","was"]},{"Key":"I missed","Fragments":["the","that,","that.","or","that","String.strip","a","something","that","that","what","that","the"]},{"Key":"missed the","Fragments":["String.ends_with?/2,","trailing"]},{"Key":"the String.ends_with?/2,","Fragments":["maybe"]},{"Key":"String.ends_with?/2, maybe","Fragments":["I"]},{"Key":"maybe I","Fragments":["think","went"]},{"Key":"think more","Fragments":["in"]},{"Key":"in regular","Fragments":["expressions","code.","expressions.","expressions."]},{"Key":"regular expressions","Fragments":["than","using","are","if","before","in","as","has","very","(which","are","is","for"]},{"Key":"expressions than","Fragments":["necessary."]},{"Key":" Which","Fragments":["alternative"]},{"Key":"Which alternative","Fragments":["to"]},{"Key":"alternative to","Fragments":["this","`Dict.merge`.","HashDict.merge","Enum.sort,","explicitly"]},{"Key":"to this","Fragments":["case","\"notation\"","solution?","problem:","which","which","website,","one.","I"]},{"Key":"case statement","Fragments":["would","is","is","as"]},{"Key":"statement would","Fragments":["you"]},{"Key":"you propose?","Fragments":["I"]},{"Key":"propose? I","Fragments":["am"]},{"Key":"am not","Fragments":["a","interested","rubysolo,","convinced.","sure","sure","sure","from","sure"]},{"Key":"a friend","Fragments":["of","for"]},{"Key":"friend of","Fragments":["nested/chained"]},{"Key":"of nested/chained","Fragments":["if"]},{"Key":"nested/chained if","Fragments":["statements,"]},{"Key":"if statements,","Fragments":["and"]},{"Key":"statements, and","Fragments":["as"]},{"Key":"and as","Fragments":["far","a","a"]},{"Key":"as far","Fragments":["as","as","as","as","as"]},{"Key":"far as","Fragments":["I","the","the","abstracting","your","how","I'll","using","the","whether","your","what","the","why","the","going","this","the","I","I"]},{"Key":"as I","Fragments":["know","keep","said","have.","haven't","understand","think","say","could","did","did","did","don't","wanted","can.","am","would","hadn't","could","don't","solve","suspected","could","can","was","was","can","see","say,","know."]},{"Key":"know these","Fragments":["tuple-case-pattern-matchings","are"]},{"Key":"these tuple-case-pattern-matchings","Fragments":["are"]},{"Key":"tuple-case-pattern-matchings are","Fragments":["very"]},{"Key":"are very","Fragments":["common","much","common","reasonable.","clear."]},{"Key":"very common","Fragments":["in","in"]},{"Key":"common in","Fragments":["Erlang","Elixir","Haskell","Erlang","Elixir","Elixir"]},{"Key":"Erlang world.","Fragments":["So"]},{"Key":"world. So","Fragments":["is"]},{"Key":"So is","Fragments":["there"]},{"Key":"better way","Fragments":["in","to","than","yet.","to","to","to","to","to","to","and","which","to","to","to","that","that","will","of","of","to","to","to","to","of"]},{"Key":"way in","Fragments":["Elixir?","a","a","just"]},{"Key":"right. Simplified","Fragments":["it"]},{"Key":"Simplified it","Fragments":["a"]},{"Key":"a lot!","Fragments":["Submitted.","I"]},{"Key":"While your","Fragments":["code","submission"]},{"Key":"might pass","Fragments":["all","the"]},{"Key":"all tests,","Fragments":["the","would","would"]},{"Key":"tests, the","Fragments":["intention","prime_cache"]},{"Key":"tests is","Fragments":["to"]},{"Key":"to set","Fragments":["examples"]},{"Key":"set examples","Fragments":["of"]},{"Key":"examples of","Fragments":["posible","in","how"]},{"Key":"of posible","Fragments":["inputs"]},{"Key":"posible inputs","Fragments":["for"]},{"Key":"inputs for","Fragments":["your"]},{"Key":"If I","Fragments":["for,","used","understand","take","imported","understand","were","was","use","created","remember","remove","understood","am","take","knew","didn't","remove","might","was"]},{"Key":"I for,","Fragments":["example,"]},{"Key":"for, example,","Fragments":["pass"]},{"Key":"example, pass","Fragments":["the"]},{"Key":"the the","Fragments":["string","`dict","punctuation"]},{"Key":"string \"SHOUT\"","Fragments":["to"]},{"Key":"\"SHOUT\" to","Fragments":["the"]},{"Key":"method hey,","Fragments":["you"]},{"Key":"hey, you","Fragments":["wont"]},{"Key":"you wont","Fragments":["get"]},{"Key":"wont get","Fragments":["the"]},{"Key":"the expected","Fragments":["result.","result?","data","students","day.","weekday","order,","output."]},{"Key":"expected result.","Fragments":["Try"]},{"Key":"result. Try","Fragments":["to"]},{"Key":"You right,","Fragments":["i"]},{"Key":"right, i","Fragments":["updated","will"]},{"Key":"i updated","Fragments":["the"]},{"Key":"updated the","Fragments":["code.","syntax","regex.","comments.","concat","code"]},{"Key":"the code.","Fragments":["I'm","One","Should","I","Maybe","I",":/",":)","The","Perhaps","Do"]},{"Key":"code. I'm","Fragments":["not","comfortable"]},{"Key":"not familiar","Fragments":["with","with","with","enough","with","enough"]},{"Key":"familiar with","Fragments":["elixir","Elixir","how","the","`String.ends_with?`?","the","parallel","the","how","Elixir.","the","the","tested","erlang.","recursion","iolist_to_binary.","its","tail","the"]},{"Key":"with elixir","Fragments":["yet,","only","\u003ccode\u003ev0.10.0\u003c/code\u003e"]},{"Key":"elixir yet,","Fragments":["so"]},{"Key":"yet, so","Fragments":["regex","thanks"]},{"Key":"so regex","Fragments":["was"]},{"Key":"regex was","Fragments":["just"]},{"Key":"was just","Fragments":["something","struggling","sharing","trying","ugly","considering","more","curious.","using"]},{"Key":"just something","Fragments":["i","about"]},{"Key":"something i","Fragments":["knew"]},{"Key":"i knew","Fragments":["relatively"]},{"Key":"knew relatively","Fragments":["well"]},{"Key":"relatively well","Fragments":[":)"]},{"Key":"Is using","Fragments":["regexes"]},{"Key":"using regexes","Fragments":["the"]},{"Key":"regexes the","Fragments":["only"]},{"Key":"the only","Fragments":["way","thing","thing","question","public","reason","thing","update","methods","allowed","one","meaning","reason","update","terms"]},{"Key":"only way","Fragments":["to","I","to"]},{"Key":"for those","Fragments":["cases?","two","macro","`%s`","methods"]},{"Key":"those cases?","Fragments":["Is"]},{"Key":"cases? Is","Fragments":["there"]},{"Key":"clear way","Fragments":["to"]},{"Key":"to express","Fragments":["those","the","`concat`","an"]},{"Key":"express those","Fragments":["conditions?"]},{"Key":"it's better","Fragments":["to","for","stylistically","to","or","to","to","to","to","to","to","not","to","to","to","to"]},{"Key":"better to","Fragments":["use","`downcase`","use","pattern","just","use","use","go","use","work","call","go","name","add","use","me,","accumulate","use","use","search","make","call","just","be","use","use","use","not","use"]},{"Key":"use private","Fragments":["methods","functions","module","function"]},{"Key":"methods inside","Fragments":["the"]},{"Key":"inside the","Fragments":["Teenager","`List#foldl`,","`cond","Teenager","scope","parentheses.","```","filter.","anonymous","macro","`split_sort`","cond.","count_words","\"cond\"","match"]},{"Key":"the Teenager","Fragments":["module","module.","public","module","responding","that","is"]},{"Key":"Teenager module","Fragments":["or","itself,"]},{"Key":"module or","Fragments":["create","the"]},{"Key":"or create","Fragments":["a"]},{"Key":"new module","Fragments":["Message"]},{"Key":"module Message","Fragments":["with"]},{"Key":"Message with","Fragments":["public"]},{"Key":"with public","Fragments":["methods?"]},{"Key":" Example:","Fragments":["is_question?(msg)"]},{"Key":"Example: is_question?(msg)","Fragments":["or"]},{"Key":"is_question?(msg) or","Fragments":["Message.is_question?(msg)"]},{"Key":"or Message.is_question?(msg)","Fragments":["?"]},{"Key":" Btw.","Fragments":["I","you"]},{"Key":"Btw. I","Fragments":["think"]},{"Key":"think we","Fragments":["should","got","will"]},{"Key":"we should","Fragments":["talk","suggest","get","return"]},{"Key":"should talk","Fragments":["about"]},{"Key":"talk about","Fragments":["\"functions\"","it","it.","performance"]},{"Key":"about \"functions\"","Fragments":["not"]},{"Key":"\"functions\" not","Fragments":["\"methods\","]},{"Key":"not \"methods\",","Fragments":["right?"]},{"Key":"\"methods\", right?","Fragments":[";-)"]},{"Key":"feedback. It","Fragments":["tried"]},{"Key":"It tried","Fragments":["to"]},{"Key":"the language","Fragments":["as","but","itself","yet","of","documentation","*is*","adds","wants","--","working","though.","and","to","are","of","features"]},{"Key":"language as","Fragments":["much"]},{"Key":"as much","Fragments":["as","data","as","as","noise","duplication","about","as","code,","as"]},{"Key":"much as","Fragments":["possible.","I","an","possible,","I'd","I","I","they"]},{"Key":"as possible.","Fragments":["But","Its","The","I"]},{"Key":"possible. But","Fragments":["I"]},{"Key":"But I","Fragments":["agree","can","haven't","prefer","finally","think","guess","don't","don't","was","don't","couldn't","did","could","didn't","can't","don't","could","really","do"]},{"Key":"with your","Fragments":["first","suggestion!","points.","first","use","reasoning","tips!","comments","suggestion.","style","exceptions,","note","`HashDict`","work","outputs."]},{"Key":"your first","Fragments":["point,","observation.","foray","Elixir","Elixir","iteration.","exercise,","point,","case","function"]},{"Key":"first point,","Fragments":["it'll","yeah,"]},{"Key":"point, it'll","Fragments":["be"]},{"Key":"it'll be","Fragments":["more","looking"]},{"Key":"clear to","Fragments":["have","instead","me.","me","me,","compare","understand"]},{"Key":"have it","Fragments":["all","read","now?"]},{"Key":"it all","Fragments":["at","with","at","in","working!"]},{"Key":"all at","Fragments":["one","once","the","the","once.","once"]},{"Key":"at one","Fragments":["place.","point"]},{"Key":"Thanks -","Fragments":["wasn't","I","I'd"]},{"Key":"- wasn't","Fragments":["sure"]},{"Key":"sure if","Fragments":["I","an","it's","it","I","there's","I","I","there","that","using","it's","it's","Elixir","I","it","it","that","there","that's","that's","I","that","memoization","`String.replace(%r/\\P{L}/)`","I'm","it's","I","there","there","e.g.","the","I","I","it","that","there","they","this","it's","ruby","it"]},{"Key":"was supposed","Fragments":["to","to","to"]},{"Key":"supposed to","Fragments":["uncomment","be","be","let","pick","be","use","return","work.","be","do.","use","be"]},{"Key":"to uncomment","Fragments":["out"]},{"Key":"uncomment out","Fragments":["the"]},{"Key":"the tests,","Fragments":["or","and","it's","but","including","but","it"]},{"Key":"tests, or","Fragments":["if"]},{"Key":"or if","Fragments":["those","I","that","I","the","you","the","the","you"]},{"Key":"if those","Fragments":["would"]},{"Key":"those would","Fragments":["be","force"]},{"Key":"a part","Fragments":["of","of","of"]},{"Key":"next exercises..","Fragments":["Will"]},{"Key":"exercises.. Will","Fragments":["re-submit"]},{"Key":"Will re-submit","Fragments":["with"]},{"Key":"re-submit with","Fragments":["them"]},{"Key":"with them","Fragments":["uncommented.."]},{"Key":" Since","Fragments":["you","you","message","this","Enum.zip"]},{"Key":"Since you","Fragments":["extracted","are","want"]},{"Key":"extracted some","Fragments":["of"]},{"Key":"some of","Fragments":["the","your","the","these","these","your","that","the","the","the","the","those","the","these","the","your","the","gvaughn's","the","the","the","the","this","the","the","your","those","these","the","the","its","those","the","the","the"]},{"Key":"the condition","Fragments":["into","functions","function","that","in","cases","part","checks","isn't","for","checks","in","into"]},{"Key":"condition into","Fragments":["its","a","defp"]},{"Key":"into its","Fragments":["own","own","own","own","own"]},{"Key":"its own","Fragments":["private","explicit","module.","private","private","top-level","line,","function,","method/function?","thing,","module","private","method.","enumerable","in"]},{"Key":"own private","Fragments":["function,","functions?","function","function,","functions."]},{"Key":"private function,","Fragments":["wouldn't","like","but","too.","but","or"]},{"Key":"function, wouldn't","Fragments":["it"]},{"Key":"wouldn't it","Fragments":["make","be"]},{"Key":"make sense","Fragments":["to","to","to","and","at","to","to","to","to","it'd","for","that"]},{"Key":"other conditions","Fragments":["as"]},{"Key":"conditions as","Fragments":["well"]},{"Key":"well to","Fragments":["their","make","see"]},{"Key":"own functions","Fragments":["for","to","to"]},{"Key":"functions for","Fragments":["readability?","the","(1)","the","better","testing","all","each","simple","each","each"]},{"Key":"there another","Fragments":["way","reason"]},{"Key":"for shouting","Fragments":["without"]},{"Key":"shouting without","Fragments":["using"]},{"Key":"without using","Fragments":["regex?","`String.replace`,","both","a","a","explicit","reverse"]},{"Key":"looks pretty","Fragments":["good.","easy","good.","good","dang","good.","darn","good","good.","good.","optimal.","good.","nice!","good,"]},{"Key":"One thing","Fragments":["though",",","I",",the","though:","you","I'm","that","about","though:","I","though:","though:","you","that","I","I","I","I","you","you","I","you"]},{"Key":"thing though","Fragments":["is"]},{"Key":"though is","Fragments":["does"]},{"Key":"is does","Fragments":["it"]},{"Key":"condition functions","Fragments":["be"]},{"Key":"functions be","Fragments":["public?","private?"]},{"Key":"Also, in","Fragments":["the","`bottle_text`,"]},{"Key":"the `is_a_question?`","Fragments":["Did"]},{"Key":"`is_a_question?` Did","Fragments":["you"]},{"Key":"you consider","Fragments":["using","extracting","using","renaming","`String.ends_with?`","putting","using","using","using","implementing","using","`\"","higher","using","most","most","List.zip?","using","extracting"]},{"Key":"the pipeline","Fragments":["operator?","actually,","in","before","at","operator","in","in","operator","operator","for","operator","operator","operator","operator?","is","for","into","operator","operator","operator","operator,","operator","operator,","operator","operator","operator","operator","operator","as","before","to","is","result","(collection","and","|\u003e","(`|\u003e`)","in","in","operator","operator"]},{"Key":"pipeline operator?","Fragments":["I"]},{"Key":"operator? I","Fragments":["think"]},{"Key":"it helps","Fragments":["readability","readability","readability","readability","or","signify","reading"]},{"Key":"helps readability","Fragments":["specially","with","specially","to"]},{"Key":"readability specially","Fragments":["with","with"]},{"Key":"specially with","Fragments":["methods","methods"]},{"Key":"with methods","Fragments":["such","that","such"]},{"Key":"methods such","Fragments":["as","as","as"]},{"Key":"such as","Fragments":["`String.ends_with?`","better","```String.ends_with?```","String.ends_with?/2.","better","`silent?`","`is_silence?`","`String.codepoints","map,","the","defmodule.","this","\"computer-aided\").","Russian.","`Enum.reduce`.","left","function","\u003ccode\u003eis_shouting?\u003c/code\u003e","the"]},{"Key":"the language,","Fragments":["learning","so"]},{"Key":"language, learning","Fragments":["from"]},{"Key":"learning from","Fragments":["it!"]},{"Key":" Now,","Fragments":["unto","if","I"]},{"Key":"Now, unto","Fragments":["the"]},{"Key":"unto the","Fragments":["nits."]},{"Key":"the nits.","Fragments":["Is"]},{"Key":"nits. Is","Fragments":["the"]},{"Key":"the regex","Fragments":["really","character","a","you're","used","pattern","refinement","are","on","and","by","is","would","at","codes.","and","and","`%r/\\w+/g`?","is","stuff","match,","equivalent,","is","(yours","slightly","engine","matcher","match","in","in","itself.","in","in","and","hell","used","to","because","`\\pL`","and","for","because","in","`/\\p{L}+/`"]},{"Key":"regex really","Fragments":["necessary?"]},{"Key":"really necessary?","Fragments":["Do"]},{"Key":"necessary? Do","Fragments":["you","the"]},{"Key":"about String.ends_with/1","Fragments":["?"]},{"Key":"statement is","Fragments":["a","just","\"empty\"","a","what","absolutely"]},{"Key":"good use","Fragments":["of","of"]},{"Key":"pattern matching,","Fragments":["it","Luke","so","I","awesome","but","but"]},{"Key":"matching, it","Fragments":["also"]},{"Key":"also forces","Fragments":["the"]},{"Key":"forces the","Fragments":["reader"]},{"Key":"the reader","Fragments":["to","to","to","in","has","to","to","understand","some","has","to","has","think","understands","knows","understand"]},{"Key":"reader to","Fragments":["visually","give","look","work","track","understand.","think.","do","understand"]},{"Key":"to visually","Fragments":["match","identify"]},{"Key":"visually match","Fragments":["each"]},{"Key":"match each","Fragments":["true","other"]},{"Key":"each true","Fragments":["to"]},{"Key":"true to","Fragments":["the","the"]},{"Key":"the predicate,","Fragments":["sacrificing"]},{"Key":"predicate, sacrificing","Fragments":["readability."]},{"Key":"that José","Fragments":["Valim"]},{"Key":"José Valim","Fragments":["used","uses","is"]},{"Key":"Valim used","Fragments":["multiple"]},{"Key":"used multiple","Fragments":["functions"]},{"Key":"multiple functions","Fragments":["that","with"]},{"Key":"that accept","Fragments":["different"]},{"Key":"accept different","Fragments":["parameters"]},{"Key":"different parameters","Fragments":["in"]},{"Key":"parameters in","Fragments":["his","a","the"]},{"Key":"in his","Fragments":["Peepcode"]},{"Key":"his Peepcode","Fragments":["screencast,"]},{"Key":"Peepcode screencast,","Fragments":["so"]},{"Key":"screencast, so","Fragments":["I"]},{"Key":"is OK.","Fragments":["It"]},{"Key":"OK. It","Fragments":["certainly"]},{"Key":"It certainly","Fragments":["reads"]},{"Key":"certainly reads","Fragments":["nicely"]},{"Key":"reads nicely","Fragments":["(interpret","as"]},{"Key":"nicely (interpret","Fragments":["\"\""]},{"Key":"(interpret \"\"","Fragments":["as"]},{"Key":" Really","Fragments":["clean.","nice!","minor","not","wanted","nice,"]},{"Key":"Really clean.","Fragments":["I"]},{"Key":"clean. I","Fragments":["like"]},{"Key":"of atoms","Fragments":["piped","piped"]},{"Key":"atoms piped","Fragments":["into","into"]},{"Key":"piped into","Fragments":["#respond.","#response,"]},{"Key":"The problem","Fragments":["with","with","seemed","should","should","with","I","(when"]},{"Key":"problem with","Fragments":["`\\w`","this","this","`\\w`","the","the","newer","doing","this","this.","this","HashDict.equal?","regex"]},{"Key":"with `\\w`","Fragments":["is","is"]},{"Key":"`\\w` is","Fragments":["that","a","that","said","the"]},{"Key":"it captures","Fragments":["`_`","`_`"]},{"Key":"captures `_`","Fragments":["symbol,","symbol,"]},{"Key":"`_` symbol,","Fragments":["which","which"]},{"Key":"symbol, which","Fragments":["is","is"]},{"Key":"which is","Fragments":["not","part","more","solves","why","a","not","not","certainly","nice.","more","great.","more","a","far","entirely","when","ok,","a","a","`all_caps?`.","rather","perhaps","why","annoying.","really","a","the","not","where","(zero","why","good.","to","good.","to","important","unnecessary","somewhat","to","easy","about","shorthand","to","to","awesome.","more","a","preferable.","accessible","to","to","fine.","what","very","much"]},{"Key":"not specified","Fragments":["in","in"]},{"Key":"specified in","Fragments":["assignment.","the","assignment."]},{"Key":"for spotting","Fragments":["that."]},{"Key":"spotting that.","Fragments":["It"]},{"Key":"that. It","Fragments":["was","looks"]},{"Key":"It was","Fragments":["left","a","more","a","a","odd"]},{"Key":"was left","Fragments":["after"]},{"Key":"left after","Fragments":["removing"]},{"Key":"after removing","Fragments":["Regex.scan"]},{"Key":"of pattern-matching","Fragments":["on"]},{"Key":"pattern-matching on","Fragments":["atoms"]},{"Key":"on atoms","Fragments":["to"]},{"Key":"atoms to","Fragments":["generate","give"]},{"Key":"the responses","Fragments":["--","into"]},{"Key":"responses --","Fragments":["very"]},{"Key":"-- very","Fragments":["clever!"]},{"Key":"probably recommend","Fragments":["extracting"]},{"Key":"recommend extracting","Fragments":["the"]},{"Key":"extracting the","Fragments":["conditions","conditional","conditions","checks","filtering","conditions","anonymous","logic","conditions","words"]},{"Key":"conditions to","Fragments":["private","helper","separate","separate"]},{"Key":"to private","Fragments":["methods","named","..."]},{"Key":"names --","Fragments":["seems"]},{"Key":"-- seems","Fragments":["like"]},{"Key":"like it","Fragments":["would","could","to","the","becomes","a","this","will","either","is","this","with","warrants","better","since","might","would","in","much","could","sorts","in","wasn't","too.","actually","needed","for","because","would","falls","would","got","was","to","that","might","though,","should","preserved",":)","when"]},{"Key":"make your","Fragments":["interpret","implementations","filter","intent","submissions","count"]},{"Key":"your interpret","Fragments":["implementation"]},{"Key":"interpret implementation","Fragments":["very"]},{"Key":"implementation very","Fragments":["clear."]},{"Key":"good. One","Fragments":["(super","small","very","very","small","small","small","thing","thing"]},{"Key":"One (super","Fragments":["nitpicky)"]},{"Key":"(super nitpicky)","Fragments":["comment"]},{"Key":"nitpicky) comment","Fragments":["--"]},{"Key":"comment --","Fragments":["I"]},{"Key":"would prefer","Fragments":["names","that","to","to","to"]},{"Key":"prefer names","Fragments":["from"]},{"Key":"names from","Fragments":["the"]},{"Key":"the domain,","Fragments":["so","but","since"]},{"Key":"domain, so","Fragments":["maybe"]},{"Key":"maybe `strand`","Fragments":["instead"]},{"Key":"`strand` instead","Fragments":["of"]},{"Key":"Might consider","Fragments":["having"]},{"Key":"consider having","Fragments":["your"]},{"Key":"having your","Fragments":["new","expected"]},{"Key":"your new","Fragments":["hash","version"]},{"Key":"new hash","Fragments":["be"]},{"Key":"hash be","Fragments":["the"]},{"Key":"first argument","Fragments":["to","of","provided","to","to","in","to","(it's","to","of","of"]},{"Key":"to \u003ccode\u003egenerate_counts\u003c/code\u003e","Fragments":["so"]},{"Key":"\u003ccode\u003egenerate_counts\u003c/code\u003e so","Fragments":["you"]},{"Key":"could pipeline","Fragments":["it"]},{"Key":"pipeline it","Fragments":["in."]},{"Key":" \u003ccode\u003eDict.update(...)","Fragments":["|\u003e"]},{"Key":"\u003ccode\u003eDict.update(...) |\u003e","Fragments":["generate_counts(tail)\u003c/code\u003e"]},{"Key":"Looks really","Fragments":["good.","neat,","good;"]},{"Key":"out \u003ccode\u003eHashDict.update/4\u003c/code\u003e","Fragments":["Might","-"]},{"Key":"\u003ccode\u003eHashDict.update/4\u003c/code\u003e Might","Fragments":["simplify"]},{"Key":"Might simplify","Fragments":["some"]},{"Key":"simplify some","Fragments":["of","of","of","of"]},{"Key":"like it.","Fragments":["Only","Only","`cond`","Take",":",":","Don't","Like","Regexes"]},{"Key":"it. Only","Fragments":["thing","thing"]},{"Key":"Only thing","Fragments":["I'd","I'd","I","I"]},{"Key":"thing I'd","Fragments":["look","look","change","suggest"]},{"Key":"I'd look","Fragments":["at","at","at"]},{"Key":"at is","Fragments":["the","the"]},{"Key":"of \u003ccode\u003elast_one\u003c/code\u003e","Fragments":["-","-"]},{"Key":"\u003ccode\u003elast_one\u003c/code\u003e -","Fragments":["is","is"]},{"Key":"- is","Fragments":["that","that","there","there","there","this","that","that"]},{"Key":"that really","Fragments":["what","what","don't"]},{"Key":"really what","Fragments":["the","the"]},{"Key":"what the","Fragments":["name","name","doctor","Elixir","convention","community","policy","common","code","\u0026amp;","intent","relative","idiomatic","code","better","nucleotides","different","balance","previous","heck","things","different","teenager","tests","value","code","convention","two","test","actual","test","extra","Dict","filter","custom","`\u0026`","test","functions"]},{"Key":"name should","Fragments":["be?","be?","be"]},{"Key":"Nice use","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"the language!","Fragments":["Love"]},{"Key":"language! Love","Fragments":["it."]},{"Key":" Perhaps","Fragments":["you","there","\"client-code\""]},{"Key":"Perhaps you","Fragments":["could","can","should","could"]},{"Key":"could combine","Fragments":["the","the"]},{"Key":"combine the","Fragments":["`interpret`","filter","last"]},{"Key":"`interpret` functions","Fragments":["to"]},{"Key":"a single","Fragments":["one.","expression","line","character,","method","method","\"right\"","function","usage,","line\"","private","pipeline","argument","function,","pass.","nucleotide.","return","line","line:","line:","function;","line","line.","line:","character,","traversal","string","space.","expression","line","line","character.","expression","verse","line","string","pass?","word,","traversal","place","letter","regex","line","pass?","process","reference.","reduce.","reference...","binary.","value,","word?","word?","place.","reverse","clause","line.","line,","test","line","`cond`","clause.","list.","char?","line","element","line","element","reversion!","function.","item","item","chunk),","character.","expression.","time","line","map.","suffix,","one.","statement"]},{"Key":"single one.","Fragments":["That","By"]},{"Key":"one. That","Fragments":["doesn't","is"]},{"Key":"That doesn't","Fragments":["make","seem","work"]},{"Key":"make full","Fragments":["use"]},{"Key":"full use","Fragments":["of"]},{"Key":"language but","Fragments":["I","included"]},{"Key":" Additionally,","Fragments":["you","you"]},{"Key":"Additionally, you","Fragments":["use","could"]},{"Key":"use atoms","Fragments":["to"]},{"Key":"a proper","Fragments":["response.","name","name","function?","language"]},{"Key":"proper response.","Fragments":["Maybe"]},{"Key":"response. Maybe","Fragments":["you"]},{"Key":"could wrap","Fragments":["the"]},{"Key":"wrap the","Fragments":["conditions","`Regex.scan`","call","pipeline","invocation","original","result","logic"]},{"Key":"in methods","Fragments":["instead"]},{"Key":"methods instead","Fragments":["of"]},{"Key":" By","Fragments":["the","the","the","the","the","all","\"update","the"]},{"Key":"By the","Fragments":["way,","way,","way.","way,","way,","way,"]},{"Key":"the way,","Fragments":["these","why","extra","`||","I","if","wubba"]},{"Key":"way, these","Fragments":["are"]},{"Key":"these are","Fragments":["just","tiny","called","focused","all","hard","personal"]},{"Key":"just suggestions","Fragments":[";-)."]},{"Key":"suggestions ;-).","Fragments":["I'm"]},{"Key":";-). I'm","Fragments":["still"]},{"Key":"I'm still","Fragments":["new","quite","working","learning","a","learning","getting","learning","looking","trying","fairly","picking","torn","not","not","an","learning","new","trying","rather","very","waiting","learning","trying","finding","interested","in","using,","trying","a","not","trying","very","adapting","working"]},{"Key":"still new","Fragments":["to","to"]},{"Key":"new to","Fragments":["Elixir","elixir","Elixir","me","Elixir","Elixir","elixir.)","Elixir,","Elixir","Elixir,","elixir","Elixir,","Elixir","Elixir,","Haskell","elixir","Elixir,","elixir?","elixir,","the","Elixir,","elixir.","this","elixir,","elixir","say","Elixir","Elixir,","Elixir,","elixir,","the"]},{"Key":"to Elixir","Fragments":["and","is","so","as","and","myself,","and","so","so"]},{"Key":"Elixir and","Fragments":["I","functional","it's","if","in","play","I","not","pretty","couldn't","Haskell.","Haskell","for"]},{"Key":"know the","Fragments":["best","method","right","answer","test","best","answer,","regex","specifics,","backing","string","significance","answer"]},{"Key":"the best","Fragments":["practices","name","name","choice","thing","way","alternative","name","reason","example","one.","case","way","way","way","library","place","bet?","way","way","way","way","way","place"]},{"Key":"best practices","Fragments":["yet."]},{"Key":"I looked","Fragments":["high","around","at","back","in","for","at","in","closely","up","at","at"]},{"Key":"looked high","Fragments":["and"]},{"Key":"high and","Fragments":["low"]},{"Key":"and low","Fragments":["for"]},{"Key":"low for","Fragments":["a"]},{"Key":"do that","Fragments":["and","that","and","here.","with","would","in","work","once.","it","in","in","now,","only","kind","exercise","would","on"]},{"Key":"that and","Fragments":["avoid","submit","have","resubmit.","used","just","changed","submit"]},{"Key":"and avoid","Fragments":["the","using","requiring","having","the","having","`++`."]},{"Key":"avoid the","Fragments":["conditional,","redundancy","regex","regex","conditional","error","intermediate","repeated","overhead","explicit","explicit","filter","conditional","if"]},{"Key":"the conditional,","Fragments":["and"]},{"Key":"conditional, and","Fragments":["somehow"]},{"Key":"and somehow","Fragments":["missed","didn't"]},{"Key":"somehow missed","Fragments":["Dict's"]},{"Key":"missed Dict's","Fragments":["existence"]},{"Key":"Dict's existence","Fragments":["entirely."]},{"Key":"existence entirely.","Fragments":["Thank"]},{"Key":"entirely. Thank","Fragments":["you!"]},{"Key":"The use","Fragments":["of"]},{"Key":"of \"if\"","Fragments":["might"]},{"Key":"\"if\" might","Fragments":["be"]},{"Key":"be indicative","Fragments":["that"]},{"Key":"indicative that","Fragments":["there"]},{"Key":"that there","Fragments":["is","is","are","should","was","is","are","is","are","are","is","is","is","is","is","is","are","should","might","is"]},{"Key":"more functional","Fragments":["way","approach","/","ruby"]},{"Key":"functional way","Fragments":["to","of","of"]},{"Key":"to apprach","Fragments":["this,"]},{"Key":"apprach this,","Fragments":["on"]},{"Key":"this, on","Fragments":["lines"]},{"Key":"lines 12-16.","Fragments":["Have"]},{"Key":"12-16. Have","Fragments":["you"]},{"Key":"checked the","Fragments":["Dict.update","thesaurus"]},{"Key":"the Dict.update","Fragments":["method?"]},{"Key":"I'll see","Fragments":["if","what","if","if"]},{"Key":"simplify it","Fragments":["a","by"]},{"Key":"bit and","Fragments":["eliminate","then","came","sometimes"]},{"Key":"and eliminate","Fragments":["the","the"]},{"Key":"the regular","Fragments":["expressions.","expression","expression","expression","expression"]},{"Key":"regular expressions.","Fragments":["Thanks","For"]},{"Key":"expressions. Thanks","Fragments":["for"]},{"Key":"the feedback.","Fragments":["I","I","I","Yes,","I","The","I've","I","I'm","Just","I","My","Updated.","I","Moving","I","I",":)","That","This","Do"]},{"Key":"to disagree","Fragments":["because",":)","with"]},{"Key":"disagree because","Fragments":["I"]},{"Key":"because I","Fragments":["think","wasn't","analyzed","had","internalised","didn't","was","do","think","needed","didn't","think","can't","think","wanted","wanted","lose","could","thought","added","saw","tried","have","was","was","didn't","felt","felt","just","am","thought","didn't"]},{"Key":"think String.split","Fragments":["makes"]},{"Key":"String.split makes","Fragments":["it"]},{"Key":"clearer what's","Fragments":["happening"]},{"Key":"what's happening","Fragments":["than","without"]},{"Key":"happening than","Fragments":["Regex.scan."]},{"Key":"than Regex.scan.","Fragments":["Also"]},{"Key":"Regex.scan. Also","Fragments":["it"]},{"Key":"Also it","Fragments":["supports","was","seems","would","would"]},{"Key":"it supports","Fragments":["all","that"]},{"Key":"supports all","Fragments":["unicode"]},{"Key":"all unicode","Fragments":["whitespace,"]},{"Key":"unicode whitespace,","Fragments":["not"]},{"Key":"whitespace, not","Fragments":["sure"]},{"Key":"about \\w","Fragments":["in"]},{"Key":"\\w in","Fragments":["Elixir","your"]},{"Key":"in Elixir","Fragments":["/","it","and","a","yet.","since","to","to","0.10.1.","though,","like","as","are","`v10.0.1`,","code,","should","land,","without","and","makes","due","(we","(as","we","and","docs.","btw","either,","we","to","so","syntax","yet,","it's","what","to","are","to","and","had","0.13.2...","compared","(couldn't",":)","0.15."]},{"Key":"Elixir /","Fragments":["Erlang."]},{"Key":"need to","Fragments":["pass","read","be","be","prefix","be","put","give","be","have","be","be","\"sanitize\"","use","define","import","check","compare","change","change","know","handle","flatten","re-create","use","downcase","do","have","keep","import","find","read","check","use","check","use","pass","join","check","create","care","normalize","do","make","change","write","do","update","check","assign","look","know","convert","call","use","explicitly","refactor.","define","use","pass","learn","be","actually","pass","remember","pass","refactor","be","do","re-read","slow","name","join","be","learn.","re-study","stop","do","write","be","optimize","circle","check","be","do","reject","reach","do","sift","create","have","work","be","change","do","check","clean","keep","be","step","write","be","re-sort","change","review","actually","know","delete","force","think","delegate","do","use","have","iterate","iterate","have","List.flatten","do","call","add","put"]},{"Key":"pass in","Fragments":["\u003ccode\u003en-1\u003c/code\u003e","\u0026amp;1","the","function","a","a","its"]},{"Key":"in \u003ccode\u003en-1\u003c/code\u003e","Fragments":["to"]},{"Key":"\u003ccode\u003en-1\u003c/code\u003e to","Fragments":["verse?"]},{"Key":"to verse?","Fragments":["What"]},{"Key":"verse? What","Fragments":["benefit"]},{"Key":"benefit do","Fragments":["you","you"]},{"Key":"get from","Fragments":["that?","having","GenServer.Behaviour."]},{"Key":"the -1","Fragments":["pattern","on"]},{"Key":"-1 pattern","Fragments":["match"]},{"Key":"on `bottles_phrase`","Fragments":["to"]},{"Key":"`bottles_phrase` to","Fragments":["get"]},{"Key":"get you","Fragments":["the"]},{"Key":"you the","Fragments":["ending","anagrams","mechanics","predicates","result","leading","entire"]},{"Key":"the ending","Fragments":["phrase."]},{"Key":"Could `Regex.scan`","Fragments":["simplify"]},{"Key":"`Regex.scan` simplify","Fragments":["things"]},{"Key":"simplify things","Fragments":["for","in","by"]},{"Key":"things for","Fragments":["you?"]},{"Key":"use `Regex.scan(%r/\\w+/,phrase)`","Fragments":["as"]},{"Key":"`Regex.scan(%r/\\w+/,phrase)` as","Fragments":["opposed"]},{"Key":"as opposed","Fragments":["to","to","to","to","to","to","to"]},{"Key":"opposed to","Fragments":["the","`:empty`.","something","just","something","having","0.10","something"]},{"Key":" Excellent!","Fragments":["But","Isn't"]},{"Key":"Excellent! But","Fragments":["why"]},{"Key":"But why","Fragments":["you've","`display`?"]},{"Key":"why you've","Fragments":["decided"]},{"Key":"you've decided","Fragments":["to"]},{"Key":"add `respond_to`","Fragments":["method?"]},{"Key":"tried using","Fragments":["pipelining,","`case`,","the"]},{"Key":"using pipelining,","Fragments":["which"]},{"Key":"pipelining, which","Fragments":["I"]},{"Key":"which I","Fragments":["barely","personally","*do*","usually","think","was","will","haven't","use","don't","really","can't","just","was","need","prefer","had","thought","fixed","like."]},{"Key":"I barely","Fragments":["know,"]},{"Key":"barely know,","Fragments":["but"]},{"Key":"know, but","Fragments":["couldn't."]},{"Key":"but couldn't.","Fragments":["I"]},{"Key":"couldn't. I","Fragments":["will"]},{"Key":"will try","Fragments":["again","to","it","it!","to","using"]},{"Key":"try again","Fragments":["with"]},{"Key":"again with","Fragments":["your"]},{"Key":" Lines","Fragments":["9-11"]},{"Key":"Lines 9-11","Fragments":["don't"]},{"Key":"9-11 don't","Fragments":["seem"]},{"Key":"don't seem","Fragments":["very","to","to","to"]},{"Key":"seem very","Fragments":["\"functional\""]},{"Key":"very \"functional\"","Fragments":["--"]},{"Key":"\"functional\" --","Fragments":["it's"]},{"Key":"not that","Fragments":["they","clear,","bad","they're","easily"]},{"Key":"they don't","Fragments":["work,","require","understand","suffer","mention","seem","exist"]},{"Key":"don't work,","Fragments":["just"]},{"Key":"work, just","Fragments":["that"]},{"Key":"just that","Fragments":["they","it's","the","non","*all"]},{"Key":"they aren't","Fragments":["very","equal"]},{"Key":"aren't very","Fragments":["idiomatic."]},{"Key":"What about","Fragments":["readability?","extracting","having","doing","something","`Regex#replace`?","other"]},{"Key":" 1.","Fragments":["What","I","You","Just","`anagram_for?`","Have","How","Did","`HashDict.update`","When","Using","You","It","I'm","It's","this","The","tried","The","Using","You","For","While","chaining"]},{"Key":"1. What","Fragments":["does"]},{"Key":"What does","Fragments":["the","this","a","the","`|\u003e`"]},{"Key":"does the","Fragments":["\u003ccode\u003eRegex.scan...\u003c/code\u003e","fact","same","right","right","syntax","downcasing","job.","`u`","conversion.","pipeline","test-suite"]},{"Key":"the \u003ccode\u003eRegex.scan...\u003c/code\u003e","Fragments":["do?"]},{"Key":"\u003ccode\u003eRegex.scan...\u003c/code\u003e do?","Fragments":["How"]},{"Key":"do? How","Fragments":["could"]},{"Key":"How could","Fragments":["you"]},{"Key":"could you","Fragments":["communicate","please","give","remove","be","give","give","do","use","paste","just","filter"]},{"Key":"you communicate","Fragments":["that"]},{"Key":"communicate that","Fragments":["to"]},{"Key":"that to","Fragments":["someone","something","a","test","add","the","something","a","my","work","work.","find","keep","simplify","the","work","work","a"]},{"Key":"to someone","Fragments":["reading"]},{"Key":"someone reading","Fragments":["your"]},{"Key":"reading your","Fragments":["code?"]},{"Key":" 2.","Fragments":["Check","Probably.","You","Will","Sorry,","There","Would","Should","The","`x`","For","Character","It","I","I","let","You","`append`","Thinking","I","Using","But","Using","chain"]},{"Key":"2. Check","Fragments":["out"]},{"Key":"\u003ccode\u003eHashDict.update/4\u003c/code\u003e -","Fragments":["it"]},{"Key":"- it","Fragments":["does","took","feels","would"]},{"Key":"does what","Fragments":["you're","`tokenizer`"]},{"Key":"you're going","Fragments":["for","to","the","to","to"]},{"Key":"going for","Fragments":["including","speed,"]},{"Key":"for including","Fragments":["a"]},{"Key":"including a","Fragments":["default"]},{"Key":"a default","Fragments":["value","parameter","argument","value","syntax","if","value.","value","implementation","value","parameter"]},{"Key":"default value","Fragments":["and","for","yet,","one.","on","in","for","to","set"]},{"Key":"value and","Fragments":["a","the","update"]},{"Key":"and a","Fragments":["function","comparison.","downcase,","function","second","protocol","`HashDict`","`phrase`","few","colon","map,","helper","I","function,","happy","few","reverse","function","line.","tiny","new","non-word","`count/2`","single","doctest"]},{"Key":"function to","Fragments":["manipulate","something","get","clean","pick","the","update","update","your","do","determine","get","a","eliminate","be","private","use","implement","filter","boot.","use","filter","wrap","be","raise","help","archive","use","avoid"]},{"Key":"to manipulate","Fragments":["it","it's","DNA,","numbers"]},{"Key":" 3.","Fragments":["Do","Awesome.","Check","Your","What","i","You","made"]},{"Key":"3. Do","Fragments":["you"]},{"Key":"about pipelining?","Fragments":["It's"]},{"Key":"pipelining? It's","Fragments":["where"]},{"Key":"It's where","Fragments":["you"]},{"Key":"where you","Fragments":["can","are","pass","know","could"]},{"Key":"can take","Fragments":["the","a"]},{"Key":"the result","Fragments":["of","of","of","of","is","of","of","of","is","to","is","you're","so","binary","of","of","would","of","of","while","is","is","of","of"]},{"Key":"result of","Fragments":["a","an","keeping","the","the","`_anagramChars(sourceWord)`","scan","the","`parse","nucleotide_counts","that","`letters","the","mistaking","`parse`","something"]},{"Key":"and pass","Fragments":["it","it","it","it","it","it","it","an"]},{"Key":"in as","Fragments":["the","a","a","simple","well","optional"]},{"Key":"argument of","Fragments":["the","an","the","a","the"]},{"Key":"next function.","Fragments":["Lines"]},{"Key":"function. Lines","Fragments":["10"]},{"Key":"Lines 10","Fragments":["and"]},{"Key":"10 and","Fragments":["11"]},{"Key":"and 11","Fragments":["seem"]},{"Key":"11 seem","Fragments":["prime"]},{"Key":"seem prime","Fragments":["for"]},{"Key":"prime for","Fragments":["it."]},{"Key":"for it.","Fragments":["\u003ccode\u003eHashDict.put()","So,","Trying",";)","In"]},{"Key":"it. \u003ccode\u003eHashDict.put()","Fragments":["|\u003e"]},{"Key":"\u003ccode\u003eHashDict.put() |\u003e","Fragments":["count_word(tail)\u003c/code\u003e"]},{"Key":"Much better","Fragments":["now."]},{"Key":"Ok, I've","Fragments":["submitted","removed"]},{"Key":"I've removed","Fragments":["the","the"]},{"Key":"removed the","Fragments":["extra","unnecessary","extra","extra","calls","includes_letters?","`Enum.sort`","list","shortcut","regex"]},{"Key":"the extra","Fragments":["check.","mile","space","check.","check.","parameters","newline","module.","steps","newline","twist","parens","processing","virtue","@matilde.","module."]},{"Key":"Was the","Fragments":["`IO.puts"]},{"Key":"the `IO.puts","Fragments":["\"Compiling\"`"]},{"Key":"`IO.puts \"Compiling\"`","Fragments":["left"]},{"Key":"\"Compiling\"` left","Fragments":["in"]},{"Key":"left in","Fragments":["by"]},{"Key":"in by","Fragments":["mistake?"]},{"Key":"out `Enum.map_join`,","Fragments":["I"]},{"Key":"`Enum.map_join`, I","Fragments":["think"]},{"Key":"your `sing/2`","Fragments":["a"]},{"Key":"`sing/2` a","Fragments":["bit."]},{"Key":"bit. Also","Fragments":["@mallory"]},{"Key":"Also @mallory","Fragments":["had"]},{"Key":"@mallory had","Fragments":["a"]},{"Key":"a cool","Fragments":["trick,","way","algorithm,"]},{"Key":"cool trick,","Fragments":["piping"]},{"Key":"trick, piping","Fragments":["a"]},{"Key":"piping a","Fragments":["range"]},{"Key":"a range","Fragments":["as","like","first).","to","to","first","with","into","since","`1..4`","and"]},{"Key":"range as","Fragments":["the"]},{"Key":"the initial","Fragments":["input","collection,","clause","\"1\"","state","'cond'","\"cond\""]},{"Key":"initial input","Fragments":["--"]},{"Key":"input --","Fragments":["you"]},{"Key":"-- you","Fragments":["should"]},{"Key":"you should","Fragments":["try","consider","use","submit","rename","extract","probably","consider","probably","be","add","be","be","ask","be","reach","invert","use","make","use","try"]},{"Key":"should try","Fragments":["that","to","and"]},{"Key":"try that","Fragments":["out",":)","on","against"]},{"Key":"that out","Fragments":["and","and","of","there","for","now.","I"]},{"Key":"out and","Fragments":["see","submitted","is"]},{"Key":"can see","Fragments":["arguments","how","an","now","this","*why*","arguments","I","two","there","they","how","why","that","pieces","what","why","why","is","how","that","how","is","is","is","that"]},{"Key":"see arguments","Fragments":["for","either"]},{"Key":"arguments for","Fragments":["and"]},{"Key":"and against","Fragments":["separating"]},{"Key":"against separating","Fragments":["the"]},{"Key":"logic --","Fragments":["it"]},{"Key":"on how","Fragments":["Message","this","to","to","to","to","it","badly","the"]},{"Key":"how Message","Fragments":["fit"]},{"Key":"Message fit","Fragments":["in"]},{"Key":"fit in","Fragments":["with","80","a"]},{"Key":"in with","Fragments":["the"]},{"Key":"the larger","Fragments":["system.","context."]},{"Key":"larger system.","Fragments":["In"]},{"Key":"system. In","Fragments":["this"]},{"Key":"this specific","Fragments":["example,","case","case.","case,"]},{"Key":"specific example,","Fragments":["it's"]},{"Key":"example, it's","Fragments":["probably"]},{"Key":"it's probably","Fragments":["not","possible","best","best","better","a"]},{"Key":"probably not","Fragments":["necessary,","call","aware","around","be","idiomatic.","the"]},{"Key":"not necessary,","Fragments":["but","would","but","you"]},{"Key":"necessary, but","Fragments":["it","I","that"]},{"Key":"idea in","Fragments":["a","Elixir.","mind,"]},{"Key":"a project","Fragments":["context."]},{"Key":" Doctests","Fragments":["don't"]},{"Key":"Doctests don't","Fragments":["buy"]},{"Key":"don't buy","Fragments":["you"]},{"Key":"you a","Fragments":["lot","sense","little","list","way","rubyist","very","question?","new"]},{"Key":"lot here,","Fragments":["although"]},{"Key":"here, although","Fragments":["you"]},{"Key":"although you","Fragments":["could"]},{"Key":"use them","Fragments":["to","in","in","outside","without","all","to","outside","a","for"]},{"Key":"them to","Fragments":["to","my","catch","their","get","be","count","report","my"]},{"Key":"to to","Fragments":["test","eliminate"]},{"Key":"test anything","Fragments":["about"]},{"Key":"anything about","Fragments":["your","this","Erlang","the","`reverse`","Elixir"]},{"Key":"about your","Fragments":["implementation","regex:","choice","choice","`shouting?`"]},{"Key":"implementation not","Fragments":["covered"]},{"Key":"not covered","Fragments":["in"]},{"Key":"covered in","Fragments":["the"]},{"Key":"the provided","Fragments":["tests.","function","skeleton.","`count/1`"]},{"Key":" In","Fragments":["general","Elixir,","the","any","the","regards","the","Elixir,","this","this","case","`first_line`,","the","general","your","count,","line","the","this","the","Elixir","other","my","`shouting?`","general","your","other","this","the","Elixir,","the","`same_word?`","`count`","general","this","the","this","any","general","general","general","`list`","my","my","`difference`,","`shouting?`","Elixir","`input","general","sanitize","`nucleotide_counts`","general","retrospect,","this","general","the","general","general","general","general","count/1","Elixir","other","the","the","your","general","lines","yelling?"]},{"Key":"In general","Fragments":["though,","I","I","it's","it's","if","it's","I'm","`HashDict`","it's","explicit","I'd","it's","it's","it's","in","it's","`|\u003e`","it's","the"]},{"Key":"general though,","Fragments":["they"]},{"Key":"though, they","Fragments":["provide"]},{"Key":"they provide","Fragments":["example-based","clearly"]},{"Key":"provide example-based","Fragments":["documentation,"]},{"Key":"example-based documentation,","Fragments":["which"]},{"Key":"documentation, which","Fragments":["I"]},{"Key":"I personally","Fragments":["find","prefer","like","like","find","try","like","prefer","prefer","find","don't"]},{"Key":"personally find","Fragments":["the","value","this"]},{"Key":"The \u003ccode\u003edef","Fragments":["sing(start_verse,"]},{"Key":"\u003ccode\u003edef sing(start_verse,","Fragments":["end_verse)"]},{"Key":"sing(start_verse, end_verse)","Fragments":["when"]},{"Key":"end_verse) when","Fragments":["start_verse"]},{"Key":"when start_verse","Fragments":["\u003c="]},{"Key":"start_verse \u003c=","Fragments":["end_verse\u003c/code\u003e"]},{"Key":"\u003c= end_verse\u003c/code\u003e","Fragments":["was"]},{"Key":"end_verse\u003c/code\u003e was","Fragments":["a"]},{"Key":"was a","Fragments":["guard","lot","little","bad","genuine","little","test","fun","mistake,","little","String.empty?","difference.","bit","good","better","suggested","time","bad","fun","way","bit","better","remnant","test","test","bit","real","decent","synonym","lot","mistake","mistake,","little","way","more","difference.","bunch","bug","little","mistaken","problem","Regex","quick","recipe","good","for"]},{"Key":"clause to","Fragments":["end","make","avoid","handle","fall","combine","match,","check"]},{"Key":"to end","Fragments":["the","with","with","those"]},{"Key":"end the","Fragments":["recursion."]},{"Key":"the recursion.","Fragments":["I"]},{"Key":"recursion. I","Fragments":["can"]},{"Key":"see how","Fragments":["the","it","that","many","you","I","I","it","you've","they","I","it","the","much","I","it","`bitstring_to_list`","much","I","that","that","to","to","I","it","many"]},{"Key":"the \u003ccode\u003e\u003c=\u003c/code\u003e","Fragments":["implied"]},{"Key":"\u003ccode\u003e\u003c=\u003c/code\u003e implied","Fragments":["something"]},{"Key":"implied something","Fragments":["that"]},{"Key":"that wasn't","Fragments":["true.","passed","a","basically"]},{"Key":"wasn't true.","Fragments":["I"]},{"Key":"true. I","Fragments":["changed","thought","like"]},{"Key":"I changed","Fragments":["it","that","something,","it","the","to","that","my","the","the"]},{"Key":"changed it","Fragments":["to","because","to","recently."]},{"Key":"to simply","Fragments":["be"]},{"Key":"simply be","Fragments":["\u003ccode\u003e==\u003c/code\u003e"]},{"Key":"be \u003ccode\u003e==\u003c/code\u003e","Fragments":["to"]},{"Key":"\u003ccode\u003e==\u003c/code\u003e to","Fragments":["make"]},{"Key":"you handle","Fragments":["the","a","strings/unicode"]},{"Key":"handle the","Fragments":["case","edge","`close_bank`","fact"]},{"Key":"case when","Fragments":["people"]},{"Key":"when people","Fragments":["specify","do"]},{"Key":"people specify","Fragments":["the"]},{"Key":"specify the","Fragments":["start","arguments."]},{"Key":"the start","Fragments":["and","of","and"]},{"Key":"start and","Fragments":["end","end..."]},{"Key":"and end","Fragments":["verses"]},{"Key":"end verses","Fragments":["backward,"]},{"Key":"verses backward,","Fragments":["but"]},{"Key":"backward, but","Fragments":["I"]},{"Key":"might argue","Fragments":["that"]},{"Key":"it should","Fragments":["just","be","be","be","be.","be","be","be","be","be","be","be","work","be","be"]},{"Key":"should just","Fragments":["call","move","prepend","use"]},{"Key":"just call","Fragments":["itself","it","it"]},{"Key":"call itself","Fragments":["in","be"]},{"Key":"itself in","Fragments":["the"]},{"Key":"correct order","Fragments":["instead"]},{"Key":"order instead","Fragments":["of"]},{"Key":"of doing","Fragments":["down","this","that","two","things","things.","the","explicit","the","it.","things.","a","this.","this.","the","passed","it","it"]},{"Key":"doing down","Fragments":["to"]},{"Key":"down to","Fragments":["zero.","the","see","something","one","(flat_)maps","just","just","it.","taste.","`concat`,","`O(n)`"]},{"Key":"This isn't","Fragments":["in","really"]},{"Key":"isn't in","Fragments":["the"]},{"Key":"the spec,","Fragments":["but"]},{"Key":"spec, but","Fragments":["if"]},{"Key":"but if","Fragments":["you","you","anyone","you're","I","I","it's","not,","you","you're","they","you're","you","you","you","you","you","you","the","you","you"]},{"Key":"you got","Fragments":["a","last","to","a"]},{"Key":"got a","Fragments":["new","clue,","better","syntax","good","completely","logical","little"]},{"Key":"new requirement","Fragments":["for"]},{"Key":"requirement for","Fragments":["handling"]},{"Key":"for handling","Fragments":["other","things","the"]},{"Key":"handling other","Fragments":["beverage"]},{"Key":"other beverage","Fragments":["types,","types?","types."]},{"Key":"beverage types,","Fragments":["you'd"]},{"Key":"types, you'd","Fragments":["have"]},{"Key":"you'd have","Fragments":["to","to","to","to","`not_saying_anything?`,"]},{"Key":"change \"beer\"","Fragments":["in","in"]},{"Key":"\"beer\" in","Fragments":["a","multiple","many"]},{"Key":"of places","Fragments":["in"]},{"Key":"places in","Fragments":["your","the","different","the"]},{"Key":"your code.","Fragments":["Any","Would"]},{"Key":"code. Any","Fragments":["way"]},{"Key":"Any way","Fragments":["to"]},{"Key":" That's","Fragments":["more","it","a","neat","a","a","already","already","a","very","good,","weird,","a","pretty","a","a","all","good.","probably","pretty","interesting","good.","a","a","fine","an","good","how","just","just","not","what","what","completely","how","not","where","much","a","cool","probably","why","an","true,","a","a","actually"]},{"Key":"That's more","Fragments":["concise."]},{"Key":"more concise.","Fragments":["Thanks!","I'm"]},{"Key":"It felt","Fragments":["to","like","more"]},{"Key":"felt to","Fragments":["me"]},{"Key":"implementation was","Fragments":["a","this:","pretty"]},{"Key":"lot cleaner","Fragments":["by","than","than"]},{"Key":"cleaner by","Fragments":["having"]},{"Key":"by having","Fragments":["the","your","`nucleotide_counts`","the"]},{"Key":"message module","Fragments":["actually"]},{"Key":"module actually","Fragments":["be"]},{"Key":"actually be","Fragments":["the","passed","`Regex.scan(~r/\\w+/,"]},{"Key":"the ones","Fragments":["to","I've","in","that"]},{"Key":"ones to","Fragments":["decide","keep"]},{"Key":"to decide","Fragments":["the","if","what"]},{"Key":"decide the","Fragments":["kind"]},{"Key":"of message","Fragments":["is.","and","to","is"]},{"Key":"message is.","Fragments":["What"]},{"Key":"is. What","Fragments":["do"]},{"Key":"a need","Fragments":["for","for"]},{"Key":"need for","Fragments":["the","a","the","#prepare_entry","it?","binaries","the","that","`normalize`","the","this?","a","the","it","the","slice","my","it.","creating","@gregory","the"]},{"Key":"the Message","Fragments":["module?"]},{"Key":"Message module?","Fragments":["What"]},{"Key":"module? What","Fragments":["benefit"]},{"Key":"from having","Fragments":["the","to","to","to","to"]},{"Key":"about doctests!","Fragments":["Thanks!"]},{"Key":" My","Fragments":["question","solution","biggest","only","first","only","personal","only","last","suggestion","first","first","only","super","only","guess","mind","first","opinion","personal","apologies.","problem","first","initial","understanding","two","first","only","first"]},{"Key":"My question","Fragments":["regarding"]},{"Key":"question regarding","Fragments":["doctests,"]},{"Key":"regarding doctests,","Fragments":["is"]},{"Key":"doctests, is","Fragments":["why"]},{"Key":"is why","Fragments":["would","I","I","there's","I'm","`Enum`","standard","elixir","rolling"]},{"Key":"why would","Fragments":["I"]},{"Key":"would I","Fragments":["use","go","do","would","apply"]},{"Key":"I use","Fragments":["them","that","a","in","the","macros","them","a","the","`HashDict.equal?`","this"]},{"Key":"them in","Fragments":["this","my","Erlang.","a","next","further","as","the","the","term","terms"]},{"Key":"this case?","Fragments":["Am"]},{"Key":"case? Am","Fragments":["I"]},{"Key":"Am I","Fragments":["missing","excused","still"]},{"Key":"I missing","Fragments":["something?","something?","here?"]},{"Key":" ooh","Fragments":["shiny!"]},{"Key":" Submitted","Fragments":["new","in","in","in","this"]},{"Key":"Submitted new","Fragments":["revision"]},{"Key":"new revision","Fragments":["based"]},{"Key":"revision based","Fragments":["on"]},{"Key":"on feedback.","Fragments":["Thanks"]},{"Key":"feedback. Thanks","Fragments":["again."]},{"Key":" Great.","Fragments":["If"]},{"Key":"Great. If","Fragments":["you"]},{"Key":"you want","Fragments":["to","to","to","you","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","I'll","unicode","instead","to","instead","to","(sequences","to","to","to","to","to.","nice","the","to","to","upcase"]},{"Key":"to you","Fragments":["could","more.","though,","whether","as"]},{"Key":"doctests in","Fragments":["the"]},{"Key":"the @sarina","Fragments":["attribute,"]},{"Key":"@sarina attribute,","Fragments":["i.e."]},{"Key":" @sarina","Fragments":["\"\"\"\""]},{"Key":" ##","Fragments":["Examples","Examples","Restrictions"]},{"Key":" Responds","Fragments":["to"]},{"Key":"Responds to","Fragments":["a"]},{"Key":"question with","Fragments":["\"Sure.\"."]},{"Key":" iex\u003e","Fragments":["Teenager.hey","Regex.scan(%r/\\d/,","DNA.nucleotide_counts('GATTACA')","Phone.number(\"+1","Enum.concat([[1,"]},{"Key":"iex\u003e Teenager.hey","Fragments":["\"Am"]},{"Key":"Teenager.hey \"Am","Fragments":["I"]},{"Key":"\"Am I","Fragments":["the"]},{"Key":"I the","Fragments":["man?\""]},{"Key":" But","Fragments":["other","if","I",",","when","why","this","yes,","using","this","what","are","is","is","I","in","then","these","I","is","it's","it's","memoization","basically","in","can","I","it","one","so","now"]},{"Key":"But other","Fragments":["then"]},{"Key":"other then","Fragments":["that,"]},{"Key":"then that,","Fragments":["it"]},{"Key":"that, it","Fragments":["is","got","is","might","just"]},{"Key":"is perfect","Fragments":["IMO."]},{"Key":" Appreciated!","Fragments":["This"]},{"Key":"Appreciated! This","Fragments":["is"]},{"Key":"is my","Fragments":["first","first","initial","first","first","friend","very","first","hammer","biggest","attempt","first","biggest","first","first","first"]},{"Key":"first day","Fragments":["learning","of"]},{"Key":"day learning","Fragments":["Elixir,"]},{"Key":"learning Elixir,","Fragments":["so","so","so"]},{"Key":"Elixir, so","Fragments":["I'm","I'm","thanks","I'm","I","I","I"]},{"Key":"so I'm","Fragments":["probably","still","unfamiliar","sure","open","not","coming","not","comfortable","not","not","going","probably","going","not","not","sure"]},{"Key":"I'm probably","Fragments":["writing","not","missing"]},{"Key":"probably writing","Fragments":["elixir"]},{"Key":"writing elixir","Fragments":["that"]},{"Key":"elixir that","Fragments":["looks"]},{"Key":"idiomatic or","Fragments":["clear"]},{"Key":"or clear","Fragments":["to"]},{"Key":"to instead","Fragments":["define"]},{"Key":"instead define","Fragments":["the"]},{"Key":"define the","Fragments":["interrogative","split","type","`Statement`","characters","analyzers","`days_in_gigasecond`","private","process"]},{"Key":"the interrogative","Fragments":["functions"]},{"Key":"interrogative functions","Fragments":["as"]},{"Key":"functions as","Fragments":["private","private?","private","private","guard","well."]},{"Key":"as private","Fragments":["functions","be","a","functions","functions","functions","using"]},{"Key":"functions within","Fragments":["Teenager"]},{"Key":"within Teenager","Fragments":["(rather"]},{"Key":"Teenager (rather","Fragments":["than"]},{"Key":"(rather than","Fragments":["a"]},{"Key":" Definitely","Fragments":["the","a","feel","not"]},{"Key":"Definitely the","Fragments":["once"]},{"Key":"the once","Fragments":["-"]},{"Key":"once -","Fragments":["I'll"]},{"Key":"- I'll","Fragments":["look"]},{"Key":"I'll look","Fragments":["at","into","at","it","for"]},{"Key":"the twice","Fragments":["to"]},{"Key":"twice to","Fragments":["see","the"]},{"Key":"if it","Fragments":["is","receives","were","adds","were","was","is","is","were","is","gains","exists,","doesn't.","would","lets","becomes","is","does","can","has","was","were","was","was","contains","improved","was","wasn't","doesn't","works.","contains","has","makes","ends","is"]},{"Key":"more or","Fragments":["less","less","less"]},{"Key":"or less","Fragments":["readable","readable","verbose","based"]},{"Key":"less readable","Fragments":["with","to","code.","to","than","because","than","to"]},{"Key":"readable with","Fragments":["a","variables","so"]},{"Key":"a #capitalize","Fragments":["thrown"]},{"Key":"#capitalize thrown","Fragments":["in."]},{"Key":"Nice! One","Fragments":["more"]},{"Key":"One more","Fragments":["thing","hint:","consideration,"]},{"Key":"more thing","Fragments":["I"]},{"Key":"I want","Fragments":["to","to","to","here,","to","to","to","to","to","to","to","to","there"]},{"Key":"to point","Fragments":["out","out","this","out","out","out.","out:","out","that","it"]},{"Key":"point out","Fragments":["is","that","two","that","two","problems,"]},{"Key":"out is","Fragments":["that","in","in","[`String.ends_with?`](http://elixir-lang.org/docs/stable/elixir/String.html#ends_with?/2),"]},{"Key":"have noticed","Fragments":["the"]},{"Key":"noticed the","Fragments":["warnings","issue?","same"]},{"Key":"the warnings","Fragments":["from"]},{"Key":"warnings from","Fragments":["the"]},{"Key":"the compiler","Fragments":["about","stop","may","that","(`|\u003e`","is","can","and","doesn't","and","was","treats"]},{"Key":"compiler about","Fragments":["the"]},{"Key":"the `str`","Fragments":["variable"]},{"Key":"`str` variable","Fragments":["in"]},{"Key":"variable in","Fragments":["the","the","the","line","line"]},{"Key":"the `silence`","Fragments":["function,","clause","cond","function"]},{"Key":"`silence` function,","Fragments":["convention"]},{"Key":"function, convention","Fragments":["is"]},{"Key":"convention is","Fragments":["that","in","to","used","to","used.","used","lowercase","to","lower","pretty","for"]},{"Key":"that when","Fragments":["you","you","you're","I","I'm","you"]},{"Key":"when you","Fragments":["have","wrote","could","want","can","don't","edit","don't","can't","forget","added","nest","should","have","declare","think","want","want","were","get","have","repeatedly","add","convert","already","use","write","write","run","run","would","see","click","have","run","don't","create","run","run","have","chain","use","use","used","run","run","try","know"]},{"Key":"you have","Fragments":["a","to","two","is","to","in","to","settled","is","a","an","two","defined","a","in","a","there.","me","to","separated","thoughts","thoughts","plenty","on","a","other","done","to","is","two","a","filter","a","in","a","to","in","to","to","any","a","in","a","a","to","multiple","now,","there","ideas","any","any","to","objects.","type","a","it,","are","to","the","a","any","less","a","used","an","a","an","to","any","a","a","to","expressed","to","there)","multiple","to","here","is","a","any","booleans,","a"]},{"Key":"a variable","Fragments":["that","correctly","name.","before","before","(you","name","name","name"]},{"Key":"variable that","Fragments":["you're","you"]},{"Key":"you're not","Fragments":["going","capturing","doing","going","using","calculating","an"]},{"Key":"not going","Fragments":["to","to","to","to"]},{"Key":"to use,","Fragments":["you"]},{"Key":"use, you","Fragments":["give"]},{"Key":"you give","Fragments":["it","it","an","an","me","`unequal_pairs?`","some","some","me"]},{"Key":"name `_`,","Fragments":["or"]},{"Key":"`_`, or","Fragments":["simply"]},{"Key":"or simply","Fragments":["prefix","sorting"]},{"Key":"simply prefix","Fragments":["it"]},{"Key":"prefix it","Fragments":["with"]},{"Key":"a `_`","Fragments":["to"]},{"Key":"`_` to","Fragments":["make","a","be"]},{"Key":"it clear","Fragments":["that","that","that"]},{"Key":"clear that","Fragments":["its","the","if","the","all"]},{"Key":"that its","Fragments":["value"]},{"Key":"its value","Fragments":["is"]},{"Key":"value is","Fragments":["unimportant.","that","a","completely","created),","expensive","0","0","1","0","0","1","0","0","1","0","0","1","0","0","1","0","0","1","0","0","1"]},{"Key":"is unimportant.","Fragments":["This"]},{"Key":"unimportant. This","Fragments":["will"]},{"Key":"This will","Fragments":["make","still","unfortunately","be","match"]},{"Key":"will make","Fragments":["the","things","that","those"]},{"Key":"compiler stop","Fragments":["giving"]},{"Key":"stop giving","Fragments":["you"]},{"Key":"giving you","Fragments":["warnings","a"]},{"Key":"you warnings","Fragments":["as"]},{"Key":"warnings as","Fragments":["well."]},{"Key":" do","Fragments":["you"]},{"Key":"you mean","Fragments":["the","something","by","something","by","using","by","in","for","using","about","by","like","to","`\\w+`","like:","just","by","the","just"]},{"Key":"the sentence_to_check","Fragments":["variable?"]},{"Key":"understand your","Fragments":["point","point","drive","suggestions..."]},{"Key":"your point","Fragments":["about","but","on","and"]},{"Key":"point about","Fragments":["the","the","the","`def`.","`to_list`"]},{"Key":"the is_anything_else?","Fragments":["or"]},{"Key":"is_anything_else? or","Fragments":["true."]},{"Key":"or true.","Fragments":["I"]},{"Key":"thought that","Fragments":["using","_that_","cond","it","my","was","\"GO"]},{"Key":"using that","Fragments":["dummy","to","now.","fancy","list","somewhere?"]},{"Key":"that dummy","Fragments":["question"]},{"Key":"dummy question","Fragments":["was"]},{"Key":"question was","Fragments":["a"]},{"Key":"little more","Fragments":["intention-revealing.","natural","clear?","DRY.","context","modular?","expressively?","clearly?","clear.","obvious","accurately","(and","efficient.","clearly?","readable","compactness"]},{"Key":"that in","Fragments":["this","mind,","Elixir,","the","a","mind!","the","mind","repl,","Elixir.","mind.","languages","terms","unicode.","Ruby,","Ruby","one","elixir","`clean/1`!","the","mind,","mind.","cases","the","an","place,","place,","the"]},{"Key":"case it","Fragments":["adds","would","would","matches","didn't,"]},{"Key":"it adds","Fragments":["unnecesary","real","to","some"]},{"Key":"adds unnecesary","Fragments":["code."]},{"Key":" Basically","Fragments":["pattern","to"]},{"Key":"Basically pattern","Fragments":["matching"]},{"Key":"matching lets","Fragments":["you"]},{"Key":"lets you","Fragments":["specify","search","group","filter"]},{"Key":"you specify","Fragments":["different"]},{"Key":"specify different","Fragments":["versions"]},{"Key":"different versions","Fragments":["of","of"]},{"Key":"versions of","Fragments":["a","Elixir","your","a","it:","Elixir:","```hey```","original","functions.","\"foo\".","this","Exercism,"]},{"Key":"function for","Fragments":["different","the","that","checking","the","the","line","\"split_words\"","character","each","strings.","use","the","the","each","silence),","the","a","working","the"]},{"Key":"for different","Fragments":["patterns","types"]},{"Key":"different patterns","Fragments":["of"]},{"Key":"patterns of","Fragments":["arguments,"]},{"Key":"of arguments,","Fragments":["for"]},{"Key":"arguments, for","Fragments":["example,","example"]},{"Key":"for example,","Fragments":["if","by"]},{"Key":"example, if","Fragments":["you","I","I","the"]},{"Key":"you wanted","Fragments":["to","to","to","to.","me","to","to","to,","to","instead","to,","to,"]},{"Key":"write a","Fragments":["factorial","clear","series","supervisor","complicated"]},{"Key":"a factorial","Fragments":["function,"]},{"Key":"factorial function,","Fragments":["you"]},{"Key":"function, you","Fragments":["could","could","could","could","don't","can","could","could","might","can"]},{"Key":"do it","Fragments":["like","here","once","in","all","since","anyway,","this","last","that","that","with","like:","the","with","with","for","expresses","with","without","through","without","in","in","but","using","for","but","and","like","for","since","with","in"]},{"Key":"it like","Fragments":["this:","a","this","bynary","this:","this,"]},{"Key":" def","Fragments":["fact(0),","fact(n),","empty?(nil),","empty?(message),","shouting?(message),","question?(message),","empty?(nil),","plus_one(number),","controlling_shares(stock),","empty?(message),","even?(number),","send_message(chan,","hey(something","hey(something)","match(word,","hey(nil),","hey(\"\"),","match(_word,","match(word,","number_of_bottles(0),","number_of_bottles(1),","number_of_bottles(n),","map(list,","do_map(list,","count('',","count(sequence,","nucleotide_counts(sequence)","match(word,","test(value","verse(0),","verse(1),","verse(bottles)","sing(from_bottles,","sorted_cp_list","match","count(words)","foo(x)","foo(1),","asking?(greeting)","ignoring?(greeting)","verse(0),","verse(1),","verse(num),","sing(start_verse,","inc(num)","sing(start_verse,","match(word,","match(word,","count(phrase)","count","nucleotide_counts(dna)","creates_new_under_the_hood(mod)","sum(a,b),","unquote(binary_to_atom(dp","unquote(binary_to_atom(\"#{nth}_#{dp}day\"))(month,","unquote(binary_to_atom(\"last_#{dp}day\"))(month,","unquote(binary_to_atom(dp","unquote(binary_to_atom(\"#{nth}_#{dp}day\"))(month,","unquote(binary_to_atom(\"last_#{dp}day\"))(month,","count(s)","area_code(digits),","sum","sum","age_on(:mercury,","sort(db)","score(word)","score(word)","transform(input)","sing(start,","to_list(coll),","hamming_distance(from,to)","good(e),","bad(e),","inspect(s,","accumulate(collection,","discard(collection,","concat(ll),","count(l)","count(l),","reverse(l),","count([","filter([head","reverse([],","reverse([head|tail],","count(l)","count(l),","foo(a,","count(l),","count(l)","count(l),","count([]),","count([_|t]),","count(l)","count(l),","hey(input)","count(l)","count(l),","reduce([],","reduce([h|t],","reduce(l,","reduce([],","reduce([h|t],","reverse([],","kind(a,","kind(a,","count([],","count([_|tail],","concat([]),","concat([first|rest])","ends_in_question_mark?(speech)","silence?(input)","count(l)","count(l),","count(l)","count(l),","hey(input)","yelling?(input)","question?(input)","silent?(input)","filter(l,","count(sentence)","count(sentence)"]},{"Key":"def fact(0),","Fragments":["do:"]},{"Key":"fact(0), do:","Fragments":["1"]},{"Key":"def fact(n),","Fragments":["do:"]},{"Key":"fact(n), do:","Fragments":["n"]},{"Key":"do: n","Fragments":["*"]},{"Key":"n *","Fragments":["fact(n"]},{"Key":"* fact(n","Fragments":["-"]},{"Key":"fact(n -","Fragments":["1)"]},{"Key":" So","Fragments":["the","that","feel","much","following","basically","for","I","for","for","this","\"ö\"","much","I"]},{"Key":"So the","Fragments":["first","\"|\u0026gt;\"","first","time","first","time"]},{"Key":"first definition","Fragments":["will"]},{"Key":"definition will","Fragments":["be"]},{"Key":"will be","Fragments":["used","never","honest,","flagged","required","even","a","hunting","evaluated","quite","broken","eaten","much","a","traversed","to","fast","an","my","gone","thrown","as","able","able","called","easy","appreciated!","a","slower","computed","an","present","faster","false","true,"]},{"Key":"be used","Fragments":["whenever","down","in","in","on","with","before","to","of","to","in","in","like","in","in","directly.","in","to","in","with","by","directly","in","instead","as","as"]},{"Key":"used whenever","Fragments":["the"]},{"Key":"whenever the","Fragments":["argument","two"]},{"Key":"to `fact`","Fragments":["is"]},{"Key":"`fact` is","Fragments":["0."]},{"Key":"is 0.","Fragments":["If"]},{"Key":"0. If","Fragments":["that"]},{"Key":"If that","Fragments":["was","doesn't"]},{"Key":"that was","Fragments":["unclear,","what","possible!","a","written","the","more","suggested","what","pretty","definitely","just","extensive:)","there","the","all","in","just","added.","translated","a","fast!"]},{"Key":"was unclear,","Fragments":["it's"]},{"Key":"unclear, it's","Fragments":["discussed"]},{"Key":"it's discussed","Fragments":["around"]},{"Key":"discussed around","Fragments":["the"]},{"Key":"around the","Fragments":["8-minute","parameters.","Elixir","code","functional","`{a,","fact","function","capture","last"]},{"Key":"the 8-minute","Fragments":["mark"]},{"Key":"8-minute mark","Fragments":["in"]},{"Key":"mark in","Fragments":["http://www.youtube.com/watch?v=a-off4Vznjs."]},{"Key":"don't understand","Fragments":["how","something","how","difference","the","about"]},{"Key":"understand how","Fragments":["to","the","to","it","you"]},{"Key":"in silence","Fragments":["method."]},{"Key":"silence method.","Fragments":["I"]},{"Key":"method. I","Fragments":["don't","don't","would","wanted","did","just","do"]},{"Key":"names of","Fragments":["the","functions","the","the","the","these","the","your","the","these"]},{"Key":"the private","Fragments":["methods.","method","methods","functions","functions:","functions.","methods","helper","implementation","methods,","functions","methods","functions","implementation","helpers.","functions","methods.","method","methods","method"]},{"Key":"methods. You","Fragments":["might"]},{"Key":"might find","Fragments":["`String.ends_with?`","a","it","that","`Enum.count`"]},{"Key":"find `String.ends_with?`","Fragments":["to"]},{"Key":"`String.ends_with?` to","Fragments":["be","simplify"]},{"Key":"more intent","Fragments":["revealing","revealing."]},{"Key":"intent revealing","Fragments":["than"]},{"Key":"revealing than","Fragments":["`String.last"]},{"Key":"than `String.last","Fragments":["=="]},{"Key":"`String.last ==","Fragments":["...`."]},{"Key":"== ...`.","Fragments":["Also,"]},{"Key":"...`. Also,","Fragments":["I"]},{"Key":"Also, I","Fragments":["feel","could","couldn't","believe","think","think","think","might","was","could","hadn't","assume","wanted","couldn't","don't","do"]},{"Key":"I feel","Fragments":["that","about","like","like","the","that,","like","like","like","like","like","better","like","like","about","like","like","this","is","dumb","like","like","this","like","about","like","certain","like","like","there's"]},{"Key":"feel that","Fragments":["the","this","it's"]},{"Key":"the `silence?`","Fragments":["question","function:","function?","function.","function?","function."]},{"Key":"`silence?` question","Fragments":["is"]},{"Key":"question is","Fragments":["a","moot"]},{"Key":"good candidate","Fragments":["for","for"]},{"Key":"candidate for","Fragments":["pattern","the"]},{"Key":"for pattern","Fragments":["matching.","match","matching.","matching"]},{"Key":"matching. Overall","Fragments":["I"]},{"Key":"Overall I","Fragments":["really"]},{"Key":"Great job","Fragments":["on","for","making"]},{"Key":"job on","Fragments":["the"]},{"Key":"separate module?","Fragments":["Does","Do"]},{"Key":"module? Does","Fragments":["it"]},{"Key":"clear? If","Fragments":["so,"]},{"Key":"If so,","Fragments":["what","yeah,","can","then","could","I"]},{"Key":"so, what","Fragments":["does"]},{"Key":"what does","Fragments":["\u003ccode\u003eSpeech\u003c/code\u003e","the","it"]},{"Key":"does \u003ccode\u003eSpeech\u003c/code\u003e","Fragments":["say"]},{"Key":"\u003ccode\u003eSpeech\u003c/code\u003e say","Fragments":["as"]},{"Key":"say as","Fragments":["a"]},{"Key":"a module","Fragments":["name?","with","and","then","instead?","and","method","called","that","name","name","doc","is","using","with","attribute","as"]},{"Key":"the abstractions","Fragments":["be","are"]},{"Key":"abstractions be","Fragments":["more"]},{"Key":"more internally","Fragments":["consistent?"]},{"Key":"internally consistent?","Fragments":["One"]},{"Key":"consistent? One","Fragments":["says"]},{"Key":"One says","Fragments":["\u003ccode\u003eyelling?\u003c/code\u003e"]},{"Key":"says \u003ccode\u003eyelling?\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eyelling?\u003c/code\u003e and","Fragments":["one"]},{"Key":"and one","Fragments":["says","more,","on","in","for","expecting","for","for","other","for","only","for"]},{"Key":"one says","Fragments":["\u003ccode\u003equestion?\u003c/code\u003e"]},{"Key":"says \u003ccode\u003equestion?\u003c/code\u003e","Fragments":["--"]},{"Key":"\u003ccode\u003equestion?\u003c/code\u003e --","Fragments":["is"]},{"Key":"-- is","Fragments":["there"]},{"Key":"make those","Fragments":["two","private.","changes","cases"]},{"Key":"those two","Fragments":["names","cases.","notes","so","into","things","conditions"]},{"Key":"two names","Fragments":["more"]},{"Key":"names more","Fragments":["\"alike\""]},{"Key":"more \"alike\"","Fragments":["while"]},{"Key":"\"alike\" while","Fragments":["being"]},{"Key":"while being","Fragments":["descriptive?"]},{"Key":"your variable","Fragments":["be"]},{"Key":"variable be","Fragments":["more"]},{"Key":"In Elixir,","Fragments":["when","at","it's","I","Erlang"]},{"Key":"Elixir, when","Fragments":["using"]},{"Key":"when using","Fragments":["cond,","a","other","it","Erlang's","it","numeric","pipes.","multiline","|\u003e","Enum.sort,"]},{"Key":"using cond,","Fragments":["\u003ccode\u003etrue"]},{"Key":"cond, \u003ccode\u003etrue","Fragments":["-\u003e\u003c/code\u003e"]},{"Key":"\u003ccode\u003etrue -\u003e\u003c/code\u003e","Fragments":["is"]},{"Key":"-\u003e\u003c/code\u003e is","Fragments":["basically"]},{"Key":"is basically","Fragments":["read","the"]},{"Key":"basically read","Fragments":["as"]},{"Key":"read as","Fragments":["an","it"]},{"Key":"as an","Fragments":["\u003ccode\u003eelse\u003c/code\u003e","argument","empty","echo","alternative","argument,","argument","attribute,","attribute","opportunity","`if`.","Enum.reduce.","interface","example"]},{"Key":"an \u003ccode\u003eelse\u003c/code\u003e","Fragments":["-"]},{"Key":"\u003ccode\u003eelse\u003c/code\u003e -","Fragments":["is"]},{"Key":"for \u003ccode\u003eis_anything_else?(_)\u003c/code\u003e.","Fragments":["I"]},{"Key":"\u003ccode\u003eis_anything_else?(_)\u003c/code\u003e. I","Fragments":["can"]},{"Key":"see an","Fragments":["argument","idiomatic"]},{"Key":"an argument","Fragments":["for","explicitly.","using","to","that","of","could","consequentially,"]},{"Key":"argument for","Fragments":["either","handling","the"]},{"Key":"for either","Fragments":["side."]},{"Key":"for going","Fragments":["the"]},{"Key":"going the","Fragments":["extra","right"]},{"Key":"extra mile","Fragments":["with"]},{"Key":"mile with","Fragments":["this"]},{"Key":"with this","Fragments":["explanation,","solution.","is","code","code","cond","and","symbol.","because","one.","to","one,","one.","solution","one...","I","solution.","exercise,","one","one","exercise","stuff.","exercise:","helpful","exercise.","specific","agent-based"]},{"Key":"this explanation,","Fragments":["I"]},{"Key":"explanation, I","Fragments":["will"]},{"Key":"will adjust","Fragments":["everything!"]},{"Key":" Cool,","Fragments":["I","thanks","thanks.","no?","I","makes","sorry,","no","thanks","thanks","now"]},{"Key":"Cool, I","Fragments":["like","was"]},{"Key":"in function","Fragments":["params!","names","hey.","\u003ccode\u003esing/2\u003c/code\u003e",".","calls","heads","clauses","calls","head,","headers,"]},{"Key":"function params!","Fragments":["(`first_sentence(0)`"]},{"Key":"params! (`first_sentence(0)`","Fragments":["vs"]},{"Key":"(`first_sentence(0)` vs","Fragments":["`first_sentence(n)`)"]},{"Key":"This wasn't","Fragments":["specified"]},{"Key":"wasn't specified","Fragments":["in"]},{"Key":"the requirements,","Fragments":["but"]},{"Key":"requirements, but","Fragments":["what"]},{"Key":"but what","Fragments":["would","people","promoted","would","do","you"]},{"Key":"what would","Fragments":["happen","be","you","you","happen","happen","you"]},{"Key":"would happen","Fragments":["if","if","with","with"]},{"Key":"happen if","Fragments":["you","somebody"]},{"Key":"to support","Fragments":["other","other","other","multi-codepoint","multiple","european","\"head\"","it?","when","that.","millions"]},{"Key":"support other","Fragments":["beverage","beverage","types"]},{"Key":"could collapse","Fragments":["the"]},{"Key":"collapse the","Fragments":["middle","private"]},{"Key":"the middle","Fragments":["two"]},{"Key":"middle two","Fragments":["sections"]},{"Key":"two sections","Fragments":["of"]},{"Key":"sections of","Fragments":["the","phone"]},{"Key":"the `sing`","Fragments":["pipeline"]},{"Key":"`sing` pipeline","Fragments":["into"]},{"Key":"pipeline into","Fragments":["one","the"]},{"Key":"into one","Fragments":["without","of","like","by","case?"]},{"Key":"one without","Fragments":["sacrificing"]},{"Key":"sacrificing much","Fragments":["readability."]},{"Key":"much readability.","Fragments":["Also,"]},{"Key":"Also, have","Fragments":["you"]},{"Key":"out `Enum.map_join`?","Fragments":["Seems"]},{"Key":"`Enum.map_join`? Seems","Fragments":["like"]},{"Key":"Seems like","Fragments":["it","use","a","they","reversing","a"]},{"Key":"be useful","Fragments":["here.","to","in","here:","here.","here.","here.","on","here?","in","here?","to"]},{"Key":"really can't","Fragments":["find","find","find"]},{"Key":"can't find","Fragments":["much","anything","any","it","anything"]},{"Key":"find much","Fragments":["to"]},{"Key":"much to","Fragments":["nitpick","do"]},{"Key":"nitpick with","Fragments":["this"]},{"Key":" A","Fragments":["pipeline","little","couple","small","couple","range","good","minor","more","minor","different","style","range","few","few","`Dict.get`","good","minor","cond","while","cond","couple","`Dict.put(...,","few","little","bit","small","few","few","pretty","Bitwise-based","few","couple","second","variable","little","bit","few","function","good","fairly","little","very","big","new","definition","few","general","lot"]},{"Key":"A pipeline","Fragments":["might"]},{"Key":"pipeline might","Fragments":["be","definitely"]},{"Key":"clearer for","Fragments":["`sorted_letters`,"]},{"Key":"for `sorted_letters`,","Fragments":["but"]},{"Key":"`sorted_letters`, but","Fragments":["that"]},{"Key":"that might","Fragments":["just","appeal","benefit","fit","be","still","be","be","be.","be","be","not","be","enable","be","not","help","identify"]},{"Key":"might just","Fragments":["be","be","be"]},{"Key":"just be","Fragments":["a","because","a","incorporated","me.","me","me","used","aware","the","my"]},{"Key":"of taste.","Fragments":["(`word"]},{"Key":"taste. (`word","Fragments":["|\u003e"]},{"Key":"(`word |\u003e","Fragments":["String.codepoints"]},{"Key":"|\u003e String.codepoints","Fragments":["|\u003e"]},{"Key":"String.codepoints |\u003e","Fragments":["Enum.sort`)"]},{"Key":" Using","Fragments":["the","multiple","string","a","`Dict.update`","`if`","`count`","the","`end","a","guards.","`Inspect.Algebra`","`reduce`","tail","tail","`Stream.with_index`","tail","tail","tail","`Enum.chunk`","`Stream`","pipes","a","my","cond","tail","tail","`reduce`","two"]},{"Key":"Using the","Fragments":["shorthand","same","one-line"]},{"Key":"the shorthand","Fragments":["way","notation","fn","`\u0026amp;`.","notation","syntax","@scarlett[max_value]","capture","often"]},{"Key":"shorthand way","Fragments":["of"]},{"Key":"way of","Fragments":["writing","communication","the","fixing","specifying","thinking","thinking","thinking","getting","doing","writing","grouping","always","counting","thinking","writing","thinking.","putting","stripping","doing","thinking","doing","`reduce(ll,","`reduce(ll,","doing","doing","avoiding","doing","handling","laying","writing","doing"]},{"Key":"of writing","Fragments":["the","`List.foldl`.","that","reduce","the","my"]},{"Key":"writing the","Fragments":["filter","code,","tests","`reduce_with_index/3`","counter"]},{"Key":"function might","Fragments":["be"]},{"Key":"little cleaner","Fragments":["in"]},{"Key":"cleaner in","Fragments":["this"]},{"Key":" `Enum.filter","Fragments":["words,"]},{"Key":"`Enum.filter words,","Fragments":["normalized_word"]},{"Key":"words, normalized_word","Fragments":["=="]},{"Key":"normalized_word ==","Fragments":["normalize_word(\u00261)`"]},{"Key":"use some","Fragments":["shortcuts","String","improvements","of","`String`"]},{"Key":"some shortcuts","Fragments":["IMO:"]},{"Key":"shortcuts IMO:","Fragments":["`Regex.scan"]},{"Key":"IMO: `Regex.scan","Fragments":["%r/\\w+/,input`"]},{"Key":"`Regex.scan %r/\\w+/,input`","Fragments":["gets"]},{"Key":"%r/\\w+/,input` gets","Fragments":["all"]},{"Key":"gets all","Fragments":["valid"]},{"Key":"all valid","Fragments":["words"]},{"Key":"valid words","Fragments":["from","without"]},{"Key":"words from","Fragments":["a","human-written","the","the"]},{"Key":"from a","Fragments":["string,","magazine","recursive","previous","different","code","previous","module","previous","single","range","technique","string."]},{"Key":"string, and","Fragments":["`HashDict.update(dict,","use","have"]},{"Key":"and `HashDict.update(dict,","Fragments":["word,"]},{"Key":"`HashDict.update(dict, word,","Fragments":["1,","1,"]},{"Key":"word, 1,","Fragments":["\u00261+1)`","\u0026amp;1","\u00261","\u0026amp;1","fn(c)","\u00261","\u0026amp;1","\u0026Words.inc/1)","\u0026(\u00261+1))","\u0026(\u00261","fn(num)","\u0026(\u00261"]},{"Key":"1, \u00261+1)`","Fragments":["should"]},{"Key":"\u00261+1)` should","Fragments":["help"]},{"Key":"should help","Fragments":["you","you","you"]},{"Key":"The main","Fragments":["problem","thing","focus","things","advantage","reason"]},{"Key":"main problem","Fragments":["with","is"]},{"Key":"that `frequency(word)`","Fragments":["runs"]},{"Key":"`frequency(word)` runs","Fragments":["more"]},{"Key":"runs more","Fragments":["than"]},{"Key":"than it","Fragments":["needs","would","needs","needs","has","has"]},{"Key":"it needs","Fragments":["to.","to","to","to"]},{"Key":"Looks great!","Fragments":["You"]},{"Key":"great! You","Fragments":["could"]},{"Key":"add help","Fragments":["to"]},{"Key":"help to","Fragments":["the","work","make","make","make","think"]},{"Key":"the `hey`","Fragments":["function","function.","function.","function.","method","method","method?","function","method."]},{"Key":"`hey` function","Fragments":["with","rather","it","reads"]},{"Key":"function with","Fragments":["the","a","a","two","the","some","a","explicit","a","a","argument","a","its","the","no","parameters","`defp`","a"]},{"Key":"the `@johnathan`","Fragments":["attribute"]},{"Key":"`@johnathan` attribute","Fragments":["using"]},{"Key":"attribute using","Fragments":["the"]},{"Key":"the `Readme.md`","Fragments":["file."]},{"Key":" IMO","Fragments":["you"]},{"Key":"IMO you","Fragments":["could"]},{"Key":"matches more","Fragments":["explicit"]},{"Key":"more explicit","Fragments":["by","the","if","(but"]},{"Key":"explicit by","Fragments":["moving"]},{"Key":"by moving","Fragments":["the","it","the","the","them"]},{"Key":"moving the","Fragments":["matches","code","analysis","code","downcase","responses","check","checks","private","tests","test"]},{"Key":"into separate","Fragments":["private","functions?","properly","functions","ones.","functions.","functions.","functions?","functions,","methods:","words"]},{"Key":"separate private","Fragments":["functions,","function","function?"]},{"Key":"private functions,","Fragments":["and"]},{"Key":"functions, and","Fragments":["add","the"]},{"Key":"a `@favian`","Fragments":["attribute."]},{"Key":" Just","Fragments":["`?`","submitted","so","a","a","one","started","an","two","started","asking.","noticed","noticed","treat","one","a","because","curious,","a","remember","out","learning","finished","encode","a","kind","a","looked","a","a","noticed","starting","updated","a","playing","a","to","another","one","found"]},{"Key":"Just `?`","Fragments":["suffixes"]},{"Key":"`?` suffixes","Fragments":["are"]},{"Key":"suffixes are","Fragments":["traditional"]},{"Key":"are traditional","Fragments":["on"]},{"Key":"traditional on","Fragments":["predicate"]},{"Key":"on predicate","Fragments":["methods"]},{"Key":"predicate methods","Fragments":["in","maybe","to","are","as","(methods","for","for"]},{"Key":"methods in","Fragments":["Ruby,","the","a","a"]},{"Key":"in Ruby,","Fragments":["which","but"]},{"Key":"Ruby, which","Fragments":["is"]},{"Key":"is part","Fragments":["of","of","of","of"]},{"Key":"of where","Fragments":["this","I'd","and","it"]},{"Key":"where this","Fragments":["piece","sorting","one"]},{"Key":"this piece","Fragments":["of"]},{"Key":"piece of","Fragments":["Elixir","documentation.","code).","information","code"]},{"Key":"of Elixir","Fragments":["syntax","examples,","and","code","0.10.1.","always","and","or","is","is","(0.10.2,","a","idioms,","code","are","I'm"]},{"Key":"Elixir syntax","Fragments":["comes","makes","something"]},{"Key":"syntax comes","Fragments":["from."]},{"Key":"Thanks, comes","Fragments":["from"]},{"Key":"comes from","Fragments":["doing","significant","Erlang.","the"]},{"Key":"from doing","Fragments":["the","the","this:"]},{"Key":"doing the","Fragments":["same","same","downcase","reviewing/nitpicking","`zip`,","recursion","pattern","Haskell","same","right","Haskell","split","offset","appends","list_ops","extra","work.","same","downcase"]},{"Key":"same exercise","Fragments":["in"]},{"Key":"exercise in","Fragments":["3","so","ruby,","general","Ruby.","ruby","terms","about","OCaml","OCaml","Ruby.","OCaml","OCaml","OCaml","other","OCaml","OCaml"]},{"Key":"in 3","Fragments":["languages","places"]},{"Key":"3 languages","Fragments":["=)"]},{"Key":"I went","Fragments":["with","with","with","with","for","ahead","down","ahead","with","with","too","the","with","back","with","ahead","for","a","with","about","this","a","with","ahead","ahead","through","with"]},{"Key":"went with","Fragments":["`something","`Regex.scan`,","adding","`true`","this","the","it","sort.","a","the","an","the","downcasing","String.strip(input)"]},{"Key":"with `something","Fragments":["="]},{"Key":"`something =","Fragments":["something","something"]},{"Key":"= something","Fragments":["||","||","||","||"]},{"Key":"something ||","Fragments":["\"\"`","\"\"```","\"\"`.","\"\""]},{"Key":"|| \"\"`","Fragments":["for"]},{"Key":"\"\"` for","Fragments":["now"]},{"Key":"for now","Fragments":["=)","Elixir"]},{"Key":"now =)","Fragments":["Thanks"]},{"Key":"=) Thanks","Fragments":["for"]},{"Key":"You've got","Fragments":["very","some"]},{"Key":"got very","Fragments":["descriptive"]},{"Key":"very descriptive","Fragments":["names,"]},{"Key":"descriptive names,","Fragments":["spot"]},{"Key":"names, spot","Fragments":["on!"]},{"Key":"Good work!","Fragments":["I"]},{"Key":"work! I","Fragments":["don't"]},{"Key":"think ```something","Fragments":["="]},{"Key":"```something =","Fragments":["something"]},{"Key":"|| \"\"```","Fragments":["is"]},{"Key":"\"\"``` is","Fragments":["useful"]},{"Key":"is useful","Fragments":["though.","unless"]},{"Key":" Haha","Fragments":["feels"]},{"Key":"Haha feels","Fragments":["good"]},{"Key":"feels good","Fragments":["indeed!"]},{"Key":"you went","Fragments":["with","this","with","out"]},{"Key":"with `Regex.scan`,","Fragments":["I"]},{"Key":"`Regex.scan`, I","Fragments":["think","think"]},{"Key":"This one's","Fragments":["done,"]},{"Key":"one's done,","Fragments":["in"]},{"Key":"done, in","Fragments":["my"]},{"Key":" bah","Fragments":["I"]},{"Key":"bah I","Fragments":["couldnt"]},{"Key":"I couldnt","Fragments":["figure"]},{"Key":"couldnt figure","Fragments":["it"]},{"Key":"figure it","Fragments":["out","out.","out","out"]},{"Key":"it out","Fragments":["=(",":(",":)","into","into","into","into","into","to","how","in","to","for","to","because","as","like"]},{"Key":"I need","Fragments":["to","to","to","to","to","it","to","to","to","to","to","a","to","to","to","to","to","to","to","to","to","the"]},{"Key":"read up","Fragments":["a","about","on","on","on","on"]},{"Key":"up a","Fragments":["bit","little?","little","bit"]},{"Key":"bit about","Fragments":["pattern","how","regular","whether","tail","tail","it","tail"]},{"Key":"agree about","Fragments":["line","the"]},{"Key":"about line","Fragments":["20!","length,"]},{"Key":"with adding","Fragments":["a","in"]},{"Key":"adding a","Fragments":["`quiet?`","question","redundant","second","little","`/1`","version","space","lot","`compare(a,","default"]},{"Key":"a `quiet?`","Fragments":["function"]},{"Key":"`quiet?` function","Fragments":["with"]},{"Key":"guard on","Fragments":["`nil?`"]},{"Key":"Also, some","Fragments":["of"]},{"Key":"of these","Fragments":["functions","just","private","comments","methods,","would","methods","before,","exercism","exercises,","functions","are","except","private","conditionals.","are","internal","constants"]},{"Key":"these functions","Fragments":["should","require","are","need"]},{"Key":"functions should","Fragments":["be","be"]},{"Key":" `Dict.update(scores,","Fragments":["word,"]},{"Key":"`Dict.update(scores, word,","Fragments":["1,"]},{"Key":"1, \u0026amp;1","Fragments":["+","+","+"]},{"Key":"\u0026amp;1 +","Fragments":["1","1)`","1...","1)","1"]},{"Key":"the tips","Fragments":["about",";)",":)"]},{"Key":"tips about","Fragments":["`HashDict.update/4`."]},{"Key":"about `HashDict.update/4`.","Fragments":["Code"]},{"Key":"`HashDict.update/4`. Code","Fragments":["gets"]},{"Key":"Code gets","Fragments":["simpler."]},{"Key":"gets simpler.","Fragments":["\\o/"]},{"Key":" you","Fragments":["don't","could","could","have","could","can"]},{"Key":"you don't","Fragments":["need","understand","have","have","need","need","use","need","need","care","actually","actually","really","need","use","have","for","have","want","want","need","need","need","need","use","like?","need","mind,","want","technically","want.","seem","need","need","want","need","need","want,","want.","want.","recognize","introduce","want","need","convert","want","expect","need","want","want","want","want","know","have","want","want","have","really","want","have","want","actually","need","actually","need","need","have","have","have"]},{"Key":"don't need","Fragments":["pattern","the","to","to","to","to","to","to","to","the","downcase","`cond`","two","both","to","to","to","the","recursive","to","with","this","to","the","`Enum.to_list(start..finish)`.","to","a","to","to","to","to"]},{"Key":"need pattern","Fragments":["matching"]},{"Key":"this assignment.","Fragments":["Please","We"]},{"Key":"assignment. Please","Fragments":["read"]},{"Key":"Please read","Fragments":["my"]},{"Key":"read my","Fragments":["nitpick"]},{"Key":"my nitpick","Fragments":["below","(if"]},{"Key":"nitpick below","Fragments":["and"]},{"Key":"below and","Fragments":["fix"]},{"Key":"and fix","Fragments":["the"]},{"Key":"fix the","Fragments":["problem","typo","`has_letters`","example","comparisons."]},{"Key":"didn't realize","Fragments":["those","older","the","there","that","that.","that","most"]},{"Key":"realize those","Fragments":["function"]},{"Key":"those function","Fragments":["existed."]},{"Key":"you play","Fragments":["with"]},{"Key":"play with","Fragments":["the","implicit","pattern","this","this","alternatives","is","the"]},{"Key":"the order","Fragments":["in","of","that","of","of","of","in","of","of","of","in","made","mattered","that","they're","of","of","it","of","of"]},{"Key":"the count","Fragments":["pipeline","pipeline","function","of","function.","of","method","function","function.","function,","function.","function","by","function."]},{"Key":"count pipeline","Fragments":["you","then"]},{"Key":"pipeline you","Fragments":["might"]},{"Key":"find a","Fragments":["way","proper","better","better","way","more","way","way","simple","way","way","less","way","way.","working","value","better","better","different","solution","way","native"]},{"Key":"to simplify","Fragments":["this","the","your","your","your","the","this","some","this","this","your","line","some","this","the","the","your","your","things","your","`filter`"]},{"Key":"for really","Fragments":["valuable"]},{"Key":"really valuable","Fragments":["suggestions!"]},{"Key":"valuable suggestions!","Fragments":["Extremely"]},{"Key":"suggestions! Extremely","Fragments":["difficult"]},{"Key":"Extremely difficult","Fragments":["to"]},{"Key":"difficult to","Fragments":["use","predict.","quickly","Google","reason","understand."]},{"Key":"use completely","Fragments":["new"]},{"Key":"completely new","Fragments":["language","to"]},{"Key":"language with","Fragments":["absolutely","a"]},{"Key":"with absolutely","Fragments":["new"]},{"Key":"absolutely new","Fragments":["paradigm"]},{"Key":"new paradigm","Fragments":["having"]},{"Key":"paradigm having","Fragments":["very"]},{"Key":"having very","Fragments":["little"]},{"Key":"very little","Fragments":["examples","excuse"]},{"Key":"little examples","Fragments":["and"]},{"Key":"examples and","Fragments":["not"]},{"Key":"and not","Fragments":["so","every","something","some","expect","`'`.","bother","having","familiar","enumeration,","understanding","`Enum.filter(\u0026mutation/1)`?","`String.strip(x)`?","knowing","a","separated","`Enum.sort`?","very","characters,","characters.","with","on","`((((a","sure","a-z.","just","`Enum.to_list(2..limit)`?","~r)","the","`Order[type:","sure"]},{"Key":"not so","Fragments":["perfect","sure.","sure.","sure","sure","much","natural","subtle"]},{"Key":"so perfect","Fragments":["documentation"]},{"Key":"perfect documentation","Fragments":[":)"]},{"Key":" See","Fragments":["next"]},{"Key":"See next","Fragments":["version.","version.","iteration."]},{"Key":" Great!","Fragments":["Very","Only","Thanks"]},{"Key":"Great! Very","Fragments":["simple"]},{"Key":"Very simple","Fragments":["and"]},{"Key":"simple and","Fragments":["readable.","readable,","readable.","elegant","elegant.","elegant."]},{"Key":"right about","Fragments":["the","`||","the","the","using","the","that"]},{"Key":"the imports","Fragments":["and","isn't"]},{"Key":"imports and","Fragments":["private"]},{"Key":"and private","Fragments":["functions.","ones","functions."]},{"Key":"point. I've","Fragments":["submitted","moved"]},{"Key":"submitted another","Fragments":["go.","iteration","iteration."]},{"Key":"Why do","Fragments":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you"]},{"Key":"need a","Fragments":["guard","guard.","concurrent","hint","certain","the","list","simple","helper","`[]`","regular","different","proper","named","comment"]},{"Key":"guard for","Fragments":["frequency/1","string"]},{"Key":"for frequency/1","Fragments":["?"]},{"Key":"frequency/1 ?","Fragments":["Functions"]},{"Key":"? Functions","Fragments":["with"]},{"Key":"Functions with","Fragments":["different"]},{"Key":"different arities","Fragments":["are"]},{"Key":"arities are","Fragments":["different"]},{"Key":"are different","Fragments":["functions","add"]},{"Key":"different functions","Fragments":["in"]},{"Key":"functions in","Fragments":["erlang","Elixir).","`cond`s,","pattern","guards.","the","a","a","Elixir","the","the","String","a","`Dict`","`HashDict`","a","a","line","the","`Bitwise`.","the","the","other","terms","terms"]},{"Key":"in erlang","Fragments":["and","genes","and","I"]},{"Key":"erlang and","Fragments":["elixir","consequently"]},{"Key":" I'd","Fragments":["say","say","make","just","only","rather","move","also","love","normally","just","switch","use","really","look","keep","write","say","just","remove","like","jus","break","also","put","do","filter","recommend","say","recommend","probably","do","probably","use","factor","encourage","probably","write","say","go","probably","probably","be","personally","probably","also"]},{"Key":"I'd say","Fragments":["it's","this","this","there","nullary","both","unlock","that","that","your"]},{"Key":"say it's","Fragments":["done","better","any"]},{"Key":" Fixed","Fragments":["typo","the","some","this"]},{"Key":"Fixed typo","Fragments":["and"]},{"Key":"typo and","Fragments":["used"]},{"Key":"and used","Fragments":["`:silence`","`join`","all","case","the","`Enum.map_join`"]},{"Key":"used `:silence`","Fragments":["for"]},{"Key":"`:silence` for","Fragments":["consistency."]},{"Key":"that on","Fragments":["String","future","its"]},{"Key":"on String","Fragments":["instead."]},{"Key":"String instead.","Fragments":["Duh."]},{"Key":"instead. Duh.","Fragments":[":)"]},{"Key":"Oh great,","Fragments":["thanks."]},{"Key":"great, thanks.","Fragments":["I"]},{"Key":"thanks. I","Fragments":["should","guess","didn't"]},{"Key":"should really","Fragments":["try","be","be"]},{"Key":"really try","Fragments":["to"]},{"Key":"try to","Fragments":["memorize","follow","keep","rewrite","work","reduce","do)","read","use","come","use","avoid","use","refactor","use","work","use","aim","access","do","avoid","teach.","force","avoid","`unquote(unquote(letter))`","understand","jump","use","get","shoehorn","use","implement","cal","make","combine","work","change"]},{"Key":"to memorize","Fragments":["the"]},{"Key":"memorize the","Fragments":["regex"]},{"Key":"regex character","Fragments":["classes."]},{"Key":" Yes,","Fragments":["that","I","readability","a","I","I","my","pipeline","explicit","any","you're","I","I","that's","good","it","but","that","what","the"]},{"Key":"Yes, that","Fragments":["does","happens."]},{"Key":"that does","Fragments":["seem","something","seem","that","its","what","the","even","the","the","take"]},{"Key":"does seem","Fragments":["like","like","to","cleaner.","harder","worthy","quite"]},{"Key":"seem like","Fragments":["the","a","it","it","domain","he","they"]},{"Key":"the logical","Fragments":["next"]},{"Key":"logical next","Fragments":["refactor."]},{"Key":"are totally","Fragments":["right","right.I'm"]},{"Key":"totally right","Fragments":["about"]},{"Key":"about `||","Fragments":["0`."]},{"Key":"I'll go","Fragments":["for","ahead","and","with","through","ahead","back","back"]},{"Key":"go for","Fragments":["`build_dictionnary`.","`question?`","it.","that","something","`Stream.filter"]},{"Key":"for `build_dictionnary`.","Fragments":["Thanks."]},{"Key":"`build_dictionnary`. Thanks.","Fragments":[":)"]},{"Key":"Very clean","Fragments":["I"]},{"Key":"clean I","Fragments":["like"]},{"Key":" Ha","Fragments":["ha,","ha"]},{"Key":"Ha ha,","Fragments":["thanks"]},{"Key":"ha, thanks","Fragments":["for"]},{"Key":"for catching","Fragments":["the"]},{"Key":"catching the","Fragments":["typo."]},{"Key":"the typo.","Fragments":["And"]},{"Key":"typo. And","Fragments":["I"]},{"Key":"And I","Fragments":["do","predict","kind","think","prefer","suppose"]},{"Key":"do like","Fragments":["`:silence`","the","the","this:","it","your","the","the"]},{"Key":"like `:silence`","Fragments":["as"]},{"Key":"`:silence` as","Fragments":["opposed"]},{"Key":" Please","Fragments":["see","upgrade","upgrade","upgrade","implement","don't","suggest","share","look","refer"]},{"Key":"Please see","Fragments":["iteration"]},{"Key":"see iteration","Fragments":["4"]},{"Key":"iteration 4","Fragments":["instead."]},{"Key":" just","Fragments":["what","seems","learning"]},{"Key":"just what","Fragments":["the"]},{"Key":"the doctor","Fragments":["prescribed"]},{"Key":"doctor prescribed","Fragments":[":)"]},{"Key":"about `ends_with/2`,","Fragments":["using"]},{"Key":"`ends_with/2`, using","Fragments":["it"]},{"Key":"using it","Fragments":["now!","as","in","for","is","as","on","means","without"]},{"Key":"about hiding","Fragments":["the"]},{"Key":"hiding the","Fragments":["helper","implementation"]},{"Key":"the helper","Fragments":["functions","functions.","function","methods","method:","function","function.","methods","function","functions","functions","functions","method."]},{"Key":"functions making","Fragments":["them"]},{"Key":"making them","Fragments":["private?","private?"]},{"Key":"the feedback!","Fragments":["I","I","Good","I","Submission","I","I've","I'm","I","That","A"]},{"Key":"feedback! I","Fragments":["moved","have","*really*","like","tried","was","was"]},{"Key":"I moved","Fragments":["validations","on","the"]},{"Key":"moved validations","Fragments":["to"]},{"Key":"validations to","Fragments":["their"]},{"Key":"to reveal","Fragments":["intent","the"]},{"Key":"reveal intent","Fragments":["of"]},{"Key":"intent of","Fragments":["the","the","the","using","the","the","the","the"]},{"Key":" And","Fragments":["there","the","you're","yes,","use","that's","the","thanks","you","with","in","the","line","thank","why","I","write","I","any","then","that's","merry","you","the","by","here's","here's","then","now","if","here,","now","let's"]},{"Key":"And there","Fragments":["is"]},{"Key":"better function","Fragments":["in"]},{"Key":"function in","Fragments":["`String`","the","module","`Dict.update`","the","any","the","the","the","normalize","your","the","the","String","a","Erlang,","sing","the","`filter_map`.","another","only","a","term","line","Elixir,","Elixir","each"]},{"Key":"in `String`","Fragments":["to"]},{"Key":"`String` to","Fragments":["do"]},{"Key":"do this","Fragments":["`String.last(arg)","functionaly","kind","for","x","change.","without","with","as","by","in","in","without","without","exercise","exercise","but","without","exercise","exercise","exercise","exercise","sort","much","exercise","exercise","with","as","in"]},{"Key":"this `String.last(arg)","Fragments":["=="]},{"Key":"`String.last(arg) ==","Fragments":["\"?\"`"]},{"Key":"== \"?\"`","Fragments":[".","can","as","you","can"]},{"Key":" `build_dictionary`,","Fragments":["`count_frequencies`"]},{"Key":"`build_dictionary`, `count_frequencies`","Fragments":["?"]},{"Key":"think '?'","Fragments":["at"]},{"Key":"'?' at","Fragments":["the"]},{"Key":"the end","Fragments":["of","of","of","of","of","of","of","of","I","of","of","looked","is","and","using","of","of","if","of","of","of","of","rather","of","of","of","there","of","of","of","of","of","of","I","of","for","of","of"]},{"Key":"end of","Fragments":["methods","function","the","function","a","the","the","this","lines","the","the","a","the","the","the","the","a","a","the","your","the","the","the","cleanup","a","`numerals`.","the","`test_sublist`"]},{"Key":"of methods","Fragments":["names"]},{"Key":"methods names","Fragments":["makes","that"]},{"Key":"names makes","Fragments":["them"]},{"Key":"makes them","Fragments":["more","easier"]},{"Key":"them more","Fragments":["expressive."]},{"Key":"You should","Fragments":["check","look","consider","extract","take","be","take","read","not","just","be","also","try","really","use","have","look"]},{"Key":"should check","Fragments":["the"]},{"Key":"check the","Fragments":["`String`","size.","stdlib,","length","validations","first","last","modules"]},{"Key":"the `String`","Fragments":["documentation,","docs","methods.","module.","module:","module","module.","module"]},{"Key":"`String` documentation,","Fragments":["there"]},{"Key":"documentation, there","Fragments":["is","is"]},{"Key":"a method","Fragments":["for","`extract_word_frequencies(words)`.","convention:","of","on","in","name.","call","style","to","and"]},{"Key":"method for","Fragments":["checking","the"]},{"Key":"checking the","Fragments":["last","last","length","string.","presence","inequality","input"]},{"Key":"last character","Fragments":["of","of","of","to"]},{"Key":"character of","Fragments":["a","a","a","a","a"]},{"Key":"Oh sure.","Fragments":["I"]},{"Key":"sure. I","Fragments":["updated"]},{"Key":"I updated","Fragments":["this","`validate`","the","the","the"]},{"Key":"updated this","Fragments":["exercise."]},{"Key":"this exercise.","Fragments":["Thanks!","Your","I","Predicates","I'll","The"]},{"Key":" PS,","Fragments":["stoked"]},{"Key":"PS, stoked","Fragments":["that"]},{"Key":"stoked that","Fragments":["you"]},{"Key":"are doing","Fragments":["this!","both","well!","a","what"]},{"Key":"about `HashDict.update(dict,","Fragments":["word,"]},{"Key":"1, \u00261","Fragments":["+","+"]},{"Key":"\u00261 +","Fragments":["1)`","1"]},{"Key":"+ 1)`","Fragments":["?","must","looks","isn't","(something","due","is","is"]},{"Key":"Thanks, and","Fragments":["thanks","no,"]},{"Key":"and thanks","Fragments":["for","for"]},{"Key":"the advices","Fragments":["too."]},{"Key":"I've moved","Fragments":["things","on…"]},{"Key":"moved things","Fragments":["around"]},{"Key":"things around","Fragments":["a"]},{"Key":"around a","Fragments":["bit.","lot"]},{"Key":"Hmm, the","Fragments":["question"]},{"Key":"question is,","Fragments":["what"]},{"Key":"is, what","Fragments":["is"]},{"Key":"matching? ;)","Fragments":["*googles*"]},{"Key":"you considered","Fragments":["separating","dropping","using","separating","making","extracting","using","moving","using","moving","making","writing","separating","getting","making","Regex#scan","using","using","making","breaking","using","adding","another","extracting","breaking","making","what","`String.ends_with?`?","making"]},{"Key":"considered separating","Fragments":["the","the","the"]},{"Key":"response logic","Fragments":["from","from"]},{"Key":"from analyzing","Fragments":["the"]},{"Key":"analyzing the","Fragments":["type"]},{"Key":"the type","Fragments":["of","of","of","of","of","of","of","of","of","signatures","of","spec"]},{"Key":"type of","Fragments":["a","person","the","input","the","construct","message","message","a","situation.","input.","content","a","sentence","sentence?","dictionary"]},{"Key":"a statement","Fragments":["by","is","module."]},{"Key":"statement by","Fragments":["moving","using"]},{"Key":"moving it","Fragments":["to","into"]},{"Key":"to helper","Fragments":["functions?","functions?"]},{"Key":" Done!","Fragments":["(just"]},{"Key":"Done! (just","Fragments":["learned"]},{"Key":"(just learned","Fragments":["about"]},{"Key":"learned about","Fragments":["private","`Enum.count`","Elixir","`Enum.any?`","`defp`"]},{"Key":"about private","Fragments":["functions","methods?"]},{"Key":"not find","Fragments":["a","another"]},{"Key":"proper name","Fragments":["for","for"]},{"Key":"this function.","Fragments":["Maybe"]},{"Key":"function. Maybe","Fragments":["`summary`"]},{"Key":"Maybe `summary`","Fragments":["?"]},{"Key":"you agree","Fragments":["that","on"]},{"Key":"that `sentence","Fragments":["=="]},{"Key":"`sentence ==","Fragments":["\"\"`"]},{"Key":"== \"\"`","Fragments":["is","in","is","and","(I","is","and","instead","or"]},{"Key":"\"\"` is","Fragments":["more","a","more","more"]},{"Key":"readable than","Fragments":["`size(sentence)","the","a","the","try","the","traditional","having"]},{"Key":"than `size(sentence)","Fragments":["=="]},{"Key":"`size(sentence) ==","Fragments":["0`"]},{"Key":"== 0`","Fragments":["?","vs","or","could","can","can","is","as","can","can","as"]},{"Key":" Reusable","Fragments":["`clasify`"]},{"Key":"Reusable `clasify`","Fragments":["method,"]},{"Key":"`clasify` method,","Fragments":["so"]},{"Key":"method, so","Fragments":["in","you'd"]},{"Key":"so in","Fragments":["the","`kind_of_sentence`:","Elixir","flux"]},{"Key":"the future","Fragments":["I","so"]},{"Key":"future I","Fragments":["could"]},{"Key":"could create","Fragments":["an","a"]},{"Key":"create an","Fragments":["`Adult`","empty","anonymous","obvious","`anything_else`","obvious","obvious","obvious","obvious","obvious","obvious"]},{"Key":"an `Adult`","Fragments":["module."]},{"Key":"This code","Fragments":["uses","looks","won't","is"]},{"Key":"code uses","Fragments":["Elixir","the"]},{"Key":"uses Elixir","Fragments":["version"]},{"Key":"Elixir version","Fragments":["0.10.1.","seems","is"]},{"Key":" First","Fragments":["Elixir","pass.","Elixir","example","I","ever","pass.","stab","you","I'd","elixir"]},{"Key":"First Elixir","Fragments":["ever.","program"]},{"Key":"Elixir ever.","Fragments":["I"]},{"Key":"ever. I","Fragments":["have"]},{"Key":"a pretty","Fragments":["good","cool","common","fiendish","simple","cool","arbitrary","powerful","general"]},{"Key":"pretty good","Fragments":["idea","already","for","to","but,","to"]},{"Key":"idea that","Fragments":["I'm"]},{"Key":"that I'm","Fragments":["not","using","running","currently","missing?","not","thinking","purposely","least","checking"]},{"Key":"not taking","Fragments":["advantage"]},{"Key":"taking advantage","Fragments":["of","of"]},{"Key":"of it's","Fragments":["features","own."]},{"Key":"it's features","Fragments":[":)"]},{"Key":" ahah","Fragments":["true,"]},{"Key":"ahah true,","Fragments":["better"]},{"Key":"true, better","Fragments":["indeed."]},{"Key":" Thanks.","Fragments":[":-)","I",":)","I","I","I","I","I'm","I've","Yeah,","Good",":)"]},{"Key":" Nothing","Fragments":["to","wrong"]},{"Key":"Nothing to","Fragments":["add."]},{"Key":" Out","Fragments":["of"]},{"Key":"Out of","Fragments":["nitpicks","curiosity,"]},{"Key":"of nitpicks","Fragments":[":)"]},{"Key":" Ah.","Fragments":["Thanks","I","Thanks."]},{"Key":"Ah. Thanks","Fragments":["for"]},{"Key":"for pointing","Fragments":["that","that","out","the","me","that","that","this"]},{"Key":"pointing that","Fragments":["out.","out!","out.","out."]},{"Key":"find an","Fragments":["alternative","`else","alternative","example","inbuilt","elegant","explicit","indent"]},{"Key":"an alternative","Fragments":["method","to","function","that","approach","to","that","tail-recursive"]},{"Key":"alternative method","Fragments":["in"]},{"Key":"method in","Fragments":["`Kernel`","there","this","a","the"]},{"Key":"in `Kernel`","Fragments":["or"]},{"Key":"`Kernel` or","Fragments":["`String`."]},{"Key":" `msg","Fragments":["=="]},{"Key":"`msg ==","Fragments":["\"\"`"]},{"Key":"It's just","Fragments":["an","added","that"]},{"Key":"just an","Fragments":["empty","empty","example),","internal","alternative"]},{"Key":" OK,","Fragments":["back","so","I","this","the"]},{"Key":"OK, back","Fragments":["to"]},{"Key":"back to","Fragments":["the","the","\"99","list?","a","it","strings","the","this","`Teenager`","you."]},{"Key":"Elixir docs.","Fragments":[":)"]},{"Key":" Oops,","Fragments":["no,","I've","I","looks","sorry","bad","wrong"]},{"Key":"Oops, no,","Fragments":["sorry."]},{"Key":"no, sorry.","Fragments":["I"]},{"Key":"sorry. I","Fragments":["still"]},{"Key":"still think","Fragments":["there","I'd","`reduce`","sorting","my"]},{"Key":"way than","Fragments":["size(msg)"]},{"Key":"than size(msg)","Fragments":["=="]},{"Key":"size(msg) ==","Fragments":["0."]},{"Key":"== 0.","Fragments":["Without"]},{"Key":"0. Without","Fragments":["numbers"]},{"Key":"I'm out","Fragments":["of","of"]},{"Key":"* Thanks","Fragments":["for","for"]},{"Key":"the push","Fragments":["to"]},{"Key":"push to","Fragments":["a"]},{"Key":"more elegant","Fragments":["test","than","and","algorithm."]},{"Key":"elegant test","Fragments":["for"]},{"Key":"a empty","Fragments":["string","one,"]},{"Key":"* I've","Fragments":["renamed"]},{"Key":"I've renamed","Fragments":["the"]},{"Key":"renamed the","Fragments":["`blank?`","method"]},{"Key":"the `blank?`","Fragments":["method."]},{"Key":"have now,","Fragments":["thanks.","but"]},{"Key":"That makes","Fragments":["a","sense.","sense.","sense."]},{"Key":"makes a","Fragments":["lot","lot","dramatic","lot","lot","difference,"]},{"Key":"you considerer","Fragments":["hiding"]},{"Key":"considerer hiding","Fragments":["the"]},{"Key":"implementation methods","Fragments":["like"]},{"Key":"methods like","Fragments":["`asking?/1`","add"]},{"Key":"like `asking?/1`","Fragments":["?"]},{"Key":"* What","Fragments":["do","teenager","happens"]},{"Key":"about making","Fragments":["the","silence?(x),","them","the","some","the"]},{"Key":"the three","Fragments":["helper","versions","sides","cases","clause","argument","names"]},{"Key":"three helper","Fragments":["functions"]},{"Key":"functions private","Fragments":["(defp)?","using","(`defp`)?","to","you","by"]},{"Key":"Great nudge","Fragments":["towards"]},{"Key":"nudge towards","Fragments":["`cond`."]},{"Key":"towards `cond`.","Fragments":["The"]},{"Key":"`cond`. The","Fragments":["module","lines"]},{"Key":"The module","Fragments":["reads","is"]},{"Key":"module reads","Fragments":["so"]},{"Key":"reads so","Fragments":["much"]},{"Key":"so much","Fragments":["better.","cleaner!","as","reason","work?","like","for","fun.","for","about","teach","about","regular","duplication","with","going","in","boilerplate","in","for","easier","for","for","slower","for","code.","code.","as"]},{"Key":" we","Fragments":["are"]},{"Key":"are all","Fragments":["new","Kernel","on","valuable","excellent,","at","fairly","tail","upper","caps.","identical","uppercase.","in","tail-recursive"]},{"Key":"all new","Fragments":["to","to"]},{"Key":"to elixir","Fragments":[":)","to","standards.","too,","so"]},{"Key":" sorry,","Fragments":["not"]},{"Key":"sorry, not","Fragments":["2,"]},{"Key":"not 2,","Fragments":["3"]},{"Key":"2, 3","Fragments":["if's","(i.e.","GO!\")"]},{"Key":"this one's","Fragments":["clean"]},{"Key":"one's clean","Fragments":["and"]},{"Key":"clean and","Fragments":["good"]},{"Key":"reads better","Fragments":["with","with","than","than","than","and","in"]},{"Key":"better with","Fragments":["the","is_","using","`|\u003e`","sets."]},{"Key":"considered dropping","Fragments":["the"]},{"Key":"dropping the","Fragments":["is_","parens"]},{"Key":"prefix from","Fragments":["your"]},{"Key":"from your","Fragments":["Language","workflow.","code"]},{"Key":"your Language","Fragments":["module"]},{"Key":"Language module","Fragments":["methods?","is"]},{"Key":" might","Fragments":["not","be"]},{"Key":"might not","Fragments":["need","need","know","be","be","end","support","be","be","be"]},{"Key":"not need","Fragments":["to","a","to","to","to","to"]},{"Key":"Also consider","Fragments":["that","renaming","if","that"]},{"Key":"consider that","Fragments":["these","might","there","-"]},{"Key":"that these","Fragments":["methods","one-line","functions"]},{"Key":"these methods","Fragments":["might","to","private!"]},{"Key":"methods might","Fragments":["need","be."]},{"Key":"might need","Fragments":["to"]},{"Key":"be public","Fragments":["but","(for","as","as"]},{"Key":"public but","Fragments":["instance"]},{"Key":"but instance","Fragments":["only."]},{"Key":"considered using","Fragments":["a","String.ends_with?","`Dict.update/4`","pattern","String.upcase","a","descriptively","the"]},{"Key":"using a","Fragments":["more","pipe","character","conditional","Regex,","cond-switch.","more","higher-order","default","variable","pattern","regex.","fold","single","separate","function","regex","different","separate","case","chain","regex,","regex","map","Regex.","short","functional","named","`HashDict.update`,","simpler","`when`","`Enum.map`","`+`","pattern","using","recursive","helper","Supervisor","more","rather","standard","language","comprehension","lot","regex"]},{"Key":"name then","Fragments":["input?"]},{"Key":"just mark","Fragments":["this"]},{"Key":"mark this","Fragments":["as","as","one"]},{"Key":"this as","Fragments":["done","a","a","an","done","a","in","good","a"]},{"Key":"as done","Fragments":["so","so"]},{"Key":"done so","Fragments":["I","I"]},{"Key":"can move","Fragments":["on","the"]},{"Key":"more interesting","Fragments":["exercise?","with"]},{"Key":"interesting exercise?","Fragments":["This"]},{"Key":"exercise? This","Fragments":["isn't"]},{"Key":"isn't really","Fragments":["useful","a","specified","needed","to","useful"]},{"Key":"really useful","Fragments":["nitpicking.","as"]},{"Key":"Is this","Fragments":["what","what","legit?","for","a","what","intentional?","valid_candidates"]},{"Key":"this what","Fragments":["you","you","you"]},{"Key":"you meant,","Fragments":["@monroe?"]},{"Key":"You may","Fragments":["want","have","also","well","be","want","assume","want"]},{"Key":"may want","Fragments":["to","to","to"]},{"Key":"separate the","Fragments":["message","problem"]},{"Key":"message related","Fragments":["private"]},{"Key":"related private","Fragments":["methods"]},{"Key":"methods into","Fragments":["a","a","one-liners."]},{"Key":"into a","Fragments":["separate","method","Language","`upcase?`","list","text","well-named","whole","list","descriptively","descriptively","function","function","separate","separate","more","word","form","named","helper","separate","single","private","separate","single","language","well","separate","string.","single","function","list","number","proper","reusable","pattern-match","separate","separate","single","pattern-match","string.","bunch","List;","separate","list","list,","single","full","'general","list","few","dict.","series","list","unicode-safe","list","more","one-liner","one-liner.","collectable","method","functional","single"]},{"Key":"separate concern.","Fragments":["Something"]},{"Key":"concern. Something","Fragments":["like"]},{"Key":"Something like","Fragments":["Message.yelling?(message).","the","`fn","this:","this:"]},{"Key":" s/this/this","Fragments":["is/"]},{"Key":"say this","Fragments":["done","is","in"]},{"Key":"Good call","Fragments":["-","using"]},{"Key":"call -","Fragments":["more"]},{"Key":"- more","Fragments":["readable."]},{"Key":"more readable.","Fragments":["Submitted.","Also","Feel","The","Nice","incoming.","Thanks","I","Just","I","Thank"]},{"Key":"you seen","Fragments":["or","`Enum.count/2`?","`Dict.update`?","the","`Regex.scan`?"]},{"Key":"seen or","Fragments":["considered"]},{"Key":"or considered","Fragments":["using"]},{"Key":" Yeah","Fragments":["absolutely.","-","it","that","I"]},{"Key":"Yeah absolutely.","Fragments":["Thanks"]},{"Key":"absolutely. Thanks","Fragments":["for"]},{"Key":"Just submitted","Fragments":["with"]},{"Key":"submitted with","Fragments":["message"]},{"Key":"with message","Fragments":["=="]},{"Key":"message ==","Fragments":["\"\"","\"\"?"]},{"Key":" Or","Fragments":["message","`%r\\(.{3})(.{3})(.{4})/`","you"]},{"Key":"Or message","Fragments":["=="]},{"Key":"mean something","Fragments":["like","like?","different","like"]},{"Key":"like String.last(message)","Fragments":["=="]},{"Key":"String.last(message) ==","Fragments":["nil"]},{"Key":"== nil","Fragments":["?"]},{"Key":"was able","Fragments":["to","to","to"]},{"Key":"able to","Fragments":["remove","use","support","remove","sing","do","rephrase","replace","simplify","make","get,","remove","do","do",":)","use","help","do","figure","avoid","think","see","do","support","use","pass","use","find","see","nitpick","contribute,","take","use","simplify","figure"]},{"Key":"remove duplication","Fragments":["in"]},{"Key":"duplication in","Fragments":["the","the","#anagram?","the","the","the"]},{"Key":"the strings,","Fragments":["but"]},{"Key":"strings, but","Fragments":["I'm"]},{"Key":"but I'm","Fragments":["not","not","not","not","not","not","sure","drawing","not","still","looking","at","not","not","really","kind","not","not","still","not","perfectly","not","not","not","curious,","told","not","not","not","still","not","having","still","open","not","quite"]},{"Key":"not entirely","Fragments":["certain","accurate","sure"]},{"Key":"entirely certain","Fragments":["how"]},{"Key":"certain how","Fragments":["to"]},{"Key":"to utilize","Fragments":["`Enum.map`."]},{"Key":"utilize `Enum.map`.","Fragments":["I'll"]},{"Key":"`Enum.map`. I'll","Fragments":["keep"]},{"Key":"I'll keep","Fragments":["thinking","that","an","looking,"]},{"Key":"keep thinking","Fragments":["about"]},{"Key":" Trying","Fragments":["the","out","to","out","to"]},{"Key":"Trying the","Fragments":["exercise"]},{"Key":"exercise with","Fragments":["imports.","regards"]},{"Key":"with imports.","Fragments":["Not"]},{"Key":"imports. Not","Fragments":["sure"]},{"Key":"Not sure","Fragments":["it","about","how","I","if","how","this","about","if","what","of","about","if","if","how","if","if","about","why","it","I","what","I","about","why","I've","which","if","what","about","if","if","where","what","importing","I","this","about","how","what","what"]},{"Key":"sure it","Fragments":["adds","describes","would","was","goes","could"]},{"Key":"adds real","Fragments":["value"]},{"Key":"real value","Fragments":["since"]},{"Key":"value since","Fragments":["I"]},{"Key":"since I","Fragments":["only","can't","need","did","knew","hardly","haven't","re-implemented","just","last","went","did"]},{"Key":"I only","Fragments":["use","have","have","used"]},{"Key":"only use","Fragments":["the","the","one","it","the"]},{"Key":" Ok","Fragments":["I","I","this","thanks","thanks","thanks",",","I",",","thanks","it","thanks","!!","so,","this","all"]},{"Key":"Ok I","Fragments":["think","see","will"]},{"Key":"I got","Fragments":["it,","suggested","few","twisted","on","sloppy","your","busy","about","what","it.","rid","caught","lucky","stuck","lazy","some","the","to","that","so","that","a","good","an","an","it.","down"]},{"Key":"got it,","Fragments":["I"]},{"Key":"it, I","Fragments":["submitted","will","did","think","have","wasn't","had"]},{"Key":"new version.","Fragments":["Thanks!","We","I","Thanks",":)","Just","I"]},{"Key":" Yup","Fragments":["-","still"]},{"Key":"Yup -","Fragments":["uploaded"]},{"Key":"- uploaded","Fragments":["another"]},{"Key":"uploaded another","Fragments":["take."]},{"Key":"checks from","Fragments":["the","the"]},{"Key":"response thus","Fragments":["making","making"]},{"Key":"thus making","Fragments":["it","it"]},{"Key":"making it","Fragments":["more","a","more","more","a","a","too"]},{"Key":" There's","Fragments":["also","no","no","an","always","no","a","also","nothing","a","a","a","nothing","one","just","nothing","a","currently","always","really","a","a","a"]},{"Key":"There's also","Fragments":["a","a","`Regex.run`"]},{"Key":"also a","Fragments":["simple","private","tension","bit","ListDict)","look","`ListDict`,","little","mistake:","preference"]},{"Key":"a simple","Fragments":["way","statement,","way","comparison","regex","benchmark.","keyword","constructor","exercise,","native","`Enum.map/2`.","`defp","starting","mapping","enough","character","guard,"]},{"Key":"simple way","Fragments":["to","to","to","(without"]},{"Key":"get rid","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"rid of","Fragments":["this","your","these","the","the","two","condition","the","the","conditionals","one","the","that","as","all","it","HashDicts;","the","that?","the","the","some","that","the","the","your","line","the"]},{"Key":"this check","Fragments":["on"]},{"Key":"check on","Fragments":["line","`|\u003e`","an"]},{"Key":"line 6:","Fragments":["!shouting?(message),"]},{"Key":"6: !shouting?(message),","Fragments":["would"]},{"Key":"!shouting?(message), would","Fragments":["you"]},{"Key":" Ah","Fragments":["-","yes!","cool,","much","good","indeed,","indeed!","nice,","yes,"]},{"Key":"Ah -","Fragments":["yeah,"]},{"Key":"- yeah,","Fragments":["refactored"]},{"Key":"yeah, refactored","Fragments":["that"]},{"Key":"refactored that","Fragments":["out"]},{"Key":"submitted the","Fragments":["changes.","cond","pull"]},{"Key":"the changes.","Fragments":["Thanks!"]},{"Key":"Looks like","Fragments":["it","good","that's","idiomatic","I","your","I","you're","exercism","you've","a"]},{"Key":"me, I","Fragments":["flagged","would","think","would","never"]},{"Key":"I flagged","Fragments":["it"]},{"Key":"flagged it","Fragments":["for"]},{"Key":"it for","Fragments":["approval.","approval.","a","that","a","the","comparation?","the","my","some","lists","the","the","even","the","this","`flatten`.","`append`","each"]},{"Key":" So...","Fragments":["send"]},{"Key":"So... send","Fragments":["it"]},{"Key":"send it","Fragments":["to","any"]},{"Key":"the approval","Fragments":["queue..."]},{"Key":"approval queue...","Fragments":["\u003c3"]},{"Key":" bump...","Fragments":["is"]},{"Key":"bump... is","Fragments":["this"]},{"Key":"is this","Fragments":["ready","thing","too",":"]},{"Key":"this ready","Fragments":["for"]},{"Key":"ready for","Fragments":["approval?"]},{"Key":"Sorry, couldn't","Fragments":["find"]},{"Key":"couldn't find","Fragments":["anything","a","any","an","a","a","an","the","a","anything","one.","an","out","a","it"]},{"Key":"find anything","Fragments":["to","that","to","suitable","wrong","so"]},{"Key":"anything to","Fragments":["nitpick","disagree","make","do"]},{"Key":" concise","Fragments":["and"]},{"Key":"concise and","Fragments":["elegant","communicating","comprehensible","I"]},{"Key":"and elegant","Fragments":["Elixir","ways"]},{"Key":"elegant Elixir","Fragments":["code"]},{"Key":"considered making","Fragments":["it","it","it","each","`is_shouting?`","some"]},{"Key":"That is","Fragments":["great","great!","a","clearer.","exactly","usually","succinct!","concerning.","a","a","better.","definitely"]},{"Key":"is great","Fragments":["news!","at","for","fun!"]},{"Key":"great news!","Fragments":[":)"]},{"Key":"for taking","Fragments":["your","a","the","the","a","things"]},{"Key":"taking your","Fragments":["time"]},{"Key":"your time","Fragments":["to",":(","invested","for"]},{"Key":"time to","Fragments":["nominate","get","call","give","comment!","get","think","proper","move","understand","understand.","get,"]},{"Key":"to nominate","Fragments":["this"]},{"Key":"nominate this","Fragments":["for"]},{"Key":"this for","Fragments":["approval!","short","you","the","almost","every","the","this","`action`","a"]},{"Key":" Seriously,","Fragments":["nothing"]},{"Key":"Seriously, nothing","Fragments":["to"]},{"Key":"nothing to","Fragments":["complain","see","say"]},{"Key":"to complain","Fragments":["about"]},{"Key":" Agreed,","Fragments":["much","as","I"]},{"Key":"Agreed, much","Fragments":["easier"]},{"Key":"much easier","Fragments":["than","to","to","to","to","to","to"]},{"Key":"easier than","Fragments":["trying"]},{"Key":"than trying","Fragments":["to","to","to","to","to"]},{"Key":"trying to","Fragments":["work","refactor","nudge","decide","re-program","guess","lead","write","understand","understand","find.","use","figure","parallelize","minify","minify","write","prove","get","say","cram","match","figure","do","figure","decide","find","get","find","do","use","avoid","get","figure","use","be","follow","solve","avoid","refine","figure","make","use","loop?","do.","figure","escape","match,","match,","find","keep","find","be","do?","enumerate","remove.","use","grok","use","include","determine","learn"]},{"Key":"to work","Fragments":["out","correctly.","with.","out","themselves","fine","and","out","out","a","out","out","directly","as","because","in","badly","well","with","with","with","with","on","with","you","with","fine.","but","with","in","in","on","with","from"]},{"Key":"work out","Fragments":["the","how","what","how","how","what","implementations","how/if","how","a","how","how"]},{"Key":"the purpose","Fragments":["of","of","of","of","of","of"]},{"Key":"purpose of","Fragments":["the","\"_speak\"","the","the","the","this","giving"]},{"Key":"with `true`","Fragments":["as","and"]},{"Key":"`true` as","Fragments":["it","the"]},{"Key":"as it","Fragments":["seemed","expresses","should):","often","does","can","is.","would","really","serves","is.","splits","makes","feels","could.","stands","can","doesn't","might","just","can","sounds","does","will","returns","inserts","can","orders","doesn't","would","wasn't","is,"]},{"Key":"seemed to","Fragments":["describe","prefer)","be","be","fail","have","come","be","complicate"]},{"Key":"to describe","Fragments":["the","the"]},{"Key":"case better","Fragments":["than"]},{"Key":"than _words.","Fragments":[":)"]},{"Key":"point but","Fragments":["I","I"]},{"Key":"think I'm","Fragments":["ready","taking","right.","ok"]},{"Key":"I'm ready","Fragments":["to"]},{"Key":"ready to","Fragments":["move","move","be"]},{"Key":"-- still","Fragments":["very"]},{"Key":"still very","Fragments":["readable!","clean.","much","new"]},{"Key":"about that!","Fragments":["Still"]},{"Key":"that! Still","Fragments":["exploring/learning"]},{"Key":"Still exploring/learning","Fragments":["the"]},{"Key":"exploring/learning the","Fragments":["core"]},{"Key":"the core","Fragments":["libs!","language","lib.","of","function"]},{"Key":"core libs!","Fragments":["Updated."]},{"Key":"see your","Fragments":["point.","public","point.","whole","point"]},{"Key":"your point.","Fragments":["I","To"]},{"Key":"will rename","Fragments":["the"]},{"Key":"rename the","Fragments":["function.","word","variable","function"]},{"Key":"it. `cond`","Fragments":["makes"]},{"Key":"`cond` makes","Fragments":["it"]},{"Key":"it pretty","Fragments":["neat!","print"]},{"Key":"one more,","Fragments":["with"]},{"Key":"more, with","Fragments":["String.ends_with?"]},{"Key":" new","Fragments":["version","to"]},{"Key":"\"is_\" prefix","Fragments":["is"]},{"Key":"prefix is","Fragments":["more","only","probably","preferred"]},{"Key":"more appropriate","Fragments":["in","here?","given","in"]},{"Key":"appropriate in","Fragments":["languages","this"]},{"Key":"in languages","Fragments":["without","that","like","that"]},{"Key":"languages without","Fragments":["ability"]},{"Key":"without ability","Fragments":["to"]},{"Key":"ability to","Fragments":["use"]},{"Key":"use \"?\"","Fragments":["at"]},{"Key":"\"?\" at","Fragments":["the","the","the","the"]},{"Key":"of function","Fragments":["name.","names","calls.","definitions","with","naming","clauses","dispatch,","call"]},{"Key":"function name.","Fragments":["So"]},{"Key":"name. So","Fragments":["in","I"]},{"Key":"So in","Fragments":["Elixir"]},{"Key":"Elixir it","Fragments":["looks"]},{"Key":"it looks","Fragments":["too","like","good.","like","great.","good","like","like","like","good.","like.","slightly","like.","like","pretty","to","like","a","like","better","good","like"]},{"Key":"looks too","Fragments":["explicit,","cluttered"]},{"Key":"too explicit,","Fragments":["in"]},{"Key":"explicit, in","Fragments":["my"]},{"Key":"way, why","Fragments":["you"]},{"Key":"use so","Fragments":["complex","you","much"]},{"Key":"so complex","Fragments":["expression"]},{"Key":"complex expression","Fragments":["for"]},{"Key":"expression for","Fragments":["silence","this","stripping"]},{"Key":"for silence","Fragments":["detection","from","from"]},{"Key":"silence detection","Fragments":["instead"]},{"Key":"detection instead","Fragments":["of"]},{"Key":"of simple","Fragments":["comparison","expressions,"]},{"Key":"simple comparison","Fragments":["with","be"]},{"Key":"comparison with","Fragments":["empty","\"\"."]},{"Key":"with empty","Fragments":["string","string.","strings.","words?"]},{"Key":"string (==","Fragments":["\"\")?"]},{"Key":"That does","Fragments":["seem","look","make"]},{"Key":"like a","Fragments":["more","fun","good","list","great","nice","couple","really","hack","good","good","fingerprint","good","natural","good","separate","simple","bug","great","great","constructor","lot","huge","suggestion?","regex","huge","code","hint.","pretty","fairly","nice","decent","good","map,","`List.flatten`.","lot","simple","1","little"]},{"Key":"more natural,","Fragments":["elixirish"]},{"Key":"natural, elixirish","Fragments":["solution."]},{"Key":"the tradeoffs","Fragments":["are?"]},{"Key":"Yeah, the","Fragments":["formatting","docs","syntax","idea","\"specs\""]},{"Key":"the formatting","Fragments":["thing","was"]},{"Key":"formatting thing","Fragments":["is"]},{"Key":"thing is","Fragments":["a","calling","I'd","nifty.","that","that","a","my"]},{"Key":"a known","Fragments":["issue","precedence","problem"]},{"Key":"known issue","Fragments":["--"]},{"Key":"issue --","Fragments":["we"]},{"Key":"-- we","Fragments":["have","don't"]},{"Key":"we have","Fragments":["a","to","different","to","that"]},{"Key":"a PR","Fragments":["open","https://github.com/kytrinyx/exercism.io/pull/465","merged","merged","to","to","to","to","when","for"]},{"Key":"PR open","Fragments":["with"]},{"Key":"open with","Fragments":["the"]},{"Key":"the gem","Fragments":["maintainer."]},{"Key":"gem maintainer.","Fragments":[":)"]},{"Key":"the individual","Fragments":["checks","letters","codepoints.","grade"]},{"Key":"individual checks","Fragments":["into"]},{"Key":"into functions","Fragments":["with","that","doesn't","with"]},{"Key":" Looking","Fragments":["good!","very","good!","great.","good!","good.","at"]},{"Key":" Not","Fragments":["sure","sure","really","sure","at","sure","sure","bad,","sure","totally","sure","sure","perfectly","sure","worth,","really","sure","bad.","matching","a","sure","passing","very","sure","super","quite","that","that","sure.","much","really.","sure","sure","sure","sure","sure","sure","sure","sure","sure","bad"]},{"Key":"about what","Fragments":["you","Bob","a","kind","you","type","you're","exercises","they","good","needs"]},{"Key":"mean by","Fragments":["\"Why","\"pipeline","doing","shorthand","\"the","swapping"]},{"Key":"by \"Why","Fragments":["String.split/1"]},{"Key":"\"Why String.split/1","Fragments":["and"]},{"Key":"String.split/1 and","Fragments":["also"]},{"Key":"also Regex.scan/2?\"","Fragments":["can"]},{"Key":"Regex.scan/2?\" can","Fragments":["you"]},{"Key":"you elaborate","Fragments":["a"]},{"Key":"elaborate a","Fragments":["bit?"]},{"Key":"Ah, your","Fragments":["right."]},{"Key":"your right.","Fragments":["Good"]},{"Key":"right. Good","Fragments":["catch!"]},{"Key":"Good catch!","Fragments":["Updating...."]},{"Key":" Tried","Fragments":["suggesting","to","this","to","to"]},{"Key":"Tried suggesting","Fragments":["this"]},{"Key":"suggesting this","Fragments":["one"]},{"Key":"for approval,","Fragments":["but"]},{"Key":"approval, but","Fragments":["I'm"]},{"Key":"sure the","Fragments":["button","answer","tests","use"]},{"Key":"the button","Fragments":["is","at","that"]},{"Key":"button is","Fragments":["working."]},{"Key":"is working.","Fragments":["We'll"]},{"Key":"working. We'll","Fragments":["see!"]},{"Key":"Very clean.","Fragments":["Interesting","In"]},{"Key":"clean. Interesting","Fragments":["trick"]},{"Key":"Interesting trick","Fragments":["with"]},{"Key":"trick with","Fragments":["using","pipelining"]},{"Key":"with using","Fragments":["\"_\"","`Enum`","`Regex.scan`","Dict.update/4,","if","`reduce`"]},{"Key":"using \"_\"","Fragments":["over"]},{"Key":"\"_\" over","Fragments":["true,"]},{"Key":"over true,","Fragments":["that"]},{"Key":"true, that","Fragments":["someone"]},{"Key":"someone suggested","Fragments":["in"]},{"Key":"suggested in","Fragments":["your","the"]},{"Key":"your prior","Fragments":["feedback."]},{"Key":"do now!","Fragments":["Awesome!"]},{"Key":"Oh, by","Fragments":["the"]},{"Key":"way, extra","Fragments":["space"]},{"Key":"extra space","Fragments":["before","on"]},{"Key":"space before","Fragments":["\"silence?\""]},{"Key":"before \"silence?\"","Fragments":["appears"]},{"Key":"\"silence?\" appears","Fragments":["after"]},{"Key":"appears after","Fragments":["submit,"]},{"Key":"after submit,","Fragments":["I"]},{"Key":"submit, I","Fragments":["tried"]},{"Key":"to resubmit,","Fragments":["but"]},{"Key":"resubmit, but","Fragments":["with"]},{"Key":"but with","Fragments":["no"]},{"Key":"with no","Fragments":["luck.","side-effects","side","exclamation","body","exclamation"]},{"Key":"no luck.","Fragments":["So,"]},{"Key":"luck. So,","Fragments":["please,"]},{"Key":"So, please,","Fragments":["ignore"]},{"Key":"please, ignore","Fragments":["it."]},{"Key":"I'm complete","Fragments":["newbie"]},{"Key":"complete newbie","Fragments":["in"]},{"Key":"newbie in","Fragments":["Elixir"]},{"Key":"and functional","Fragments":["programming,"]},{"Key":"functional programming,","Fragments":["so","so","if"]},{"Key":"programming, so","Fragments":["I'd","the"]},{"Key":"so I'd","Fragments":["really","say"]},{"Key":"I'd really","Fragments":["appreciate","like","appreciate"]},{"Key":"really appreciate","Fragments":["any","feedback","it.","any","your","how"]},{"Key":"appreciate any","Fragments":["tips","feedback."]},{"Key":"any tips","Fragments":["and","anyone"]},{"Key":"tips and","Fragments":["tricks!","pointers"]},{"Key":"a fun","Fragments":["language","exercise.","exercise.","mind-bender."]},{"Key":"fun language","Fragments":["to"]},{"Key":"language to","Fragments":["learn.","me.","have","know"]},{"Key":"to learn.","Fragments":["I","That's"]},{"Key":"learn. I","Fragments":["am"]},{"Key":"am looking","Fragments":["forward","to"]},{"Key":"looking forward","Fragments":["to"]},{"Key":"forward to","Fragments":["diving","some","it.","seeing"]},{"Key":"to diving","Fragments":["in"]},{"Key":"diving in","Fragments":["a"]},{"Key":"method HashDict.update?","Fragments":["?"]},{"Key":"same issue","Fragments":["appears","with"]},{"Key":"issue appears","Fragments":["on"]},{"Key":"appears on","Fragments":["line"]},{"Key":" Beautiful!","Fragments":["Except"]},{"Key":"Beautiful! Except","Fragments":["the"]},{"Key":"Except the","Fragments":["extra"]},{"Key":"space on","Fragments":["line"]},{"Key":"That's a","Fragments":["great","good","nice","really","great","lot","good","good","matter","more","cool","good","common","totally","good"]},{"Key":"a great","Fragments":["idea!","fit!","start!","control","idea,","use","opportunity","use","fan","use","start","way","risk","reason.","way","opportunity","Christmas","exercise,","exercise.","one","naming","function","function","idea,"]},{"Key":"That sounds","Fragments":["like"]},{"Key":"sounds like","Fragments":["an","it's","shouting,","it's","it's","it's"]},{"Key":"an excellent","Fragments":["idea","example"]},{"Key":"excellent idea","Fragments":["to"]},{"Key":"Hi Don.","Fragments":["Love"]},{"Key":"Don. Love","Fragments":["the"]},{"Key":"the \"silent\"","Fragments":["check."]},{"Key":"other message","Fragments":["interrogation"]},{"Key":"message interrogation","Fragments":["checks"]},{"Key":"interrogation checks","Fragments":["into"]},{"Key":"with semantic","Fragments":["names?"]},{"Key":"Well done.","Fragments":["I"]},{"Key":"done. I","Fragments":["love","don't"]},{"Key":"love the","Fragments":["naming","conditionals,"]},{"Key":"naming and","Fragments":["separation","other","the","being"]},{"Key":"and separation","Fragments":["of"]},{"Key":"Just so","Fragments":["you"]},{"Key":"you know,","Fragments":["you","there"]},{"Key":"know, you","Fragments":["could","can"]},{"Key":"used \"_\"","Fragments":["instead"]},{"Key":"\"_\" instead","Fragments":["of"]},{"Key":"know if","Fragments":["I","you","you're","it's","I've","it's","you","you","there","it's","my","an","you'd","you'd","you've","you","you","the","you","there's"]},{"Key":"this better","Fragments":["than","than","(clearer"]},{"Key":"you pattern","Fragments":["matched"]},{"Key":"matched portions","Fragments":["of"]},{"Key":"portions of","Fragments":["the"]},{"Key":" Thanks!","Fragments":["It's","I","I've","What","That","My","That's","that","I"]},{"Key":"Thanks! It's","Fragments":["should"]},{"Key":"It's should","Fragments":["be"]},{"Key":"be prettier","Fragments":["with","if","if:"]},{"Key":"prettier with","Fragments":["Dict.update."]},{"Key":" Aha,","Fragments":["great","I","my","after"]},{"Key":"Aha, great","Fragments":["thank"]},{"Key":"great thank","Fragments":["you!"]},{"Key":"Oh, I","Fragments":["forgot","finally","get","agree,","didn't","like"]},{"Key":"I forgot","Fragments":["Elixir","about","I","about","that","to","the","how","to"]},{"Key":"forgot Elixir","Fragments":["supports"]},{"Key":"Elixir supports","Fragments":["that.","shorthands","heredoc","variant","interpolation,"]},{"Key":"supports that.","Fragments":["Glad"]},{"Key":"that. Glad","Fragments":["I"]},{"Key":"Glad I","Fragments":["won't","did","could"]},{"Key":"I won't","Fragments":["miss","speak","blame"]},{"Key":"won't miss","Fragments":["that"]},{"Key":"miss that","Fragments":["from"]},{"Key":"that from","Fragments":["Ruby."]},{"Key":"Awesome! I","Fragments":["just"]},{"Key":"to know","Fragments":["if","*how*","about","how","the","when","whether","which","elixir,","it'll","I","how","which","if","about","what","more","that","if"]},{"Key":"you had","Fragments":["thought","to","to","to","to","this:","an","to","in","a","the"]},{"Key":"had thought","Fragments":["about"]},{"Key":"I actually","Fragments":["like","took","made","assigned","considered","like","have","hate","still","meant","did","wanted","didn't","looked","thought","looked","like","prefer","didn't"]},{"Key":"actually like","Fragments":["the","that","to","the"]},{"Key":"cond one,","Fragments":["but"]},{"Key":"one, but","Fragments":["only","I'm","avoided"]},{"Key":"but only","Fragments":["if","because","one","use","sorting"]},{"Key":"only if","Fragments":["you","benchmarking"]},{"Key":"use whitespace","Fragments":["to"]},{"Key":"whitespace to","Fragments":["line","be"]},{"Key":"to line","Fragments":["up"]},{"Key":"line up","Fragments":["the"]},{"Key":"the return","Fragments":["values.","val","value","value","values","value"]},{"Key":"consider extracting","Fragments":["the","the","well-named"]},{"Key":"the conditional","Fragments":["logic","in","up","in","in","in"]},{"Key":"conditional logic","Fragments":["into","in"]},{"Key":" Huh.","Fragments":["character"]},{"Key":"Huh. character","Fragments":["limit."]},{"Key":"character limit.","Fragments":["Anyway."]},{"Key":"limit. Anyway.","Fragments":["Pretend"]},{"Key":"Anyway. Pretend","Fragments":["those"]},{"Key":"Pretend those","Fragments":["make"]},{"Key":"those make","Fragments":["sense"]},{"Key":"sense and","Fragments":["are"]},{"Key":"and are","Fragments":["defined","wonderfully","slightly","thus"]},{"Key":"are defined","Fragments":["in","in","or"]},{"Key":"in contexts","Fragments":["where"]},{"Key":"contexts where","Fragments":["they"]},{"Key":"where they","Fragments":["won't","are","come"]},{"Key":"they won't","Fragments":["blow"]},{"Key":"won't blow","Fragments":["up,","everything"]},{"Key":"blow up,","Fragments":["receive"]},{"Key":"up, receive","Fragments":["nonsensical"]},{"Key":"receive nonsensical","Fragments":["input,"]},{"Key":"nonsensical input,","Fragments":["etc."]},{"Key":"I'm sure","Fragments":["there","there","there","there's","the","this","I'm","I","there's","Jose","there","we","that","you","there","there","my","there","an","there","there"]},{"Key":"sure there","Fragments":["is","are","are","is","are","are","must","must","are","are"]},{"Key":"good deal","Fragments":["of"]},{"Key":"deal of","Fragments":["internal"]},{"Key":"of internal","Fragments":["inconsistency"]},{"Key":"internal inconsistency","Fragments":["here,"]},{"Key":"inconsistency here,","Fragments":["but"]},{"Key":"here, but","Fragments":["I","I'll","it","I","the","it","hope","developing"]},{"Key":"that comes","Fragments":["pretty","straight"]},{"Key":"comes pretty","Fragments":["close"]},{"Key":"pretty close","Fragments":["to","to"]},{"Key":"close to","Fragments":["describing","each","`if`.","the"]},{"Key":"to describing","Fragments":["my"]},{"Key":"describing my","Fragments":["stance"]},{"Key":"my stance","Fragments":[":)."]},{"Key":" For","Fragments":["the","a","the","my","the","this","a","some","example,","the","the","the","example,","me","functions","the","example,","the","the","me","count","stuff","bonus","this","predicates","the","me","slightly","me,","example","details","an","`concat`","even","`count`,","`nucleotide_counts`,","the","the","the","`not_saying_anything`","chunking","`question?`","this","reverse","trivial","example,","readability,","the","readability,","my"]},{"Key":"For the","Fragments":["cond","sake","first,","purposes","one","private","definition","single","definitions","regex","@nyasia","unicode","functions","`pretty`","second"]},{"Key":"cond branches","Fragments":["as"]},{"Key":"branches as","Fragments":["well"]},{"Key":"well as","Fragments":["function","browsing","the","the","the","comparing","preferred","empty","my","it","the","tinkering","the","the"]},{"Key":"as function","Fragments":["definitions","clauses).","values"]},{"Key":"function definitions","Fragments":["(aside","for","to","on","defining","on","on"]},{"Key":"definitions (aside","Fragments":["from"]},{"Key":"(aside from","Fragments":["line","using"]},{"Key":"from line","Fragments":["15),","8"]},{"Key":"line 15),","Fragments":["I"]},{"Key":"15), I","Fragments":["decided"]},{"Key":"decided explicitly","Fragments":["to"]},{"Key":"explicitly to","Fragments":["use"]},{"Key":"use multiple","Fragments":["line","functions","function"]},{"Key":"multiple line","Fragments":["definitions.","form"]},{"Key":"line definitions.","Fragments":["For"]},{"Key":"definitions. For","Fragments":["a"]},{"Key":"For a","Fragments":["number","`else","first","better","list","list","list"]},{"Key":"a number","Fragments":["of","of","of","of","of","or","is","by","=","or"]},{"Key":"Consider the","Fragments":["cond:"]},{"Key":" cond","Fragments":["do","is","do","do","do","do","do","do"]},{"Key":" empty?","Fragments":["message","has"]},{"Key":"empty? message","Fragments":["-\u003e"]},{"Key":"message -\u003e","Fragments":["\"Fine.","\"Woah,","\"Sure.\""]},{"Key":"-\u003e \"Fine.","Fragments":["Be","Be","Be","Be","Be","Be"]},{"Key":"\"Fine. Be","Fragments":["that","that","that","that","that","that","that","that","that","that","that"]},{"Key":"Be that","Fragments":["way!\"","way!\"`","way!\"\"","way.\"","way!\"","way!\"","way!\"","way!\"","way!\"","way!\"","way!\""]},{"Key":" shouting?","Fragments":["message"]},{"Key":"shouting? message","Fragments":["-\u003e"]},{"Key":"-\u003e \"Woah,","Fragments":["chill","chill","chill"]},{"Key":"\"Woah, chill","Fragments":["out!\"","out!\"","out!\"","out!\"","out!\".","out!\"","out!\"","out!\"","out!\"","out!\"","out!\".","out!\""]},{"Key":" question?","Fragments":["message"]},{"Key":"question? message","Fragments":["-\u003e"]},{"Key":" true","Fragments":["-\u003e","-\u0026gt;","-\u003e","-\u003e","-\u003e"]},{"Key":"true -\u003e","Fragments":["\"Whatever\"","...;","filter(tail,","...`","\"Whatever.\""]},{"Key":" Actually,","Fragments":["that","I","given","I","one"]},{"Key":"Actually, that","Fragments":["reads"]},{"Key":"that reads","Fragments":["pretty","like"]},{"Key":"reads pretty","Fragments":["well."]},{"Key":"pretty well.","Fragments":["I"]},{"Key":"well. I","Fragments":["might","bet","don't","left","was"]},{"Key":"that change.","Fragments":["The",":)",":"]},{"Key":"change. The","Fragments":["only"]},{"Key":"The only","Fragments":["thing","thing","duplication","time","difference","thing","tiny-tiny","other","place","other","other","other","improvement","other","way","languages","other","thing","thing","reason","nit","hint","thing","other","thing","thing","nitpick","exception","minor","thing"]},{"Key":"only thing","Fragments":["about","that","that","I'd","I","that","I","that's","I","you","I","I'd"]},{"Key":"thing about","Fragments":["it","the","your"]},{"Key":"about it","Fragments":["that","in",":)","and","and","again","loudly","completely,","in","though,","the","without","when"]},{"Key":"it that","Fragments":["I","way","way","I'm","way.","is","way.","the","you","the","you","way,"]},{"Key":"don't like","Fragments":["is","about","that","it","my","dropping","the","how","that","that","the","this","the","the","treating","that","this","this","the"]},{"Key":"like is","Fragments":["the"]},{"Key":"the river","Fragments":["of"]},{"Key":"river of","Fragments":["```message"]},{"Key":"of ```message","Fragments":["-\u003e"]},{"Key":"```message -\u003e","Fragments":["```."]},{"Key":"-\u003e ```.","Fragments":["The"]},{"Key":"```. The","Fragments":["benefit"]},{"Key":"The benefit","Fragments":["of"]},{"Key":"benefit of","Fragments":["making","nesting","consistency","not"]},{"Key":"of making","Fragments":["```hey/1```","a","the"]},{"Key":"making ```hey/1```","Fragments":["that"]},{"Key":"```hey/1``` that","Fragments":["much"]},{"Key":"that much","Fragments":["shorter","nicer","in"]},{"Key":"much shorter","Fragments":["may","way","in","solution,"]},{"Key":"shorter may","Fragments":["be"]},{"Key":"may be","Fragments":["worth","a","overkill","useful","that","misremembering","more","trying","misunderstanding","you","used","written","a","because","omitted","written","a","missing","good","that","more","overkill.","useful","a","faster."]},{"Key":"be worth","Fragments":["it,","trying,","adding","it","it","figuring","exploring.","taking"]},{"Key":"worth it,","Fragments":["though."]},{"Key":"Let's see","Fragments":["how"]},{"Key":"how it","Fragments":["works","supports","would","deals","works.","behaves","works.","could","could","made","reads","reads:","is","would","would","reads.","works","takes","feels."]},{"Key":"works out","Fragments":["for","nicely"]},{"Key":"out for","Fragments":["the","your","arbitrary","practice.","review,"]},{"Key":"def empty?(nil),","Fragments":["do:","do:"]},{"Key":"empty?(nil), do:","Fragments":["true","true"]},{"Key":"def empty?(message),","Fragments":["do:","do:"]},{"Key":"empty?(message), do:","Fragments":["String.length(String.strip(message))","String.length(String.strip(message))"]},{"Key":"do: String.length(String.strip(message))","Fragments":["==","=="]},{"Key":"String.length(String.strip(message)) ==","Fragments":["0","0"]},{"Key":"def shouting?(message),","Fragments":["do:"]},{"Key":"shouting?(message), do:","Fragments":["String.upcase(message)"]},{"Key":"do: String.upcase(message)","Fragments":["=="]},{"Key":"String.upcase(message) ==","Fragments":["message"]},{"Key":"def question?(message),","Fragments":["do:"]},{"Key":"question?(message), do:","Fragments":["String.ends_with?(message,"]},{"Key":"do: String.ends_with?(message,","Fragments":["\"?\")"]},{"Key":" Certainly","Fragments":["the"]},{"Key":"Certainly the","Fragments":["Elixir"]},{"Key":"syntax makes","Fragments":["that"]},{"Key":"makes that","Fragments":["much","clear."]},{"Key":"much nicer","Fragments":["than","than","to"]},{"Key":"nicer than","Fragments":["it","mine.","`List.zip/1`","`cond`"]},{"Key":"be in,","Fragments":["say,"]},{"Key":"in, say,","Fragments":["Ruby.","Clojure."]},{"Key":"say, Ruby.","Fragments":["However,"]},{"Key":"Ruby. However,","Fragments":["I"]},{"Key":"However, I","Fragments":["don't","would","could","think","had","also","still","do","would","sense"]},{"Key":"don't feel","Fragments":["that","like","quite"]},{"Key":"that this","Fragments":["syntax","implementation","actually","is","is","is","is","isn't","way","uses","is","implies","doesn't","lets","module","is","clause","somehow"]},{"Key":"this syntax","Fragments":["is"]},{"Key":"syntax is","Fragments":["appropriate","new","a","cool!","in","mostly","a"]},{"Key":"is appropriate","Fragments":["when"]},{"Key":"appropriate when","Fragments":["the","you"]},{"Key":"the body","Fragments":["of","of","looks","of","of","of","of"]},{"Key":"body of","Fragments":["the","`hey`?","`Phrase.to_word_list/1`,","that","a","`count/1`","the"]},{"Key":"function is","Fragments":["more","triggered","that","pretty","always","a","pretty","more","doing","necessary","somewhat","overkill.","doing","doing","invoked","something","a","a","required.","not","a","quite","private","a","a","calling","a","quite","something","a","quite","that","a","quite","a","quite","intended","efficient","supposed","called","overkill.","super","a","perhaps","trivial,","a","quite","a","quite","doing"]},{"Key":"complex than","Fragments":["a","it"]},{"Key":"simple statement,","Fragments":["or"]},{"Key":"statement, or","Fragments":["where"]},{"Key":"or where","Fragments":["the","they"]},{"Key":"where the","Fragments":["output","meaning","author","second","kind","hyphen","pipeline","day","day","generators","`\u0026`","-1","are)","source","grades","state","\u0026append/2","last","second"]},{"Key":"the output","Fragments":["of","of","from","from","after","into","of","of","from","decision","of"]},{"Key":"output of","Fragments":["the","`Regex.scan/2`","the","`Enum.flat_map`","one"]},{"Key":"function could","Fragments":["be","be","be","be","be","use","be"]},{"Key":"be difficult","Fragments":["to"]},{"Key":"def plus_one(number),","Fragments":["do:"]},{"Key":"plus_one(number), do:","Fragments":["number"]},{"Key":"do: number","Fragments":["+"]},{"Key":"number +","Fragments":["1"]},{"Key":"def controlling_shares(stock),","Fragments":["do:"]},{"Key":"controlling_shares(stock), do:","Fragments":["stock"]},{"Key":"do: stock","Fragments":["/"]},{"Key":"stock /","Fragments":["2"]},{"Key":"/ 2","Fragments":["+"]},{"Key":"2 +","Fragments":["1","3","3","3"]},{"Key":" but","Fragments":["not","since","it","it","instead"]},{"Key":"but not","Fragments":["these:","clean/1).","`str`.","terribly","finding","sure.","when","really","codepoints,","particularly","all","\"-\"","for","for","usually","precise","sure","`-`,"]},{"Key":"def even?(number),","Fragments":["do:"]},{"Key":"even?(number), do:","Fragments":["rem(number,"]},{"Key":"do: rem(number,","Fragments":["2)"]},{"Key":"rem(number, 2)","Fragments":["=="]},{"Key":"2) ==","Fragments":["0"]},{"Key":"def send_message(chan,","Fragments":["message),"]},{"Key":"send_message(chan, message),","Fragments":["do:"]},{"Key":"message), do:","Fragments":["chan"]},{"Key":"do: chan","Fragments":["\u003c-"]},{"Key":"chan \u003c-","Fragments":["{"]},{"Key":"\u003c- {","Fragments":[":privmsg,"]},{"Key":"{ :privmsg,","Fragments":["message"]},{"Key":":privmsg, message","Fragments":["}"]},{"Key":" Big","Fragments":["oops,","+1"]},{"Key":"Big oops,","Fragments":["not"]},{"Key":"oops, not","Fragments":["finished,"]},{"Key":"not finished,","Fragments":["won't","but"]},{"Key":"finished, won't","Fragments":["let"]},{"Key":"won't let","Fragments":["me"]},{"Key":"let me","Fragments":["unsubmit.","overrwrite","optimize","say","thank","know","see","recall","know"]},{"Key":" Going","Fragments":["to"]},{"Key":"Going to","Fragments":["ask","submit","try"]},{"Key":"to ask","Fragments":["one","why?","for","if","if"]},{"Key":"ask one","Fragments":["final"]},{"Key":"one final","Fragments":["style"]},{"Key":"final style","Fragments":["question"]},{"Key":"style question","Fragments":["(or"]},{"Key":"question (or","Fragments":["two)."]},{"Key":"(or two).","Fragments":["Note,"]},{"Key":"two). Note,","Fragments":["I"]},{"Key":"Note, I","Fragments":["don't"]},{"Key":"the one","Fragments":["line","who","to","in","part","point","line","returned","that","letter","I","in","hand,","on","provided"]},{"Key":"one line","Fragments":["function","if",":-)","version",",","-","of","like"]},{"Key":"line function","Fragments":["definitions","definitions,"]},{"Key":"definitions for","Fragments":["any","the"]},{"Key":"for any","Fragments":["of","count","of","packed","mistakes","string","feedback","unicode","immediate","string"]},{"Key":"any of","Fragments":["your","the","this","the","them!","the","those"]},{"Key":"your other","Fragments":["function?","suggestions","method","comments."]},{"Key":"about combining","Fragments":["the"]},{"Key":"combining the","Fragments":["cond","map"]},{"Key":"cond conditions","Fragments":["-\u0026gt;"]},{"Key":"conditions -\u0026gt;","Fragments":["returns"]},{"Key":"-\u0026gt; returns","Fragments":["on"]},{"Key":"returns on","Fragments":["one"]},{"Key":"on one","Fragments":["line?","line,","line","line","he/she","line","line"]},{"Key":"Sorry, I","Fragments":["think","should","don't","don't"]},{"Key":"think we're","Fragments":["just","all"]},{"Key":"we're just","Fragments":["going"]},{"Key":"just going","Fragments":["to"]},{"Key":"to agree","Fragments":["to","with","with"]},{"Key":"agree to","Fragments":["disagree"]},{"Key":"think each","Fragments":["method"]},{"Key":"each method","Fragments":["`shouting?`,"]},{"Key":"method `shouting?`,","Fragments":["`question?`"]},{"Key":"`shouting?`, `question?`","Fragments":["and"]},{"Key":"`question?` and","Fragments":["`silence?`","`shouting?`","`silence?`.","`silence?()`","`yelling?`","`shouting?`"]},{"Key":"and `silence?`","Fragments":["should","public"]},{"Key":"`silence?` should","Fragments":["stand"]},{"Key":"should stand","Fragments":["alone"]},{"Key":"stand alone","Fragments":["and"]},{"Key":"alone and","Fragments":["return"]},{"Key":"and return","Fragments":["the","a","in"]},{"Key":"return the","Fragments":["correct","updated","HashDict","right","favor."]},{"Key":"correct boolean","Fragments":["regardless"]},{"Key":"boolean regardless","Fragments":["of"]},{"Key":"regardless of","Fragments":["how","which","whether","Q","Q."]},{"Key":"how or","Fragments":["where"]},{"Key":" Hehe,","Fragments":["every"]},{"Key":"Hehe, every","Fragments":["nitpick"]},{"Key":"every nitpick","Fragments":["so"]},{"Key":"nitpick so","Fragments":["far"]},{"Key":"far has","Fragments":["touched"]},{"Key":"has touched","Fragments":["on"]},{"Key":"touched on","Fragments":["guarding"]},{"Key":"on guarding","Fragments":["against"]},{"Key":"guarding against","Fragments":["nil","nil"]},{"Key":"against nil","Fragments":["values.","since","makes"]},{"Key":"nil values.","Fragments":["I"]},{"Key":"values. I","Fragments":["do"]},{"Key":"do not","Fragments":["like","mind","have","need","do","need","guard","have","need","have","acknowledge","see","know","use","know"]},{"Key":"not like","Fragments":["it","abbreviations","the","it"]},{"Key":"the way","Fragments":["I","if","on","it's","you","to","this","the","the","down","that","you","I've","I","to","you","you","you","to","the","that","you","you","it","the","you","to","to","it","you've","you","I"]},{"Key":"way I","Fragments":["do","see","solved","implemented","do","found","could","see","know","was"]},{"Key":"it here","Fragments":["either","below:","makes"]},{"Key":"here either","Fragments":["but"]},{"Key":"either but","Fragments":["never"]},{"Key":"but never","Fragments":["used","worked"]},{"Key":"never used","Fragments":["elixir"]},{"Key":"used elixir","Fragments":["before"]},{"Key":"elixir before","Fragments":["and"]},{"Key":"before and","Fragments":["haven't","forgot.","after"]},{"Key":"and haven't","Fragments":["found","found"]},{"Key":"haven't found","Fragments":["a","a"]},{"Key":"found a","Fragments":["better","ton","list","better","similar","regex"]},{"Key":"way yet.","Fragments":["I"]},{"Key":"yet. I","Fragments":["tried","think","see","understand"]},{"Key":"tried adding","Fragments":["another"]},{"Key":"adding another","Fragments":["quiet","Enum"]},{"Key":"another quiet","Fragments":["function"]},{"Key":"quiet function","Fragments":["with"]},{"Key":"a quard","Fragments":["on"]},{"Key":"quard on","Fragments":["`nil?(something)`"]},{"Key":"on `nil?(something)`","Fragments":["returning"]},{"Key":"`nil?(something)` returning","Fragments":["true"]},{"Key":"returning true","Fragments":["but","is"]},{"Key":"true but","Fragments":["that","`Regex.match?(%r/\\pL/u,"]},{"Key":"that felt","Fragments":["very"]},{"Key":"felt very","Fragments":["verbose."]},{"Key":"really do","Fragments":["not"]},{"Key":"not mind","Fragments":["more"]},{"Key":"mind more","Fragments":["specifc","often."]},{"Key":"more specifc","Fragments":["tips"]},{"Key":"specifc tips","Fragments":["at"]},{"Key":"tips at","Fragments":["this"]},{"Key":"at this","Fragments":["point","scale.","point.","exercise","for","point).","point,","point","point","version","exercise),","point."]},{"Key":"this point","Fragments":["=)","it's","it's","to","a"]},{"Key":" MOTHER","Fragments":["OF"]},{"Key":"MOTHER OF","Fragments":["GOD!"]},{"Key":"just used","Fragments":["`Regex#scan`","that","an","to"]},{"Key":"used `Regex#scan`","Fragments":["and"]},{"Key":"`Regex#scan` and","Fragments":["it"]},{"Key":"it got","Fragments":["so","fixed.","kind","accepted"]},{"Key":"got so","Fragments":["much","comfortable","excited."]},{"Key":"Yes, I","Fragments":["think","thought","think","think","can","mean","saw","was"]},{"Key":"think so.","Fragments":["I","I","All"]},{"Key":"so. I","Fragments":["also","guess"]},{"Key":"I also","Fragments":["changed","moved","tried","love","highly","think","think","used","disagree","think","think","think","wouldn't","played","tried","didn't","wonder","try","tried","realized","have","found","prefer","tried","noticed","like","renamed","removed","think","think","included","learned"]},{"Key":"also changed","Fragments":["methods","the"]},{"Key":"changed methods","Fragments":["from"]},{"Key":"methods from","Fragments":["one-liners","the"]},{"Key":"from one-liners","Fragments":["to"]},{"Key":"one-liners to","Fragments":["multi-liners,"]},{"Key":"to multi-liners,","Fragments":["which"]},{"Key":"multi-liners, which","Fragments":["is"]},{"Key":"readable in","Fragments":["my","elixir."]},{"Key":"my opinion.","Fragments":["See","I'll"]},{"Key":"opinion. See","Fragments":["next"]},{"Key":"Ah, that's","Fragments":["new","much"]},{"Key":"that's new","Fragments":["from"]},{"Key":"new from","Fragments":["when"]},{"Key":"from when","Fragments":["I"]},{"Key":"when I","Fragments":["did","was","realised","have","did","did","wrote","read","recommended","used","decided","\"finished\"","was","read","chose","skimmed","did","fetched","pass","discovered","wrote","was","pass","upgraded","get","can","get","wrote","first","was","first","put","run","did","did","start","have","leave","have","wrote","was","submit","did","read"]},{"Key":"did it.","Fragments":["You","Please"]},{"Key":"it. You","Fragments":["could","would"]},{"Key":"could always","Fragments":["add","use"]},{"Key":"always add","Fragments":["a","it"]},{"Key":"a different-arity","Fragments":["version"]},{"Key":"different-arity version","Fragments":["of"]},{"Key":"of `hey`,","Fragments":["or"]},{"Key":"`hey`, or","Fragments":["stick"]},{"Key":"or stick","Fragments":["with"]},{"Key":"stick with","Fragments":["the","this","how","`\u0026(\u00261+\u00262)`.","them,"]},{"Key":"the perfectly","Fragments":["reasonable"]},{"Key":"perfectly reasonable","Fragments":["`something"]},{"Key":"reasonable `something","Fragments":["="]},{"Key":" On","Fragments":["line","line","`question?`,","line","line","line","the","the","a","the","the","the","the","the","line","your","the","the","naming","reflection,","a"]},{"Key":"On line","Fragments":["7,","30,","32,","14","16:","11,","36"]},{"Key":"line 7,","Fragments":["do","you"]},{"Key":"7, do","Fragments":["you"]},{"Key":" Enum.reduce","Fragments":["words,","HashDict.new([{?A,"]},{"Key":"Enum.reduce words,","Fragments":["HashDict.new,"]},{"Key":"words, HashDict.new,","Fragments":["fn..."]},{"Key":"be cleaner","Fragments":["then","than","as"]},{"Key":"cleaner then","Fragments":["the","my"]},{"Key":"then the","Fragments":["pipe?","regex","whole","whole","\"public","bsl","example","original","clause","clause","total","`Enum.any?/2`"]},{"Key":" Yea","Fragments":["but","I"]},{"Key":"Yea but","Fragments":["`Teenager.hey(nil)`"]},{"Key":"but `Teenager.hey(nil)`","Fragments":["(from"]},{"Key":"`Teenager.hey(nil)` (from","Fragments":["`test"]},{"Key":"(from `test","Fragments":["\"empty"]},{"Key":"`test \"empty","Fragments":["silence\"`)"]},{"Key":"\"empty silence\"`)","Fragments":["will"]},{"Key":"silence\"`) will","Fragments":["still"]},{"Key":"will still","Fragments":["throw","receive","try","sort","return"]},{"Key":"still throw","Fragments":["and"]},{"Key":"throw and","Fragments":["error"]},{"Key":"and error","Fragments":["since","in"]},{"Key":"error since","Fragments":["it"]},{"Key":"since it","Fragments":["is","doesn't","defaults","only","will","extends","doesn't","only","tells","would"]},{"Key":"called with","Fragments":["nil","[{65,"]},{"Key":"with nil","Fragments":["as"]},{"Key":"nil as","Fragments":["an"]},{"Key":"can add","Fragments":["it","is","it","them"]},{"Key":"add it","Fragments":["directly","in","to","to"]},{"Key":"it directly","Fragments":["to","anyway."]},{"Key":"directly to","Fragments":["the","`Enum.filter`?","output"]},{"Key":"method signature","Fragments":["through","pattern","itself,"]},{"Key":"signature through","Fragments":["the"]},{"Key":"through the","Fragments":["`//`","crash","[Getting","rest.","language","standard","core","docs","`reduce`","few","`Regex`","entire","docs","DNA","`Access`","suggestions","trouble","whole","list,","list","name"]},{"Key":"the `//`","Fragments":["syntax:","(which"]},{"Key":"def hey(something","Fragments":["//"]},{"Key":"hey(something //","Fragments":["\"\")"]},{"Key":"// \"\")","Fragments":["do"]},{"Key":"I'd make","Fragments":["`scan_words`","`is_question?`,"]},{"Key":"make `scan_words`","Fragments":["accept"]},{"Key":"`scan_words` accept","Fragments":["both"]},{"Key":"accept both","Fragments":["string"]},{"Key":"both string","Fragments":["and"]},{"Key":"string and","Fragments":["regex,","strip","may","a"]},{"Key":"and regex,","Fragments":["so"]},{"Key":"regex, so","Fragments":["that","I","what's","I"]},{"Key":"can change","Fragments":["the","without","this"]},{"Key":"change the","Fragments":["word","name","code?","code?","parameter","way","predicates,","count","underlying","value","value","implementation","line","result.","provided"]},{"Key":"word criteria","Fragments":["down"]},{"Key":"criteria down","Fragments":["the"]},{"Key":"down the","Fragments":["line.","line","functional","source","latest","`to_anagram_key/1`","possible","road,","sentence"]},{"Key":" or","Fragments":["do"]},{"Key":"def hey(something)","Fragments":["do"]},{"Key":" something","Fragments":["="]},{"Key":"something =","Fragments":["something"]},{"Key":"But if","Fragments":["nil","anyone","you","we","I","I"]},{"Key":"if nil","Fragments":["is","is"]},{"Key":"nil is","Fragments":["explicitly","the","still"]},{"Key":"is explicitly","Fragments":["passed","the","mentioned"]},{"Key":"explicitly passed","Fragments":["to"]},{"Key":"passed to","Fragments":["hey","the","`count/1`.","a","the","`HashDict.update`","it,","it,","it.","it.","`Enum.filter`.","`Enum.reduce`","it.","it,","the","it","`Enum.reduce`."]},{"Key":"to hey","Fragments":["default"]},{"Key":"hey default","Fragments":["values"]},{"Key":"default values","Fragments":["for","of","for","-"]},{"Key":"values for","Fragments":["arguments","some","the","arguments."]},{"Key":"for arguments","Fragments":["wont"]},{"Key":"arguments wont","Fragments":["matter?"]},{"Key":"wont matter?","Fragments":["`quiet?`"]},{"Key":"matter? `quiet?`","Fragments":["will"]},{"Key":"`quiet?` will","Fragments":["still"]},{"Key":"still receive","Fragments":["nil"]},{"Key":"receive nil","Fragments":["and"]},{"Key":"and throw","Fragments":["an"]},{"Key":"throw an","Fragments":["error?","exception"]},{"Key":"an error?","Fragments":["Maybe"]},{"Key":"error? Maybe","Fragments":["im"]},{"Key":"Maybe im","Fragments":["missing"]},{"Key":"im missing","Fragments":["something"]},{"Key":"missing something","Fragments":["extremely","because","but","in"]},{"Key":"something extremely","Fragments":["obvious"]},{"Key":"extremely obvious","Fragments":["here"]},{"Key":"obvious here","Fragments":["=)"]},{"Key":"is an","Fragments":["improvement.","empty","interesting","important","interesting","awesome","example","anagram","infix","anagram","undocumented","interface,","implementation.","idiomatic","annoying","O(n^2)","optimization","Erlang","expensive","implementation","expression).","issue","`Elixir.match?/2`","interesting","implementation","area","internal","alternative","awesome","interface","equilvalent","excellent"]},{"Key":"an improvement.","Fragments":["You"]},{"Key":"improvement. You","Fragments":["could"]},{"Key":"could easily","Fragments":["use","avoid","implement"]},{"Key":"easily use","Fragments":["your"]},{"Key":"use your","Fragments":["`bottles_of_beer`","suggestion."]},{"Key":"your `bottles_of_beer`","Fragments":["helper"]},{"Key":"`bottles_of_beer` helper","Fragments":["once"]},{"Key":"helper once","Fragments":["more"]},{"Key":"once more","Fragments":["in"]},{"Key":"in `verse(0)`,","Fragments":["maybe"]},{"Key":"`verse(0)`, maybe","Fragments":["twice"]},{"Key":"maybe twice","Fragments":["with"]},{"Key":"twice with","Fragments":["some"]},{"Key":"with some","Fragments":["effort.","pattern","specific","changes","of","[partial"]},{"Key":"some effort.","Fragments":["Worth"]},{"Key":"effort. Worth","Fragments":["it?"]},{"Key":" Generally","Fragments":["I","speaking","`Enum.reduce`"]},{"Key":"Generally I","Fragments":["honor"]},{"Key":"I honor","Fragments":["the"]},{"Key":"honor the","Fragments":["80"]},{"Key":"the 80","Fragments":["char","character"]},{"Key":"80 char","Fragments":["limit."]},{"Key":"char limit.","Fragments":["If"]},{"Key":"limit. If","Fragments":["the"]},{"Key":"If the","Fragments":["function","cases","last","results","function","lists","list","phone"]},{"Key":"function body","Fragments":["is","of"]},{"Key":"body is","Fragments":["just"]},{"Key":"is just","Fragments":["a","not","sugar,","whitespace?","suggesting","minor,","too","me","my","a","a","as","shorthand","shorthand","bringing","this:","an","syntactic","slightly","`reduce`","kind","a"]},{"Key":"a series","Fragments":["of","of","of","of","of"]},{"Key":"series of","Fragments":["pipes","functions","functions","function","private"]},{"Key":"of pipes","Fragments":["or"]},{"Key":"pipes or","Fragments":["a"]},{"Key":"single expression","Fragments":["(which","in","btw"]},{"Key":"expression (which","Fragments":["is"]},{"Key":"(which is","Fragments":["the","once","more","pretty","the","the","very","unlikely)","extremely","what","extremely","what","what"]},{"Key":"the point","Fragments":["I'm","of","of","I","of","of","of","of","of"]},{"Key":"point I'm","Fragments":["trying"]},{"Key":"I'm trying","Fragments":["to","to","to","to","to","to"]},{"Key":"to refactor","Fragments":["these","the","this","later.","from","or","that"]},{"Key":"refactor these","Fragments":["to),"]},{"Key":"these to),","Fragments":["I'm"]},{"Key":"to), I'm","Fragments":["much"]},{"Key":"I'm much","Fragments":["more","happier"]},{"Key":"much more","Fragments":["on","beautiful.","readable","readable.","fun,","readable","accessible.","efficient","readable","efficient","than","common","readable.","clearly","readable","efficient","frequently.","concise","than","efficient"]},{"Key":"more on","Fragments":["the","those"]},{"Key":"Great feedback,","Fragments":["thank","thanks!"]},{"Key":"feedback, thank","Fragments":["you","you!","you!"]},{"Key":"thank you","Fragments":[":)","for","for","for","for","for","for","so","for"]},{"Key":"I hated","Fragments":["the"]},{"Key":" construct,","Fragments":["but"]},{"Key":"construct, but","Fragments":["for","I"]},{"Key":"some reason","Fragments":["it","I","the","something","I","I","I","I","just","all","I"]},{"Key":"reason it","Fragments":["didn't","didn't"]},{"Key":"it didn't","Fragments":["occur","work.","seem","really","actually","buy","made"]},{"Key":"didn't occur","Fragments":["to"]},{"Key":"occur to","Fragments":["me"]},{"Key":"use implicit","Fragments":["returns."]},{"Key":" Re:","Fragments":["```empty?/1```,","constants","imports","paretheses"]},{"Key":"Re: ```empty?/1```,","Fragments":["thank"]},{"Key":"```empty?/1```, thank","Fragments":["you."]},{"Key":"thank you.","Fragments":["Pattern","`List.foldl/3`","I'll","That"]},{"Key":"you. Pattern","Fragments":["matching"]},{"Key":"matching is","Fragments":["a","good,","more","a","cool,","also","so","better?"]},{"Key":"a fairly","Fragments":["simple","straightforward","good"]},{"Key":"fairly simple","Fragments":["thing"]},{"Key":"simple thing","Fragments":["to"]},{"Key":"thing to","Fragments":["understand,","consider","do","split","beat","keep","do,","know;","be","play"]},{"Key":"to understand,","Fragments":["but","although","but"]},{"Key":"understand, but","Fragments":["it","is"]},{"Key":"it usually","Fragments":["takes"]},{"Key":"usually takes","Fragments":["me"]},{"Key":"takes me","Fragments":["doing"]},{"Key":"me doing","Fragments":["something"]},{"Key":"something the","Fragments":["hard"]},{"Key":"the hard","Fragments":["way"]},{"Key":"hard way","Fragments":["and"]},{"Key":"way and","Fragments":["then","remembered","anonymous"]},{"Key":"then having","Fragments":["it"]},{"Key":"having it","Fragments":["pointed","inline.","as"]},{"Key":"it pointed","Fragments":["out"]},{"Key":"pointed out","Fragments":["to","to","that","that","to","to"]},{"Key":"out to","Fragments":["me","be","functions","be","`scan`,","`flatten`.","a","a","a","a","separate","me","the","Erlang","be","be","a","me","me","a","me"]},{"Key":"me before","Fragments":["I"]},{"Key":"before I","Fragments":["really","implement","realized","found","destroyed","decide"]},{"Key":"really grok","Fragments":["how"]},{"Key":"grok how","Fragments":["something"]},{"Key":"how something","Fragments":["is"]},{"Key":"you tried","Fragments":["piping","to"]},{"Key":"tried piping","Fragments":["the"]},{"Key":"piping the","Fragments":["results","output"]},{"Key":"the results","Fragments":["of","were","of","have","could","and","to","afterward)","of","(especially"]},{"Key":"results of","Fragments":["split","String.strip(...)","Regex.scan,"]},{"Key":"of split","Fragments":["directly"]},{"Key":"split directly","Fragments":["into"]},{"Key":"directly into","Fragments":["reduce","Enum.count"]},{"Key":"into reduce","Fragments":["to"]},{"Key":"reduce to","Fragments":["see"]},{"Key":"how that","Fragments":["feels?","construct","conversion","could","shorthand","looks."]},{"Key":"good. The","Fragments":["only","function/f","fact"]},{"Key":"thing that","Fragments":["I","could","is","bother","keeps","was","might","splits"]},{"Key":"would change","Fragments":["is","is"]},{"Key":"change is","Fragments":["the","to","the","to"]},{"Key":"the line","Fragments":["length","with","of","with","with","that","before","isn't","much","before"]},{"Key":"line length","Fragments":["\u0026gt;"]},{"Key":"length \u0026gt;","Fragments":["80."]},{"Key":"am a","Fragments":["big","complete","bit"]},{"Key":"a big","Fragments":["fan","flurry","deal,","disjunction","deal,","win","deal,","part","if-tree","deal","difference","problem","fan","enough","difference","enough","deal,","success!","part"]},{"Key":"big fan","Fragments":["of","of"]},{"Key":"the one-liner","Fragments":["functions,"]},{"Key":"one-liner functions,","Fragments":["but"]},{"Key":"functions, but","Fragments":["some","I","if","you're","it","strictly","I","I","I","this","I","I","I","even"]},{"Key":"but some","Fragments":["of"]},{"Key":"these just","Fragments":["seem"]},{"Key":"just seem","Fragments":["a"]},{"Key":"seem a","Fragments":["bit","little"]},{"Key":"complicated to","Fragments":["be","read."]},{"Key":"be one-liners","Fragments":["in"]},{"Key":"one-liners in","Fragments":["my"]},{"Key":"you see","Fragments":["my","exorcism","now.","it,","a"]},{"Key":"see my","Fragments":["comment","solution."]},{"Key":"my comment","Fragments":["on","states","because","about"]},{"Key":"comment on","Fragments":["your","why","the","the"]},{"Key":"your last","Fragments":["submission","question:"]},{"Key":"last submission","Fragments":["about"]},{"Key":"submission about","Fragments":["using"]},{"Key":"about using","Fragments":["`\\w+`","a","the","params","custom","Dict","single","`reduce`..","`Dict.update/3`","either","case"]},{"Key":"using `\\w+`","Fragments":["in"]},{"Key":"`\\w+` in","Fragments":["your"]},{"Key":"I'd just","Fragments":["compare","remove","used","swap","like","merge","reference","always"]},{"Key":"just compare","Fragments":["`something`","the"]},{"Key":"compare `something`","Fragments":["to"]},{"Key":"`something` to","Fragments":["an","reflect"]},{"Key":"to an","Fragments":["empty","empty","empty","anonymous","alternative","empty","old","integer.","Enum","`Enum`","operator"]},{"Key":"empty string,","Fragments":["and","it's","one"]},{"Key":"and use","Fragments":["empty","`Regex.scan`,","pattern","`Enum`","pattern","the","my","of","it","a","the","pattern","it","those","pipelining","the","character"]},{"Key":"use empty","Fragments":["string"]},{"Key":"string as","Fragments":["a","a","it","shouting"]},{"Key":"default parameter","Fragments":["in","value"]},{"Key":"parameter in","Fragments":["your","a"]},{"Key":"your `hey`","Fragments":["method."]},{"Key":"Hey Mike,","Fragments":["looking"]},{"Key":"Mike, looking","Fragments":["good!"]},{"Key":"to play","Fragments":["with","with","with","with"]},{"Key":"with implicit","Fragments":["return"]},{"Key":"implicit return","Fragments":["values"]},{"Key":"return values","Fragments":["in","(both"]},{"Key":"values in","Fragments":["Elixir","elixir","it,","`line2`","the"]},{"Key":"Elixir a","Fragments":["bit,","bit","lot"]},{"Key":"a bit,","Fragments":["you","but","for","maybe"]},{"Key":"bit, you","Fragments":["can"]},{"Key":"can make","Fragments":["most","the","this","functions","a","it","more","this","this","it","it"]},{"Key":"make most","Fragments":["of"]},{"Key":"most of","Fragments":["these","the","the","the","these","the","the","what","this.","the","the","the","the"]},{"Key":"these private","Fragments":["methods","functions"]},{"Key":"methods one","Fragments":["liners!"]},{"Key":"Another thing","Fragments":["to"]},{"Key":"consider is","Fragments":["the"]},{"Key":"the application","Fragments":["of","(for"]},{"Key":"application of","Fragments":["pattern"]},{"Key":"matching to","Fragments":["the","catch","the","catch","check","guards","get","achieve","get"]},{"Key":"the `empty?/1`","Fragments":["function"]},{"Key":"`empty?/1` function","Fragments":["with"]},{"Key":"with two","Fragments":["clauses.","codepoints).","cases","clauses,","fields).","separate","small"]},{"Key":"may have","Fragments":["a","better","to","gotten","another","misinterpreted","had","gotten","gone","been","something"]},{"Key":"a strong","Fragments":["aversion","defender"]},{"Key":"strong aversion","Fragments":["to"]},{"Key":"aversion to","Fragments":["parentheses.","parentheses"]},{"Key":"to parentheses.","Fragments":["In"]},{"Key":"parentheses. In","Fragments":["Elixir,"]},{"Key":"Elixir, at","Fragments":["least,"]},{"Key":"at least,","Fragments":["I","which","I","just"]},{"Key":"least, I","Fragments":["am","like"]},{"Key":"am finding","Fragments":["it"]},{"Key":"finding it","Fragments":["difficult","hard","hard"]},{"Key":"it difficult","Fragments":["to","to"]},{"Key":"to quickly","Fragments":["scan","grasp"]},{"Key":"quickly scan","Fragments":["the"]},{"Key":"scan the","Fragments":["function","words"]},{"Key":"names unless","Fragments":["there"]},{"Key":"unless there","Fragments":["are","are","was"]},{"Key":"there are","Fragments":["parentheses","alternatives","many","no","others","elixir","other","some","more","other","multiples","any","tests","spaces","much","no","many","some","too","actual","on","multiple","a","cases","hacks","thousands","any","no","performance","no","English","English","only","pretty","submissions","efficiencies","any","more","no","no","some","two","any","better","only","much","two"]},{"Key":"are parentheses","Fragments":["around"]},{"Key":"parentheses around","Fragments":["the","arguments","function","function","function","the","function","function","`HashDict.new`"]},{"Key":"the parameters.","Fragments":["Not"]},{"Key":"parameters. Not","Fragments":["having"]},{"Key":"Not having","Fragments":["parentheses"]},{"Key":"having parentheses","Fragments":["also","around"]},{"Key":"parentheses also","Fragments":["makes"]},{"Key":"also makes","Fragments":["it","testing","lines","the"]},{"Key":"it harder","Fragments":["to","to"]},{"Key":"harder to","Fragments":["see","understand","glance","read","read","read","notice","read","understand","read","read.","quickly"]},{"Key":"how many","Fragments":["parameters","variables","places","places","steps","there","people","times","times","private"]},{"Key":"many parameters","Fragments":["are"]},{"Key":"parameters are","Fragments":["used."]},{"Key":"a really","Fragments":["interesting","good","good","complicated","good","messy","good"]},{"Key":"really interesting","Fragments":["approach","feedback","things","to"]},{"Key":"the counting","Fragments":["algorithm.","function"]},{"Key":"counting algorithm.","Fragments":["I"]},{"Key":"algorithm. I","Fragments":["hadn't"]},{"Key":"hadn't seen","Fragments":["`HashDict.new`","`Enum.map_join`","streams"]},{"Key":"seen `HashDict.new`","Fragments":["invoked"]},{"Key":"`HashDict.new` invoked","Fragments":["in"]},{"Key":"invoked in","Fragments":["quite"]},{"Key":"in quite","Fragments":["this"]},{"Key":"quite this","Fragments":["way"]},{"Key":"this way","Fragments":["before.","-","better.","in","is","the","but","but","of","better."]},{"Key":"way before.","Fragments":["It's"]},{"Key":"before. It's","Fragments":["a"]},{"Key":"a neat","Fragments":["trick.","[expr"]},{"Key":"The downside","Fragments":["is","of","of","of"]},{"Key":"downside is","Fragments":["that"]},{"Key":"the call","Fragments":["to","to","to","from","to","to","to","to","is","sites.","signature"]},{"Key":"call to","Fragments":["`Enum.count`","`silence`","List.flatten,","!silence?","`do_count`.","List","`String.split`","`uniq`","`Regex.scan`.","`String.downcase`","verse/1","that","HashDict.new.","just","isolate","the","itself","itself.","the","the","the","the","`allergic_to?`","the","the","the","`reverse`)."]},{"Key":"to `Enum.count`","Fragments":["inside"]},{"Key":"`Enum.count` inside","Fragments":["`count_same_word`"]},{"Key":"inside `count_same_word`","Fragments":["is"]},{"Key":"`count_same_word` is","Fragments":["actually"]},{"Key":"is actually","Fragments":["touching","doing","a","an","rarely","quicker","for","a","the","longer","a"]},{"Key":"actually touching","Fragments":["every"]},{"Key":"touching every","Fragments":["item"]},{"Key":"every item","Fragments":["in","in"]},{"Key":"item in","Fragments":["the","the","list,","the"]},{"Key":"whole list,","Fragments":["every"]},{"Key":"list, every","Fragments":["time"]},{"Key":"every time","Fragments":["it","for","it","it's","I","-","you","and","you","you"]},{"Key":"time it","Fragments":["is","compares"]},{"Key":"called (which","Fragments":["is"]},{"Key":"is once","Fragments":["per"]},{"Key":"once per","Fragments":["item","term,"]},{"Key":"per item","Fragments":["in"]},{"Key":"the list).","Fragments":["I'm"]},{"Key":"list). I'm","Fragments":["no"]},{"Key":"I'm no","Fragments":["expert"]},{"Key":"no expert","Fragments":["on"]},{"Key":"expert on","Fragments":["these"]},{"Key":"on these","Fragments":["things,"]},{"Key":"these things,","Fragments":["but"]},{"Key":"things, but","Fragments":["I","the"]},{"Key":"this algorithm","Fragments":["run"]},{"Key":"algorithm run","Fragments":["in"]},{"Key":"run in","Fragments":["roughly","quadratic","my"]},{"Key":"in roughly","Fragments":["n^2"]},{"Key":"roughly n^2","Fragments":["time."]},{"Key":"n^2 time.","Fragments":["So"]},{"Key":"time. So","Fragments":["if"]},{"Key":"So if","Fragments":["you"]},{"Key":"you fed","Fragments":["it","it"]},{"Key":"fed it","Fragments":["1000","a"]},{"Key":"it 1000","Fragments":["times"]},{"Key":"1000 times","Fragments":["as"]},{"Key":"times as","Fragments":["much","long","part","long","long"]},{"Key":"much data","Fragments":["as"]},{"Key":"data as","Fragments":["the"]},{"Key":"test suite","Fragments":["(perhaps","when","green","runs","you're","when","doesn't","though","implied","expects","or","was","when","uses","it","does","have","didn't","does","in","or","is","completes","running","is","doesn't","ran"]},{"Key":"suite (perhaps","Fragments":["the"]},{"Key":"(perhaps the","Fragments":["text"]},{"Key":"the text","Fragments":["from","in","out","here","then"]},{"Key":"text from","Fragments":["a","the"]},{"Key":"a magazine","Fragments":["feature"]},{"Key":"magazine feature","Fragments":["article),"]},{"Key":"feature article),","Fragments":["it"]},{"Key":"article), it","Fragments":["might"]},{"Key":"might take","Fragments":["1,000,000"]},{"Key":"take 1,000,000","Fragments":["times"]},{"Key":"1,000,000 times","Fragments":["as"]},{"Key":"as long","Fragments":["to","as","as","as","as","as","as","as","as","as","as"]},{"Key":"long to","Fragments":["complete.","read","fit","run?"]},{"Key":" With","Fragments":["that","regards","the","regards","pminten's","regard","`acc`","regard","that","that","the"]},{"Key":"With that","Fragments":["in","in","flow,","removed"]},{"Key":"in mind,","Fragments":["you","but","but","great,"]},{"Key":"mind, you","Fragments":["might"]},{"Key":"consider ways","Fragments":["to"]},{"Key":"ways to","Fragments":["generate","prevent","say","do","approach","simplify","do","write","improve","apply","encode","detect","get","do","use"]},{"Key":"generate a","Fragments":["count"]},{"Key":"a count","Fragments":["without","for"]},{"Key":"count without","Fragments":["this"]},{"Key":"without this","Fragments":["inner"]},{"Key":"this inner","Fragments":["`Enum.count`"]},{"Key":"inner `Enum.count`","Fragments":["call."]},{"Key":" Nowhere.","Fragments":["I"]},{"Key":"Nowhere. I","Fragments":["just"]},{"Key":"just took","Fragments":["the"]},{"Key":"took the","Fragments":["latest","liberty"]},{"Key":"the latest","Fragments":["set","Elixir","changes","tests","version","tests","2","tests","version.","one...","test"]},{"Key":"latest set","Fragments":["of"]},{"Key":"set of","Fragments":["tests","rules.","words.","bits,","expressions","exercises,","functions","exercises","unique","messages,","characters"]},{"Key":"of tests","Fragments":["from","than","I","in"]},{"Key":"tests from","Fragments":["the"]},{"Key":"the git","Fragments":["repository"]},{"Key":"git repository","Fragments":["and","and"]},{"Key":"repository and","Fragments":["it","compiled"]},{"Key":"it contained","Fragments":["test"]},{"Key":"contained test","Fragments":["`assert"]},{"Key":"test `assert","Fragments":["Teenager.hey(nil)"]},{"Key":"`assert Teenager.hey(nil)","Fragments":["=="]},{"Key":"Teenager.hey(nil) ==","Fragments":["\"Fine."]},{"Key":"== \"Fine.","Fragments":["Be","Be","Be"]},{"Key":"that way!\"`","Fragments":["which"]},{"Key":"way!\"` which","Fragments":["was"]},{"Key":"which was","Fragments":["not"]},{"Key":"was not","Fragments":["present","aware","quite","able","aware","happy","aware","recommended.","aware","correctly","very","sure","to"]},{"Key":"not present","Fragments":["in","in"]},{"Key":"present in","Fragments":["the","the"]},{"Key":"suite when","Fragments":["I","solving","I"]},{"Key":"was doing","Fragments":["it.","it","mine.","that.","this.","in","at","before,","this"]},{"Key":"The first","Fragments":["version","quiet?/1","check","version","thing","thing","will"]},{"Key":"of `match/2`","Fragments":["is"]},{"Key":"`match/2` is","Fragments":["what"]},{"Key":"is what","Fragments":["is","I've","we","I'm","you","I","bothers","happens","I","it","is","determines","makes","the","the","I'm","made","it"]},{"Key":"is currently","Fragments":["triggered."]},{"Key":"currently triggered.","Fragments":["(I've"]},{"Key":"triggered. (I've","Fragments":["tested"]},{"Key":"(I've tested","Fragments":["both"]},{"Key":"tested both","Fragments":["ways,"]},{"Key":"both ways,","Fragments":["and"]},{"Key":"ways, and","Fragments":["both","Elixir's"]},{"Key":"and both","Fragments":["approaches"]},{"Key":"both approaches","Fragments":["pass.)"]},{"Key":"approaches pass.)","Fragments":["I"]},{"Key":"pass.) I","Fragments":["just"]},{"Key":"try my","Fragments":["hand"]},{"Key":"my hand","Fragments":["two"]},{"Key":"hand two","Fragments":["different"]},{"Key":"different ways.","Fragments":["I'm"]},{"Key":"ways. I'm","Fragments":["interested"]},{"Key":"I'm interested","Fragments":["in","only","only","in","in"]},{"Key":"interested in","Fragments":["any","being","deciphering","any","\u003ccode\u003e//\u003c/code\u003e","that","moving","besides","submitting","your","any"]},{"Key":"in any","Fragments":["feedback,","of","feedback.","order.","case,","language.","case.","case","other","way","hints."]},{"Key":"any feedback,","Fragments":["on"]},{"Key":"feedback, on","Fragments":["either"]},{"Key":"on either","Fragments":["implementation."]},{"Key":"I recognize","Fragments":["now"]},{"Key":"recognize now","Fragments":["that"]},{"Key":"that I've","Fragments":["rebuilt","written","just","done"]},{"Key":"I've rebuilt","Fragments":["`Enum.filter`"]},{"Key":"rebuilt `Enum.filter`","Fragments":["with"]},{"Key":"`Enum.filter` with","Fragments":["tail","a"]},{"Key":"with tail","Fragments":["recursion.","recursion","recursion","recursion","recursion,"]},{"Key":"tail recursion.","Fragments":["Part","Tail","Tail","There","Tail","Tail","Tail","Thanks!","Tail","Let","Tail"]},{"Key":"recursion. Part","Fragments":["of"]},{"Key":"Part of","Fragments":["what's","the"]},{"Key":"of what's","Fragments":["attracting","actually","happening.","matched."]},{"Key":"what's attracting","Fragments":["me"]},{"Key":"attracting me","Fragments":["to"]},{"Key":"is how","Fragments":["it","Bob","that","you","you"]},{"Key":"supports that","Fragments":["kind"]},{"Key":"that kind","Fragments":["of","of"]},{"Key":"of list-based","Fragments":["functional"]},{"Key":"list-based functional","Fragments":["programming."]},{"Key":"can resubmit","Fragments":["an"]},{"Key":"resubmit an","Fragments":["`Enum.filter`"]},{"Key":"an `Enum.filter`","Fragments":["version","then"]},{"Key":"`Enum.filter` version","Fragments":["that"]},{"Key":"does something","Fragments":["like","different."]},{"Key":"def match(word,","Fragments":["possible_anagrams)","[candidate_anagram","anagrams)","potential_anagrams)","potential_anagrams)"]},{"Key":"match(word, possible_anagrams)","Fragments":["do"]},{"Key":" possible_anagrams","Fragments":["|\u0026gt;"]},{"Key":"possible_anagrams |\u0026gt;","Fragments":["Enum.filter(fn(word2)"]},{"Key":"|\u0026gt; Enum.filter(fn(word2)","Fragments":["-\u0026gt;"]},{"Key":"Enum.filter(fn(word2) -\u0026gt;","Fragments":["anagram_match(word,"]},{"Key":"-\u0026gt; anagram_match(word,","Fragments":["word2)"]},{"Key":"anagram_match(word, word2)","Fragments":["end)"]},{"Key":" \u003e","Fragments":["added","You","Why","Is","You're","In","If","if","Regex","I'm"]},{"Key":"\u003e added","Fragments":["a"]},{"Key":"added a","Fragments":["nil","nil","doc","new","few","new"]},{"Key":"a nil","Fragments":["check","check","argument).","(or","field"]},{"Key":"nil check","Fragments":["in","in","in"]},{"Key":"check in","Fragments":["silence?","silence?,","the","the","`shouty?`","the"]},{"Key":" Where","Fragments":["do","`count`","do"]},{"Key":"Where do","Fragments":["you","you"]},{"Key":"you mention","Fragments":["adding","it,","it,","the"]},{"Key":"mention adding","Fragments":["this"]},{"Key":"adding this","Fragments":["in"]},{"Key":"this in","Fragments":["your","the","the","the","languages","as","the","iex.","my","Elixir","very","O(n","a","`match`:","production,","the","the","Elixir.","Ruby"]},{"Key":"your previous","Fragments":["comment?","submission,","suggestion","version,","iteration"]},{"Key":"I've made","Fragments":["a","that","changes","all"]},{"Key":"made a","Fragments":["habit","nit","difference","small"]},{"Key":"a habit","Fragments":["of","of"]},{"Key":"habit of","Fragments":["avoiding","using","adding","trying"]},{"Key":"of avoiding","Fragments":["magic","it."]},{"Key":"avoiding magic","Fragments":["strings."]},{"Key":"magic strings.","Fragments":["They"]},{"Key":"strings. They","Fragments":["are"]},{"Key":"just as","Fragments":["evil","well","a","easily","lazy","you","I","easily","well"]},{"Key":"as evil","Fragments":["as"]},{"Key":"evil as","Fragments":["magic"]},{"Key":"as magic","Fragments":["numbers."]},{"Key":"magic numbers.","Fragments":["For","Perhaps"]},{"Key":"numbers. For","Fragments":["this","example,"]},{"Key":"For this","Fragments":["small","exercise","exercise","exercise,","exercise,","specific"]},{"Key":"this small","Fragments":["amount"]},{"Key":"small amount","Fragments":["of","of"]},{"Key":"of code,","Fragments":["it"]},{"Key":"code, it","Fragments":["doesn't","considers"]},{"Key":"a difference.","Fragments":["I","I","In"]},{"Key":"difference. I","Fragments":["just","need"]},{"Key":"just like","Fragments":["to","to","to","to"]},{"Key":" Your","Fragments":["suggestion","three","implementation","answer","`count`","argument","identical","`match_word`","parenthesis","silence","isSilence","`zip/2`","string","regex","use","code","`same_letters`","`nucleotide_counts`","use","`filter_valid`","filter","regex","overall","code","code","`String.split`","`append`","`has_letters?`","`count_words`","typespec","current","word","submission","`append`","`concat`","code","`allergic_to?`","concatenation","\u003ccode\u003ehey\u003c/code\u003e","submission","doc"]},{"Key":"Your suggestion","Fragments":["actually"]},{"Key":"suggestion actually","Fragments":["does"]},{"Key":"actually does","Fragments":["not","more","return"]},{"Key":"does not","Fragments":["eliminate","make","work","check","allow","need","look","appear","appear","represent","take","warn","appear","(although","include","seem","work","have","perform","call","like"]},{"Key":"not eliminate","Fragments":["the"]},{"Key":"the empty","Fragments":["check.","string?","phrase.","string","string","parens.","string","string","string","dict","list","string.","list","list"]},{"Key":"empty check.","Fragments":["It"]},{"Key":"check. It","Fragments":["fails"]},{"Key":"It fails","Fragments":["the"]},{"Key":"fails the","Fragments":["test","\"no","\"ignore"]},{"Key":"test case","Fragments":["for","to","with","that","for"]},{"Key":"case for","Fragments":["\"","elixir's","a","\"!\"","-1","a","a","it,"]},{"Key":"for \"","Fragments":["\"."]},{"Key":"Yea I","Fragments":["think"]},{"Key":"what alanpeabody","Fragments":["was"]},{"Key":"alanpeabody was","Fragments":["trying"]},{"Key":"was trying","Fragments":["to","to","to","to","to","to","to","to","a","other"]},{"Key":"to nudge","Fragments":["me"]},{"Key":"nudge me","Fragments":["towards"]},{"Key":"me towards","Fragments":["in"]},{"Key":"towards in","Fragments":["(iteration"]},{"Key":"in (iteration","Fragments":["three)[http://exercism.io/submissions/5200f77aa402f8c7930002b7]"]},{"Key":"(iteration three)[http://exercism.io/submissions/5200f77aa402f8c7930002b7]","Fragments":["but"]},{"Key":"three)[http://exercism.io/submissions/5200f77aa402f8c7930002b7] but","Fragments":["I"]},{"Key":"couldn't quite","Fragments":["figure","work"]},{"Key":"quite figure","Fragments":["it"]},{"Key":"it out.","Fragments":["First","So","But"]},{"Key":"out. First","Fragments":["time"]},{"Key":"First time","Fragments":["elixir","using"]},{"Key":"time elixir","Fragments":["for"]},{"Key":"elixir for","Fragments":["me","instance","a"]},{"Key":"for me","Fragments":["and","because","is","to","as","it´s","though.","due","is","to","a","to","(even","to","to","to"]},{"Key":"me and","Fragments":["I"]},{"Key":"haven't wrapped","Fragments":["my"]},{"Key":"wrapped my","Fragments":["head"]},{"Key":"my head","Fragments":["around","against","around","around.","against","that","around","the","against","around","around"]},{"Key":"head around","Fragments":["it","the","elixir.","it","the"]},{"Key":"around it","Fragments":["yet."]},{"Key":"thing ,","Fragments":["your","you","you"]},{"Key":", your","Fragments":["\u003ccode\u003equiet?\u003c/code\u003e","code"]},{"Key":"your \u003ccode\u003equiet?\u003c/code\u003e","Fragments":["function"]},{"Key":"\u003ccode\u003equiet?\u003c/code\u003e function","Fragments":["could"]},{"Key":"be refactored","Fragments":["with","into"]},{"Key":"refactored with","Fragments":["one"]},{"Key":"with one","Fragments":["much","less"]},{"Key":"one much","Fragments":["simpler","better."]},{"Key":"much simpler","Fragments":[",","use","way","way","when"]},{"Key":"simpler ,","Fragments":["only"]},{"Key":", only","Fragments":["check"]},{"Key":"only check","Fragments":["if","their"]},{"Key":"check if","Fragments":["is","a","a","it","the","a","a","up","a","the","both","a"]},{"Key":"if is","Fragments":["an"]},{"Key":"But ,","Fragments":["it´s"]},{"Key":", it´s","Fragments":["not"]},{"Key":"it´s not","Fragments":["more"]},{"Key":"not more","Fragments":["readable"]},{"Key":"if extract","Fragments":["the"]},{"Key":"And the","Fragments":["name","more","\u003ccode\u003elist\u003c/code\u003e","attributes","more","@","thought","process","separate","thing"]},{"Key":"the parameter","Fragments":["\u003ccode\u003es\u003c/code\u003e","to","to","in","names","list","list"]},{"Key":"parameter \u003ccode\u003es\u003c/code\u003e","Fragments":["doesn´t"]},{"Key":"\u003ccode\u003es\u003c/code\u003e doesn´t","Fragments":["say"]},{"Key":"doesn´t say","Fragments":["much"]},{"Key":"say much","Fragments":["...","..","no?",","]},{"Key":"That's neat","Fragments":["and"]},{"Key":"neat and","Fragments":["concise","shorter"]},{"Key":"and concise","Fragments":["for"]},{"Key":"concise for","Fragments":["an"]},{"Key":"an elixir","Fragments":["programmer","expert,","nit"]},{"Key":"elixir programmer","Fragments":["to"]},{"Key":"programmer to","Fragments":["understand,"]},{"Key":"understand, although","Fragments":["is"]},{"Key":"although is","Fragments":["unclear"]},{"Key":"is unclear","Fragments":["for"]},{"Key":"unclear for","Fragments":["a"]},{"Key":"Consider extracting","Fragments":["the"]},{"Key":"conditions into","Fragments":["methods","their","private","predicate","separate","the"]},{"Key":"into methods","Fragments":["that"]},{"Key":"that represent","Fragments":["the"]},{"Key":"represent the","Fragments":["teenager"]},{"Key":"the teenager","Fragments":["domain","get","is","is"]},{"Key":"teenager domain","Fragments":["model."]},{"Key":"domain model.","Fragments":["Also"]},{"Key":"model. Also","Fragments":["consider"]},{"Key":"consider renaming","Fragments":["the","it"]},{"Key":"renaming the","Fragments":["`s`","`count`","`count`"]},{"Key":"the `s`","Fragments":["argument."]},{"Key":"Now that","Fragments":["you","your","I'm","the"]},{"Key":"mention it,","Fragments":["the","I"]},{"Key":"the `!is_binary(something)`","Fragments":["seems"]},{"Key":"`!is_binary(something)` seems","Fragments":["silly"]},{"Key":"seems silly","Fragments":["as"]},{"Key":"silly as","Fragments":["well"]},{"Key":"a regular","Fragments":["`!something","expression","expression.","expression"]},{"Key":"regular `!something","Fragments":["||"]},{"Key":"`!something ||","Fragments":["\"\""]},{"Key":"|| \"\"","Fragments":["=="]},{"Key":"\"\" ==","Fragments":["something","something","\"\"```","String.strip(phrase)"]},{"Key":"== something","Fragments":["|\u003e","|\u003e"]},{"Key":"something |\u003e","Fragments":["String.strip`","String.strip"]},{"Key":"|\u003e String.strip`","Fragments":["maybe?"]},{"Key":"is too","Fragments":["much","formal"]},{"Key":"much code","Fragments":["for","just"]},{"Key":"code for","Fragments":["this","the","?","that","it","that"]},{"Key":"Why not","Fragments":["remove","just","just","use","just","downcase","`Enum.count`?","just","compare","`\"\"","give","use"]},{"Key":"not remove","Fragments":["all"]},{"Key":"remove all","Fragments":["*invalid*"]},{"Key":"all *invalid*","Fragments":["chars"]},{"Key":"*invalid* chars","Fragments":["from"]},{"Key":"chars from","Fragments":["the"]},{"Key":"string from","Fragments":["the"]},{"Key":"the very","Fragments":["start,","start,","latest","nice","first","end","next"]},{"Key":"very start,","Fragments":["or","instead"]},{"Key":"start, or","Fragments":["just"]},{"Key":"or just","Fragments":["produce","use","a","`list`"]},{"Key":"just produce","Fragments":["a"]},{"Key":"produce a","Fragments":["list","function","single"]},{"Key":"a list","Fragments":["of","to","of","of","of","of","of","comparison","of","of","of","and","of","of","of","of","of","of","of","of","of","comprehension","ready","and","of","in","of","of","of","of","is","of","of","so","like","is","of","of","comprehension,","comprehension","comprehension","of","using","of","as","of","to","of","when","comprehension","comprehension","of","of","(you're","to","comprehension","of","(though","between","[1,","of","of","of","of","of","of","first,","[1,","of","of","of","of","of","by","of","so","of","of","comprehension","of","of","comprehension","of","of","and","`[[1,2],[3,4],[5,6]]`:","of","of","with","with","is","of","when","to","of","of","of","of","of","is","is","or","of","of","of","comprehension","comprehension?"]},{"Key":"of words","Fragments":["by","which","for","instead","with","using","from","from"]},{"Key":"words by","Fragments":["Regex.scan"]},{"Key":"by Regex.scan","Fragments":["from"]},{"Key":"Regex.scan from","Fragments":["the"]},{"Key":"start, instead","Fragments":["of"]},{"Key":"of all","Fragments":["the","words,","of","I'll","the"]},{"Key":"the complexity","Fragments":["in"]},{"Key":"complexity in","Fragments":["`clean(word)`?","the"]},{"Key":" Same","Fragments":["goes",":)","problem"]},{"Key":"Same goes","Fragments":["for"]},{"Key":"goes for","Fragments":["`downcase`","\"Whatever.\""]},{"Key":"for `downcase`","Fragments":["in"]},{"Key":"`downcase` in","Fragments":["`clean`,"]},{"Key":"in `clean`,","Fragments":["why"]},{"Key":"`clean`, why","Fragments":["not"]},{"Key":"why not","Fragments":["do","make","just","put","factor","reuse","try","`if","write"]},{"Key":"not do","Fragments":["it","anything"]},{"Key":"it once","Fragments":["for","I"]},{"Key":"once for","Fragments":["the","the","the","every","each","the","retrieving","each","every"]},{"Key":" fire","Fragments":["up"]},{"Key":"fire up","Fragments":["iex"]},{"Key":"up iex","Fragments":["to","and"]},{"Key":"iex to","Fragments":["play"]},{"Key":"matching a","Fragments":["bit:","correct","letter","number."]},{"Key":" iex(1)\u003e","Fragments":["nil","nil","str","c(\"roman.exs\")","a..b","Regex.run(~r/\\w+/,","Regex.split(~r/\\W+/,"]},{"Key":"iex(1)\u003e nil","Fragments":["=","="]},{"Key":"nil =","Fragments":["\"\"","nil"]},{"Key":" **","Fragments":["(MatchError)","(SyntaxError)","(FunctionClauseError)","(ArgumentError)","(ArgumentError)","(FunctionClauseError)","(ArgumentError)","(SyntaxError)","(SyntaxError)","(ExUnit.ExpectationError)","(SyntaxError)"]},{"Key":"** (MatchError)","Fragments":["no"]},{"Key":"(MatchError) no","Fragments":["match"]},{"Key":"no match","Fragments":["of"]},{"Key":"match of","Fragments":["right"]},{"Key":"of right","Fragments":["hand"]},{"Key":"right hand","Fragments":["side"]},{"Key":"hand side","Fragments":["value:"]},{"Key":"side value:","Fragments":["\"\""]},{"Key":"be even","Fragments":["more","more"]},{"Key":"even more","Fragments":["simplified.","passes.","readable.","than","awesomeness,"]},{"Key":"more simplified.","Fragments":["The"]},{"Key":"simplified. The","Fragments":["first"]},{"Key":"first quiet?/1","Fragments":["clause"]},{"Key":"quiet?/1 clause","Fragments":["could"]},{"Key":"clause could","Fragments":["use"]},{"Key":"use simple","Fragments":["pattern"]},{"Key":"simple pattern","Fragments":["matching"]},{"Key":"to catch","Fragments":["nils,","case-insensitive","the"]},{"Key":"catch nils,","Fragments":["removing"]},{"Key":"nils, removing","Fragments":["the"]},{"Key":"removing the","Fragments":["need","characters","length"]},{"Key":"the need","Fragments":["for","for","for","to","of","of","to","for","for","even","for","to","for","to","to","for","for","for","for","for"]},{"Key":" Line","Fragments":["20","7","16","10","21","17","~10"]},{"Key":"Line 20","Fragments":["actually","can"]},{"Key":"20 actually","Fragments":["reads"]},{"Key":"actually reads","Fragments":["slightly","better"]},{"Key":"reads slightly","Fragments":["strangely"]},{"Key":"slightly strangely","Fragments":["to"]},{"Key":"strangely to","Fragments":["me,"]},{"Key":"consider not","Fragments":["using"]},{"Key":"not using","Fragments":["a","the","the","Regex.scan","`HashDict.new`","a"]},{"Key":"a pipe","Fragments":["in","and"]},{"Key":"pipe in","Fragments":["this"]},{"Key":" like","Fragments":["such?"]},{"Key":"defp quiet?(something)","Fragments":["when","when"]},{"Key":"quiet?(something) when","Fragments":["nil?(something)","is_binary(something)"]},{"Key":"when nil?(something)","Fragments":["do"]},{"Key":"when is_binary(something)","Fragments":["do"]},{"Key":" \"\"","Fragments":["==","might","might"]},{"Key":"be honest","Fragments":["I","I","I","I"]},{"Key":"honest I","Fragments":["haven't","can't","don't","don't"]},{"Key":"haven't got","Fragments":["a"]},{"Key":"a clue,","Fragments":["first"]},{"Key":"clue, first","Fragments":["time"]},{"Key":"first time","Fragments":["I","I've","I've","I've","users","I've"]},{"Key":"time I","Fragments":["touch","can","get","used","looked","abandoned","wanted","forget","didn't"]},{"Key":"I touch","Fragments":["elixir"]},{"Key":"touch elixir","Fragments":["=)"]},{"Key":"on arguments,","Fragments":["but"]},{"Key":"arguments, but","Fragments":["maybe","that"]},{"Key":"but maybe","Fragments":["it","a","8","I'm","the"]},{"Key":"maybe it","Fragments":["is"]},{"Key":"bit excessive","Fragments":["here?"]},{"Key":"a nice","Fragments":["rule-based","solution.","alternative","readable","method","solution,","balance","job!","domain","trick","visual","function","way","side-effect.","convention","way","solution","descriptive"]},{"Key":"nice rule-based","Fragments":["approach,"]},{"Key":"rule-based approach,","Fragments":["I"]},{"Key":"approach, I","Fragments":["really"]},{"Key":"like it!","Fragments":["It","Thanks","On","Also"]},{"Key":"it! It","Fragments":["would"]},{"Key":"It would","Fragments":["be","be","make","be","be","make","be","be","be","be","be","be","be","be"]},{"Key":"be easy","Fragments":["to","enough","to"]},{"Key":"easy to","Fragments":["come","have","read,","comprehend.","grasp.","get","read.","read","check","understand.","see","understand.","generate","add","write.","read,","support","define","define","underestimate","read","define","compare","define","define","follow.","see","read","read","read.","understand.","define","define"]},{"Key":"to come","Fragments":["up","up","after","before","up","up","back","across"]},{"Key":"with another","Fragments":["type","design","one","string.","sorted"]},{"Key":"another type","Fragments":["of"]},{"Key":"of person","Fragments":["with"]},{"Key":"person with","Fragments":["a"]},{"Key":"different set","Fragments":["of"]},{"Key":"of rules.","Fragments":["In"]},{"Key":"rules. In","Fragments":["this"]},{"Key":"this light,","Fragments":["how"]},{"Key":"light, how","Fragments":["about"]},{"Key":"about moving","Fragments":["the","the","those"]},{"Key":"code common","Fragments":["for"]},{"Key":"common for","Fragments":["different","a","small","the"]},{"Key":" of","Fragments":["people","course"]},{"Key":"of people","Fragments":["to","use","seem"]},{"Key":"people to","Fragments":["a","explore","use"]},{"Key":"the answer","Fragments":["to","is","will","to","won't","beforehand.","doesn't"]},{"Key":"answer to","Fragments":["this,","all"]},{"Key":"to this,","Fragments":["but"]},{"Key":"this, but","Fragments":["would","it's","does","then","I'm","it","there's","I"]},{"Key":"would adding","Fragments":["in"]},{"Key":"adding in","Fragments":["guards/pattern","the"]},{"Key":"in guards/pattern","Fragments":["matching"]},{"Key":"guards/pattern matching","Fragments":["make"]},{"Key":"matching make","Fragments":["the"]},{"Key":"the `quiet?/1`","Fragments":["function"]},{"Key":"`quiet?/1` function","Fragments":["more"]},{"Key":"function more","Fragments":["clear?","of","simple,"]},{"Key":"the way.","Fragments":["Is"]},{"Key":"way. Is","Fragments":["there"]},{"Key":"get simple","Fragments":["List"]},{"Key":"simple List","Fragments":["of"]},{"Key":"List of","Fragments":["matches"]},{"Key":"of matches","Fragments":["after","or","would"]},{"Key":"matches after","Fragments":["Regex.scan,"]},{"Key":"after Regex.scan,","Fragments":["so"]},{"Key":"Regex.scan, so","Fragments":["I"]},{"Key":"could not","Fragments":["use","think","get","use","figure","found"]},{"Key":"not use","Fragments":["List.flatten?","`String.last`","two","the","the","explicit","cond.","the","`reduce`","it."]},{"Key":"use List.flatten?","Fragments":["I"]},{"Key":"List.flatten? I","Fragments":["can't"]},{"Key":"can't figure","Fragments":["it","out","out","out","out","out","out"]},{"Key":"If something","Fragments":["is"]},{"Key":"not obvious","Fragments":["it","what"]},{"Key":"obvious it","Fragments":["only"]},{"Key":"it only","Fragments":["means","has","iterates","makes","works","works","helps","where"]},{"Key":"only means","Fragments":["you"]},{"Key":"means you","Fragments":["don't","have","can"]},{"Key":"understand something","Fragments":["and"]},{"Key":"something and","Fragments":["you","have"]},{"Key":"to think","Fragments":["more.","through","a","about.","of","the","about","about","of","of","of","of","of","about","about"]},{"Key":"just taken","Fragments":["your"]},{"Key":"taken your","Fragments":["code,","suggestions"]},{"Key":"your code,","Fragments":["removed","but","you"]},{"Key":"code, removed","Fragments":["the"]},{"Key":"the unnecessary","Fragments":["call","clauses."]},{"Key":"unnecessary call","Fragments":["to"]},{"Key":"to `silence`","Fragments":["from"]},{"Key":"`silence` from","Fragments":["`shouting?`,"]},{"Key":"from `shouting?`,","Fragments":["moved"]},{"Key":"`shouting?`, moved","Fragments":["`silence?(speech)"]},{"Key":"moved `silence?(speech)","Fragments":["-\u003e`"]},{"Key":"`silence?(speech) -\u003e`","Fragments":["up,"]},{"Key":"-\u003e` up,","Fragments":["added"]},{"Key":"up, added","Fragments":["a"]},{"Key":"in silence?,","Fragments":["and"]},{"Key":"silence?, and","Fragments":["it"]},{"Key":"it passes","Fragments":["all","the"]},{"Key":"passes all","Fragments":["tests.","tests,","tests,"]},{"Key":"actually took","Fragments":["a"]},{"Key":"took a","Fragments":["slightly","novel","stab","few","slightly","lot"]},{"Key":"slightly different","Fragments":["approach","approach","(1","sense","variable","than","makes"]},{"Key":"different approach","Fragments":["and","to","here.","in"]},{"Key":"approach and","Fragments":["replaced"]},{"Key":"and replaced","Fragments":["all","by"]},{"Key":"replaced all","Fragments":["the"]},{"Key":"the not","Fragments":["\\w","so"]},{"Key":"not \\w","Fragments":["with"]},{"Key":"\\w with","Fragments":["spaces"]},{"Key":"with spaces","Fragments":["in","you"]},{"Key":"spaces in","Fragments":["the","the"]},{"Key":"pipeline then","Fragments":["split."]},{"Key":"sentence |\u0026gt;","Fragments":["downcase"]},{"Key":"|\u0026gt; downcase","Fragments":["|\u0026gt;"]},{"Key":"downcase |\u0026gt;","Fragments":["scrub"]},{"Key":"|\u0026gt; scrub","Fragments":["|\u0026gt;"]},{"Key":"scrub |\u0026gt;","Fragments":["split"]},{"Key":"|\u0026gt; split","Fragments":["|\u0026gt;"]},{"Key":"split |\u0026gt;","Fragments":["count_words"]},{"Key":"bit different","Fragments":["solution,"]},{"Key":"different solution,","Fragments":["more"]},{"Key":"solution, more","Fragments":["verbose"]},{"Key":"more verbose","Fragments":["perhaps,","implementation","than","fn","if"]},{"Key":"verbose perhaps,","Fragments":["but"]},{"Key":"perhaps, but","Fragments":["I"]},{"Key":"I happen","Fragments":["to"]},{"Key":"happen to","Fragments":["like","have"]},{"Key":"to like","Fragments":["the","using"]},{"Key":"the declarative","Fragments":["nature"]},{"Key":"declarative nature","Fragments":["of","of"]},{"Key":"nature of","Fragments":["each","to_words","the","the","calendars","it,","the"]},{"Key":"of each","Fragments":["action","letter","line,","word","condition.","condition","list"]},{"Key":"each action","Fragments":["in"]},{"Key":"action in","Fragments":["the"]},{"Key":"don't believe","Fragments":["so,"]},{"Key":"believe so,","Fragments":["but"]},{"Key":"so, but","Fragments":["you","there"]},{"Key":"but you","Fragments":["could","end","should","could","could","get","don't","can.","are","don't","can","can","can","lose","could","would","are","do","could","do"]},{"Key":"could at","Fragments":["least"]},{"Key":"at least","Fragments":["remove","in","to","conformant","in","in","ahead","one","tried","include","it's","a","for","for","when","one","one","one","how","to",":-)","not","tried.","one","half","one","some","one","that","more","one","into","a","find","two"]},{"Key":"least remove","Fragments":["some"]},{"Key":"some logic","Fragments":["by"]},{"Key":"logic by","Fragments":["using"]},{"Key":"a character","Fragments":["class","class","class","class","class","list,","in","based","class","list"]},{"Key":"character class","Fragments":["(`\\w`)","to","to","to","to","that","with","of","[:punct:]"]},{"Key":"class (`\\w`)","Fragments":["in"]},{"Key":"(`\\w`) in","Fragments":["the"]},{"Key":"Cool, thanks","Fragments":["for","for","for"]},{"Key":"the insight.","Fragments":["One"]},{"Key":"insight. One","Fragments":["of"]},{"Key":"One of","Fragments":["the","the","the","the","the"]},{"Key":"the things","Fragments":["I","that","they","I"]},{"Key":"things I","Fragments":["like","should","noticed:","didn't","wished","might","loved"]},{"Key":"like about","Fragments":["exercism.io","having","it?","this"]},{"Key":"about exercism.io","Fragments":["is"]},{"Key":"exercism.io is","Fragments":["you"]},{"Key":"is you","Fragments":["get"]},{"Key":"to learn","Fragments":["on","it.","how","to","about","for","Elixir","about","to"]},{"Key":"learn on","Fragments":["both"]},{"Key":"on both","Fragments":["sides"]},{"Key":"both sides","Fragments":["of"]},{"Key":"sides of","Fragments":["the","the"]},{"Key":"the nitpick","Fragments":["button.","you","to:"]},{"Key":"Looks great,","Fragments":["I","only"]},{"Key":"great, I","Fragments":["think","have"]},{"Key":"this simpler","Fragments":["is","and"]},{"Key":"simpler is","Fragments":["using"]},{"Key":"is using","Fragments":["character","is","default"]},{"Key":"using character","Fragments":["classes","lists,"]},{"Key":"character classes","Fragments":["in","were","to","(`[[:alpha:]]`)","rather","for","instead?","for","instead"]},{"Key":"classes in","Fragments":["your","Elixir,"]},{"Key":"your regular","Fragments":["expression.","expression"]},{"Key":"should have","Fragments":["caught","simple","used",";-)","something","the","failed","thought","at","come","to","added","been","used","a","made"]},{"Key":"have caught","Fragments":["this"]},{"Key":"caught this","Fragments":["earlier,"]},{"Key":"this earlier,","Fragments":["but"]},{"Key":"earlier, but","Fragments":["I"]},{"Key":"believe Elixir","Fragments":["prefers"]},{"Key":"Elixir prefers","Fragments":["2"]},{"Key":"prefers 2","Fragments":["spaces"]},{"Key":"spaces for","Fragments":["indentation.","indentation."]},{"Key":"can't actually","Fragments":["find","use"]},{"Key":"actually find","Fragments":["anything"]},{"Key":"anything that","Fragments":["says","is","lets","explains","implements","implements","seemed"]},{"Key":"that says","Fragments":["this","\"Ok,"]},{"Key":"says this","Fragments":["straight"]},{"Key":"this straight","Fragments":["out,"]},{"Key":"straight out,","Fragments":["but"]},{"Key":"out, but","Fragments":["between"]},{"Key":"but between","Fragments":["the"]},{"Key":"Ruby influence","Fragments":["and"]},{"Key":"influence and","Fragments":["the"]},{"Key":"the two","Fragments":["space","strands","lines","nucleotides.","words","lines","lines...","```String```","clauses","letter","letter","clauses.","clauses.","`Regex.match?`","operations","semi-complex","clause","clauses","parameters","tests","compare","definitions","private","lists","lists,","declarations"]},{"Key":"two space","Fragments":["indenting"]},{"Key":"space indenting","Fragments":["in"]},{"Key":"indenting in","Fragments":["the"]},{"Key":"language itself","Fragments":["I"]},{"Key":"itself I","Fragments":["do"]},{"Key":"Nice and","Fragments":["concise,","simple,","concise.","minimal.","clean,"]},{"Key":"and concise,","Fragments":["but"]},{"Key":"concise, but","Fragments":["have","they","there","it's","it's","the"]},{"Key":"but have","Fragments":["you"]},{"Key":"considered extracting","Fragments":["conditions","the"]},{"Key":"extracting conditions","Fragments":["to","into"]},{"Key":"separate intention","Fragments":["revealing"]},{"Key":"revealing methods?","Fragments":["And"]},{"Key":"methods? And","Fragments":["maybe"]},{"Key":"And maybe","Fragments":["there"]},{"Key":"to implement","Fragments":["it","a","that","`parse`.","this,","my","`Teenger.empty?/1`","another","almost","this","that","'up',","most/all","it","both.","`concat`","this.","the","`append`","all","an","all","`concat/1`","the","concat,","append"]},{"Key":"implement it","Fragments":["without","in"]},{"Key":"it without","Fragments":["Regex?","thinking","the","using","sacrificing","OTP","change","having","any"]},{"Key":"\u003e You","Fragments":["have"]},{"Key":"You have","Fragments":["not","made","not","made","two","a","two","an","the","the","three","left","two","two"]},{"Key":"have not","Fragments":["removed","removed","tried,","completed","noticed","seen"]},{"Key":"not removed","Fragments":["the","the"]},{"Key":"extra check.","Fragments":["You","You"]},{"Key":"check. You","Fragments":["have","have"]},{"Key":"have made","Fragments":["it","it","pair_up","sense","my"]},{"Key":"made it","Fragments":["indirect.","indirect.","that","even","for","easier","to","possible"]},{"Key":"it indirect.","Fragments":["You","You"]},{"Key":"indirect. You","Fragments":["still","still"]},{"Key":"You still","Fragments":["check","check","recompute"]},{"Key":"still check","Fragments":["for","for"]},{"Key":"silence from","Fragments":["inside","inside"]},{"Key":"from inside","Fragments":["of","of"]},{"Key":"inside of","Fragments":["shouting?","`shouting?`","`hey/1`","cond,","`process`","one","the","append."]},{"Key":"of shouting?","Fragments":["!"]},{"Key":"shouting? !","Fragments":["Why?"]},{"Key":" Less","Fragments":["of"]},{"Key":"Less of","Fragments":["the"]},{"Key":"the ?!,","Fragments":["yeah?"]},{"Key":"?!, yeah?","Fragments":[":)"]},{"Key":"\u003e Why","Fragments":["not"]},{"Key":"not just","Fragments":["move","move","submit","have","an","use","binaries,","comparison","variables.","at","lists.","explicit","convenient?","a-z?"]},{"Key":"just move","Fragments":["the","the","the","the","your"]},{"Key":"the silence","Fragments":["clause","function,","I"]},{"Key":"silence clause","Fragments":["in"]},{"Key":"clause in","Fragments":["cond","`cond`","place.","`for_iter`.","`cond`.","a","`reduce`.","sublist?"]},{"Key":"in cond","Fragments":["up"]},{"Key":"cond up","Fragments":["to"]},{"Key":"up to","Fragments":["be","be","review","a","you","and","date,","`O(n^2)`,"]},{"Key":"first one,","Fragments":["and","and"]},{"Key":"one, and","Fragments":["then","then"]},{"Key":"can remove","Fragments":["redundant","redundant","quite","the"]},{"Key":"remove redundant","Fragments":["code","code"]},{"Key":"redundant code","Fragments":["from","from"]},{"Key":"code from","Fragments":["shouting?","`shouting?`"]},{"Key":"from shouting?","Fragments":["leaving"]},{"Key":"shouting? leaving","Fragments":["only"]},{"Key":"leaving only","Fragments":["the","the"]},{"Key":"only the","Fragments":["upcase","upcase","parts","elements","dialyzer","numeral","letters.","10","`Order.new(...)`","`count`","partial","first"]},{"Key":"the upcase","Fragments":["check","check","and"]},{"Key":" Because,","Fragments":["if"]},{"Key":"Because, if","Fragments":["anyone"]},{"Key":"if anyone","Fragments":["ever","ever","can","can","else","knows","has","has"]},{"Key":"anyone ever","Fragments":["re-orders","re-orders"]},{"Key":"ever re-orders","Fragments":["the","cond"]},{"Key":"re-orders the","Fragments":["`cond`,"]},{"Key":"the `cond`,","Fragments":["tests","that","and"]},{"Key":"`cond`, tests","Fragments":["will"]},{"Key":"tests will","Fragments":["start","break"]},{"Key":"will start","Fragments":["failing","tailoring"]},{"Key":"start failing","Fragments":["and"]},{"Key":"failing and","Fragments":["it"]},{"Key":"it won't","Fragments":["be","be","bother"]},{"Key":"won't be","Fragments":["obvious","tail","reused","a","able","hit"]},{"Key":"be obvious","Fragments":["why."]},{"Key":"obvious why.","Fragments":["That"]},{"Key":"why. That","Fragments":["can't"]},{"Key":"That can't","Fragments":["happen"]},{"Key":"can't happen","Fragments":["duplicating","with"]},{"Key":"happen duplicating","Fragments":["the"]},{"Key":"duplicating the","Fragments":["check","entire","@lincoln"]},{"Key":"empty string.","Fragments":["Not","Why","I'm"]},{"Key":"string. Not","Fragments":["all"]},{"Key":"Not all","Fragments":["duplication"]},{"Key":"all duplication","Fragments":["is"]},{"Key":"duplication is","Fragments":["bad."]},{"Key":"of `shouting?`","Fragments":["!"]},{"Key":"`shouting?` !","Fragments":["Why?"]},{"Key":"`silence` clause","Fragments":["in"]},{"Key":"in `cond`","Fragments":["up","forms"]},{"Key":"`cond` up","Fragments":["to"]},{"Key":"from `shouting?`","Fragments":["leaving"]},{"Key":"`shouting?` leaving","Fragments":["only"]},{"Key":"good question,","Fragments":["one"]},{"Key":"question, one","Fragments":["part"]},{"Key":"one part","Fragments":["of","of"]},{"Key":"answer is","Fragments":["I"]},{"Key":"is I","Fragments":["suppose"]},{"Key":"I suppose","Fragments":["I","\"is_\"","this","it","they","I","you","here","this","is","I","you","you","I","the","it","that's","the"]},{"Key":"suppose I","Fragments":["have","could","could","used"]},{"Key":"have done","Fragments":["this","it","it","this","is"]},{"Key":"done this","Fragments":["exercise","exercise","exercise)","better,","exercise"]},{"Key":"in so","Fragments":["many","many","many"]},{"Key":"so many","Fragments":["languages","different","questions...","functions,","temporary","of","different","nested","arguments"]},{"Key":"many languages","Fragments":["now"]},{"Key":"languages now","Fragments":["so"]},{"Key":"now so","Fragments":["I"]},{"Key":"just wrote","Fragments":["it"]},{"Key":"wrote it","Fragments":["without"]},{"Key":"without thinking","Fragments":["(in"]},{"Key":"thinking (in","Fragments":["ruby"]},{"Key":"(in ruby","Fragments":["I"]},{"Key":"ruby I","Fragments":["had"]},{"Key":"had `respond_to","Fragments":["Phrase.new(something)`)"]},{"Key":"But when","Fragments":["I"]},{"Key":"I realised","Fragments":["I've","that"]},{"Key":"realised I've","Fragments":["typed"]},{"Key":"I've typed","Fragments":["it"]},{"Key":"typed it","Fragments":["I"]},{"Key":"it I","Fragments":["kinda","could","think","like"]},{"Key":"I kinda","Fragments":["liked","like","like","like"]},{"Key":"kinda liked","Fragments":["having"]},{"Key":"liked having","Fragments":["the"]},{"Key":"conditional in","Fragments":["a","`_add_word`.","`count_words/2`?","singalong","the"]},{"Key":"a private","Fragments":["method","check","function","function","function","function.","function.","helper","function,","function","named","module","function","method","function","function.","helper","function.","module","module","\"reverse_inner\"","method"]},{"Key":"private method","Fragments":["and","names?","and","with","called","called","on"]},{"Key":"method and","Fragments":["having","maaaybe","variable","guard","it","no","one","call"]},{"Key":"and having","Fragments":["the","`to_words`","a","`discard`","`[]`"]},{"Key":"public really","Fragments":["short."]},{"Key":"really short.","Fragments":["But","I"]},{"Key":"short. But","Fragments":["no"]},{"Key":"But no","Fragments":["I"]},{"Key":"no I","Fragments":["do","meant"]},{"Key":"not have","Fragments":["a","expressive","parentheses.","that","a","have","a"]},{"Key":"really good","Fragments":["reason","point","start.","performance"]},{"Key":"good reason","Fragments":["tbh","not","so","for","(such"]},{"Key":"reason tbh","Fragments":["=)"]},{"Key":"tbh =)","Fragments":["Think"]},{"Key":"=) Think","Fragments":["I"]},{"Key":"Think I","Fragments":["should"]},{"Key":"conditional up","Fragments":["into"]},{"Key":"up into","Fragments":["`hey`?","functions","a"]},{"Key":"What the","Fragments":["point"]},{"Key":"of extracting","Fragments":["responses","those"]},{"Key":"extracting responses","Fragments":["to"]},{"Key":"responses to","Fragments":["module"]},{"Key":"to module","Fragments":["attributes?"]},{"Key":"module attributes?","Fragments":["The","I"]},{"Key":"attributes? The","Fragments":["only"]},{"Key":"only duplication","Fragments":["which"]},{"Key":"duplication which","Fragments":["is"]},{"Key":"is solves","Fragments":["is"]},{"Key":"solves is","Fragments":["`@reagan`."]},{"Key":" `_empty?(nil)`","Fragments":["will"]},{"Key":"`_empty?(nil)` will","Fragments":["be"]},{"Key":"be never","Fragments":["called"]},{"Key":"called because","Fragments":["of"]},{"Key":"because of","Fragments":["`is_binary(text)`.","a","this,","the","\"f\"","3","the","`Dict.merge`","concat","constraints","`Enum.slice`","how","how","the"]},{"Key":" Moreover,","Fragments":["you"]},{"Key":"Moreover, you","Fragments":["can"]},{"Key":"can completely","Fragments":["eliminate"]},{"Key":"completely eliminate","Fragments":["empty"]},{"Key":"eliminate empty","Fragments":["check"]},{"Key":"empty check","Fragments":["by"]},{"Key":"check by","Fragments":["`hey`"]},{"Key":"by `hey`","Fragments":["pattern"]},{"Key":"`hey` pattern","Fragments":["matching"]},{"Key":"matching like","Fragments":["so:"]},{"Key":"def hey(nil),","Fragments":["do:"]},{"Key":"hey(nil), do:","Fragments":["@reagan"]},{"Key":"def hey(\"\"),","Fragments":["do:"]},{"Key":"hey(\"\"), do:","Fragments":["hey"]},{"Key":"do: hey","Fragments":["nil"]},{"Key":"will take","Fragments":["a","100%","twice","0","1","twice","0","1"]},{"Key":"a look","Fragments":["at","on","at","at","at","at","at","at","at","at","and","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","at","so","at","at","at,","at","at","at","at","at","at","at","at","[here](https://github.com/marcioj/exercism/blob/master/elixir/bob/bob_test.exs)","at","in","also","in","at","at","at"]},{"Key":"at `HashDict.update/4`.","Fragments":[";)"]},{"Key":" About","Fragments":["aliasing,","this","the","the","`HashDict.update/4`,","`include_letters?`:","your","indenting","multiple","the","the"]},{"Key":"About aliasing,","Fragments":["I"]},{"Key":"aliasing, I","Fragments":["wanted"]},{"Key":"have intend","Fragments":["revealing"]},{"Key":"intend revealing","Fragments":["names"]},{"Key":"revealing names","Fragments":["in","for"]},{"Key":"names in","Fragments":["the","Elixir)?","Elixir.","front","Erlang.","general"]},{"Key":"pipeline actually,","Fragments":["instead"]},{"Key":"actually, instead","Fragments":["of"]},{"Key":"of implementation","Fragments":["revealing.","details"]},{"Key":" `to_words`","Fragments":["is"]},{"Key":"`to_words` is","Fragments":["done"]},{"Key":"is done","Fragments":["with","before","after"]},{"Key":"done with","Fragments":["`split`,","String","just","Conway's"]},{"Key":"with `split`,","Fragments":["but"]},{"Key":"`split`, but","Fragments":["it"]},{"Key":"be another","Fragments":["solution,"]},{"Key":"another solution,","Fragments":["and"]},{"Key":"solution, and","Fragments":["in"]},{"Key":"case the","Fragments":["`count`","check","underlying","one","exception","operation"]},{"Key":"the `count`","Fragments":["function","name","function,","function,","function","function,","in","function","function","function","function","function","function","method,","method","function","function"]},{"Key":"`count` function","Fragments":["would","you","is","is","is","in","is","is","is","is","is"]},{"Key":"function would","Fragments":["not","read","make","be","help","be","be","be"]},{"Key":"This was","Fragments":["by","an","an","my","definitely","fine","more"]},{"Key":"was by","Fragments":["far"]},{"Key":"by far","Fragments":["my","the","the"]},{"Key":"far my","Fragments":["biggest"]},{"Key":"my biggest","Fragments":["code","uncertainty","complaint","hurdle"]},{"Key":"biggest code","Fragments":["in"]},{"Key":"code in","Fragments":["Elixir","a","that","Javascript","List","Elixir.","elixir.","a","the","question,","`angrams?`","`uppercase?`","common.","a","a","`filter`","Elixir.","my","large"]},{"Key":"how `List#foldl`","Fragments":["works,"]},{"Key":"`List#foldl` works,","Fragments":["really"]},{"Key":"works, really","Fragments":["handles"]},{"Key":"really handles","Fragments":["the"]},{"Key":"handles the","Fragments":["reduce","nested","float/int"]},{"Key":"the reduce","Fragments":["job.","callback","function","approach","solution","version","(also","operation","call.","call...","construct,","function","function","callback","function"]},{"Key":"I hate","Fragments":["having","the","the","regexes,"]},{"Key":"hate having","Fragments":["`if"]},{"Key":"having `if","Fragments":[".."]},{"Key":"`if ..","Fragments":["else"]},{"Key":".. else","Fragments":[".."]},{"Key":"else ..","Fragments":["end`"]},{"Key":".. end`","Fragments":["inside","where"]},{"Key":"end` inside","Fragments":["the"]},{"Key":"the `List#foldl`,","Fragments":["which"]},{"Key":"`List#foldl`, which","Fragments":["makes"]},{"Key":"which makes","Fragments":["it","the","me","them","it","it"]},{"Key":"it really","Fragments":["complicated","necessary","should","isn't","makes","creates"]},{"Key":"really complicated","Fragments":["to","way"]},{"Key":"to read.","Fragments":["I'm","It's","Think","What","You","You're","I","I"]},{"Key":"read. I'm","Fragments":["not"]},{"Key":"if an","Fragments":["extract","empty","example","entire","empty"]},{"Key":"an extract","Fragments":["method"]},{"Key":"extract method","Fragments":["would"]},{"Key":"method would","Fragments":["do"]},{"Key":"would do","Fragments":["much.","that?","there","it?","for"]},{"Key":" Overall,","Fragments":["I'm","very"]},{"Key":"Overall, I'm","Fragments":["not"]},{"Key":"with Elixir","Fragments":["patterns","means","is","so","code?"]},{"Key":"Elixir patterns","Fragments":["and"]},{"Key":"patterns and","Fragments":["idiom"]},{"Key":"and idiom","Fragments":["yet."]},{"Key":"idiom yet.","Fragments":["I"]},{"Key":"it shows","Fragments":["up."]},{"Key":"I extracted","Fragments":["a","it","the","the","both"]},{"Key":"extracted a","Fragments":["method","well-named"]},{"Key":"also moved","Fragments":["the"]},{"Key":"the `|\u003e`","Fragments":["operator","at","creates","at","operator,","operator","flow","operator"]},{"Key":"`|\u003e` operator","Fragments":["to","can","for","to"]},{"Key":"operator to","Fragments":["the","use","a","break","clearly"]},{"Key":"the beginning","Fragments":["of","of","(in","of","of","of","of","of","of","seems"]},{"Key":"beginning of","Fragments":["the","the","the","each","the","the","the","the"]},{"Key":"the line,","Fragments":["but","so"]},{"Key":"line, but","Fragments":["added"]},{"Key":"but added","Fragments":["an"]},{"Key":"added an","Fragments":["indentation"]},{"Key":"an indentation","Fragments":["to"]},{"Key":"indentation to","Fragments":["it."]},{"Key":"forgot about","Fragments":["`cond`.","that.","that","it"]},{"Key":"about `cond`.","Fragments":["Thanks"]},{"Key":"`cond`. Thanks","Fragments":["for"]},{"Key":"As for","Fragments":["the","the","improvements,","the","the","downcasing","why","learning","the","`generate`","anonymous","Algebra,","iterators,","naming,","as","the","algorithms","readability,"]},{"Key":"the `defp`,","Fragments":["my"]},{"Key":"`defp`, my","Fragments":["editor"]},{"Key":"my editor","Fragments":["automatically","was"]},{"Key":"editor automatically","Fragments":["inserts"]},{"Key":"automatically inserts","Fragments":["the"]},{"Key":"inserts the","Fragments":["`_`"]},{"Key":"the `_`","Fragments":["since","char...","like"]},{"Key":"`_` since","Fragments":["it's"]},{"Key":"a common","Fragments":["convention","pattern...accumulating","pattern","name","way"]},{"Key":"common convention","Fragments":["with","is"]},{"Key":"convention with","Fragments":["Elixir."]},{"Key":"with Elixir.","Fragments":["Though,","Went","If","Hope"]},{"Key":"Elixir. Though,","Fragments":["it's"]},{"Key":"Though, it's","Fragments":["more"]},{"Key":"it's more","Fragments":["common","true","direct","that","likely","idiomatic","idiomatic","immediately","readable","common","readable.","conventional.","common","idiomatic","common","legible."]},{"Key":"more common","Fragments":["when","to","in","than","to","to","btw.","in","to"]},{"Key":"common when","Fragments":["creating"]},{"Key":"when creating","Fragments":["a"]},{"Key":"creating a","Fragments":["helper","protocol?","handy","list","dict","new","second"]},{"Key":"a helper","Fragments":["function","function","private","function","function","for","function,","module","function"]},{"Key":"helper function","Fragments":["with","perhaps?","perhaps?","vs.","for","`bottle`","that","to","is","for,","such","for"]},{"Key":"same name","Fragments":["as","`count`","return","as"]},{"Key":"as it's","Fragments":["parent","indeed","really","easy","immutable,","intended","designed","doing","more"]},{"Key":"it's parent","Fragments":["function."]},{"Key":"The reduce","Fragments":["step"]},{"Key":"reduce step","Fragments":["is"]},{"Key":"step is","Fragments":["very","a","trying"]},{"Key":"very nicely","Fragments":["concise,"]},{"Key":"nicely concise,","Fragments":["especially"]},{"Key":"concise, especially","Fragments":["with"]},{"Key":"especially with","Fragments":["the","your","the","names","the","the"]},{"Key":"argument provided","Fragments":["implicitly"]},{"Key":"provided implicitly","Fragments":["by"]},{"Key":"implicitly by","Fragments":["the"]},{"Key":"the pipe","Fragments":["operator.","operator","operator","here","would","operator","operator","operator","into","forward","operator","forward","operator.","operator","operator.","operator,","operator.","at"]},{"Key":"pipe operator.","Fragments":["Even","I"]},{"Key":"operator. Even","Fragments":["so,"]},{"Key":"Even so,","Fragments":["you","this"]},{"Key":"so, you","Fragments":["might"]},{"Key":"consider whether","Fragments":["it","you"]},{"Key":"whether it","Fragments":["should","makes","might","is"]},{"Key":"a descriptively","Fragments":["named","named","named"]},{"Key":"descriptively named","Fragments":["private","private","private","methods"]},{"Key":"named private","Fragments":["method,","function","functions?","function","functions:","function,","functions","functions","functions.","function,","function."]},{"Key":"private method,","Fragments":["much"]},{"Key":"method, much","Fragments":["like"]},{"Key":"much like","Fragments":["`scan_words`.","Ruby,","the"]},{"Key":"am also","Fragments":["unsure","curious"]},{"Key":"also unsure","Fragments":["the"]},{"Key":"unsure the","Fragments":["role"]},{"Key":"the role","Fragments":["of"]},{"Key":"role of","Fragments":["`Enum.sort`"]},{"Key":"of `Enum.sort`","Fragments":["in"]},{"Key":"`Enum.sort` in","Fragments":["this","the"]},{"Key":"nice solution.","Fragments":["Are"]},{"Key":"solution. Are","Fragments":["you"]},{"Key":"you familiar","Fragments":["with","with","with","with","with","with","with"]},{"Key":"with how","Fragments":["to","this","elixir's","I","many","you","you","clear"]},{"Key":"to specify","Fragments":["which","the"]},{"Key":"specify which","Fragments":["characters"]},{"Key":"which characters","Fragments":["define"]},{"Key":"characters define","Fragments":["the"]},{"Key":"the split","Fragments":["in","with"]},{"Key":"split in","Fragments":["`String.split`?","two:"]},{"Key":"in `String.split`?","Fragments":["It"]},{"Key":"`String.split`? It","Fragments":["might"]},{"Key":"It might","Fragments":["help","help","be","also","also","help","help","be","be","help","get","pass","be","be","be","clean"]},{"Key":"you remove","Fragments":["a","the","the","the","characters","that?"]},{"Key":"remove a","Fragments":["step","few","few"]},{"Key":"a step","Fragments":["from","in","further","back","further","further"]},{"Key":"step from","Fragments":["your","the"]},{"Key":"might also","Fragments":["want","be","be","take","work","need","suggest","be"]},{"Key":"also want","Fragments":["to","to"]},{"Key":"to investigate","Fragments":["`HashDict.merge`."]},{"Key":" @nedra's","Fragments":["suggestion"]},{"Key":"@nedra's suggestion","Fragments":["is"]},{"Key":"suggestion is","Fragments":["definitely","that","that","to"]},{"Key":"definitely the","Fragments":["cleanest","trailing","part","biggest"]},{"Key":"the cleanest","Fragments":["way","version","solution","iteration"]},{"Key":"cleanest way","Fragments":["forward."]},{"Key":"way forward.","Fragments":["It"]},{"Key":"forward. It","Fragments":["will"]},{"Key":"It will","Fragments":["let","use","be","help"]},{"Key":"will let","Fragments":["you","your"]},{"Key":"let you","Fragments":["remove","remove","make","know"]},{"Key":"Ah yes!","Fragments":["Awesome."]},{"Key":"yes! Awesome.","Fragments":["That"]},{"Key":"Awesome. That","Fragments":["and"]},{"Key":"That and","Fragments":["Enum.reduce","using"]},{"Key":"and Enum.reduce","Fragments":["is"]},{"Key":"Enum.reduce is","Fragments":["what","my","the"]},{"Key":"what I've","Fragments":["been","seen"]},{"Key":"I've been","Fragments":["reaching","exploring","coding","doing","recommending","adopting","trying","banging","basically","working","bitten","doing","trying","using","working","getting","wondering","neglecting"]},{"Key":"been reaching","Fragments":["for"]},{"Key":"reaching for","Fragments":["in"]},{"Key":"for in","Fragments":["my","the","terms"]},{"Key":"my mind,","Fragments":["but"]},{"Key":"mind, but","Fragments":["I","I'm","I"]},{"Key":"wasn't not","Fragments":["familiar"]},{"Key":"the stdlib","Fragments":["or","back"]},{"Key":"stdlib or","Fragments":["functional"]},{"Key":"or functional","Fragments":["programming"]},{"Key":"functional programming","Fragments":["enough","I","it's","languages","though.","it'll","world","and","way.","use"]},{"Key":"programming enough","Fragments":["to"]},{"Key":"to quite","Fragments":["find"]},{"Key":"quite find","Fragments":["it."]},{"Key":"Well this","Fragments":["is"]},{"Key":"is pretty","Fragments":["good.","limited.","good","neat!","deeply","cool!","opaque.","sweet.","succinct.","ugly.","uncommon","easy","printed","much","readable","common","common.","rare","much","much"]},{"Key":"good. `cond`","Fragments":["is"]},{"Key":"is such","Fragments":["a","a"]},{"Key":"such a","Fragments":["great","key","datatype","small","strange","function","wonderful","thorough","way"]},{"Key":"I'd only","Fragments":["try"]},{"Key":"only try","Fragments":["to"]},{"Key":"to follow","Fragments":["a","though.","common","in","the","the"]},{"Key":"follow a","Fragments":["method"]},{"Key":"- ???","Fragments":["(to"]},{"Key":"??? (to","Fragments":["use"]},{"Key":"(to use","Fragments":["rather"]},{"Key":"use rather","Fragments":["than"]},{"Key":"rather than","Fragments":["shout_ing_)","plain","trying","`String.last`?","check","explicitly","just","is_yelling/1.","simply","`String.split`","having","check","simply","using","making","having","dispatching","ones","`fn`","an","nesting","inferring","the","prefixing","prepending","`[^","truncates","intentional.","testing","\u0026amp;1,","making","duplicating","define","defines","`is_shout?`","in","`count_word(\u00261,\u00262)`.","scan","a","creating","a","expecting","just","just","iteratively,","the","a","needing","what","hang","which","logic","implementing","the","using","delete","all","about","years","the","`0`.","separating","`HashDict`","doing","necessarily","checking","trying","`is_state`.","s,","trying","`camelCase`","using","the","the","recursion","specs,"]},{"Key":"can shrink","Fragments":["super-simple"]},{"Key":"shrink super-simple","Fragments":["function"]},{"Key":"super-simple function","Fragments":["definitions"]},{"Key":"definitions to","Fragments":["a"]},{"Key":"single line","Fragments":["with","function,","per","function","if",";-)","if","functions","methods.","solution.","it's","if","and","I"]},{"Key":"line with","Fragments":["a","other","`yelling`","`asking?`","`fn`","`fn`.)"]},{"Key":"a syntax","Fragments":["like:","error.","error.","error","error.","error","error."]},{"Key":"syntax like:","Fragments":["def"]},{"Key":"like: def","Fragments":["\u003cname\u003e(\u003cparams\u003e),"]},{"Key":"def \u003cname\u003e(\u003cparams\u003e),","Fragments":["do:"]},{"Key":"\u003cname\u003e(\u003cparams\u003e), do:","Fragments":["\u003caction\u003e"]},{"Key":"This might","Fragments":["improve","make","help"]},{"Key":"might improve","Fragments":["readability","readability."]},{"Key":"improve readability","Fragments":["when","and"]},{"Key":"readability when","Fragments":["used"]},{"Key":"when used","Fragments":["judiciously.","in"]},{"Key":"into #response,","Fragments":["by"]},{"Key":"#response, by","Fragments":["the"]},{"Key":"matching works.","Fragments":["Is"]},{"Key":"works. Is","Fragments":["there"]},{"Key":"a place","Fragments":["I"]},{"Key":"place I","Fragments":["can"]},{"Key":"can read","Fragments":["up","the"]},{"Key":"up about","Fragments":["it?"]},{"Key":"using `Dict.update/4`","Fragments":["instead"]},{"Key":"`Dict.update/4` instead","Fragments":["of"]},{"Key":"of `Dict.merge`","Fragments":["?","but"]},{"Key":"My solution","Fragments":["was","was"]},{"Key":"solution was","Fragments":["very","to","a","just"]},{"Key":"was very","Fragments":["similar,","regex-heavy","helpful!","nice!"]},{"Key":"very similar,","Fragments":["but"]},{"Key":"similar, but","Fragments":["I"]},{"Key":"I called","Fragments":["split/1","it","your"]},{"Key":"called split/1","Fragments":["from"]},{"Key":"split/1 from","Fragments":["the"]},{"Key":"pipeline in","Fragments":["count","count/1.","count.","the","the"]},{"Key":"in count","Fragments":["directly.","than","e.g."]},{"Key":"count directly.","Fragments":["I"]},{"Key":"directly. I","Fragments":["think"]},{"Key":"think aliasing","Fragments":["it"]},{"Key":"aliasing it","Fragments":["is"]},{"Key":"interesting decision","Fragments":["and"]},{"Key":"decision and","Fragments":["I"]},{"Key":"am trying","Fragments":["to"]},{"Key":"decide if","Fragments":["I"]},{"Key":"I prefer","Fragments":["the","to","the","the","`String.scan(%r/\\w+/)","to","the","to","to","`\u0026mutation?/1`","the","this","the","to","always","between"]},{"Key":"prefer the","Fragments":["explicit,","private","extended","true","`is_`","Ruby","erlang","guarded","modules","first"]},{"Key":"the explicit,","Fragments":["declarative"]},{"Key":"explicit, declarative","Fragments":["nature"]},{"Key":"of to_words","Fragments":["or"]},{"Key":"to_words or","Fragments":["not."]},{"Key":"or not.","Fragments":["Could","I'm","Specifically,"]},{"Key":"not. Could","Fragments":["you"]},{"Key":"you comment","Fragments":["on"]},{"Key":"on why","Fragments":["you","they"]},{"Key":"went this","Fragments":["route?","direction"]},{"Key":"Yeah, one","Fragments":["thing"]},{"Key":"one thing","Fragments":["that","that",",",",","I"]},{"Key":"a tad","Fragments":["confusing","easier"]},{"Key":"tad confusing","Fragments":["is"]},{"Key":"confusing is","Fragments":["that"]},{"Key":"that HashDict","Fragments":["implements","is"]},{"Key":"HashDict implements","Fragments":["the","the"]},{"Key":"implements the","Fragments":["Dict","Dict","Enumerable"]},{"Key":"the Dict","Fragments":["protocol,","API...if","module","sorted,","is","module"]},{"Key":"Dict protocol,","Fragments":["so"]},{"Key":"protocol, so","Fragments":["all"]},{"Key":"so all","Fragments":["the","of","of"]},{"Key":"the documentation","Fragments":["is","or","says","of"]},{"Key":"documentation is","Fragments":["on","really","a"]},{"Key":"is on","Fragments":["Dict.","the","the","a","and","the","String.strip,"]},{"Key":"on Dict.","Fragments":["It"]},{"Key":"Dict. It","Fragments":["will"]},{"Key":"will use","Fragments":["the","binaries,"]},{"Key":"the HashDict","Fragments":["or","though,","words",".","but","every","where","would","anew","as"]},{"Key":"HashDict or","Fragments":["ListDict"]},{"Key":"or ListDict","Fragments":["implementation"]},{"Key":"ListDict implementation","Fragments":["based"]},{"Key":"implementation based","Fragments":["on","on"]},{"Key":"on what","Fragments":["you","good","in","it","they","you","you","you","exactly"]},{"Key":"you pass","Fragments":["to","`\"","in","in","the","to","an"]},{"Key":"pass to","Fragments":["Dict.","List.flatten...","get","`append`"]},{"Key":" See:","Fragments":["http://elixir-lang.org/getting_started/4.html"]},{"Key":"See: http://elixir-lang.org/getting_started/4.html","Fragments":["for"]},{"Key":"http://elixir-lang.org/getting_started/4.html for","Fragments":["more"]},{"Key":"for more","Fragments":["info","complicated","often"]},{"Key":"more info","Fragments":["on"]},{"Key":"info on","Fragments":["protocols."]},{"Key":"Hi Svyatov,","Fragments":["this"]},{"Key":"Svyatov, this","Fragments":["is"]},{"Key":"considered moving","Fragments":["`String.downcase`","the"]},{"Key":"moving `String.downcase`","Fragments":["into"]},{"Key":"`String.downcase` into","Fragments":["the","the"]},{"Key":"count function","Fragments":["pipeline?","to","and"]},{"Key":"may also","Fragments":["want"]},{"Key":"out `Dict.update/4`,","Fragments":["you"]},{"Key":"`Dict.update/4`, you","Fragments":["may"]},{"Key":"you may","Fragments":["find","feel","find","have","use"]},{"Key":"may find","Fragments":["it","some"]},{"Key":"find it","Fragments":["a","much","helpful","confusing","brings","to","weird,","a","in","a","a","is","harder","in","unreadable."]},{"Key":"nice alternative","Fragments":["to"]},{"Key":" Wow.","Fragments":["Really","This","@jarod"]},{"Key":"Wow. Really","Fragments":["interesting"]},{"Key":"Really interesting","Fragments":["implementation!"]},{"Key":"interesting implementation!","Fragments":["But"]},{"Key":"implementation! But","Fragments":["`_question?(text)`"]},{"Key":"But `_question?(text)`","Fragments":["method"]},{"Key":"`_question?(text)` method","Fragments":["is"]},{"Key":"is overcomplicated,","Fragments":["I"]},{"Key":"overcomplicated, I","Fragments":["think."]},{"Key":"I think.","Fragments":["Why","`first_line`",":)","One"]},{"Key":"think. Why","Fragments":["not"]},{"Key":"use `String.last`","Fragments":["or"]},{"Key":"`String.last` or","Fragments":["`String.ends_with?`"]},{"Key":"or `String.ends_with?`","Fragments":["methods?"]},{"Key":"a `else","Fragments":["if`"]},{"Key":"`else if`","Fragments":["concept,","in"]},{"Key":"if` concept,","Fragments":["check"]},{"Key":"concept, check","Fragments":["out"]},{"Key":"out `cond`","Fragments":["on","--"]},{"Key":"`cond` on","Fragments":["section","purpose?"]},{"Key":"on section","Fragments":["2.6.7"]},{"Key":"section 2.6.7","Fragments":["[http://elixir-lang.org/getting_started/2.html]."]},{"Key":"are using","Fragments":["`defp`,","`Regex.scan`","`Dict.put`"]},{"Key":"using `defp`,","Fragments":["is"]},{"Key":"`defp`, is","Fragments":["there"]},{"Key":"another reason","Fragments":["to"]},{"Key":"use `_`","Fragments":["before"]},{"Key":"`_` before","Fragments":["the"]},{"Key":"before the","Fragments":["private","general","identicality","filter.","pipeline","question","split"]},{"Key":"The method","Fragments":["`_question?(text)`"]},{"Key":"method `_question?(text)`","Fragments":["can"]},{"Key":"`_question?(text)` can","Fragments":["be"]},{"Key":"be turned","Fragments":["into","into"]},{"Key":"turned into","Fragments":["an","one-liners","something"]},{"Key":"an one-liner.","Fragments":["You"]},{"Key":"one-liner. You","Fragments":["should"]},{"Key":"should look","Fragments":["at","to","more"]},{"Key":"at `String`","Fragments":["documentation."]},{"Key":"That's already","Fragments":["much","better"]},{"Key":"already much","Fragments":["better,"]},{"Key":"better, but","Fragments":["if","there","it","I'm"]},{"Key":"it, first","Fragments":["you"]},{"Key":"first you","Fragments":["get"]},{"Key":"get a","Fragments":["unique","text?","deprecation","chance","list","list","crash","new","stub","compile","chance.","complexity","list","list","list","lot","stack","stack","solution","syntax"]},{"Key":"a unique","Fragments":["list"]},{"Key":"unique list","Fragments":["of","beforehand."]},{"Key":"all words,","Fragments":["that"]},{"Key":"words, that","Fragments":["is"]},{"Key":"already quite","Fragments":["some"]},{"Key":"quite some","Fragments":["comparisons,"]},{"Key":"some comparisons,","Fragments":["and"]},{"Key":"comparisons, and","Fragments":["then"]},{"Key":"you count","Fragments":["each"]},{"Key":"count each","Fragments":["word,","distinct"]},{"Key":"each word,","Fragments":["that"]},{"Key":"word, that","Fragments":["is"]},{"Key":"is even","Fragments":["more","cleaner."]},{"Key":"in just","Fragments":["1","a"]},{"Key":"just 1","Fragments":["pass:"]},{"Key":"1 pass:","Fragments":["you"]},{"Key":"pass: you","Fragments":["create"]},{"Key":"you create","Fragments":["an","your","a","it"]},{"Key":"empty dict,","Fragments":["and"]},{"Key":"dict, and","Fragments":["do","I"]},{"Key":"and do","Fragments":["just","it","you","similar","the","the","`exercism","the","the"]},{"Key":"do just","Fragments":["one","fine.","fine."]},{"Key":"one pass","Fragments":["using","over"]},{"Key":"pass using","Fragments":["`HashDict.update`."]},{"Key":"using `HashDict.update`.","Fragments":["`HashDict.update`"]},{"Key":"`HashDict.update`. `HashDict.update`","Fragments":["allows","takes"]},{"Key":"`HashDict.update` allows","Fragments":["to"]},{"Key":"allows to","Fragments":["calculate"]},{"Key":"to calculate","Fragments":["a","a","and","it","the","`square`"]},{"Key":"calculate a","Fragments":["new","new"]},{"Key":"new value","Fragments":["if","if"]},{"Key":"value if","Fragments":["such","the","it"]},{"Key":"if such","Fragments":["a"]},{"Key":"a key","Fragments":["is","value","and"]},{"Key":"key is","Fragments":["already","present","already","crafting"]},{"Key":"already present.","Fragments":["http://elixir-lang.org/docs/stable/Dict.html#update/4"]},{"Key":"Yes, readability","Fragments":["is"]},{"Key":"readability is","Fragments":["lower.","to"]},{"Key":"is lower.","Fragments":["I've"]},{"Key":"lower. I've","Fragments":["been"]},{"Key":"been exploring","Fragments":["different"]},{"Key":"exploring different","Fragments":["options"]},{"Key":"different options","Fragments":["for"]},{"Key":"options for","Fragments":["conditional"]},{"Key":"for conditional","Fragments":["logic"]},{"Key":"logic in","Fragments":["Elixir","another","match","them.","the"]},{"Key":"Elixir since","Fragments":["`if`"]},{"Key":"since `if`","Fragments":["statements"]},{"Key":"`if` statements","Fragments":["are","since"]},{"Key":"statements are","Fragments":["discouraged"]},{"Key":"are discouraged","Fragments":["in"]},{"Key":"discouraged in","Fragments":["Elixir."]},{"Key":"in Elixir.","Fragments":["Elixir","I","So","Each","Use","I","Being","Most","Nullary","`Enum.filter`","It","The","Like","This","The","Seems"]},{"Key":"Elixir. Elixir","Fragments":["also"]},{"Key":"Elixir also","Fragments":["isn't"]},{"Key":"also isn't","Fragments":["good"]},{"Key":"isn't good","Fragments":["with"]},{"Key":"good with","Fragments":["nested","regex,"]},{"Key":"with nested","Fragments":["`if`"]},{"Key":"nested `if`","Fragments":["statements"]},{"Key":"statements since","Fragments":["it"]},{"Key":"a concept","Fragments":["of","of","of"]},{"Key":"concept of","Fragments":["`else","splitting","an","iterators","iolists"]},{"Key":"of `else","Fragments":["if`."]},{"Key":"`else if`.","Fragments":["Check"]},{"Key":"if`. Check","Fragments":["out"]},{"Key":"out iteration","Fragments":["2"]},{"Key":"iteration 2","Fragments":["for"]},{"Key":"2 for","Fragments":["a"]},{"Key":"verbose implementation","Fragments":["of"]},{"Key":"have implemented","Fragments":["some","the"]},{"Key":"implemented some","Fragments":["changes."]},{"Key":"some changes.","Fragments":["I"]},{"Key":"changes. I","Fragments":["struggled"]},{"Key":"I struggled","Fragments":["a","with"]},{"Key":"struggled a","Fragments":["bit"]},{"Key":"bit with","Fragments":["naming,","that.","it.","the"]},{"Key":"with naming,","Fragments":["but"]},{"Key":"naming, but","Fragments":["I"]},{"Key":"a clarifying","Fragments":["improvement.","thought"]},{"Key":"Also really","Fragments":["interesting"]},{"Key":"interesting feedback","Fragments":["on"]},{"Key":"the match/2","Fragments":["functions"]},{"Key":"match/2 functions","Fragments":["returning","that"]},{"Key":"functions returning","Fragments":["different"]},{"Key":"returning different","Fragments":["things."]},{"Key":"different things.","Fragments":["I","Would","`flatten`"]},{"Key":"things. I","Fragments":["will","like","chose"]},{"Key":"keep meditating","Fragments":["on"]},{"Key":"meditating on","Fragments":["API"]},{"Key":"on API","Fragments":["design"]},{"Key":"API design","Fragments":["in","at"]},{"Key":"design in","Fragments":["the","this"]},{"Key":"the erlang/elixir","Fragments":["way"]},{"Key":"erlang/elixir way","Fragments":["as","to"]},{"Key":"way as","Fragments":["I","to","`Hash.new(default)`"]},{"Key":"I keep","Fragments":["learning.","finding","wanting"]},{"Key":"One comment","Fragments":["from"]},{"Key":"comment from","Fragments":["my","someone","@theodora"]},{"Key":"from my","Fragments":["last","word","word","clojure","plural","first","code.","first","word"]},{"Key":"my last","Fragments":["iteration","submission,","cheeky","message,"]},{"Key":"last iteration","Fragments":["still"]},{"Key":"iteration still","Fragments":["holds:"]},{"Key":"This could","Fragments":["be","be","be"]},{"Key":"prettier if","Fragments":["`String`"]},{"Key":"if `String`","Fragments":["had"]},{"Key":"`String` had","Fragments":["common","common"]},{"Key":"had common","Fragments":["regex","regex"]},{"Key":"common regex","Fragments":["methods","methods"]},{"Key":"regex methods","Fragments":["beyond","beyond"]},{"Key":"methods beyond","Fragments":["`split`","`split`"]},{"Key":"beyond `split`","Fragments":["defined","defined"]},{"Key":"`split` defined","Fragments":["on","on"]},{"Key":"defined on","Fragments":["it.","it."]},{"Key":"on it.","Fragments":["(Lines","(Lines","Check"]},{"Key":"it. (Lines","Fragments":["5","3"]},{"Key":"(Lines 5","Fragments":["and"]},{"Key":"5 and","Fragments":["11)","15)","line"]},{"Key":"Oops, I've","Fragments":["just"]},{"Key":"just realised","Fragments":["that","I"]},{"Key":"realised that","Fragments":["I've","everytime"]},{"Key":"I've written","Fragments":["a","of"]},{"Key":"written a","Fragments":["crazy","blog","tail"]},{"Key":"a crazy","Fragments":["solution"]},{"Key":"crazy solution","Fragments":["for"]},{"Key":"solution for","Fragments":["a","elixir.","a","`list`","`count`","all"]},{"Key":"a very","Fragments":["simple","interesting,","similar","beginner","inelegant","pronounced","large","magic","small","useful","minor","general","useful","small","unhelpful","good","general","bad","old","similar","concise","clean"]},{"Key":"very simple","Fragments":["problem.","and","ruby","expressions","expressions,"]},{"Key":"simple problem.","Fragments":["I'm"]},{"Key":"problem. I'm","Fragments":["a"]},{"Key":"I'm a","Fragments":["bit","fan","great","bit","total","bit","bit","long","huge"]},{"Key":" right,","Fragments":["i"]},{"Key":"i will","Fragments":["convert","submit"]},{"Key":"will convert","Fragments":["the"]},{"Key":"convert the","Fragments":["binaries","string","passed","collection","weekday","whole"]},{"Key":"the binaries","Fragments":["to"]},{"Key":"binaries to","Fragments":["lists"]},{"Key":"to lists","Fragments":["and","of"]},{"Key":"lists and","Fragments":["do","binaries,","not","binaries","`Stream`","ranges","Ranges.","ranges","to"]},{"Key":"all with","Fragments":["pattern"]},{"Key":"I made","Fragments":["it","some","while","the","it","it","the","the"]},{"Key":"that way","Fragments":["so","then","characters","the","is","allows","a"]},{"Key":"way so","Fragments":["that"]},{"Key":"that other","Fragments":["implementations","name"]},{"Key":"other implementations","Fragments":["of"]},{"Key":"of frequency","Fragments":["could"]},{"Key":"frequency could","Fragments":["be"]},{"Key":"used down","Fragments":["the"]},{"Key":"other datatypes.","Fragments":["Not"]},{"Key":"datatypes. Not","Fragments":["worth"]},{"Key":"Not worth","Fragments":["defining"]},{"Key":"worth defining","Fragments":["a"]},{"Key":"a protocol","Fragments":["with","mostly","so","so"]},{"Key":"protocol with","Fragments":["multiple"]},{"Key":"with multiple","Fragments":["implementations,","expressions","`anagram?`"]},{"Key":"multiple implementations,","Fragments":["yet"]},{"Key":"implementations, yet","Fragments":["(in"]},{"Key":"yet (in","Fragments":["this"]},{"Key":"(in this","Fragments":["context);","case,","case,"]},{"Key":"this context);","Fragments":["but"]},{"Key":"context); but","Fragments":["worth"]},{"Key":"but worth","Fragments":["noting"]},{"Key":"worth noting","Fragments":["that"]},{"Key":"noting that","Fragments":["this"]},{"Key":"this implementation","Fragments":["expects","return?","is","(at","will"]},{"Key":"implementation expects","Fragments":["a"]},{"Key":"expects a","Fragments":["list","tilde"]},{"Key":"list to","Fragments":["work","binary,","binary","binary","include","produce","a","a","be","the","another","be"]},{"Key":"defp silence?(nil),","Fragments":["do:"]},{"Key":"silence?(nil), do:","Fragments":["true"]},{"Key":"the blank","Fragments":["lines","string"]},{"Key":"blank lines","Fragments":["L4"]},{"Key":"lines L4","Fragments":["are"]},{"Key":"L4 are","Fragments":["L6"]},{"Key":"are L6","Fragments":["necessary?"]},{"Key":"I usually","Fragments":["prefer","prefer.","do","put","forget","prefer","use","indent","think","actively"]},{"Key":"usually prefer","Fragments":["the","regex"]},{"Key":"methods at","Fragments":["the"]},{"Key":"the class","Fragments":["definition.","name"]},{"Key":"class definition.","Fragments":["I"]},{"Key":"definition. I","Fragments":["like","didn't"]},{"Key":"public methods","Fragments":["in","unless"]},{"Key":"the class,","Fragments":["because","they"]},{"Key":"class, because","Fragments":["them"]},{"Key":"because them","Fragments":["can"]},{"Key":"them can","Fragments":["be"]},{"Key":"be accessed","Fragments":["outside","explicitly,"]},{"Key":"accessed outside","Fragments":["the"]},{"Key":"outside the","Fragments":["class,","`hey`","brackets","module","module","A-Z"]},{"Key":"class, they","Fragments":["have"]},{"Key":"they have","Fragments":["more","dependencies","some","been"]},{"Key":"have more","Fragments":["\"priority\".","sense.","to","concrete"]},{"Key":"I'm the","Fragments":["one"]},{"Key":"one who","Fragments":["made"]},{"Key":"who made","Fragments":["a"]},{"Key":"a nit","Fragments":["about"]},{"Key":"nit about","Fragments":["the","your","tail"]},{"Key":"the sequence","Fragments":["of"]},{"Key":"sequence of","Fragments":["the","those"]},{"Key":"`cond` block","Fragments":["on","so","should"]},{"Key":"block on","Fragments":["iteration"]},{"Key":"on iteration","Fragments":["1."]},{"Key":"iteration 1.","Fragments":["I"]},{"Key":"1. I","Fragments":["suggested","have"]},{"Key":"I suggested","Fragments":["pattern","using","wouldn't"]},{"Key":"suggested pattern","Fragments":["matching"]},{"Key":"matching here","Fragments":["as"]},{"Key":"here as","Fragments":["a","it","well:"]},{"Key":"might appeal","Fragments":["to"]},{"Key":"appeal to","Fragments":["you"]},{"Key":"you more.","Fragments":["If"]},{"Key":"more. If","Fragments":["you"]},{"Key":"you prefer","Fragments":["to","to","to","about","to","to"]},{"Key":"to rearrange","Fragments":["the"]},{"Key":"rearrange the","Fragments":["`cond`,"]},{"Key":"`cond`, that","Fragments":["clears"]},{"Key":"that clears","Fragments":["up","things"]},{"Key":"clears up","Fragments":["my"]},{"Key":"up my","Fragments":["question","naming.","anonymous"]},{"Key":"my question","Fragments":["as","from","keep"]},{"Key":"question as","Fragments":["well."]},{"Key":"In the","Fragments":["example","PeepCode","PeepCode","domain","`count`","end","first","sing/2","light","meantime,","meantime,","spirit","specific","`reverse`","Part","elixir","`Regex.replace/4`","*silence?*","simple","end,"]},{"Key":"example code","Fragments":["offered","(I"]},{"Key":"code offered","Fragments":["in"]},{"Key":"offered in","Fragments":["the"]},{"Key":"previous comment,","Fragments":["the"]},{"Key":"comment, the","Fragments":["first"]},{"Key":"the `match/2`","Fragments":["function"]},{"Key":"`match/2` function","Fragments":["is"]},{"Key":"is triggered","Fragments":["if"]},{"Key":"triggered if","Fragments":["the"]},{"Key":"second parameter","Fragments":["passed","is","for"]},{"Key":"parameter passed","Fragments":["to"]},{"Key":"function happens","Fragments":["to"]},{"Key":"happens to","Fragments":["equal","be","be","use."]},{"Key":"to equal","Fragments":["`[]`."]},{"Key":"equal `[]`.","Fragments":["If"]},{"Key":"`[]`. If","Fragments":["not,"]},{"Key":"If not,","Fragments":["then","I'd","I'd"]},{"Key":"not, then","Fragments":["Elixir"]},{"Key":"then Elixir","Fragments":["moves"]},{"Key":"Elixir moves","Fragments":["on"]},{"Key":"moves on","Fragments":["to"]},{"Key":"try the","Fragments":["next","same","same","same","same","same","same","same"]},{"Key":"next version","Fragments":["of"]},{"Key":"The result","Fragments":["is","of"]},{"Key":"result is","Fragments":["similar","unnecessary","a","a","used","1","2","1","2","the","1","2","always","1","2","1","2","1","2","1","2"]},{"Key":"is similar","Fragments":["to","to"]},{"Key":"a cond","Fragments":["block,","expression."]},{"Key":"cond block,","Fragments":["with","making"]},{"Key":"block, with","Fragments":["a"]},{"Key":"separate function","Fragments":["definition","returning","clauses","with","and","clauses,","with"]},{"Key":"function definition","Fragments":["for","for","using","instead","syntax","so"]},{"Key":"definition for","Fragments":["each","an"]},{"Key":"each possibility.","Fragments":["Here's"]},{"Key":"possibility. Here's","Fragments":["what"]},{"Key":"Here's what","Fragments":["it","would","would"]},{"Key":"what it","Fragments":["looks","is","is","does.","should","would","does.","looks","does,","looks","actually","is.","meant","*does*","would","was.","filters","took"]},{"Key":"like with","Fragments":["just"]},{"Key":"defp function_name(\"something","Fragments":["that"]},{"Key":"function_name(\"something that","Fragments":["shouldn't"]},{"Key":"that shouldn't","Fragments":["go","matter","happen."]},{"Key":"shouldn't go","Fragments":["to"]},{"Key":"go to","Fragments":["the"]},{"Key":"next block\")","Fragments":["do"]},{"Key":"block\") do","Fragments":["..."]},{"Key":"do ...","Fragments":["end","end","else","end","else","end),","end\""]},{"Key":"defp function_name(word),","Fragments":["do"]},{"Key":"function_name(word), do","Fragments":["..."]},{"Key":" Doh,","Fragments":["nice"]},{"Key":"Doh, nice","Fragments":["catch."]},{"Key":"Hi there","Fragments":["-","-","-","-","-"]},{"Key":"there -","Fragments":["you","are","nice","nice","looking"]},{"Key":"- you","Fragments":["have","can"]},{"Key":"have two","Fragments":["match/2","checks","similar","things","predicate","filters,","clauses","clauses","conditions","things","regular"]},{"Key":"two match/2","Fragments":["functions"]},{"Key":"that return","Fragments":["very","a","boolean","a","`@bettye`.","booleans)","a","booleans."]},{"Key":"return very","Fragments":["different"]},{"Key":"very different","Fragments":["things.","constructs"]},{"Key":"things. Would","Fragments":["it"]},{"Key":"it clarify","Fragments":["the"]},{"Key":"clarify the","Fragments":["code"]},{"Key":"code to","Fragments":["rename","manage","read","see","read.","explain","see","write,","mutate","make","look","use","separate"]},{"Key":"to rename","Fragments":["the","the","the"]},{"Key":"word to","Fragments":["word"]},{"Key":"to word","Fragments":["comparison"]},{"Key":"word comparison","Fragments":["function"]},{"Key":"comparison function","Fragments":["to"]},{"Key":"something else","Fragments":["(note","elixir","along"]},{"Key":"else (note","Fragments":["that"]},{"Key":"(note that","Fragments":["question"]},{"Key":"that question","Fragments":["marks"]},{"Key":"marks are","Fragments":["allowed"]},{"Key":"are allowed","Fragments":["at","in","by"]},{"Key":"allowed at","Fragments":["the"]},{"Key":"Another \"readability\"","Fragments":["nit"]},{"Key":"\"readability\" nit","Fragments":["-"]},{"Key":"nit -","Fragments":["the"]},{"Key":"- the","Fragments":["\"possible_words\""]},{"Key":"the \"possible_words\"","Fragments":["parameter"]},{"Key":"\"possible_words\" parameter","Fragments":["doesn't"]},{"Key":"parameter doesn't","Fragments":["contain"]},{"Key":"doesn't contain","Fragments":["things","letters"]},{"Key":"contain things","Fragments":["that"]},{"Key":"that \"might","Fragments":["be"]},{"Key":"\"might be","Fragments":["words\""]},{"Key":"be words\"","Fragments":["-"]},{"Key":"words\" -","Fragments":["is"]},{"Key":"meaningful name","Fragments":["that","to"]},{"Key":"name that","Fragments":["better","carries","was","would","explains"]},{"Key":"that better","Fragments":["shows","or"]},{"Key":"better shows","Fragments":["what"]},{"Key":"shows what","Fragments":["they"]},{"Key":"they might","Fragments":["be?","be","end"]},{"Key":"Love this","Fragments":["solution"]},{"Key":"this solution","Fragments":["though","-","was","is","better.","better.","a"]},{"Key":"solution though","Fragments":["-"]},{"Key":"though -","Fragments":["very"]},{"Key":"- very","Fragments":["simple."]},{"Key":"Hi there.","Fragments":["I","I"]},{"Key":"there. I","Fragments":["noticed","recommend"]},{"Key":"I noticed","Fragments":["your","it","right","in","that,","that","in","that","that","somewhere"]},{"Key":"noticed your","Fragments":["import","map"]},{"Key":"your import","Fragments":["directive"]},{"Key":"import directive","Fragments":["-","or"]},{"Key":"directive -","Fragments":["why"]},{"Key":"- why","Fragments":["prefix"]},{"Key":"why prefix","Fragments":["your"]},{"Key":"prefix your","Fragments":["#contains,"]},{"Key":"your #contains,","Fragments":["#next_grapheme,"]},{"Key":"#contains, #next_grapheme,","Fragments":["and"]},{"Key":"#next_grapheme, and","Fragments":["#replace"]},{"Key":"and #replace","Fragments":["function"]},{"Key":"#replace function","Fragments":["calls"]},{"Key":"function calls","Fragments":["with","seem","except","except","or","unless","everywhere","except"]},{"Key":"calls with","Fragments":["String?"]},{"Key":"with String?","Fragments":["You"]},{"Key":"String? You","Fragments":["either"]},{"Key":"You either","Fragments":["don't"]},{"Key":"either don't","Fragments":["need"]},{"Key":"the import","Fragments":["directive","was","statement"]},{"Key":"directive or","Fragments":["don't"]},{"Key":"or don't","Fragments":["need"]},{"Key":"to prefix","Fragments":["the","the","them","the"]},{"Key":"prefix the","Fragments":["calls.","module","private"]},{"Key":"Would judicious","Fragments":["use"]},{"Key":"judicious use","Fragments":["of"]},{"Key":"of Enum.sort","Fragments":["simplify"]},{"Key":"Enum.sort simplify","Fragments":["your"]},{"Key":"your #anagrams?","Fragments":["function?"]},{"Key":" Should","Fragments":["some","the","`hey`","I","\"DO","a","actually"]},{"Key":"Should some","Fragments":["of"]},{"Key":" Given","Fragments":["my","the","my"]},{"Key":"Given my","Fragments":["macbook","inexperience"]},{"Key":"my macbook","Fragments":["pro"]},{"Key":"macbook pro","Fragments":["died"]},{"Key":"pro died","Fragments":["2"]},{"Key":"died 2","Fragments":["days"]},{"Key":"2 days","Fragments":["ago","ago."]},{"Key":"days ago","Fragments":["and"]},{"Key":"ago and","Fragments":["I","thought","it"]},{"Key":"get up","Fragments":["and"]},{"Key":"up and","Fragments":["running","improving","downcasing","play","naming","change","running;","learn"]},{"Key":"and running","Fragments":["on"]},{"Key":"running on","Fragments":["the"]},{"Key":"the family","Fragments":["iMac,"]},{"Key":"family iMac,","Fragments":["I"]},{"Key":"iMac, I","Fragments":["rewrote"]},{"Key":"I rewrote","Fragments":["from","`count`,"]},{"Key":"rewrote from","Fragments":["scratch"]},{"Key":"from scratch","Fragments":["and"]},{"Key":"scratch and","Fragments":["hopefully"]},{"Key":"and hopefully","Fragments":["the"]},{"Key":"hopefully the","Fragments":["incoming"]},{"Key":"the incoming","Fragments":["submission"]},{"Key":"incoming submission","Fragments":["tells"]},{"Key":"submission tells","Fragments":["a"]},{"Key":"tells a","Fragments":["better"]},{"Key":"better story","Fragments":["(and"]},{"Key":"story (and","Fragments":["is"]},{"Key":"(and is","Fragments":["a"]},{"Key":"think is","Fragments":["more","not","very","large","more","more","tail","easier"]},{"Key":"more elixir'ish","Fragments":["when"]},{"Key":"elixir'ish when","Fragments":["piping?"]},{"Key":" str","Fragments":["|\u003e"]},{"Key":"str |\u003e","Fragments":["String.downcase"]},{"Key":"|\u003e String.downcase","Fragments":["|\u003e","|\u003e","|\u003e"]},{"Key":"String.downcase |\u003e","Fragments":["tokenize","String.split","collect_words"]},{"Key":"|\u003e tokenize","Fragments":["|\u003e","|\u003e"]},{"Key":"tokenize |\u003e","Fragments":["count","count"]},{"Key":" String.downcase(str)","Fragments":["|\u003e"]},{"Key":"String.downcase(str) |\u003e","Fragments":["tokenize"]},{"Key":"point! Updated","Fragments":["here"]},{"Key":"Updated here","Fragments":["http://exercism.io/submissions/51ffc59da8f8e4c299000141"]},{"Key":"1) `String`","Fragments":["had"]},{"Key":"(Lines 3","Fragments":["and"]},{"Key":"3 and","Fragments":["15)","once","4?"]},{"Key":"2) Piping","Fragments":["multiple"]},{"Key":"Piping multiple","Fragments":["parameters"]},{"Key":"multiple parameters","Fragments":["was"]},{"Key":"parameters was","Fragments":["possible,"]},{"Key":"was possible,","Fragments":["or"]},{"Key":"possible, or","Fragments":["piping"]},{"Key":"or piping","Fragments":["tuples"]},{"Key":"piping tuples","Fragments":["automatically"]},{"Key":"tuples automatically","Fragments":["*unpacked*"]},{"Key":"automatically *unpacked*","Fragments":["them"]},{"Key":"*unpacked* them","Fragments":["(line"]},{"Key":"them (line","Fragments":["8)"]},{"Key":" pattern","Fragments":["matching"]},{"Key":"is good,","Fragments":["but","but"]},{"Key":"but `shouting?`","Fragments":["shouldn't"]},{"Key":"`shouting?` shouldn't","Fragments":["check"]},{"Key":"shouldn't check","Fragments":["for"]},{"Key":"string, it's","Fragments":["`silence?`"]},{"Key":"it's `silence?`","Fragments":["which"]},{"Key":"`silence?` which","Fragments":["does"]},{"Key":"which does","Fragments":["it.","the"]},{"Key":" Here's","Fragments":["pattern","the","the","an","that","a","another","a","a","happens","happens","happens","the","happens","the","happens","how","happens","happens"]},{"Key":"Here's pattern","Fragments":["matching"]},{"Key":"def match(_word,","Fragments":["[])"]},{"Key":"match(_word, [])","Fragments":["do"]},{"Key":"match(word, [candidate_anagram","Fragments":["|"]},{"Key":"[candidate_anagram |","Fragments":["other_candidate_anagrams])"]},{"Key":"| other_candidate_anagrams])","Fragments":["do"]},{"Key":"two checks","Fragments":["for"]},{"Key":"checks for","Fragments":["an","anagrams","upcase"]},{"Key":"string, one","Fragments":["on"]},{"Key":"one on","Fragments":["line","line","hey","line"]},{"Key":"line 30","Fragments":["and","into"]},{"Key":"30 and","Fragments":["one"]},{"Key":"It is","Fragments":["easy","not.","the","not","possible.","_entirely_","an","optimized","only","superficially","indeed","much","true","not","possible"]},{"Key":"is easy","Fragments":["to","to","to","to","to","to"]},{"Key":"have but","Fragments":["one,"]},{"Key":"but one,","Fragments":["on"]},{"Key":"one, on","Fragments":["line"]},{"Key":"line 30,","Fragments":["and","I'm"]},{"Key":"30, and","Fragments":["make"]},{"Key":"and make","Fragments":["the","the","it","the","that","those","new","the","an"]},{"Key":"`silence` cond","Fragments":["clause"]},{"Key":"cond clause","Fragments":["the"]},{"Key":"clause the","Fragments":["first"]},{"Key":"using pattern","Fragments":["matching","matching","matching","matching","matching","matching","matching,","matching","matching"]},{"Key":" Sadly,","Fragments":["the"]},{"Key":"Sadly, the","Fragments":["number"]},{"Key":"functions you","Fragments":["can","could","mentioned.","need","can","could"]},{"Key":"can call","Fragments":["in","out","a","a","sing/2","at"]},{"Key":"call in","Fragments":["a","a","the","the","`collect_words/1`"]},{"Key":"a `guard`","Fragments":["(or"]},{"Key":"`guard` (or","Fragments":["a"]},{"Key":"(or a","Fragments":["`case`)","conditional)"]},{"Key":"a `case`)","Fragments":["is"]},{"Key":"`case`) is","Fragments":["pretty"]},{"Key":"pretty limited.","Fragments":["You"]},{"Key":"limited. You","Fragments":["can"]},{"Key":"use functions","Fragments":["in","in","like"]},{"Key":"in `cond`s,","Fragments":["though."]},{"Key":"Thanks. I","Fragments":["think","didn't","cant","like","submitted"]},{"Key":"think your","Fragments":["comments","goal","_count","formatting","code","definition","`map`","code"]},{"Key":"your comments","Fragments":["have","in"]},{"Key":"comments have","Fragments":["nudged"]},{"Key":"have nudged","Fragments":["me"]},{"Key":"nudged me","Fragments":["from"]},{"Key":"me from","Fragments":["a","Lowell?","compiling","doing"]},{"Key":"recursive solution","Fragments":["built","is","I've","that","despite","for"]},{"Key":"solution built","Fragments":["around"]},{"Key":"built around","Fragments":["list"]},{"Key":"around list","Fragments":["comprehensions"]},{"Key":"list comprehensions","Fragments":["and","but","improved","can","are","for","as","and","there,"]},{"Key":"comprehensions and","Fragments":["pattern","alot"]},{"Key":"matching (things","Fragments":["that"]},{"Key":"(things that","Fragments":["are"]},{"Key":"are way","Fragments":["down"]},{"Key":"way down","Fragments":["the","to"]},{"Key":"the functional","Fragments":["rabbit","ways,","approach","programming","way","programming","style."]},{"Key":"functional rabbit","Fragments":["hole)"]},{"Key":"rabbit hole)","Fragments":["back"]},{"Key":"hole) back","Fragments":["toward"]},{"Key":"back toward","Fragments":["something"]},{"Key":"toward something","Fragments":["simpler"]},{"Key":"something simpler","Fragments":["with"]},{"Key":"simpler with","Fragments":["'Enum`."]},{"Key":"with 'Enum`.","Fragments":["It's"]},{"Key":"'Enum`. It's","Fragments":["definitely"]},{"Key":"It's definitely","Fragments":["easier"]},{"Key":"definitely easier","Fragments":["to"]},{"Key":"read. It's","Fragments":["been"]},{"Key":"It's been","Fragments":["good","a","a"]},{"Key":"been good","Fragments":["to","at)."]},{"Key":"think through","Fragments":["different"]},{"Key":"through different","Fragments":["approaches."]},{"Key":" There","Fragments":["is","is","is","could","aren't","is","is","is","is","is","is","are","is","is","are","is","is","is","is","were","is","is","is","is","is","are","is","is","is","is","is","is","are","are","was","is","are","are","is","are","is","is"]},{"Key":"There is","Fragments":["a","a","a","a","a","a","no","code","nothing","a","a","also","also","**literal**ly","a","a","a","a","an","probably","probably","a","a","no","a","one","a","a","a","one","a","nothing","a","a","a","an","one","a","a","a","a","nothing","also","no","a","a","no","actually"]},{"Key":"guard statement","Fragments":["for","because"]},{"Key":"statement for","Fragments":["`word"]},{"Key":"for `word","Fragments":["=="]},{"Key":"`word ==","Fragments":["\"\"`","String.upcase"]},{"Key":"\"\"` in","Fragments":["the"]},{"Key":"new submission","Fragments":["because","compares"]},{"Key":"submission because","Fragments":["it's"]},{"Key":"because it's","Fragments":["necessary","misleading.","really","\"idiomatic\",","lazy","less","hard","an","upper"]},{"Key":"it's necessary","Fragments":["for","or","or"]},{"Key":"necessary for","Fragments":["the","checking","doctests"]},{"Key":"the punctuation","Fragments":["test.","shouldn't","if","and","was","and","and"]},{"Key":"punctuation test.","Fragments":["As"]},{"Key":"test. As","Fragments":["a"]},{"Key":"As a","Fragments":["bonus,","community","clarifying","writer,","general","bit","further"]},{"Key":"a bonus,","Fragments":["it"]},{"Key":"bonus, it","Fragments":["gives"]},{"Key":"it gives","Fragments":["a","the","me","me","at","names","me","a"]},{"Key":"gives a","Fragments":["reasonable","400","name","much"]},{"Key":"a reasonable","Fragments":["answer"]},{"Key":"reasonable answer","Fragments":["for"]},{"Key":"answer for","Fragments":["`Words.count(\"\")`."]},{"Key":"for empty?","Fragments":["be","be"]},{"Key":"empty? be","Fragments":["more","more"]},{"Key":"\"silent?\" ?","Fragments":["Similar"]},{"Key":"? Similar","Fragments":["question"]},{"Key":"the \"s\"","Fragments":["parameter"]},{"Key":"\"s\" parameter","Fragments":["-"]},{"Key":"the analysis","Fragments":["of"]},{"Key":"analysis of","Fragments":["the"]},{"Key":"the phrase","Fragments":["to","analysis.","than","into","into","into","and","is","into"]},{"Key":"phrase to","Fragments":["functions"]},{"Key":"to functions","Fragments":["of","of","spanning","like","that","that"]},{"Key":"of their","Fragments":["own","own"]},{"Key":"own thus","Fragments":["separating"]},{"Key":"thus separating","Fragments":["the"]},{"Key":"Also, `arg`","Fragments":["is"]},{"Key":"`arg` is","Fragments":["not"]},{"Key":"best name","Fragments":["for","for","because"]},{"Key":"I failed","Fragments":["to","to"]},{"Key":"failed to","Fragments":["rewrite","post","help"]},{"Key":"to rewrite","Fragments":["your","it"]},{"Key":"rewrite your","Fragments":["`fn(_key,"]},{"Key":"your `fn(_key,","Fragments":["old_count,"]},{"Key":"`fn(_key, old_count,","Fragments":["new_count)`"]},{"Key":"old_count, new_count)`","Fragments":["using"]},{"Key":"new_count)` using","Fragments":["the"]},{"Key":"the \u0026","Fragments":["notation","syntax","syntax","syntax","syntax"]},{"Key":"\u0026 notation","Fragments":["in"]},{"Key":"notation in","Fragments":["elixir"]},{"Key":"elixir 0.10.1","Fragments":[":)"]},{"Key":"I used","Fragments":["a","a","the","String.graphemes","```","a","the","String.strip","them","`Regex.scan`","something","two","for","is","that.","it","a","`Enum#count`","the","`PhoneValidation`","this","the","`grep","`Enum.reduce`","`Graph.update`","HashDict","in","`Stream.chunk/2`","Regex.scan/3","pattern"]},{"Key":"used a","Fragments":["similar","string,","record","HashSet","separate","separate","tail","single"]},{"Key":"similar approach","Fragments":["in","would","I've"]},{"Key":"approach in","Fragments":["my","the"]},{"Key":"Ruby version","Fragments":["and","(not"]},{"Key":"and got","Fragments":["some","a"]},{"Key":"got some","Fragments":["serious","descriptive","pointers","sort"]},{"Key":"some serious","Fragments":["critique"]},{"Key":"serious critique","Fragments":["from"]},{"Key":"critique from","Fragments":["Katrina."]},{"Key":"from Katrina.","Fragments":["But"]},{"Key":"Katrina. But","Fragments":["it"]},{"Key":"But it","Fragments":["is","turns","can","didn't","seems","doesn't"]},{"Key":"erlang genes","Fragments":["to","to"]},{"Key":"genes to","Fragments":["return","use"]},{"Key":"to return","Fragments":["atoms","your","that","`[]`,","the","a","the","false","lists","a","a","those","`[]`","`String.strip(str)","a"]},{"Key":"return atoms","Fragments":["and"]},{"Key":"atoms and","Fragments":["then"]},{"Key":"then pattern","Fragments":["match"]},{"Key":"match against","Fragments":["them","the","a"]},{"Key":"against them","Fragments":[","]},{"Key":"them ,","Fragments":["so"]},{"Key":", so","Fragments":["I'd"]},{"Key":"a perfect","Fragments":["solution"]},{"Key":"perfect solution","Fragments":["for"]},{"Key":"Let's just","Fragments":["fix"]},{"Key":"just fix","Fragments":["the"]},{"Key":"the typo","Fragments":["in","=)"]},{"Key":"typo in","Fragments":["`clasify`,","your"]},{"Key":"in `clasify`,","Fragments":["it"]},{"Key":"`clasify`, it","Fragments":["is"]},{"Key":"also rename","Fragments":["`empty`"]},{"Key":"rename `empty`","Fragments":["to"]},{"Key":"`empty` to","Fragments":["be"]},{"Key":"be in","Fragments":["line","that","flux.","one","your","good","the","reverse","a"]},{"Key":"in line","Fragments":["with","with","5,","8","5.","23","22.","4","16?","4","#6...","#5,","5","23","17","18?","18?","~25","25.","17.","17","6","13"]},{"Key":"with `yelling`","Fragments":["and"]},{"Key":"`yelling` and","Fragments":["`question`,"]},{"Key":"and `question`,","Fragments":["for"]},{"Key":"`question`, for","Fragments":["instance,"]},{"Key":"for instance,","Fragments":["`silence`.","you","will"]},{"Key":"way, `||","Fragments":["0`"]},{"Key":"`|| 0`","Fragments":["is"]},{"Key":"0` is","Fragments":["not","always"]},{"Key":"necessary, would","Fragments":["you"]},{"Key":"The old","Fragments":["count"]},{"Key":"old count","Fragments":["always"]},{"Key":"count always","Fragments":["initializes"]},{"Key":"always initializes","Fragments":["with"]},{"Key":"initializes with","Fragments":["1,"]},{"Key":"with 1,","Fragments":["so"]},{"Key":"1, so","Fragments":["it's"]},{"Key":"so it's","Fragments":["never","gone","not","no","not","fine","a","a","not","very","only","against"]},{"Key":"it's never","Fragments":["nil"]},{"Key":"Great idea,","Fragments":["still"]},{"Key":"idea, still","Fragments":["trying"]},{"Key":"still trying","Fragments":["to","to","to","to","to","to"]},{"Key":"to re-program","Fragments":["by"]},{"Key":"re-program by","Fragments":["brain"]},{"Key":"by brain","Fragments":["for"]},{"Key":"brain for","Fragments":["elixir."]},{"Key":"already better","Fragments":["than"]},{"Key":"my version","Fragments":[":)","of","prior"]},{"Key":"\u003e Is","Fragments":["there"]},{"Key":"there any","Fragments":["way","way","particular","improvement","way","way","way","way","guidelines","way","particular","particular","other"]},{"Key":"any way","Fragments":["to","to","to","you","to","to","to","to","to","to","to","reasonable,","you"]},{"Key":"the String.","Fragments":["prefix","prefix"]},{"Key":"String. prefix","Fragments":["to","to"]},{"Key":"prefix to","Fragments":["method","method"]},{"Key":"to method","Fragments":["calls?","calls?","chain","chain"]},{"Key":"Ok, think","Fragments":["I"]},{"Key":"I figured","Fragments":["it","I","this","since","it","this","as","there"]},{"Key":"figured it","Fragments":["out","might"]},{"Key":"Cool, thanks.","Fragments":["I've"]},{"Key":"thanks. I've","Fragments":["submitted"]},{"Key":"submitted my","Fragments":["changes."]},{"Key":"my changes.","Fragments":["Is"]},{"Key":"changes. Is","Fragments":["there"]},{"Key":"the silence?","Fragments":["call"]},{"Key":"silence? call","Fragments":["higher"]},{"Key":"call higher","Fragments":["up"]},{"Key":"higher up","Fragments":["the"]},{"Key":"the cond?","Fragments":["Not"]},{"Key":"cond? Not","Fragments":["sure"]},{"Key":"sure how","Fragments":["I","you","to","to","to","to","to","to","to","idiomatic","much","many","to","well","to","I","to","to"]},{"Key":"how I","Fragments":["feel","could","can","could","could","would","solved","wrote","might","feel","did","could","understand","solved","work","could","ended","can","yearn","would","implemented","avoided","would","feel","went","could","can","can","can","could","hosed"]},{"Key":"feel about","Fragments":["that","containing","doing","making","vertical","them.","this.","the"]},{"Key":"about that","Fragments":["as","operator.","module","(and","while","when","annoying","in","a","more","too.","as"]},{"Key":"that as","Fragments":["tests","a","`defp","cond","any","well","a"]},{"Key":"as tests","Fragments":["will"]},{"Key":"will break","Fragments":["if","the"]},{"Key":"break if","Fragments":["anyone"]},{"Key":"re-orders cond","Fragments":["again."]},{"Key":"that your","Fragments":["regex","code","two"]},{"Key":"your regex","Fragments":["matches","as","pattern.","pattern","is","only","could","should","properly,"]},{"Key":"regex matches","Fragments":["on"]},{"Key":"on multiple","Fragments":["characters,"]},{"Key":"multiple characters,","Fragments":["do"]},{"Key":"characters, do","Fragments":["you"]},{"Key":"the `roll_up_counts`","Fragments":["clause"]},{"Key":"`roll_up_counts` clause","Fragments":["matching"]},{"Key":"clause matching","Fragments":["the","in","in","in","in"]},{"Key":"matching the","Fragments":["empty","messages","lowercase"]},{"Key":"use `Enum.reduce`","Fragments":["to","to","to","than"]},{"Key":"`Enum.reduce` to","Fragments":["further","handle","solve"]},{"Key":"to further","Fragments":["simplify"]},{"Key":"further simplify","Fragments":["your"]},{"Key":"your rollup","Fragments":["function."]},{"Key":"the \"word\"","Fragments":["character","parameter"]},{"Key":"\"word\" character","Fragments":["class"]},{"Key":"class to","Fragments":["simplify","simplify","simplify","simplify"]},{"Key":"you thought","Fragments":["about","about","about","about","about","about","about","about","about","it","on","about"]},{"Key":"a conditional","Fragments":["of","and"]},{"Key":"conditional of","Fragments":["some"]},{"Key":"of some","Fragments":["sort","sort","external","of","later","unicode","way","perens.","of","of"]},{"Key":"sort inside","Fragments":["of"]},{"Key":"of `hey/1`","Fragments":["instead"]},{"Key":"`hey/1` instead","Fragments":["of"]},{"Key":"of building","Fragments":["your"]},{"Key":"building your","Fragments":["own"]},{"Key":"your own","Fragments":["implementation","module","recursive"]},{"Key":"own implementation","Fragments":["with","here,"]},{"Key":"What you","Fragments":["have","have","have","describe","could","could","need","have"]},{"Key":"have is","Fragments":["a","clear","fine","in","perfectly"]},{"Key":"very interesting,","Fragments":["approach."]},{"Key":"interesting, approach.","Fragments":["The"]},{"Key":"approach. The","Fragments":["tradeoff","only"]},{"Key":"The tradeoff","Fragments":["is"]},{"Key":"tradeoff is","Fragments":["that"]},{"Key":"a reader","Fragments":["has","can","to","unfamiliar","to"]},{"Key":"reader has","Fragments":["to","to","to","a"]},{"Key":"has to","Fragments":["do","scan","come","parse","pretty","do","be","be","look","be","be","be.","have","be","be","be.","be","do","traverse","traverse","be","copy","be","be","be","be","use","be","be","be","pattern","handle"]},{"Key":"do quite","Fragments":["a","a"]},{"Key":"quite a","Fragments":["bit","bit","bit","bit","lot","lot","bit","bit","bit","lot","bit","bit."]},{"Key":"of work","Fragments":["to","for","if","to"]},{"Key":"work to","Fragments":["understand","dry","keep"]},{"Key":"understand what","Fragments":["each","this","you","the","the","is","you","you're","your","those","kinds","this","is","they"]},{"Key":"what each","Fragments":["`true`","of"]},{"Key":"each `true`","Fragments":["means."]},{"Key":"see that","Fragments":["the","I'm","test","it","you've","I","a","it","two","it","it","you","it"]},{"Key":"the if/else","Fragments":["block"]},{"Key":"if/else block","Fragments":["inside"]},{"Key":"block inside","Fragments":["`shouting?\\1`"]},{"Key":"inside `shouting?\\1`","Fragments":["is"]},{"Key":"`shouting?\\1` is","Fragments":["designed"]},{"Key":"is designed","Fragments":["to"]},{"Key":"designed to","Fragments":["avoid","teach/practice","illustrate"]},{"Key":"to avoid","Fragments":["an","regular","duplication.","duplication","the","the","the","conditionals","in","unpleasantness","having","the","explicitly","forcing","having","magic","duplicating","being","repeating","the","\"(CompileError)","lines","it","a","calculating","using","explicitly","any","running","second","infinite","that.","functions","that","it","the","the","importing","it.","them","accidental","existing","building","several","constants","have","declaring","return","the"]},{"Key":"string being","Fragments":["wrongly"]},{"Key":"being wrongly","Fragments":["identified"]},{"Key":"wrongly identified","Fragments":["as"]},{"Key":"identified as","Fragments":["shouting.","valid."]},{"Key":"about other","Fragments":["ways","things.","functions"]},{"Key":"other ways","Fragments":["to","to","to","of","of"]},{"Key":"to prevent","Fragments":["`shouting?\\1`","the"]},{"Key":"prevent `shouting?\\1`","Fragments":["from"]},{"Key":"`shouting?\\1` from","Fragments":["ever"]},{"Key":"from ever","Fragments":["encountering"]},{"Key":"ever encountering","Fragments":["an"]},{"Key":"encountering an","Fragments":["empty"]},{"Key":"string in","Fragments":["your","Elixir,","general","the","verse","programming","the","a"]},{"Key":"The heart","Fragments":["of"]},{"Key":"heart of","Fragments":["this"]},{"Key":"this looks","Fragments":["good.","great.","good","great.","great,","good","a","pretty","pretty","pretty","pretty","great.","pretty","great.","great!","good,","good.","good","good.","absolutely","a","better:","good."]},{"Key":"looks good.","Fragments":["You've","My","There's","You","Any",":","i","I","One","One","It's","The","With",":)"]},{"Key":"good. You've","Fragments":["used","avoided","correctly","applied"]},{"Key":"You've used","Fragments":["the"]},{"Key":"used the","Fragments":["methods","idea","pipeline","same","|\u0026gt;","disjunction","recursive","same","pipe","shorthand","explicit","Enum.zip","`fn`","private","Elixir","same"]},{"Key":"the methods","Fragments":["that","with","i","so","based","to"]},{"Key":"that `String`","Fragments":["offers"]},{"Key":"`String` offers","Fragments":["to"]},{"Key":"offers to","Fragments":["make"]},{"Key":"I'm looking","Fragments":["at","at","around"]},{"Key":"at how","Fragments":["`silence?\\1`"]},{"Key":"how `silence?\\1`","Fragments":["is"]},{"Key":"`silence?\\1` is","Fragments":["constructed,"]},{"Key":"is constructed,","Fragments":["and"]},{"Key":"constructed, and","Fragments":["I'm"]},{"Key":"and I'm","Fragments":["wondering","happy","not","not","reading","sure","still","happy","finding","just","replacing","not","at"]},{"Key":"I'm wondering","Fragments":["if","if","if","if"]},{"Key":"wondering if","Fragments":["there","there's","there","there","it's","it","you","some"]},{"Key":"if there","Fragments":["are","are","are","are","are","were","is","is","was","is","is","are","was","was","is","is","was","is","are","is","were","are","was","are","are","is"]},{"Key":"are alternatives","Fragments":["to"]},{"Key":"alternatives to","Fragments":["using","handle"]},{"Key":"to using","Fragments":["`||`","`defp`","boolean","`@rogelio`","the"]},{"Key":"using `||`","Fragments":["to","and"]},{"Key":"`||` to","Fragments":["perform"]},{"Key":"to perform","Fragments":["that","the","on"]},{"Key":"perform that","Fragments":["control"]},{"Key":"that control","Fragments":["flow."]},{"Key":"control flow.","Fragments":["Have"]},{"Key":"flow. Have","Fragments":["you"]},{"Key":"Elixir provides","Fragments":["to","a","a"]},{"Key":"provides to","Fragments":["accomplish"]},{"Key":"to accomplish","Fragments":["the","this","the","this","this","map,","that?","the"]},{"Key":"accomplish the","Fragments":["same","same","same","goals","same"]},{"Key":"about breaking","Fragments":["each","out"]},{"Key":"breaking each","Fragments":["condition"]},{"Key":"each condition","Fragments":["into","more"]},{"Key":"method of","Fragments":["it's"]},{"Key":"it's own.","Fragments":["I"]},{"Key":"own. I","Fragments":["also"]},{"Key":"also tried","Fragments":["to","to","`String.upcase(s)","case,","it"]},{"Key":"guards or","Fragments":["pattern"]},{"Key":"or pattern","Fragments":["matches","matching"]},{"Key":"pattern matches","Fragments":["instead","in","for","for"]},{"Key":"matches instead","Fragments":["of"]},{"Key":"all of","Fragments":["the","that","the","the","them?","being","the","the","these","the","```String```","your","them","the","Enum","the","the","the","these","`score`","the","the","those","your","the","the","the","the","the","the","the"]},{"Key":"the `String.`","Fragments":["functions,"]},{"Key":"`String.` functions,","Fragments":["but"]},{"Key":"out a","Fragments":["way","\"clean\"","nice","name","bit"]},{"Key":"it since","Fragments":["I","there's","?\u003ca","the"]},{"Key":"can't call","Fragments":["in"]},{"Key":"I liked","Fragments":["the","it","the","the"]},{"Key":"liked the","Fragments":["module","readability","general","short-circuiting"]},{"Key":"the module","Fragments":["Language.","could","name.","though,","with","attribute","name.","as","one-liners.","by","to","(I","`Beer.Verse`","attributes","if","though,","name.","with","(Kernel.inspect)","it","would","in","file.","to"]},{"Key":"think for","Fragments":["predicate","you,","the"]},{"Key":"for predicate","Fragments":["methods","methods."]},{"Key":"methods maybe","Fragments":["only"]},{"Key":"maybe only","Fragments":["a"]},{"Key":"question mark","Fragments":["could","at","gets","to","rather","such","on","to","(a","(most","style,","syntax","or","to","like","is","at","should"]},{"Key":"mark could","Fragments":["be"]},{"Key":"be enough?","Fragments":["For"]},{"Key":"enough? For","Fragments":["example"]},{"Key":"For example","Fragments":["`silence?`","`message`?","`thing.is_xpath?`","```Enum.filter(candidates,","if","if","it","`Enum.zip`","if","they","\"major-elect\"","`iolist_to_binary([[\"A\",","`parallel-letter-frequency`","here's","computing","`\\p{L}`","`count`","\"УХОДИТЬ\"","`map/2`","if","using","`\\p{L}`","you","by","`[f.(h)"]},{"Key":"example `silence?`","Fragments":["or"]},{"Key":"`silence?` or","Fragments":["`question?`.","`shouting?`."]},{"Key":"didn't knew","Fragments":["about"]},{"Key":"knew about","Fragments":["`cond`"]},{"Key":"`cond` .","Fragments":["Now"]},{"Key":". Now","Fragments":["that"]},{"Key":"I'm using","Fragments":["it,","0.10.0","both","`defp`","recursion","version","the","it"]},{"Key":"using it,","Fragments":["my"]},{"Key":"it, my","Fragments":["code"]},{"Key":"my code","Fragments":["is","will","in","if","I","doesn't","accordingly.",":-)","even","is","to","when"]},{"Key":"use one","Fragments":["`cond`,","here.","every"]},{"Key":"one `cond`,","Fragments":["instead"]},{"Key":"`cond`, instead","Fragments":["of"]},{"Key":"using 2","Fragments":["pattern"]},{"Key":"2 pattern","Fragments":["matchings."]},{"Key":"The `is_shouting?`","Fragments":["is"]},{"Key":"`is_shouting?` is","Fragments":["a"]},{"Key":"a much","Fragments":["better","shorter","simpler","bigger","simpler","better","simpler","shorter","more","less"]},{"Key":"than `is_upcase`,","Fragments":["as"]},{"Key":"`is_upcase`, as","Fragments":["it"]},{"Key":"it expresses","Fragments":["a","the"]},{"Key":"expresses a","Fragments":["domain"]},{"Key":"a domain","Fragments":["concept.","concept."]},{"Key":"domain concept.","Fragments":["Moreover,"]},{"Key":"concept. Moreover,","Fragments":["it"]},{"Key":"Moreover, it","Fragments":["seems"]},{"Key":"that \"sentence\"","Fragments":["is"]},{"Key":"\"sentence\" is","Fragments":["too"]},{"Key":"too formal","Fragments":["for"]},{"Key":"formal for","Fragments":["this"]},{"Key":"this context,","Fragments":["but"]},{"Key":"context, but","Fragments":["I"]},{"Key":"the extended","Fragments":["readability"]},{"Key":"extended readability","Fragments":["of"]},{"Key":"readability of","Fragments":["is_,","some","the","my","the","the"]},{"Key":"of is_,","Fragments":["this"]},{"Key":"is_, this","Fragments":["is"]},{"Key":"is essentially","Fragments":["saying","a"]},{"Key":"essentially saying","Fragments":["\"if"]},{"Key":"saying \"if","Fragments":["message"]},{"Key":"\"if message","Fragments":["is"]},{"Key":"is silence","Fragments":["then"]},{"Key":"silence then","Fragments":["\"Fine."]},{"Key":"then \"Fine.","Fragments":["Be"]},{"Key":"that way!\"\"","Fragments":["\"If"]},{"Key":"way!\"\" \"If","Fragments":["message"]},{"Key":"\"If message","Fragments":["is"]},{"Key":"is question","Fragments":["then"]},{"Key":"question then","Fragments":["\"Sure\"\""]},{"Key":"then \"Sure\"\"","Fragments":["etc"]},{"Key":"\"Sure\"\" etc","Fragments":["etc"]},{"Key":"about `String.upcase`","Fragments":["to"]},{"Key":"`String.upcase` to","Fragments":["validate"]},{"Key":"to validate","Fragments":["`shout?`","user"]},{"Key":"validate `shout?`","Fragments":["instead"]},{"Key":"`shout?` instead","Fragments":["of"]},{"Key":" msg","Fragments":["==","=="]},{"Key":"msg ==","Fragments":["String.upcase","String.upcase"]},{"Key":"== String.upcase","Fragments":["msg","msg","word`","word)`.","word`)","word`."]},{"Key":"defp yelling?(msg)","Fragments":["do"]},{"Key":"good point","Fragments":["about","about","-","thanks"]},{"Key":"order of","Fragments":["splitting","least","some","the","conditionals.","conditions","fn's","declaration","function","the","the","\"cond\"","the","keys","the"]},{"Key":"of splitting","Fragments":["and","up","and","the"]},{"Key":"splitting and","Fragments":["downcasing.","joining."]},{"Key":"I'll definitely","Fragments":["check","look"]},{"Key":"definitely check","Fragments":["out"]},{"Key":"out `Dict.merge/3`.","Fragments":["It"]},{"Key":"`Dict.merge/3`. It","Fragments":["felt"]},{"Key":"felt like","Fragments":["there","it","stopping?","it","the","it","I","this","it"]},{"Key":"like there","Fragments":["should","is","are","must","is","should","should","is"]},{"Key":"there should","Fragments":["be","be","be…","be","be","be","be","be"]},{"Key":"be something","Fragments":["native","like","that","like","like:"]},{"Key":"something native","Fragments":["to"]},{"Key":"native to","Fragments":["accomplish"]},{"Key":"accomplish this","Fragments":["fairly","more","with","with"]},{"Key":"this fairly","Fragments":["common"]},{"Key":"fairly common","Fragments":["task."]},{"Key":"getting really","Fragments":["good!"]},{"Key":"really good!","Fragments":["I"]},{"Key":"good! I","Fragments":["think","like"]},{"Key":"I'd change","Fragments":["is"]},{"Key":"just insert","Fragments":["`String.downcase`","my"]},{"Key":"insert `String.downcase`","Fragments":["into"]},{"Key":"pipeline before","Fragments":["`tokenize`,","it"]},{"Key":"before `tokenize`,","Fragments":["then"]},{"Key":"`tokenize`, then","Fragments":["you"]},{"Key":"could get","Fragments":["rid","rid","feedback.","the","a","rid","rid"]},{"Key":"your `ignore_case`","Fragments":["function."]},{"Key":"`ignore_case` function.","Fragments":["Great"]},{"Key":"function. Great","Fragments":["work!"]},{"Key":"Good idea","Fragments":["but"]},{"Key":"idea but","Fragments":["no","is"]},{"Key":"but no","Fragments":["I","numbers,","macros."]},{"Key":"meant something","Fragments":["even"]},{"Key":"something even","Fragments":["simpler"]},{"Key":"even simpler","Fragments":["like"]},{"Key":"simpler like","Fragments":["```string"]},{"Key":"like ```string","Fragments":["=="]},{"Key":"```string ==","Fragments":["\"\"```"]},{"Key":"been coding","Fragments":["for"]},{"Key":"coding for","Fragments":["a"]},{"Key":"a long","Fragments":["time","way","time,","time","time","time","list","time"]},{"Key":"long time","Fragments":["and","since","Perl","ago","ago"]},{"Key":"time and","Fragments":["I","passing"]},{"Key":"have strong","Fragments":["opinions"]},{"Key":"strong opinions","Fragments":["on"]},{"Key":"opinions on","Fragments":["what"]},{"Key":"what good","Fragments":["code","code"]},{"Key":"good code","Fragments":["looks","readability:","looks"]},{"Key":"code looks","Fragments":["like.","good,","uglier","good.","good.","good","good.","quite","a","quite","good.","like.","great"]},{"Key":"looks like.","Fragments":["Simple","Good"]},{"Key":"like. Simple","Fragments":["problems"]},{"Key":"Simple problems","Fragments":["should"]},{"Key":"problems should","Fragments":["have"]},{"Key":"have simple","Fragments":["solutions."]},{"Key":"simple solutions.","Fragments":["Adding"]},{"Key":"solutions. Adding","Fragments":["abstractions"]},{"Key":"Adding abstractions","Fragments":["to"]},{"Key":"abstractions to","Fragments":["solve"]},{"Key":"to solve","Fragments":["a","a","this","this.","this","this","this","the","the"]},{"Key":"solve a","Fragments":["problem","different"]},{"Key":"problem of","Fragments":["this","a","exercises"]},{"Key":"this magnitude","Fragments":["doesn't"]},{"Key":"magnitude doesn't","Fragments":["make"]},{"Key":"code better.","Fragments":["It","The"]},{"Key":"better. It","Fragments":["might"]},{"Key":"help train","Fragments":["you"]},{"Key":"train you","Fragments":["to"]},{"Key":"different problem","Fragments":["of"]},{"Key":"larger magnitude,","Fragments":["but"]},{"Key":"magnitude, but","Fragments":["I"]},{"Key":"am only","Fragments":["concerned"]},{"Key":"only concerned","Fragments":["with"]},{"Key":"concerned with","Fragments":["appropriately"]},{"Key":"with appropriately","Fragments":["solving"]},{"Key":"appropriately solving","Fragments":["the"]},{"Key":"solving the","Fragments":["problem","exercise:"]},{"Key":"the problem","Fragments":["at","with","is","you","was","with","here","only","but","description","actually","using","I","as","in","with"]},{"Key":"problem at","Fragments":["hand."]},{"Key":"at hand.","Fragments":["Refactoring"]},{"Key":"hand. Refactoring","Fragments":["comes"]},{"Key":"Refactoring comes","Fragments":["later"]},{"Key":"comes later","Fragments":["when"]},{"Key":"later when","Fragments":["it","the"]},{"Key":"makes sense,","Fragments":["it","but"]},{"Key":"sense, it","Fragments":["does"]},{"Key":"not make","Fragments":["sense","it"]},{"Key":"sense at","Fragments":["this"]},{"Key":"interested only","Fragments":["in","in"]},{"Key":"only in","Fragments":["feedback","feedback","Haskell"]},{"Key":"in feedback","Fragments":["on","on"]},{"Key":"on stuff","Fragments":["that","that"]},{"Key":"stuff that","Fragments":["matters,","matters,","was"]},{"Key":"that matters,","Fragments":["such","such"]},{"Key":"matters, such","Fragments":["as","as"]},{"Key":"as better","Fragments":["usage","usage"]},{"Key":"better usage","Fragments":["of","of"]},{"Key":"usage of","Fragments":["language","language","parentheses","the","the"]},{"Key":"of language","Fragments":["features","features","is"]},{"Key":"language features","Fragments":["or","or","just","they","(it's"]},{"Key":"features or","Fragments":["the","the"]},{"Key":"standard library,","Fragments":["or","or","and"]},{"Key":"library, or","Fragments":["algorithmic","algorithmic"]},{"Key":"or algorithmic","Fragments":["improvements.","improvements."]},{"Key":"algorithmic improvements.","Fragments":["This"]},{"Key":"improvements. This","Fragments":["style"]},{"Key":"This style","Fragments":["guide","is"]},{"Key":"style guide","Fragments":["stuff","that"]},{"Key":"guide stuff","Fragments":["is"]},{"Key":"stuff is","Fragments":["subjective","so","mostly","why"]},{"Key":"is subjective","Fragments":["and"]},{"Key":"subjective and","Fragments":["unimportant,"]},{"Key":"and unimportant,","Fragments":["and"]},{"Key":"unimportant, and","Fragments":["if"]},{"Key":"and if","Fragments":["that's","that's","you","this","the","it","you","you","that's","the","there"]},{"Key":"that's what","Fragments":["this","I'm","I","I'm","determines"]},{"Key":"what this","Fragments":["community","function","is,","code"]},{"Key":"this community","Fragments":["is"]},{"Key":"is about,","Fragments":["I"]},{"Key":"about, I","Fragments":["am"]},{"Key":"not interested","Fragments":["in","in"]},{"Key":"in being","Fragments":["part"]},{"Key":"being part","Fragments":["of"]},{"Key":"great! I","Fragments":["think"]},{"Key":"regex a","Fragments":["bit"]},{"Key":"bit --","Fragments":["the"]},{"Key":"-- the","Fragments":["`\\w`"]},{"Key":"the `\\w`","Fragments":["should"]},{"Key":"`\\w` should","Fragments":["include","be"]},{"Key":"should include","Fragments":["digits"]},{"Key":"include digits","Fragments":["as"]},{"Key":"digits as","Fragments":["well."]},{"Key":"you moved","Fragments":["the","the","the","to","the"]},{"Key":"the `downcase`","Fragments":["earlier,","earlier,","operation"]},{"Key":"`downcase` earlier,","Fragments":["you","then"]},{"Key":"earlier, you","Fragments":["could","could"]},{"Key":"could avoid","Fragments":["mapping","checking","the","mapping","recursion","the","the","the"]},{"Key":"avoid mapping","Fragments":["over","over"]},{"Key":"mapping over","Fragments":["the","the"]},{"Key":"over the","Fragments":["list","top","set","`?`","builtin","mass","collection","lists","strand","cond","values","collections","lists","`@bertram`","higher","list.","list.","list","lists.","words","words","string","strand","whole"]},{"Key":"of words.","Fragments":["Also,","Those","I"]},{"Key":"words. Also,","Fragments":["check"]},{"Key":"out `Dict.merge/3`","Fragments":["--"]},{"Key":"`Dict.merge/3` --","Fragments":["I"]},{"Key":"make `roll_up_counts`","Fragments":["simpler."]},{"Key":"you do","Fragments":["your","not","have","`import","in","it","it","this:","is","that","that,","X?\"","for","without","it","it.","it","`Enum.any?([false])`","have","this","want","this","have","want?","this","when","want.","it","this","want?","want","use","this","want","want.","want?","this","this","see","want?","it.","not","this","this","that,","on","a"]},{"Key":"do your","Fragments":["string"]},{"Key":"your string","Fragments":["cleanup"]},{"Key":"string cleanup","Fragments":["earlier"]},{"Key":"cleanup earlier","Fragments":["in"]},{"Key":"the process","Fragments":["and","dictionary,","if","of","just","working","only","to","used"]},{"Key":"process and","Fragments":["use"]},{"Key":"use `Regex.scan`,","Fragments":["I"]},{"Key":"remove quite","Fragments":["a"]},{"Key":"Good call.","Fragments":["I'll","That"]},{"Key":"call. I'll","Fragments":["refactor"]},{"Key":"I'll refactor","Fragments":["where","the","and","this.","the"]},{"Key":"refactor where","Fragments":["I"]},{"Key":"where I","Fragments":["can","see","changed","think","had","tried","try","consider","appreciate","should","think"]},{"Key":"can and","Fragments":["resubmit","can't"]},{"Key":"and resubmit","Fragments":["shortly.","so"]},{"Key":" Yes","Fragments":["all","it",",","-","you're","it"]},{"Key":"Yes all","Fragments":["of"]},{"Key":"of that","Fragments":["is","without","change","`fn`","without","in","(there","do","before.","variation","record.","before)","map+reduce","function","could","module.","callback?","more","number","but","is","one","or","commented-out","change?","function.","method"]},{"Key":"is true,","Fragments":["I","`\"1\"","`\"a\""]},{"Key":"true, I","Fragments":["tried"]},{"Key":"to fix","Fragments":["it.","that","this","that","the","these","but","my","it","that","that","it"]},{"Key":"fix it.","Fragments":["I"]},{"Key":"I found","Fragments":["Kernel.size/1","the","a","that","it","that","the","to","flat_map","the","Macro.escape,","this","the","Erland","in"]},{"Key":"found Kernel.size/1","Fragments":["for"]},{"Key":"Kernel.size/1 for","Fragments":["the"]},{"Key":"the size,","Fragments":["is"]},{"Key":"size, is","Fragments":["that"]},{"Key":"that what","Fragments":["you","you","I"]},{"Key":"You're right;","Fragments":["I"]},{"Key":"right; I","Fragments":["just"]},{"Key":"just updated","Fragments":["to","to","to"]},{"Key":"updated to","Fragments":["10.2-dev","0.11","v0.12.2","make"]},{"Key":"to 10.2-dev","Fragments":["and"]},{"Key":"10.2-dev and","Fragments":["see"]},{"Key":"see the","Fragments":["same","output","issue","benefit","pieces.","functions","parentheses","benefit","benefits","reasoning","intention","point","rare","double","transformation"]},{"Key":"same thing.","Fragments":["Sorry"]},{"Key":"thing. Sorry","Fragments":["for"]},{"Key":"Sorry for","Fragments":["the","so","the","the"]},{"Key":"should consider","Fragments":["extracting","making","a"]},{"Key":"checks in","Fragments":["private","private","separate","`Person`","decode_message","a"]},{"Key":"to increase","Fragments":["readability.","readability.","scannability."]},{"Key":"Also there","Fragments":["must","is"]},{"Key":"there must","Fragments":["be","be","be","be","be","be","be"]},{"Key":"must be","Fragments":["a","a","converted","missing","intended","a","tested","non-negative).","written","a","a","the","a","info","a"]},{"Key":"test the","Fragments":["phrase","Greeting","whole","relationship"]},{"Key":"phrase than","Fragments":["Regex."]},{"Key":"job for","Fragments":["a"]},{"Key":" Similar","Fragments":["question","to"]},{"Key":"So that","Fragments":["you","is"]},{"Key":"know, there","Fragments":["is"]},{"Key":"a shorter","Fragments":["way","way","way"]},{"Key":"shorter way","Fragments":["to","to","of","of"]},{"Key":" Sorry","Fragments":["if",",","if","but","you've","for",",","to","for","!","I"]},{"Key":"Sorry if","Fragments":["you","I"]},{"Key":"you feel","Fragments":["like","about","about","about","the","that","`blank?`","like","about"]},{"Key":"feel like","Fragments":["you're","conceptually","it","a","the","steering","you","I","there","it's","it's","lines","there","Enum.reduce","different","I","I","I've","`s","this","it","something","there","there","there","shining","pattern","the","a","`incr_count_for_word`"]},{"Key":"like you're","Fragments":["wasting","calling","telling","going","doing","cheating","running","checking"]},{"Key":"you're wasting","Fragments":["your"]},{"Key":"wasting your","Fragments":["time"]},{"Key":"There's no","Fragments":["unwritten","i18n","harm","guessing","reason","way","need","way"]},{"Key":"no unwritten","Fragments":["exercism"]},{"Key":"unwritten exercism","Fragments":["style","style"]},{"Key":"exercism style","Fragments":["guide","guide."]},{"Key":"guide that","Fragments":["you"]},{"Key":"to conform","Fragments":["to,"]},{"Key":"conform to,","Fragments":["your"]},{"Key":"to, your","Fragments":["code"]},{"Key":"just not","Fragments":["good","sure","quite"]},{"Key":"not good","Fragments":["enough","with"]},{"Key":"good enough","Fragments":["in","I","reason"]},{"Key":"enough in","Fragments":["its","my"]},{"Key":"in its","Fragments":["current","own","use","current"]},{"Key":"its current","Fragments":["iteration.","form."]},{"Key":"The goal","Fragments":["is"]},{"Key":"goal is","Fragments":["not","to","to","to"]},{"Key":"suite green","Fragments":["but"]},{"Key":"green but","Fragments":["to"]},{"Key":"produce and","Fragments":["discuss"]},{"Key":"and discuss","Fragments":["best"]},{"Key":"discuss best","Fragments":["practices."]},{"Key":"best practices.","Fragments":["Best"]},{"Key":"practices. Best","Fragments":["practices"]},{"Key":"Best practices","Fragments":["include"]},{"Key":"practices include","Fragments":["local"]},{"Key":"include local","Fragments":["variables"]},{"Key":"local variables","Fragments":["naming","could"]},{"Key":"variables naming","Fragments":["and"]},{"Key":"and other","Fragments":["nitpicks","for","non"]},{"Key":"other nitpicks","Fragments":["that"]},{"Key":"nitpicks that","Fragments":["you"]},{"Key":"may feel","Fragments":["irrelevant","like"]},{"Key":"feel irrelevant","Fragments":["but"]},{"Key":"irrelevant but","Fragments":["that"]},{"Key":"are relevant","Fragments":["to"]},{"Key":"relevant to","Fragments":["others.","what","the"]},{"Key":"a community","Fragments":["whose"]},{"Key":"community whose","Fragments":["goal"]},{"Key":"whose goal","Fragments":["is"]},{"Key":"the \"best\"","Fragments":["code"]},{"Key":"\"best\" code","Fragments":["possible"]},{"Key":"possible I","Fragments":["think"]},{"Key":"it's important","Fragments":["to"]},{"Key":"important to","Fragments":["give","bring","the"]},{"Key":"give these","Fragments":["kind"]},{"Key":"these kind","Fragments":["of","of"]},{"Key":" Again","Fragments":["sorry"]},{"Key":"Again sorry","Fragments":["if"]},{"Key":"sorry if","Fragments":["that's"]},{"Key":"that's not","Fragments":["how","a-z,","done","a","what","a","a","generally","the","the"]},{"Key":"not how","Fragments":["you"]},{"Key":"see exorcism","Fragments":["go,"]},{"Key":"exorcism go,","Fragments":["I"]},{"Key":"go, I","Fragments":["hope"]},{"Key":"I hope","Fragments":["you'll","there's","that's","this","I'm"]},{"Key":"hope you'll","Fragments":["stay"]},{"Key":"you'll stay","Fragments":["here"]},{"Key":"stay here","Fragments":["and"]},{"Key":"here and","Fragments":["keep","there","have","there.","a","there","couldn't"]},{"Key":"and keep","Fragments":["producing"]},{"Key":"keep producing","Fragments":["your"]},{"Key":"producing your","Fragments":["best."]},{"Key":" phrase","Fragments":["isn't","|\u003e","|\u003e"]},{"Key":"phrase isn't","Fragments":["a"]},{"Key":"isn't a","Fragments":["good","lambda","particularly","problem","wrong","very","test","great","problem","problem","lower-case"]},{"Key":"good variable","Fragments":["name"]},{"Key":"name either,","Fragments":["because","because"]},{"Key":"either, because","Fragments":["it's","\"apply\""]},{"Key":"it's misleading.","Fragments":["\"\""]},{"Key":"misleading. \"\"","Fragments":["is"]},{"Key":"\"\" is","Fragments":["not"]},{"Key":"a phrase.","Fragments":["I've","The"]},{"Key":"phrase. I've","Fragments":["never"]},{"Key":"I've never","Fragments":["seen","been"]},{"Key":"seen a","Fragments":["definition","number","lot","lot","few"]},{"Key":"a definition","Fragments":["of"]},{"Key":"definition of","Fragments":["phrase","`silent?`","`sing`","anagramness.","the","`being_yelled_at?`","shouting","a","word"]},{"Key":"of phrase","Fragments":["where"]},{"Key":"phrase where","Fragments":["zero"]},{"Key":"where zero","Fragments":["words"]},{"Key":"zero words","Fragments":["was"]},{"Key":"words was","Fragments":["considered"]},{"Key":"was considered","Fragments":["a"]},{"Key":"considered a","Fragments":["phrase.","\"falsy\"","word","word","word"]},{"Key":"My biggest","Fragments":["problem","doubt"]},{"Key":"biggest problem","Fragments":["with"]},{"Key":"this code","Fragments":["is","and","is","react","could","pass","is","looks","is.","is","looks","looks","without","greatly.","it","doesn't","by","does","some","is"]},{"Key":"function 'hey'.","Fragments":["The"]},{"Key":"'hey'. The","Fragments":["name"]},{"Key":"The name","Fragments":["of"]},{"Key":"module could","Fragments":["be"]},{"Key":"lot better","Fragments":["as","that","now."]},{"Key":"better as","Fragments":["well,","it"]},{"Key":"as well,","Fragments":["but","I","as","but","and","by","no","but","so","not","though","your","that's"]},{"Key":"well, but","Fragments":["since","I'm","there","yeah,"]},{"Key":"but since","Fragments":["that's","we","you","they're"]},{"Key":"since that's","Fragments":["built-in","one","what"]},{"Key":"that's built-in","Fragments":["to"]},{"Key":"built-in to","Fragments":["the"]},{"Key":"exercise it's","Fragments":["not"]},{"Key":"not something","Fragments":["that","arbitrarily","I'd've","you","we","that","that"]},{"Key":"that can","Fragments":["be","simplify","accomplish","handle","be","just","then","be","clean"]},{"Key":"The reason","Fragments":["to","I'm","`\u0026(\u00261","I'm","for","that","is","why"]},{"Key":"use ===","Fragments":["is"]},{"Key":"=== is","Fragments":["because,"]},{"Key":"is because,","Fragments":["at"]},{"Key":"because, at","Fragments":["least"]},{"Key":"least in","Fragments":["Erlang,","this","languages"]},{"Key":"in Erlang,","Fragments":["=:=","it's"]},{"Key":"Erlang, =:=","Fragments":["is"]},{"Key":"=:= is","Fragments":["generally"]},{"Key":"is generally","Fragments":["the","supposed","overpowered"]},{"Key":"generally the","Fragments":["correct"]},{"Key":"correct operator","Fragments":["to"]},{"Key":"use for","Fragments":["equality.","the","any"]},{"Key":"for equality.","Fragments":["It","If"]},{"Key":"equality. It","Fragments":["guarantees"]},{"Key":"It guarantees","Fragments":["that"]},{"Key":"guarantees that","Fragments":["the"]},{"Key":"test will","Fragments":["only","fail"]},{"Key":"will only","Fragments":["succeed","match","match","sort"]},{"Key":"only succeed","Fragments":["if"]},{"Key":"succeed if","Fragments":["both","I"]},{"Key":"if both","Fragments":["operands","`1","have"]},{"Key":"both operands","Fragments":["are"]},{"Key":"operands are","Fragments":["of"]},{"Key":"are of","Fragments":["the","my"]},{"Key":"same type.","Fragments":["This","I"]},{"Key":"type. This","Fragments":["really"]},{"Key":"This really","Fragments":["only"]},{"Key":"really only","Fragments":["matters"]},{"Key":"only matters","Fragments":["for"]},{"Key":"matters for","Fragments":["numbers,","the"]},{"Key":"for numbers,","Fragments":["but"]},{"Key":"numbers, but","Fragments":["it's","if","if","if","if","if","if","if"]},{"Key":"but it's","Fragments":["the","a","all","basically","in","really","cool","handy","kind","best","wrong","easier","far","already","a","an","a","calling","a","great","pretty","definition","a","working.","a","not","also"]},{"Key":"it's the","Fragments":["default","output","nature","same","wrong","\"better\"","one","same","number","reduce","side-effect","exercises","argument","same","same"]},{"Key":"default equality","Fragments":["comparator"]},{"Key":"equality comparator","Fragments":["for"]},{"Key":"comparator for","Fragments":["most"]},{"Key":"for most","Fragments":["experienced","simple"]},{"Key":"most experienced","Fragments":["developers"]},{"Key":"experienced developers","Fragments":["because"]},{"Key":"developers because","Fragments":["it"]},{"Key":"because it","Fragments":["prevents","speaks","resembles","is","seems","affects","made","returns","was","failed","is","reads","avoids","doesn't","looks","feels","looks","reminded","does","doesn't","was","doesn't","returns","allowed","felt","does:","gives","gives","seems","is","gives","gives","fails","triggers","felt","also","felt","seemed","takes","feels"]},{"Key":"it prevents","Fragments":["the"]},{"Key":"prevents the","Fragments":["most"]},{"Key":"most surprise,","Fragments":["in"]},{"Key":"surprise, in","Fragments":["the"]},{"Key":"same way","Fragments":["(but","I"]},{"Key":"way (but","Fragments":["much"]},{"Key":"(but much","Fragments":["less"]},{"Key":"less important)","Fragments":["than"]},{"Key":"important) than","Fragments":["==="]},{"Key":"than ===","Fragments":["in"]},{"Key":"=== in","Fragments":["JavaScript."]},{"Key":"In any","Fragments":["case,","case","case","case"]},{"Key":"any case,","Fragments":["I","I"]},{"Key":"case, I","Fragments":["am","wouldn't","thought","am"]},{"Key":"am no","Fragments":["longer","expert,"]},{"Key":"no longer","Fragments":["interested.","order","order","needed","works","works","needed","allowed","necessary.","need","function","have","be","work"]},{"Key":"longer interested.","Fragments":["This"]},{"Key":"interested. This","Fragments":["is"]},{"Key":"a waste","Fragments":["of"]},{"Key":"waste of","Fragments":["my"]},{"Key":"of my","Fragments":["time,","league.","first","problem","first","own","head:","ruby","current","making.","artificial","use","implementation","solution","custom","head","`map`","comfort"]},{"Key":"my time,","Fragments":["I'm"]},{"Key":"time, I'm","Fragments":["not"]},{"Key":"in deciphering","Fragments":["and"]},{"Key":"deciphering and","Fragments":["conforming"]},{"Key":"and conforming","Fragments":["to"]},{"Key":"conforming to","Fragments":["the"]},{"Key":"the unwritten","Fragments":["exercism"]},{"Key":"style guide.","Fragments":["You"]},{"Key":"guide. You","Fragments":["all"]},{"Key":"You all","Fragments":["are"]},{"Key":"all are","Fragments":["focusing"]},{"Key":"are focusing","Fragments":["on"]},{"Key":"focusing on","Fragments":["the"]},{"Key":"really don't","Fragments":["matter.","know","have","like"]},{"Key":"is reads","Fragments":["better"]},{"Key":"with is_","Fragments":["than"]},{"Key":"is_ than","Fragments":["without,"]},{"Key":"than without,","Fragments":["and"]},{"Key":"without, and","Fragments":["breaking"]},{"Key":"and breaking","Fragments":["it"]},{"Key":"breaking it","Fragments":["out","out","up."]},{"Key":"out into","Fragments":["a","module","a","private","private","a","a","separate","small","a","a","a","seperate"]},{"Key":"a Language","Fragments":["module"]},{"Key":"module is","Fragments":["a","acting","usually","a","rarely","prohibited"]},{"Key":"step in","Fragments":["the","the","the"]},{"Key":"My only","Fragments":["thought","other","nitpick","comment","suggestion","other","nit","thought","minor","suggestions"]},{"Key":"only thought","Fragments":["would","on"]},{"Key":"thought would","Fragments":["be","be"]},{"Key":"would feel","Fragments":["about","more"]},{"Key":"about containing","Fragments":["all"]},{"Key":"containing all","Fragments":["the"]},{"Key":"logic inside","Fragments":["the"]},{"Key":"the `cond","Fragments":["do`"]},{"Key":"`cond do`","Fragments":["instead"]},{"Key":"do` instead","Fragments":["having","of"]},{"Key":"instead having","Fragments":["the"]},{"Key":"the `hey/1","Fragments":["\"\"`"]},{"Key":"`hey/1 \"\"`","Fragments":["to"]},{"Key":"\"\"` to","Fragments":["find"]},{"Key":"find empty","Fragments":["strings."]},{"Key":"empty strings.","Fragments":["I"]},{"Key":"strings. I","Fragments":["think","think","know"]},{"Key":"would read","Fragments":["a","more","better"]},{"Key":"better by","Fragments":["being"]},{"Key":"being more","Fragments":["concise.","efficient,"]},{"Key":"I originally","Fragments":["included","did","had","did","had","considered"]},{"Key":"originally included","Fragments":["the"]},{"Key":"included the","Fragments":["`roll_up_counts([\"\"|...`","example","exceptions."]},{"Key":"the `roll_up_counts([\"\"|...`","Fragments":["guard"]},{"Key":"`roll_up_counts([\"\"|...` guard","Fragments":["statement"]},{"Key":"statement because","Fragments":["I"]},{"Key":"wasn't confident","Fragments":["in"]},{"Key":"confident in","Fragments":["the","my"]},{"Key":"the regex.","Fragments":["But","Also,","Additionally,",":)"]},{"Key":"regex. But","Fragments":["it"]},{"Key":"it turns","Fragments":["out"]},{"Key":"turns out","Fragments":["to","not","there","there","that"]},{"Key":"be helpful","Fragments":["at"]},{"Key":"helpful at","Fragments":["catching"]},{"Key":"at catching","Fragments":["an"]},{"Key":"catching an","Fragments":["empty"]},{"Key":"string `\"\"`","Fragments":["passed"]},{"Key":"`\"\"` passed","Fragments":["to"]},{"Key":"to `count/1`.","Fragments":["Without"]},{"Key":"`count/1`. Without","Fragments":["the"]},{"Key":"Without the","Fragments":["guard,","need"]},{"Key":"the guard,","Fragments":["that"]},{"Key":"guard, that","Fragments":["would"]},{"Key":"would return","Fragments":["`{\"\"","a","a","`nil`.","`nil`","[[matches],"]},{"Key":"return `{\"\"","Fragments":["=\u003e"]},{"Key":"`{\"\" =\u003e","Fragments":["1}`"]},{"Key":" P.S.","Fragments":["I","i"]},{"Key":"P.S. I","Fragments":["get"]},{"Key":"I get","Fragments":["the","what","the","it.","your","rid","a","a","a","annoyed","a","a","that","quality","a"]},{"Key":"the impression","Fragments":["that","you"]},{"Key":"impression that","Fragments":["these"]},{"Key":"these one-line","Fragments":["`,"]},{"Key":"one-line `,","Fragments":["do:`"]},{"Key":"`, do:`","Fragments":["structures"]},{"Key":"do:` structures","Fragments":["are"]},{"Key":"structures are","Fragments":["hard","created"]},{"Key":"are hard","Fragments":["to",":/","functions","to"]},{"Key":"read on","Fragments":["this"]},{"Key":"this web","Fragments":["interface"]},{"Key":"web interface","Fragments":["without"]},{"Key":"interface without","Fragments":["expanding"]},{"Key":"without expanding","Fragments":["the"]},{"Key":"expanding the","Fragments":["view."]},{"Key":"the view.","Fragments":["My"]},{"Key":"view. My","Fragments":["apologies"]},{"Key":"My apologies","Fragments":["if"]},{"Key":"apologies if","Fragments":["that's"]},{"Key":"that's the","Fragments":["case.","convention","ONLY","idea.","trick.","most","only","way"]},{"Key":"should extract","Fragments":["your","methods"]},{"Key":"extract your","Fragments":["checks"]},{"Key":"your checks","Fragments":["in","in"]},{"Key":"functions so","Fragments":["that","they're","that"]},{"Key":"can get","Fragments":["rid","away","away","pretty","into"]},{"Key":"these comments","Fragments":["and"]},{"Key":"comments and","Fragments":["make","discussions.","suggestions."]},{"Key":"readable. Also","Fragments":["is"]},{"Key":"Also is","Fragments":["there"]},{"Key":"any particular","Fragments":["reason","reason","reason","binary"]},{"Key":"No bad","Fragments":["at"]},{"Key":"bad at","Fragments":["all!","this","all,"]},{"Key":"great control","Fragments":["structure"]},{"Key":"control structure","Fragments":["in","or","sends..."]},{"Key":"structure in","Fragments":["elixir"]},{"Key":"elixir which","Fragments":["can"]},{"Key":"which can","Fragments":["replace","has","be","be","be","be"]},{"Key":"can replace","Fragments":["your","the","`String.replace`,","anagram_checker_for(base)"]},{"Key":"replace your","Fragments":["two"]},{"Key":"your two","Fragments":["if's","reducing"]},{"Key":"two if's","Fragments":["and"]},{"Key":"if's and","Fragments":["look"]},{"Key":"and look","Fragments":["much","at","at","at"]},{"Key":"look much","Fragments":["much"]},{"Key":"much much","Fragments":["more"]},{"Key":" Cool.","Fragments":["We're","If","I","Yeah,"]},{"Key":"Cool. We're","Fragments":["almost"]},{"Key":"We're almost","Fragments":["there"]},{"Key":"almost there","Fragments":[":)"]},{"Key":"* There","Fragments":["is","is","is"]},{"Key":"more succinct","Fragments":["way","on"]},{"Key":"succinct way","Fragments":["to"]},{"Key":"functions `asking?`","Fragments":["and"]},{"Key":"`asking?` and","Fragments":["`shouting?`","`shouting?`"]},{"Key":"and `shouting?`","Fragments":[",","?","for","functions","public?"]},{"Key":"`shouting?` ,","Fragments":["but"]},{"Key":", but","Fragments":["`blank?`","because","if","are"]},{"Key":"but `blank?`","Fragments":["stands","doesn't"]},{"Key":"`blank?` stands","Fragments":["aside."]},{"Key":"stands aside.","Fragments":["Would"]},{"Key":"aside. Would","Fragments":["you"]},{"Key":"renaming it","Fragments":["to","to","to","to"]},{"Key":"with `asking?`","Fragments":["and"]},{"Key":"Looks nice.","Fragments":["Don't","Have","Nice","Just","I"]},{"Key":"nice. Don't","Fragments":["you"]},{"Key":"Don't you","Fragments":["think"]},{"Key":"that Regex","Fragments":["overcomplicates","has"]},{"Key":"Regex overcomplicates","Fragments":["things"]},{"Key":"overcomplicates things","Fragments":["a"]},{"Key":"things a","Fragments":["bit?"]},{"Key":"a bit?","Fragments":["Is"]},{"Key":"bit? Is","Fragments":["there"]},{"Key":"find question","Fragments":["mark"]},{"Key":"mark at","Fragments":["the","the"]},{"Key":"Thanks. :)","Fragments":["I'm"]},{"Key":":) I'm","Fragments":["still","not"]},{"Key":"still quite","Fragments":["new"]},{"Key":"quite new","Fragments":["to","to"]},{"Key":"Elixir so","Fragments":["I'm","I'm","this","that","please","the","my"]},{"Key":"still working","Fragments":["on","on"]},{"Key":"on idiom","Fragments":["etc."]},{"Key":"refactor the","Fragments":["control","`fn`","empty-string","sort"]},{"Key":"the control","Fragments":["flow","structure","flow."]},{"Key":"control flow","Fragments":["as","operator","mechanism"]},{"Key":"flow as","Fragments":["per"]},{"Key":"as per","Fragments":["your","your","@sabryna's"]},{"Key":"per your","Fragments":["suggestion.","suggestions."]},{"Key":"Hmm, submitted","Fragments":["2"]},{"Key":"submitted 2","Fragments":["days"]},{"Key":"days ago.","Fragments":["Anybody"]},{"Key":"ago. Anybody","Fragments":["out"]},{"Key":"Anybody out","Fragments":["there?"]},{"Key":" ah,","Fragments":["makes","List.zip"]},{"Key":"ah, makes","Fragments":["sense."]},{"Key":"Great idea!","Fragments":["Now"]},{"Key":"idea! Now","Fragments":["it"]},{"Key":"Now it","Fragments":["just"]},{"Key":"it just","Fragments":["scans","feels","a","feels","by","gives","looks","once,","wasn't","me","ran","calls","so","never","before","reads","seemed"]},{"Key":"just scans","Fragments":["for"]},{"Key":"scans for","Fragments":["words:"]},{"Key":"for words:","Fragments":["http://exercism.io/submissions/51fddbdbdf1d8b5df40001e6"]},{"Key":"can't mark","Fragments":["code"]},{"Key":"mark code","Fragments":["with"]},{"Key":"code with","Fragments":["variables","`Enum.reduce`.","mine","explicit","the"]},{"Key":"with variables","Fragments":["s,","that"]},{"Key":"variables s,","Fragments":["a,"]},{"Key":"s, a,","Fragments":["b,"]},{"Key":"a, b,","Fragments":["m,","a_len,"]},{"Key":"b, m,","Fragments":["n,"]},{"Key":"m, n,","Fragments":["etc"]},{"Key":"n, etc","Fragments":["as"]},{"Key":"etc as","Fragments":["done,"]},{"Key":"as done,","Fragments":["sorry."]},{"Key":"Also, its","Fragments":["boolean"]},{"Key":"its boolean","Fragments":["checks"]},{"Key":"boolean checks","Fragments":["need"]},{"Key":"checks need","Fragments":["to"]},{"Key":"be moved","Fragments":["out"]},{"Key":"moved out","Fragments":["to"]},{"Key":"own (defp","Fragments":["question?(phrase),"]},{"Key":"(defp question?(phrase),","Fragments":["defp(phrase)"]},{"Key":"question?(phrase), defp(phrase)","Fragments":["shouting?),"]},{"Key":"defp(phrase) shouting?),","Fragments":["as"]},{"Key":"shouting?), as","Fragments":["I"]},{"Key":"I said","Fragments":["from","\"BOB"]},{"Key":"said from","Fragments":["the"]},{"Key":"not rubysolo,","Fragments":["but"]},{"Key":"rubysolo, but","Fragments":["I"]},{"Key":"I find","Fragments":["it","the","`List.flatten/1`","myself","the","easier","it","the","that","pipelining","that","that","the","that","the","`silent?(input)`","it","to","myself","the","myself","attributes","the","it","it","it","that","an"]},{"Key":"it much","Fragments":["better","thought.","better.","easier"]},{"Key":"standard library","Fragments":["which","too,","I","and","and","use","of"]},{"Key":"library which","Fragments":["checks"]},{"Key":"which checks","Fragments":["if"]},{"Key":"checks if","Fragments":["a","`a`"]},{"Key":"if a","Fragments":["string","string","string","string","string","sentence","sentence","string","string","HashDict","collection","function","number","function","string","function","list","list","string"]},{"Key":"a string","Fragments":["ends","contains","is","contains","instead","in","with","in","as","ends","that's","though","of","is","is","only","of","to","to","and","on","(an","to","ends","isn't","for","like","\"*\"","without","rather","is","into","into","to","requires","to","and","to","replace","contains","without","is","in","contains","in","so","is"]},{"Key":"string ends","Fragments":["with","with","with"]},{"Key":"a certain","Fragments":["substring,","way,","input","way","preprocessing","meaning,","number","amount"]},{"Key":"certain substring,","Fragments":["it"]},{"Key":"substring, it","Fragments":["would"]},{"Key":"Also, checking","Fragments":["if"]},{"Key":"checking if","Fragments":["a"]},{"Key":"string contains","Fragments":["lowercase","lower","all","any","at"]},{"Key":"contains lowercase","Fragments":["characters"]},{"Key":"lowercase characters","Fragments":["can"]},{"Key":"characters can","Fragments":["be","be"]},{"Key":"be rewritten","Fragments":["without","as","as"]},{"Key":"rewritten without","Fragments":["a"]},{"Key":"without a","Fragments":["regex","\u0026","clear","tail","counting"]},{"Key":"regex and","Fragments":["in","I","engage","punted.","not","functions."]},{"Key":"version without","Fragments":["the","append","GenServer"]},{"Key":" @retha:","Fragments":["For"]},{"Key":"@retha: For","Fragments":["some"]},{"Key":"For some","Fragments":["strange","reason","reason","reason"]},{"Key":"some strange","Fragments":["reasons"]},{"Key":"strange reasons","Fragments":["the"]},{"Key":"reasons the","Fragments":["simple"]},{"Key":"the simple","Fragments":["solution","but","side","nature","\"just","boolean"]},{"Key":"simple solution","Fragments":["didn't"]},{"Key":"solution didn't","Fragments":["come"]},{"Key":"didn't come","Fragments":["to"]},{"Key":"my mind.","Fragments":["The"]},{"Key":"mind. The","Fragments":["new"]},{"Key":"The new","Fragments":["submission"]},{"Key":"submission compares","Fragments":["with"]},{"Key":"compares with","Fragments":["empty"]},{"Key":" Naming","Fragments":["the","a"]},{"Key":"Naming the","Fragments":["variable"]},{"Key":"the variable","Fragments":["\"phrase\"","would","helps","`str`","from","in","codepoint","in","name.","isn't","words","name","name","assignment"]},{"Key":"variable \"phrase\"","Fragments":["or"]},{"Key":"\"phrase\" or","Fragments":["something"]},{"Key":"or something","Fragments":["like","less","more","that","else?","like","else","like","like","like"]},{"Key":"this would","Fragments":["definitely","be","make","be.","be","have","work"]},{"Key":"would definitely","Fragments":["make","make","be"]},{"Key":"definitely make","Fragments":["it","that","it"]},{"Key":" Alas,","Fragments":["you"]},{"Key":"Alas, you","Fragments":["insist"]},{"Key":"you insist","Fragments":["on"]},{"Key":"insist on","Fragments":["\"the"]},{"Key":"on \"the","Fragments":["Haskell"]},{"Key":"\"the Haskell","Fragments":["school","school"]},{"Key":"Haskell school","Fragments":["of","of","of"]},{"Key":"school of","Fragments":["variable","variable","variable"]},{"Key":"of variable","Fragments":["naming\",","naming\"","naming,"]},{"Key":"variable naming\",","Fragments":["as"]},{"Key":"naming\", as","Fragments":["you"]},{"Key":"as you","Fragments":["put","are","have","mention.","suggested,","can","know","can","might","can't","probably","would","have","want","go","don't","don't","mentioned,","explained,","RE","say"]},{"Key":"put it,","Fragments":["I"]},{"Key":"will leave","Fragments":["you"]},{"Key":"leave you","Fragments":["with"]},{"Key":"you with","Fragments":["this","this"]},{"Key":"code and","Fragments":["\"the","remove","think","isn't","I","see","the","hinder","I","more","complete","I"]},{"Key":"and \"the","Fragments":["Haskell"]},{"Key":"variable naming\"","Fragments":[":)"]},{"Key":"are almost","Fragments":["there,","all"]},{"Key":"almost there,","Fragments":["almost"]},{"Key":"there, almost","Fragments":["perfect"]},{"Key":"almost perfect","Fragments":[":)"]},{"Key":"Just one","Fragments":["last","thing:","little","minor","last"]},{"Key":"one last","Fragments":["thing:","thing,","tweak"]},{"Key":"last thing:","Fragments":["there"]},{"Key":"thing: there","Fragments":["is"]},{"Key":"and more","Fragments":["natural","efficient.","about","efficient.","idiomatic","unwieldy","with","duplication","flexible"]},{"Key":"more natural","Fragments":["way","than","the","place"]},{"Key":"natural way","Fragments":["to"]},{"Key":"string is","Fragments":["empty","good,","empty","empty/nil,","all","empty,","empty,","handled","empty,","`size(phone)`.","a","the","all","an","uppercase.","equal","yelling","entirely","caseless,"]},{"Key":"is empty","Fragments":["than","or","word","use"]},{"Key":"empty than","Fragments":["String.length(message)"]},{"Key":"than String.length(message)","Fragments":["\u003c"]},{"Key":"String.length(message) \u003c","Fragments":["1"]},{"Key":"don't agree","Fragments":["that","with"]},{"Key":"that renaming","Fragments":["'s'"]},{"Key":"renaming 's'","Fragments":["to"]},{"Key":"'s' to","Fragments":["something"]},{"Key":"something longer","Fragments":["helps"]},{"Key":"longer helps","Fragments":["with"]},{"Key":"helps with","Fragments":["readability","readability","the"]},{"Key":"with readability","Fragments":["or","and"]},{"Key":"readability or","Fragments":["documentation,","expressiveness"]},{"Key":"or documentation,","Fragments":["there"]},{"Key":"not an","Fragments":["obvious","admin,","anagram","object","empty","Erlang","elixir"]},{"Key":"an obvious","Fragments":["choice","problem,","problem,","problem,","problem,","problem,","problem,","problem,"]},{"Key":"obvious choice","Fragments":["of"]},{"Key":"choice of","Fragments":["name","using","a"]},{"Key":"of name","Fragments":["that"]},{"Key":"that carries","Fragments":["any"]},{"Key":"carries any","Fragments":["semantics"]},{"Key":"any semantics","Fragments":["other"]},{"Key":"semantics other","Fragments":["than"]},{"Key":"other than","Fragments":["\"this","that,","a","that,","the","explicitly","that,","letters,","a","just","those","letters","[this](https://github.com/niftyn8/elixir_style_guide),"]},{"Key":"than \"this","Fragments":["is"]},{"Key":"\"this is","Fragments":["a"]},{"Key":"a string\".","Fragments":["I"]},{"Key":"string\". I","Fragments":["have"]},{"Key":"have submitted","Fragments":["a"]},{"Key":"a revision","Fragments":["with","that"]},{"Key":"revision with","Fragments":["a","that"]},{"Key":"a docstring","Fragments":["and"]},{"Key":"docstring and","Fragments":["comments"]},{"Key":"and comments","Fragments":["for"]},{"Key":"comments for","Fragments":["each","public"]},{"Key":"each clause","Fragments":["to"]},{"Key":"the sake","Fragments":["of","of","of","of","of","of","of"]},{"Key":"sake of","Fragments":["consistency,","practice.","readability","consistency,","consistency.","learning,","it"]},{"Key":"of consistency,","Fragments":["wouldn't","but"]},{"Key":"consistency, wouldn't","Fragments":["it"]},{"Key":"be better","Fragments":["if","to","than","to","than","guidelines.","to","to","written","than","because","to","with","than","is","for"]},{"Key":"better if","Fragments":["```hey(\"\")```","you","you"]},{"Key":"if ```hey(\"\")```","Fragments":["was"]},{"Key":"```hey(\"\")``` was","Fragments":["also"]},{"Key":"was also","Fragments":["a"]},{"Key":"private check","Fragments":["function?"]},{"Key":"That's very","Fragments":["good,"]},{"Key":"very good,","Fragments":["really."]},{"Key":"good, really.","Fragments":["I"]},{"Key":"really. I","Fragments":["would"]},{"Key":"would just","Fragments":["like","be","get","try","move","need"]},{"Key":"a standard","Fragments":["function","function","solution","solution","character","you've"]},{"Key":"standard function","Fragments":["to","that"]},{"Key":"a string.","Fragments":["Would","It","I","You","Maybe"]},{"Key":"string. Would","Fragments":["you"]},{"Key":"mind looking","Fragments":["it"]},{"Key":"looking it","Fragments":["up"]},{"Key":"it up","Fragments":["and","(without","to","(and","some","from","a","incrementally","--","from","with"]},{"Key":"and improving","Fragments":["the"]},{"Key":"improving the","Fragments":["code?"]},{"Key":" Expanding","Fragments":["on"]},{"Key":"Expanding on","Fragments":["@lemuel's"]},{"Key":"on @lemuel's","Fragments":["feedback:"]},{"Key":"@lemuel's feedback:","Fragments":["I"]},{"Key":"feedback: I","Fragments":["would"]},{"Key":"would choose","Fragments":["a"]},{"Key":"choose a","Fragments":["different","more"]},{"Key":"different name","Fragments":["than"]},{"Key":"than `is_upcase?`","Fragments":["--"]},{"Key":"`is_upcase?` --","Fragments":["computers"]},{"Key":"-- computers","Fragments":["know"]},{"Key":"computers know","Fragments":["what"]},{"Key":"know what","Fragments":["\"upcase\"","to","the","the","you","constraints","to","you","is","``cond``","you","you","the","a","that","happens"]},{"Key":"what \"upcase\"","Fragments":["is;"]},{"Key":"\"upcase\" is;","Fragments":["(most)"]},{"Key":"is; (most)","Fragments":["teenagers"]},{"Key":"(most) teenagers","Fragments":["do"]},{"Key":"teenagers do","Fragments":["not."]},{"Key":"`cond` --","Fragments":["I"]},{"Key":"would improve","Fragments":["readability.","already","the","the","the"]},{"Key":"It works","Fragments":["because","very"]},{"Key":"works because","Fragments":["strings","strings","`foo"]},{"Key":"because strings","Fragments":["are","are"]},{"Key":"strings are","Fragments":["\"truthy\"","_not_","by","binaries","lists","UTF8","considered"]},{"Key":"are \"truthy\"","Fragments":["in"]},{"Key":"\"truthy\" in","Fragments":["elixir."]},{"Key":"elixir. It's","Fragments":["similar","been"]},{"Key":"It's similar","Fragments":["to"]},{"Key":"the practice","Fragments":["of"]},{"Key":"practice of","Fragments":["using"]},{"Key":"using `:else`","Fragments":["in"]},{"Key":"`:else` in","Fragments":["`cond`"]},{"Key":"`cond` forms","Fragments":["in"]},{"Key":"forms in","Fragments":["Clojure."]},{"Key":"in Clojure.","Fragments":["If"]},{"Key":"Clojure. If","Fragments":["I"]},{"Key":"probably go","Fragments":["with","with","with","with","out","with"]},{"Key":"go with","Fragments":["\"default\"","2-space","cond","the","the","the","flattening","them.","the","the","`cond`","strings","`cond`.","`year`","this,","true,","a","`[\\p{L}-]+`","a","reusing","the"]},{"Key":"with \"default\"","Fragments":["or"]},{"Key":"\"default\" or","Fragments":["\"else\"."]},{"Key":"or \"else\".","Fragments":["The"]},{"Key":"\"else\". The","Fragments":["purpose"]},{"Key":"The purpose","Fragments":["of"]},{"Key":"of \"_speak\"","Fragments":["wasn't","which"]},{"Key":"\"_speak\" wasn't","Fragments":["immediately"]},{"Key":"wasn't immediately","Fragments":["clear"]},{"Key":"immediately clear","Fragments":["to","what"]},{"Key":" ```hey(\"\")```","Fragments":["could"]},{"Key":"```hey(\"\")``` could","Fragments":["be"]},{"Key":"a one-liner","Fragments":["otherwise","syntax.","by","without"]},{"Key":"one-liner otherwise","Fragments":["great"]},{"Key":"otherwise great","Fragments":["job!"]},{"Key":"great job!","Fragments":["I"]},{"Key":"job! I","Fragments":["like"]},{"Key":"the import,","Fragments":["not"]},{"Key":"import, not","Fragments":["sure"]},{"Key":"if it's","Fragments":["a","better.","an","like","a","good","better","a","`(String.strip(greeting)","wise","residual","possible","matched,","just","faster","worth"]},{"Key":"a real","Fragments":["benefit","project","Elixir","world","world","curveball","life","good","significant","DNA"]},{"Key":"real benefit","Fragments":["considering"]},{"Key":"benefit considering","Fragments":["you"]},{"Key":"considering you","Fragments":["only"]},{"Key":"you only","Fragments":["use","strip","need"]},{"Key":"the imported","Fragments":["functions","functions"]},{"Key":"imported functions","Fragments":["once","confusing."]},{"Key":"functions once","Fragments":["but"]},{"Key":"once but","Fragments":["it"]},{"Key":"good. I","Fragments":["think","see","think","just","like","like","like","think","personally","feel"]},{"Key":"could clean","Fragments":["up","up"]},{"Key":"the verse","Fragments":["generation","clauses.","number","templates"]},{"Key":"verse generation","Fragments":["with"]},{"Key":"generation with","Fragments":["`Enum.map`."]},{"Key":"with `Enum.map`.","Fragments":["Also,"]},{"Key":"`Enum.map`. Also,","Fragments":["there's"]},{"Key":"Also, there's","Fragments":["some"]},{"Key":"there's some","Fragments":["duplication","good","duplication","unicode"]},{"Key":"strings of","Fragments":["the","characters"]},{"Key":"verse clauses.","Fragments":["Is"]},{"Key":"clauses. Is","Fragments":["there","there"]},{"Key":"that without","Fragments":["sacrificing","direct","them","the"]},{"Key":"the strategy","Fragments":["of"]},{"Key":"strategy of","Fragments":["using","always"]},{"Key":"the guarded","Fragments":["`count`","`count`,","version"]},{"Key":"guarded `count`","Fragments":["fn"]},{"Key":"`count` fn","Fragments":["to"]},{"Key":"fn to","Fragments":["handle","use"]},{"Key":"to handle","Fragments":["both","invalid","this","nil","nested","this.","that","this","empty","the","it","that?","both","a","`==`","that?","classification","the"]},{"Key":"handle both","Fragments":["binaries","nils","lists"]},{"Key":"both binaries","Fragments":["and"]},{"Key":"binaries and","Fragments":["lists.","would","character"]},{"Key":"and lists.","Fragments":["I"]},{"Key":"lists. I","Fragments":["think","suspect"]},{"Key":"could change","Fragments":["your","his","that","things"]},{"Key":"change your","Fragments":["`tokenize`","dictionary","implementation"]},{"Key":"your `tokenize`","Fragments":["regex"]},{"Key":"`tokenize` regex","Fragments":["slightly"]},{"Key":"regex slightly","Fragments":["so","faster"]},{"Key":"slightly so","Fragments":["that"]},{"Key":"to worry","Fragments":["about","about"]},{"Key":"worry about","Fragments":["filtering","handing"]},{"Key":"about filtering","Fragments":["blank"]},{"Key":"filtering blank","Fragments":["strings"]},{"Key":"blank strings","Fragments":["out."]},{"Key":"Nice, that","Fragments":["makes"]},{"Key":"that makes","Fragments":["sense.","sense.","more","all","one","it","verse","for","it","for","a","sense.","the"]},{"Key":"makes sense.","Fragments":["I","Would","I'll","Since","I"]},{"Key":"sense. I","Fragments":["had","will","think","think"]},{"Key":"had seen","Fragments":["people","that"]},{"Key":"seen people","Fragments":["doing"]},{"Key":"people doing","Fragments":["that"]},{"Key":"doing that","Fragments":["with","rather","and","at","for","first","generally"]},{"Key":"that with","Fragments":["`String.ends_with?`","the","4,","Enum.into/3,"]},{"Key":"with `String.ends_with?`","Fragments":["as","simply","and"]},{"Key":"`String.ends_with?` as","Fragments":["well,"]},{"Key":"well, I","Fragments":["presume","hadn't"]},{"Key":"I presume","Fragments":["for"]},{"Key":"presume for","Fragments":["the"]},{"Key":"same reason.","Fragments":["If"]},{"Key":"reason. If","Fragments":["you"]},{"Key":"you squint,","Fragments":["it"]},{"Key":"squint, it","Fragments":["almost"]},{"Key":"it almost","Fragments":["looks"]},{"Key":"almost looks","Fragments":["like"]},{"Key":"you're calling","Fragments":["a"]},{"Key":"calling a","Fragments":["method","`HashDict`"]},{"Key":"method on","Fragments":["the","top.","`String`","the","only"]},{"Key":"the string.","Fragments":[":)","The","Might","I'd"]},{"Key":"actually made","Fragments":["that"]},{"Key":"made that","Fragments":["change","tweak","far","choice"]},{"Key":"that change","Fragments":["after","and","and","and","as"]},{"Key":"change after","Fragments":["a"]},{"Key":"after a","Fragments":["discussion","pipe.","bit","break)","doc-string.","frustrating"]},{"Key":"a discussion","Fragments":["here"]},{"Key":"discussion here","Fragments":["about"]},{"Key":"here about","Fragments":["whether"]},{"Key":"about whether","Fragments":["it's","`count`","something"]},{"Key":"whether it's","Fragments":["preferable","worth"]},{"Key":"it's preferable","Fragments":["in","to"]},{"Key":"preferable in","Fragments":["Elixir"]},{"Key":"Elixir to","Fragments":["name","me","me.","use","use","just","write","use","use"]},{"Key":"to name","Fragments":["a","a","?T","the","the","the","the","concisely,","since","and","list"]},{"Key":"name a","Fragments":["boolean","function"]},{"Key":"a boolean","Fragments":["method","is","context),","NOT.","value.","result)","equation","return"]},{"Key":"boolean method","Fragments":["\"is_silence\""]},{"Key":"method \"is_silence\"","Fragments":["or"]},{"Key":"\"is_silence\" or","Fragments":["\"silence?\"."]},{"Key":"or \"silence?\".","Fragments":["One"]},{"Key":"\"silence?\". One","Fragments":["qualm"]},{"Key":"One qualm","Fragments":["with"]},{"Key":"qualm with","Fragments":["\"silence?(param)\""]},{"Key":"with \"silence?(param)\"","Fragments":["(the"]},{"Key":"\"silence?(param)\" (the","Fragments":["form"]},{"Key":"(the form","Fragments":["most"]},{"Key":"form most","Fragments":["people"]},{"Key":"people seemed","Fragments":["to"]},{"Key":"to prefer)","Fragments":["is"]},{"Key":"prefer) is","Fragments":["that"]},{"Key":"mark gets","Fragments":["lost"]},{"Key":"gets lost","Fragments":["next"]},{"Key":"lost next","Fragments":["to"]},{"Key":"next to","Fragments":["the","each","the"]},{"Key":"the parentheses,","Fragments":["at"]},{"Key":"parentheses, at","Fragments":["least"]},{"Key":"least to","Fragments":["my","me."]},{"Key":"my eyes.","Fragments":["My"]},{"Key":"eyes. My","Fragments":["solution"]},{"Key":"was to","Fragments":["use","put","guide","use","keep","put","deal","keep","make","use","in","have","implement","use","first","ignore","make","do"]},{"Key":"pipe operator","Fragments":["so","rather","because","is","the","(`|\u003e`).","(which","in","so","(`|\u003e`).","to"]},{"Key":"operator so","Fragments":["that","I"]},{"Key":"the \"?\"","Fragments":["at","formulation."]},{"Key":"names could","Fragments":["stand"]},{"Key":"could stand","Fragments":["out."]},{"Key":"looks very","Fragments":["good.","useful!","well.","much","straightforward,"]},{"Key":"very good.","Fragments":["Can"]},{"Key":"good. Can","Fragments":["you"]},{"Key":"you explain","Fragments":["your","how","what"]},{"Key":"explain your","Fragments":["choice","thinking."]},{"Key":"your choice","Fragments":["of","to","to"]},{"Key":"operator rather","Fragments":["than","than"]},{"Key":"than plain","Fragments":["method"]},{"Key":"plain method","Fragments":["calls?"]},{"Key":"method calls?","Fragments":["I"]},{"Key":"calls? I","Fragments":["realize"]},{"Key":"I realize","Fragments":["pipe","that.","that.","that"]},{"Key":"realize pipe","Fragments":["is"]},{"Key":"pipe is","Fragments":["just"]},{"Key":"just sugar,","Fragments":["just"]},{"Key":"sugar, just","Fragments":["curious."]},{"Key":"just curious.","Fragments":[":-)","'Cause"]},{"Key":"cond is","Fragments":["fine,","no","less"]},{"Key":"is fine,","Fragments":["I","but","i","in","but"]},{"Key":"fine, I","Fragments":["meant"]},{"Key":"meant extracting","Fragments":["your"]},{"Key":"extracting your","Fragments":["checks"]},{"Key":"in separate","Fragments":["functions"]},{"Key":"separate functions","Fragments":["to","with","so","for"]},{"Key":"use guard","Fragments":["in","clauses,"]},{"Key":"guard in","Fragments":["method"]},{"Key":"in method","Fragments":["definition","names."]},{"Key":"method definition","Fragments":["at","seems"]},{"Key":"definition at","Fragments":["first,"]},{"Key":"at first,","Fragments":["but","like"]},{"Key":"first, but","Fragments":["the","it"]},{"Key":"but the","Fragments":["allowed","previous","method","problem","syntax","`anagram`","code","first","latest","tests","symmetry","code","code","tests","verse","test","pipeline","input","problem","code","longer","other","top-level","function","test","point","operations","replace","test","three","hey","first","numbers","performance","more","`fn`","compiler","conventional","names","\"huge","means","rest"]},{"Key":"the allowed","Fragments":["functions","ones),","BIFs."]},{"Key":"allowed functions","Fragments":["are"]},{"Key":"are limited,","Fragments":["so"]},{"Key":"limited, so","Fragments":["I"]},{"Key":"I end","Fragments":["up","up"]},{"Key":"end up","Fragments":["with","having","with","with","using","with","with","as","with","calling","using","saving","with","with","with","with","being","using","with","with","with","with","with"]},{"Key":"this cond","Fragments":["statement."]},{"Key":"* Have","Fragments":["you","you"]},{"Key":"more modular","Fragments":["by","without","to"]},{"Key":"modular by","Fragments":["moving"]},{"Key":"code which","Fragments":["defines","defines","degrades"]},{"Key":"which defines","Fragments":["the","the"]},{"Key":"defines the","Fragments":["type","type","behaviour"]},{"Key":"phrase into","Fragments":["separate","separate","words","words"]},{"Key":"* Does","Fragments":["the"]},{"Key":"Does the","Fragments":["teenager"]},{"Key":"teenager get","Fragments":["a"]},{"Key":"a text?","Fragments":["Would"]},{"Key":"text? Would","Fragments":["another"]},{"Key":"Would another","Fragments":["variable"]},{"Key":"another variable","Fragments":["name"]},{"Key":"name be","Fragments":["better?"]},{"Key":"* A","Fragments":["separate"]},{"Key":"A separate","Fragments":["clause"]},{"Key":"separate clause","Fragments":["for","for"]},{"Key":"clause for","Fragments":["an","the","`Statement.nothing?(nil)`","the","that."]},{"Key":"it can","Fragments":["be","be","be","get.","see","lead","be","also","make","be","help","simplify","sometimes","be","be"]},{"Key":"be shorter","Fragments":["and"]},{"Key":"shorter and","Fragments":["simpler.","also","works","clearer.","with"]},{"Key":"and simpler.","Fragments":["Hint:"]},{"Key":"simpler. Hint:","Fragments":["get"]},{"Key":"Hint: get","Fragments":["rid"]},{"Key":"the guard","Fragments":["and","clause.","you","clauses","clause","clauses","clauses,","a","clause","clause"]},{"Key":"guard and","Fragments":["use"]},{"Key":"Is a","Fragments":["separate","better"]},{"Key":"function returning","Fragments":["true"]},{"Key":"true is","Fragments":["that"]},{"Key":"nice readable","Fragments":["function"]},{"Key":"readable function","Fragments":["in"]},{"Key":"in module","Fragments":["String"]},{"Key":"module String","Fragments":["for"]},{"Key":"String for","Fragments":["checking","scan","stripping"]},{"Key":"string. It","Fragments":["might","is"]},{"Key":"contains lower","Fragments":["case"]},{"Key":"lower case","Fragments":["letters?","and","letters."]},{"Key":" Wouldn't","Fragments":["let","it","declaring","the","it","`if`","`Stream.with_index","it","it"]},{"Key":"Wouldn't let","Fragments":["me"]},{"Key":"me overrwrite","Fragments":["file"]},{"Key":"overrwrite file","Fragments":["without"]},{"Key":"file without","Fragments":["the"]},{"Key":"the commented","Fragments":["out","dead"]},{"Key":"commented out","Fragments":["stuff","in","tests","solution"]},{"Key":"out stuff","Fragments":["I"]},{"Key":"stuff I","Fragments":["was"]},{"Key":" It'd","Fragments":["be"]},{"Key":"It'd be","Fragments":["really","a","more","sweet"]},{"Key":"be really","Fragments":["nice"]},{"Key":"nice to","Fragments":["be","have","look","have"]},{"Key":"be able","Fragments":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"use regex's","Fragments":["in"]},{"Key":"regex's in","Fragments":["guard"]},{"Key":"in guard","Fragments":["conditions...","functions.","clauses","clauses","clauses."]},{"Key":"no i18n","Fragments":["in"]},{"Key":"i18n in","Fragments":["this"]},{"Key":"assignment. We","Fragments":["just"]},{"Key":"We just","Fragments":["make"]},{"Key":"just make","Fragments":["it"]},{"Key":"it pass","Fragments":["tests,","all"]},{"Key":"pass tests,","Fragments":["and"]},{"Key":"tests, and","Fragments":["make","`hey(nil)`"]},{"Key":"it readable,","Fragments":["that's"]},{"Key":"readable, that's","Fragments":["all."]},{"Key":"Naming a","Fragments":["variable"]},{"Key":"variable correctly","Fragments":["is"]},{"Key":"is important","Fragments":["no","if","(unlike","to"]},{"Key":"important no","Fragments":["matter"]},{"Key":"no matter","Fragments":["how"]},{"Key":"matter how","Fragments":["many"]},{"Key":"many variables","Fragments":["you"]},{"Key":"variables you","Fragments":["have."]},{"Key":"you have.","Fragments":["If"]},{"Key":"have. If","Fragments":["this"]},{"Key":"If this","Fragments":["code","were"]},{"Key":"is read","Fragments":["by"]},{"Key":"read by","Fragments":["someone"]},{"Key":"by someone","Fragments":["who"]},{"Key":"someone who","Fragments":["doesn't","is","does"]},{"Key":"who doesn't","Fragments":["know"]},{"Key":"doesn't know","Fragments":["anything"]},{"Key":"know anything","Fragments":["about","about"]},{"Key":"this assignment,","Fragments":["a"]},{"Key":"assignment, a","Fragments":["properly"]},{"Key":"a properly","Fragments":["named"]},{"Key":"properly named","Fragments":["variable","functions"]},{"Key":"named variable","Fragments":["is"]},{"Key":"variable is","Fragments":["an","called"]},{"Key":"an important","Fragments":["piece","concept","concept","concept"]},{"Key":"important piece","Fragments":["of"]},{"Key":"I'd rather","Fragments":["not","keep","go","see","adhere"]},{"Key":"rather not","Fragments":["add"]},{"Key":"not add","Fragments":["modularity"]},{"Key":"add modularity","Fragments":["for"]},{"Key":"modularity for","Fragments":["modularity's"]},{"Key":"for modularity's","Fragments":["sake."]},{"Key":"modularity's sake.","Fragments":["The"]},{"Key":"sake. The","Fragments":["modularity"]},{"Key":"The modularity","Fragments":["would"]},{"Key":"modularity would","Fragments":["be"]},{"Key":"implemented differently","Fragments":["depending"]},{"Key":"differently depending","Fragments":["on"]},{"Key":"depending on","Fragments":["the","the","the","the","the"]},{"Key":"the actual","Fragments":["use","work.","incrementing","response","*reason*","`word`","recursion"]},{"Key":"actual use","Fragments":["case."]},{"Key":"use case.","Fragments":["If","Let"]},{"Key":"case. If","Fragments":["it's"]},{"Key":"it's something","Fragments":["like","to"]},{"Key":"like i18n,","Fragments":["you"]},{"Key":"i18n, you","Fragments":["wouldn't"]},{"Key":"you wouldn't","Fragments":["really","have","have","have","have","want","need","trust"]},{"Key":"wouldn't really","Fragments":["need"]},{"Key":"really need","Fragments":["to","`words`","(which","this.","that","the","to","it's","all","to.","recursion.","a","the"]},{"Key":"to put","Fragments":["it","the","a","that","me","the","the","\u003ccode\u003eis_\u003c/code\u003e","together","them","those","the","the","a","people","the","the","that","public","the","into","a","a","the"]},{"Key":"I'm more","Fragments":["of","in","familiar"]},{"Key":"more of","Fragments":["the","a","a","that","a","my","the","a","a","a","a","an","an","a"]},{"Key":"the Haskell","Fragments":["school","exercises.","exercises","wiki"]},{"Key":"variable naming,","Fragments":["I'd"]},{"Key":"naming, I'd","Fragments":["rather"]},{"Key":"rather keep","Fragments":["them"]},{"Key":"keep them","Fragments":["short"]},{"Key":"them short","Fragments":["and"]},{"Key":"short and","Fragments":["out","sweet.","well-lit,","clear."]},{"Key":"and out","Fragments":["of","of","of"]},{"Key":"way if","Fragments":["there's","the","people"]},{"Key":"if there's","Fragments":["just","a","a","a","at","a"]},{"Key":"one or","Fragments":["two","two","more","both","more"]},{"Key":"or two","Fragments":["of","places.","resulting"]},{"Key":"two of","Fragments":["them.","your","the","the"]},{"Key":"of them.","Fragments":["There's"]},{"Key":"them. There's","Fragments":["not"]},{"Key":"There's not","Fragments":["a"]},{"Key":"of readability","Fragments":["to","room","you"]},{"Key":"readability to","Fragments":["be","break","the"]},{"Key":"be gained","Fragments":["here"]},{"Key":"gained here","Fragments":["by"]},{"Key":"here by","Fragments":["renaming","splitting"]},{"Key":"by renaming","Fragments":["it"]},{"Key":"to 'query',","Fragments":["'request',"]},{"Key":"'query', 'request',","Fragments":["'string'"]},{"Key":"'request', 'string'","Fragments":["or"]},{"Key":"'string' or","Fragments":["some"]},{"Key":"or some","Fragments":["other","other","other"]},{"Key":"other not-so-meaningful","Fragments":["variable"]},{"Key":"not-so-meaningful variable","Fragments":["name."]},{"Key":"nice method","Fragments":["called"]},{"Key":"method called","Fragments":["is_upcase?(text)","`split_words`.","`letters/1`,"]},{"Key":"called is_upcase?(text)","Fragments":["Have"]},{"Key":"is_upcase?(text) Have","Fragments":["you"]},{"Key":"considered writing","Fragments":["similar"]},{"Key":"writing similar","Fragments":["methods"]},{"Key":"similar methods","Fragments":["for"]},{"Key":"for other","Fragments":["types","people.","functions?","ways"]},{"Key":"other types","Fragments":["of","of"]},{"Key":"empty phrase.","Fragments":["Hint:"]},{"Key":"phrase. Hint:","Fragments":["you"]},{"Key":"Hint: you","Fragments":["do"]},{"Key":"a guard.","Fragments":["One","What","Looking"]},{"Key":"guard. One","Fragments":["more"]},{"Key":"more hint:","Fragments":["use"]},{"Key":"hint: use","Fragments":["pattern"]},{"Key":"matching, Luke","Fragments":[":)"]},{"Key":"What teenager","Fragments":["receives"]},{"Key":"teenager receives","Fragments":["is"]},{"Key":"receives is","Fragments":["not"]},{"Key":"a text.","Fragments":["Try"]},{"Key":"text. Try","Fragments":["to"]},{"Key":"Also, finding","Fragments":["a"]},{"Key":"finding a","Fragments":["better","way","solution."]},{"Key":"variable would","Fragments":["make"]},{"Key":"I discovered,","Fragments":["you"]},{"Key":"discovered, you","Fragments":["can't"]},{"Key":"can't use","Fragments":["anything","the","remote","*list*"]},{"Key":"use anything","Fragments":["but"]},{"Key":"anything but","Fragments":["a","your"]},{"Key":"but a","Fragments":["handful","module","normal","new","hyphen"]},{"Key":"a handful","Fragments":["of","of"]},{"Key":"handful of","Fragments":["core","safe"]},{"Key":"of core","Fragments":["functions"]},{"Key":"core functions","Fragments":["in"]},{"Key":"in pattern","Fragments":["matching.","matching.","matching.","matching","guards).","guards."]},{"Key":"matching. `cond`","Fragments":["is"]},{"Key":"what we","Fragments":["have","commonly"]},{"Key":"My first","Fragments":["code","go","attempt","passes","pass","solution","thought","raw","Elixir","impression","thought","two"]},{"Key":"first code","Fragments":["is","being","ever","I've"]},{"Key":"name to","Fragments":["the","an","the","be","`call`.","what's","make","the","the","improve"]},{"Key":"the \"heyp\"","Fragments":["method."]},{"Key":"the `String.length(text)","Fragments":["\u003e"]},{"Key":"`String.length(text) \u003e","Fragments":["0"]},{"Key":"\u003e 0","Fragments":["\u0026\u0026","do"]},{"Key":"0 \u0026\u0026","Fragments":["text"]},{"Key":"\u0026\u0026 text","Fragments":["=="]},{"Key":"text ==","Fragments":["String.upcase(text)`"]},{"Key":"== String.upcase(text)`","Fragments":["into"]},{"Key":"String.upcase(text)` into","Fragments":["a"]},{"Key":"a `upcase?`","Fragments":["helper"]},{"Key":"`upcase?` helper","Fragments":["method."]},{"Key":"is succinct,","Fragments":["but"]},{"Key":"succinct, but","Fragments":["tightly"]},{"Key":"but tightly","Fragments":["tied"]},{"Key":"tightly tied","Fragments":["to"]},{"Key":"tied to","Fragments":["the"]},{"Key":"the mapping","Fragments":["between","between"]},{"Key":"mapping between","Fragments":["input","counts","the","sentence"]},{"Key":"between input","Fragments":["and"]},{"Key":"and output.","Fragments":["Is"]},{"Key":"output. Is","Fragments":["there"]},{"Key":"modular without","Fragments":["ruining"]},{"Key":"without ruining","Fragments":["its"]},{"Key":"ruining its","Fragments":["brevity?"]},{"Key":"That's good,","Fragments":["but"]},{"Key":"is possible","Fragments":["to","to","to"]},{"Key":"avoid regular","Fragments":["expressions"]},{"Key":"expressions using","Fragments":["only"]},{"Key":"using only","Fragments":["standard","the"]},{"Key":"only standard","Fragments":["functions"]},{"Key":"standard functions","Fragments":["from"]},{"Key":"functions from","Fragments":["the","String","a","`Enum`,","the","`Enum`"]},{"Key":"the String","Fragments":["module","built-in","module","binaries","class?","module","module](http://elixir-lang.org/docs/master/String.html)"]},{"Key":"String module","Fragments":["in.","is","might"]},{"Key":"module in.","Fragments":["This"]},{"Key":"in. This","Fragments":["would"]},{"Key":"This would","Fragments":["be","be","be","also","let"]},{"Key":" private","Fragments":["helper"]},{"Key":"private helper","Fragments":["functions","methods,","function","function","functions,","functions","methods"]},{"Key":"to define","Fragments":["the","behavior","it","the","functions","private","a","two","`inc`","public","public","functions","`not_match/2`","the","`total`","a","the","in","in","in","in","in","update_dict","in","in","private"]},{"Key":"of input","Fragments":["would","validation"]},{"Key":"input would","Fragments":["make"]},{"Key":"Thanks! I","Fragments":["realized","think"]},{"Key":"I realized","Fragments":["I","I","that","I","that","\"teen\"","after","is","that","that","that","I","that"]},{"Key":"realized I","Fragments":["could","was","don't","missed","should","am"]},{"Key":"just reorder","Fragments":["the"]},{"Key":"reorder the","Fragments":["clauses"]},{"Key":"the clauses","Fragments":["to","on","mutually"]},{"Key":"clauses to","Fragments":["get","reduce"]},{"Key":"the msg","Fragments":["being"]},{"Key":"msg being","Fragments":["empty."]},{"Key":"being empty.","Fragments":["I'll"]},{"Key":"empty. I'll","Fragments":["update"]},{"Key":"update that.","Fragments":["What"]},{"Key":"that. What","Fragments":["did","do"]},{"Key":"What did","Fragments":["you"]},{"Key":"did you","Fragments":["have","broke","feel","choose","know","try","know","find","know","know","get"]},{"Key":"have in","Fragments":["mind","lines","`quiet_at_me?/1`.","mind","SpeechAnalyzer"]},{"Key":"in mind","Fragments":["regarding","that","more","that","that","that","for","as","though","that"]},{"Key":"mind regarding","Fragments":["modularity?"]},{"Key":"I mean","Fragments":["that","any","reversing","updating","well","when"]},{"Key":"mean that","Fragments":["if","\u0026String.downcase/1"]},{"Key":"separate properly","Fragments":["named"]},{"Key":"functions you'd","Fragments":["end"]},{"Key":"you'd end","Fragments":["up","up"]},{"Key":"up having","Fragments":["much"]},{"Key":"having much","Fragments":["more"]},{"Key":" Good.","Fragments":["Have"]},{"Key":"Good. Have","Fragments":["you"]},{"Key":"considered getting","Fragments":["rid"]},{"Key":"getting rid","Fragments":["of","of"]},{"Key":"of two","Fragments":["condition","preprocessed"]},{"Key":"two condition","Fragments":["checking"]},{"Key":"condition checking","Fragments":["blocks,"]},{"Key":"checking blocks,","Fragments":["one"]},{"Key":"blocks, one","Fragments":["on"]},{"Key":"on hey","Fragments":["and"]},{"Key":"hey and","Fragments":["one"]},{"Key":"one in","Fragments":["do_hey_question?","question/1.","`list`","terms","the","particular.","`filter/2`)..."]},{"Key":"in do_hey_question?","Fragments":["It's"]},{"Key":"do_hey_question? It's","Fragments":["duplication,"]},{"Key":"It's duplication,","Fragments":["and"]},{"Key":"duplication, and","Fragments":["it","I"]},{"Key":"be done","Fragments":["in","with","with","once","inside","by","in","using","more"]},{"Key":"done in","Fragments":["a","the","`do_count`.","Elixir","idiomatic","Elixir.","a"]},{"Key":"nice. Have","Fragments":["you","you"]},{"Key":"Also, there","Fragments":["is","is"]},{"Key":"of condition","Fragments":["msg"]},{"Key":"condition msg","Fragments":["!="]},{"Key":"msg !=","Fragments":["\"\""]},{"Key":"Tried to","Fragments":["strike","arrange","make"]},{"Key":"to strike","Fragments":["a"]},{"Key":"strike a","Fragments":["balance"]},{"Key":"a balance","Fragments":["between","between"]},{"Key":"balance between","Fragments":["readability","simplicity","clarity","readability"]},{"Key":"between readability","Fragments":["and","and"]},{"Key":"readability and","Fragments":["what","conciseness","chaining.","DRY.","intent","you're","understand-ability"]},{"Key":"and what","Fragments":["is","benefits","you","to","should","kinds"]},{"Key":"is supposed","Fragments":["to","to"]},{"Key":"be 'proper'","Fragments":["elixir."]},{"Key":" Right,","Fragments":["but"]},{"Key":"Right, but","Fragments":["`\\d`"]},{"Key":"but `\\d`","Fragments":["will"]},{"Key":"`\\d` will","Fragments":["only"]},{"Key":"only match","Fragments":["one","lowercase"]},{"Key":"match one","Fragments":["digit,","or"]},{"Key":"one digit,","Fragments":["so"]},{"Key":"digit, so","Fragments":["you'll"]},{"Key":"so you'll","Fragments":["end","need","also"]},{"Key":"you'll end","Fragments":["up"]},{"Key":"of single","Fragments":["digits.","elements","elements","lines,"]},{"Key":"iex\u003e Regex.scan(%r/\\d/,","Fragments":["\"12-345-678\")"]},{"Key":"think you're","Fragments":["right,","using","using","right","right.","going","thinking","referring","right","right","reached"]},{"Key":"you're right,","Fragments":["`scan`","there","it's","it","they","it"]},{"Key":"right, `scan`","Fragments":["worked"]},{"Key":"`scan` worked","Fragments":["better"]},{"Key":"worked better","Fragments":["for"]},{"Key":"better for","Fragments":["me","private","the","is_yelling"]},{"Key":"me because","Fragments":["I","it"]},{"Key":"I analyzed","Fragments":["the"]},{"Key":"analyzed the","Fragments":["number"]},{"Key":"number as","Fragments":["a","a"]},{"Key":"a list,","Fragments":["but","but","right?","which","you","but"]},{"Key":"list, but","Fragments":["I","I","that's","figured"]},{"Key":"for you,","Fragments":["using","makes"]},{"Key":"you, using","Fragments":["it"]},{"Key":"string, `replace`","Fragments":["works"]},{"Key":"`replace` works","Fragments":["better."]},{"Key":"sure that","Fragments":["actually","it","a","you","the","strings","together","everything","a"]},{"Key":"the \u003ccode\u003ereplace\u003c/code\u003e.","Fragments":["Replace"]},{"Key":"\u003ccode\u003ereplace\u003c/code\u003e. Replace","Fragments":["seems"]},{"Key":"Replace seems","Fragments":["more"]},{"Key":"seems more","Fragments":["intention","like","idiomatic","intention-revealing,","reminiscent","clear.","reasonable,"]},{"Key":" Scan","Fragments":["converts"]},{"Key":"Scan converts","Fragments":["it"]},{"Key":"converts it","Fragments":["to"]},{"Key":"of binaries,","Fragments":["right?"]},{"Key":"binaries, right?","Fragments":["So"]},{"Key":"right? So","Fragments":["I"]},{"Key":"So I","Fragments":["end","guess","thought","went","went","gather","piped","have","blame","rewrote"]},{"Key":"with 1","Fragments":["or"]},{"Key":"1 or","Fragments":["more","n","more"]},{"Key":"more pockets","Fragments":["of"]},{"Key":"pockets of","Fragments":["numbers"]},{"Key":"of numbers","Fragments":["that"]},{"Key":"numbers that","Fragments":["need"]},{"Key":"that need","Fragments":["to","coercion","to"]},{"Key":"be joined","Fragments":["together"]},{"Key":"joined together","Fragments":["to"]},{"Key":"together to","Fragments":["recreate"]},{"Key":"to recreate","Fragments":["the"]},{"Key":"recreate the","Fragments":["string,"]},{"Key":"the string,","Fragments":["right?","which","then"]},{"Key":" Regex.scan(%r/\\d/,","Fragments":["dirty_number)"]},{"Key":"Regex.scan(%r/\\d/, dirty_number)","Fragments":["|\u003e"]},{"Key":"dirty_number) |\u003e","Fragments":["Enum.join"]},{"Key":"very clear,","Fragments":["but","but","but"]},{"Key":"clear, but","Fragments":["there's","there's","there's"]},{"Key":"a quite","Fragments":["a"]},{"Key":"the `verse`","Fragments":["clauses.","clauses"]},{"Key":"`verse` clauses.","Fragments":["Is"]},{"Key":"to DRY","Fragments":["it","those","those","it","that","up","things"]},{"Key":"DRY it","Fragments":["up","up","a"]},{"Key":"up (without","Fragments":["sacrificing"]},{"Key":"(without sacrificing","Fragments":["*too*"]},{"Key":"sacrificing *too*","Fragments":["much"]},{"Key":"*too* much","Fragments":["clarity)?"]},{"Key":"Cool. If","Fragments":["you"]},{"Key":"to protect","Fragments":["against"]},{"Key":"protect against","Fragments":["trailing"]},{"Key":"against trailing","Fragments":["spaces"]},{"Key":"trailing spaces","Fragments":["(e.g."]},{"Key":"spaces (e.g.","Fragments":["in"]},{"Key":"(e.g. in","Fragments":["your"]},{"Key":"your `question?`","Fragments":["function,","and","check,"]},{"Key":"`question?` function,","Fragments":["you","you"]},{"Key":"Might \u003ccode\u003eEnum.reduce\u003c/code\u003e","Fragments":["help"]},{"Key":"\u003ccode\u003eEnum.reduce\u003c/code\u003e help","Fragments":["simplify"]},{"Key":"help simplify","Fragments":["this?","things","what"]},{"Key":"Why \u003ccode\u003eString.split/1\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eString.split/1\u003c/code\u003e and","Fragments":["also"]},{"Key":"\"_speak\" which","Fragments":["evaluates"]},{"Key":"which evaluates","Fragments":["to"]},{"Key":"evaluates to","Fragments":["true"]},{"Key":"to true","Fragments":["instead"]},{"Key":"true instead","Fragments":["of"]},{"Key":"a boring","Fragments":["boolean"]},{"Key":"boring boolean","Fragments":[";)."]},{"Key":"boolean ;).","Fragments":["I"]},{"Key":";). I","Fragments":["Like"]},{"Key":"I Like","Fragments":["it."]},{"Key":"looks nice!","Fragments":["I"]},{"Key":"would personally","Fragments":["use"]},{"Key":"personally use","Fragments":["a"]},{"Key":"a name","Fragments":["like","to","you","describing","for","that","to","with","to","for","to","to","in","to","I","to","that","for","really","that"]},{"Key":"name like","Fragments":["`shouting?`",":"]},{"Key":"like `shouting?`","Fragments":["instead"]},{"Key":"`shouting?` instead","Fragments":["of","of"]},{"Key":"of `all_caps?`,","Fragments":["because"]},{"Key":"`all_caps?`, because","Fragments":["it"]},{"Key":"it speaks","Fragments":["more"]},{"Key":"speaks more","Fragments":["to"]},{"Key":"more to","Fragments":["the","the","do","do","do","do."]},{"Key":"the condition,","Fragments":["not"]},{"Key":"condition, not","Fragments":["the"]},{"Key":"Aha, I","Fragments":["wasn't"]},{"Key":"wasn't aware","Fragments":["the","ruby","that"]},{"Key":"aware the","Fragments":["groups"]},{"Key":"the groups","Fragments":["besides"]},{"Key":"groups besides","Fragments":["the"]},{"Key":"besides the","Fragments":["area","set"]},{"Key":"the area","Fragments":["code"]},{"Key":"area code","Fragments":["had"]},{"Key":"code had","Fragments":["names!"]},{"Key":"had names!","Fragments":["This"]},{"Key":"names! This","Fragments":["reads"]},{"Key":"This reads","Fragments":["much"]},{"Key":"only other","Fragments":["comment","thing","thing","thing","comment","thing","functions","thing","nitpick","thing,"]},{"Key":"other comment","Fragments":["is,","is"]},{"Key":"comment is,","Fragments":["do"]},{"Key":"is, do","Fragments":["you"]},{"Key":"think `Regex.scan`","Fragments":["might","might","to"]},{"Key":"`Regex.scan` might","Fragments":["be","simplify"]},{"Key":"appropriate here?","Fragments":["I'm"]},{"Key":"here? I'm","Fragments":["somewhat"]},{"Key":"I'm somewhat","Fragments":["torn,"]},{"Key":"somewhat torn,","Fragments":["I"]},{"Key":"torn, I","Fragments":["like"]},{"Key":"how yours","Fragments":["keeps"]},{"Key":"yours keeps","Fragments":["the"]},{"Key":"keeps the","Fragments":["number","list"]},{"Key":"string instead","Fragments":["of","of","of","of","of"]},{"Key":"of converting","Fragments":["to"]},{"Key":"converting to","Fragments":["a","a","a","a"]},{"Key":"like conceptually","Fragments":["`scan`"]},{"Key":"conceptually `scan`","Fragments":["might"]},{"Key":"`scan` might","Fragments":["make"]},{"Key":"more sense.","Fragments":["What"]},{"Key":"sense. What","Fragments":["do"]},{"Key":" True,","Fragments":["I","but","I","but:","`Enum.sort`"]},{"Key":"True, I","Fragments":["think","didn't"]},{"Key":"between simplicity","Fragments":["and","/"]},{"Key":"simplicity and","Fragments":["removing"]},{"Key":"and removing","Fragments":["duplication.","`String.downcase`"]},{"Key":"removing duplication.","Fragments":["Also"]},{"Key":"duplication. Also","Fragments":["consider"]},{"Key":"consider if","Fragments":["the"]},{"Key":"the requirements","Fragments":["changed,","changed,","changed","laid","which"]},{"Key":"requirements changed,","Fragments":["and","and"]},{"Key":"changed, and","Fragments":["you","you"]},{"Key":"beverage types.","Fragments":["With"]},{"Key":"types. With","Fragments":["the"]},{"Key":"With the","Fragments":["current","(very)","type"]},{"Key":"current solution,","Fragments":["you'd"]},{"Key":"solution, you'd","Fragments":["have"]},{"Key":"in multiple","Fragments":["places.","submissions","modules"]},{"Key":" Let","Fragments":["me","me","me","me","the"]},{"Key":"me know","Fragments":["if","about","if","if","Elixir's","what","what","what","if","if","if","if","if"]},{"Key":"if you're","Fragments":["satisfied","going","writing","not","interfacing","trying","connecting","not","writing","only","willing","not","running","using"]},{"Key":"you're satisfied","Fragments":["with"]},{"Key":"satisfied with","Fragments":["this","your"]},{"Key":"this and","Fragments":["ready","am","use","`Enum#reduce`.","I'll","the","didn't","ensure"]},{"Key":"and ready","Fragments":["to"]},{"Key":"The Erlang","Fragments":["compiler","compiler"]},{"Key":"Erlang compiler","Fragments":["won't","can"]},{"Key":"compiler won't","Fragments":["show"]},{"Key":"won't show","Fragments":["warnings"]},{"Key":"show warnings","Fragments":["for"]},{"Key":"warnings for","Fragments":["unused"]},{"Key":"for unused","Fragments":["variables"]},{"Key":"unused variables","Fragments":["if"]},{"Key":"variables if","Fragments":["you"]},{"Key":"you prepend","Fragments":["`_`","the"]},{"Key":"prepend `_`","Fragments":["to"]},{"Key":"variable name.","Fragments":["So"]},{"Key":"guess it's","Fragments":["a","usually","sort"]},{"Key":"pattern to","Fragments":["indicate","go"]},{"Key":"to indicate","Fragments":["that","that","the"]},{"Key":"indicate that","Fragments":["behaviour","they"]},{"Key":"that behaviour","Fragments":["with"]},{"Key":"behaviour with","Fragments":["this"]},{"Key":"this symbol.","Fragments":["Also,"]},{"Key":"symbol. Also,","Fragments":["you"]},{"Key":"use `true`,","Fragments":["because"]},{"Key":"`true`, because","Fragments":["if"]},{"Key":"because if","Fragments":["no","offers","a"]},{"Key":"if no","Fragments":["previous"]},{"Key":"no previous","Fragments":["conditions"]},{"Key":"previous conditions","Fragments":["match"]},{"Key":"conditions match","Fragments":["it,"]},{"Key":"match it,","Fragments":["this"]},{"Key":"it, this","Fragments":["should"]},{"Key":"this should","Fragments":["do","work","be","all"]},{"Key":"should do","Fragments":["it.","the"]},{"Key":"But this","Fragments":["is","is","is"]},{"Key":"good already","Fragments":[":)"]},{"Key":"how all","Fragments":["the","the"]},{"Key":"are named.","Fragments":["For"]},{"Key":"named. For","Fragments":["`question?`,"]},{"Key":"For `question?`,","Fragments":["`String.last`"]},{"Key":"`question?`, `String.last`","Fragments":["works,"]},{"Key":"`String.last` works,","Fragments":["but"]},{"Key":"works, but","Fragments":["are","the","I","that","it"]},{"Key":"but are","Fragments":["you","you","you"]},{"Key":"with `String.ends_with?`?","Fragments":["I"]},{"Key":"`String.ends_with?`? I","Fragments":["think"]},{"Key":"case it's","Fragments":["a","probably","the"]},{"Key":" thanks,","Fragments":["that"]},{"Key":"thanks, that","Fragments":["actually","was"]},{"Key":"actually was","Fragments":["another"]},{"Key":"was another","Fragments":["user's","test"]},{"Key":"another user's","Fragments":["suggestion,"]},{"Key":"user's suggestion,","Fragments":["honestly"]},{"Key":"suggestion, honestly","Fragments":["I"]},{"Key":"honestly I","Fragments":["prefer"]},{"Key":"the true","Fragments":["notation"]},{"Key":"true notation","Fragments":["better,"]},{"Key":"notation better,","Fragments":["probably"]},{"Key":"better, probably","Fragments":["because"]},{"Key":"probably because","Fragments":["it","you're","I","ranges"]},{"Key":"it resembles","Fragments":["me"]},{"Key":"resembles me","Fragments":["of"]},{"Key":"me of","Fragments":["some","LISP.","the","the","using"]},{"Key":"of default","Fragments":["condition","parameters.","parameters","values!"]},{"Key":"default condition","Fragments":["like","with","with"]},{"Key":"condition like","Fragments":["else"]},{"Key":"like else","Fragments":["in"]},{"Key":"else in","Fragments":["a","the"]},{"Key":"a ruby","Fragments":["case"]},{"Key":"ruby case","Fragments":["statement."]},{"Key":"case statement.","Fragments":["I"]},{"Key":"statement. I","Fragments":["assume"]},{"Key":"I assume","Fragments":["this","the","you","that","you","there's","the"]},{"Key":"assume this","Fragments":["works"]},{"Key":"this works","Fragments":["due","too","too.","too.","equally","fine"]},{"Key":"works due","Fragments":["to"]},{"Key":"due to","Fragments":["the","the","the","elixir","constant","exercism","not","protocols","the","the","overallocation","[\"A\"|\"B\"]","how","a","Erlang's","parsing","stack","stack","stack","a","the","stack","how","stack","how","`Regex.scan`","stack","being","the","some","not","stack","stack"]},{"Key":"the fact","Fragments":["that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that"]},{"Key":"fact that","Fragments":["the","elixir","a","they","there's","it","it's","the","swapping","you","`#{}`","tests","it's","it","both","you're","the","the","I","this","ExUnit","some","a","you","all","`_anagram_matcher`","compilation","you","it's","number"]},{"Key":"cond macro","Fragments":["is","uses"]},{"Key":"macro is","Fragments":["actually"]},{"Key":"actually doing","Fragments":["some"]},{"Key":"doing some","Fragments":["sort","pattern","unnecessary"]},{"Key":"matching with","Fragments":["\"_uselessstuff\"","this","the","the","guards","guards","first"]},{"Key":"with \"_uselessstuff\"","Fragments":["???"]},{"Key":"Now I'm","Fragments":["not","ashamed"]},{"Key":"not happy","Fragments":["with","with","that","with","with","with","with","with"]},{"Key":"happy with","Fragments":["how","this","this","@cicero","this","this.","the","my","the","the","the","the","that","the","how","the","the","short","this,","my","`concat`,","it","my","how","the"]},{"Key":"how this","Fragments":["handles","could","shaped","would"]},{"Key":"this handles","Fragments":["nil"]},{"Key":"handles nil","Fragments":["inputs","and"]},{"Key":"nil inputs","Fragments":["or"]},{"Key":"inputs or","Fragments":["how"]},{"Key":"would handle","Fragments":["strings","that"]},{"Key":"handle strings","Fragments":["containing"]},{"Key":"strings containing","Fragments":["just"]},{"Key":"containing just","Fragments":["empty"]},{"Key":"just empty","Fragments":["space."]},{"Key":"I'm thinking","Fragments":["of","maybe:","about","of","about","about"]},{"Key":"thinking of","Fragments":["making","`case`)","the","a","implementing","something","it","a"]},{"Key":"making a","Fragments":["`hey/0`","minimally","new"]},{"Key":"a `hey/0`","Fragments":["function"]},{"Key":"`hey/0` function","Fragments":["for","needed?"]},{"Key":"the nil","Fragments":["input","check","case","values"]},{"Key":"nil input","Fragments":["and","to"]},{"Key":"and shifting","Fragments":["the"]},{"Key":"shifting the","Fragments":["current"]},{"Key":"current `hey(\"\")`","Fragments":["pattern"]},{"Key":"`hey(\"\")` pattern","Fragments":["match"]},{"Key":"match into","Fragments":["the"]},{"Key":"block so","Fragments":["I"]},{"Key":"can refine","Fragments":["how"]},{"Key":"refine how","Fragments":["it"]},{"Key":"it deals","Fragments":["with"]},{"Key":"deals with","Fragments":["empty"]},{"Key":"pipeline at","Fragments":["the"]},{"Key":"top shows","Fragments":["the"]},{"Key":"shows the","Fragments":["process.","same"]},{"Key":"can only","Fragments":["come"]},{"Key":"only come","Fragments":["up"]},{"Key":"of tiny","Fragments":["things.","functions."]},{"Key":"tiny things.","Fragments":["Since"]},{"Key":"things. Since","Fragments":["`\\w`"]},{"Key":"Since `\\w`","Fragments":["is"]},{"Key":"single character,","Fragments":["it","not"]},{"Key":"character, it","Fragments":["doesn't"]},{"Key":"be inside","Fragments":["`[`"]},{"Key":"inside `[`","Fragments":["and"]},{"Key":"`[` and","Fragments":["`]`"]},{"Key":"and `]`","Fragments":["in"]},{"Key":"`]` in","Fragments":["the"]},{"Key":"regex. Also,","Fragments":["do"]},{"Key":"think `sanitize`","Fragments":["is"]},{"Key":"`sanitize` is","Fragments":["the"]},{"Key":"that function?","Fragments":["I'm"]},{"Key":"function? I'm","Fragments":["not"]},{"Key":"not really","Fragments":["sure","familiar","sure","sure","happy","a","intended","using","necessary","needed,","a","count","a","recommended","an","understand","to"]},{"Key":"really sure","Fragments":["it","(someone","why"]},{"Key":"it describes","Fragments":["to","the"]},{"Key":"describes to","Fragments":["me"]},{"Key":"me the","Fragments":["concept","is_","most"]},{"Key":"the concept","Fragments":["of","of"]},{"Key":"splitting up","Fragments":["the","the","into"]},{"Key":"string into","Fragments":["a","a","shape","characters","bytes.","a","a","a"]},{"Key":"While do","Fragments":["not"]},{"Key":"do anything","Fragments":["with","at"]},{"Key":"anything with","Fragments":["it","nils"]},{"Key":"with it","Fragments":["really,","while","that","for","being","(makes","a","but","and"]},{"Key":"it really,","Fragments":["I"]},{"Key":"really, I","Fragments":["do"]},{"Key":"do feel","Fragments":["it","free","like","myself"]},{"Key":"feel it","Fragments":["reads"]},{"Key":"than _","Fragments":["-\u003e"]},{"Key":"_ -\u003e","Fragments":["\"Whatever.\"","true","\"Whatever.\""]},{"Key":"But yes,","Fragments":["you"]},{"Key":"yes, you","Fragments":["do","are"]},{"Key":"do have","Fragments":["a","some","loads","the"]},{"Key":"a point.","Fragments":[":)"]},{"Key":" Well,","Fragments":["the","looking","maybe","you","you're","that's","I","here's","let","there's","I"]},{"Key":"Well, the","Fragments":["texts"]},{"Key":"the texts","Fragments":["are","in"]},{"Key":"texts are","Fragments":["split"]},{"Key":"are split","Fragments":["into"]},{"Key":"split into","Fragments":["more","multiple"]},{"Key":"into more","Fragments":["parts.","functions,","manageable"]},{"Key":"more parts.","Fragments":["Before"]},{"Key":"parts. Before","Fragments":["it"]},{"Key":"Before it","Fragments":["was"]},{"Key":"was easier","Fragments":["to","to"]},{"Key":"the verses.","Fragments":["Now","Thanks!"]},{"Key":"verses. Now","Fragments":["you"]},{"Key":"Now you","Fragments":["have","have","mention","get"]},{"Key":"to piece","Fragments":["them"]},{"Key":"piece them","Fragments":["together."]},{"Key":" Hi,","Fragments":["pattern","thanks","thanks","a"]},{"Key":"Hi, pattern","Fragments":["matching"]},{"Key":"matching feels","Fragments":["tempting"]},{"Key":"feels tempting","Fragments":["in"]},{"Key":"tempting in","Fragments":["this"]},{"Key":"this case,","Fragments":["but","words)","a","it's","because","since","that","of","at","at","I","I","you'd","I'm","you","however"]},{"Key":"case, but","Fragments":["this","couldn't","when","I'm"]},{"Key":"but this","Fragments":["version","was","can","looks","looks","first","looks","way","works","works","one","works","is","works.","would","is","time","works","works","version"]},{"Key":"this version","Fragments":["turned","identical","using","of","hides","better.","would","I","is","and","as","and","minimises"]},{"Key":"version turned","Fragments":["out"]},{"Key":"turned out","Fragments":["to","so","to"]},{"Key":"be so","Fragments":["readable!"]},{"Key":"so readable!","Fragments":["The"]},{"Key":"readable! The","Fragments":["pipe"]},{"Key":"The pipe","Fragments":["on","operator"]},{"Key":"pipe on","Fragments":["L23"]},{"Key":"on L23","Fragments":["is"]},{"Key":"L23 is","Fragments":["cool,"]},{"Key":"is cool,","Fragments":["looks","but","but"]},{"Key":"cool, looks","Fragments":["idiomatic."]},{"Key":"last `cond`","Fragments":["(L10)"]},{"Key":"`cond` (L10)","Fragments":["to"]},{"Key":"(L10) to","Fragments":["be"]},{"Key":"little odd.","Fragments":["Do"]},{"Key":"odd. Do","Fragments":["we"]},{"Key":"Do we","Fragments":["really","have"]},{"Key":"we really","Fragments":["need"]},{"Key":"need `words`","Fragments":["in"]},{"Key":"`words` in","Fragments":["there?"]},{"Key":"in there?","Fragments":["What"]},{"Key":"there? What","Fragments":["are"]},{"Key":"What are","Fragments":["we","your","`\u003c\u003c\u003e\u003e`,","you"]},{"Key":"are we","Fragments":["doing"]},{"Key":"we doing","Fragments":["to"]},{"Key":"doing to","Fragments":["it?","clean"]},{"Key":" Overall","Fragments":["solution","though","this"]},{"Key":"Overall solution","Fragments":["is"]},{"Key":"solution is","Fragments":["pretty","good","great.","the","the","quite","a","probably"]},{"Key":"will update","Fragments":["my","the","an"]},{"Key":"update my","Fragments":["`alphabetize`","version","test","version.","cli","submission.","code"]},{"Key":"my `alphabetize`","Fragments":["spelling"]},{"Key":"`alphabetize` spelling","Fragments":["and"]},{"Key":"spelling and","Fragments":["only"]},{"Key":"and only","Fragments":["sort","serve","then","because","leave"]},{"Key":"the \"root\"","Fragments":["word","word"]},{"Key":"\"root\" word","Fragments":["once.","once"]},{"Key":"word once.","Fragments":[";)"]},{"Key":" Surely","Fragments":["I","I","you"]},{"Key":"Surely I","Fragments":["can","could"]},{"Key":"use String.last([phrase)","Fragments":["=="]},{"Key":"String.last([phrase) ==","Fragments":["\"?\""]},{"Key":"== \"?\"","Fragments":["but"]},{"Key":"\"?\" but","Fragments":["it"]},{"Key":"it receives","Fragments":["a"]},{"Key":"receives a","Fragments":["question"]},{"Key":"question like","Fragments":["\"Hey"]},{"Key":"like \"Hey","Fragments":["Bob,"]},{"Key":"\"Hey Bob,","Fragments":["how"]},{"Key":"Bob, how","Fragments":["are"]},{"Key":"how are","Fragments":["things?","you","you"]},{"Key":"are things?","Fragments":["\"."]},{"Key":"things? \".","Fragments":["Such"]},{"Key":"\". Such","Fragments":["an"]},{"Key":"Such an","Fragments":["input"]},{"Key":"an input","Fragments":["is","category","like","and"]},{"Key":"input is","Fragments":["possible.","only","actually","strictly","much","passed","in"]},{"Key":"is possible.","Fragments":["There"]},{"Key":"possible. There","Fragments":["is"]},{"Key":"is no","Fragments":["test","longer","longer","way","longer","conceptual","chance","`t`","List.count,","`Dict`","benefit","way","need","`cons`","case,","test"]},{"Key":"no test","Fragments":["for","case"]},{"Key":"for this,","Fragments":["true,","but","since","the"]},{"Key":"this, true,","Fragments":["but"]},{"Key":"true, but","Fragments":["I","I","it"]},{"Key":"I consider","Fragments":["this","this","to","going"]},{"Key":"consider this","Fragments":["a","more","for"]},{"Key":"are already","Fragments":["the","there","char"]},{"Key":"already the","Fragments":["second"]},{"Key":"second reviewer","Fragments":["disliking"]},{"Key":"reviewer disliking","Fragments":["my"]},{"Key":"disliking my","Fragments":["regular"]},{"Key":"my regular","Fragments":["expressions,"]},{"Key":"regular expressions,","Fragments":["the","but","for","though"]},{"Key":"expressions, the","Fragments":["first"]},{"Key":"first one","Fragments":["is","would","though,","(for"]},{"Key":"in trail","Fragments":["for"]},{"Key":"trail for","Fragments":["another"]},{"Key":"for another","Fragments":["language","version","pass.","function."]},{"Key":"another language","Fragments":[":)","but","and"]},{"Key":"One alternative","Fragments":["you"]},{"Key":"alternative you","Fragments":["could"]},{"Key":"could consider:","Fragments":["you"]},{"Key":"consider: you","Fragments":["could"]},{"Key":"have your","Fragments":["responder"]},{"Key":"your responder","Fragments":["be"]},{"Key":"responder be","Fragments":["a"]},{"Key":"a multi-clause","Fragments":["function"]},{"Key":"multi-clause function","Fragments":["that","for"]},{"Key":"function that","Fragments":["takes","uses","can","hides","describes","decides","I","use","takes","returns","always","would","returns","does","does","apply","returned","helps.","you","does","gives","checks","always","does","will","will","takes","can","relies","checks","prepend","might","takes"]},{"Key":"that takes","Fragments":["the","a","a","a","a","advantage","advantage","the","a","2","a","two"]},{"Key":"takes the","Fragments":["atom","reducing","three","lengths","element"]},{"Key":"the atom","Fragments":["as","`:nil`","that"]},{"Key":"atom as","Fragments":["a"]},{"Key":"a parameter,","Fragments":["then","not"]},{"Key":"parameter, then","Fragments":["you"]},{"Key":"wouldn't have","Fragments":["to","to","to","to--that","expected","thought","made","to"]},{"Key":"use `Kernel.apply`.","Fragments":["What"]},{"Key":"`Kernel.apply`. What","Fragments":["do"]},{"Key":"use module","Fragments":["attributes:"]},{"Key":"module attributes:","Fragments":["http://elixir-lang.org/getting_started/3.html"]},{"Key":"main thing","Fragments":["I"]},{"Key":"suggest is","Fragments":["moving","moving","maybe","that","considering","that","that","maybe"]},{"Key":"is moving","Fragments":["your","the","pretty"]},{"Key":"moving your","Fragments":["logic"]},{"Key":"your logic","Fragments":["into"]},{"Key":"intention-revealing names,","Fragments":["so"]},{"Key":"names, so","Fragments":["that"]},{"Key":"reader can","Fragments":["quickly"]},{"Key":"can quickly","Fragments":["grasp"]},{"Key":"quickly grasp","Fragments":["the","what"]},{"Key":"grasp the","Fragments":["\"why\""]},{"Key":"the \"why\"","Fragments":["of"]},{"Key":"\"why\" of","Fragments":["what"]},{"Key":"you're doing","Fragments":["rather","there?","in","the","this","the","some"]},{"Key":"doing rather","Fragments":["than","than"]},{"Key":"to guess","Fragments":["it","my"]},{"Key":"guess it","Fragments":["from","is","helps"]},{"Key":"Cool. I","Fragments":["think"]},{"Key":"think strictly-speaking,","Fragments":["the"]},{"Key":"strictly-speaking, the","Fragments":["`base1"]},{"Key":"the `base1","Fragments":["!="]},{"Key":"`base1 !=","Fragments":["nil`"]},{"Key":"!= nil`","Fragments":["check"]},{"Key":"nil` check","Fragments":["is"]},{"Key":"check is","Fragments":["unnecessary,","not"]},{"Key":"is unnecessary,","Fragments":["since"]},{"Key":"unnecessary, since","Fragments":["`Enum.zip`"]},{"Key":"since `Enum.zip`","Fragments":["will"]},{"Key":"`Enum.zip` will","Fragments":["ignore"]},{"Key":"will ignore","Fragments":["any"]},{"Key":"ignore any","Fragments":["extra"]},{"Key":"any extra","Fragments":["characters"]},{"Key":"extra characters","Fragments":["from"]},{"Key":"characters from","Fragments":["strand2."]},{"Key":"could process","Fragments":["the"]},{"Key":"process the","Fragments":["\"\""]},{"Key":"the \"\"","Fragments":["case","case"]},{"Key":"\"\" case","Fragments":["inside","as"]},{"Key":"case inside","Fragments":["of"]},{"Key":"of cond,","Fragments":["but"]},{"Key":"cond, but","Fragments":["it","decided"]},{"Key":"the erlang","Fragments":["genes","way","`:math`","`re`:"]},{"Key":"use separate","Fragments":["function"]},{"Key":"function clauses","Fragments":["for","named","(I'm","look","for","where","and","could"]},{"Key":"clauses for","Fragments":["such","a","verse","line2","`dsl_to_dict`.","each"]},{"Key":"for such","Fragments":["cases","a","a"]},{"Key":"such cases","Fragments":["as","(for"]},{"Key":"cases as","Fragments":["an"]},{"Key":"empty list,","Fragments":["zero,","and"]},{"Key":"list, zero,","Fragments":["a"]},{"Key":"zero, a","Fragments":["specific"]},{"Key":"a specific","Fragments":["atom","response","dictionary,","implementation","reason","implementation.","output"]},{"Key":"specific atom","Fragments":["and"]},{"Key":"atom and","Fragments":["so"]},{"Key":"and so","Fragments":["on","didn't","reduce"]},{"Key":" (At","Fragments":["the"]},{"Key":"(At the","Fragments":["risk"]},{"Key":"the risk","Fragments":["of"]},{"Key":"risk of","Fragments":["being"]},{"Key":"of being","Fragments":["*that*","identical.","tail","accurate","cased."]},{"Key":"being *that*","Fragments":["guy)"]},{"Key":"*that* guy)","Fragments":["`alphabetize`"]},{"Key":"guy) `alphabetize`","Fragments":["is"]},{"Key":"`alphabetize` is","Fragments":["spelled"]},{"Key":"is spelled","Fragments":["incorrectly."]},{"Key":"spelled incorrectly.","Fragments":[":)"]},{"Key":"could only","Fragments":["sort"]},{"Key":"once and","Fragments":["still"]},{"Key":"and still","Fragments":["maintain","returns"]},{"Key":"still maintain","Fragments":["the"]},{"Key":"maintain the","Fragments":["readability?","message"]},{"Key":"how `cond`","Fragments":["fit"]},{"Key":"`cond` fit","Fragments":["right"]},{"Key":"fit right","Fragments":["in."]},{"Key":"right in.","Fragments":["Pattern"]},{"Key":"in. Pattern","Fragments":["matching"]},{"Key":"the messages","Fragments":["with"]},{"Key":"messages with","Fragments":["RegExp","structural"]},{"Key":"with RegExp","Fragments":["was"]},{"Key":"RegExp was","Fragments":["tempting,"]},{"Key":"was tempting,","Fragments":["but"]},{"Key":"tempting, but","Fragments":["I"]},{"Key":"guess this","Fragments":["has","got","is"]},{"Key":"this has","Fragments":["better","finally","pretty"]},{"Key":"has better","Fragments":["readability"]},{"Key":"better readability","Fragments":["not"]},{"Key":"readability not","Fragments":["to"]},{"Key":"to mention","Fragments":["easier","multiple","ask"]},{"Key":"mention easier","Fragments":["mantaince."]},{"Key":"The `defp","Fragments":["method(args),"]},{"Key":"`defp method(args),","Fragments":["do:`"]},{"Key":"method(args), do:`","Fragments":["is"]},{"Key":"do:` is","Fragments":["a"]},{"Key":"a fine","Fragments":["little"]},{"Key":"fine little","Fragments":["constructor"]},{"Key":"little constructor","Fragments":["for"]},{"Key":"constructor for","Fragments":["straight-forward"]},{"Key":"for straight-forward","Fragments":["one-liners."]},{"Key":"About this","Fragments":["matter,","matter"]},{"Key":"this matter,","Fragments":["It's"]},{"Key":"matter, It's","Fragments":["not"]},{"Key":"It's not","Fragments":["quite","a","something","really","common","possible","efficient","checking","quite","like","visibility","something","totally","documented","many","enough","a"]},{"Key":"not quite","Fragments":["clear","sure","sure","able","uncommon,","sure","sure","so","entirely","seeing"]},{"Key":"quite clear","Fragments":["to","what"]},{"Key":"me why","Fragments":["I"]},{"Key":"should favour","Fragments":["this"]},{"Key":"favour this","Fragments":["type"]},{"Key":"this type","Fragments":["of","of"]},{"Key":"of construct","Fragments":["instead"]},{"Key":"construct instead","Fragments":["of"]},{"Key":"using true","Fragments":["for"]},{"Key":"true for","Fragments":["default"]},{"Key":"for default","Fragments":["condition."]},{"Key":"default condition.","Fragments":["Having"]},{"Key":"condition. Having","Fragments":["coded"]},{"Key":"Having coded","Fragments":["with"]},{"Key":"coded with","Fragments":["elixir"]},{"Key":"elixir only","Fragments":["from"]},{"Key":"only from","Fragments":["few"]},{"Key":"from few","Fragments":["months"]},{"Key":"few months","Fragments":["it"]},{"Key":"months it","Fragments":["seems"]},{"Key":"macro uses","Fragments":["the"]},{"Key":"uses the","Fragments":["same","template","variable","shortest","keyword","`SpeechAnalyzer.ignoring?`","list","`Enumerable`","value.","`Bitwise`","zip","pattern"]},{"Key":"same \"I","Fragments":["don't"]},{"Key":"\"I don't","Fragments":["care"]},{"Key":"don't care","Fragments":["what's","for","about","about","what","about"]},{"Key":"care what's","Fragments":["in"]},{"Key":"what's in","Fragments":["here\""]},{"Key":"in here\"","Fragments":["syntax"]},{"Key":"here\" syntax","Fragments":["of"]},{"Key":"syntax of","Fragments":["pattern","Elixir","specifying","Elixir."]},{"Key":"matching, so","Fragments":["I"]},{"Key":"changed that","Fragments":["to","some"]},{"Key":"meaningful -","Fragments":["IMHO"]},{"Key":"- IMHO","Fragments":["-"]},{"Key":"IMHO -","Fragments":["like"]},{"Key":"- like","Fragments":["\"_speak\","]},{"Key":"like \"_speak\",","Fragments":["but"]},{"Key":"\"_speak\", but","Fragments":["if"]},{"Key":"anyone can","Fragments":["please","tell"]},{"Key":"can please","Fragments":["explain"]},{"Key":"please explain","Fragments":["this"]},{"Key":"explain this","Fragments":["to"]},{"Key":"me better","Fragments":["I'd"]},{"Key":"better I'd","Fragments":["appreciate."]},{"Key":"I'd appreciate.","Fragments":["Thanks"]},{"Key":"appreciate. Thanks","Fragments":["in"]},{"Key":"Thanks in","Fragments":["advance","advance!"]},{"Key":"in advance","Fragments":["for"]},{"Key":"advance for","Fragments":["your"]},{"Key":"Just started","Fragments":["out","with"]},{"Key":"started out","Fragments":["with","with","doing","red,","with"]},{"Key":"out with","Fragments":["Elixir.","an","the","exercism","putting"]},{"Key":"Elixir. Went","Fragments":["through"]},{"Key":"Went through","Fragments":["the"]},{"Key":"the crash","Fragments":["course"]},{"Key":"crash course","Fragments":["at"]},{"Key":"course at","Fragments":["http://elixir-lang.org/crash-course.html"]},{"Key":"at http://elixir-lang.org/crash-course.html","Fragments":["and"]},{"Key":"http://elixir-lang.org/crash-course.html and","Fragments":["Benjamin"]},{"Key":"and Benjamin","Fragments":["Tan's"]},{"Key":"Benjamin Tan's","Fragments":["Elixir"]},{"Key":"Tan's Elixir","Fragments":["for"]},{"Key":"Elixir for","Fragments":["the"]},{"Key":"the Lazy","Fragments":["Impatient"]},{"Key":"Lazy Impatient","Fragments":["and"]},{"Key":"Impatient and","Fragments":["Busy"]},{"Key":"and Busy","Fragments":["articles."]},{"Key":"are many","Fragments":["things","ways"]},{"Key":"many things","Fragments":["in"]},{"Key":"things in","Fragments":["my","this","Elixir","the","different"]},{"Key":"my submission","Fragments":["that","for","as","was"]},{"Key":"submission that","Fragments":["could"]},{"Key":"be improved,","Fragments":["for"]},{"Key":"improved, for","Fragments":["example"]},{"Key":"for example","Fragments":["I","`def","`Enum.zip`","here](http://elixir-lang.org/crash-course.html#function_syntax)):","a","when","at","`do_to_rna`","`1","in","`String.ends_with?(word,","`do_filter`.","OCaml","`\u0026hd/1`","`Regex.scan(...)","the","the"]},{"Key":"example I","Fragments":["haven't","believe"]},{"Key":"haven't checked","Fragments":["if","whether"]},{"Key":"checked if","Fragments":["I"]},{"Key":"can match","Fragments":["against","multiple"]},{"Key":"against the","Fragments":["string","general","general","wall","shouting","rules"]},{"Key":"with guards,","Fragments":["or","but","etc?"]},{"Key":"guards, or","Fragments":["if"]},{"Key":"could split","Fragments":["the"]},{"Key":"split the","Fragments":["function","string","text","sentence","sentence","sentence","string"]},{"Key":"function into","Fragments":["separate","three"]},{"Key":"So feel","Fragments":["free"]},{"Key":"feel free","Fragments":["to","to","to","to","to","to","to"]},{"Key":"free to","Fragments":["suggest","experiment","use","post","pick","ask","ignore","ask","delete","introduce","implement","suggest"]},{"Key":"to suggest","Fragments":["corrections","that","it","that","a"]},{"Key":"suggest corrections","Fragments":["and"]},{"Key":"corrections and","Fragments":["improvements."]},{"Key":"and improvements.","Fragments":["I'm"]},{"Key":"improvements. I'm","Fragments":["here"]},{"Key":"I'm here","Fragments":["to"]},{"Key":"here to","Fragments":["learn!","reduce","be","make","be"]},{"Key":"Looking very","Fragments":["clean!"]},{"Key":"Your three","Fragments":["private"]},{"Key":"three private","Fragments":["functions"]},{"Key":"functions have","Fragments":["a"]},{"Key":"a mix","Fragments":["of"]},{"Key":"mix of","Fragments":["abstractions"]},{"Key":"of abstractions","Fragments":["going"]},{"Key":"abstractions going","Fragments":["on"]},{"Key":"going on","Fragments":["that","with","your","in","with","that","is","with"]},{"Key":"on that","Fragments":["you","comment?","and","or","one.","particular","turned","to","page","site.","way.","would",":)","one","list.","one.","vs"]},{"Key":"consider cleaning","Fragments":["up."]},{"Key":"cleaning up.","Fragments":["Two"]},{"Key":"up. Two","Fragments":["of"]},{"Key":"Two of","Fragments":["them","your"]},{"Key":"of them","Fragments":["are","to","entirely?","could","is","in","being","have"]},{"Key":"them are","Fragments":["named"]},{"Key":"named in","Fragments":["a"]},{"Key":"that suggests","Fragments":["something"]},{"Key":"suggests something","Fragments":["about"]},{"Key":"something about","Fragments":["what","the","Elixir's"]},{"Key":"what Bob","Fragments":["is"]},{"Key":"Bob is","Fragments":["hearing,"]},{"Key":"is hearing,","Fragments":["whereas"]},{"Key":"hearing, whereas","Fragments":["the"]},{"Key":"whereas the","Fragments":["other","result"]},{"Key":"other refers","Fragments":["to"]},{"Key":"refers to","Fragments":["the","a","bytes"]},{"Key":"the state","Fragments":["of","is"]},{"Key":"state of","Fragments":["the","the","an"]},{"Key":"the textual","Fragments":["representation"]},{"Key":"textual representation","Fragments":["(the"]},{"Key":"representation (the","Fragments":["code)."]},{"Key":" Any","Fragments":["reason","particular","chance","feedback?","help","input","particular"]},{"Key":"Any reason","Fragments":["why","`point_compare`"]},{"Key":"prepend the","Fragments":["methods","*inverse*"]},{"Key":"with an","Fragments":["underscore?","earlier","empty","improved","empty","underscore,","empty","eye","individual","`Enum.filter`","option","`Enum`","all","entry","or:","underscore","empty","empty","empty","`is_anagram?`","empty"]},{"Key":"the String.ends_with?/2","Fragments":["and"]},{"Key":"String.ends_with?/2 and","Fragments":["String.upcase/1"]},{"Key":"and String.upcase/1","Fragments":["methods?"]},{"Key":"to `downcase`","Fragments":["before"]},{"Key":"`downcase` before","Fragments":["`scan`ning?"]},{"Key":"like good","Fragments":["idiomatic","practice."]},{"Key":"good idiomatic","Fragments":["Elixir"]},{"Key":"initially handled","Fragments":["the"]},{"Key":"handled the","Fragments":["\"\""]},{"Key":"case as","Fragments":["a","it","yours."]},{"Key":"a conditions","Fragments":["under"]},{"Key":"conditions under","Fragments":["cond,"]},{"Key":"under cond,","Fragments":["but"]},{"Key":"was more","Fragments":["readable","readable","than","specific","silliness","like","concerned","of"]},{"Key":"readable as","Fragments":["a"]},{"Key":"some pattern","Fragments":["matching.","matching"]},{"Key":"looked around","Fragments":["for","THAT"]},{"Key":"around for","Fragments":["a","everything..."]},{"Key":"to pattern","Fragments":["match","match","match","matching","match","match"]},{"Key":"match an","Fragments":["argument"]},{"Key":"argument using","Fragments":["a"]},{"Key":"a Regex,","Fragments":["but","since","not"]},{"Key":"Regex, but","Fragments":["couldn't","it"]},{"Key":"but couldn't","Fragments":["fine","find","get","find","remember","really","get"]},{"Key":"couldn't fine","Fragments":["one."]},{"Key":"like that's","Fragments":["a","duplicating"]},{"Key":"a bug","Fragments":["in","to","is","in","in"]},{"Key":"bug in","Fragments":["the","Enum.chunks.","the","your"]},{"Key":"the library","Fragments":["exercism","documentation"]},{"Key":"library exercism","Fragments":["uses"]},{"Key":"exercism uses","Fragments":["to"]},{"Key":"uses to","Fragments":["display"]},{"Key":"to display","Fragments":["Elixir"]},{"Key":"display Elixir","Fragments":["code:"]},{"Key":"Elixir code:","Fragments":["https://github.com/jayferd/rouge/issues/89!"]},{"Key":"like idiomatic","Fragments":["Elixir"]},{"Key":"clean. In","Fragments":["light"]},{"Key":"In light","Fragments":["of"]},{"Key":"light of","Fragments":["previous","that"]},{"Key":"of previous","Fragments":["debate","versions"]},{"Key":"previous debate","Fragments":["on"]},{"Key":"debate on","Fragments":["is_question"]},{"Key":"on is_question","Fragments":["vs"]},{"Key":"is_question vs","Fragments":["question?,"]},{"Key":"vs question?,","Fragments":["what"]},{"Key":"question?, what","Fragments":["you"]},{"Key":"have settled","Fragments":["on"]},{"Key":"settled on","Fragments":["is","`generate`"]},{"Key":"on is","Fragments":["at","to"]},{"Key":"is at","Fragments":["least","a","a","least","least","least"]},{"Key":"least conformant","Fragments":["with"]},{"Key":"conformant with","Fragments":["other"]},{"Key":"other submissions","Fragments":["that"]},{"Key":"submissions that","Fragments":["reached","use"]},{"Key":"that reached","Fragments":["this"]},{"Key":"reached this","Fragments":["stage."]},{"Key":" Hope","Fragments":["you","that","that"]},{"Key":"Hope you","Fragments":["are","are","have"]},{"Key":"are enjoying","Fragments":["exercism"]},{"Key":"enjoying exercism","Fragments":["as"]},{"Key":"exercism as","Fragments":["much"]},{"Key":" Julien:","Fragments":["Thanks"]},{"Key":"Julien: Thanks","Fragments":["for"]},{"Key":"for investigating.","Fragments":["I"]},{"Key":"investigating. I","Fragments":["remember"]},{"Key":"I remember","Fragments":["seeing","correctly,"]},{"Key":"remember seeing","Fragments":["a"]},{"Key":"seeing a","Fragments":["very"]},{"Key":"very similar","Fragments":["list,","to","implementation"]},{"Key":"similar list,","Fragments":["which"]},{"Key":"list, which","Fragments":["is","might"]},{"Key":"thought \"is_\"","Fragments":["looked"]},{"Key":"\"is_\" looked","Fragments":["more"]},{"Key":"looked more","Fragments":["Elixir-like."]},{"Key":"a revised","Fragments":["version,"]},{"Key":"revised version,","Fragments":["which"]},{"Key":"version, which","Fragments":["got"]},{"Key":"which got","Fragments":["the"]},{"Key":"got the","Fragments":["opposite","parameters","idea...","right"]},{"Key":"the opposite","Fragments":["comment"]},{"Key":"opposite comment","Fragments":["from"]},{"Key":"from someone","Fragments":["else"]},{"Key":"someone else","Fragments":["--","nitpicked","pointed","having","wrote."]},{"Key":"else --","Fragments":["that"]},{"Key":"-- that","Fragments":["\"?\"","looks"]},{"Key":"that \"?\"","Fragments":["should"]},{"Key":"\"?\" should","Fragments":["be"]},{"Key":"be preferred.","Fragments":["So,"]},{"Key":"preferred. So,","Fragments":["I"]},{"Key":"So, I","Fragments":["submitted","submitted","updated","relented","reversed","felt","*think*"]},{"Key":" Along","Fragments":["the"]},{"Key":"Along the","Fragments":["way,"]},{"Key":"way, I","Fragments":["looked"]},{"Key":"looked at","Fragments":["elixir-lang.org,","the","`String.strip/1`?","`Regex.scan`?","the","the","`Regex.scan`?","Regex.scan","that","this","yours","some"]},{"Key":"at elixir-lang.org,","Fragments":["which"]},{"Key":"elixir-lang.org, which","Fragments":["lets"]},{"Key":"which lets","Fragments":["you"]},{"Key":"you search","Fragments":["by"]},{"Key":"search by","Fragments":["partial"]},{"Key":"by partial","Fragments":["function"]},{"Key":"partial function","Fragments":["names."]},{"Key":"names. Looking","Fragments":["at"]},{"Key":"Looking at","Fragments":["\"is_\"","\"?\"","the","the"]},{"Key":"at \"is_\"","Fragments":["shows"]},{"Key":"\"is_\" shows","Fragments":["the"]},{"Key":"same list","Fragments":["you","as","as"]},{"Key":"list you","Fragments":["found,","could","flatten","pass"]},{"Key":"you found,","Fragments":["which"]},{"Key":"found, which","Fragments":["are"]},{"Key":"which are","Fragments":["all","subtly","sorted","arbitrarily","within","'case-less'"]},{"Key":"all Kernel","Fragments":["methods."]},{"Key":"Kernel methods.","Fragments":["Looking"]},{"Key":"methods. Looking","Fragments":["at"]},{"Key":"at \"?\"","Fragments":["(alone)"]},{"Key":"\"?\" (alone)","Fragments":["shows"]},{"Key":"(alone) shows","Fragments":["a"]},{"Key":"shows a","Fragments":["wide"]},{"Key":"a wide","Fragments":["variety"]},{"Key":"wide variety","Fragments":["of"]},{"Key":"variety of","Fragments":["functions"]},{"Key":"functions on","Fragments":["other","it.","one"]},{"Key":"on other","Fragments":["modules.","things"]},{"Key":"My personal","Fragments":["aesthetic","rule"]},{"Key":"personal aesthetic","Fragments":["preference"]},{"Key":"aesthetic preference","Fragments":["would"]},{"Key":"preference would","Fragments":["be"]},{"Key":"be for","Fragments":["\"is_\",","it","the","the"]},{"Key":"for \"is_\",","Fragments":["at"]},{"Key":"\"is_\", at","Fragments":["least"]},{"Key":"this program.","Fragments":["I've"]},{"Key":"program. I've","Fragments":["now"]},{"Key":"I've now","Fragments":["submitted","figured"]},{"Key":"now submitted","Fragments":["it"]},{"Key":"submitted it","Fragments":["both"]},{"Key":"it both","Fragments":["ways.","ways."]},{"Key":"both ways.","Fragments":["(The"]},{"Key":"ways. (The","Fragments":["other"]},{"Key":"(The other","Fragments":["way"]},{"Key":"other way","Fragments":["does","to","to","to","or","to","to","except"]},{"Key":"way does","Fragments":["look"]},{"Key":"does look","Fragments":["prettier","nice","a","more"]},{"Key":"look prettier","Fragments":["when"]},{"Key":"prettier when","Fragments":["combined"]},{"Key":"when combined","Fragments":["with"]},{"Key":"combined with","Fragments":["the","`Enum.all?`","`Enum.reduce`","the"]},{"Key":"the \"|\u003e\"","Fragments":["notation.)"]},{"Key":"Given the","Fragments":["2.6.2","current"]},{"Key":"the 2.6.2","Fragments":["section"]},{"Key":"2.6.2 section","Fragments":["of"]},{"Key":"section of","Fragments":["```http://elixir-lang.org/getting_started/2.html```"]},{"Key":"of ```http://elixir-lang.org/getting_started/2.html```","Fragments":["I"]},{"Key":"```http://elixir-lang.org/getting_started/2.html``` I","Fragments":["would"]},{"Key":"would tend","Fragments":["to"]},{"Key":"tend to","Fragments":["say","stick","prefer","understand","be","not","agree","use","use","agree,","use","put","never","respect","return","be","avoid","get","have","do","avoid"]},{"Key":"say ```is_```","Fragments":["without"]},{"Key":"```is_``` without","Fragments":["```?```"]},{"Key":"Well, looking","Fragments":["more"]},{"Key":"looking more","Fragments":["closely,"]},{"Key":"more closely,","Fragments":["it"]},{"Key":"closely, it","Fragments":["looks"]},{"Key":"the \"is_XXX\"","Fragments":["methods"]},{"Key":"\"is_XXX\" methods","Fragments":["are"]},{"Key":"all on","Fragments":["Kernel,"]},{"Key":"on Kernel,","Fragments":["which"]},{"Key":"Kernel, which","Fragments":["may"]},{"Key":"which may","Fragments":["not"]},{"Key":"be Elixir","Fragments":["style"]},{"Key":"Elixir style","Fragments":["so","or","thing...","this"]},{"Key":"style so","Fragments":["much"]},{"Key":"an echo","Fragments":["of"]},{"Key":"echo of","Fragments":["Erlang."]},{"Key":"of Erlang.","Fragments":["The"]},{"Key":"Erlang. The","Fragments":["\"?\"","runtime"]},{"Key":"The \"?\"","Fragments":["methods"]},{"Key":"\"?\" methods","Fragments":["are"]},{"Key":"are on","Fragments":["the","the","that"]},{"Key":"other modules.","Fragments":["So,","(Forgive"]},{"Key":"modules. So,","Fragments":["I'll"]},{"Key":"So, I'll","Fragments":["shift"]},{"Key":"I'll shift","Fragments":["to"]},{"Key":"shift to","Fragments":["the"]},{"Key":"\"?\" formulation.","Fragments":["Thanks!"]},{"Key":" Interesting!","Fragments":["As"]},{"Key":"Interesting! As","Fragments":["someone"]},{"Key":"As someone","Fragments":["at","who","that","else"]},{"Key":"someone at","Fragments":["the"]},{"Key":"the \"bob\"","Fragments":["level,"]},{"Key":"\"bob\" level,","Fragments":["I"]},{"Key":"level, I","Fragments":["don't"]},{"Key":"don't yet","Fragments":["know","have"]},{"Key":"yet know","Fragments":["whether"]},{"Key":"know whether","Fragments":["you","the"]},{"Key":"whether you","Fragments":["know","want","want","could"]},{"Key":"know this...","Fragments":["but"]},{"Key":"this... but","Fragments":["the"]},{"Key":"previous feedback","Fragments":["I"]},{"Key":"feedback I","Fragments":["got"]},{"Key":"got suggested","Fragments":["I"]},{"Key":"suggested I","Fragments":["make"]},{"Key":"I make","Fragments":["a","a"]},{"Key":"a choice","Fragments":["between"]},{"Key":"choice between","Fragments":["using"]},{"Key":"between using","Fragments":["\"is_question\""]},{"Key":"using \"is_question\"","Fragments":["and"]},{"Key":"\"is_question\" and","Fragments":["\"question?\""]},{"Key":"and \"question?\"","Fragments":["because","?"]},{"Key":"\"question?\" because","Fragments":["my"]},{"Key":"because my","Fragments":["previous","first","brain","editor"]},{"Key":"my previous","Fragments":["version","iterations.","submission","iteration"]},{"Key":"previous version","Fragments":["said","is","where","better.","any"]},{"Key":"version said","Fragments":["\"is_question?\""]},{"Key":"I agreed","Fragments":["that"]},{"Key":"agreed that","Fragments":["doing"]},{"Key":"that doing","Fragments":["both"]},{"Key":"doing both","Fragments":["was","a"]},{"Key":"both was","Fragments":["redundant."]},{"Key":"was redundant.","Fragments":["Is"]},{"Key":"redundant. Is","Fragments":["the"]},{"Key":"the elixir","Fragments":["style","convention","land","code","pipeline","stdlib,","exercises","code","0.13.x","codebase.","talk","repo"]},{"Key":"elixir style","Fragments":["to","binary"]},{"Key":"style to","Fragments":["use","emphasize"]},{"Key":"use \"question?\"","Fragments":["or"]},{"Key":"\"question?\" or","Fragments":["\"is_question\"?"]},{"Key":"or \"is_question\"?","Fragments":["When"]},{"Key":"\"is_question\"? When","Fragments":["I"]},{"Key":"When I","Fragments":["do","run","was","learnt","tried","did","had","solved","started","try","tested","first"]},{"Key":"do a","Fragments":["quick","bit","multi-word","`get`/`put`","bit","`String.replace`?","pattern","full","search","lot","lot","frigging","lot","String.strip"]},{"Key":"a quick","Fragments":["search","note.","note","solution","scan"]},{"Key":"quick search","Fragments":["on"]},{"Key":"search on","Fragments":["the"]},{"Key":"the elixir-lang","Fragments":["docs,"]},{"Key":"elixir-lang docs,","Fragments":["it"]},{"Key":"docs, it","Fragments":["appears"]},{"Key":"it appears","Fragments":["that","to","that","to"]},{"Key":"appears that","Fragments":["both","Elixir"]},{"Key":"that both","Fragments":["styles","lists"]},{"Key":"both styles","Fragments":["are"]},{"Key":"styles are","Fragments":["in"]},{"Key":"are in","Fragments":["use.","the","effect","ASCII.","general","trouble","a","the","the","terms"]},{"Key":"I'm actually","Fragments":["not","pretty","a"]},{"Key":"actually not","Fragments":["putting"]},{"Key":"not putting","Fragments":["that"]},{"Key":"putting that","Fragments":["space"]},{"Key":"that space","Fragments":["there..."]},{"Key":"space there...","Fragments":["no"]},{"Key":"there... no","Fragments":["idea"]},{"Key":"no idea","Fragments":["where","what","about","what","what","what","how","why","why"]},{"Key":"idea where","Fragments":["it's","it"]},{"Key":"where it's","Fragments":["coming","better"]},{"Key":"it's coming","Fragments":["from."]},{"Key":"coming from.","Fragments":["(If"]},{"Key":"from. (If","Fragments":["you"]},{"Key":"(If you","Fragments":["copy/paste"]},{"Key":"you copy/paste","Fragments":["it"]},{"Key":"copy/paste it","Fragments":["into"]},{"Key":"a text","Fragments":["editor"]},{"Key":"text editor","Fragments":["with"]},{"Key":"editor with","Fragments":["a"]},{"Key":"a monospaced","Fragments":["font,"]},{"Key":"monospaced font,","Fragments":["you'll"]},{"Key":"font, you'll","Fragments":["see"]},{"Key":"you'll see","Fragments":["they're"]},{"Key":"see they're","Fragments":["aligned."]},{"Key":"they're aligned.","Fragments":["Bizarre.)"]},{"Key":"Elixir allows","Fragments":["you","you","you"]},{"Key":"allows you","Fragments":["to","to","to","to","to","resolve","to","to"]},{"Key":"more expressive","Fragments":["with","by","now.","when","argument","variable","way","than"]},{"Key":"expressive with","Fragments":["methods"]},{"Key":"are asking","Fragments":["a"]},{"Key":"asking a","Fragments":["question,"]},{"Key":"a question,","Fragments":["like","so"]},{"Key":"question, like","Fragments":["Ruby."]},{"Key":" is_question","Fragments":["=\u003e"]},{"Key":"is_question =\u003e","Fragments":["question?"]},{"Key":" is_shouting","Fragments":["=\u003e"]},{"Key":"is_shouting =\u003e","Fragments":["shouting?"]},{"Key":"30, I'm","Fragments":["wondering"]},{"Key":"a cleaner/more","Fragments":["expressive"]},{"Key":"cleaner/more expressive","Fragments":["way"]},{"Key":"expressive way","Fragments":["to","of"]},{"Key":"suppose \"is_\"","Fragments":["is"]},{"Key":"is redundant","Fragments":["with"]},{"Key":"the \"?\",","Fragments":["at","both"]},{"Key":"\"?\", at","Fragments":["least"]},{"Key":"languages that","Fragments":["I","don't","aren't"]},{"Key":"know better","Fragments":["than"]},{"Key":"one. Any","Fragments":["idea"]},{"Key":"Any idea","Fragments":["what","how"]},{"Key":"idea what","Fragments":["the","the","it's","`new/2`","I'm","to"]},{"Key":"Elixir idiom","Fragments":["would","(I","you"]},{"Key":"idiom would","Fragments":["be?"]},{"Key":" Forced","Fragments":["to"]},{"Key":"Forced to","Fragments":["pick"]},{"Key":"to pick","Fragments":["one,","nits,","the","on,","any","in"]},{"Key":"pick one,","Fragments":["I'm"]},{"Key":"one, I'm","Fragments":["inclined"]},{"Key":"I'm inclined","Fragments":["to"]},{"Key":"inclined to","Fragments":["keep","change","move"]},{"Key":"\"is_\" and","Fragments":["drop"]},{"Key":"and drop","Fragments":["the"]},{"Key":"\"?\", both","Fragments":["because"]},{"Key":"both because","Fragments":["it"]},{"Key":"is easier","Fragments":["for","to","to","to","to","and","to","to"]},{"Key":"easier for","Fragments":["the","the","a","a"]},{"Key":"the eye","Fragments":["to"]},{"Key":"eye to","Fragments":["scan"]},{"Key":"to scan","Fragments":["and","down,","all"]},{"Key":"scan and","Fragments":["because","didn't"]},{"Key":"and because","Fragments":["it","it's"]},{"Key":"to mirror","Fragments":["some"]},{"Key":"mirror some","Fragments":["of"]},{"Key":"the built-in","Fragments":["function","versions"]},{"Key":"built-in function","Fragments":["names","called","in"]},{"Key":"Good points!","Fragments":["In"]},{"Key":"points! In","Fragments":["order"]},{"Key":"In order","Fragments":["of"]},{"Key":"of least","Fragments":["discussion:"]},{"Key":"3. Awesome.","Fragments":["I'm"]},{"Key":"Awesome. I'm","Fragments":["still"]},{"Key":"still learning","Fragments":["my","Elixir,","elixir,","here,","OTP"]},{"Key":"learning my","Fragments":["way"]},{"Key":"my way","Fragments":["around","in","of"]},{"Key":"way around","Fragments":["the","it,","that?","that.","it."]},{"Key":"2. Probably.","Fragments":["I"]},{"Key":"Probably. I","Fragments":["have"]},{"Key":"the feeling","Fragments":["you've"]},{"Key":"feeling you've","Fragments":["got"]},{"Key":"you've got","Fragments":["a","Elixir","me","a","a","the"]},{"Key":"better control","Fragments":["structure","of"]},{"Key":"structure or","Fragments":["syntax"]},{"Key":"or syntax","Fragments":["in"]},{"Key":"syntax in","Fragments":["mind,","the","Erlang?","regular","statscompare"]},{"Key":"quite sure","Fragments":["what","how","about","what","what"]},{"Key":"you're trying","Fragments":["to","to","not","to","to","to","to"]},{"Key":"to lead","Fragments":["me","you"]},{"Key":"lead me","Fragments":["to..."]},{"Key":" 4.","Fragments":["I'm","It","The"]},{"Key":"4. I'm","Fragments":["not"]},{"Key":"not sure,","Fragments":["actually.","to"]},{"Key":"sure, actually.","Fragments":["This"]},{"Key":"actually. This","Fragments":["is"]},{"Key":"first functional","Fragments":["language,"]},{"Key":"functional language,","Fragments":["so"]},{"Key":"language, so","Fragments":["to","I"]},{"Key":"so to","Fragments":["me","understand"]},{"Key":"me nested","Fragments":["function"]},{"Key":"nested function","Fragments":["calls","calls)","call"]},{"Key":"calls seem","Fragments":["a"]},{"Key":"natural than","Fragments":["piping,"]},{"Key":"than piping,","Fragments":["if"]},{"Key":"piping, if","Fragments":["they"]},{"Key":"don't require","Fragments":["extra"]},{"Key":"require extra","Fragments":["delimiters"]},{"Key":"extra delimiters","Fragments":["and"]},{"Key":"delimiters and","Fragments":["syntax"]},{"Key":"and syntax","Fragments":["to"]},{"Key":"syntax to","Fragments":["achieve","be","avoid"]},{"Key":"to achieve","Fragments":["(unlike","the","the"]},{"Key":"achieve (unlike","Fragments":["all_caps?"]},{"Key":"(unlike all_caps?","Fragments":["and"]},{"Key":"all_caps? and","Fragments":["question?."]},{"Key":"and question?.","Fragments":["At"]},{"Key":"question?. At","Fragments":["this"]},{"Key":"simple level","Fragments":["I"]},{"Key":"level I","Fragments":["imagine"]},{"Key":"I imagine","Fragments":["it's"]},{"Key":"imagine it's","Fragments":["a"]},{"Key":"a convention/preference","Fragments":["thing."]},{"Key":"convention/preference thing.","Fragments":["Do"]},{"Key":"thing. Do","Fragments":["you"]},{"Key":"of any","Fragments":["convention","character.","sort","help","other","other","real"]},{"Key":"any convention","Fragments":["or"]},{"Key":"convention or","Fragments":["have"]},{"Key":"or have","Fragments":["a"]},{"Key":"a preference","Fragments":["on","for"]},{"Key":"preference on","Fragments":["this"]},{"Key":"to agree,","Fragments":["the","but"]},{"Key":"agree, the","Fragments":["double"]},{"Key":"the double","Fragments":["control","reduce."]},{"Key":"double control","Fragments":["structures"]},{"Key":"control structures","Fragments":["just","that"]},{"Key":"structures just","Fragments":["increases"]},{"Key":"just increases","Fragments":["the"]},{"Key":"increases the","Fragments":["cognitive","potential"]},{"Key":"the cognitive","Fragments":["overhead.","load"]},{"Key":"cognitive overhead.","Fragments":["I"]},{"Key":"overhead. I","Fragments":["think"]},{"Key":"this because","Fragments":["I","I","is"]},{"Key":"had ideas","Fragments":["for"]},{"Key":"ideas for","Fragments":["consuming","improving","improving"]},{"Key":"for consuming","Fragments":["the"]},{"Key":"consuming the","Fragments":["response"]},{"Key":"response of","Fragments":["`interpret`","the"]},{"Key":"of `interpret`","Fragments":["in"]},{"Key":"`interpret` in","Fragments":["a"]},{"Key":"different way","Fragments":["at","(`Stream.map(...)","to","to","with"]},{"Key":"way at","Fragments":["first,"]},{"Key":"first, like","Fragments":["`send`ing"]},{"Key":"like `send`ing","Fragments":["the"]},{"Key":"`send`ing the","Fragments":["interpretation"]},{"Key":"the interpretation","Fragments":["to"]},{"Key":"interpretation to","Fragments":["a"]},{"Key":"function on","Fragments":["itself","Regex](http://elixir-lang.org/docs/master/Regex.html)","a","a","the","purpose"]},{"Key":"on itself","Fragments":["that"]},{"Key":"itself that","Fragments":["encoded"]},{"Key":"that encoded","Fragments":["the"]},{"Key":"encoded the","Fragments":["appropriate","variable"]},{"Key":"the appropriate","Fragments":["response.","syntax..."]},{"Key":"appropriate response.","Fragments":["But"]},{"Key":"response. But","Fragments":["then","now","that"]},{"Key":"But then","Fragments":["I","the","I","it"]},{"Key":"then I","Fragments":["realized","do","remembered","got","saw","could","discovered","could","saw","decided","got","settled","want","split","reject","fold","run","can't"]},{"Key":"I discovered","Fragments":["the","why","unicode","that","it","-","Enum.zip.","that"]},{"Key":"discovered the","Fragments":["`apply`"]},{"Key":"the `apply`","Fragments":["method"]},{"Key":"`apply` method","Fragments":["that's"]},{"Key":"method that's","Fragments":["like"]},{"Key":"that's like","Fragments":["Ruby's"]},{"Key":"like Ruby's","Fragments":["`send`,"]},{"Key":"Ruby's `send`,","Fragments":["so"]},{"Key":"`send`, so","Fragments":["I'll"]},{"Key":"I'll resubmit","Fragments":["with"]},{"Key":"resubmit with","Fragments":["that"]},{"Key":"with that","Fragments":["implementation.","change.","doesn't","check","in","solution.","change.","change","change","in","in",":-)","you","extra","version","test","is"]},{"Key":"that implementation.","Fragments":["I","In"]},{"Key":"implementation. I","Fragments":["think","won't","wondered"]},{"Key":"this sort","Fragments":["of","solution","of"]},{"Key":"of dynamic","Fragments":["dispatching"]},{"Key":"dynamic dispatching","Fragments":["is"]},{"Key":"dispatching is","Fragments":["more"]},{"Key":"more maintainable","Fragments":["than"]},{"Key":"maintainable than","Fragments":["hardcoding"]},{"Key":"than hardcoding","Fragments":["responses"]},{"Key":"hardcoding responses","Fragments":["into"]},{"Key":"responses into","Fragments":["control","module"]},{"Key":"into control","Fragments":["structures"]},{"Key":"structures that","Fragments":["grow"]},{"Key":"that grow","Fragments":["large"]},{"Key":"grow large","Fragments":["and"]},{"Key":"large and","Fragments":["unwieldily,"]},{"Key":"and unwieldily,","Fragments":["but"]},{"Key":"unwieldily, but","Fragments":["on"]},{"Key":"but on","Fragments":["the","this","the","my"]},{"Key":"other hand,","Fragments":["you'd","taken","at"]},{"Key":"hand, you'd","Fragments":["still"]},{"Key":"you'd still","Fragments":["have"]},{"Key":"still have","Fragments":["to","to","to","a"]},{"Key":"to maintain","Fragments":["the","and"]},{"Key":"message that","Fragments":["the","you"]},{"Key":"refactor and","Fragments":["resubmit"]},{"Key":"resubmit so","Fragments":["I"]},{"Key":"can discuss","Fragments":["that"]},{"Key":"discuss that","Fragments":["implementation."]},{"Key":"implementation. In","Fragments":["more"]},{"Key":"In more","Fragments":["depth."]},{"Key":"Excellent! Isn't","Fragments":["the"]},{"Key":"the ``ìs_```","Fragments":["redundant"]},{"Key":"``ìs_``` redundant","Fragments":["with"]},{"Key":"with ```?```","Fragments":["in"]},{"Key":"your function","Fragments":["names?","method","definitions","definitions."]},{"Key":"love how","Fragments":["you've","you've","expressive"]},{"Key":"how you've","Fragments":["broken","split","done","assigned"]},{"Key":"you've broken","Fragments":["up","the"]},{"Key":"broken up","Fragments":["the","nicely,","code"]},{"Key":"the \u003ccode\u003einterpret\u003c/code\u003edecision","Fragments":["vs."]},{"Key":"\u003ccode\u003einterpret\u003c/code\u003edecision vs.","Fragments":["the"]},{"Key":"vs. the","Fragments":["\u003ccode\u003erespond_to\u003c/code\u003e"]},{"Key":"the \u003ccode\u003erespond_to\u003c/code\u003e","Fragments":["decision."]},{"Key":"\u003ccode\u003erespond_to\u003c/code\u003e decision.","Fragments":["Very"]},{"Key":"decision. Very","Fragments":["nice."]},{"Key":"also love","Fragments":["how"]},{"Key":"you've split","Fragments":["out"]},{"Key":"split out","Fragments":["the","the"]},{"Key":"details a","Fragments":["bit."]},{"Key":"Let's consider","Fragments":["a"]},{"Key":"consider a","Fragments":["few","different","message","solution","list"]},{"Key":"1. You","Fragments":["have","can","defined"]},{"Key":"two similar","Fragments":["control"]},{"Key":"similar control","Fragments":["structures."]},{"Key":"control structures.","Fragments":["What"]},{"Key":"structures. What","Fragments":["does"]},{"Key":"does this","Fragments":["do","pass","code","pass"]},{"Key":"this do","Fragments":["to"]},{"Key":"do to","Fragments":["maintainability?","improve","the"]},{"Key":"2. You","Fragments":["are","have"]},{"Key":"are asserting","Fragments":["that"]},{"Key":"asserting that","Fragments":["\u003ccode\u003eall_caps?\u003c/code\u003e"]},{"Key":"that \u003ccode\u003eall_caps?\u003c/code\u003e","Fragments":["interprets"]},{"Key":"\u003ccode\u003eall_caps?\u003c/code\u003e interprets","Fragments":["to"]},{"Key":"interprets to","Fragments":["\u003ccode\u003e:shout\u003c/code\u003eing"]},{"Key":"to \u003ccode\u003e:shout\u003c/code\u003eing","Fragments":["--"]},{"Key":"\u003ccode\u003e:shout\u003c/code\u003eing --","Fragments":["are"]},{"Key":"-- are","Fragments":["there"]},{"Key":"there other","Fragments":["ways","way"]},{"Key":"3. Check","Fragments":["out"]},{"Key":"out \u003ccode\u003eString.upcase/1\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eString.upcase/1\u003c/code\u003e and","Fragments":["\u003ccode\u003eString.ends_with?\u003c/code\u003e."]},{"Key":"and \u003ccode\u003eString.ends_with?\u003c/code\u003e.","Fragments":["Do"]},{"Key":"\u003ccode\u003eString.ends_with?\u003c/code\u003e. Do","Fragments":["they"]},{"Key":"Do they","Fragments":["make","really"]},{"Key":"they make","Fragments":["your","changes"]},{"Key":"your implementations","Fragments":["simpler?"]},{"Key":"4. It","Fragments":["may"]},{"Key":"It may","Fragments":["be","just","have","be","feel"]},{"Key":"moot point,","Fragments":["but"]},{"Key":"think line","Fragments":["4","3","17"]},{"Key":"line 4","Fragments":["would","can","a",",","and","if","is"]},{"Key":"4 would","Fragments":["be"]},{"Key":"clear with","Fragments":["pipelines?"]},{"Key":"Great work!","Fragments":["Just"]},{"Key":"work! Just","Fragments":["opening"]},{"Key":"Just opening","Fragments":["up"]},{"Key":"opening up","Fragments":["the","the"]},{"Key":" Definitively","Fragments":["makes"]},{"Key":"Definitively makes","Fragments":["sense!"]},{"Key":"makes sense!","Fragments":["Thanks"]},{"Key":"sense! Thanks","Fragments":["for"]},{"Key":"I recommend","Fragments":["going","taking","you"]},{"Key":"recommend going","Fragments":["through"]},{"Key":"going through","Fragments":["the","the","learning","the"]},{"Key":"the [Getting","Fragments":["Started"]},{"Key":"[Getting Started","Fragments":["Guide](http://elixir-lang.org/getting_started/1.html)"]},{"Key":"Started Guide](http://elixir-lang.org/getting_started/1.html)","Fragments":["if"]},{"Key":"Guide](http://elixir-lang.org/getting_started/1.html) if","Fragments":["you"]},{"Key":"It helps","Fragments":["to","distinguish","identify"]},{"Key":"helps to","Fragments":["start","visually"]},{"Key":"start from","Fragments":["an"]},{"Key":"from an","Fragments":["understanding","Erlang","aesthetic"]},{"Key":"an understanding","Fragments":["that"]},{"Key":"understanding that","Fragments":["there"]},{"Key":"are no","Fragments":["classes","characters","standard","unicode","keywords","letters","digits"]},{"Key":"no classes","Fragments":["in"]},{"Key":"in Elixir,","Fragments":["nor","something","you","but","but","but"]},{"Key":"Elixir, nor","Fragments":["instances"]},{"Key":"nor instances","Fragments":["of"]},{"Key":"instances of","Fragments":["classes.","a"]},{"Key":"of classes.","Fragments":["String"]},{"Key":"classes. String","Fragments":["is"]},{"Key":"String is","Fragments":["a"]},{"Key":"module with","Fragments":["a","`defp`.","a","a","`defp`."]},{"Key":"of handy","Fragments":["methods"]},{"Key":"handy methods","Fragments":["that"]},{"Key":"that operate","Fragments":["on"]},{"Key":"operate on","Fragments":["double","empty","those."]},{"Key":"on double","Fragments":["quoted"]},{"Key":"double quoted","Fragments":["strings"]},{"Key":"quoted strings","Fragments":["(binaries)."]},{"Key":"This brings","Fragments":["up"]},{"Key":"brings up","Fragments":["another"]},{"Key":"up another","Fragments":["difference","rev"]},{"Key":"another difference","Fragments":["-"]},{"Key":"difference -","Fragments":["what"]},{"Key":"- what","Fragments":["we"]},{"Key":"we commonly","Fragments":["refer"]},{"Key":"commonly refer","Fragments":["to"]},{"Key":"refer to","Fragments":["as","the","any","my"]},{"Key":"to as","Fragments":["a"]},{"Key":"Elixir, something","Fragments":["surrounded"]},{"Key":"something surrounded","Fragments":["by"]},{"Key":"surrounded by","Fragments":["double","parentheses."]},{"Key":"by double","Fragments":["quotes,"]},{"Key":"double quotes,","Fragments":["is"]},{"Key":"quotes, is","Fragments":["really"]},{"Key":"is really","Fragments":["a","clean,","nice.","awesome!","quite","damn","an","confusing","a","a","stupid,","a","a","just","straightforward.","a","nitpicky,","beautiful","simple","annoying.","short.","syntactic"]},{"Key":"really a","Fragments":["binary","nitpick,","list","nitpick","list","nitpick.","big","record","matter","matter","fan","form","specialised","very","nitpick,","matter","style","function","good"]},{"Key":"a binary","Fragments":["(sequence","out","for","(what","(\u003c\u003c","comprehension.","in"]},{"Key":"binary (sequence","Fragments":["of"]},{"Key":"(sequence of","Fragments":["bits),"]},{"Key":"of bits),","Fragments":["not"]},{"Key":"bits), not","Fragments":["some"]},{"Key":"not some","Fragments":["kind","arbitrarily"]},{"Key":"some kind","Fragments":["of"]},{"Key":"of instance","Fragments":["of"]},{"Key":"instance of","Fragments":["a","a","a","a"]},{"Key":"a String","Fragments":["or","with","type","in"]},{"Key":"String or","Fragments":["the"]},{"Key":"also highly","Fragments":["recommend"]},{"Key":"highly recommend","Fragments":["Dave"]},{"Key":"recommend Dave","Fragments":["Thomas's"]},{"Key":"Dave Thomas's","Fragments":["book,"]},{"Key":"Thomas's book,","Fragments":["[Programming"]},{"Key":"book, [Programming","Fragments":["Elixir](http://pragprog.com/book/elixir/programming-elixir)"]},{"Key":"you help","Fragments":["me"]},{"Key":"help me","Fragments":["understand","work","work","build"]},{"Key":"me understand","Fragments":["the"]},{"Key":"the approach","Fragments":["of","I've","being","of","of","of","I"]},{"Key":"approach of","Fragments":["calling","identifying","this","having"]},{"Key":"of calling","Fragments":["class",".new()"]},{"Key":"calling class","Fragments":["methods"]},{"Key":"class methods","Fragments":["on"]},{"Key":"methods on","Fragments":["String,"]},{"Key":"on String,","Fragments":["as"]},{"Key":"String, as","Fragments":["opposed"]},{"Key":" message.ends_with?(\"?\")","Fragments":["and"]},{"Key":"message.ends_with?(\"?\") and","Fragments":["message.length"]},{"Key":"and message.length","Fragments":["=="]},{"Key":"message.length ==","Fragments":["0?"]},{"Key":"Since message","Fragments":["is"]},{"Key":"already an","Fragments":["instance"]},{"Key":"an instance","Fragments":["of","of"]},{"Key":"string, would","Fragments":["those"]},{"Key":"would those","Fragments":["methods"]},{"Key":"those methods","Fragments":["not","be","in","might"]},{"Key":"methods not","Fragments":["be"]},{"Key":"be accessible","Fragments":["on"]},{"Key":"accessible on","Fragments":["the"]},{"Key":"the \"message\"","Fragments":["object"]},{"Key":"\"message\" object","Fragments":["by"]},{"Key":"object by","Fragments":["default?"]},{"Key":"That's weird,","Fragments":["being"]},{"Key":"weird, being","Fragments":["checking"]},{"Key":"being checking","Fragments":["with"]},{"Key":"checking with","Fragments":["vim"]},{"Key":"with vim","Fragments":["\u0026"]},{"Key":"vim \u0026","Fragments":["everything"]},{"Key":"\u0026 everything","Fragments":["seems"]},{"Key":"everything seems","Fragments":["to"]},{"Key":"be properly","Fragments":["formatted"]},{"Key":"properly formatted","Fragments":["?!?"]},{"Key":"Looking great.","Fragments":["Agree"]},{"Key":"great. Agree","Fragments":["with"]},{"Key":"Agree with","Fragments":["an","@mac"]},{"Key":"earlier commenter","Fragments":["that"]},{"Key":"commenter that","Fragments":["it"]},{"Key":"common to","Fragments":["go","do","use","put","create","not","put","always","use","put","put","use","guard","see","name","make","use","use","preserve","use","name","use","use"]},{"Key":"to go","Fragments":["with","here?","ahead","with","look","with","that","with","through","with","crazy","from","ahead","about","paging","with","back","through","over"]},{"Key":"with 2-space","Fragments":["indentation,"]},{"Key":"2-space indentation,","Fragments":["but"]},{"Key":"indentation, but","Fragments":["perhaps"]},{"Key":"but perhaps","Fragments":["that","they've","it","it's","I'll"]},{"Key":"perhaps that","Fragments":["won't"]},{"Key":"that won't","Fragments":["stop","work."]},{"Key":"won't stop","Fragments":["approval."]},{"Key":" respond_to","Fragments":["could","could"]},{"Key":"respond_to could","Fragments":["in","in"]},{"Key":"could in","Fragments":["fact","fact"]},{"Key":"in fact","Fragments":["be","be","mark","it's","implement","normalize,","tail"]},{"Key":"fact be","Fragments":["implemented","implemented"]},{"Key":"implemented in","Fragments":["a","a","terms","terms","terms","terms","terms","Erlang.","terms"]},{"Key":"single method","Fragments":["with","with"]},{"Key":"method with","Fragments":["a","a","a","`do_`,"]},{"Key":"a `case","Fragments":["input`,"]},{"Key":"`case input`,","Fragments":["since"]},{"Key":"input`, since","Fragments":["`==`"]},{"Key":"since `==`","Fragments":["is"]},{"Key":"`==` is","Fragments":["allowed","(i.e."]},{"Key":"is allowed","Fragments":["in","in","in","to"]},{"Key":"allowed in","Fragments":["pattern","pattern","guards,","pattern","guards."]},{"Key":"matching. This","Fragments":["would","would"]},{"Key":"more consistent","Fragments":["with","with","level","internal","and","with"]},{"Key":"consistent with","Fragments":["`interpret`,","interpret,","the"]},{"Key":"with `interpret`,","Fragments":["which"]},{"Key":"`interpret`, which","Fragments":["cannot"]},{"Key":"which cannot","Fragments":["be","be"]},{"Key":"cannot be","Fragments":["implemented","implemented","directly","used"]},{"Key":"implemented with","Fragments":["a","a","pattern","multiple"]},{"Key":"case input,","Fragments":["since"]},{"Key":"input, since","Fragments":["=="]},{"Key":"since ==","Fragments":["is"]},{"Key":"== is","Fragments":["allowed"]},{"Key":"with interpret,","Fragments":["which"]},{"Key":"interpret, which","Fragments":["cannot"]},{"Key":"Also, posted","Fragments":["this"]},{"Key":"posted this","Fragments":["in"]},{"Key":"the wrong","Fragments":["place.","thing","function","place","behavior","approach.","link,","part.","approach."]},{"Key":"You don't","Fragments":["need","have","use","need","use","actually","have"]},{"Key":"have another","Fragments":["method","idea","look","go"]},{"Key":"another method","Fragments":["to","on"]},{"Key":"for blank.","Fragments":["You"]},{"Key":"blank. You","Fragments":["can"]},{"Key":"can default","Fragments":["the"]},{"Key":"default the","Fragments":["cond"]},{"Key":"cond to","Fragments":["return"]},{"Key":"return your","Fragments":["answer."]},{"Key":" Nice.","Fragments":["Have","I","I","I","There's","Looks","I"]},{"Key":"Nice. Have","Fragments":["you"]},{"Key":"considered Regex#scan","Fragments":["and"]},{"Key":"Regex#scan and","Fragments":["using"]},{"Key":"and using","Fragments":["\\w","pattern","short","{\u00261,","the","a","`|\u003e`?","cast","`translate(number,","byte_size/1"]},{"Key":"using \\w","Fragments":["in"]},{"Key":"regex as","Fragments":["a"]},{"Key":"a potential","Fragments":["means","divisor"]},{"Key":"potential means","Fragments":["of"]},{"Key":"means of","Fragments":["simplifying"]},{"Key":"of simplifying","Fragments":["things"]},{"Key":"simplifying things","Fragments":["(doing"]},{"Key":"things (doing","Fragments":["away"]},{"Key":"(doing away","Fragments":["with"]},{"Key":"for #prepare_entry","Fragments":["for"]},{"Key":"#prepare_entry for","Fragments":["one)?"]},{"Key":"Great! Only","Fragments":["thing"]},{"Key":"see is","Fragments":["a","the","that","`String.strip(msg)","append","that"]},{"Key":"a formatting","Fragments":["issue","error."]},{"Key":"formatting issue","Fragments":["where"]},{"Key":"issue where","Fragments":["lines"]},{"Key":"where lines","Fragments":["6"]},{"Key":"lines 6","Fragments":["and"]},{"Key":"6 and","Fragments":["7"]},{"Key":"and 7","Fragments":["are"]},{"Key":"7 are","Fragments":["indented"]},{"Key":"are indented","Fragments":["oddly."]},{"Key":"Yup still","Fragments":["here,"]},{"Key":"still here,","Fragments":["just"]},{"Key":"here, just","Fragments":["on"]},{"Key":"just on","Fragments":["vacation."]},{"Key":"on vacation.","Fragments":["Sorry!"]},{"Key":" Expounded","Fragments":["a"]},{"Key":"Expounded a","Fragments":["bunch"]},{"Key":"bunch in","Fragments":["the"]},{"Key":"the comments,","Fragments":["there.","@marjolaine"]},{"Key":"comments, there.","Fragments":["Didn't"]},{"Key":"there. Didn't","Fragments":["realize"]},{"Key":"Didn't realize","Fragments":["there"]},{"Key":"realize there","Fragments":["was","was"]},{"Key":"there was","Fragments":["going","a","no","no","a","a","a","a","a","a","a","an","an","some","another","a","a","a","to","a","an","a"]},{"Key":"a box","Fragments":["here."]},{"Key":"have written","Fragments":["about","to"]},{"Key":"written about","Fragments":["the"]},{"Key":"different nitpick","Fragments":["and"]},{"Key":"nitpick and","Fragments":["came"]},{"Key":"and came","Fragments":["to","up"]},{"Key":"came to","Fragments":["the","the","the"]},{"Key":"the conclusion","Fragments":["that"]},{"Key":"conclusion that","Fragments":["I'd"]},{"Key":"that I'd","Fragments":["rather","need"]},{"Key":"rather go","Fragments":["with"]},{"Key":"with cond","Fragments":["than"]},{"Key":"cond than","Fragments":["pattern"]},{"Key":"than pattern","Fragments":["matching."]},{"Key":"matching. Any","Fragments":["takes"]},{"Key":"Any takes","Fragments":["on"]},{"Key":"takes on","Fragments":["how"]},{"Key":"this could","Fragments":["be"]},{"Key":"be improved","Fragments":["would","much","to","on","using"]},{"Key":"improved would","Fragments":["be"]},{"Key":" Having","Fragments":["tried","`next_phrase`","a","defined","slightly","said","thought"]},{"Key":"Having tried","Fragments":["out"]},{"Key":"tried out","Fragments":["the","your","that"]},{"Key":"match version","Fragments":["I"]},{"Key":"version I","Fragments":["feel","wrote:","could","changed","had"]},{"Key":"it becomes","Fragments":["a","apparent","available.","more","a"]},{"Key":"becomes a","Fragments":["bit","lot","performance","blank","performance"]},{"Key":"bit terse","Fragments":["and"]},{"Key":"terse and","Fragments":["I"]},{"Key":"have given","Fragments":["up"]},{"Key":"given up","Fragments":["on"]},{"Key":"up on","Fragments":["finding","the","this:","tail","regular","`\\w`","the"]},{"Key":"on finding","Fragments":["a","a","that"]},{"Key":"it look","Fragments":["any"]},{"Key":"look any","Fragments":["better."]},{"Key":"any better.","Fragments":["So"]},{"Key":"better. So","Fragments":["think"]},{"Key":"So think","Fragments":["that"]},{"Key":"that option","Fragments":["is"]},{"Key":"option is","Fragments":["out","not","to"]},{"Key":"is out","Fragments":["the"]},{"Key":"the window.","Fragments":[":)"]},{"Key":"out that","Fragments":["```message","the","`shouting?`","Dict.get/3","the","as","GenServer","i","it's","is","Elixir"]},{"Key":"that ```message","Fragments":["=="]},{"Key":"```message ==","Fragments":["String.upcase(message)```"]},{"Key":"== String.upcase(message)```","Fragments":["looks"]},{"Key":"String.upcase(message)``` looks","Fragments":["easier"]},{"Key":"looks easier","Fragments":["to"]},{"Key":"me than","Fragments":["a"]},{"Key":"For my","Fragments":["second","second"]},{"Key":"my second","Fragments":["suggestion,","implementation"]},{"Key":"second suggestion,","Fragments":["check"]},{"Key":"suggestion, check","Fragments":["out"]},{"Key":"out http://elixir-lang.org/getting_started/2.html","Fragments":["section"]},{"Key":"http://elixir-lang.org/getting_started/2.html section","Fragments":["2.6.2"]},{"Key":"And you're","Fragments":["right,"]},{"Key":"right, there","Fragments":["aren't"]},{"Key":"there aren't","Fragments":["(for","there"]},{"Key":"aren't (for","Fragments":["now)"]},{"Key":"(for now)","Fragments":["many"]},{"Key":"now) many","Fragments":["docs/tutorial"]},{"Key":"many docs/tutorial","Fragments":["beside"]},{"Key":"docs/tutorial beside","Fragments":["the"]},{"Key":"beside the","Fragments":["official"]},{"Key":"the official","Fragments":["ones.","tests"]},{"Key":"Very good","Fragments":["suggestion.","points,"]},{"Key":"good suggestion.","Fragments":["I"]},{"Key":"suggestion. I","Fragments":["was","wasn't"]},{"Key":"at that","Fragments":["myself","List.insert_at","time.","point.","way","and",":)"]},{"Key":"that myself","Fragments":["looking","-"]},{"Key":"myself looking","Fragments":["at","around"]},{"Key":"at that,","Fragments":["but"]},{"Key":"that, but","Fragments":["I","I","it","that","refactored","it","I","apparently","Elixir's","let's","for","still"]},{"Key":"figured I","Fragments":["would","had"]},{"Key":"would leave","Fragments":["it"]},{"Key":"to review","Fragments":["first","other","the"]},{"Key":"extract \"Enum.sort\"","Fragments":["into"]},{"Key":"\"Enum.sort\" into","Fragments":["a"]},{"Key":"a well-named","Fragments":["function","function"]},{"Key":"well-named function","Fragments":["(dare","for"]},{"Key":"function (dare","Fragments":["I"]},{"Key":"(dare I","Fragments":["suggest"]},{"Key":"I suggest","Fragments":["#alphabetize),","is","using","for"]},{"Key":"suggest #alphabetize),","Fragments":["and"]},{"Key":"#alphabetize), and","Fragments":["have"]},{"Key":"and have","Fragments":["that","private","the","it","meaningful","a","2","fun","gone","the","the","implemented","a","the","a"]},{"Key":"have that","Fragments":["make","terrible","problem.","test","performance","trade","test,","case.","unique","in"]},{"Key":"the #letters","Fragments":["call"]},{"Key":"#letters call","Fragments":["as"]},{"Key":"call as","Fragments":["well?"]},{"Key":"as well?","Fragments":["What"]},{"Key":"well? What","Fragments":["you"]},{"Key":"is clear","Fragments":["to","to"]},{"Key":"me, but","Fragments":["this","I","is","you","I"]},{"Key":"only question","Fragments":["I"]},{"Key":"question I","Fragments":["had.","guess"]},{"Key":"The markdown","Fragments":["didn't"]},{"Key":"markdown didn't","Fragments":["take"]},{"Key":"didn't take","Fragments":["my"]},{"Key":"take my","Fragments":["formatting..."]},{"Key":"my formatting...","Fragments":["insert"]},{"Key":"formatting... insert","Fragments":["a"]},{"Key":"insert a","Fragments":["carriage"]},{"Key":"a carriage","Fragments":["return"]},{"Key":"carriage return","Fragments":["before"]},{"Key":"return before","Fragments":["each"]},{"Key":"before each","Fragments":["\u003ccode\u003edef\u003c/code\u003e","`|\u003e`."]},{"Key":"each \u003ccode\u003edef\u003c/code\u003e","Fragments":[":P"]},{"Key":"explain how","Fragments":["String.upcase"]},{"Key":"how String.upcase","Fragments":["could"]},{"Key":"String.upcase could","Fragments":["simplify"]},{"Key":"simplify yelling?","Fragments":["Doesn't"]},{"Key":"yelling? Doesn't","Fragments":["upcase"]},{"Key":"Doesn't upcase","Fragments":["just"]},{"Key":"upcase just","Fragments":["return"]},{"Key":"just return","Fragments":["a","`:ok`"]},{"Key":"with all","Fragments":["uppercase","your","of","kinds","kinds","capital","other","kinds","the"]},{"Key":"all uppercase","Fragments":["characters?"]},{"Key":"uppercase characters?","Fragments":["Also,"]},{"Key":"characters? Also,","Fragments":["how"]},{"Key":"Also, how","Fragments":["would","would","are","likely","did"]},{"Key":"how would","Fragments":["I","this","it","you","you","I"]},{"Key":"I go","Fragments":["about","about","from"]},{"Key":"go about","Fragments":["implementing","doing","implementing"]},{"Key":"about implementing","Fragments":["your","`discard`","`discard`"]},{"Key":"implementing your","Fragments":["second"]},{"Key":"your second","Fragments":["suggestion?","argument","point,","nitpick,","version."]},{"Key":"second suggestion?","Fragments":["I'm"]},{"Key":"suggestion? I'm","Fragments":["not"]},{"Key":"familiar enough","Fragments":["with","with"]},{"Key":"enough with","Fragments":["the","the"]},{"Key":"language yet","Fragments":["and"]},{"Key":"yet and","Fragments":["haven't"]},{"Key":"a ton","Fragments":["of"]},{"Key":"ton of","Fragments":["great"]},{"Key":"of great","Fragments":["docs/tutorials...","API"]},{"Key":"def number_of_bottles(0),","Fragments":["do:"]},{"Key":"number_of_bottles(0), do:","Fragments":["\"no"]},{"Key":"do: \"no","Fragments":["more","more"]},{"Key":"\"no more","Fragments":["bottles\"","beers\"","bottles\""]},{"Key":"def number_of_bottles(1),","Fragments":["do:"]},{"Key":"number_of_bottles(1), do:","Fragments":["\"1"]},{"Key":"do: \"1","Fragments":["bottle\""]},{"Key":"def number_of_bottles(n),","Fragments":["do:"]},{"Key":"number_of_bottles(n), do:","Fragments":["\"#{n}"]},{"Key":"do: \"#{n}","Fragments":["bottles\""]},{"Key":"Just an","Fragments":["idea...","FYI,"]},{"Key":"an idea...","Fragments":["many"]},{"Key":"idea... many","Fragments":["other"]},{"Key":" @erick,","Fragments":["maybe"]},{"Key":"@erick, maybe","Fragments":["that's"]},{"Key":"maybe that's","Fragments":["out","it?","a"]},{"Key":"that's out","Fragments":["of"]},{"Key":"my league.","Fragments":["I"]},{"Key":"league. I","Fragments":["can't"]},{"Key":"can't imagine","Fragments":["how","that","how"]},{"Key":"imagine how","Fragments":["to","else"]},{"Key":"using String.upcase","Fragments":["to"]},{"Key":"String.upcase to","Fragments":["simplify"]},{"Key":"your yelling?","Fragments":["function."]},{"Key":"Also you","Fragments":["could","could","could","could","could","can","downcase","can","have"]},{"Key":"could simplfy","Fragments":["your"]},{"Key":"simplfy your","Fragments":["statement?"]},{"Key":"your statement?","Fragments":["function"]},{"Key":"statement? function","Fragments":["by"]},{"Key":"by putting","Fragments":["it"]},{"Key":"putting it","Fragments":["in"]},{"Key":"the lastest","Fragments":["condition"]},{"Key":"lastest condition","Fragments":["of"]},{"Key":"condition of","Fragments":["your","`Kernel.cond/1`,"]},{"Key":"your cond","Fragments":["which","clauses"]},{"Key":"cond which","Fragments":["could"]},{"Key":"which could","Fragments":["be","be","have","lead","be","be"]},{"Key":"be everything","Fragments":["else."]},{"Key":" ...for","Fragments":["loose"]},{"Key":"...for loose","Fragments":["definitions"]},{"Key":"loose definitions","Fragments":["of"]},{"Key":"definitions of","Fragments":["the","`@laurine`"]},{"Key":"words strophe,","Fragments":["antistrophe,"]},{"Key":"strophe, antistrophe,","Fragments":["and"]},{"Key":"antistrophe, and","Fragments":["epode."]},{"Key":"the PeepCode","Fragments":["episode","video"]},{"Key":"PeepCode episode","Fragments":["with"]},{"Key":"episode with","Fragments":["Jose"]},{"Key":"with Jose","Fragments":["Valim"]},{"Key":"Jose Valim","Fragments":["he"]},{"Key":"Valim he","Fragments":["puts"]},{"Key":"he puts","Fragments":["the"]},{"Key":"puts the","Fragments":["private"]},{"Key":"functions directly","Fragments":["below","under","(except","but","below"]},{"Key":"directly below","Fragments":["the","the"]},{"Key":"below the","Fragments":["public","`hey`","generic","`foo`"]},{"Key":"public ones,","Fragments":["since"]},{"Key":"ones, since","Fragments":["you"]},{"Key":"can visually","Fragments":["split"]},{"Key":"visually split","Fragments":["them"]},{"Key":"split them","Fragments":["up"]},{"Key":"them up","Fragments":["really"]},{"Key":"up really","Fragments":["nicely"]},{"Key":"really nicely","Fragments":["with","now."]},{"Key":"nicely with","Fragments":["the"]},{"Key":"the `@jamaal`","Fragments":["definitions."]},{"Key":"`@jamaal` definitions.","Fragments":["Up"]},{"Key":"definitions. Up","Fragments":["to"]},{"Key":"Up to","Fragments":["you"]},{"Key":"you though,","Fragments":["that's"]},{"Key":"though, that's","Fragments":["personal","why"]},{"Key":"that's personal","Fragments":["preference"]},{"Key":"personal preference","Fragments":["I","for","thing.","though."]},{"Key":"preference I","Fragments":["think."]},{"Key":"the doctest","Fragments":["work","to","seems","on","on","was","portion","work?","has"]},{"Key":"doctest work","Fragments":["by"]},{"Key":"work by","Fragments":["having","joining"]},{"Key":"your expected","Fragments":["value"]},{"Key":"expected value","Fragments":["be"]},{"Key":"value be","Fragments":["`HashDict.new"]},{"Key":"be `HashDict.new","Fragments":["...`,"]},{"Key":"`HashDict.new ...`,","Fragments":["the"]},{"Key":"...`, the","Fragments":["below"]},{"Key":"the below","Fragments":["works"]},{"Key":"below works","Fragments":["for"]},{"Key":"works for","Fragments":["me:","`?T`,","all","the","this","any","unicode","a","all"]},{"Key":" HashDict.new","Fragments":["[{'G',","(lc"]},{"Key":"HashDict.new [{'G',","Fragments":["1},"]},{"Key":"[{'G', 1},","Fragments":["{'A',"]},{"Key":"1}, {'A',","Fragments":["3},"]},{"Key":"{'A', 3},","Fragments":["{'T',"]},{"Key":"3}, {'T',","Fragments":["2},"]},{"Key":"{'T', 2},","Fragments":["{'C',"]},{"Key":"2}, {'C',","Fragments":["1}]"]},{"Key":"About the","Fragments":["private","`expected`","`question?`","`do_`,"]},{"Key":"private functions:","Fragments":["I","the"]},{"Key":"functions: I","Fragments":["have"]},{"Key":"have no","Fragments":["idea","problem","idea","idea","problem","idea","experience","idea","difference","idea","idea"]},{"Key":"in Elixir;","Fragments":["In"]},{"Key":"Elixir; In","Fragments":["all"]},{"Key":"In all","Fragments":["the"]},{"Key":"the languages","Fragments":["I","share"]},{"Key":"languages I","Fragments":["used"]},{"Key":"the idea","Fragments":["was","of","of","is","behind","was","of","was","of","of","of","of","of","but","to"]},{"Key":"public interface","Fragments":["first,","and","is","of","of"]},{"Key":"interface first,","Fragments":["hence"]},{"Key":"first, hence","Fragments":["my"]},{"Key":"hence my","Fragments":["setup."]},{"Key":"the `expected`","Fragments":["and","and"]},{"Key":"`expected` and","Fragments":["`actual`","`actual`"]},{"Key":"and `actual`","Fragments":["in","variables"]},{"Key":"`actual` in","Fragments":["the"]},{"Key":"the doctest:","Fragments":["this"]},{"Key":"doctest: this","Fragments":["is"]},{"Key":"is simply","Fragments":["because","lost."]},{"Key":"simply because","Fragments":["`HashDict`","it"]},{"Key":"because `HashDict`","Fragments":["output"]},{"Key":"`HashDict` output","Fragments":["does"]},{"Key":"output does","Fragments":["not"]},{"Key":"not work","Fragments":["with","for"]},{"Key":"work with","Fragments":["a","arbitrary","purely","Ruby.","character","ranges.","lists","your","any","and","the","any","any","all","unicode.","0.13.x","the"]},{"Key":"a doctest","Fragments":["AFAIK.","but"]},{"Key":" Haha,","Fragments":["i'm","done","nice","clever!"]},{"Key":"Haha, i'm","Fragments":["having"]},{"Key":"i'm having","Fragments":["a"]},{"Key":"a hard","Fragments":["time","time","time","time","time","time","time","time"]},{"Key":"hard time","Fragments":["consolidating","finding","explaining","explaining","coming","figuring","getting","understanding"]},{"Key":"time consolidating","Fragments":["the"]},{"Key":"consolidating the","Fragments":["texts"]},{"Key":"texts in","Fragments":["one"]},{"Key":"in one","Fragments":["method.","step;","Regex","place.","hit?","line.","or","place?","place","fell","glance\"","call?","fell","line","language","call","place","place,","place,"]},{"Key":"one method.","Fragments":["I","Maybe"]},{"Key":"don't see","Fragments":["a","how","any","any","anything","why","how","the","how","an","any","a","how","much"]},{"Key":"that that","Fragments":["results","function","identifier","would","would"]},{"Key":"that results","Fragments":["in","in"]},{"Key":"results in","Fragments":["tight","ever-so-slightly","pithier","them","a"]},{"Key":"in tight","Fragments":["code."]},{"Key":"tight code.","Fragments":["I"]},{"Key":"code. I","Fragments":["keep","don't","think","find","want","like"]},{"Key":"keep finding","Fragments":["solutions"]},{"Key":"finding solutions","Fragments":["that"]},{"Key":"solutions that","Fragments":["include","don't"]},{"Key":"that include","Fragments":["adding"]},{"Key":"include adding","Fragments":["ifs"]},{"Key":"adding ifs","Fragments":["and"]},{"Key":"ifs and","Fragments":["that"]},{"Key":"and that","Fragments":["break","is","I","I","Elixir's","you","equivalence","was","works","has","function","every","actually","would","just","the"]},{"Key":"that break","Fragments":["the"]},{"Key":"break the","Fragments":["text","code)."]},{"Key":"text in","Fragments":["unreadable"]},{"Key":"in unreadable","Fragments":["parts."]},{"Key":"There could","Fragments":["be,"]},{"Key":"could be,","Fragments":["you"]},{"Key":"be, you","Fragments":["could"]},{"Key":"could try","Fragments":["doing","to","to","to","this","scanning","to"]},{"Key":"try doing","Fragments":["some"]},{"Key":"matching stuff","Fragments":["but"]},{"Key":"stuff but","Fragments":["when"]},{"Key":"but when","Fragments":["I","I","it","you","you","I","I"]},{"Key":"have compared","Fragments":["them"]},{"Key":"compared them","Fragments":["side-by-side"]},{"Key":"them side-by-side","Fragments":["the"]},{"Key":"side-by-side the","Fragments":["cond-switch"]},{"Key":"the cond-switch","Fragments":["comes"]},{"Key":"cond-switch comes","Fragments":["out"]},{"Key":"comes out","Fragments":["being","of"]},{"Key":"out being","Fragments":["much"]},{"Key":"being much","Fragments":["more"]},{"Key":"readable. Feel","Fragments":["free"]},{"Key":"Feel free","Fragments":["to","to","to"]},{"Key":"to experiment","Fragments":["though,","with","with","with"]},{"Key":"experiment though,","Fragments":["that's"]},{"Key":"why were","Fragments":["here!"]},{"Key":"were here!","Fragments":[":)"]},{"Key":"Nice! You","Fragments":["can"]},{"Key":"in `Dict.update`","Fragments":["with"]},{"Key":"`Dict.update` with","Fragments":["Elixir's"]},{"Key":"with Elixir's","Fragments":["partial","pipe"]},{"Key":"application syntax,","Fragments":["something"]},{"Key":"syntax, something","Fragments":["like"]},{"Key":"like `\u00261","Fragments":["+"]},{"Key":"can leave","Fragments":["out"]},{"Key":"leave out","Fragments":["the","the"]},{"Key":"the `[]`","Fragments":["on"]},{"Key":"`[]` on","Fragments":["the"]},{"Key":"the creation","Fragments":["of","of","of"]},{"Key":"creation of","Fragments":["the","the","the"]},{"Key":"the `HashDict`,","Fragments":["since"]},{"Key":"`HashDict`, since","Fragments":["it"]},{"Key":"it defaults","Fragments":["to"]},{"Key":"defaults to","Fragments":["that,"]},{"Key":"to that,","Fragments":["and","but"]},{"Key":"that, and","Fragments":["do","was","also"]},{"Key":"think there's","Fragments":["much","any","a","really"]},{"Key":"there's much","Fragments":["benefit"]},{"Key":"to assigning","Fragments":["that"]},{"Key":"assigning that","Fragments":["to"]},{"Key":"variable before","Fragments":["passing","using"]},{"Key":"before passing","Fragments":["it","it","the"]},{"Key":"passing it","Fragments":["into","in","to"]},{"Key":"was actually","Fragments":["referring","surprised","a","already","the","thinking"]},{"Key":"actually referring","Fragments":["the"]},{"Key":"referring the","Fragments":["the"]},{"Key":"the `dict","Fragments":["="]},{"Key":"`dict =","Fragments":["HashDict`"]},{"Key":"= HashDict`","Fragments":["assignment,"]},{"Key":"HashDict` assignment,","Fragments":["I'm"]},{"Key":"assignment, I'm","Fragments":["not"]},{"Key":"other one,","Fragments":["I"]},{"Key":"one, I","Fragments":["think","spent"]},{"Key":"probably agree","Fragments":["with"]},{"Key":"you that","Fragments":["the","I","extra","no"]},{"Key":"variable helps","Fragments":["there."]},{"Key":"thought assigning","Fragments":["```prepare_entry()```"]},{"Key":"assigning ```prepare_entry()```","Fragments":["to"]},{"Key":"```prepare_entry()``` to","Fragments":["a"]},{"Key":"before using","Fragments":["it","reduce"]},{"Key":"in ```do_count()```","Fragments":["was"]},{"Key":"```do_count()``` was","Fragments":["easier"]},{"Key":"read but","Fragments":["now","ever"]},{"Key":"but now","Fragments":["that","I","of","that","I","I","I","I","that"]},{"Key":"you say","Fragments":["it,","it's","not"]},{"Key":"say it,","Fragments":["I'm"]},{"Key":"it, I'm","Fragments":["not","not","reminded"]},{"Key":"so sure.","Fragments":["I've","I've"]},{"Key":"sure. I've","Fragments":["submitted","read"]},{"Key":"While I","Fragments":["suppose","admire","really","like"]},{"Key":"suppose this","Fragments":["reads","comes"]},{"Key":"reads a","Fragments":["bit","little","little","lot","little"]},{"Key":"bit cleaner","Fragments":["then","if"]},{"Key":"then my","Fragments":["last"]},{"Key":"last submission,","Fragments":["it"]},{"Key":"submission, it","Fragments":["just"]},{"Key":"just feels","Fragments":["very","a","like"]},{"Key":"feels very","Fragments":["generic.","boilerplatey","appropriate"]},{"Key":"very generic.","Fragments":["The"]},{"Key":"generic. The","Fragments":["pattern"]},{"Key":"The pattern","Fragments":["matching"]},{"Key":"matching was","Fragments":["much"]},{"Key":"was much","Fragments":["more","easier"]},{"Key":"more fun,","Fragments":["but"]},{"Key":"fun, but","Fragments":["I"]},{"Key":"be easier","Fragments":["to","to","for","to","to","to","to","to","to","to","to"]},{"Key":"maintain and","Fragments":["explain"]},{"Key":"and explain","Fragments":["in","your"]},{"Key":"explain in","Fragments":["the"]},{"Key":"the long","Fragments":["run."]},{"Key":"Nice, the","Fragments":["`Regex.replace`"]},{"Key":"the `Regex.replace`","Fragments":["usage","and"]},{"Key":"`Regex.replace` usage","Fragments":["is"]},{"Key":"usage is","Fragments":["interesting,","very"]},{"Key":"is interesting,","Fragments":["I","but","I","but"]},{"Key":"interesting, I","Fragments":["didn't","didn't"]},{"Key":"doing this","Fragments":["that","you","input","with","for","test","in","(in"]},{"Key":"this that","Fragments":["way.","comes"]},{"Key":"that way.","Fragments":["Have","And"]},{"Key":"way. Have","Fragments":["you"]},{"Key":"seen `Dict.update`?","Fragments":["You"]},{"Key":"`Dict.update`? You","Fragments":["might"]},{"Key":"it helpful","Fragments":["for"]},{"Key":"helpful for","Fragments":["`add_or_increment_entry`."]},{"Key":"private functions.","Fragments":["I'm","You","This","I'd","I"]},{"Key":"functions. I'm","Fragments":["a"]},{"Key":"a fan","Fragments":["of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"putting private","Fragments":["functions"]},{"Key":"directly under","Fragments":["the"]},{"Key":"under the","Fragments":["function","impression","`StatementType`","hood,"]},{"Key":"that uses","Fragments":["them,","Enum.reduce","`name/arity`.","more","the","a","list_to_tuple","a","the"]},{"Key":"uses them,","Fragments":["so"]},{"Key":"them, so","Fragments":["I"]},{"Key":"be nice","Fragments":["if","and","if","yes."]},{"Key":"nice if","Fragments":["`update_count`","there"]},{"Key":"if `update_count`","Fragments":["and"]},{"Key":"`update_count` and","Fragments":["`new_count`"]},{"Key":"and `new_count`","Fragments":["were"]},{"Key":"`new_count` were","Fragments":["beneath"]},{"Key":"were beneath","Fragments":["`nucleotide_counts`"]},{"Key":"beneath `nucleotide_counts`","Fragments":["instead"]},{"Key":"`nucleotide_counts` instead","Fragments":["of"]},{"Key":"of `count`,","Fragments":["what","as"]},{"Key":"`count`, what","Fragments":["do"]},{"Key":"you set","Fragments":["up"]},{"Key":"set up","Fragments":["the","for","editor"]},{"Key":"`actual` variables","Fragments":["in"]},{"Key":"variables in","Fragments":["the","`anagrams?/2`,","the"]},{"Key":"first doctest,","Fragments":["as"]},{"Key":"doctest, as","Fragments":["opposed"]},{"Key":"just giving","Fragments":["the","you"]},{"Key":"giving the","Fragments":["value","collect_words"]},{"Key":"the value","Fragments":["and","it","of","of","of","through","it","can't","list.","just","is","of","of","they","of","of","to"]},{"Key":"Great catch","Fragments":["about"]},{"Key":"catch about","Fragments":["the"]},{"Key":"public or","Fragments":["private,"]},{"Key":"or private,","Fragments":["clearly"]},{"Key":"private, clearly","Fragments":["a"]},{"Key":"clearly a","Fragments":["noob"]},{"Key":"a noob","Fragments":["mistake","here,"]},{"Key":"noob mistake","Fragments":["on"]},{"Key":"mistake on","Fragments":["my"]},{"Key":"on my","Fragments":["part.","JS","laptop","git","side;","implementation","current","part,","own.","biggest","list","Erlang","toes.","non-tail-recursive","text"]},{"Key":"sure I","Fragments":["get","understand","have","tried","like","understand","quite","can","see","agree"]},{"Key":"by \"pipeline","Fragments":["operator"]},{"Key":"\"pipeline operator","Fragments":["for"]},{"Key":"operator for","Fragments":["question?\".","the","```silence?```","a","the"]},{"Key":"for question?\".","Fragments":["Care"]},{"Key":"question?\". Care","Fragments":["to"]},{"Key":"Care to","Fragments":["elaborate?"]},{"Key":"Elixir, you","Fragments":["can"]},{"Key":"can pattern","Fragments":["match","match","match","match"]},{"Key":" \u003ccode\u003edef","Fragments":["verse(0)\u003c/code\u003e","verse(1)\u003c/code\u003e","verse(2)\u003c/code\u003e","verse(n)\u003c/code\u003e","nucleotide_counts(strand)"]},{"Key":"it pattern","Fragments":["matches"]},{"Key":"matches in","Fragments":["order,"]},{"Key":"in order,","Fragments":["so"]},{"Key":"order, so","Fragments":["if"]},{"Key":"so if","Fragments":["you","you","you","you","you","your","your"]},{"Key":" Then","Fragments":["you","again,","I"]},{"Key":"Then you","Fragments":["don't","can","can","can","could"]},{"Key":"put a","Fragments":["guard","space","\"?\"","newline","small","question"]},{"Key":"That said...","Fragments":["there"]},{"Key":"said... there","Fragments":["is"]},{"Key":"of repetition","Fragments":["in","is","between"]},{"Key":"repetition in","Fragments":["lines","them."]},{"Key":"in lines","Fragments":["14,","3"]},{"Key":"lines 14,","Fragments":["18"]},{"Key":"14, 18","Fragments":["and"]},{"Key":"18 and","Fragments":["22,"]},{"Key":"and 22,","Fragments":["despite"]},{"Key":"22, despite","Fragments":["the"]},{"Key":"despite the","Fragments":["small","failing"]},{"Key":"the small","Fragments":["differences..."]},{"Key":"small differences...","Fragments":["any"]},{"Key":"differences... any","Fragments":["way"]},{"Key":"to factor","Fragments":["them","that"]},{"Key":"factor them","Fragments":["out?"]},{"Key":"Thanks, I've","Fragments":["made"]},{"Key":"that tweak","Fragments":["and"]},{"Key":"tweak and","Fragments":["resubmitted"]},{"Key":"and resubmitted","Fragments":["-"]},{"Key":"resubmitted -","Fragments":["I"]},{"Key":"- I","Fragments":["like","had","appreciate","particularly","saw","need","have","think","actually","can","think","hadn't","should","think","mean","actually","used","realized","think","also","recommend","am","digress)."]},{"Key":"little better","Fragments":[":)","on"]},{"Key":"Agreed, as","Fragments":["my"]},{"Key":"as my","Fragments":["comment","submission]","improvement","accumulators."]},{"Key":"comment states","Fragments":["it"]},{"Key":"states it","Fragments":["is"]},{"Key":"is only","Fragments":["there","used","expected","generated","I'm","a","in","sorted","possible","one","the"]},{"Key":"only there","Fragments":["for"]},{"Key":"there for","Fragments":["consistency.","me","a","consideration,","whatever"]},{"Key":"Will revert","Fragments":["and"]},{"Key":"revert and","Fragments":["go"]},{"Key":"and go","Fragments":["with"]},{"Key":"the version","Fragments":["before","of","with","without","using"]},{"Key":"version before","Fragments":["for"]},{"Key":"before for","Fragments":["everything"]},{"Key":"for everything","Fragments":["but","else"]},{"Key":"everything but","Fragments":["question?."]},{"Key":" Still","Fragments":["not","have","not","have"]},{"Key":"Still not","Fragments":["a","happy"]},{"Key":"of only","Fragments":["using","single","whitespace.","one","letters,"]},{"Key":"only using","Fragments":["pipe"]},{"Key":"using pipe","Fragments":["here"]},{"Key":"pipe here","Fragments":["and","for"]},{"Key":"and there","Fragments":["because","are","isn't","they","is","is","is","for","isn't"]},{"Key":"there because","Fragments":["it","I"]},{"Key":"it affects","Fragments":["readability."]},{"Key":"think using","Fragments":["```|\u003e```","`%r/\\w+/`","`Enum.filter`","a","a"]},{"Key":"using ```|\u003e```","Fragments":["may"]},{"Key":"```|\u003e``` may","Fragments":["be"]},{"Key":"be overkill","Fragments":["in"]},{"Key":"overkill in","Fragments":["the"]},{"Key":"the ```shouting?```","Fragments":["function"]},{"Key":"```shouting?``` function","Fragments":["since"]},{"Key":"function since","Fragments":["it"]},{"Key":"only has","Fragments":["one","one","to","a","a","only"]},{"Key":"has one","Fragments":["argument.","case"]},{"Key":"The pipeline","Fragments":["operator","operator","operator","operator","(`|\u003e`)"]},{"Key":"pipeline operator","Fragments":["```|\u003e```","for","does","(","and","and","reads","is","`sentence","`|\u0026gt;`.","`|\u0026gt;`?","only","for","`|\u0026gt;`,","which","you",";)","`|\u003e`.","would","(````|\u003e````)","was","(````|\u003e````).","is","in","and"]},{"Key":"operator ```|\u003e```","Fragments":["introduces"]},{"Key":"```|\u003e``` introduces","Fragments":["the"]},{"Key":"introduces the","Fragments":["expression"]},{"Key":"the expression","Fragments":["on","with","--"]},{"Key":"expression on","Fragments":["the"]},{"Key":"the left","Fragments":["as","into","argument","argument","fold:","(the","argument","argument","fold:","(the","argument","argument"]},{"Key":"left as","Fragments":["the"]},{"Key":"function call","Fragments":["on","much","would","only","form).","and","indirection).","takes","itself","three","for","so"]},{"Key":"call on","Fragments":["the","not"]},{"Key":"right so","Fragments":["you"]},{"Key":"could write","Fragments":["something","that","this","this","that","`[function.(x)]","`silent?`","yelling","function","the"]},{"Key":"write something","Fragments":["like","full","like","like"]},{"Key":"like ```sentence","Fragments":["|\u003e"]},{"Key":"```sentence |\u003e","Fragments":["String.ends_with?"]},{"Key":"|\u003e String.ends_with?","Fragments":["\"?\"```."]},{"Key":"String.ends_with? \"?\"```.","Fragments":["I"]},{"Key":"\"?\"```. I","Fragments":["think"]},{"Key":"readability with","Fragments":["```String.ends_with```."]},{"Key":"Oh, also,","Fragments":["I"]},{"Key":"also, I","Fragments":["don't"]},{"Key":"there's any","Fragments":["performance","of"]},{"Key":"any performance","Fragments":["increase","improvement"]},{"Key":"performance increase","Fragments":["for"]},{"Key":"increase for","Fragments":["using"]},{"Key":"for using","Fragments":["HashDict.update...they","`is_reticent?`","parentheses","the"]},{"Key":"using HashDict.update...they","Fragments":["all"]},{"Key":"HashDict.update...they all","Fragments":["compile"]},{"Key":"all compile","Fragments":["down"]},{"Key":"compile down","Fragments":["to"]},{"Key":"same VM","Fragments":["call."]},{"Key":"VM call.","Fragments":["Either"]},{"Key":"call. Either","Fragments":["one"]},{"Key":"Either one","Fragments":["would"]},{"Key":"one would","Fragments":["be","match"]},{"Key":"have all","Fragments":["the","of"]},{"Key":"condition function","Fragments":["be"]},{"Key":"function be","Fragments":["public?","used"]},{"Key":"the ```question?```","Fragments":["I"]},{"Key":"```question?``` I","Fragments":["think"]},{"Key":"your input","Fragments":["and"]},{"Key":"do agree","Fragments":["with","with","that","that"]},{"Key":"your points.","Fragments":["However","Thanks!"]},{"Key":"points. However","Fragments":["there"]},{"Key":"However there","Fragments":["must"]},{"Key":"this functionaly","Fragments":["instead"]},{"Key":"functionaly instead","Fragments":["of"]},{"Key":"a cond-switch.","Fragments":[":)"]},{"Key":"only nitpick","Fragments":["would","I"]},{"Key":"be adding","Fragments":["a","a"]},{"Key":"mark to","Fragments":["the","the","indicate"]},{"Key":"the is_match","Fragments":["method"]},{"Key":"is_match method","Fragments":["and"]},{"Key":"and maaaybe","Fragments":["renaming"]},{"Key":"maaaybe renaming","Fragments":["it"]},{"Key":"to all_letters_match?","Fragments":["or"]},{"Key":"all_letters_match? or","Fragments":["something"]},{"Key":"something less","Fragments":["general"]},{"Key":"less general","Fragments":["than"]},{"Key":"general than","Fragments":["\"match\"."]},{"Key":"And yes,","Fragments":["in","as"]},{"Key":"yes, in","Fragments":["trying"]},{"Key":"in trying","Fragments":["to"]},{"Key":"write the","Fragments":["code,","same","```sort_word```","chain","test","code","explicit","`count`","`acc_fun`","filter","regex"]},{"Key":"code, I","Fragments":["wasn't","thought","find","had","have"]},{"Key":"wasn't thinking","Fragments":["about"]},{"Key":"about good","Fragments":["names,"]},{"Key":"good names,","Fragments":["which"]},{"Key":"names, which","Fragments":["I"]},{"Key":"I *do*","Fragments":["think"]},{"Key":"*do* think","Fragments":["about"]},{"Key":"about a","Fragments":["lot","string","better","string","couple"]},{"Key":"lot normally.","Fragments":["Thanks"]},{"Key":"normally. Thanks","Fragments":["for"]},{"Key":"I `do_like_it_better`","Fragments":[";)"]},{"Key":"No problem!","Fragments":["For"]},{"Key":"problem! For","Fragments":["starters,"]},{"Key":"For starters,","Fragments":["HashDict"]},{"Key":"starters, HashDict","Fragments":["implements"]},{"Key":"Dict API...if","Fragments":["you"]},{"Key":"API...if you","Fragments":["check"]},{"Key":"you check","Fragments":["that","for","the"]},{"Key":"check that","Fragments":["documentation,","the","there","nb","the","out"]},{"Key":"that documentation,","Fragments":["you"]},{"Key":"documentation, you","Fragments":["may"]},{"Key":"find some","Fragments":["help"]},{"Key":"some help","Fragments":["via","to","getting"]},{"Key":"help via","Fragments":["Dict.update."]},{"Key":"using piping","Fragments":["in"]},{"Key":"piping in","Fragments":["count(),","count.","count(),"]},{"Key":"in count(),","Fragments":["similar","rather","nice!"]},{"Key":"count(), similar","Fragments":["to"]},{"Key":"to how","Fragments":["you've","UTF-8","it","lists","lists"]},{"Key":"you've done","Fragments":["it"]},{"Key":"done it","Fragments":["in","with","just","in"]},{"Key":"the do_*","Fragments":["functions?"]},{"Key":"Ah cool,","Fragments":["thanks!"]},{"Key":"really neat,","Fragments":["I"]},{"Key":"neat, I","Fragments":["prefer"]},{"Key":"prefer `String.scan(%r/\\w+/)","Fragments":["|\u0026gt;"]},{"Key":"`String.scan(%r/\\w+/) |\u0026gt;","Fragments":["List.flatten`"]},{"Key":"|\u0026gt; List.flatten`","Fragments":["but"]},{"Key":"List.flatten` but","Fragments":["I"]},{"Key":"suppose it","Fragments":["might","is"]},{"Key":"taste (I'd","Fragments":["rather"]},{"Key":"(I'd rather","Fragments":["transform"]},{"Key":"rather transform","Fragments":["structures"]},{"Key":"transform structures","Fragments":["than"]},{"Key":"structures than","Fragments":["cleaning","captureing"]},{"Key":"than cleaning","Fragments":["up"]},{"Key":"cleaning up","Fragments":["values","and","`append`."]},{"Key":"up values","Fragments":["for"]},{"Key":"great idea,","Fragments":["thanks!","though."]},{"Key":"idea, thanks!","Fragments":[":)"]},{"Key":"The Elixir","Fragments":["convention","exercises","docs","system","track"]},{"Key":"Elixir convention","Fragments":["seems","for"]},{"Key":"convention seems","Fragments":["to"]},{"Key":"be `?`,","Fragments":["I"]},{"Key":"`?`, I","Fragments":["think"]},{"Key":"the `is_`","Fragments":["prefix","naming,","prefix","prefix","prefix"]},{"Key":"`is_` prefix","Fragments":["is","in","is","is","seeing"]},{"Key":"only used","Fragments":["by","in","once.","two","in"]},{"Key":"used by","Fragments":["Erlang","other"]},{"Key":"by Erlang","Fragments":["functions."]},{"Key":" is_something","Fragments":["looks"]},{"Key":"is_something looks","Fragments":["to"]},{"Key":"looks to","Fragments":["be","me"]},{"Key":"convention based","Fragments":["on"]},{"Key":"Yeah, since","Fragments":["we"]},{"Key":"we had","Fragments":["it"]},{"Key":"had it","Fragments":["in","in"]},{"Key":"tests when","Fragments":["you"]},{"Key":"you wrote","Fragments":["it,"]},{"Key":"wrote it,","Fragments":["that"]},{"Key":"it, that","Fragments":["makes","kept"]},{"Key":"understand correctly,","Fragments":["though,"]},{"Key":"correctly, though,","Fragments":["having"]},{"Key":"though, having","Fragments":["the"]},{"Key":"same code","Fragments":["handle"]},{"Key":"code handle","Fragments":["both","variations"]},{"Key":"both nils","Fragments":["and"]},{"Key":"nils and","Fragments":["strings"]},{"Key":"and strings","Fragments":["are","is,"]},{"Key":"are _not_","Fragments":["a"]},{"Key":"_not_ a","Fragments":["good"]},{"Key":"how expressive","Fragments":["this"]},{"Key":"expressive this","Fragments":["is."]},{"Key":"That's pretty","Fragments":["tight!","neat.","cool.","powerful..."]},{"Key":" Seems","Fragments":["a","great.","a","that","to","there's"]},{"Key":"Seems a","Fragments":["little","little","shame"]},{"Key":"little weird","Fragments":["to","on"]},{"Key":"weird to","Fragments":["use","me.","me.","me","me,"]},{"Key":"guard to","Fragments":["power"]},{"Key":"to power","Fragments":["`is_empty?`.","`reverse/1`","the"]},{"Key":" Nil","Fragments":["checking"]},{"Key":"Nil checking","Fragments":["doesn't"]},{"Key":"checking doesn't","Fragments":["hurt"]},{"Key":"doesn't hurt","Fragments":["though,"]},{"Key":"hurt though,","Fragments":["correct?"]},{"Key":"though, correct?","Fragments":["I"]},{"Key":"correct? I","Fragments":["like"]},{"Key":"`is_` naming,","Fragments":["and"]},{"Key":"naming, and","Fragments":["I'm"]},{"Key":"I'm happy","Fragments":["with","with","with","with","to","to","to"]},{"Key":"one. Can","Fragments":["I"]},{"Key":"Can I","Fragments":["move","tell","convert"]},{"Key":"I move","Fragments":["on?","`HashDict.update(\u0026amp;2,"]},{"Key":" Sounds","Fragments":["good","right"]},{"Key":"Sounds good","Fragments":["-"]},{"Key":"good -","Fragments":["Elixir","much"]},{"Key":"- Elixir","Fragments":["is"]},{"Key":"is *really*","Fragments":["new"]},{"Key":"*really* new","Fragments":["to"]},{"Key":"me so","Fragments":["even","much."]},{"Key":"so even","Fragments":["the"]},{"Key":"even the","Fragments":["minor","more"]},{"Key":"the minor","Fragments":["nits"]},{"Key":"minor nits","Fragments":["are"]},{"Key":"nits are","Fragments":["really"]},{"Key":"are really","Fragments":["valuable!","just","a","just","not","hard"]},{"Key":"Nice tips,","Fragments":["thanks!"]},{"Key":"the first,","Fragments":["doesn't"]},{"Key":"first, doesn't","Fragments":["really"]},{"Key":"doesn't really","Fragments":["make","have","belong","have","seem","want","follow","have","need","teach","look","translate"]},{"Key":"really make","Fragments":["a","sense.","it"]},{"Key":"a difference,","Fragments":["and","but"]},{"Key":"difference, and","Fragments":["your"]},{"Key":"and your","Fragments":["way","solution","submissions","other","teenager","pattern"]},{"Key":"your way","Fragments":["is","to","better","faster?"]},{"Key":"way is","Fragments":["one","good","to","to","mostly"]},{"Key":"is one","Fragments":["less","exercise","of","of","related","more","way","minor","less","style","of"]},{"Key":"one less","Fragments":["method","line","`reverse`."]},{"Key":"less method","Fragments":["call."]},{"Key":" Reimplemented","Fragments":["using"]},{"Key":"Reimplemented using","Fragments":["your"]},{"Key":"using your","Fragments":["nitpicks","module"]},{"Key":"your nitpicks","Fragments":["and"]},{"Key":"nitpicks and","Fragments":["resubmitted."]},{"Key":"pointing out","Fragments":["the"]},{"Key":"the `|\u0026gt;`","Fragments":["_(pipeline)_","operator.","operator","to"]},{"Key":"`|\u0026gt;` _(pipeline)_","Fragments":["operator."]},{"Key":"_(pipeline)_ operator.","Fragments":["That"]},{"Key":"operator. That","Fragments":["is","is"]},{"Key":"a game","Fragments":["changer.","changer."]},{"Key":"Another suggestion","Fragments":["is","is"]},{"Key":"use String.ends_with?","Fragments":["instead","instead"]},{"Key":"String.ends_with? instead","Fragments":["of","of"]},{"Key":"of String.last","Fragments":["and"]},{"Key":"String.last and","Fragments":["a"]},{"Key":"a comparison.","Fragments":["Doesn't"]},{"Key":"comparison. Doesn't","Fragments":["make"]},{"Key":"Doesn't make","Fragments":["much"]},{"Key":"much of","Fragments":["a","the","a","Java,","those","the","a","an","the","this"]},{"Key":"a difference","Fragments":["either","would","from","between"]},{"Key":"difference either","Fragments":["way."]},{"Key":"Thanks, that's","Fragments":["useful."]},{"Key":"that's useful.","Fragments":["The"]},{"Key":"useful. The","Fragments":["pipeline"]},{"Key":"operator does","Fragments":["make"]},{"Key":"this easier","Fragments":["to","to","on"]},{"Key":" Don't","Fragments":["forget","get"]},{"Key":"Don't forget","Fragments":["that"]},{"Key":"forget that","Fragments":["Elixir"]},{"Key":"great at","Fragments":["pattern"]},{"Key":"at pattern","Fragments":["matching."]},{"Key":"matching. You","Fragments":["could"]},{"Key":"could turn","Fragments":["is_nothing","nucleotide_counts"]},{"Key":"turn is_nothing","Fragments":["into"]},{"Key":"is_nothing into","Fragments":["two"]},{"Key":"into two","Fragments":["definitions","separate"]},{"Key":"two definitions","Fragments":["for","I"]},{"Key":"same function","Fragments":["-","are","with","(grade)","the","the","the","the","the","the","call","is","the","the"]},{"Key":"function -","Fragments":["one"]},{"Key":"- one","Fragments":["that"]},{"Key":"one that","Fragments":["handles","I","uses","actually","only"]},{"Key":"that handles","Fragments":["nil","everything"]},{"Key":"and another","Fragments":["that","for","that"]},{"Key":"another that","Fragments":["handles","would"]},{"Key":"handles everything","Fragments":["else."]},{"Key":"version. We","Fragments":["can"]},{"Key":"We can","Fragments":["see"]},{"Key":"now how","Fragments":["`match`","I"]},{"Key":"how `match`","Fragments":["looks"]},{"Key":"`match` looks","Fragments":["like"]},{"Key":"like if","Fragments":["I"]},{"Key":"I rearrange","Fragments":["it.","things"]},{"Key":"use Regex.scan","Fragments":["to","and"]},{"Key":"Regex.scan to","Fragments":["split"]},{"Key":"to split","Fragments":["the","up","out","and","a","a","the","the","the","the"]},{"Key":"and strip","Fragments":["punctuation","invalid"]},{"Key":"strip punctuation","Fragments":["in"]},{"Key":"punctuation in","Fragments":["one"]},{"Key":"one step;","Fragments":["that"]},{"Key":"step; that","Fragments":["seems"]},{"Key":"that seems","Fragments":["like","like","a","like","broken"]},{"Key":"good change.","Fragments":["I"]},{"Key":"change. I","Fragments":["can't"]},{"Key":"can't see","Fragments":["how","any","how"]},{"Key":"avoid downcasing,","Fragments":["though"]},{"Key":"Great! Thanks","Fragments":["for"]},{"Key":"I finally","Fragments":["found","decided","think","went","managed"]},{"Key":"finally found","Fragments":["this","it,"]},{"Key":"found this","Fragments":["shorcut:","to"]},{"Key":"this shorcut:","Fragments":["`%r{[[:alnum:]]+}`"]},{"Key":"shorcut: `%r{[[:alnum:]]+}`","Fragments":["thanks"]},{"Key":"`%r{[[:alnum:]]+}` thanks","Fragments":["for"]},{"Key":" _(","Fragments":["My"]},{"Key":"_( My","Fragments":["suggestion"]},{"Key":"My suggestion","Fragments":["of","is"]},{"Key":"suggestion of","Fragments":["`Regex.run`","using","Dict.update.","piping","sorting"]},{"Key":"of `Regex.run`","Fragments":["was"]},{"Key":"`Regex.run` was","Fragments":["wrong"]},{"Key":"was wrong","Fragments":[")_","to","(was"]},{"Key":"Good idea,","Fragments":["thanks","I"]},{"Key":"idea, thanks","Fragments":[":)"]},{"Key":"I'd move","Fragments":["those","the","it"]},{"Key":"move those","Fragments":["private"]},{"Key":"those private","Fragments":["methods","functions","functions","functions","methods,"]},{"Key":"methods to","Fragments":["bottom","reveal","avoid","encapsulate","be","be","improve","abbreviate","a","do"]},{"Key":"to bottom","Fragments":["and"]},{"Key":"bottom and","Fragments":["leave","I"]},{"Key":"and leave","Fragments":["the"]},{"Key":"leave the","Fragments":["hey"]},{"Key":"hey method","Fragments":["on","as"]},{"Key":"I'm having","Fragments":["trouble","trouble","to","a","trouble","a"]},{"Key":"having trouble","Fragments":["seeing","working","with"]},{"Key":"trouble seeing","Fragments":["how"]},{"Key":"seeing how","Fragments":["`run`","it","I"]},{"Key":"how `run`","Fragments":["works"]},{"Key":"`run` works","Fragments":["in"]},{"Key":"works in","Fragments":["this","guards","the","this"]},{"Key":"It's [here](http://elixir-lang.org/docs/stable/),","Fragments":["the"]},{"Key":"[here](http://elixir-lang.org/docs/stable/), the","Fragments":["fifth"]},{"Key":"the fifth","Fragments":["code"]},{"Key":"fifth code","Fragments":["block."]},{"Key":"this approach!","Fragments":["Very"]},{"Key":"approach! Very","Fragments":["organized."]},{"Key":"Thanks, great","Fragments":["hints!"]},{"Key":"great hints!","Fragments":["Updated"]},{"Key":"hints! Updated","Fragments":["the"]},{"Key":"Updated the","Fragments":["code.","code","solution"]},{"Key":"out Enum.reduce","Fragments":["and"]},{"Key":"Enum.reduce and","Fragments":["Dict.update","HashDict.update."]},{"Key":"and Dict.update","Fragments":["for","to"]},{"Key":"Dict.update for","Fragments":["some"]},{"Key":"some useful","Fragments":["stuff!"]},{"Key":"Ah, nice;","Fragments":["I"]},{"Key":"nice; I","Fragments":["didn't"]},{"Key":"about that.","Fragments":["I","I","Let","Thanks,"]},{"Key":"really disliked","Fragments":["lines"]},{"Key":"disliked lines","Fragments":["23-24."]},{"Key":"Ah much","Fragments":["simpler,"]},{"Key":"see it","Fragments":["now.","work",",","more"]},{"Key":"it now.","Fragments":["Thanks"]},{"Key":"do understand","Fragments":["your","the"]},{"Key":"your drive","Fragments":[":)"]},{"Key":"Haha, done","Fragments":["in"]},{"Key":"second version","Fragments":["already","of"]},{"Key":"version already","Fragments":[":)"]},{"Key":"Look through","Fragments":["[the"]},{"Key":"through [the","Fragments":["Enum](http://elixir-lang.org/docs/stable/Enum.html)"]},{"Key":"[the Enum](http://elixir-lang.org/docs/stable/Enum.html)","Fragments":["module,"]},{"Key":"Enum](http://elixir-lang.org/docs/stable/Enum.html) module,","Fragments":["there's"]},{"Key":"module, there's","Fragments":["normally"]},{"Key":"there's normally","Fragments":["a"]},{"Key":"normally a","Fragments":["method"]},{"Key":"in there","Fragments":["simplifies","as","too)","to"]},{"Key":"there simplifies","Fragments":["most"]},{"Key":"simplifies most","Fragments":["head/tail"]},{"Key":"most head/tail","Fragments":["recursions."]},{"Key":"Oh right,","Fragments":["of"]},{"Key":"right, of","Fragments":["course."]},{"Key":"of course.","Fragments":["I'm","Will"]},{"Key":"course. I'm","Fragments":["never"]},{"Key":"I'm never","Fragments":["sure"]},{"Key":"never sure","Fragments":["which"]},{"Key":"sure which","Fragments":["implementations","one","form","I","one","would"]},{"Key":"which implementations","Fragments":["of","it"]},{"Key":"of Regex","Fragments":["support","in"]},{"Key":"Regex support","Fragments":["`\\w`,"]},{"Key":"support `\\w`,","Fragments":["but"]},{"Key":"`\\w`, but","Fragments":["I"]},{"Key":"it! Thanks","Fragments":[":)"]},{"Key":"lot cleaner!","Fragments":["In"]},{"Key":"cleaner! In","Fragments":["what"]},{"Key":"In what","Fragments":["situation"]},{"Key":"what situation","Fragments":["are"]},{"Key":"situation are","Fragments":["`entries`"]},{"Key":"are `entries`","Fragments":["lists"]},{"Key":"`entries` lists","Fragments":["that"]},{"Key":"lists that","Fragments":["need","means"]},{"Key":"need coercion","Fragments":["to"]},{"Key":"coercion to","Fragments":["binaries?"]},{"Key":"good idea!","Fragments":["Haven't"]},{"Key":"idea! Haven't","Fragments":["played"]},{"Key":"Haven't played","Fragments":["with"]},{"Key":"played with","Fragments":["those","the","already.","map_join.","it"]},{"Key":"with those","Fragments":["yet.","changes.","integers."]},{"Key":"Sorry, my","Fragments":["mistake","bad,"]},{"Key":"I wouldn't","Fragments":["use","say","have","put","underscore","have","make","have","say","fault","use","have","give","expect","worry"]},{"Key":"wouldn't use","Fragments":["`is_`","`Regex.replace`"]},{"Key":"use `is_`","Fragments":["in"]},{"Key":"`is_` in","Fragments":["a","a"]},{"Key":"a language","Fragments":["allowing","like","that","to","you've","that","like","like","I","that"]},{"Key":"language allowing","Fragments":["question"]},{"Key":"allowing question","Fragments":["marks"]},{"Key":"marks in","Fragments":["function"]},{"Key":"made some","Fragments":["changes"]},{"Key":"some changes","Fragments":["based","that"]},{"Key":"changes based","Fragments":["on"]},{"Key":"Looks great.","Fragments":[":)","I've","Elixir","A","My","Just","A","One","I","There",":)","You've"]},{"Key":"The one","Fragments":["thing","argument","fly"]},{"Key":"that bother","Fragments":["me"]},{"Key":"bother me","Fragments":["is"]},{"Key":"me is","Fragments":["the","counting","good","more","very","if"]},{"Key":"of predicate","Fragments":["method."]},{"Key":"predicate method.","Fragments":["I"]},{"Key":"would go","Fragments":["for","with"]},{"Key":"for `question?`","Fragments":["and"]},{"Key":"`shouting?` for","Fragments":["instance."]},{"Key":"You mean","Fragments":["by"]},{"Key":"doing `to_words`","Fragments":["and"]},{"Key":"`to_words` and","Fragments":["`cleanup`"]},{"Key":"and `cleanup`","Fragments":["in"]},{"Key":"`cleanup` in","Fragments":["one"]},{"Key":"one Regex","Fragments":["?"]},{"Key":" Goot","Fragments":["catch,"]},{"Key":"Goot catch,","Fragments":["fixed."]},{"Key":"am as","Fragments":["new"]},{"Key":"as new","Fragments":["to"]},{"Key":"Elixir as","Fragments":["you","a","there"]},{"Key":" Ignore","Fragments":["this.","this.","this"]},{"Key":"Ignore this.","Fragments":["This","This"]},{"Key":"this. This","Fragments":["was","was"]},{"Key":"accidental submission","Fragments":["mid-refactor.","mid-refactor."]},{"Key":" ^","Fragments":["those"]},{"Key":"^ those","Fragments":["are"]},{"Key":"those are","Fragments":["supposed","kind","completely"]},{"Key":"are supposed","Fragments":["to","to"]},{"Key":"be actual","Fragments":["ampersands,"]},{"Key":"actual ampersands,","Fragments":["without"]},{"Key":"ampersands, without","Fragments":["the"]},{"Key":"was mostly","Fragments":["borrowing"]},{"Key":"mostly borrowing","Fragments":["from"]},{"Key":"borrowing from","Fragments":["my"]},{"Key":"my word","Fragments":["count","count:","count","list."]},{"Key":"word count","Fragments":["exercise.","exercise","values"]},{"Key":"count exercise.","Fragments":["I"]},{"Key":"exercise. I","Fragments":["think","find","seem"]},{"Key":"more conceptually","Fragments":["meaningful"]},{"Key":"conceptually meaningful","Fragments":["datastructure"]},{"Key":"meaningful datastructure","Fragments":["for"]},{"Key":"datastructure for","Fragments":["determining"]},{"Key":"for determining","Fragments":["whether","if","whether","yelled-ness."]},{"Key":"determining whether","Fragments":["or","or"]},{"Key":"not two","Fragments":["words","words"]},{"Key":"two words","Fragments":["are","are","are","are"]},{"Key":"are anagrams,","Fragments":["but"]},{"Key":"anagrams, but","Fragments":["probably"]},{"Key":"but probably","Fragments":["less","this"]},{"Key":"probably less","Fragments":["efficient.","efficient?"]},{"Key":"Ah, you're","Fragments":["right."]},{"Key":" Checkout","Fragments":["the"]},{"Key":"Checkout the","Fragments":["`String`"]},{"Key":"`String` docs","Fragments":["for"]},{"Key":"docs for","Fragments":["a","`Enum.count/2`:","Regex.scan","Code.eval_quoted","Enum.into/3","Map.update"]},{"Key":"your `is_question()`","Fragments":["method."]},{"Key":"How does","Fragments":["`empty?()`","that"]},{"Key":"does `empty?()`","Fragments":["handle"]},{"Key":"`empty?()` handle","Fragments":["a"]},{"Key":"handle a","Fragments":["whitespace-only","string","Range"]},{"Key":"a whitespace-only","Fragments":["string?"]},{"Key":"whitespace-only string?","Fragments":["E.g.,"]},{"Key":"string? E.g.,","Fragments":["\""]},{"Key":"E.g., \"","Fragments":["\""]},{"Key":"Trying out","Fragments":["importing","combining"]},{"Key":"out importing","Fragments":["Statement"]},{"Key":"importing Statement","Fragments":["here."]},{"Key":"Sorry ,","Fragments":["ignore","is"]},{"Key":", ignore","Fragments":["this,"]},{"Key":"ignore this,","Fragments":["was"]},{"Key":"this, was","Fragments":["peeking"]},{"Key":"was peeking","Fragments":["at"]},{"Key":"peeking at","Fragments":["the"]},{"Key":"some code","Fragments":["with"]},{"Key":" Functional","Fragments":["language"]},{"Key":"Functional language","Fragments":["paradigms"]},{"Key":"language paradigms","Fragments":["pay"]},{"Key":"paradigms pay","Fragments":["off."]},{"Key":"pay off.","Fragments":[";)"]},{"Key":"Thanks, I'm","Fragments":["new"]},{"Key":"I'm new","Fragments":["to","to","enough","to","to","to","to","to"]},{"Key":"it's awesome","Fragments":["to"]},{"Key":"awesome to","Fragments":["receive"]},{"Key":"to receive","Fragments":["your"]},{"Key":"receive your","Fragments":["feedback"]},{"Key":"your feedback","Fragments":[":-)","on"]},{"Key":"do `import","Fragments":[":functions,"]},{"Key":"`import :functions,","Fragments":["Statement`"]},{"Key":":functions, Statement`","Fragments":["you"]},{"Key":"Statement` you","Fragments":["can"]},{"Key":"can uses","Fragments":["those"]},{"Key":"uses those","Fragments":["functions"]},{"Key":"those functions","Fragments":["without","-","yet,"]},{"Key":"functions without","Fragments":["the"]},{"Key":"you marked","Fragments":["it"]},{"Key":"marked it","Fragments":["wrightling,"]},{"Key":"it wrightling,","Fragments":["thanks!"]},{"Key":"missed that,","Fragments":["thanks!"]},{"Key":"the cases","Fragments":["were","where","that","result"]},{"Key":"cases were","Fragments":["more"]},{"Key":"were more","Fragments":["complex","tests"]},{"Key":"complex or","Fragments":["the"]},{"Key":"results were","Fragments":["I"]},{"Key":"were I","Fragments":["would"]},{"Key":"say yes.","Fragments":["In"]},{"Key":"yes. In","Fragments":["this"]},{"Key":"case I","Fragments":["don't","gave","wouldn't","felt","suspect"]},{"Key":"Ah good","Fragments":["call"]},{"Key":" Agreed!","Fragments":["http://exercism.io/submissions/5202a10a75d94dd0c300015d"]},{"Key":"consider `String.ends_with?`","Fragments":["rather","in"]},{"Key":"`String.ends_with?` rather","Fragments":["than"]},{"Key":"think `String.codepoints`","Fragments":["would"]},{"Key":"`String.codepoints` would","Fragments":["be"]},{"Key":"than `binary_to_list`","Fragments":["here."]},{"Key":"Awesome! I'll","Fragments":["try"]},{"Key":"rewrite it","Fragments":["with","but","a","a","a","a","a","a","a"]},{"Key":"with List.foldl","Fragments":[":-)"]},{"Key":"love more","Fragments":["feedback"]},{"Key":"more feedback","Fragments":["if","on"]},{"Key":"feedback if","Fragments":["this"]},{"Key":"if this","Fragments":["is","were","is","code","is","is"]},{"Key":"not approval","Fragments":["worthy!"]},{"Key":"Thanks, @micaela!","Fragments":["I've"]},{"Key":"@micaela! I've","Fragments":["cleaned"]},{"Key":"I've cleaned","Fragments":["up"]},{"Key":"cleaned up","Fragments":["my","the","the","after","after","after","after","after","which","after","after"]},{"Key":"Thanks! I've","Fragments":["implemented"]},{"Key":"I've implemented","Fragments":["your"]},{"Key":"implemented your","Fragments":["suggestions."]},{"Key":"Awesome. I","Fragments":["missed"]},{"Key":"Good catch","Fragments":["with","with","on"]},{"Key":"catch with","Fragments":["the","`Dict.update`."]},{"Key":" Updated","Fragments":["as","to","based","the","per","based"]},{"Key":"Updated as","Fragments":["per"]},{"Key":"is looking","Fragments":["really","to","good.","good.","good.","very","pretty","pretty","good.","pretty"]},{"Key":"looking really","Fragments":["good."]},{"Key":"consider putting","Fragments":["the","the"]},{"Key":"putting the","Fragments":["private","pipelines","two","tests","tests","input","contents","`when`"]},{"Key":"methods after","Fragments":["the"]},{"Key":"after the","Fragments":["public","function","nitpick","latest","message","parenthesis","public","parameter","reduce,","entire","entire","ListOps","entire","entire","entire","code","entire","entire"]},{"Key":"Ok this","Fragments":["test","needs"]},{"Key":"this test","Fragments":["wasn't","with","I"]},{"Key":"test wasn't","Fragments":["present"]},{"Key":"wasn't present","Fragments":["when"]},{"Key":"present when","Fragments":["I"]},{"Key":"did the","Fragments":["exercise.","exercise","join","test","Ruby","site"]},{"Key":"I sound","Fragments":["too"]},{"Key":"sound too","Fragments":["negative,"]},{"Key":"too negative,","Fragments":["I"]},{"Key":"negative, I","Fragments":["have"]},{"Key":"to suppress","Fragments":["my"]},{"Key":"suppress my","Fragments":["eastern"]},{"Key":"my eastern","Fragments":["european"]},{"Key":"eastern european","Fragments":["way"]},{"Key":"european way","Fragments":["of"]},{"Key":"of communication","Fragments":[":)","is"]},{"Key":"Thanks! What","Fragments":["happens"]},{"Key":"What happens","Fragments":["next?","when","for","with","with","with","when","if","if"]},{"Key":"happens next?","Fragments":[":)"]},{"Key":"for feedback.","Fragments":["Waiting"]},{"Key":"feedback. Waiting","Fragments":["for"]},{"Key":"Waiting for","Fragments":["it","your","some"]},{"Key":"for it","Fragments":["to","to","though.","in","to","though)."]},{"Key":" What's","Fragments":["the","the","pretty","up","odd"]},{"Key":"What's the","Fragments":["point","point","idea"]},{"Key":"of `n_bottles`","Fragments":["in"]},{"Key":"`n_bottles` in","Fragments":["`command(0)`?"]},{"Key":"in `command(0)`?","Fragments":["`command(0)`"]},{"Key":"`command(0)`? `command(0)`","Fragments":["always"]},{"Key":"`command(0)` always","Fragments":["returns"]},{"Key":"always returns","Fragments":["the","the"]},{"Key":"returns the","Fragments":["same","same","character","string","way","match","correct"]},{"Key":"Really nice!","Fragments":["Love"]},{"Key":"nice! Love","Fragments":["`maintain_buzz`"]},{"Key":"Love `maintain_buzz`","Fragments":["as"]},{"Key":"`maintain_buzz` as","Fragments":["a"]},{"Key":"a heredoc","Fragments":["would"]},{"Key":"heredoc would","Fragments":["help"]},{"Key":"would help","Fragments":["make","at","making","readability?","but","here.","with","the"]},{"Key":"help make","Fragments":["`verse`","the"]},{"Key":"make `verse`","Fragments":["more"]},{"Key":"`verse` more","Fragments":["readable,"]},{"Key":"more readable,","Fragments":["what","but","but","but","but","but"]},{"Key":"readable, what","Fragments":["do"]},{"Key":"I added","Fragments":["pattern","unicode","a","function","some","two","a","docs"]},{"Key":"added pattern","Fragments":["matching"]},{"Key":"Is that","Fragments":["what","referring","considered","not"]},{"Key":"you were","Fragments":["suggesting?","alluding","simply","to","doing","doing","using","thinking","talking","dabbling"]},{"Key":"I notice","Fragments":["you're","you","is","when","that"]},{"Key":"notice you're","Fragments":["piping"]},{"Key":"you're piping","Fragments":["in"]},{"Key":"in count.","Fragments":["How","Thanks"]},{"Key":"count. How","Fragments":["do"]},{"Key":"How do","Fragments":["you","you","you","I","I"]},{"Key":"about doing","Fragments":["the","that","this?"]},{"Key":"trouble working","Fragments":["out"]},{"Key":"working out","Fragments":["how"]},{"Key":"use that","Fragments":["expr","syntax","bad","operator","doesn't","module","approach","instead.","to","would","with","number."]},{"Key":"that expr","Fragments":["special"]},{"Key":"expr special","Fragments":["form"]},{"Key":"special form","Fragments":["to"]},{"Key":"form to","Fragments":["tidy","make"]},{"Key":"to tidy","Fragments":["up"]},{"Key":"tidy up","Fragments":["my"]},{"Key":"my anonymous","Fragments":["functions"]},{"Key":"anonymous functions","Fragments":["-","are","syntax","you","correctly...","and","and","(especially","with","another.","using"]},{"Key":"functions -","Fragments":["can","they","or"]},{"Key":"- can","Fragments":["you","any"]},{"Key":"give an","Fragments":["example?","example"]},{"Key":" Following","Fragments":["up"]},{"Key":"Following up","Fragments":["from"]},{"Key":"a previous","Fragments":["nit,","revision,","iteration,","version"]},{"Key":"previous nit,","Fragments":["elixir"]},{"Key":"nit, elixir","Fragments":["provides"]},{"Key":"elixir provides","Fragments":["a"]},{"Key":"provides a","Fragments":["bit","good","neater","leap.exs"]},{"Key":"of syntactic","Fragments":["sugar"]},{"Key":"syntactic sugar","Fragments":["for","for","for","for"]},{"Key":"sugar for","Fragments":["single-expression","that.","`foo(do:","`cons(a,b)`"]},{"Key":"for single-expression","Fragments":["functions,"]},{"Key":"single-expression functions,","Fragments":["using"]},{"Key":"functions, using","Fragments":["the"]},{"Key":"the ampersand","Fragments":["character","outside","notation"]},{"Key":"ampersand character","Fragments":["and"]},{"Key":"character and","Fragments":["parameter","a","because"]},{"Key":"and parameter","Fragments":["position"]},{"Key":"parameter position","Fragments":["numbers."]},{"Key":"position numbers.","Fragments":["For"]},{"Key":" \u0026amp;1","Fragments":["*"]},{"Key":"\u0026amp;1 *","Fragments":["\u0026amp;2","2"]},{"Key":" is","Fragments":["expanded","much","the"]},{"Key":"is expanded","Fragments":["to"]},{"Key":"expanded to","Fragments":["the"]},{"Key":"the equivalent","Fragments":["of","function","of"]},{"Key":" fn(v1,","Fragments":["v2)"]},{"Key":"fn(v1, v2)","Fragments":["-\u0026gt;"]},{"Key":"v2) -\u0026gt;","Fragments":["v1"]},{"Key":"-\u0026gt; v1","Fragments":["*"]},{"Key":"v1 *","Fragments":["v2"]},{"Key":"* v2","Fragments":["end"]},{"Key":"Does that","Fragments":["help?","make","solve","make"]},{"Key":"Hi, thanks","Fragments":["for","for"]},{"Key":"pointing the","Fragments":["anonymous"]},{"Key":"the anonymous","Fragments":["function","functions","function","fn","functions","function's","function","function","function?","function","function","inc","function","function","function","function,","functions","function,","function","function","function","function"]},{"Key":"anonymous function","Fragments":["format","refer","syntax.","syntax","in","directly","and","you","shortcut","inside","too?","you're","in","inline.","to","in","syntax","in","(`fn","a","is","to","in","and","syntax","passed","you","to","inside","inside","to","as","short-hand","could","shorthand","args."]},{"Key":"function format","Fragments":["out!"]},{"Key":"format out!","Fragments":["I"]},{"Key":"out! I","Fragments":["noticed"]},{"Key":"noticed it","Fragments":["in"]},{"Key":"Elixir examples,","Fragments":["but"]},{"Key":"examples, but","Fragments":["I","not"]},{"Key":"just tried","Fragments":["it","it"]},{"Key":"tried it","Fragments":["here","without","out,","and","out","with","locally,","though","out...but"]},{"Key":" Enum.filter","Fragments":["list,","list,"]},{"Key":"Enum.filter list,","Fragments":["fn(candidate)","is_anagram?(word,"]},{"Key":"list, fn(candidate)","Fragments":["-\u0026gt;"]},{"Key":" is_anagram?(word,","Fragments":["candidate)"]},{"Key":" Turns","Fragments":["into"]},{"Key":"Turns into","Fragments":["this:"]},{"Key":"list, is_anagram?(word,","Fragments":["\u0026amp;1)"]},{"Key":"It's beautiful","Fragments":[":)"]},{"Key":"exercise I","Fragments":["wanted","don't","tried","was","got","called"]},{"Key":"use recursion","Fragments":["from","over","and"]},{"Key":"recursion from","Fragments":["the"]},{"Key":"the start.","Fragments":["So"]},{"Key":"start. So","Fragments":["I"]},{"Key":"the smallest","Fragments":["anagram","pieces"]},{"Key":"smallest anagram","Fragments":["(empty"]},{"Key":"anagram (empty","Fragments":["string)"]},{"Key":"(empty string)","Fragments":["and"]},{"Key":"string) and","Fragments":["started"]},{"Key":"and started","Fragments":["developing"]},{"Key":"started developing","Fragments":["from"]},{"Key":"developing from","Fragments":["there."]},{"Key":"how things","Fragments":["turned","would"]},{"Key":"things turned","Fragments":["out"]},{"Key":"out so","Fragments":["simple."]},{"Key":"In regards","Fragments":["to","of"]},{"Key":"regards to","Fragments":["`List.flatten/1`,","the","providing","pattern","the"]},{"Key":"to `List.flatten/1`,","Fragments":["I'm"]},{"Key":"`List.flatten/1`, I'm","Fragments":["more"]},{"Key":"in favor","Fragments":["of","of"]},{"Key":"favor of","Fragments":["optimizing","`String.strip`."]},{"Key":"of optimizing","Fragments":["for","this"]},{"Key":"optimizing for","Fragments":["comprehension."]},{"Key":"for comprehension.","Fragments":["I"]},{"Key":"comprehension. I","Fragments":["see"]},{"Key":"of `Regex.scan/2`","Fragments":["not"]},{"Key":"`Regex.scan/2` not","Fragments":["as"]},{"Key":"not as","Fragments":["a","DRY","much.","prevalent","familiar","character","hard"]},{"Key":"of individual","Fragments":["pieces"]},{"Key":"individual pieces","Fragments":["that"]},{"Key":"pieces that","Fragments":["need"]},{"Key":"be assembled,","Fragments":["but"]},{"Key":"assembled, but","Fragments":["rather"]},{"Key":"but rather","Fragments":["as","an","the","making","to"]},{"Key":"rather as","Fragments":["a"]},{"Key":"a unified","Fragments":["list"]},{"Key":"unified list","Fragments":["of"]},{"Key":"words which","Fragments":["just"]},{"Key":"which just","Fragments":["happens","returns"]},{"Key":"just happens","Fragments":["to"]},{"Key":"of lists.","Fragments":["In","So"]},{"Key":"lists. In","Fragments":["this","any"]},{"Key":"this context","Fragments":["I"]},{"Key":"context I","Fragments":["find"]},{"Key":"find `List.flatten/1`","Fragments":["more"]},{"Key":"`List.flatten/1` more","Fragments":["appropriate."]},{"Key":"that silence?/1","Fragments":["needs"]},{"Key":"silence?/1 needs","Fragments":["to"]},{"Key":"handle invalid","Fragments":["unicode,"]},{"Key":"invalid unicode,","Fragments":["and"]},{"Key":"unicode, and","Fragments":["it"]},{"Key":"to compare","Fragments":["the","the","it","with","letter","the","with","to","two","floats","the"]},{"Key":"compare the","Fragments":["stripped","length","results","binary","sorted","originals","stripped","stripped"]},{"Key":"the stripped","Fragments":["msg","string","string"]},{"Key":"stripped msg","Fragments":["to"]},{"Key":"msg to","Fragments":["an"]},{"Key":"string rather","Fragments":["than","than","than"]},{"Key":"than check","Fragments":["the","its"]},{"Key":"the size.","Fragments":["It"]},{"Key":"size. It","Fragments":["might"]},{"Key":"also be","Fragments":["nicer","clearer","implemented","implemented","written","written","written","an","identified"]},{"Key":"be nicer","Fragments":["if","looking"]},{"Key":"nicer if","Fragments":["parentheses"]},{"Key":"if parentheses","Fragments":["were"]},{"Key":"parentheses were","Fragments":["used"]},{"Key":"were used","Fragments":["(or","as"]},{"Key":"used (or","Fragments":["not)"]},{"Key":"(or not)","Fragments":["consistently."]},{"Key":"of value","Fragments":["in"]},{"Key":"value in","Fragments":["do_collect_downcased_words/1,","the","sing."]},{"Key":"in do_collect_downcased_words/1,","Fragments":["when"]},{"Key":"do_collect_downcased_words/1, when","Fragments":["you"]},{"Key":"just add","Fragments":["String.downcase","a","a"]},{"Key":"add String.downcase","Fragments":["to"]},{"Key":"String.downcase to","Fragments":["the"]},{"Key":"think List.flatten/1","Fragments":["is"]},{"Key":"List.flatten/1 is","Fragments":["the"]},{"Key":"best choice","Fragments":["for"]},{"Key":"choice for","Fragments":["do_collect_words/1,","a"]},{"Key":"for do_collect_words/1,","Fragments":["because"]},{"Key":"do_collect_words/1, because","Fragments":["the"]},{"Key":"because the","Fragments":["input","parameters","operations","book","Ruby","tests","code","function","documentation","input","only","fact","conditions","functions","intent","goal","base","last","3rd","function"]},{"Key":"the input","Fragments":["is","is","data","is","to","needs","at","to","string.","string.","string","into","once","list","4","isn't","doesn't","isn't","value.","in","for","ends","is","lists","order","in","list"]},{"Key":"only expected","Fragments":["to"]},{"Key":"expected to","Fragments":["be","by","a"]},{"Key":"be nested","Fragments":["one"]},{"Key":"nested one","Fragments":["level"]},{"Key":"one level","Fragments":["deep.","from"]},{"Key":"level deep.","Fragments":["List.concat/1"]},{"Key":"deep. List.concat/1","Fragments":["is"]},{"Key":"List.concat/1 is","Fragments":["more"]},{"Key":"appropriate given","Fragments":["the"]},{"Key":"given the","Fragments":["types","simple","rather","fact","list,"]},{"Key":"the types","Fragments":["involved.","involved"]},{"Key":"lot more","Fragments":["common","exposed","readable","sane","verbose.","memory","memory","memory","than","memory","memory","easily.","calm","memory","memory"]},{"Key":"the [pipeline","Fragments":["operator](http://elixir-lang.org/docs/master/Kernel.html#|\u0026gt;/2)"]},{"Key":"[pipeline operator](http://elixir-lang.org/docs/master/Kernel.html#|\u0026gt;/2)","Fragments":["`|\u0026gt;`,"]},{"Key":"operator](http://elixir-lang.org/docs/master/Kernel.html#|\u0026gt;/2) `|\u0026gt;`,","Fragments":["and"]},{"Key":"`|\u0026gt;`, and","Fragments":["to"]},{"Key":"and to","Fragments":["rely","let","debug.","bottles","`case`","use","look","write","generally","the"]},{"Key":"to rely","Fragments":["on"]},{"Key":"rely on","Fragments":["the","regex's","pattern"]},{"Key":"an expression","Fragments":["rather","and","in"]},{"Key":"expression rather","Fragments":["than"]},{"Key":"than explicitly","Fragments":["assigning","saying"]},{"Key":"explicitly assigning","Fragments":["it"]},{"Key":"assigning it","Fragments":["to"]},{"Key":"variable (you","Fragments":["do"]},{"Key":"(you do","Fragments":["the"]},{"Key":"the latter","Fragments":["in","in"]},{"Key":"latter in","Fragments":["count/1,","a"]},{"Key":"in count/1,","Fragments":["but"]},{"Key":"count/1, but","Fragments":["not"]},{"Key":"If you're","Fragments":["using","running","using","curious","feeling"]},{"Key":"you're using","Fragments":["Elixir","all","all","in","here,","the","the","`\\p`","pattern","a","a","`Enum.reverse`","list","elixir","a"]},{"Key":"using Elixir","Fragments":["0.10.1","so"]},{"Key":"Elixir 0.10.1","Fragments":["there's","there's"]},{"Key":"0.10.1 there's","Fragments":["a","a"]},{"Key":"neat [expr","Fragments":["special"]},{"Key":"[expr special","Fragments":["form](http://elixir-lang.org/docs/stable/Kernel.SpecialForms.html#\u0026amp;/1)"]},{"Key":"special form](http://elixir-lang.org/docs/stable/Kernel.SpecialForms.html#\u0026amp;/1)","Fragments":["`\u0026amp;/1`"]},{"Key":"form](http://elixir-lang.org/docs/stable/Kernel.SpecialForms.html#\u0026amp;/1) `\u0026amp;/1`","Fragments":["that"]},{"Key":"`\u0026amp;/1` that","Fragments":["you"]},{"Key":"use instead","Fragments":["of"]},{"Key":"of fn,","Fragments":["which"]},{"Key":"fn, which","Fragments":["is"]},{"Key":"What would","Fragments":["you","you","you","you","you","you","happen","I","you","you","you"]},{"Key":"you suggest","Fragments":["extracting?"]},{"Key":"suggest extracting?","Fragments":["How"]},{"Key":"extracting? How","Fragments":["would"]},{"Key":"How would","Fragments":["defp","you"]},{"Key":"would defp","Fragments":["be"]},{"Key":"defp be","Fragments":["more"]},{"Key":"the named","Fragments":["fn","functions.","function","function.","private","params"]},{"Key":"named fn","Fragments":["that's"]},{"Key":"fn that's","Fragments":["already"]},{"Key":"that's already","Fragments":["there?","a"]},{"Key":"- are","Fragments":["you"]},{"Key":"short form","Fragments":["for","so","funcations"]},{"Key":"form for","Fragments":["anonymous","a"]},{"Key":"for anonymous","Fragments":["functions?","functions.","functions","functions?","functions","inline"]},{"Key":"anonymous functions?","Fragments":["Seems","Using"]},{"Key":"functions? Seems","Fragments":["like"]},{"Key":"like use","Fragments":["of"]},{"Key":"of \u0026amp;1","Fragments":["in"]},{"Key":"\u0026amp;1 in","Fragments":["Anagram#match"]},{"Key":"in Anagram#match","Fragments":["might"]},{"Key":"Anagram#match might","Fragments":["add"]},{"Key":"might add","Fragments":["to","a","a"]},{"Key":"add to","Fragments":["the","the","the"]},{"Key":"the readability","Fragments":["and","and","of","of","of"]},{"Key":"and conciseness","Fragments":["of"]},{"Key":"conciseness of","Fragments":["the"]},{"Key":"the function.","Fragments":["I'm","If","All"]},{"Key":"function. I'm","Fragments":["not","using"]},{"Key":"sure I've","Fragments":["been","*quite*"]},{"Key":"been doing","Fragments":["Elixir","the","elixir"]},{"Key":"doing Elixir","Fragments":["long"]},{"Key":"Elixir long","Fragments":["enough"]},{"Key":"long enough","Fragments":["to"]},{"Key":"to claim","Fragments":["the"]},{"Key":"claim the","Fragments":["short"]},{"Key":"short version","Fragments":["is"]},{"Key":"is idiomatic,","Fragments":["but"]},{"Key":"idiomatic, but","Fragments":["it"]},{"Key":"your approach","Fragments":["to","has","is","is","to"]},{"Key":"to is_anagram?.","Fragments":["I"]},{"Key":"is_anagram?. I","Fragments":["used"]},{"Key":"used String.graphemes","Fragments":["and"]},{"Key":"String.graphemes and","Fragments":["Enum.sort"]},{"Key":"and Enum.sort","Fragments":["and"]},{"Key":"Enum.sort and","Fragments":["then"]},{"Key":"then a","Fragments":["list","`map`"]},{"Key":"list comparison","Fragments":["in","from"]},{"Key":"comparison in","Fragments":["mine,"]},{"Key":"in mine,","Fragments":["and"]},{"Key":"mine, and","Fragments":["that"]},{"Key":"is mostly","Fragments":["the","the","useful","used","useful","a"]},{"Key":"mostly the","Fragments":["approach","culprit."]},{"Key":"approach I've","Fragments":["seen,","done"]},{"Key":"I've seen,","Fragments":["so","snakecase"]},{"Key":"seen, so","Fragments":["I"]},{"Key":" Secondly,","Fragments":["your","and"]},{"Key":"Secondly, your","Fragments":["loop_through"]},{"Key":"your loop_through","Fragments":["implementations"]},{"Key":"loop_through implementations","Fragments":["are"]},{"Key":"implementations are","Fragments":["an"]},{"Key":"are an","Fragments":["instance","Erlang"]},{"Key":"common pattern...accumulating","Fragments":["a"]},{"Key":"pattern...accumulating a","Fragments":["list"]},{"Key":"of elements","Fragments":["(in"]},{"Key":"elements (in","Fragments":["this"]},{"Key":"case, words)","Fragments":["into"]},{"Key":"words) into","Fragments":["a"]},{"Key":"a whole","Fragments":["new","mess","new","new"]},{"Key":"whole new","Fragments":["single","way","entity"]},{"Key":"new single","Fragments":["object"]},{"Key":"single object","Fragments":["(in"]},{"Key":"object (in","Fragments":["this"]},{"Key":"case, a","Fragments":["HashDict)."]},{"Key":"Elixir has","Fragments":["some","a","string","a"]},{"Key":"has some","Fragments":["support","really","good"]},{"Key":"some support","Fragments":["for"]},{"Key":"support for","Fragments":["that","nice"]},{"Key":"that pattern","Fragments":["in","matching"]},{"Key":"pattern in","Fragments":["the","my","elixir."]},{"Key":"the Enum","Fragments":["module"]},{"Key":"seems a","Fragments":["little","bit","bit","bit","bit","bit","little","shame","little","little","little","bit","bit"]},{"Key":"little strange","Fragments":["to"]},{"Key":"strange to","Fragments":["have"]},{"Key":"have update/0","Fragments":["and"]},{"Key":"update/0 and","Fragments":["increment/0"]},{"Key":"and increment/0","Fragments":["return"]},{"Key":"increment/0 return","Fragments":["funs"]},{"Key":"return funs","Fragments":["rather"]},{"Key":"funs rather","Fragments":["than"]},{"Key":"than just","Fragments":["have","`update`","`filter`","lists.","ignoring","a","A-Z.","last"]},{"Key":"just have","Fragments":["an","one","one","to","much"]},{"Key":"an update/2","Fragments":["and"]},{"Key":"update/2 and","Fragments":["increment/1"]},{"Key":"and increment/1","Fragments":["and"]},{"Key":"increment/1 and","Fragments":["reference"]},{"Key":"and reference","Fragments":["them"]},{"Key":"reference them","Fragments":["as"]},{"Key":"them as","Fragments":["\u0026amp;update/2","private","strings,","`Enum.map`.","ints,","close"]},{"Key":"as \u0026amp;update/2","Fragments":["and"]},{"Key":"\u0026amp;update/2 and","Fragments":["\u0026amp;increment/1."]},{"Key":"and \u0026amp;increment/1.","Fragments":["Otherwise"]},{"Key":"\u0026amp;increment/1. Otherwise","Fragments":["I"]},{"Key":"Otherwise I","Fragments":["think"]},{"Key":" np,","Fragments":["due"]},{"Key":"np, due","Fragments":["to"]},{"Key":"that elixir","Fragments":["is","will"]},{"Key":"elixir is","Fragments":["evolving","pretty","generally"]},{"Key":"is evolving","Fragments":["so"]},{"Key":"evolving so","Fragments":["fast,"]},{"Key":"so fast,","Fragments":["I","I"]},{"Key":"fast, I","Fragments":["tend","couldn't"]},{"Key":"I tend","Fragments":["to","to","to","to","to","to","to","to"]},{"Key":"to master,","Fragments":["instead"]},{"Key":"master, instead","Fragments":["of"]},{"Key":"the bleeding","Fragments":["edge."]},{"Key":"Ah, thanks","Fragments":["for"]},{"Key":"the update","Fragments":["on"]},{"Key":"update on","Fragments":["List.flatten."]},{"Key":"on List.flatten.","Fragments":["I"]},{"Key":"List.flatten. I","Fragments":["was"]},{"Key":"was seeing","Fragments":["it"]},{"Key":"seeing it","Fragments":["in"]},{"Key":"multiple submissions","Fragments":["and"]},{"Key":"submissions and","Fragments":["didn't"]},{"Key":"didn't understand","Fragments":["why."]},{"Key":" Tests","Fragments":["are","for"]},{"Key":"Tests are","Fragments":["breaking"]},{"Key":"are breaking","Fragments":["if"]},{"Key":"breaking if","Fragments":["I"]},{"Key":"don't flatten","Fragments":["before"]},{"Key":"flatten before","Fragments":["reducing,"]},{"Key":"before reducing,","Fragments":["below"]},{"Key":"reducing, below","Fragments":["it's"]},{"Key":"below it's","Fragments":["the","```"]},{"Key":"output from","Fragments":["```","the","`Regex.scan`."]},{"Key":"from ```","Fragments":["iex"]},{"Key":"``` iex","Fragments":["-v```"]},{"Key":" $","Fragments":["⮀"]},{"Key":"$ ⮀","Fragments":["~"]},{"Key":"⮀ ~","Fragments":["⮀"]},{"Key":"~ ⮀","Fragments":["iex"]},{"Key":"⮀ iex","Fragments":["-v"]},{"Key":" Erlang","Fragments":["R16B01","doesn't"]},{"Key":"Erlang R16B01","Fragments":["(erts-5.10.2)"]},{"Key":"R16B01 (erts-5.10.2)","Fragments":["[source]"]},{"Key":"(erts-5.10.2) [source]","Fragments":["[64-bit]"]},{"Key":"[source] [64-bit]","Fragments":["[smp:8:8]"]},{"Key":"[64-bit] [smp:8:8]","Fragments":["[async-threads:10]"]},{"Key":"[smp:8:8] [async-threads:10]","Fragments":["[hipe]"]},{"Key":"[async-threads:10] [hipe]","Fragments":["[kernel-poll:false]"]},{"Key":"[hipe] [kernel-poll:false]","Fragments":["[dtrace]"]},{"Key":"I wonder","Fragments":["if","whether","whether","if","how","if","how","if","a","if","if","how"]},{"Key":"wonder if","Fragments":["we're","that's","I","anyone","there's","we","using","the","using","there"]},{"Key":"if we're","Fragments":["using","going"]},{"Key":"we're using","Fragments":["different"]},{"Key":"using different","Fragments":["versions"]},{"Key":"that's causing","Fragments":["the"]},{"Key":"causing the","Fragments":["discrepancy."]},{"Key":"the discrepancy.","Fragments":["If"]},{"Key":"discrepancy. If","Fragments":["I"]},{"Key":"I take","Fragments":["your","your","the","into"]},{"Key":"take your","Fragments":["code","point"]},{"Key":"to List.flatten,","Fragments":["the"]},{"Key":"List.flatten, the","Fragments":["test"]},{"Key":"test passes","Fragments":["fine.","in"]},{"Key":"passes fine.","Fragments":["Not"]},{"Key":"fine. Not","Fragments":["for","sure"]},{"Key":"Not for","Fragments":["you?"]},{"Key":"I run","Fragments":["\"iex\",","the","into"]},{"Key":"run \"iex\",","Fragments":["I"]},{"Key":"\"iex\", I","Fragments":["see"]},{"Key":"I'm running","Fragments":["0.10.1-dev.","sequential"]},{"Key":"I've read","Fragments":["that","up"]},{"Key":"read that","Fragments":["the","they","`HashDict.new/2`","part","wrong,"]},{"Key":"elixir convention","Fragments":["is"]},{"Key":"to expose","Fragments":["a","your"]},{"Key":"expose a","Fragments":["public"]},{"Key":"a public","Fragments":["function","method.","method","method.","function?","one)","function,"]},{"Key":"public function","Fragments":["that","with"]},{"Key":"that hides","Fragments":["the"]},{"Key":"hides the","Fragments":["extra","complication"]},{"Key":"extra parameters","Fragments":["needed"]},{"Key":"parameters needed","Fragments":["for"]},{"Key":"needed for","Fragments":["collecting","any","things","this","an","an","an"]},{"Key":"for collecting","Fragments":["values"]},{"Key":"collecting values","Fragments":["during"]},{"Key":"values during","Fragments":["recursion,"]},{"Key":"during recursion,","Fragments":["and"]},{"Key":"recursion, and","Fragments":["have"]},{"Key":"have private","Fragments":["methods"]},{"Key":"methods do","Fragments":["the"]},{"Key":"actual work.","Fragments":["While"]},{"Key":"work. While","Fragments":["it"]},{"Key":"While it","Fragments":["is"]},{"Key":"is true","Fragments":["I","that","but","while","then","that"]},{"Key":"true I","Fragments":["could"]},{"Key":"name `count`","Fragments":["for"]},{"Key":"`count` for","Fragments":["both","each"]},{"Key":"for both","Fragments":["the","`question?`","function","positions.","to"]},{"Key":"both the","Fragments":["public","prefix","sorted"]},{"Key":"interface and","Fragments":["the","`HashDict`"]},{"Key":"helper methods,","Fragments":["the"]},{"Key":"methods, the","Fragments":["leading"]},{"Key":"the leading","Fragments":["underscore","`\u0026amp;`","underscore","edge","underscore","underscore,"]},{"Key":"leading underscore","Fragments":["makes","is","-"]},{"Key":"underscore makes","Fragments":["the"]},{"Key":"makes the","Fragments":["difference","String.strip/1","determination,","code","last","code","tests","exercises","reader","code","code","code","code","code","helper","ruleset/logic","initial"]},{"Key":"the difference","Fragments":["between","pulling","between","between","between","between","between","between"]},{"Key":"difference between","Fragments":["them","`matches_anagram?/2`","`\"\"`","lists","the","the","an","an","strict"]},{"Key":"between them","Fragments":["explicit."]},{"Key":"them explicit.","Fragments":["Some"]},{"Key":"explicit. Some","Fragments":["libraries"]},{"Key":"Some libraries","Fragments":["use"]},{"Key":"libraries use","Fragments":["`do_xxx`"]},{"Key":"use `do_xxx`","Fragments":["for"]},{"Key":"`do_xxx` for","Fragments":["helpers."]},{"Key":"for helpers.","Fragments":["I'm"]},{"Key":"helpers. I'm","Fragments":["just"]},{"Key":"I'm just","Fragments":["paraphrasing","giving","learning","learning","learning","trying","getting","not","using","not","playing","learning","a"]},{"Key":"just paraphrasing","Fragments":["Dave"]},{"Key":"paraphrasing Dave","Fragments":["Thomas"]},{"Key":"Dave Thomas","Fragments":["from","only"]},{"Key":"Thomas from","Fragments":["Programming"]},{"Key":"from Programming","Fragments":["Elixir","Elixir."]},{"Key":"Programming Elixir","Fragments":["here.","and","book","book."]},{"Key":"I'm flattening","Fragments":["since"]},{"Key":"flattening since","Fragments":["otherwise"]},{"Key":"since otherwise","Fragments":["I"]},{"Key":"otherwise I","Fragments":["had","don't"]},{"Key":"to convert","Fragments":["list","a","the","a","a","to/from","between","the","the"]},{"Key":"convert list","Fragments":["to"]},{"Key":"to binary,","Fragments":["to"]},{"Key":"binary, to","Fragments":["be"]},{"Key":"clear below","Fragments":["it's"]},{"Key":"it's ```","Fragments":["to_list"]},{"Key":"``` to_list","Fragments":["```"]},{"Key":"to_list ```","Fragments":["method"]},{"Key":"``` method","Fragments":["output","will","look","was","and","is","is"]},{"Key":"method output","Fragments":["without"]},{"Key":"output without","Fragments":["flattening:"]},{"Key":" ```","Fragments":["[[\"one\"],","pun","logograph","cipher","elixir","elixir","assert","Regex.scan(%r/\\w+/,","[","[","def","elixir","elixir"]},{"Key":"``` [[\"one\"],","Fragments":["[\"fish\"],"]},{"Key":"[[\"one\"], [\"fish\"],","Fragments":["[\"two\"],","[\"two\"],"]},{"Key":"[\"fish\"], [\"two\"],","Fragments":["[\"fish\"],","[\"fish\"],","[\"fish\"],"]},{"Key":"[\"two\"], [\"fish\"],","Fragments":["[\"red\"],","[\"red\"],","[\"red\"],"]},{"Key":"[\"fish\"], [\"red\"],","Fragments":["[\"fish\"],","[\"fish\"],","[\"fish\"],"]},{"Key":"[\"red\"], [\"fish\"],","Fragments":["[\"blue\"],","[\"blue\"],","[\"blue\"],"]},{"Key":"[\"fish\"], [\"blue\"],","Fragments":["[\"fish\"]]","[\"fish\"]]","[\"fish\"]]`"]},{"Key":"[\"blue\"], [\"fish\"]]","Fragments":["```"]},{"Key":" Before","Fragments":["flattening"]},{"Key":"Before flattening","Fragments":["I"]},{"Key":"flattening I","Fragments":["was"]},{"Key":"was converting","Fragments":["the"]},{"Key":"converting the","Fragments":["list","binary"]},{"Key":"to binary","Fragments":["e.g.","since"]},{"Key":"binary e.g.","Fragments":["```"]},{"Key":"e.g. ```","Fragments":["binary_to_list(word)"]},{"Key":"``` binary_to_list(word)","Fragments":["```"]},{"Key":"binary_to_list(word) ```","Fragments":["while"]},{"Key":"``` while","Fragments":["reducing"]},{"Key":"while reducing","Fragments":["see","the"]},{"Key":"reducing see","Fragments":["submission"]},{"Key":"see submission","Fragments":["n."]},{"Key":"submission n.","Fragments":["2"]},{"Key":"n. 2","Fragments":["\u0026amp;"]},{"Key":"2 \u0026amp;","Fragments":["n."]},{"Key":"\u0026amp; n.","Fragments":["3"]},{"Key":" [submission","Fragments":["2](http://exercism.io/submissions/5203b9feb49ec8867a000367)","3](http://exercism.io/submissions/5204f0ae6867e95b1b000190)"]},{"Key":"use `Regex.scan`","Fragments":["to","and","to","to"]},{"Key":"`Regex.scan` to","Fragments":["tokenize","produce","generate","get","only"]},{"Key":"to tokenize","Fragments":["the"]},{"Key":"tokenize the","Fragments":["string"]},{"Key":" List.flatten","Fragments":["is"]},{"Key":"List.flatten is","Fragments":["necessary"]},{"Key":"is necessary","Fragments":["since","because","considering","to","for"]},{"Key":"necessary since","Fragments":["[this","it's"]},{"Key":"since [this","Fragments":["commit](https://github.com/elixir-lang/elixir/issues/1526)"]},{"Key":"[this commit](https://github.com/elixir-lang/elixir/issues/1526)","Fragments":["landed"]},{"Key":"commit](https://github.com/elixir-lang/elixir/issues/1526) landed","Fragments":["in"]},{"Key":"landed in","Fragments":["Elixir"]},{"Key":"the mixed","Fragments":["encapsulation,"]},{"Key":"mixed encapsulation,","Fragments":["I'm"]},{"Key":"encapsulation, I'm","Fragments":["going"]},{"Key":"I'm going","Fragments":["to","abroad","to","to","to","to","to","to","to","through","to","to"]},{"Key":"change that","Fragments":["and","to"]},{"Key":"and submit","Fragments":["a","a","again.","a","a","a"]},{"Key":"submit a","Fragments":["new","new","new","pull","new","new","new","version","new","new","new","new","patch","new","new","new","new","PR","new","PR","purely","new","new","new","new"]},{"Key":"PeepCode video","Fragments":["with"]},{"Key":"video with","Fragments":["José"]},{"Key":"with José","Fragments":["Valim"]},{"Key":"Valim uses","Fragments":["this"]},{"Key":"uses this","Fragments":["`do_*`","when"]},{"Key":"this `do_*`","Fragments":["style"]},{"Key":"`do_*` style","Fragments":["to"]},{"Key":"to emphasize","Fragments":["private"]},{"Key":"emphasize private","Fragments":["building"]},{"Key":"private building","Fragments":["blocks"]},{"Key":"building blocks","Fragments":["that"]},{"Key":"blocks that","Fragments":["support"]},{"Key":"that support","Fragments":["a","a"]},{"Key":"support a","Fragments":["public","function"]},{"Key":"public method.","Fragments":["I"]},{"Key":"out. So","Fragments":["far"]},{"Key":"far I","Fragments":["think"]},{"Key":"it this","Fragments":["way.","way:","way","way,","way"]},{"Key":"the List.flatten","Fragments":["necessary?","necessary","bit","into"]},{"Key":"List.flatten necessary?","Fragments":["Do"]},{"Key":"tests pass","Fragments":["without","without","on","for"]},{"Key":"pass without","Fragments":["it?","it?"]},{"Key":"without it?","Fragments":["(I'm"]},{"Key":"it? (I'm","Fragments":["really"]},{"Key":"(I'm really","Fragments":["asking"]},{"Key":"really asking","Fragments":["here...I've"]},{"Key":"asking here...I've","Fragments":["seen"]},{"Key":"here...I've seen","Fragments":["a"]},{"Key":"of submissions","Fragments":["that"]},{"Key":"that use","Fragments":["it","them.","the","of"]},{"Key":"it lately,","Fragments":["but"]},{"Key":"lately, but","Fragments":["when","I"]},{"Key":"was necessary","Fragments":["to"]},{"Key":"necessary to","Fragments":["make","extract","understand"]},{"Key":"tests pass,","Fragments":["but","and","I"]},{"Key":"pass, but","Fragments":["perhaps","it"]},{"Key":"perhaps they've","Fragments":["changed)."]},{"Key":"that Dict.update","Fragments":["might"]},{"Key":"Dict.update might","Fragments":["more"]},{"Key":"might more","Fragments":["accurately"]},{"Key":"more accurately","Fragments":["express","follow","what"]},{"Key":"accurately express","Fragments":["the"]},{"Key":"express the","Fragments":["intent","`predicate_and?`"]},{"Key":"line of","Fragments":["code...I","the","the","every","code","that","code."]},{"Key":"of code...I","Fragments":["think"]},{"Key":"code...I think","Fragments":["your"]},{"Key":"your goal","Fragments":["is"]},{"Key":"to \"update\"","Fragments":["a"]},{"Key":"\"update\" a","Fragments":["value,"]},{"Key":"a value,","Fragments":["not"]},{"Key":"value, not","Fragments":["to"]},{"Key":"to merge","Fragments":["two","those"]},{"Key":"merge two","Fragments":["HashDicts."]},{"Key":" Merging","Fragments":["is"]},{"Key":"Merging is","Fragments":["certainly"]},{"Key":"is certainly","Fragments":["a","more","more","overkill","not","creative,","a","a"]},{"Key":"certainly a","Fragments":["viable","very","fun"]},{"Key":"a viable","Fragments":["tactic"]},{"Key":"viable tactic","Fragments":["to"]},{"Key":"tactic to","Fragments":["meet"]},{"Key":"to meet","Fragments":["that"]},{"Key":"meet that","Fragments":["goal,"]},{"Key":"that goal,","Fragments":["but"]},{"Key":"goal, but","Fragments":["you"]},{"Key":"you end","Fragments":["up","up","up","up","up","up","up","up","up"]},{"Key":"up using","Fragments":["a","Inspect.Algebra,","more","*append*"]},{"Key":"more powerful","Fragments":["tool","and"]},{"Key":"powerful tool","Fragments":["than"]},{"Key":"tool than","Fragments":["you"]},{"Key":"than you","Fragments":["really","won't","might","need"]},{"Key":"you really","Fragments":["need","think","gain","need","need"]},{"Key":"need (which","Fragments":["also"]},{"Key":"(which also","Fragments":["results"]},{"Key":"also results","Fragments":["in"]},{"Key":"in ever-so-slightly","Fragments":["more"]},{"Key":"ever-so-slightly more","Fragments":["code"]},{"Key":"more code","Fragments":["to","to","and"]},{"Key":"to manage","Fragments":["that","the"]},{"Key":"manage that","Fragments":["power,"]},{"Key":"that power,","Fragments":["and"]},{"Key":"power, and","Fragments":["I"]},{"Key":"it's slightly","Fragments":["less","more","nicer"]},{"Key":"slightly less","Fragments":["intention-revealing).","nice","ugly"]},{"Key":"List.flatten necessary","Fragments":["or"]},{"Key":"necessary or","Fragments":["helpful?","really","really"]},{"Key":"or helpful?","Fragments":["Do"]},{"Key":"helpful? Do","Fragments":["the"]},{"Key":"Your implementation","Fragments":["of","of"]},{"Key":"of count(text)","Fragments":["encapsulates"]},{"Key":"count(text) encapsulates","Fragments":["one"]},{"Key":"encapsulates one","Fragments":["bit"]},{"Key":"one bit","Fragments":["of"]},{"Key":"of logic","Fragments":["in"]},{"Key":"another function,","Fragments":["and"]},{"Key":"function, and","Fragments":["inlines","the","again","`defp`","`\u00261`","then"]},{"Key":"and inlines","Fragments":["the"]},{"Key":"inlines the","Fragments":["other"]},{"Key":"other bit","Fragments":["of"]},{"Key":"of logic.","Fragments":["Might"]},{"Key":"logic. Might","Fragments":["it"]},{"Key":"Might it","Fragments":["tell"]},{"Key":"it tell","Fragments":["its"]},{"Key":"tell its","Fragments":["story","story"]},{"Key":"its story","Fragments":["better","more"]},{"Key":"story better","Fragments":["if"]},{"Key":"you kept","Fragments":["the"]},{"Key":"kept the","Fragments":["implementation","different"]},{"Key":"implementation to","Fragments":["a","avoid","get","match.","not"]},{"Key":"consistent level","Fragments":["of","of","of"]},{"Key":"level of","Fragments":["encapsulation?","abstraction","abstraction","abstraction","abstraction","abstraction.","abstraction.","abstraction","the","understanding","minesweeper","indirection?"]},{"Key":" Stylistic","Fragments":["minor"]},{"Key":"Stylistic minor","Fragments":["nit...does"]},{"Key":"minor nit...does","Fragments":["the"]},{"Key":"nit...does the","Fragments":["prefix"]},{"Key":"the prefix","Fragments":["\"do_\"","in","`is_`","`is_`"]},{"Key":"prefix \"do_\"","Fragments":["help"]},{"Key":"\"do_\" help","Fragments":["you"]},{"Key":"you understand","Fragments":["the","what","the"]},{"Key":"the functions'","Fragments":["purposes?"]},{"Key":"for letting","Fragments":["me","me"]},{"Key":"letting me","Fragments":["know","know"]},{"Key":"about ```","Fragments":["Dict.update"]},{"Key":"``` Dict.update","Fragments":["```","```","```"]},{"Key":"got few","Fragments":["questions"]},{"Key":"questions though","Fragments":["(assuming"]},{"Key":"though (assuming","Fragments":["the"]},{"Key":"(assuming the","Fragments":["exercise"]},{"Key":"is now","Fragments":["working","in","captured","required."]},{"Key":"now working","Fragments":["as"]},{"Key":"working as","Fragments":["it"]},{"Key":"1) why","Fragments":["should","are"]},{"Key":"why should","Fragments":["I"]},{"Key":"should I","Fragments":["switch","be","be","do","change","use?"]},{"Key":"I switch","Fragments":["to"]},{"Key":"switch to","Fragments":["this","pipelining","a"]},{"Key":"this \"notation\"","Fragments":["and"]},{"Key":"\"notation\" and","Fragments":["avoid"]},{"Key":"avoid using","Fragments":["```","inline","Regexs"]},{"Key":"using ```","Fragments":["HashDict.merge"]},{"Key":"``` HashDict.merge","Fragments":["```"]},{"Key":"2) Could","Fragments":["have"]},{"Key":"Could have","Fragments":["I"]},{"Key":"have I","Fragments":["used"]},{"Key":"used ```","Fragments":["HashDict.update","\"_whatever\""]},{"Key":"``` HashDict.update","Fragments":["```"]},{"Key":"HashDict.update ```","Fragments":["instead"]},{"Key":"``` instead","Fragments":["of"]},{"Key":"of ```","Fragments":["Dict.update"]},{"Key":"Dict.update ```","Fragments":["is","method"]},{"Key":"``` is","Fragments":["there","totally"]},{"Key":"any improvement","Fragments":["in"]},{"Key":"improvement in","Fragments":["therms"]},{"Key":"in therms","Fragments":["of"]},{"Key":"therms of","Fragments":["performance?"]},{"Key":"I'm definitely","Fragments":["going","learning","more"]},{"Key":"definitely going","Fragments":["to"]},{"Key":"to need","Fragments":["some","a"]},{"Key":"need some","Fragments":["help","help"]},{"Key":"this into","Fragments":["\"beautiful"]},{"Key":"into \"beautiful","Fragments":["Elixir\"..."]},{"Key":"\"beautiful Elixir\"...","Fragments":["Elixir"]},{"Key":"Elixir\"... Elixir","Fragments":["is"]},{"Key":"you aware","Fragments":["of","of"]},{"Key":"aware of","Fragments":["Dict.update","the","--","defp.","the","even","the","that","flat_map","`String.to_char_list!`","that","the","them,"]},{"Key":"of Dict.update","Fragments":["as"]},{"Key":"Dict.update as","Fragments":["an"]},{"Key":"to HashDict.merge","Fragments":["in"]},{"Key":"HashDict.merge in","Fragments":["this"]},{"Key":"The `do_`","Fragments":["convention"]},{"Key":"`do_` convention","Fragments":["is"]},{"Key":"is used","Fragments":["for","exactly","to","the","instead","when","as","for","for","for","for","so"]},{"Key":"used for","Fragments":["the","scanning","my","macro's.","when","a","the","example","a"]},{"Key":"the iterative","Fragments":["implementation","solution"]},{"Key":"iterative implementation","Fragments":["of"]},{"Key":"function, for","Fragments":["example:"]},{"Key":"def map(list,","Fragments":["f)"]},{"Key":"map(list, f)","Fragments":["do"]},{"Key":" do_map(list,","Fragments":["f,"]},{"Key":"do_map(list, f,","Fragments":["[])","acc)"]},{"Key":"def do_map(list,","Fragments":["f,"]},{"Key":"f, acc)","Fragments":["do"]},{"Key":" Without","Fragments":["putting","the","seeing"]},{"Key":"Without putting","Fragments":["more"]},{"Key":"putting more","Fragments":["exact"]},{"Key":"more exact","Fragments":["timers"]},{"Key":"exact timers","Fragments":["around"]},{"Key":"timers around","Fragments":["things,"]},{"Key":"around things,","Fragments":["it's"]},{"Key":"things, it's","Fragments":["hard"]},{"Key":"it's hard","Fragments":["to","to","to","to","to"]},{"Key":"to tell,","Fragments":["and"]},{"Key":"tell, and","Fragments":["the"]},{"Key":"the full","Fragments":["test","string"]},{"Key":"full test","Fragments":["suite"]},{"Key":"suite runs","Fragments":["in"]},{"Key":"runs in","Fragments":["0.0s"]},{"Key":"in 0.0s","Fragments":["regardless"]},{"Key":"0.0s regardless","Fragments":["of"]},{"Key":"of which","Fragments":["method.","you","the","direction"]},{"Key":" However,","Fragments":["if","I","you"]},{"Key":"However, if","Fragments":["I"]},{"Key":"I amp","Fragments":["up"]},{"Key":"amp up","Fragments":["the"]},{"Key":"final test","Fragments":["case","only"]},{"Key":"case to","Fragments":["be","a","be"]},{"Key":"a 1024","Fragments":["nucleotide"]},{"Key":"1024 nucleotide","Fragments":["sequence"]},{"Key":"nucleotide sequence","Fragments":["the"]},{"Key":"sequence the","Fragments":["parallel"]},{"Key":"the parallel","Fragments":["version"]},{"Key":"parallel version","Fragments":["takes"]},{"Key":"version takes","Fragments":[".1s",".3s"]},{"Key":"takes .1s","Fragments":["to"]},{"Key":".1s to","Fragments":["execute"]},{"Key":"to execute","Fragments":["all","pretty"]},{"Key":"execute all","Fragments":["tests"]},{"Key":"all tests","Fragments":["and","successful.","pass,"]},{"Key":"tests and","Fragments":["the","the","length/size","threw"]},{"Key":"the non-parallel","Fragments":["version","version"]},{"Key":"non-parallel version","Fragments":["takes","I"]},{"Key":"takes .3s","Fragments":["or"]},{"Key":".3s or","Fragments":[".4s."]},{"Key":"Here's the","Fragments":["non-parallel","cleanest","various","important","important","approach"]},{"Key":" defmodule","Fragments":["DNA","Anagram","Teenager","Teenager","Beer","Anagram","Meetup","Meetup","Words","Test","Teenager"]},{"Key":"defmodule DNA","Fragments":["do"]},{"Key":" @jerry","Fragments":["HashDict.new","|\u0026gt;"]},{"Key":"@jerry HashDict.new","Fragments":["[{?A,"]},{"Key":"HashDict.new [{?A,","Fragments":["0},","0},","0},"]},{"Key":"[{?A, 0},","Fragments":["{?T,","{?T,","{?C,"]},{"Key":"0}, {?T,","Fragments":["0},","0},","0},","0}]"]},{"Key":"{?T, 0},","Fragments":["{?C,","{?C,","{?C,"]},{"Key":"0}, {?C,","Fragments":["0},","0},","0},","0},"]},{"Key":"{?C, 0},","Fragments":["{?G,","{?G,","{?G,","{?G,"]},{"Key":"0}, {?G,","Fragments":["0}]","0}]`,","0}]),","0},"]},{"Key":"def count('',","Fragments":["_),"]},{"Key":"count('', _),","Fragments":["do:"]},{"Key":"_), do:","Fragments":["0","true","acc","acc","acc","true","false"]},{"Key":"def count(sequence,","Fragments":["nucleotide)"]},{"Key":"count(sequence, nucleotide)","Fragments":["do"]},{"Key":" sequence","Fragments":["|\u0026gt;"]},{"Key":"sequence |\u0026gt;","Fragments":["extract_nucleotide(List.wrap(nucleotide))"]},{"Key":"|\u0026gt; extract_nucleotide(List.wrap(nucleotide))","Fragments":["|\u0026gt;"]},{"Key":"extract_nucleotide(List.wrap(nucleotide)) |\u0026gt;","Fragments":["Enum.count"]},{"Key":"def nucleotide_counts(sequence)","Fragments":["do"]},{"Key":"@jerry |\u0026gt;","Fragments":["Enum.map(fn({k,_})"]},{"Key":"|\u0026gt; Enum.map(fn({k,_})","Fragments":["-\u0026gt;"]},{"Key":"Enum.map(fn({k,_}) -\u0026gt;","Fragments":["{k,"]},{"Key":"-\u0026gt; {k,","Fragments":["count(sequence,"]},{"Key":"{k, count(sequence,","Fragments":["k)}"]},{"Key":"count(sequence, k)}","Fragments":["end)"]},{"Key":"k)} end)","Fragments":["|\u0026gt;"]},{"Key":"end) |\u0026gt;","Fragments":["HashDict.new"]},{"Key":"defp extract_nucleotide(sequence,","Fragments":["nucleotide)"]},{"Key":"extract_nucleotide(sequence, nucleotide)","Fragments":["do"]},{"Key":" Regex.replace(%r/[^#{nucleotide}]/,","Fragments":["sequence,"]},{"Key":"Regex.replace(%r/[^#{nucleotide}]/, sequence,","Fragments":["'')"]},{"Key":"a higher-order","Fragments":["fold","function"]},{"Key":"higher-order fold","Fragments":["or"]},{"Key":"fold or","Fragments":["reduce","a"]},{"Key":"or reduce","Fragments":["here","instead","that?"]},{"Key":"reduce here","Fragments":["instead","a"]},{"Key":"here instead","Fragments":["of","of"]},{"Key":"of walking","Fragments":["the"]},{"Key":"walking the","Fragments":["list"]},{"Key":"list in","Fragments":["do_count","the","an","the","the"]},{"Key":"in do_count","Fragments":["yourself?"]},{"Key":"do_count yourself?","Fragments":["I"]},{"Key":"yourself? I","Fragments":["would","get"]},{"Key":"also recommend","Fragments":["looking"]},{"Key":"recommend looking","Fragments":["up"]},{"Key":"looking up","Fragments":["HashDict.update."]},{"Key":"the String.split","Fragments":["without"]},{"Key":"String.split without","Fragments":["String.replace"]},{"Key":"without String.replace","Fragments":["at"]},{"Key":"String.replace at","Fragments":["all?"]},{"Key":"got twisted","Fragments":["around"]},{"Key":"twisted around","Fragments":["with"]},{"Key":"around with","Fragments":["ruby,","stuff.","the","using","regular","it!","processes","elixir,"]},{"Key":"with ruby,","Fragments":["erlang,"]},{"Key":"ruby, erlang,","Fragments":["and"]},{"Key":"erlang, and","Fragments":["elixir."]},{"Key":"and elixir.","Fragments":["Thanks"]},{"Key":"elixir. Thanks","Fragments":["for"]},{"Key":"just pushed","Fragments":["a"]},{"Key":"pushed a","Fragments":["new","revision","new"]},{"Key":" Conventionally","Fragments":["these"]},{"Key":"Conventionally these","Fragments":["boolean"]},{"Key":"these boolean","Fragments":["valued"]},{"Key":"boolean valued","Fragments":["functions","functions"]},{"Key":"valued functions","Fragments":["would","to"]},{"Key":"functions would","Fragments":["be"]},{"Key":"named yelling?/1","Fragments":["rather"]},{"Key":"yelling?/1 rather","Fragments":["than"]},{"Key":"than is_yelling/1.","Fragments":["You"]},{"Key":"is_yelling/1. You","Fragments":["can"]},{"Key":"see this","Fragments":["in"]},{"Key":"of String.ends_with?/2.","Fragments":["Everything"]},{"Key":"String.ends_with?/2. Everything","Fragments":["else"]},{"Key":"Everything else","Fragments":["looks","here","looks","here"]},{"Key":"else looks","Fragments":["good","great."]},{"Key":" Wow,","Fragments":["very","thank","that's"]},{"Key":"Wow, very","Fragments":["cool"]},{"Key":"very cool","Fragments":["that"]},{"Key":"cool that","Fragments":["it's","Elixir","you"]},{"Key":"that it's","Fragments":["concurrent.","necessary","clearer","not","much","easier","the","redundant","done","ten","inconsistent","pure/side-effect-free","different","not","there.","possible","hard","returning","(far)","ugly","possible","flattening","doing"]},{"Key":"it's concurrent.","Fragments":["Out"]},{"Key":"concurrent. Out","Fragments":["of"]},{"Key":"of curiosity,","Fragments":["how","what"]},{"Key":"curiosity, how","Fragments":["big"]},{"Key":"how big","Fragments":["would"]},{"Key":"big would","Fragments":["the"]},{"Key":"would the","Fragments":["strand"]},{"Key":"the strand","Fragments":["need","in","with","will","4"]},{"Key":"strand need","Fragments":["to"]},{"Key":"be faster","Fragments":["concurrent?","than","to","than","than"]},{"Key":"faster concurrent?","Fragments":["Is"]},{"Key":"concurrent? Is","Fragments":["it"]},{"Key":"Is it","Fragments":["faster","possible","possible","not","possible?","not","really","idiomatic","common","possible","ok,","because","okay","just","even"]},{"Key":"it faster","Fragments":["in"]},{"Key":"faster in","Fragments":["the"]},{"Key":"test cases?","Fragments":["I'm"]},{"Key":"cases? I'm","Fragments":["not"]},{"Key":"really familiar","Fragments":["with"]},{"Key":"with parallel","Fragments":["stuff,"]},{"Key":"parallel stuff,","Fragments":["sadly."]},{"Key":"will mention","Fragments":["is"]},{"Key":"mention is","Fragments":["instead"]},{"Key":"is instead","Fragments":["of","of"]},{"Key":"the `extract_nucleotide`,","Fragments":["you"]},{"Key":"`extract_nucleotide`, you","Fragments":["could"]},{"Key":"probably do","Fragments":["a","with","with","this","this"]},{"Key":"bit simpler","Fragments":["than","and","(I"]},{"Key":"simpler than","Fragments":["a","using","what"]},{"Key":"Regex, since","Fragments":["the"]},{"Key":"since the","Fragments":["input","input","person","syntax","result","Erlang","keys","function","error","compiler","first","process"]},{"Key":"actually a","Fragments":["list","list.","typecheck,","bit","pretty","simple","big","test"]},{"Key":"of chars,","Fragments":["you","binary"]},{"Key":"chars, you","Fragments":["can"]},{"Key":"can treat","Fragments":["it"]},{"Key":"treat it","Fragments":["like","as"]},{"Key":"list and","Fragments":["use","then","re-store","a","then","then","then","huge","huge","`ll`","did","passes","huge","huge","huge","produce","huge","huge","avoid"]},{"Key":"use `Enum`","Fragments":["functions","in","if","module"]},{"Key":"`Enum` functions","Fragments":["on","can","can","tend"]},{"Key":"I *think*","Fragments":["it","the","this"]},{"Key":"*think* it","Fragments":["would"]},{"Key":"to re-use","Fragments":["the"]},{"Key":"re-use the","Fragments":["`count`","same"]},{"Key":"`count` name","Fragments":["instead"]},{"Key":"of `_count`","Fragments":["and"]},{"Key":"`_count` and","Fragments":["let"]},{"Key":"let pattern","Fragments":["matching"]},{"Key":"the arguments","Fragments":["route","separately.","of","and","could","to"]},{"Key":"arguments route","Fragments":["you"]},{"Key":"route you","Fragments":["to"]},{"Key":"correct private","Fragments":["clauses."]},{"Key":"private clauses.","Fragments":["What"]},{"Key":"clauses. What","Fragments":["would"]},{"Key":"The offending","Fragments":["test"]},{"Key":"offending test","Fragments":["has"]},{"Key":"test has","Fragments":["been"]},{"Key":"has been","Fragments":["removed.","iterated","deprecated","on","traversed.","traversed.","traversed.","traversed.","traversed.","removed.","traversed.","traversed."]},{"Key":"been removed.","Fragments":["Thanks","So"]},{"Key":"removed. Thanks","Fragments":["for"]},{"Key":"for bringing","Fragments":["it"]},{"Key":"bringing it","Fragments":["up"]},{"Key":"up (and","Fragments":["submitting"]},{"Key":"(and submitting","Fragments":["a"]},{"Key":"submitting a","Fragments":["pull","new","pull"]},{"Key":"a pull","Fragments":["request!).","request","request","request?","request"]},{"Key":"different variable","Fragments":["name","names"]},{"Key":"than `x`.","Fragments":["The"]},{"Key":"`x`. The","Fragments":["only"]},{"Key":"only time","Fragments":["I"]},{"Key":"where I'd","Fragments":["use","be","like"]},{"Key":"I'd use","Fragments":["`x`","the","the","iolist_to_binary","a","to"]},{"Key":"use `x`","Fragments":["is"]},{"Key":"`x` is","Fragments":["for"]},{"Key":"is for","Fragments":["a","a","example","unicode","binary","the","taking"]},{"Key":"a cartesian","Fragments":["plane,"]},{"Key":"cartesian plane,","Fragments":["or"]},{"Key":"plane, or","Fragments":["perhaps"]},{"Key":"or perhaps","Fragments":["algebra,"]},{"Key":"perhaps algebra,","Fragments":["though"]},{"Key":"algebra, though","Fragments":["I'm"]},{"Key":"though I'm","Fragments":["sure","not","a"]},{"Key":"are others","Fragments":["where"]},{"Key":"others where","Fragments":["the"]},{"Key":"the meaning","Fragments":["of","of","of","of"]},{"Key":"meaning of","Fragments":["`x`","the","a","the","the","each"]},{"Key":"of `x`","Fragments":["would"]},{"Key":"`x` would","Fragments":["be"]},{"Key":"be immediately","Fragments":["apparent"]},{"Key":"immediately apparent","Fragments":["to"]},{"Key":"apparent to","Fragments":["the"]},{"Key":"hadn't known","Fragments":["about"]},{"Key":"known about","Fragments":["that"]},{"Key":"that operator.","Fragments":["Updated!"]},{"Key":"really good;","Fragments":["I"]},{"Key":"good; I","Fragments":["only"]},{"Key":"only have","Fragments":["a","one","one"]},{"Key":"a minor","Fragments":["nit.","point","point,","style","real","stylistic"]},{"Key":"minor nit.","Fragments":["How"]},{"Key":"nit. How","Fragments":["do"]},{"Key":"making silence?(x),","Fragments":["shouting?(x),"]},{"Key":"silence?(x), shouting?(x),","Fragments":["and"]},{"Key":"shouting?(x), and","Fragments":["question?(x)"]},{"Key":"and question?(x)","Fragments":["into"]},{"Key":"question?(x) into","Fragments":["private"]},{"Key":"bit inconsistent","Fragments":["to","to","with"]},{"Key":"inconsistent to","Fragments":["use","use","import","use"]},{"Key":"use parentheses","Fragments":["for","for","around","around","often.","in","although","for","around","for","but","explicitly,","by","in","except"]},{"Key":"parentheses for","Fragments":["all","all","the","function","readability."]},{"Key":"for all","Fragments":["of","of","the","other","but","the","private","the","the","values","your","the","kinds","of","dictionary","kinds","the","but","your","of","the","the","64","the","but"]},{"Key":"calls except","Fragments":["for","the","for"]},{"Key":"except for","Fragments":["the","case","what","`new`.","the","`Enum.join`?","the","the"]},{"Key":"one to","Fragments":["String.ends_with?/2,","the","the"]},{"Key":"to String.ends_with?/2,","Fragments":["otherwise"]},{"Key":"String.ends_with?/2, otherwise","Fragments":["this"]},{"Key":"otherwise this","Fragments":["looks","looks"]},{"Key":"Not really","Fragments":["a","in"]},{"Key":"a nitpick,","Fragments":["more","I"]},{"Key":"nitpick, more","Fragments":["of"]},{"Key":"a tip.","Fragments":["Elixir"]},{"Key":"tip. Elixir","Fragments":["supports"]},{"Key":"supports shorthands","Fragments":["for"]},{"Key":"shorthands for","Fragments":["anonymous"]},{"Key":"anonymous functions.","Fragments":["The"]},{"Key":"functions. The","Fragments":["function","module"]},{"Key":"The function","Fragments":["updating","name","name","`not_same?/2`","`chars/1`","name"]},{"Key":"function updating","Fragments":["the"]},{"Key":"updating the","Fragments":["`count_hash`","record"]},{"Key":"the `count_hash`","Fragments":["accumulator"]},{"Key":"`count_hash` accumulator","Fragments":["could"]},{"Key":"accumulator could","Fragments":["be"]},{"Key":"written as","Fragments":["`Dict.update(counts_hash,","characters","`String.ends_with?(text,","`\u0026not_same?/1`","`String.last(s)`.","`...","`\u0026normalize_word/1`.","`String.strip(phrase)","just","`Enum.reduce`.","`String.downcase","`String.ends_with(phrase,","`String.starts_with?(a,","`%S\"(\\1)","`s","`:lists.seq(from,","`\u0026{\u00261,0}`.","`String.ends_with?(s,","as","`Regex.match?(r/^[\\p{Lu}\\P{Ll}]+$/)`","a","`Enum.flat_map`.","an","`\u0026[student|\u00261]`,","`if","`\u0026{","`\u0026{\u00261,","`s","`String.ends_with?(input,","`\u0026(\u00261","`s","`\u0026[\u00261|\u00262]`.","`Dict.update(dict,","\u0026String.downcase.","`\u0026[...]`"]},{"Key":"as `Dict.update(counts_hash,","Fragments":["word,"]},{"Key":"`Dict.update(counts_hash, word,","Fragments":["1,"]},{"Key":"Elixir, it's","Fragments":["typical"]},{"Key":"it's typical","Fragments":["for"]},{"Key":"typical for","Fragments":["boolean"]},{"Key":"for boolean","Fragments":["valued"]},{"Key":"end with","Fragments":["a","a","a","\"?\""]},{"Key":"question mark,","Fragments":["such","like","or"]},{"Key":"mark, such","Fragments":["as"]},{"Key":"as String.ends_with?/2.","Fragments":["I"]},{"Key":"String.ends_with?/2. I","Fragments":["also"]},{"Key":"also think","Fragments":["it's","you","a","that","it's","you","my"]},{"Key":"except the","Fragments":["one","function","regex"]},{"Key":"The nested","Fragments":["`Counter`","conditionals"]},{"Key":"nested `Counter`","Fragments":["module"]},{"Key":"`Counter` module","Fragments":["feels"]},{"Key":"module feels","Fragments":["a","like"]},{"Key":"feels a","Fragments":["bit","lot","little","little","bit","wee","little","little","little"]},{"Key":"bit over","Fragments":["the"]},{"Key":"top for","Fragments":["just"]},{"Key":"for just","Fragments":["containing"]},{"Key":"just containing","Fragments":["one"]},{"Key":"containing one","Fragments":["method."]},{"Key":"method. Maybe","Fragments":["just"]},{"Key":"Maybe just","Fragments":["do"]},{"Key":"just do","Fragments":["the","something","`digit_count","the","`[func.(head)","input"]},{"Key":"word in","Fragments":["an","O(n)","`chars/1`","`are_not_identical?`","it","the"]},{"Key":"in an","Fragments":["anonymous","accumulator","anonymous","object-oriented","anonymous","abstract"]},{"Key":"an anonymous","Fragments":["function?","function","function","function","function","function","function.","function","\u0026-based","function","function","function","function,"]},{"Key":"anonymous function?","Fragments":["Or","Or"]},{"Key":"function? Or","Fragments":["a","break"]},{"Key":"Or a","Fragments":["named"]},{"Key":"a named","Fragments":["function","function","lambda","function","function?","function","function","function","function.","function","private"]},{"Key":"named function","Fragments":["in","that","whose","as","for","for","to","to","to"]},{"Key":"the `Words`","Fragments":["module."]},{"Key":"Have a","Fragments":["look","look"]},{"Key":"look on","Fragments":["`Dict#update/4`"]},{"Key":"on `Dict#update/4`","Fragments":["function."]},{"Key":" Checking","Fragments":["for"]},{"Key":"Checking for","Fragments":["nil"]},{"Key":"nil isn't","Fragments":["necessary,"]},{"Key":"isn't necessary,","Fragments":["it","but"]},{"Key":"necessary, it","Fragments":["was"]},{"Key":"a bad","Fragments":["idea","idea,","thing","idea","number","idea","approach,","idea."]},{"Key":"bad idea","Fragments":["to","because","to"]},{"Key":"put that","Fragments":["in","```|```","into"]},{"Key":"first place","Fragments":["and"]},{"Key":"place and","Fragments":["has","does","is"]},{"Key":"and has","Fragments":["since","openly"]},{"Key":"has since","Fragments":["been"]},{"Key":"since been","Fragments":["fixed."]},{"Key":"been fixed.","Fragments":["https://github.com/kytrinyx/exercism.io/pull/465"]},{"Key":" Everything","Fragments":["else"]},{"Key":"else here","Fragments":["looks","looks"]},{"Key":"here looks","Fragments":["great,","amazing."]},{"Key":"looks great,","Fragments":["although","much"]},{"Key":"great, although","Fragments":["the"]},{"Key":"although the","Fragments":["naming","explicit","conditionals","cascading"]},{"Key":"naming \"is_…?\"","Fragments":["is"]},{"Key":"\"is_…?\" is","Fragments":["a"]},{"Key":"bit redundant,","Fragments":["it's"]},{"Key":"redundant, it's","Fragments":["generally"]},{"Key":"it's generally","Fragments":["implied","considered"]},{"Key":"generally implied","Fragments":["when"]},{"Key":"implied when","Fragments":["the"]},{"Key":"mark. Doesn't","Fragments":["matter"]},{"Key":"Doesn't matter","Fragments":["either"]},{"Key":"matter either","Fragments":["way"]},{"Key":"either way","Fragments":["though.","it's","in","works.","on"]},{"Key":"the length","Fragments":["of","of","filter","of","of","of","just","of","of","mismatch","of","of","of","of","of","comparison","comparison"]},{"Key":"length of","Fragments":["the","the","0","0","the","your","a","the","the","the","a","the","the","a"]},{"Key":"string to","Fragments":["0,","a","a","a","a","list","a","be","a","a"]},{"Key":"to 0,","Fragments":["rather"]},{"Key":"0, rather","Fragments":["than"]},{"Key":"than simply","Fragments":["compare","check"]},{"Key":"simply compare","Fragments":["the"]},{"Key":"of String.strip(...)","Fragments":["to"]},{"Key":"String.strip(...) to","Fragments":["\"\"?"]},{"Key":" Other","Fragments":["than","than","points","stuff:","than","than","than","than","than","than","than","than","than","than","than"]},{"Key":"that nitpick,","Fragments":["I"]},{"Key":"nitpick, I","Fragments":["think","knew","don't"]},{"Key":"using all","Fragments":["the","the"]},{"Key":"right elixir","Fragments":["tools."]},{"Key":"elixir tools.","Fragments":["Have"]},{"Key":"tools. Have","Fragments":["you"]},{"Key":"out some","Fragments":["of"]},{"Key":"the hey(...)","Fragments":["implementation"]},{"Key":"hey(...) implementation","Fragments":["into"]},{"Key":"implementation into","Fragments":["functions,"]},{"Key":"into functions,","Fragments":["to"]},{"Key":"functions, to","Fragments":["maybe","make"]},{"Key":"to maybe","Fragments":["make"]},{"Key":"make its","Fragments":["\"story\""]},{"Key":"its \"story\"","Fragments":["a"]},{"Key":"\"story\" a","Fragments":["little"]},{"Key":" Hey!","Fragments":["Great"]},{"Key":"Hey! Great","Fragments":["solution."]},{"Key":"Just two","Fragments":["points"]},{"Key":"two points","Fragments":["to"]},{"Key":"points to","Fragments":["considerer..."]},{"Key":"to considerer...","Fragments":["Do"]},{"Key":"considerer... Do","Fragments":["you"]},{"Key":"variable `str`","Fragments":["can"]},{"Key":"`str` can","Fragments":["be"]},{"Key":"more meaningful?","Fragments":["For"]},{"Key":"meaningful? For","Fragments":["example"]},{"Key":"example `message`?","Fragments":["The"]},{"Key":"`message`? The","Fragments":["idea"]},{"Key":"idea is","Fragments":["to","to","that","that","to","that"]},{"Key":"code focused","Fragments":["in"]},{"Key":"focused in","Fragments":["the"]},{"Key":"the domain.","Fragments":["In",":)","What","`yells?(input)`"]},{"Key":"domain. In","Fragments":["the"]},{"Key":"the domain","Fragments":["of","of","being","as","as","as","of","of","language","(i.e.","a","a","description?","concepts"]},{"Key":"domain of","Fragments":["this","the","opinion,","biology"]},{"Key":"problem there","Fragments":["isn't"]},{"Key":"there isn't","Fragments":["`str`,","a","anything","comments.","enough"]},{"Key":"isn't `str`,","Fragments":["only"]},{"Key":"`str`, only","Fragments":["conversation,"]},{"Key":"only conversation,","Fragments":["which"]},{"Key":"conversation, which","Fragments":["can"]},{"Key":"can has","Fragments":["messages,"]},{"Key":"has messages,","Fragments":["sentences"]},{"Key":"messages, sentences","Fragments":["etc,"]},{"Key":"sentences etc,","Fragments":["but"]},{"Key":"etc, but","Fragments":["not"]},{"Key":"My last","Fragments":["point"]},{"Key":"last point","Fragments":["is"]},{"Key":"point is","Fragments":["about"]},{"Key":"is about","Fragments":["the","as","twice","DNA.","5"]},{"Key":"the predicate","Fragments":["methods.","function.","functions","functions","functions"]},{"Key":"predicate methods.","Fragments":["Are"]},{"Key":"methods. Are","Fragments":["`is_`"]},{"Key":"Are `is_`","Fragments":["and"]},{"Key":"`is_` and","Fragments":["`?`","the"]},{"Key":"and `?`","Fragments":["necessary"]},{"Key":"`?` necessary","Fragments":["and"]},{"Key":"necessary and","Fragments":["part","it's"]},{"Key":"and part","Fragments":["of"]},{"Key":"Elixir code","Fragments":["convention?","commonly","typically","that","usually","I've","uses"]},{"Key":"code convention?","Fragments":["I"]},{"Key":"convention? I","Fragments":["will"]},{"Key":"honest, I","Fragments":["don't"]},{"Key":"don't know,","Fragments":["I","I","the"]},{"Key":"know, I","Fragments":["think","write","can't"]},{"Key":"I saw","Fragments":["both","examples","it.","a","them","@elouise's","that","the","the","a","your","this","your","in","that","your","it"]},{"Key":"saw both","Fragments":["(w"]},{"Key":"both (w","Fragments":["and"]},{"Key":"(w and","Fragments":["w/o"]},{"Key":"and w/o","Fragments":["prefixes"]},{"Key":"w/o prefixes","Fragments":["and"]},{"Key":"prefixes and","Fragments":["suffixes)"]},{"Key":"and suffixes)","Fragments":["in"]},{"Key":"suffixes) in","Fragments":["the"]},{"Key":"Elixir source","Fragments":["code."]},{"Key":" Quick","Fragments":["Elixir","follow","cleanup"]},{"Key":"Quick Elixir","Fragments":["tip:"]},{"Key":"defp is_nothing?(str)","Fragments":["when"]},{"Key":"is_nothing?(str) when","Fragments":["str"]},{"Key":"when str","Fragments":["=="]},{"Key":"str ==","Fragments":["nil,"]},{"Key":"== nil,","Fragments":["do:"]},{"Key":"nil, do:","Fragments":["true"]},{"Key":" can","Fragments":["be","be","be","be"]},{"Key":"defp is_nothing?(nil),","Fragments":["do:"]},{"Key":"is_nothing?(nil), do:","Fragments":["true"]},{"Key":"The test","Fragments":["was","passes","suite","in","suite","codes","just","suite","suite","for"]},{"Key":"test was","Fragments":["wrong","a","to"]},{"Key":"wrong to","Fragments":["do"]},{"Key":"do that,","Fragments":["it","because","I","I","or"]},{"Key":"got fixed.","Fragments":["https://github.com/kytrinyx/exercism.io/pull/465"]},{"Key":"passes in","Fragments":["a"]},{"Key":"a null,","Fragments":["which"]},{"Key":"null, which","Fragments":["makes"]},{"Key":"the String.strip/1","Fragments":["barf."]},{"Key":"String.strip/1 barf.","Fragments":["I"]},{"Key":"barf. I","Fragments":["like"]},{"Key":"the ends_with?","Fragments":["though."]},{"Key":"Yeah, defensive","Fragments":["programming"]},{"Key":"defensive programming","Fragments":["is","and"]},{"Key":"programming is","Fragments":["explicitly","hard,"]},{"Key":"explicitly the","Fragments":["wrong","atom"]},{"Key":"wrong thing","Fragments":["to"]},{"Key":"do on","Fragments":["the","line"]},{"Key":"the Erlang","Fragments":["VM,","lists","re","level.","syntax,","Lists","VM.","bag","VM","efficiency","notation","`re`"]},{"Key":"Erlang VM,","Fragments":["you're"]},{"Key":"VM, you're","Fragments":["supposed"]},{"Key":"you're supposed","Fragments":["to","to"]},{"Key":"to let","Fragments":["it","processes","go"]},{"Key":"let it","Fragments":["crash","be"]},{"Key":"it crash","Fragments":["and"]},{"Key":"crash and","Fragments":["have"]},{"Key":"right thing","Fragments":["happen","for"]},{"Key":"thing happen","Fragments":["by"]},{"Key":"happen by","Fragments":["way"]},{"Key":"by way","Fragments":["of"]},{"Key":"the supervision","Fragments":["tree"]},{"Key":"supervision tree","Fragments":["and"]},{"Key":"tree and","Fragments":["linked","need"]},{"Key":"and linked","Fragments":["processes."]},{"Key":"linked processes.","Fragments":["Sent"]},{"Key":"processes. Sent","Fragments":["a"]},{"Key":"Sent a","Fragments":["PR"]},{"Key":"actually surprised","Fragments":["to"]},{"Key":"surprised to","Fragments":["see","realize","find","find"]},{"Key":"for Elixir","Fragments":["and","style","and"]},{"Key":"in other","Fragments":["languages","words","languages,","modules.","languages,","places","languages"]},{"Key":"languages as","Fragments":["well,"]},{"Key":"well, as","Fragments":["it's"]},{"Key":"it's indeed","Fragments":["often"]},{"Key":"indeed often","Fragments":["bad"]},{"Key":"often bad","Fragments":["practice"]},{"Key":"bad practice","Fragments":["to"]},{"Key":"practice to","Fragments":["assume","import","use"]},{"Key":"to assume","Fragments":["\"something"]},{"Key":"assume \"something","Fragments":["or"]},{"Key":"\"something or","Fragments":["`null`\""]},{"Key":"or `null`\"","Fragments":["could"]},{"Key":"`null`\" could","Fragments":["be"]},{"Key":"be passed","Fragments":["to","to","as"]},{"Key":"function (meaning","Fragments":["you've"]},{"Key":"(meaning you've","Fragments":["probably"]},{"Key":"you've probably","Fragments":["done"]},{"Key":"probably done","Fragments":["something"]},{"Key":"done something","Fragments":["weird"]},{"Key":"something weird","Fragments":["before"]},{"Key":"weird before","Fragments":["to"]},{"Key":"before to","Fragments":["be","remove"]},{"Key":"in that","Fragments":["situation).","loop","case.","people","case","number","piece","those","fact.","anonymous","the","case","the","`next_numeral_pair`","`hd`","one","though.","`[1,","you","way","it"]},{"Key":"that situation).","Fragments":["I'm"]},{"Key":"situation). I'm","Fragments":["not"]},{"Key":"strong defender","Fragments":["of"]},{"Key":"defender of","Fragments":["*defensive"]},{"Key":"of *defensive","Fragments":["programming*"]},{"Key":"*defensive programming*","Fragments":["as"]},{"Key":"programming* as","Fragments":["it"]},{"Key":"it often","Fragments":["obfuscates"]},{"Key":"often obfuscates","Fragments":["the"]},{"Key":"obfuscates the","Fragments":["real"]},{"Key":"the real","Fragments":["sources","world","reduce","world"]},{"Key":"real sources","Fragments":["of"]},{"Key":"sources of","Fragments":["problems."]},{"Key":"of problems.","Fragments":["+1"]},{"Key":"problems. +1","Fragments":["for"]},{"Key":"+1 for","Fragments":["asking","using","Elixir"]},{"Key":"for asking","Fragments":["the"]},{"Key":"asking the","Fragments":["removal."]},{"Key":"Well, maybe","Fragments":["you"]},{"Key":"an older","Fragments":["version"]},{"Key":"older version","Fragments":["of"]},{"Key":"tests than","Fragments":["me,"]},{"Key":"than me,","Fragments":["but"]},{"Key":"handle this","Fragments":["case","type"]},{"Key":"case because","Fragments":["of","is","the","it"]},{"Key":"a test","Fragments":["which","for","that","case.","fails)","since","with","for","that","that","that","on","that"]},{"Key":"test which","Fragments":["calls"]},{"Key":"which calls","Fragments":["`Teenager.hey(nil)`…"]},{"Key":"I tracked","Fragments":["down"]},{"Key":"tracked down","Fragments":["the"]},{"Key":"the source","Fragments":["of","word","once","HashDict","key/value","for","order","for","shows"]},{"Key":"source of","Fragments":["that","`nil`s,"]},{"Key":"change and","Fragments":["gave","look","submit"]},{"Key":"and gave","Fragments":["some"]},{"Key":"gave some","Fragments":["reasons"]},{"Key":"some reasons","Fragments":["why"]},{"Key":"reasons why","Fragments":["it"]},{"Key":"why it","Fragments":["should","wasn't","feels","is"]},{"Key":"be removed.","Fragments":["Hopefully"]},{"Key":"removed. Hopefully","Fragments":["the"]},{"Key":"Hopefully the","Fragments":["example"]},{"Key":"example gets","Fragments":["fixed."]},{"Key":"right, the","Fragments":["version"]},{"Key":"tests I","Fragments":["have"]},{"Key":"have definitely","Fragments":["does"]},{"Key":"definitely does","Fragments":["not"]},{"Key":"not check","Fragments":["for"]},{"Key":"for nil.","Fragments":["It's"]},{"Key":"nil. It's","Fragments":["strange"]},{"Key":"It's strange","Fragments":["that"]},{"Key":"strange that","Fragments":["they","`contains_all_chars?`"]},{"Key":"they decided","Fragments":["to"]},{"Key":"that, because","Fragments":["frankly"]},{"Key":"because frankly","Fragments":["it's"]},{"Key":"frankly it's","Fragments":["bad"]},{"Key":"it's bad","Fragments":["to"]},{"Key":"bad to","Fragments":["write"]},{"Key":"write code","Fragments":["like","like"]},{"Key":"code like","Fragments":["that","this","this","that"]},{"Key":"language like","Fragments":["Elixir.","OCaml","OCaml"]},{"Key":"or really","Fragments":["desirable","desirable","part"]},{"Key":"really desirable","Fragments":["to","to"]},{"Key":"desirable to","Fragments":["handle","define"]},{"Key":"handle nil","Fragments":["at"]},{"Key":"nil at","Fragments":["all,"]},{"Key":"at all,","Fragments":["Elixir","there","it","especially","it","looks","but"]},{"Key":"all, Elixir","Fragments":["doesn't"]},{"Key":"Elixir doesn't","Fragments":["really","have","yet","seem","do"]},{"Key":"really have","Fragments":["nullable","the","much","anything","a"]},{"Key":"have nullable","Fragments":["types"]},{"Key":"nullable types","Fragments":["http://en.wikipedia.org/wiki/Nullable_type"]},{"Key":"define behavior","Fragments":["for"]},{"Key":"behavior for","Fragments":["nil,","this"]},{"Key":"for nil,","Fragments":["but","rather"]},{"Key":"nil, but","Fragments":["I","the"]},{"Key":"like everything","Fragments":["else"]},{"Key":"else about","Fragments":["this"]},{"Key":"Your answer","Fragments":["about"]},{"Key":"answer about","Fragments":["discussion"]},{"Key":"about discussion","Fragments":["being"]},{"Key":"discussion being","Fragments":["of"]},{"Key":"being of","Fragments":["little"]},{"Key":"of little","Fragments":["value"]},{"Key":"little value","Fragments":["surprised"]},{"Key":"value surprised","Fragments":["me,"]},{"Key":"surprised me,","Fragments":["so"]},{"Key":"me, so","Fragments":["I","that","I","I'll"]},{"Key":"looked back","Fragments":["at"]},{"Key":"back at","Fragments":["your","my"]},{"Key":"previous submission,","Fragments":["where","but"]},{"Key":"submission, where","Fragments":["I"]},{"Key":" \u0026gt;","Fragments":["I'm","how","Are"]},{"Key":"\u0026gt; I'm","Fragments":["interested"]},{"Key":"at Elixir's","Fragments":["pipeline"]},{"Key":"Elixir's pipeline","Fragments":["operator"]},{"Key":"operator (","Fragments":["`|\u0026gt;`","|\u003e","|\u003e"]},{"Key":"( `|\u0026gt;`","Fragments":[")."]},{"Key":"`|\u0026gt;` ).","Fragments":["That's"]},{"Key":"). That's","Fragments":["the"]},{"Key":"That's the","Fragments":["last","next","core"]},{"Key":"last input","Fragments":["I"]},{"Key":"input I","Fragments":["have."]},{"Key":"I have.","Fragments":["As"]},{"Key":"have. As","Fragments":["someone"]},{"Key":"who is","Fragments":["not"]},{"Key":"an admin,","Fragments":["all"]},{"Key":"admin, all","Fragments":["I"]},{"Key":"all I","Fragments":["can","understand","turned"]},{"Key":"can offer","Fragments":["is"]},{"Key":"offer is","Fragments":["discussion."]},{"Key":"The rubyist","Fragments":["in"]},{"Key":"rubyist in","Fragments":["me"]},{"Key":"in me","Fragments":["likes"]},{"Key":"me likes","Fragments":["the"]},{"Key":"likes the","Fragments":["short-circuited"]},{"Key":"the short-circuited","Fragments":["conditional"]},{"Key":"short-circuited conditional","Fragments":["like"]},{"Key":"conditional like","Fragments":["that,"]},{"Key":"like that,","Fragments":["but","but","or","but","but"]},{"Key":"I pushed","Fragments":["a"]},{"Key":"revision that","Fragments":["explores"]},{"Key":"that explores","Fragments":["your"]},{"Key":"explores your","Fragments":["suggestion."]},{"Key":"that spends","Fragments":["a"]},{"Key":"spends a","Fragments":["lot"]},{"Key":"of time","Fragments":["with","trying","trying","in"]},{"Key":"time with","Fragments":["code","a"]},{"Key":"with code","Fragments":["like"]},{"Key":"languages like","Fragments":["Erlang","Elixir","Russian.","Elixir","Elixir","Elixir","Elixir","Elixir","Elixir"]},{"Key":"like Erlang","Fragments":["or"]},{"Key":"Erlang or","Fragments":["Haskell,"]},{"Key":"or Haskell,","Fragments":["I"]},{"Key":"Haskell, I","Fragments":["have"]},{"Key":"no problem","Fragments":["quickly","with","inlining"]},{"Key":"problem quickly","Fragments":["reading"]},{"Key":"quickly reading","Fragments":["code"]},{"Key":"reading code","Fragments":["like","stuff"]},{"Key":"this whether","Fragments":["or"]},{"Key":"not I","Fragments":["wrote"]},{"Key":"I wrote","Fragments":["it.","my","that","that","the","the","that),","one.","a","this","count/2","my","this.","the"]},{"Key":"wrote it.","Fragments":["I"]},{"Key":"don't expect","Fragments":["to","the","to"]},{"Key":"expect to","Fragments":["get","operate"]},{"Key":"get much","Fragments":["value","simpler"]},{"Key":"much value","Fragments":["out"]},{"Key":"value out","Fragments":["of"]},{"Key":"of discussing","Fragments":["why"]},{"Key":"discussing why","Fragments":["I"]},{"Key":"to not","Fragments":["extract","strip","use","handling","use","call","return","having","require","require","like","really","repeat","perform","use","use","being","spoil","behave","explicitly"]},{"Key":"not extract","Fragments":["functions"]},{"Key":"extract functions","Fragments":["out"]},{"Key":"functions out","Fragments":["of","into"]},{"Key":"of something","Fragments":["this","like","like"]},{"Key":"something this","Fragments":["short"]},{"Key":"this short","Fragments":["when"]},{"Key":"short when","Fragments":["there's"]},{"Key":"there's no","Fragments":["reuse,","replace","\"is_\"","warning","good","need","problem","\"instance\"","real","anchor","other","`List.count`","need","variables","way"]},{"Key":"no reuse,","Fragments":["so"]},{"Key":"reuse, so","Fragments":["please"]},{"Key":"so please","Fragments":["just","do"]},{"Key":"please just","Fragments":["go"]},{"Key":"just go","Fragments":["ahead"]},{"Key":"go ahead","Fragments":["and","and","and","and","and","and"]},{"Key":"ahead and","Fragments":["look","make","make","stuck","submitted","sending","put","used","always","submit","followed"]},{"Key":"next revision","Fragments":["which"]},{"Key":"revision which","Fragments":["should"]},{"Key":"which should","Fragments":["fit","never"]},{"Key":"should fit","Fragments":["the"]},{"Key":"fit the","Fragments":["mold","question","domain","domain","domain"]},{"Key":"the mold","Fragments":["you're"]},{"Key":"mold you're","Fragments":["expecting"]},{"Key":"you're expecting","Fragments":["to"]},{"Key":"expecting to","Fragments":["see."]},{"Key":"a sense","Fragments":["of"]},{"Key":"sense of","Fragments":["how","course"]},{"Key":"code reads","Fragments":["to"]},{"Key":"reads to","Fragments":["me."]},{"Key":"me. If","Fragments":["you"]},{"Key":"you disagree,","Fragments":["you"]},{"Key":"disagree, you","Fragments":["can"]},{"Key":"can solicit","Fragments":["more"]},{"Key":"solicit more","Fragments":["input"]},{"Key":"more input","Fragments":["and","the"]},{"Key":"your thinking.","Fragments":["(There"]},{"Key":"thinking. (There","Fragments":["is"]},{"Key":"(There is","Fragments":["not","also"]},{"Key":"single \"right\"","Fragments":["answer"]},{"Key":"\"right\" answer","Fragments":["here.)"]},{"Key":"help at","Fragments":["all,"]},{"Key":"all, there","Fragments":["would"]},{"Key":"there would","Fragments":["be"]},{"Key":"be way","Fragments":["more","more"]},{"Key":"read to","Fragments":["see","me"]},{"Key":"is going","Fragments":["on.","on.","on","to","on","to","on.","to","to","on."]},{"Key":"going on.","Fragments":["I'll",":)","That","To"]},{"Key":"on. I'll","Fragments":["do"]},{"Key":"I'll do","Fragments":["it","one","so","some","that","some"]},{"Key":"it anyway,","Fragments":["just"]},{"Key":"anyway, just","Fragments":["to"]},{"Key":"just to","Fragments":["move","use","avoid","help","match","return","illustrate","see","pass","track","see","group","check"]},{"Key":"move this","Fragments":["process"]},{"Key":"this process","Fragments":["along,"]},{"Key":"process along,","Fragments":["but"]},{"Key":"along, but","Fragments":["I","still"]},{"Key":"One result","Fragments":["of"]},{"Key":"of keeping","Fragments":["everything","it"]},{"Key":"keeping everything","Fragments":["in"]},{"Key":"everything in","Fragments":["a","the"]},{"Key":"single function","Fragments":["is"]},{"Key":"input data","Fragments":["`s`"]},{"Key":"data `s`","Fragments":["doesn't"]},{"Key":"`s` doesn't","Fragments":["appear"]},{"Key":"doesn't appear","Fragments":["in"]},{"Key":"appear in","Fragments":["your"]},{"Key":"function method","Fragments":["until"]},{"Key":"method until","Fragments":["line"]},{"Key":"until line","Fragments":["19"]},{"Key":"line 19","Fragments":["(the","to","required?","seems"]},{"Key":"19 (the","Fragments":["8th"]},{"Key":"(the 8th","Fragments":["line"]},{"Key":"8th line","Fragments":["of"]},{"Key":"the function),","Fragments":["and"]},{"Key":"function), and","Fragments":["when"]},{"Key":"and when","Fragments":["it","it's","looked","`whatever`"]},{"Key":"it does,","Fragments":["it's","not"]},{"Key":"does, it's","Fragments":["deeply"]},{"Key":"it's deeply","Fragments":["nested"]},{"Key":"deeply nested","Fragments":["(within","--","if-else"]},{"Key":"nested (within","Fragments":["a"]},{"Key":"(within a","Fragments":["`downcase`,"]},{"Key":"a `downcase`,","Fragments":["within"]},{"Key":"`downcase`, within","Fragments":["a"]},{"Key":"within a","Fragments":["`split`,","`foldl`).","method."]},{"Key":"a `split`,","Fragments":["within"]},{"Key":"`split`, within","Fragments":["a"]},{"Key":"a `foldl`).","Fragments":["A"]},{"Key":"`foldl`). A","Fragments":["reader"]},{"Key":"A reader","Fragments":["trying"]},{"Key":"reader trying","Fragments":["to"]},{"Key":"this function","Fragments":["does","to"]},{"Key":"function does","Fragments":["has"]},{"Key":"does has","Fragments":["to"]},{"Key":"scan down,","Fragments":["find"]},{"Key":"down, find","Fragments":["the"]},{"Key":"the `s`,","Fragments":["and"]},{"Key":"`s`, and","Fragments":["try"]},{"Key":"and try","Fragments":["to","to","the","to","the","the","the","the","the","the"]},{"Key":"work themselves","Fragments":["outward"]},{"Key":"themselves outward","Fragments":["from"]},{"Key":"outward from","Fragments":["there."]},{"Key":"Using multiple","Fragments":["named"]},{"Key":"multiple named","Fragments":["functions,"]},{"Key":"functions, each","Fragments":["describing","with"]},{"Key":"each describing","Fragments":["and"]},{"Key":"describing and","Fragments":["handling"]},{"Key":"and handling","Fragments":["one","the"]},{"Key":"handling one","Fragments":["step"]},{"Key":"process, could","Fragments":["make"]},{"Key":"Your `count`","Fragments":["method"]},{"Key":"`count` method","Fragments":["looks","includes,","is","which"]},{"Key":"method looks","Fragments":["like","too","it"]},{"Key":"great use","Fragments":["case","case","of"]},{"Key":"use case","Fragments":["for","for","and","as","insensitive","\"Woah,"]},{"Key":"for elixir's","Fragments":["`|\u0026gt;`"]},{"Key":"elixir's `|\u0026gt;`","Fragments":["operator."]},{"Key":"`|\u0026gt;` operator.","Fragments":["Each","It"]},{"Key":"operator. Each","Fragments":["line"]},{"Key":"Each line","Fragments":["is"]},{"Key":"line is","Fragments":["taking","a","a","a"]},{"Key":"is taking","Fragments":["the"]},{"Key":"taking the","Fragments":["output","time","approach","time"]},{"Key":"previous line","Fragments":["as","as"]},{"Key":"line as","Fragments":["its","the","the","the"]},{"Key":"as its","Fragments":["input."]},{"Key":"its input.","Fragments":["(Markdown"]},{"Key":"input. (Markdown","Fragments":["isn't"]},{"Key":"(Markdown isn't","Fragments":["helping"]},{"Key":"isn't helping","Fragments":["me."]},{"Key":"helping me.","Fragments":["It's"]},{"Key":"me. It's","Fragments":["the","not"]},{"Key":"It's the","Fragments":["`|`","same","way","second","same"]},{"Key":"the `|`","Fragments":["followed"]},{"Key":"`|` followed","Fragments":["by"]},{"Key":"followed by","Fragments":["a","`String.length`","`Dict.put`","a"]},{"Key":"by a","Fragments":["\"greater","comparison","call","newline","boolean","generic","question","comment"]},{"Key":"a \"greater","Fragments":["than\""]},{"Key":"\"greater than\"","Fragments":["symbol.)"]},{"Key":"you try","Fragments":["that,","to","writing","separate","any","it","to"]},{"Key":"try that,","Fragments":["you"]},{"Key":"that, you","Fragments":["would"]},{"Key":"probably want","Fragments":["to","String.graphemes"]},{"Key":"to wrap","Fragments":["the","the","the","the"]},{"Key":"the `Regex.scan`","Fragments":["into","method,","to"]},{"Key":"`Regex.scan` into","Fragments":["a"]},{"Key":"private function","Fragments":["because","with","would",":)","with","to","with","versus","for","in","clauses","if","(you","don't","is"]},{"Key":"function because","Fragments":["the","they","I"]},{"Key":"the parameters","Fragments":["aren't","already","of","to","to","in","in"]},{"Key":"parameters aren't","Fragments":["in"]},{"Key":"aren't in","Fragments":["the"]},{"Key":"order that","Fragments":["`|\u0026gt;`","names"]},{"Key":"that `|\u0026gt;`","Fragments":["expects."]},{"Key":"the tip,","Fragments":["christhekeele."]},{"Key":"tip, christhekeele.","Fragments":["I've"]},{"Key":"christhekeele. I've","Fragments":["submitted"]},{"Key":"uses Enum.reduce","Fragments":["and"]},{"Key":"I aggree","Fragments":["on"]},{"Key":"aggree on","Fragments":["the"]},{"Key":"and chaining.","Fragments":["Updated"]},{"Key":"chaining. Updated","Fragments":["the"]},{"Key":"is much","Fragments":["more","worse.","more","better.","appreciated.","more","better","slower,","more","concise,","preferable.","faster.","too","cleaner"]},{"Key":"extract some","Fragments":["private","of"]},{"Key":"some private","Fragments":["functions","methods","methods"]},{"Key":"functions (`defp`)","Fragments":["from","in"]},{"Key":"(`defp`) from","Fragments":["`count`"]},{"Key":"from `count`","Fragments":["to"]},{"Key":"`count` to","Fragments":["make","tighten"]},{"Key":"and am","Fragments":["marking","still"]},{"Key":"am marking","Fragments":["it"]},{"Key":"marking it","Fragments":["\"looks"]},{"Key":"it \"looks","Fragments":["great!\""]},{"Key":"\"looks great!\"","Fragments":["I"]},{"Key":"great!\" I","Fragments":["wonder,"]},{"Key":"I wonder,","Fragments":["however,"]},{"Key":"wonder, however,","Fragments":["if"]},{"Key":"however, if","Fragments":["the"]},{"Key":"the `match`","Fragments":["function","function's"]},{"Key":"`match` function","Fragments":["would","private,"]},{"Key":"read more","Fragments":["naturally","carefully.","clearly"]},{"Key":"more naturally","Fragments":["if","to"]},{"Key":"naturally if","Fragments":["it"]},{"Key":"it were","Fragments":["rearranged","a","in","\"real\",","me"]},{"Key":"were rearranged","Fragments":["to"]},{"Key":"rearranged to","Fragments":["`word_list"]},{"Key":"to `word_list","Fragments":["|\u0026gt;"]},{"Key":"`word_list |\u0026gt;","Fragments":["Enum.filter...`."]},{"Key":"function name","Fragments":["`process`",":)","is","from","makes","\"build_hash\".","I","either,","like","'contained_within?'","without"]},{"Key":"name `process`","Fragments":["is"]},{"Key":"`process` is","Fragments":["mysterious."]},{"Key":"Does your","Fragments":["algorithm","test"]},{"Key":"your algorithm","Fragments":["inside","mostly"]},{"Key":"algorithm inside","Fragments":["of"]},{"Key":"of `process`","Fragments":["iterate"]},{"Key":"`process` iterate","Fragments":["over"]},{"Key":"iterate over","Fragments":["every","the","it.","the","the","the"]},{"Key":"over every","Fragments":["element"]},{"Key":"every element","Fragments":["of"]},{"Key":"element of","Fragments":["`entries`","`entries`?","the","a"]},{"Key":"of `entries`","Fragments":["(through"]},{"Key":"`entries` (through","Fragments":["`Enum.count`),"]},{"Key":"(through `Enum.count`),","Fragments":["for"]},{"Key":"`Enum.count`), for","Fragments":["each"]},{"Key":"each element","Fragments":["of","in","in","in","in"]},{"Key":"of `entries`?","Fragments":["That"]},{"Key":"`entries`? That","Fragments":["doesn't"]},{"Key":"doesn't seem","Fragments":["like","to","like","like","unreasonable","to","to","to","to","quite","right,","to"]},{"Key":"it will","Fragments":["work","help","be","return","basically","not","have","return","be","efficiently","fail","get","eventually","help","cause","be","consume","do","take","take","do","pass","trigger","go","be","fail","do","work","be","be"]},{"Key":"will work","Fragments":["well","to","incorrectly","correctly","on","on","fine","as","just"]},{"Key":"work well","Fragments":["for","in","with","in"]},{"Key":"well for","Fragments":["large","binaries","this","concat"]},{"Key":"for large","Fragments":["bodies"]},{"Key":"large bodies","Fragments":["of"]},{"Key":"bodies of","Fragments":["text.","the"]},{"Key":"of text.","Fragments":["Having","So"]},{"Key":"text. Having","Fragments":["that"]},{"Key":"Having that","Fragments":["anonymous"]},{"Key":"that anonymous","Fragments":["function","function"]},{"Key":"function refer","Fragments":["back"]},{"Key":"refer back","Fragments":["to"]},{"Key":"the global","Fragments":["count"]},{"Key":"global count","Fragments":["`entries`"]},{"Key":"count `entries`","Fragments":["that"]},{"Key":"`entries` that","Fragments":["wasn't"]},{"Key":"wasn't passed","Fragments":["in"]},{"Key":"passed in","Fragments":["as","as","the","`nil`."]},{"Key":"a parameter","Fragments":["also","and","list)."]},{"Key":"parameter also","Fragments":["seems"]},{"Key":"also seems","Fragments":["unusual.","strange"]},{"Key":"consider giving","Fragments":["each"]},{"Key":"giving each","Fragments":["of"]},{"Key":"the steps","Fragments":["in","of","are"]},{"Key":"steps in","Fragments":["`count`"]},{"Key":"in `count`","Fragments":["a","and","when","right","is"]},{"Key":"`count` a","Fragments":["private","diffferent"]},{"Key":"a descriptive","Fragments":["name."]},{"Key":"descriptive name.","Fragments":["That"]},{"Key":"name. That","Fragments":["could"]},{"Key":"That could","Fragments":["make"]},{"Key":"make `count`","Fragments":["very","tail"]},{"Key":"`count` very","Fragments":["easy"]},{"Key":"very easy","Fragments":["to","to","to","to","to"]},{"Key":"read, especially","Fragments":["with"]},{"Key":"your use","Fragments":["of","of","of"]},{"Key":"this shaped","Fragments":["up."]},{"Key":"shaped up.","Fragments":["Looks"]},{"Key":"up. Looks","Fragments":["great."]},{"Key":"great. I've","Fragments":["always","enjoyed"]},{"Key":"I've always","Fragments":["preferred","seen"]},{"Key":"always preferred","Fragments":["multiline","if"]},{"Key":"preferred multiline","Fragments":["method"]},{"Key":"multiline method","Fragments":["definitions"]},{"Key":"method definitions","Fragments":["but","reads"]},{"Key":"definitions but","Fragments":["these"]},{"Key":"but these","Fragments":["are","are"]},{"Key":"are tiny","Fragments":["and"]},{"Key":"tiny and","Fragments":["the"]},{"Key":"the code's","Fragments":["still"]},{"Key":"code's still","Fragments":["very"]},{"Key":"very clean.","Fragments":["Think"]},{"Key":"clean. Think","Fragments":["it's"]},{"Key":"Think it's","Fragments":["golden."]},{"Key":"making each","Fragments":["of"]},{"Key":"steps of","Fragments":["your","splitting"]},{"Key":"your `count`","Fragments":["into","method"]},{"Key":"`count` into","Fragments":["named"]},{"Key":"into named","Fragments":["private","functions,","private","functions,"]},{"Key":"functions? Within","Fragments":["`words"]},{"Key":"Within `words","Fragments":["=`,"]},{"Key":"`words =`,","Fragments":["you"]},{"Key":"=`, you","Fragments":["are"]},{"Key":"both a","Fragments":["split/scan","case","sublist"]},{"Key":"a split/scan","Fragments":["and"]},{"Key":"split/scan and","Fragments":["a"]},{"Key":"a downcase,","Fragments":["and"]},{"Key":"downcase, and","Fragments":["then"]},{"Key":"a `map`","Fragments":["operation"]},{"Key":"`map` operation","Fragments":["to"]},{"Key":"operation to","Fragments":["turn","its"]},{"Key":"to turn","Fragments":["the","it","everything"]},{"Key":"turn the","Fragments":["list","string"]},{"Key":"list into","Fragments":["an"]},{"Key":"an enumerable.","Fragments":["The"]},{"Key":"enumerable. The","Fragments":["actual"]},{"Key":"The actual","Fragments":["sequence"]},{"Key":"actual sequence","Fragments":["of"]},{"Key":"those operations","Fragments":["starts","would","into"]},{"Key":"operations starts","Fragments":["to"]},{"Key":"starts to","Fragments":["get"]},{"Key":"get hidden","Fragments":["by"]},{"Key":"hidden by","Fragments":["the"]},{"Key":"the nesting.","Fragments":["Are"]},{"Key":"nesting. Are","Fragments":["you"]},{"Key":"`|\u0026gt;` operator","Fragments":["in"]},{"Key":"operator in","Fragments":["elixir?","your","code","my","other","count/1.","count"]},{"Key":" Within","Fragments":["your"]},{"Key":"Within your","Fragments":["`reduce`,"]},{"Key":"your `reduce`,","Fragments":["the"]},{"Key":"`reduce`, the","Fragments":["anonymous"]},{"Key":"are concise,","Fragments":["but"]},{"Key":"they hide","Fragments":["the"]},{"Key":"the simplicity","Fragments":["of"]},{"Key":"simplicity of","Fragments":["what's"]},{"Key":"what's actually","Fragments":["happening"]},{"Key":"actually happening","Fragments":["there."]},{"Key":"happening there.","Fragments":["Even"]},{"Key":"there. Even","Fragments":["wrapping"]},{"Key":"Even wrapping","Fragments":["that"]},{"Key":"wrapping that","Fragments":["whole"]},{"Key":"that whole","Fragments":["thing"]},{"Key":"whole thing","Fragments":["into","is","on","in"]},{"Key":"thing into","Fragments":["a"]},{"Key":"first stab","Fragments":["at"]},{"Key":"stab at","Fragments":["elixir,","it,","it,"]},{"Key":"at elixir,","Fragments":["it"]},{"Key":"elixir, it","Fragments":["looks"]},{"Key":"looks great.","Fragments":["(We're","Good","It's"]},{"Key":"great. (We're","Fragments":["all"]},{"Key":"(We're all","Fragments":["new"]},{"Key":"to elixir.)","Fragments":["And"]},{"Key":"elixir.) And","Fragments":["I"]},{"Key":"I predict","Fragments":["that"]},{"Key":"predict that","Fragments":["you"]},{"Key":"you will","Fragments":["love","miss","get","aromatically","first","notice","be","be"]},{"Key":"will love","Fragments":["`|\u003e`."]},{"Key":"two things","Fragments":["that","you",".But","that","opens","and"]},{"Key":"might benefit","Fragments":["from","from"]},{"Key":"benefit from","Fragments":["being","being","reading","`|\u003e`"]},{"Key":"from being","Fragments":["named","implemented"]},{"Key":"being named","Fragments":["private"]},{"Key":"functions: the","Fragments":["splitting"]},{"Key":"the splitting","Fragments":["up"]},{"Key":"into words","Fragments":["in","with"]},{"Key":"words in","Fragments":["`count`","the","their","non-Latin","the"]},{"Key":"`count` and","Fragments":["the","`occurrences`."]},{"Key":"actual incrementing","Fragments":["done"]},{"Key":"incrementing done","Fragments":["in"]},{"Key":"a personal","Fragments":["preference","preference","taste","preference,","preference."]},{"Key":"preference for","Fragments":["the","naming"]},{"Key":"condition that","Fragments":["ends"]},{"Key":"that ends","Fragments":["a"]},{"Key":"ends a","Fragments":["recursive"]},{"Key":"recursive algorithm","Fragments":["being"]},{"Key":"algorithm being","Fragments":["placed"]},{"Key":"being placed","Fragments":["first,"]},{"Key":"placed first,","Fragments":["or"]},{"Key":"first, or","Fragments":["at"]},{"Key":"or at","Fragments":["least","least","least","least"]},{"Key":"least ahead","Fragments":["of"]},{"Key":"ahead of","Fragments":["the","you."]},{"Key":"the general","Fragments":["case.","one:","case","question","category","erlang","erlang","\"shape\"","idea"]},{"Key":"general case.","Fragments":["Your"]},{"Key":"case. Your","Fragments":["ordering"]},{"Key":"Your ordering","Fragments":["does"]},{"Key":"ordering does","Fragments":["seem"]},{"Key":"seem to","Fragments":["work","fit","be","have","be","be","belong","be","help","get","have","add","have","give","work","stop","force","be","match","work.","have","remember","usually","have","finish,","be","work."]},{"Key":"work fine","Fragments":["here,","between","and","for"]},{"Key":"fine here,","Fragments":["however."]},{"Key":"your feed","Fragments":["back!"]},{"Key":"started with","Fragments":["elixir,","just","the","`reverse`,"]},{"Key":"with elixir,","Fragments":["so","so","I'm"]},{"Key":"elixir, so","Fragments":["`acc`","I","I","I'm","you"]},{"Key":"so `acc`","Fragments":["and"]},{"Key":"`acc` and","Fragments":["`x`"]},{"Key":"and `x`","Fragments":["are"]},{"Key":"`x` are","Fragments":["just"]},{"Key":"just copy","Fragments":["paste"]},{"Key":"copy paste","Fragments":["from"]},{"Key":"paste from","Fragments":["docs,"]},{"Key":"from docs,","Fragments":["sorry"]},{"Key":"docs, sorry","Fragments":["for"]},{"Key":"sorry for","Fragments":["this","the"]},{"Key":"Will check","Fragments":["on"]},{"Key":"The construction","Fragments":["`(acc[x]"]},{"Key":"construction `(acc[x]","Fragments":["||"]},{"Key":"`(acc[x] ||","Fragments":["0)"]},{"Key":"|| 0)","Fragments":["+"]},{"Key":"0) +","Fragments":["1`"]},{"Key":"+ 1`","Fragments":["is","into","on","in","is","is","is","is","is","is","is","is","is","is","is","is","is","is"]},{"Key":"1` is","Fragments":["clever.","computed,","computed,","computed,","computed,","computed,","computed,","computed,","computed,","computed,","computed,","computed,","computed,","computed,","computed,"]},{"Key":"is clever.","Fragments":["Should"]},{"Key":"clever. Should","Fragments":["it"]},{"Key":"Should it","Fragments":["be"]},{"Key":"that describes","Fragments":["what","some"]},{"Key":"describes what","Fragments":["you're"]},{"Key":"can stomach","Fragments":["`acc`"]},{"Key":"stomach `acc`","Fragments":["in"]},{"Key":"`acc` in","Fragments":["line"]},{"Key":"line 5,","Fragments":["but","hash_dict","didn't"]},{"Key":"5, but","Fragments":["you"]},{"Key":"consider making","Fragments":["`x`"]},{"Key":"making `x`","Fragments":["into"]},{"Key":"`x` into","Fragments":["something"]},{"Key":"something descriptive","Fragments":["of"]},{"Key":"descriptive of","Fragments":["what","the"]},{"Key":"those atomic","Fragments":["units"]},{"Key":"atomic units","Fragments":["is."]},{"Key":"I'm guessing","Fragments":["that","you","this","you","I","it"]},{"Key":"guessing that","Fragments":["you"]},{"Key":"using `Regex.scan`","Fragments":["rather","instead","was","combined","be","method"]},{"Key":"`Regex.scan` rather","Fragments":["than"]},{"Key":"than `String.split`","Fragments":["to","for"]},{"Key":"`String.split` to","Fragments":["deal","not"]},{"Key":"with punctuation","Fragments":["within"]},{"Key":"punctuation within","Fragments":["sentences."]},{"Key":"within sentences.","Fragments":["The"]},{"Key":"sentences. The","Fragments":["resulting"]},{"Key":"The resulting","Fragments":["function"]},{"Key":"resulting function","Fragments":["is"]},{"Key":"pretty deeply","Fragments":["nested"]},{"Key":"nested --","Fragments":["starting"]},{"Key":"-- starting","Fragments":["with"]},{"Key":"starting with","Fragments":["`downcase`,","the"]},{"Key":"with `downcase`,","Fragments":["then"]},{"Key":"`downcase`, then","Fragments":["out"]},{"Key":"then out","Fragments":["to","to"]},{"Key":"to `scan`,","Fragments":["then"]},{"Key":"`scan`, then","Fragments":["out"]},{"Key":"to `flatten`.","Fragments":["Are"]},{"Key":"`flatten`. Are","Fragments":["you"]},{"Key":"how elixir's","Fragments":["`|\u003e`"]},{"Key":"elixir's `|\u003e`","Fragments":["operator"]},{"Key":"operator can","Fragments":["help"]},{"Key":"can help","Fragments":["you","your","you","you"]},{"Key":"you write","Fragments":["the","it","line","this","out","out","`func","it"]},{"Key":"same process","Fragments":["in"]},{"Key":"process in","Fragments":["a"]},{"Key":"Wouldn't it","Fragments":["be","be","be","be","be","be","be"]},{"Key":"be simpler","Fragments":["if","and","than","to"]},{"Key":"simpler if","Fragments":["you"]},{"Key":"just found","Fragments":["a"]},{"Key":"of proper","Fragments":["words,"]},{"Key":"proper words,","Fragments":["without"]},{"Key":"words, without","Fragments":["cleaning"]},{"Key":"without cleaning","Fragments":["up"]},{"Key":"and downcasing","Fragments":["each"]},{"Key":"downcasing each","Fragments":["word?","word"]},{"Key":" `Regex.run`","Fragments":["could"]},{"Key":"`Regex.run` could","Fragments":["help"]},{"Key":"If there","Fragments":["are","aren't","are","is"]},{"Key":"are elixir","Fragments":["`Enum`"]},{"Key":"elixir `Enum`","Fragments":["methods"]},{"Key":"`Enum` methods","Fragments":["that"]},{"Key":"can accomplish","Fragments":["this","what"]},{"Key":"this more","Fragments":["easily","readable:"]},{"Key":"more easily","Fragments":["than","written","change","and"]},{"Key":"easily than","Fragments":["recursion,"]},{"Key":"than recursion,","Fragments":["then","or"]},{"Key":"recursion, then","Fragments":["I'd"]},{"Key":"then I'd","Fragments":["love","urge"]},{"Key":"I'd love","Fragments":["to","feedback","to","to","your","feedback","to"]},{"Key":"add them","Fragments":["to","to"]},{"Key":"I'm tempted","Fragments":["to","to"]},{"Key":"tempted to","Fragments":["add","submit"]},{"Key":"guard condition","Fragments":["on"]},{"Key":"condition on","Fragments":["the"]},{"Key":"last `sing/2`","Fragments":["method"]},{"Key":"`sing/2` method","Fragments":["`when"]},{"Key":"method `when","Fragments":["starting"]},{"Key":"`when starting","Fragments":["\u003e="]},{"Key":"starting \u003e=","Fragments":["0"]},{"Key":"\u003e= 0","Fragments":["and"]},{"Key":"0 and","Fragments":["ending","1"]},{"Key":"and ending","Fragments":["\u003e="]},{"Key":"ending \u003e=","Fragments":["0`."]},{"Key":"\u003e= 0`.","Fragments":["But"]},{"Key":"0`. But","Fragments":["I'll"]},{"Key":"But I'll","Fragments":["refrain","do"]},{"Key":"I'll refrain","Fragments":["from"]},{"Key":"refrain from","Fragments":["submitting"]},{"Key":"from submitting","Fragments":["another"]},{"Key":"submitting another","Fragments":["iteration"]},{"Key":"another iteration","Fragments":["unless","that","based","with"]},{"Key":"iteration unless","Fragments":["there"]},{"Key":"are other","Fragments":["things","parameters"]},{"Key":"other things","Fragments":["I","you","as"]},{"Key":"should improve","Fragments":["or"]},{"Key":"improve or","Fragments":["try"]},{"Key":"or try","Fragments":["out."]},{"Key":"Haha, nice","Fragments":["trick"]},{"Key":"nice trick","Fragments":["indeed,","I"]},{"Key":"trick indeed,","Fragments":["I"]},{"Key":"indeed, I","Fragments":["chosed"]},{"Key":"I chosed","Fragments":["`_otherwise`,"]},{"Key":"chosed `_otherwise`,","Fragments":["but"]},{"Key":"`_otherwise`, but","Fragments":["I"]},{"Key":"point I","Fragments":["think"]},{"Key":"A little","Fragments":["trick","trick","tip:","tip:","birdie"]},{"Key":"little trick","Fragments":["I've","for","I"]},{"Key":"trick I've","Fragments":["learned"]},{"Key":"I've learned","Fragments":["and","a","a"]},{"Key":"learned and","Fragments":["that","adapted"]},{"Key":"to share","Fragments":["with","an"]},{"Key":"share with","Fragments":["you"]},{"Key":"you and","Fragments":["that","abstracted","your"]},{"Key":"will help","Fragments":["improve","you","simplify","with","to"]},{"Key":"help improve","Fragments":["already","this"]},{"Key":"improve already","Fragments":["good","good"]},{"Key":"already good","Fragments":["code","readability."]},{"Key":"code readability:","Fragments":["check"]},{"Key":"readability: check","Fragments":["what"]},{"Key":"check what","Fragments":["happens"]},{"Key":"what happens","Fragments":["when","if","if","when","with","with","with","with","with","with","if"]},{"Key":"happens when","Fragments":["replacing","the","there","text","you","you","you","you","you","you","you"]},{"Key":"when replacing","Fragments":["```"]},{"Key":"replacing ```","Fragments":["true"]},{"Key":"``` true","Fragments":["```","```","```"]},{"Key":"true ```","Fragments":["with","with","in","is"]},{"Key":"``` with","Fragments":["```","something"]},{"Key":"with ```","Fragments":["\"_whatever\""]},{"Key":"``` \"_whatever\"","Fragments":["```","```","```"]},{"Key":"\"_whatever\" ```","Fragments":[":)","or","or"]},{"Key":"The hey","Fragments":["method"]},{"Key":"method as","Fragments":["you","a","`count/1`"]},{"Key":"have defined","Fragments":["it"]},{"Key":"defined it","Fragments":["is"]},{"Key":"is responsible","Fragments":["for"]},{"Key":"responsible for","Fragments":["a","determining","that--so","singing"]},{"Key":"- normalizing","Fragments":["the"]},{"Key":"normalizing the","Fragments":["phrase"]},{"Key":"- classifying","Fragments":["phrase"]},{"Key":"- responding","Fragments":["to"]},{"Key":"responding to","Fragments":["the"]},{"Key":"find that","Fragments":["the","the","makes","elixir","elixir's","you","there","in","it's","specification?","nugget."]},{"Key":"and easier","Fragments":["to","to","to","to","to"]},{"Key":"to digest","Fragments":["if"]},{"Key":"digest if","Fragments":["you"]},{"Key":"you break","Fragments":["apart","any"]},{"Key":"break apart","Fragments":["those"]},{"Key":"apart those","Fragments":["responsibilities"]},{"Key":"those responsibilities","Fragments":["into"]},{"Key":"responsibilities into","Fragments":["separate"]},{"Key":"with not","Fragments":["doing","wanting"]},{"Key":"not doing","Fragments":["the","it","things","what"]},{"Key":"the downcase","Fragments":["in","call","would","and","first","before"]},{"Key":"downcase in","Fragments":["`list_to_counted_hash`","`are_not_identical`"]},{"Key":"in `list_to_counted_hash`","Fragments":["and"]},{"Key":"`list_to_counted_hash` and","Fragments":["i'm"]},{"Key":"and i'm","Fragments":["fixing"]},{"Key":"i'm fixing","Fragments":["that."]},{"Key":"using 0.10.0","Fragments":["so"]},{"Key":"0.10.0 so","Fragments":["I"]},{"Key":"new anonymous","Fragments":["function","function","function","function"]},{"Key":"function syntax.","Fragments":["Also,"]},{"Key":"syntax. Also,","Fragments":["I"]},{"Key":"find any","Fragments":["document","call","non-regex","resources"]},{"Key":"any document","Fragments":["on"]},{"Key":"document on","Fragments":["the"]},{"Key":"new syntax.","Fragments":["If","As"]},{"Key":"syntax. If","Fragments":["you"]},{"Key":"a link","Fragments":["handy,","to","to","how"]},{"Key":"link handy,","Fragments":["do"]},{"Key":"handy, do","Fragments":["you"]},{"Key":"mind posting","Fragments":["it?"]},{"Key":"little easier","Fragments":["to","to","to","on","to","to"]},{"Key":"read when","Fragments":["pattern"]},{"Key":"when pattern","Fragments":["matches","matching"]},{"Key":"matches for","Fragments":["the","`String.upcase/1`","every"]},{"Key":"function are","Fragments":["contiguous."]},{"Key":"are contiguous.","Fragments":["Looks"]},{"Key":"contiguous. Looks","Fragments":["good"]},{"Key":"really learn","Fragments":["a"]},{"Key":"learn a","Fragments":["lot","lot"]},{"Key":"lot by","Fragments":["following"]},{"Key":"by following","Fragments":["the"]},{"Key":"following the","Fragments":["advices.","code","single","crowd"]},{"Key":"the advices.","Fragments":["I"]},{"Key":"advices. I","Fragments":["just"]},{"Key":"right Elixir","Fragments":["tools.","docs"]},{"Key":"Elixir tools.","Fragments":["What"]},{"Key":"tools. What","Fragments":["do"]},{"Key":"of modularizing","Fragments":["your"]},{"Key":"modularizing your","Fragments":["code"]},{"Key":"code a","Fragments":["little","little","bit.","bit","lot","lot","bit","bit"]},{"Key":"little bit?","Fragments":["It"]},{"Key":"bit? It","Fragments":["might"]},{"Key":"help with","Fragments":["the","that.","conciseness:","simplifying.","both","that."]},{"Key":"the duplication","Fragments":["you","from","in","of"]},{"Key":"duplication you","Fragments":["have"]},{"Key":"lines 3","Fragments":["\u0026amp;"]},{"Key":"3 \u0026amp;","Fragments":["10."]},{"Key":"I've added","Fragments":["more","parentheses"]},{"Key":"added more","Fragments":["anonymous"]},{"Key":"more anonymous","Fragments":["functions"]},{"Key":"functions syntax","Fragments":["sugar."]},{"Key":"syntax sugar.","Fragments":["Not"]},{"Key":"sugar. Not","Fragments":["sure"]},{"Key":"adds to","Fragments":["readability,","the"]},{"Key":"to readability,","Fragments":["but"]},{"Key":"readability, but","Fragments":["it","I","here","I'm"]},{"Key":"it sure","Fragments":["shortens","is"]},{"Key":"sure shortens","Fragments":["the"]},{"Key":"shortens the","Fragments":["code."]},{"Key":"The Dict.update","Fragments":["method"]},{"Key":"Dict.update method","Fragments":["can"]},{"Key":"method can","Fragments":["help","be","abstract"]},{"Key":"help your","Fragments":["reduce"]},{"Key":"your reduce","Fragments":["here","function."]},{"Key":"here a","Fragments":["little."]},{"Key":"Also, if","Fragments":["you've","you're"]},{"Key":"if you've","Fragments":["got","refactored"]},{"Key":"got Elixir","Fragments":["0.10.1,"]},{"Key":"Elixir 0.10.1,","Fragments":["check"]},{"Key":"0.10.1, check","Fragments":["out"]},{"Key":"function syntax","Fragments":["sugar!","to","for","(`fn`)","(do:","in","is"]},{"Key":"Yeah -","Fragments":["I"]},{"Key":"had the","Fragments":["same","3","equivalent","attribute","bit","parameters","same","possibility"]},{"Key":"same concerns","Fragments":["when"]},{"Key":"concerns when","Fragments":["I"]},{"Key":"wrote my","Fragments":["anagram","default"]},{"Key":"my anagram","Fragments":["exercise"]},{"Key":"anagram exercise","Fragments":["in"]},{"Key":"in ruby,","Fragments":["and"]},{"Key":"ruby, and","Fragments":["initially"]},{"Key":"and initially","Fragments":["was"]},{"Key":"initially was","Fragments":["memoizing"]},{"Key":"was memoizing","Fragments":["the"]},{"Key":"memoizing the","Fragments":["sorted"]},{"Key":"the sorted","Fragments":["word","arrays","downcased","downcased","anagram","array","arrays","downcased","downcased","and"]},{"Key":"sorted word","Fragments":["(ruby"]},{"Key":"word (ruby","Fragments":["version"]},{"Key":"(ruby version","Fragments":["has"]},{"Key":"version has","Fragments":["the"]},{"Key":"has the","Fragments":["word","wrong","[:math](http://www.erlang.org/doc/man/math.html)","extra","wrap/unwrap","same","benefit"]},{"Key":"word passed","Fragments":["into"]},{"Key":"passed into","Fragments":["the","the"]},{"Key":"the Anagram","Fragments":["class"]},{"Key":"Anagram class","Fragments":["instantiation),"]},{"Key":"class instantiation),","Fragments":["but"]},{"Key":"instantiation), but","Fragments":["I"]},{"Key":"I took","Fragments":["out","another","a","this","a","this","my","care","the"]},{"Key":"took out","Fragments":["the"]},{"Key":"the memoization","Fragments":["as"]},{"Key":"memoization as","Fragments":["\"premature"]},{"Key":"as \"premature","Fragments":["optimization\""]},{"Key":"\"premature optimization\"","Fragments":["because"]},{"Key":"optimization\" because","Fragments":["it"]},{"Key":"it made","Fragments":["everything","the","sense."]},{"Key":"made everything","Fragments":["more"]},{"Key":"everything more","Fragments":["readable.","readable,"]},{"Key":"the issue","Fragments":["with"]},{"Key":"issue with","Fragments":["the","it","`concat`","`concat`","this","the","the"]},{"Key":"the array","Fragments":["of","lengths"]},{"Key":"array of","Fragments":["arrys","characters,","words","numbers."]},{"Key":"of arrys","Fragments":["+"]},{"Key":"arrys +","Fragments":["list/binary"]},{"Key":"+ list/binary","Fragments":["now."]},{"Key":"list/binary now.","Fragments":["I"]},{"Key":"now. I","Fragments":["think","went"]},{"Key":"the nature","Fragments":["of","of"]},{"Key":"regex you're","Fragments":["using."]},{"Key":"you're using.","Fragments":["Does","The"]},{"Key":"using. Does","Fragments":["something"]},{"Key":"Does something","Fragments":["like"]},{"Key":"like `%r/[a-z0-9]+/`","Fragments":["prevent"]},{"Key":"`%r/[a-z0-9]+/` prevent","Fragments":["the"]},{"Key":"prevent the","Fragments":["issue?","infinite"]},{"Key":"the issue?","Fragments":["Alternatively,","If"]},{"Key":"issue? Alternatively,","Fragments":["look"]},{"Key":"Alternatively, look","Fragments":["in"]},{"Key":"Looking good!","Fragments":["If"]},{"Key":"good! If","Fragments":["you're"]},{"Key":"you're running","Fragments":["Elixir","`list_of_words`","elixir"]},{"Key":"running Elixir","Fragments":["0.10.1"]},{"Key":"new shorthand","Fragments":["syntax"]},{"Key":"shorthand syntax","Fragments":["for","for","for"]},{"Key":"syntax for","Fragments":["anonymous","one-liner","\u0026amp;","the","getting","expressing","letters","composing","small","the","the","function","pattern","`if`,","referring","referring","the","accumulators","very","the","the"]},{"Key":"I'd also","Fragments":["try","like","consider"]},{"Key":"also try","Fragments":["to","to"]},{"Key":"to reduce","Fragments":["the","your","the","the","the","explicit","verbosity:","the","duplication","is","the"]},{"Key":"reduce the","Fragments":["code","length","number","noise","number","initial","verbosity,","verbosity","number"]},{"Key":"that loop","Fragments":["on"]},{"Key":"loop on","Fragments":["line","\u003ccode\u003esing(2,"]},{"Key":"10 by","Fragments":["moving"]},{"Key":"downcase call","Fragments":["somewhere"]},{"Key":"call somewhere","Fragments":["else"]},{"Key":"somewhere else","Fragments":["before"]},{"Key":"else before","Fragments":["your"]},{"Key":"before your","Fragments":["sentence"]},{"Key":"your sentence","Fragments":["gets"]},{"Key":"sentence gets","Fragments":["split"]},{"Key":"gets split","Fragments":["by"]},{"Key":"split by","Fragments":["Regex.scan."]},{"Key":"reason I","Fragments":["cannot","left","mentioned","don't","still","didn't","had","abandoned","never"]},{"Key":"cannot pass","Fragments":["function"]},{"Key":"pass function","Fragments":["as"]},{"Key":"function as","Fragments":["an","an","well,","long","a","a","input","being"]},{"Key":"an argument,","Fragments":["as"]},{"Key":"argument, as","Fragments":["described"]},{"Key":"as described","Fragments":["in"]},{"Key":"described in","Fragments":["documentation."]},{"Key":"in documentation.","Fragments":["And"]},{"Key":"documentation. And","Fragments":["I"]},{"Key":"of really","Fragments":["need","terse"]},{"Key":"need this.","Fragments":[":)"]},{"Key":"example, `a","Fragments":["="]},{"Key":"`a =","Fragments":["\u0026amp;String.strip/1`"]},{"Key":"= \u0026amp;String.strip/1`","Fragments":["gives"]},{"Key":"\u0026amp;String.strip/1` gives","Fragments":["`invalid"]},{"Key":"gives `invalid","Fragments":["token`"]},{"Key":"`invalid token`","Fragments":["error."]},{"Key":"token` error.","Fragments":["Is"]},{"Key":"error. Is","Fragments":["there"]},{"Key":"to reference","Fragments":["functions?","a","a","the"]},{"Key":" /me","Fragments":["went","slaps"]},{"Key":"/me went","Fragments":["reading"]},{"Key":"went reading","Fragments":["docs"]},{"Key":"get it.","Fragments":["It"]},{"Key":"it. It","Fragments":["would","did"]},{"Key":"defmodule Anagram","Fragments":["do","do"]},{"Key":"match(word, anagrams)","Fragments":["do"]},{"Key":" anagrams","Fragments":["|\u0026gt;","|\u0026gt;"]},{"Key":"anagrams |\u0026gt;","Fragments":["Enum.filter","Enum.filter"]},{"Key":"|\u0026gt; Enum.filter","Fragments":["anagrams?(word,","fn"]},{"Key":"Enum.filter anagrams?(word,","Fragments":["\u0026amp;1)"]},{"Key":"defp anagrams?(word1,","Fragments":["word2)","word1),","word2),"]},{"Key":"anagrams?(word1, word2)","Fragments":["do"]},{"Key":" sort(word1)","Fragments":["=="]},{"Key":"sort(word1) ==","Fragments":["sort(word2)"]},{"Key":"defp sort(word)","Fragments":["do"]},{"Key":" word","Fragments":["|\u0026gt;","|\u0026gt;"]},{"Key":"word |\u0026gt;","Fragments":["String.codepoints","charset","String.downcase","String.downcase`","String.downcase`"]},{"Key":" |\u0026gt;","Fragments":["Enum.sort","Enum.reduce(HashDict.new,","String.codepoints","Enum.sort","Enum.filter(fn(test_match)","String.split","Enum.uniq","Enum.map(fn(x)","HashDict.new","List.foldl(","Enum.filter("]},{"Key":"I agree,","Fragments":["it's","in","I","I","only"]},{"Key":"agree, it's","Fragments":["a"]},{"Key":"readable. The","Fragments":["cons,"]},{"Key":"The cons,","Fragments":["though:"]},{"Key":"cons, though:","Fragments":["we"]},{"Key":"though: we","Fragments":["sort"]},{"Key":"we sort","Fragments":["initial","the"]},{"Key":"sort initial","Fragments":["word"]},{"Key":"initial word","Fragments":["every"]},{"Key":"word every","Fragments":["time"]},{"Key":"time for","Fragments":["every","\u0026amp;1","these"]},{"Key":"for every","Fragments":["possible","item","responsibility","iteration","single","character.","line","candidate).","possibility.","nucleotide.","letter","candidate,","parent,","call"]},{"Key":"every possible","Fragments":["anagram"]},{"Key":"possible anagram","Fragments":["in"]},{"Key":"anagram in","Fragments":["the"]},{"Key":"that module","Fragments":["and","throughout"]},{"Key":"module and","Fragments":["it","a","the","a","required","not","reduce","that","refactored","`|\u003e`"]},{"Key":"it has","Fragments":["all","a","`?`","to","to","a","to","something","to","to","to","something","that","to"]},{"Key":"has all","Fragments":["the"]},{"Key":"methods i","Fragments":["was"]},{"Key":"Looks good,","Fragments":["but","but","you've","aside","aside","any","nice"]},{"Key":"but can","Fragments":["you"]},{"Key":"you replace","Fragments":["the","the"]},{"Key":"replace the","Fragments":["first","combination","String.length","complicated","`Regex.replace`"]},{"Key":"first two","Fragments":["conditions","attempts"]},{"Key":"two conditions","Fragments":["that","inside","having"]},{"Key":"conditions that","Fragments":["give","don't"]},{"Key":"that give","Fragments":["the","the"]},{"Key":"same result","Fragments":["with","without"]},{"Key":"result with","Fragments":["single"]},{"Key":"with single","Fragments":["condition?","quotes"]},{"Key":"I completely","Fragments":["agree:","agree.","understand"]},{"Key":"completely agree:","Fragments":["this"]},{"Key":"agree: this","Fragments":["2nd"]},{"Key":"this 2nd","Fragments":["version"]},{"Key":"2nd version","Fragments":["is"]},{"Key":"is way","Fragments":["better"]},{"Key":"way better","Fragments":["than","I"]},{"Key":"the 1st","Fragments":["one.","list"]},{"Key":"1st one.","Fragments":["I"]},{"Key":"one. I","Fragments":["am","took","like","really","figured","think","think","missed"]},{"Key":"am actually","Fragments":["converting"]},{"Key":"actually converting","Fragments":["list"]},{"Key":"converting list","Fragments":["to"]},{"Key":"binary since","Fragments":["after"]},{"Key":"since after","Fragments":["following"]},{"Key":"after following","Fragments":["your"]},{"Key":"following your","Fragments":["previous","suggestions"]},{"Key":"previous suggestion","Fragments":["of"]},{"Key":"using ```Regex.scan```","Fragments":["it"]},{"Key":"```Regex.scan``` it","Fragments":["now"]},{"Key":"it now","Fragments":["returns"]},{"Key":"now returns","Fragments":["a"]},{"Key":"returns a","Fragments":["list","list","boolean.","new","list.","new","tuple","float","Boolean,","new","filter","list","list","double","string","double","list","function","list","atom","list","list"]},{"Key":"of lists","Fragments":["e.g.:","from","and","could","and","(i.e.","of","of","with"]},{"Key":" iex\u0026gt;","Fragments":["words","words","Teenager.hey(\"A","Super.reverse(\"bar\")"]},{"Key":"iex\u0026gt; words","Fragments":["=","="]},{"Key":"words =","Fragments":["\"one","%r{\\w+}"]},{"Key":"= \"one","Fragments":["fish"]},{"Key":"\"one fish","Fragments":["two","two","two"]},{"Key":"fish two","Fragments":["fish","fish","fish"]},{"Key":"two fish","Fragments":["red","red","red"]},{"Key":"fish red","Fragments":["fish","fish","fish"]},{"Key":"red fish","Fragments":["blue","blue","blue"]},{"Key":"fish blue","Fragments":["fish\"","fish\"","fish\""]},{"Key":" \"one","Fragments":["fish","of","fish"]},{"Key":"= %r{\\w+}","Fragments":["|\u0026gt;"]},{"Key":"%r{\\w+} |\u0026gt;","Fragments":["Regex.scan"]},{"Key":"|\u0026gt; Regex.scan","Fragments":["words"]},{"Key":" [[\"one\"],","Fragments":["[\"fish\"],"]},{"Key":"I've also","Fragments":["edited","seen","tried","done","toyed","changed"]},{"Key":"also edited","Fragments":["the"]},{"Key":"edited the","Fragments":["regex"]},{"Key":"regex used","Fragments":["for","will"]},{"Key":"for scanning","Fragments":["so"]},{"Key":"scanning so","Fragments":["that"]},{"Key":"that i","Fragments":["do","can","did","don't"]},{"Key":"i do","Fragments":["not"]},{"Key":"to \"sanitize\"","Fragments":["anymore."]},{"Key":"Thanks! That","Fragments":["makes"]},{"Key":"sense. Would","Fragments":["it"]},{"Key":"clear separation","Fragments":["of"]},{"Key":"responsibilities to","Fragments":["have"]},{"Key":"have #anagram_for?","Fragments":["answer"]},{"Key":"#anagram_for? answer","Fragments":["completely"]},{"Key":"answer completely","Fragments":["whether"]},{"Key":"completely whether","Fragments":["two"]},{"Key":"whether two","Fragments":["words","nucleotides"]},{"Key":"anagrams of","Fragments":["one"]},{"Key":"of one","Fragments":["another?","filter?","more","or","clause","function","of"]},{"Key":"one another?","Fragments":["So"]},{"Key":"another? So","Fragments":["rather"]},{"Key":"So rather","Fragments":["than"]},{"Key":"than having","Fragments":["#anagram_for","two","a"]},{"Key":"having #anagram_for","Fragments":["return"]},{"Key":"#anagram_for return","Fragments":["a"]},{"Key":"that decides","Fragments":["things,"]},{"Key":"decides things,","Fragments":["pass"]},{"Key":"things, pass","Fragments":["in"]},{"Key":"in \u0026amp;1","Fragments":["to"]},{"Key":"\u0026amp;1 to","Fragments":["#anagram_for?"]},{"Key":"to #anagram_for?","Fragments":["as"]},{"Key":"#anagram_for? as","Fragments":["a"]},{"Key":"a second","Fragments":["parameter","parameter","clause","module!","clause","word","opinion","generator","opinion","spec","there.","shorthand","function"]},{"Key":"parameter is","Fragments":["what"]},{"Key":"what I'm","Fragments":["suggesting.","flipping","about","doing...","talking","doing","expecting.","calling"]},{"Key":"may well","Fragments":["have","not","be"]},{"Key":"well have","Fragments":["a"]},{"Key":"good argument","Fragments":["for"]},{"Key":"handling things","Fragments":["this"]},{"Key":"things this","Fragments":["way"]},{"Key":"way -","Fragments":["I"]},{"Key":"I appreciate","Fragments":["seeing","it","you","`gofmt`."]},{"Key":"appreciate seeing","Fragments":["this"]},{"Key":"seeing this","Fragments":["approach,"]},{"Key":"this approach,","Fragments":["as"]},{"Key":"approach, as","Fragments":["I"]},{"Key":"haven't seem","Fragments":["someone"]},{"Key":"seem someone","Fragments":["returning"]},{"Key":"someone returning","Fragments":["an"]},{"Key":"returning an","Fragments":["anonymous","empty"]},{"Key":"the solutions","Fragments":["yet."]},{"Key":" wrightling","Fragments":["means"]},{"Key":"wrightling means","Fragments":["that"]},{"Key":"means that","Fragments":["you","I","the","the","if","given","if","if","the","`append(list_with_500_elements,","if","`append(list_with_500_elements,","if","you","if","if"]},{"Key":"are adding","Fragments":["a"]},{"Key":"a redundant","Fragments":["named","method"]},{"Key":"redundant named","Fragments":["function"]},{"Key":"function whose","Fragments":["only"]},{"Key":"whose only","Fragments":["purpose"]},{"Key":"only purpose","Fragments":["is"]},{"Key":"purpose is","Fragments":["returning","to","to","not"]},{"Key":"is returning","Fragments":["a","nil"]},{"Key":"a lambda","Fragments":["(anonymous","syntax."]},{"Key":"lambda (anonymous","Fragments":["function)."]},{"Key":"(anonymous function).","Fragments":["Why"]},{"Key":"function). Why","Fragments":["not"]},{"Key":"just submit","Fragments":["this"]},{"Key":"submit this","Fragments":["anonymous","accidentally?"]},{"Key":"this anonymous","Fragments":["function"]},{"Key":"function directly","Fragments":["to"]},{"Key":" Getting","Fragments":["the","closer!"]},{"Key":"Getting the","Fragments":["current"]},{"Key":"current value","Fragments":["of","and"]},{"Key":"value of","Fragments":["the","`desired_characters`,","`strip`.)","the","the","a","the","the","your","call)","call)","call)","call)","the","a","the","call)","call)","a","call)","call)","call)","call)","\"Enum.sort(String.to_char_list","call)","call)","call)","call)"]},{"Key":"the key","Fragments":["(line","is","is","for","can't"]},{"Key":"key (line","Fragments":["23)"]},{"Key":"(line 23)","Fragments":["and"]},{"Key":"23) and","Fragments":["then"]},{"Key":"then `put`ting","Fragments":["it"]},{"Key":"`put`ting it","Fragments":["can"]},{"Key":"replaced by","Fragments":["`Dict.update`,","chaining","`HashDict.update`.","one","`hd`.","calls"]},{"Key":"by `Dict.update`,","Fragments":["it"]},{"Key":"`Dict.update`, it","Fragments":["has","simplifies","could"]},{"Key":"has a","Fragments":["callback","`cond`","superfluous","different","built-in","pretty","catch","problem","base","grasp","greater","certain","few","concept","bit","list","list","suggestion","convention","good","great","function","great","`trim`","guard,"]},{"Key":"a callback","Fragments":["which"]},{"Key":"callback which","Fragments":["gets"]},{"Key":"which gets","Fragments":["called","called"]},{"Key":"gets called","Fragments":["to","if"]},{"Key":"called to","Fragments":["calculate"]},{"Key":"1. Just","Fragments":["for"]},{"Key":"Just for","Fragments":["the","the"]},{"Key":"of practice.","Fragments":["I"]},{"Key":"practice. I","Fragments":["really"]},{"Key":"really enjoyed","Fragments":["writing"]},{"Key":"enjoyed writing","Fragments":["a"]},{"Key":"writing a","Fragments":["recursive","macro","truly","replacement"]},{"Key":"recursive function.","Fragments":["Will","I've"]},{"Key":"function. Will","Fragments":["use"]},{"Key":"Will use","Fragments":["`Enum`"]},{"Key":"`Enum` in","Fragments":["next"]},{"Key":"in next","Fragments":["iteration.","version.","few"]},{"Key":"2. Will","Fragments":["do,"]},{"Key":"Will do,","Fragments":["thanks!"]},{"Key":"Why use","Fragments":["a","`Enum.join`"]},{"Key":"guard when","Fragments":["pattern"]},{"Key":" `defp","Fragments":["increment_count(\"\",","count([],","same?(word,","question?(input),"]},{"Key":"`defp increment_count(\"\",","Fragments":["hash),"]},{"Key":"increment_count(\"\", hash),","Fragments":["do:"]},{"Key":"hash), do:","Fragments":["hash`","hash"]},{"Key":"* Why","Fragments":["reimplement","do"]},{"Key":"Why reimplement","Fragments":["`reduce`"]},{"Key":"reimplement `reduce`","Fragments":["when"]},{"Key":"`reduce` when","Fragments":["there"]},{"Key":"when there","Fragments":["is","are","are"]},{"Key":"is `Enum.foldl`","Fragments":["in"]},{"Key":"`Enum.foldl` in","Fragments":["the"]},{"Key":"* It's","Fragments":["possible","common"]},{"Key":"to obtain","Fragments":["a"]},{"Key":"obtain a","Fragments":["list"]},{"Key":"of valid","Fragments":["words"]},{"Key":"words without","Fragments":["empty"]},{"Key":"without empty","Fragments":["strings"]},{"Key":"empty strings","Fragments":["(and","is","and","from"]},{"Key":"strings (and","Fragments":["then"]},{"Key":"(and then","Fragments":["deleting"]},{"Key":"then deleting","Fragments":["them)."]},{"Key":"deleting them).","Fragments":["Please"]},{"Key":"them). Please","Fragments":["look"]},{"Key":"Please look","Fragments":["at","at"]},{"Key":"Nice! But","Fragments":["the"]},{"Key":"But the","Fragments":["condition","tests","line","symmetry","word","code","test","rest","condition"]},{"Key":"condition in","Fragments":["`silent?`","line"]},{"Key":"in `silent?`","Fragments":["method"]},{"Key":"`silent?` method","Fragments":["looks","with"]},{"Key":"too cluttered","Fragments":["to"]},{"Key":"cluttered to","Fragments":["me."]},{"Key":"me. Elixir","Fragments":["provides"]},{"Key":"good way","Fragments":["to","to","to","to","to","to"]},{"Key":"to clear","Fragments":["this"]},{"Key":"clear this","Fragments":["a"]},{"Key":"a bit:","Fragments":["what"]},{"Key":"bit: what","Fragments":["about"]},{"Key":"what about","Fragments":["adding","the"]},{"Key":"about adding","Fragments":["one","documentation?","a"]},{"Key":"adding one","Fragments":["more","more"]},{"Key":"one more","Fragments":["definition","`bottles`","revision.","assignment.","revision","minor","in"]},{"Key":"more definition","Fragments":["of"]},{"Key":"of `silent?`","Fragments":["method"]},{"Key":"a constraint","Fragments":["on"]},{"Key":"constraint on","Fragments":["argument"]},{"Key":"on argument","Fragments":["value?"]},{"Key":"Will search","Fragments":["for."]},{"Key":"search for.","Fragments":["BTW"]},{"Key":"for. BTW","Fragments":["do"]},{"Key":"BTW do","Fragments":["you"]},{"Key":"good reference","Fragments":["for"]},{"Key":"reference for","Fragments":["learning","iterators"]},{"Key":"for learning","Fragments":["Elixir","Elixir","the"]},{"Key":"learning Elixir","Fragments":["as","exercise","so"]},{"Key":"very beginner","Fragments":["as"]},{"Key":"beginner as","Fragments":["well"]},{"Key":"as browsing","Fragments":["the"]},{"Key":"browsing the","Fragments":["API?"]},{"Key":"1. `anagram_for?`","Fragments":["returns"]},{"Key":"`anagram_for?` returns","Fragments":["anonymous"]},{"Key":"returns anonymous","Fragments":["function"]},{"Key":"and `Enum.filter`","Fragments":["uses"]},{"Key":"`Enum.filter` uses","Fragments":["it."]},{"Key":"uses it.","Fragments":["It's"]},{"Key":"it. It's","Fragments":["the"]},{"Key":" sorted_word","Fragments":["="]},{"Key":"sorted_word =","Fragments":["sort(word)"]},{"Key":"Enum.filter fn","Fragments":["anagram"]},{"Key":"fn anagram","Fragments":["-\u0026gt;"]},{"Key":"anagram -\u0026gt;","Fragments":["sorted_word"]},{"Key":"-\u0026gt; sorted_word","Fragments":["=="]},{"Key":"sorted_word ==","Fragments":["sort(anagram)"]},{"Key":"== sort(anagram)","Fragments":["end"]},{"Key":"2. Sorry,","Fragments":["don't"]},{"Key":"Sorry, don't","Fragments":["get"]},{"Key":"don't get","Fragments":["it...","removed.","any"]},{"Key":"Similar to","Fragments":["the"]},{"Key":"nitpick you","Fragments":["got"]},{"Key":"got last","Fragments":["time,"]},{"Key":"last time,","Fragments":["in"]},{"Key":"time, in","Fragments":["ResponseChecker.nothing?,"]},{"Key":"in ResponseChecker.nothing?,","Fragments":["once"]},{"Key":"ResponseChecker.nothing?, once","Fragments":["you've"]},{"Key":"once you've","Fragments":["String.stripped","completed","spit","spit"]},{"Key":"you've String.stripped","Fragments":["response_for,"]},{"Key":"String.stripped response_for,","Fragments":["you"]},{"Key":"response_for, you","Fragments":["can"]},{"Key":"can compare","Fragments":["that"]},{"Key":"compare that","Fragments":["result","to"]},{"Key":"that result","Fragments":["to"]},{"Key":"result to","Fragments":["an","the"]},{"Key":"string \"\"","Fragments":["rather"]},{"Key":"\"\" rather","Fragments":["than"]},{"Key":"check its","Fragments":["length."]},{"Key":"its length.","Fragments":["All"]},{"Key":"length. All","Fragments":["your"]},{"Key":"All your","Fragments":["tests"]},{"Key":"your tests","Fragments":["should","into","in"]},{"Key":"tests should","Fragments":["still","(I","be"]},{"Key":"should still","Fragments":["pass,"]},{"Key":"still pass,","Fragments":["and"]},{"Key":"pass, and","Fragments":["you've","I"]},{"Key":"and you've","Fragments":["written"]},{"Key":"you've written","Fragments":["less"]},{"Key":"written less","Fragments":["code"]},{"Key":"less code","Fragments":[":)"]},{"Key":" in","Fragments":["my","erlang","the","line"]},{"Key":"my opinion,","Fragments":["you","that","this"]},{"Key":"opinion, you","Fragments":["could"]},{"Key":"could find","Fragments":["a","a","in"]},{"Key":"your `StringInquires`","Fragments":["module."]},{"Key":"`StringInquires` module.","Fragments":["Even"]},{"Key":"module. Even","Fragments":["if"]},{"Key":"Even if","Fragments":["you","you"]},{"Key":"you go","Fragments":["with","along."]},{"Key":"current naming","Fragments":["scheme,"]},{"Key":"naming scheme,","Fragments":["I"]},{"Key":"scheme, I","Fragments":["think"]},{"Key":"should use","Fragments":["the","a","one","`defp`","regexp","Stream.chunk,","`a"]},{"Key":"the singular","Fragments":["form"]},{"Key":"singular form","Fragments":["of"]},{"Key":"form of","Fragments":["the","pattern","dictionary","if","string","bottle","optimization","`Stream.Lazy`","`Dict.get`"]},{"Key":"the noun;","Fragments":["`StringInquiry`."]},{"Key":"the `question?`","Fragments":["method","function,"]},{"Key":"`question?` method","Fragments":["really"]},{"Key":"method really","Fragments":["about"]},{"Key":"really about","Fragments":["a"]},{"Key":"in general","Fragments":["or","it","in","best","I","that","the","is","because"]},{"Key":"general or","Fragments":["something"]},{"Key":"more specific?","Fragments":["In"]},{"Key":"specific? In","Fragments":["contrast,"]},{"Key":"In contrast,","Fragments":["`blank?`"]},{"Key":"contrast, `blank?`","Fragments":["and"]},{"Key":"`blank?` and","Fragments":["`all_caps?`"]},{"Key":"and `all_caps?`","Fragments":["are"]},{"Key":"`all_caps?` are","Fragments":["more"]},{"Key":"are more","Fragments":["generic","plain","like","complex,","elegant.","or","efficient","abbreviated"]},{"Key":"more generic","Fragments":["string","function"]},{"Key":"generic string","Fragments":["inquiries."]},{"Key":"string inquiries.","Fragments":["However,"]},{"Key":"inquiries. However,","Fragments":["I"]},{"Key":"would keep","Fragments":["in"]},{"Key":"keep in","Fragments":["mind","mind.","mind","the"]},{"Key":"mind that","Fragments":["Bob's","I","the","Erlang","reads","`'AB'"]},{"Key":"that Bob's","Fragments":["problem"]},{"Key":"Bob's problem","Fragments":["is"]},{"Key":"problem is","Fragments":["not","that","the","that"]},{"Key":"not with","Fragments":["strings","`String.ends_with?`"]},{"Key":"with strings","Fragments":["in","for","due"]},{"Key":"in general,","Fragments":["but","but","I"]},{"Key":"general, but","Fragments":["what","these"]},{"Key":"what people","Fragments":["are","think"]},{"Key":"people are","Fragments":["saying","sorting"]},{"Key":"are saying","Fragments":["him."]},{"Key":" String.codepoints","Fragments":["may"]},{"Key":"String.codepoints may","Fragments":["be"]},{"Key":"useful to","Fragments":["you...","make","simplify"]},{"Key":"So much","Fragments":["better","more"]},{"Key":"not downcase","Fragments":["the"]},{"Key":"downcase the","Fragments":["whole","input","target","target","words","entire","sentence","sentence","words,"]},{"Key":"whole string","Fragments":["once","before","the","as"]},{"Key":"string once","Fragments":["in"]},{"Key":"beginning (in","Fragments":["`words`,"]},{"Key":"(in `words`,","Fragments":["for"]},{"Key":"`words`, for","Fragments":["instance),"]},{"Key":"for instance),","Fragments":["and"]},{"Key":"instance), and","Fragments":["not"]},{"Key":"not every","Fragments":["word?"]},{"Key":"do remember","Fragments":["that"]},{"Key":"remember that","Fragments":["I","you","syntax.","there's"]},{"Key":"suggested using","Fragments":["`Regex.scan`,"]},{"Key":"using `Regex.scan`,","Fragments":["but","it's"]},{"Key":"`Regex.scan`, but","Fragments":["looking","how"]},{"Key":"but looking","Fragments":["at","through"]},{"Key":"at `List.flatten`","Fragments":["in"]},{"Key":"`List.flatten` in","Fragments":["your"]},{"Key":"is occurs","Fragments":["to"]},{"Key":"occurs to","Fragments":["me"]},{"Key":"that `Regex.run`","Fragments":["would"]},{"Key":"`Regex.run` would","Fragments":["be"]},{"Key":"better match","Fragments":["because"]},{"Key":"match because","Fragments":["it"]},{"Key":"it returns","Fragments":["one","a","a","a","a","the","the","a","the"]},{"Key":"returns one","Fragments":["flat"]},{"Key":"one flat","Fragments":["list"]},{"Key":"flat list","Fragments":["already."]},{"Key":"The [`Enum`](http://elixir-lang.org/docs/stable/Enum.html)","Fragments":["module"]},{"Key":"[`Enum`](http://elixir-lang.org/docs/stable/Enum.html) module","Fragments":["has"]},{"Key":"module has","Fragments":["helpers"]},{"Key":"has helpers","Fragments":["for"]},{"Key":"helpers for","Fragments":["iterating","`hey/1`."]},{"Key":"for iterating","Fragments":["over"]},{"Key":"iterating over","Fragments":["lists,","the","each","the"]},{"Key":"over lists,","Fragments":["at"]},{"Key":"lists, at","Fragments":["least"]},{"Key":"least one","Fragments":["of","character","alphabetical","letter","uppercase","uppercase","letter","letter."]},{"Key":"use here","Fragments":["to"]},{"Key":"reduce your","Fragments":["code..","2"]},{"Key":"to submit","Fragments":["a","a","a","a","a","an","a","=/"]},{"Key":"new iteration","Fragments":["that","based","-"]},{"Key":"iteration that","Fragments":["can","tries","I'm"]},{"Key":"can handle","Fragments":["`Beer.sing(5,95)`,","any"]},{"Key":"handle `Beer.sing(5,95)`,","Fragments":["wrapping"]},{"Key":"`Beer.sing(5,95)`, wrapping","Fragments":["from"]},{"Key":"wrapping from","Fragments":["\"no"]},{"Key":"from \"no","Fragments":["more"]},{"Key":"more beers\"","Fragments":["back"]},{"Key":"beers\" back","Fragments":["to"]},{"Key":"to \"99","Fragments":["beers.\""]},{"Key":" Agreed","Fragments":["with"]},{"Key":"Agreed with","Fragments":["@dahlia!"]},{"Key":"with @dahlia!","Fragments":["Not"]},{"Key":"@dahlia! Not","Fragments":["because"]},{"Key":"Not because","Fragments":["the"]},{"Key":"the operations","Fragments":["are","(filter","with"]},{"Key":"operations are","Fragments":["complex,"]},{"Key":"are complex,","Fragments":["but"]},{"Key":"complex, but","Fragments":["it's"]},{"Key":"great opportunity","Fragments":["to","to"]},{"Key":"opportunity to","Fragments":["explain","use","dig","practice","explain","explain","explain"]},{"Key":"to explain","Fragments":["the","the","why","the","an","an","what","an","my","the"]},{"Key":"explain the","Fragments":["domain","odd","reason","reason"]},{"Key":"the problem,","Fragments":["e.g.","and"]},{"Key":"problem, e.g.","Fragments":["Teenager,","it"]},{"Key":"e.g. Teenager,","Fragments":["yelling,"]},{"Key":"Teenager, yelling,","Fragments":["shouting,"]},{"Key":"yelling, shouting,","Fragments":["etc.."]},{"Key":"- nice","Fragments":["work","work"]},{"Key":"nice work","Fragments":["-","-","tough."]},{"Key":"work -","Fragments":["a","a"]},{"Key":"- a","Fragments":["couple","couple","better"]},{"Key":"1. Have","Fragments":["you"]},{"Key":"seen the","Fragments":["shorthand","underscore","question","syntax","\"unicode","original","do_foo","new","pipes"]},{"Key":"shorthand notation","Fragments":["for","might","for"]},{"Key":"notation for","Fragments":["defining","functions:","the","this","the","functions:"]},{"Key":"for defining","Fragments":["anonymous"]},{"Key":"defining anonymous","Fragments":["functions?"]},{"Key":"functions? Using","Fragments":["\u0026amp;1"]},{"Key":"Using \u0026amp;1","Fragments":["could"]},{"Key":"\u0026amp;1 could","Fragments":["simplify"]},{"Key":"simplify #match","Fragments":["a"]},{"Key":"#match a","Fragments":["bit."]},{"Key":"2. There","Fragments":["is"]},{"Key":"is code","Fragments":["duplication"]},{"Key":"code duplication","Fragments":["in"]},{"Key":"in #anagram?","Fragments":["where"]},{"Key":"#anagram? where","Fragments":["you"]},{"Key":"are executing","Fragments":["String.to_char_list"]},{"Key":"executing String.to_char_list","Fragments":["and"]},{"Key":"String.to_char_list and","Fragments":["sorting"]},{"Key":"and sorting","Fragments":["them.","`word`","seems","in","of"]},{"Key":"sorting them.","Fragments":["Can"]},{"Key":"them. Can","Fragments":["that","anyone"]},{"Key":"Can that","Fragments":["be"]},{"Key":"be extracted","Fragments":["into","into"]},{"Key":"extracted into","Fragments":["a","private","another"]},{"Key":"clean things","Fragments":["up"]},{"Key":"things up","Fragments":["a","so","by"]},{"Key":"work. I","Fragments":["have","think","submitted","did","am","found"]},{"Key":"have one","Fragments":["comment/question:","nit","parameter","function?","pattern)"]},{"Key":"1. How","Fragments":["is"]},{"Key":"How is","Fragments":["the"]},{"Key":"function you","Fragments":["define","preface","store","might","could"]},{"Key":"you define","Fragments":["in"]},{"Key":"define in","Fragments":["line","a","a","a","a","a","a","a"]},{"Key":"line 8","Fragments":["picking","working,","all","is","in"]},{"Key":"8 picking","Fragments":["up"]},{"Key":"picking up","Fragments":["the","the"]},{"Key":"the anagram","Fragments":["argument?","as"]},{"Key":"anagram argument?","Fragments":["I"]},{"Key":"argument? I","Fragments":["haven't"]},{"Key":"haven't seen","Fragments":["that","the","the","many","before.","the"]},{"Key":"seen that","Fragments":["done","before","form"]},{"Key":"that done","Fragments":["(and"]},{"Key":"done (and","Fragments":["honestly"]},{"Key":"(and honestly","Fragments":["had"]},{"Key":"honestly had","Fragments":["to"]},{"Key":"to cut/paste","Fragments":["your"]},{"Key":"cut/paste your","Fragments":["solution"]},{"Key":"your solution","Fragments":["into","is","make","to","using","much","has","of"]},{"Key":"solution into","Fragments":["VIM"]},{"Key":"into VIM","Fragments":["and"]},{"Key":"VIM and","Fragments":["give"]},{"Key":"and give","Fragments":["it","it","a"]},{"Key":"2. Would","Fragments":["it"]},{"Key":"readable to","Fragments":["have","me.","move","have","me."]},{"Key":"parameter for","Fragments":["#anagram_for?","Enum.reduce."]},{"Key":"for #anagram_for?","Fragments":["and"]},{"Key":"#anagram_for? and","Fragments":["pass"]},{"Key":"in using","Fragments":["the","`cond`","regexes.","an"]},{"Key":"the \u00261","Fragments":["syntax,","to","goodness."]},{"Key":"\u00261 syntax,","Fragments":["in"]},{"Key":"syntax, in","Fragments":["#match?"]},{"Key":"1. Did","Fragments":["you"]},{"Key":"supports heredoc","Fragments":["for"]},{"Key":"heredoc for","Fragments":["laying"]},{"Key":"for laying","Fragments":["out"]},{"Key":"laying out","Fragments":["strings,","the"]},{"Key":"out strings,","Fragments":["and"]},{"Key":"strings, and","Fragments":["that"]},{"Key":"that Elixir's","Fragments":["heredoc","grammar","enumerators","default"]},{"Key":"Elixir's heredoc","Fragments":["implementation"]},{"Key":"heredoc implementation","Fragments":["supports"]},{"Key":"implementation supports","Fragments":["string"]},{"Key":"supports string","Fragments":["interpolation?"]},{"Key":"string interpolation?","Fragments":["Might"]},{"Key":"interpolation? Might","Fragments":["help"]},{"Key":"Might help","Fragments":["to"]},{"Key":"make #command","Fragments":["and"]},{"Key":"#command and","Fragments":["#verse"]},{"Key":"and #verse","Fragments":["more"]},{"Key":"#verse more","Fragments":["readable."]},{"Key":"2. Should","Fragments":["your"]},{"Key":"Should your","Fragments":["#n_bottles"]},{"Key":"your #n_bottles","Fragments":["function"]},{"Key":"#n_bottles function","Fragments":["be"]},{"Key":"Oh, and","Fragments":["`HashDict.update(","your"]},{"Key":"and `HashDict.update(","Fragments":["hash,"]},{"Key":"`HashDict.update( hash,","Fragments":["word,","word,"]},{"Key":"hash, word,","Fragments":["1,","1,"]},{"Key":"1, fn(c)","Fragments":["-\u003e"]},{"Key":"fn(c) -\u003e","Fragments":["c"]},{"Key":"-\u003e c","Fragments":["+"]},{"Key":"c +","Fragments":["1"]},{"Key":"1 end","Fragments":[")`"]},{"Key":"end )`","Fragments":["could"]},{"Key":")` could","Fragments":["be"]},{"Key":"be simplified","Fragments":["as","if","by","further","by","by","using","like"]},{"Key":"simplified as","Fragments":["`HashDict.update("]},{"Key":"as `HashDict.update(","Fragments":["hash,"]},{"Key":"But using","Fragments":["`%{\\w}`"]},{"Key":"using `%{\\w}`","Fragments":["includes"]},{"Key":"`%{\\w}` includes","Fragments":["the"]},{"Key":"includes the","Fragments":["`_`"]},{"Key":"`_` char...","Fragments":["it"]},{"Key":"char... it","Fragments":["passes"]},{"Key":"passes the","Fragments":["tests","test.","tests,","tests"]},{"Key":"tests but","Fragments":["I"]},{"Key":"it loses","Fragments":["the","the"]},{"Key":"loses the","Fragments":["point","very"]},{"Key":"the algorithm","Fragments":["that","will","was","a","flow","is"]},{"Key":"algorithm that","Fragments":["for","involved"]},{"Key":"that for","Fragments":["me","my","something","the","mer?","you.","`\\w`","equal","`is_sublist/2`"]},{"Key":"is counting","Fragments":["words"]},{"Key":"counting words","Fragments":["from"]},{"Key":"from human-written","Fragments":["phrases."]},{"Key":"human-written phrases.","Fragments":["What"]},{"Key":"phrases. What","Fragments":["do"]},{"Key":"was allowing","Fragments":["for"]},{"Key":"allowing for","Fragments":["the"]},{"Key":"case with","Fragments":["spaces"]},{"Key":" test","Fragments":["\"silence2\"","\"only","\"shouting","\"reduce","\"shouting","\"valid","\"concat","\"really","\"shouting","\"obscured","\"shouting","\"shouting","\"shouting"]},{"Key":"test \"silence2\"","Fragments":["do"]},{"Key":" assert","Fragments":["Teenager.hey(\"","Teenager.hey(\"1,","Teenager.hey(\"УХОДИТЬ\")","0","\"1234567890\"","[1,2,3,4,5,6]","Teenager.hey(\"!\")","Teenager.hey(\"YOU","Teenager.hey(\"!@#$%\u0026*!@#?\")","Teenager.hey(\"1,","Teenager.hey(\"U","Teenager.hey(\"1,"]},{"Key":"assert Teenager.hey(\"","Fragments":["\")","\")"]},{"Key":"Teenager.hey(\" \")","Fragments":["==","=="]},{"Key":"\") ==","Fragments":["\"Fine.","\"Fine."]},{"Key":" Say","Fragments":["should"]},{"Key":"Say should","Fragments":["be"]},{"Key":"submitted an","Fragments":["update","new","iteration","update"]},{"Key":" uploaded","Fragments":["a"]},{"Key":"uploaded a","Fragments":["new","new","new"]},{"Key":"version (4)","Fragments":["where"]},{"Key":"(4) where","Fragments":["I"]},{"Key":"changed something,","Fragments":["see"]},{"Key":"something, see","Fragments":["if"]},{"Key":"thought do_stuff","Fragments":["was"]},{"Key":"do_stuff was","Fragments":["an"]},{"Key":"an erlang","Fragments":["/"]},{"Key":"erlang /","Fragments":["elixir"]},{"Key":"/ elixir","Fragments":["convertion"]},{"Key":"elixir convertion","Fragments":["(dunno"]},{"Key":"convertion (dunno","Fragments":["why"]},{"Key":"(dunno why","Fragments":["thought"]},{"Key":"why thought","Fragments":["I"]},{"Key":"I read","Fragments":["it","about","that","the","it"]},{"Key":"read it","Fragments":["somewhere,","was"]},{"Key":"it somewhere,","Fragments":["don't"]},{"Key":"somewhere, don't","Fragments":["really"]},{"Key":"don't really","Fragments":["like","have","need","need","see","see","see","like","like","want","understand","go","have","cover","describe","need","understand","like"]},{"Key":"it either","Fragments":["so",":-)"]},{"Key":"either so","Fragments":["it's"]},{"Key":"it's gone","Fragments":["now"]},{"Key":"gone now","Fragments":["=)"]},{"Key":"added `String.downcase`","Fragments":["to"]},{"Key":"`String.downcase` to","Fragments":["the","save"]},{"Key":"count. Thanks","Fragments":["for"]},{"Key":"Nice! updated","Fragments":["code."]},{"Key":"I started","Fragments":["on","to","writing","out","out","doing","with","with","out"]},{"Key":"started on","Fragments":["the"]},{"Key":"simple but","Fragments":["verbose"]},{"Key":"but verbose","Fragments":["pattern."]},{"Key":"verbose pattern.","Fragments":["I"]},{"Key":"pattern. I","Fragments":["will"]},{"Key":"to dry","Fragments":["up"]},{"Key":"dry up","Fragments":["the"]},{"Key":"Agreed, I","Fragments":["didn't"]},{"Key":"know `cond`","Fragments":["and"]},{"Key":"`cond` and","Fragments":["so","function","`case`","the","extracting","the"]},{"Key":"so didn't","Fragments":["know"]},{"Key":"the `if","Fragments":["else","else"]},{"Key":"`if else","Fragments":["if`s.","if`"]},{"Key":"else if`s.","Fragments":["Thanks"]},{"Key":"if`s. Thanks","Fragments":["for"]},{"Key":"- looking","Fragments":["good"]},{"Key":"looking good","Fragments":["IMO."]},{"Key":"good IMO.","Fragments":["I"]},{"Key":"IMO. I","Fragments":["debate"]},{"Key":"I debate","Fragments":["whether"]},{"Key":"debate whether","Fragments":["it"]},{"Key":"makes sense","Fragments":["to","for","too.","to","in","of","to","whenever"]},{"Key":"to Enum.join","Fragments":["like"]},{"Key":"Enum.join like","Fragments":["you"]},{"Key":"you did,","Fragments":["as"]},{"Key":"did, as","Fragments":["the"]},{"Key":"the comparison","Fragments":["would","`base","is"]},{"Key":"comparison would","Fragments":["work"]},{"Key":"would work","Fragments":["fine","nicely.","on","in","fine"]},{"Key":"fine between","Fragments":["lists,"]},{"Key":"between lists,","Fragments":["but"]},{"Key":"lists, but","Fragments":["perhaps","it's","rather"]},{"Key":"perhaps it","Fragments":["makes"]},{"Key":"sense for","Fragments":["#lexical_sort","this"]},{"Key":"for #lexical_sort","Fragments":["to"]},{"Key":"#lexical_sort to","Fragments":["accept"]},{"Key":"to accept","Fragments":["and","anything"]},{"Key":"accept and","Fragments":["return"]},{"Key":" No,","Fragments":["sorry","actually","there's","I","I","you","perfect."]},{"Key":"No, sorry","Fragments":["I"]},{"Key":"wasn't clear.","Fragments":["This"]},{"Key":"clear. This","Fragments":["regex"]},{"Key":"This regex","Fragments":["is"]},{"Key":"fine, but","Fragments":["I","it"]},{"Key":"using `%r/\\w+/`","Fragments":["would"]},{"Key":"`%r/\\w+/` would","Fragments":["be"]},{"Key":"and (nearly)","Fragments":["identical."]},{"Key":"(nearly) identical.","Fragments":["The"]},{"Key":"identical. The","Fragments":["only"]},{"Key":"only difference","Fragments":["is"]},{"Key":"difference is","Fragments":["that","only","that"]},{"Key":"also match","Fragments":["underscore"]},{"Key":"match underscore","Fragments":["characters,"]},{"Key":"underscore characters,","Fragments":["which"]},{"Key":"characters, which","Fragments":["shouldn't","is"]},{"Key":"which shouldn't","Fragments":["matter"]},{"Key":"shouldn't matter","Fragments":["for","here)."]},{"Key":"matter for","Fragments":["our"]},{"Key":"for our","Fragments":["tests."]},{"Key":"It can","Fragments":["be","simplify","be"]},{"Key":"with String","Fragments":["functions,","tools."]},{"Key":"String functions,","Fragments":["but"]},{"Key":"use Regexes","Fragments":["(regexen?),"]},{"Key":"Regexes (regexen?),","Fragments":["there's"]},{"Key":"(regexen?), there's","Fragments":["[a"]},{"Key":"there's [a","Fragments":["function"]},{"Key":"[a function","Fragments":["on"]},{"Key":"on Regex](http://elixir-lang.org/docs/master/Regex.html)","Fragments":["that"]},{"Key":"Regex](http://elixir-lang.org/docs/master/Regex.html) that","Fragments":["might"]},{"Key":"might fit","Fragments":["the","the"]},{"Key":"question better.","Fragments":["`Regex.run/1`"]},{"Key":"better. `Regex.run/1`","Fragments":["returns"]},{"Key":"`Regex.run/1` returns","Fragments":["a"]},{"Key":"matches or","Fragments":["nil,"]},{"Key":"or nil,","Fragments":["but"]},{"Key":"method name","Fragments":["implies","the"]},{"Key":"name implies","Fragments":["\"Hey,"]},{"Key":"implies \"Hey,","Fragments":["is"]},{"Key":"\"Hey, is","Fragments":["this"]},{"Key":"this thing","Fragments":["a","a"]},{"Key":"thing a","Fragments":["yell","bit."]},{"Key":"a yell","Fragments":["or"]},{"Key":"yell or","Fragments":["not?"]},{"Key":"or not?","Fragments":["Yes","I"]},{"Key":"not? Yes","Fragments":["or"]},{"Key":"Yes or","Fragments":["no?"]},{"Key":"or no?","Fragments":["True"]},{"Key":"no? True","Fragments":["or"]},{"Key":"True or","Fragments":["false?\""]},{"Key":"the separation","Fragments":["of"]},{"Key":"of responsibilities.","Fragments":["If"]},{"Key":"responsibilities. If","Fragments":["we're"]},{"Key":"If we're","Fragments":["nitpicking,"]},{"Key":"we're nitpicking,","Fragments":["`say`"]},{"Key":"nitpicking, `say`","Fragments":["isn't"]},{"Key":"`say` isn't","Fragments":["the"]},{"Key":"most intention-revealing","Fragments":["name"]},{"Key":"intention-revealing name","Fragments":["for","for"]},{"Key":"you compared","Fragments":["the"]},{"Key":"compared the","Fragments":["length","sorted"]},{"Key":"the contents","Fragments":["(`String.length(foo)","of","of","of","of"]},{"Key":"contents (`String.length(foo)","Fragments":["=="]},{"Key":"(`String.length(foo) ==","Fragments":["0`"]},{"Key":"0` vs","Fragments":["`foo"]},{"Key":"vs `foo","Fragments":["=="]},{"Key":"`foo ==","Fragments":["\"\"`)?"]},{"Key":"== \"\"`)?","Fragments":["Is"]},{"Key":"\"\"`)? Is","Fragments":["there"]},{"Key":"a performance","Fragments":["benefit","win.","benefit","problem","problem","or"]},{"Key":"performance benefit","Fragments":["or","in","to"]},{"Key":"benefit or","Fragments":["is"]},{"Key":"a stylistic","Fragments":["difference?"]},{"Key":"you said.","Fragments":["Do"]},{"Key":"said. Do","Fragments":["you"]},{"Key":"really think","Fragments":["this"]},{"Key":"this Regex","Fragments":["is"]},{"Key":"Regex is","Fragments":["harmful?","more"]},{"Key":"about having","Fragments":["a","two","`nucleotide_counts`"]},{"Key":"I'd need","Fragments":["to"]},{"Key":"use `String#codepoints`","Fragments":["and"]},{"Key":"`String#codepoints` and","Fragments":["then"]},{"Key":"then `Enum#filter`","Fragments":["over"]},{"Key":"`Enum#filter` over","Fragments":["them?"]},{"Key":"great. Elixir","Fragments":["has"]},{"Key":"`cond` control","Fragments":["flow"]},{"Key":"flow operator","Fragments":["that"]},{"Key":"operator that","Fragments":["I"]},{"Key":"think would","Fragments":["be"]},{"Key":"else if`","Fragments":["flow"]},{"Key":"if` flow","Fragments":["you"]},{"Key":"flow you","Fragments":["have"]},{"Key":"looked in","Fragments":["String","the"]},{"Key":"in String","Fragments":["for","your","for"]},{"Key":"for scan","Fragments":["and","only"]},{"Key":"find one.","Fragments":["I","Also,"]},{"Key":"took another","Fragments":["look"]},{"Key":"another look","Fragments":["and","at","and"]},{"Key":"look and","Fragments":["it's","thanks","it"]},{"Key":"it's in","Fragments":["Regex.","elixir","keeping"]},{"Key":"in Regex.","Fragments":["I'll"]},{"Key":"Regex. I'll","Fragments":["see"]},{"Key":"That's all","Fragments":["very"]},{"Key":"all very","Fragments":["nice","compact."]},{"Key":"very nice","Fragments":["and","property"]},{"Key":"good functional","Fragments":["style,"]},{"Key":"functional style,","Fragments":["but","and"]},{"Key":"style, but","Fragments":["why"]},{"Key":"but why","Fragments":["not"]},{"Key":"it shorter","Fragments":["using"]},{"Key":"shorter using","Fragments":["library"]},{"Key":"using library","Fragments":["functions","functions"]},{"Key":"library functions","Fragments":["like","(maybe"]},{"Key":"functions like","Fragments":["String.scan","`fibonacci(1),","String.strip.","this:","`Enum.reduce`?","this",":lists.mapfoldl","`sunteenth`","`is_alpha`","this:","`Enum.count`","map.","the","`Enum.reduce`","`Enum.reduce`","`Enum.reduce`","increment","\u003ccode\u003eString.ends_with?\u003c/code\u003e"]},{"Key":"like String.scan","Fragments":["to"]},{"Key":"String.scan to","Fragments":["get"]},{"Key":"list or","Fragments":["words","a"]},{"Key":"or words","Fragments":["and"]},{"Key":"words and","Fragments":["then","also","then","count"]},{"Key":"then Enum.foldl","Fragments":["and"]},{"Key":"Enum.foldl and","Fragments":["Dict.update"]},{"Key":"Dict.update to","Fragments":["build"]},{"Key":"to build","Fragments":["the","up","the","up","the"]},{"Key":"build the","Fragments":["dictionary?","`score_letter`","`HashDict`"]},{"Key":"clarifying thought","Fragments":["experiment,"]},{"Key":"thought experiment,","Fragments":["if"]},{"Key":"experiment, if","Fragments":["the"]},{"Key":"to sing","Fragments":["songs"]},{"Key":"sing songs","Fragments":["about"]},{"Key":"songs about","Fragments":["arbitrary"]},{"Key":"about arbitrary","Fragments":["beverages,"]},{"Key":"arbitrary beverages,","Fragments":["you'd"]},{"Key":"beverages, you'd","Fragments":["currently"]},{"Key":"you'd currently","Fragments":["have"]},{"Key":"currently have","Fragments":["to"]},{"Key":"replace \"beer\"","Fragments":["in"]},{"Key":"a shorthand","Fragments":["function"]},{"Key":"shorthand function","Fragments":["(`\u0026amp;1+1`)"]},{"Key":"function (`\u0026amp;1+1`)","Fragments":["in"]},{"Key":"(`\u0026amp;1+1`) in","Fragments":["your"]},{"Key":"your accumulating","Fragments":["function?"]},{"Key":"care for","Fragments":["the"]},{"Key":"name `do_extract_words`","Fragments":["--"]},{"Key":"`do_extract_words` --","Fragments":["maybe"]},{"Key":"-- maybe","Fragments":["the"]},{"Key":"maybe the","Fragments":["first","downcasing","`filter_map`","tests","`split`","fact"]},{"Key":"first level","Fragments":["could"]},{"Key":"level could","Fragments":["be"]},{"Key":"be `sanitize_and_extract`,","Fragments":["or"]},{"Key":"`sanitize_and_extract`, or","Fragments":["maybe"]},{"Key":"or maybe","Fragments":["the"]},{"Key":"the downcasing","Fragments":["could","into","in","of","and","of","of"]},{"Key":"downcasing could","Fragments":["just"]},{"Key":"just become","Fragments":["its"]},{"Key":"become its","Fragments":["own"]},{"Key":"own explicit","Fragments":["step"]},{"Key":"explicit step","Fragments":["in"]},{"Key":"the pipeline.","Fragments":["What","I","I"]},{"Key":"pipeline. What","Fragments":["do"]},{"Key":"I know,","Fragments":["I","without"]},{"Key":"I write","Fragments":["about","the"]},{"Key":"write about","Fragments":["it"]},{"Key":"previous submission:","Fragments":["the"]},{"Key":"submission: the","Fragments":["problem"]},{"Key":"this exercise,","Fragments":["there's","if","but","`''`","but","I","we","but","so","it's","the","where","is","I","but","I"]},{"Key":"exercise, there's","Fragments":["always"]},{"Key":"there's always","Fragments":["a"]},{"Key":"always a","Fragments":["tradeoff","bad","companion","companion","good","transformation","prime,","good"]},{"Key":"a tradeoff","Fragments":["between","between","between","for","and"]},{"Key":"tradeoff between","Fragments":["simplicity","being","clarity","removing"]},{"Key":"simplicity /","Fragments":["succinctness"]},{"Key":"/ succinctness","Fragments":["and"]},{"Key":"succinctness and","Fragments":["repetition."]},{"Key":"and repetition.","Fragments":["This"]},{"Key":"repetition. This","Fragments":["is"]},{"Key":"good solution,","Fragments":["but","but"]},{"Key":"it's all","Fragments":["the","very"]},{"Key":"way on","Fragments":["the","the"]},{"Key":"simple side","Fragments":["of"]},{"Key":"side of","Fragments":["the","pattern"]},{"Key":"the scale.","Fragments":["Is"]},{"Key":"scale. Is","Fragments":["there"]},{"Key":"duplication from","Fragments":["the"]},{"Key":"`verse` clauses","Fragments":["while","rather"]},{"Key":"clauses while","Fragments":["still"]},{"Key":"still being","Fragments":["as"]},{"Key":"being as","Fragments":["simple"]},{"Key":"as simple","Fragments":["as","a","as","as","as","as"]},{"Key":"simple as","Fragments":["possible?","possible","I","it","I"]},{"Key":"Yes, a","Fragments":["scan"]},{"Key":"a scan","Fragments":["on"]},{"Key":"scan on","Fragments":["`\\w`"]},{"Key":"on `\\w`","Fragments":["should","but"]},{"Key":"be equivalent","Fragments":["to"]},{"Key":"equivalent to","Fragments":["replacing","`s","`filter`,","one"]},{"Key":"to replacing","Fragments":["non"]},{"Key":"replacing non","Fragments":["`\\w\\s`"]},{"Key":"non `\\w\\s`","Fragments":["and"]},{"Key":"`\\w\\s` and","Fragments":["then"]},{"Key":"then splitting","Fragments":["on","the","the","you","you"]},{"Key":"splitting on","Fragments":["`\\s`."]},{"Key":"think `split_words`","Fragments":["could"]},{"Key":"`split_words` could","Fragments":["be"]},{"Key":"simplified if","Fragments":["you"]},{"Key":"you used","Fragments":["`Regex.scan`","that","the","`nucleotide`","there","a","`Enum.to_list`","`String.split`","\u003ccode\u003e[:punct:]\u003c/code\u003e","the"]},{"Key":"used `Regex.scan`","Fragments":["--","(thanks"]},{"Key":"-- also","Fragments":["you"]},{"Key":"also you","Fragments":["could","maybe"]},{"Key":"regex pattern","Fragments":["you","match"]},{"Key":"pattern you","Fragments":["use."]},{"Key":" FWIW,","Fragments":["I"]},{"Key":"FWIW, I","Fragments":["like"]},{"Key":"this. Reading","Fragments":["through"]},{"Key":"Reading through","Fragments":["`hey`,"]},{"Key":"through `hey`,","Fragments":["you"]},{"Key":"`hey`, you","Fragments":["can"]},{"Key":"see *why*","Fragments":["Bob"]},{"Key":"*why* Bob","Fragments":["responds"]},{"Key":"Bob responds","Fragments":["a"]},{"Key":"responds a","Fragments":["certain"]},{"Key":"certain way,","Fragments":["and"]},{"Key":"way, and","Fragments":["if","```+```"]},{"Key":"know *how*","Fragments":["he"]},{"Key":"*how* he","Fragments":["makes"]},{"Key":"he makes","Fragments":["the"]},{"Key":"the determination,","Fragments":["you"]},{"Key":"determination, you","Fragments":["can"]},{"Key":"the fn","Fragments":["implementation.","and"]},{"Key":"about vertical","Fragments":["vs"]},{"Key":"vertical vs","Fragments":["horizontal"]},{"Key":"vs horizontal","Fragments":["space,"]},{"Key":"horizontal space,","Fragments":["but"]},{"Key":"space, but","Fragments":["you"]},{"Key":"the `defp","Fragments":["foo,","_something`","do_`"]},{"Key":"`defp foo,","Fragments":["do:"]},{"Key":"foo, do:","Fragments":["...`"]},{"Key":"do: ...`","Fragments":["form"]},{"Key":"...` form","Fragments":["to"]},{"Key":"Getting closer!","Fragments":["Line"]},{"Key":"closer! Line","Fragments":["20"]},{"Key":"20 can","Fragments":["be"]},{"Key":"simplified by","Fragments":["using","using","using"]},{"Key":"matching instead","Fragments":["of","of"]},{"Key":"guard. What","Fragments":["if"]},{"Key":"use Erlang's","Fragments":["`:io_format`.","`timer`","calendar"]},{"Key":"Erlang's `:io_format`.","Fragments":["I"]},{"Key":"`:io_format`. I","Fragments":["failed."]},{"Key":"I failed.","Fragments":["Jumping"]},{"Key":"failed. Jumping","Fragments":["between"]},{"Key":"Jumping between","Fragments":["char"]},{"Key":"between char","Fragments":["lists"]},{"Key":"char lists","Fragments":["and","(saves","were"]},{"Key":"and binaries,","Fragments":["and"]},{"Key":"binaries, and","Fragments":["Erlang's"]},{"Key":"and Erlang's","Fragments":["expectations"]},{"Key":"Erlang's expectations","Fragments":["of"]},{"Key":"expectations of","Fragments":["them,"]},{"Key":"of them,","Fragments":["plus","though,","yet.),"]},{"Key":"them, plus","Fragments":["lack"]},{"Key":"plus lack","Fragments":["of"]},{"Key":"lack of","Fragments":["a","duplication.","repetition","indentation","knowledge","lazyness.","`@`s)","named"]},{"Key":"a native","Fragments":["`sprintf`","list"]},{"Key":"native `sprintf`","Fragments":["that"]},{"Key":"`sprintf` that","Fragments":["knows"]},{"Key":"that knows","Fragments":["how"]},{"Key":"knows how","Fragments":["to"]},{"Key":"a format","Fragments":["while"]},{"Key":"format while","Fragments":["retaining"]},{"Key":"while retaining","Fragments":["non-format"]},{"Key":"retaining non-format","Fragments":["characters,"]},{"Key":"non-format characters,","Fragments":["proved"]},{"Key":"characters, proved","Fragments":["too"]},{"Key":"proved too","Fragments":["much"]},{"Key":"much for","Fragments":["me.","your","taking","this","the","all","these","me","your"]},{"Key":"for me.","Fragments":["This","Thanks","I",":)","The"]},{"Key":"me. This","Fragments":["is"]},{"Key":"a resubmission","Fragments":["of"]},{"Key":"resubmission of","Fragments":["iteration"]},{"Key":"of iteration","Fragments":["#3,"]},{"Key":"iteration #3,","Fragments":["compare"]},{"Key":"#3, compare","Fragments":["to"]},{"Key":"compare to","Fragments":["iteration","the"]},{"Key":"to iteration","Fragments":["#1."]},{"Key":"a refactor","Fragments":["of"]},{"Key":"refactor of","Fragments":["my"]},{"Key":"first iteration,","Fragments":["with"]},{"Key":"iteration, with","Fragments":["a"]},{"Key":"a major","Fragments":["design"]},{"Key":"major design","Fragments":["difference:"]},{"Key":"design difference:","Fragments":["`verse`"]},{"Key":"difference: `verse`","Fragments":["now"]},{"Key":"`verse` now","Fragments":["uses"]},{"Key":"now uses","Fragments":["the"]},{"Key":"the template","Fragments":["string","to"]},{"Key":"template string","Fragments":["pattern."]},{"Key":" Compare","Fragments":["to"]},{"Key":"Compare to","Fragments":["my"]},{"Key":"first iteration.","Fragments":["This","Have"]},{"Key":"iteration. This","Fragments":["version"]},{"Key":"This version","Fragments":["allows","flattens","uses","is"]},{"Key":"version allows","Fragments":["the"]},{"Key":"allows the","Fragments":["implementation","nested"]},{"Key":"of whitespace","Fragments":["to","and"]},{"Key":"be handled","Fragments":["in"]},{"Key":"handled in","Fragments":["one","the"]},{"Key":"I set","Fragments":["out"]},{"Key":"set out","Fragments":["on"]},{"Key":"out on","Fragments":["this","some","the"]},{"Key":"this refactor","Fragments":["with"]},{"Key":"refactor with","Fragments":["the"]},{"Key":"of [`sprintf`](http://apidock.com/ruby/Kernel/sprintf)","Fragments":["format"]},{"Key":"[`sprintf`](http://apidock.com/ruby/Kernel/sprintf) format","Fragments":["string."]},{"Key":"format string.","Fragments":["Sadly,"]},{"Key":"string. Sadly,","Fragments":["Elixir"]},{"Key":"Sadly, Elixir","Fragments":["lacks"]},{"Key":"Elixir lacks","Fragments":["any"]},{"Key":"lacks any","Fragments":["such"]},{"Key":"any such","Fragments":["implementation."]},{"Key":"such implementation.","Fragments":["Expect"]},{"Key":"implementation. Expect","Fragments":["another"]},{"Key":"Expect another","Fragments":["iteration"]},{"Key":"that tries","Fragments":["to"]},{"Key":"tries to","Fragments":["leverage"]},{"Key":"to leverage","Fragments":["Erlang's"]},{"Key":"leverage Erlang's","Fragments":["[`:io.format`](http://www.erlang.org/doc/man/io.html)."]},{"Key":"love feedback","Fragments":["on","on"]},{"Key":"on which","Fragments":["iteration"]},{"Key":"which iteration","Fragments":["is"]},{"Key":"iteration is","Fragments":["the"]},{"Key":"most appealing,","Fragments":["1,"]},{"Key":"appealing, 1,","Fragments":["3,"]},{"Key":"1, 3,","Fragments":["or"]},{"Key":"3, or","Fragments":["5."]},{"Key":"or 5.","Fragments":["(Ignore"]},{"Key":"5. (Ignore","Fragments":["2"]},{"Key":"(Ignore 2","Fragments":["and"]},{"Key":"2 and","Fragments":["4."]},{"Key":"and 4.","Fragments":["They"]},{"Key":"4. They","Fragments":["were"]},{"Key":"They were","Fragments":["accidental"]},{"Key":"were accidental","Fragments":["submissions.)"]},{"Key":"like hard-coding","Fragments":["text"]},{"Key":"hard-coding text","Fragments":["into"]},{"Key":"text into","Fragments":["a"]},{"Key":"is always","Fragments":["a","equivalent","a","a","the","preferable","an"]},{"Key":"bad idea,","Fragments":["unless"]},{"Key":"idea, unless","Fragments":["the"]},{"Key":"unless the","Fragments":["function's"]},{"Key":"the function's","Fragments":["explicit","module,"]},{"Key":"function's explicit","Fragments":["purpose"]},{"Key":"explicit purpose","Fragments":["is"]},{"Key":"return that","Fragments":["text."]},{"Key":"case, it's","Fragments":["really"]},{"Key":"it's really","Fragments":["not","a","a","helpful","the","a"]},{"Key":"really not","Fragments":["a","sure","sure","much","the","good"]},{"Key":"a win,","Fragments":["since"]},{"Key":"win, since","Fragments":["there's"]},{"Key":"since there's","Fragments":["only","a","no"]},{"Key":"there's only","Fragments":["a","one","one","one"]},{"Key":"single usage,","Fragments":["but"]},{"Key":"usage, but","Fragments":["in"]},{"Key":"but in","Fragments":["general","a","a","this","production","this","a","the","a","this","for","the","the"]},{"Key":"general it","Fragments":["seems"]},{"Key":" +1","Fragments":["for","defp","to"]},{"Key":"using `is_reticent?`","Fragments":["as"]},{"Key":"`is_reticent?` as","Fragments":["a"]},{"Key":"1) does","Fragments":["this"]},{"Key":"this pass","Fragments":["in","for","the","all","all","the"]},{"Key":"cases where","Fragments":["you","single"]},{"Key":"pass `\"","Fragments":["\"`"]},{"Key":"`\" \"`","Fragments":["or","to"]},{"Key":"\"` or","Fragments":["`nil`"]},{"Key":"or `nil`","Fragments":["to","(`if`"]},{"Key":"`nil` to","Fragments":["hey?","`reduce`,"]},{"Key":"to hey?","Fragments":["My"]},{"Key":"hey? My","Fragments":["version"]},{"Key":"My version","Fragments":["had"]},{"Key":"version had","Fragments":["tests"]},{"Key":"had tests","Fragments":["for"]},{"Key":"tests for","Fragments":["nil","types","this","`sing`","the","a","shouts"]},{"Key":"and spaces,","Fragments":["but"]},{"Key":"spaces, but","Fragments":["it"]},{"Key":"doesn't look","Fragments":["like","like","quite","nice"]},{"Key":"look like","Fragments":["this","inlining","a","it"]},{"Key":"2) is","Fragments":["there"]},{"Key":"a built-in","Fragments":["way","type.","function","function","increment"]},{"Key":"built-in way","Fragments":["that"]},{"Key":"can determine","Fragments":["if","that"]},{"Key":"determine if","Fragments":["a","it's"]},{"Key":"function shortcut","Fragments":["syntax,"]},{"Key":"shortcut syntax,","Fragments":["`\u0026amp;(...)`"]},{"Key":"syntax, `\u0026amp;(...)`","Fragments":["yet?"]},{"Key":"`\u0026amp;(...)` yet?","Fragments":["I"]},{"Key":"yet? I","Fragments":["think"]},{"Key":"elixir v0.10.1.","Fragments":["It's"]},{"Key":"v0.10.1. It's","Fragments":["pretty"]},{"Key":"It's pretty","Fragments":["succinct,","much","cool","common","uncommon"]},{"Key":"pretty succinct,","Fragments":["and"]},{"Key":"succinct, and","Fragments":["handles"]},{"Key":"and handles","Fragments":["`\u0026amp;1`-type","all","the"]},{"Key":"handles `\u0026amp;1`-type","Fragments":["directives"]},{"Key":"`\u0026amp;1`-type directives","Fragments":["better."]},{"Key":"feel the","Fragments":["same","need","need","tests"]},{"Key":"way. You","Fragments":["learn","might"]},{"Key":"You learn","Fragments":["more"]},{"Key":"learn more","Fragments":["about","doing","about","of"]},{"Key":"more about","Fragments":["an","these","Enum.reduce","what","`Enum.count`","what"]},{"Key":"about an","Fragments":["assignment"]},{"Key":"an assignment","Fragments":["once"]},{"Key":"assignment once","Fragments":["it's"]},{"Key":"once it's","Fragments":["done.","been"]},{"Key":"it's done.","Fragments":["There"]},{"Key":"done. There","Fragments":["are"]},{"Key":"There are","Fragments":["just","two","no","just","a","several","just","a","a","some","some","a","several","a"]},{"Key":"just so","Fragments":["many","I","standard"]},{"Key":"many different","Fragments":["ways","things"]},{"Key":"different ways","Fragments":["to","(in","of"]},{"Key":"to approach","Fragments":["even","`chars/1`.","this","that."]},{"Key":"approach even","Fragments":["simple"]},{"Key":"even simple","Fragments":["problems."]},{"Key":"sure moving","Fragments":["the"]},{"Key":"into module","Fragments":["attributes","attributes"]},{"Key":"module attributes","Fragments":["adds","to","as","don't","in","whole","(`@freddie`)","only","for","(`@eda`)"]},{"Key":"attributes adds","Fragments":["to"]},{"Key":"the solution.","Fragments":["They're"]},{"Key":"solution. They're","Fragments":["not"]},{"Key":"They're not","Fragments":["being","properties","UTF-8"]},{"Key":"not being","Fragments":["reused","shouting,","used","a","wrapped","Unicode-specific.","tail","picked"]},{"Key":"being reused","Fragments":["anywhere,"]},{"Key":"reused anywhere,","Fragments":["the"]},{"Key":"anywhere, the","Fragments":["attribute"]},{"Key":"the attribute","Fragments":["name","tag"]},{"Key":"attribute name","Fragments":["doesn't"]},{"Key":"name doesn't","Fragments":["add","reflect"]},{"Key":"doesn't add","Fragments":["any"]},{"Key":"add any","Fragments":["additional"]},{"Key":"any additional","Fragments":["information"]},{"Key":"additional information","Fragments":["(as"]},{"Key":"information (as","Fragments":["opposed"]},{"Key":"(as opposed","Fragments":["to"]},{"Key":"like `@tre","Fragments":["50`),"]},{"Key":"`@tre 50`),","Fragments":["and"]},{"Key":"50`), and","Fragments":["now"]},{"Key":"and now","Fragments":["I","`count/1`"]},{"Key":"actual response","Fragments":["as"]},{"Key":"response as","Fragments":["opposed"]},{"Key":"an errant","Fragments":["space"]},{"Key":"errant space","Fragments":["`def"]},{"Key":"space `def","Fragments":["silence?(content"]},{"Key":"`def silence?(content","Fragments":[")"]},{"Key":"silence?(content )","Fragments":["do`"]},{"Key":") do`","Fragments":["but"]},{"Key":"do` but","Fragments":["on"]},{"Key":"this whole","Fragments":["this"]},{"Key":"whole this","Fragments":["looks","looks","looks"]},{"Key":" No.","Fragments":["In"]},{"Key":"No. In","Fragments":["my"]},{"Key":"In my","Fragments":["head,","opinion","implementation","previous","experience,","opinion,","first"]},{"Key":"my head,","Fragments":["i"]},{"Key":"head, i","Fragments":["wanted"]},{"Key":"i wanted","Fragments":["an"]},{"Key":"wanted an","Fragments":["`empty?`"]},{"Key":"an `empty?`","Fragments":["function"]},{"Key":"`empty?` function","Fragments":["so"]},{"Key":"so i","Fragments":["tried"]},{"Key":"i tried","Fragments":["to"]},{"Key":"over build","Fragments":["it."]},{"Key":"build it.","Fragments":["Thanks."]},{"Key":"a novel","Fragments":["approach"]},{"Key":"novel approach","Fragments":["--"]},{"Key":"approach --","Fragments":["dictionary"]},{"Key":"-- dictionary","Fragments":["vs"]},{"Key":"dictionary vs","Fragments":["sorted"]},{"Key":"vs sorted","Fragments":["list."]},{"Key":"is super-nitpicky,","Fragments":["but"]},{"Key":"super-nitpicky, but","Fragments":["if"]},{"Key":"domain being","Fragments":["a"]},{"Key":"a teenager","Fragments":["thinking","with"]},{"Key":"teenager thinking","Fragments":["about"]},{"Key":"about statements","Fragments":["he"]},{"Key":"statements he","Fragments":["hears,"]},{"Key":"he hears,","Fragments":["then"]},{"Key":"hears, then","Fragments":["`_empty?`"]},{"Key":"then `_empty?`","Fragments":["doesn't"]},{"Key":"`_empty?` doesn't","Fragments":["seem"]},{"Key":"to fit","Fragments":["as","on"]},{"Key":"fit as","Fragments":["well","naturally"]},{"Key":"well in","Fragments":["the","this","Elixir.","Elixir."]},{"Key":"language of","Fragments":["the","the"]},{"Key":"domain as","Fragments":["the","well","well"]},{"Key":"other function","Fragments":["names.","names."]},{"Key":"you so","Fragments":["much!","much","much"]},{"Key":"Any particular","Fragments":["reason","reason"]},{"Key":"use String.first(...)","Fragments":["and"]},{"Key":"String.first(...) and","Fragments":["then"]},{"Key":"then check","Fragments":["for","if","to"]},{"Key":"nil, rather","Fragments":["than"]},{"Key":"simply check","Fragments":["for"]},{"Key":"for \"\"","Fragments":["as"]},{"Key":"There's an","Fragments":["opportunity","example","ambiguity.","interesting"]},{"Key":"an opportunity","Fragments":["to","to","to","to","to"]},{"Key":"for `silence?()`.","Fragments":["You'll"]},{"Key":"`silence?()`. You'll","Fragments":["need"]},{"Key":"You'll need","Fragments":["to"]},{"Key":"define it","Fragments":["twice:"]},{"Key":"it twice:","Fragments":["once"]},{"Key":"twice: once","Fragments":["for","inside"]},{"Key":"the `nil`","Fragments":["case,","value"]},{"Key":"`nil` case,","Fragments":["once"]},{"Key":"case, once","Fragments":["for"]},{"Key":"string case.","Fragments":["Then"]},{"Key":"case. Then","Fragments":["you"]},{"Key":"can have","Fragments":["a","default"]},{"Key":"simpler use","Fragments":["of"]},{"Key":"really should","Fragments":["have","be"]},{"Key":"used `ends_with?`","Fragments":["in"]},{"Key":"`ends_with?` in","Fragments":["`question?`."]},{"Key":"in `question?`.","Fragments":["I've"]},{"Key":"`question?`. I've","Fragments":["made"]},{"Key":"made changes","Fragments":["for"]},{"Key":"changes for","Fragments":["both","that"]},{"Key":"both `question?`","Fragments":["and"]},{"Key":"and `silence?`.","Fragments":["However"]},{"Key":"`silence?`. However","Fragments":["I"]},{"Key":"I fail","Fragments":["to"]},{"Key":"fail to","Fragments":["see","exclude"]},{"Key":" String.first(String.strip(content))","Fragments":["=="]},{"Key":"String.first(String.strip(content)) ==","Fragments":["nil"]},{"Key":" reads","Fragments":["better"]},{"Key":" Regex.match?(%r/^\\s*$/,","Fragments":["content)"]},{"Key":"Maybe I","Fragments":["found","will","should"]},{"Key":"found the","Fragments":["wrong","Enum.map_join","function","dark","docs","following"]},{"Key":"wrong function","Fragments":["for"]},{"Key":"checking to","Fragments":["see","see","see","see"]},{"Key":"if string","Fragments":["is"]},{"Key":"empty or","Fragments":["I","question"]},{"Key":"or I","Fragments":["just"]},{"Key":"just rely","Fragments":["on"]},{"Key":"on regex's","Fragments":["too"]},{"Key":"regex's too","Fragments":["much."]},{"Key":"default argument","Fragments":["is","in","in"]},{"Key":"argument is","Fragments":["that","interesting,","what"]},{"Key":"that nil","Fragments":["is"]},{"Key":"is still","Fragments":["passed","a","used","the","greater","essentially","some","several","several","so","a","a","a","failing,"]},{"Key":"still passed","Fragments":["to"]},{"Key":"so the","Fragments":["default","answer","order","result","benefit","elixir","code","new","reader","test","more","top-level","comparison"]},{"Key":"default is","Fragments":["ignored."]},{"Key":"is ignored.","Fragments":["I"]},{"Key":"ignored. I","Fragments":["might"]},{"Key":"be misunderstanding","Fragments":["what","what"]},{"Key":"misunderstanding what","Fragments":["you","you're"]},{"Key":"are talking","Fragments":["about."]},{"Key":"def test(value","Fragments":["//"]},{"Key":"test(value //","Fragments":["2)"]},{"Key":" test(1)","Fragments":["#"]},{"Key":"test(1) #","Fragments":["=\u0026gt;"]},{"Key":"# =\u0026gt;","Fragments":["1","2","nil"]},{"Key":" test()","Fragments":["#"]},{"Key":"test() #","Fragments":["=\u0026gt;"]},{"Key":" test(nil)","Fragments":["#"]},{"Key":"test(nil) #","Fragments":["=\u0026gt;"]},{"Key":"agree and","Fragments":["think"]},{"Key":"the `is_`,","Fragments":["`has_a_`,"]},{"Key":"`is_`, `has_a_`,","Fragments":["and"]},{"Key":"`has_a_`, and","Fragments":["`says_`"]},{"Key":"and `says_`","Fragments":["prefixes"]},{"Key":"`says_` prefixes","Fragments":["are"]},{"Key":"prefixes are","Fragments":["superfluous."]},{"Key":"* How","Fragments":["do"]},{"Key":"string that's","Fragments":["whitespace"]},{"Key":"that's whitespace","Fragments":["only?"]},{"Key":"* Could","Fragments":["you"]},{"Key":"you separate","Fragments":["your","out"]},{"Key":"separate your","Fragments":["concerns"]},{"Key":"your concerns","Fragments":["here"]},{"Key":"concerns here","Fragments":["by"]},{"Key":"by splitting","Fragments":["the"]},{"Key":"splitting the","Fragments":["string","string.","input","phrase","string","sentence","sentence"]},{"Key":"string check","Fragments":["methods","to"]},{"Key":"check methods","Fragments":["into","private"]},{"Key":"module? Do","Fragments":["they"]},{"Key":"they really","Fragments":["belong","need"]},{"Key":"really belong","Fragments":["in","inside"]},{"Key":"belong in","Fragments":["the","Teenager."]},{"Key":"the `Teenager`","Fragments":["module?"]},{"Key":"Looks good!","Fragments":["I","One","Just","Not"]},{"Key":"the abstraction","Fragments":["of"]},{"Key":"abstraction of","Fragments":["Message"]},{"Key":"of Message","Fragments":["into"]},{"Key":"Message into","Fragments":["its"]},{"Key":"`silence` function","Fragments":["by"]},{"Key":"argument in","Fragments":["the","the","function","line"]},{"Key":"* Check","Fragments":["out"]},{"Key":"the [string","Fragments":["docs](http://elixir-lang.org/docs/stable/String.html)"]},{"Key":"[string docs](http://elixir-lang.org/docs/stable/String.html)","Fragments":["for"]},{"Key":"docs](http://elixir-lang.org/docs/stable/String.html) for","Fragments":["some"]},{"Key":"some more","Fragments":["concise","functions…","research","specific","details."]},{"Key":"concise methods","Fragments":["you"]},{"Key":"methods you","Fragments":["can","could","have"]},{"Key":"use in","Fragments":["your","line","`match/2`","sing","the","silence?()","regular"]},{"Key":"and `silence?()`","Fragments":["methods."]},{"Key":"believe everything","Fragments":["in"]},{"Key":"block should","Fragments":["be"]},{"Key":"be indented","Fragments":["two"]},{"Key":"indented two","Fragments":["spaces."]},{"Key":" They're","Fragments":["not","updated"]},{"Key":"not properties","Fragments":["of"]},{"Key":"properties of","Fragments":["the","the"]},{"Key":"module though,","Fragments":["it's","so"]},{"Key":"though, it's","Fragments":["performing","not","a","more","just"]},{"Key":"it's performing","Fragments":["a"]},{"Key":"performing a","Fragments":["one"]},{"Key":"a one","Fragments":["time","time","lime"]},{"Key":"one time","Fragments":["check","interrogation","at"]},{"Key":"time check","Fragments":["on"]},{"Key":"an external","Fragments":["variable."]},{"Key":"external variable.","Fragments":["So"]},{"Key":"variable. So","Fragments":["it","maybe"]},{"Key":"So it","Fragments":["doesn't","should"]},{"Key":"doesn't matter","Fragments":["if"]},{"Key":"matter if","Fragments":["they're"]},{"Key":"if they're","Fragments":["mutually","available"]},{"Key":"they're mutually","Fragments":["incompatible,"]},{"Key":"mutually incompatible,","Fragments":["they're","or"]},{"Key":"incompatible, they're","Fragments":["a"]},{"Key":"they're a","Fragments":["one","bit","bit"]},{"Key":"time interrogation","Fragments":["of"]},{"Key":"looks nearly","Fragments":["perfect."]},{"Key":"nearly perfect.","Fragments":["The"]},{"Key":"perfect. The","Fragments":["only"]},{"Key":"input to","Fragments":["the","get","a","`area_code`"]},{"Key":"the `_empty?`","Fragments":["function,"]},{"Key":"`_empty?` function,","Fragments":["since"]},{"Key":"function, since","Fragments":["`_empty?`","it's","each"]},{"Key":"since `_empty?`","Fragments":["should"]},{"Key":"`_empty?` should","Fragments":["be"]},{"Key":"be responsible","Fragments":["for","for"]},{"Key":"determining if","Fragments":["the","a","a"]},{"Key":"is empty/nil,","Fragments":["not"]},{"Key":"empty/nil, not","Fragments":["the"]},{"Key":" @axel,","Fragments":["thanks"]},{"Key":"@axel, thanks","Fragments":["for"]},{"Key":"taking a","Fragments":["look.","look","great","few","single","look","look","word"]},{"Key":"the if-statments.","Fragments":["I"]},{"Key":"if-statments. I","Fragments":["couldn't"]},{"Key":"an `else","Fragments":["if`"]},{"Key":"if` in","Fragments":["the"]},{"Key":"docs and","Fragments":["assumed","function","let","the","a"]},{"Key":"and assumed","Fragments":["this"]},{"Key":"assumed this","Fragments":["was"]},{"Key":"way it's","Fragments":["done.","subjective","incorrect.","more"]},{"Key":"The intent","Fragments":["is","with"]},{"Key":"intent is","Fragments":["clearly","clearer."]},{"Key":"is clearly","Fragments":["communicated."]},{"Key":"clearly communicated.","Fragments":["Looks"]},{"Key":"communicated. Looks","Fragments":["good"]},{"Key":"me. I","Fragments":["particularly","like","haven't"]},{"Key":"I particularly","Fragments":["like","like"]},{"Key":"particularly like","Fragments":["the","the","the"]},{"Key":"of guard","Fragments":["conditions","clauses"]},{"Key":"guard conditions","Fragments":["on"]},{"Key":"conditions on","Fragments":["`quiet?`.","them."]},{"Key":"on `quiet?`.","Fragments":[":)"]},{"Key":"Looks great","Fragments":["-","in"]},{"Key":"great -","Fragments":["I"]},{"Key":"way you","Fragments":["moved","could","could","could","create","can","could","write","broke","pulled","use","could","could","won't","could","could","could","have","could","did","did","could","condensed","can","used","can","capture","could"]},{"Key":"text out","Fragments":["into"]},{"Key":"attributes to","Fragments":["eliminate"]},{"Key":"to eliminate","Fragments":["magic","the","the","duplication.","or","that","other","that"]},{"Key":"eliminate magic","Fragments":["text"]},{"Key":"magic text","Fragments":["from"]},{"Key":" Excellent","Fragments":["point","points"]},{"Key":"Excellent point","Fragments":[":)"]},{"Key":"point :)","Fragments":["Whitespace"]},{"Key":":) Whitespace","Fragments":["fixed,"]},{"Key":"Whitespace fixed,","Fragments":["thanks!"]},{"Key":"can also","Fragments":["just","move","collapse","end","be","be","be","use","be","use"]},{"Key":"also just","Fragments":["import"]},{"Key":"just import","Fragments":["`:functions`,"]},{"Key":"import `:functions`,","Fragments":["`:macros`,"]},{"Key":"`:functions`, `:macros`,","Fragments":["etc."]},{"Key":"`:macros`, etc.","Fragments":["E.g.,"]},{"Key":" import","Fragments":[":functions,","Message,","Kernel,","Inspect.Algebra"]},{"Key":"import :functions,","Fragments":["Message"]},{"Key":"Yeah it","Fragments":["is"]},{"Key":"is available.","Fragments":["If"]},{"Key":"available. If","Fragments":["I"]},{"Key":"I imported","Fragments":["it"]},{"Key":"imported it","Fragments":["I"]},{"Key":"functions nothing?,","Fragments":["yelling?,"]},{"Key":"nothing?, yelling?,","Fragments":["and"]},{"Key":"yelling?, and","Fragments":["question?"]},{"Key":"and question?","Fragments":["without"]},{"Key":"question? without","Fragments":["the"]},{"Key":"the qualified","Fragments":["name"]},{"Key":"qualified name","Fragments":["(e.g."]},{"Key":"name (e.g.","Fragments":["nothing?"]},{"Key":"(e.g. nothing?","Fragments":["instead"]},{"Key":"nothing? instead","Fragments":["of"]},{"Key":"of Statement.nothing?).","Fragments":["I'm"]},{"Key":"Statement.nothing?). I'm","Fragments":["not"]},{"Key":"better or","Fragments":["not","worse"]},{"Key":"your `Statement`","Fragments":["module"]},{"Key":"`Statement` module","Fragments":["available","outside"]},{"Key":"module available","Fragments":["in"]},{"Key":"available in","Fragments":["your","guards.","the","guard"]},{"Key":"your `Teenager`","Fragments":["module?"]},{"Key":"`Teenager` module?","Fragments":["I"]},{"Key":"module? I","Fragments":["think","sort"]},{"Key":"to import","Fragments":["it.","HashDict.update","or","the","`String.capitalize/1`","all","them"]},{"Key":"the Statement","Fragments":["module,"]},{"Key":"Statement module,","Fragments":["it"]},{"Key":"module, it","Fragments":["doesn't"]},{"Key":"belong inside","Fragments":["the"]},{"Key":"hadn't considered","Fragments":["it.","that","using"]},{"Key":"considered it.","Fragments":["I'm"]},{"Key":"it. I'm","Fragments":["new","thinking"]},{"Key":"to Elixir,","Fragments":["so","so","but","so","so","I","would","but"]},{"Key":"I'm unfamiliar","Fragments":["with"]},{"Key":"unfamiliar with","Fragments":["how","the","the"]},{"Key":"it read","Fragments":["well.","a","nicely.","more"]},{"Key":"read well.","Fragments":["Is"]},{"Key":"well. Is","Fragments":["this"]},{"Key":"defmodule Teenager","Fragments":["do","do"]},{"Key":"import Message,","Fragments":["only:"]},{"Key":"Message, only:","Fragments":["[silent?:"]},{"Key":"only: [silent?:","Fragments":["1,"]},{"Key":"[silent?: 1,","Fragments":["shouting?:"]},{"Key":"1, shouting?:","Fragments":["1,"]},{"Key":"shouting?: 1,","Fragments":["question?:"]},{"Key":"1, question?:","Fragments":["1]"]},{"Key":"a genuine","Fragments":["question,","question."]},{"Key":"genuine question,","Fragments":["thanks"]},{"Key":"question, thanks","Fragments":["for"]},{"Key":"for sharing","Fragments":["your"]},{"Key":"sharing your","Fragments":["experiences"]},{"Key":"your experiences","Fragments":["@ned!"]},{"Key":"experiences @ned!","Fragments":["I"]},{"Key":"@ned! I","Fragments":["might"]},{"Key":"might pull","Fragments":["word-count"]},{"Key":"pull word-count","Fragments":["back"]},{"Key":"word-count back","Fragments":["up"]},{"Key":"back up","Fragments":["and","at"]},{"Key":"and play","Fragments":["with","around"]},{"Key":"to better","Fragments":["understand."]},{"Key":"better understand.","Fragments":["I"]},{"Key":"understand. I","Fragments":["honestly"]},{"Key":"I honestly","Fragments":["learn","don't","have","don't","don't"]},{"Key":"honestly learn","Fragments":["more"]},{"Key":"more doing","Fragments":["the"]},{"Key":"the reviewing/nitpicking","Fragments":["then"]},{"Key":"reviewing/nitpicking then","Fragments":["I"]},{"Key":"do coding","Fragments":["(and"]},{"Key":"coding (and","Fragments":["I"]},{"Key":"(and I","Fragments":["learn","try"]},{"Key":"I learn","Fragments":["a","more"]},{"Key":"lot coding","Fragments":["too)!"]},{"Key":"considered breaking","Fragments":["your","the"]},{"Key":"breaking your","Fragments":["private"]},{"Key":"your private","Fragments":["functions","functions.","function"]},{"Key":"great. A","Fragments":["few","tiny","few"]},{"Key":"* Would","Fragments":["it"]},{"Key":"the `Statement`","Fragments":["module"]},{"Key":"module outside","Fragments":["of"]},{"Key":"outside of","Fragments":["`Teenager`?","`hey/1`.","reduce.","an","a","my"]},{"Key":"of `Teenager`?","Fragments":["Could"]},{"Key":"`Teenager`? Could","Fragments":["another"]},{"Key":"Could another","Fragments":["person"]},{"Key":"another person","Fragments":["use","pushed"]},{"Key":"person use","Fragments":["it?"]},{"Key":"the statement","Fragments":["is"]},{"Key":"just whitespace?","Fragments":["E.g.,"]},{"Key":"whitespace? E.g.,","Fragments":["`\""]},{"Key":"E.g., `\"","Fragments":["\"`"]},{"Key":"need this","Fragments":["condition","for"]},{"Key":"this condition","Fragments":["`def"]},{"Key":"condition `def","Fragments":["nothing?(_),"]},{"Key":"`def nothing?(_),","Fragments":["do:"]},{"Key":"nothing?(_), do:","Fragments":["false`."]},{"Key":"Ok thanks","Fragments":["for","for","@deanna","@adela"]},{"Key":"the feedbacks","Fragments":["unfortunately"]},{"Key":"feedbacks unfortunately","Fragments":["I'm"]},{"Key":"unfortunately I'm","Fragments":["going"]},{"Key":"going abroad","Fragments":["without"]},{"Key":"abroad without","Fragments":["my"]},{"Key":"without my","Fragments":["computer"]},{"Key":"my computer","Fragments":["so"]},{"Key":"computer so","Fragments":["the"]},{"Key":"answer will","Fragments":["have"]},{"Key":"will have","Fragments":["to","code","more","another","to","the"]},{"Key":"to wait","Fragments":["a","for"]},{"Key":"wait a","Fragments":["few"]},{"Key":"few days","Fragments":[";)","and","off"]},{"Key":" See,","Fragments":["how"]},{"Key":"See, how","Fragments":["beautiful"]},{"Key":"how beautiful","Fragments":["your"]},{"Key":"beautiful your","Fragments":["code"]},{"Key":"code has","Fragments":["become?","a"]},{"Key":"has become?","Fragments":[":)"]},{"Key":"only tiny-tiny","Fragments":["problem"]},{"Key":"tiny-tiny problem","Fragments":["that"]},{"Key":"problem that","Fragments":["I","if","`Stream`"]},{"Key":"the `hash`","Fragments":["variable."]},{"Key":"`hash` variable.","Fragments":["It's"]},{"Key":"variable. It's","Fragments":["like"]},{"Key":"It's like","Fragments":["naming"]},{"Key":"like naming","Fragments":["variables"]},{"Key":"naming variables","Fragments":["`string`,"]},{"Key":"variables `string`,","Fragments":["`array`"]},{"Key":"`string`, `array`","Fragments":["and"]},{"Key":"`array` and","Fragments":["`list`"]},{"Key":"and `list`","Fragments":[":)"]},{"Key":"think `dict`","Fragments":["or"]},{"Key":"`dict` or","Fragments":["`dictionary`"]},{"Key":"or `dictionary`","Fragments":["would"]},{"Key":"`dictionary` would","Fragments":["fit"]},{"Key":"would fit","Fragments":["better,","with","in.","with"]},{"Key":"fit better,","Fragments":["in"]},{"Key":"better, in","Fragments":["the"]},{"Key":"the linguistic","Fragments":["meaning"]},{"Key":"linguistic meaning","Fragments":["of"]},{"Key":"very much","Fragments":["right!","for","getting","Ruby-style"]},{"Key":"much right!","Fragments":["There"]},{"Key":"right! There","Fragments":["is"]},{"Key":"is nothing","Fragments":["wrong","wrong","wrong","magical"]},{"Key":"nothing wrong","Fragments":["with","with","with","with","with","with","with","with"]},{"Key":"wrong with","Fragments":["`binary_to_list`","writing","putting","the","multiple","what","using","using","how","this.","it."]},{"Key":"with `binary_to_list`","Fragments":["returning"]},{"Key":"`binary_to_list` returning","Fragments":["a"]},{"Key":"of integers","Fragments":["(versus","are","(code"]},{"Key":"integers (versus","Fragments":["`String.codepoints`"]},{"Key":"(versus `String.codepoints`","Fragments":["returning"]},{"Key":"`String.codepoints` returning","Fragments":["a"]},{"Key":"of binaries)","Fragments":["per"]},{"Key":"binaries) per","Fragments":["se,"]},{"Key":"per se,","Fragments":["but","but","they"]},{"Key":"se, but","Fragments":["the","it"]},{"Key":"that `binary_to_list`","Fragments":["in"]},{"Key":"`binary_to_list` in","Fragments":["erlang"]},{"Key":"and consequently","Fragments":["in"]},{"Key":"consequently in","Fragments":["elixir"]},{"Key":"elixir has","Fragments":["no","something"]},{"Key":"has no","Fragments":["idea","subexpressions"]},{"Key":"idea about","Fragments":["utf-8,","`Enum.reduce`"]},{"Key":"about utf-8,","Fragments":["so"]},{"Key":"utf-8, so","Fragments":["my"]},{"Key":"so my","Fragments":["code","suggestion","interpolation","solution"]},{"Key":"code will","Fragments":["work"]},{"Key":"work incorrectly","Fragments":["with"]},{"Key":"incorrectly with","Fragments":["utf-8:"]},{"Key":" iex(25)\u003e","Fragments":["binary_to_list"]},{"Key":"iex(25)\u003e binary_to_list","Fragments":["\"да"]},{"Key":"binary_to_list \"да","Fragments":["нет\""]},{"Key":" [208,","Fragments":["180,"]},{"Key":"[208, 180,","Fragments":["208,"]},{"Key":"180, 208,","Fragments":["176,"]},{"Key":"208, 176,","Fragments":["32,"]},{"Key":"176, 32,","Fragments":["208,"]},{"Key":"32, 208,","Fragments":["189,"]},{"Key":"208, 189,","Fragments":["208,"]},{"Key":"189, 208,","Fragments":["181,"]},{"Key":"208, 181,","Fragments":["209,"]},{"Key":"181, 209,","Fragments":["130]"]},{"Key":" this","Fragments":["is","is","is","is"]},{"Key":"erlang I","Fragments":["would"]},{"Key":" 16\u003e","Fragments":["unicode:characters_to_list(\u003c\u003c"]},{"Key":"16\u003e unicode:characters_to_list(\u003c\u003c","Fragments":["\"да"]},{"Key":"unicode:characters_to_list(\u003c\u003c \"да","Fragments":["нет\""]},{"Key":"\"да нет\"","Fragments":["/"]},{"Key":"нет\" /","Fragments":["utf8"]},{"Key":"/ utf8","Fragments":["\u003e\u003e)."]},{"Key":" or,","Fragments":["translated"]},{"Key":"or, translated","Fragments":["into"]},{"Key":"translated into","Fragments":["elixir:","very"]},{"Key":" iex(27)\u003e","Fragments":[":unicode.characters_to_list(\"да"]},{"Key":"iex(27)\u003e :unicode.characters_to_list(\"да","Fragments":["нет\")"]},{"Key":" [1076,","Fragments":["1072,"]},{"Key":"[1076, 1072,","Fragments":["32,"]},{"Key":"1072, 32,","Fragments":["1085,"]},{"Key":"32, 1085,","Fragments":["1077,"]},{"Key":"1085, 1077,","Fragments":["1090]"]},{"Key":"elixir land","Fragments":["with"]},{"Key":"land with","Fragments":["its"]},{"Key":"with its","Fragments":["small","arity","API."]},{"Key":"its small","Fragments":["and"]},{"Key":"small and","Fragments":["beautiful","efficient,"]},{"Key":"and beautiful","Fragments":["library"]},{"Key":"beautiful library","Fragments":["it's"]},{"Key":"library it's","Fragments":["easier"]},{"Key":"it's easier","Fragments":["just","to","to","to"]},{"Key":"easier just","Fragments":["to"]},{"Key":"use `String.codepoints`","Fragments":[":)","and"]},{"Key":"really learned","Fragments":["a","in"]},{"Key":"learned a","Fragments":["lot","lot","lot","few","few"]},{"Key":"lot about","Fragments":["Elixir","Elixir","HashDict."]},{"Key":"about Elixir","Fragments":["when","with","not","(I'm"]},{"Key":"Elixir when","Fragments":["I"]},{"Key":"read about","Fragments":["the"]},{"Key":"you mentioned.","Fragments":["Elixir","I"]},{"Key":"mentioned. Elixir","Fragments":["is"]},{"Key":"an awesome","Fragments":["language!","site,"]},{"Key":"should take","Fragments":["that","a"]},{"Key":"take that","Fragments":["as"]},{"Key":"genuine question.","Fragments":["I"]},{"Key":"question. I","Fragments":["tried"]},{"Key":"implement a","Fragments":["similar","generic"]},{"Key":"similar solution,","Fragments":["including"]},{"Key":"solution, including","Fragments":["the"]},{"Key":"including the","Fragments":["regex","limit,","shouting","arity"]},{"Key":"regex refinement","Fragments":["that"]},{"Key":"refinement that","Fragments":["I"]},{"Key":"think @rasheed","Fragments":["is"]},{"Key":"@rasheed is","Fragments":["hinting"]},{"Key":"is hinting","Fragments":["at."]},{"Key":"hinting at.","Fragments":["In"]},{"Key":"at. In","Fragments":["Elixir,"]},{"Key":"Elixir, I","Fragments":["still","am"]},{"Key":"still needed","Fragments":["a"]},{"Key":"needed a","Fragments":["function","name"]},{"Key":"function almost","Fragments":["exactly"]},{"Key":"almost exactly","Fragments":["like"]},{"Key":"exactly like","Fragments":["your"]},{"Key":"your line","Fragments":["19"]},{"Key":"19 to","Fragments":["make"]},{"Key":"tests pass.","Fragments":["(In"]},{"Key":"pass. (In","Fragments":["Ruby,"]},{"Key":"(In Ruby,","Fragments":["by"]},{"Key":"Ruby, by","Fragments":["contrast,"]},{"Key":"by contrast,","Fragments":["the"]},{"Key":"contrast, the","Fragments":["same"]},{"Key":"same regex","Fragments":["tweak","you"]},{"Key":"regex tweak","Fragments":["removed"]},{"Key":"tweak removed","Fragments":["any"]},{"Key":"removed any","Fragments":["need"]},{"Key":"any need","Fragments":["to"]},{"Key":"looks good!","Fragments":["Your","Have","Notice",":)","As"]},{"Key":"good! Your","Fragments":["`silence`"]},{"Key":"Your `silence`","Fragments":["regex"]},{"Key":"`silence` regex","Fragments":["is"]},{"Key":"is quite","Fragments":["robust.","clear","similar","elegant,","low","low","accurate.","low","low","low","hard","low","low","long"]},{"Key":"more terse","Fragments":["control"]},{"Key":"terse control","Fragments":["flow"]},{"Key":"flow mechanism","Fragments":["for"]},{"Key":"mechanism for","Fragments":["the"]},{"Key":"of `hey`?","Fragments":["The"]},{"Key":"`hey`? The","Fragments":["nested"]},{"Key":"nested conditionals","Fragments":["look"]},{"Key":"conditionals look","Fragments":["a"]},{"Key":"look a","Fragments":["little","little"]},{"Key":"There aren't","Fragments":["right"]},{"Key":"aren't right","Fragments":["and"]},{"Key":"right and","Fragments":["wrong"]},{"Key":"and wrong","Fragments":["answers."]},{"Key":"wrong answers.","Fragments":["Everyone"]},{"Key":"answers. Everyone","Fragments":["is"]},{"Key":"Everyone is","Fragments":["just"]},{"Key":"just suggesting","Fragments":["things"]},{"Key":"suggesting things","Fragments":["based"]},{"Key":"things based","Fragments":["on"]},{"Key":"their tastes","Fragments":["and"]},{"Key":"tastes and","Fragments":["experience."]},{"Key":" Strictly","Fragments":["speaking,"]},{"Key":"Strictly speaking,","Fragments":["I","I"]},{"Key":"speaking, I","Fragments":["think","suppose"]},{"Key":"the `\\b`'s","Fragments":["in"]},{"Key":"`\\b`'s in","Fragments":["the"]},{"Key":"regex are","Fragments":["not"]},{"Key":"a solid","Fragments":["solution."]},{"Key":"the `Enum.filter`","Fragments":["for"]},{"Key":"`Enum.filter` for","Fragments":["production"]},{"Key":"for production","Fragments":["code"]},{"Key":"production code","Fragments":["--","I"]},{"Key":"code --","Fragments":["less"]},{"Key":"-- less","Fragments":["to"]},{"Key":"less to","Fragments":["maintain.","do"]},{"Key":"to maintain.","Fragments":["Implementing","I"]},{"Key":"maintain. Implementing","Fragments":["the"]},{"Key":"Implementing the","Fragments":["recursive"]},{"Key":"is good","Fragments":["practice,","..","enough","as","to","IMO)."]},{"Key":"good practice,","Fragments":["though!"]},{"Key":"with only","Fragments":["whitespace","one","symbols)."]},{"Key":"only whitespace","Fragments":["as"]},{"Key":"whitespace as","Fragments":["silent."]},{"Key":"your _count","Fragments":["method"]},{"Key":"_count method","Fragments":["can"]},{"Key":"refactored into","Fragments":["a","separated"]},{"Key":"more straightforward","Fragments":["piping.","as","positive"]},{"Key":"Also, look","Fragments":["into"]},{"Key":"into `Regex.scan`","Fragments":["for"]},{"Key":"`Regex.scan` for","Fragments":["your","that."]},{"Key":"your sanitize","Fragments":["function."]},{"Key":"The reuse","Fragments":["of"]},{"Key":"reuse of","Fragments":["`count`"]},{"Key":"of `count`","Fragments":["as","makes!","a","was"]},{"Key":"`count` as","Fragments":["a"]},{"Key":"name is","Fragments":["a","worth","somewhat","actually","a"]},{"Key":"bit confusing,","Fragments":["are","since"]},{"Key":"confusing, are","Fragments":["there"]},{"Key":"there more","Fragments":["descriptive"]},{"Key":"descriptive names","Fragments":["for","for"]},{"Key":"your supporting","Fragments":["methods"]},{"Key":"supporting methods","Fragments":["you"]},{"Key":" Finally,","Fragments":["is","for","look","you","one"]},{"Key":"Finally, is","Fragments":["there"]},{"Key":"there an","Fragments":["approach","advantage","Elixir","already"]},{"Key":"an approach","Fragments":["to"]},{"Key":"to downcasing","Fragments":["your"]},{"Key":"downcasing your","Fragments":["words"]},{"Key":"your words","Fragments":["that"]},{"Key":"words that","Fragments":["doesn't","have","are","contain"]},{"Key":"doesn't necessitate","Fragments":["recursion?"]},{"Key":"of `Enum.filter_map`","Fragments":["--"]},{"Key":"`Enum.filter_map` --","Fragments":["that's"]},{"Key":"-- that's","Fragments":["neat!"]},{"Key":"Would `String.codepoints`","Fragments":["be"]},{"Key":"`String.codepoints` be","Fragments":["better"]},{"Key":" Super-picky,","Fragments":["but"]},{"Key":"Super-picky, but","Fragments":["IMO,"]},{"Key":"but IMO,","Fragments":["`empty?`"]},{"Key":"IMO, `empty?`","Fragments":["doesn't"]},{"Key":"`empty?` doesn't","Fragments":["fit","fit"]},{"Key":"doesn't fit","Fragments":["the","the","in","as"]},{"Key":"other two","Fragments":["fn"]},{"Key":"two fn","Fragments":["names."]},{"Key":"was concerned","Fragments":["that"]},{"Key":"concerned that","Fragments":["the","someone"]},{"Key":"compiler may","Fragments":["throw"]},{"Key":"may throw","Fragments":["a"]},{"Key":"throw a","Fragments":["fit","`|\u003e`"]},{"Key":"a fit","Fragments":["if"]},{"Key":"fit if","Fragments":["I"]},{"Key":"personally prefer","Fragments":["single","to","to"]},{"Key":"prefer single","Fragments":["inline"]},{"Key":"single inline","Fragments":["function"]},{"Key":"inline function","Fragments":["declarations","by"]},{"Key":"function declarations","Fragments":["to","with"]},{"Key":"declarations to","Fragments":["using"]},{"Key":"using `defp`","Fragments":["but","and","private","instead","instead"]},{"Key":"`defp` but","Fragments":["the"]},{"Key":"the syntax","Fragments":["was","after","documentation","of","for","`?X`","of","for","just","resembles","for","for","for"]},{"Key":"syntax was","Fragments":["a","less"]},{"Key":"little too","Fragments":["ugly.","quick","literally."]},{"Key":"too ugly.","Fragments":["Breaking"]},{"Key":"ugly. Breaking","Fragments":["it"]},{"Key":"Breaking it","Fragments":["out"]},{"Key":"functions looks","Fragments":["a"]},{"Key":"little nicer","Fragments":["at"]},{"Key":"nicer at","Fragments":["a"]},{"Key":"at a","Fragments":["micro-level,","working","different","single,","consistent","far,","glance.","glance."]},{"Key":"a micro-level,","Fragments":["but"]},{"Key":"micro-level, but","Fragments":["I"]},{"Key":"find myself","Fragments":["looking","wondering","writing"]},{"Key":"looking around","Fragments":["the","now."]},{"Key":"most clear","Fragments":["possible"]},{"Key":"clear possible","Fragments":["code"]},{"Key":"possible code","Fragments":["would"]},{"Key":"code would","Fragments":["be","be","read","have","look","be"]},{"Key":"be my","Fragments":["3rd","Haskell","last","OO","favorite"]},{"Key":"my 3rd","Fragments":["iteration"]},{"Key":"3rd iteration","Fragments":["along"]},{"Key":"iteration along","Fragments":["with"]},{"Key":"along with","Fragments":["single-line","making","byte_size/1","specific"]},{"Key":"with single-line","Fragments":["comments"]},{"Key":"single-line comments","Fragments":["above"]},{"Key":"comments above","Fragments":["each"]},{"Key":"above each","Fragments":["condition."]},{"Key":"in `Person`","Fragments":["into"]},{"Key":"`Person` into","Fragments":["private"]},{"Key":"Would a","Fragments":["simple"]},{"Key":"comparison be","Fragments":["more"]},{"Key":"a length","Fragments":["check?","comparison."]},{"Key":"length check?","Fragments":["Also,"]},{"Key":"check? Also,","Fragments":["super-picky,"]},{"Key":"Also, super-picky,","Fragments":["but"]},{"Key":"super-picky, but","Fragments":["it"]},{"Key":"like `empty?`","Fragments":["doesn't"]},{"Key":"fact mark","Fragments":["it"]},{"Key":"mark it","Fragments":["to"]},{"Key":"be reviewed","Fragments":["by"]},{"Key":"reviewed by","Fragments":["an"]},{"Key":"by an","Fragments":["administrator,"]},{"Key":"an administrator,","Fragments":["and"]},{"Key":"administrator, and","Fragments":["they"]},{"Key":"and they","Fragments":["definitely","are","could","piped","don't","return"]},{"Key":"they definitely","Fragments":["aren't"]},{"Key":"definitely aren't","Fragments":["shy"]},{"Key":"aren't shy","Fragments":["about"]},{"Key":"shy about","Fragments":["providing"]},{"Key":"about providing","Fragments":["additional"]},{"Key":"providing additional","Fragments":["feedback"]},{"Key":"additional feedback","Fragments":["when"]},{"Key":"feedback when","Fragments":["they","you"]},{"Key":"they spot","Fragments":["something."]},{"Key":"am thinking","Fragments":["about","through"]},{"Key":"this discussion","Fragments":["on","is"]},{"Key":"discussion on","Fragments":["parentheses:","whether","the"]},{"Key":"on parentheses:","Fragments":["https://groups.google.com/forum/#!topic/elixir-lang-core/PZFNes9w-aU"]},{"Key":"Maybe there","Fragments":["still","should"]},{"Key":"there still","Fragments":["needs"]},{"Key":"still needs","Fragments":["to"]},{"Key":"better guidelines.","Fragments":[":-D"]},{"Key":"really clean,","Fragments":["I"]},{"Key":"clean, I","Fragments":["like","think."]},{"Key":"the nested","Fragments":["module.","function","list","iterations"]},{"Key":"matching and","Fragments":["a","guards","guards","guards","guard","have","byte_size/1."]},{"Key":"second clause","Fragments":["for","and"]},{"Key":"for `Statement.nothing?(nil)`","Fragments":["?"]},{"Key":" Hmmm","Fragments":["José","sorry"]},{"Key":"Hmmm José","Fragments":["Valim"]},{"Key":"Valim is","Fragments":["suspicious"]},{"Key":"is suspicious","Fragments":["of"]},{"Key":"suspicious of","Fragments":["that,"]},{"Key":"of that,","Fragments":["given"]},{"Key":"that, given","Fragments":["it's"]},{"Key":"given it's","Fragments":["the"]},{"Key":"same for","Fragments":["Ruby","both"]},{"Key":"for Ruby","Fragments":["on","code,"]},{"Key":"Ruby on","Fragments":["Rails."]},{"Key":"on Rails.","Fragments":["Noted!"]},{"Key":" Due","Fragments":["to"]},{"Key":"Due to","Fragments":["the"]},{"Key":"the structure","Fragments":["of","of"]},{"Key":"structure of","Fragments":["the","the","the","this","the"]},{"Key":"the `Words#count/1`,","Fragments":["I"]},{"Key":"`Words#count/1`, I","Fragments":["can't"]},{"Key":"see any","Fragments":["function","logical","explicit","alternative"]},{"Key":"any function","Fragments":["that"]},{"Key":"could break.","Fragments":["Maybe"]},{"Key":"break. Maybe","Fragments":["the"]},{"Key":"Maybe the","Fragments":["`count","code","tests","nature"]},{"Key":"the `count","Fragments":["+"]},{"Key":"`count +","Fragments":["1`"]},{"Key":"1` into","Fragments":["an"]},{"Key":"an increment","Fragments":["function?"]},{"Key":"increment function?","Fragments":["But"]},{"Key":"function? But","Fragments":["still,"]},{"Key":"But still,","Fragments":["I'm"]},{"Key":"still, I'm","Fragments":["not"]},{"Key":"not sure.","Fragments":["I'll"]},{"Key":"sure. I'll","Fragments":["give"]},{"Key":"I'll give","Fragments":["it","that","it","it"]},{"Key":" Awesome,","Fragments":["completely","great"]},{"Key":"Awesome, completely","Fragments":["forgot"]},{"Key":"completely forgot","Fragments":["about"]},{"Key":"using descriptively","Fragments":["named"]},{"Key":"named methods","Fragments":["to","make","for"]},{"Key":"reveal the","Fragments":["intent"]},{"Key":"the ```#hey```","Fragments":["method?"]},{"Key":"To me","Fragments":["the","it","as"]},{"Key":"is_ seems","Fragments":["redundant"]},{"Key":"seems redundant","Fragments":["with"]},{"Key":"the ?.","Fragments":["I"]},{"Key":"?. I","Fragments":["would"]},{"Key":"name more","Fragments":["descriptive"]},{"Key":"value it","Fragments":["represents.","is"]},{"Key":"it represents.","Fragments":["Something"]},{"Key":"represents. Something","Fragments":["like:"]},{"Key":"Something like:","Fragments":["phrase,"]},{"Key":"like: phrase,","Fragments":["prompt,"]},{"Key":"phrase, prompt,","Fragments":["sentence."]},{"Key":"could consider","Fragments":["the","breaking","using"]},{"Key":"consider the","Fragments":["naming","optimization","result"]},{"Key":"your module","Fragments":["and","without"]},{"Key":"the functions.","Fragments":["The","Like,"]},{"Key":"is acting","Fragments":["on"]},{"Key":"acting on","Fragments":["what"]},{"Key":"what in","Fragments":["particular?"]},{"Key":"in particular?","Fragments":["Sentence,"]},{"Key":"particular? Sentence,","Fragments":["Phrase,"]},{"Key":"Sentence, Phrase,","Fragments":["or"]},{"Key":"Phrase, or","Fragments":["Language"]},{"Key":"or Language","Fragments":["might"]},{"Key":"Language might","Fragments":["be"]},{"Key":"better name.","Fragments":["Does"]},{"Key":"name. Does","Fragments":["bob"]},{"Key":"Does bob","Fragments":["really"]},{"Key":"bob really","Fragments":["care"]},{"Key":"really care","Fragments":["that","that"]},{"Key":"care that","Fragments":["it","he"]},{"Key":"is upcase?","Fragments":["or"]},{"Key":"upcase? or","Fragments":["does"]},{"Key":"or does","Fragments":["he","the"]},{"Key":"does he","Fragments":["really"]},{"Key":"he really","Fragments":["care"]},{"Key":"that he","Fragments":["is","codepoints"]},{"Key":"he is","Fragments":["being"]},{"Key":"is being","Fragments":["shouted","rewritten"]},{"Key":"being shouted","Fragments":["at?"]},{"Key":"is great,","Fragments":["I"]},{"Key":"not tried,","Fragments":["but"]},{"Key":"tried, but","Fragments":["is"]},{"Key":"but is","Fragments":["the","returning","not","a","simpler","the","that","there","not"]},{"Key":"the clause","Fragments":["on","where","matches,","doesn't"]},{"Key":"clause on","Fragments":["line"]},{"Key":"19 required?","Fragments":["Could"]},{"Key":"required? Could","Fragments":["changing"]},{"Key":"Could changing","Fragments":["the"]},{"Key":"changing the","Fragments":["regular","tests","meaning"]},{"Key":"regular expression","Fragments":["remove","there","with","`%r/p{L}/u`?","matching","for","in","to","would","that","for","parses"]},{"Key":"expression remove","Fragments":["the"]},{"Key":"really nice.","Fragments":["Could","My","Super"]},{"Key":"nice. Could","Fragments":["you"]},{"Key":"break any","Fragments":["of"]},{"Key":"this out","Fragments":["into","over","a"]},{"Key":"believe it","Fragments":["is"]},{"Key":"is idiomatic","Fragments":["Elixir","and","for"]},{"Key":"use parenthesis","Fragments":["when"]},{"Key":"parenthesis when","Fragments":["defining"]},{"Key":"when defining","Fragments":["functions.","the","your"]},{"Key":"considered adding","Fragments":["a"]},{"Key":"clause and","Fragments":["using","changed"]},{"Key":"Thanks, just","Fragments":["realised","updated"]},{"Key":"realised I","Fragments":["could"]},{"Key":"write that","Fragments":["as","`cond`"]},{"Key":"as `defp","Fragments":["quiet?(nil),"]},{"Key":"`defp quiet?(nil),","Fragments":["do:"]},{"Key":"quiet?(nil), do:","Fragments":["true`"]},{"Key":"do: true`","Fragments":["elixir"]},{"Key":"true` elixir","Fragments":["is"]},{"Key":"update to","Fragments":["the","the"]},{"Key":"the empty/silence","Fragments":["method","check."]},{"Key":"empty/silence method","Fragments":["could"]},{"Key":"method could","Fragments":["potentially","probably"]},{"Key":"could potentially","Fragments":["also","reduce"]},{"Key":"potentially also","Fragments":["benefit"]},{"Key":"also benefit","Fragments":["from"]},{"Key":"being implemented","Fragments":["using"]},{"Key":"implemented using","Fragments":["guards."]},{"Key":"test cases","Fragments":["is","have","either,","for","with","to","will","but"]},{"Key":"cases is","Fragments":["calling","get","great."]},{"Key":"is calling","Fragments":["hey","the","a","the"]},{"Key":"calling hey","Fragments":["with"]},{"Key":"hey with","Fragments":["nil."]},{"Key":"with nil.","Fragments":["I","That"]},{"Key":"nil. I","Fragments":["don't"]},{"Key":"about Erlang","Fragments":["/"]},{"Key":"Erlang /","Fragments":["Elixir."]},{"Key":"/ Elixir.","Fragments":["But"]},{"Key":"Elixir. But","Fragments":["the"]},{"Key":"tests crashes","Fragments":["if"]},{"Key":"crashes if","Fragments":["I"]},{"Key":"not guard","Fragments":["against"]},{"Key":"guard against","Fragments":["nil","invalid"]},{"Key":"nil since","Fragments":["I"]},{"Key":"would mention","Fragments":["that"]},{"Key":"mention that","Fragments":["Elixir"]},{"Key":"Elixir follows","Fragments":["the"]},{"Key":"follows the","Fragments":["Ruby"]},{"Key":"Ruby convention","Fragments":["of","so"]},{"Key":"of method","Fragments":["and"]},{"Key":"and variable","Fragments":["naming.","names"]},{"Key":"a small","Fragments":["amount","comment.","example","one.","suggestion:","performance","tuple","`@lenora","number","boo-boo","comment.","stylistic"]},{"Key":" Funny","Fragments":["I"]},{"Key":"Funny I","Fragments":["always"]},{"Key":"I always","Fragments":["followed","use","wrap","use"]},{"Key":"always followed","Fragments":["Erlang's"]},{"Key":"followed Erlang's","Fragments":["(or"]},{"Key":"Erlang's (or","Fragments":["Joe"]},{"Key":"(or Joe","Fragments":["Armstrong's?)"]},{"Key":"Joe Armstrong's?)","Fragments":["advice"]},{"Key":"Armstrong's?) advice","Fragments":["NOT"]},{"Key":"advice NOT","Fragments":["to"]},{"Key":"NOT to","Fragments":["use"]},{"Key":"use defensive","Fragments":["programming"]},{"Key":"programming and","Fragments":["to","list"]},{"Key":"let processes","Fragments":["crash"]},{"Key":"processes crash","Fragments":["but"]},{"Key":"crash but","Fragments":["guarding"]},{"Key":"but guarding","Fragments":["against"]},{"Key":"nil makes","Fragments":["sense"]},{"Key":" if","Fragments":["!silence?(speech)","fifth_date","d,","fifth_date","d,","flag_set(score,","f.(h)","ah","f.(head)"]},{"Key":"if !silence?(speech)","Fragments":["do"]},{"Key":" upcase(speech)","Fragments":["=="]},{"Key":"upcase(speech) ==","Fragments":["speech"]},{"Key":"rewritten as","Fragments":["one","one-liners."]},{"Key":"as one","Fragments":["boolean","of"]},{"Key":"one boolean","Fragments":["expression"]},{"Key":"boolean expression","Fragments":["without"]},{"Key":"expression without","Fragments":["if"]},{"Key":"nice solution,","Fragments":["but"]},{"Key":"it's basically","Fragments":["a"]},{"Key":"basically a","Fragments":["reimplementation","function"]},{"Key":"a reimplementation","Fragments":["of"]},{"Key":"reimplementation of","Fragments":["`List.foldl`"]},{"Key":"of `List.foldl`","Fragments":["+"]},{"Key":"`List.foldl` +","Fragments":["`HashDict.update`."]},{"Key":"+ `HashDict.update`.","Fragments":["`HashDict.update`"]},{"Key":"`HashDict.update` takes","Fragments":["a","a"]},{"Key":"takes a","Fragments":["function","`String`","word","callback,","range","range.","Range!","single","filtering","match","function","`do`","few","while"]},{"Key":"function which","Fragments":["gets","returns","you","returns","just"]},{"Key":"called if","Fragments":["the"]},{"Key":"already there,","Fragments":["this"]},{"Key":"there, this","Fragments":["is"]},{"Key":"do in","Fragments":["`add_word`."]},{"Key":"pretty easy","Fragments":["to","to","to"]},{"Key":"to comprehend.","Fragments":["I","However,","Also,","I'll"]},{"Key":"comprehend. I","Fragments":["only"]},{"Key":"one nit","Fragments":["worth"]},{"Key":"nit worth","Fragments":["picking."]},{"Key":"worth picking.","Fragments":[":)"]},{"Key":"I admire","Fragments":["the"]},{"Key":"admire the","Fragments":["munging"]},{"Key":"the munging","Fragments":["in"]},{"Key":"munging in","Fragments":["`String.at(String.rstrip(str),"]},{"Key":"in `String.at(String.rstrip(str),","Fragments":["-1)`,"]},{"Key":"`String.at(String.rstrip(str), -1)`,","Fragments":["have"]},{"Key":"-1)`, have","Fragments":["you"]},{"Key":"considered another","Fragments":["method"]},{"Key":"on `String`","Fragments":["which"]},{"Key":"`String` which","Fragments":["would"]},{"Key":"which would","Fragments":["perform","skip","produce","make","allow","allow","be","end","otherwise","also"]},{"Key":"would perform","Fragments":["the","the"]},{"Key":"perform the","Fragments":["same","same","operation"]},{"Key":"same task","Fragments":["in"]},{"Key":"task in","Fragments":["one"]},{"Key":" Small","Fragments":["nit:"]},{"Key":"Small nit:","Fragments":["`forcefull`"]},{"Key":"nit: `forcefull`","Fragments":["is"]},{"Key":"`forcefull` is","Fragments":["misspelt."]},{"Key":"is misspelt.","Fragments":["I'd"]},{"Key":"misspelt. I'd","Fragments":["be"]},{"Key":"I'd be","Fragments":["inclined","confused","curious","glad","keen","surprised","glad","interested","glad"]},{"Key":"be inclined","Fragments":["to"]},{"Key":"of `something`","Fragments":["to"]},{"Key":"to reflect","Fragments":["what","that.","the"]},{"Key":"reflect what","Fragments":["it"]},{"Key":"is (e.g.","Fragments":["`statement`"]},{"Key":"(e.g. `statement`","Fragments":["or"]},{"Key":"`statement` or","Fragments":["`message`)."]},{"Key":" even","Fragments":["if"]},{"Key":"even if","Fragments":["they","there","the","it","I","it","they","only"]},{"Key":"are private","Fragments":["and","to","`defp`","(`defp`)"]},{"Key":"private and","Fragments":["only"]},{"Key":"only serve","Fragments":["`Teenager.hey`?"]},{"Key":"you at","Fragments":["least"]},{"Key":"least tried","Fragments":["doing"]},{"Key":"tried doing","Fragments":["what"]},{"Key":"doing what","Fragments":["I","you","you","they"]},{"Key":"consider it","Fragments":["a","the","when","shouting."]},{"Key":"of identity","Fragments":["vs"]},{"Key":"identity vs","Fragments":["property."]},{"Key":"vs property.","Fragments":["Put"]},{"Key":"property. Put","Fragments":["differently,"]},{"Key":"Put differently,","Fragments":["are"]},{"Key":"differently, are","Fragments":["`is_aggressive?`"]},{"Key":"are `is_aggressive?`","Fragments":["and"]},{"Key":"`is_aggressive?` and","Fragments":["`is_question?`"]},{"Key":"and `is_question?`","Fragments":["mutually"]},{"Key":"`is_question?` mutually","Fragments":["incompatible,"]},{"Key":"incompatible, or","Fragments":["are"]},{"Key":"are they","Fragments":["properties"]},{"Key":"they properties","Fragments":["(`aggressive?`"]},{"Key":"properties (`aggressive?`","Fragments":["and"]},{"Key":"(`aggressive?` and","Fragments":["`interrogative?`)"]},{"Key":"and `interrogative?`)","Fragments":["that"]},{"Key":"`interrogative?`) that","Fragments":["the"]},{"Key":"implementation checks","Fragments":["for,"]},{"Key":"checks for,","Fragments":["possibly"]},{"Key":"for, possibly","Fragments":["in"]},{"Key":"possibly in","Fragments":["order"]},{"Key":"in order","Fragments":["of","to","to","to","to","to","to"]},{"Key":"some external","Fragments":["priority?"]},{"Key":" Anyways,","Fragments":["these","thank"]},{"Key":"Anyways, these","Fragments":["things"]},{"Key":"these things","Fragments":["take","that"]},{"Key":"things take","Fragments":["too"]},{"Key":"take too","Fragments":["much"]},{"Key":"much time","Fragments":["to"]},{"Key":"get approved,","Fragments":["and"]},{"Key":"approved, and","Fragments":["this"]},{"Key":"and this","Fragments":["discussion","ecosystem","looks","just","exercise","shouldn't","is"]},{"Key":"discussion is","Fragments":["now"]},{"Key":"now in","Fragments":["the"]},{"Key":"of opinion,","Fragments":["so..."]},{"Key":"opinion, so...","Fragments":["onward!"]},{"Key":"Not at","Fragments":["all,"]},{"Key":"all, it","Fragments":["depends","only"]},{"Key":"it depends","Fragments":["on"]},{"Key":"the content.","Fragments":["For"]},{"Key":"content. For","Fragments":["example"]},{"Key":"example `thing.is_xpath?`","Fragments":["either"]},{"Key":"`thing.is_xpath?` either","Fragments":["way"]},{"Key":"it's subjective","Fragments":["to"]},{"Key":"subjective to","Fragments":["the"]},{"Key":"the developer","Fragments":["and"]},{"Key":"developer and","Fragments":["I"]},{"Key":"prefix in","Fragments":["this","my"]},{"Key":"this instance.","Fragments":["I"]},{"Key":"instance. I","Fragments":["did","do","think"]},{"Key":"did drop","Fragments":["the"]},{"Key":"Ruby implementation","Fragments":["but"]},{"Key":"implementation but","Fragments":["only"]},{"Key":"only because","Fragments":["I","those"]},{"Key":"I internalised","Fragments":["the"]},{"Key":"internalised the","Fragments":["data."]},{"Key":"Hey Alan!!!","Fragments":[":-)"]},{"Key":"feedback. Yes,","Fragments":["I"]},{"Key":"that (and","Fragments":["did"]},{"Key":"(and did","Fragments":["it"]},{"Key":"did it","Fragments":["on","like","for","with","correctly","this","either.","correctly,","here","could"]},{"Key":"it on","Fragments":["my","the","my","a","the","the","`add`","a"]},{"Key":"my JS","Fragments":["one),"]},{"Key":"JS one),","Fragments":["but"]},{"Key":"one), but","Fragments":["I"]},{"Key":"I spent","Fragments":["a","a","some","some"]},{"Key":"spent a","Fragments":["bunch","lot"]},{"Key":"time trying","Fragments":["to","to","to"]},{"Key":"to figure","Fragments":["out","out","out","out","out","out.","out","out","out","the","out","out,","out","out","out","out"]},{"Key":"out pattern","Fragments":["matching"]},{"Key":"this one,","Fragments":["then","I","but","since"]},{"Key":"one, then","Fragments":["just"]},{"Key":"then just","Fragments":["hurried","map","doing","put"]},{"Key":"just hurried","Fragments":["through"]},{"Key":"hurried through","Fragments":["the"]},{"Key":"I've updated","Fragments":["based","the","my","the"]},{"Key":"updated based","Fragments":["on"]},{"Key":"I recommended","Fragments":["it","it,"]},{"Key":"recommended it","Fragments":["for"]},{"Key":"for approval.","Fragments":["It"]},{"Key":"approval. It","Fragments":["will"]},{"Key":"be flagged","Fragments":["for"]},{"Key":"flagged for","Fragments":["one"]},{"Key":"for one","Fragments":["of","of","of","I'd"]},{"Key":"the administrators","Fragments":["of"]},{"Key":"administrators of","Fragments":["exercism.io"]},{"Key":"of exercism.io","Fragments":["to","will"]},{"Key":"exercism.io to","Fragments":["review,"]},{"Key":"to review,","Fragments":["and"]},{"Key":"review, and","Fragments":["they'll"]},{"Key":"and they'll","Fragments":["either"]},{"Key":"they'll either","Fragments":["find"]},{"Key":"either find","Fragments":["something"]},{"Key":"find something","Fragments":["I","like","more"]},{"Key":"something I","Fragments":["missed","haven't","need","can","test"]},{"Key":"missed or","Fragments":["you'll"]},{"Key":"or you'll","Fragments":["move"]},{"Key":"you'll move","Fragments":["on"]},{"Key":"It probably","Fragments":["is,","belongs"]},{"Key":"probably is,","Fragments":["yes."]},{"Key":"wrote that","Fragments":["for","map)"]},{"Key":"for my","Fragments":["own","initial","own","taste,","taste.","custom"]},{"Key":"my own","Fragments":["benefit","code.","to","solution.","solution.","power","interest.","submission","quick","attempts","`reduce/3`","implementation"]},{"Key":"own benefit","Fragments":[":)"]},{"Key":"was writing","Fragments":["the"]},{"Key":"thought to","Fragments":["myself","use","give"]},{"Key":"to myself","Fragments":["\"This"]},{"Key":"myself \"This","Fragments":["should"]},{"Key":"\"This should","Fragments":["probably"]},{"Key":"should probably","Fragments":["be","use","restrict","be","have","use","not"]},{"Key":"probably be","Fragments":["on","dropped","separated","better","more","named","\u003e="]},{"Key":"be on","Fragments":["a","a"]},{"Key":"single line\"","Fragments":["but"]},{"Key":"line\" but","Fragments":["didn't"]},{"Key":"but didn't","Fragments":["give","see","know"]},{"Key":"didn't give","Fragments":["it"]},{"Key":"you asked","Fragments":["the"]},{"Key":"asked the","Fragments":["question,"]},{"Key":"the question,","Fragments":["I"]},{"Key":"question, I","Fragments":["was"]},{"Key":"was surprised","Fragments":["to","to","that"]},{"Key":"to realize","Fragments":["I","String.length"]},{"Key":"realize I","Fragments":["had"]},{"Key":"had some","Fragments":["thoughts","issues","real"]},{"Key":"some thoughts","Fragments":["about"]},{"Key":"thoughts about","Fragments":["it.","that"]},{"Key":"about it.","Fragments":["So","Hint:","I","One"]},{"Key":"it. So","Fragments":["out"]},{"Key":"So out","Fragments":["they"]},{"Key":"out they","Fragments":["came."]},{"Key":" @audie","Fragments":["I"]},{"Key":"@audie I","Fragments":["forgot"]},{"Key":"forgot I","Fragments":["could"]},{"Key":"could leave","Fragments":["off"]},{"Key":"leave off","Fragments":["the"]},{"Key":"off the","Fragments":["empty","\"1\",","right","parens"]},{"Key":"Wow, thank","Fragments":["you."]},{"Key":"you. `List.foldl/3`","Fragments":["is"]},{"Key":"`List.foldl/3` is","Fragments":["really"]},{"Key":"Thanks! My","Fragments":["first"]},{"Key":"first go","Fragments":["at"]},{"Key":"go at","Fragments":["Elixir.","it.","cleaning"]},{"Key":"at Elixir.","Fragments":["I"]},{"Key":"Elixir. I","Fragments":["think","read","had","need","checked"]},{"Key":"I a","Fragments":["much"]},{"Key":"much bigger","Fragments":["fan"]},{"Key":"bigger fan","Fragments":["of"]},{"Key":"this than","Fragments":["Erlang"]},{"Key":"than Erlang","Fragments":["syntax..."]},{"Key":" Implemented","Fragments":["the"]},{"Key":"Implemented the","Fragments":["v0.10.1"]},{"Key":"the v0.10.1","Fragments":["syntax"]},{"Key":"v0.10.1 syntax","Fragments":["as"]},{"Key":"syntax as","Fragments":["recommended."]},{"Key":"Any chance","Fragments":["of"]},{"Key":"chance of","Fragments":["having","functions"]},{"Key":"of having","Fragments":["this","`nucleotide_counts`","\"import","module","to","Cell","a","`counter`,","to","each","to"]},{"Key":"having this","Fragments":["accepted,"]},{"Key":"this accepted,","Fragments":["or"]},{"Key":"accepted, or","Fragments":["nitpicked"]},{"Key":"or nitpicked","Fragments":["if"]},{"Key":"nitpicked if","Fragments":["needed?"]},{"Key":" Clever","Fragments":["how"]},{"Key":"Clever how","Fragments":["you"]},{"Key":"you pipe","Fragments":["either"]},{"Key":"pipe either","Fragments":["\"No"]},{"Key":"either \"No","Fragments":["more\""]},{"Key":"\"No more\"","Fragments":["or"]},{"Key":"more\" or","Fragments":["1"]},{"Key":"or 1","Fragments":["or"]},{"Key":"or n","Fragments":["into"]},{"Key":"n into","Fragments":["#bottles"]},{"Key":"into #bottles","Fragments":["and"]},{"Key":"#bottles and","Fragments":["do"]},{"Key":"do similar","Fragments":["things"]},{"Key":"similar things","Fragments":["#take."]},{"Key":" @kamron","Fragments":["awesome"]},{"Key":"@kamron awesome","Fragments":["suggestions,"]},{"Key":"awesome suggestions,","Fragments":["thanks."]},{"Key":"love exercism,","Fragments":["and"]},{"Key":"exercism, and","Fragments":["I"]},{"Key":"love Elixir!","Fragments":[":)"]},{"Key":" yep,","Fragments":["you're"]},{"Key":"yep, you're","Fragments":["right"]},{"Key":"you're right","Fragments":["-",":)","this","that","about","about","-"]},{"Key":"right -","Fragments":["looks","this"]},{"Key":"- looks","Fragments":["much"]},{"Key":"looks much","Fragments":["better","better."]},{"Key":"better on","Fragments":["the","elixir,"]},{"Key":"very inelegant","Fragments":["first"]},{"Key":"inelegant first","Fragments":["attempt,"]},{"Key":"first attempt,","Fragments":["to"]},{"Key":"attempt, to","Fragments":["get"]},{"Key":"get familiar","Fragments":["with"]},{"Key":"pretty good!","Fragments":["What","The"]},{"Key":"good! What","Fragments":["about"]},{"Key":"about extracting","Fragments":["the","the","them","the"]},{"Key":"the filtering","Fragments":["operation","function"]},{"Key":"filtering operation","Fragments":["to"]},{"Key":"to its","Fragments":["own","own","uppercase","head,"]},{"Key":"the heads","Fragments":["up.","up"]},{"Key":"heads up.","Fragments":[":)"]},{"Key":"syntax after","Fragments":["I"]},{"Key":"after I","Fragments":["pulled"]},{"Key":"I pulled","Fragments":["down","downcase"]},{"Key":"pulled down","Fragments":["the"]},{"Key":"latest Elixir","Fragments":["version.","development","now)"]},{"Key":" Quite","Fragments":["happy","a","elegant"]},{"Key":"Quite happy","Fragments":["with"]},{"Key":"one. What","Fragments":["do","do"]},{"Key":"No more","Fragments":["duplicated"]},{"Key":"more duplicated","Fragments":["empty?"]},{"Key":"duplicated empty?","Fragments":["checks"]},{"Key":"empty? checks","Fragments":[":)"]},{"Key":"the increment","Fragments":["lambda."]},{"Key":"This seems","Fragments":["like","like","to","unnatural."]},{"Key":"nice balance","Fragments":["between"]},{"Key":"between clarity","Fragments":["and","and"]},{"Key":"clarity and","Fragments":["lack","lack"]},{"Key":"and lack","Fragments":["of","of"]},{"Key":"Please upgrade","Fragments":["your","your","your"]},{"Key":"upgrade your","Fragments":["exercism","exercism","exercism"]},{"Key":"your exercism","Fragments":["gem,","gem,","gem,"]},{"Key":"exercism gem,","Fragments":["as","as","as"]},{"Key":"gem, as","Fragments":["there","there","there"]},{"Key":"as there","Fragments":["have","have","is","have","is"]},{"Key":"there have","Fragments":["been","been","been"]},{"Key":"been some","Fragments":["significant","significant","significant"]},{"Key":"some significant","Fragments":["improvements.","improvements.","improvements."]},{"Key":"Yes it","Fragments":["would","works"]},{"Key":"readable ,","Fragments":["thanks"]},{"Key":" Totally","Fragments":["forgot"]},{"Key":"Totally forgot","Fragments":["to"]},{"Key":"of `ends_with?`!","Fragments":["Going"]},{"Key":"`ends_with?`! Going","Fragments":["to"]},{"Key":" @dana:","Fragments":["Sorry,"]},{"Key":"@dana: Sorry,","Fragments":["I"]},{"Key":"don't follow","Fragments":["you."]},{"Key":"follow you.","Fragments":["Would"]},{"Key":"you. Would","Fragments":["you"]},{"Key":"you please","Fragments":["expand","elaborate?"]},{"Key":"please expand","Fragments":["on"]},{"Key":"expand on","Fragments":["that"]},{"Key":"really good.","Fragments":["Since"]},{"Key":"good. Since","Fragments":["I'm"]},{"Key":"Since I'm","Fragments":["supposed","using"]},{"Key":"I'm supposed","Fragments":["to"]},{"Key":"pick nits,","Fragments":["though,"]},{"Key":"nits, though,","Fragments":["the"]},{"Key":"though, the","Fragments":["convention","syntax"]},{"Key":"convention for","Fragments":["functions","functions","predicates)","Elixir,"]},{"Key":"for functions","Fragments":["that","that"]},{"Key":"boolean is","Fragments":["to"]},{"Key":"would this","Fragments":["code","work","implementation","be"]},{"Key":"code react","Fragments":["to"]},{"Key":"react to","Fragments":["`Teenager.hey(nil)`?"]},{"Key":"Great start","Fragments":["-"]},{"Key":"start -","Fragments":["is","multiple","things"]},{"Key":"avoid checking","Fragments":["for"]},{"Key":"string multiple","Fragments":["times"]},{"Key":"multiple times","Fragments":["(I","(once"]},{"Key":"times (I","Fragments":["see"]},{"Key":"(I see","Fragments":["that"]},{"Key":"is checked","Fragments":["in"]},{"Key":"checked in","Fragments":["both"]},{"Key":"in both","Fragments":["`silence?`","verse"]},{"Key":"both `silence?`","Fragments":["and"]},{"Key":"`silence?` and","Fragments":["`scream?`","`shouting?`"]},{"Key":" the","Fragments":["function","is_question","school's"]},{"Key":"names are","Fragments":["looking","descriptive.","a","often","so","the","very","descriptive,","not"]},{"Key":"are looking","Fragments":["good!","for.","for"]},{"Key":"a feature","Fragments":["in"]},{"Key":"feature in","Fragments":["elixir"]},{"Key":"elixir to","Fragments":["allow","wonder","me."]},{"Key":"to allow","Fragments":["pattern","\"","just","code","them"]},{"Key":"allow pattern","Fragments":["matching"]},{"Key":"on function","Fragments":["arguments."]},{"Key":"function arguments.","Fragments":["This","I"]},{"Key":"arguments. This","Fragments":["is"]},{"Key":"is preferred","Fragments":["to","over","over","over"]},{"Key":"preferred to","Fragments":["using","use","do"]},{"Key":"using boolean","Fragments":["or"]},{"Key":"boolean or","Fragments":["conditional"]},{"Key":"or conditional","Fragments":["statements"]},{"Key":"conditional statements","Fragments":["when","in"]},{"Key":"statements when","Fragments":["possible"]},{"Key":"when possible","Fragments":["(e.g."]},{"Key":"possible (e.g.","Fragments":["when"]},{"Key":"(e.g. when","Fragments":["checking"]},{"Key":"when checking","Fragments":["for","for"]},{"Key":"was thinking","Fragments":["along","there","more","of","of","it"]},{"Key":"thinking along","Fragments":["the"]},{"Key":"along the","Fragments":["lines","lines","lines"]},{"Key":"the lines","Fragments":["of","with","between","of","inside","of","before"]},{"Key":"lines of","Fragments":["\"candidate\"","code\".","a","implementation","code.","code","code","inverting","code","code.","`[a,","the","code."]},{"Key":"of \"candidate\"","Fragments":["or"]},{"Key":"\"candidate\" or","Fragments":["\"potential\","]},{"Key":"or \"potential\",","Fragments":["but"]},{"Key":"\"potential\", but","Fragments":["this"]},{"Key":"this can","Fragments":["work","be","return"]},{"Key":"can work","Fragments":["too."]},{"Key":"I must","Fragments":["confess","be","admit"]},{"Key":"must confess","Fragments":["I'm"]},{"Key":"confess I'm","Fragments":["getting"]},{"Key":"I'm getting","Fragments":["hot","an"]},{"Key":"getting hot","Fragments":["on"]},{"Key":"hot on","Fragments":["Elixir."]},{"Key":"on Elixir.","Fragments":["Great"]},{"Key":"Elixir. Great","Fragments":["stuff"]},{"Key":"Great stuff","Fragments":["in"]},{"Key":"stuff in","Fragments":["there.","Elixir"]},{"Key":"should sort","Fragments":["out"]},{"Key":"sort out","Fragments":["the"]},{"Key":"the `filter`/`exclude_similar`/`different?`","Fragments":["stuff."]},{"Key":"and DRY.","Fragments":["I"]},{"Key":"DRY. I","Fragments":["think"]},{"Key":"a typo","Fragments":["in","for","rather"]},{"Key":"your @verner.","Fragments":[":)"]},{"Key":"That comes","Fragments":["from"]},{"Key":"from significant","Fragments":["Erlang"]},{"Key":"significant Erlang","Fragments":["experience"]},{"Key":"Erlang experience","Fragments":[":)"]},{"Key":"experience :)","Fragments":["Takes"]},{"Key":":) Takes","Fragments":["a"]},{"Key":"Takes a","Fragments":["while"]},{"Key":"a while","Fragments":["to","to","longer,","back.","since","back.","to","back.","to"]},{"Key":"while to","Fragments":["figure","work","figure","get","parse."]},{"Key":"this kind","Fragments":["of","of","of","of"]},{"Key":"of stuff","Fragments":["in","is","brought","is"]},{"Key":"Elixir though,","Fragments":["the"]},{"Key":"syntax documentation","Fragments":["is"]},{"Key":"really quite","Fragments":["terrible."]},{"Key":"hadn't thought","Fragments":["to","about","of","of"]},{"Key":"use binary","Fragments":["literals"]},{"Key":"binary literals","Fragments":["to"]},{"Key":"literals to","Fragments":["generate"]},{"Key":"sure this","Fragments":["can","isn't","should","is","started","is","way"]},{"Key":"improved much","Fragments":["--"]},{"Key":"much --","Fragments":["great"]},{"Key":"-- great","Fragments":["job!"]},{"Key":" Though,","Fragments":["hmm,"]},{"Key":"Though, hmm,","Fragments":["part"]},{"Key":"hmm, part","Fragments":["of"]},{"Key":"my problem","Fragments":["may"]},{"Key":"problem may","Fragments":["be","have"]},{"Key":"be that","Fragments":["I","you","once","you"]},{"Key":"have Elixir","Fragments":["0.9"]},{"Key":"Elixir 0.9","Fragments":["on"]},{"Key":"0.9 on","Fragments":["my"]},{"Key":"my laptop","Fragments":["right"]},{"Key":"laptop right","Fragments":["now,"]},{"Key":"right now,","Fragments":["as"]},{"Key":"now, as","Fragments":["opposed"]},{"Key":"to 0.10","Fragments":["at"]},{"Key":"0.10 at","Fragments":["work."]},{"Key":"at work.","Fragments":["Trying"]},{"Key":"work. Trying","Fragments":["to"]},{"Key":"Trying to","Fragments":["update...","work","minimize","get"]},{"Key":"First pass.","Fragments":["Passes"]},{"Key":"pass. Passes","Fragments":["the"]},{"Key":"Passes the","Fragments":["tests;"]},{"Key":"the tests;","Fragments":["attempts"]},{"Key":"tests; attempts","Fragments":["to"]},{"Key":"attempts to","Fragments":["avoid"]},{"Key":"avoid duplication.","Fragments":["I"]},{"Key":"duplication. I","Fragments":["think"]},{"Key":"it's still","Fragments":["ugly.","going","not"]},{"Key":"Yeah, this","Fragments":["passed"]},{"Key":"this passed","Fragments":["for"]},{"Key":"passed for","Fragments":["me."]},{"Key":" Okay,","Fragments":["that's"]},{"Key":"Okay, that's","Fragments":["fine."]},{"Key":"that's fine.","Fragments":["I","I"]},{"Key":"fine. I","Fragments":["assumed","don't","was","felt"]},{"Key":"I assumed","Fragments":["the","it","alpha"]},{"Key":"assumed the","Fragments":["purpose"]},{"Key":"the \"!\"","Fragments":["check"]},{"Key":"\"!\" check","Fragments":["in"]},{"Key":"tests was","Fragments":["to","the"]},{"Key":"to guide","Fragments":["people","where"]},{"Key":"guide people","Fragments":["away"]},{"Key":"people away","Fragments":["from"]},{"Key":"away from","Fragments":["using","regex","Enum"]},{"Key":"from using","Fragments":["that","cond/if"]},{"Key":"between being","Fragments":["concise"]},{"Key":"being concise","Fragments":["and"]},{"Key":"and communicating","Fragments":["intention."]},{"Key":"communicating intention.","Fragments":["This"]},{"Key":"intention. This","Fragments":["implementation"]},{"Key":"This implementation","Fragments":["leans","uses","of"]},{"Key":"implementation leans","Fragments":["a"]},{"Key":"leans a","Fragments":["bit"]},{"Key":"more toward","Fragments":["communication."]},{"Key":"believe that","Fragments":["the","constraint"]},{"Key":"the \u0026amp;()","Fragments":["syntax"]},{"Key":"\u0026amp;() syntax","Fragments":["is"]},{"Key":"is new","Fragments":["as"]},{"Key":"new as","Fragments":["of"]},{"Key":"as of","Fragments":["Elixir","starting"]},{"Key":"is not.","Fragments":["Nice"]},{"Key":"not. Nice","Fragments":["catch."]},{"Key":"you eliminate","Fragments":["the"]},{"Key":"for \"!\"","Fragments":["in","is"]},{"Key":"\"!\" in","Fragments":["`check_ending`?"]},{"Key":"in `check_ending`?","Fragments":["The"]},{"Key":"`check_ending`? The","Fragments":["default"]},{"Key":"The default","Fragments":["case"]},{"Key":"default case","Fragments":["will"]},{"Key":"case will","Fragments":["give"]},{"Key":" Appreciate","Fragments":["the"]},{"Key":"Appreciate the","Fragments":["suggestion."]},{"Key":"the suggestion.","Fragments":["I've","I've"]},{"Key":"suggestion. I've","Fragments":["submitted","submitted"]},{"Key":"good! Have","Fragments":["you"]},{"Key":"into their","Fragments":["own","own"]},{"Key":"give them","Fragments":["a","a"]},{"Key":"them a","Fragments":["more","clear","bit"]},{"Key":"Oops, I","Fragments":["guess"]},{"Key":"this got","Fragments":["accidentally"]},{"Key":"got accidentally","Fragments":["submitted."]},{"Key":"accidentally submitted.","Fragments":["Disregard"]},{"Key":"submitted. Disregard","Fragments":[":)"]},{"Key":"extract private","Fragments":["functions"]},{"Key":"Fair enough.","Fragments":[":)","I"]},{"Key":"Oh, nice","Fragments":["use"]},{"Key":"here for","Fragments":["testing","`is_shouting?/1`"]},{"Key":"for testing","Fragments":["conditions","properties"]},{"Key":"testing conditions","Fragments":[":)"]},{"Key":"Maybe declare","Fragments":["the"]},{"Key":"declare the","Fragments":["tester"]},{"Key":"the tester","Fragments":["functions"]},{"Key":"tester functions","Fragments":["as"]},{"Key":"as private?","Fragments":["Otherwise"]},{"Key":"private? Otherwise","Fragments":["looks"]},{"Key":"Otherwise looks","Fragments":["great!","fine."]},{"Key":"use keyword","Fragments":["blocks"]},{"Key":"keyword blocks","Fragments":["to"]},{"Key":"blocks to","Fragments":["define"]},{"Key":"define functions","Fragments":["on","in","with"]},{"Key":"one line,","Fragments":["I","it's"]},{"Key":"line, I","Fragments":["generally"]},{"Key":"I generally","Fragments":["only","prefer","just","go","like","just"]},{"Key":"generally only","Fragments":["do"]},{"Key":"only do","Fragments":["this","that"]},{"Key":"for short","Fragments":["functions"]},{"Key":"short functions","Fragments":["that","into"]},{"Key":"that only","Fragments":["have","concerns","concerns","that","contain","contained","once.","takes","requires","knows","requires","valid","had"]},{"Key":"one parameter","Fragments":["however."]},{"Key":"Much clearer","Fragments":["having"]},{"Key":"clearer having","Fragments":["extracted"]},{"Key":"having extracted","Fragments":["the"]},{"Key":"reduce callback","Fragments":["to","params"]},{"Key":"callback to","Fragments":["its","`reduce`."]},{"Key":"Hmm, lemme","Fragments":["try"]},{"Key":"lemme try","Fragments":["that"]},{"Key":"of piping","Fragments":["in","the"]},{"Key":"count(), rather","Fragments":["than"]},{"Key":"than using","Fragments":["temporary","a","the","the","cond.","*count*,","only","`last/1`"]},{"Key":"using temporary","Fragments":["variables?"]},{"Key":"Any feedback?","Fragments":[":)"]},{"Key":"Would declaring","Fragments":["test"]},{"Key":"declaring test","Fragments":["functions","functions"]},{"Key":"test functions","Fragments":["as","as"]},{"Key":"private be","Fragments":["a"]},{"Key":"just minor,","Fragments":["but"]},{"Key":"minor, but","Fragments":["I"]},{"Key":"for private","Fragments":["functions","methods"]},{"Key":"come after","Fragments":["the"]},{"Key":"Ah indeed,","Fragments":["thanks!"]},{"Key":"Submitted in","Fragments":["error","error","error"]},{"Key":"in error","Fragments":["-","-"]},{"Key":"error -","Fragments":["this","still"]},{"Key":"- this","Fragments":["doesn't","one","is"]},{"Key":"this doesn't","Fragments":["work!","feel","create","create","surprise","create","create","create","create","create"]},{"Key":"doesn't work!","Fragments":["(Though"]},{"Key":"work! (Though","Fragments":["if"]},{"Key":"(Though if","Fragments":["anyone"]},{"Key":"can tell","Fragments":["me"]},{"Key":"tell me","Fragments":["a","how"]},{"Key":"of fixing","Fragments":["it...)"]},{"Key":"using Pattern","Fragments":["Matching"]},{"Key":"Pattern Matching","Fragments":["on"]},{"Key":"Matching on","Fragments":["the"]},{"Key":"the `silence?/1`","Fragments":["function"]},{"Key":"`silence?/1` function","Fragments":["?"]},{"Key":"The three","Fragments":["functions"]},{"Key":"three functions","Fragments":["`silence?/1`,","are","you've","that"]},{"Key":"functions `silence?/1`,","Fragments":["`shouting?/1`,"]},{"Key":"`silence?/1`, `shouting?/1`,","Fragments":["and"]},{"Key":"`shouting?/1`, and","Fragments":["`question?/1`"]},{"Key":"and `question?/1`","Fragments":["are"]},{"Key":"`question?/1` are","Fragments":["really"]},{"Key":"really just","Fragments":["helpers","pattern","simple"]},{"Key":"just helpers","Fragments":["for"]},{"Key":"for `hey/1`.","Fragments":["Have"]},{"Key":"`hey/1`. Have","Fragments":["you"]},{"Key":" Unless","Fragments":["I'm"]},{"Key":"Unless I'm","Fragments":["mistaken,"]},{"Key":"I'm mistaken,","Fragments":["the"]},{"Key":"mistaken, the","Fragments":["leading"]},{"Key":"leading `\u0026amp;`","Fragments":["will"]},{"Key":"`\u0026amp;` will","Fragments":["be"]},{"Key":"be required","Fragments":["in"]},{"Key":"required in","Fragments":["later","things","is_question?"]},{"Key":"in later","Fragments":["versions.","version"]},{"Key":"Aha, my","Fragments":["Elixir"]},{"Key":"my Elixir","Fragments":["version","version","toolbelt."]},{"Key":"version seems","Fragments":["to"]},{"Key":"be 0.9.1","Fragments":["-"]},{"Key":"0.9.1 -","Fragments":["is"]},{"Key":"too old?","Fragments":["(I"]},{"Key":"old? (I","Fragments":["followed"]},{"Key":"(I followed","Fragments":["the"]},{"Key":"followed the","Fragments":["installation","spirit"]},{"Key":"the installation","Fragments":["instructions"]},{"Key":"installation instructions","Fragments":["provided"]},{"Key":"instructions provided","Fragments":["on"]},{"Key":"provided on","Fragments":["this"]},{"Key":"this site","Fragments":["to"]},{"Key":"site to","Fragments":["the"]},{"Key":" List.concat","Fragments":["would","would"]},{"Key":"List.concat would","Fragments":["more","be"]},{"Key":"would more","Fragments":["semantically","interesting"]},{"Key":"semantically correct","Fragments":["than","than","than"]},{"Key":"correct than","Fragments":["flatten","flatten.","`flatten`"]},{"Key":"than flatten","Fragments":["since"]},{"Key":"flatten since","Fragments":["the"]},{"Key":"is strictly","Fragments":["[[string]]"]},{"Key":"strictly [[string]]","Fragments":["and"]},{"Key":"[[string]] and","Fragments":["not"]},{"Key":"something arbitrarily","Fragments":["nested."]},{"Key":"arbitrarily nested.","Fragments":["Everything"]},{"Key":"nested. Everything","Fragments":["else"]},{"Key":"but don't","Fragments":["forget","let","include"]},{"Key":"don't forget","Fragments":["to"]},{"Key":"forget to","Fragments":["remove"]},{"Key":"remove your","Fragments":["comment."]},{"Key":"your comment.","Fragments":[";-)"]},{"Key":"Ah indeed!","Fragments":["Thanks"]},{"Key":"indeed! Thanks","Fragments":[":)"]},{"Key":"Thanks, I'll","Fragments":["work"]},{"Key":"I'll work","Fragments":["on","on"]},{"Key":"work on","Fragments":["that","opposite","lists).","lists","just","it","any","ranges?","ranges,","anything","some","data","a","\"bob\"","the"]},{"Key":"try a","Fragments":["nearly"]},{"Key":"a nearly","Fragments":["pure"]},{"Key":"nearly pure","Fragments":["pattern-matching"]},{"Key":"pure pattern-matching","Fragments":["based"]},{"Key":"pattern-matching based","Fragments":["approach"]},{"Key":"based approach","Fragments":["here."]},{"Key":"Probably a","Fragments":["lot","good","premature"]},{"Key":"of string","Fragments":["repetitions,","concatenation","concatenation"]},{"Key":"string repetitions,","Fragments":["but"]},{"Key":"repetitions, but","Fragments":["worked"]},{"Key":"but worked","Fragments":["quite"]},{"Key":"worked quite","Fragments":["well."]},{"Key":"first attempt","Fragments":["was","is","I"]},{"Key":"attempt was","Fragments":["to"]},{"Key":"but we","Fragments":["can't"]},{"Key":"we can't","Fragments":["use","really"]},{"Key":"use remote","Fragments":["functions"]},{"Key":"remote functions","Fragments":["in"]},{"Key":"in guards.","Fragments":["However,","Nice!"]},{"Key":"guards. However,","Fragments":["I"]},{"Key":"could of","Fragments":["course"]},{"Key":"of course","Fragments":["always","I","I",":)","but","just","his",":)","you","you","the"]},{"Key":"course always","Fragments":["define"]},{"Key":"always define","Fragments":["some"]},{"Key":"define some","Fragments":["more"]},{"Key":" Empty","Fragments":["parens"]},{"Key":"Empty parens","Fragments":["do"]},{"Key":"parens do","Fragments":["nothing"]},{"Key":"do nothing","Fragments":["but"]},{"Key":"nothing but","Fragments":["provide"]},{"Key":"but provide","Fragments":["line"]},{"Key":"provide line","Fragments":["noise,"]},{"Key":"line noise,","Fragments":["imo."]},{"Key":"than that,","Fragments":["it","it's","looks","for","it","I","this","looks","looks","looks","looks","I","looks","this"]},{"Key":"is solid,","Fragments":["although"]},{"Key":"solid, although","Fragments":["the"]},{"Key":"the explicit","Fragments":["recursion","recursion.","anonymous","case","Enum.map","module","recursion,","listing","group","recursion","`head1"]},{"Key":"explicit recursion","Fragments":["could","here,","in","it's","(`do_count`)","on","to","like","by","can","when","you"]},{"Key":"recursion could","Fragments":["be"]},{"Key":"written in","Fragments":["terms","elixir.","the","such","`snake_case`"]},{"Key":"in terms","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"terms of","Fragments":["`reduce`.","a","just","`String.replace/4`,","`reduce`,","`square`?","standard","`reduce`","keep","the","`Enum.reverse","passing","complexity","`keep`","`keep`","`keep`,","complexity","`append`","`append`,","`append`.","existing","the","what","`append`.","fault","fault","the","the","the","the","memory","readability.","`reduce`","reduce","_reduce_","`reduce`."]},{"Key":"think \"silent?\"","Fragments":["is"]},{"Key":"\"silent?\" is","Fragments":["a"]},{"Key":"Perhaps there","Fragments":["are","is"]},{"Key":"are some","Fragments":["space","edge","tricks","indentation","tests"]},{"Key":"some space","Fragments":["for"]},{"Key":"space for","Fragments":["some","readability."]},{"Key":"some small","Fragments":["improvements,","syntactical"]},{"Key":"small improvements,","Fragments":["what"]},{"Key":"improvements, what","Fragments":["you"]},{"Key":" Like","Fragments":["this","the"]},{"Key":"Like this","Fragments":["code"]},{"Key":"code could","Fragments":["be"]},{"Key":"What other","Fragments":["similar"]},{"Key":"other similar","Fragments":["approach"]},{"Key":"approach would","Fragments":["make","allow","look."]},{"Key":"There's always","Fragments":["Enum.sort...","the"]},{"Key":"the |\u0026gt;","Fragments":["pipeline","pipeline","operator","operator.","operator.","is","operator"]},{"Key":"|\u0026gt; pipeline","Fragments":["operator","operator"]},{"Key":"operator and","Fragments":["the","make","check"]},{"Key":"the \u0026amp;","Fragments":["shorthand","shorthand","as","notation","notation","capture"]},{"Key":"\u0026amp; shorthand","Fragments":["for","for"]},{"Key":"shorthand for","Fragments":["anonymous","anonymous","`\u0026amp;(anagram?(word,","repeated","an","`Range[first:","referencing","\"function","referring","`foo([do:","maps/filters,"]},{"Key":"Elixir does","Fragments":["not","indeed","things.","regexes,"]},{"Key":"not allow","Fragments":["`def`"]},{"Key":"allow `def`","Fragments":["within"]},{"Key":"`def` within","Fragments":["`def`,"]},{"Key":"within `def`,","Fragments":["so"]},{"Key":"`def`, so","Fragments":["a"]},{"Key":"so a","Fragments":["named"]},{"Key":"named lambda","Fragments":["was"]},{"Key":"lambda was","Fragments":["the"]},{"Key":"function closed","Fragments":["within"]},{"Key":"closed within","Fragments":["`match`.","`match`"]},{"Key":"Thank you.","Fragments":["I","ends_with?"]},{"Key":"you. I","Fragments":["will","had"]},{"Key":"will look","Fragments":["into","the","into/fix."]},{"Key":"the changes","Fragments":["your"]},{"Key":"changes your","Fragments":["suggested."]},{"Key":"\u0026gt; how","Fragments":["many"]},{"Key":"many places","Fragments":["would","would","would","instead"]},{"Key":"places would","Fragments":["you","you","you"]},{"Key":" 4","Fragments":["strings."]},{"Key":"4 strings.","Fragments":["But"]},{"Key":"strings. But","Fragments":["it's"]},{"Key":"But it's","Fragments":["a","another","up","not","just"]},{"Key":"a Beer","Fragments":["module,"]},{"Key":"Beer module,","Fragments":["so"]},{"Key":"module, so","Fragments":["first","I"]},{"Key":"so first","Fragments":["of"]},{"Key":"first of","Fragments":["all","course"]},{"Key":"all I'll","Fragments":["have"]},{"Key":"I'll have","Fragments":["to","to","to","to","to","to","comments"]},{"Key":"change it's","Fragments":["name"]},{"Key":"it's name","Fragments":[":)"]},{"Key":"any feedback.","Fragments":["This"]},{"Key":"feedback. This","Fragments":["is","is","solution"]},{"Key":"time I've","Fragments":["used","used","thought","seen"]},{"Key":"I've used","Fragments":["attributes","the","```count```","Enum.reduce","the","a","that"]},{"Key":"used attributes","Fragments":["like"]},{"Key":"attributes like","Fragments":["`@matt`.","\u003ccode\u003equestion:"]},{"Key":"name `characters_used_in`.","Fragments":["That"]},{"Key":"`characters_used_in`. That","Fragments":["conveys"]},{"Key":"That conveys","Fragments":["nicely"]},{"Key":"conveys nicely","Fragments":["what"]},{"Key":"nicely what","Fragments":["is"]},{"Key":"you've assigned","Fragments":["a"]},{"Key":"assigned a","Fragments":["name"]},{"Key":"function inside","Fragments":["the","reducer.","HashDict.update"]},{"Key":"the scope","Fragments":["of"]},{"Key":"scope of","Fragments":["`match`."]},{"Key":"of `match`.","Fragments":["Is"]},{"Key":"`match`. Is","Fragments":["there"]},{"Key":"an advantage","Fragments":["to","compared"]},{"Key":"advantage to","Fragments":["doing"]},{"Key":"to doing","Fragments":["that"]},{"Key":"that rather","Fragments":["than"]},{"Key":"than making","Fragments":["it","another"]},{"Key":"a distinct","Fragments":["private","module/macro."]},{"Key":"distinct private","Fragments":["function,"]},{"Key":" (Looking","Fragments":["closer,"]},{"Key":"(Looking closer,","Fragments":["I"]},{"Key":"closer, I","Fragments":["see"]},{"Key":"see also","Fragments":["that"]},{"Key":"also that","Fragments":["the","Elixir"]},{"Key":"the `is_anagram`","Fragments":["function"]},{"Key":"`is_anagram` function","Fragments":["depends"]},{"Key":"function depends","Fragments":["on"]},{"Key":"on knowing","Fragments":["the"]},{"Key":"knowing the","Fragments":["value"]},{"Key":"of `desired_characters`,","Fragments":["which"]},{"Key":"`desired_characters`, which","Fragments":["is"]},{"Key":"not passed","Fragments":["in"]},{"Key":"a parameter.","Fragments":["I'm","There"]},{"Key":"parameter. I'm","Fragments":["new"]},{"Key":"new enough","Fragments":["to"]},{"Key":"to wonder","Fragments":["if"]},{"Key":"common pattern","Fragments":["or","in"]},{"Key":"pattern or","Fragments":["if"]},{"Key":"if that","Fragments":["represents","would","helps","would","applies","helps","fails","isn't","makes","gains"]},{"Key":"that represents","Fragments":["something"]},{"Key":"represents something","Fragments":["fragile.)"]},{"Key":" Some","Fragments":["of","constructive","people","notes:"]},{"Key":"Some of","Fragments":["the","the","them"]},{"Key":"naming here","Fragments":["is"]},{"Key":"here is","Fragments":["a","a","to","probably","that","the","to","to","uncommon.","to","that","that","structurally"]},{"Key":"little abstract.","Fragments":["I"]},{"Key":"abstract. I","Fragments":["had"]},{"Key":"little about","Fragments":["what"]},{"Key":"what a","Fragments":["\"dictionary\"","shout","Hamming","better","great"]},{"Key":"a \"dictionary\"","Fragments":["was,"]},{"Key":"\"dictionary\" was,","Fragments":["for"]},{"Key":"was, for","Fragments":["example."]},{"Key":"using two","Fragments":["`Enum.filter`"]},{"Key":"two `Enum.filter`","Fragments":["methods"]},{"Key":"`Enum.filter` methods","Fragments":["in"]},{"Key":"a chain","Fragments":["rather","for","of"]},{"Key":"chain rather","Fragments":["than"]},{"Key":"having two","Fragments":["conditions","base"]},{"Key":"conditions inside","Fragments":["of"]},{"Key":"one filter?","Fragments":["That"]},{"Key":"filter? That","Fragments":["might"]},{"Key":"That might","Fragments":["be","be","make","work","just","just","result"]},{"Key":"worth trying,","Fragments":["especially"]},{"Key":"trying, especially","Fragments":["if"]},{"Key":"especially if","Fragments":["the"]},{"Key":"This passes","Fragments":["the"]},{"Key":"the test.","Fragments":["Is","Let"]},{"Key":"test. Is","Fragments":["there"]},{"Key":"the ```sort_word```","Fragments":["function"]},{"Key":"```sort_word``` function","Fragments":["I"]},{"Key":"function I","Fragments":["wonder.","can"]},{"Key":"no harm","Fragments":["in"]},{"Key":"harm in","Fragments":["using"]},{"Key":"using `cond`","Fragments":["here.","and"]},{"Key":"`cond` here.","Fragments":["But"]},{"Key":"here. But","Fragments":["your"]},{"Key":"But your","Fragments":["approach","code"]},{"Key":"approach has","Fragments":["some"]},{"Key":"some really","Fragments":["interesting","weird"]},{"Key":"interesting things","Fragments":["to"]},{"Key":"things to","Fragments":["think","keep.","the","me","learn","functions","make","multiple"]},{"Key":"understand it,","Fragments":["the","protocols","the","to","the","so"]},{"Key":"three versions","Fragments":["of"]},{"Key":"your `_hey`","Fragments":["function"]},{"Key":"`_hey` function","Fragments":["combine"]},{"Key":"function combine","Fragments":["to"]},{"Key":"combine to","Fragments":["do"]},{"Key":"same work","Fragments":["as"]},{"Key":"work as","Fragments":["`String.ends_with?`.","a","well:","expected"]},{"Key":"as `String.ends_with?`.","Fragments":["You've"]},{"Key":"`String.ends_with?`. You've","Fragments":["kept"]},{"Key":"You've kept","Fragments":["some"]},{"Key":"kept some","Fragments":["pattern-matching"]},{"Key":"some pattern-matching","Fragments":["purity,"]},{"Key":"pattern-matching purity,","Fragments":["although"]},{"Key":"purity, although","Fragments":["maybe"]},{"Key":"although maybe","Fragments":["at"]},{"Key":"maybe at","Fragments":["the"]},{"Key":"the expense","Fragments":["of","would"]},{"Key":"expense of","Fragments":["readability."]},{"Key":"curious: Did","Fragments":["you"]},{"Key":"consider implementing","Fragments":["`shout?`"]},{"Key":"implementing `shout?`","Fragments":["with"]},{"Key":"`shout?` with","Fragments":["pattern"]},{"Key":"matching? Now","Fragments":["you"]},{"Key":"have me","Fragments":["thinking"]},{"Key":"me thinking","Fragments":["about"]},{"Key":"about how","Fragments":["to","you","you","lists","to","this","pattern","Elixir"]},{"Key":"Yeah, me","Fragments":["too."]},{"Key":"me too.","Fragments":["I'm"]},{"Key":"too. I'm","Fragments":["(ab)using"]},{"Key":"I'm (ab)using","Fragments":["Exercism"]},{"Key":"(ab)using Exercism","Fragments":["to"]},{"Key":"Exercism to","Fragments":["learn"]},{"Key":"about indentation","Fragments":["when"]},{"Key":"indentation when","Fragments":["using"]},{"Key":"matching anonymous","Fragments":["function."]},{"Key":"anonymous function.","Fragments":["Any","But"]},{"Key":"function. Any","Fragments":["suggestions?","hints?"]},{"Key":"the regex,","Fragments":["so","I'll","you're","`\\p{L}`"]},{"Key":"don't end","Fragments":["up"]},{"Key":"to send","Fragments":["a","a","second"]},{"Key":"send a","Fragments":["string","pull","PR"]},{"Key":"string though","Fragments":["`Enum.count`."]},{"Key":"Much nicer.","Fragments":["I"]},{"Key":"nicer. I","Fragments":["thought"]},{"Key":"thought there","Fragments":["was"]},{"Key":"for `nil`","Fragments":["being"]},{"Key":"`nil` being","Fragments":["silent,"]},{"Key":"being silent,","Fragments":["but"]},{"Key":"silent, but","Fragments":["I"]},{"Key":"I may","Fragments":["be","well","be","be","be","experiment","revisit","take","have","have","have","have"]},{"Key":"be misremembering","Fragments":["or"]},{"Key":"misremembering or","Fragments":["the"]},{"Key":"tests may've","Fragments":["changed."]},{"Key":"may've changed.","Fragments":["Hitting"]},{"Key":"changed. Hitting","Fragments":["\"Looks"]},{"Key":"Hitting \"Looks","Fragments":["great!\""]},{"Key":"In case","Fragments":["you","it"]},{"Key":"case you","Fragments":["find","are","don't","hadn't"]},{"Key":"you find","Fragments":["this","great","yourself","a","yourself","out","most","an","something","an"]},{"Key":"find this","Fragments":["version","a"]},{"Key":"version identical","Fragments":["with"]},{"Key":"identical with","Fragments":["the","two"]},{"Key":"example in","Fragments":["exercism","the","this","the","`Enum.count`"]},{"Key":"in exercism","Fragments":["sources,"]},{"Key":"exercism sources,","Fragments":["it"]},{"Key":"sources, it","Fragments":["was"]},{"Key":"was me","Fragments":["who"]},{"Key":"me who","Fragments":["submitted"]},{"Key":"who submitted","Fragments":["a"]},{"Key":"better version","Fragments":["of"]},{"Key":"the example:","Fragments":["https://github.com/kytrinyx/exercism.io/pull/413"]},{"Key":" Heh,","Fragments":["I","didn't","my"]},{"Key":"Heh, I","Fragments":["think"]},{"Key":"I debated","Fragments":["whether","readability"]},{"Key":"debated whether","Fragments":["to"]},{"Key":"whether to","Fragments":["use","use","use","iterate"]},{"Key":"use String.ends_with?/2","Fragments":["for"]},{"Key":"String.ends_with?/2 for","Fragments":["the"]},{"Key":"question check,","Fragments":["but"]},{"Key":"check, but","Fragments":["assumed"]},{"Key":"but assumed","Fragments":["that"]},{"Key":"assumed that","Fragments":["it"]},{"Key":"was better","Fragments":["to"]},{"Key":"match that","Fragments":["to"]},{"Key":"add an","Fragments":["`if`"]},{"Key":"`if` or","Fragments":["`cond`"]},{"Key":"or `cond`","Fragments":["in"]},{"Key":"in `hey(string)`","Fragments":["from"]},{"Key":"`hey(string)` from","Fragments":["Programming"]},{"Key":"Programming Elixir.","Fragments":["That's"]},{"Key":"Elixir. That's","Fragments":["also"]},{"Key":"That's also","Fragments":["why"]},{"Key":"also why","Fragments":["I","it's"]},{"Key":"I chose","Fragments":["`_hey`","not","`cond`","String.codepoints,","to","to","the","\u003ccode\u003eString.last/1\u003c/code\u003e","case"]},{"Key":"chose `_hey`","Fragments":["for"]},{"Key":"`_hey` for","Fragments":["the"]},{"Key":"private implementation","Fragments":["name","and"]},{"Key":"implementation name","Fragments":["instead"]},{"Key":"of `do_hey`,","Fragments":["which"]},{"Key":"`do_hey`, which","Fragments":["seems"]},{"Key":"which seems","Fragments":["to","quite","a"]},{"Key":"the be","Fragments":["idiom"]},{"Key":"be idiom","Fragments":["in"]},{"Key":"idiom in","Fragments":["the"]},{"Key":"Elixir standard","Fragments":["library.","library","library"]},{"Key":"standard library.","Fragments":["I'm","Your"]},{"Key":"library. I'm","Fragments":["used"]},{"Key":"I'm used","Fragments":["to","to.","to"]},{"Key":"used to","Fragments":["use","the","identify","transform","wack","having","Haskell","not","using","the","write","justify","that","indicate","improve","break"]},{"Key":"use YARD","Fragments":["for"]},{"Key":"YARD for","Fragments":["Ruby"]},{"Key":"Ruby code,","Fragments":["so"]},{"Key":"code, so","Fragments":["I","I"]},{"Key":"sure exactly","Fragments":["how","which"]},{"Key":"exactly how","Fragments":["to"]},{"Key":"to format","Fragments":["the"]},{"Key":"format the","Fragments":["`@juwan`"]},{"Key":"the `@juwan`","Fragments":["and"]},{"Key":"`@juwan` and","Fragments":["`@juwan`."]},{"Key":"had been","Fragments":["playing","using"]},{"Key":"been playing","Fragments":["with"]},{"Key":"playing with","Fragments":["that,","processes","lines","macros"]},{"Key":"with that,","Fragments":["and","this","that's"]},{"Key":"and was","Fragments":["getting"]},{"Key":"was getting","Fragments":["an","(iterations"]},{"Key":"getting an","Fragments":["error","odd"]},{"Key":"an error","Fragments":["on","is","in"]},{"Key":"error on","Fragments":["the","file","line"]},{"Key":"the `reduce/3`","Fragments":["call."]},{"Key":"`reduce/3` call.","Fragments":["Just"]},{"Key":"call. Just","Fragments":["pushed"]},{"Key":"Just pushed","Fragments":["an"]},{"Key":"pushed an","Fragments":["update","updated"]},{"Key":"an update","Fragments":["that","with"]},{"Key":"update that","Fragments":["corrects"]},{"Key":"that corrects","Fragments":["all"]},{"Key":"corrects all","Fragments":["that,"]},{"Key":"all that,","Fragments":["and"]},{"Key":"also the","Fragments":["comment"]},{"Key":"the comment","Fragments":["that","is","in"]},{"Key":"comment that","Fragments":["calls"]},{"Key":"that calls","Fragments":["the"]},{"Key":"calls the","Fragments":["`List`"]},{"Key":"the `List`","Fragments":["an","functions.","module","module"]},{"Key":"`List` an","Fragments":["array."]},{"Key":" Seeing","Fragments":["deeply"]},{"Key":"Seeing deeply","Fragments":["nested"]},{"Key":"nested if-else","Fragments":["in"]},{"Key":"if-else in","Fragments":["a"]},{"Key":"a functional","Fragments":["language","language.","language.","language","language","language.","language."]},{"Key":"functional language","Fragments":["is","and","and"]},{"Key":"a happy","Fragments":["feeling.","new"]},{"Key":"happy feeling.","Fragments":["Look"]},{"Key":"feeling. Look","Fragments":["into"]},{"Key":"Look into","Fragments":["`cond`.","posix"]},{"Key":"Also, although","Fragments":["the"]},{"Key":"the conditionals","Fragments":["are","to","in"]},{"Key":"conditionals are","Fragments":["correct,"]},{"Key":"are correct,","Fragments":["the"]},{"Key":"correct, the","Fragments":["do"]},{"Key":"the do","Fragments":["not"]},{"Key":"have expressive","Fragments":["names."]},{"Key":"expressive names.","Fragments":["Try"]},{"Key":"names. Try","Fragments":["some"]},{"Key":"Try some","Fragments":["`defp`."]},{"Key":" `List.concat`","Fragments":["is","is"]},{"Key":"`List.concat` is","Fragments":["slightly","the","slightly"]},{"Key":"is slightly","Fragments":["more","more","more","faster","different","shorter"]},{"Key":"a special","Fragments":["syntax","kind","case.","case.","case,","case"]},{"Key":"special syntax","Fragments":["for","for"]},{"Key":"for one-liner","Fragments":["methods:"]},{"Key":"defp increment(current_value),","Fragments":["do:"]},{"Key":"increment(current_value), do:","Fragments":["current_value"]},{"Key":"do: current_value","Fragments":["+"]},{"Key":"current_value +","Fragments":["1"]},{"Key":"The case","Fragments":["you"]},{"Key":"are protecting","Fragments":["against"]},{"Key":"protecting against","Fragments":["in"]},{"Key":"against in","Fragments":["`shouty?`"]},{"Key":"in `shouty?`","Fragments":["is","asks"]},{"Key":"`shouty?` is","Fragments":["interesting"]},{"Key":"is interesting","Fragments":["-","to","for","-"]},{"Key":"interesting -","Fragments":["maybe","I"]},{"Key":"should submit","Fragments":["a"]},{"Key":"pull request","Fragments":["to","in","accepted.","with","and","that"]},{"Key":"request to","Fragments":["add"]},{"Key":"add that","Fragments":["to","to","I","to"]},{"Key":" catching","Fragments":["nil/false"]},{"Key":"catching nil/false","Fragments":["in"]},{"Key":"nil/false in","Fragments":["the"]},{"Key":"`hey` method","Fragments":["seems","so"]},{"Key":"method seems","Fragments":["like"]},{"Key":"like it's","Fragments":["the","converting","only","pretty","not","also","missing","saying","available","talking","asking","testing"]},{"Key":"wrong place","Fragments":["for"]},{"Key":"place for","Fragments":["that","it,","it.","it."]},{"Key":"that functionality.","Fragments":["It"]},{"Key":"functionality. It","Fragments":["probably"]},{"Key":"probably belongs","Fragments":["in"]},{"Key":"belongs in","Fragments":["a","`count_words`."]},{"Key":"Should the","Fragments":["boolean","implementation"]},{"Key":"the boolean","Fragments":["methods"]},{"Key":"boolean methods","Fragments":["be"]},{"Key":"methods be","Fragments":["exposed","a"]},{"Key":"be exposed","Fragments":["as"]},{"Key":"exposed as","Fragments":["part"]},{"Key":"Teenager public","Fragments":["interface?"]},{"Key":"public interface?","Fragments":["You"]},{"Key":"interface? You","Fragments":["can"]},{"Key":"use `defp`","Fragments":["to","rather","for","or","instead.","then.","instead"]},{"Key":"`defp` to","Fragments":["define","define"]},{"Key":"define private","Fragments":["functions.","functions."]},{"Key":"Line 7","Fragments":["is"]},{"Key":"7 is","Fragments":["a"]},{"Key":"bit to","Fragments":["long,","explain","make","make","make","understand.","make","make","make","make","push"]},{"Key":"to long,","Fragments":["maybe"]},{"Key":"long, maybe","Fragments":["you"]},{"Key":"reduce function","Fragments":["and","mixed","is","in"]},{"Key":"a name.","Fragments":["In"]},{"Key":"name. In","Fragments":["Elixir"]},{"Key":"In Elixir","Fragments":["`v10.0.1`","the","that","it's","adding","0.13"]},{"Key":"Elixir `v10.0.1`","Fragments":["you"]},{"Key":"`v10.0.1` you","Fragments":["can"]},{"Key":"use `\u0026amp;M.f/a`","Fragments":["to"]},{"Key":"`\u0026amp;M.f/a` to","Fragments":["pass"]},{"Key":"pass a","Fragments":["named","function","name","list","reference","test"]},{"Key":"to higher","Fragments":["order"]},{"Key":"higher order","Fragments":["functions.","functions","function","functions.","functions","functions.","functions","functions","function"]},{"Key":" @elda","Fragments":["thanks"]},{"Key":"@elda thanks","Fragments":["for"]},{"Key":"feedback. The","Fragments":["first"]},{"Key":"first check","Fragments":["in"]},{"Key":"`shouty?` asks","Fragments":["whether"]},{"Key":"asks whether","Fragments":["the"]},{"Key":"whether the","Fragments":["string","lack","value","words","two","problem","addition"]},{"Key":"string actually","Fragments":["contains"]},{"Key":"actually contains","Fragments":["any"]},{"Key":"contains any","Fragments":["capital","letters"]},{"Key":"any capital","Fragments":["letters"]},{"Key":"capital letters","Fragments":["for","(or","per","I"]},{"Key":"letters for","Fragments":["cases","target","target"]},{"Key":"for cases","Fragments":["like"]},{"Key":"cases like","Fragments":["`shouty?(\"42?\")`","your"]},{"Key":"like `shouty?(\"42?\")`","Fragments":["and"]},{"Key":"`shouty?(\"42?\")` and","Fragments":["`shouty?(\"\")`"]},{"Key":"and `shouty?(\"\")`","Fragments":["."]},{"Key":"Good start","Fragments":["-"]},{"Key":"- multiple","Fragments":["versions"]},{"Key":"multiple versions","Fragments":["of","of"]},{"Key":"of Elixir's","Fragments":["strengths.","`|\u0026gt;`"]},{"Key":"Should `hey`","Fragments":["have"]},{"Key":"`hey` have","Fragments":["multiple"]},{"Key":"have multiple","Fragments":["versions,","clauses","levels"]},{"Key":"multiple versions,","Fragments":["or"]},{"Key":"versions, or","Fragments":["should"]},{"Key":"or should","Fragments":["it","be"]},{"Key":"should it","Fragments":["delegate"]},{"Key":"it delegate","Fragments":["the"]},{"Key":"delegate the","Fragments":["message"]},{"Key":"message being","Fragments":["nil"]},{"Key":"being nil","Fragments":["to"]},{"Key":"nil to","Fragments":["the"]},{"Key":"the `hey/0`","Fragments":["function"]},{"Key":"function needed?","Fragments":["it"]},{"Key":"needed? it","Fragments":["isn't"]},{"Key":"it isn't","Fragments":["called"]},{"Key":"isn't called","Fragments":["by"]},{"Key":"called by","Fragments":["the","other"]},{"Key":"and `hey(nil)`","Fragments":["would"]},{"Key":"`hey(nil)` would","Fragments":["be"]},{"Key":"be caught","Fragments":["by"]},{"Key":"caught by","Fragments":["the"]},{"Key":"first `hey/1`","Fragments":["function"]},{"Key":" `shouty?`","Fragments":["seems"]},{"Key":"`shouty?` seems","Fragments":["like"]},{"Key":"is checking","Fragments":["for","for"]},{"Key":"for capitals","Fragments":["twice."]},{"Key":"great fan","Fragments":["of"]},{"Key":"of Regex,","Fragments":["but"]},{"Key":"be avoided","Fragments":["when","whenever","whenever"]},{"Key":"avoided when","Fragments":["there"]},{"Key":"more plain","Fragments":["ways"]},{"Key":"plain ways","Fragments":["of"]},{"Key":"ways of","Fragments":["checking","doing","reusing","checking","structuring"]},{"Key":"of checking","Fragments":["for","the"]},{"Key":"same match.","Fragments":["See"]},{"Key":"match. See","Fragments":["the"]},{"Key":"See the","Fragments":["String","other","gen_server","Erlang"]},{"Key":"String built-in","Fragments":["functions,"]},{"Key":"built-in functions,","Fragments":["like"]},{"Key":"functions, like","Fragments":["`last`","the"]},{"Key":"like `last`","Fragments":["and"]},{"Key":"`last` and","Fragments":["`ends_with?`"]},{"Key":" `reticent?`","Fragments":["is"]},{"Key":"`reticent?` is","Fragments":["getting"]},{"Key":"getting closer","Fragments":["to"]},{"Key":"closer to","Fragments":["the","the","our","my"]},{"Key":"define a","Fragments":["version","function","range","private"]},{"Key":"with explicit","Fragments":["arguments,","recursion","function","inline","recursion","values."]},{"Key":"explicit arguments,","Fragments":["for"]},{"Key":"example `def","Fragments":["func([])`"]},{"Key":"`def func([])`","Fragments":["or"]},{"Key":"func([])` or","Fragments":["`def"]},{"Key":"or `def","Fragments":["func(nil)`"]},{"Key":"`def func(nil)`","Fragments":["as"]},{"Key":"func(nil)` as","Fragments":["well"]},{"Key":"more traditional","Fragments":["way"]},{"Key":"traditional way","Fragments":["of"]},{"Key":"of specifying","Fragments":["a","the"]},{"Key":"specifying a","Fragments":["variable."]},{"Key":"To me,","Fragments":["the","it's"]},{"Key":"me, the","Fragments":["lambda","shorthand"]},{"Key":"the lambda","Fragments":["arrow"]},{"Key":"lambda arrow","Fragments":["being"]},{"Key":"arrow being","Fragments":["on"]},{"Key":"being on","Fragments":["the"]},{"Key":"same line","Fragments":["as","as"]},{"Key":"body looks","Fragments":["odd."]},{"Key":"looks odd.","Fragments":["(I"]},{"Key":"odd. (I","Fragments":["consider"]},{"Key":"(I consider","Fragments":["it"]},{"Key":"the opener","Fragments":["to"]},{"Key":"opener to","Fragments":["the"]},{"Key":"the `end`'s","Fragments":["closer,"]},{"Key":"`end`'s closer,","Fragments":["and"]},{"Key":"closer, and","Fragments":["put"]},{"Key":"and put","Fragments":["it","calls.","calls","the","people","the","this","in"]},{"Key":" Simplified","Fragments":["this","by","the","`append`"]},{"Key":"Simplified this","Fragments":["to"]},{"Key":"use `Enum.reduce`,","Fragments":["which"]},{"Key":"`Enum.reduce`, which","Fragments":["also"]},{"Key":"which also","Fragments":["allows","uses","permit"]},{"Key":"also allows","Fragments":["removing","you"]},{"Key":"allows removing","Fragments":["some"]},{"Key":"removing some","Fragments":["of"]},{"Key":"be possible","Fragments":["to","to"]},{"Key":"the `!silence?(message)`","Fragments":["checks?"]},{"Key":"`!silence?(message)` checks?","Fragments":["Think"]},{"Key":"checks? Think","Fragments":["about"]},{"Key":"Think about","Fragments":["it","the","how"]},{"Key":"The latest","Fragments":["stable"]},{"Key":"latest stable","Fragments":["release"]},{"Key":"stable release","Fragments":["is"]},{"Key":"release is","Fragments":["`0.10.1`."]},{"Key":"is `0.10.1`.","Fragments":["Before"]},{"Key":"`0.10.1`. Before","Fragments":["that"]},{"Key":"Before that","Fragments":["you"]},{"Key":"use partial","Fragments":["application"]},{"Key":"application or","Fragments":["`function"]},{"Key":"or `function","Fragments":["M.f/a`"]},{"Key":"Ah. I","Fragments":["tried"]},{"Key":"change this","Fragments":["originally","one.","to:"]},{"Key":"this originally","Fragments":["after"]},{"Key":"originally after","Fragments":["the"]},{"Key":"|\u0026gt; Enum.reduce(HashDict.new,","Fragments":["\u0026amp;add_or_increment/2)"]},{"Key":" ...","Fragments":["but","etc"]},{"Key":"... but","Fragments":["if"]},{"Key":"that syntax","Fragments":["(under","better","better,"]},{"Key":"syntax (under","Fragments":["Elixir"]},{"Key":"(under Elixir","Fragments":["0.10.0),"]},{"Key":"Elixir 0.10.0),","Fragments":["an"]},{"Key":"0.10.0), an","Fragments":["exception"]},{"Key":"an exception","Fragments":["gets","if","if"]},{"Key":"exception gets","Fragments":["thrown:"]},{"Key":"** (SyntaxError)","Fragments":["/tmp/exercism.io/exercises/elixir/word-count/word-count.exs:5:","bob.exs:17:","word_count.exs:8:","iex:3:"]},{"Key":"(SyntaxError) /tmp/exercism.io/exercises/elixir/word-count/word-count.exs:5:","Fragments":["invalid"]},{"Key":"/tmp/exercism.io/exercises/elixir/word-count/word-count.exs:5: invalid","Fragments":["token:"]},{"Key":"invalid token:","Fragments":["\u0026amp;add_or_increment/2)","\\p{L}/)","\\p{L}0-9]+/i"]},{"Key":"Right now,","Fragments":["you're"]},{"Key":"now, you're","Fragments":["sorting"]},{"Key":"you're sorting","Fragments":["\"word\""]},{"Key":"sorting \"word\"","Fragments":["once"]},{"Key":"\"word\" once","Fragments":["for"]},{"Key":"in list,","Fragments":["even"]},{"Key":"list, even","Fragments":["though","though"]},{"Key":"even though","Fragments":["it","it's","it's","it","it's","it's","words","the","they","in","the","I'm","none","we"]},{"Key":"it always","Fragments":["sorts","end","made"]},{"Key":"always sorts","Fragments":["to"]},{"Key":"sorts to","Fragments":["the"]},{"Key":"same result.","Fragments":["Is"]},{"Key":"result. Is","Fragments":["there"]},{"Key":"could sort","Fragments":["word"]},{"Key":"sort word","Fragments":["once,"]},{"Key":"word once,","Fragments":["but","then"]},{"Key":"once, but","Fragments":["still","the"]},{"Key":"but still","Fragments":["keep","exclude","eager","rather","need"]},{"Key":"still keep","Fragments":["the"]},{"Key":"can literally","Fragments":["replace"]},{"Key":"literally replace","Fragments":["`add_or_increment(\u0026amp;1,"]},{"Key":"replace `add_or_increment(\u0026amp;1,","Fragments":["\u0026amp;2)`"]},{"Key":"`add_or_increment(\u0026amp;1, \u0026amp;2)`","Fragments":["with"]},{"Key":"\u0026amp;2)` with","Fragments":["`\u0026amp;add_or_increment/2'."]},{"Key":"with `\u0026amp;add_or_increment/2'.","Fragments":["i.e.,"]},{"Key":"`\u0026amp;add_or_increment/2'. i.e.,","Fragments":["just"]},{"Key":"i.e., just","Fragments":["pass"]},{"Key":"function itself","Fragments":["(with"]},{"Key":"itself (with","Fragments":["the"]},{"Key":"(with the","Fragments":["/2","exception","cons","exception"]},{"Key":"the /2","Fragments":["to"]},{"Key":"/2 to","Fragments":["show"]},{"Key":"to show","Fragments":["which","what;s","how"]},{"Key":"show which","Fragments":["arity)"]},{"Key":"which arity)","Fragments":["."]},{"Key":"arity) .","Fragments":["q.v."]},{"Key":". q.v.","Fragments":["http://elixir-lang.org/docs/stable/Kernel.SpecialForms.html#\u0026amp;/1"]},{"Key":"matching, I","Fragments":["still"]},{"Key":"still feel","Fragments":["like"]},{"Key":"of private","Fragments":["methods","methods","(`defp`)?","helper","functions","functions.","functions","methods."]},{"Key":"methods could","Fragments":["make"]},{"Key":"more DRY.","Fragments":["Imagine"]},{"Key":"DRY. Imagine","Fragments":["that"]},{"Key":"Imagine that","Fragments":["our"]},{"Key":"that our","Fragments":["subject"]},{"Key":"our subject","Fragments":["could"]},{"Key":"subject could","Fragments":["be"]},{"Key":"be \"pop\"","Fragments":["for"]},{"Key":"\"pop\" for","Fragments":["the"]},{"Key":"the tea-totalers","Fragments":["in"]},{"Key":"tea-totalers in","Fragments":["the"]},{"Key":"the crowd.","Fragments":["How"]},{"Key":"crowd. How","Fragments":["many"]},{"Key":"How many","Fragments":["places"]},{"Key":"Something feels","Fragments":["odd"]},{"Key":"feels odd","Fragments":["about"]},{"Key":"odd about","Fragments":["having"]},{"Key":"two base","Fragments":["cases"]},{"Key":"base cases","Fragments":["for"]},{"Key":"cases for","Fragments":["that","unicode"]},{"Key":"is also","Fragments":["`Enum.reduce`","more","likely","fine.","a","perfectly","ambiguous","a","good"]},{"Key":"also `Enum.reduce`","Fragments":["built-in."]},{"Key":"Using string","Fragments":["interpolation"]},{"Key":"string interpolation","Fragments":["into","is","too,","converts","could","with"]},{"Key":"interpolation into","Fragments":["a"]},{"Key":"a word","Fragments":["array","in","and","out","like","like","contains","and","char","character","is","character","like","character","character.","character","character","there","as"]},{"Key":"word array","Fragments":["is"]},{"Key":"array is","Fragments":["not"]},{"Key":"something I'd've","Fragments":["thought"]},{"Key":"I'd've thought","Fragments":["of."]},{"Key":"thought of.","Fragments":["Cool."]},{"Key":"not very","Fragments":["pleased","functional.","happy","happy","maintainable.","convinced","confident.","happy","familiar","confident","robust."]},{"Key":"very pleased","Fragments":["with"]},{"Key":"pleased with","Fragments":["this","my"]},{"Key":"solution -","Fragments":["I've"]},{"Key":"- I've","Fragments":["refactored"]},{"Key":"I've refactored","Fragments":["my"]},{"Key":"refactored my","Fragments":["code","code"]},{"Key":"in Javascript","Fragments":["and"]},{"Key":"Javascript and","Fragments":["Python"]},{"Key":"and Python","Fragments":["to"]},{"Key":"Python to","Fragments":["something"]},{"Key":"that feels","Fragments":["a","pretty"]},{"Key":"lot nicer,","Fragments":["but"]},{"Key":"nicer, but","Fragments":["basic"]},{"Key":"but basic","Fragments":["unfamiliarity"]},{"Key":"basic unfamiliarity","Fragments":["with"]},{"Key":"unfamiliarity with","Fragments":["Elixir","the"]},{"Key":"Elixir means","Fragments":["that"]},{"Key":"the confidence","Fragments":["to"]},{"Key":"confidence to","Fragments":["do"]},{"Key":"that here.","Fragments":["Therefore,"]},{"Key":"here. Therefore,","Fragments":["if"]},{"Key":"Therefore, if","Fragments":["you"]},{"Key":"know a","Fragments":["better","bit","better"]},{"Key":"better way,","Fragments":["please","but","like"]},{"Key":"way, please","Fragments":["don't"]},{"Key":"please don't","Fragments":["be"]},{"Key":"don't be","Fragments":["too","shy"]},{"Key":"be too","Fragments":["subtle","young","slow"]},{"Key":"too subtle","Fragments":["with"]},{"Key":"subtle with","Fragments":["the"]},{"Key":"the hints","Fragments":["-"]},{"Key":"hints -","Fragments":["or"]},{"Key":"- or","Fragments":["at","if","if"]},{"Key":"least include","Fragments":["a"]},{"Key":"include a","Fragments":["link"]},{"Key":"link to","Fragments":["the","José's"]},{"Key":"Elixir docs","Fragments":["to","use"]},{"Key":"docs to","Fragments":["put"]},{"Key":"put me","Fragments":["on","sorting"]},{"Key":"me on","Fragments":["the","that","my"]},{"Key":" Yup,","Fragments":["the","I","that's","that","that's","code","that's","looks","the","function","definitely","parens","that's"]},{"Key":"Yup, the","Fragments":["tradeoff","macros"]},{"Key":"the tradeoff","Fragments":["between"]},{"Key":"repetition is","Fragments":["apparent"]},{"Key":"is apparent","Fragments":["here."]},{"Key":"apparent here.","Fragments":["One"]},{"Key":"here. One","Fragments":["thought"]},{"Key":"One thought","Fragments":["exercise:"]},{"Key":"thought exercise:","Fragments":["What"]},{"Key":"exercise: What","Fragments":["if"]},{"Key":"requirements changed","Fragments":["and"]},{"Key":"changed and","Fragments":["you"]},{"Key":"of beverages","Fragments":["instead"]},{"Key":"beverages instead","Fragments":["of"]},{"Key":"of just","Fragments":["beer","'abcde'","following","formatting?","the","the"]},{"Key":"just beer","Fragments":["--"]},{"Key":"beer --","Fragments":["how"]},{"Key":"-- how","Fragments":["many"]},{"Key":"using \u003ccode\u003eList.foldl/3\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eList.foldl/3\u003c/code\u003e and","Fragments":["\u003ccode\u003eHashDict.update/4\u003c/code\u003e?","\u003ccode\u003eHashDict.update/4\u003c/code\u003e","\u003ccode\u003eHashDict.update/4\u003c/code\u003e"]},{"Key":" Helper","Fragments":["functions","functions"]},{"Key":"Helper functions","Fragments":["are","like"]},{"Key":"are private,","Fragments":["the"]},{"Key":"private, the","Fragments":["only"]},{"Key":"only public","Fragments":["interface"]},{"Key":"interface is","Fragments":["Teenager#hey.","spec'd"]},{"Key":" @adela","Fragments":["true,"]},{"Key":"@adela true,","Fragments":["the"]},{"Key":"true, the","Fragments":["outside"]},{"Key":"the outside","Fragments":["does"]},{"Key":"outside does","Fragments":["not"]},{"Key":"Wouldn't declaring","Fragments":["test"]},{"Key":"private a","Fragments":["good"]},{"Key":"A small","Fragments":["change","tip"]},{"Key":"small change","Fragments":["later,"]},{"Key":"change later,","Fragments":["no"]},{"Key":"later, no","Fragments":["longer"]},{"Key":"longer order","Fragments":["dependent","dependent."]},{"Key":"order dependent","Fragments":["and"]},{"Key":"dependent and","Fragments":["works"]},{"Key":"and works","Fragments":["without","better"]},{"Key":"works without","Fragments":["calls","explicitly","going"]},{"Key":"without calls","Fragments":["to"]},{"Key":"calls to","Fragments":["!silence?","Teenager#silence?","get","`bottles`","functions","normalize","`String`"]},{"Key":"to !silence?","Fragments":[":)","by"]},{"Key":"the calls","Fragments":["to"]},{"Key":"to Teenager#silence?","Fragments":["in"]},{"Key":"Teenager#silence? in","Fragments":["#scream?"]},{"Key":"in #scream?","Fragments":["and"]},{"Key":"#scream? and","Fragments":["#question?"]},{"Key":"and #question?","Fragments":["."]},{"Key":"#question? .","Fragments":["Also"]},{"Key":". Also","Fragments":["the"]},{"Key":"Also the","Fragments":["cond","`[","case"]},{"Key":"order dependent.","Fragments":["Thanks!"]},{"Key":"could remove","Fragments":["the","`strip_country_code`","@ulises"]},{"Key":"!silence? by","Fragments":["reordering"]},{"Key":"by reordering","Fragments":["the"]},{"Key":"reordering the","Fragments":["conditions"]},{"Key":"use `\u0026amp;add_or_increment/2`","Fragments":["instead"]},{"Key":"`\u0026amp;add_or_increment/2` instead","Fragments":["of"]},{"Key":"of applying","Fragments":["the","a"]},{"Key":"applying the","Fragments":["arguments"]},{"Key":"the iteration","Fragments":["by","2."]},{"Key":"iteration by","Fragments":["using"]},{"Key":"using functions","Fragments":["in","from"]},{"Key":"the `Enum`","Fragments":["module,","functions","functions","module","module"]},{"Key":"`Enum` module,","Fragments":["that"]},{"Key":"module, that","Fragments":["do"]},{"Key":"that do","Fragments":["most","change","you","this"]},{"Key":"do most","Fragments":["of"]},{"Key":"the work","Fragments":["for","on","of"]},{"Key":"work for","Fragments":["you.","this","any","you.","doing","the","foreign","the","words","all","me.","the"]},{"Key":"I'm really","Fragments":["not","enjoying","not","curious","not"]},{"Key":"reads any","Fragments":["better..."]},{"Key":"defmodule Beer","Fragments":["do"]},{"Key":"def verse(0),","Fragments":["do:","do:"]},{"Key":"verse(0), do:","Fragments":["\"No","\"No"]},{"Key":"do: \"No","Fragments":["more","more"]},{"Key":"\"No more","Fragments":["bottles","bottles"]},{"Key":"more bottles","Fragments":["of","of","of","of","of","of"]},{"Key":"bottles of","Fragments":["beer","beer.\\nGo","beer","beer","beer\"","beer","beer.\\nGo","beer","beer","beer","beer.\\nTake","beer)."]},{"Key":"of beer","Fragments":["on","on","on","on","on","on","on","on","on","on","on","instead"]},{"Key":"beer on","Fragments":["the","the","the","the","the","the","the","the","the","the","the"]},{"Key":"the wall,","Fragments":["no","#{bottles}","no","One","#{num}"]},{"Key":"wall, no","Fragments":["more","more"]},{"Key":"no more","Fragments":["bottles","bottles","bottles","bottles"]},{"Key":"of beer.\\nGo","Fragments":["to","to"]},{"Key":"beer.\\nGo to","Fragments":["the","the"]},{"Key":"the store","Fragments":["and","and","and"]},{"Key":"store and","Fragments":["buy","buy","buy"]},{"Key":"and buy","Fragments":["some","some","some"]},{"Key":"buy some","Fragments":["more,","more,","more\""]},{"Key":"some more,","Fragments":["99","99"]},{"Key":"more, 99","Fragments":["bottles","bottles"]},{"Key":"99 bottles","Fragments":["of","of"]},{"Key":"def verse(1),","Fragments":["do:","do:"]},{"Key":"verse(1), do:","Fragments":["\"#{first_part_of_verse(1)}Take","\"One"]},{"Key":"do: \"#{first_part_of_verse(1)}Take","Fragments":["it"]},{"Key":"\"#{first_part_of_verse(1)}Take it","Fragments":["down"]},{"Key":"it down","Fragments":["and","and","to","near","to"]},{"Key":"down and","Fragments":["pass","pass","pass","pass","write"]},{"Key":"it around,","Fragments":["no","#{bottles_left}","no","#{num-1}"]},{"Key":"around, no","Fragments":["more","more"]},{"Key":"def verse(bottles)","Fragments":["when"]},{"Key":"verse(bottles) when","Fragments":["bottles"]},{"Key":"when bottles","Fragments":["\u0026gt;"]},{"Key":"bottles \u0026gt;","Fragments":["1"]},{"Key":"\u0026gt; 1","Fragments":["do"]},{"Key":" bottles_left","Fragments":["="]},{"Key":"bottles_left =","Fragments":["bottles"]},{"Key":"= bottles","Fragments":["-"]},{"Key":"bottles -","Fragments":["1"]},{"Key":" first_part_of_verse(bottles)","Fragments":["%b\"\"\""]},{"Key":" Take","Fragments":["one","a","a","a","a","a","a","a","a","for","a","a","a","a","a","a","a","a"]},{"Key":"Take one","Fragments":["down"]},{"Key":"one down","Fragments":["and","and"]},{"Key":"around, #{bottles_left}","Fragments":["#{bottle_classifier(bottles_left)}"]},{"Key":"#{bottles_left} #{bottle_classifier(bottles_left)}","Fragments":["of"]},{"Key":"#{bottle_classifier(bottles_left)} of","Fragments":["beer"]},{"Key":"def sing(from_bottles,","Fragments":["to_bottles"]},{"Key":"sing(from_bottles, to_bottles","Fragments":["//"]},{"Key":"to_bottles //","Fragments":["0)"]},{"Key":"// 0)","Fragments":["do","do","do","do"]},{"Key":" verses","Fragments":["=","\"\\n\"","|\u003e"]},{"Key":"verses =","Fragments":["from_bottles..to_bottles"]},{"Key":"= from_bottles..to_bottles","Fragments":["|\u0026gt;"]},{"Key":"from_bottles..to_bottles |\u0026gt;","Fragments":["Enum.map(verse(\u0026amp;1))"]},{"Key":"|\u0026gt; Enum.map(verse(\u0026amp;1))","Fragments":["|\u0026gt;"]},{"Key":"Enum.map(verse(\u0026amp;1)) |\u0026gt;","Fragments":["Enum.join(\"\\n\")"]},{"Key":"defp first_part_of_verse(bottles)","Fragments":["do"]},{"Key":" \"#{bottles}","Fragments":["#{bottle_classifier(bottles)}"]},{"Key":"\"#{bottles} #{bottle_classifier(bottles)}","Fragments":["of"]},{"Key":"#{bottle_classifier(bottles)} of","Fragments":["beer","beer.\\n\""]},{"Key":"wall, #{bottles}","Fragments":["#{bottle_classifier(bottles)}"]},{"Key":"#{bottles} #{bottle_classifier(bottles)}","Fragments":["of"]},{"Key":"defp bottle_classifier(1),","Fragments":["do:"]},{"Key":"bottle_classifier(1), do:","Fragments":["\"bottle\""]},{"Key":"defp bottle_classifier(_),","Fragments":["do:"]},{"Key":"bottle_classifier(_), do:","Fragments":["\"bottles\""]},{"Key":"job separating","Fragments":["the"]},{"Key":"the identification","Fragments":["and"]},{"Key":"identification and","Fragments":["response"]},{"Key":"and response","Fragments":["of"]},{"Key":"the message,","Fragments":["is"]},{"Key":"message, is","Fragments":["there"]},{"Key":"you wrapped","Fragments":["the","it"]},{"Key":"wrapped the","Fragments":["atoms"]},{"Key":"the atoms","Fragments":["in","not"]},{"Key":"atoms in","Fragments":["a"]},{"Key":"some good","Fragments":["ways","idioms.","feedback","moments"]},{"Key":"good ways","Fragments":["to"]},{"Key":"those case","Fragments":["statements..."]},{"Key":" Generally,","Fragments":["the","prefer"]},{"Key":"Generally, the","Fragments":["function"]},{"Key":"empty set","Fragments":["comes"]},{"Key":"set comes","Fragments":["before"]},{"Key":"comes before","Fragments":["the"]},{"Key":"defp count([],","Fragments":["dict),"]},{"Key":"count([], dict),","Fragments":["do:","do:"]},{"Key":"dict), do:","Fragments":["dict","dict`"]},{"Key":"defp count([word","Fragments":["|"]},{"Key":"count([word |","Fragments":["words],"]},{"Key":"| words],","Fragments":["dict)"]},{"Key":"words], dict)","Fragments":["do"]},{"Key":" #","Fragments":["...","Aliases","Get","where","There","this","Aliases","Get","where","There","this","For","Hopefully","assert","Preserve","Discard","Iteration","…","=\u003e","...","...your"]},{"Key":"Also, for","Fragments":["the"]},{"Key":"the `words`","Fragments":["function,"]},{"Key":"`words` function,","Fragments":["you"]},{"Key":"Elixir's `|\u0026gt;`","Fragments":["operator."]},{"Key":"operator. It","Fragments":["would","takes"]},{"Key":"tad easier","Fragments":["to"]},{"Key":"Nice suggestion:","Fragments":["I"]},{"Key":"suggestion: I","Fragments":["actually"]},{"Key":"actually assigned","Fragments":["the"]},{"Key":"assigned the","Fragments":["```"]},{"Key":"the ```","Fragments":["word","match","anagram?/2","cond","ends_with?","cond","Regex#scan","verse","_sing","cond","foldl","_count","defp"]},{"Key":"``` word","Fragments":["```","|\u0026gt;"]},{"Key":"word ```","Fragments":["in"]},{"Key":"``` in","Fragments":["the","your"]},{"Key":"``` match","Fragments":["```"]},{"Key":"match ```","Fragments":["block"]},{"Key":"``` block","Fragments":["as"]},{"Key":"block as","Fragments":["```"]},{"Key":"as ```","Fragments":["word"]},{"Key":"|\u0026gt; charset","Fragments":["```"]},{"Key":"charset ```","Fragments":["so"]},{"Key":"``` so","Fragments":["that"]},{"Key":"``` anagram?/2","Fragments":["```"]},{"Key":"anagram?/2 ```","Fragments":["method."]},{"Key":"``` method.","Fragments":["About"]},{"Key":"method. About","Fragments":["this"]},{"Key":"this matter","Fragments":["I"]},{"Key":"matter I","Fragments":["really"]},{"Key":"really cannot","Fragments":["come"]},{"Key":"cannot come","Fragments":["up"]},{"Key":"with anything","Fragments":["better","provided","that"]},{"Key":"anything better","Fragments":["than"]},{"Key":"than ```","Fragments":["anagram"]},{"Key":"``` anagram","Fragments":["```"]},{"Key":"anagram ```","Fragments":[":)"]},{"Key":"``` :)","Fragments":["I've"]},{"Key":":) I've","Fragments":["checked"]},{"Key":"I've checked","Fragments":["the"]},{"Key":"the thesaurus","Fragments":["and"]},{"Key":"thesaurus and","Fragments":["according"]},{"Key":"and according","Fragments":["to"]},{"Key":"according to","Fragments":["them","the","the","Google","`\\w`","the","your"]},{"Key":"to them","Fragments":["the"]},{"Key":"them the","Fragments":["following","explicit","same,"]},{"Key":"the following","Fragments":["are","(I","trick","link","function"]},{"Key":"following are","Fragments":["all"]},{"Key":"all valuable","Fragments":["suggestions:"]},{"Key":"``` pun","Fragments":["```"]},{"Key":"``` logograph","Fragments":["```"]},{"Key":"``` cipher","Fragments":["```"]},{"Key":"If there's","Fragments":["any","a"]},{"Key":"the above","Fragments":["that","questions","is"]},{"Key":"above that","Fragments":["you"]},{"Key":"you like","Fragments":["and","to","reduce","about","this","to","it.","having","a","this","the","the"]},{"Key":"like and","Fragments":["that"]},{"Key":"help making","Fragments":["the"]},{"Key":"readable I","Fragments":["am"]},{"Key":"am going","Fragments":["to","ahead","to"]},{"Key":"change it","Fragments":["accordingly","in","from"]},{"Key":"it accordingly","Fragments":[":)"]},{"Key":"accordingly :)","Fragments":["Anyway"]},{"Key":":) Anyway","Fragments":["after"]},{"Key":"Anyway after","Fragments":["the"]},{"Key":"latest changes","Fragments":["that"]},{"Key":"changes that","Fragments":["I","would"]},{"Key":"made while","Fragments":["following"]},{"Key":"while following","Fragments":["your"]},{"Key":"suggestions I","Fragments":["think"]},{"Key":"that now","Fragments":["it","that","for"]},{"Key":"now it","Fragments":["reads"]},{"Key":"little better.","Fragments":["Waiting","\"The","Seems"]},{"Key":"better. Waiting","Fragments":["for"]},{"Key":"on this.","Fragments":["(see"]},{"Key":"this. (see","Fragments":["submission"]},{"Key":"(see submission","Fragments":["3)"]},{"Key":"is nice","Fragments":["and","and","and"]},{"Key":"and straightforward,","Fragments":["but"]},{"Key":"straightforward, but","Fragments":["there's","I'm"]},{"Key":"the strings.","Fragments":["Is","Is","Can","Is"]},{"Key":"strings. Is","Fragments":["it","it","there"]},{"Key":"it possible","Fragments":["to","to","to","for","in"]},{"Key":"DRY those","Fragments":["up","out"]},{"Key":"those up","Fragments":["without"]},{"Key":"up without","Fragments":["sacrificing"]},{"Key":"feel more","Fragments":["Elixir-like","natural"]},{"Key":"more Elixir-like","Fragments":["to"]},{"Key":"Elixir-like to","Fragments":["use"]},{"Key":"your `verse`","Fragments":["clauses"]},{"Key":"clauses rather","Fragments":["than"]},{"Key":"than dispatching","Fragments":["with"]},{"Key":"dispatching with","Fragments":["a"]},{"Key":"and readable,","Fragments":["but"]},{"Key":"strings --","Fragments":["any"]},{"Key":"-- any","Fragments":["way"]},{"Key":"those out","Fragments":["without","to","to"]},{"Key":"out without","Fragments":["getting"]},{"Key":"without getting","Fragments":["too"]},{"Key":"getting too","Fragments":["complex?","fancy."]},{"Key":"very concise,","Fragments":["but"]},{"Key":"but there","Fragments":["is","is","doesn't","were","are","is","were","could","isn't","may"]},{"Key":"repetition between","Fragments":["the"]},{"Key":"up some","Fragments":["without","nice"]},{"Key":"some without","Fragments":["sacrificing"]},{"Key":"would argue","Fragments":["that"]},{"Key":"`Enum.join` isn't","Fragments":["necessary,"]},{"Key":"be overly","Fragments":["picky.","complicated,"]},{"Key":"overly picky.","Fragments":["On"]},{"Key":"picky. On","Fragments":["to"]},{"Key":"On to","Fragments":["the"]},{"Key":"Very concise!","Fragments":["A"]},{"Key":"concise! A","Fragments":["couple"]},{"Key":"of things:","Fragments":["is"]},{"Key":"things: is","Fragments":["there"]},{"Key":"the base","Fragments":["word","word.","word","word,","word","multiple","is","word","case","word","string"]},{"Key":"base word","Fragments":["once","once","once,","for","matches."]},{"Key":"once without","Fragments":["sacrificing"]},{"Key":"much clarity?","Fragments":["This"]},{"Key":"clarity? This","Fragments":["is"]},{"Key":"is probably","Fragments":["overly","2","unnecessary.","too","overly","more","some","more","better","closer","a","just","re-useability","a","a","the","a","by","more","the","a","not"]},{"Key":"probably overly","Fragments":["picky,","picky,","picky,"]},{"Key":"overly picky,","Fragments":["but","but","but"]},{"Key":"picky, but","Fragments":["the","I","to","`blank?`"]},{"Key":"the `anagram`","Fragments":["parameter","value"]},{"Key":"`anagram` parameter","Fragments":["could"]},{"Key":"parameter could","Fragments":["have"]},{"Key":"name --","Fragments":["we"]},{"Key":"an anagram","Fragments":["or","of","of","of"]},{"Key":"anagram or","Fragments":["not"]},{"Key":"the `String.from_char_list!`","Fragments":["necessary?","necessary?"]},{"Key":"the `different_words?`","Fragments":["test!"]},{"Key":"`different_words?` test!","Fragments":["Strictly"]},{"Key":"test! Strictly","Fragments":["speaking,"]},{"Key":"suppose they","Fragments":["should"]},{"Key":"they should","Fragments":["not","be."]},{"Key":"should not","Fragments":["be","expose"]},{"Key":"be counted","Fragments":["as","as"]},{"Key":"counted as","Fragments":["anagrams.","two"]},{"Key":"The newer","Fragments":["versions"]},{"Key":"newer versions","Fragments":["(0.10.1+,","of"]},{"Key":"versions (0.10.1+,","Fragments":["I"]},{"Key":"(0.10.1+, I","Fragments":["think)"]},{"Key":"I think)","Fragments":["of"]},{"Key":"think) of","Fragments":["Elixir","`state?`"]},{"Key":"Elixir always","Fragments":["return"]},{"Key":"always return","Fragments":["a"]},{"Key":"lists from","Fragments":["`Regex.scan`,"]},{"Key":"from `Regex.scan`,","Fragments":["so"]},{"Key":"`Regex.scan`, so","Fragments":["you'll"]},{"Key":"you'll need","Fragments":["to"]},{"Key":"handle nested","Fragments":["lists"]},{"Key":"nested lists","Fragments":["if/when","of"]},{"Key":"lists if/when","Fragments":["you"]},{"Key":"if/when you","Fragments":["upgrade."]},{"Key":"enough. I","Fragments":["can"]},{"Key":"arguments either","Fragments":["way."]},{"Key":"either way.","Fragments":["It's"]},{"Key":"way. It's","Fragments":["clear"]},{"Key":"It's clear","Fragments":["*what*"]},{"Key":"clear *what*","Fragments":["`String.downcase`"]},{"Key":"*what* `String.downcase`","Fragments":["does,"]},{"Key":"`String.downcase` does,","Fragments":["but"]},{"Key":"does, but","Fragments":["`normalize`"]},{"Key":"but `normalize`","Fragments":["might"]},{"Key":"`normalize` might","Fragments":["give"]},{"Key":"might give","Fragments":["you"]},{"Key":"give you","Fragments":["a","a","a","the","my","the"]},{"Key":"more context","Fragments":["on"]},{"Key":"context on","Fragments":["*why*"]},{"Key":"on *why*","Fragments":["we're"]},{"Key":"*why* we're","Fragments":["doing"]},{"Key":"we're doing","Fragments":["it."]},{"Key":"doing it.","Fragments":["In"]},{"Key":"it. In","Fragments":["this","pseudo-code,"]},{"Key":"probably possible","Fragments":["to"]},{"Key":"to infer","Fragments":["the"]},{"Key":"infer the","Fragments":["why,"]},{"Key":"the why,","Fragments":["but"]},{"Key":"why, but","Fragments":["in","somehow","it"]},{"Key":"complex domain,","Fragments":["maybe"]},{"Key":"domain, maybe","Fragments":["not."]},{"Key":"as 3,","Fragments":["I"]},{"Key":"3, I","Fragments":["just"]},{"Key":"wanted it","Fragments":["to","to"]},{"Key":"be latest","Fragments":["iteration"]},{"Key":"latest iteration","Fragments":["since"]},{"Key":"iteration since","Fragments":["4"]},{"Key":"since 4","Fragments":["was"]},{"Key":"4 was","Fragments":["an"]},{"Key":"this even","Fragments":["works.","better","though"]},{"Key":"even works.","Fragments":[":)"]},{"Key":"works. :)","Fragments":["Looks"]},{"Key":":) Looks","Fragments":["like"]},{"Key":"like I","Fragments":["accidentally","tried","failed","do","broke","should","have","need","said,","should","should","was","have","did","was"]},{"Key":"I accidentally","Fragments":["submitted","reintroduced"]},{"Key":"accidentally submitted","Fragments":["this"]},{"Key":"submitted this","Fragments":["one.","in","and"]},{"Key":"I managed","Fragments":["to","to"]},{"Key":"managed to","Fragments":["do","reimplement","get","shorten"]},{"Key":"it last","Fragments":["time"]},{"Key":"last time","Fragments":["for","so"]},{"Key":"for \u0026amp;1","Fragments":["+"]},{"Key":"+ 1...","Fragments":["how"]},{"Key":"1... how","Fragments":["would"]},{"Key":"this function?","Fragments":["My"]},{"Key":"function? My","Fragments":["initial"]},{"Key":"My initial","Fragments":["attempt","instinct"]},{"Key":"initial attempt","Fragments":["(\u0026amp;1"]},{"Key":"attempt (\u0026amp;1","Fragments":["|\u0026gt;"]},{"Key":"(\u0026amp;1 |\u0026gt;","Fragments":["sorted"]},{"Key":"|\u0026gt; sorted","Fragments":["=="]},{"Key":"sorted ==","Fragments":["sorted_word)"]},{"Key":"== sorted_word)","Fragments":["appears"]},{"Key":"sorted_word) appears","Fragments":["to"]},{"Key":"appears to","Fragments":["be","have","be","expect","me."]},{"Key":"to shorten","Fragments":["the","them","up","(and"]},{"Key":"shorten the","Fragments":["filtering","sort"]},{"Key":"definition using","Fragments":["the"]},{"Key":"the capture","Fragments":["syntax,","operator","operator","expression.","expression:"]},{"Key":"capture syntax,","Fragments":["i.e.","where"]},{"Key":"syntax, i.e.","Fragments":["\u0026amp;(...)?"]},{"Key":"Just asking.","Fragments":["I"]},{"Key":"asking. I","Fragments":["think"]},{"Key":"think arguments","Fragments":["could"]},{"Key":"arguments could","Fragments":["be","be"]},{"Key":"be made","Fragments":["either","more","asymptotically","slightly","from","more","in"]},{"Key":"made either","Fragments":["way."]},{"Key":"this too,","Fragments":["but"]},{"Key":"too, but","Fragments":["found","as","IMHO","I"]},{"Key":"but found","Fragments":["I"]},{"Key":"found I","Fragments":["needed","could"]},{"Key":"I needed","Fragments":["to","it","to"]},{"Key":"to flatten","Fragments":["the","after,","the"]},{"Key":"flatten the","Fragments":["returned","two"]},{"Key":"returned list","Fragments":["from"]},{"Key":"list from","Fragments":["Regex.scan,"]},{"Key":"from Regex.scan,","Fragments":["to"]},{"Key":"Regex.scan, to","Fragments":["satisfy"]},{"Key":"to satisfy","Fragments":["the"]},{"Key":"satisfy the","Fragments":["test","specs"]},{"Key":"test suite.","Fragments":["Did","Has","Which"]},{"Key":"suite. Did","Fragments":["this"]},{"Key":"Did this","Fragments":["pass"]},{"Key":"pass for","Fragments":["you?","that"]},{"Key":"I'd normally","Fragments":["prefer"]},{"Key":"normally prefer","Fragments":["to"]},{"Key":"use `\u0026amp;set_word/2`","Fragments":["over"]},{"Key":"`\u0026amp;set_word/2` over","Fragments":["`set_word(\u0026amp;1,"]},{"Key":"over `set_word(\u0026amp;1,","Fragments":["\u0026amp;2)`"]},{"Key":"`set_word(\u0026amp;1, \u0026amp;2)`","Fragments":["but"]},{"Key":"\u0026amp;2)` but","Fragments":["this"]},{"Key":"great, much","Fragments":["simpler!"]},{"Key":"feel that,","Fragments":["especially"]},{"Key":"that, especially","Fragments":["in"]},{"Key":"especially in","Fragments":["`count`,"]},{"Key":"in `count`,","Fragments":["the"]},{"Key":"`count`, the","Fragments":["pipeline"]},{"Key":"operator reads","Fragments":["more","well"]},{"Key":"reads more","Fragments":["naturally.","explicitly,","cleanly.","naturally"]},{"Key":"more naturally.","Fragments":["\"Take"]},{"Key":"naturally. \"Take","Fragments":["the"]},{"Key":"\"Take the","Fragments":["phrase,"]},{"Key":"the phrase,","Fragments":["extract"]},{"Key":"phrase, extract","Fragments":["the"]},{"Key":"the words,","Fragments":["count","but"]},{"Key":"words, count","Fragments":["the"]},{"Key":"count the","Fragments":["words.\"","individual","nucleotides.","words."]},{"Key":"the words.\"","Fragments":["I"]},{"Key":"words.\" I","Fragments":["also"]},{"Key":"also used","Fragments":["it","```","regexes,"]},{"Key":"used it","Fragments":["in","too","much."]},{"Key":"in count_words","Fragments":["to"]},{"Key":"count_words to","Fragments":["make"]},{"Key":"the subject","Fragments":["of","of","of"]},{"Key":"subject of","Fragments":["the","pipelines","giving"]},{"Key":"the operation","Fragments":["at","broken","a","and","fails,"]},{"Key":"operation at","Fragments":["the"]},{"Key":"line, so","Fragments":["we"]},{"Key":"so we","Fragments":["know","start"]},{"Key":"we know","Fragments":["who's"]},{"Key":"know who's","Fragments":["the"]},{"Key":"who's the","Fragments":["star"]},{"Key":"the star","Fragments":["of","of"]},{"Key":"star of","Fragments":["the","exercism"]},{"Key":"also disagree","Fragments":["with"]},{"Key":"disagree with","Fragments":["your","@clarabelle","in","@london,"]},{"Key":"your reasoning","Fragments":["that"]},{"Key":"reasoning that","Fragments":["`String.downcase`"]},{"Key":"that `String.downcase`","Fragments":["belongs"]},{"Key":"`String.downcase` belongs","Fragments":["in"]},{"Key":"in `count_words`.","Fragments":["`extract_words`'"]},{"Key":"`count_words`. `extract_words`'","Fragments":["responsibility"]},{"Key":"`extract_words`' responsibility","Fragments":["is"]},{"Key":"responsibility is","Fragments":["to"]},{"Key":"string of","Fragments":["words,","legth","\"111111…\".","whitespace","zeros."]},{"Key":"of words,","Fragments":["and","so","saves"]},{"Key":"words, and","Fragments":["turn","(2)"]},{"Key":"and turn","Fragments":["it"]},{"Key":"turn it","Fragments":["into","back","back"]},{"Key":"a form","Fragments":["that","of","of"]},{"Key":"form that","Fragments":["is"]},{"Key":"is trivially","Fragments":["countable."]},{"Key":"correct method","Fragments":["to"]},{"Key":"use here,","Fragments":["definitely."]},{"Key":"That I","Fragments":["understand."]},{"Key":"I understand.","Fragments":["However,","It"]},{"Key":"understand. However,","Fragments":["I"]},{"Key":"it goes","Fragments":["too","against","against"]},{"Key":"goes too","Fragments":["far"]},{"Key":"too far","Fragments":["and"]},{"Key":"far and","Fragments":["misses"]},{"Key":"and misses","Fragments":["the"]},{"Key":"misses the","Fragments":["point."]},{"Key":"the point.","Fragments":["In"]},{"Key":"point. In","Fragments":["my"]},{"Key":"my opinion","Fragments":["a"]},{"Key":"opinion a","Fragments":["single"]},{"Key":"single private","Fragments":["function"]},{"Key":"a clear","Fragments":["pipeline","sign-flip","story","need","reason","name.","focus"]},{"Key":"clear pipeline","Fragments":["communicates"]},{"Key":"pipeline communicates","Fragments":["better"]},{"Key":"communicates better","Fragments":["when"]},{"Key":"better when","Fragments":["the"]},{"Key":"steps are","Fragments":["easy"]},{"Key":"are easy","Fragments":["to","to","to","to","to","to","to","to","to"]},{"Key":"`Regex.scan` method,","Fragments":["but"]},{"Key":"method, but","Fragments":["another"]},{"Key":"but another","Fragments":["person"]},{"Key":"person pushed","Fragments":["back"]},{"Key":"pushed back","Fragments":["when"]},{"Key":"back when","Fragments":["I","I"]},{"Key":"recommended it,","Fragments":["due"]},{"Key":"it, due","Fragments":["to"]},{"Key":"flatten after,","Fragments":["so"]},{"Key":"after, so","Fragments":["use"]},{"Key":"so use","Fragments":["what","the","the","Elixirs"]},{"Key":"use what","Fragments":["you","is"]},{"Key":"you like!","Fragments":[":)"]},{"Key":" Subsequently","Fragments":["I've"]},{"Key":"Subsequently I've","Fragments":["discovered"]},{"Key":"I've discovered","Fragments":["Regex.scan,"]},{"Key":"discovered Regex.scan,","Fragments":["which"]},{"Key":"Regex.scan, which","Fragments":["seems","returns"]},{"Key":"seems quite","Fragments":["useful,"]},{"Key":"quite useful,","Fragments":["though"]},{"Key":"useful, though","Fragments":["it"]},{"Key":"does return","Fragments":["\"a","as"]},{"Key":"return \"a","Fragments":["list"]},{"Key":"\"a list","Fragments":["of"]},{"Key":"of lists\"","Fragments":["which","do"]},{"Key":"lists\" which","Fragments":["I've"]},{"Key":"which I've","Fragments":["then","called","only"]},{"Key":"I've then","Fragments":["needed"]},{"Key":"then needed","Fragments":["to"]},{"Key":"to List.flatten...","Fragments":["not"]},{"Key":"List.flatten... not","Fragments":["sure"]},{"Key":"Ha ha","Fragments":[","]},{"Key":"ha ,","Fragments":["I"]},{"Key":", I","Fragments":["haven´t","usually","think","will","think","will","prefer"]},{"Key":"I haven´t","Fragments":["aversion"]},{"Key":"haven´t aversion","Fragments":["to"]},{"Key":"to parentheses","Fragments":[","]},{"Key":"parentheses ,","Fragments":["i"]},{"Key":", i","Fragments":["thought"]},{"Key":"i thought","Fragments":["It"]},{"Key":"thought It","Fragments":["was"]},{"Key":"readable but","Fragments":["I","the"]},{"Key":"see I","Fragments":["was","misunderstood"]},{"Key":" Yeah...","Fragments":["I"]},{"Key":"Yeah... I","Fragments":["thought"]},{"Key":"it and","Fragments":["the","update","it","get","I","reverse","exercism","the","it's","it","do","idiomatically.","then","it"]},{"Key":"only reason","Fragments":["I","to","for"]},{"Key":"I left","Fragments":["the","the","them","them","a"]},{"Key":"left the","Fragments":["case","`mutation?`"]},{"Key":"\"!\" is","Fragments":["because"]},{"Key":"is because","Fragments":["it","I","append","I"]},{"Key":"was explicitly","Fragments":["stated"]},{"Key":"explicitly stated","Fragments":["in"]},{"Key":"stated in","Fragments":["the","the"]},{"Key":"exercise instructions","Fragments":["that"]},{"Key":"instructions that","Fragments":["there"]},{"Key":"specific response","Fragments":["for"]},{"Key":"response for","Fragments":["\"forceful\""]},{"Key":"for \"forceful\"","Fragments":["sentences"]},{"Key":"\"forceful\" sentences","Fragments":["and"]},{"Key":"sentences and","Fragments":["there's"]},{"Key":"and there's","Fragments":["even","no","a","a","only"]},{"Key":"there's even","Fragments":["a"]},{"Key":"even a","Fragments":["\"talking","bug?"]},{"Key":"a \"talking","Fragments":["forcefully"]},{"Key":"\"talking forcefully","Fragments":["test\"."]},{"Key":"personally like","Fragments":["it","it","the"]},{"Key":"way better.","Fragments":["Even","Suppose"]},{"Key":"better. Even","Fragments":["though"]},{"Key":"Even though","Fragments":["it's","the","this"]},{"Key":"though it's","Fragments":["not","not","not","not","not","a"]},{"Key":"as DRY","Fragments":["it's"]},{"Key":"DRY it's","Fragments":["more"]},{"Key":"more true","Fragments":["to"]},{"Key":"case and","Fragments":["if","pattern","binary","underscores","using","there","one","remove","just","from"]},{"Key":"this were","Fragments":["a","real"]},{"Key":"were a","Fragments":["real","single","problem"]},{"Key":"real project","Fragments":["having"]},{"Key":"project having","Fragments":["an"]},{"Key":"having an","Fragments":["extra"]},{"Key":"an extra","Fragments":["line","closing","accumulator","piece"]},{"Key":"extra line","Fragments":["that"]},{"Key":"line that","Fragments":["clarifies","does"]},{"Key":"that clarifies","Fragments":["our"]},{"Key":"clarifies our","Fragments":["application's"]},{"Key":"our application's","Fragments":["needs"]},{"Key":"application's needs","Fragments":["would"]},{"Key":"needs would","Fragments":["be"]},{"Key":"more valuable","Fragments":["when"]},{"Key":"valuable when","Fragments":["the"]},{"Key":"the time","Fragments":["comes","to","Elixir","to","comes","yet.","we","taken","needed","taken","needed","but","needed","needed","I","gets","`append`","of"]},{"Key":"time comes","Fragments":["where","to"]},{"Key":"comes where","Fragments":["Bob"]},{"Key":"where Bob","Fragments":["needs"]},{"Key":"Bob needs","Fragments":["to"]},{"Key":"to respond","Fragments":["differently","to"]},{"Key":"respond differently","Fragments":["to"]},{"Key":"differently to","Fragments":["forceful"]},{"Key":"to forceful","Fragments":["sentences."]},{"Key":"Maybe I'm","Fragments":["over","missing","not"]},{"Key":"I'm over","Fragments":["thinking"]},{"Key":"over thinking","Fragments":["it"]},{"Key":"thinking it","Fragments":["but","needed"]},{"Key":"it but","Fragments":["that's","I","I","it","I'm","it's","I"]},{"Key":"that's just","Fragments":["my","a","because","me","a","to","a"]},{"Key":"just my","Fragments":["perspective","unfamiliarity","first","font-size,"]},{"Key":"my perspective","Fragments":["on","as"]},{"Key":"perspective on","Fragments":["most"]},{"Key":"on most","Fragments":["code."]},{"Key":"do `fn(potential_match)","Fragments":["-\u0026gt;"]},{"Key":"`fn(potential_match) -\u0026gt;","Fragments":["…"]},{"Key":"-\u0026gt; …","Fragments":["end`"]},{"Key":"… end`","Fragments":["as"]},{"Key":"end` as","Fragments":["`sorted_base_letters","`\u0026(1","the","`\u0026(\u00261"]},{"Key":"as `sorted_base_letters","Fragments":["=="]},{"Key":"`sorted_base_letters ==","Fragments":["sorted_letters(\u0026amp;1)`"]},{"Key":"== sorted_letters(\u0026amp;1)`","Fragments":["or"]},{"Key":"sorted_letters(\u0026amp;1)` or","Fragments":["`\u0026amp;(sorted_base_letters"]},{"Key":"or `\u0026amp;(sorted_base_letters","Fragments":["=="]},{"Key":"`\u0026amp;(sorted_base_letters ==","Fragments":["sorted_letters(\u0026amp;1))`."]},{"Key":"Why did","Fragments":["you","you","I"]},{"Key":"you broke","Fragments":["down","everything"]},{"Key":"broke down","Fragments":["the"]},{"Key":"the `to_anagram_key/1`","Fragments":["function"]},{"Key":"`to_anagram_key/1` function","Fragments":["into"]},{"Key":"into three","Fragments":["pieces?"]},{"Key":"three pieces?","Fragments":["I"]},{"Key":"pieces? I","Fragments":["think"]},{"Key":"and comprehensible","Fragments":["if"]},{"Key":"comprehensible if","Fragments":["it"]},{"Key":"single pipeline","Fragments":["of"]},{"Key":"pipeline of","Fragments":["transformations.","steps."]},{"Key":"operator is","Fragments":["a","in","more","sort","deprecated).","fun","`\u0026Kernel.+/2`."]},{"Key":"bit over-used","Fragments":["here."]},{"Key":"over-used here.","Fragments":["There"]},{"Key":"here. There","Fragments":["isn't"]},{"Key":"There isn't","Fragments":["so","much"]},{"Key":"isn't so","Fragments":["much"]},{"Key":"much reason","Fragments":["to","to"]},{"Key":"it when","Fragments":["there's","writing","people","coding","I","I","writing","you"]},{"Key":"only one","Fragments":["function.","is","implementation","that","place","suggestion:","element,","time","element,","\"Fine.","thing:","match.","pass","defp"]},{"Key":" Semantically","Fragments":["I"]},{"Key":"Semantically I","Fragments":["think"]},{"Key":"downcase would","Fragments":["make"]},{"Key":"count than","Fragments":["in"]},{"Key":"than in","Fragments":["extract_words.","a"]},{"Key":"in extract_words.","Fragments":["This"]},{"Key":"extract_words. This","Fragments":["normalization"]},{"Key":"This normalization","Fragments":["doesn't"]},{"Key":"normalization doesn't","Fragments":["really"]},{"Key":"have much","Fragments":["to","downsides","of","better","experience"]},{"Key":"more specific","Fragments":["(from","to","comments","functions"]},{"Key":"specific (from","Fragments":["the"]},{"Key":"(from the","Fragments":["perspective"]},{"Key":"the perspective","Fragments":["of","I'd"]},{"Key":"perspective of","Fragments":["types)"]},{"Key":"of types)","Fragments":["than"]},{"Key":"types) than","Fragments":["List.flatten"]},{"Key":"than List.flatten","Fragments":["in"]},{"Key":"List.flatten in","Fragments":["this"]},{"Key":"case, because","Fragments":["it's"]},{"Key":"some arbitrarily","Fragments":["nested"]},{"Key":"arbitrarily nested","Fragments":["structure.","lists"]},{"Key":" \u0026amp;(sorted_base_letters","Fragments":["=="]},{"Key":"\u0026amp;(sorted_base_letters ==","Fragments":["sorted_letters(\u0026amp;1))"]},{"Key":"== sorted_letters(\u0026amp;1))","Fragments":["works."]},{"Key":"sorted_letters(\u0026amp;1)) works.","Fragments":["It's"]},{"Key":"works. It's","Fragments":["more"]},{"Key":"It's more","Fragments":["concise,","work","that","powerful","immediately","efficient"]},{"Key":"more concise,","Fragments":["which","but"]},{"Key":"concise, which","Fragments":["I"]},{"Key":"usually prefer.","Fragments":["At"]},{"Key":"prefer. At","Fragments":["this"]},{"Key":"point it's","Fragments":["a","about"]},{"Key":"little harder","Fragments":["for"]},{"Key":"harder for","Fragments":["me"]},{"Key":"to parse","Fragments":["as","the","the","any","for","the","and"]},{"Key":"parse as","Fragments":["a"]},{"Key":"a reader,","Fragments":["but"]},{"Key":"reader, but","Fragments":["that","not"]},{"Key":"that may","Fragments":["just","just"]},{"Key":"may just","Fragments":["be","be","be","be"]},{"Key":"be because","Fragments":["I'm","I've","I"]},{"Key":"because I'm","Fragments":["not","not","not","more","bad"]},{"Key":"not yet","Fragments":["used","come","a"]},{"Key":"yet used","Fragments":["to"]},{"Key":"the notation.","Fragments":["Is"]},{"Key":"notation. Is","Fragments":["the"]},{"Key":"the \u0026amp;(...)","Fragments":["newish"]},{"Key":"\u0026amp;(...) newish","Fragments":["syntax?"]},{"Key":"You correct","Fragments":["of"]},{"Key":"correct of","Fragments":["course,"]},{"Key":"of course,","Fragments":["though"]},{"Key":"course, though","Fragments":["it"]},{"Key":"fun exercise.","Fragments":["Performance"]},{"Key":"exercise. Performance","Fragments":["of"]},{"Key":"Performance of","Fragments":["this"]},{"Key":"this concurrent","Fragments":["version"]},{"Key":"concurrent version","Fragments":["is"]},{"Key":"is terrible.","Fragments":["I"]},{"Key":"terrible. I","Fragments":["ran","made"]},{"Key":"I ran","Fragments":["it"]},{"Key":"ran it","Fragments":["again"]},{"Key":"it again","Fragments":["the","without","and","outside","on"]},{"Key":"again the","Fragments":["english"]},{"Key":"the english","Fragments":["dictionary"]},{"Key":"english dictionary","Fragments":["and"]},{"Key":"dictionary and","Fragments":["it"]},{"Key":"than 3X","Fragments":["slower"]},{"Key":"3X slower","Fragments":["than"]},{"Key":"slower than","Fragments":["my","the","yours","your","the"]},{"Key":"first version.","Fragments":["I","It","My"]},{"Key":"I suspect","Fragments":["the","this","any","List.foldr","it's","strict","there","it","not","`list`","this","it's","this","that","this"]},{"Key":"suspect the","Fragments":["filter"]},{"Key":"filter is","Fragments":["mostly"]},{"Key":"the culprit.","Fragments":["Anyway,"]},{"Key":"culprit. Anyway,","Fragments":["reverting"]},{"Key":"Anyway, reverting","Fragments":["to"]},{"Key":"reverting to","Fragments":["original."]},{"Key":"to original.","Fragments":["Thanks"]},{"Key":"original. Thanks","Fragments":["for"]},{"Key":"this. I","Fragments":["agree","learned","think","am","am"]},{"Key":"with @karli","Fragments":["--"]},{"Key":"@karli --","Fragments":["using"]},{"Key":"-- using","Fragments":["the"]},{"Key":"shorthand fn","Fragments":["notation"]},{"Key":"fn notation","Fragments":["helps"]},{"Key":"notation helps","Fragments":["improve"]},{"Key":"helps improve","Fragments":["the"]},{"Key":"the signal","Fragments":["to"]},{"Key":"signal to","Fragments":["noise"]},{"Key":"to noise","Fragments":["ratio."]},{"Key":"noise ratio.","Fragments":["Maybe"]},{"Key":"ratio. Maybe","Fragments":["try"]},{"Key":"Maybe try","Fragments":["that","`Regex.scan/3`","using"]},{"Key":"on future","Fragments":["exercises?"]},{"Key":"Nice, I'd","Fragments":["move"]},{"Key":"``` cond","Fragments":["```","```","```","```"]},{"Key":"cond ```","Fragments":["logic","logic","statement","inside"]},{"Key":"``` logic","Fragments":["into","into"]},{"Key":"into some","Fragments":["private","private","of"]},{"Key":"avoid duplication","Fragments":["created"]},{"Key":"duplication created","Fragments":["by"]},{"Key":"created by","Fragments":["repeating"]},{"Key":"by repeating","Fragments":["twice"]},{"Key":"repeating twice","Fragments":["the"]},{"Key":"twice the","Fragments":["```"]},{"Key":"``` ends_with?","Fragments":["```"]},{"Key":"ends_with? ```","Fragments":["method."]},{"Key":"using `List.foldl/3`","Fragments":["and"]},{"Key":"`List.foldl/3` and","Fragments":["`HashDict.update/4`?"]},{"Key":"and `HashDict.update/4`?","Fragments":["Normalizing"]},{"Key":"`HashDict.update/4`? Normalizing","Fragments":["the"]},{"Key":"Normalizing the","Fragments":["case"]},{"Key":"case of","Fragments":["the","working","`HashDict.new`).","taking","the","small","an","the","the","`concat`.","`count()`"]},{"Key":"string before","Fragments":["splitting","matching.","scan","scoring"]},{"Key":"before splitting","Fragments":["will"]},{"Key":"splitting will","Fragments":["also"]},{"Key":"will also","Fragments":["make"]},{"Key":"also make","Fragments":["this","sure"]},{"Key":"cleanest version","Fragments":["I"]},{"Key":"doesn't keep","Fragments":["re-sorting"]},{"Key":"keep re-sorting","Fragments":["the"]},{"Key":"re-sorting the","Fragments":["base"]},{"Key":"base word.","Fragments":["Maintains","That"]},{"Key":"word. Maintains","Fragments":["algorithm"]},{"Key":"Maintains algorithm","Fragments":["encapsulation"]},{"Key":"algorithm encapsulation","Fragments":["while"]},{"Key":"encapsulation while","Fragments":["adding"]},{"Key":"while adding","Fragments":["a"]},{"Key":"little performance-optimization","Fragments":["hairiness"]},{"Key":"performance-optimization hairiness","Fragments":["to"]},{"Key":"hairiness to","Fragments":["the"]},{"Key":"the anagram_matcher","Fragments":["function."]},{"Key":"anagram_matcher function.","Fragments":["Still,"]},{"Key":"function. Still,","Fragments":["at"]},{"Key":"Still, at","Fragments":["least"]},{"Key":"least it's","Fragments":["contained."]},{"Key":"it's less","Fragments":["clean","explicit,"]},{"Key":"less clean","Fragments":["than"]},{"Key":"clean than","Fragments":["version"]},{"Key":"than version","Fragments":["4"]},{"Key":"version 4","Fragments":["but"]},{"Key":"4 but","Fragments":["perhaps"]},{"Key":"perhaps it's","Fragments":["the"]},{"Key":"the \"better\"","Fragments":["solution?"]},{"Key":"\"better\" solution?","Fragments":["Interested"]},{"Key":"solution? Interested","Fragments":["in"]},{"Key":"Interested in","Fragments":["thoughts"]},{"Key":"in thoughts","Fragments":["on"]},{"Key":"thoughts on","Fragments":["that","extracting","that.","that.","my","repeatedly","the","that","this","it?"]},{"Key":"that or","Fragments":["on","not?","not,"]},{"Key":"or on","Fragments":["another"]},{"Key":"on another","Fragments":["approach.","function","I"]},{"Key":"This just","Fragments":["seems","uses"]},{"Key":"just seems","Fragments":["like","cleaner","a"]},{"Key":"complicated way","Fragments":["to"]},{"Key":"do it,","Fragments":["I'm","that","and","too."]},{"Key":"not convinced","Fragments":["that","this"]},{"Key":"convinced that","Fragments":["trying"]},{"Key":"that trying","Fragments":["to"]},{"Key":"to parallelize","Fragments":["the"]},{"Key":"parallelize the","Fragments":["normalization"]},{"Key":"the normalization","Fragments":["here"]},{"Key":"normalization here","Fragments":["is"]},{"Key":"the purposes","Fragments":["of","of","of"]},{"Key":"purposes of","Fragments":["this","this","exercism,"]},{"Key":"exercise, if","Fragments":["you"]},{"Key":"to maximize","Fragments":["efficiency,","readability"]},{"Key":"maximize efficiency,","Fragments":["you"]},{"Key":"efficiency, you","Fragments":["could"]},{"Key":"could calculate","Fragments":["the"]},{"Key":"calculate the","Fragments":["frequencies","total"]},{"Key":"the frequencies","Fragments":["of"]},{"Key":"frequencies of","Fragments":["each"]},{"Key":"each letter","Fragments":["of","of"]},{"Key":"letter of","Fragments":["a","the"]},{"Key":"in O(n)","Fragments":["time"]},{"Key":"O(n) time","Fragments":["where"]},{"Key":"time where","Fragments":["this","it"]},{"Key":"this sorting","Fragments":["method"]},{"Key":"sorting method","Fragments":["is"]},{"Key":"is O(n","Fragments":["*"]},{"Key":"O(n *","Fragments":["log(n)).","log"]},{"Key":" So,","Fragments":["I'm","this","I","I","do","are","you","I","you","does","I"]},{"Key":"So, I'm","Fragments":["submitting","wondering"]},{"Key":"I'm submitting","Fragments":["this","a"]},{"Key":"submitting this","Fragments":["knowing","because"]},{"Key":"this knowing","Fragments":["that"]},{"Key":"knowing that","Fragments":["I'm"]},{"Key":"I'm currently","Fragments":["sorting","rewriting"]},{"Key":"currently sorting","Fragments":["baseword"]},{"Key":"sorting baseword","Fragments":["once"]},{"Key":"baseword once","Fragments":["for"]},{"Key":"each potential","Fragments":["anagram."]},{"Key":"potential anagram.","Fragments":["If"]},{"Key":"anagram. If","Fragments":["I"]},{"Key":"I were","Fragments":["seeking"]},{"Key":"were seeking","Fragments":["optimal"]},{"Key":"seeking optimal","Fragments":["performance,"]},{"Key":"optimal performance,","Fragments":["I"]},{"Key":"performance, I","Fragments":["could"]},{"Key":"easily avoid","Fragments":["doing"]},{"Key":"avoid doing","Fragments":["that."]},{"Key":"doing that.","Fragments":["But","The","I"]},{"Key":"that. But","Fragments":["I","from","hey,","the"]},{"Key":"haven't thought","Fragments":["of"]},{"Key":"thought of","Fragments":["a","that","you","on","it","that","using","adding","using","were","structuring","that!"]},{"Key":"way yet","Fragments":["to"]},{"Key":"yet to","Fragments":["seek","hear"]},{"Key":"to seek","Fragments":["that"]},{"Key":"seek that","Fragments":["performance"]},{"Key":"that performance","Fragments":["gain","mentality."]},{"Key":"performance gain","Fragments":["without"]},{"Key":"gain without","Fragments":["sacrificing"]},{"Key":"sacrificing at","Fragments":["least"]},{"Key":"least a","Fragments":["little","single"]},{"Key":"code readability,","Fragments":["and"]},{"Key":"readability, and","Fragments":["I'm"]},{"Key":"sure it's","Fragments":["worth","not","worth","not"]},{"Key":"it's worth","Fragments":["it.","it","it.","it.","your"]},{"Key":"I most","Fragments":["certainly"]},{"Key":"most certainly","Fragments":["don't"]},{"Key":"certainly don't","Fragments":["need","have"]},{"Key":"to re-create","Fragments":["the"]},{"Key":"re-create the","Fragments":["String.from_char_list!,"]},{"Key":"the String.from_char_list!,","Fragments":["since"]},{"Key":"String.from_char_list!, since","Fragments":["all"]},{"Key":"since all","Fragments":["I'm"]},{"Key":"all I'm","Fragments":["doing"]},{"Key":"I'm doing","Fragments":["is","this","on"]},{"Key":"doing is","Fragments":["comparing","a"]},{"Key":"is comparing","Fragments":["the"]},{"Key":"comparing the","Fragments":["result.","result","last"]},{"Key":"the result.","Fragments":["Nice","It","Looking"]},{"Key":"result. Nice","Fragments":["catch!"]},{"Key":"I toyed","Fragments":["with"]},{"Key":"toyed with","Fragments":["a","the"]},{"Key":"few options","Fragments":["to"]},{"Key":"options to","Fragments":["sort"]},{"Key":"the baseword","Fragments":["only","once?"]},{"Key":"baseword only","Fragments":["once,"]},{"Key":"only once,","Fragments":["but"]},{"Key":"code never","Fragments":["looked"]},{"Key":"never looked","Fragments":["as"]},{"Key":"looked as","Fragments":["clean"]},{"Key":"as clean","Fragments":["as"]},{"Key":"clean as","Fragments":["it"]},{"Key":"does now.","Fragments":["I'll"]},{"Key":"now. I'll","Fragments":["take"]},{"Key":"take another","Fragments":["pass"]},{"Key":"another pass","Fragments":["at","through"]},{"Key":"pass at","Fragments":["it.","this"]},{"Key":"Could we","Fragments":["remove"]},{"Key":"we remove","Fragments":["some"]},{"Key":"in `how_many?`","Fragments":["and"]},{"Key":"`how_many?` and","Fragments":["`take_one_down`"]},{"Key":"and `take_one_down`","Fragments":["without","as"]},{"Key":"`take_one_down` without","Fragments":["sacrificing"]},{"Key":"Elixir didn't","Fragments":["like"]},{"Key":"didn't like","Fragments":["the","was","the","iterating"]},{"Key":"atoms not","Fragments":["in"]},{"Key":"not in","Fragments":["a","reverse."]},{"Key":"a tuple.","Fragments":["I","If"]},{"Key":"tuple. I","Fragments":["might"]},{"Key":"might try","Fragments":["it","that"]},{"Key":"again without","Fragments":["the"]},{"Key":"the tuple","Fragments":["and","elements","and"]},{"Key":"tuple and","Fragments":["see","the"]},{"Key":"was something","Fragments":["else"]},{"Key":"else elixir","Fragments":["didn't"]},{"Key":"elixir didn't","Fragments":["like."]},{"Key":"the tip!","Fragments":["Yes","I"]},{"Key":"tip! Yes","Fragments":["indeed,"]},{"Key":"Yes indeed,","Fragments":["it"]},{"Key":"indeed, it","Fragments":["helps,"]},{"Key":"it helps,","Fragments":["making"]},{"Key":"helps, making","Fragments":["sure"]},{"Key":"making sure","Fragments":["that"]},{"Key":"nil (or","Fragments":["anything"]},{"Key":"(or anything","Fragments":["else"]},{"Key":"anything else","Fragments":["than","case)"]},{"Key":"else than","Fragments":["a"]},{"Key":"a string)","Fragments":["won't"]},{"Key":"string) won't","Fragments":["blow"]},{"Key":"blow everything","Fragments":["up"]},{"Key":"everything up","Fragments":[";)"]},{"Key":"new version,","Fragments":["thanks!","and"]},{"Key":"use `\u0026amp;update_frequency/2`","Fragments":["to"]},{"Key":"`\u0026amp;update_frequency/2` to","Fragments":["reference"]},{"Key":"reference a","Fragments":["function,","function,"]},{"Key":"function, instead","Fragments":["of"]},{"Key":"of partially","Fragments":["applying"]},{"Key":"partially applying","Fragments":["multiple"]},{"Key":"applying multiple","Fragments":["arguments."]},{"Key":"at `to_binary/1`,","Fragments":["it"]},{"Key":"`to_binary/1`, it","Fragments":["might"]},{"Key":"make handling","Fragments":["the"]},{"Key":"handling the","Fragments":["nil","downcasing","empty"]},{"Key":"nil case","Fragments":["easier."]},{"Key":"Ah nice,","Fragments":["I"]},{"Key":"nice, I","Fragments":["wasn't","didn't"]},{"Key":"aware ruby","Fragments":["allowed"]},{"Key":"ruby allowed","Fragments":["a"]},{"Key":"allowed a","Fragments":["form","more"]},{"Key":"matching, awesome","Fragments":[":)"]},{"Key":"just remove","Fragments":["the"]},{"Key":"commented dead","Fragments":["code,"]},{"Key":"dead code,","Fragments":["otherwise"]},{"Key":"code, otherwise","Fragments":["looks"]},{"Key":"otherwise looks","Fragments":["great"]},{"Key":"looks great","Fragments":[":)","too.","to"]},{"Key":" Edit:","Fragments":["lol,","that"]},{"Key":"Edit: lol,","Fragments":["ok,"]},{"Key":"lol, ok,","Fragments":["it's"]},{"Key":"ok, it's","Fragments":["elixir."]},{"Key":"it's elixir.","Fragments":["lol."]},{"Key":"elixir. lol.","Fragments":["`/me`"]},{"Key":"lol. `/me`","Fragments":["takes"]},{"Key":"`/me` takes","Fragments":["another"]},{"Key":"takes another","Fragments":["coffee."]},{"Key":"OK, so","Fragments":["you"]},{"Key":"not likely","Fragments":["to"]},{"Key":"likely to","Fragments":["need","be","change.","contain","lead"]},{"Key":"a concurrent","Fragments":["anagram","exercise"]},{"Key":"concurrent anagram","Fragments":["finder"]},{"Key":"anagram finder","Fragments":["any"]},{"Key":"finder any","Fragments":["time"]},{"Key":"any time","Fragments":["soon.","you","soon."]},{"Key":"time soon.","Fragments":["However,"]},{"Key":"soon. However,","Fragments":["I"]},{"Key":"good time","Fragments":["figuring"]},{"Key":"time figuring","Fragments":["out","out"]},{"Key":"figuring out","Fragments":["how","actual","things","how","how","what"]},{"Key":"handle this.","Fragments":["Any"]},{"Key":"this. Any","Fragments":["tips"]},{"Key":"Any tips","Fragments":["on"]},{"Key":"tips on","Fragments":["how"]},{"Key":"to bring","Fragments":["clarity","that"]},{"Key":"bring clarity","Fragments":["to"]},{"Key":"clarity to","Fragments":["the"]},{"Key":"the \u003ccode\u003erespond\u003c/code\u003e","Fragments":["function."]},{"Key":"\u003ccode\u003erespond\u003c/code\u003e function.","Fragments":["I"]},{"Key":"function. I","Fragments":["like","got","think","made","think","may","tried","don't","couldn't"]},{"Key":"that part.","Fragments":["I","It"]},{"Key":"part. I","Fragments":["think"]},{"Key":"the protocol","Fragments":["and","being","instead","but","wrapper"]},{"Key":"protocol and","Fragments":["extension"]},{"Key":"and extension","Fragments":["of"]},{"Key":"extension of","Fragments":["\u003ccode\u003eBitString\u003c/code\u003e"]},{"Key":"of \u003ccode\u003eBitString\u003c/code\u003e","Fragments":["feels"]},{"Key":"\u003ccode\u003eBitString\u003c/code\u003e feels","Fragments":["too"]},{"Key":"feels too","Fragments":["invasive"]},{"Key":"too invasive","Fragments":["on"]},{"Key":"invasive on","Fragments":["a"]},{"Key":"another idea","Fragments":["in"]},{"Key":"to document","Fragments":["this"]},{"Key":"document this","Fragments":["refactoring"]},{"Key":"this refactoring","Fragments":["so"]},{"Key":"refactoring so","Fragments":["I"]},{"Key":"Elixir program","Fragments":["ever"]},{"Key":"program ever","Fragments":["so","in"]},{"Key":"ever so","Fragments":["could","slightly"]},{"Key":"so could","Fragments":["use"]},{"Key":"use pointers","Fragments":["or"]},{"Key":"pointers or","Fragments":["ideas."]},{"Key":"or ideas.","Fragments":["Also"]},{"Key":"ideas. Also","Fragments":["any"]},{"Key":"Also any","Fragments":["links"]},{"Key":"any links","Fragments":["to"]},{"Key":"links to","Fragments":["resources"]},{"Key":"to resources","Fragments":["to"]},{"Key":"resources to","Fragments":["look"]},{"Key":"at would","Fragments":["be"]},{"Key":"be great.","Fragments":[":)"]},{"Key":"a record","Fragments":["and","`Range[first:","that","(though","with"]},{"Key":"record and","Fragments":["a"]},{"Key":"protocol mostly","Fragments":["to"]},{"Key":"mostly to","Fragments":["see"]},{"Key":"do (and","Fragments":["will"]},{"Key":"(and will","Fragments":["still"]},{"Key":"still try","Fragments":["to"]},{"Key":"to do)","Fragments":["is"]},{"Key":"do) is","Fragments":["have"]},{"Key":"is have","Fragments":["the"]},{"Key":"the \u003ccode\u003eMessage\u003c/code\u003e","Fragments":["record"]},{"Key":"\u003ccode\u003eMessage\u003c/code\u003e record","Fragments":["identify"]},{"Key":"record identify","Fragments":["the"]},{"Key":"identify the","Fragments":["type","type","anagrams","continuation"]},{"Key":"message and","Fragments":["set"]},{"Key":"and set","Fragments":["attributes","the"]},{"Key":"set attributes","Fragments":["like"]},{"Key":"like \u003ccode\u003equestion:","Fragments":["true\u003c/code\u003e."]},{"Key":"\u003ccode\u003equestion: true\u003c/code\u003e.","Fragments":["Then"]},{"Key":"true\u003c/code\u003e. Then","Fragments":["use"]},{"Key":"Then use","Fragments":["pattern"]},{"Key":"the \u003ccode\u003ehey\u003c/code\u003e","Fragments":["function"]},{"Key":"\u003ccode\u003ehey\u003c/code\u003e function","Fragments":["to","is"]},{"Key":"pick the","Fragments":["correct"]},{"Key":"pipeline for","Fragments":["predicates.","a"]},{"Key":"for predicates.","Fragments":["You"]},{"Key":"predicates. You","Fragments":["know"]},{"Key":"You know","Fragments":["that","what..."]},{"Key":"can actually","Fragments":["change"]},{"Key":"actually change","Fragments":["```"]},{"Key":"change ```","Fragments":["true"]},{"Key":"with something","Fragments":["like","like","like","like","akin"]},{"Key":"like ```","Fragments":["\"_whatever\"","\"\""]},{"Key":"``` or","Fragments":["```","```","```"]},{"Key":"or ```","Fragments":[":whatever","List#foldl",":whatever"]},{"Key":"``` :whatever","Fragments":["```","```"]},{"Key":":whatever ```","Fragments":["and","to"]},{"Key":"``` and","Fragments":["it"]},{"Key":"readable. Nice","Fragments":["work"]},{"Key":"Nice work","Fragments":["anyway!"]},{"Key":"I've only","Fragments":["got","ever"]},{"Key":"only got","Fragments":["one"]},{"Key":"got one","Fragments":["minor"]},{"Key":"one minor","Fragments":["nit","nit:","improvement","suggestion."]},{"Key":"minor nit","Fragments":["left","I"]},{"Key":"nit left","Fragments":["(I"]},{"Key":"left (I","Fragments":["think"]},{"Key":"(I think","Fragments":[":).","they","it"]},{"Key":"think :).","Fragments":["Do"]},{"Key":":). Do","Fragments":["you"]},{"Key":"more intention-revealing","Fragments":["name"]},{"Key":"the \"clean\"","Fragments":["function?"]},{"Key":"\"clean\" function?","Fragments":["Reading"]},{"Key":"function? Reading","Fragments":["the"]},{"Key":"Reading the","Fragments":["new"]},{"Key":"new implementation","Fragments":["of"]},{"Key":"of count(),","Fragments":["it's"]},{"Key":"count(), it's","Fragments":["the"]},{"Key":"the story","Fragments":["I","of","at","a"]},{"Key":"story I","Fragments":["felt"]},{"Key":"I felt","Fragments":["could","it","like","like","that","like","like","the","like","this","that","that"]},{"Key":"felt could","Fragments":["be"]},{"Key":"Not bad,","Fragments":["I"]},{"Key":"bad, I","Fragments":["think"]},{"Key":"can find","Fragments":["a","one","here"]},{"Key":"methods it","Fragments":["would"]},{"Key":"Nice work,","Fragments":["If","but"]},{"Key":"work, If","Fragments":["you"]},{"Key":"want you","Fragments":["can","could"]},{"Key":"operator `sentence","Fragments":["|\u0026gt;"]},{"Key":"`sentence |\u0026gt;","Fragments":["empty?`,"]},{"Key":"|\u0026gt; empty?`,","Fragments":["I"]},{"Key":"empty?`, I","Fragments":["personally"]},{"Key":"with predicate","Fragments":["functions."]},{"Key":"if I've","Fragments":["gotten"]},{"Key":"I've gotten","Fragments":["your"]},{"Key":"gotten your","Fragments":["drift"]},{"Key":"your drift","Fragments":["correctly"]},{"Key":"drift correctly","Fragments":["but"]},{"Key":"correctly but","Fragments":["I've"]},{"Key":"but I've","Fragments":["used","also","been","always","seen","submitted"]},{"Key":"|\u0026gt; operator","Fragments":["a","is","instead"]},{"Key":"operator a","Fragments":["bit"]},{"Key":"more liberally","Fragments":["in"]},{"Key":"liberally in","Fragments":["my"]},{"Key":"my next","Fragments":["iteration.","revision.","answer"]},{"Key":"next iteration.","Fragments":["I","Along","That"]},{"Key":"iteration. I","Fragments":["may","just"]},{"Key":"well not","Fragments":["be"]},{"Key":"be visualising","Fragments":["the"]},{"Key":"visualising the","Fragments":["flow"]},{"Key":"the flow","Fragments":["of","becomes","if","obvious.","on","into"]},{"Key":"flow of","Fragments":["things"]},{"Key":"things very","Fragments":["well..."]},{"Key":"was hoping","Fragments":["something","to","more","it"]},{"Key":"hoping something","Fragments":["like"]},{"Key":"was possible!","Fragments":["I'm"]},{"Key":"possible! I'm","Fragments":["finding"]},{"Key":"I'm finding","Fragments":["Elixir","my","it","it"]},{"Key":"finding Elixir","Fragments":["a"]},{"Key":"bit difficult","Fragments":["to"]},{"Key":"to Google","Fragments":["good","Translate)"]},{"Key":"Google good","Fragments":["practical"]},{"Key":"good practical","Fragments":["examples"]},{"Key":"practical examples","Fragments":["for..."]},{"Key":" Better","Fragments":["and"]},{"Key":"Better and","Fragments":["better."]},{"Key":"and better.","Fragments":["I"]},{"Key":"have some","Fragments":["difficulty","shared","questions:","\"Greeting.classify\"","benefits","questions!","ideas","spare"]},{"Key":"some difficulty","Fragments":["following"]},{"Key":"difficulty following","Fragments":["the"]},{"Key":"code when","Fragments":["pipes","I"]},{"Key":"when pipes","Fragments":["are"]},{"Key":"pipes are","Fragments":["used"]},{"Key":"are used","Fragments":["*inside*","in"]},{"Key":"used *inside*","Fragments":["of"]},{"Key":"*inside* of","Fragments":["function"]},{"Key":"function calls.","Fragments":["It's"]},{"Key":"calls. It's","Fragments":["perfectly"]},{"Key":"It's perfectly","Fragments":["legal,","fine","possible"]},{"Key":"perfectly legal,","Fragments":["but"]},{"Key":"legal, but","Fragments":["isn't"]},{"Key":"but isn't","Fragments":["the"]},{"Key":"convention I'm","Fragments":["used"]},{"Key":"can pipe","Fragments":["into,"]},{"Key":"pipe into,","Fragments":["e.g."]},{"Key":"into, e.g.","Fragments":["Enum.reduce"]},{"Key":"e.g. Enum.reduce","Fragments":["even"]},{"Key":"Enum.reduce even","Fragments":["if"]},{"Key":"other parameters","Fragments":["to"]},{"Key":"parameters to","Fragments":["the","`match`","the"]},{"Key":"the call?","Fragments":["The"]},{"Key":"call? The","Fragments":["result"]},{"Key":"pipe would","Fragments":["get"]},{"Key":"would get","Fragments":["automatically","persisted","called"]},{"Key":"get automatically","Fragments":["inserted"]},{"Key":"automatically inserted","Fragments":["into"]},{"Key":"inserted into","Fragments":["the","your"]},{"Key":"first parameter","Fragments":["position.","to","for","(forgive"]},{"Key":"are your","Fragments":["thoughts"]},{"Key":"your thoughts","Fragments":["on","(or","on","on"]},{"Key":"on extracting","Fragments":["the"]},{"Key":"anonymous fn","Fragments":["in"]},{"Key":"fn in","Fragments":["frequencies"]},{"Key":"in frequencies","Fragments":["into"]},{"Key":"frequencies into","Fragments":["a"]},{"Key":"named function?","Fragments":["I've"]},{"Key":"function? I've","Fragments":["seen"]},{"Key":"seen it","Fragments":["both"]},{"Key":" @keegan:","Fragments":["I'm"]},{"Key":"@keegan: I'm","Fragments":["sorry,"]},{"Key":"I'm sorry,","Fragments":["I","this"]},{"Key":"sorry, I","Fragments":["don't","was","was"]},{"Key":"silence function,","Fragments":["could"]},{"Key":"function, could","Fragments":["you"]},{"Key":"mean using","Fragments":["guards","module"]},{"Key":"guards to","Fragments":["define","simplify"]},{"Key":"define two","Fragments":["\"silence?\""]},{"Key":"two \"silence?\"","Fragments":["functions,"]},{"Key":"\"silence?\" functions,","Fragments":["one"]},{"Key":"functions, one","Fragments":["for"]},{"Key":"Yeah, I've","Fragments":["just"]},{"Key":"just had","Fragments":["a"]},{"Key":"big flurry","Fragments":["of"]},{"Key":"flurry of","Fragments":["submitting"]},{"Key":"of submitting","Fragments":["things"]},{"Key":"submitting things","Fragments":["I"]},{"Key":"didn't mean","Fragments":["to."]},{"Key":"mean to.","Fragments":["Don't"]},{"Key":"to. Don't","Fragments":["mind"]},{"Key":"Don't mind","Fragments":["me!"]},{"Key":"mind me!","Fragments":["I'd"]},{"Key":"me! I'd","Fragments":["better"]},{"Key":"I'd better","Fragments":["repeat"]},{"Key":"better repeat","Fragments":["my"]},{"Key":"repeat my","Fragments":["question"]},{"Key":"question from","Fragments":["ages"]},{"Key":"from ages","Fragments":["back:"]},{"Key":"ages back:","Fragments":["I"]},{"Key":"back: I","Fragments":["was"]},{"Key":"was delighted","Fragments":["to"]},{"Key":"delighted to","Fragments":["be"]},{"Key":"to rephrase","Fragments":["\"fn"]},{"Key":"rephrase \"fn","Fragments":["(val)"]},{"Key":"\"fn (val)","Fragments":["-\u0026gt;","-\u0026gt;"]},{"Key":"(val) -\u0026gt;","Fragments":["val","val"]},{"Key":"-\u0026gt; val","Fragments":["+","+"]},{"Key":"val +","Fragments":["1","1","1"]},{"Key":"1 end\"","Fragments":["as","with"]},{"Key":"end\" as","Fragments":["\"\u0026amp;1"]},{"Key":"as \"\u0026amp;1","Fragments":["+"]},{"Key":"\"\u0026amp;1 +","Fragments":["1\"...","1\""]},{"Key":"+ 1\"...","Fragments":["should"]},{"Key":"1\"... should","Fragments":["I"]},{"Key":"I be","Fragments":["trying","trying"]},{"Key":"be trying","Fragments":["to","to","to"]},{"Key":"to minify","Fragments":["the","my"]},{"Key":"minify the","Fragments":["other"]},{"Key":"other anonymous","Fragments":["function?","function"]},{"Key":"Or break","Fragments":["it"]},{"Key":"break it","Fragments":["out","out","off"]},{"Key":"So following","Fragments":["some"]},{"Key":"following some","Fragments":["helpful"]},{"Key":"some helpful","Fragments":["nitpicks"]},{"Key":"helpful nitpicks","Fragments":["I"]},{"Key":"nitpicks I","Fragments":["was"]},{"Key":"replace \"fn","Fragments":["(val)"]},{"Key":"end\" with","Fragments":["\"\u0026amp;1"]},{"Key":"with \"\u0026amp;1","Fragments":["+"]},{"Key":"+ 1\"","Fragments":["which"]},{"Key":"1\" which","Fragments":["is"]},{"Key":"certainly more","Fragments":["compact!","expressive"]},{"Key":"more compact!","Fragments":["My"]},{"Key":"compact! My","Fragments":["next"]},{"Key":"My next","Fragments":["question","iteration","iteration"]},{"Key":"next question","Fragments":["I"]},{"Key":"guess is","Fragments":["should","that"]},{"Key":"is should","Fragments":["I"]},{"Key":"minify my","Fragments":["other"]},{"Key":"my other","Fragments":["anonymous"]},{"Key":"function too?","Fragments":["Or"]},{"Key":"too? Or","Fragments":["breaking"]},{"Key":"Or breaking","Fragments":["it"]},{"Key":"separate helper","Fragments":["function"]},{"Key":"not convinced.","Fragments":["By"]},{"Key":"convinced. By","Fragments":["using"]},{"Key":"By using","Fragments":["`scan`"]},{"Key":"using `scan`","Fragments":["with"]},{"Key":"`scan` with","Fragments":["`\\w+`,"]},{"Key":"with `\\w+`,","Fragments":["it"]},{"Key":"`\\w+`, it","Fragments":["will"]},{"Key":"will return","Fragments":["a","true","true","bad"]},{"Key":"of list,","Fragments":["so"]},{"Key":"list, so","Fragments":["I","all","`Enum.join([:a,"]},{"Key":"will need","Fragments":["to"]},{"Key":"use `List.flatten`","Fragments":["afterwars."]},{"Key":"`List.flatten` afterwars.","Fragments":[":/"]},{"Key":" [[\"car\"],","Fragments":["[\"carpet\"],"]},{"Key":"[[\"car\"], [\"carpet\"],","Fragments":["[\"as\"],"]},{"Key":"[\"carpet\"], [\"as\"],","Fragments":["[\"java\"],"]},{"Key":"[\"as\"], [\"java\"],","Fragments":["[\"javascript\"]]"]},{"Key":"need of","Fragments":["`List.flatten`,","the"]},{"Key":"of `List.flatten`,","Fragments":["I"]},{"Key":"`List.flatten`, I","Fragments":["would"]},{"Key":"would totally","Fragments":["go"]},{"Key":"totally go","Fragments":["for"]},{"Key":"the \u0026amp;(\u0026amp;1","Fragments":["+"]},{"Key":"\u0026amp;(\u0026amp;1 +","Fragments":["1)","1))"]},{"Key":"+ 1)","Fragments":["has","but"]},{"Key":"1) has","Fragments":["a"]},{"Key":"a superfluous","Fragments":["wrapper...\u0026amp;1"]},{"Key":"superfluous wrapper...\u0026amp;1","Fragments":["+"]},{"Key":"wrapper...\u0026amp;1 +","Fragments":["1"]},{"Key":"1 should","Fragments":["be"]},{"Key":"be sufficient.","Fragments":["Is"]},{"Key":"sufficient. Is","Fragments":["there"]},{"Key":"there something","Fragments":["you"]},{"Key":"something you","Fragments":["prefer","have","should","could"]},{"Key":"prefer about","Fragments":["the"]},{"Key":"the implemented","Fragments":["style?"]},{"Key":"cases have","Fragments":["been"]},{"Key":"been updated","Fragments":["since"]},{"Key":"updated since","Fragments":["I"]},{"Key":"did this","Fragments":["exercise,","in","in","one,","exercise.","exercise","for","exercise","exercise,","a"]},{"Key":"exercise, but","Fragments":["does","I","I'm","feel","if","this","there's","good"]},{"Key":"but does","Fragments":["this","your"]},{"Key":"code pass","Fragments":["all"]},{"Key":"of them?","Fragments":["Was"]},{"Key":"them? Was","Fragments":["there"]},{"Key":"Was there","Fragments":["a","a"]},{"Key":"test that","Fragments":["passed","has","asserted","defines","was","you","checks","downcases","tests"]},{"Key":"that passed","Fragments":["\""]},{"Key":"passed \"","Fragments":["\""]},{"Key":"\" \"","Fragments":["to","or","or"]},{"Key":"\" to","Fragments":["Teenager.hey()?"]},{"Key":"better parameter","Fragments":["name"]},{"Key":"parameter name","Fragments":["than"]},{"Key":"than \"n\"","Fragments":["to"]},{"Key":"\"n\" to","Fragments":["the"]},{"Key":"more modular?","Fragments":["Do"]},{"Key":"modular? Do","Fragments":["you"]},{"Key":"could help","Fragments":["make","out"]},{"Key":"function \"tell","Fragments":["its"]},{"Key":"\"tell its","Fragments":["story\""]},{"Key":"its story\"","Fragments":["a"]},{"Key":"story\" a","Fragments":["little"]},{"Key":" Renamed","Fragments":["blank?"]},{"Key":"Renamed blank?","Fragments":["to"]},{"Key":"blank? to","Fragments":["silence?"]},{"Key":"to silence?","Fragments":["for"]},{"Key":"silence? for","Fragments":["a"]},{"Key":"better domain","Fragments":["language"]},{"Key":"Ah, hadn't","Fragments":["know"]},{"Key":"hadn't know","Fragments":["you"]},{"Key":"keep that","Fragments":["in","in","method"]},{"Key":"so sure","Fragments":["about","how","\"bare"]},{"Key":"count of","Fragments":["matching","every"]},{"Key":"of matching","Fragments":["nucleotides.","words"]},{"Key":"matching nucleotides.","Fragments":["Why"]},{"Key":"nucleotides. Why","Fragments":["not"]},{"Key":"You shouldn't","Fragments":["need"]},{"Key":"shouldn't need","Fragments":["the"]},{"Key":"the parens","Fragments":["around","around","in","on","for"]},{"Key":"around `String.downcase`,","Fragments":["since"]},{"Key":"`String.downcase`, since","Fragments":["you're"]},{"Key":"since you're","Fragments":["not","specifying"]},{"Key":"not capturing","Fragments":["an"]},{"Key":"capturing an","Fragments":["operator"]},{"Key":"an operator","Fragments":["call,","(i.e.","as"]},{"Key":"operator call,","Fragments":["but"]},{"Key":"call, but","Fragments":["that","now"]},{"Key":"an area","Fragments":["of","I","I"]},{"Key":"area of","Fragments":["syntax","text."]},{"Key":"of syntax","Fragments":["that"]},{"Key":"syntax that","Fragments":["might"]},{"Key":"might still","Fragments":["be"]},{"Key":"still be","Fragments":["in","useful.","more"]},{"Key":"This works","Fragments":["around","but"]},{"Key":"works around","Fragments":["`zip`'s"]},{"Key":"around `zip`'s","Fragments":["boneheaded"]},{"Key":"`zip`'s boneheaded","Fragments":["behavior"]},{"Key":"boneheaded behavior","Fragments":["by"]},{"Key":"behavior by","Fragments":["rejecting"]},{"Key":"by rejecting","Fragments":["the"]},{"Key":"rejecting the","Fragments":["excess"]},{"Key":"the excess","Fragments":["elements"]},{"Key":"excess elements","Fragments":["`zip`"]},{"Key":"elements `zip`","Fragments":["includes"]},{"Key":"`zip` includes","Fragments":["when"]},{"Key":"includes when","Fragments":["the"]},{"Key":"first strand","Fragments":["is","before"]},{"Key":"strand is","Fragments":["longer","shorter"]},{"Key":"is longer","Fragments":["than"]},{"Key":"longer than","Fragments":["the","one","80","expected","the","I","second","the"]},{"Key":"second (but","Fragments":["not"]},{"Key":"(but not","Fragments":["vice-versa).","my"]},{"Key":"feedback. I've","Fragments":["pushed","submitted","submitted"]},{"Key":"I've pushed","Fragments":["an","a"]},{"Key":"an updated","Fragments":["version.","version","version."]},{"Key":" @alessandra-w","Fragments":["How"]},{"Key":"@alessandra-w How","Fragments":["about"]},{"Key":"about now?","Fragments":["Thanks,"]},{"Key":"now? Thanks,","Fragments":["again,"]},{"Key":"Thanks, again,","Fragments":["learning"]},{"Key":"again, learning","Fragments":["a"]},{"Key":"learning a","Fragments":["lot","lot,"]},{"Key":"Elixir with","Fragments":["your"]},{"Key":" All","Fragments":["right!","the","test","tests"]},{"Key":"Ah, thanks!","Fragments":["I"]},{"Key":"thanks! I","Fragments":["didn't","spent"]},{"Key":"realize older","Fragments":["exercises"]},{"Key":"older exercises","Fragments":["were"]},{"Key":"exercises were","Fragments":["still","put"]},{"Key":"were still","Fragments":["open"]},{"Key":"still open","Fragments":["for"]},{"Key":"open for","Fragments":["submissions."]},{"Key":"can still","Fragments":["submit"]},{"Key":"still submit","Fragments":["new"]},{"Key":"submit new","Fragments":["revisions"]},{"Key":"new revisions","Fragments":["of"]},{"Key":"revisions of","Fragments":["exercises"]},{"Key":"of exercises","Fragments":["you've","doesn't","to","here:"]},{"Key":"exercises you've","Fragments":["completed.","completed"]},{"Key":"Just noticed","Fragments":["`occurrences`","you've","your"]},{"Key":"noticed `occurrences`","Fragments":["is"]},{"Key":"`occurrences` is","Fragments":["typo'd."]},{"Key":"is typo'd.","Fragments":["You're"]},{"Key":"typo'd. You're","Fragments":["short"]},{"Key":"You're short","Fragments":["one","one"]},{"Key":"short one","Fragments":["`r`.","`c`."]},{"Key":" Otherwise,","Fragments":["looking","this"]},{"Key":"Otherwise, looking","Fragments":["good."]},{"Key":"I reverted","Fragments":["to"]},{"Key":"reverted to","Fragments":["my"]},{"Key":"my perl","Fragments":["days"]},{"Key":"perl days","Fragments":["and"]},{"Key":"days and","Fragments":["did","then"]},{"Key":"and did","Fragments":["\"I","a","not"]},{"Key":"did \"I","Fragments":["can"]},{"Key":"\"I can","Fragments":["do"]},{"Key":"this x","Fragments":["lines"]},{"Key":"x lines","Fragments":["of"]},{"Key":"of code\".","Fragments":["This"]},{"Key":"code\". This","Fragments":["could"]},{"Key":"made more","Fragments":["readable","readable"]},{"Key":"readable by","Fragments":["breaking","adopting"]},{"Key":"by breaking","Fragments":["some","out"]},{"Key":"breaking some","Fragments":["things"]},{"Key":"some things","Fragments":["out","that","that"]},{"Key":"things out","Fragments":["into"]},{"Key":" Applied","Fragments":["a"]},{"Key":"Applied a","Fragments":["couple"]},{"Key":"couple suggestions","Fragments":["by"]},{"Key":"suggestions by","Fragments":["@rhett-w,","@annie."]},{"Key":"by @rhett-w,","Fragments":["thanks!"]},{"Key":" Oops.","Fragments":["Just"]},{"Key":"Oops. Just","Fragments":["realized"]},{"Key":"Just realized","Fragments":["this"]},{"Key":"realized this","Fragments":["can"]},{"Key":"can return","Fragments":["false","an"]},{"Key":"return false","Fragments":["positives","felt"]},{"Key":"false positives","Fragments":["if"]},{"Key":"positives if","Fragments":["there"]},{"Key":"are multiples","Fragments":["of"]},{"Key":"multiples of","Fragments":["any","15","that"]},{"Key":" `@hayley`","Fragments":["Much"]},{"Key":"`@hayley` Much","Fragments":["better."]},{"Key":"Much better.","Fragments":["Thanks!","Most"]},{"Key":"On `question?`,","Fragments":["you"]},{"Key":"`question?`, you","Fragments":["could"]},{"Key":"I agree;","Fragments":["I"]},{"Key":"agree; I","Fragments":["actually"]},{"Key":"actually considered","Fragments":["changing"]},{"Key":"considered changing","Fragments":["it"]},{"Key":"changing it","Fragments":["after","to"]},{"Key":"it after","Fragments":["submitting,"]},{"Key":"after submitting,","Fragments":["and"]},{"Key":"submitting, and","Fragments":["I"]},{"Key":"out \u003ccode\u003eList.foldl/3\u003c/code\u003e","Fragments":["and","and"]},{"Key":"using List.foldl/3","Fragments":["and"]},{"Key":"List.foldl/3 and","Fragments":["HashDict.update/4?"]},{"Key":"help a","Fragments":["future","developer"]},{"Key":"a future","Fragments":["reader"]},{"Key":"future reader","Fragments":["to"]},{"Key":"the `?T`","Fragments":["and"]},{"Key":"`?T` and","Fragments":["`?U`","`?U`","replace"]},{"Key":"and `?U`","Fragments":["characters","instead"]},{"Key":"`?U` characters","Fragments":["descriptive"]},{"Key":"characters descriptive","Fragments":["names."]},{"Key":"- still","Fragments":["not"]},{"Key":"still not","Fragments":["quite","sure","getting","sure","O(n)","satisfied."]},{"Key":"simplify by","Fragments":["having","using","using"]},{"Key":"having `nucleotide_counts`","Fragments":["re-use","lean","only"]},{"Key":"`nucleotide_counts` re-use","Fragments":["`count`?"]},{"Key":"`nucleotide_counts` lean","Fragments":["on"]},{"Key":"lean on","Fragments":["`count`?"]},{"Key":"would give","Fragments":["the"]},{"Key":"the magic","Fragments":["characters","that","number","number","numbers."]},{"Key":"magic characters","Fragments":["names"]},{"Key":"characters names","Fragments":["so"]},{"Key":"names so","Fragments":["that"]},{"Key":"it's clearer","Fragments":["what"]},{"Key":" IMO,","Fragments":["this"]},{"Key":"IMO, this","Fragments":["is"]},{"Key":"of module","Fragments":["attributes!"]},{"Key":"the ```\u0026amp;```","Fragments":["notation."]},{"Key":"```\u0026amp;``` notation.","Fragments":["Any"]},{"Key":"notation. Any","Fragments":["clues"]},{"Key":"Any clues","Fragments":["or"]},{"Key":"clues or","Fragments":["pointers?"]},{"Key":"really wish","Fragments":["I"]},{"Key":"wish I","Fragments":["could","could","knew"]},{"Key":"could figure","Fragments":["out","out"]},{"Key":"to compose","Fragments":["split","said"]},{"Key":"compose split","Fragments":["and"]},{"Key":"split and","Fragments":["filter","strip"]},{"Key":"and filter","Fragments":["instead","are"]},{"Key":"filter instead","Fragments":["of"]},{"Key":"of explicitly","Fragments":["applying","listing"]},{"Key":"explicitly applying","Fragments":["them."]},{"Key":"applying them.","Fragments":["Can"]},{"Key":"Can anyone","Fragments":["show"]},{"Key":"anyone show","Fragments":["me"]},{"Key":"show me","Fragments":["how?"]},{"Key":" @henry","Fragments":["-","-"]},{"Key":"@henry -","Fragments":["Thank","Looked"]},{"Key":"- Thank","Fragments":["you."]},{"Key":"you. ends_with?","Fragments":["will"]},{"Key":"ends_with? will","Fragments":["be"]},{"Key":"friend for","Fragments":["life","conditionally"]},{"Key":"- Looked","Fragments":["through"]},{"Key":"Looked through","Fragments":["the"]},{"Key":"language documentation","Fragments":["and"]},{"Key":"documentation and","Fragments":["agree.","re-organized","use"]},{"Key":" Iteration","Fragments":["#2"]},{"Key":"Iteration #2","Fragments":["submitted."]},{"Key":"seems the","Fragments":["`forceful`check"]},{"Key":"the `forceful`check","Fragments":["is"]},{"Key":"`forceful`check is","Fragments":["not"]},{"Key":"not necessary","Fragments":["according","..."]},{"Key":"necessary according","Fragments":["to"]},{"Key":" Appreciated,","Fragments":["@bryana."]},{"Key":"Appreciated, @bryana.","Fragments":["I"]},{"Key":"@bryana. I","Fragments":["took"]},{"Key":"a stab","Fragments":["at"]},{"Key":"at it,","Fragments":["and","had"]},{"Key":"it, and","Fragments":["I","the","I","finally","'exercism","it","if","discard","it's","compare"]},{"Key":"it came","Fragments":["out","to"]},{"Key":"came out","Fragments":["more"]},{"Key":"out more","Fragments":["readable."]},{"Key":"/me slaps","Fragments":["himself"]},{"Key":"Yup, I","Fragments":["missed","noticed"]},{"Key":"missed that","Fragments":["one.","single","one","one.","one","one."]},{"Key":"that one.","Fragments":[";)","The"]},{"Key":"Ah, indeed,","Fragments":["let"]},{"Key":"indeed, let","Fragments":["me"]},{"Key":"me optimize","Fragments":["this"]},{"Key":"optimize this","Fragments":["thing"]},{"Key":"class that","Fragments":["matches"]},{"Key":"matches all","Fragments":["(or"]},{"Key":"all (or","Fragments":["most)"]},{"Key":"(or most)","Fragments":["punctuation,"]},{"Key":"most) punctuation,","Fragments":["but"]},{"Key":"punctuation, but","Fragments":["no"]},{"Key":"no numbers,","Fragments":["spaces"]},{"Key":"numbers, spaces","Fragments":["or"]},{"Key":"spaces or","Fragments":["letters?"]},{"Key":" Hrmm.","Fragments":["Seems"]},{"Key":"Hrmm. Seems","Fragments":["to"]},{"Key":"Seems to","Fragments":["be","work","me"]},{"Key":"be stripping","Fragments":["out"]},{"Key":"stripping out","Fragments":["the","punctuation.","accented"]},{"Key":"the less-than","Fragments":["greater-than"]},{"Key":"less-than greater-than","Fragments":["operator"]},{"Key":"greater-than operator","Fragments":["thing"]},{"Key":"operator thing","Fragments":["to"]},{"Key":"split up","Fragments":["the"]},{"Key":"Why count","Fragments":["ALL"]},{"Key":"count ALL","Fragments":["nucleotides"]},{"Key":"ALL nucleotides","Fragments":["in"]},{"Key":"nucleotides in","Fragments":["`count`","`nucleotide_counts`?"]},{"Key":"`count` when","Fragments":["only"]},{"Key":"when only","Fragments":["one"]},{"Key":"It's to","Fragments":["keep","have"]},{"Key":"keep proper","Fragments":["semantics,"]},{"Key":"proper semantics,","Fragments":["in"]},{"Key":"semantics, in","Fragments":["the"]},{"Key":"perspective I'd","Fragments":["have"]},{"Key":"I'd have","Fragments":["other"]},{"Key":"have other","Fragments":["frequencies","things"]},{"Key":"other frequencies","Fragments":["to"]},{"Key":"frequencies to","Fragments":["compute"]},{"Key":"to compute","Fragments":["later."]},{"Key":"That's probably","Fragments":["YAGNI,","a","less"]},{"Key":"probably YAGNI,","Fragments":["I'll"]},{"Key":"YAGNI, I'll","Fragments":["refactor"]},{"Key":"nice. The","Fragments":["named","only"]},{"Key":"The named","Fragments":["methods"]},{"Key":"methods make","Fragments":["it","it"]},{"Key":"lot clearer.","Fragments":["Just","It's"]},{"Key":"clearer. Just","Fragments":["a"]},{"Key":"I understand,","Fragments":["there"]},{"Key":"understand, there","Fragments":["is"]},{"Key":"a convention","Fragments":["in","in","to","in"]},{"Key":"convention in","Fragments":["Elixir","Elixir,","Ruby.","elixir?"]},{"Key":"Elixir like","Fragments":["there","to"]},{"Key":"in Ruby","Fragments":["to","I","but","or","but","only.","and","or"]},{"Key":"Ruby to","Fragments":["use"]},{"Key":"that end","Fragments":["in","with","in"]},{"Key":"end in","Fragments":["a","a","a"]},{"Key":"mark rather","Fragments":["than"]},{"Key":"than ones","Fragments":["prefixed"]},{"Key":"ones prefixed","Fragments":["with"]},{"Key":"prefixed with","Fragments":["is.","`is_`.","`is_`.","an"]},{"Key":"with is.","Fragments":["So,"]},{"Key":"is. So,","Fragments":["`shouting?`"]},{"Key":"So, `shouting?`","Fragments":["instead"]},{"Key":"of `isShouting`.","Fragments":["Not"]},{"Key":"`isShouting`. Not","Fragments":["a"]},{"Key":"Not a","Fragments":["big","big","fan","big","requirement,","biggie"]},{"Key":"big deal,","Fragments":["but","just","but","though."]},{"Key":"deal, but","Fragments":["I","it"]},{"Key":"think that's","Fragments":["sort","cause","the","really","a","worth"]},{"Key":"that's sort","Fragments":["of","of","of"]},{"Key":"the convention.","Fragments":["Also,"]},{"Key":"convention. Also,","Fragments":["I"]},{"Key":"are going","Fragments":["to","to"]},{"Key":"a multi-word","Fragments":["method"]},{"Key":"multi-word method","Fragments":["name"]},{"Key":"name the","Fragments":["convention","helpers","guards","conditions","helper","`count_words/1`","regex","conditionals."]},{"Key":"use snake_case","Fragments":["instead"]},{"Key":"snake_case instead","Fragments":["of"]},{"Key":"Ah, cool.","Fragments":["Thanks","Thanks","I'll","I","Thanks,"]},{"Key":"for following","Fragments":["up.","up."]},{"Key":"following up.","Fragments":["I'll",":"]},{"Key":"up. I'll","Fragments":["have"]},{"Key":"to update","Fragments":["my","the","the","to","my","it,","my","the","an","the","if","so","so"]},{"Key":"play around","Fragments":["with","with"]},{"Key":"with stuff.","Fragments":["I"]},{"Key":"I kept","Fragments":["banging","getting","getting","running"]},{"Key":"kept banging","Fragments":["my"]},{"Key":"banging my","Fragments":["head"]},{"Key":"head against","Fragments":["that","the","that"]},{"Key":"against that","Fragments":["one","wall"]},{"Key":"that one","Fragments":["because","little","myself.","should","line","method.","in","in"]},{"Key":"one because","Fragments":["the","it","@harvey","it"]},{"Key":"the book","Fragments":["was","that"]},{"Key":"book was","Fragments":["telling"]},{"Key":"was telling","Fragments":["me"]},{"Key":"telling me","Fragments":["I","very"]},{"Key":"me I","Fragments":["could"]},{"Key":"do things","Fragments":["and","like"]},{"Key":"things and","Fragments":["the","that"]},{"Key":"the interpreter","Fragments":["was"]},{"Key":"interpreter was","Fragments":["saying"]},{"Key":"was saying","Fragments":["no."]},{"Key":"I'll also","Fragments":["have","have"]},{"Key":"also have","Fragments":["to","a","two","a"]},{"Key":"do some","Fragments":["more","learning","refactoring","reading"]},{"Key":"more research","Fragments":["into"]},{"Key":"research into","Fragments":["string"]},{"Key":"into string","Fragments":["representations"]},{"Key":"string representations","Fragments":["in"]},{"Key":"representations in","Fragments":["Erlang"]},{"Key":"Erlang and","Fragments":["Elixir.","most","Elixir"]},{"Key":"and Elixir.","Fragments":["From"]},{"Key":"Elixir. From","Fragments":["some"]},{"Key":"From some","Fragments":["episodes"]},{"Key":"some episodes","Fragments":["I've"]},{"Key":"episodes I've","Fragments":["heard"]},{"Key":"I've heard","Fragments":["of","people","a"]},{"Key":"heard of","Fragments":["the"]},{"Key":"the Mostly","Fragments":["Erlang"]},{"Key":"Mostly Erlang","Fragments":["podcast"]},{"Key":"Erlang podcast","Fragments":["I've"]},{"Key":"podcast I've","Fragments":["heard"]},{"Key":"heard people","Fragments":["discuss"]},{"Key":"people discuss","Fragments":["sometimes"]},{"Key":"discuss sometimes","Fragments":["using"]},{"Key":"sometimes using","Fragments":["lists"]},{"Key":"using lists","Fragments":["of"]},{"Key":"lists of","Fragments":["codepoints","integers","characters","characters,","chars,","different","pairs","only","binaries","lists","characters","single","single","letters,","same"]},{"Key":"of codepoints","Fragments":["(I","and"]},{"Key":"codepoints (I","Fragments":["think...)"]},{"Key":"(I think...)","Fragments":["instead"]},{"Key":"think...) instead","Fragments":["of"]},{"Key":"of binarys","Fragments":["as"]},{"Key":"binarys as","Fragments":["strings."]},{"Key":"as strings.","Fragments":["I"]},{"Key":"some cases","Fragments":["they"]},{"Key":"cases they","Fragments":["might"]},{"Key":"be interchangeable,","Fragments":["but"]},{"Key":"interchangeable, but","Fragments":["I'm"]},{"Key":"sure when...","Fragments":["Kinda"]},{"Key":"when... Kinda","Fragments":["crazy."]},{"Key":"Kinda crazy.","Fragments":["Maybe"]},{"Key":"crazy. Maybe","Fragments":["someone"]},{"Key":"Maybe someone","Fragments":["has"]},{"Key":"someone has","Fragments":["written"]},{"Key":"has written","Fragments":["a"]},{"Key":"a blog","Fragments":["post"]},{"Key":"blog post","Fragments":["on","about","of"]},{"Key":"post on","Fragments":["it?"]},{"Key":"just learning","Fragments":["this,","Elixir.","elixir,","elixir.","about","Elixir,"]},{"Key":"learning this,","Fragments":["too."]},{"Key":"this, too.","Fragments":["Elixir"]},{"Key":"too. Elixir","Fragments":["is"]},{"Key":"moving pretty","Fragments":["quickly,"]},{"Key":"pretty quickly,","Fragments":["and"]},{"Key":"quickly, and","Fragments":["version"]},{"Key":"and version","Fragments":["`0.10.1`"]},{"Key":"version `0.10.1`","Fragments":["introduced"]},{"Key":"`0.10.1` introduced","Fragments":["the"]},{"Key":"introduced the","Fragments":["named","private"]},{"Key":"named functions.","Fragments":["Here"]},{"Key":"functions. Here","Fragments":["is"]},{"Key":"Here is","Fragments":["an","what"]},{"Key":"an example","Fragments":["from","of","of","of","where","on","of","would","from","where"]},{"Key":"example from","Fragments":["my","the"]},{"Key":" `Enum.reduce(words,","Fragments":["HashDict.new,"]},{"Key":"`Enum.reduce(words, HashDict.new,","Fragments":["count(\u0026amp;1,"]},{"Key":"HashDict.new, count(\u0026amp;1,","Fragments":["\u0026amp;2))`"]},{"Key":"Where `count`","Fragments":["is"]},{"Key":"`count` is","Fragments":["a","better","what","not"]},{"Key":"a `String`","Fragments":["and"]},{"Key":"`String` and","Fragments":["a","so"]},{"Key":"a `HashDict`","Fragments":["to","to","function","value"]},{"Key":"`HashDict` to","Fragments":["update.","be"]},{"Key":"the `:lists`","Fragments":["stream,"]},{"Key":"`:lists` stream,","Fragments":["that's"]},{"Key":"stream, that's","Fragments":["a"]},{"Key":"good point.","Fragments":["I","I"]},{"Key":"about _why_","Fragments":["does"]},{"Key":"_why_ does","Fragments":["that"]},{"Key":"that work.","Fragments":["`String#downcase`","I"]},{"Key":"work. `String#downcase`","Fragments":["does"]},{"Key":"`String#downcase` does","Fragments":["take"]},{"Key":"does take","Fragments":["a","extra"]},{"Key":"single argument","Fragments":["that"]},{"Key":"argument that","Fragments":["is","you","there"]},{"Key":"a `string`.","Fragments":["The"]},{"Key":"`string`. The","Fragments":["erlang"]},{"Key":"The erlang","Fragments":["documentation"]},{"Key":"erlang documentation","Fragments":["doesn't"]},{"Key":"documentation doesn't","Fragments":["say","include"]},{"Key":"doesn't say","Fragments":["that"]},{"Key":"the `:lists.sort`","Fragments":["function"]},{"Key":"`:lists.sort` function","Fragments":["also"]},{"Key":"function also","Fragments":["iterates."]},{"Key":"also iterates.","Fragments":["You"]},{"Key":"iterates. You","Fragments":["got"]},{"Key":"You got","Fragments":["me","it"]},{"Key":"got me","Fragments":["on","wondering"]},{"Key":"love these","Fragments":["exercises"]},{"Key":"these exercises","Fragments":["and","is"]},{"Key":"exercises and","Fragments":["this"]},{"Key":"this ecosystem","Fragments":["so"]},{"Key":"ecosystem so","Fragments":["much."]},{"Key":"so much.","Fragments":["I've","Felt"]},{"Key":"much. I've","Fragments":["learned"]},{"Key":"lot from","Fragments":["other"]},{"Key":"from other","Fragments":["people's","languages,","languages,"]},{"Key":"people's comments","Fragments":["and"]},{"Key":"Ah, nice!","Fragments":["I"]},{"Key":"just commented","Fragments":["on"]},{"Key":"commented on","Fragments":["your"]},{"Key":"previous version,","Fragments":["and"]},{"Key":"version, and","Fragments":["I","I'll","I'd"]},{"Key":"see you've","Fragments":["cleaned","already","created"]},{"Key":"you've cleaned","Fragments":["up"]},{"Key":"the formatting.","Fragments":["Looks","Using"]},{"Key":"formatting. Looks","Fragments":["*much*"]},{"Key":"Looks *much*","Fragments":["better."]},{"Key":"*much* better.","Fragments":["See"]},{"Key":"better. See","Fragments":["the"]},{"Key":"other comments","Fragments":["that"]},{"Key":"comments that","Fragments":["are"]},{"Key":"are still","Fragments":["applicable.","commented","repeating","bugging"]},{"Key":"still applicable.","Fragments":[":"]},{"Key":"applicable. :","Fragments":[")"]},{"Key":"noticed right","Fragments":["after"]},{"Key":"right after","Fragments":["uploading"]},{"Key":"after uploading","Fragments":["that"]},{"Key":"uploading that","Fragments":["the"]},{"Key":"formatting was","Fragments":["terrible."]},{"Key":"was terrible.","Fragments":["I"]},{"Key":"made the","Fragments":["mistake","right","code","code","explicit","creation","same","test","code","main","mistake","add_to_map"]},{"Key":"the mistake","Fragments":["of","of"]},{"Key":"mistake of","Fragments":["trusting","reading"]},{"Key":"of trusting","Fragments":["emacs"]},{"Key":"trusting emacs","Fragments":["to"]},{"Key":"emacs to","Fragments":["take"]},{"Key":"take care","Fragments":["of"]},{"Key":"care of","Fragments":["indenting","things:","splitting","this"]},{"Key":"of indenting","Fragments":["for"]},{"Key":"indenting for","Fragments":["me."]},{"Key":"me. Thanks","Fragments":["for","so"]},{"Key":"your feedback;","Fragments":["I","I"]},{"Key":"feedback; I","Fragments":["agree","really"]},{"Key":"with both","Fragments":["of","splitting"]},{"Key":"both of","Fragments":["your","them","you!","them,","you.","them","those","those"]},{"Key":"other suggestions","Fragments":["and","and"]},{"Key":"suggestions and","Fragments":["will","I"]},{"Key":"and will","Fragments":["fix","look","soon","split"]},{"Key":"will fix","Fragments":["them"]},{"Key":"fix them","Fragments":["in"]},{"Key":"Nice suggestion","Fragments":["for"]},{"Key":"suggestion for","Fragments":["shortening","that"]},{"Key":"for shortening","Fragments":["the"]},{"Key":"shortening the","Fragments":["sort."]},{"Key":"the sort.","Fragments":["The"]},{"Key":"sort. The","Fragments":["`:lists.sort`"]},{"Key":"The `:lists.sort`","Fragments":["thing"]},{"Key":"`:lists.sort` thing","Fragments":["is"]},{"Key":"calling the","Fragments":["Erlang","variable","provided","three","\"naive"]},{"Key":"Erlang lists","Fragments":["module"]},{"Key":"lists module","Fragments":["function"]},{"Key":"module function","Fragments":["directly,","with"]},{"Key":"function directly,","Fragments":["right?"]},{"Key":"directly, right?","Fragments":["And"]},{"Key":"right? And","Fragments":["it"]},{"Key":"And it","Fragments":["would","doesn't"]},{"Key":"list, right?","Fragments":["So,"]},{"Key":"right? So,","Fragments":["`String.downcase`"]},{"Key":"So, `String.downcase`","Fragments":["can"]},{"Key":"`String.downcase` can","Fragments":["accept"]},{"Key":"can accept","Fragments":["a"]},{"Key":"accept a","Fragments":["list?","single"]},{"Key":"a list?","Fragments":["I'm","Going"]},{"Key":"list? I'm","Fragments":["still"]},{"Key":"still a","Fragments":["little","monster,","little","newbie","newbie","newbie","string,","string,","string"]},{"Key":"little confused","Fragments":["about"]},{"Key":"confused about","Fragments":["strings","the"]},{"Key":"about strings","Fragments":["in","right"]},{"Key":"are implemented","Fragments":["as","and","in"]},{"Key":"implemented as","Fragments":["binary,"]},{"Key":"as binary,","Fragments":["but"]},{"Key":"binary, but","Fragments":["I've"]},{"Key":"also seen","Fragments":["references"]},{"Key":"seen references","Fragments":["to"]},{"Key":"references to","Fragments":["lists.","HashDict"]},{"Key":"to lists.","Fragments":["Are"]},{"Key":"lists. Are","Fragments":["they"]},{"Key":"Are they","Fragments":["sort"]},{"Key":"they sort","Fragments":["of"]},{"Key":"of interchangeable?","Fragments":["Sorry"]},{"Key":"interchangeable? Sorry","Fragments":["for"]},{"Key":"for so","Fragments":["many","many"]},{"Key":"many questions...","Fragments":["I'm"]},{"Key":"questions... I'm","Fragments":["just"]},{"Key":"As far","Fragments":["as","as","as","as","as","as","as","as","as","as","as","as","as","as"]},{"Key":"filter on","Fragments":["line","line","the"]},{"Key":"line 4,","Fragments":["could","how"]},{"Key":"4, could","Fragments":["you"]},{"Key":"example of","Fragments":["how","using","a","this","FP-style"]},{"Key":"do that?","Fragments":["I"]},{"Key":"that? I","Fragments":["was"]},{"Key":"was reading","Fragments":["through"]},{"Key":"reading through","Fragments":["Programming","the","this:"]},{"Key":"through Programming","Fragments":["Elixir"]},{"Key":"thought you","Fragments":["could","advocated","could"]},{"Key":" `Enum.filter(candidates,","Fragments":["\u0026amp;anagrams?(word,"]},{"Key":"`Enum.filter(candidates, \u0026amp;anagrams?(word,","Fragments":["\u0026amp;1))`"]},{"Key":"was giving","Fragments":["me"]},{"Key":"giving me","Fragments":["a"]},{"Key":"syntax error.","Fragments":["I","And","how"]},{"Key":"error. I","Fragments":["think"]},{"Key":"\u0026amp; as","Fragments":["well."]},{"Key":"as well.","Fragments":["It","I","I","Thanks",";P","I","Thanks!","One","That's",":)","For",":)","Also"]},{"Key":"well. It","Fragments":["seemed"]},{"Key":"It seemed","Fragments":["like"]},{"Key":"tried several","Fragments":["things"]},{"Key":"several things","Fragments":["that"]},{"Key":"saw examples","Fragments":["of"]},{"Key":"of in","Fragments":["the"]},{"Key":"book that","Fragments":["just"]},{"Key":"didn't work.","Fragments":["It"]},{"Key":"work. It","Fragments":["made"]},{"Key":"It made","Fragments":["me"]},{"Key":"made me","Fragments":["wonder","think","dig","really","go","lazy"]},{"Key":"me wonder","Fragments":["if"]},{"Key":"have and","Fragments":["old"]},{"Key":"and old","Fragments":["version"]},{"Key":"old version","Fragments":["of","of","of"]},{"Key":"Elixir or","Fragments":["something."]},{"Key":"help would","Fragments":["be","be"]},{"Key":"be much","Fragments":["appreciated!","more","neater.","nicer","slower","appreciated.","easier.","appreciated.","faster!"]},{"Key":"much appreciated!","Fragments":["Thanks!"]},{"Key":"appreciated! Thanks!","Fragments":[":"]},{"Key":"Thanks! :","Fragments":[")"]},{"Key":"that you've","Fragments":["iterated","looked","made"]},{"Key":"you've iterated","Fragments":["nicely."]},{"Key":"iterated nicely.","Fragments":["The"]},{"Key":"nicely. The","Fragments":["only"]},{"Key":"other thing","Fragments":["I","is","to","I","I","I","about"]},{"Key":"add is","Fragments":["that"]},{"Key":"the `sort_word`","Fragments":["function"]},{"Key":"`sort_word` function","Fragments":["could"]},{"Key":"be shortened","Fragments":["a"]},{"Key":"shortened a","Fragments":["little"]},{"Key":"little with","Fragments":["`:lists.sort","this"]},{"Key":"with `:lists.sort","Fragments":["String.codepoints"]},{"Key":"`:lists.sort String.codepoints","Fragments":["word","word"]},{"Key":"String.codepoints word","Fragments":["|\u0026gt;","|\u0026gt;"]},{"Key":" Couple","Fragments":["of"]},{"Key":"the sort","Fragments":["letters","for","by","and"]},{"Key":"sort letters","Fragments":["with"]},{"Key":"letters with","Fragments":["something","numbers"]},{"Key":"this `:lists.sort","Fragments":["String.codepoints"]},{"Key":"couple improvements","Fragments":["suggested"]},{"Key":"improvements suggested","Fragments":["by"]},{"Key":"suggested by","Fragments":["@don.","@adolph","@savannah."]},{"Key":"by @don.","Fragments":["I'm"]},{"Key":"@don. I'm","Fragments":["still"]},{"Key":"so thanks","Fragments":["for","for","again"]},{"Key":"was really","Fragments":["surprised","interesting"]},{"Key":"really surprised","Fragments":["there"]},{"Key":"surprised there","Fragments":["was"]},{"Key":"was no","Fragments":["`sort_by`","\"otherwise\""]},{"Key":"no `sort_by`","Fragments":["to"]},{"Key":"`sort_by` to","Fragments":["parallel"]},{"Key":"to parallel","Fragments":["`min_by`."]},{"Key":"originally did","Fragments":["`min_by`","an"]},{"Key":"did `min_by`","Fragments":["then"]},{"Key":"`min_by` then","Fragments":["`max_by`,"]},{"Key":"then `max_by`,","Fragments":["but"]},{"Key":"`max_by`, but","Fragments":["that"]},{"Key":"a mistake,","Fragments":["because","maybe"]},{"Key":"mistake, because","Fragments":["it"]},{"Key":"it failed","Fragments":["whenever"]},{"Key":"failed whenever","Fragments":["the"]},{"Key":"two strands","Fragments":["were","of","of"]},{"Key":"strands were","Fragments":["the"]},{"Key":"were the","Fragments":["same","last","same."]},{"Key":"That `zip`","Fragments":["cares"]},{"Key":"`zip` cares","Fragments":["at"]},{"Key":"cares at","Fragments":["all"]},{"Key":"at all","Fragments":["which","of","happy","in","possible!","if","rather","that's","well"]},{"Key":"all which","Fragments":["arg"]},{"Key":"which arg","Fragments":["comes"]},{"Key":"arg comes","Fragments":["first"]},{"Key":"comes first","Fragments":["feels"]},{"Key":"first feels","Fragments":["like"]},{"Key":"feels like","Fragments":["a","I'm","overkill","the","it's","overkill","I'm","it's","a","micro","micro","a","a"]},{"Key":"a hack","Fragments":["to"]},{"Key":"hack to","Fragments":["me."]},{"Key":" Hah,","Fragments":["the"]},{"Key":"Hah, the","Fragments":["funny"]},{"Key":"the funny","Fragments":["thing"]},{"Key":"funny thing","Fragments":["is"]},{"Key":"is I'd","Fragments":["just"]},{"Key":"used that","Fragments":["for","feature?","before","comment"]},{"Key":"for something","Fragments":["else.","like","so","else,","like","like","like"]},{"Key":"something else.","Fragments":["I","What"]},{"Key":"else. I","Fragments":["didn't"]},{"Key":"special kind","Fragments":["of"]},{"Key":"of count,","Fragments":["but","though."]},{"Key":"count, but","Fragments":["that"]},{"Key":"Now, if","Fragments":["I"]},{"Key":"after I've","Fragments":["moved"]},{"Key":" More","Fragments":["idiomatic","idiomatic","importantly"]},{"Key":"More idiomatic","Fragments":["approach","Elixir"]},{"Key":"idiomatic approach","Fragments":["to","this"]},{"Key":"in List","Fragments":["and"]},{"Key":"List and","Fragments":["Phrase."]},{"Key":"and Phrase.","Fragments":["I"]},{"Key":"Phrase. I","Fragments":["find"]},{"Key":"the List","Fragments":["defs","functions"]},{"Key":"List defs","Fragments":["to"]},{"Key":"defs to","Fragments":["be"]},{"Key":"bit long","Fragments":["to"]},{"Key":"read in","Fragments":["one","Elixir.","this"]},{"Key":"one line.","Fragments":["I"]},{"Key":"line. I","Fragments":["might"]},{"Key":"might fix","Fragments":["that."]},{"Key":"Still have","Fragments":["that","no"]},{"Key":"that terrible","Fragments":["HashDict"]},{"Key":"terrible HashDict","Fragments":["creation,"]},{"Key":"HashDict creation,","Fragments":["though."]},{"Key":"creation, though.","Fragments":["Will"]},{"Key":"though. Will","Fragments":["get"]},{"Key":"Will get","Fragments":["to"]},{"Key":"your indentation","Fragments":["formatting"]},{"Key":"indentation formatting","Fragments":["is"]},{"Key":"formatting is","Fragments":["a"]},{"Key":"little messed","Fragments":["up."]},{"Key":"messed up.","Fragments":["I'm"]},{"Key":"up. I'm","Fragments":["not"]},{"Key":"sure (someone","Fragments":["correct"]},{"Key":"(someone correct","Fragments":["me"]},{"Key":"correct me","Fragments":["if"]},{"Key":"me if","Fragments":["I'm","I'm","I","I'm","you","you","this","I'm"]},{"Key":"if I'm","Fragments":["wrong),","wrong).","being","using","reading"]},{"Key":"I'm wrong),","Fragments":["but"]},{"Key":"wrong), but","Fragments":["if"]},{"Key":"it's like","Fragments":["Ruby,","a"]},{"Key":"like Ruby,","Fragments":["the","I"]},{"Key":"Ruby, the","Fragments":["standard"]},{"Key":"standard is","Fragments":["probably"]},{"Key":"probably 2","Fragments":["spaces"]},{"Key":"for indentation.","Fragments":["Regardless,"]},{"Key":"indentation. Regardless,","Fragments":["just"]},{"Key":"Regardless, just","Fragments":["getting"]},{"Key":"just getting","Fragments":["it","silly","too","all"]},{"Key":"getting it","Fragments":["consistent"]},{"Key":"it consistent","Fragments":["would"]},{"Key":"consistent would","Fragments":["be"]},{"Key":"name you","Fragments":["could"]},{"Key":"to `hey`","Fragments":["that"]},{"Key":"`hey` that","Fragments":["would"]},{"Key":"would convey","Fragments":["what"]},{"Key":"convey what","Fragments":["it"]},{"Key":"making some","Fragments":["well-named","functions"]},{"Key":"some well-named","Fragments":["private"]},{"Key":"well-named private","Fragments":["methods","functions"]},{"Key":"encapsulate the","Fragments":["logic","logic"]},{"Key":"each case?","Fragments":["For","That"]},{"Key":"case? For","Fragments":["example,"]},{"Key":"example, what","Fragments":["does"]},{"Key":"all upper","Fragments":["case","case,","case","case"]},{"Key":"upper case","Fragments":["mean","should","followed"]},{"Key":"case mean","Fragments":["to"]},{"Key":"mean to","Fragments":["Bob?","make","the"]},{"Key":"need Enum.reject;","Fragments":["there's"]},{"Key":"Enum.reject; there's","Fragments":["a"]},{"Key":"a 2-argument","Fragments":["version"]},{"Key":"2-argument version","Fragments":["of"]},{"Key":"of count:","Fragments":["http://elixir-lang.org/docs/stable/Enum.html#count/2"]},{"Key":" After","Fragments":["submitting,","looking","giving","a","looking","having"]},{"Key":"After submitting,","Fragments":["I"]},{"Key":"submitting, I","Fragments":["realized"]},{"Key":"realized that","Fragments":["all","by","there","for","with","I","I"]},{"Key":"all but","Fragments":["the","`total`.","the","the","the"]},{"Key":"first test","Fragments":["is","error"]},{"Key":"test is","Fragments":["commented","indeed","still"]},{"Key":"is commented","Fragments":["out"]},{"Key":"out in","Fragments":["bob_test.exs.","the","this","full,","year"]},{"Key":"in bob_test.exs.","Fragments":["Note"]},{"Key":"bob_test.exs. Note","Fragments":["to"]},{"Key":"Note to","Fragments":["self:"]},{"Key":"to self:","Fragments":["read"]},{"Key":"self: read","Fragments":["more"]},{"Key":" Init","Fragments":["HasDict"]},{"Key":"Init HasDict","Fragments":["like"]},{"Key":"HasDict like","Fragments":["this:"]},{"Key":"And use","Fragments":["pattern"]},{"Key":" #when","Fragments":["empty"]},{"Key":"#when empty","Fragments":["accumulator"]},{"Key":"empty accumulator","Fragments":["List"]},{"Key":"accumulator List","Fragments":["Words"]},{"Key":"defp update(\"\",","Fragments":["dict)"]},{"Key":"update(\"\", dict)","Fragments":["do"]},{"Key":"defp update(word,","Fragments":["dict)","dict)"]},{"Key":"update(word, dict)","Fragments":["do","do"]},{"Key":" #code","Fragments":["for"]},{"Key":"#code for","Fragments":["HashDict.update/4"]},{"Key":"The next","Fragments":["release"]},{"Key":"next release","Fragments":["of"]},{"Key":"release of","Fragments":["exercism.io"]},{"Key":"exercism.io will","Fragments":["include"]},{"Key":"will include","Fragments":["that"]},{"Key":"include that","Fragments":["test,"]},{"Key":"that test,","Fragments":["at","I'm","you","then"]},{"Key":"test, at","Fragments":["least"]},{"Key":"least for","Fragments":["Elixir.","me."]},{"Key":"for Elixir.","Fragments":["I"]},{"Key":"PR merged","Fragments":["to","that"]},{"Key":"merged to","Fragments":["master","one"]},{"Key":"to master","Fragments":["that"]},{"Key":"master that","Fragments":["added"]},{"Key":"that added","Fragments":["it."]},{"Key":"added it.","Fragments":["Consider"]},{"Key":"it. Consider","Fragments":["it"]},{"Key":"Consider it","Fragments":["an"]},{"Key":"it an","Fragments":["early"]},{"Key":"an early","Fragments":["warning."]},{"Key":"early warning.","Fragments":[";)"]},{"Key":"am amazed","Fragments":["at"]},{"Key":"amazed at","Fragments":["the"]},{"Key":"difference pulling","Fragments":["`update/2`"]},{"Key":"pulling `update/2`","Fragments":["out"]},{"Key":"`update/2` out","Fragments":["of"]},{"Key":"was initially","Fragments":["confused","looking"]},{"Key":"initially confused","Fragments":["by"]},{"Key":"confused by","Fragments":["which","your"]},{"Key":"by which","Fragments":["`update`"]},{"Key":"which `update`","Fragments":["was"]},{"Key":"`update` was","Fragments":["being"]},{"Key":"was being","Fragments":["mentioned,","vague,"]},{"Key":"being mentioned,","Fragments":["since"]},{"Key":"mentioned, since","Fragments":["I"]},{"Key":"I knew","Fragments":["`HashDict`","the","I","how","just","exactly"]},{"Key":"knew `HashDict`","Fragments":["had"]},{"Key":"`HashDict` had","Fragments":["an"]},{"Key":"had an","Fragments":["`update`","old","old"]},{"Key":"an `update`","Fragments":["as"]},{"Key":"`update` as","Fragments":["well."]},{"Key":"I bet","Fragments":["you","``cond"]},{"Key":"bet you","Fragments":["could"]},{"Key":"your `update`","Fragments":["function"]},{"Key":"`update` function","Fragments":["than"]},{"Key":"function than","Fragments":["just"]},{"Key":"just `update`","Fragments":["at"]},{"Key":"`update` at","Fragments":["this"]},{"Key":"this point.","Fragments":[":)"]},{"Key":"wonder whether","Fragments":["a","it"]},{"Key":"whether a","Fragments":["list","non-empty","comparison","sentence"]},{"Key":"list comprehension","Fragments":["might","...","so","for","can","(`lc`)","suggestion,","version","desugars","has","would","to","here,","is"]},{"Key":"comprehension might","Fragments":["be"]},{"Key":"go here?","Fragments":["Section"]},{"Key":"here? Section","Fragments":["6.7"]},{"Key":"Section 6.7","Fragments":["at"]},{"Key":"6.7 at","Fragments":["http://elixir-lang.org/getting_started/6.html."]},{"Key":"I'll write","Fragments":["something"]},{"Key":"something full","Fragments":["of"]},{"Key":"full of","Fragments":["pipelining","whitespace,","\"noisy\""]},{"Key":"of pipelining","Fragments":["and"]},{"Key":"pipelining and","Fragments":["then"]},{"Key":"then oddly","Fragments":["*not*"]},{"Key":"oddly *not*","Fragments":["pipeline"]},{"Key":"*not* pipeline","Fragments":["something"]},{"Key":"pipeline something","Fragments":["that"]},{"Key":"that obviously","Fragments":["should"]},{"Key":"obviously should","Fragments":["be"]},{"Key":"two places.","Fragments":["Thanks","Changing"]},{"Key":"places. Thanks","Fragments":["to"]},{"Key":"Thanks to","Fragments":["[jeremy-w](http://exercism.io/jeremy-w)","@lori,","@desiree","some","some"]},{"Key":"to [jeremy-w](http://exercism.io/jeremy-w)","Fragments":["for"]},{"Key":"[jeremy-w](http://exercism.io/jeremy-w) for","Fragments":["the"]},{"Key":"one point","Fragments":[",","but","of"]},{"Key":"point ,","Fragments":["I","the","you","when"]},{"Key":"usually do","Fragments":["\"tdd\""]},{"Key":"do \"tdd\"","Fragments":["and"]},{"Key":"\"tdd\" and","Fragments":["if"]},{"Key":"test doesn´t","Fragments":["have"]},{"Key":"doesn´t have","Fragments":["this"]},{"Key":"have this","Fragments":["scenario"]},{"Key":"this scenario","Fragments":["I"]},{"Key":"scenario I","Fragments":["don't"]},{"Key":"don't do","Fragments":["it."]},{"Key":" Yeah!","Fragments":["Something"]},{"Key":"Yeah! Something","Fragments":["like"]},{"Key":"following (I","Fragments":["wish"]},{"Key":"(I wish","Fragments":["I"]},{"Key":"could go","Fragments":["back","much","either"]},{"Key":"go back","Fragments":["from","through","and","and","and"]},{"Key":"back from","Fragments":["Beer"]},{"Key":"from Beer","Fragments":["Song"]},{"Key":"Beer Song","Fragments":["to"]},{"Key":"Song to","Fragments":["Anagram"]},{"Key":"to Anagram","Fragments":["and"]},{"Key":"Anagram and","Fragments":["resubmit):"]},{"Key":"def sorted_cp_list","Fragments":["word"]},{"Key":"sorted_cp_list word","Fragments":["do"]},{"Key":" String.downcase(word)","Fragments":["|\u0026gt;"]},{"Key":"String.downcase(word) |\u0026gt;","Fragments":["String.codepoints"]},{"Key":"|\u0026gt; String.codepoints","Fragments":["|\u0026gt;"]},{"Key":"String.codepoints |\u0026gt;","Fragments":["Enum.sort"]},{"Key":"def match","Fragments":["word,"]},{"Key":"match word,","Fragments":["list"]},{"Key":"word, list","Fragments":["do"]},{"Key":" Enum.reject(list,","Fragments":["fn(test_same)"]},{"Key":"Enum.reject(list, fn(test_same)","Fragments":["-\u0026gt;"]},{"Key":"fn(test_same) -\u0026gt;","Fragments":["String.downcase(test_same)"]},{"Key":"-\u0026gt; String.downcase(test_same)","Fragments":["=="]},{"Key":"String.downcase(test_same) ==","Fragments":["String.downcase(word)"]},{"Key":"== String.downcase(word)","Fragments":["end)"]},{"Key":"|\u0026gt; Enum.filter(fn(test_match)","Fragments":["-\u0026gt;"]},{"Key":"Enum.filter(fn(test_match) -\u0026gt;","Fragments":["sorted_cp_list(test_match)"]},{"Key":"-\u0026gt; sorted_cp_list(test_match)","Fragments":["=="]},{"Key":"sorted_cp_list(test_match) ==","Fragments":["sorted_cp_list(word)"]},{"Key":"== sorted_cp_list(word)","Fragments":["end)"]},{"Key":"Ah, thanks.","Fragments":["I"]},{"Key":"moved on","Fragments":["prematurely!","from"]},{"Key":"on prematurely!","Fragments":["Not"]},{"Key":"prematurely! Not","Fragments":["sure"]},{"Key":"can submit","Fragments":["a","a"]},{"Key":"version on","Fragments":["here,"]},{"Key":"on here,","Fragments":["but"]},{"Key":"but I'll","Fragments":["fix","respond"]},{"Key":"I'll fix","Fragments":["it","it","the"]},{"Key":"fix it","Fragments":["and","for","got","a"]},{"Key":"and update","Fragments":["it","it"]},{"Key":"my git","Fragments":["repo."]},{"Key":"OK, I","Fragments":["can"]},{"Key":"can sort","Fragments":["of"]},{"Key":"of see","Fragments":["what","those"]},{"Key":"you're saying","Fragments":["about","you","about"]},{"Key":"saying about","Fragments":["the","`shouting?`"]},{"Key":"`List` functions.","Fragments":["But"]},{"Key":"functions. But","Fragments":["there's","your"]},{"Key":"But there's","Fragments":["a"]},{"Key":"of \"syntax","Fragments":["ceremony\""]},{"Key":"\"syntax ceremony\"","Fragments":["right"]},{"Key":"ceremony\" right","Fragments":["now"]},{"Key":"now with","Fragments":["the"]},{"Key":"and their","Fragments":["build","arity","associated"]},{"Key":"their build","Fragments":["up,"]},{"Key":"build up,","Fragments":["end,"]},{"Key":"up, end,","Fragments":["and"]},{"Key":"end, and","Fragments":["indented"]},{"Key":"and indented","Fragments":["body."]},{"Key":"indented body.","Fragments":["Maybe"]},{"Key":"body. Maybe","Fragments":["you"]},{"Key":"could tighten","Fragments":["up"]},{"Key":"tighten up","Fragments":["those"]},{"Key":"up those","Fragments":["definitions"]},{"Key":"those definitions","Fragments":["using"]},{"Key":"definitions using","Fragments":["`\u0026amp;`-style"]},{"Key":"using `\u0026amp;`-style","Fragments":["function"]},{"Key":"`\u0026amp;`-style function","Fragments":["captures?"]},{"Key":"noticed you've","Fragments":["a"]},{"Key":"you've a","Fragments":["typo"]},{"Key":"typo for","Fragments":["`occurrences`."]},{"Key":"for `occurrences`.","Fragments":["You're"]},{"Key":"`occurrences`. You're","Fragments":["short"]},{"Key":"There's a","Fragments":["very","clear","tradeoff","default","`count/2`","lot","patch","`:math.pow()`","trick","tradeoff","neverending","slight","bit","pitfall","somewhat","trick"]},{"Key":"very pronounced","Fragments":["\"valley\""]},{"Key":"pronounced \"valley\"","Fragments":["in"]},{"Key":"\"valley\" in","Fragments":["`count`"]},{"Key":"`count` right","Fragments":["now;"]},{"Key":"right now;","Fragments":["this"]},{"Key":"now; this","Fragments":["nesting"]},{"Key":"this nesting","Fragments":["depth"]},{"Key":"nesting depth","Fragments":["is"]},{"Key":"depth is","Fragments":["a"]},{"Key":"good proxy","Fragments":["for"]},{"Key":"proxy for","Fragments":["how"]},{"Key":"for how","Fragments":["hard","to","you","slow","to"]},{"Key":"how hard","Fragments":["your"]},{"Key":"hard your","Fragments":["code"]},{"Key":"cleaner if","Fragments":["you"]},{"Key":"moved to","Fragments":["a"]},{"Key":"a capture-literal","Fragments":["rather"]},{"Key":"capture-literal rather","Fragments":["than"]},{"Key":"than `fn`","Fragments":["within"]},{"Key":"`fn` within","Fragments":["the"]},{"Key":"within the","Fragments":["`HashDict.update`","method","`cond`.","arguments:"]},{"Key":"the `HashDict.update`","Fragments":["call.","(without"]},{"Key":"some descriptive","Fragments":["overlap"]},{"Key":"descriptive overlap","Fragments":["between"]},{"Key":"overlap between","Fragments":["`count`"]},{"Key":"between `count`","Fragments":["and"]},{"Key":"and `occurrences`.","Fragments":["Perhaps"]},{"Key":"`occurrences`. Perhaps","Fragments":["there's"]},{"Key":"Perhaps there's","Fragments":["a"]},{"Key":"the clear","Fragments":["`phrase`"]},{"Key":"clear `phrase`","Fragments":["-\u0026gt;"]},{"Key":"`phrase` -\u0026gt;","Fragments":["`words`"]},{"Key":"-\u0026gt; `words`","Fragments":["naming"]},{"Key":"`words` naming","Fragments":["there"]},{"Key":"naming there","Fragments":["to"]},{"Key":"there to","Fragments":["describe","see","deal","make","help.","make","be"]},{"Key":"A range","Fragments":["solves","`1..3`"]},{"Key":"range solves","Fragments":["the"]},{"Key":"solves the","Fragments":["recur-forever"]},{"Key":"the recur-forever","Fragments":["problem"]},{"Key":"recur-forever problem","Fragments":["fine."]},{"Key":"explain what","Fragments":["makes","those","they"]},{"Key":"what makes","Fragments":["`modulo`","trees","it"]},{"Key":"makes `modulo`","Fragments":["special."]},{"Key":"`modulo` special.","Fragments":["There's"]},{"Key":"special. There's","Fragments":["a"]},{"Key":"clear sign-flip","Fragments":["(basically),"]},{"Key":"sign-flip (basically),","Fragments":["too,"]},{"Key":"(basically), too,","Fragments":["which"]},{"Key":"too, which","Fragments":["is"]},{"Key":"you gain","Fragments":["anything","anything","some","readability"]},{"Key":"gain anything","Fragments":["splitting","by","by"]},{"Key":"anything splitting","Fragments":["out"]},{"Key":"splitting out","Fragments":["the"]},{"Key":"two lines","Fragments":["separately","in"]},{"Key":"lines separately","Fragments":["when"]},{"Key":"separately when","Fragments":["building"]},{"Key":"when building","Fragments":["a"]},{"Key":"building a","Fragments":["verse.","HashDict","hash"]},{"Key":"a verse.","Fragments":["It's"]},{"Key":"verse. It's","Fragments":["more"]},{"Key":"more work","Fragments":["piecing","for","but","than"]},{"Key":"work piecing","Fragments":["together"]},{"Key":"piecing together","Fragments":["first/second_line"]},{"Key":"together first/second_line","Fragments":["and"]},{"Key":"first/second_line and","Fragments":["verse"]},{"Key":"and verse","Fragments":["than"]},{"Key":"verse than","Fragments":["reading"]},{"Key":"than reading","Fragments":["a"]},{"Key":"reading a","Fragments":["single","bit"]},{"Key":"single function,","Fragments":["I"]},{"Key":"function, I","Fragments":["think.","considered","could","changed","kind"]},{"Key":"think. `first_line`","Fragments":["in"]},{"Key":"`first_line` in","Fragments":["particular"]},{"Key":"in particular","Fragments":["is"]},{"Key":"particular is","Fragments":["very"]},{"Key":" `bottle_phrase`","Fragments":["OTOH"]},{"Key":"`bottle_phrase` OTOH","Fragments":["is"]},{"Key":"OTOH is","Fragments":["totally"]},{"Key":"is totally","Fragments":["worth","unnecessary"]},{"Key":"totally worth","Fragments":["it."]},{"Key":"worth it.","Fragments":["I","The","You"]},{"Key":"cleaner as","Fragments":["multiple"]},{"Key":"as multiple","Fragments":["definitions"]},{"Key":"multiple definitions","Fragments":["rather"]},{"Key":"definitions rather","Fragments":["than"]},{"Key":"than an","Fragments":["explicit"]},{"Key":"an explicit","Fragments":["case?","function","check","test","formula","blacklist."]},{"Key":"pretty neat.","Fragments":["I"]},{"Key":"neat. I","Fragments":["actually"]},{"Key":"whole mess","Fragments":["of","twice"]},{"Key":"mess of","Fragments":["code.","a"]},{"Key":"of code.","Fragments":["It's","Which,","No"]},{"Key":"code. It's","Fragments":["not"]},{"Key":"a terribly","Fragments":["complex","complex","inefficient"]},{"Key":"terribly complex","Fragments":["idea;","implementation."]},{"Key":"complex idea;","Fragments":["why"]},{"Key":"idea; why","Fragments":["have"]},{"Key":"why have","Fragments":["a"]},{"Key":"It's actually","Fragments":["quite"]},{"Key":"actually quite","Fragments":["readable"]},{"Key":"quite readable","Fragments":["as-is."]},{"Key":"readable as-is.","Fragments":["The"]},{"Key":"as-is. The","Fragments":["nesting"]},{"Key":"The nesting","Fragments":["is"]},{"Key":"nesting is","Fragments":["kind"]},{"Key":"a drag,","Fragments":["but"]},{"Key":"drag, but","Fragments":["other"]},{"Key":"but other","Fragments":["than","than"]},{"Key":"that, it's","Fragments":["short"]},{"Key":"it's short","Fragments":["and"]},{"Key":"I'd switch","Fragments":["to"]},{"Key":"to pipelining","Fragments":["rather"]},{"Key":"pipelining rather","Fragments":["than"]},{"Key":"than nesting","Fragments":["filter+reject."]},{"Key":" Coding","Fragments":["the"]},{"Key":"Coding the","Fragments":["anonymous"]},{"Key":"anonymous function's","Fragments":["name"]},{"Key":"function's name","Fragments":["in"]},{"Key":"name in","Fragments":["the","start_link","the"]},{"Key":"interesting, but","Fragments":["not","it"]},{"Key":"not terribly","Fragments":["necessary."]},{"Key":"terribly necessary.","Fragments":["You"]},{"Key":"necessary. You","Fragments":["could"]},{"Key":"could golf","Fragments":["that"]},{"Key":"golf that","Fragments":["even"]},{"Key":"that even","Fragments":["lower","later","though"]},{"Key":"even lower","Fragments":["with"]},{"Key":"lower with","Fragments":["`(\u0026amp;1"]},{"Key":"with `(\u0026amp;1","Fragments":["=="]},{"Key":"`(\u0026amp;1 ==","Fragments":["word)`"]},{"Key":"== word)`","Fragments":["instead","as"]},{"Key":"word)` instead","Fragments":["of"]},{"Key":"whole `fn","Fragments":["-\u0026gt;"]},{"Key":"`fn -\u0026gt;","Fragments":["end`"]},{"Key":"-\u0026gt; end`","Fragments":["spiel."]},{"Key":"end` spiel.","Fragments":["That"]},{"Key":"spiel. That","Fragments":["said,"]},{"Key":"That said,","Fragments":["you'd","I","do","it's","your"]},{"Key":"said, you'd","Fragments":["need"]},{"Key":"you'd need","Fragments":["to","to","to"]},{"Key":"to downcase","Fragments":["both","them","and","the"]},{"Key":"downcase both","Fragments":["of"]},{"Key":"catch case-insensitive","Fragments":["\"same\""]},{"Key":"case-insensitive \"same\"","Fragments":["words,"]},{"Key":"\"same\" words,","Fragments":["which"]},{"Key":"words, which","Fragments":["the"]},{"Key":"which the","Fragments":["old","guard","second"]},{"Key":"the old","Fragments":["tests","order.","quadratic"]},{"Key":"old tests","Fragments":["didn't","for"]},{"Key":"tests didn't","Fragments":["catch"]},{"Key":"didn't catch","Fragments":["but"]},{"Key":"catch but","Fragments":["the"]},{"Key":"latest tests","Fragments":["should","without","with"]},{"Key":"should (I","Fragments":["had"]},{"Key":"(I had","Fragments":["a","exactly","a"]},{"Key":"merged that","Fragments":["fixes"]},{"Key":"that fixes","Fragments":["that"]},{"Key":"fixes that","Fragments":[":)."]},{"Key":" Pulling","Fragments":["out","out"]},{"Key":"Pulling out","Fragments":["the","the"]},{"Key":"the downcase/codepoints/sort","Fragments":["stuff"]},{"Key":"downcase/codepoints/sort stuff","Fragments":["and"]},{"Key":"stuff and","Fragments":["naming","calling"]},{"Key":"and naming","Fragments":["it","to"]},{"Key":"naming it","Fragments":["something"]},{"Key":"it something","Fragments":["seems","like","like"]},{"Key":"something seems","Fragments":["worthwhile"]},{"Key":"seems worthwhile","Fragments":["just"]},{"Key":"worthwhile just","Fragments":["to"]},{"Key":"the redundancy","Fragments":["of"]},{"Key":"redundancy of","Fragments":["reading/writing"]},{"Key":"of reading/writing","Fragments":["the"]},{"Key":"reading/writing the","Fragments":["whole"]},{"Key":"mess twice","Fragments":["over."]},{"Key":"The reject","Fragments":["+"]},{"Key":"reject +","Fragments":["filter"]},{"Key":"+ filter","Fragments":["thing"]},{"Key":"filter thing","Fragments":["makes"]},{"Key":"thing makes","Fragments":["me"]},{"Key":"makes me","Fragments":["think","happy","irrationally","like","think","feel","happy"]},{"Key":"me think","Fragments":["you","that","I","that"]},{"Key":"probably combine","Fragments":["it"]},{"Key":"combine it","Fragments":["into"]},{"Key":"single pass.","Fragments":["The"]},{"Key":"pass. The","Fragments":["fancy"]},{"Key":"The fancy","Fragments":["way"]},{"Key":"fancy way","Fragments":["to"]},{"Key":"be with","Fragments":["with","`String.replace`"]},{"Key":"with with","Fragments":["`Stream`."]},{"Key":"with `Stream`.","Fragments":["The"]},{"Key":"`Stream`. The","Fragments":["obvious"]},{"Key":"The obvious","Fragments":["way","exception"]},{"Key":"obvious way","Fragments":["would"]},{"Key":"way would","Fragments":["be"]},{"Key":"the reject","Fragments":["test"]},{"Key":"reject test","Fragments":["into"]},{"Key":"test into","Fragments":["the"]},{"Key":"Now you've","Fragments":["got"]},{"Key":"me wondering","Fragments":["again"]},{"Key":"wondering again","Fragments":["if"]},{"Key":"again if","Fragments":["there"]},{"Key":"are any","Fragments":["good","plans","letters","good"]},{"Key":"any good","Fragments":["libraries","guidelines"]},{"Key":"good libraries","Fragments":["for"]},{"Key":"libraries for","Fragments":["doing"]},{"Key":"for doing","Fragments":["point-free","inline","something.","things","so"]},{"Key":"doing point-free","Fragments":["programming"]},{"Key":"point-free programming","Fragments":["with"]},{"Key":"programming with","Fragments":["Elixir."]},{"Key":"Elixir. If","Fragments":["there"]},{"Key":"aren't there","Fragments":["should"]},{"Key":"find value","Fragments":["in"]},{"Key":"List functions","Fragments":["-"]},{"Key":"- they","Fragments":["provide"]},{"Key":"provide clearly","Fragments":["named"]},{"Key":"clearly named","Fragments":["list","methods."]},{"Key":"named list","Fragments":["transformations"]},{"Key":"list transformations","Fragments":["that"]},{"Key":"transformations that","Fragments":["I"]},{"Key":"find easier","Fragments":["to"]},{"Key":"The pipe-rocket","Fragments":["syntax"]},{"Key":"pipe-rocket syntax","Fragments":["is"]},{"Key":"good feature","Fragments":["that"]},{"Key":"feature that","Fragments":["I"]},{"Key":"know about,","Fragments":["I'll"]},{"Key":"about, I'll","Fragments":["wrap"]},{"Key":"I'll wrap","Fragments":["that"]},{"Key":"wrap that","Fragments":["into"]},{"Key":"that into","Fragments":["the","account.","a"]},{"Key":"iteration. Along","Fragments":["with"]},{"Key":"Along with","Fragments":["an"]},{"Key":"an improved","Fragments":["building"]},{"Key":"improved building","Fragments":["of"]},{"Key":"building of","Fragments":["the"]},{"Key":"feedback! Good","Fragments":["call"]},{"Key":"call using","Fragments":["reject"]},{"Key":"using reject","Fragments":["over"]},{"Key":"reject over","Fragments":["filter."]},{"Key":"over filter.","Fragments":["I'll"]},{"Key":"filter. I'll","Fragments":["go"]},{"Key":"you recommend","Fragments":["to","for","there?"]},{"Key":"recommend to","Fragments":["prevent"]},{"Key":"the infinite","Fragments":["loop"]},{"Key":"infinite loop","Fragments":["on"]},{"Key":"on \u003ccode\u003esing(2,","Fragments":["3)\u003c/code\u003e?"]},{"Key":"\u003ccode\u003esing(2, 3)\u003c/code\u003e?","Fragments":["A"]},{"Key":"3)\u003c/code\u003e? A","Fragments":["\u003ccode\u003ewhen\u003c/code\u003e"]},{"Key":"A \u003ccode\u003ewhen\u003c/code\u003e","Fragments":["guard?"]},{"Key":"Other points","Fragments":["are"]},{"Key":"points are","Fragments":["all","definitely"]},{"Key":"all excellent,","Fragments":["thanks."]},{"Key":"excellent, thanks.","Fragments":["WIll"]},{"Key":"thanks. WIll","Fragments":["update"]},{"Key":"WIll update","Fragments":["later"]},{"Key":"update later","Fragments":["tonight."]},{"Key":" `not_same_word?`","Fragments":["fails"]},{"Key":"`not_same_word?` fails","Fragments":["to"]},{"Key":"fails to","Fragments":["case-insensitively","follow","take"]},{"Key":"to case-insensitively","Fragments":["check"]},{"Key":"case-insensitively check","Fragments":["for"]},{"Key":"for sameness.","Fragments":["The"]},{"Key":"sameness. The","Fragments":["current"]},{"Key":"The current","Fragments":["tests","`anagram?`","test","ones"]},{"Key":"current tests","Fragments":["don't"]},{"Key":"tests don't","Fragments":["enforce","enforce","really"]},{"Key":"don't enforce","Fragments":["this,","adding"]},{"Key":"enforce this,","Fragments":["but"]},{"Key":"in keeping","Fragments":["with"]},{"Key":"keeping with","Fragments":["the"]},{"Key":"the case-insensitive","Fragments":["anagram"]},{"Key":"case-insensitive anagram","Fragments":["tests."]},{"Key":"Without seeing","Fragments":["the"]},{"Key":"seeing the","Fragments":["implementations,","first"]},{"Key":"the implementations,","Fragments":["I'd"]},{"Key":"implementations, I'd","Fragments":["be"]},{"Key":"be confused","Fragments":["about"]},{"Key":"between `matches_anagram?/2`","Fragments":["and"]},{"Key":"`matches_anagram?/2` and","Fragments":["`is_anagram?/2`."]},{"Key":"and `is_anagram?/2`.","Fragments":["Perhaps"]},{"Key":"`is_anagram?/2`. Perhaps","Fragments":["you"]},{"Key":"or eliminate","Fragments":["one"]},{"Key":"eliminate one","Fragments":["of"]},{"Key":"Overall, very","Fragments":["clean."]},{"Key":"this might","Fragments":["run","not"]},{"Key":"might run","Fragments":["forever","into"]},{"Key":"run forever","Fragments":["given"]},{"Key":"forever given","Fragments":["`sing(2,"]},{"Key":"given `sing(2,","Fragments":["3)`."]},{"Key":"Having `next_phrase`","Fragments":["way"]},{"Key":"`next_phrase` way","Fragments":["up"]},{"Key":"way up","Fragments":["there"]},{"Key":"up there","Fragments":["before"]},{"Key":"there before","Fragments":["`line`'s"]},{"Key":"before `line`'s","Fragments":["multi-line"]},{"Key":"`line`'s multi-line","Fragments":["definition"]},{"Key":"multi-line definition","Fragments":["is"]},{"Key":"definition is","Fragments":["confusing."]},{"Key":"is confusing.","Fragments":["I'd"]},{"Key":"confusing. I'd","Fragments":["forgotten"]},{"Key":"I'd forgotten","Fragments":["it"]},{"Key":"forgotten it","Fragments":["already."]},{"Key":"it already.","Fragments":["I'd"]},{"Key":"already. I'd","Fragments":["move"]},{"Key":"move it","Fragments":["to","out","to"]},{"Key":"just before","Fragments":["it's","that"]},{"Key":"before it's","Fragments":["needed."]},{"Key":"In `first_line`,","Fragments":["I"]},{"Key":"`first_line`, I","Fragments":["think"]},{"Key":"just substitute","Fragments":["`bottle`"]},{"Key":"substitute `bottle`","Fragments":["into"]},{"Key":"`bottle` into","Fragments":["the"]},{"Key":"string literal","Fragments":["twice,"]},{"Key":"literal twice,","Fragments":["then"]},{"Key":"twice, then","Fragments":["capitalize"]},{"Key":"then capitalize","Fragments":["the"]},{"Key":"capitalize the","Fragments":["entire"]},{"Key":"the entire","Fragments":["string.","string,","structure","list_","word","binary","matched","list","list","word","list","list","list","`increase_count/2`","string,","list","list","list"]},{"Key":"entire string.","Fragments":["You"]},{"Key":"string. You","Fragments":["could","can"]},{"Key":"could even","Fragments":["pipe","squeeze"]},{"Key":"even pipe","Fragments":["it"]},{"Key":"pipe it","Fragments":["into"]},{"Key":"The math","Fragments":["in"]},{"Key":"math in","Fragments":["the"]},{"Key":"to `bottle_phrase`","Fragments":["in"]},{"Key":"`bottle_phrase` in","Fragments":["`second_line`"]},{"Key":"in `second_line`","Fragments":["is"]},{"Key":"`second_line` is","Fragments":["pretty"]},{"Key":"pretty opaque.","Fragments":["I"]},{"Key":"opaque. I","Fragments":["have","settled"]},{"Key":"what it's","Fragments":["doing.","doing","doing.","doing.","doing","used","about!","doing","doing,","doing."]},{"Key":"The `@camila","Fragments":["100`"]},{"Key":"`@camila 100`","Fragments":["thing"]},{"Key":"100` thing","Fragments":["is"]},{"Key":"is nifty.","Fragments":["I'll"]},{"Key":"nifty. I'll","Fragments":["have"]},{"Key":"look that","Fragments":["up","up"]},{"Key":"that up","Fragments":["in","so","a","via","some."]},{"Key":"up in","Fragments":["the","the","the"]},{"Key":"From the","Fragments":["elixir","README:","client's"]},{"Key":"elixir code","Fragments":["I've","I've","is","I've"]},{"Key":"code I've","Fragments":["seen,","ever","written.","seen","written"]},{"Key":"seen, snakecase","Fragments":["seems"]},{"Key":"snakecase seems","Fragments":["to"]},{"Key":"be preferred","Fragments":["for"]},{"Key":"preferred for","Fragments":["both"]},{"Key":"both function","Fragments":["names"]},{"Key":"The `rearranages_into?/2`","Fragments":["function"]},{"Key":"`rearranages_into?/2` function","Fragments":["is"]},{"Key":"pretty sweet.","Fragments":["Sorting"]},{"Key":"sweet. Sorting","Fragments":["and"]},{"Key":"Sorting and","Fragments":["comparing"]},{"Key":"and comparing","Fragments":["the","against","against"]},{"Key":"of `_anagramChars(sourceWord)`","Fragments":["might"]},{"Key":"`_anagramChars(sourceWord)` might","Fragments":["be"]},{"Key":"The shorthand","Fragments":["for","comes"]},{"Key":"for `\u0026amp;(anagram?(word,","Fragments":["\u0026amp;1))`"]},{"Key":"`\u0026amp;(anagram?(word, \u0026amp;1))`","Fragments":["can"]},{"Key":"\u0026amp;1))` can","Fragments":["be"]},{"Key":"simplified further","Fragments":["to"]},{"Key":"further to","Fragments":["`\u0026amp;anagram?(word,"]},{"Key":"to `\u0026amp;anagram?(word,","Fragments":["\u0026amp;1)`."]},{"Key":"the underscore","Fragments":["prefixed","added","naming"]},{"Key":"underscore prefixed","Fragments":["private"]},{"Key":"prefixed private","Fragments":["functions"]},{"Key":"functions before.","Fragments":["Not"]},{"Key":"before. Not","Fragments":["sure"]},{"Key":"community prefers","Fragments":["in"]},{"Key":"prefers in","Fragments":["that"]},{"Key":"Nice docs","Fragments":["and"]},{"Key":"and function","Fragments":["specs","heads.","passed"]},{"Key":"function specs","Fragments":["btw!"]},{"Key":"`Enum.reject` with","Fragments":["a"]},{"Key":"a positive","Fragments":["test"]},{"Key":"positive test","Fragments":["than"]},{"Key":"test than","Fragments":["`Enum.filter`"]},{"Key":"than `Enum.filter`","Fragments":["with","(avoids"]},{"Key":"a negative","Fragments":["test."]},{"Key":"really damn","Fragments":["clean."]},{"Key":"damn clean.","Fragments":["Great"]},{"Key":"clean. Great","Fragments":["use"]},{"Key":"Great use","Fragments":["of","of"]},{"Key":" Top-notch","Fragments":["work!"]},{"Key":"can clean","Fragments":["up","your"]},{"Key":"up nested","Fragments":["functions,"]},{"Key":"nested functions,","Fragments":["like","but"]},{"Key":"of `Phrase.to_word_list/1`,","Fragments":["by"]},{"Key":"`Phrase.to_word_list/1`, by","Fragments":["using"]},{"Key":"really gain","Fragments":["anything"]},{"Key":"anything by","Fragments":["patching","using"]},{"Key":"by patching","Fragments":["very"]},{"Key":"patching very","Fragments":["short"]},{"Key":"very short","Fragments":["functions"]},{"Key":"into `List`","Fragments":["and"]},{"Key":"`List` and","Fragments":["requiring"]},{"Key":"and requiring","Fragments":["the"]},{"Key":"requiring the","Fragments":["reader","reader","user"]},{"Key":"look elsewhere,","Fragments":["versus"]},{"Key":"elsewhere, versus","Fragments":["defining"]},{"Key":"versus defining","Fragments":["them"]},{"Key":"defining them","Fragments":["as"]},{"Key":"functions (or","Fragments":["inlining"]},{"Key":"(or inlining","Fragments":["them)"]},{"Key":"inlining them)","Fragments":["in"]},{"Key":"them) in","Fragments":["your"]},{"Key":"your primary","Fragments":["module?"]},{"Key":"it confusing","Fragments":["to"]},{"Key":"confusing to","Fragments":["have","be"]},{"Key":"a `Phrase`","Fragments":["module"]},{"Key":"`Phrase` module","Fragments":["and"]},{"Key":"a `phrase`","Fragments":["argument"]},{"Key":"`phrase` argument","Fragments":["to"]},{"Key":"to `Words.count/1`","Fragments":["without"]},{"Key":"`Words.count/1` without","Fragments":["having"]},{"Key":"a `Phrase.new`","Fragments":["to"]},{"Key":"`Phrase.new` to","Fragments":["create"]},{"Key":"phrase. The","Fragments":["entire"]},{"Key":"The entire","Fragments":["phrase-to-words"]},{"Key":"entire phrase-to-words","Fragments":["transformation"]},{"Key":"phrase-to-words transformation","Fragments":["is"]},{"Key":"transformation is","Fragments":["really"]},{"Key":"really an","Fragments":["internal","introduction"]},{"Key":"an internal","Fragments":["matter","detail","detail."]},{"Key":"internal matter","Fragments":["of"]},{"Key":"of `Words.count`","Fragments":["that"]},{"Key":"`Words.count` that","Fragments":["doesn't"]},{"Key":"it warrants","Fragments":["an"]},{"Key":"warrants an","Fragments":["entire"]},{"Key":"an entire","Fragments":["module","string"]},{"Key":"entire module","Fragments":["of"]},{"Key":"module of","Fragments":["its"]},{"Key":"of its","Fragments":["own.","decisions,"]},{"Key":"don't even","Fragments":["want"]},{"Key":"even want","Fragments":["to"]},{"Key":"that `HashDict.new/2`","Fragments":["invocation."]},{"Key":"`HashDict.new/2` invocation.","Fragments":["The"]},{"Key":"invocation. The","Fragments":["fun"]},{"Key":"The fun","Fragments":["arg"]},{"Key":"fun arg","Fragments":["needs"]},{"Key":"arg needs","Fragments":["some"]},{"Key":"needs some","Fragments":["breaking","explaining,"]},{"Key":"some breaking","Fragments":["up"]},{"Key":"breaking up","Fragments":["and"]},{"Key":"naming to","Fragments":["be"]},{"Key":"be directly","Fragments":["intelligible.","involved"]},{"Key":"Maybe there's","Fragments":["a","a","a"]},{"Key":"cleaner way","Fragments":["to","to","to"]},{"Key":"build up","Fragments":["an","the"]},{"Key":"up an","Fragments":["appropriate"]},{"Key":"an appropriate","Fragments":["`HashDict`","regex"]},{"Key":"appropriate `HashDict`","Fragments":["than"]},{"Key":"`HashDict` than","Fragments":["doing"]},{"Key":"than doing","Fragments":["it","this","the"]},{"Key":"doing it","Fragments":["all","here.","wrong.","that","but","differently:","in","through","right"]},{"Key":"at once","Fragments":["in","which","with"]},{"Key":"Consider using","Fragments":["`Enum.map`","the","List.foldl","the"]},{"Key":"using `Enum.map`","Fragments":["or"]},{"Key":"`Enum.map` or","Fragments":["`Enum.reduce`","`Enum.filter`","a"]},{"Key":"or `Enum.reduce`","Fragments":["instead"]},{"Key":"`Enum.reduce` instead","Fragments":["of","of"]},{"Key":"of raw","Fragments":["recursion."]},{"Key":"Your argument","Fragments":["name"]},{"Key":"argument name","Fragments":["for"]},{"Key":"for `words/1`","Fragments":["seems"]},{"Key":"`words/1` seems","Fragments":["unfortunate."]},{"Key":"seems unfortunate.","Fragments":["Based"]},{"Key":"unfortunate. Based","Fragments":["on"]},{"Key":"Based on","Fragments":["`words(words)`,","a","this","the"]},{"Key":"on `words(words)`,","Fragments":["I'd"]},{"Key":"`words(words)`, I'd","Fragments":["expect"]},{"Key":"I'd expect","Fragments":["it"]},{"Key":"expect it","Fragments":["to","to"]},{"Key":"the identity","Fragments":["function."]},{"Key":"you declaratively","Fragments":["describe"]},{"Key":"declaratively describe","Fragments":["the"]},{"Key":"the behavior","Fragments":["of","in"]},{"Key":"behavior of","Fragments":["`words`?","`Enum.zip`."]},{"Key":"of `words`?","Fragments":["Is"]},{"Key":"`words`? Is","Fragments":["there"]},{"Key":"a clearer","Fragments":["way"]},{"Key":"clearer way","Fragments":["to"]},{"Key":"implement that","Fragments":["behavior,","it","without"]},{"Key":"that behavior,","Fragments":["based","you"]},{"Key":"behavior, based","Fragments":["on"]},{"Key":"your declarative","Fragments":["description?"]},{"Key":"that having","Fragments":["the"]},{"Key":"the `identical?`","Fragments":["name"]},{"Key":"`identical?` name","Fragments":["is"]},{"Key":"is worth","Fragments":["more","the"]},{"Key":"worth more","Fragments":["than"]},{"Key":"the concision","Fragments":["and"]},{"Key":"concision and","Fragments":["locality"]},{"Key":"and locality","Fragments":["of"]},{"Key":"locality of","Fragments":["`\u0026amp;1"]},{"Key":"of `\u0026amp;1","Fragments":["!="]},{"Key":"`\u0026amp;1 !=","Fragments":["subject`."]},{"Key":"might as","Fragments":["well"]},{"Key":"well pull","Fragments":["up"]},{"Key":"pull up","Fragments":["the"]},{"Key":"length filter","Fragments":["before"]},{"Key":"filter before","Fragments":["the"]},{"Key":"the identicality","Fragments":["rejection."]},{"Key":"identicality rejection.","Fragments":["That"]},{"Key":"rejection. That","Fragments":["way"]},{"Key":"That way","Fragments":["you'll","it'll","if","you","it's","I","you","you","less","if"]},{"Key":"way you'll","Fragments":["only"]},{"Key":"you'll only","Fragments":["consider"]},{"Key":"only consider","Fragments":["words"]},{"Key":"consider words","Fragments":["that"]},{"Key":"that have","Fragments":["any","names","arguments","to","an","changed.","already"]},{"Key":"any chance","Fragments":["at"]},{"Key":"chance at","Fragments":["all"]},{"Key":"Your identical","Fragments":["test"]},{"Key":"identical test","Fragments":["will"]},{"Key":"will fail","Fragments":["to","in","on","faster."]},{"Key":"to exclude","Fragments":["words"]},{"Key":"exclude words","Fragments":["that"]},{"Key":"are identical","Fragments":["except"]},{"Key":"identical except","Fragments":["for","for"]},{"Key":"for case","Fragments":["differences.","in"]},{"Key":"case differences.","Fragments":["I"]},{"Key":"differences. I","Fragments":["would"]},{"Key":"would expect","Fragments":["`Anagram.match(\"test\","]},{"Key":"expect `Anagram.match(\"test\",","Fragments":["[\"TEST\"])`"]},{"Key":"`Anagram.match(\"test\", [\"TEST\"])`","Fragments":["to"]},{"Key":"[\"TEST\"])` to","Fragments":["return"]},{"Key":"return `[]`,","Fragments":["for"]},{"Key":"`[]`, for","Fragments":["example."]},{"Key":"The character_set","Fragments":["maneuver"]},{"Key":"character_set maneuver","Fragments":["is"]},{"Key":"maneuver is","Fragments":["very"]},{"Key":"very pretty.","Fragments":["As"]},{"Key":"pretty. As","Fragments":["you"]},{"Key":"As you","Fragments":["point","can","correctly","haven't"]},{"Key":"you point","Fragments":["out,","me"]},{"Key":"point out,","Fragments":["though,"]},{"Key":"out, though,","Fragments":["it's","and"]},{"Key":"not checking","Fragments":["that","the","to"]},{"Key":"checking that","Fragments":["a","letters"]},{"Key":"a letter","Fragments":["present","which","you","it","and"]},{"Key":"letter present","Fragments":["twice"]},{"Key":"present twice","Fragments":["in"]},{"Key":"twice in","Fragments":["the","a","the","`compare`"]},{"Key":"source word","Fragments":["is"]},{"Key":"word is","Fragments":["used","compute","essential","only","a"]},{"Key":"used exactly","Fragments":["twice"]},{"Key":"exactly twice","Fragments":["in"]},{"Key":"a possible","Fragments":["anagram.","alternative"]},{"Key":"possible anagram.","Fragments":["This"]},{"Key":"anagram. This","Fragments":["is"]},{"Key":"is where","Fragments":["having","I'd","I"]},{"Key":"where having","Fragments":["a"]},{"Key":"a `MultiSet`","Fragments":["and"]},{"Key":"`MultiSet` and","Fragments":["`MultiSet.minus`"]},{"Key":"and `MultiSet.minus`","Fragments":["function"]},{"Key":"`MultiSet.minus` function","Fragments":["would"]},{"Key":"be quite","Fragments":["useful.","right,","inefficient","a","as"]},{"Key":"quite useful.","Fragments":["(I"]},{"Key":"useful. (I","Fragments":["haven't"]},{"Key":"(I haven't","Fragments":["checked"]},{"Key":"checked whether","Fragments":["Erlang"]},{"Key":"whether Erlang","Fragments":["provides"]},{"Key":"Erlang provides","Fragments":["such"]},{"Key":"provides such","Fragments":["a"]},{"Key":"a datatype","Fragments":["in"]},{"Key":"datatype in","Fragments":["OTP"]},{"Key":"in OTP","Fragments":["itself.)"]},{"Key":"implementation uses","Fragments":["pattern"]},{"Key":"uses pattern","Fragments":["matching","matching"]},{"Key":"catch the","Fragments":["`nil`"]},{"Key":"`nil` value","Fragments":["that"]},{"Key":"value that","Fragments":["might","changes","doesn't"]},{"Key":"be inserted","Fragments":["by","but"]},{"Key":"inserted by","Fragments":["`zip`"]},{"Key":"by `zip`","Fragments":["to"]},{"Key":"`zip` to","Fragments":["equalize"]},{"Key":"to equalize","Fragments":["the"]},{"Key":"equalize the","Fragments":["length."]},{"Key":"the length.","Fragments":["It"]},{"Key":"length. It","Fragments":["also"]},{"Key":"It also","Fragments":["uses","seems","makes","has","means","gives","makes"]},{"Key":"also uses","Fragments":["pattern",":math.pow()."]},{"Key":"for equality","Fragments":["of","with"]},{"Key":"equality of","Fragments":["the"]},{"Key":"than iteration","Fragments":["1."]},{"Key":"use `zip`,","Fragments":["which"]},{"Key":"`zip`, which","Fragments":["inserts","would"]},{"Key":"which inserts","Fragments":["null"]},{"Key":"inserts null","Fragments":["values"]},{"Key":"null values","Fragments":["for"]},{"Key":"second strand","Fragments":["if","(`right`","is"]},{"Key":"strand if","Fragments":["it"]},{"Key":"is shorter","Fragments":["than","than"]},{"Key":"shorter than","Fragments":["the","the"]},{"Key":"first strand.","Fragments":["So,"]},{"Key":"strand. So,","Fragments":["this"]},{"Key":"So, this","Fragments":["needed","is"]},{"Key":"this needed","Fragments":["to"]},{"Key":"strand (`right`","Fragments":["in"]},{"Key":"(`right` in","Fragments":["the"]},{"Key":"the `pair`)","Fragments":["is"]},{"Key":"`pair`) is","Fragments":["not"]},{"Key":"thought briefly","Fragments":["about"]},{"Key":"briefly about","Fragments":["trimming"]},{"Key":"about trimming","Fragments":["the"]},{"Key":"trimming the","Fragments":["first"]},{"Key":"strand before","Fragments":["doing"]},{"Key":"before doing","Fragments":["the","complex"]},{"Key":"the `zip`,","Fragments":["which"]},{"Key":"would skip","Fragments":["that"]},{"Key":"skip that","Fragments":["null","step"]},{"Key":"that null","Fragments":["check"]},{"Key":"null check","Fragments":["in"]},{"Key":"the `nucleotides_different?`","Fragments":["function."]},{"Key":"could also","Fragments":["catch","be","look","use","add","have","use","pipeline","use","write","check","write","use","write"]},{"Key":"also catch","Fragments":["this"]},{"Key":"catch this","Fragments":["with"]},{"Key":"this with","Fragments":["pattern","pattern","a","macro's","that","just","different","pipelining"]},{"Key":"matching. Maybe","Fragments":["I'll"]},{"Key":"Maybe I'll","Fragments":["give","try","upload"]},{"Key":"give that","Fragments":["a"]},{"Key":"about stripping","Fragments":["the"]},{"Key":"stripping the","Fragments":["phrase","country","punctuation"]},{"Key":"phrase and","Fragments":["comparing"]},{"Key":"comparing against","Fragments":["`\"\"`","empty"]},{"Key":"against `\"\"`","Fragments":["to"]},{"Key":"`\"\"` to","Fragments":["avoid"]},{"Key":"regex on","Fragments":["`silence?`","_L11_"]},{"Key":"I deemed","Fragments":["it"]},{"Key":"deemed it","Fragments":["unnecessary"]},{"Key":"it unnecessary","Fragments":["for"]},{"Key":"unnecessary for","Fragments":["this"]},{"Key":"simple job,","Fragments":["but"]},{"Key":"job, but","Fragments":["submitted"]},{"Key":"but submitted","Fragments":["a"]},{"Key":"with naming","Fragments":["nevertheless."]},{"Key":" `s`","Fragments":["is"]},{"Key":"`s` is","Fragments":["pretty"]},{"Key":"pretty succinct.","Fragments":["A"]},{"Key":"succinct. A","Fragments":["bit"]},{"Key":"A bit","Fragments":["hard","more","less"]},{"Key":"bit hard","Fragments":["on","to","to"]},{"Key":"hard on","Fragments":["readability.","a"]},{"Key":"the `@`","Fragments":["syntax.","prefix"]},{"Key":"`@` syntax.","Fragments":["Nice."]},{"Key":"only place","Fragments":["where"]},{"Key":"place where","Fragments":["I"]},{"Key":"use |\u0026gt;","Fragments":["operator"]},{"Key":"in is_shut_up?","Fragments":["Method,"]},{"Key":"is_shut_up? Method,","Fragments":["right?"]},{"Key":"there's quite","Fragments":["a","a"]},{"Key":"strings. Can","Fragments":["you"]},{"Key":"you DRY","Fragments":["it"]},{"Key":"bit without","Fragments":["making","sacrificing"]},{"Key":"without making","Fragments":["it"]},{"Key":"it too","Fragments":["complicated","when","much"]},{"Key":"too complicated","Fragments":["/"]},{"Key":"complicated /","Fragments":["unreadable?"]},{"Key":"you about","Fragments":["the","`new`","the"]},{"Key":"regex, I'll","Fragments":["try"]},{"Key":"out your","Fragments":["idea.","suggestion"]},{"Key":"About `HashDict.update/4`,","Fragments":["the"]},{"Key":"`HashDict.update/4`, the","Fragments":["stack"]},{"Key":"the stack","Fragments":["trace","frame","entry","entry","entry","entry","of","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry"]},{"Key":"stack trace","Fragments":["shows"]},{"Key":"trace shows","Fragments":["something"]},{"Key":"shows something","Fragments":["like"]},{"Key":"** (FunctionClauseError)","Fragments":["no","no","no","no"]},{"Key":"(FunctionClauseError) no","Fragments":["function","function","function","function"]},{"Key":"no function","Fragments":["clause","clause","clause","clause"]},{"Key":"function clause","Fragments":["matching","to","matching","matching","matches.","matching"]},{"Key":" /Users/kimhyunkang/usr/src/elixir/lib/elixir/lib/hash_dict.ex:123:","Fragments":["HashDict.update(#HashDict,"]},{"Key":"/Users/kimhyunkang/usr/src/elixir/lib/elixir/lib/hash_dict.ex:123: HashDict.update(#HashDict,","Fragments":["\"go\","]},{"Key":"HashDict.update(#HashDict, \"go\",","Fragments":["0,"]},{"Key":"\"go\", 0,","Fragments":["function(Kernel.+/2))"]},{"Key":" /Users/kimhyunkang/usr/src/elixir/lib/elixir/lib/list.ex:111:","Fragments":["List.\"-foldl/3-lists^foldl/2-0-\"/3"]},{"Key":" word-count_test.exs:33:","Fragments":["WordsTest.\"test"]},{"Key":"word-count_test.exs:33: WordsTest.\"test","Fragments":["normalize"]},{"Key":"WordsTest.\"test normalize","Fragments":["case\"/1","case\"/1"]},{"Key":"I checked","Fragments":["out","out","out"]},{"Key":"out `v0.10.0`","Fragments":["from","from"]},{"Key":"`v0.10.0` from","Fragments":["git","git"]},{"Key":"from git","Fragments":["repository,","repository"]},{"Key":"git repository,","Fragments":["and"]},{"Key":"repository, and","Fragments":["compiled"]},{"Key":"and compiled","Fragments":["with","it"]},{"Key":"compiled with","Fragments":["Erlang"]},{"Key":"with Erlang","Fragments":["R16B01","code,"]},{"Key":"sure why","Fragments":["I","I","I","I","but","you","you","you"]},{"Key":"I switched","Fragments":["gears","to"]},{"Key":"switched gears","Fragments":["and"]},{"Key":"gears and","Fragments":["used"]},{"Key":"used `join`","Fragments":["at"]},{"Key":"`join` at","Fragments":["the"]},{"Key":"the end.","Fragments":["I'll","I","How","D'oh!"]},{"Key":"end. I'll","Fragments":["change"]},{"Key":"I'll change","Fragments":["that.","them"]},{"Key":"change that.","Fragments":["The"]},{"Key":"that. The","Fragments":["first","difference"]},{"Key":"of `bottles`","Fragments":["had","to"]},{"Key":"`bottles` had","Fragments":["a"]},{"Key":"for -1","Fragments":["that"]},{"Key":"-1 that","Fragments":["mapped"]},{"Key":"that mapped","Fragments":["to"]},{"Key":"mapped to","Fragments":["99."]},{"Key":"to 99.","Fragments":["I"]},{"Key":"99. I","Fragments":["changed"]},{"Key":"it because","Fragments":["I","the","I","of","I","I","it's"]},{"Key":"the responsibility","Fragments":["of"]},{"Key":"responsibility of","Fragments":["`bottles`"]},{"Key":"`bottles` to","Fragments":["know"]},{"Key":"handle that","Fragments":["case.","case."]},{"Key":" @bobbie","Fragments":["Oh"]},{"Key":"@bobbie Oh","Fragments":["good"]},{"Key":"Oh good","Fragments":["call."]},{"Key":"good call.","Fragments":["I"]},{"Key":"call. I","Fragments":["guess"]},{"Key":"need that","Fragments":["count"]},{"Key":"that count","Fragments":["variable"]},{"Key":"count variable","Fragments":["either."]},{"Key":"variable either.","Fragments":["I"]},{"Key":"either. I","Fragments":["can","just"]},{"Key":"can just","Fragments":["always","use","as","pattern","compare","be","iterate","reference","write","do"]},{"Key":"just always","Fragments":["use","use"]},{"Key":"always use","Fragments":["1.","parentheses","the","parentheses","a","them","parentheses"]},{"Key":"earlier, then","Fragments":["you"]},{"Key":"to map","Fragments":["over","conversion"]},{"Key":"map over","Fragments":["the","the"]},{"Key":"the set","Fragments":["of","of","difference","of"]},{"Key":"you made","Fragments":["your","the","the"]},{"Key":"made your","Fragments":["regex"]},{"Key":"more occurrences,","Fragments":["could"]},{"Key":"occurrences, could","Fragments":["you"]},{"Key":"filter for","Fragments":["empty"]},{"Key":"That's interesting","Fragments":["about"]},{"Key":"interesting about","Fragments":["`HashDict.update/4`,","Elixir."]},{"Key":"about `HashDict.update/4`,","Fragments":["what"]},{"Key":"`HashDict.update/4`, what","Fragments":["error"]},{"Key":"what error","Fragments":["message"]},{"Key":"error message","Fragments":["do","I","without","(\"Stack_overflow\").","when"]},{"Key":"message do","Fragments":["you"]},{"Key":"saw it.","Fragments":["Here"]},{"Key":"it. Here","Fragments":["is"]},{"Key":"was talking","Fragments":["about","about.","about.","about","about"]},{"Key":"talking about","Fragments":["with","when","in","a","the","the"]},{"Key":"about with","Fragments":["the"]},{"Key":"`defp count([],","Fragments":["dict),","result),"]},{"Key":"Good job","Fragments":["with"]},{"Key":"job with","Fragments":["the"]},{"Key":"Take a","Fragments":["look","look?","look","look","look","look","look","look","nap","look","look","look","look","look","look","look","look","look","look","look"]},{"Key":"at `HashDict.update`","Fragments":["--"]},{"Key":"`HashDict.update` --","Fragments":["it"]},{"Key":"your `do_count`","Fragments":["function."]},{"Key":"might simplify","Fragments":["your","your"]},{"Key":"your sanitization","Fragments":["/"]},{"Key":"sanitization /","Fragments":["splitting"]},{"Key":"/ splitting","Fragments":["functions."]},{"Key":"Generally, prefer","Fragments":["pattern"]},{"Key":"prefer pattern","Fragments":["matching"]},{"Key":"to guards","Fragments":["if"]},{"Key":"guards if","Fragments":["you"]},{"Key":"with it,","Fragments":["so:","as"]},{"Key":" foo(bar)","Fragments":["when"]},{"Key":"foo(bar) when","Fragments":["bar"]},{"Key":"when bar","Fragments":["=="]},{"Key":"bar ==","Fragments":["1,"]},{"Key":"== 1,","Fragments":["do:","do:"]},{"Key":"1, do:","Fragments":["...","...","\"one\""]},{"Key":" foo(1),","Fragments":["do:"]},{"Key":"in `bottle_text`,","Fragments":["you"]},{"Key":"`bottle_text`, you","Fragments":["don't"]},{"Key":"the interpolation","Fragments":["in"]},{"Key":"interpolation in","Fragments":["the"]},{"Key":"clause where","Fragments":["you"]},{"Key":"know `bottle_count`","Fragments":["is"]},{"Key":"`bottle_count` is","Fragments":["1."]},{"Key":"From version","Fragments":["1:"]},{"Key":" Parens","Fragments":["all","are"]},{"Key":"Parens all","Fragments":["over;"]},{"Key":" Guards","Fragments":["on"]},{"Key":"Guards on","Fragments":["singalong"]},{"Key":"on singalong","Fragments":["instead"]},{"Key":"singalong instead","Fragments":["of"]},{"Key":"use `Enum.join`","Fragments":["in"]},{"Key":"`Enum.join` in","Fragments":["your"]},{"Key":"your `bottles`","Fragments":["function"]},{"Key":"`bottles` function","Fragments":["over"]},{"Key":"function over","Fragments":["interpolation?","a","a"]},{"Key":"worth adding","Fragments":["one"]},{"Key":"more `bottles`","Fragments":["clause"]},{"Key":"`bottles` clause","Fragments":["with"]},{"Key":"clause with","Fragments":["pattern","an"]},{"Key":"the `if,","Fragments":["do:,"]},{"Key":"`if, do:,","Fragments":["else:`"]},{"Key":"do:, else:`","Fragments":["in"]},{"Key":"else:` in","Fragments":["`second_line`?"]},{"Key":" Super","Fragments":["picky,"]},{"Key":"Super picky,","Fragments":["but"]},{"Key":"name \"dna\"","Fragments":["is"]},{"Key":"\"dna\" is","Fragments":["right"]},{"Key":"is right","Fragments":["for"]},{"Key":"right for","Fragments":["the"]},{"Key":"the head","Fragments":["of","of","of","of","of","to","from","to"]},{"Key":"head of","Fragments":["the","the","`def`s","the","a"]},{"Key":"strand in","Fragments":["the"]},{"Key":"the third","Fragments":["`to_rna`","append"]},{"Key":"third `to_rna`","Fragments":["clause"]},{"Key":"`to_rna` clause","Fragments":["--"]},{"Key":"clause --","Fragments":["it's"]},{"Key":"Great nit!","Fragments":["I"]},{"Key":"nit! I","Fragments":["totally","shall"]},{"Key":"I totally","Fragments":["agree","missed"]},{"Key":"totally agree","Fragments":["with","with"]},{"Key":"all your","Fragments":["points.","guidance","constants"]},{"Key":"the presence","Fragments":["of","of","of"]},{"Key":"presence of","Fragments":["heredoc","letters,","some"]},{"Key":"of heredoc","Fragments":["and"]},{"Key":"heredoc and","Fragments":["doctest."]},{"Key":"I dot","Fragments":["not"]},{"Key":"dot not","Fragments":["know"]},{"Key":"Elixir, but","Fragments":["I","this","It","it","the","the"]},{"Key":"to break","Fragments":["a","it","up","out","up","down"]},{"Key":"break a","Fragments":["line"]},{"Key":"a line","Fragments":["after","instead","is","because","by"]},{"Key":"line after","Fragments":["a"]},{"Key":"using any","Fragments":["memoize"]},{"Key":"any memoize","Fragments":["of"]},{"Key":"memoize of","Fragments":["any"]},{"Key":"any sort","Fragments":["on"]},{"Key":"sort on","Fragments":["`sort_codepoints(word)`.","entry"]},{"Key":"on `sort_codepoints(word)`.","Fragments":["The"]},{"Key":"`sort_codepoints(word)`. The","Fragments":["same"]},{"Key":"same word","Fragments":["is","and","as"]},{"Key":"is compute","Fragments":["on"]},{"Key":"compute on","Fragments":["each"]},{"Key":"on each","Fragments":["iteration.","subsequent","case.","of"]},{"Key":"nice! I'm","Fragments":["still"]},{"Key":"still getting","Fragments":["the","my"]},{"Key":"getting the","Fragments":["hang","output","integer","error","logic","whole","hang","tests","tests","russian"]},{"Key":"the hang","Fragments":["of","of"]},{"Key":"hang of","Fragments":["Elixir,","using"]},{"Key":"of Elixir,","Fragments":["but","is"]},{"Key":"to post","Fragments":["an","an"]},{"Key":"post an","Fragments":["intermediate","issue"]},{"Key":"an intermediate","Fragments":["revision","list","list).","list)."]},{"Key":"intermediate revision","Fragments":["between"]},{"Key":"revision between","Fragments":["#2"]},{"Key":"between #2","Fragments":["and"]},{"Key":"#2 and","Fragments":["this."]},{"Key":"big disjunction","Fragments":["like"]},{"Key":"disjunction like","Fragments":["so"]},{"Key":"like so","Fragments":["in"]},{"Key":" (is_silence?(sentence)","Fragments":["\u0026amp;\u0026amp;"]},{"Key":"(is_silence?(sentence) \u0026amp;\u0026amp;","Fragments":[":silence"]},{"Key":" ||","Fragments":["is_question?(sentence)","is_shout?(sentence)",":other)"]},{"Key":"|| is_question?(sentence)","Fragments":["\u0026amp;\u0026amp;"]},{"Key":"is_question?(sentence) \u0026amp;\u0026amp;","Fragments":[":question"]},{"Key":"|| is_shout?(sentence)","Fragments":["\u0026amp;\u0026amp;"]},{"Key":"is_shout?(sentence) \u0026amp;\u0026amp;","Fragments":[":shout"]},{"Key":"This looked","Fragments":["kind"]},{"Key":"looked kind","Fragments":["of"]},{"Key":"of ugly","Fragments":["and"]},{"Key":"ugly and","Fragments":["didn't","not","need"]},{"Key":"didn't seem","Fragments":["too","to","to","to"]},{"Key":"seem too","Fragments":["straightforward."]},{"Key":"convinced this","Fragments":["version"]},{"Key":"version using","Fragments":["`Enum.find_value`","that","that.","`reduce`","`Stream.filter`","`reduce_right`"]},{"Key":"using `Enum.find_value`","Fragments":["is"]},{"Key":"`Enum.find_value` is","Fragments":["actually"]},{"Key":"actually an","Fragments":["improvement."]},{"Key":"the sweet","Fragments":["spot"]},{"Key":"sweet spot","Fragments":["might"]},{"Key":"spot might","Fragments":["have"]},{"Key":"been when","Fragments":["I"]},{"Key":"the disjunction","Fragments":["but"]},{"Key":"disjunction but","Fragments":["pushed"]},{"Key":"but pushed","Fragments":["the"]},{"Key":"pushed the","Fragments":["kind"]},{"Key":"kind down","Fragments":["into"]},{"Key":"down into","Fragments":["the","smaller","named","more"]},{"Key":"the is-tests","Fragments":["so"]},{"Key":"is-tests so","Fragments":["that"]},{"Key":"I no","Fragments":["longer"]},{"Key":"longer needed","Fragments":["the","(it's"]},{"Key":"needed the","Fragments":["`\u0026amp;\u0026amp;"]},{"Key":"the `\u0026amp;\u0026amp;","Fragments":[":kind`"]},{"Key":"`\u0026amp;\u0026amp; :kind`","Fragments":["terms."]},{"Key":":kind` terms.","Fragments":["It"]},{"Key":"terms. It","Fragments":["looked"]},{"Key":"It looked","Fragments":["like","like"]},{"Key":"looked like","Fragments":["this:","it"]},{"Key":" is_silence?","Fragments":["||"]},{"Key":"is_silence? ||","Fragments":["is_question?"]},{"Key":"|| is_question?","Fragments":["||"]},{"Key":"is_question? ||","Fragments":["is_shout?"]},{"Key":"|| is_shout?","Fragments":["||"]},{"Key":"is_shout? ||","Fragments":["is_other?"]},{"Key":"And that's","Fragments":["probably","why","the"]},{"Key":"probably as","Fragments":["good"]},{"Key":"as good","Fragments":["as","as","as","as"]},{"Key":"good as","Fragments":["it","a","well.","well.","the"]},{"Key":" Come","Fragments":["to"]},{"Key":"Come to","Fragments":["think"]},{"Key":"of it,","Fragments":["that's","except","I","but"]},{"Key":"it, that's","Fragments":["what"]},{"Key":"I'm flipping","Fragments":["to"]},{"Key":"flipping to","Fragments":["next."]},{"Key":" Awesome","Fragments":["use"]},{"Key":"Awesome use","Fragments":["of"]},{"Key":"the docstrings,","Fragments":["+1"]},{"Key":"docstrings, +1","Fragments":["for"]},{"Key":"could put","Fragments":["some"]},{"Key":"put some","Fragments":["examples"]},{"Key":"some examples","Fragments":["in"]},{"Key":"examples in","Fragments":["there"]},{"Key":"there as","Fragments":["well"]},{"Key":"iex\u0026gt; Teenager.hey(\"A","Fragments":["typical"]},{"Key":"Teenager.hey(\"A typical","Fragments":["statement\")"]},{"Key":"say I","Fragments":["would","prefer"]},{"Key":"more inclined","Fragments":["to"]},{"Key":"the checking","Fragments":["of"]},{"Key":"checking of","Fragments":["the"]},{"Key":"message to","Fragments":["their","the"]},{"Key":" check","Fragments":["out"]},{"Key":"out http://elixir-lang.org/docs/stable/","Fragments":["for"]},{"Key":"http://elixir-lang.org/docs/stable/ for","Fragments":["the"]},{"Key":"the ```Regex#scan```.","Fragments":["It"]},{"Key":"```Regex#scan```. It","Fragments":["will"]},{"Key":"you clean","Fragments":["up"]},{"Key":"up line","Fragments":["20"]},{"Key":"line 20","Fragments":["of"]},{"Key":"20 of","Fragments":["your"]},{"Key":"bit. You","Fragments":["can"]},{"Key":"also move","Fragments":["String.downcase"]},{"Key":"move String.downcase","Fragments":["into"]},{"Key":"String.downcase into","Fragments":["one"]},{"Key":"you added","Fragments":["documentation!","that."]},{"Key":"added documentation!","Fragments":["As"]},{"Key":"documentation! As","Fragments":["for"]},{"Key":"for improvements,","Fragments":["could"]},{"Key":"improvements, could","Fragments":["you"]},{"Key":"you be","Fragments":["more","willing","interested"]},{"Key":"expressive by","Fragments":["reducing"]},{"Key":"by reducing","Fragments":["the"]},{"Key":"reducing the","Fragments":["nesting","list,"]},{"Key":"the nesting","Fragments":["of","there,"]},{"Key":"nesting of","Fragments":["your"]},{"Key":"your if/else","Fragments":["-\u0026gt;"]},{"Key":"if/else -\u0026gt;","Fragments":["case?"]},{"Key":"-\u0026gt; case?","Fragments":["As"]},{"Key":"case? As","Fragments":["another"]},{"Key":"As another","Fragments":["developer,"]},{"Key":"another developer,","Fragments":["I"]},{"Key":"developer, I","Fragments":["have"]},{"Key":"read your","Fragments":["code","code."]},{"Key":"code line","Fragments":["by"]},{"Key":"line by","Fragments":["line","its"]},{"Key":"by line","Fragments":["to"]},{"Key":"line to","Fragments":["figure"]},{"Key":"out what","Fragments":["it's","your","is","private","you","that"]},{"Key":"it's doing","Fragments":["rather","in","is","more","at"]},{"Key":"than inferring","Fragments":["by"]},{"Key":"inferring by","Fragments":["variable"]},{"Key":"by variable","Fragments":["names"]},{"Key":"variable names","Fragments":["and","are","would","if","to"]},{"Key":"and simple","Fragments":["structure.","math"]},{"Key":"Ah, now","Fragments":["I"]},{"Key":"get your","Fragments":["meaning."]},{"Key":"your meaning.","Fragments":["That"]},{"Key":"meaning. That","Fragments":["is"]},{"Key":"clearer. I","Fragments":["was"]},{"Key":"was under","Fragments":["the"]},{"Key":"impression you","Fragments":["were"]},{"Key":"were alluding","Fragments":["to"]},{"Key":"alluding to","Fragments":["an"]},{"Key":"alternative function","Fragments":["call."]},{"Key":"does a","Fragments":["String","lot","match"]},{"Key":"String with","Fragments":["length"]},{"Key":"with length","Fragments":["of"]},{"Key":"of 0","Fragments":["look","is"]},{"Key":"0 look","Fragments":["like?"]},{"Key":" `String.strip(msg)","Fragments":["=="]},{"Key":"`String.strip(msg) ==","Fragments":["\"\"`","\"\"`"]},{"Key":"seems cleaner","Fragments":["(removing"]},{"Key":"cleaner (removing","Fragments":["nested"]},{"Key":"(removing nested","Fragments":["function"]},{"Key":"function calls)","Fragments":["to"]},{"Key":"calls) to","Fragments":["me."]},{"Key":" Building","Fragments":["that"]},{"Key":"Building that","Fragments":["HashDict"]},{"Key":"HashDict is","Fragments":["ugly.","passed","definitely","that"]},{"Key":"is ugly.","Fragments":["I"]},{"Key":"ugly. I","Fragments":["tried"]},{"Key":"to pull","Fragments":["out","the"]},{"Key":"pull out","Fragments":["those","those","the"]},{"Key":"those transformation","Fragments":["functions"]},{"Key":"transformation functions","Fragments":["into"]},{"Key":"into smaller","Fragments":["pieces,","methods."]},{"Key":"smaller pieces,","Fragments":["but"]},{"Key":"pieces, but","Fragments":["I'm"]},{"Key":"not exactly","Fragments":["sure","an","tail","a","happy"]},{"Key":"exactly sure","Fragments":["how."]},{"Key":"a tension","Fragments":["between"]},{"Key":"tension between","Fragments":["doing"]},{"Key":"between doing","Fragments":["idiomatic"]},{"Key":"doing idiomatic","Fragments":["elixir"]},{"Key":"idiomatic elixir","Fragments":["like","and","when"]},{"Key":" to_list","Fragments":["="]},{"Key":"to_list =","Fragments":["\u0026amp;(Regex.split"]},{"Key":"= \u0026amp;(Regex.split","Fragments":["%/r\\W+/,"]},{"Key":"\u0026amp;(Regex.split %/r\\W+/,","Fragments":["\u0026amp;1)"]},{"Key":"more verbose,","Fragments":["module-based"]},{"Key":"verbose, module-based","Fragments":["approach"]},{"Key":"module-based approach","Fragments":["that"]},{"Key":"approach that","Fragments":["I","you"]},{"Key":"I took.","Fragments":["Sometimes","I'm"]},{"Key":"took. Sometimes","Fragments":["it"]},{"Key":"Sometimes it","Fragments":["feels","takes"]},{"Key":"it feels","Fragments":["like","nicer","like","a","like","like","better","more","a","sluggish.","super","slightly"]},{"Key":"like I'm","Fragments":["trying","missing"]},{"Key":"write Ruby","Fragments":["code"]},{"Key":"Ruby code","Fragments":["in","I"]},{"Key":"better Regex","Fragments":["pattern"]},{"Key":"Regex pattern","Fragments":["could"]},{"Key":"pattern could","Fragments":["same"]},{"Key":"could same","Fragments":["me"]},{"Key":"same me","Fragments":["some"]},{"Key":"me some","Fragments":["later","confusion","time"]},{"Key":"some later","Fragments":["work.","exercises"]},{"Key":"later work.","Fragments":["But"]},{"Key":"work. But","Fragments":["I'm"]},{"Key":"But I'm","Fragments":["also","glad","leaving","not"]},{"Key":"I'm also","Fragments":["wary","slightly","leaning","a","reading"]},{"Key":"also wary","Fragments":["of"]},{"Key":"wary of","Fragments":["putting","just"]},{"Key":"putting to","Fragments":["much"]},{"Key":"to much","Fragments":["work","is"]},{"Key":"much work","Fragments":["into"]},{"Key":"work into","Fragments":["that"]},{"Key":"into that","Fragments":["single","`HashDict`"]},{"Key":"that single","Fragments":["command.","quotes","'s'"]},{"Key":"Nice addition,","Fragments":["I"]},{"Key":"addition, I","Fragments":["think"]},{"Key":"``` Regex#scan","Fragments":["```"]},{"Key":"Regex#scan ```","Fragments":["method"]},{"Key":"method will","Fragments":["help"]},{"Key":"case, since","Fragments":["it","it"]},{"Key":"will basically","Fragments":["give"]},{"Key":"basically give","Fragments":["you"]},{"Key":"list ready","Fragments":["to"]},{"Key":"be given","Fragments":["to"]},{"Key":"given to","Fragments":["your"]},{"Key":"to your","Fragments":["```","filter/reject","implementation.","other","rule","advantage?"]},{"Key":"your ```","Fragments":["_count","_count","cond"]},{"Key":"``` _count","Fragments":["```","```","```"]},{"Key":"_count ```","Fragments":["method;","method","method."]},{"Key":"``` method;","Fragments":["also"]},{"Key":"method; also","Fragments":["I"]},{"Key":"also I","Fragments":["think"]},{"Key":"that ```","Fragments":["Enum#reduce"]},{"Key":"``` Enum#reduce","Fragments":["```"]},{"Key":"Enum#reduce ```","Fragments":["or"]},{"Key":"``` List#foldl","Fragments":["```"]},{"Key":"List#foldl ```","Fragments":["will"]},{"Key":"``` will","Fragments":["let"]},{"Key":"let your","Fragments":["```","pipeline"]},{"Key":"method look","Fragments":["more"]},{"Key":"look more","Fragments":["ala","readable.","into"]},{"Key":"more ala","Fragments":["elixir"]},{"Key":"ala elixir","Fragments":[":)"]},{"Key":"One thing:","Fragments":["the"]},{"Key":"thing: the","Fragments":["last"]},{"Key":"last test","Fragments":["won't","failure","pushed","until"]},{"Key":"test won't","Fragments":["pass;"]},{"Key":"won't pass;","Fragments":["checking"]},{"Key":"pass; checking","Fragments":["for"]},{"Key":"0 is","Fragments":["not","fine,"]},{"Key":"not sufficient","Fragments":["there."]},{"Key":"``` assert","Fragments":["Teenager.hey(\""]},{"Key":"that way!\"","Fragments":["```","response"]},{"Key":"with @cicero","Fragments":["(both"]},{"Key":"@cicero (both","Fragments":["with"]},{"Key":"(both with","Fragments":["the"]},{"Key":"the fact,","Fragments":["that","that"]},{"Key":"fact, that","Fragments":["I","I"]},{"Key":"I define","Fragments":["the"]},{"Key":"the characters","Fragments":["that","you're","you","you","you","in","you"]},{"Key":"characters that","Fragments":["are","are","you","somehow"]},{"Key":"are stripped","Fragments":["rather"]},{"Key":"stripped rather","Fragments":["than"]},{"Key":"allowed ones),","Fragments":["I'd"]},{"Key":"ones), I'd","Fragments":["actually"]},{"Key":"I'd actually","Fragments":["like","thought","go"]},{"Key":"have @cicero","Fragments":["and"]},{"Key":"@cicero and","Fragments":["invert"]},{"Key":"and invert","Fragments":["the"]},{"Key":"invert the","Fragments":["corresponding","question"]},{"Key":"the corresponding","Fragments":["regex.","`Dict`"]},{"Key":"corresponding regex.","Fragments":["Might"]},{"Key":"regex. Might","Fragments":["need"]},{"Key":"Might need","Fragments":["a"]},{"Key":"a hint","Fragments":["there","as","because"]},{"Key":"hint there","Fragments":[":)."]},{"Key":" ```dict","Fragments":["="]},{"Key":"```dict =","Fragments":["_count(tail)```"]},{"Key":"= _count(tail)```","Fragments":["does"]},{"Key":"_count(tail)``` does","Fragments":["not"]},{"Key":"not look","Fragments":["very","like"]},{"Key":"look very","Fragments":["elixir-ish","pretty,","excited."]},{"Key":"very elixir-ish","Fragments":["at"]},{"Key":"elixir-ish at","Fragments":["all."]},{"Key":"It's true","Fragments":["that"]},{"Key":"true that","Fragments":["the","other","this","ListOps.count([1,3,5,7],","ListOps.count([1,3,5,7])"]},{"Key":"the `forceful?`","Fragments":["check"]},{"Key":"`forceful?` check","Fragments":["isn't"]},{"Key":"check isn't","Fragments":["strictly"]},{"Key":"isn't strictly","Fragments":["necessary"]},{"Key":"strictly necessary","Fragments":["but"]},{"Key":"necessary but","Fragments":["I"]},{"Key":"that jah","Fragments":["followed"]},{"Key":"jah followed","Fragments":["the"]},{"Key":"the spirit","Fragments":["of","of"]},{"Key":"spirit of","Fragments":["the","keeping"]},{"Key":"tests. The","Fragments":["tests"]},{"Key":"The tests","Fragments":["would","are","are","expect","never","often"]},{"Key":"tests would","Fragments":["have"]},{"Key":"been written","Fragments":["with","as"]},{"Key":"written with","Fragments":["some","parentheses"]},{"Key":"some specific","Fragments":["functionality"]},{"Key":"specific functionality","Fragments":["desire"]},{"Key":"functionality desire","Fragments":["that"]},{"Key":"desire that","Fragments":["is"]},{"Key":"now captured","Fragments":["in"]},{"Key":"captured in","Fragments":["the"]},{"Key":"I'm pretty","Fragments":["new","happy","content","new","sure","sure","new","sure"]},{"Key":"pretty new","Fragments":["to","to","to","at"]},{"Key":"Elixir myself,","Fragments":["but"]},{"Key":"myself, but","Fragments":["I"]},{"Key":"think idiomatic","Fragments":["Elixir"]},{"Key":"to idiomatic","Fragments":["Ruby"]},{"Key":"idiomatic Ruby","Fragments":["in"]},{"Key":"Ruby in","Fragments":["that"]},{"Key":"that people","Fragments":["generally"]},{"Key":"people generally","Fragments":["use"]},{"Key":"generally use","Fragments":["methods"]},{"Key":"mark such","Fragments":["as"]},{"Key":"as `silent?`","Fragments":["rather"]},{"Key":"`silent?` rather","Fragments":["than"]},{"Key":"than prefixing","Fragments":["with"]},{"Key":"prefixing with","Fragments":["\"is\""]},{"Key":"with \"is\"","Fragments":["like"]},{"Key":"\"is\" like","Fragments":["`is_silent`."]},{"Key":"like `is_silent`.","Fragments":["Not"]},{"Key":"`is_silent`. Not","Fragments":["a"]},{"Key":"deal, just","Fragments":["a"]},{"Key":" Incorporated","Fragments":["the","some"]},{"Key":"Incorporated the","Fragments":["great"]},{"Key":"the great","Fragments":["feedback","feedback.","advice.","tips!","feedback.","feedback!"]},{"Key":"great feedback","Fragments":["from","this"]},{"Key":"feedback from","Fragments":["[rin](http://exercism.io/rin)","both","the"]},{"Key":"from [rin](http://exercism.io/rin)","Fragments":["and"]},{"Key":"[rin](http://exercism.io/rin) and","Fragments":["[fabiokr](http://exercism.io/fabiokr)."]},{"Key":"Also fixed","Fragments":["is_shouting?"]},{"Key":"fixed is_shouting?","Fragments":["so"]},{"Key":"is_shouting? so","Fragments":["that"]},{"Key":"will not","Fragments":["return","cause"]},{"Key":"not return","Fragments":["true","`true`"]},{"Key":"return true","Fragments":["with","with","by"]},{"Key":"true with","Fragments":["whitespace","non-alphabetic"]},{"Key":"with whitespace","Fragments":["statements.","in"]},{"Key":"whitespace statements.","Fragments":["This"]},{"Key":"statements. This","Fragments":["lets"]},{"Key":"This lets","Fragments":["the"]},{"Key":"lets the","Fragments":["cond"]},{"Key":"cond expressions","Fragments":["occur","are"]},{"Key":"expressions occur","Fragments":["in"]},{"Key":"occur in","Fragments":["any"]},{"Key":"happy that","Fragments":["is_shouting"]},{"Key":"that is_shouting","Fragments":["will"]},{"Key":"is_shouting will","Fragments":["return"]},{"Key":"with non-alphabetic","Fragments":["statements","questions"]},{"Key":"non-alphabetic statements","Fragments":["(i.e."]},{"Key":"statements (i.e.","Fragments":["\"@#$%#\""]},{"Key":"(i.e. \"@#$%#\"","Fragments":["or"]},{"Key":"\"@#$%#\" or","Fragments":["\"12345\")"]},{"Key":" That'd","Fragments":["certainly"]},{"Key":"That'd certainly","Fragments":["be"]},{"Key":"certainly be","Fragments":["more"]},{"Key":"more expressive,","Fragments":["but"]},{"Key":"expressive, but","Fragments":["it"]},{"Key":"it kinda","Fragments":["seems"]},{"Key":"kinda seems","Fragments":["like"]},{"Key":"it out,","Fragments":["though,","which"]},{"Key":"it. Take","Fragments":["a"]},{"Key":"I cant","Fragments":["really"]},{"Key":"cant really","Fragments":["say"]},{"Key":"really say","Fragments":["why"]},{"Key":"say why","Fragments":["I","or"]},{"Key":"went for","Fragments":["the","string"]},{"Key":"are spot","Fragments":["on"]},{"Key":"spot on","Fragments":["about"]},{"Key":"on about","Fragments":["moving"]},{"Key":"moving those","Fragments":["to","out","out"]},{"Key":"those to","Fragments":["methods"]},{"Key":"to methods","Fragments":["such"]},{"Key":"use `String.strip(statement)`","Fragments":["on"]},{"Key":"`String.strip(statement)` on","Fragments":["`is_saying_nothing?`,"]},{"Key":"on `is_saying_nothing?`,","Fragments":["which"]},{"Key":"`is_saying_nothing?`, which","Fragments":["would"]},{"Key":"would produce","Fragments":["the"]},{"Key":"result without","Fragments":["the"]},{"Key":"regex. Additionally,","Fragments":["how"]},{"Key":"Additionally, how","Fragments":["about"]},{"Key":"methods private","Fragments":["as"]},{"Key":"private as","Fragments":["they"]},{"Key":"as they","Fragments":["are","are","help"]},{"Key":"are internal","Fragments":["to"]},{"Key":"internal to","Fragments":["module?"]},{"Key":"to module?","Fragments":["(`defp`)"]},{"Key":"checks clearer","Fragments":["by"]},{"Key":"clearer by","Fragments":["moving"]},{"Key":"moving them","Fragments":["to"]},{"Key":"own methods.","Fragments":["E.g.:"]},{"Key":"defp is_silence?(instruction),","Fragments":["String.strip(instruction)"]},{"Key":"is_silence?(instruction), String.strip(instruction)","Fragments":["=="]},{"Key":"String.strip(instruction) ==","Fragments":["\"\""]},{"Key":"could check","Fragments":["if","out","out","out","out","out","out"]},{"Key":"question by","Fragments":["looking"]},{"Key":"by looking","Fragments":["for","at","at"]},{"Key":"mark on","Fragments":["the"]},{"Key":"last element","Fragments":["of","of"]},{"Key":"string, which","Fragments":["could"]},{"Key":"The rule","Fragments":["is"]},{"Key":"rule is","Fragments":["simple:"]},{"Key":"is simple:","Fragments":["for"]},{"Key":"simple: for","Fragments":["`?T"]},{"Key":"for `?T","Fragments":["`return"]},{"Key":"`?T `return","Fragments":["`?U`,"]},{"Key":"`return `?U`,","Fragments":["so"]},{"Key":"`?U`, so","Fragments":["you"]},{"Key":"the table","Fragments":["at"]},{"Key":"table at","Fragments":["all."]},{"Key":"at all.","Fragments":["Try","The","It's","I'd","I"]},{"Key":"all. Try","Fragments":["to"]},{"Key":"matching where","Fragments":["one"]},{"Key":"where one","Fragments":["clause"]},{"Key":"one clause","Fragments":["works","with","per"]},{"Key":"clause works","Fragments":["for"]},{"Key":"for `?T`,","Fragments":["and"]},{"Key":"`?T`, and","Fragments":["the"]},{"Key":"other works","Fragments":["for"]},{"Key":"all other","Fragments":["cases.","places","Enum","`Enum`","kinds","operations"]},{"Key":" `'A'`","Fragments":["is"]},{"Key":"`'A'` is","Fragments":["a"]},{"Key":"a list.","Fragments":["It","`'ABC'","Interesting,","As","This","Which","With"]},{"Key":"list. It","Fragments":["is"]},{"Key":"Why `binary_to_list`","Fragments":["and"]},{"Key":"`binary_to_list` and","Fragments":["`map_join`?"]},{"Key":"and `map_join`?","Fragments":["Why"]},{"Key":"`map_join`? Why","Fragments":["do"]},{"Key":"you make","Fragments":["a","it","`count/1`","the","your","further","`count`","the","it"]},{"Key":"binary out","Fragments":["of"]},{"Key":"then turn","Fragments":["it"]},{"Key":"it back","Fragments":["to","again.","into"]},{"Key":"Just treat","Fragments":["the"]},{"Key":"treat the","Fragments":["argument"]},{"Key":"argument as","Fragments":["a"]},{"Key":"list. `'ABC'","Fragments":["=="]},{"Key":"`'ABC' ==","Fragments":["[?A,"]},{"Key":"== [?A,","Fragments":["?B,","?T,","?B]`."]},{"Key":"[?A, ?B,","Fragments":["?C]`."]},{"Key":"?B, ?C]`.","Fragments":["No"]},{"Key":"?C]`. No","Fragments":["need"]},{"Key":"No need","Fragments":["for","to","for"]},{"Key":"for binaries","Fragments":["here.","if","since"]},{"Key":"regex by","Fragments":["using"]},{"Key":"using String.strip.","Fragments":["I"]},{"Key":"String.strip. I","Fragments":["personally"]},{"Key":"personally try","Fragments":["to"]},{"Key":"use as","Fragments":["few"]},{"Key":"as few","Fragments":["regexes","programs","counting"]},{"Key":"few regexes","Fragments":["as"]},{"Key":"regexes as","Fragments":["possible.","well."]},{"Key":" Even","Fragments":["if","though","so,"]},{"Key":"a regex,","Fragments":["checking","so"]},{"Key":"regex, checking","Fragments":["the"]},{"Key":"is unnecessary","Fragments":["–","and"]},{"Key":"unnecessary –","Fragments":["you"]},{"Key":"– you","Fragments":["could"]},{"Key":"have just","Fragments":["used","tried"]},{"Key":" ```Regex.replace","Fragments":["%r/\\s/,"]},{"Key":"```Regex.replace %r/\\s/,","Fragments":["statement,"]},{"Key":"%r/\\s/, statement,","Fragments":["\"\""]},{"Key":"statement, \"\"","Fragments":["=="]},{"Key":"Now uses","Fragments":["|\u0026gt;"]},{"Key":"uses |\u0026gt;","Fragments":["in"]},{"Key":"|\u0026gt; in","Fragments":["is_saying_nothing?"]},{"Key":"in is_saying_nothing?","Fragments":["which"]},{"Key":"is_saying_nothing? which","Fragments":["is"]},{"Key":"expressions are","Fragments":["important.","run","powerful","somewhat"]},{"Key":"are important.","Fragments":["is_saying_nothing?"]},{"Key":"important. is_saying_nothing?","Fragments":["has"]},{"Key":"is_saying_nothing? has","Fragments":["to"]},{"Key":"come before","Fragments":["is_shouting?."]},{"Key":"before is_shouting?.","Fragments":["That's"]},{"Key":"is_shouting?. That's","Fragments":["the"]},{"Key":"next thing","Fragments":["to"]},{"Key":"to beat","Fragments":["on."]},{"Key":"my initial","Fragments":["attempt.","implementation.","nit","solution,"]},{"Key":"initial attempt.","Fragments":["I'm"]},{"Key":"attempt. I'm","Fragments":["still"]},{"Key":"learning elixir,","Fragments":["so","didn't"]},{"Key":"simple a","Fragments":["style"]},{"Key":"a style","Fragments":["as","thing,","thing,","thing."]},{"Key":"style as","Fragments":["possible."]},{"Key":"possible. Its","Fragments":["like","quiet"]},{"Key":"Its like","Fragments":["writing"]},{"Key":"like writing","Fragments":["C"]},{"Key":"writing C","Fragments":["code"]},{"Key":"C code","Fragments":["in"]},{"Key":"elixir. For","Fragments":["example,"]},{"Key":"function is_saying_nothing?","Fragments":["doesn't"]},{"Key":"is_saying_nothing? doesn't","Fragments":["use"]},{"Key":"|\u0026gt; operator.","Fragments":["That's","That"]},{"Key":"operator. That's","Fragments":["next."]},{"Key":"Also, yes,","Fragments":["the"]},{"Key":"yes, the","Fragments":["3","slowness"]},{"Key":"3 methods","Fragments":["is_saying_nothing?,","you"]},{"Key":"methods is_saying_nothing?,","Fragments":["is_shouting?"]},{"Key":"is_saying_nothing?, is_shouting?","Fragments":["and"]},{"Key":"is_shouting? and","Fragments":["is_questioning?"]},{"Key":"and is_questioning?","Fragments":["could"]},{"Key":"is_questioning? could","Fragments":["have"]},{"Key":"been inlined","Fragments":["in"]},{"Key":"inlined in","Fragments":["the"]},{"Key":"cond statement","Fragments":["in"]},{"Key":"statement in","Fragments":["function","the","the","`filter`,"]},{"Key":"function hey.","Fragments":["But"]},{"Key":"hey. But","Fragments":["I"]},{"Key":"make them","Fragments":["separate","private","private","clearer","private?","tail-recursive."]},{"Key":"them separate","Fragments":["functions","because"]},{"Key":"so they're","Fragments":["reusable","probably"]},{"Key":"they're reusable","Fragments":["and"]},{"Key":"reusable and","Fragments":["have","would"]},{"Key":"have meaningful","Fragments":["names."]},{"Key":"I learnt","Fragments":["about"]},{"Key":"learnt about","Fragments":["cond,","```defp```"]},{"Key":"about cond,","Fragments":["I"]},{"Key":"cond, I","Fragments":["was"]},{"Key":"little disappointed","Fragments":["there"]},{"Key":"disappointed there","Fragments":["was"]},{"Key":"no \"otherwise\"","Fragments":["in"]},{"Key":"\"otherwise\" in","Fragments":["Elixir"]},{"Key":"in Haskell.","Fragments":["It","Obvious"]},{"Key":"Haskell. It","Fragments":["makes"]},{"Key":"It makes","Fragments":["cond","sense,","me","the","it"]},{"Key":"makes cond","Fragments":["statements"]},{"Key":"statements much","Fragments":["more"]},{"Key":"more accessible.","Fragments":["Anyway,"]},{"Key":"accessible. Anyway,","Fragments":["I"]},{"Key":"Anyway, I","Fragments":["replaced","think","understand"]},{"Key":"I replaced","Fragments":["it"]},{"Key":"replaced it","Fragments":["with"]},{"Key":"quick note.","Fragments":["I"]},{"Key":"note. I","Fragments":["think"]},{"Key":"the typical","Fragments":["convention","algorithm","pitfall","regex"]},{"Key":"typical convention","Fragments":["for"]},{"Key":"return boolean","Fragments":["values"]},{"Key":"boolean values","Fragments":["is"]},{"Key":"values is","Fragments":["to"]},{"Key":"the `?`","Fragments":["suffix.","suffix","in"]},{"Key":"`?` suffix.","Fragments":["The"]},{"Key":"suffix. The","Fragments":["`is_`"]},{"Key":"The `is_`","Fragments":["prefix"]},{"Key":"probably unnecessary.","Fragments":["Although"]},{"Key":"unnecessary. Although","Fragments":["if"]},{"Key":"Although if","Fragments":["you're"]},{"Key":"you're writing","Fragments":["a","a"]},{"Key":"a macro","Fragments":["that","that","but","after","works","(`x"]},{"Key":"macro that","Fragments":["could","translates"]},{"Key":"guard the","Fragments":["`is_`"]},{"Key":"preferred over","Fragments":["the","`List.foldl`","explicit"]},{"Key":"`?` suffix","Fragments":["to"]},{"Key":"suffix to","Fragments":["match"]},{"Key":"match old","Fragments":["school"]},{"Key":"old school","Fragments":["Erlang"]},{"Key":"school Erlang","Fragments":["functions."]},{"Key":"Thanks @kacie","Fragments":["for"]},{"Key":"@kacie for","Fragments":["teaching","your"]},{"Key":"for teaching","Fragments":["me","me."]},{"Key":"teaching me","Fragments":["about"]},{"Key":"me about","Fragments":["the","how"]},{"Key":"is exactly","Fragments":["what","what","the","what"]},{"Key":"exactly what","Fragments":["I","you","it's","I","I","it","you're"]},{"Key":"to know.","Fragments":["Thanks","Thanks."]},{"Key":"know. Thanks","Fragments":["also"]},{"Key":"Thanks also","Fragments":["to","for"]},{"Key":"also to","Fragments":["@kacie"]},{"Key":"to @kacie","Fragments":["for"]},{"Key":"your insights.","Fragments":["The"]},{"Key":"insights. The","Fragments":["code"]},{"Key":"The code","Fragments":["is","looks","looks","is","feels","becomes","is","here","is"]},{"Key":"have separated","Fragments":["logic"]},{"Key":"separated logic","Fragments":["into"]},{"Key":"into meaningful","Fragments":["methods"]},{"Key":"meaningful methods","Fragments":["named"]},{"Key":"methods named","Fragments":["after"]},{"Key":"named after","Fragments":["the","string","various"]},{"Key":"message result;","Fragments":["I"]},{"Key":"result; I","Fragments":["think"]},{"Key":"that piping","Fragments":["could"]},{"Key":"piping could","Fragments":["enhance"]},{"Key":"could enhance","Fragments":["the"]},{"Key":"enhance the","Fragments":["readability"]},{"Key":"these methods,","Fragments":["but"]},{"Key":"methods, but","Fragments":["probably"]},{"Key":"probably this","Fragments":["is"]},{"Key":"just too","Fragments":["picky"]},{"Key":"too picky","Fragments":["on"]},{"Key":"picky on","Fragments":["my"]},{"Key":"my side;","Fragments":["one"]},{"Key":"side; one","Fragments":["last"]},{"Key":"last thing,","Fragments":["instead"]},{"Key":"thing, instead","Fragments":["of"]},{"Key":"of returning","Fragments":["```"]},{"Key":"returning ```","Fragments":["true"]},{"Key":"``` statement","Fragments":["you"]},{"Key":"statement you","Fragments":["could"]},{"Key":"have also","Fragments":["used"]},{"Key":"``` to","Fragments":["make"]},{"Key":"more consistent.","Fragments":["Overall","For"]},{"Key":"consistent. Overall","Fragments":["you"]},{"Key":"Overall you","Fragments":["did"]},{"Key":"and no,","Fragments":["I"]},{"Key":"no, I","Fragments":["think"]},{"Key":"naming is","Fragments":["not"]},{"Key":"not minor","Fragments":["at"]},{"Key":"minor at","Fragments":["all,"]},{"Key":"all, especially","Fragments":["with"]},{"Key":"method is_blank?","Fragments":["."]},{"Key":"is_blank? .","Fragments":["I"]},{"Key":". I","Fragments":["know"]},{"Key":"know when","Fragments":["reading","it's","it"]},{"Key":"when reading","Fragments":["code","the"]},{"Key":"code stuff","Fragments":["like"]},{"Key":"stuff like","Fragments":["that","this"]},{"Key":"really confusing","Fragments":[":),"]},{"Key":"confusing :),","Fragments":["and"]},{"Key":":), and","Fragments":["being"]},{"Key":"being aware","Fragments":["of"]},{"Key":"the level","Fragments":["of"]},{"Key":"of abstraction","Fragments":["you're","from","that",":-)","the"]},{"Key":"abstraction you're","Fragments":["using"]},{"Key":"using in","Fragments":["your","your"]},{"Key":"your DSL","Fragments":["is"]},{"Key":"DSL is","Fragments":["important."]},{"Key":"Good catch.","Fragments":["I"]},{"Key":"catch. I","Fragments":["had"]},{"Key":"had originally","Fragments":["written"]},{"Key":"originally written","Fragments":["the"]},{"Key":"written the","Fragments":["`is_empty?`"]},{"Key":"the `is_empty?`","Fragments":["method"]},{"Key":"`is_empty?` method","Fragments":["inside"]},{"Key":"method inside","Fragments":["a"]},{"Key":"inside a","Fragments":["`StringType`","`defp`","variable.","variable.\"","macro?"]},{"Key":"a `StringType`","Fragments":["module"]},{"Key":"`StringType` module","Fragments":["but"]},{"Key":"module but","Fragments":["under","if","this"]},{"Key":"but under","Fragments":["the"]},{"Key":"the `StatementType`","Fragments":["module,"]},{"Key":"`StatementType` module,","Fragments":["something"]},{"Key":"module, something","Fragments":["like"]},{"Key":"like `is_pause?`","Fragments":["or"]},{"Key":"`is_pause?` or","Fragments":["`is_silence?`"]},{"Key":"or `is_silence?`","Fragments":["makes"]},{"Key":"`is_silence?` makes","Fragments":["more"]},{"Key":"makes more","Fragments":["sense.","sense","sense."]},{"Key":"It's legit.","Fragments":["If"]},{"Key":"legit. If","Fragments":["you"]},{"Key":"are concerned","Fragments":["that"]},{"Key":"someone might","Fragments":["call"]},{"Key":"might call","Fragments":["`is_shouted?`","it"]},{"Key":"call `is_shouted?`","Fragments":["and"]},{"Key":"`is_shouted?` and","Fragments":["not"]},{"Key":"not expect","Fragments":["that","it"]},{"Key":"expect that","Fragments":["behavior,","\"idiomatic","`String.length/1`"]},{"Key":"behavior, you","Fragments":["could"]},{"Key":"Really minor","Fragments":["nit:"]},{"Key":"minor nit:","Fragments":["is","this","`case"]},{"Key":"nit: is","Fragments":["there"]},{"Key":"name `string`?","Fragments":["Some"]},{"Key":"`string`? Some","Fragments":["of"]},{"Key":"names (shouting,","Fragments":["question)"]},{"Key":"(shouting, question)","Fragments":["seem"]},{"Key":"question) seem","Fragments":["to"]},{"Key":"different level","Fragments":["of","of"]},{"Key":"abstraction from","Fragments":["others"]},{"Key":"from others","Fragments":["(blank,"]},{"Key":"others (blank,","Fragments":["string)."]},{"Key":"\"\" might","Fragments":["be","now"]},{"Key":"be considered","Fragments":["shouted","shouting,","shouting?","shouting","here","w.r.t.","shouted.","shouting?","shouting?","shouting).","yelling.","yelling.","inconsistent.","shouting."]},{"Key":"considered shouted","Fragments":["with"]},{"Key":"shouted with","Fragments":["these"]},{"Key":"with these","Fragments":["code;"]},{"Key":"these code;","Fragments":["the"]},{"Key":"code; the","Fragments":["only"]},{"Key":"that keeps","Fragments":["Bob","that"]},{"Key":"keeps Bob","Fragments":["from"]},{"Key":"Bob from","Fragments":["answering"]},{"Key":"from answering","Fragments":["with"]},{"Key":"answering with","Fragments":["\"Woah,"]},{"Key":"with \"Woah,","Fragments":["chill","chill"]},{"Key":"chill out!\"","Fragments":["is","#"]},{"Key":"out!\" is","Fragments":["the"]},{"Key":"of conditionals.","Fragments":["–"]},{"Key":"conditionals. –","Fragments":["Is"]},{"Key":"– Is","Fragments":["this"]},{"Key":"No, actually","Fragments":["I"]},{"Key":"actually I","Fragments":["think"]},{"Key":"think Regex","Fragments":["should"]},{"Key":"Regex should","Fragments":["be"]},{"Key":"avoided whenever","Fragments":["possible.","possible"]},{"Key":"whenever possible.","Fragments":[":)","It","For"]},{"Key":"And thanks","Fragments":["for"]},{"Key":"the pointer","Fragments":["to"]},{"Key":"pointer to","Fragments":["String.ends_with?,"]},{"Key":"to String.ends_with?,","Fragments":["I"]},{"Key":"String.ends_with?, I","Fragments":["like"]},{"Key":"it better","Fragments":["because","so","to"]},{"Key":"better because","Fragments":["it","it's"]},{"Key":"more …","Fragments":["literal."]},{"Key":"might now","Fragments":["be"]},{"Key":"now be","Fragments":["considered"]},{"Key":"considered shouting,","Fragments":["so"]},{"Key":"shouting, so","Fragments":["the","i'll"]},{"Key":"of conditions","Fragments":["is"]},{"Key":"conditions is","Fragments":["significant."]},{"Key":"is significant.","Fragments":["That's"]},{"Key":"significant. That's","Fragments":["what"]},{"Key":"to avoid.","Fragments":["Any","Character"]},{"Key":"avoid. Any","Fragments":["thoughts?"]},{"Key":"Actually, I","Fragments":["was","like"]},{"Key":"thinking there","Fragments":["was"]},{"Key":"a String.empty?","Fragments":["or"]},{"Key":"String.empty? or","Fragments":["something,"]},{"Key":"or something,","Fragments":["but","which"]},{"Key":"something, but","Fragments":["apparently","I"]},{"Key":"but apparently","Fragments":["the","not!","Enum.join","Erlang","there"]},{"Key":"apparently the","Fragments":["Ruby/Elixir/Javascript"]},{"Key":"the Ruby/Elixir/Javascript","Fragments":["switching"]},{"Key":"Ruby/Elixir/Javascript switching","Fragments":["is"]},{"Key":"switching is","Fragments":["messing"]},{"Key":"is messing","Fragments":["with","with"]},{"Key":"messing with","Fragments":["my","my"]},{"Key":"with my","Fragments":["brain","brain.","`_count`","lack","original,","solution,","standard","sort"]},{"Key":"my brain","Fragments":[":P","around","thinks","a"]},{"Key":" two","Fragments":["things"]},{"Key":"do for","Fragments":["the","other","the","readability."]},{"Key":"1) `[^a-z0-9","Fragments":["]`"]},{"Key":"`[^a-z0-9 ]`","Fragments":["(note"]},{"Key":"]` (note","Fragments":["the"]},{"Key":"(note the","Fragments":["space)."]},{"Key":"the space).","Fragments":["The"]},{"Key":"space). The","Fragments":["caret"]},{"Key":"The caret","Fragments":["(`^`)"]},{"Key":"caret (`^`)","Fragments":["reverses"]},{"Key":"(`^`) reverses","Fragments":["the"]},{"Key":"reverses the","Fragments":["match"]},{"Key":"the match","Fragments":["so","function","in","function?"]},{"Key":"match so","Fragments":["that"]},{"Key":"you exclude","Fragments":["anything"]},{"Key":"exclude anything","Fragments":["that's"]},{"Key":"anything that's","Fragments":["not","not"]},{"Key":"not a-z,","Fragments":["0-9"]},{"Key":"a-z, 0-9","Fragments":["or"]},{"Key":"0-9 or","Fragments":["space."]},{"Key":"2) `[^[:alnum:]","Fragments":["]`,"]},{"Key":"`[^[:alnum:] ]`,","Fragments":["which"]},{"Key":"]`, which","Fragments":["does"]},{"Key":"same thing,","Fragments":["except","so"]},{"Key":"thing, except","Fragments":["it"]},{"Key":"except it","Fragments":["also"]},{"Key":"also matches","Fragments":["A-Z."]},{"Key":"at `Dict.update/3`,","Fragments":["or"]},{"Key":"`Dict.update/3`, or","Fragments":["other"]},{"Key":"or other","Fragments":["Dict","languages.","ways"]},{"Key":"other Dict","Fragments":["functions."]},{"Key":"Dict functions.","Fragments":["They"]},{"Key":"functions. They","Fragments":["should"]},{"Key":"They should","Fragments":["give"]},{"Key":"should give","Fragments":["you"]},{"Key":"in `_add_word`.","Fragments":["Conditionals"]},{"Key":"`_add_word`. Conditionals","Fragments":["should"]},{"Key":"Conditionals should","Fragments":["be"]},{"Key":"whenever possible","Fragments":["in"]},{"Key":"possible in","Fragments":["idiomatic","the"]},{"Key":"in idiomatic","Fragments":["Elixir.","Elixir"]},{"Key":"private methods,","Fragments":["you","first."]},{"Key":"methods, you","Fragments":["can"]},{"Key":"`defp` rather","Fragments":["than"]},{"Key":"than prepending","Fragments":["an"]},{"Key":"prepending an","Fragments":["underscore."]},{"Key":"\u0026gt; Are","Fragments":["silence?/question?/shout?"]},{"Key":"Are silence?/question?/shout?","Fragments":["really","really"]},{"Key":"silence?/question?/shout? really","Fragments":["Teenager","Teenager"]},{"Key":"really Teenager","Fragments":["properties?","properties?"]},{"Key":"Teenager properties?","Fragments":["Maybe","Maybe"]},{"Key":"properties? Maybe","Fragments":["it's","it's"]},{"Key":"more OO","Fragments":["way","way","versions"]},{"Key":"OO way","Fragments":["of","of"]},{"Key":"of thinking","Fragments":["about","about","about","-","about"]},{"Key":"it, but","Fragments":["I","I'm","I","equally","it","I","I","I","it","it","didn't","according"]},{"Key":"could see","Fragments":["moving","moving","a","doing"]},{"Key":"see moving","Fragments":["those","those"]},{"Key":"separate module","Fragments":["that","that","for","but","because","property"]},{"Key":"module that","Fragments":["only","only","uses","only"]},{"Key":"only concerns","Fragments":["itself","itself"]},{"Key":"concerns itself","Fragments":["with","with"]},{"Key":"itself with","Fragments":["determining","determining"]},{"Key":"with determining","Fragments":["if","if"]},{"Key":"sentence is","Fragments":["shouted/question/etc.","shouted/question/etc.","shouting","already"]},{"Key":"Tried this","Fragments":["out."]},{"Key":"this out.","Fragments":["I","I"]},{"Key":"out. I","Fragments":["think","went","guess","can"]},{"Key":"like it,","Fragments":["but","and","some"]},{"Key":"good feeling","Fragments":["of"]},{"Key":"feeling of","Fragments":["where"]},{"Key":"where and","Fragments":["how"]},{"Key":"and how","Fragments":["concerns","you're","it's","do","to","would"]},{"Key":"how concerns","Fragments":["should"]},{"Key":"concerns should","Fragments":["be"]},{"Key":"be split","Fragments":["up."]},{"Key":"A good","Fragments":["nit","rule","way","way"]},{"Key":"good nit","Fragments":["I"]},{"Key":"nit I","Fragments":["got","can","can","have"]},{"Key":"got on","Fragments":["my"]},{"Key":"my implementation","Fragments":["was","I","of","to","relies","at:","of","of"]},{"Key":"was this:","Fragments":["shouting"]},{"Key":"this: shouting","Fragments":["and"]},{"Key":"and question","Fragments":["are"]},{"Key":"question are","Fragments":["good"]},{"Key":"are good","Fragments":["terms","too,"]},{"Key":"good terms","Fragments":["in"]},{"Key":"terms in","Fragments":["the","it"]},{"Key":"domain, but","Fragments":["'empty'"]},{"Key":"but 'empty'","Fragments":["isn't"]},{"Key":"'empty' isn't","Fragments":["as"]},{"Key":"isn't as","Fragments":["good"]},{"Key":"a fit.","Fragments":["A"]},{"Key":"fit. A","Fragments":["statement"]},{"Key":"A statement","Fragments":["can"]},{"Key":"statement can","Fragments":["be"]},{"Key":"be shouted,","Fragments":["or"]},{"Key":"shouted, or","Fragments":["a"]},{"Key":"a question.","Fragments":["But","it"]},{"Key":"question. But","Fragments":["saying"]},{"Key":"But saying","Fragments":["a"]},{"Key":"saying a","Fragments":["statement"]},{"Key":"is \"empty\"","Fragments":["could"]},{"Key":"\"empty\" could","Fragments":["mean"]},{"Key":"could mean","Fragments":["something"]},{"Key":"something different","Fragments":["than"]},{"Key":"different than","Fragments":["what","the"]},{"Key":"than what","Fragments":["you're","you","I","I"]},{"Key":"to prove","Fragments":["here."]},{"Key":"Here's an","Fragments":["example","example","example:","example"]},{"Key":"using shorthand","Fragments":["notation:"]},{"Key":" Enum.map","Fragments":["[1,2,3],","[1,2,3],","v,"]},{"Key":"Enum.map [1,2,3],","Fragments":["fn(x)","\u0026amp;1"]},{"Key":"[1,2,3], fn(x)","Fragments":["-\u0026gt;"]},{"Key":"fn(x) -\u0026gt;","Fragments":["x","x+1"]},{"Key":"-\u0026gt; x","Fragments":["*"]},{"Key":"x *","Fragments":["2"]},{"Key":"* 2","Fragments":["end"]},{"Key":"[1,2,3], \u0026amp;1","Fragments":["*"]},{"Key":"wasn't really","Fragments":["too"]},{"Key":"really too","Fragments":["worried"]},{"Key":"too worried","Fragments":["about"]},{"Key":"worried about","Fragments":["performance"]},{"Key":"about performance","Fragments":["here.","optimizations,","when"]},{"Key":"performance here.","Fragments":["The"]},{"Key":"here. The","Fragments":["main","pr"]},{"Key":"main focus","Fragments":["was"]},{"Key":"focus was","Fragments":["to"]},{"Key":"keep things","Fragments":["simple","on","immutable.","tight"]},{"Key":"things simple","Fragments":["and"]},{"Key":"for speed,","Fragments":["I"]},{"Key":"speed, I","Fragments":["could"]},{"Key":"probably improve","Fragments":["a"]},{"Key":"improve a","Fragments":["few"]},{"Key":"few of","Fragments":["the"]},{"Key":"helper functions.","Fragments":["Here's"]},{"Key":"functions. Here's","Fragments":["an"]},{"Key":"slightly quicker","Fragments":["`silence?/1`"]},{"Key":"quicker `silence?/1`","Fragments":["function."]},{"Key":"defp silence?(sentence)","Fragments":["do"]},{"Key":"defp do_silence(\"\"),","Fragments":["do:"]},{"Key":"do_silence(\"\"), do:","Fragments":["true"]},{"Key":"defp do_silence(\"","Fragments":["\"),","\""]},{"Key":"do_silence(\" \"),","Fragments":["do:"]},{"Key":"\"), do:","Fragments":["true"]},{"Key":"do_silence(\" \"","Fragments":["rest),"]},{"Key":"\" rest),","Fragments":["do:"]},{"Key":"rest), do:","Fragments":["do_silence(rest)"]},{"Key":"defp do_silence(_),","Fragments":["do:"]},{"Key":"do_silence(_), do:","Fragments":["false"]},{"Key":"interface. Easy","Fragments":["fix"]},{"Key":"Easy fix","Fragments":["to"]},{"Key":"fix to","Fragments":["go"]},{"Key":"those private.","Fragments":["I"]},{"Key":"private. I","Fragments":["need"]},{"Key":"still looking","Fragments":["for"]},{"Key":"is empty,","Fragments":["but","which","and"]},{"Key":"empty, but","Fragments":["not"]},{"Key":"not finding","Fragments":["anything","any","the"]},{"Key":"finding anything","Fragments":["so"]},{"Key":"anything so","Fragments":["far,","far."]},{"Key":"so far,","Fragments":["could","because"]},{"Key":"far, could","Fragments":["you"]},{"Key":"me an","Fragments":["idea","optimist?","opportunity","opportunity","opportunity"]},{"Key":"where it","Fragments":["might","could","would","would","did","would","ought","presents","doesn't"]},{"Key":"be at","Fragments":["in"]},{"Key":"at in","Fragments":["the"]},{"Key":"documentation or","Fragments":["elsewhere?"]},{"Key":"used String.strip","Fragments":["for"]},{"Key":"String.strip for","Fragments":["is_blank?"]},{"Key":"for is_blank?","Fragments":["if"]},{"Key":"is_blank? if","Fragments":["I"]},{"Key":"I recall","Fragments":["correctly,"]},{"Key":"recall correctly,","Fragments":["but"]},{"Key":"correctly, but","Fragments":["maybe","I'm"]},{"Key":"maybe a","Fragments":["Regex"]},{"Key":"a Regex","Fragments":["is","that","way"]},{"Key":"more fun.","Fragments":["Also"]},{"Key":"fun. Also","Fragments":["String.ends_with?"]},{"Key":"Also String.ends_with?","Fragments":["as"]},{"Key":"String.ends_with? as","Fragments":["a"]},{"Key":"possible alternative","Fragments":["in"]},{"Key":"alternative in","Fragments":["is_question?"]},{"Key":"idea of","Fragments":["\"\"","my","using","having","the","the","`Dict`","sorting","how","what","what","having","the"]},{"Key":"of \"\"","Fragments":["not","because"]},{"Key":"\"\" not","Fragments":["being"]},{"Key":"being shouting,","Fragments":["but"]},{"Key":"shouting, but","Fragments":["is"]},{"Key":"returning nil","Fragments":["in"]},{"Key":"nil in","Fragments":["that"]},{"Key":"that case","Fragments":["really","it"]},{"Key":"case really","Fragments":["the"]},{"Key":"really the","Fragments":["desired","implementation"]},{"Key":"the desired","Fragments":["behaviour?","result"]},{"Key":"sure of","Fragments":["what","my","this"]},{"Key":"by shorthand","Fragments":["notation."]},{"Key":"shorthand notation.","Fragments":["I've"]},{"Key":"notation. I've","Fragments":["got"]},{"Key":"I've got","Fragments":["an","zipper"]},{"Key":"got an","Fragments":["updated","email","email"]},{"Key":"updated version","Fragments":["to"]},{"Key":"version to","Fragments":["submit."]},{"Key":"Actually, given","Fragments":["that"]},{"Key":"given that","Fragments":["the","all"]},{"Key":"the hash","Fragments":["is"]},{"Key":"hash is","Fragments":["created","something"]},{"Key":"is created","Fragments":["with","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for"]},{"Key":"created with","Fragments":["default","single"]},{"Key":"with default","Fragments":["values","arguments","value"]},{"Key":"values of","Fragments":["0,","the","the"]},{"Key":"of 0,","Fragments":["line"]},{"Key":"0, line","Fragments":["4"]},{"Key":"4 can","Fragments":["probably"]},{"Key":"can probably","Fragments":["get","get","inline","go,","do"]},{"Key":"with being","Fragments":["`Dict.update(hash,"]},{"Key":"being `Dict.update(hash,","Fragments":["nucleotide,"]},{"Key":"`Dict.update(hash, nucleotide,","Fragments":["\u0026amp;1"]},{"Key":"nucleotide, \u0026amp;1","Fragments":["+"]},{"Key":"Aha, after","Fragments":["a"]},{"Key":"of playing","Fragments":["around"]},{"Key":"playing around","Fragments":["I","more","with"]},{"Key":"around I","Fragments":["see"]},{"Key":"you're getting","Fragments":["at","at?"]},{"Key":"getting at","Fragments":["with","and"]},{"Key":"at with","Fragments":["to_char_list."]},{"Key":"with to_char_list.","Fragments":["I'm"]},{"Key":"to_char_list. I'm","Fragments":["a"]},{"Key":"bit bewildered","Fragments":["that"]},{"Key":"bewildered that","Fragments":["String.to_char_list"]},{"Key":"that String.to_char_list","Fragments":["has"]},{"Key":"String.to_char_list has","Fragments":["a"]},{"Key":"different behaviour","Fragments":["than"]},{"Key":"behaviour than","Fragments":["builtin"]},{"Key":"than builtin","Fragments":["to_char_list..."]},{"Key":" Inexperience","Fragments":["with"]},{"Key":"Inexperience with","Fragments":["Elixir"]},{"Key":"is I'm","Fragments":["sure"]},{"Key":"above questions","Fragments":["-"]},{"Key":"questions -","Fragments":["I'm","a"]},{"Key":"- I'm","Fragments":["finding","sure","not"]},{"Key":"finding my","Fragments":["way","\"style\"."]},{"Key":"a largely","Fragments":["unknown"]},{"Key":"largely unknown","Fragments":["language!"]},{"Key":" to_char_list","Fragments":["returns"]},{"Key":"to_char_list returns","Fragments":["{:ok,"]},{"Key":"returns {:ok,","Fragments":["'abcde'}"]},{"Key":"{:ok, 'abcde'}","Fragments":["instead"]},{"Key":"'abcde'} instead","Fragments":["of"]},{"Key":"just 'abcde'","Fragments":["which"]},{"Key":"'abcde' which","Fragments":["confused"]},{"Key":"which confused","Fragments":["me"]},{"Key":"confused me","Fragments":["enough"]},{"Key":"me enough","Fragments":["to"]},{"Key":"to feel","Fragments":["like","like"]},{"Key":"like steering","Fragments":["clear"]},{"Key":"steering clear","Fragments":["of"]},{"Key":"clear of","Fragments":["it."]},{"Key":"the policy","Fragments":["towards"]},{"Key":"policy towards","Fragments":["imports"]},{"Key":"towards imports","Fragments":["is,"]},{"Key":"imports is,","Fragments":["in"]},{"Key":"is, in","Fragments":["good"]},{"Key":"in good","Fragments":["Elixir","part","style."]},{"Key":"good Elixir","Fragments":["style."]},{"Key":"Elixir style.","Fragments":["I"]},{"Key":"style. I","Fragments":["do"]},{"Key":"about `new`","Fragments":["and"]},{"Key":"`new` and","Fragments":["had"]},{"Key":"and had","Fragments":["second","a"]},{"Key":"had second","Fragments":["thoughts"]},{"Key":"second thoughts","Fragments":["about"]},{"Key":"that while","Fragments":["doing","the"]},{"Key":"while doing","Fragments":["it,","it"]},{"Key":"doing it,","Fragments":["but","I","and"]},{"Key":"but equally","Fragments":["I"]},{"Key":"equally I","Fragments":["thought"]},{"Key":"thought it","Fragments":["might","was","was","would","through","read","would","was"]},{"Key":"be inconsistent","Fragments":["to"]},{"Key":"import HashDict.update","Fragments":["and"]},{"Key":"HashDict.update and","Fragments":["be"]},{"Key":"and be","Fragments":["explicit","a"]},{"Key":"be explicit","Fragments":["about","recursion"]},{"Key":"explicit about","Fragments":["HashDict.new!"]},{"Key":"As this","Fragments":["seems"]},{"Key":"this seems","Fragments":["to","to","to"]},{"Key":"be partially","Fragments":["a"]},{"Key":"partially a","Fragments":["matter"]},{"Key":"of style,","Fragments":["I"]},{"Key":"style, I","Fragments":["wonder"]},{"Key":"anyone else","Fragments":["has","hit"]},{"Key":"else has","Fragments":["any"]},{"Key":"has any","Fragments":["opinions","recommendations."]},{"Key":"any opinions","Fragments":["-"]},{"Key":"opinions -","Fragments":["to"]},{"Key":"- to","Fragments":["import"]},{"Key":"import or","Fragments":["not"]},{"Key":"functions confusing.","Fragments":["Especially"]},{"Key":"confusing. Especially","Fragments":["`new/2`."]},{"Key":"Especially `new/2`.","Fragments":["Just"]},{"Key":"`new/2`. Just","Fragments":["looking"]},{"Key":"Just looking","Fragments":["at"]},{"Key":"at line","Fragments":["18","12","19"]},{"Key":"line 18","Fragments":["I"]},{"Key":"18 I","Fragments":["would"]},{"Key":"what `new/2`","Fragments":["creates."]},{"Key":"`new/2` creates.","Fragments":["Why"]},{"Key":"creates. Why","Fragments":["did"]},{"Key":"import the","Fragments":["functions","functions"]},{"Key":"functions instead","Fragments":["of","of","of","of"]},{"Key":"using them","Fragments":["directly?"]},{"Key":"Another question:","Fragments":["why"]},{"Key":"question: why","Fragments":["did"]},{"Key":"why did","Fragments":["you"]},{"Key":"you choose","Fragments":["`to_char_list!/1`"]},{"Key":"choose `to_char_list!/1`","Fragments":["over"]},{"Key":"`to_char_list!/1` over","Fragments":["the"]},{"Key":"the builtin","Fragments":["`to_char_list/1`?"]},{"Key":"great start","Fragments":["-"]},{"Key":"- things","Fragments":["are"]},{"Key":"things are","Fragments":["broken","here,"]},{"Key":"are broken","Fragments":["up"]},{"Key":"up nicely,","Fragments":["and"]},{"Key":"nicely, and","Fragments":["the"]},{"Key":"logic is","Fragments":["all","shaky"]},{"Key":"all in","Fragments":["the","normalize.","one","the"]},{"Key":"the nice","Fragments":["features"]},{"Key":"nice features","Fragments":["of"]},{"Key":"use `?`","Fragments":["to"]},{"Key":"`?` to","Fragments":["denote"]},{"Key":"to denote","Fragments":["a"]},{"Key":"denote a","Fragments":["function"]},{"Key":"that returns","Fragments":["a","you","`:silence`,","a","a"]},{"Key":"a boolean.","Fragments":["Do"]},{"Key":"boolean. Do","Fragments":["you"]},{"Key":"read better","Fragments":["if"]},{"Key":"operation broken","Fragments":["out"]},{"Key":"broken out","Fragments":["into","into"]},{"Key":"into small","Fragments":["functions,"]},{"Key":"small functions,","Fragments":["which","especially","but"]},{"Key":"functions, which","Fragments":["is","you","makes"]},{"Key":"is great.","Fragments":["Should","See","I","I've","A","Thanks.","The"]},{"Key":"great. Should","Fragments":["those"]},{"Key":"Should those","Fragments":["methods"]},{"Key":"public API","Fragments":["for","a","though."]},{"Key":"API for","Fragments":["Teenager?"]},{"Key":"also more","Fragments":["concise","open"]},{"Key":"concise way","Fragments":["to","to"]},{"Key":"empty, which","Fragments":["is"]},{"Key":"more self-documenting","Fragments":["than"]},{"Key":"self-documenting than","Fragments":["checking"]},{"Key":"than checking","Fragments":["the","for"]},{"Key":"hadn't heard","Fragments":["of,"]},{"Key":"heard of,","Fragments":["or"]},{"Key":"of, or","Fragments":["more"]},{"Key":"more likely","Fragments":["forgot,","someone"]},{"Key":"likely forgot,","Fragments":["elixir's"]},{"Key":"forgot, elixir's","Fragments":["`cond`."]},{"Key":"elixir's `cond`.","Fragments":["I"]},{"Key":"`cond`. I","Fragments":["had"]},{"Key":"had tried","Fragments":["using"]},{"Key":"using `case`,","Fragments":["but"]},{"Key":"`case`, but","Fragments":["ran"]},{"Key":"but ran","Fragments":["into"]},{"Key":"ran into","Fragments":["some","was"]},{"Key":"matching limitations.","Fragments":["I"]},{"Key":"limitations. I","Fragments":["like"]},{"Key":"way this","Fragments":["looks"]},{"Key":"lot better.","Fragments":["Thanks"]},{"Key":"better. Thanks","Fragments":["for"]},{"Key":"empty? has","Fragments":["become"]},{"Key":"has become","Fragments":["silence?","Heard,"]},{"Key":"become silence?","Fragments":["and"]},{"Key":"silence? and","Fragments":["Statement","shouting?"]},{"Key":"and Statement","Fragments":["has"]},{"Key":"Statement has","Fragments":["become"]},{"Key":"become Heard,","Fragments":["which"]},{"Key":"Heard, which","Fragments":["I"]},{"Key":"think reads","Fragments":["a"]},{"Key":"better. \"The","Fragments":["Teenager"]},{"Key":"\"The Teenager","Fragments":["Heard"]},{"Key":"Teenager Heard","Fragments":["yelling,"]},{"Key":"Heard yelling,","Fragments":["so"]},{"Key":"yelling, so","Fragments":["he"]},{"Key":"so he","Fragments":["said...\""]},{"Key":"with flattening","Fragments":["the"]},{"Key":"flattening the","Fragments":["result","result","list","list","list"]},{"Key":"of scan","Fragments":["(although"]},{"Key":"scan (although","Fragments":["I"]},{"Key":"(although I","Fragments":["might"]},{"Key":"might scan","Fragments":["for"]},{"Key":"scan for","Fragments":["`\\w+`","strings"]},{"Key":"for `\\w+`","Fragments":["rather"]},{"Key":"`\\w+` rather","Fragments":["than"]},{"Key":"than `[^","Fragments":["]+`)."]},{"Key":"`[^ ]+`).","Fragments":["Why"]},{"Key":"]+`). Why","Fragments":["do"]},{"Key":"it's much","Fragments":["worse?"]},{"Key":"much worse?","Fragments":["What"]},{"Key":"worse? What","Fragments":["if"]},{"Key":"wrapped it","Fragments":["in"]},{"Key":"function like","Fragments":["`to_words`?","`defp","that.","`Enum.map`.","in","this","`lowercase_sentence`","`multiple_of?(number,"]},{"Key":"Good predicate","Fragments":["methods."]},{"Key":"Consider `cond`","Fragments":["over"]},{"Key":"`cond` over","Fragments":["the"]},{"Key":"the mass","Fragments":["of"]},{"Key":"mass of","Fragments":["`if`s."]},{"Key":"You're doing","Fragments":["fine","a","a"]},{"Key":"doing fine","Fragments":["-"]},{"Key":"fine -","Fragments":["it"]},{"Key":"it took","Fragments":["me","me","a","to"]},{"Key":"took me","Fragments":["6","three","awhile","a","a","a","a","some"]},{"Key":"me 6","Fragments":["iterations"]},{"Key":"6 iterations","Fragments":["to"]},{"Key":"iterations to","Fragments":["figure","collapse"]},{"Key":"first thing","Fragments":["is","I","on"]},{"Key":"that things","Fragments":["in","are"]},{"Key":"Elixir are","Fragments":["immutable.","you","named"]},{"Key":"are immutable.","Fragments":["For"]},{"Key":"immutable. For","Fragments":["example,"]},{"Key":"example, calling","Fragments":["`Dict.put(counts,"]},{"Key":"calling `Dict.put(counts,","Fragments":["word,"]},{"Key":"`Dict.put(counts, word,","Fragments":["1)`"]},{"Key":"word, 1)`","Fragments":["returns"]},{"Key":"1)` returns","Fragments":["a"]},{"Key":"new HashDict,","Fragments":["it"]},{"Key":"HashDict, it","Fragments":["doesn't"]},{"Key":"doesn't store","Fragments":["anything"]},{"Key":"store anything","Fragments":["in"]},{"Key":"anything in","Fragments":["`counts`.","it","this","this"]},{"Key":"Also, Enum.each","Fragments":["is"]},{"Key":"Enum.each is","Fragments":["swallowing"]},{"Key":"is swallowing","Fragments":["return"]},{"Key":"swallowing return","Fragments":["values,"]},{"Key":"return values,","Fragments":["so"]},{"Key":"values, so","Fragments":["you"]},{"Key":"the updated","Fragments":["list","order"]},{"Key":"updated list","Fragments":["and"]},{"Key":"and re-store","Fragments":["it"]},{"Key":"re-store it","Fragments":["in"]},{"Key":"in `counts`","Fragments":["each"]},{"Key":"`counts` each","Fragments":["time"]},{"Key":"each time","Fragments":["(outside","called?","is","you"]},{"Key":"time (outside","Fragments":["the"]},{"Key":"(outside the","Fragments":["Enum.each)"]},{"Key":"function (`String.split`)","Fragments":["that"]},{"Key":"(`String.split`) that","Fragments":["is"]},{"Key":"is specifically","Fragments":["for"]},{"Key":"specifically for","Fragments":["performing","one","`test_only_numbers`"]},{"Key":"for performing","Fragments":["this"]},{"Key":"performing this","Fragments":["task."]},{"Key":"this task.","Fragments":["There's"]},{"Key":"task. There's","Fragments":["also"]},{"Key":"also `Regex.run`","Fragments":["that"]},{"Key":"`Regex.run` that","Fragments":["would"]},{"Key":"would accomplish","Fragments":["the"]},{"Key":"the scan,","Fragments":["but"]},{"Key":"scan, but","Fragments":["without","again,"]},{"Key":"but without","Fragments":["the","doing","reversing?"]},{"Key":" Mainly","Fragments":["I"]},{"Key":"Mainly I","Fragments":["think"]},{"Key":"it's worse","Fragments":["because"]},{"Key":"worse because","Fragments":["most"]},{"Key":"because most","Fragments":["people"]},{"Key":"people don't","Fragments":["love","know","mind"]},{"Key":"don't love","Fragments":["Regex","the"]},{"Key":"love Regex","Fragments":["like"]},{"Key":"Regex like","Fragments":["I"]},{"Key":"The string","Fragments":["interpolation","manipulation"]},{"Key":"interpolation is","Fragments":["probably"]},{"Key":"probably too","Fragments":["clever,"]},{"Key":"too clever,","Fragments":["but:"]},{"Key":" `List.flatten(Regex.scan(%r/[^","Fragments":["]+/,"]},{"Key":"`List.flatten(Regex.scan(%r/[^ ]+/,","Fragments":["string))`"]},{"Key":"much worse.","Fragments":["I'm"]},{"Key":"worse. I'm","Fragments":["thinking"]},{"Key":"of conditionals","Fragments":["in"]},{"Key":"conditionals in","Fragments":["my","my","`bottles_of_beer`"]},{"Key":"knew the","Fragments":["right"]},{"Key":"right tools.","Fragments":["I'll"]},{"Key":"tools. I'll","Fragments":["definitely"]},{"Key":"definitely look","Fragments":["into","into"]},{"Key":"tried that","Fragments":["in","as"]},{"Key":"in repl,","Fragments":["i"]},{"Key":"repl, i","Fragments":["used"]},{"Key":"i used","Fragments":["`\"`"]},{"Key":"used `\"`","Fragments":["and"]},{"Key":"`\"` and","Fragments":["not"]},{"Key":"not `'`.","Fragments":["I"]},{"Key":"`'`. I","Fragments":["didn't"]},{"Key":"know there","Fragments":["was","might","needs","was"]},{"Key":"that part","Fragments":["of","of","in"]},{"Key":"docs again.","Fragments":["Thanks."]},{"Key":"One small","Fragments":["nit:","thing:","tip:","thing:","thing:","thing","thing:","(and","note","nit,","thing:"]},{"Key":"small nit:","Fragments":["I"]},{"Key":"nit: I","Fragments":["think","probably"]},{"Key":"should rename","Fragments":["StringType"]},{"Key":"rename StringType","Fragments":["to"]},{"Key":"StringType to","Fragments":["something"]},{"Key":"the `fn`","Fragments":["inside","syntax","`end`"]},{"Key":"`fn` inside","Fragments":["of","`reduce`."]},{"Key":"the filter_map,","Fragments":["I"]},{"Key":"filter_map, I","Fragments":["can"]},{"Key":"see two","Fragments":["different"]},{"Key":"different directions.","Fragments":["Either"]},{"Key":"directions. Either","Fragments":["you"]},{"Key":"Either you","Fragments":["could"]},{"Key":"that construction","Fragments":["really"]},{"Key":"construction really","Fragments":["short"]},{"Key":"really short","Fragments":["(using"]},{"Key":"short (using","Fragments":["the"]},{"Key":"(using the","Fragments":["`\u0026amp;`"]},{"Key":"the `\u0026amp;`","Fragments":["notation)"]},{"Key":"`\u0026amp;` notation)","Fragments":["or"]},{"Key":"notation) or","Fragments":["you"]},{"Key":"or you","Fragments":["could","could","just","will","can","might"]},{"Key":"could break","Fragments":["it"]},{"Key":"name describing","Fragments":["what"]},{"Key":"describing what","Fragments":["it"]},{"Key":"it does.","Fragments":["My"]},{"Key":"does. My","Fragments":["preference"]},{"Key":"My preference","Fragments":["might"]},{"Key":"preference might","Fragments":["be"]},{"Key":"but yours","Fragments":["might"]},{"Key":"yours might","Fragments":["be"]},{"Key":"didn't even","Fragments":["think","think","know"]},{"Key":"even think","Fragments":["about","about"]},{"Key":"using params","Fragments":["\"word,"]},{"Key":"params \"word,","Fragments":["word\""]},{"Key":"\"word, word\"","Fragments":["to"]},{"Key":"word\" to","Fragments":["pattern"]},{"Key":"match when","Fragments":["the"]},{"Key":"are the","Fragments":["same.","same.","first","same.","parentheses","way","more","same","common","exceptions,","star","same","same.","same,","same"]},{"Key":"the same.","Fragments":["Thx.","That","Boom.","That's","I"]},{"Key":"struggled with","Fragments":["empty?"]},{"Key":"with empty?","Fragments":["as"]},{"Key":"empty? as","Fragments":["well."]},{"Key":"good name.","Fragments":["Maybe"]},{"Key":"name. Maybe","Fragments":["a"]},{"Key":"Maybe a","Fragments":["better","cond?","better"]},{"Key":"better choice","Fragments":["would"]},{"Key":"choice would","Fragments":["be"]},{"Key":"be \"silent?\"","Fragments":["since"]},{"Key":"\"silent?\" since","Fragments":["the"]},{"Key":"the person","Fragments":["speaking"]},{"Key":"person speaking","Fragments":["is"]},{"Key":"speaking is","Fragments":["saying"]},{"Key":"is saying","Fragments":["nothing?"]},{"Key":"operator `|\u0026gt;`?","Fragments":["That"]},{"Key":"`|\u0026gt;`? That","Fragments":["approach"]},{"Key":"That approach","Fragments":["works"]},{"Key":"approach works","Fragments":["fine"]},{"Key":"fine to","Fragments":["chain","use","write","write"]},{"Key":"to chain","Fragments":["`String.strip`","functions"]},{"Key":"chain `String.strip`","Fragments":["followed"]},{"Key":"`String.strip` followed","Fragments":["by"]},{"Key":"by `String.length`","Fragments":["in"]},{"Key":"`String.length` in","Fragments":["`iex`,"]},{"Key":"in `iex`,","Fragments":["at"]},{"Key":"`iex`, at","Fragments":["least"]},{"Key":" (You","Fragments":["might"]},{"Key":"(You might","Fragments":["not"]},{"Key":"for length,","Fragments":["though,"]},{"Key":"length, though,","Fragments":["if"]},{"Key":"though, if","Fragments":["you","you"]},{"Key":"in effect","Fragments":["just"]},{"Key":"effect just","Fragments":["checking"]},{"Key":"just checking","Fragments":["for","to"]},{"Key":"single return","Fragments":["value"]},{"Key":"return value","Fragments":["of","of","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","are"]},{"Key":"`count` function,","Fragments":["`dna`","since","though,"]},{"Key":"function, `dna`","Fragments":["is"]},{"Key":"`dna` is","Fragments":["a"]},{"Key":"character list,","Fragments":["so"]},{"Key":"functions can","Fragments":["be","be","be","be","simplify"]},{"Key":"used on","Fragments":["it."]},{"Key":"it. Check","Fragments":["out"]},{"Key":"for `Enum.count/2`:","Fragments":["http://elixir-lang.org/docs/stable/"]},{"Key":"me, `yelling?`","Fragments":["and"]},{"Key":"`yelling?` and","Fragments":["`question?`"]},{"Key":"and `question?`","Fragments":["are","private"]},{"Key":"`question?` are","Fragments":["language"]},{"Key":"are language","Fragments":["from"]},{"Key":"language from","Fragments":["the"]},{"Key":"domain, since","Fragments":["they"]},{"Key":"are how","Fragments":["Bob"]},{"Key":"how Bob","Fragments":["would","thinks"]},{"Key":"Bob would","Fragments":["describe"]},{"Key":"would describe","Fragments":["statements,"]},{"Key":"describe statements,","Fragments":["but"]},{"Key":"statements, but","Fragments":["`empty?`"]},{"Key":"but `empty?`","Fragments":["is"]},{"Key":"`empty?` is","Fragments":["not"]},{"Key":"as much.","Fragments":["What","I"]},{"Key":"much. What","Fragments":["do"]},{"Key":"It does","Fragments":["not","not","the","handle","seem","read","however","seem","look","not"]},{"Key":"not appear","Fragments":["that","that","to"]},{"Key":"appear that","Fragments":["there's","there's","just"]},{"Key":"that there's","Fragments":["a","a","no","no","also","no","`length`.","also"]},{"Key":"method chain","Fragments":["the","the"]},{"Key":"chain the","Fragments":["`String#length`","`String#length`"]},{"Key":"the `String#length`","Fragments":["and","and"]},{"Key":"`String#length` and","Fragments":["`String#strip`","`String#strip`"]},{"Key":"and `String#strip`","Fragments":["methods.","methods."]},{"Key":"`String#strip` methods.","Fragments":["Let","Let"]},{"Key":"methods. Let","Fragments":["me","me"]},{"Key":"have thoughts","Fragments":["on","on"]},{"Key":"`nucleotide_counts` only","Fragments":["calling"]},{"Key":"only calling","Fragments":["`frequencies`?"]},{"Key":"calling `frequencies`?","Fragments":["Why"]},{"Key":"`frequencies`? Why","Fragments":["not"]},{"Key":"separate out","Fragments":["the"]},{"Key":"conditions for","Fragments":["types"]},{"Key":"for types","Fragments":["of","like"]},{"Key":"of utterances","Fragments":["(or"]},{"Key":"utterances (or","Fragments":["lacks"]},{"Key":"(or lacks","Fragments":["thereof)"]},{"Key":"lacks thereof)","Fragments":["into"]},{"Key":"thereof) into","Fragments":["separate"]},{"Key":"up. :","Fragments":[")"]},{"Key":" Moved","Fragments":["the","anonymous"]},{"Key":"Moved the","Fragments":["functions"]},{"Key":"that determine","Fragments":["statement"]},{"Key":"determine statement","Fragments":["type"]},{"Key":"statement type","Fragments":["out"]},{"Key":"type out","Fragments":["to"]},{"Key":"statement module.","Fragments":["And"]},{"Key":"module. And","Fragments":["cleaned"]},{"Key":"And cleaned","Fragments":["up"]},{"Key":"the empty?","Fragments":["definition."]},{"Key":"empty? definition.","Fragments":["I"]},{"Key":"didn't need","Fragments":["to","to","to","the"]},{"Key":"use codepoints","Fragments":["there."]},{"Key":"get my","Fragments":["head","first","head"]},{"Key":"functional ways,","Fragments":["and"]},{"Key":"and Elixir's","Fragments":["syntactical","style"]},{"Key":"Elixir's syntactical","Fragments":["sugar."]},{"Key":"syntactical sugar.","Fragments":["Thanks"]},{"Key":"sugar. Thanks","Fragments":["for"]},{"Key":"general I","Fragments":["would","find","would"]},{"Key":"make anything","Fragments":["that"]},{"Key":"API a","Fragments":["private"]},{"Key":"private function.","Fragments":["I","Private"]},{"Key":"got sloppy","Fragments":["here"]},{"Key":"sloppy here","Fragments":["and"]},{"Key":"more exposed","Fragments":["than"]},{"Key":"exposed than","Fragments":["needs"]},{"Key":"than needs","Fragments":["to"]},{"Key":" Pushing","Fragments":["a"]},{"Key":"Pushing a","Fragments":["new"]},{"Key":"think shorthand","Fragments":["notation"]},{"Key":"notation might","Fragments":["make"]},{"Key":"your filter","Fragments":["function"]},{"Key":"function easier","Fragments":["to"]},{"Key":"read, what","Fragments":["do"]},{"Key":"once instead","Fragments":["of","of","of","of"]},{"Key":"of repeating","Fragments":["the"]},{"Key":"repeating the","Fragments":["sort","bulk","same","list"]},{"Key":"sort for","Fragments":["each"]},{"Key":"prefer that","Fragments":["the"]},{"Key":"string checks","Fragments":["were","into"]},{"Key":"checks were","Fragments":["extracted"]},{"Key":"were extracted","Fragments":["into"]},{"Key":" @jena","Fragments":["I've"]},{"Key":"@jena I've","Fragments":["updated"]},{"Key":"updated my","Fragments":["solution,","code","solution"]},{"Key":"solution, though","Fragments":["I"]},{"Key":"wasn't too","Fragments":["sure"]},{"Key":"too sure","Fragments":["if"]},{"Key":"got your","Fragments":["'one-liner"]},{"Key":"your 'one-liner","Fragments":["functions'"]},{"Key":"'one-liner functions'","Fragments":["suggestion"]},{"Key":"functions' suggestion","Fragments":["right."]},{"Key":"the giant","Fragments":["case"]},{"Key":"giant case","Fragments":["statement,","statement"]},{"Key":"case statement,","Fragments":["but"]},{"Key":"statement, but","Fragments":["I"]},{"Key":"It's probably","Fragments":["overly","better","more","a","better","a"]},{"Key":"`blank?` doesn't","Fragments":["really"]},{"Key":"really seem","Fragments":["like","to"]},{"Key":"like domain","Fragments":["language"]},{"Key":"domain language","Fragments":["to","into"]},{"Key":"me. The","Fragments":["domain","language"]},{"Key":"The domain","Fragments":["is"]},{"Key":"domain is","Fragments":["how"]},{"Key":"Bob thinks","Fragments":["about"]},{"Key":"thinks about","Fragments":["things"]},{"Key":"about things","Fragments":["people"]},{"Key":"things people","Fragments":["say"]},{"Key":"people say","Fragments":["to"]},{"Key":"say to","Fragments":["him;"]},{"Key":"to him;","Fragments":["it"]},{"Key":"him; it","Fragments":["doesn't"]},{"Key":"like he","Fragments":["would"]},{"Key":"he would","Fragments":["call"]},{"Key":"would call","Fragments":["your"]},{"Key":"call your","Fragments":["statement"]},{"Key":"your statement","Fragments":["\"blank\"."]},{"Key":"might look","Fragments":["into"]},{"Key":"into using","Fragments":["the","OTP."]},{"Key":" fn(candidate)","Fragments":["-\u0026gt;"]},{"Key":"fn(candidate) -\u0026gt;","Fragments":["is_anagram(word,"]},{"Key":"-\u0026gt; is_anagram(word,","Fragments":["candidate)"]},{"Key":"is_anagram(word, candidate)","Fragments":["end"]},{"Key":" is_anagram(word,","Fragments":["\u0026amp;1)"]},{"Key":"you deciding","Fragments":["which"]},{"Key":"deciding which","Fragments":["functions"]},{"Key":"which functions","Fragments":["to"]},{"Key":"small thing:","Fragments":["is","you","`\u0026({\u00261,","you","you"]},{"Key":"thing: is","Fragments":["the"]},{"Key":"the `verse(1)`","Fragments":["clause"]},{"Key":"`verse(1)` clause","Fragments":["necessary?"]},{"Key":"clause necessary?","Fragments":["It"]},{"Key":"necessary? It","Fragments":["seems"]},{"Key":"the `verse(n)`","Fragments":["clause"]},{"Key":"`verse(n)` clause","Fragments":["would"]},{"Key":"clause would","Fragments":["handle"]},{"Key":"good bit","Fragments":["of"]},{"Key":"DRY that","Fragments":["up"]},{"Key":"up so","Fragments":["that","that"]},{"Key":"that e.g.","Fragments":["\"x"]},{"Key":"e.g. \"x","Fragments":["bottles"]},{"Key":"\"x bottles","Fragments":["of"]},{"Key":"of beer\"","Fragments":["is"]},{"Key":"beer\" is","Fragments":["only"]},{"Key":"only generated","Fragments":["in"]},{"Key":"generated in","Fragments":["one"]},{"Key":"one place?","Fragments":["There's"]},{"Key":"place? There's","Fragments":["a"]},{"Key":"between removing","Fragments":["duplication"]},{"Key":"removing duplication","Fragments":["and"]},{"Key":"duplication and","Fragments":["readability,","push"]},{"Key":"and readability,","Fragments":["but"]},{"Key":"have plenty","Fragments":["of"]},{"Key":"plenty of","Fragments":["readability"]},{"Key":"readability room","Fragments":["currently."]},{"Key":"see pattern","Fragments":["matching"]},{"Key":"clauses when","Fragments":["it's"]},{"Key":"when it's","Fragments":["a","only","explicitly","fast","slow.","appropriate","appropriate"]},{"Key":"a strict","Fragments":["equality"]},{"Key":"strict equality","Fragments":["check","(`===`)","(`===`)"]},{"Key":"equality check","Fragments":["and"]},{"Key":"check and","Fragments":["you","once"]},{"Key":"don't use","Fragments":["the","them","parentheses","parentheses","pattern","parens","`signature`","`id`","enough"]},{"Key":"worth it","Fragments":["to","to","in","to","keeping"]},{"Key":"function you're","Fragments":["passing"]},{"Key":"you're passing","Fragments":["to","in"]},{"Key":"passing to","Fragments":["`filter`","the"]},{"Key":"to `filter`","Fragments":["and"]},{"Key":"`filter` and","Fragments":["use","Elixir","`append`"]},{"Key":"matching? It","Fragments":["seems"]},{"Key":"about `def`.","Fragments":["What"]},{"Key":"`def`. What","Fragments":["I"]},{"Key":"say is","Fragments":["that","that"]},{"Key":"didn't see","Fragments":["the","how","it.","the","a"]},{"Key":"the benefit","Fragments":["of","as","is","of"]},{"Key":"of nesting","Fragments":["in","calls"]},{"Key":"nesting in","Fragments":["this"]},{"Key":"problem. The","Fragments":["`Anagram`","time"]},{"Key":"The `Anagram`","Fragments":["module"]},{"Key":"`Anagram` module","Fragments":["may"]},{"Key":"module may","Fragments":["be"]},{"Key":"flexible and","Fragments":["easier"]},{"Key":"read if","Fragments":["these","they","it","they"]},{"Key":"if these","Fragments":["three"]},{"Key":"these three","Fragments":["functions"]},{"Key":"the top-level","Fragments":["in","`match`","method","`compare/2`"]},{"Key":"top-level in","Fragments":["the"]},{"Key":"the module.","Fragments":["If","Were"]},{"Key":"module. If","Fragments":["these"]},{"Key":"If these","Fragments":["functions"]},{"Key":"functions require","Fragments":["nesting,"]},{"Key":"require nesting,","Fragments":["that"]},{"Key":"nesting, that","Fragments":["might"]},{"Key":"a sign","Fragments":["they","they"]},{"Key":"sign they","Fragments":["are","need"]},{"Key":"are too","Fragments":["entangled","many","much"]},{"Key":"too entangled","Fragments":["with"]},{"Key":"entangled with","Fragments":["each"]},{"Key":"with each","Fragments":["other."]},{"Key":"use nesting,","Fragments":["you"]},{"Key":"nesting, you","Fragments":["might"]},{"Key":"consider why","Fragments":["`is_anagram`"]},{"Key":"why `is_anagram`","Fragments":["should"]},{"Key":"`is_anagram` should","Fragments":["be"]},{"Key":"be closed","Fragments":["within"]},{"Key":"within `match`","Fragments":["while"]},{"Key":"`match` while","Fragments":["`characters_used_in`"]},{"Key":"while `characters_used_in`","Fragments":["is"]},{"Key":"`characters_used_in` is","Fragments":["given"]},{"Key":"is given","Fragments":["its"]},{"Key":"given its","Fragments":["own"]},{"Key":"own top-level","Fragments":["status."]},{"Key":"that `List.foldl`.","Fragments":["You"]},{"Key":"`List.foldl`. You","Fragments":["can"]},{"Key":"update the","Fragments":["`Dict`","`Dict`","HashDict","test","submission.","record","comments","implementation"]},{"Key":"the `Dict`","Fragments":["in","starting","versions.","versions.","functions.","functions."]},{"Key":"`Dict` in","Fragments":["`increment`."]},{"Key":"in `increment`.","Fragments":["As"]},{"Key":"`increment`. As","Fragments":["for"]},{"Key":"regex, you're","Fragments":["on"]},{"Key":"you're on","Fragments":["the"]},{"Key":"right track.","Fragments":["Look"]},{"Key":"track. Look","Fragments":["in"]},{"Key":"Look in","Fragments":["`Regex`."]},{"Key":"in `Regex`.","Fragments":["It"]},{"Key":"`Regex`. It","Fragments":["just"]},{"Key":"It just","Fragments":["changed","reads"]},{"Key":"just changed","Fragments":["recently,"]},{"Key":"changed recently,","Fragments":["though,"]},{"Key":"recently, though,","Fragments":["so"]},{"Key":"though, so","Fragments":["you'll","I'm"]},{"Key":"you'll also","Fragments":["need","need"]},{"Key":"also need","Fragments":["`List`","to","a"]},{"Key":"need `List`","Fragments":["to"]},{"Key":"`List` to","Fragments":["manipulate"]},{"Key":"manipulate it's","Fragments":["output."]},{"Key":"good. Just","Fragments":["a","wondering","one","one","be"]},{"Key":"- Someone","Fragments":["else"]},{"Key":"Someone else","Fragments":["suggested","(Katrina"]},{"Key":"else suggested","Fragments":["to"]},{"Key":"suggested to","Fragments":["me","me","me"]},{"Key":"that `List.concat`","Fragments":["is"]},{"Key":"- You","Fragments":["can","can","could"]},{"Key":"`Dict` starting","Fragments":["in"]},{"Key":"starting in","Fragments":["Elixir"]},{"Key":"Elixir `v10.0.1`,","Fragments":["which"]},{"Key":"`v10.0.1`, which","Fragments":["helps"]},{"Key":"which helps","Fragments":["with"]},{"Key":"use one-liner","Fragments":["functions"]},{"Key":"one-liner functions","Fragments":["for"]},{"Key":"the shorter","Fragments":["functions.","block","form","ones"]},{"Key":"shorter functions.","Fragments":["You"]},{"Key":"functions. You","Fragments":["certainly","did"]},{"Key":"You certainly","Fragments":["don't"]},{"Key":"have to.","Fragments":["A"]},{"Key":"to. A","Fragments":["couple"]},{"Key":"these would","Fragments":["be"]},{"Key":"be good","Fragments":["candidates.","idioms"]},{"Key":"the interpolated","Fragments":["word","string"]},{"Key":"interpolated word","Fragments":["list"]},{"Key":"word list","Fragments":["--","over","it","it"]},{"Key":"list --","Fragments":["I"]},{"Key":"list might","Fragments":["be"]},{"Key":"be better.","Fragments":["What"]},{"Key":"better. What","Fragments":["do"]},{"Key":" Brand","Fragments":["new","new"]},{"Key":"Brand new","Fragments":["to","implementation,"]},{"Key":"this isn't","Fragments":["idiomatic","really","a"]},{"Key":"isn't idiomatic","Fragments":["at"]},{"Key":"idiomatic at","Fragments":["all.","this"]},{"Key":"all. The","Fragments":["idea"]},{"Key":"code being","Fragments":["a"]},{"Key":"a giant","Fragments":["case","DNA"]},{"Key":"little unsettling.","Fragments":["But,"]},{"Key":"unsettling. But,","Fragments":["hey,"]},{"Key":"But, hey,","Fragments":["it"]},{"Key":"hey, it","Fragments":["works."]},{"Key":" Correct.","Fragments":["I","Your"]},{"Key":"Correct. I","Fragments":["would"]},{"Key":"would follow","Fragments":["crazymykl's"]},{"Key":"follow crazymykl's","Fragments":["suggestion"]},{"Key":"crazymykl's suggestion","Fragments":["for"]},{"Key":"that method","Fragments":["in","representing","was","is"]},{"Key":"good points,","Fragments":["and"]},{"Key":"points, and","Fragments":["that"]},{"Key":"that equivalence","Fragments":["check"]},{"Key":"equivalence check","Fragments":["syntax"]},{"Key":"check syntax","Fragments":["is"]},{"Key":"can imagine","Fragments":["you"]},{"Key":"imagine you","Fragments":["could"]},{"Key":"could keep","Fragments":["`is_uppercase?`","the"]},{"Key":"keep `is_uppercase?`","Fragments":["if"]},{"Key":"`is_uppercase?` if","Fragments":["it"]},{"Key":"public method","Fragments":["in"]},{"Key":"different module","Fragments":["and"]},{"Key":"and required","Fragments":["for"]},{"Key":"required for","Fragments":["your","flat_map?","pipeline"]},{"Key":"your application","Fragments":["elsewhere."]},{"Key":" http://elixir-lang.org/docs/stable/Kernel.html#|\u0026gt;/2","Fragments":["Replace"]},{"Key":"http://elixir-lang.org/docs/stable/Kernel.html#|\u0026gt;/2 Replace","Fragments":["`\u0026gt;`"]},{"Key":"Replace `\u0026gt;`","Fragments":["with"]},{"Key":"`\u0026gt;` with","Fragments":["\u0026gt;"]},{"Key":"with \u0026gt;","Fragments":["in"]},{"Key":"\u0026gt; in","Fragments":["this"]},{"Key":"that bad","Fragments":["boy","either,","sorting"]},{"Key":"bad boy","Fragments":["to"]},{"Key":"boy to","Fragments":["string"]},{"Key":"to string","Fragments":["your","functions"]},{"Key":"string your","Fragments":["method"]},{"Key":"you reduce","Fragments":["the"]},{"Key":"your methods,","Fragments":["following"]},{"Key":"methods, following","Fragments":["the"]},{"Key":"the single","Fragments":["responsibility","responsibility","line","Enum.filter."]},{"Key":"single responsibility","Fragments":["principle?","principle"]},{"Key":" Alright,","Fragments":["time"]},{"Key":"Alright, time","Fragments":["to"]},{"Key":"to call","Fragments":["this","downcase","a","`question?`,","`Dict.update`","it","`HashDict`","the","`HashDict`","the","the","`Dict.some_fun`","them","`Dict`","`HashDict`","`Dict.some_fun`","List.flatten/1","just_letters"]},{"Key":"call this","Fragments":["one"]},{"Key":"one good","Fragments":["enough."]},{"Key":"the multi-line","Fragments":["methods"]},{"Key":"multi-line methods","Fragments":["personally."]},{"Key":"methods personally.","Fragments":["It"]},{"Key":"personally. It","Fragments":["separates"]},{"Key":"It separates","Fragments":["the"]},{"Key":"separates the","Fragments":["expressive"]},{"Key":"the expressive","Fragments":["function"]},{"Key":"expressive function","Fragments":["name"]},{"Key":"name from","Fragments":["the"]},{"Key":"logic of","Fragments":["the","anagram?.","replacing","the","a"]},{"Key":"function. If","Fragments":["I","you"]},{"Key":"line function,","Fragments":["it's"]},{"Key":"function, it's","Fragments":["only"]},{"Key":"it's only","Fragments":["for","used","used","a","called","for","used","the"]},{"Key":"only for","Fragments":["very","internal","the"]},{"Key":"for very","Fragments":["basic","simple","large","efficiently","large","simple"]},{"Key":"very basic","Fragments":["functions"]},{"Key":"basic functions","Fragments":["like"]},{"Key":"like `fibonacci(1),","Fragments":["do:"]},{"Key":"`fibonacci(1), do:","Fragments":["1`."]},{"Key":"Thanks very","Fragments":["much.","much"]},{"Key":"very much.","Fragments":["I"]},{"Key":"much. I","Fragments":["was","kinda"]},{"Key":"was experimenting","Fragments":["with"]},{"Key":"experimenting with","Fragments":["parentheses","the"]},{"Key":"with parentheses","Fragments":["and","around","is"]},{"Key":"parentheses and","Fragments":["without"]},{"Key":"and without","Fragments":["and","duplication.","a"]},{"Key":"without and","Fragments":["left"]},{"Key":"and left","Fragments":["some","folding","them"]},{"Key":"left some","Fragments":["out"]},{"Key":"some out","Fragments":["when"]},{"Key":"out when","Fragments":["I"]},{"Key":"with them.","Fragments":["I'll"]},{"Key":"them. I'll","Fragments":["spin"]},{"Key":"I'll spin","Fragments":["up"]},{"Key":"spin up","Fragments":["another"]},{"Key":"another rev","Fragments":["with"]},{"Key":"rev with","Fragments":["your"]},{"Key":"comments in","Fragments":["mind.","your","the"]},{"Key":"Your `match_word`","Fragments":["function"]},{"Key":"`match_word` function","Fragments":["seems"]},{"Key":"function seems","Fragments":["more"]},{"Key":"an `anagram?`","Fragments":["function:"]},{"Key":"`anagram?` function:","Fragments":["It"]},{"Key":"function: It","Fragments":["takes"]},{"Key":"It takes","Fragments":["a","the"]},{"Key":"word and","Fragments":["sees","handles","the","`-`"]},{"Key":"and sees","Fragments":["if"]},{"Key":"sees if","Fragments":["it"]},{"Key":"anagram of","Fragments":["a","Tan...","banana"]},{"Key":"second word","Fragments":["and"]},{"Key":"handles all","Fragments":["of"]},{"Key":"the edge","Fragments":["cases.","case,"]},{"Key":"edge cases.","Fragments":["The"]},{"Key":"cases. The","Fragments":["current"]},{"Key":"current `anagram?`","Fragments":["function"]},{"Key":"`anagram?` function","Fragments":["is","and"]},{"Key":"a `match_letters`","Fragments":["function."]},{"Key":"`match_letters` function.","Fragments":["If"]},{"Key":"your `match_word`","Fragments":["function,"]},{"Key":"`match_word` function,","Fragments":["you"]},{"Key":"downcasing into","Fragments":["a"]},{"Key":"separate method","Fragments":["as"]},{"Key":"a validation","Fragments":["method","check."]},{"Key":"validation method","Fragments":["or"]},{"Key":"method or","Fragments":["pre-processing"]},{"Key":"or pre-processing","Fragments":["method."]},{"Key":" _Two","Fragments":["other"]},{"Key":"_Two other","Fragments":["things_"]},{"Key":"- Do","Fragments":["you","you"]},{"Key":"need all","Fragments":["of","of"]},{"Key":"be private?","Fragments":["Some"]},{"Key":"private? Some","Fragments":["of"]},{"Key":"them could","Fragments":["be"]},{"Key":"be very","Fragments":["useful","readable."]},{"Key":"very useful","Fragments":["to","tool","invariant","as"]},{"Key":"make public.","Fragments":["I'll"]},{"Key":"public. I'll","Fragments":["usually"]},{"Key":"I'll usually","Fragments":["default"]},{"Key":"usually default","Fragments":["to"]},{"Key":"default to","Fragments":["public"]},{"Key":"to public","Fragments":["methods"]},{"Key":"methods unless","Fragments":["they"]},{"Key":"unless they","Fragments":["have"]},{"Key":"have dependencies","Fragments":["on"]},{"Key":"dependencies on","Fragments":["the"]},{"Key":"in which","Fragments":["they","case","the","any"]},{"Key":"which they","Fragments":["are"]},{"Key":"- In","Fragments":["your","`to_rna`,"]},{"Key":"In your","Fragments":["word","`increment_count`","original","implementation,","Dict.update"]},{"Key":"your word","Fragments":["equivalence"]},{"Key":"word equivalence","Fragments":["check,"]},{"Key":"equivalence check,","Fragments":["you"]},{"Key":"check, you","Fragments":["could"]},{"Key":"this instead:","Fragments":["`defp"]},{"Key":"instead: `defp","Fragments":["anagram?(same_word,"]},{"Key":"`defp anagram?(same_word,","Fragments":["same_word),"]},{"Key":"anagram?(same_word, same_word),","Fragments":["do:"]},{"Key":"same_word), do:","Fragments":["false`."]},{"Key":"do: false`.","Fragments":["Dave"]},{"Key":"false`. Dave","Fragments":["Thomas'"]},{"Key":"Dave Thomas'","Fragments":["book"]},{"Key":"Thomas' book","Fragments":["taught"]},{"Key":"book taught","Fragments":["me"]},{"Key":"taught me","Fragments":["that"]},{"Key":"good. My","Fragments":["only"]},{"Key":"only comment","Fragments":["would"]},{"Key":"comment would","Fragments":["be"]},{"Key":"defp shouting?(phrase),","Fragments":["do:"]},{"Key":"shouting?(phrase), do:","Fragments":["String.upcase(phrase)"]},{"Key":"do: String.upcase(phrase)","Fragments":["=="]},{"Key":"String.upcase(phrase) ==","Fragments":["phrase"]},{"Key":"the returns","Fragments":["from"]},{"Key":"returns from","Fragments":["the"]},{"Key":"condition cases","Fragments":["on"]},{"Key":"cases on","Fragments":["a"]},{"Key":"new line","Fragments":["either,"]},{"Key":"line either,","Fragments":["but"]},{"Key":"either, but","Fragments":["it","I've","that's","most"]},{"Key":"good in","Fragments":["this","general.","general,","general.","the"]},{"Key":"good start.","Fragments":["Functional"]},{"Key":"start. Functional","Fragments":["elixir"]},{"Key":"Functional elixir","Fragments":["is"]},{"Key":"generally supposed","Fragments":["to"]},{"Key":"be without","Fragments":["conditions,"]},{"Key":"without conditions,","Fragments":["but"]},{"Key":"conditions, but","Fragments":["this"]},{"Key":"this first","Fragments":["assignment"]},{"Key":"first assignment","Fragments":["comes"]},{"Key":"assignment comes","Fragments":["out"]},{"Key":"the gate","Fragments":["with"]},{"Key":"gate with","Fragments":["one."]},{"Key":"with one.","Fragments":["Crazy,"]},{"Key":"one. Crazy,","Fragments":["right?"]},{"Key":"Your parenthesis","Fragments":["aren't"]},{"Key":"parenthesis aren't","Fragments":["all"]},{"Key":"aren't all","Fragments":["symmetrical"]},{"Key":"all symmetrical","Fragments":["in"]},{"Key":"symmetrical in","Fragments":["the"]},{"Key":"`cond`, and","Fragments":["it's"]},{"Key":"little redundant","Fragments":["to"]},{"Key":"redundant to","Fragments":["have","have"]},{"Key":"a predicate","Fragments":["method/function","function","function","method","method,"]},{"Key":"predicate method/function","Fragments":["that"]},{"Key":"method/function that","Fragments":["is"]},{"Key":"is prefixed","Fragments":["with"]},{"Key":"do those","Fragments":["private","transformations","string"]},{"Key":"defp question?(statement),","Fragments":["do:"]},{"Key":"question?(statement), do:","Fragments":["String.ends_with?(statement,"]},{"Key":"do: String.ends_with?(statement,","Fragments":["?)"]},{"Key":" These","Fragments":["are","way"]},{"Key":"These are","Fragments":["all","not","more"]},{"Key":"all fairly","Fragments":["nitpicky"]},{"Key":"fairly nitpicky","Fragments":["things,"]},{"Key":"nitpicky things,","Fragments":["though."]},{"Key":"things, though.","Fragments":["Well"]},{"Key":"though. Well","Fragments":["done"]},{"Key":"Well done","Fragments":["on"]},{"Key":"done on","Fragments":["your"]},{"Key":"first foray","Fragments":["into","into"]},{"Key":"foray into","Fragments":["elixir.","Elixir."]},{"Key":"great feedback.","Fragments":["Revision","I"]},{"Key":"feedback. Revision","Fragments":["coming."]},{"Key":" Indeed.","Fragments":["I","You've","Pattern","That","In"]},{"Key":"Indeed. I","Fragments":["like"]},{"Key":"like crazymykl's","Fragments":["regex"]},{"Key":"crazymykl's regex","Fragments":["here."]},{"Key":"regex here.","Fragments":["I"]},{"Key":"here. I","Fragments":["also"]},{"Key":"that not","Fragments":["using","the","much"]},{"Key":"the optimal","Fragments":["solution"]},{"Key":"optimal solution","Fragments":["in"]},{"Key":"solution in","Fragments":["the","clojure","the","which","Haskell.","mind?","hand."]},{"Key":"end. I","Fragments":["like"]},{"Key":"that crazymykl","Fragments":["used"]},{"Key":"crazymykl used","Fragments":["`\\A`"]},{"Key":"used `\\A`","Fragments":["and"]},{"Key":"`\\A` and","Fragments":["`\\z`"]},{"Key":"and `\\z`","Fragments":["because"]},{"Key":"`\\z` because","Fragments":["that"]},{"Key":"because that","Fragments":["will","makes","has"]},{"Key":"that will","Fragments":["cover","match","be","lead","usually","actually","decide","work","hopefully"]},{"Key":"will cover","Fragments":["the"]},{"Key":"cover the","Fragments":["entire"]},{"Key":"entire string,","Fragments":["even","then"]},{"Key":"string, even","Fragments":["multi-line"]},{"Key":"even multi-line","Fragments":["strings."]},{"Key":"multi-line strings.","Fragments":["If"]},{"Key":"strings. If","Fragments":["he"]},{"Key":"If he","Fragments":["had"]},{"Key":"he had","Fragments":["used"]},{"Key":"used `^`","Fragments":["and"]},{"Key":"`^` and","Fragments":["`$`"]},{"Key":"and `$`","Fragments":["then"]},{"Key":"`$` then","Fragments":["the"]},{"Key":"regex would","Fragments":["match"]},{"Key":"would match","Fragments":["whitespace","the","on","if","if"]},{"Key":"match whitespace","Fragments":["lines"]},{"Key":"whitespace lines","Fragments":["of"]},{"Key":"a multi-line","Fragments":["string"]},{"Key":"multi-line string","Fragments":["when"]},{"Key":"string when","Fragments":["the"]},{"Key":"full string","Fragments":["could"]},{"Key":"string could","Fragments":["be"]},{"Key":"a speech","Fragments":["or"]},{"Key":"speech or","Fragments":["something"]},{"Key":"that isn't","Fragments":["silence.","a","even","too","a"]},{"Key":"I'm making","Fragments":["my"]},{"Key":"making my","Fragments":["first","experience","code"]},{"Key":"into Elixir.","Fragments":["This"]},{"Key":"Elixir. This","Fragments":["seems","kind","is"]},{"Key":"sure I'm","Fragments":["missing"]},{"Key":"I'm missing","Fragments":["some","cover","something.","something.","something,","something"]},{"Key":"missing some","Fragments":["good"]},{"Key":"Great job,","Fragments":["I'd"]},{"Key":"job, I'd","Fragments":["just"]},{"Key":"just swap","Fragments":["`String.last`"]},{"Key":"swap `String.last`","Fragments":["on"]},{"Key":"`String.last` on","Fragments":["line"]},{"Key":"line 22","Fragments":["with"]},{"Key":"22 with","Fragments":["`String.ends_with?`"]},{"Key":"`String.ends_with?` simply","Fragments":["because"]},{"Key":"more explicitly,","Fragments":["but"]},{"Key":"explicitly, but","Fragments":["it's"]},{"Key":"a nitpick","Fragments":[":-)","it","after"]},{"Key":"line 32,","Fragments":["you"]},{"Key":"32, you","Fragments":["could"]},{"Key":"a pipe:","Fragments":["`String.strip(str)"]},{"Key":"pipe: `String.strip(str)","Fragments":["|\u0026gt;"]},{"Key":"`String.strip(str) |\u0026gt;","Fragments":["String.length`."]},{"Key":"use `String.ends_with?`","Fragments":["to"]},{"Key":"simplify line","Fragments":["12."]},{"Key":"make `is_question?`,","Fragments":["`is_silence?`,"]},{"Key":"`is_question?`, `is_silence?`,","Fragments":["`is_shouted?`"]},{"Key":"`is_silence?`, `is_shouted?`","Fragments":["private"]},{"Key":"`is_shouted?` private","Fragments":["(you"]},{"Key":"private (you","Fragments":["define"]},{"Key":"(you define","Fragments":["them"]},{"Key":"define them","Fragments":["with"]},{"Key":"them with","Fragments":["`defp`.","`alias`","a","[","the","`["]},{"Key":"Not totally","Fragments":["happy"]},{"Key":"totally happy","Fragments":["with"]},{"Key":"this one...","Fragments":["`match_word`"]},{"Key":"one... `match_word`","Fragments":["feels"]},{"Key":"`match_word` feels","Fragments":["really"]},{"Key":"feels really","Fragments":["odd.","sluggish"]},{"Key":"``` \"\"","Fragments":["=="]},{"Key":"== String.strip(phrase)","Fragments":["```"]},{"Key":"String.strip(phrase) ```","Fragments":["which"]},{"Key":"``` which","Fragments":["would"]},{"Key":"make things","Fragments":["more","clearer."]},{"Key":"things more","Fragments":["obvious"]},{"Key":"more obvious","Fragments":["and","if"]},{"Key":"obvious and","Fragments":["easy.","feels"]},{"Key":"and easy.","Fragments":["I"]},{"Key":"easy. I","Fragments":["was"]},{"Key":"just struggling","Fragments":["with"]},{"Key":"struggling with","Fragments":["the"]},{"Key":"simple regex","Fragments":["that"]},{"Key":"could detect","Fragments":["a"]},{"Key":"detect a","Fragments":["string"]},{"Key":"string only","Fragments":["containing"]},{"Key":"only containing","Fragments":["whitespace."]},{"Key":"containing whitespace.","Fragments":["=/"]},{"Key":" @henry,","Fragments":["yep"]},{"Key":"@henry, yep","Fragments":["you"]},{"Key":"yep you","Fragments":["are"]},{"Key":" `Regex.scan`","Fragments":["would","returns"]},{"Key":"`Regex.scan` would","Fragments":["replace"]},{"Key":"would replace","Fragments":["the"]},{"Key":"the combination","Fragments":["of","of"]},{"Key":"combination of","Fragments":["`Regex.replace`","features","pattern","really","\u003ccode\u003eString.is_empty?\u003c/code\u003e","those"]},{"Key":"of `Regex.replace`","Fragments":["and"]},{"Key":"`Regex.replace` and","Fragments":["`String.split`","`String.split`"]},{"Key":"and `String.split`","Fragments":["you're","with"]},{"Key":"`String.split` you're","Fragments":["using"]},{"Key":"using here,","Fragments":["and"]},{"Key":"here, and","Fragments":["be","this","in"]},{"Key":"I dig","Fragments":["the"]},{"Key":"dig the","Fragments":["recursive"]},{"Key":"recursive call","Fragments":["to","is","pretty.","must"]},{"Key":"to `do_count`.","Fragments":["`List.foldl/3`"]},{"Key":"`do_count`. `List.foldl/3`","Fragments":["could"]},{"Key":"`List.foldl/3` could","Fragments":["work"]},{"Key":"could work","Fragments":["too,","for"]},{"Key":"work too,","Fragments":["though."]},{"Key":"is **literal**ly","Fragments":["a"]},{"Key":"**literal**ly a","Fragments":["much"]},{"Key":"probably put","Fragments":["the"]},{"Key":"that `fn`","Fragments":["on"]},{"Key":"`fn` on","Fragments":["its"]},{"Key":"on its","Fragments":["own","own?"]},{"Key":"own line,","Fragments":["or"]},{"Key":"line, or","Fragments":["move"]},{"Key":"or move","Fragments":["it","you","on."]},{"Key":"I disagree","Fragments":["with","that"]},{"Key":"with @clarabelle","Fragments":["about"]},{"Key":"@clarabelle about","Fragments":["`String.downcase`"]},{"Key":"about `String.downcase`","Fragments":["being"]},{"Key":"`String.downcase` being","Fragments":["in"]},{"Key":"being in","Fragments":["the","a"]},{"Key":"pipeline. I","Fragments":["think","thought"]},{"Key":"it belongs","Fragments":["there."]},{"Key":"better stylistically","Fragments":["it"]},{"Key":"stylistically it","Fragments":["the"]},{"Key":"|\u0026gt; is","Fragments":["on"]},{"Key":"each line,","Fragments":["indented"]},{"Key":"line, indented","Fragments":["one"]},{"Key":"indented one","Fragments":["level","step"]},{"Key":"level from","Fragments":["the"]},{"Key":"the original","Fragments":["source.","key","exercises","tests,","function","collection","version.","was","tests","value.","solution"]},{"Key":"new syntax","Fragments":["for"]},{"Key":"for \u0026amp;","Fragments":["lambdas"]},{"Key":"\u0026amp; lambdas","Fragments":["now,"]},{"Key":"lambdas now,","Fragments":["but"]},{"Key":"now, but","Fragments":["I","I","I","I'm","it"]},{"Key":"that function","Fragments":["is","that","inline","less","doesn't","takes","argument"]},{"Key":"is doing","Fragments":["enough","two","quite","on","with","without","a"]},{"Key":"doing enough","Fragments":["to"]},{"Key":"to warrant","Fragments":["a"]},{"Key":"warrant a","Fragments":["name."]},{"Key":"operator instead","Fragments":["of"]},{"Key":"use more","Fragments":["domain-y","expressive","multi-clause","multi-clause"]},{"Key":"more domain-y","Fragments":["names"]},{"Key":"domain-y names","Fragments":["e."]},{"Key":"names e.","Fragments":["g."]},{"Key":"e. g.","Fragments":["`is_shouting?`,"]},{"Key":"g. `is_shouting?`,","Fragments":["`is_questioning?`."]},{"Key":"I'm with","Fragments":["yortz."]},{"Key":"with yortz.","Fragments":["Use"]},{"Key":"yortz. Use","Fragments":["a"]},{"Key":"Use a","Fragments":["\u003ccode\u003efold\u003c/code\u003e"]},{"Key":"a \u003ccode\u003efold\u003c/code\u003e","Fragments":["or"]},{"Key":"\u003ccode\u003efold\u003c/code\u003e or","Fragments":["\u003ccode\u003ereduce\u003c/code\u003e."]},{"Key":" Although","Fragments":["checking","from","it","it"]},{"Key":"Although checking","Fragments":["a"]},{"Key":"checking a","Fragments":["for"]},{"Key":"a for","Fragments":["a","loop"]},{"Key":"of legth","Fragments":["0"]},{"Key":"legth 0","Fragments":["is"]},{"Key":"fine, i","Fragments":["think"]},{"Key":"i think","Fragments":["it's","it"]},{"Key":"more direct","Fragments":["to","for","and"]},{"Key":"direct to","Fragments":["compare"]},{"Key":"compare with","Fragments":["an","`base`.","if/else","\"\""]},{"Key":"string literal.","Fragments":["There"]},{"Key":"literal. There","Fragments":["might"]},{"Key":"There might","Fragments":["be"]},{"Key":"be still","Fragments":["another"]},{"Key":"still another","Fragments":["way,"]},{"Key":"another way,","Fragments":["but"]},{"Key":"way, but","Fragments":["I'm","yet,","they","I"]},{"Key":"I'm drawing","Fragments":["a"]},{"Key":"drawing a","Fragments":["`blank?`."]},{"Key":"also wouldn't","Fragments":["make"]},{"Key":"wouldn't make","Fragments":["`is_uppercase`","any"]},{"Key":"make `is_uppercase`","Fragments":["into"]},{"Key":"`is_uppercase` into","Fragments":["its"]},{"Key":"own function,","Fragments":["since"]},{"Key":"one place","Fragments":["and","to","in"]},{"Key":"and does","Fragments":["not","not"]},{"Key":"not represent","Fragments":["a"]},{"Key":"represent a","Fragments":["domain"]},{"Key":"I'm novice","Fragments":["in"]},{"Key":"novice in","Fragments":["elixir"]},{"Key":"elixir so,","Fragments":["probably"]},{"Key":"so, probably","Fragments":["my"]},{"Key":"probably my","Fragments":["solution"]},{"Key":"my solution","Fragments":["it's","by","so","to","in","would","is","to"]},{"Key":"solution it's","Fragments":["not"]},{"Key":"not right","Fragments":["due",","]},{"Key":"right due","Fragments":["to"]},{"Key":"approach being","Fragments":["truly"]},{"Key":"being truly","Fragments":["functional...","nickpicky"]},{"Key":"truly functional...","Fragments":["The"]},{"Key":"functional... The","Fragments":["`cond`"]},{"Key":"The `cond`","Fragments":["statement","with"]},{"Key":"`cond` statement","Fragments":["is"]},{"Key":"what bothers","Fragments":["me"]},{"Key":"bothers me","Fragments":["the","a"]},{"Key":"most but","Fragments":["I"]},{"Key":"alternative that","Fragments":["looked","avoids"]},{"Key":"that looked","Fragments":["better"]},{"Key":"looked better","Fragments":["than"]},{"Key":" Ideas","Fragments":["welcome"]},{"Key":"Ideas welcome","Fragments":[":-)"]},{"Key":"the `is_list`","Fragments":["guarded"]},{"Key":"`is_list` guarded","Fragments":["clauses"]},{"Key":"guarded clauses","Fragments":["in"]},{"Key":"clauses in","Fragments":["`Words`?","function","case","Erlang","use."]},{"Key":" @zetta","Fragments":["agreed"]},{"Key":"@zetta agreed","Fragments":[":)"]},{"Key":"couldn't get","Fragments":["the","it","that","that","it"]},{"Key":"doctest to","Fragments":["work"]},{"Key":"work and","Fragments":["I'm"]},{"Key":" Hey,","Fragments":["thanks","me"]},{"Key":"Hey, thanks","Fragments":["for"]},{"Key":"feedback, you're","Fragments":["right"]},{"Key":"right this","Fragments":["stuff"]},{"Key":"this stuff","Fragments":["```"]},{"Key":"stuff ```","Fragments":["if"]},{"Key":"``` if","Fragments":["(String.upcase(phrase)"]},{"Key":"if (String.upcase(phrase)","Fragments":["=="]},{"Key":"(String.upcase(phrase) ==","Fragments":["phrase),"]},{"Key":"== phrase),","Fragments":["do:"]},{"Key":"phrase), do:","Fragments":["true"]},{"Key":"do: true","Fragments":["```"]},{"Key":"totally unnecessary","Fragments":["=)"]},{"Key":"I fiddled","Fragments":["around"]},{"Key":"fiddled around","Fragments":["with"]},{"Key":"regex at","Fragments":["the","all","all."]},{"Key":"the bottom","Fragments":["and"]},{"Key":"like my","Fragments":["current","own.","new"]},{"Key":"my current","Fragments":["solution(next","implementation?","implementation","solution","one."]},{"Key":"current solution(next","Fragments":["submission)."]},{"Key":"solution(next submission).","Fragments":["I"]},{"Key":"submission). I","Fragments":["don't"]},{"Key":"don't want","Fragments":["to","to","and","to","to","people","and","to","maybe","you","why","any","to","to","and","and","to","how","could","to"]},{"Key":"to strip","Fragments":["the"]},{"Key":"strip the","Fragments":["string","string"]},{"Key":"before matching.","Fragments":["Is"]},{"Key":"matching. Is","Fragments":["there"]},{"Key":"had submitted","Fragments":["this"]},{"Key":"the past,","Fragments":["but"]},{"Key":"past, but","Fragments":["not"]},{"Key":"Great ideas,","Fragments":["thanks!"]},{"Key":"After looking","Fragments":["at","at"]},{"Key":"at this,","Fragments":["I"]},{"Key":"this, I","Fragments":["saw","think"]},{"Key":"saw a","Fragments":["different","lot"]},{"Key":"different solution","Fragments":["where","in","using"]},{"Key":"solution where","Fragments":["the"]},{"Key":"the author","Fragments":["checked","of"]},{"Key":"author checked","Fragments":["for"]},{"Key":"checked for","Fragments":["`is_silence?`","ascii)."]},{"Key":"for `is_silence?`","Fragments":["before"]},{"Key":"`is_silence?` before","Fragments":["checking"]},{"Key":"before checking","Fragments":["for"]},{"Key":"for `is_all_caps?`","Fragments":["(I"]},{"Key":"`is_all_caps?` (I","Fragments":["think"]},{"Key":"think they","Fragments":["used"]},{"Key":"they used","Fragments":["`is_shouting?`"]},{"Key":"used `is_shouting?`","Fragments":["which"]},{"Key":"`is_shouting?` which","Fragments":["is"]},{"Key":"good alternative","Fragments":[";)."]},{"Key":"alternative ;).","Fragments":["If"]},{"Key":";). If","Fragments":["you"]},{"Key":"way then","Fragments":["you"]},{"Key":"for non-whitespace","Fragments":["characters","characters"]},{"Key":"non-whitespace characters","Fragments":["in","in"]},{"Key":"characters in","Fragments":["the","the","Elixir.","elixir,","the","a","`shouting?`,"]},{"Key":"the `is_all_caps?`","Fragments":["method","check."]},{"Key":"`is_all_caps?` method","Fragments":["unless"]},{"Key":"method unless","Fragments":["you"]},{"Key":"unless you","Fragments":["make","have"]},{"Key":"Thanks @sharon.","Fragments":["I"]},{"Key":"@sharon. I","Fragments":["do"]},{"Key":"the visual","Fragments":["communication"]},{"Key":"visual communication","Fragments":["that"]},{"Key":"communication that","Fragments":["putting"]},{"Key":"that putting","Fragments":["the"]},{"Key":"the pipelines","Fragments":["at"]},{"Key":"pipelines at","Fragments":["the"]},{"Key":"the front","Fragments":["gives","end"]},{"Key":"front gives","Fragments":[":)"]},{"Key":"Oh wow,","Fragments":["the"]},{"Key":"wow, the","Fragments":["\u0026amp;"]},{"Key":"\u0026amp; notation","Fragments":["is","for"]},{"Key":"notation is","Fragments":["awesome!"]},{"Key":"awesome! Like","Fragments":["Ruby"]},{"Key":"Like Ruby","Fragments":["symbol-to-proc"]},{"Key":"Ruby symbol-to-proc","Fragments":["but"]},{"Key":"symbol-to-proc but","Fragments":["more"]},{"Key":"but more","Fragments":["powerful."]},{"Key":"more powerful.","Fragments":["Submitting"]},{"Key":"powerful. Submitting","Fragments":["one"]},{"Key":"Submitting one","Fragments":["more"]},{"Key":"more revision.","Fragments":["Thanks"]},{"Key":"revision. Thanks","Fragments":["for"]},{"Key":"you build","Fragments":["functional","it"]},{"Key":"build functional","Fragments":["pipelines"]},{"Key":"functional pipelines","Fragments":["via"]},{"Key":"pipelines via","Fragments":["|\u0026gt;,"]},{"Key":"via |\u0026gt;,","Fragments":["and"]},{"Key":"|\u0026gt;, and","Fragments":["they"]},{"Key":"are longer","Fragments":["than"]},{"Key":"line, it's","Fragments":["idiomatic"]},{"Key":"it's idiomatic","Fragments":["to","to"]},{"Key":"to align","Fragments":["the"]},{"Key":"align the","Fragments":["operators"]},{"Key":"the operators","Fragments":["at"]},{"Key":"operators at","Fragments":["the"]},{"Key":"the beginning,","Fragments":["indented"]},{"Key":"beginning, indented","Fragments":["one"]},{"Key":"good. You","Fragments":["can","should","could","could","use","might"]},{"Key":"can drop","Fragments":["the"]},{"Key":"the `{a,","Fragments":["b}`"]},{"Key":"`{a, b}`","Fragments":["term;"]},{"Key":"b}` term;","Fragments":["a"]},{"Key":"term; a","Fragments":["`fn`"]},{"Key":"a `fn`","Fragments":["is"]},{"Key":"`fn` is","Fragments":["really"]},{"Key":"of cases","Fragments":["like:"]},{"Key":" {_a,","Fragments":["_a}","_b}"]},{"Key":"{_a, _a}","Fragments":["-\u0026gt;"]},{"Key":"_a} -\u0026gt;","Fragments":["true"]},{"Key":"{_a, _b}","Fragments":["-\u0026gt;"]},{"Key":"_b} -\u0026gt;","Fragments":["false"]},{"Key":"Nice! This","Fragments":["is"]},{"Key":"readable for","Fragments":["me."]},{"Key":"using `Dict.put`","Fragments":["and"]},{"Key":"`Dict.put` and","Fragments":["`Dict.get`."]},{"Key":"and `Dict.get`.","Fragments":["I"]},{"Key":"`Dict.get`. I","Fragments":["didn't"]},{"Key":"used all","Fragments":["`HashDict`","that"]},{"Key":"all `HashDict`","Fragments":["methods."]},{"Key":"`HashDict` methods.","Fragments":["Your"]},{"Key":"methods. Your","Fragments":["solution"]},{"Key":"Your solution","Fragments":["could"]},{"Key":"solution could","Fragments":["work"]},{"Key":"any count","Fragments":["operation"]},{"Key":"count operation","Fragments":["on"]},{"Key":"operation on","Fragments":["a"]},{"Key":"a `Dict`","Fragments":["data","function"]},{"Key":"`Dict` data","Fragments":["structure."]},{"Key":"your `increment_count`","Fragments":["I'd"]},{"Key":"`increment_count` I'd","Fragments":["use"]},{"Key":"arguments of","Fragments":["`counts,"]},{"Key":"of `counts,","Fragments":["word`"]},{"Key":"`counts, word`","Fragments":["because"]},{"Key":"word` because","Fragments":["you'll"]},{"Key":"because you'll","Fragments":["probably"]},{"Key":"you'll probably","Fragments":["not","hit"]},{"Key":"not call","Fragments":["the","`HashDict`","for"]},{"Key":"call the","Fragments":["function","corresponding","`Dict`","module","filler"]},{"Key":"and send","Fragments":["it"]},{"Key":"it any","Fragments":["other","better,","clearer"]},{"Key":"any other","Fragments":["kind","method","way","alternatives","improvements?","way","issues","language","way."]},{"Key":"other kind","Fragments":["of"]},{"Key":"of dictionary","Fragments":["other","to","you"]},{"Key":"dictionary other","Fragments":["than"]},{"Key":"a counts","Fragments":["dictionary."]},{"Key":"might use","Fragments":["the","to","to"]},{"Key":"the `count/1","Fragments":["(list)`"]},{"Key":"`count/1 (list)`","Fragments":["method."]},{"Key":"(list)` method.","Fragments":["That's"]},{"Key":"method. That's","Fragments":["a"]},{"Key":"of personal","Fragments":["style","preference,","style,","preference"]},{"Key":"personal style","Fragments":["though."]},{"Key":"After giving","Fragments":["it"]},{"Key":"giving it","Fragments":["some","is","a"]},{"Key":"it some","Fragments":["thought,"]},{"Key":"some thought,","Fragments":["I"]},{"Key":"thought, I","Fragments":["decided"]},{"Key":"decided this","Fragments":["solution"]},{"Key":"bit heavy","Fragments":["handed.","on"]},{"Key":"heavy handed.","Fragments":["I"]},{"Key":"handed. I","Fragments":["can"]},{"Key":"`String.codepoints` and","Fragments":["`Enum.sort`"]},{"Key":"and `Enum.sort`","Fragments":["to"]},{"Key":"`Enum.sort` to","Fragments":["achieve"]},{"Key":"achieve the","Fragments":["same","remove","same","same"]},{"Key":"same kind","Fragments":["of"]},{"Key":"of Anagram","Fragments":["selection"]},{"Key":"Anagram selection","Fragments":["logic"]},{"Key":"selection logic","Fragments":["with"]},{"Key":"logic with","Fragments":["less"]},{"Key":"with less","Fragments":["of"]},{"Key":"less of","Fragments":["my","a"]},{"Key":"own code.","Fragments":["This"]},{"Key":"code. This","Fragments":["is"]},{"Key":"also likely","Fragments":["a"]},{"Key":"likely a","Fragments":["bit","failure"]},{"Key":"bit faster","Fragments":["computationally","too"]},{"Key":"faster computationally","Fragments":["but"]},{"Key":"computationally but","Fragments":["I'm"]},{"Key":"like dropping","Fragments":["the"]},{"Key":"Elixir code,","Fragments":["I"]},{"Key":"the grammar","Fragments":["has"]},{"Key":"grammar has","Fragments":["enough"]},{"Key":"has enough","Fragments":["edge"]},{"Key":"enough edge","Fragments":["cases"]},{"Key":"edge cases","Fragments":["to","that"]},{"Key":"cases to","Fragments":["where","be"]},{"Key":"to where","Fragments":["it's"]},{"Key":"just put","Fragments":["them","it","the","the"]},{"Key":"put them","Fragments":["everywhere","in"]},{"Key":"them everywhere","Fragments":["you'd"]},{"Key":"everywhere you'd","Fragments":["use"]},{"Key":"you'd use","Fragments":["them","in"]},{"Key":" `Enum.zip`","Fragments":["would","has"]},{"Key":"`Enum.zip` would","Fragments":["be"]},{"Key":"the sole","Fragments":["source"]},{"Key":"sole source","Fragments":["of"]},{"Key":"of `nil`s,","Fragments":["so"]},{"Key":"`nil`s, so","Fragments":["you"]},{"Key":"could ignore","Fragments":["the"]},{"Key":"ignore the","Fragments":["extension","supplied","first","comments"]},{"Key":"the extension","Fragments":["by"]},{"Key":"extension by","Fragments":["refusing"]},{"Key":"by refusing","Fragments":["to"]},{"Key":"refusing to","Fragments":["count"]},{"Key":"to count","Fragments":["pairs","the","each","however","how","the"]},{"Key":"count pairs","Fragments":["where"]},{"Key":"pairs where","Fragments":["the"]},{"Key":"second term","Fragments":["is"]},{"Key":"term is","Fragments":["`nil`."]},{"Key":"more that","Fragments":["using","when"]},{"Key":"a fold","Fragments":["requires","or"]},{"Key":"fold requires","Fragments":["the"]},{"Key":"requires the","Fragments":["reader","module"]},{"Key":"what your","Fragments":["accumulator","code","`Enum.slice`"]},{"Key":"your accumulator","Fragments":["is"]},{"Key":"accumulator is","Fragments":["and","a","just","the","the"]},{"Key":"is and","Fragments":["how","with"]},{"Key":"how you're","Fragments":["working"]},{"Key":"you're working","Fragments":["with","with"]},{"Key":"working with","Fragments":["it,","that","the","strings","many","the"]},{"Key":"it, as","Fragments":["opposed","it","it's"]},{"Key":"like `Enum.count`","Fragments":["where","when"]},{"Key":"`Enum.count` where","Fragments":["the"]},{"Key":"of accumulation","Fragments":["is"]},{"Key":"accumulation is","Fragments":["fixed."]},{"Key":" Code","Fragments":["reuse","is"]},{"Key":"Code reuse","Fragments":["for"]},{"Key":"reuse for","Fragments":["the"]},{"Key":"the win!","Fragments":["Using"]},{"Key":"win! Using","Fragments":["my"]},{"Key":"Using my","Fragments":["word","own"]},{"Key":"count exercise","Fragments":["to"]},{"Key":"compare letter","Fragments":["counts"]},{"Key":"letter counts","Fragments":["and","in"]},{"Key":"counts and","Fragments":["determine","strings"]},{"Key":"and determine","Fragments":["anagrams!"]},{"Key":"a confusing","Fragments":["bundle"]},{"Key":"confusing bundle","Fragments":["of"]},{"Key":"bundle of","Fragments":["code"]},{"Key":"read. Think","Fragments":["about"]},{"Key":"the Single","Fragments":["Responsibility"]},{"Key":"Single Responsibility","Fragments":["Principle"]},{"Key":"Responsibility Principle","Fragments":["and"]},{"Key":"Principle and","Fragments":["make"]},{"Key":"make new","Fragments":["methods"]},{"Key":"new methods","Fragments":["for"]},{"Key":"every responsibility","Fragments":["that"]},{"Key":"responsibility that","Fragments":["you"]},{"Key":"can find.","Fragments":["At"]},{"Key":"find. At","Fragments":["the"]},{"Key":"At the","Fragments":["moment","very","end"]},{"Key":"the moment","Fragments":["your"]},{"Key":"moment your","Fragments":["`count`"]},{"Key":"method includes,","Fragments":["but"]},{"Key":"includes, but","Fragments":["is"]},{"Key":"not limited","Fragments":["to,"]},{"Key":"limited to,","Fragments":["these"]},{"Key":"to, these","Fragments":["responsibilities:"]},{"Key":"- creating","Fragments":["an"]},{"Key":"creating an","Fragments":["accumulator"]},{"Key":"- flattening","Fragments":["the"]},{"Key":"- incrementing","Fragments":["the"]},{"Key":"incrementing the","Fragments":["count"]},{"Key":"can separate","Fragments":["these"]},{"Key":"separate these","Fragments":["concerns"]},{"Key":"these concerns","Fragments":["than"]},{"Key":"concerns than","Fragments":["you"]},{"Key":"you won't","Fragments":["have","need","be","have","have"]},{"Key":"won't have","Fragments":["to","to","to"]},{"Key":"to re-write","Fragments":["code"]},{"Key":"re-write code","Fragments":["later"]},{"Key":"code later","Fragments":["on"]},{"Key":"later on","Fragments":["when","you"]},{"Key":"on when","Fragments":["you"]},{"Key":"same job.","Fragments":["You"]},{"Key":"job. You","Fragments":["also"]},{"Key":"You also","Fragments":["will"]},{"Key":"also will","Fragments":["have"]},{"Key":"have code","Fragments":["that"]},{"Key":"code that","Fragments":["is","does","clearly","will","I","only","uses","way,","results","the","would"]},{"Key":"good for","Fragments":["your","the"]},{"Key":"first Elixir","Fragments":["ever!","exercise.","program!"]},{"Key":"You do","Fragments":["not","need"]},{"Key":"use if","Fragments":["statements"]},{"Key":"if statements","Fragments":["in"]},{"Key":"statements in","Fragments":["your","my","compare"]},{"Key":"your helper","Fragments":["methods.","functions,"]},{"Key":"helper methods.","Fragments":["Instead,"]},{"Key":"methods. Instead,","Fragments":["just"]},{"Key":"Instead, just","Fragments":["use"]},{"Key":"is inside","Fragments":["the"]},{"Key":"the parentheses.","Fragments":["For"]},{"Key":"parentheses. For","Fragments":["example:"]},{"Key":"For example:","Fragments":["`(String.upcase(\"HEY"]},{"Key":"example: `(String.upcase(\"HEY","Fragments":["MAN\")"]},{"Key":"`(String.upcase(\"HEY MAN\")","Fragments":["=="]},{"Key":"MAN\") ==","Fragments":["\"HEY"]},{"Key":"== \"HEY","Fragments":["MAN\")`"]},{"Key":"\"HEY MAN\")`","Fragments":["will"]},{"Key":"MAN\")` will","Fragments":["return"]},{"Key":"true by","Fragments":["itself."]},{"Key":"by itself.","Fragments":["You","You"]},{"Key":"itself. You","Fragments":["can","must"]},{"Key":"can check","Fragments":["this"]},{"Key":"check this","Fragments":["in"]},{"Key":"Another potential","Fragments":["area"]},{"Key":"potential area","Fragments":["for"]},{"Key":"area for","Fragments":["confusion"]},{"Key":"for confusion","Fragments":["is"]},{"Key":"confusion is","Fragments":["the"]},{"Key":"the `!`","Fragments":["in"]},{"Key":"`!` in","Fragments":["front"]},{"Key":"in front","Fragments":["of","to","of","of","of"]},{"Key":"front of","Fragments":["your","functions?","calls","private"]},{"Key":"Regex. There","Fragments":["is"]},{"Key":"Regex that","Fragments":["will"]},{"Key":"will match","Fragments":["silence","a","if","if","only"]},{"Key":"match silence","Fragments":["without"]},{"Key":"silence without","Fragments":["having"]},{"Key":"negation operator.","Fragments":["(Check"]},{"Key":"operator. (Check","Fragments":["the"]},{"Key":"(Check the","Fragments":["discussion"]},{"Key":"the discussion","Fragments":["under","and"]},{"Key":"discussion under","Fragments":["'Generic"]},{"Key":"under 'Generic","Fragments":["Character"]},{"Key":"'Generic Character","Fragments":["Types'"]},{"Key":"Character Types'","Fragments":["on"]},{"Key":"Types' on","Fragments":["http://www.erlang.org/doc/man/re.html"]},{"Key":"on http://www.erlang.org/doc/man/re.html","Fragments":["or"]},{"Key":"http://www.erlang.org/doc/man/re.html or","Fragments":["check"]},{"Key":"or check","Fragments":["out"]},{"Key":"out http://rubular.com/","Fragments":["because"]},{"Key":"http://rubular.com/ because","Fragments":["the"]},{"Key":"Ruby usage","Fragments":["is"]},{"Key":"code ever","Fragments":["written"]},{"Key":"ever written","Fragments":["in","it"]},{"Key":"elixir. So","Fragments":["please"]},{"Key":"So please","Fragments":["nitpick"]},{"Key":"please nitpick","Fragments":["the"]},{"Key":"the hell","Fragments":["out"]},{"Key":"hell out","Fragments":["of"]},{"Key":"That mess","Fragments":["of"]},{"Key":"pipeline massaging","Fragments":["string"]},{"Key":"massaging string","Fragments":["into"]},{"Key":"into shape","Fragments":["is"]},{"Key":"shape is","Fragments":["pretty"]},{"Key":"tried replacing","Fragments":["it"]},{"Key":"replacing it","Fragments":["with","with"]},{"Key":"a custom","Fragments":["reducer,","predicate"]},{"Key":"custom reducer,","Fragments":["but"]},{"Key":"reducer, but","Fragments":["threading"]},{"Key":"but threading","Fragments":["the"]},{"Key":"threading the","Fragments":["index"]},{"Key":"the index","Fragments":["through"]},{"Key":"index through","Fragments":["alongside"]},{"Key":"through alongside","Fragments":["encoding"]},{"Key":"alongside encoding","Fragments":["just"]},{"Key":"encoding just","Fragments":["made"]},{"Key":"just made","Fragments":["it"]},{"Key":"it even","Fragments":["uglier","be","possible?"]},{"Key":"even uglier","Fragments":["with"]},{"Key":"uglier with","Fragments":["the","it"]},{"Key":"the necessary","Fragments":["if/else"]},{"Key":"necessary if/else","Fragments":["branches."]},{"Key":" Enum.zip","Fragments":["has"]},{"Key":"Enum.zip has","Fragments":["the"]},{"Key":"wrong behavior","Fragments":["for"]},{"Key":"this use","Fragments":["case,","case?","case?","of"]},{"Key":"use case,","Fragments":["since"]},{"Key":"it extends","Fragments":["rather"]},{"Key":"extends rather","Fragments":["than"]},{"Key":"than truncates","Fragments":["when"]},{"Key":"truncates when","Fragments":["the"]},{"Key":"the lists","Fragments":["are","once.","are","are","more","more","using","if","aren't","can"]},{"Key":"lists are","Fragments":["not","immutable","implemented","empty","the","sorted"]},{"Key":"not of","Fragments":["equal"]},{"Key":"of equal","Fragments":["length."]},{"Key":" Enum.count","Fragments":["looks"]},{"Key":"Enum.count looks","Fragments":["like"]},{"Key":"bit better,","Fragments":["although"]},{"Key":"better, although","Fragments":["as"]},{"Key":"although as","Fragments":["someone"]},{"Key":"as someone","Fragments":["who"]},{"Key":"who does","Fragments":["a"]},{"Key":"of functional","Fragments":["programming","programming"]},{"Key":"programming I","Fragments":["don't"]},{"Key":"have trouble","Fragments":["reading"]},{"Key":"trouble reading","Fragments":["or"]},{"Key":"reading or","Fragments":["writing"]},{"Key":"or writing","Fragments":["folds."]},{"Key":"- `Enum.zip/2`","Fragments":["is"]},{"Key":"`Enum.zip/2` is","Fragments":["nicer"]},{"Key":"is nicer","Fragments":["than"]},{"Key":"than `List.zip/1`","Fragments":["when"]},{"Key":"`List.zip/1` when","Fragments":["you're"]},{"Key":"when you're","Fragments":["only","reading","using","using"]},{"Key":"you're only","Fragments":["zipping","going","testing"]},{"Key":"only zipping","Fragments":["2"]},{"Key":"zipping 2","Fragments":["lists."]},{"Key":"- The","Fragments":["foldl","`Dict`"]},{"Key":"The foldl","Fragments":["is"]},{"Key":"foldl is","Fragments":["not"]},{"Key":"not immediately","Fragments":["comprehensible."]},{"Key":"immediately comprehensible.","Fragments":["It"]},{"Key":"comprehensible. It","Fragments":["requires"]},{"Key":"It requires","Fragments":["close"]},{"Key":"requires close","Fragments":["reading."]},{"Key":"like you've","Fragments":["combined","got"]},{"Key":"you've combined","Fragments":["what"]},{"Key":"combined what","Fragments":["could"]},{"Key":"what could","Fragments":["be"]},{"Key":"be separate","Fragments":["filter"]},{"Key":"separate filter","Fragments":["and"]},{"Key":"filter and","Fragments":["count","reduce","append","map","map?"]},{"Key":"and count","Fragments":["operations","values.","how","the"]},{"Key":"count operations","Fragments":["into"]},{"Key":"operations into","Fragments":["a","functions"]},{"Key":"single function;","Fragments":["using"]},{"Key":"function; using","Fragments":["`Enum.count/2`"]},{"Key":"using `Enum.count/2`","Fragments":["would"]},{"Key":"`Enum.count/2` would","Fragments":["make","help"]},{"Key":"this clear","Fragments":["and"]},{"Key":"clear and","Fragments":["free","explicit,","readable.","this"]},{"Key":"and free","Fragments":["you"]},{"Key":"free you","Fragments":["from"]},{"Key":"you from","Fragments":["having","having","having","having"]},{"Key":"to manually","Fragments":["increment","verify."]},{"Key":"manually increment","Fragments":["the"]},{"Key":"increment the","Fragments":["accumulator.","accumulator"]},{"Key":"Oops, looks","Fragments":["like"]},{"Key":"I broke","Fragments":["exercism's"]},{"Key":"broke exercism's","Fragments":["syntax"]},{"Key":"exercism's syntax","Fragments":["highlighting"]},{"Key":"syntax highlighting","Fragments":[";)"]},{"Key":" Cleaned","Fragments":["up","up","up"]},{"Key":"Cleaned up","Fragments":["adding","unnecessary","duplication"]},{"Key":"up adding","Fragments":["the"]},{"Key":"adding the","Fragments":["digits","question","second","default"]},{"Key":"the digits","Fragments":["this"]},{"Key":"digits this","Fragments":["time."]},{"Key":"In `to_rna`,","Fragments":["you"]},{"Key":"`to_rna`, you","Fragments":["seem"]},{"Key":"you seem","Fragments":["to","to"]},{"Key":"an unnecessary","Fragments":["`fn`"]},{"Key":"unnecessary `fn`","Fragments":["wrapper"]},{"Key":"`fn` wrapper","Fragments":["that"]},{"Key":"wrapper that","Fragments":["contributes"]},{"Key":"that contributes","Fragments":["nothing."]},{"Key":"contributes nothing.","Fragments":["Just"]},{"Key":"nothing. Just","Fragments":["pass"]},{"Key":"Just pass","Fragments":["the"]},{"Key":"the `dna_to_rna`","Fragments":["definition"]},{"Key":"`dna_to_rna` definition","Fragments":["visually"]},{"Key":"definition visually","Fragments":["less"]},{"Key":"visually less","Fragments":["noisy"]},{"Key":"less noisy","Fragments":["by"]},{"Key":"noisy by","Fragments":["using"]},{"Key":"line per","Fragments":["case."]},{"Key":"function versus","Fragments":["a"]},{"Key":"versus a","Fragments":["locally-bound"]},{"Key":"a locally-bound","Fragments":["anonymous"]},{"Key":"locally-bound anonymous","Fragments":["function,"]},{"Key":"anonymous function,","Fragments":["or","and","and","but"]},{"Key":"function, or","Fragments":["even","at","you"]},{"Key":"or even","Fragments":["inlining","O(n)","passed"]},{"Key":"even inlining","Fragments":["the"]},{"Key":"inlining the","Fragments":["anonymous","logic","call"]},{"Key":"my brain.","Fragments":["This"]},{"Key":"brain. This","Fragments":["works"]},{"Key":"works but","Fragments":["I"]},{"Key":"to cram","Fragments":["OO"]},{"Key":"cram OO","Fragments":["Rubyisms"]},{"Key":"OO Rubyisms","Fragments":["into"]},{"Key":"Rubyisms into","Fragments":["a"]},{"Key":"language that","Fragments":["doesn't","isn't","has","natively"]},{"Key":"really want","Fragments":["them.","object"]},{"Key":"want them.","Fragments":[";-)"]},{"Key":"originally had","Fragments":["`Enum.reverse","a"]},{"Key":"had `Enum.reverse","Fragments":["|\u0026gt;"]},{"Key":"`Enum.reverse |\u0026gt;","Fragments":["Enum.with_index`"]},{"Key":"|\u0026gt; Enum.with_index`","Fragments":["in"]},{"Key":"Enum.with_index` in","Fragments":["the"]},{"Key":"the middle,","Fragments":["but"]},{"Key":"middle, but","Fragments":["then"]},{"Key":"but then","Fragments":["realized","I","you'd","`:lists.foldr`","I","elixir","the","I","I"]},{"Key":"then realized","Fragments":["that"]},{"Key":"that by","Fragments":["multiplying","using"]},{"Key":"by multiplying","Fragments":["by"]},{"Key":"multiplying by","Fragments":["2,"]},{"Key":"by 2,","Fragments":["I"]},{"Key":"2, I","Fragments":["could"]},{"Key":"just work","Fragments":["left-to-right,"]},{"Key":"work left-to-right,","Fragments":["which"]},{"Key":"left-to-right, which","Fragments":["is"]},{"Key":"is far","Fragments":["simpler.","easier"]},{"Key":"code by","Fragments":["using","not","writing"]},{"Key":"There's nothing","Fragments":["terribly","wrong","wrong","wrong"]},{"Key":"nothing terribly","Fragments":["OO"]},{"Key":"terribly OO","Fragments":["about"]},{"Key":"OO about","Fragments":["assignments."]},{"Key":"about assignments.","Fragments":["I"]},{"Key":"assignments. I","Fragments":["find"]},{"Key":"find pipelining","Fragments":["useful"]},{"Key":"pipelining useful","Fragments":["in"]},{"Key":"useful in","Fragments":["good","`silence?`.","such","the","a","other"]},{"Key":"good part","Fragments":["because"]},{"Key":"part because","Fragments":["it"]},{"Key":"it avoids","Fragments":["introducing","iterating"]},{"Key":"avoids introducing","Fragments":["a"]},{"Key":"introducing a","Fragments":["new"]},{"Key":"new name","Fragments":["for"]},{"Key":"to track","Fragments":["and","the"]},{"Key":"track and","Fragments":["remember."]},{"Key":"a writer,","Fragments":["it"]},{"Key":"writer, it","Fragments":["means"]},{"Key":"it means","Fragments":["I","that","you","that"]},{"Key":"means I","Fragments":["don't"]},{"Key":"some random","Fragments":["intermediate"]},{"Key":"random intermediate","Fragments":["computation."]},{"Key":"intermediate computation.","Fragments":["Those"]},{"Key":"computation. Those","Fragments":["names"]},{"Key":"Those names","Fragments":["are"]},{"Key":"are a","Fragments":["pain","relatively","bit","few","little","good","few","few","few","couple","few"]},{"Key":"a pain","Fragments":["to"]},{"Key":"pain to","Fragments":["come"]},{"Key":"up with,","Fragments":["so"]},{"Key":"with, so","Fragments":["anything","unicode-awareness"]},{"Key":"so anything","Fragments":["that"]},{"Key":"that lets","Fragments":["me"]},{"Key":"lets me","Fragments":["skip","submit.","fit"]},{"Key":"me skip","Fragments":["that"]},{"Key":"that step","Fragments":["is"]},{"Key":"big win","Fragments":["for"]},{"Key":"win for","Fragments":["me."]},{"Key":" John,","Fragments":["I"]},{"Key":"John, I","Fragments":["started"]},{"Key":"started to","Fragments":["extend"]},{"Key":"to extend","Fragments":["the"]},{"Key":"extend the","Fragments":["chaining,"]},{"Key":"the chaining,","Fragments":["but"]},{"Key":"chaining, but","Fragments":["as"]},{"Key":"but as","Fragments":["Jeremy","I","@krystel","I","`f"]},{"Key":"as Jeremy","Fragments":["said"]},{"Key":"Jeremy said","Fragments":["I'm"]},{"Key":"said I'm","Fragments":["using"]},{"Key":"using both","Fragments":["variables.","`upcase`"]},{"Key":"both variables.","Fragments":["But"]},{"Key":"variables. But","Fragments":["the"]},{"Key":"a monster,","Fragments":["so"]},{"Key":"monster, so","Fragments":["I'm"]},{"Key":"I'm open","Fragments":["to","to","to","to"]},{"Key":"open to","Fragments":["ideas","unintentional/unexpected","suggestions.","exploring","receiving","criticism"]},{"Key":"to ideas","Fragments":["on"]},{"Key":"ideas on","Fragments":["improving","how","speeding"]},{"Key":"on improving","Fragments":["that."]},{"Key":"improving that.","Fragments":["Maybe"]},{"Key":"that. Maybe","Fragments":["that"]},{"Key":"Maybe that","Fragments":["should","could"]},{"Key":"be its","Fragments":["own"]},{"Key":"could still","Fragments":["pipeline"]},{"Key":"still pipeline","Fragments":["the"]},{"Key":"pipeline the","Fragments":["Enum.map"]},{"Key":"the Enum.map","Fragments":["into","to"]},{"Key":"Enum.map into","Fragments":["the"]},{"Key":"HashDict though,","Fragments":["getting"]},{"Key":"though, getting","Fragments":["rid"]},{"Key":"more assignment.","Fragments":["Assignments"]},{"Key":"assignment. Assignments","Fragments":["feel"]},{"Key":"Assignments feel","Fragments":["to"]},{"Key":"feel to","Fragments":["me","you?"]},{"Key":"me like","Fragments":["an","leaving","the","that's"]},{"Key":"an OO","Fragments":["code","method"]},{"Key":"OO code","Fragments":["smell"]},{"Key":"code smell","Fragments":["for","to"]},{"Key":"smell for","Fragments":["Elixir."]},{"Key":"Yep, typo.","Fragments":["Never"]},{"Key":"typo. Never","Fragments":["even"]},{"Key":"Never even","Fragments":["noticed."]},{"Key":"even noticed.","Fragments":["Should"]},{"Key":"noticed. Should","Fragments":["add"]},{"Key":"Should add","Fragments":["a"]},{"Key":"test case.","Fragments":[";)","Although,","I"]},{"Key":"anagrams into","Fragments":["a"]},{"Key":"a well","Fragments":["named"]},{"Key":"well named","Fragments":["(private)","methods","functions"]},{"Key":"named (private)","Fragments":["function?"]},{"Key":"(private) function?","Fragments":["Might"]},{"Key":"function? Might","Fragments":["make"]},{"Key":"Might make","Fragments":["line"]},{"Key":"make line","Fragments":["4","13"]},{"Key":"4 a","Fragments":["little"]},{"Key":"to follow,","Fragments":["although","but","I"]},{"Key":"follow, although","Fragments":["it's"]},{"Key":"although it's","Fragments":["pretty"]},{"Key":"it's pretty","Fragments":["clear","rare","expressive","common","hard","hard"]},{"Key":"pretty clear","Fragments":["as"]},{"Key":"clear as","Fragments":["is.","long"]},{"Key":"Also, I'm","Fragments":["not","curious"]},{"Key":"are tests","Fragments":["in","for"]},{"Key":"suite you're","Fragments":["working"]},{"Key":"that check","Fragments":["for","is"]},{"Key":"does your","Fragments":["code","test"]},{"Key":"handle variations","Fragments":["in"]},{"Key":"variations in","Fragments":["case"]},{"Key":"in case","Fragments":["(uppercase,","some","statements:","you","the"]},{"Key":"case (uppercase,","Fragments":["lowercase)?"]},{"Key":"(uppercase, lowercase)?","Fragments":["That"]},{"Key":"lowercase)? That","Fragments":["might"]},{"Key":"good addition,","Fragments":["even"]},{"Key":"addition, even","Fragments":["if"]},{"Key":"tests currently","Fragments":["don't"]},{"Key":"currently don't","Fragments":["check"]},{"Key":"don't check","Fragments":["for","for"]},{"Key":" Personally,","Fragments":["I","I","I","I"]},{"Key":"great. See","Fragments":["comments"]},{"Key":"See comments","Fragments":["there."]},{"Key":"comments there.","Fragments":[":)","Thanks","Your"]},{"Key":"great. I","Fragments":["think","like"]},{"Key":"the fourth","Fragments":["iteration,"]},{"Key":"fourth iteration,","Fragments":["particularly"]},{"Key":"iteration, particularly","Fragments":["the"]},{"Key":"particularly the","Fragments":["`different?`"]},{"Key":"the `different?`","Fragments":["method"]},{"Key":"`different?` method","Fragments":["vs."]},{"Key":"method vs.","Fragments":["`!same?`"]},{"Key":"vs. `!same?`","Fragments":["and"]},{"Key":"`!same?` and","Fragments":["handling"]},{"Key":"downcasing in","Fragments":["the"]},{"Key":"function vs.","Fragments":["inline."]},{"Key":"vs. inline.","Fragments":["I"]},{"Key":"inline. I","Fragments":["think"]},{"Key":"version hides","Fragments":["the"]},{"Key":"the complication","Fragments":["of"]},{"Key":"complication of","Fragments":["things"]},{"Key":"Good first","Fragments":["submission."]},{"Key":"submission. I","Fragments":["like"]},{"Key":"`is_all_caps?` check.","Fragments":["Have"]},{"Key":"check. Have","Fragments":["you"]},{"Key":"adding documentation?","Fragments":["Also,"]},{"Key":"documentation? Also,","Fragments":["I'd"]},{"Key":"methods so","Fragments":["that","I"]},{"Key":"can reuse","Fragments":["them."]},{"Key":"reuse them.","Fragments":["I"]},{"Key":"them. I","Fragments":["might"]},{"Key":"might go","Fragments":["either"]},{"Key":"go either","Fragments":["way","way"]},{"Key":"a real-world","Fragments":["situation"]},{"Key":"real-world situation","Fragments":["however."]},{"Key":"I trying","Fragments":["to"]},{"Key":"match the","Fragments":["way","`yelling`","precondition","`match`","results"]},{"Key":"way the","Fragments":["Ruby","data","language","empty","error","names","functions"]},{"Key":"Ruby tests","Fragments":["work."]},{"Key":"tests work.","Fragments":["AFAIK,"]},{"Key":"work. AFAIK,","Fragments":["there's"]},{"Key":"AFAIK, there's","Fragments":["not"]},{"Key":"there's not","Fragments":["a","yet","much","much"]},{"Key":"a `skip`","Fragments":["for"]},{"Key":"`skip` for","Fragments":["ExUnit,"]},{"Key":"for ExUnit,","Fragments":["so"]},{"Key":"ExUnit, so","Fragments":["commenting"]},{"Key":"so commenting","Fragments":["out"]},{"Key":"commenting out","Fragments":["the"]},{"Key":"best thing","Fragments":["I"]},{"Key":"think of.","Fragments":["I"]},{"Key":"of. I","Fragments":["think"]},{"Key":"I stopped","Fragments":["doing"]},{"Key":"stopped doing","Fragments":["that"]},{"Key":"that at","Fragments":["some"]},{"Key":"at some","Fragments":["point.","point.","point.","point.","point","point.","point.","point","point.","point.","other"]},{"Key":"Having a","Fragments":["lot"]},{"Key":"of Guard","Fragments":["statements"]},{"Key":"Guard statements","Fragments":["seems"]},{"Key":"statements seems","Fragments":["to"]},{"Key":"be akin","Fragments":["to"]},{"Key":"akin to","Fragments":["having"]},{"Key":"having conditional","Fragments":["statements"]},{"Key":"my code.","Fragments":["Thoughts?","Waiting","I"]},{"Key":"This doesn't","Fragments":["work...","change","satisfy"]},{"Key":"doesn't work...","Fragments":["accidentally"]},{"Key":"work... accidentally","Fragments":["submitted."]},{"Key":" @alfred:","Fragments":["One","It"]},{"Key":"@alfred: One","Fragments":["issue"]},{"Key":"One issue","Fragments":["there:"]},{"Key":"issue there:","Fragments":["You've"]},{"Key":"there: You've","Fragments":["eliminated"]},{"Key":"You've eliminated","Fragments":["the"]},{"Key":"eliminated the","Fragments":["`wordList`"]},{"Key":"the `wordList`","Fragments":["binding"]},{"Key":"`wordList` binding","Fragments":["that"]},{"Key":"binding that","Fragments":["you"]},{"Key":"you then","Fragments":["try","immediately","use","end"]},{"Key":"then try","Fragments":["to","to"]},{"Key":"line 5.","Fragments":["The"]},{"Key":"5. The","Fragments":["pipeline"]},{"Key":"operator only","Fragments":["goes"]},{"Key":"only goes","Fragments":["so"]},{"Key":"goes so","Fragments":["far,"]},{"Key":"far, because","Fragments":["it"]},{"Key":"doesn't allow","Fragments":["teeing"]},{"Key":"allow teeing","Fragments":["off"]},{"Key":"teeing off","Fragments":["and"]},{"Key":"off and","Fragments":["then"]},{"Key":"then rejoining","Fragments":["threads"]},{"Key":"rejoining threads","Fragments":["of"]},{"Key":"threads of","Fragments":["computation."]},{"Key":"of computation.","Fragments":[":\\"]},{"Key":"@alfred: It","Fragments":["seems"]},{"Key":"seems weird","Fragments":["that","and"]},{"Key":"weird that","Fragments":["you're","`@demetrius`"]},{"Key":"you're explicitly","Fragments":["including"]},{"Key":"explicitly including","Fragments":["`[`"]},{"Key":"including `[`","Fragments":["in"]},{"Key":"`[` in","Fragments":["the"]},{"Key":"to keep.","Fragments":["Took"]},{"Key":"keep. Took","Fragments":["me"]},{"Key":"Took me","Fragments":["a","a"]},{"Key":"parse the","Fragments":["nesting","regex","phone"]},{"Key":"nesting there,","Fragments":["because"]},{"Key":"there, because","Fragments":["it"]},{"Key":"like `[^[]`,","Fragments":["and"]},{"Key":"`[^[]`, and","Fragments":["then"]},{"Key":"I remembered","Fragments":["that","how"]},{"Key":"remembered that","Fragments":["the","functional"]},{"Key":"the inner","Fragments":["`[`","loop"]},{"Key":"inner `[`","Fragments":["is"]},{"Key":"`[` is","Fragments":["part"]},{"Key":"the character","Fragments":["group","code","code","class?","\"é\"","`?T`","count","class","class,"]},{"Key":"character group","Fragments":["you're","is"]},{"Key":"group you're","Fragments":["complementing."]},{"Key":"you're complementing.","Fragments":["That's"]},{"Key":"complementing. That's","Fragments":["probably"]},{"Key":"probably a","Fragments":["typo","term","style","useless","better","better","bit","deficiency","good","bit"]},{"Key":"typo rather","Fragments":["than"]},{"Key":"than intentional.","Fragments":[":)"]},{"Key":"In count,","Fragments":["every"]},{"Key":"count, every","Fragments":["successive"]},{"Key":"every successive","Fragments":["line"]},{"Key":"successive line","Fragments":["uses"]},{"Key":"line uses","Fragments":["the"]},{"Key":"variable from","Fragments":["the"]},{"Key":"function. All","Fragments":["the"]},{"Key":"All the","Fragments":["local","languages","abstractions"]},{"Key":"the local","Fragments":["variables"]},{"Key":"variables could","Fragments":["be"]},{"Key":"by chaining","Fragments":["pipelines:","the"]},{"Key":"def count(words)","Fragments":["do"]},{"Key":"|\u0026gt; Enum.map(fn(x)","Fragments":["-\u0026gt;"]},{"Key":"Enum.map(fn(x) -\u0026gt;","Fragments":["{x,"]},{"Key":"-\u0026gt; {x,","Fragments":["accumulate(x,"]},{"Key":"{x, accumulate(x,","Fragments":["wordList)}"]},{"Key":"accumulate(x, wordList)}","Fragments":["end)"]},{"Key":"Nice breakdown","Fragments":["of"]},{"Key":"breakdown of","Fragments":["the"]},{"Key":" InputCategory","Fragments":["-"]},{"Key":"InputCategory -","Fragments":["wonder"]},{"Key":"- wonder","Fragments":["if"]},{"Key":"descriptive or","Fragments":["less"]},{"Key":"less verbose","Fragments":["name","and"]},{"Key":"verbose name","Fragments":["for"]},{"Key":" silence?","Fragments":["and"]},{"Key":"and shouting?","Fragments":["have"]},{"Key":"shouting? have","Fragments":["the"]},{"Key":"on opposite","Fragments":["sides"]},{"Key":"opposite sides","Fragments":["of"]},{"Key":"the equality","Fragments":["check."]},{"Key":"equality check.","Fragments":["Might"]},{"Key":"check. Might","Fragments":["be"]},{"Key":"Might be","Fragments":["easier","a"]},{"Key":"they flowed","Fragments":["similarly,"]},{"Key":"flowed similarly,","Fragments":["with"]},{"Key":"similarly, with","Fragments":["the"]},{"Key":"the transform","Fragments":["of"]},{"Key":"transform of","Fragments":["the"]},{"Key":"the data","Fragments":["first,","is","types","structure."]},{"Key":"data first,","Fragments":["and"]},{"Key":"first, and","Fragments":["the","all"]},{"Key":"expected data","Fragments":["at"]},{"Key":"data at","Fragments":["the"]},{"Key":"honestly don't","Fragments":["see","know","know"]},{"Key":"any logical","Fragments":["reason"]},{"Key":"logical reason","Fragments":["to"]},{"Key":"to ever","Fragments":["have"]},{"Key":"ever have","Fragments":["any","before."]},{"Key":"any skipped","Fragments":["or"]},{"Key":"skipped or","Fragments":["commented"]},{"Key":"or commented","Fragments":["out"]},{"Key":"out tests","Fragments":["here."]},{"Key":"tests here.","Fragments":["It's"]},{"Key":"here. It's","Fragments":["just"]},{"Key":"added busywork","Fragments":["to"]},{"Key":"busywork to","Fragments":["mangle"]},{"Key":"to mangle","Fragments":["the"]},{"Key":"mangle the","Fragments":["test"]},{"Key":"when solving","Fragments":["an"]},{"Key":"solving an","Fragments":["exercise."]},{"Key":"Yep, that's","Fragments":["right.","exactly","what"]},{"Key":"that's right.","Fragments":["Missed"]},{"Key":"right. Missed","Fragments":["it"]},{"Key":"Missed it","Fragments":["because"]},{"Key":"tests were","Fragments":["commented","initially"]},{"Key":"were commented","Fragments":["out."]},{"Key":"commented out.","Fragments":["Fixed"]},{"Key":"out. Fixed","Fragments":["in"]},{"Key":"Fixed in","Fragments":["v2.","the","the"]},{"Key":"of macros","Fragments":["to"]},{"Key":"macros to","Fragments":["build","see"]},{"Key":"the `score_letter`","Fragments":["clauses!"]},{"Key":"you downcased","Fragments":["earlier,"]},{"Key":"downcased earlier,","Fragments":["you"]},{"Key":"the collection","Fragments":["of","system","to"]},{"Key":"collection of","Fragments":["words.","functions"]},{"Key":"the binary","Fragments":["approach","concatenation","contents).","input","pattern"]},{"Key":"binary approach","Fragments":["is"]},{"Key":"approach is","Fragments":["fine.","that","valid.","good.","simple","to","a"]},{"Key":"is fine.","Fragments":["You","It's","`Regex.scan`","I"]},{"Key":"fine. You","Fragments":["might"]},{"Key":"might format","Fragments":["it"]},{"Key":"format it","Fragments":["better"]},{"Key":"better so","Fragments":["that","I"]},{"Key":"the pieces.","Fragments":["I"]},{"Key":"pieces. I","Fragments":["would"]},{"Key":"would recommend","Fragments":["pattern"]},{"Key":"recommend pattern","Fragments":["matching"]},{"Key":"matching over","Fragments":["guard"]},{"Key":"over guard","Fragments":["clauses"]},{"Key":"clauses if","Fragments":["you"]},{"Key":"def foo(x)","Fragments":["when"]},{"Key":"foo(x) when","Fragments":["x"]},{"Key":"when x","Fragments":["=="]},{"Key":"x ==","Fragments":["1,","String.upcase(x)`?"]},{"Key":" could","Fragments":["be"]},{"Key":"def foo(1),","Fragments":["do:"]},{"Key":"foo(1), do:","Fragments":["..."]},{"Key":"could reduce","Fragments":["some","this"]},{"Key":"reduce some","Fragments":["duplication"]},{"Key":"between `total`","Fragments":["and"]},{"Key":"`total` and","Fragments":["`left`"]},{"Key":"and `left`","Fragments":["--"]},{"Key":"`left` --","Fragments":["they"]},{"Key":"-- they","Fragments":["have"]},{"Key":"some shared","Fragments":["logic."]},{"Key":"Good feedback.","Fragments":["Thank"]},{"Key":"feedback. Thank","Fragments":["you."]},{"Key":"Wouldn't the","Fragments":["nucleotides"]},{"Key":"the nucleotides","Fragments":["have","are","are,","were"]},{"Key":"nucleotides have","Fragments":["to"]},{"Key":"as characters","Fragments":["instead"]},{"Key":"characters instead","Fragments":["of"]},{"Key":"One other","Fragments":["thing","thing,"]},{"Key":"in mind.","Fragments":["What"]},{"Key":"mind. What","Fragments":["happens"]},{"Key":"happens for","Fragments":["input"]},{"Key":"input `\"","Fragments":["\"`?"]},{"Key":"Edit: that","Fragments":["wrapped"]},{"Key":"that wrapped","Fragments":["weird."]},{"Key":"wrapped weird.","Fragments":["Imagine"]},{"Key":"weird. Imagine","Fragments":["there"]},{"Key":"Imagine there","Fragments":["are"]},{"Key":"are spaces","Fragments":["in"]},{"Key":"the input,","Fragments":["not"]},{"Key":"input, not","Fragments":["just"]},{"Key":"you pulled","Fragments":["the","out"]},{"Key":"pulled the","Fragments":["question","two"]},{"Key":"question and","Fragments":["upcase","shouting","as"]},{"Key":"upcase conditions","Fragments":["out"]},{"Key":"conditions out","Fragments":["to"]},{"Key":"separate cases.","Fragments":["Made"]},{"Key":"cases. Made","Fragments":["them"]},{"Key":"Made them","Fragments":["easier"]},{"Key":"them easier","Fragments":["to","to"]},{"Key":"read. What","Fragments":["about"]},{"Key":"first condition","Fragments":["also?","as"]},{"Key":"condition also?","Fragments":["Then"]},{"Key":"also? Then","Fragments":["it"]},{"Key":"Then it","Fragments":["would"]},{"Key":"What version","Fragments":["of","of"]},{"Key":"of elixir","Fragments":["are","protocols","and"]},{"Key":"elixir are","Fragments":["you"]},{"Key":" Thnx","Fragments":["for"]},{"Key":"Thnx for","Fragments":["`cond`!"]},{"Key":"for `cond`!","Fragments":["As"]},{"Key":"`cond`! As","Fragments":["`case`"]},{"Key":"As `case`","Fragments":["can't"]},{"Key":"`case` can't","Fragments":["be"]},{"Key":"can't be","Fragments":["used","avoided.","done","found).","capitalized,","_______","sure"]},{"Key":"used with","Fragments":["custom","the"]},{"Key":"with custom","Fragments":["functions."]},{"Key":"use \u003ccode\u003eRegex.scan/2\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eRegex.scan/2\u003c/code\u003e and","Fragments":["pass"]},{"Key":"the normalize","Fragments":["string.","function"]},{"Key":"And you","Fragments":["maybe","could","could","will"]},{"Key":"you maybe","Fragments":["wants","interested"]},{"Key":"maybe wants","Fragments":["to","to","to"]},{"Key":"wants to","Fragments":["check","check","check","guarantee","be"]},{"Key":"Yes ,","Fragments":["it"]},{"Key":", it","Fragments":["would","can"]},{"Key":"What was","Fragments":["the","the","the"]},{"Key":"the motivation","Fragments":["behind"]},{"Key":"motivation behind","Fragments":["creating"]},{"Key":"behind creating","Fragments":["a"]},{"Key":"a protocol?","Fragments":["Interesting,"]},{"Key":"protocol? Interesting,","Fragments":["but"]},{"Key":"Interesting, but","Fragments":["feels"]},{"Key":"but feels","Fragments":["like"]},{"Key":"like overkill","Fragments":["to","looking"]},{"Key":"overkill to","Fragments":["me.","separate"]},{"Key":"Cool, makes","Fragments":["sense."]},{"Key":"sense. I'll","Fragments":["just","make"]},{"Key":"I'll just","Fragments":["use","give"]},{"Key":" :math.pow/2","Fragments":["worked"]},{"Key":":math.pow/2 worked","Fragments":["fine"]},{"Key":"worked fine","Fragments":["for"]},{"Key":"but `total`.","Fragments":["Shame."]},{"Key":" Also:","Fragments":["Closed-form","I"]},{"Key":"Also: Closed-form","Fragments":["solutions"]},{"Key":"Closed-form solutions","Fragments":["are"]},{"Key":"solutions are","Fragments":["fun."]},{"Key":"are fun.","Fragments":["Why"]},{"Key":"fun. Why","Fragments":["iterate"]},{"Key":"Why iterate","Fragments":["when"]},{"Key":"iterate when","Fragments":["you"]},{"Key":"can calculate,","Fragments":["amirite?"]},{"Key":"did an","Fragments":["`Enum.each(Enum.with_index(planets)`"]},{"Key":"an `Enum.each(Enum.with_index(planets)`","Fragments":["and"]},{"Key":"`Enum.each(Enum.with_index(planets)` and","Fragments":["then"]},{"Key":"then had","Fragments":["to"]},{"Key":"to `Enum.at(earth_year_fraction,","Fragments":["index)`."]},{"Key":"`Enum.at(earth_year_fraction, index)`.","Fragments":["Using"]},{"Key":"index)`. Using","Fragments":["`zip`"]},{"Key":"Using `zip`","Fragments":["made"]},{"Key":"`zip` made","Fragments":["that"]},{"Key":"that far","Fragments":["cleaner!"]},{"Key":"Hey Gabe,","Fragments":["of"]},{"Key":"Gabe, of","Fragments":["course"]},{"Key":"course I","Fragments":["do","have","could"]},{"Key":"do :)","Fragments":["Hope"]},{"Key":":) Hope","Fragments":["you"]},{"Key":"elixir too,","Fragments":["but"]},{"Key":"it, protocols","Fragments":["are"]},{"Key":"protocols are","Fragments":["useful"]},{"Key":"are useful","Fragments":["for"]},{"Key":"useful for","Fragments":["polymorphism","small","macro's","when","when"]},{"Key":"for polymorphism","Fragments":["which"]},{"Key":"polymorphism which","Fragments":["isn't"]},{"Key":"which isn't","Fragments":["needed","too"]},{"Key":"isn't needed","Fragments":["here."]},{"Key":"needed here.","Fragments":["Perhaps"]},{"Key":"here. Perhaps","Fragments":["if"]},{"Key":"Perhaps if","Fragments":["there","I"]},{"Key":"there were","Fragments":["other","more","enough","any","references"]},{"Key":"were other","Fragments":["data"]},{"Key":"other data","Fragments":["types"]},{"Key":"data types","Fragments":["to","that","that"]},{"Key":"types to","Fragments":["represent"]},{"Key":"to represent","Fragments":["an","text."]},{"Key":"represent an","Fragments":["input"]},{"Key":"input category","Fragments":["then"]},{"Key":"category then","Fragments":["yes."]},{"Key":"then yes.","Fragments":["The"]},{"Key":"yes. The","Fragments":["record","reversed"]},{"Key":"The record","Fragments":["is"]},{"Key":"record is","Fragments":["certainly","object"]},{"Key":"certainly overkill","Fragments":["since"]},{"Key":"overkill since","Fragments":["it","you"]},{"Key":"doesn't offer","Fragments":["anything"]},{"Key":"offer anything","Fragments":["over"]},{"Key":"over a","Fragments":["String.","single","mixed","collection,","lunch","wider"]},{"Key":"a String.","Fragments":["You"]},{"Key":"String. You","Fragments":["could"]},{"Key":"could implement","Fragments":["your","`split`","that"]},{"Key":"implement your","Fragments":["protocol"]},{"Key":"your protocol","Fragments":["for"]},{"Key":"protocol for","Fragments":["a"]},{"Key":"String type","Fragments":["instead:"]},{"Key":"type instead:","Fragments":["`defimpl"]},{"Key":"instead: `defimpl","Fragments":["InputCategory,"]},{"Key":"`defimpl InputCategory,","Fragments":["for:"]},{"Key":"InputCategory, for:","Fragments":["String`"]},{"Key":"for: String`","Fragments":["but"]},{"Key":"String` but","Fragments":["only"]},{"Key":"one implementation","Fragments":["says"]},{"Key":"implementation says","Fragments":["to"]},{"Key":"says to","Fragments":["me,","prefer"]},{"Key":"me, why","Fragments":["not"]},{"Key":"Good points","Fragments":["guys,","@kayli"]},{"Key":"points guys,","Fragments":["thanks!"]},{"Key":"I tell","Fragments":["`String.split`"]},{"Key":"tell `String.split`","Fragments":["to"]},{"Key":"not strip","Fragments":["special"]},{"Key":"strip special","Fragments":["characters?"]},{"Key":"you're right.","Fragments":["Looking","This"]},{"Key":"right. Looking","Fragments":["back"]},{"Key":"Looking back","Fragments":["at","I"]},{"Key":"at my","Fragments":["code","implementation."]},{"Key":"code I","Fragments":["have","would","like","would","realize","try","think.","missed","would"]},{"Key":"have named","Fragments":["params."]},{"Key":"named params.","Fragments":["I'm"]},{"Key":"params. I'm","Fragments":["sure"]},{"Key":"Should I","Fragments":["move","always"]},{"Key":"move `HashDict.update(\u0026amp;2,","Fragments":["\u0026amp;1,"]},{"Key":"`HashDict.update(\u0026amp;2, \u0026amp;1,","Fragments":["1,"]},{"Key":"\u0026amp;1, 1,","Fragments":["fn(x)"]},{"Key":"1, fn(x)","Fragments":["-\u0026gt;","-\u003e"]},{"Key":"-\u0026gt; x+1","Fragments":["end)`"]},{"Key":"x+1 end)`","Fragments":["to"]},{"Key":"end)` to","Fragments":["a"]},{"Key":"nice. It","Fragments":["looks"]},{"Key":"only update","Fragments":["from"]},{"Key":"update from","Fragments":["version"]},{"Key":"from version","Fragments":["2","1."]},{"Key":"version 2","Fragments":["is"]},{"Key":"2 is","Fragments":["the","slightly"]},{"Key":"underscore added","Fragments":["to"]},{"Key":"added to","Fragments":["the","the","the"]},{"Key":"the variables","Fragments":["that","in","by"]},{"Key":"variables that","Fragments":["you","have"]},{"Key":"pass into","Fragments":["the"]},{"Key":"of `words_match?/2`.","Fragments":["I'm"]},{"Key":"`words_match?/2`. I'm","Fragments":["still"]},{"Key":"still fairly","Fragments":["new"]},{"Key":"fairly new","Fragments":["to"]},{"Key":"but It","Fragments":["looks"]},{"Key":" ya","Fragments":["I'm"]},{"Key":"ya I'm","Fragments":["not"]},{"Key":"didn't have","Fragments":["that","these","`@demetrius`","to","a"]},{"Key":"Oh, really?","Fragments":["Cool!"]},{"Key":"really? Cool!","Fragments":["Thanks!"]},{"Key":" p.s.","Fragments":["I","but"]},{"Key":"p.s. I","Fragments":["am"]},{"Key":"am *really*","Fragments":["loving"]},{"Key":"*really* loving","Fragments":["Elixir."]},{"Key":"loving Elixir.","Fragments":["This"]},{"Key":"This kind","Fragments":["of","of"]},{"Key":"is so","Fragments":["cool.","simple","obvious.","much","utterly","satisfying","little","powerful","factored","much"]},{"Key":"Good suggestion.","Fragments":["I"]},{"Key":"aware that","Fragments":["methods","\"_\"","the","`\\w`","for"]},{"Key":"that methods","Fragments":["can"]},{"Key":"methods can","Fragments":["be","be"]},{"Key":"used before","Fragments":["they"]},{"Key":"before they","Fragments":["are"]},{"Key":"Yes, my","Fragments":["doubt"]},{"Key":"my doubt","Fragments":["was"]},{"Key":"doubt was","Fragments":["to"]},{"Key":"Also take","Fragments":["a"]},{"Key":"to @lori,","Fragments":["I"]},{"Key":"@lori, I","Fragments":["split"]},{"Key":"I split","Fragments":["`Words.update/2`","it","it"]},{"Key":"split `Words.update/2`","Fragments":["into"]},{"Key":"`Words.update/2` into","Fragments":["2"]},{"Key":"into 2","Fragments":["cases."]},{"Key":"But what","Fragments":["is"]},{"Key":"the advantage","Fragments":["initializing","of"]},{"Key":"advantage initializing","Fragments":["`HashDict.new([])`"]},{"Key":"initializing `HashDict.new([])`","Fragments":["instead"]},{"Key":"`HashDict.new([])` instead","Fragments":["of"]},{"Key":"of `HashDict.new()`","Fragments":["?"]},{"Key":"usually put","Fragments":["parentheses"]},{"Key":"put parentheses","Fragments":["in"]},{"Key":"parentheses in","Fragments":["functions","function","`def`","the","function","everywhere"]},{"Key":"functions declarations","Fragments":["and"]},{"Key":"declarations and","Fragments":["functions"]},{"Key":"and functions","Fragments":["calls"]},{"Key":"functions calls","Fragments":[","]},{"Key":"calls ,","Fragments":["but"]},{"Key":"but because","Fragments":["IMHO","I"]},{"Key":"because IMHO","Fragments":["is"]},{"Key":"IMHO is","Fragments":["more","fine","more"]},{"Key":"True, but","Fragments":["you"]},{"Key":"those transformations","Fragments":["in"]},{"Key":"transformations in","Fragments":["`anagram?/2`"]},{"Key":"in `anagram?/2`","Fragments":["which"]},{"Key":"`anagram?/2` which","Fragments":["would"]},{"Key":"would allow","Fragments":["you","you","you","you","me","me","you","for"]},{"Key":"allow you","Fragments":["to","to","to","to","to","to"]},{"Key":"call from","Fragments":["downstream"]},{"Key":"from downstream","Fragments":["functions"]},{"Key":"downstream functions","Fragments":["(I"]},{"Key":"functions (I","Fragments":["believe)."]},{"Key":"was reminded","Fragments":["that"]},{"Key":"reminded that","Fragments":["when"]},{"Key":"care about","Fragments":["the","the","this,","line"]},{"Key":"you preface","Fragments":["it"]},{"Key":"preface it","Fragments":["with"]},{"Key":"an underscore,","Fragments":["so"]},{"Key":"underscore, so","Fragments":["my"]},{"Key":"my suggestion","Fragments":["would"]},{"Key":"suggestion would","Fragments":["actually","be"]},{"Key":"would actually","Fragments":["read:"]},{"Key":"defp same?(_word,","Fragments":["_word),"]},{"Key":"same?(_word, _word),","Fragments":["do:"]},{"Key":"_word), do:","Fragments":["true"]},{"Key":" Brilliant!","Fragments":["One"]},{"Key":"Brilliant! One","Fragments":["other"]},{"Key":"other thing,","Fragments":["you","which"]},{"Key":"thing, you","Fragments":["can"]},{"Key":"do `def","Fragments":["anagram?(_a,"]},{"Key":"`def anagram?(_a,","Fragments":["_a),"]},{"Key":"anagram?(_a, _a),","Fragments":["do:"]},{"Key":"_a), do:","Fragments":["false`"]},{"Key":"do: false`","Fragments":["since"]},{"Key":"false` since","Fragments":["you"]},{"Key":"don't actually","Fragments":["care","need","need","need","need"]},{"Key":"actually care","Fragments":["about"]},{"Key":"the parameter,","Fragments":["just"]},{"Key":"parameter, just","Fragments":["that"]},{"Key":"the streaming","Fragments":["tip,"]},{"Key":"streaming tip,","Fragments":["@hayley!"]},{"Key":"tip, @hayley!","Fragments":["In"]},{"Key":"@hayley! In","Fragments":["regards"]},{"Key":"regards of","Fragments":["using"]},{"Key":"like `defp","Fragments":["same?(word,"]},{"Key":"`defp same?(word,","Fragments":["word),","word),"]},{"Key":"same?(word, word),","Fragments":["do","do:"]},{"Key":"word), do","Fragments":["true`,"]},{"Key":"do true`,","Fragments":["I"]},{"Key":"true`, I","Fragments":["would"]},{"Key":"would still","Fragments":["have","have","be","need","be"]},{"Key":"call downcase","Fragments":["on"]},{"Key":"downcase on","Fragments":["it,"]},{"Key":"on it,","Fragments":["so","I"]},{"Key":"it, so","Fragments":["I'm","my","I"]},{"Key":"advantage compared","Fragments":["to"]},{"Key":"compared to","Fragments":["the","a","normal","the","the"]},{"Key":"current version.","Fragments":["Any"]},{"Key":"version. Any","Fragments":["other"]},{"Key":"Any other","Fragments":["way"]},{"Key":"A minor","Fragments":["point","point","point"]},{"Key":"minor point","Fragments":[",","..",",",",","though."]},{"Key":", the","Fragments":["names","guards"]},{"Key":"the paremeters","Fragments":["\u003ccode\u003ea,a\u003c/code\u003e"]},{"Key":"paremeters \u003ccode\u003ea,a\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003ea,a\u003c/code\u003e and","Fragments":["\u003ccode\u003ea,b\u003c/code\u003e"]},{"Key":"and \u003ccode\u003ea,b\u003c/code\u003e","Fragments":["don´t"]},{"Key":"\u003ccode\u003ea,b\u003c/code\u003e don´t","Fragments":["say"]},{"Key":"don´t say","Fragments":["much","much"]},{"Key":"much ..","Fragments":["but"]},{"Key":".. but","Fragments":["is"]},{"Key":"Great function","Fragments":["\u003ccode\u003eanagram?\u003c/code\u003e"]},{"Key":"function \u003ccode\u003eanagram?\u003c/code\u003e","Fragments":["with"]},{"Key":"\u003ccode\u003eanagram?\u003c/code\u003e with","Fragments":["pattern"]},{"Key":"matching inside","Fragments":["\u003ccode\u003efilter\u003c/code\u003e"]},{"Key":"inside \u003ccode\u003efilter\u003c/code\u003e","Fragments":["!"]},{"Key":"First example","Fragments":["I've"]},{"Key":"example I've","Fragments":["seen"]},{"Key":"seen with","Fragments":["documentation."]},{"Key":"with documentation.","Fragments":["It"]},{"Key":"documentation. It","Fragments":["seems"]},{"Key":"to form,","Fragments":["even"]},{"Key":"form, even","Fragments":["on"]},{"Key":"even on","Fragments":["little"]},{"Key":"on little","Fragments":["exercises"]},{"Key":"little exercises","Fragments":["like"]},{"Key":"exercises like","Fragments":["this","this"]},{"Key":"one. The","Fragments":["code","idea","key"]},{"Key":"looks good,","Fragments":["so","and","just","except"]},{"Key":"good, so","Fragments":["this"]},{"Key":"so this","Fragments":["isn't","is","is"]},{"Key":"good. There's","Fragments":["no","a"]},{"Key":"no guessing","Fragments":["what"]},{"Key":"guessing what","Fragments":["goes"]},{"Key":"what goes","Fragments":["into"]},{"Key":"goes into","Fragments":["that"]},{"Key":"that `HashDict`","Fragments":["now."]},{"Key":"`HashDict` now.","Fragments":["The"]},{"Key":"now. The","Fragments":["function"]},{"Key":"name makes","Fragments":["that"]},{"Key":"probably also","Fragments":["do"]},{"Key":"also do","Fragments":["`\u0026amp;(\u0026amp;1"]},{"Key":"do `\u0026amp;(\u0026amp;1","Fragments":["=="]},{"Key":"`\u0026amp;(\u0026amp;1 ==","Fragments":["word)`"]},{"Key":"word)` as","Fragments":["your"]},{"Key":"as your","Fragments":["second","comment","accumulator.","suggestion"]},{"Key":"to `count`","Fragments":["to"]},{"Key":"to tighten","Fragments":["that"]},{"Key":"tighten that","Fragments":["up"]},{"Key":"little bit,","Fragments":["but","though..."]},{"Key":"bit, but","Fragments":["that's","there"]},{"Key":"Hey Ben,","Fragments":["remember"]},{"Key":"Ben, remember","Fragments":["me"]},{"Key":"remember me","Fragments":["from"]},{"Key":"from Lowell?","Fragments":[";-)"]},{"Key":"You're probably","Fragments":["right","thinking"]},{"Key":"probably right","Fragments":["about"]},{"Key":"protocol being","Fragments":["overkill."]},{"Key":"being overkill.","Fragments":["I"]},{"Key":"overkill. I","Fragments":["honestly","did","should"]},{"Key":"honestly have","Fragments":["zero"]},{"Key":"have zero","Fragments":["experience"]},{"Key":"zero experience","Fragments":["with"]},{"Key":"experience with","Fragments":["Elixir","functional"]},{"Key":"I'm coming","Fragments":["to"]},{"Key":"coming to","Fragments":["it","me."]},{"Key":"to it","Fragments":["with","once","over","while"]},{"Key":"of assumptions","Fragments":["from"]},{"Key":"assumptions from","Fragments":["other"]},{"Key":"other languages,","Fragments":["namely","like","so","and","and"]},{"Key":"languages, namely","Fragments":["Ruby."]},{"Key":"more \"standard\"","Fragments":["Elixir"]},{"Key":"\"standard\" Elixir","Fragments":["to"]},{"Key":"just define","Fragments":["those","the"]},{"Key":"define those","Fragments":["methods"]},{"Key":"not bother","Fragments":["with"]},{"Key":"bother with","Fragments":["records","the"]},{"Key":"with records","Fragments":["and"]},{"Key":"records and","Fragments":["protocols?"]},{"Key":"of `words_match?/2`","Fragments":["up"]},{"Key":"`words_match?/2` up","Fragments":["and"]},{"Key":"and change","Fragments":["the"]},{"Key":"parameter names","Fragments":["to"]},{"Key":"names to","Fragments":["both","functions","the","the","the","the","the","`snake_case`.","things,"]},{"Key":"to both","Fragments":["be","of","for"]},{"Key":"both be","Fragments":["the"]},{"Key":"same. That","Fragments":["way"]},{"Key":"way it'll","Fragments":["be"]},{"Key":"be looking","Fragments":["for"]},{"Key":"for 2","Fragments":["parameters"]},{"Key":"2 parameters","Fragments":["that"]},{"Key":"parameters that","Fragments":["are"]},{"Key":"same. Boom.","Fragments":["That"]},{"Key":"Boom. That","Fragments":["eliminates"]},{"Key":"That eliminates","Fragments":["the"]},{"Key":"eliminates the","Fragments":["need","need"]},{"Key":"guard you","Fragments":["have"]},{"Key":"have on","Fragments":["the"]},{"Key":"other version","Fragments":["of"]},{"Key":" Otherwise","Fragments":["this","looks","good"]},{"Key":"Otherwise this","Fragments":["looks"]},{"Key":"can look","Fragments":["at","at","that"]},{"Key":"at `different?`","Fragments":["from"]},{"Key":"`different?` from","Fragments":["a"]},{"Key":"different angle,","Fragments":["and"]},{"Key":"angle, and","Fragments":["do:"]},{"Key":"word), do:","Fragments":["true`"]},{"Key":"Also, think","Fragments":["about"]},{"Key":"about streaming.","Fragments":["That's"]},{"Key":"streaming. That's","Fragments":["a"]},{"Key":"more erlang/elixir","Fragments":["way"]},{"Key":"approach `chars/1`.","Fragments":["`0.10.1`"]},{"Key":"`chars/1`. `0.10.1`","Fragments":["also"]},{"Key":"`0.10.1` also","Fragments":["introduced"]},{"Key":"also introduced","Fragments":["named"]},{"Key":"introduced named","Fragments":["functions,"]},{"Key":"pretty happy","Fragments":["with"]},{"Key":"with this.","Fragments":["The"]},{"Key":"this. The","Fragments":["HashDict"]},{"Key":"The HashDict","Fragments":["construction"]},{"Key":"HashDict construction","Fragments":["is"]},{"Key":"construction is","Fragments":["better."]},{"Key":"is better.","Fragments":["I'm"]},{"Key":"better. I'm","Fragments":["sure","still"]},{"Key":"there's better","Fragments":["ways"]},{"Key":"better ways","Fragments":["to","around","to"]},{"Key":"do this,","Fragments":["honestly,","please"]},{"Key":"this, honestly,","Fragments":["but"]},{"Key":"honestly, but","Fragments":["I'm"]},{"Key":"still picking","Fragments":["up"]},{"Key":"have something","Fragments":["to","as","in","similar","to"]},{"Key":"something to","Fragments":["pick","try","do","do","something","do","do","consider.","do"]},{"Key":"pick on,","Fragments":["but"]},{"Key":"on, but","Fragments":["this"]},{"Key":"pretty dang","Fragments":["good"]},{"Key":"dang good","Fragments":["to"]},{"Key":"me. Oh,","Fragments":["you"]},{"Key":"Oh, you","Fragments":["have"]},{"Key":"a weird","Fragments":["space","one."]},{"Key":"weird space","Fragments":["after"]},{"Key":"space after","Fragments":["the"]},{"Key":"the parenthesis","Fragments":["in","(`\u0026[\u00261|\u00262]`),"]},{"Key":"parenthesis in","Fragments":["`match/2`."]},{"Key":"in `match/2`.","Fragments":["So,"]},{"Key":"`match/2`. So,","Fragments":["there's"]},{"Key":"So, there's","Fragments":["that."]},{"Key":"the `import`","Fragments":["trick,"]},{"Key":"`import` trick,","Fragments":["too."]},{"Key":" Okey","Fragments":["dokey."]},{"Key":"Okey dokey.","Fragments":["Done."]},{"Key":" Conditionals","Fragments":["are"]},{"Key":"Conditionals are","Fragments":["usually"]},{"Key":"are usually","Fragments":["frowned"]},{"Key":"usually frowned","Fragments":["upon"]},{"Key":"frowned upon","Fragments":["or"]},{"Key":"upon or","Fragments":["generally"]},{"Key":"or generally","Fragments":["not"]},{"Key":"generally not","Fragments":["needed"]},{"Key":"not needed","Fragments":["in","to","search"]},{"Key":"needed in","Fragments":["Elixir.","ruby.","expressions","a"]},{"Key":"Elixir. So","Fragments":["you"]},{"Key":"So you","Fragments":["need","implemented","don't","can"]},{"Key":"in `count_words/2`?","Fragments":["I"]},{"Key":"`count_words/2`? I","Fragments":["took"]},{"Key":"took this","Fragments":["exercise","as"]},{"Key":"exercise as","Fragments":["a","my","complete,","the","it"]},{"Key":"good map-reduce","Fragments":["exercise"]},{"Key":"map-reduce exercise","Fragments":["in"]},{"Key":"general in","Fragments":["the","functional"]},{"Key":"the versions","Fragments":["that"]},{"Key":"versions that","Fragments":["I","I"]},{"Key":"I implemented.","Fragments":["Look"]},{"Key":"implemented. Look","Fragments":["at"]},{"Key":"at `Enum.reduce`","Fragments":["and"]},{"Key":"`Enum.reduce` and","Fragments":["see","`Enum.reverse`","implemented"]},{"Key":"that helps","Fragments":["simplify","with"]},{"Key":"helps simplify","Fragments":["your"]},{"Key":"nice. My","Fragments":["only"]},{"Key":"only suggestion","Fragments":["would"]},{"Key":"the `shout`","Fragments":["method"]},{"Key":"`shout` method","Fragments":["too,"]},{"Key":"method too,","Fragments":["otherwise"]},{"Key":"too, otherwise","Fragments":["it"]},{"Key":"otherwise it","Fragments":["looks","would"]},{"Key":"you're telling","Fragments":["Bob"]},{"Key":"telling Bob","Fragments":["to"]},{"Key":"Bob to","Fragments":["shout","talk."]},{"Key":"to shout","Fragments":["a"]},{"Key":"shout a","Fragments":["phrase"]},{"Key":"a phrase","Fragments":["rather"]},{"Key":"phrase rather","Fragments":["than"]},{"Key":"than testing","Fragments":["to"]},{"Key":"testing to","Fragments":["see"]},{"Key":"phrase is","Fragments":["a"]},{"Key":"shout. :","Fragments":[")"]},{"Key":"Your silence","Fragments":["Regular"]},{"Key":"silence Regular","Fragments":["Expression"]},{"Key":"Regular Expression","Fragments":["could"]},{"Key":"Expression could","Fragments":["probably"]},{"Key":"be dropped","Fragments":["in"]},{"Key":"dropped in","Fragments":["favor"]},{"Key":"of `String.strip`.","Fragments":["I"]},{"Key":"`String.strip`. I","Fragments":["find"]},{"Key":"sense than","Fragments":["trying"]},{"Key":"on with","Fragments":["all","the","the"]},{"Key":"regex codes.","Fragments":["Also,"]},{"Key":"codes. Also,","Fragments":["do"]},{"Key":"change my","Fragments":["habit"]},{"Key":"my habit","Fragments":["to","with"]},{"Key":"put \u003ccode\u003eis_\u003c/code\u003e","Fragments":["in"]},{"Key":"\u003ccode\u003eis_\u003c/code\u003e in","Fragments":["predicate"]},{"Key":"in predicate","Fragments":["functions"]},{"Key":"predicate functions","Fragments":[".(is","in","private","was","with","private.",",","need","helped","with","with","with"]},{"Key":"functions .(is","Fragments":["my"]},{"Key":".(is my","Fragments":["Groovy"]},{"Key":"my Groovy","Fragments":["background)."]},{"Key":"the stdlib,","Fragments":["it","look"]},{"Key":"stdlib, it","Fragments":["tends"]},{"Key":"it tends","Fragments":["to"]},{"Key":"tends to","Fragments":["do","mean","force","be"]},{"Key":"do either","Fragments":["`is_blah`"]},{"Key":"either `is_blah`","Fragments":["without"]},{"Key":"`is_blah` without","Fragments":["question"]},{"Key":"without question","Fragments":["mark"]},{"Key":"mark (a","Fragments":["lot"]},{"Key":"(a lot","Fragments":["of"]},{"Key":"stuff brought","Fragments":["over"]},{"Key":"brought over","Fragments":["directly"]},{"Key":"over directly","Fragments":["from"]},{"Key":"from Erlang","Fragments":["into","you"]},{"Key":"Erlang into","Fragments":["Kernel)"]},{"Key":"into Kernel)","Fragments":["or"]},{"Key":"Kernel) or","Fragments":["`blah?`"]},{"Key":"or `blah?`","Fragments":["without"]},{"Key":"`blah?` without","Fragments":["is"]},{"Key":"without is","Fragments":["and"]},{"Key":"and with","Fragments":["question","`Enum.all?`","a","linear"]},{"Key":"with question","Fragments":["mark"]},{"Key":"mark (most","Fragments":["stuff"]},{"Key":"(most stuff","Fragments":["that"]},{"Key":"was written","Fragments":["explicitly"]},{"Key":"written explicitly","Fragments":["for"]},{"Key":"explicitly for","Fragments":["Elixir).","A-Z"]},{"Key":"for Elixir).","Fragments":["So"]},{"Key":"Elixir). So","Fragments":["I'd"]},{"Key":"So I'd","Fragments":["go"]},{"Key":"I'd go","Fragments":["with","with","with","with"]},{"Key":"you're saying,","Fragments":["but"]},{"Key":"saying, but","Fragments":["I"]},{"Key":"the \u0026amp;1,","Fragments":["\u0026amp;2"]},{"Key":"\u0026amp;1, \u0026amp;2","Fragments":["notation"]},{"Key":"\u0026amp;2 notation","Fragments":["for"]},{"Key":"case (correct","Fragments":["me"]},{"Key":"(correct me","Fragments":["if"]},{"Key":"I'm wrong).","Fragments":["That"]},{"Key":"wrong). That","Fragments":["only"]},{"Key":"That only","Fragments":["works","took"]},{"Key":"only works","Fragments":["for","on","because"]},{"Key":"the shortcut","Fragments":["syntax","syntax","(basically"]},{"Key":"shortcut syntax","Fragments":["where","on"]},{"Key":"syntax where","Fragments":["you're"]},{"Key":"where you're","Fragments":["defining"]},{"Key":"you're defining","Fragments":["an"]},{"Key":"defining an","Fragments":["anonymous"]},{"Key":"function inline.","Fragments":["Since"]},{"Key":"inline. Since","Fragments":["I'm"]},{"Key":"`defp` and","Fragments":["explicitly","I","called","called","the"]},{"Key":"and explicitly","Fragments":["naming"]},{"Key":"explicitly naming","Fragments":["the"]},{"Key":"naming the","Fragments":["params","variable"]},{"Key":"the params","Fragments":["in"]},{"Key":"params in","Fragments":["the"]},{"Key":"parameter list","Fragments":["I","and"]},{"Key":"list I","Fragments":["think","couldn't"]},{"Key":"it expects/requires","Fragments":["that"]},{"Key":"expects/requires that","Fragments":["you"]},{"Key":"you reference","Fragments":["the"]},{"Key":"reference the","Fragments":["named","other","unwanted"]},{"Key":"named params","Fragments":["rather"]},{"Key":"params rather","Fragments":["than"]},{"Key":"than \u0026amp;1,","Fragments":["\u0026amp;2."]},{"Key":"nice! The","Fragments":["only","only"]},{"Key":"could say","Fragments":["is"]},{"Key":"use `\u0026amp;1`","Fragments":["and"]},{"Key":"`\u0026amp;1` and","Fragments":["`\u0026amp;2`"]},{"Key":"and `\u0026amp;2`","Fragments":["to"]},{"Key":"`\u0026amp;2` to","Fragments":["refer"]},{"Key":"to refer","Fragments":["to"]},{"Key":"in `anagrams?/2`,","Fragments":["but"]},{"Key":"`anagrams?/2`, but","Fragments":["I"]},{"Key":"I've enjoyed","Fragments":["the"]},{"Key":"enjoyed the","Fragments":["discussion"]},{"Key":"discussion and","Fragments":["discovery,"]},{"Key":"and discovery,","Fragments":["too."]},{"Key":"Thanks again","Fragments":["for","for","for","for","for","for","for","for","for","for","for"]},{"Key":"again for","Fragments":["the","the","the","each","your","the","the","the","your","the","each","the","such","all","the"]},{"Key":"I *really*","Fragments":["like"]},{"Key":"*really* like","Fragments":["that"]},{"Key":"that refactoring","Fragments":["of"]},{"Key":"refactoring of","Fragments":["the"]},{"Key":"the `anagrams?`","Fragments":["method","function"]},{"Key":"`anagrams?` method","Fragments":["into"]},{"Key":"method into","Fragments":["two"]},{"Key":"two separate","Fragments":["implementations","Enum.reject","filtering","function","conditions,"]},{"Key":"separate implementations","Fragments":["for","for"]},{"Key":"implementations for","Fragments":["those","each","keep","all"]},{"Key":"two cases.","Fragments":["Gives"]},{"Key":"cases. Gives","Fragments":["me"]},{"Key":"Gives me","Fragments":["a"]},{"Key":"new way","Fragments":["of"]},{"Key":"responsibility principle","Fragments":["in"]},{"Key":"principle in","Fragments":["Elixir."]},{"Key":"Elixir. Each","Fragments":["implementation"]},{"Key":"Each implementation","Fragments":["only"]},{"Key":"implementation only","Fragments":["does"]},{"Key":"only does","Fragments":["one"]},{"Key":"does one","Fragments":["thing!"]},{"Key":"one thing!","Fragments":["Very"]},{"Key":"thing! Very","Fragments":["cool."]},{"Key":"the style","Fragments":["of","`map_join(...)"]},{"Key":"style of","Fragments":["naming","programming","function","function"]},{"Key":"of naming","Fragments":["predicate","predicates"]},{"Key":"naming predicate","Fragments":["methods,","functions"]},{"Key":"predicate methods,","Fragments":["I"]},{"Key":"methods, I","Fragments":["am"]},{"Key":"sure either,","Fragments":["but"]},{"Key":"been recommending","Fragments":["to"]},{"Key":"recommending to","Fragments":["others"]},{"Key":"to others","Fragments":["to"]},{"Key":"others to","Fragments":["use","match."]},{"Key":"mark style,","Fragments":["since"]},{"Key":"style, since","Fragments":["the"]},{"Key":"is inspired","Fragments":["by"]},{"Key":"inspired by","Fragments":["Ruby","the"]},{"Key":"by Ruby","Fragments":["and"]},{"Key":"and that's","Fragments":["the","not","often"]},{"Key":"in Ruby.","Fragments":["Also,","I'd","Here's","Also","It"]},{"Key":"Ruby. Also,","Fragments":["I've","predicate"]},{"Key":"Also, I've","Fragments":["seen","seen"]},{"Key":"mark syntax","Fragments":["used"]},{"Key":"syntax used","Fragments":["pervasively"]},{"Key":"used pervasively","Fragments":["in"]},{"Key":"pervasively in","Fragments":["the"]},{"Key":"library too,","Fragments":["like"]},{"Key":"too, like","Fragments":["`String.end_with?`,"]},{"Key":"like `String.end_with?`,","Fragments":["`Enum.all?`,"]},{"Key":"`String.end_with?`, `Enum.all?`,","Fragments":["etc."]},{"Key":"`Enum.all?`, etc.","Fragments":["It"]},{"Key":"etc. It","Fragments":["seems"]},{"Key":"only methods","Fragments":["that"]},{"Key":"the `is_something`","Fragments":["style"]},{"Key":"`is_something` style","Fragments":["are"]},{"Key":"style are","Fragments":["tests"]},{"Key":"types like","Fragments":["`is_binary`,"]},{"Key":"like `is_binary`,","Fragments":["`is_integer`,"]},{"Key":"`is_binary`, `is_integer`,","Fragments":["`is_list`,"]},{"Key":"`is_integer`, `is_list`,","Fragments":["etc."]},{"Key":"`is_list`, etc.","Fragments":["I"]},{"Key":"etc. I","Fragments":["could","think"]},{"Key":"be wrong,","Fragments":["though."]},{"Key":"wrong, though.","Fragments":["I"]},{"Key":"though. I","Fragments":["haven't","like","just"]},{"Key":"haven't explored","Fragments":["too"]},{"Key":"explored too","Fragments":["much"]},{"Key":"I'll submit","Fragments":["a","a","a","a","a","a","a","that","a","a","a"]},{"Key":"if using","Fragments":["binaries","the","\"cond\""]},{"Key":"using binaries","Fragments":["instead"]},{"Key":"binaries instead","Fragments":["of"]},{"Key":"``` verse","Fragments":["```"]},{"Key":"verse ```","Fragments":["method"]},{"Key":"method was","Fragments":["a","doing"]},{"Key":"good choice;","Fragments":["for"]},{"Key":"choice; for","Fragments":["the"]},{"Key":"the rest","Fragments":["I've","of","of","on","of","in","is"]},{"Key":"rest I've","Fragments":["been"]},{"Key":"been adopting","Fragments":["recursion"]},{"Key":"adopting recursion","Fragments":["in"]},{"Key":"recursion in","Fragments":["the","`count`.","`square`?","`map`"]},{"Key":"``` _sing","Fragments":["```"]},{"Key":"_sing ```","Fragments":["method"]},{"Key":"and guard","Fragments":["clause","clauses","clauses."]},{"Key":"avoid conditionals","Fragments":["in"]},{"Key":"code. Waiting","Fragments":["for"]},{"Key":" Ahh,","Fragments":["good"]},{"Key":"Ahh, good","Fragments":["call."]},{"Key":"me. My","Fragments":["only"]},{"Key":"comment is","Fragments":["the","saved,"]},{"Key":"predicate function.","Fragments":["Someone"]},{"Key":"function. Someone","Fragments":["else"]},{"Key":"else (Katrina","Fragments":["herself"]},{"Key":"(Katrina herself","Fragments":["actually)"]},{"Key":"herself actually)","Fragments":["pointed"]},{"Key":"actually) pointed","Fragments":["out"]},{"Key":"it's redundant","Fragments":["to"]},{"Key":"have both","Fragments":["the"]},{"Key":"prefix `is_`","Fragments":["and","in"]},{"Key":"`?` in","Fragments":["the"]},{"Key":"the function/method","Fragments":["name."]},{"Key":"function/method name.","Fragments":["I"]},{"Key":"name. I","Fragments":["don't","think"]},{"Key":"that's cause","Fragments":["for"]},{"Key":"cause for","Fragments":["another"]},{"Key":"version unless","Fragments":["you"]},{"Key":"just started","Fragments":["learning"]},{"Key":"started learning","Fragments":["Elixir."]},{"Key":"learning Elixir.","Fragments":["2"]},{"Key":"Elixir. 2","Fragments":["functions"]},{"Key":"2 functions","Fragments":["can"]},{"Key":"as one-liners.","Fragments":["Also"]},{"Key":"one-liners. Also","Fragments":["one"]},{"Key":"Also one","Fragments":["cycle"]},{"Key":"one cycle","Fragments":["can"]},{"Key":"cycle can","Fragments":["be"]},{"Key":"be reduced","Fragments":["in","to:"]},{"Key":"reduced in","Fragments":["is_upcase"]},{"Key":"in is_upcase","Fragments":["if"]},{"Key":"is_upcase if","Fragments":["rewrite"]},{"Key":"if rewrite","Fragments":["it"]},{"Key":"best way","Fragments":["to","to","here","right","to","to","to","to","to"]},{"Key":"Right on!","Fragments":["I"]},{"Key":"on! I","Fragments":["think"]},{"Key":"good. Interesting","Fragments":["discoveries"]},{"Key":"Interesting discoveries","Fragments":["on"]},{"Key":"discoveries on","Fragments":["the"]},{"Key":"list stuff.","Fragments":["I,"]},{"Key":"stuff. I,","Fragments":["too,"]},{"Key":"I, too,","Fragments":["compared"]},{"Key":"too, compared","Fragments":["the"]},{"Key":"sorted arrays","Fragments":["in","directly."]},{"Key":"arrays in","Fragments":["my"]},{"Key":"my ruby","Fragments":["version.","methods"]},{"Key":"ruby version.","Fragments":["Nice,"]},{"Key":"version. Nice,","Fragments":["simple,"]},{"Key":"Nice, simple,","Fragments":["and"]},{"Key":"simple, and","Fragments":["clean.","using"]},{"Key":"did see","Fragments":["in"]},{"Key":"see in","Fragments":["another","this"]},{"Key":"another example","Fragments":["where"]},{"Key":"example where","Fragments":["you","I've","the"]},{"Key":"could take","Fragments":["the","advantage","advantage","out"]},{"Key":"`anagrams?` function","Fragments":["and"]},{"Key":"have 2","Fragments":["versions","implementations"]},{"Key":"2 versions","Fragments":["of","of"]},{"Key":"anagrams?(word1, word1),","Fragments":["do:"]},{"Key":"word1), do:","Fragments":["false"]},{"Key":"anagrams?(word1, word2),","Fragments":["do:"]},{"Key":"word2), do:","Fragments":["sort_letters(\u0026amp;1)"]},{"Key":"do: sort_letters(\u0026amp;1)","Fragments":["=="]},{"Key":"sort_letters(\u0026amp;1) ==","Fragments":["sort_letters(\u0026amp;2)"]},{"Key":"That may","Fragments":["not"]},{"Key":"quite right,","Fragments":["but"]},{"Key":"right, but","Fragments":["I","there"]},{"Key":"would work.","Fragments":["Also,","I"]},{"Key":"work. Also,","Fragments":["I've"]},{"Key":"seen some","Fragments":["discussion"]},{"Key":"some discussion","Fragments":["on","in"]},{"Key":"whether predicate","Fragments":["functions"]},{"Key":"mark or","Fragments":["pre"]},{"Key":"or pre","Fragments":["prefixed"]},{"Key":"pre prefixed","Fragments":["with"]},{"Key":"with `is_`.","Fragments":["I"]},{"Key":"`is_`. I","Fragments":["honestly"]},{"Key":"the answer,","Fragments":["but","I'm"]},{"Key":"answer, but","Fragments":["looking"]},{"Key":"looking through","Fragments":["the","the"]},{"Key":"library I","Fragments":["have"]},{"Key":"Anyways, thank","Fragments":["you"]},{"Key":"the good","Fragments":["discussion"]},{"Key":"good discussion","Fragments":["too."]},{"Key":"discussion too.","Fragments":["I'll"]},{"Key":"too. I'll","Fragments":["keep","take"]},{"Key":"keep an","Fragments":["eye"]},{"Key":"an eye","Fragments":["out","towards"]},{"Key":"eye out","Fragments":["for"]},{"Key":"can run","Fragments":["\u003ccode\u003eexercism"]},{"Key":"run \u003ccode\u003eexercism","Fragments":["submit"]},{"Key":"\u003ccode\u003eexercism submit","Fragments":["old-exercise-file.exs\u003c/code\u003e."]},{"Key":"submit old-exercise-file.exs\u003c/code\u003e.","Fragments":["It"]},{"Key":"old-exercise-file.exs\u003c/code\u003e. It","Fragments":["does"]},{"Key":"private using","Fragments":["[defp](http://elixir-lang.org/docs/stable/Kernel.html#defp/2).","`defp`"]},{"Key":"using [defp](http://elixir-lang.org/docs/stable/Kernel.html#defp/2).","Fragments":["Alternatively"]},{"Key":"[defp](http://elixir-lang.org/docs/stable/Kernel.html#defp/2). Alternatively","Fragments":["you"]},{"Key":"Alternatively you","Fragments":["could","could"]},{"Key":"extract them","Fragments":["into"]},{"Key":"separate module,","Fragments":["used","you","it's"]},{"Key":"module, used","Fragments":["to"]},{"Key":"to identify","Fragments":["the","groups","chaining,"]},{"Key":"a [case](http://elixir-lang.org/docs/stable/Kernel.html#case/2)","Fragments":["or"]},{"Key":"[case](http://elixir-lang.org/docs/stable/Kernel.html#case/2) or","Fragments":["[cond](http://elixir-lang.org/docs/stable/Kernel.html#cond/1)"]},{"Key":"or [cond](http://elixir-lang.org/docs/stable/Kernel.html#cond/1)","Fragments":["instead"]},{"Key":"[cond](http://elixir-lang.org/docs/stable/Kernel.html#cond/1) instead","Fragments":["of"]},{"Key":"of nested","Fragments":["if"]},{"Key":"nested if","Fragments":["statements.","with"]},{"Key":"if statements.","Fragments":["`question?/1`"]},{"Key":"statements. `question?/1`","Fragments":["is"]},{"Key":"`question?/1` is","Fragments":["a"]},{"Key":"name (the","Fragments":["`?`"]},{"Key":"(the `?`","Fragments":["is"]},{"Key":"`?` is","Fragments":["the"]},{"Key":"can omit","Fragments":["the"]},{"Key":"omit the","Fragments":["first","explicit"]},{"Key":"next function","Fragments":["when"]},{"Key":"function when","Fragments":["use","it","the","calling"]},{"Key":"when use","Fragments":["the"]},{"Key":"operator because","Fragments":["is"]},{"Key":"because is","Fragments":["the","more","a"]},{"Key":" Regex.scan(%r/\\w+/g,","Fragments":["String.downcase(text)"]},{"Key":"Regex.scan(%r/\\w+/g, String.downcase(text)","Fragments":[")"]},{"Key":"|\u0026gt; List.foldl(","Fragments":["HashDict.new(),"]},{"Key":"List.foldl( HashDict.new(),","Fragments":["update(\u0026amp;1,"]},{"Key":"HashDict.new(), update(\u0026amp;1,","Fragments":["\u0026amp;2))"]},{"Key":"And with","Fragments":["elixir"]},{"Key":"elixir \u003ccode\u003ev0.10.0\u003c/code\u003e","Fragments":["the"]},{"Key":"\u003ccode\u003ev0.10.0\u003c/code\u003e the","Fragments":["\u003ccode\u003eHashDict.update/4\u003c/code\u003e"]},{"Key":"the \u003ccode\u003eHashDict.update/4\u003c/code\u003e","Fragments":["is"]},{"Key":"\u003ccode\u003eHashDict.update/4\u003c/code\u003e is","Fragments":["supported"]},{"Key":"is supported","Fragments":[","]},{"Key":"supported ,","Fragments":["you"]},{"Key":", you","Fragments":["could","could","could","could","don't","also","have","could"]},{"Key":"use like","Fragments":["this:"]},{"Key":" HashDict.update(dict,","Fragments":["word,"]},{"Key":"HashDict.update(dict, word,","Fragments":["1,"]},{"Key":"more complicated","Fragments":["`4","code","logic."]},{"Key":"complicated `4","Fragments":["\u0026amp;\u0026amp;"]},{"Key":"`4 \u0026amp;\u0026amp;","Fragments":["!(100"]},{"Key":"\u0026amp;\u0026amp; !(100","Fragments":["\u0026amp;\u0026amp;"]},{"Key":"!(100 \u0026amp;\u0026amp;","Fragments":["!(400)`."]},{"Key":"\u0026amp;\u0026amp; !(400)`.","Fragments":["This"]},{"Key":"!(400)`. This","Fragments":["version"]},{"Key":"version flattens","Fragments":["the"]},{"Key":"flattens the","Fragments":["logic"]},{"Key":"logic a","Fragments":["bit"]},{"Key":"bit by","Fragments":["pulling","writing:","using"]},{"Key":"by pulling","Fragments":["the"]},{"Key":"pulling the","Fragments":["400"]},{"Key":"the 400","Fragments":["exception"]},{"Key":"400 exception","Fragments":["out"]},{"Key":"exception out","Fragments":["to"]},{"Key":"a nicer","Fragments":["solution","way","way","way","way"]},{"Key":"nicer solution","Fragments":["that"]},{"Key":"that used","Fragments":["a","only"]},{"Key":"a HashSet","Fragments":["and"]},{"Key":"HashSet and","Fragments":["records,"]},{"Key":"and records,","Fragments":["but"]},{"Key":"records, but","Fragments":["the"]},{"Key":"tests required","Fragments":["exposing","trailing"]},{"Key":"required exposing","Fragments":["the"]},{"Key":"exposing the","Fragments":["way","internal"]},{"Key":"data is","Fragments":["stored"]},{"Key":"is stored","Fragments":["and"]},{"Key":"stored and","Fragments":["relied"]},{"Key":"and relied","Fragments":["on"]},{"Key":"relied on","Fragments":["testing"]},{"Key":"on testing","Fragments":["that"]},{"Key":"testing that","Fragments":["directly."]},{"Key":"that directly.","Fragments":[":("]},{"Key":" compiler","Fragments":["rejected"]},{"Key":"compiler rejected","Fragments":["the"]},{"Key":"rejected the","Fragments":["expression:"]},{"Key":" text","Fragments":["|\u0026gt;","|\u003e"]},{"Key":"text |\u0026gt;","Fragments":["String.downcase"]},{"Key":"|\u0026gt; String.downcase","Fragments":["|\u0026gt;"]},{"Key":"String.downcase |\u0026gt;","Fragments":["String.split(\u0026amp;1,"]},{"Key":"|\u0026gt; String.split(\u0026amp;1,","Fragments":["%r{[^a-zA-Z0-9]+})"]},{"Key":"String.split(\u0026amp;1, %r{[^a-zA-Z0-9]+})","Fragments":["|\u0026gt;"]},{"Key":"%r{[^a-zA-Z0-9]+}) |\u0026gt;","Fragments":["List.foldl(\u0026amp;1,"]},{"Key":"|\u0026gt; List.foldl(\u0026amp;1,","Fragments":["HashDict.new(),"]},{"Key":"List.foldl(\u0026amp;1, HashDict.new(),","Fragments":["Words.update)"]},{"Key":"** (ArgumentError)","Fragments":["Unsupported","argument","unbound"]},{"Key":"(ArgumentError) Unsupported","Fragments":["expression"]},{"Key":"Unsupported expression","Fragments":["in"]},{"Key":"expression in","Fragments":["pipeline","a","a","one","the","this","the"]},{"Key":"in pipeline","Fragments":["|\u0026gt;"]},{"Key":"pipeline |\u0026gt;","Fragments":["operator:"]},{"Key":"|\u0026gt; operator:","Fragments":["String.split(\u0026amp;1,"]},{"Key":"operator: String.split(\u0026amp;1,","Fragments":["sigil_r(\u0026gt;,"]},{"Key":"String.split(\u0026amp;1, sigil_r(\u0026gt;,","Fragments":["[]))"]},{"Key":"the [pipeline](http://elixir-lang.org/docs/stable/Kernel.html#|\u0026gt;/2)","Fragments":["operator"]},{"Key":"[pipeline](http://elixir-lang.org/docs/stable/Kernel.html#|\u0026gt;/2) operator","Fragments":["in"]},{"Key":"your count","Fragments":["function?","function.","efficient."]},{"Key":"know Elixir's","Fragments":["convention."]},{"Key":"Elixir's convention.","Fragments":["I"]},{"Key":"convention. I","Fragments":["have"]},{"Key":"have have","Fragments":["picked","that"]},{"Key":"have picked","Fragments":["it"]},{"Key":"picked it","Fragments":["up"]},{"Key":"compiled it","Fragments":["using"]},{"Key":"it using","Fragments":["Erlang","pattern","`defp`)","character","the","`append`"]},{"Key":"using Erlang","Fragments":["R16B01."]},{"Key":"Erlang R16B01.","Fragments":["I'm"]},{"Key":"R16B01. I'm","Fragments":["working"]},{"Key":"I'm working","Fragments":["on","through"]},{"Key":"on OS","Fragments":["X"]},{"Key":"OS X","Fragments":["10.7.5"]},{"Key":"I feel,","Fragments":["however,"]},{"Key":"feel, however,","Fragments":["that"]},{"Key":"however, that","Fragments":["calling"]},{"Key":"that calling","Fragments":["`String.downcase`"]},{"Key":"calling `String.downcase`","Fragments":["piped"]},{"Key":"`String.downcase` piped","Fragments":["seems"]},{"Key":"piped seems","Fragments":["weird"]},{"Key":"weird and","Fragments":["out"]},{"Key":"of place.","Fragments":["Do"]},{"Key":"place. Do","Fragments":["you"]},{"Key":"you thinking","Fragments":["wrapping","just"]},{"Key":"thinking wrapping","Fragments":["it"]},{"Key":"wrapping it","Fragments":["in","into"]},{"Key":" Last,","Fragments":["the"]},{"Key":"Last, the","Fragments":["last"]},{"Key":"last function","Fragments":["in","a","call,"]},{"Key":"pipeline is","Fragments":["a","fine,","stacked"]},{"Key":"read, specifically","Fragments":["the"]},{"Key":"specifically the","Fragments":["HashDict.update"]},{"Key":"the HashDict.update","Fragments":["part"]},{"Key":"HashDict.update part","Fragments":["as"]},{"Key":"part as","Fragments":["you're"]},{"Key":"as you're","Fragments":["passing"]},{"Key":"passing in","Fragments":["the"]},{"Key":"arguments and","Fragments":["it's"]},{"Key":"it's very","Fragments":["easy","inefficient.","easy","scrolly."]},{"Key":"get lost","Fragments":["in"]},{"Key":"lost in","Fragments":["there.","the"]},{"Key":"in there.","Fragments":["It'd"]},{"Key":"there. It'd","Fragments":["be"]},{"Key":"it off","Fragments":["into"]},{"Key":"off into","Fragments":["functions"]},{"Key":"that tell","Fragments":["the"]},{"Key":"tell the","Fragments":["story","compiler","bigger","story"]},{"Key":"story of","Fragments":["what's"]},{"Key":"Looks nice!","Fragments":["The"]},{"Key":"is maybe","Fragments":["moving","`String.ends_with?/2`"]},{"Key":"maybe moving","Fragments":["the"]},{"Key":"methods down","Fragments":["below"]},{"Key":"down below","Fragments":["the","the"]},{"Key":"method so","Fragments":["that","I"]},{"Key":"you're reading","Fragments":["the"]},{"Key":"reading the","Fragments":["code","code","test","code","```hey```","*bonus"]},{"Key":"most important","Fragments":["thing","optimization","bit","thing."]},{"Key":"important thing","Fragments":["comes"]},{"Key":"thing comes","Fragments":["first."]},{"Key":"comes first.","Fragments":["Then"]},{"Key":"first. Then","Fragments":["you"]},{"Key":"can continue","Fragments":["reading"]},{"Key":"continue reading","Fragments":["to"]},{"Key":"reading to","Fragments":["dig","find"]},{"Key":"to dig","Fragments":["into","into","further"]},{"Key":"dig into","Fragments":["the","the","it"]},{"Key":"the details","Fragments":["of","of","of","of"]},{"Key":"the implementation.","Fragments":["But"]},{"Key":"implementation. But","Fragments":["yeah,"]},{"Key":"But yeah,","Fragments":["I","other","`Enum.to_list`","I","I","your"]},{"Key":"yeah, I","Fragments":["like","think","did","would","don't","think"]},{"Key":"it. :","Fragments":[")",")"]},{"Key":"good. This","Fragments":["ends"]},{"Key":"This ends","Fragments":["up"]},{"Key":"ends up","Fragments":["pretty","doing","being","filtering","stripping"]},{"Key":"up pretty","Fragments":["much"]},{"Key":"much identical","Fragments":["to"]},{"Key":"identical to","Fragments":["my","what"]},{"Key":"`|\u0026gt;` to","Fragments":["make"]},{"Key":"the predicates","Fragments":["read","depending"]},{"Key":"predicates read","Fragments":["a"]},{"Key":"bit cleaner.","Fragments":["e.g."]},{"Key":"def asking?(greeting)","Fragments":["do"]},{"Key":" greeting","Fragments":["|\u0026gt;"]},{"Key":"greeting |\u0026gt;","Fragments":["String.ends_with?(\"?\")","String.ends_with?(\"?\")"]},{"Key":"def ignoring?(greeting)","Fragments":["do"]},{"Key":" (greeting","Fragments":["|\u0026gt;"]},{"Key":"(greeting |\u0026gt;","Fragments":["String.strip)"]},{"Key":"|\u0026gt; String.strip)","Fragments":["=="]},{"Key":"String.strip) ==","Fragments":["\"\""]},{"Key":" edit","Fragments":["-"]},{"Key":"edit -","Fragments":["ugh,"]},{"Key":"- ugh,","Fragments":["the"]},{"Key":"ugh, the","Fragments":["\"|\u0026gt;\""]},{"Key":"the \"|\u0026gt;\"","Fragments":["operator","operator"]},{"Key":"\"|\u0026gt;\" operator","Fragments":["in","is"]},{"Key":"in code","Fragments":["gets","or","instead","but"]},{"Key":"code gets","Fragments":["escaped"]},{"Key":"gets escaped","Fragments":["when"]},{"Key":"escaped when","Fragments":["the"]},{"Key":"is saved,","Fragments":["but"]},{"Key":"saved, but","Fragments":["you"]},{"Key":"Hey @estrella,","Fragments":["I"]},{"Key":"@estrella, I","Fragments":["think"]},{"Key":"discovered why","Fragments":["your"]},{"Key":"why your","Fragments":["simplification"]},{"Key":"your simplification","Fragments":["of"]},{"Key":"simplification of","Fragments":["the"]},{"Key":"the sorting","Fragments":["letters","on","does,"]},{"Key":"sorting letters","Fragments":["thing"]},{"Key":"letters thing","Fragments":["was"]},{"Key":"thing was","Fragments":["working."]},{"Key":"was working.","Fragments":["I"]},{"Key":"working. I","Fragments":["fired"]},{"Key":"I fired","Fragments":["up"]},{"Key":"fired up","Fragments":["iex"]},{"Key":"iex and","Fragments":["tried"]},{"Key":"and tried","Fragments":["it,"]},{"Key":"tried it,","Fragments":["and"]},{"Key":"output after","Fragments":["`String.downcase`"]},{"Key":"after `String.downcase`","Fragments":["was"]},{"Key":"`String.downcase` was","Fragments":["actually"]},{"Key":"list. Interesting,","Fragments":["eh?"]},{"Key":"Interesting, eh?","Fragments":["And"]},{"Key":"eh? And","Fragments":["comparing"]},{"Key":"And comparing","Fragments":["two"]},{"Key":"comparing two","Fragments":["lists","strings,"]},{"Key":"two lists","Fragments":["(pattern","and","of","have"]},{"Key":"lists (pattern","Fragments":["matching"]},{"Key":"(pattern matching","Fragments":["them)"]},{"Key":"matching them)","Fragments":["works"]},{"Key":"them) works","Fragments":["just"]},{"Key":"works just","Fragments":["as"]},{"Key":"as comparing","Fragments":["two"]},{"Key":"two strings,","Fragments":["so"]},{"Key":"strings, so","Fragments":["you"]},{"Key":"actually need","Fragments":["to","a","to","`reduce_iter`,","the"]},{"Key":"to join","Fragments":["the","the","the","strings","the"]},{"Key":"join the","Fragments":["list","lines","char","strings","sorted","results"]},{"Key":"list back","Fragments":["into","to"]},{"Key":"string. I","Fragments":["did"]},{"Key":"version (not","Fragments":["joining"]},{"Key":"(not joining","Fragments":["the"]},{"Key":"joining the","Fragments":["array),","two","two","enum"]},{"Key":"the array),","Fragments":["but"]},{"Key":"array), but","Fragments":["did"]},{"Key":"but did","Fragments":["the"]},{"Key":"the join","Fragments":["in"]},{"Key":"join in","Fragments":["JavaScript"]},{"Key":"in JavaScript","Fragments":["because","dictated"]},{"Key":"JavaScript because","Fragments":["you"]},{"Key":"because you","Fragments":["had","often","have","are","use","can,","have"]},{"Key":"to and","Fragments":["didn't","from","including"]},{"Key":"think to","Fragments":["try","do","look","use"]},{"Key":"try not","Fragments":["doing","to"]},{"Key":"of simplifications.","Fragments":["I"]},{"Key":"simplifications. I","Fragments":["went"]},{"Key":"went ahead","Fragments":["and","and","and","and","with"]},{"Key":"and stuck","Fragments":["with"]},{"Key":"stuck with","Fragments":["`Enum.sort`"]},{"Key":"with `Enum.sort`","Fragments":["'cause"]},{"Key":"`Enum.sort` 'cause","Fragments":["it"]},{"Key":"'cause it","Fragments":["feels"]},{"Key":"feels nicer","Fragments":["to"]},{"Key":"nicer to","Fragments":["stay","use","read."]},{"Key":"to stay","Fragments":["in","below","recursive,"]},{"Key":"stay in","Fragments":["Elixir","the"]},{"Key":"Elixir land,","Fragments":["but"]},{"Key":"land, but","Fragments":["it's"]},{"Key":"it's cool","Fragments":["to"]},{"Key":"cool to","Fragments":["remember"]},{"Key":"to remember","Fragments":["that","that","the","that","Chinese"]},{"Key":"call out","Fragments":["to"]},{"Key":"to Erlang","Fragments":["when"]},{"Key":"Erlang when","Fragments":["needed."]},{"Key":"This has","Fragments":["been","actually","the","a","some"]},{"Key":"been iterated","Fragments":["on"]},{"Key":"iterated on","Fragments":["a"]},{"Key":"few times.","Fragments":["version","That"]},{"Key":"times. version","Fragments":["3"]},{"Key":"version 3","Fragments":["("]},{"Key":"3 (","Fragments":["http://exercism.io/submissions/522faad3b432ab395a000265"]},{"Key":"( http://exercism.io/submissions/522faad3b432ab395a000265","Fragments":[")"]},{"Key":"http://exercism.io/submissions/522faad3b432ab395a000265 )","Fragments":["is"]},{"Key":") is","Fragments":["probably","required"]},{"Key":"the symmetry","Fragments":["of","of"]},{"Key":"symmetry of","Fragments":["the","the"]},{"Key":"functions was","Fragments":["crying"]},{"Key":"was crying","Fragments":["out"]},{"Key":"crying out","Fragments":["to"]},{"Key":"be refactored,","Fragments":["so"]},{"Key":"refactored, so","Fragments":["I"]},{"Key":"I ended","Fragments":["up","up","up","up","up","up","up","up","up"]},{"Key":"ended up","Fragments":["with","with.","with","with","with","writing","either","writing","ditching","using"]},{"Key":"with this,","Fragments":["which","I","but","but"]},{"Key":"this, which","Fragments":["extracts"]},{"Key":"which extracts","Fragments":["the"]},{"Key":"extracts the","Fragments":["common","core"]},{"Key":"the common","Fragments":["logic","idiom","convention","way.","parts"]},{"Key":"common logic","Fragments":["out."]},{"Key":"The predicates","Fragments":["could"]},{"Key":"predicates could","Fragments":["also"]},{"Key":"a macro,","Fragments":["but"]},{"Key":"macro, but","Fragments":["that's"]},{"Key":"getting silly","Fragments":["for"]},{"Key":"silly for","Fragments":["such"]},{"Key":"small example","Fragments":[":)"]},{"Key":"Also a","Fragments":["noob"]},{"Key":"noob here,","Fragments":["and"]},{"Key":"pretty darn","Fragments":["good"]},{"Key":"darn good","Fragments":["for"]},{"Key":"version. It","Fragments":["took"]},{"Key":"It took","Fragments":["me","more"]},{"Key":"me three","Fragments":["passes"]},{"Key":"three passes","Fragments":["to"]},{"Key":"passes to","Fragments":["get"]},{"Key":"first elixir","Fragments":["code","code,","program."]},{"Key":"I've ever","Fragments":["written,","written"]},{"Key":"ever written,","Fragments":["so"]},{"Key":"written, so","Fragments":["I've"]},{"Key":"so I've","Fragments":["likely","become"]},{"Key":"I've likely","Fragments":["taken"]},{"Key":"likely taken","Fragments":["the"]},{"Key":"taken the","Fragments":["wrong"]},{"Key":"wrong approach.","Fragments":["Any"]},{"Key":"approach. Any","Fragments":["and"]},{"Key":"Any and","Fragments":["all"]},{"Key":"and all","Fragments":["tips","the","problems","letters","the"]},{"Key":"all tips","Fragments":["and"]},{"Key":"and pointers","Fragments":["are"]},{"Key":"pointers are","Fragments":["happily"]},{"Key":"are happily","Fragments":["accepted."]},{"Key":"happily accepted.","Fragments":["Thanks!"]},{"Key":"interesting to","Fragments":["me","learn","see.","work"]},{"Key":"real Elixir","Fragments":["novice."]},{"Key":"Elixir novice.","Fragments":["Can"]},{"Key":"novice. Can","Fragments":["you"]},{"Key":"you talk","Fragments":["a"]},{"Key":"talk a","Fragments":["bit"]},{"Key":"got to","Fragments":["this","look"]},{"Key":"Using a","Fragments":["separate","regex","library","list","pipe"]},{"Key":"module for","Fragments":["statements"]},{"Key":"for statements","Fragments":["is"]},{"Key":"statements is","Fragments":["interesting,"]},{"Key":"But from","Fragments":["a"]},{"Key":"a code","Fragments":["encapsulation","example?","example","smell.","formatting","smell"]},{"Key":"code encapsulation","Fragments":["standpoint"]},{"Key":"encapsulation standpoint","Fragments":["it"]},{"Key":"standpoint it","Fragments":["seems"]},{"Key":"make sense.","Fragments":["I'm","I","I'm","I","Thanks!"]},{"Key":"sense. I'm","Fragments":["a","not"]},{"Key":"total Elixir","Fragments":["noob,"]},{"Key":"Elixir noob,","Fragments":["so"]},{"Key":"noob, so","Fragments":["I'm"]},{"Key":"common idiom","Fragments":["is."]},{"Key":"for ```silence?```","Fragments":["is"]},{"Key":"```silence?``` is","Fragments":["cool,"]},{"Key":"cool, but","Fragments":["you","not"]},{"Key":"length just","Fragments":["that"]},{"Key":"the value,","Fragments":["stripped,"]},{"Key":"value, stripped,","Fragments":["is"]},{"Key":"stripped, is","Fragments":["\"\"."]},{"Key":"is \"\".","Fragments":["That"]},{"Key":"\"\". That","Fragments":["might"]},{"Key":"Hey, me","Fragments":["too!"]},{"Key":"right direction.","Fragments":["Much","So"]},{"Key":"direction. Much","Fragments":["like"]},{"Key":"Much like","Fragments":["Ruby"]},{"Key":"Ruby you","Fragments":["can"]},{"Key":"some String","Fragments":["functions"]},{"Key":"the regexes","Fragments":["and"]},{"Key":"regexes and","Fragments":["make","with"]},{"Key":"code clearer.","Fragments":["My","It"]},{"Key":"clearer. My","Fragments":["first"]},{"Key":"first passes","Fragments":["used"]},{"Key":"passes used","Fragments":["regexes"]},{"Key":"used regexes","Fragments":["also."]},{"Key":"First I","Fragments":["am","care"]},{"Key":"a complete","Fragments":["Elixir"]},{"Key":"complete Elixir","Fragments":["novice,"]},{"Key":"Elixir novice,","Fragments":["so"]},{"Key":"novice, so","Fragments":["take"]},{"Key":"so take","Fragments":["what","these","it"]},{"Key":"take what","Fragments":["I'm"]},{"Key":"I'm about","Fragments":["to","to"]},{"Key":"about to","Fragments":["say","submit"]},{"Key":"say with","Fragments":["that"]},{"Key":"with Enum.","Fragments":["But"]},{"Key":"Enum. But","Fragments":["I"]},{"Key":"finally decided","Fragments":["that"]},{"Key":"and remembered","Fragments":["that"]},{"Key":"that functional","Fragments":["languages"]},{"Key":"functional languages","Fragments":["tend","you"]},{"Key":"languages tend","Fragments":["to"]},{"Key":"to prefer","Fragments":["recursion","downcasing","`and`"]},{"Key":"prefer recursion","Fragments":["to"]},{"Key":"recursion to","Fragments":["enumeration,","update","look","most","transcribe"]},{"Key":"to enumeration,","Fragments":["and"]},{"Key":"enumeration, and","Fragments":["that"]},{"Key":"key for","Fragments":["me."]},{"Key":"While you","Fragments":["have","would"]},{"Key":"with Enum,","Fragments":["which"]},{"Key":"Enum, which","Fragments":["I"]},{"Key":"was never","Fragments":["able"]},{"Key":"never able","Fragments":["to"]},{"Key":"to get,","Fragments":["the","since"]},{"Key":"get, the","Fragments":["recursive"]},{"Key":"recursive strategy","Fragments":["I"]},{"Key":"strategy I","Fragments":["think"]},{"Key":"think makes","Fragments":["the"]},{"Key":"feedback! Submission","Fragments":["updated..."]},{"Key":"look up","Fragments":["`defprotocol`","what","the","all","and","the","the"]},{"Key":"up `defprotocol`","Fragments":["to"]},{"Key":"`defprotocol` to","Fragments":["see"]},{"Key":"did here.","Fragments":["That's"]},{"Key":"here. That's","Fragments":["pretty","not"]},{"Key":"pretty cool.","Fragments":["Pretty"]},{"Key":"cool. Pretty","Fragments":["nice"]},{"Key":"Pretty nice","Fragments":["implementation"]},{"Key":"nice implementation","Fragments":["here."]},{"Key":"is My","Fragments":["First"]},{"Key":"My First","Fragments":["Program(tm)"]},{"Key":"First Program(tm)","Fragments":["in"]},{"Key":"Program(tm) in","Fragments":["elixir"]},{"Key":"elixir :)","Fragments":["I"]},{"Key":":) I","Fragments":["have","would","could","tried","forgot","learned"]},{"Key":"I'm doing...","Fragments":["coming"]},{"Key":"doing... coming","Fragments":["from"]},{"Key":"coming from","Fragments":["Ruby."]},{"Key":"* Do","Fragments":["you"]},{"Key":"mean in","Fragments":["the","terms"]},{"Key":"function declarations,","Fragments":["function"]},{"Key":"declarations, function","Fragments":["calls"]},{"Key":"calls or","Fragments":["both?"]},{"Key":"or both?","Fragments":["I"]},{"Key":"both? I","Fragments":["tried"]},{"Key":"a tradeoff,","Fragments":["using"]},{"Key":"tradeoff, using","Fragments":["parenthesises"]},{"Key":"using parenthesises","Fragments":["where"]},{"Key":"parenthesises where","Fragments":["it"]},{"Key":"could possibly","Fragments":["be","get"]},{"Key":"possibly be","Fragments":["ambiguous"]},{"Key":"be ambiguous","Fragments":["to"]},{"Key":"ambiguous to","Fragments":["the"]},{"Key":"the reader,","Fragments":["but"]},{"Key":"not when","Fragments":["not"]},{"Key":"when not","Fragments":["necessary."]},{"Key":"* Predicate","Fragments":["functions:"]},{"Key":"Predicate functions:","Fragments":["These"]},{"Key":"functions: These","Fragments":["are"]},{"Key":"not predicate","Fragments":["functions,"]},{"Key":"predicate functions,","Fragments":["they"]},{"Key":"functions, they","Fragments":["are"]},{"Key":"are partially","Fragments":["applied"]},{"Key":"partially applied","Fragments":["functions","function"]},{"Key":"applied functions","Fragments":["that"]},{"Key":"that generate","Fragments":["the"]},{"Key":"the predicates.","Fragments":["Therefore"]},{"Key":"predicates. Therefore","Fragments":["I"]},{"Key":"Therefore I","Fragments":["chose","introduced"]},{"Key":"chose not","Fragments":["to","to"]},{"Key":"to append","Fragments":["'?'.","efficiently.","to"]},{"Key":"last tip,","Fragments":["sounds"]},{"Key":"tip, sounds","Fragments":["similar"]},{"Key":"sounds similar","Fragments":["to"]},{"Key":"Here's that","Fragments":["code"]},{"Key":"that code","Fragments":["sample","easier"]},{"Key":"code sample","Fragments":["again."]},{"Key":"sample again.","Fragments":["Apparently"]},{"Key":"again. Apparently","Fragments":["when"]},{"Key":"Apparently when","Fragments":["you"]},{"Key":"you edit","Fragments":["a"]},{"Key":"edit a","Fragments":["nitpick"]},{"Key":"nitpick it","Fragments":["fudges"]},{"Key":"it fudges","Fragments":["the"]},{"Key":"fudges the","Fragments":["characters:"]},{"Key":"the characters:","Fragments":["(I"]},{"Key":"characters: (I","Fragments":["hope"]},{"Key":"(I hope","Fragments":["this","that's"]},{"Key":"hope this","Fragments":["works)","is"]},{"Key":" Enum.filter(candidates,","Fragments":["\u0026amp;is_anagram?(source,"]},{"Key":"Enum.filter(candidates, \u0026amp;is_anagram?(source,","Fragments":["\u0026amp;1))"]},{"Key":" Long","Fragments":["story"]},{"Key":"Long story","Fragments":["short,"]},{"Key":"story short,","Fragments":["the"]},{"Key":"short, the","Fragments":["```\u0026amp;1```"]},{"Key":"the ```\u0026amp;1```","Fragments":["acts"]},{"Key":"```\u0026amp;1``` acts","Fragments":["as"]},{"Key":"acts as","Fragments":["the"]},{"Key":"the placeholder","Fragments":["for","syntax"]},{"Key":"placeholder for","Fragments":["each"]},{"Key":"element in","Fragments":["the","candidates","a","`acc`)","`acc`)","list"]},{"Key":"about passing","Fragments":["a"]},{"Key":"passing a","Fragments":["partially","range","default"]},{"Key":"a partially","Fragments":["applied"]},{"Key":"applied function","Fragments":["to"]},{"Key":"your filter/reject","Fragments":["operations?"]},{"Key":"filter/reject operations?","Fragments":["For"]},{"Key":"operations? For","Fragments":["example"]},{"Key":"example ```Enum.filter(candidates,","Fragments":["\u0026amp;is_anagram?(source,"]},{"Key":"```Enum.filter(candidates, \u0026amp;is_anagram?(source,","Fragments":["\u0026amp;1))```"]},{"Key":"\u0026amp;is_anagram?(source, \u0026amp;1))```","Fragments":["It"]},{"Key":"\u0026amp;1))``` It","Fragments":["saves"]},{"Key":"It saves","Fragments":["you"]},{"Key":"saves you","Fragments":["from","from"]},{"Key":"put together","Fragments":["a"]},{"Key":"together a","Fragments":["new"]},{"Key":"that work","Fragments":["for","(hence"]},{"Key":" Granted,","Fragments":["it's"]},{"Key":"Granted, it's","Fragments":["not"]},{"Key":"not *always*","Fragments":["the"]},{"Key":"*always* the","Fragments":["most"]},{"Key":"readable solution,","Fragments":["but"]},{"Key":"a perfectly","Fragments":["lovely"]},{"Key":"perfectly lovely","Fragments":["way"]},{"Key":"lovely way","Fragments":["to"]},{"Key":"think what","Fragments":["@wava","you","most","the"]},{"Key":"what @wava","Fragments":["means"]},{"Key":"@wava means","Fragments":["is"]},{"Key":"means is","Fragments":["that"]},{"Key":"of overhead","Fragments":["both"]},{"Key":"overhead both","Fragments":["for"]},{"Key":"both for","Fragments":["the","the","your","shouting:"]},{"Key":"the runtime","Fragments":["and","only"]},{"Key":"runtime and","Fragments":["for"]},{"Key":"and for","Fragments":["the","discard","the","the","the","bad","some","that"]},{"Key":"reader in","Fragments":["using"]},{"Key":"using regexes.","Fragments":["The"]},{"Key":"regexes. The","Fragments":["runtime"]},{"Key":"The runtime","Fragments":["has","wants"]},{"Key":"runtime has","Fragments":["to"]},{"Key":"and engage","Fragments":["all"]},{"Key":"engage all","Fragments":["the"]},{"Key":"magic that","Fragments":["you"]},{"Key":"get with","Fragments":["regexes"]},{"Key":"with regexes","Fragments":["(match"]},{"Key":"regexes (match","Fragments":["variables,"]},{"Key":"(match variables,","Fragments":["etc.),"]},{"Key":"variables, etc.),","Fragments":["and"]},{"Key":"etc.), and","Fragments":["the"]},{"Key":"to pretty","Fragments":["much"]},{"Key":"much do","Fragments":["the"]},{"Key":"thing in","Fragments":["order","itself","constant","Ruby","memory"]},{"Key":"order to","Fragments":["understand","learn","gain","eliminate","allow","understand"]},{"Key":"The way","Fragments":["I","I","I","you","to","you're","you've","you've","you","`Dict`","you"]},{"Key":"see it,","Fragments":["regular","I'm","but"]},{"Key":"it, regular","Fragments":["expressions"]},{"Key":"are run","Fragments":["for"]},{"Key":"run for","Fragments":["their"]},{"Key":"for their","Fragments":["side"]},{"Key":"their side","Fragments":["effects."]},{"Key":"side effects.","Fragments":["A"]},{"Key":"effects. A","Fragments":["regex"]},{"Key":"A regex","Fragments":["is"]},{"Key":"new entity","Fragments":["inserted"]},{"Key":"entity inserted","Fragments":["into"]},{"Key":"into your","Fragments":["code","pipeline,"]},{"Key":"does its","Fragments":["own"]},{"Key":"own thing,","Fragments":["and"]},{"Key":"thing, and","Fragments":["you're","might"]},{"Key":"and you're","Fragments":["left","just","the"]},{"Key":"you're left","Fragments":["examining"]},{"Key":"left examining","Fragments":["the"]},{"Key":"examining the","Fragments":["stuff"]},{"Key":"the stuff","Fragments":["it","you","you"]},{"Key":"stuff it","Fragments":["leaves"]},{"Key":"it leaves","Fragments":["behind."]},{"Key":"That being","Fragments":["said,","said,"]},{"Key":"being said,","Fragments":["they","it"]},{"Key":"said, they","Fragments":["are"]},{"Key":"are amazing","Fragments":["at"]},{"Key":"amazing at","Fragments":["performing"]},{"Key":"at performing","Fragments":["complex"]},{"Key":"performing complex","Fragments":["operations,"]},{"Key":"complex operations,","Fragments":["and"]},{"Key":"operations, and","Fragments":["are"]},{"Key":"are wonderfully","Fragments":["expressive."]},{"Key":"wonderfully expressive.","Fragments":["However,"]},{"Key":"expressive. However,","Fragments":["for"]},{"Key":"However, for","Fragments":["most"]},{"Key":"most simple","Fragments":["operations"]},{"Key":"simple operations","Fragments":["(\"what's"]},{"Key":"operations (\"what's","Fragments":["at"]},{"Key":"(\"what's at","Fragments":["the"]},{"Key":"this string?\",","Fragments":["\"are"]},{"Key":"string?\", \"are","Fragments":["these"]},{"Key":"\"are these","Fragments":["all"]},{"Key":"these all","Fragments":["caps?\","]},{"Key":"all caps?\",","Fragments":["\"what"]},{"Key":"caps?\", \"what","Fragments":["are"]},{"Key":"\"what are","Fragments":["the"]},{"Key":"first five","Fragments":["characters?\","]},{"Key":"five characters?\",","Fragments":["etc),"]},{"Key":"characters?\", etc),","Fragments":["the"]},{"Key":"etc), the","Fragments":["String"]},{"Key":"is usually","Fragments":["much","a","written","written","used"]},{"Key":"usually much","Fragments":["more"]},{"Key":"more efficient","Fragments":["and","to","as","I","and","because","than","than","to","there.","by","ways","to","than","than","to","ways"]},{"Key":"efficient and","Fragments":["indeed","less"]},{"Key":"and indeed","Fragments":["optimized","got"]},{"Key":"indeed optimized","Fragments":["to"]},{"Key":"optimized to","Fragments":["do"]},{"Key":"do exactly","Fragments":["what"]},{"Key":"I messed","Fragments":["with"]},{"Key":"messed with","Fragments":["the"]},{"Key":"then got","Fragments":["frustrated"]},{"Key":"got frustrated","Fragments":["with"]},{"Key":"frustrated with","Fragments":["getting"]},{"Key":"with getting","Fragments":["the"]},{"Key":"output into","Fragments":["the"]},{"Key":"and punted.","Fragments":["But"]},{"Key":"punted. But","Fragments":["I"]},{"Key":"is correct","Fragments":["unless","and"]},{"Key":"correct unless","Fragments":["there's"]},{"Key":"unless there's","Fragments":["a","a","a"]},{"Key":"second param","Fragments":["of"]},{"Key":"param of","Fragments":["Regex.scan","reduce.","the"]},{"Key":"Regex.scan that","Fragments":["I'm"]},{"Key":"not aware","Fragments":["of","of","of","of","of","of","of"]},{"Key":"of --","Fragments":["which"]},{"Key":"-- which","Fragments":["is"]},{"Key":"is entirely","Fragments":["likely.","composed"]},{"Key":"Well ,","Fragments":["a"]},{"Key":", a","Fragments":["few"]},{"Key":"* normally","Fragments":["is"]},{"Key":"normally is","Fragments":["hard"]},{"Key":"functions if","Fragments":["they","they're","there"]},{"Key":"they not","Fragments":["have"]},{"Key":"* in","Fragments":["elixir"]},{"Key":"elixir you","Fragments":["can"]},{"Key":"can end","Fragments":["predicate","with"]},{"Key":"end predicate","Fragments":["functions"]},{"Key":"with \u003ccode\u003e?\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003e?\u003c/code\u003e and","Fragments":["remove"]},{"Key":"* you","Fragments":["could","could","could","could"]},{"Key":"out \u003ccode\u003eHasDict.update/4\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eHasDict.update/4\u003c/code\u003e and","Fragments":["\u003ccode\u003eList.foldl/3\u003c/code\u003e"]},{"Key":"one better,","Fragments":["because"]},{"Key":"better, because","Fragments":["the"]},{"Key":"comprehend. However,","Fragments":["the"]},{"Key":"However, the","Fragments":["first","lack"]},{"Key":"first solution","Fragments":["may","incorporated","that","that"]},{"Key":"solution may","Fragments":["have"]},{"Key":"have better","Fragments":["performance,"]},{"Key":"better performance,","Fragments":["since"]},{"Key":"performance, since","Fragments":["it"]},{"Key":"only iterates","Fragments":["over","through"]},{"Key":"iterates over","Fragments":["the"]},{"Key":"lists once.","Fragments":["Still,"]},{"Key":"once. Still,","Fragments":["I"]},{"Key":"Still, I","Fragments":["would"]},{"Key":"first run","Fragments":["at"]},{"Key":"run at","Fragments":["it","all."]},{"Key":"at it","Fragments":["using","you","the","as","again,"]},{"Key":"and guards","Fragments":["without","for","to"]},{"Key":"guards without","Fragments":["any"]},{"Key":"without any","Fragments":["`Enum`","regexes.","captures"]},{"Key":"any `Enum`","Fragments":["functions."]},{"Key":"`Enum` functions.","Fragments":["It"]},{"Key":"functions. It","Fragments":["might","turns"]},{"Key":"might get","Fragments":["better"]},{"Key":"get better","Fragments":["with"]},{"Key":"using `Enum`","Fragments":["facilities,"]},{"Key":"`Enum` facilities,","Fragments":["I'll"]},{"Key":"facilities, I'll","Fragments":["look"]},{"Key":" Previous","Fragments":["version","exercises"]},{"Key":"Previous version","Fragments":["was"]},{"Key":"version was","Fragments":["broken,"]},{"Key":"was broken,","Fragments":["not"]},{"Key":"broken, not","Fragments":["sure"]},{"Key":"In line","Fragments":["4"]},{"Key":"4 ,","Fragments":["you"]},{"Key":"use two","Fragments":["\u003ccode\u003eEnum.filter/2\u003c/code\u003e","separate"]},{"Key":"two \u003ccode\u003eEnum.filter/2\u003c/code\u003e","Fragments":["for"]},{"Key":"\u003ccode\u003eEnum.filter/2\u003c/code\u003e for","Fragments":["match"]},{"Key":"for match","Fragments":["anagram"]},{"Key":"match anagram","Fragments":["and"]},{"Key":"anagram and","Fragments":["for","other","the"]},{"Key":"for discard","Fragments":["the"]},{"Key":"discard the","Fragments":["same"]},{"Key":"Nice solution","Fragments":["!!"]},{"Key":" IMHO","Fragments":[":","It","the"]},{"Key":"IMHO :","Fragments":["is"]},{"Key":": is","Fragments":["more"]},{"Key":"put \u003ccode\u003ecount_fnx\u003c/code\u003e","Fragments":["in"]},{"Key":"\u003ccode\u003ecount_fnx\u003c/code\u003e in","Fragments":["a"]},{"Key":"helper private","Fragments":["method."]},{"Key":"private method.","Fragments":["And"]},{"Key":"method. And","Fragments":["the"]},{"Key":"the \u003ccode\u003elist\u003c/code\u003e","Fragments":["function"]},{"Key":"\u003ccode\u003elist\u003c/code\u003e function","Fragments":["could"]},{"Key":"But are","Fragments":["minor"]},{"Key":"are minor","Fragments":["points"]},{"Key":"minor points","Fragments":[","]},{"Key":"points ,","Fragments":["your"]},{"Key":"attempt is","Fragments":["very"]},{"Key":"little unnecessary","Fragments":["to"]},{"Key":"unnecessary to","Fragments":["import","me,"]},{"Key":"import `String.capitalize/1`","Fragments":["when"]},{"Key":"`String.capitalize/1` when","Fragments":["it's"]},{"Key":"Also, not","Fragments":["sure"]},{"Key":"the `sing(start,","Fragments":["start)`"]},{"Key":"`sing(start, start)`","Fragments":["form"]},{"Key":"start)` form","Fragments":["in"]},{"Key":"form in","Fragments":["addition"]},{"Key":"in addition","Fragments":["to"]},{"Key":"addition to","Fragments":["`sing(start,","the"]},{"Key":"to `sing(start,","Fragments":["finish)`..."]},{"Key":"like `utterance`","Fragments":["as"]},{"Key":"`utterance` as","Fragments":["a"]},{"Key":"add some","Fragments":["tested","tested","more"]},{"Key":"some tested","Fragments":["docs","documentation"]},{"Key":"tested docs","Fragments":["at"]},{"Key":"docs at","Fragments":["the"]},{"Key":"top as","Fragments":["a"]},{"Key":"a cherry","Fragments":["on"]},{"Key":"cherry on","Fragments":["top"]},{"Key":"on top","Fragments":[":-)","of"]},{"Key":" Notice","Fragments":["how","that","how"]},{"Key":"Notice how","Fragments":["all","the"]},{"Key":"in normalize","Fragments":["are"]},{"Key":"normalize are","Fragments":["being"]},{"Key":"are being","Fragments":["passed","debated"]},{"Key":"being passed","Fragments":["in"]},{"Key":"the phrase.","Fragments":["That"]},{"Key":"phrase. That","Fragments":["is"]},{"Key":"usually a","Fragments":["good"]},{"Key":"operator `|\u0026gt;`,","Fragments":["that"]},{"Key":"`|\u0026gt;`, that","Fragments":["would"]},{"Key":"would rid","Fragments":["you"]},{"Key":"rid you","Fragments":["from"]},{"Key":"to re-set","Fragments":["phrase."]},{"Key":"Good question","Fragments":["about","about"]},{"Key":"question about","Fragments":["defining","`(filter"]},{"Key":"about defining","Fragments":["custom"]},{"Key":"defining custom","Fragments":["attributes..."]},{"Key":"custom attributes...","Fragments":["Old"]},{"Key":"attributes... Old","Fragments":["habits,"]},{"Key":"Old habits,","Fragments":["maybe."]},{"Key":" Ugh,","Fragments":["bad","another","I"]},{"Key":"Ugh, bad","Fragments":["typo."]},{"Key":"bad typo.","Fragments":["I"]},{"Key":"typo. I","Fragments":["meant"]},{"Key":"suggest that","Fragments":["using","there’s","the"]},{"Key":"using String","Fragments":["functions","functions\".","functions.","in"]},{"Key":"functions will","Fragments":["make","help."]},{"Key":"things clearer.","Fragments":["Check"]},{"Key":"clearer. Check","Fragments":["out"]},{"Key":"out .ends_with","Fragments":["and"]},{"Key":".ends_with and","Fragments":[".strip"]},{"Key":"and .strip","Fragments":["for"]},{"Key":".strip for","Fragments":["instance."]},{"Key":"Very sorry","Fragments":["about"]},{"Key":"sorry about","Fragments":["that."]},{"Key":" okay.","Fragments":["I'll"]},{"Key":"okay. I'll","Fragments":["look"]},{"Key":"at alternatives.","Fragments":["But"]},{"Key":"alternatives. But","Fragments":["I'd"]},{"Key":"But I'd","Fragments":["appreciate"]},{"Key":"I'd appreciate","Fragments":["more","thoughts"]},{"Key":"appreciate more","Fragments":["direction"]},{"Key":"more direction","Fragments":["than"]},{"Key":"direction than","Fragments":["'some"]},{"Key":"than 'some","Fragments":["pointers',"]},{"Key":"'some pointers',","Fragments":["as"]},{"Key":"pointers', as","Fragments":["you"]},{"Key":"I'm figuring","Fragments":["that"]},{"Key":"figuring that","Fragments":["regex"]},{"Key":"that regex","Fragments":["is"]},{"Key":"generally overpowered","Fragments":["for"]},{"Key":"overpowered for","Fragments":["this"]},{"Key":"this application.","Fragments":["I"]},{"Key":"application. I","Fragments":["used"]},{"Key":"used them","Fragments":["for"]},{"Key":"them for","Fragments":["all","very"]},{"Key":"other solutions","Fragments":["I","I"]},{"Key":"solutions I","Fragments":["did","took"]},{"Key":"did as","Fragments":["well,"]},{"Key":"at what","Fragments":["would","it","level","happens:","happens:","cost?","happens:","happens:","happens:","happens:","happens:"]},{"Key":"best alternative","Fragments":["without"]},{"Key":"alternative without","Fragments":["compromising"]},{"Key":"without compromising","Fragments":["future"]},{"Key":"compromising future","Fragments":["changes"]},{"Key":"future changes","Fragments":["to"]},{"Key":"changes to","Fragments":["the","name"]},{"Key":"code. One","Fragments":["person's"]},{"Key":"One person's","Fragments":["solution"]},{"Key":"person's solution","Fragments":["in"]},{"Key":"in clojure","Fragments":["used"]},{"Key":"clojure used","Fragments":["uppercase"]},{"Key":"used uppercase","Fragments":["and"]},{"Key":"uppercase and","Fragments":["a"]},{"Key":"few other","Fragments":["interesting","nitpicks:","issues"]},{"Key":"other interesting","Fragments":["string"]},{"Key":"interesting string","Fragments":["functions,"]},{"Key":"string functions,","Fragments":["but"]},{"Key":"but you're","Fragments":["saying","right,","right,"]},{"Key":"saying you","Fragments":["did","need"]},{"Key":"did something","Fragments":["\"without","completely"]},{"Key":"something \"without","Fragments":["them"]},{"Key":"\"without them","Fragments":["using"]},{"Key":"them using","Fragments":["String","String"]},{"Key":"String functions\".","Fragments":["I"]},{"Key":"functions\". I","Fragments":["guess"]},{"Key":"guess for","Fragments":["elixir"]},{"Key":"for elixir","Fragments":["this"]},{"Key":"elixir this","Fragments":["means"]},{"Key":"this means","Fragments":["digging","that"]},{"Key":"means digging","Fragments":["into"]},{"Key":"digging into","Fragments":["the","the"]},{"Key":"the bit","Fragments":["stream","shifting"]},{"Key":"bit stream","Fragments":["methods?"]},{"Key":"the feedback,","Fragments":["I'm","@delpha.","@susan.","@darien!","@erica.","I","@roger.","moving","@friedrich!","this","@thora.","@sally!"]},{"Key":"feedback, I'm","Fragments":["looking"]},{"Key":" @anabel,","Fragments":["@anabel:"]},{"Key":"@anabel, @anabel:","Fragments":["I"]},{"Key":"@anabel: I","Fragments":["can"]},{"Key":"was clever","Fragments":["to"]},{"Key":"clever to","Fragments":["reuse"]},{"Key":"to reuse","Fragments":["the","the","`count`","it"]},{"Key":"reuse the","Fragments":["closure","functions","function"]},{"Key":"the closure","Fragments":["and"]},{"Key":"closure and","Fragments":["not"]},{"Key":"not having","Fragments":["to","the","parentheses"]},{"Key":"the `what`","Fragments":["variable"]},{"Key":"`what` variable","Fragments":["again"]},{"Key":"variable again","Fragments":["to"]},{"Key":"again to","Fragments":["those","compare","grab"]},{"Key":"to those","Fragments":["methods.","on"]},{"Key":"Why define","Fragments":["custom"]},{"Key":"define custom","Fragments":["attributes"]},{"Key":"custom attributes","Fragments":["for"]},{"Key":"attributes for","Fragments":["the","that."]},{"Key":"various responses?","Fragments":["You"]},{"Key":"responses? You","Fragments":["don't"]},{"Key":"them outside","Fragments":["of","of"]},{"Key":"of `hey/1`.","Fragments":["You"]},{"Key":"`hey/1`. You","Fragments":["can"]},{"Key":"also collapse","Fragments":["the"]},{"Key":"single line.","Fragments":["It's"]},{"Key":"line. It's","Fragments":["not"]},{"Key":"to do,","Fragments":["but","and","it"]},{"Key":"do, but","Fragments":["you"]},{"Key":"you can.","Fragments":["Like"]},{"Key":"can. Like","Fragments":["this:"]},{"Key":"defp silence?(message),","Fragments":["do:"]},{"Key":"silence?(message), do:","Fragments":["String.strip(message)"]},{"Key":"do: String.strip(message)","Fragments":["=="]},{"Key":"String.strip(message) ==","Fragments":["\"\""]},{"Key":"is fine","Fragments":["as","with",".",","]},{"Key":"fine as","Fragments":["well.","well."]},{"Key":"first pass","Fragments":["at","to"]},{"Key":"exercise also","Fragments":["used"]},{"Key":"used regexes,","Fragments":["but"]},{"Key":"regexes, but","Fragments":["after"]},{"Key":"but after","Fragments":["some","having"]},{"Key":"after some","Fragments":["pointers,"]},{"Key":"some pointers,","Fragments":["I"]},{"Key":"pointers, I","Fragments":["found"]},{"Key":"found that","Fragments":["there","using","is"]},{"Key":"are much","Fragments":["clearer","more"]},{"Key":"much clearer","Fragments":["ways"]},{"Key":"clearer ways","Fragments":["to"]},{"Key":"Elixir without","Fragments":["them","the"]},{"Key":"without them","Fragments":["using","the","being","(e.g."]},{"Key":"A more","Fragments":["functional"]},{"Key":"functional approach","Fragments":["using","to"]},{"Key":"approach using","Fragments":["dispatch.","dictionaries","dictionaries."]},{"Key":"also look","Fragments":["into","at"]},{"Key":"into Enum.reduce","Fragments":["instead"]},{"Key":"Enum.reduce instead","Fragments":["of","of"]},{"Key":" Normalize","Fragments":["is"]},{"Key":"Normalize is","Fragments":["a"]},{"Key":"little better,","Fragments":["but","maybe"]},{"Key":"probably some","Fragments":["better"]},{"Key":"some better","Fragments":["way."]},{"Key":" Ergh,","Fragments":["just"]},{"Key":"Ergh, just","Fragments":["realized"]},{"Key":"just realized","Fragments":["Regex.scan","I"]},{"Key":"realized Regex.scan","Fragments":["is"]},{"Key":"Regex.scan is","Fragments":["a","simpler"]},{"Key":"looks way","Fragments":["cleaner"]},{"Key":"way cleaner","Fragments":["to","now!"]},{"Key":"cleaner to","Fragments":["me."]},{"Key":"me. Nice","Fragments":["use","usage"]},{"Key":"library and","Fragments":["clear","I"]},{"Key":"and clear","Fragments":["naming."]},{"Key":" Phew,","Fragments":["this"]},{"Key":"Phew, this","Fragments":["one"]},{"Key":"one took","Fragments":["me","longer"]},{"Key":"me awhile","Fragments":["to"]},{"Key":"awhile to","Fragments":["figure"]},{"Key":"figure out.","Fragments":["I"]},{"Key":"went down","Fragments":["several"]},{"Key":"down several","Fragments":["blind"]},{"Key":"several blind","Fragments":["alleys"]},{"Key":"blind alleys","Fragments":["with"]},{"Key":"alleys with","Fragments":["Enum"]},{"Key":"with Enum","Fragments":["before"]},{"Key":"Enum before","Fragments":["arriving"]},{"Key":"before arriving","Fragments":["at"]},{"Key":"arriving at","Fragments":["this."]},{"Key":"at this.","Fragments":["I"]},{"Key":"I learned","Fragments":["a","a","regular","that","what","about","something"]},{"Key":"about HashDict.","Fragments":["I'm"]},{"Key":"HashDict. I'm","Fragments":["not"]},{"Key":"not at","Fragments":["all","all?","all.","2a.m."]},{"Key":"all happy","Fragments":["with"]},{"Key":"normalize function","Fragments":["--"]},{"Key":"function --","Fragments":["that"]},{"Key":"looks gross,","Fragments":["but"]},{"Key":"gross, but","Fragments":["I'm"]},{"Key":"I'm at","Fragments":["a","wit's"]},{"Key":"a working","Fragments":["version,","alternative.","solution"]},{"Key":"working version,","Fragments":["so"]},{"Key":"version, so","Fragments":["I"]},{"Key":"I better","Fragments":["ship"]},{"Key":"better ship","Fragments":["it"]},{"Key":"ship it","Fragments":["and"]},{"Key":"and get","Fragments":["come","rid","`1`."]},{"Key":"get come","Fragments":["feedback."]},{"Key":"the high","Fragments":["level"]},{"Key":"high level","Fragments":["goals"]},{"Key":"level goals","Fragments":["in"]},{"Key":"goals in","Fragments":["these"]},{"Key":"in these","Fragments":["exercises"]},{"Key":"exercises is","Fragments":["to"]},{"Key":"produce readable","Fragments":["code"]},{"Key":"readable code","Fragments":["that"]},{"Key":"that clearly","Fragments":["expresses","indicates"]},{"Key":"clearly expresses","Fragments":["intention."]},{"Key":"expresses intention.","Fragments":["While"]},{"Key":"intention. While","Fragments":["regexes"]},{"Key":"While regexes","Fragments":["are"]},{"Key":"regexes are","Fragments":["exceptionally","trying"]},{"Key":"are exceptionally","Fragments":["powerful"]},{"Key":"exceptionally powerful","Fragments":["(and"]},{"Key":"powerful (and","Fragments":["fun)"]},{"Key":"(and fun)","Fragments":["they"]},{"Key":"fun) they","Fragments":["often"]},{"Key":"they often","Fragments":["aren't","provide"]},{"Key":"often aren't","Fragments":["readable.","perfect,"]},{"Key":"this without","Fragments":["any","using","transforming","using","the","using"]},{"Key":"any regexes.","Fragments":["Check"]},{"Key":"regexes. Check","Fragments":["out"]},{"Key":"out functions","Fragments":["like"]},{"Key":" sooo","Fragments":["…"]},{"Key":"sooo …","Fragments":["I"]},{"Key":"… I","Fragments":["used"]},{"Key":"`Regex.scan` (thanks","Fragments":["for"]},{"Key":"(thanks for","Fragments":["the"]},{"Key":"the tip)","Fragments":["and"]},{"Key":"tip) and","Fragments":["`fold`,"]},{"Key":"and `fold`,","Fragments":["but"]},{"Key":"`fold`, but","Fragments":["I'm"]},{"Key":"really happy","Fragments":["with"]},{"Key":"my `_count`","Fragments":["function."]},{"Key":"`_count` function.","Fragments":["Any"]},{"Key":"Much Better!","Fragments":["Check"]},{"Key":"Better! Check","Fragments":["out"]},{"Key":"out also","Fragments":["`Enum.count/2`","`String.codepoints/1`"]},{"Key":"you sure","Fragments":["that","about","all","you"]},{"Key":"``` inside","Fragments":["the"]},{"Key":"``` foldl","Fragments":["```"]},{"Key":"foldl ```","Fragments":["method"]},{"Key":"is necessary?","Fragments":["See"]},{"Key":"necessary? See","Fragments":["if"]},{"Key":"See if","Fragments":["```"]},{"Key":"if ```","Fragments":["Dict.update"]},{"Key":"is of","Fragments":["any"]},{"Key":"any help","Fragments":["while","would"]},{"Key":"help while","Fragments":["refactoring"]},{"Key":"while refactoring","Fragments":["the"]},{"Key":"refactoring the","Fragments":["```","two","condition"]},{"Key":" love","Fragments":["that"]},{"Key":"love that","Fragments":["this"]},{"Key":"this actually","Fragments":["tests"]},{"Key":"actually tests","Fragments":["to"]},{"Key":"tests to","Fragments":["make","just","verify","reflect","pass,","check","pass","be","fail.","know","pass.","pass?","get","run","pass"]},{"Key":"it's good","Fragments":["practice","enough."]},{"Key":"good practice","Fragments":["to","in"]},{"Key":"import all","Fragments":["of"]},{"Key":"of ```String```","Fragments":["of"]},{"Key":"```String``` of","Fragments":["if"]},{"Key":"of if","Fragments":["I","(and","it"]},{"Key":"should only","Fragments":["pick"]},{"Key":"only pick","Fragments":["what"]},{"Key":"pick what","Fragments":["I"]},{"Key":"the collapsed","Fragments":["`cond`."]},{"Key":"collapsed `cond`.","Fragments":["The"]},{"Key":"The lines","Fragments":["are"]},{"Key":"lines are","Fragments":["short","doing"]},{"Key":"are short","Fragments":["enough,","has"]},{"Key":"short enough,","Fragments":["and"]},{"Key":"enough, and","Fragments":["it"]},{"Key":"it takes","Fragments":["up","someone","care","a","a"]},{"Key":"takes up","Fragments":["less"]},{"Key":"up less","Fragments":["space"]},{"Key":"less space","Fragments":["vertically."]},{"Key":"space vertically.","Fragments":["Much"]},{"Key":"vertically. Much","Fragments":["easier"]},{"Key":"Much easier","Fragments":["to"]},{"Key":"I'm liking","Fragments":["how","this"]},{"Key":"liking how","Fragments":["my"]},{"Key":"how my","Fragments":["next"]},{"Key":"next answer","Fragments":["looks."]},{"Key":"answer looks.","Fragments":["Thanks"]},{"Key":"looks. Thanks","Fragments":["for"]},{"Key":" Variables","Fragments":["and"]},{"Key":"Variables and","Fragments":["method"]},{"Key":"and method","Fragments":["names","names."]},{"Key":"names can","Fragments":["end"]},{"Key":"\"?\" which","Fragments":["can"]},{"Key":"be handy","Fragments":["for"]},{"Key":"handy for","Fragments":["predicate","sure.","that."]},{"Key":"Interesting approach,","Fragments":["but"]},{"Key":"approach, but","Fragments":["would","it"]},{"Key":"this work","Fragments":["with","you","so"]},{"Key":"with arbitrary","Fragments":["input?"]},{"Key":"I asked","Fragments":["Bob","for"]},{"Key":"asked Bob","Fragments":["\"Bob,"]},{"Key":"Bob \"Bob,","Fragments":["are"]},{"Key":"\"Bob, are","Fragments":["you"]},{"Key":"you happy?\"","Fragments":["what"]},{"Key":"happy?\" what","Fragments":["reply"]},{"Key":"what reply","Fragments":["would"]},{"Key":"reply would","Fragments":["this"]},{"Key":"implementation return?","Fragments":["What"]},{"Key":"return? What","Fragments":["if"]},{"Key":"said \"BOB","Fragments":["WHO"]},{"Key":"\"BOB WHO","Fragments":["EVEN"]},{"Key":"WHO EVEN","Fragments":["ARE"]},{"Key":"EVEN ARE","Fragments":["YOU!\""]},{"Key":"Consider how","Fragments":["you"]},{"Key":"accurately follow","Fragments":["the"]},{"Key":"follow the","Fragments":["requirements","normal","rules","logic","ruby"]},{"Key":"requirements laid","Fragments":["out"]},{"Key":"laid out","Fragments":["in"]},{"Key":"`String.ends_with?` in","Fragments":["your"]},{"Key":"`question?` check,","Fragments":["which"]},{"Key":"check, which","Fragments":["IMO"]},{"Key":"which IMO","Fragments":["would"]},{"Key":"IMO would","Fragments":["make"]},{"Key":"your intent","Fragments":["clearer."]},{"Key":"good! One","Fragments":["minor"]},{"Key":"One minor","Fragments":["point:"]},{"Key":"minor point:","Fragments":["`String.ends_with?`"]},{"Key":"point: `String.ends_with?`","Fragments":["is"]},{"Key":"`String.ends_with?` is","Fragments":["a"]},{"Key":"a thing,","Fragments":["and"]},{"Key":"and might","Fragments":["be"]},{"Key":"Thanks guys!","Fragments":["Will"]},{"Key":"guys! Will","Fragments":["be"]},{"Key":"Will be","Fragments":["working","posting"]},{"Key":"be working","Fragments":["on","when"]},{"Key":"on after","Fragments":["vacation!"]},{"Key":"``` defp","Fragments":["```"]},{"Key":"defp ```","Fragments":["tip,"]},{"Key":"``` tip,","Fragments":["makes"]},{"Key":"tip, makes","Fragments":["total"]},{"Key":"makes total","Fragments":["sense","sense."]},{"Key":"total sense","Fragments":["to"]},{"Key":"to declare","Fragments":["these"]},{"Key":"declare these","Fragments":["methods"]},{"Key":"with @andy.","Fragments":["You"]},{"Key":"@andy. You","Fragments":["could"]},{"Key":"also use","Fragments":["this","a","the","`String.ends_with?(input,","`String.strip(statement)","byte_size/1"]},{"Key":"use this","Fragments":["```String.ends_with?```","forum","because"]},{"Key":"this ```String.ends_with?```","Fragments":["function"]},{"Key":"```String.ends_with?``` function","Fragments":["for"]},{"Key":"for line","Fragments":["12.","35","22."]},{"Key":"Great first","Fragments":["try."]},{"Key":"first try.","Fragments":["You"]},{"Key":"try. You","Fragments":["should"]},{"Key":"elixir pipeline","Fragments":["operator"]},{"Key":"operator which","Fragments":["would"]},{"Key":"string functions","Fragments":["together","or"]},{"Key":"functions together","Fragments":["like"]},{"Key":"together like","Fragments":["ie."]},{"Key":" ```clean_string","Fragments":["|\u0026gt;"]},{"Key":"```clean_string |\u0026gt;","Fragments":["remove_punctuation"]},{"Key":"|\u0026gt; remove_punctuation","Fragments":["|\u0026gt;"]},{"Key":"remove_punctuation |\u0026gt;","Fragments":["count_words```."]},{"Key":"line 14","Fragments":["your",",","which","in"]},{"Key":"14 your","Fragments":["Regex"]},{"Key":"your Regex","Fragments":["can"]},{"Key":"Regex can","Fragments":["be"]},{"Key":" ```Regex.scan(%r/\\w/,","Fragments":["string)```."]},{"Key":"As well","Fragments":["you"]},{"Key":"well you","Fragments":["can"]},{"Key":"can reduced","Fragments":["```clean_string```"]},{"Key":"reduced ```clean_string```","Fragments":["function"]},{"Key":"```clean_string``` function","Fragments":["and"]},{"Key":"and ```removed_punctuation```","Fragments":["into"]},{"Key":"```removed_punctuation``` into","Fragments":["one"]},{"Key":"one like","Fragments":["so:"]},{"Key":"``` Regex.scan(%r/\\w+/,","Fragments":["String.downcase(text))```"]},{"Key":"with tested","Fragments":["docs."]},{"Key":"tested docs.","Fragments":["Is"]},{"Key":"docs. Is","Fragments":["that"]},{"Key":"that referring","Fragments":["to"]},{"Key":"referring to","Fragments":["using","an","`Dict.to_list`","my","the","an","the","named"]},{"Key":"using `@rogelio`","Fragments":["and"]},{"Key":"`@rogelio` and","Fragments":["`@rogelio`"]},{"Key":"and `@rogelio`","Fragments":["or"]},{"Key":"`@rogelio` or","Fragments":["something"]},{"Key":" Ok...","Fragments":["I","I'll"]},{"Key":"Ok... I","Fragments":["know"]},{"Key":"know this","Fragments":["is"]},{"Key":"really messy","Fragments":["solution."]},{"Key":"messy solution.","Fragments":["Would"]},{"Key":"solution. Would","Fragments":["really"]},{"Key":"Would really","Fragments":["appreciate","appreciate"]},{"Key":"appreciate feedback","Fragments":["on"]},{"Key":"on cleaning","Fragments":["this"]},{"Key":"cleaning this","Fragments":["up."]},{"Key":"line 16:","Fragments":["The"]},{"Key":"16: The","Fragments":["pipe"]},{"Key":"expressive when","Fragments":["it"]},{"Key":"to transform","Fragments":["data.","any"]},{"Key":"transform data.","Fragments":["Passing"]},{"Key":"data. Passing","Fragments":["the"]},{"Key":"Passing the","Fragments":["verse"]},{"Key":"verse number","Fragments":["to"]},{"Key":"number to","Fragments":["bottle_phrase","the"]},{"Key":"to bottle_phrase","Fragments":["doesn't"]},{"Key":"bottle_phrase doesn't","Fragments":["really"]},{"Key":"really follow","Fragments":["this"]},{"Key":"follow this","Fragments":["paradigm."]},{"Key":"expressive argument","Fragments":["names."]},{"Key":"you possibly","Fragments":["pull"]},{"Key":"possibly pull","Fragments":["out"]},{"Key":"those internal","Fragments":["functions"]},{"Key":"internal functions","Fragments":["into"]},{"Key":"private predicate","Fragments":["methods","methods","methods"]},{"Key":"be called","Fragments":["from","something","`true`.","first.","`is_anagram?`"]},{"Key":"called from","Fragments":["outside","a","`hey`"]},{"Key":"from outside","Fragments":["the"]},{"Key":"that, looks","Fragments":["good.","good.","great.","good.","good.","great.","good."]},{"Key":"also add","Fragments":["some"]},{"Key":"tested documentation","Fragments":[":-),"]},{"Key":"documentation :-),","Fragments":["but"]},{"Key":":-), but","Fragments":["great"]},{"Key":"but great","Fragments":["revision.","tip."]},{"Key":"for \"split_words\"","Fragments":["and"]},{"Key":"\"split_words\" and","Fragments":["it"]},{"Key":"But is","Fragments":["a","a","a"]},{"Key":" `String.last(text)","Fragments":["=="]},{"Key":"`String.last(text) ==","Fragments":["\"?\"`"]},{"Key":"\"?\"` can","Fragments":["be","also"]},{"Key":"as `String.ends_with?(text,","Fragments":["\"?\")`."]},{"Key":"the clarification,","Fragments":["@jude."]},{"Key":"clarification, @jude.","Fragments":["I"]},{"Key":"@jude. I","Fragments":["don't"]},{"Key":"think recursion","Fragments":["is"]},{"Key":"recursion is","Fragments":["necessarily","actually","such","that"]},{"Key":"is necessarily","Fragments":["something"]},{"Key":"necessarily something","Fragments":["to"]},{"Key":"avoid in","Fragments":["Elixir,"]},{"Key":"be argued","Fragments":["that"]},{"Key":"argued that","Fragments":["the"]},{"Key":"iterative solution","Fragments":["you"]},{"Key":"solution you","Fragments":["suggested"]},{"Key":"you suggested","Fragments":["is"]},{"Key":"suggested is","Fragments":["easier"]},{"Key":"comprehend. Also,","Fragments":["I"]},{"Key":"seen `Enum.map_join`","Fragments":["yet,"]},{"Key":"`Enum.map_join` yet,","Fragments":["so"]},{"Key":"pointing me","Fragments":["to"]},{"Key":"For me","Fragments":["is","is","hash","is"]},{"Key":"Not perfectly","Fragments":["happy"]},{"Key":"perfectly happy","Fragments":["with","about","with"]},{"Key":" @javier","Fragments":["Fantastic"]},{"Key":"@javier Fantastic","Fragments":["advice."]},{"Key":"Fantastic advice.","Fragments":["I"]},{"Key":"advice. I","Fragments":["didn't"]},{"Key":"didn't knwo","Fragments":["about"]},{"Key":"knwo about","Fragments":["def"]},{"Key":"about def","Fragments":["vs."]},{"Key":"def vs.","Fragments":["defp."]},{"Key":"vs. defp.","Fragments":["Thank"]},{"Key":"defp. Thank","Fragments":["you!"]},{"Key":"small tip:","Fragments":["`List.zip`"]},{"Key":"tip: `List.zip`","Fragments":["doesn't"]},{"Key":"`List.zip` doesn't","Fragments":["have"]},{"Key":"the annoying","Fragments":["padding"]},{"Key":"annoying padding","Fragments":["behavior"]},{"Key":"padding behavior","Fragments":["of"]},{"Key":"good. Pretty","Fragments":["similar"]},{"Key":"Pretty similar","Fragments":["to"]},{"Key":"to what","Fragments":["I","@constantin","came","@emmalee","someone","I'd"]},{"Key":"still torn","Fragments":["over"]},{"Key":"torn over","Fragments":["whether"]},{"Key":"over whether","Fragments":["to"]},{"Key":"use `String.split`","Fragments":["and"]},{"Key":"`String.split` and","Fragments":["deal","`String.reject`"]},{"Key":"and deal","Fragments":["with"]},{"Key":"string case,","Fragments":["or"]},{"Key":"case, or","Fragments":["use"]},{"Key":"or use","Fragments":["`Regex.scan`","`end`.","foldr","`guards`"]},{"Key":"`Regex.scan` and","Fragments":["then","remove"]},{"Key":"then `flatten`","Fragments":["it"]},{"Key":"`flatten` it","Fragments":["after."]},{"Key":"it after.","Fragments":["Both"]},{"Key":"after. Both","Fragments":["work"]},{"Key":"Both work","Fragments":["though."]},{"Key":"Hey @elisa,","Fragments":["your"]},{"Key":"@elisa, your","Fragments":["regex"]},{"Key":"fine. It's","Fragments":["just"]},{"Key":"that non","Fragments":["alphanumeric"]},{"Key":"non alphanumeric","Fragments":["characters"]},{"Key":"alphanumeric characters","Fragments":["at"]},{"Key":"characters at","Fragments":["the","the"]},{"Key":"the start/end","Fragments":["of"]},{"Key":"start/end of","Fragments":["the"]},{"Key":"string get","Fragments":["treated"]},{"Key":"get treated","Fragments":["as"]},{"Key":"treated as","Fragments":["a","0"]},{"Key":"a point","Fragments":["for","of","where"]},{"Key":"point for","Fragments":["splitting","a"]},{"Key":"for splitting","Fragments":["-"]},{"Key":"splitting -","Fragments":["and"]},{"Key":"- and","Fragments":["there","it","will"]},{"Key":"no characters","Fragments":["on"]},{"Key":"characters on","Fragments":["the"]},{"Key":"other side","Fragments":["to"]},{"Key":"side to","Fragments":["make"]},{"Key":"word out","Fragments":["of,"]},{"Key":"out of,","Fragments":["so"]},{"Key":"of, so","Fragments":["you"]},{"Key":"string (I","Fragments":["had"]},{"Key":"had exactly","Fragments":["the"]},{"Key":"exactly the","Fragments":["same","reasoning","height","kind","same","kind","same"]},{"Key":"same approach,","Fragments":["with","one"]},{"Key":"approach, with","Fragments":["the"]},{"Key":"I solved","Fragments":["it","it","the","this","it","it"]},{"Key":"solved it","Fragments":["was","is:","simply,","via"]},{"Key":"it while","Fragments":["reducing","`List.first`"]},{"Key":"the list,","Fragments":["rather","I","so","but","in","in","one","@wilfredo.","even"]},{"Key":"list, rather","Fragments":["than"]},{"Key":"making another","Fragments":["pass"]},{"Key":"pass through","Fragments":["it"]},{"Key":"through it","Fragments":["again.","correctly,","I"]},{"Key":"Also, as","Fragments":["@elisa","the"]},{"Key":"as @elisa","Fragments":["said,"]},{"Key":"@elisa said,","Fragments":["check"]},{"Key":"said, check","Fragments":["out"]},{"Key":"out `HashDict.update`.","Fragments":["It'll"]},{"Key":"`HashDict.update`. It'll","Fragments":["make"]},{"Key":"It'll make","Fragments":["the"]},{"Key":"the `reduce`","Fragments":["function","function"]},{"Key":"`reduce` function","Fragments":["call","at","would"]},{"Key":"call much","Fragments":["more"]},{"Key":"The extra","Fragments":["`count_word`","newline"]},{"Key":"extra `count_word`","Fragments":["function"]},{"Key":"`count_word` function","Fragments":["clause"]},{"Key":"handle empty","Fragments":["strings"]},{"Key":"strings is","Fragments":["annoying."]},{"Key":"is annoying.","Fragments":["I"]},{"Key":"annoying. I","Fragments":["played"]},{"Key":"I played","Fragments":["around","with","with"]},{"Key":"played around","Fragments":["with"]},{"Key":"`Regex.scan` instead","Fragments":["to"]},{"Key":"on `%r/\\w+/`","Fragments":["-"]},{"Key":"`%r/\\w+/` -","Fragments":["that"]},{"Key":"- that","Fragments":["works,","was"]},{"Key":"that works,","Fragments":["but"]},{"Key":"looks uglier","Fragments":["with"]},{"Key":"end I","Fragments":["opted","opted"]},{"Key":"I opted","Fragments":["for","for","not","to","to"]},{"Key":"opted for","Fragments":["handling","simplicity."]},{"Key":"string special","Fragments":["case"]},{"Key":"special case","Fragments":["explicitly.","definition.","stuff.","of"]},{"Key":"case explicitly.","Fragments":["It"]},{"Key":"explicitly. It","Fragments":["adds"]},{"Key":"It adds","Fragments":["slightly"]},{"Key":"adds slightly","Fragments":["more"]},{"Key":"more complexity","Fragments":["to"]},{"Key":"complexity to","Fragments":["understand,"]},{"Key":"is simpler","Fragments":["overall.","in"]},{"Key":"also played","Fragments":["with"]},{"Key":"function passed","Fragments":["to","to","to","into"]},{"Key":"to `HashDict.update`","Fragments":["on"]},{"Key":"`HashDict.update` on","Fragments":["line"]},{"Key":"line 16","Fragments":["as","be:"]},{"Key":"16 as","Fragments":["`\u0026amp;Kernel.+(\u0026amp;1,"]},{"Key":"as `\u0026amp;Kernel.+(\u0026amp;1,","Fragments":["1)`,"]},{"Key":"`\u0026amp;Kernel.+(\u0026amp;1, 1)`,","Fragments":["which"]},{"Key":"1)`, which","Fragments":["works"]},{"Key":"which works","Fragments":["and","out"]},{"Key":"works and","Fragments":["is","depends","what","still"]},{"Key":"more *elixir-fu-ninja-stylez*,","Fragments":["but"]},{"Key":"*elixir-fu-ninja-stylez*, but","Fragments":["an"]},{"Key":"but an","Fragments":["explicit","extra"]},{"Key":"explicit function","Fragments":["here","syntax"]},{"Key":"function here","Fragments":["reads"]},{"Key":"here reads","Fragments":["better"]},{"Key":"better and","Fragments":["makes","isn't","have"]},{"Key":"and makes","Fragments":["more","it","the","the"]},{"Key":"Sorry but","Fragments":["I"]},{"Key":"I not","Fragments":["agree","think"]},{"Key":"not agree","Fragments":["IMHO"]},{"Key":"agree IMHO","Fragments":["I"]},{"Key":"IMHO I","Fragments":["consider"]},{"Key":"do: \"One","Fragments":["bottle"]},{"Key":"\"One bottle","Fragments":["of"]},{"Key":"bottle of","Fragments":["beer","beer.\\nTake","beer"]},{"Key":"wall, One","Fragments":["bottle"]},{"Key":"One bottle","Fragments":["of"]},{"Key":"of beer.\\nTake","Fragments":["it","one"]},{"Key":"beer.\\nTake it","Fragments":["down"]},{"Key":"def verse(num),","Fragments":["do:"]},{"Key":"verse(num), do:","Fragments":["\"#{num}"]},{"Key":"do: \"#{num}","Fragments":["bottles"]},{"Key":"\"#{num} bottles","Fragments":["of"]},{"Key":"wall, #{num}","Fragments":["bottles"]},{"Key":"#{num} bottles","Fragments":["of"]},{"Key":"beer.\\nTake one","Fragments":["down"]},{"Key":"around, #{num-1}","Fragments":["bottle#{if"]},{"Key":"#{num-1} bottle#{if","Fragments":["num"]},{"Key":"bottle#{if num","Fragments":["\u0026gt;"]},{"Key":"num \u0026gt;","Fragments":["2"]},{"Key":"\u0026gt; 2","Fragments":[",do:"]},{"Key":"2 ,do:","Fragments":["\"s\"}"]},{"Key":",do: \"s\"}","Fragments":["of"]},{"Key":"\"s\"} of","Fragments":["beer"]},{"Key":" `Enum.map_join/3`","Fragments":["is"]},{"Key":"`Enum.map_join/3` is","Fragments":["super"]},{"Key":"super cool,","Fragments":["thanks"]},{"Key":"cool, thanks","Fragments":["for"]},{"Key":"tip! I","Fragments":["will"]},{"Key":"will revise","Fragments":["to"]},{"Key":"revise to","Fragments":["use"]},{"Key":"on `verse/1`.","Fragments":["My"]},{"Key":"`verse/1`. My","Fragments":["intent"]},{"Key":"My intent","Fragments":["was"]},{"Key":"intent was","Fragments":["to","to"]},{"Key":"method representing","Fragments":["the"]},{"Key":"representing the","Fragments":["structure"]},{"Key":"the verse,","Fragments":["which"]},{"Key":"verse, which","Fragments":["doesn't"]},{"Key":"which doesn't","Fragments":["vary","need","seem"]},{"Key":"doesn't vary","Fragments":["with"]},{"Key":"vary with","Fragments":["the"]},{"Key":"the number.","Fragments":["It"]},{"Key":"number. It","Fragments":["felt"]},{"Key":"felt more","Fragments":["modular","direct"]},{"Key":"modular to","Fragments":["split"]},{"Key":"the areas","Fragments":["that","since"]},{"Key":"areas that","Fragments":["do"]},{"Key":"do change","Fragments":["into"]},{"Key":"change into","Fragments":["the"]},{"Key":"smallest pieces","Fragments":["possible,"]},{"Key":"pieces possible,","Fragments":["rather"]},{"Key":"possible, rather","Fragments":["than"]},{"Key":"than duplicating","Fragments":["the"]},{"Key":"entire structure","Fragments":["of"]},{"Key":"avoid recursion","Fragments":["if"]},{"Key":"recursion if","Fragments":["you"]},{"Key":" Enum.map_join(from..to,","Fragments":["\"\\n\","]},{"Key":"Enum.map_join(from..to, \"\\n\",","Fragments":["verse(\u0026amp;1))"]},{"Key":"is obviously","Fragments":["not","better!","going"]},{"Key":"obviously not","Fragments":["very"]},{"Key":"very functional.","Fragments":["This"]},{"Key":"functional. This","Fragments":["is"]},{"Key":"is practically","Fragments":["how"]},{"Key":"practically how","Fragments":["I'd"]},{"Key":"how I'd","Fragments":["write"]},{"Key":"I'd write","Fragments":["this","`candidates","this","it","it"]},{"Key":"in very","Fragments":["simple"]},{"Key":"simple ruby","Fragments":["without"]},{"Key":"ruby without","Fragments":["nesting"]},{"Key":"without nesting","Fragments":["the"]},{"Key":"nesting the","Fragments":["ifs."]},{"Key":"the ifs.","Fragments":["I'm"]},{"Key":"ifs. I'm","Fragments":["assuming"]},{"Key":"I'm assuming","Fragments":["there","you"]},{"Key":"assuming there","Fragments":["is"]},{"Key":"way which","Fragments":["I"]},{"Key":"be hunting","Fragments":["for."]},{"Key":"feedback. I'm","Fragments":["not"]},{"Key":"your suggestions...","Fragments":["maybe"]},{"Key":"suggestions... maybe","Fragments":["you"]},{"Key":"I implemented","Fragments":["`sing`","it:"]},{"Key":"implemented `sing`","Fragments":["is"]},{"Key":"`sing` is","Fragments":["with"]},{"Key":"is with","Fragments":["recursion,"]},{"Key":"with recursion,","Fragments":["so"]},{"Key":"recursion, so","Fragments":["it"]},{"Key":"it requires","Fragments":["a"]},{"Key":"requires a","Fragments":["version"]},{"Key":"function (or","Fragments":["a"]},{"Key":"a conditional)","Fragments":["to"]},{"Key":"conditional) to","Fragments":["handle"]},{"Key":"edge case,","Fragments":["which"]},{"Key":"case, which","Fragments":["is","is"]},{"Key":"is when","Fragments":["the"]},{"Key":"the from","Fragments":["and"]},{"Key":"from and","Fragments":["to"]},{"Key":"to bottles","Fragments":["are"]},{"Key":"bottles are","Fragments":["the"]},{"Key":"same. That's","Fragments":["what"]},{"Key":"what that","Fragments":["first","might","`100`","meant.","method","would"]},{"Key":"that first","Fragments":["version","special","step"]},{"Key":"version is.","Fragments":["And"]},{"Key":"is. And","Fragments":["since"]},{"Key":"And since","Fragments":["I'm"]},{"Key":"since I'm","Fragments":["using","importing","new"]},{"Key":"using recursion","Fragments":["and","for"]},{"Key":"recursion and","Fragments":["not","reduce.","reduce\"","all,","left","implement","very","Elixir's","have"]},{"Key":"not enumeration,","Fragments":["I"]},{"Key":"enumeration, I","Fragments":["don't"]},{"Key":"think `Enum.map_join/3`","Fragments":["would"]},{"Key":"`Enum.map_join/3` would","Fragments":["be"]},{"Key":"be relevant,","Fragments":["or"]},{"Key":"relevant, or","Fragments":["am"]},{"Key":"or am","Fragments":["I"]},{"Key":"am I","Fragments":["missing","missing"]},{"Key":"The verse","Fragments":["only"]},{"Key":"verse only","Fragments":["changes"]},{"Key":"only changes","Fragments":["when"]},{"Key":"changes when","Fragments":["the"]},{"Key":"of bottles","Fragments":["is","(","like"]},{"Key":"bottles is","Fragments":["0"]},{"Key":"is 0","Fragments":["and","+","+","+","(input","+","+","+","+","+"]},{"Key":"and 1","Fragments":[","]},{"Key":"1 ,","Fragments":["you"]},{"Key":"use \u003ccode\u003eguards\u003c/code\u003e","Fragments":["or"]},{"Key":"\u003ccode\u003eguards\u003c/code\u003e or","Fragments":["pattern"]},{"Key":"matching directly","Fragments":["for","with","or"]},{"Key":"directly for","Fragments":["\u003ccode\u003everse/1\u003c/code\u003e."]},{"Key":"out \u003ccode\u003eEnum.map_join/3\u003c/code\u003e","Fragments":["for"]},{"Key":"\u003ccode\u003eEnum.map_join/3\u003c/code\u003e for","Fragments":["\u003ccode\u003esing/2\u003c/code\u003e."]},{"Key":"in \u003ccode\u003everse/1\u003c/code\u003e","Fragments":["with"]},{"Key":"\u003ccode\u003everse/1\u003c/code\u003e with","Fragments":["the"]},{"Key":"bottles (","Fragments":["or"]},{"Key":"( or","Fragments":["you"]},{"Key":"out \u003ccode\u003eguards\u003c/code\u003e)","Fragments":["for"]},{"Key":"\u003ccode\u003eguards\u003c/code\u003e) for","Fragments":["response"]},{"Key":"for response","Fragments":["the"]},{"Key":"response the","Fragments":["verse."]},{"Key":"use default","Fragments":["argument"]},{"Key":"function \u003ccode\u003esing/2\u003c/code\u003e","Fragments":["in"]},{"Key":"\u003ccode\u003esing/2\u003c/code\u003e in","Fragments":["line"]},{"Key":"line 23","Fragments":["you","we"]},{"Key":"23 you","Fragments":["don´t"]},{"Key":"you don´t","Fragments":["need","need"]},{"Key":"don´t need","Fragments":["to","to"]},{"Key":"with argument","Fragments":["in"]},{"Key":"line 22.","Fragments":["Also"]},{"Key":"22. Also","Fragments":["you"]},{"Key":"could checkout","Fragments":["\u003ccode\u003eEnum.map_join/3\u003c/code\u003e"]},{"Key":"checkout \u003ccode\u003eEnum.map_join/3\u003c/code\u003e","Fragments":["here."]},{"Key":"and \u003ccode\u003eHashDict.update/4\u003c/code\u003e","Fragments":["here."]},{"Key":"of nits.","Fragments":["The"]},{"Key":"nits. The","Fragments":["code"]},{"Key":"not expose","Fragments":["the"]},{"Key":"expose the","Fragments":["implementation","relevant"]},{"Key":"details with","Fragments":["the"]},{"Key":"API though.","Fragments":["Make"]},{"Key":"though. Make","Fragments":["the"]},{"Key":"Make the","Fragments":["predicate"]},{"Key":"functions private.","Fragments":["And"]},{"Key":"private. And","Fragments":["while"]},{"Key":"And while","Fragments":["you're"]},{"Key":"while you're","Fragments":["at"]},{"Key":"you're at","Fragments":["it"]},{"Key":"it you","Fragments":["could","were"]},{"Key":"even squeeze","Fragments":["them"]},{"Key":"squeeze them","Fragments":["onto"]},{"Key":"them onto","Fragments":["a"]},{"Key":"onto a","Fragments":["single"]},{"Key":"defp asking?(greeting),","Fragments":["do:"]},{"Key":"asking?(greeting), do:","Fragments":["greeting"]},{"Key":"do: greeting","Fragments":["|\u0026gt;"]},{"Key":"the shape","Fragments":["of","of","and"]},{"Key":"shape of","Fragments":["this","the"]},{"Key":"not sold","Fragments":["on"]},{"Key":"sold on","Fragments":["`remove_punctuation_and_to_words`"]},{"Key":"on `remove_punctuation_and_to_words`","Fragments":["as"]},{"Key":"`remove_punctuation_and_to_words` as","Fragments":["a"]},{"Key":"method name.","Fragments":["What"]},{"Key":"name. What","Fragments":["about"]},{"Key":"about something","Fragments":["like","liiiiike"]},{"Key":"like `words_in_sentence`,","Fragments":["where"]},{"Key":"`words_in_sentence`, where","Fragments":["it"]},{"Key":"be understood","Fragments":["(imo)"]},{"Key":"understood (imo)","Fragments":["that"]},{"Key":"(imo) that","Fragments":["words"]},{"Key":"that words","Fragments":["don't"]},{"Key":"words don't","Fragments":["contain"]},{"Key":"don't contain","Fragments":["punctuation."]},{"Key":" clean_list","Fragments":["function"]},{"Key":"clean_list function","Fragments":["is"]},{"Key":"necessary because","Fragments":["split_into_words"]},{"Key":"because split_into_words","Fragments":["sometimes"]},{"Key":"split_into_words sometimes","Fragments":["return"]},{"Key":"sometimes return","Fragments":["an"]},{"Key":"return an","Fragments":["empty","enum","argument"]},{"Key":"string I","Fragments":["think","believe"]},{"Key":"that my","Fragments":["RegEx","only","approach","solution","implementation"]},{"Key":"my RegEx","Fragments":["in"]},{"Key":"RegEx in","Fragments":["some"]},{"Key":"some way","Fragments":["it's","around"]},{"Key":"it's incorrect.","Fragments":["Any"]},{"Key":"incorrect. Any","Fragments":["idea?"]},{"Key":"the \u003ccode\u003eHasDict.update/4\u003c/code\u003e","Fragments":[","]},{"Key":"\u003ccode\u003eHasDict.update/4\u003c/code\u003e ,","Fragments":["one"]},{"Key":", one","Fragments":["when","for","when"]},{"Key":"one when","Fragments":["is","same","is"]},{"Key":"when is","Fragments":["empty","1,","n)","not","anagram."]},{"Key":"empty word","Fragments":["return"]},{"Key":"word return","Fragments":["the"]},{"Key":"HashDict words","Fragments":["count,"]},{"Key":"words count,","Fragments":["and"]},{"Key":"count, and","Fragments":["the"]},{"Key":"other for","Fragments":["update","`same_word?`","not"]},{"Key":"for update","Fragments":["the"]},{"Key":"HashDict .","Fragments":["And"]},{"Key":". And","Fragments":["you","then"]},{"Key":"use something","Fragments":["like","more"]},{"Key":"like \u003ccode\u003eupdate_words(\u0026amp;1,","Fragments":["\u0026amp;2)\u003c/code\u003e"]},{"Key":"\u003ccode\u003eupdate_words(\u0026amp;1, \u0026amp;2)\u003c/code\u003e","Fragments":["inside"]},{"Key":"\u0026amp;2)\u003c/code\u003e inside","Fragments":["\u003ccode\u003eList.foldl/3\u003c/code\u003e"]},{"Key":" List.foldl(list(words),","Fragments":["HashDict.new,"]},{"Key":"List.foldl(list(words), HashDict.new,","Fragments":["update_count(\u0026amp;1,"]},{"Key":"HashDict.new, update_count(\u0026amp;1,","Fragments":["\u0026amp;2)"]},{"Key":"update_count(\u0026amp;1, \u0026amp;2)","Fragments":[")"]},{"Key":" Changing","Fragments":["\u003ccode\u003eupdate_count\u003c/code\u003e","other"]},{"Key":"Changing \u003ccode\u003eupdate_count\u003c/code\u003e","Fragments":["to"]},{"Key":"\u003ccode\u003eupdate_count\u003c/code\u003e to","Fragments":["\u003ccode\u003eupdate_count(word,"]},{"Key":"to \u003ccode\u003eupdate_count(word,","Fragments":["dict)\u003c/code\u003e."]},{"Key":"Good points.","Fragments":["I"]},{"Key":"points. I","Fragments":["ported"]},{"Key":"I ported","Fragments":["this","over"]},{"Key":"ported this","Fragments":["from","exercise"]},{"Key":"this from","Fragments":["my"]},{"Key":"my clojure","Fragments":["solution"]},{"Key":"clojure solution","Fragments":["a"]},{"Key":"solution a","Fragments":["bit","bit","lot."]},{"Key":"bit too","Fragments":["directly","simple","much...","long","far,"]},{"Key":"too directly","Fragments":["and"]},{"Key":"directly and","Fragments":["missed"]},{"Key":"and missed","Fragments":["out"]},{"Key":"missed out","Fragments":["on"]},{"Key":"on some","Fragments":["elixir-y","more.","other","occasions,","newlines"]},{"Key":"some elixir-y","Fragments":["goodness."]},{"Key":"a suggested","Fragments":["nitpick"]},{"Key":"suggested nitpick","Fragments":["from"]},{"Key":"nitpick from","Fragments":["a"]},{"Key":"previous revision,","Fragments":["I"]},{"Key":"revision, I","Fragments":["wanted"]},{"Key":"to rebind","Fragments":["the"]},{"Key":"rebind the","Fragments":["method"]},{"Key":"method definiition","Fragments":["in"]},{"Key":"definiition in","Fragments":["to"]},{"Key":"to List","Fragments":["but"]},{"Key":"List but","Fragments":["couldn't"]},{"Key":"out \u003ccode\u003eguards\u003c/code\u003e","Fragments":["here"]},{"Key":"\u003ccode\u003eguards\u003c/code\u003e here","Fragments":[".An"]},{"Key":"here .An","Fragments":["also"]},{"Key":".An also","Fragments":["you"]},{"Key":"maybe interested","Fragments":["in"]},{"Key":"in \u003ccode\u003e//\u003c/code\u003e","Fragments":["for"]},{"Key":"\u003ccode\u003e//\u003c/code\u003e for","Fragments":["the"]},{"Key":"the deault","Fragments":["arguments"]},{"Key":"deault arguments","Fragments":["in"]},{"Key":"arguments in","Fragments":["functions"]},{"Key":" \\w","Fragments":["is`"]},{"Key":"\\w is`","Fragments":["[a-zA-z0-9_]`,"]},{"Key":"is` [a-zA-z0-9_]`,","Fragments":["so"]},{"Key":"[a-zA-z0-9_]`, so","Fragments":["digits"]},{"Key":"so digits","Fragments":["are"]},{"Key":"digits are","Fragments":["included."]},{"Key":"For functions","Fragments":["with"]},{"Key":"with trivial","Fragments":["bodies"]},{"Key":"trivial bodies","Fragments":["like"]},{"Key":"bodies like","Fragments":["`count`,"]},{"Key":"like `count`,","Fragments":["there"]},{"Key":"`count`, there","Fragments":["is"]},{"Key":"one-liner syntax.","Fragments":["This"]},{"Key":"syntax. This","Fragments":["also"]},{"Key":"This also","Fragments":["lets","let","works:"]},{"Key":"also lets","Fragments":["you"]},{"Key":"you group","Fragments":["them"]},{"Key":"group them","Fragments":["nicely."]},{"Key":" @anthony","Fragments":["Awesome"]},{"Key":"@anthony Awesome","Fragments":["point,"]},{"Key":"Awesome point,","Fragments":["thanks!"]},{"Key":"point, thanks!","Fragments":["I"]},{"Key":"spent some","Fragments":["time","time"]},{"Key":"some time","Fragments":["thinking","trying","going","later","to"]},{"Key":"time thinking","Fragments":["about"]},{"Key":"of fn's","Fragments":["but"]},{"Key":"fn's but","Fragments":["had"]},{"Key":"but had","Fragments":["trouble","failing","some"]},{"Key":"had trouble","Fragments":["deciding"]},{"Key":"trouble deciding","Fragments":["on"]},{"Key":"deciding on","Fragments":["what"]},{"Key":"should be.","Fragments":["Public","I'm"]},{"Key":"be. Public","Fragments":["interface"]},{"Key":"Public interface","Fragments":["first"]},{"Key":"interface first","Fragments":["makes"]},{"Key":"first makes","Fragments":["a"]},{"Key":"was pointed","Fragments":["out","out"]},{"Key":"is_ on","Fragments":["a"]},{"Key":"predicate function","Fragments":["is","when"]},{"Key":"is somewhat","Fragments":["redundant.","burdensome","misleading","cheating","helpful.","more"]},{"Key":"somewhat redundant.","Fragments":["Between"]},{"Key":"redundant. Between","Fragments":["those"]},{"Key":"Between those","Fragments":["two"]},{"Key":"two notes","Fragments":["another"]},{"Key":"notes another","Fragments":["submission"]},{"Key":"another submission","Fragments":["seemed"]},{"Key":"submission seemed","Fragments":["trivial"]},{"Key":"seemed trivial","Fragments":["enough"]},{"Key":"trivial enough","Fragments":["to"]},{"Key":"do, and","Fragments":["worthwhile."]},{"Key":"Please implement","Fragments":["String#graphmemes"]},{"Key":"implement String#graphmemes","Fragments":["-"]},{"Key":"String#graphmemes -","Fragments":["I"]},{"Key":"need it","Fragments":["in"]},{"Key":"Also, `defp`","Fragments":["is"]},{"Key":"`defp` is","Fragments":["useful"]},{"Key":"useful unless","Fragments":["you're"]},{"Key":"unless you're","Fragments":["of","using"]},{"Key":"you're of","Fragments":["the"]},{"Key":"the opinion","Fragments":["that"]},{"Key":"opinion that","Fragments":["encapsulation"]},{"Key":"that encapsulation","Fragments":["is"]},{"Key":"encapsulation is","Fragments":["unnecessary."]},{"Key":"Thanks @gregoria","Fragments":["for"]},{"Key":"@gregoria for","Fragments":["the"]},{"Key":"the hint","Fragments":["about"]},{"Key":"hint about","Fragments":["```HashDict.update```."]},{"Key":"about ```HashDict.update```.","Fragments":["It"]},{"Key":"```HashDict.update```. It","Fragments":["looks"]},{"Key":"looks nicer","Fragments":["now"]},{"Key":"nicer now","Fragments":[":)."]},{"Key":"now :).","Fragments":["Is"]},{"Key":":). Is","Fragments":["there"]},{"Key":"make ```_count```","Fragments":["more"]},{"Key":"```_count``` more","Fragments":["readable?"]},{"Key":"haven't used","Fragments":["`String#graphemes`","it"]},{"Key":"used `String#graphemes`","Fragments":["yet."]},{"Key":"`String#graphemes` yet.","Fragments":["At"]},{"Key":"yet. At","Fragments":["first"]},{"Key":"was graphing","Fragments":["memes,"]},{"Key":"graphing memes,","Fragments":["which"]},{"Key":"memes, which","Fragments":["would"]},{"Key":"only nit","Fragments":["is","I"]},{"Key":"nit is","Fragments":["that","that","on"]},{"Key":"scan all","Fragments":["the"]},{"Key":"your public","Fragments":["interface."]},{"Key":"interface. I","Fragments":["wouldn't","would"]},{"Key":"wouldn't say","Fragments":["that's","it's"]},{"Key":"say that's","Fragments":["worth"]},{"Key":"that's worth","Fragments":["a","it."]},{"Key":"worth a","Fragments":["new"]},{"Key":"bit odd","Fragments":["to","to","to"]},{"Key":"odd to","Fragments":["`defp`","me","me,"]},{"Key":"to `defp`","Fragments":["a","these"]},{"Key":"`defp` a","Fragments":["function"]},{"Key":"that always","Fragments":["returns","returned"]},{"Key":"same anonymous","Fragments":["function."]},{"Key":"for you","Fragments":["less","comment,","already,","feedback!"]},{"Key":"you less","Fragments":["readable?"]},{"Key":" Enum.filter(","Fragments":["anagrams,"]},{"Key":"Enum.filter( anagrams,","Fragments":["anagram?(\u0026amp;1,"]},{"Key":"anagrams, anagram?(\u0026amp;1,","Fragments":["word))"]},{"Key":"|\u0026gt; Enum.filter(","Fragments":["same_word?(\u0026amp;1,"]},{"Key":"Enum.filter( same_word?(\u0026amp;1,","Fragments":["word))"]},{"Key":"And in","Fragments":["line"]},{"Key":"4 and","Fragments":["12"]},{"Key":"and 12","Fragments":["you"]},{"Key":"12 you","Fragments":["are","have"]},{"Key":"are passing","Fragments":["to"]},{"Key":"operator the","Fragments":["same"]},{"Key":"same argument","Fragments":["that"]},{"Key":"function .","Fragments":["Is"]},{"Key":". Is","Fragments":["it"]},{"Key":"it not","Fragments":["redundant?","redundant"]},{"Key":" Gotcha...","Fragments":["Okay,"]},{"Key":"Gotcha... Okay,","Fragments":["I'm"]},{"Key":"Okay, I'm","Fragments":["going"]},{"Key":"try these","Fragments":["now"]},{"Key":"these now","Fragments":["as"]},{"Key":"now as","Fragments":["well."]},{"Key":"well. Thanks","Fragments":["for"]},{"Key":"the suggestions,","Fragments":["and"]},{"Key":"suggestions, and","Fragments":["I'm"]},{"Key":"I'm reading","Fragments":["more","this"]},{"Key":"reading more","Fragments":["and"]},{"Key":"more and","Fragments":["more","try"]},{"Key":"about these","Fragments":["string"]},{"Key":"these string","Fragments":["libraries"]},{"Key":"string libraries","Fragments":["I"]},{"Key":"libraries I","Fragments":["often"]},{"Key":"I often","Fragments":["neglect."]},{"Key":" Always","Fragments":["a","starts"]},{"Key":"Always a","Fragments":["good"]},{"Key":"good sacrifice","Fragments":["to"]},{"Key":"sacrifice to","Fragments":["make"]},{"Key":" @maxine","Fragments":["I'd"]},{"Key":"@maxine I'd","Fragments":["love"]},{"Key":"to hear","Fragments":["them,","from","about","about","that","your","the","how","how","more","what"]},{"Key":"hear them,","Fragments":["if"]},{"Key":"them, if","Fragments":["only"]},{"Key":"if only","Fragments":["as","a"]},{"Key":"only as","Fragments":["food"]},{"Key":"as food","Fragments":["for"]},{"Key":"food for","Fragments":["thought."]},{"Key":"Yes, pipeline","Fragments":["feeds"]},{"Key":"pipeline feeds","Fragments":["into"]},{"Key":"feeds into","Fragments":["the"]},{"Key":"first param,","Fragments":["which"]},{"Key":"param, which","Fragments":["caused"]},{"Key":"which caused","Fragments":["me"]},{"Key":"caused me","Fragments":["some"]},{"Key":"some confusion","Fragments":["for"]},{"Key":"confusion for","Fragments":["awhile."]},{"Key":"good. Any","Fragments":["nitpicks"]},{"Key":"Any nitpicks","Fragments":["would"]},{"Key":"nitpicks would","Fragments":["be"]},{"Key":"be minor","Fragments":["from"]},{"Key":"minor from","Fragments":["me."]},{"Key":"Right you","Fragments":["are."]},{"Key":"your comments.","Fragments":["Wrapping"]},{"Key":"comments. Wrapping","Fragments":["my"]},{"Key":"Wrapping my","Fragments":["brain"]},{"Key":"brain around","Fragments":["this"]},{"Key":"around this","Fragments":["style"]},{"Key":"this style","Fragments":["of"]},{"Key":"of programming","Fragments":["is"]},{"Key":"is hard,","Fragments":["but"]},{"Key":"hard, but","Fragments":["I'm"]},{"Key":"really enjoying","Fragments":["it."]},{"Key":"that adding","Fragments":["another","the"]},{"Key":"another Enum","Fragments":["filter"]},{"Key":"Enum filter","Fragments":["function"]},{"Key":"call would","Fragments":["decrease"]},{"Key":"would decrease","Fragments":["readability."]},{"Key":"decrease readability.","Fragments":["Maybe","`different_word?`"]},{"Key":"readability. Maybe","Fragments":["wrapping"]},{"Key":"Maybe wrapping","Fragments":["it"]},{"Key":"a significant","Fragments":["name"]},{"Key":"significant name","Fragments":["would"]},{"Key":"name would","Fragments":["help","be","be"]},{"Key":"help but","Fragments":["I","feel"]},{"Key":"that word","Fragments":["!=","chars"]},{"Key":"word !=","Fragments":["candidate"]},{"Key":"!= candidate","Fragments":["is"]},{"Key":"candidate is","Fragments":["good","downcased"]},{"Key":"enough I","Fragments":["think?"]},{"Key":"good! Notice","Fragments":["that"]},{"Key":"Notice that","Fragments":["now","this"]},{"Key":"operator you","Fragments":["can"]},{"Key":"can include","Fragments":["the"]},{"Key":"the String.downcase","Fragments":["in"]},{"Key":"String.downcase in","Fragments":["as"]},{"Key":"well but","Fragments":["that's"]},{"Key":"that's being","Fragments":["very"]},{"Key":"being very","Fragments":["picky."]},{"Key":"very picky.","Fragments":["I"]},{"Key":"picky. I","Fragments":["like"]},{"Key":"recursive calls","Fragments":["and"]},{"Key":"calls and","Fragments":["pattern"]},{"Key":" @asha","Fragments":["So","Thanks!"]},{"Key":"@asha So","Fragments":["the"]},{"Key":"is sort","Fragments":["of"]},{"Key":"of feeding","Fragments":["what's"]},{"Key":"feeding what's","Fragments":["on"]},{"Key":"what's on","Fragments":["the"]},{"Key":"left into","Fragments":["the"]},{"Key":"the right?","Fragments":["Does"]},{"Key":"right? Does","Fragments":["it"]},{"Key":"always end","Fragments":["up"]},{"Key":"up as","Fragments":["the","well.","a"]},{"Key":"method call?","Fragments":["I'll"]},{"Key":"call? I'll","Fragments":["look"]},{"Key":"look it","Fragments":["up,","up"]},{"Key":"it up,","Fragments":["but"]},{"Key":"up, but","Fragments":["that's","it"]},{"Key":"that's very","Fragments":["interesting."]},{"Key":"very interesting.","Fragments":["Thanks!"]},{"Key":"Could use","Fragments":["`String.ends_with(phrase,"]},{"Key":"use `String.ends_with(phrase,","Fragments":["\"?\")`"]},{"Key":"`String.ends_with(phrase, \"?\")`","Fragments":["in"]},{"Key":"\"?\")` in","Fragments":["`question`"]},{"Key":"in `question`","Fragments":["But"]},{"Key":"`question` But","Fragments":["the"]},{"Key":"definitions reads","Fragments":["nicely"]},{"Key":"nicely as","Fragments":["it"]},{"Key":" Apart","Fragments":["from"]},{"Key":"Apart from","Fragments":["that"]},{"Key":"Sorry you've","Fragments":["been"]},{"Key":"you've been","Fragments":["waiting"]},{"Key":"been waiting","Fragments":["so"]},{"Key":"waiting so","Fragments":["long"]},{"Key":"so long","Fragments":["for"]},{"Key":"long for","Fragments":["feedback!","my"]},{"Key":"for feedback!","Fragments":["I"]},{"Key":"in general.","Fragments":["Just","I","Just","Nice","Didn't"]},{"Key":"general. Just","Fragments":["a","a"]},{"Key":"the definition","Fragments":["of","of","of"]},{"Key":"of `sing`","Fragments":["you"]},{"Key":"`sing` you","Fragments":["could"]},{"Key":"value for","Fragments":["the","if","the"]},{"Key":"the `end_verse`","Fragments":["param"]},{"Key":"`end_verse` param","Fragments":["if"]},{"Key":"param if","Fragments":["you"]},{"Key":"first special","Fragments":["case"]},{"Key":"case definition.","Fragments":["If"]},{"Key":"definition. If","Fragments":["you"]},{"Key":"you haven't","Fragments":["seen","seen","completed"]},{"Key":"value yet,","Fragments":["you"]},{"Key":"yet, you","Fragments":["do"]},{"Key":"def sing(start_verse,","Fragments":["end_verse","end_verse"]},{"Key":"sing(start_verse, end_verse","Fragments":["//","//"]},{"Key":"end_verse //","Fragments":["0)","0)"]},{"Key":"that, for","Fragments":["some"]},{"Key":"reason the","Fragments":["`Enum.join`"]},{"Key":"`Enum.join` for","Fragments":["joining"]},{"Key":"for joining","Fragments":["the","lists."]},{"Key":"lines in","Fragments":["`verse`"]},{"Key":"in `verse`","Fragments":["feels"]},{"Key":"`verse` feels","Fragments":["a"]},{"Key":"little awkward","Fragments":["to","for","because"]},{"Key":"awkward to","Fragments":["me.","me.","me"]},{"Key":"me. I've","Fragments":["been"]},{"Key":"been trying","Fragments":["to","to"]},{"Key":"out why...","Fragments":["maybe"]},{"Key":"why... maybe","Fragments":["it's"]},{"Key":"maybe it's","Fragments":["because"]},{"Key":"it's because","Fragments":["it","it"]},{"Key":"the `\"\\n\"`","Fragments":["should"]},{"Key":"`\"\\n\"` should","Fragments":["be"]},{"Key":"the joiner","Fragments":["not"]},{"Key":"joiner not","Fragments":["one"]},{"Key":"not one","Fragments":["of","I"]},{"Key":"the elements","Fragments":["being","that","makes","of","of"]},{"Key":"elements being","Fragments":["joined?"]},{"Key":"being joined?","Fragments":["I"]},{"Key":"joined? I","Fragments":["know"]},{"Key":"extra newline","Fragments":["after","from","in"]},{"Key":"newline after","Fragments":["joining"]},{"Key":"after joining","Fragments":["the"]},{"Key":"two lines...","Fragments":["Not"]},{"Key":"lines... Not","Fragments":["sure."]},{"Key":"Not sure.","Fragments":["It's","What","But","Phone-number"]},{"Key":"sure. It's","Fragments":["totally"]},{"Key":"It's totally","Fragments":["fine,"]},{"Key":"totally fine,","Fragments":["just"]},{"Key":"fine, just","Fragments":["feels"]},{"Key":"bit awkward","Fragments":["to","to"]},{"Key":"about just","Fragments":["using","iterating"]},{"Key":"just using","Fragments":["the","it","GenServer,","the","Dict"]},{"Key":"binary concatenation","Fragments":["operator"]},{"Key":"concatenation operator","Fragments":["inline"]},{"Key":"operator inline","Fragments":["to"]},{"Key":"inline to","Fragments":["join"]},{"Key":"lines with","Fragments":["newlines?","it"]},{"Key":"with newlines?","Fragments":["(I"]},{"Key":"newlines? (I","Fragments":["can't"]},{"Key":"(I can't","Fragments":["actually","be"]},{"Key":"actually use","Fragments":["that"]},{"Key":"that operator","Fragments":["in"]},{"Key":"comment because","Fragments":["it"]},{"Key":"an html","Fragments":["tag"]},{"Key":"html tag","Fragments":["so"]},{"Key":"tag so","Fragments":["it"]},{"Key":"it gets","Fragments":["stripped","you","handled"]},{"Key":"gets stripped","Fragments":["out.)"]},{"Key":"stripped out.)","Fragments":[":/"]},{"Key":" Hi.","Fragments":["Thanks"]},{"Key":"Hi. Thanks","Fragments":["for"]},{"Key":"for looking","Fragments":["over"]},{"Key":"looking over","Fragments":["my"]},{"Key":"over my","Fragments":["work!","habit"]},{"Key":"* On","Fragments":["line","lines"]},{"Key":"line 11,","Fragments":["I"]},{"Key":"11, I","Fragments":["was"]},{"Key":"hoping to","Fragments":["use"]},{"Key":"use `Enum.empty?`","Fragments":["instead"]},{"Key":"`Enum.empty?` instead","Fragments":["of"]},{"Key":"of `String.length","Fragments":["=="]},{"Key":"`String.length ==","Fragments":["0`,"]},{"Key":"== 0`,","Fragments":["but"]},{"Key":"0`, but","Fragments":["I"]},{"Key":"to convert/cast","Fragments":["a"]},{"Key":"convert/cast a","Fragments":["string"]},{"Key":"On lines","Fragments":["18-20,"]},{"Key":"lines 18-20,","Fragments":["I"]},{"Key":"18-20, I","Fragments":["tried"]},{"Key":"matching, but","Fragments":["I","I"]},{"Key":"couldn't make","Fragments":["it"]},{"Key":"it work.","Fragments":["Is"]},{"Key":"work. Is","Fragments":["it"]},{"Key":"thing ,the","Fragments":["private"]},{"Key":",the private","Fragments":["functions"]},{"Key":"functions always","Fragments":["go"]},{"Key":"always go","Fragments":["after"]},{"Key":"go after","Fragments":["the"]},{"Key":"minor point,","Fragments":["the"]},{"Key":"point, the","Fragments":["code","current"]},{"Key":"is looks","Fragments":["great!"]},{"Key":"IMHO It","Fragments":["would"]},{"Key":"two predicate","Fragments":["functions"]},{"Key":"functions ,","Fragments":["one"]},{"Key":"for `anagram?`","Fragments":["and"]},{"Key":"`anagram?` and","Fragments":["the"]},{"Key":"for `same_word?`","Fragments":["."]},{"Key":"`same_word?` .","Fragments":["And"]},{"Key":"And then","Fragments":["in","don't","just","using"]},{"Key":"then in","Fragments":["`match/2`","that"]},{"Key":"in `match/2`","Fragments":["apply","two"]},{"Key":"`match/2` apply","Fragments":["this"]},{"Key":"this functions","Fragments":["with"]},{"Key":"with 2","Fragments":["filters.","arguments)."]},{"Key":"not redundant","Fragments":["the"]},{"Key":"redundant the","Fragments":["prefix"]},{"Key":"has `?`","Fragments":["?"]},{"Key":"You maybe","Fragments":["wants","wants"]},{"Key":"out `HashDict.update/4`","Fragments":["here.","here."]},{"Key":"only took","Fragments":["a","9"]},{"Key":"few weeks","Fragments":[";)"]},{"Key":" @rene","Fragments":[":","\"\"\""]},{"Key":"@rene :","Fragments":["If"]},{"Key":": If","Fragments":["you"]},{"Key":"you add","Fragments":["`@rene`","```String.strip```","to","adjacent-mine","one","all","a"]},{"Key":"add `@rene`","Fragments":["module"]},{"Key":"`@rene` module","Fragments":["attributes"]},{"Key":"attributes as","Fragments":["strings,"]},{"Key":"as strings,","Fragments":["any","not"]},{"Key":"strings, any","Fragments":["content"]},{"Key":"any content","Fragments":["after"]},{"Key":"content after","Fragments":["`##"]},{"Key":"after `##","Fragments":["Examples`"]},{"Key":"`## Examples`","Fragments":["beginning"]},{"Key":"Examples` beginning","Fragments":["with"]},{"Key":"beginning with","Fragments":["`iex\u0026gt;`"]},{"Key":"with `iex\u0026gt;`","Fragments":["will"]},{"Key":"`iex\u0026gt;` will","Fragments":["be"]},{"Key":"be evaluated","Fragments":["and","while","is"]},{"Key":"evaluated and","Fragments":["verified."]},{"Key":"and verified.","Fragments":["Here's"]},{"Key":"verified. Here's","Fragments":["an"]},{"Key":"My super","Fragments":["module"]},{"Key":"thing though:","Fragments":["could","should","`String.length(s)","why","why"]},{"Key":"though: could","Fragments":["`Regex.scan`"]},{"Key":"could `Regex.scan`","Fragments":["improve"]},{"Key":"`Regex.scan` improve","Fragments":["this"]},{"Key":"improve this","Fragments":["code?","and","submission"]},{"Key":" @conrad","Fragments":["thanks!"]},{"Key":"`defp` for","Fragments":["the"]},{"Key":"helper methods","Fragments":["to","back","are","to"]},{"Key":"improve encapsulation,","Fragments":["and"]},{"Key":"encapsulation, and","Fragments":["they"]},{"Key":"they could","Fragments":["be"]},{"Key":"into one-liners","Fragments":["e.g."]},{"Key":"defp question?(s),","Fragments":["do:"]},{"Key":"question?(s), do:","Fragments":["String.ends_with?(s,"]},{"Key":"do: String.ends_with?(s,","Fragments":["\"?\")"]},{"Key":"+1 to","Fragments":["what","that."]},{"Key":"what @constantin","Fragments":["said."]},{"Key":"@constantin said.","Fragments":["You"]},{"Key":"said. You","Fragments":["can"]},{"Key":"the reading","Fragments":["of"]},{"Key":"reading of","Fragments":["your"]},{"Key":"your pipeline","Fragments":["by","tell"]},{"Key":"pipeline by","Fragments":["performing"]},{"Key":"by performing","Fragments":["any"]},{"Key":"performing any","Fragments":["necessary"]},{"Key":"any necessary","Fragments":["pre-processing"]},{"Key":"necessary pre-processing","Fragments":["in"]},{"Key":"pre-processing in","Fragments":["private"]},{"Key":"example, instead","Fragments":["of"]},{"Key":"two ```String```","Fragments":["functions"]},{"Key":"```String``` functions","Fragments":["into"]},{"Key":"your pipeline,","Fragments":["you"]},{"Key":"pipeline, you","Fragments":["can"]},{"Key":"that accomplish","Fragments":["the"]},{"Key":"thing but","Fragments":["let"]},{"Key":"but let","Fragments":["your"]},{"Key":"pipeline tell","Fragments":["its"]},{"Key":"story more","Fragments":["naturally."]},{"Key":"right choice","Fragments":["in","though"]},{"Key":"choice in","Fragments":["using"]},{"Key":"using an","Fragments":["anonymous","`=`.","attribute","attribute","uncommon","accumulator.","iolist","if"]},{"Key":"your ```HashDict.update```.","Fragments":["I"]},{"Key":"```HashDict.update```. I","Fragments":["can't"]},{"Key":"imagine that","Fragments":["it"]},{"Key":"efficient to","Fragments":["do","not","just","test"]},{"Key":"other way,","Fragments":["and"]},{"Key":"and ```+```","Fragments":["is"]},{"Key":"```+``` is","Fragments":["an"]},{"Key":"an infix","Fragments":["operator"]},{"Key":"infix operator","Fragments":["for"]},{"Key":"However, you","Fragments":["can"]},{"Key":" HashDict.update(hash,","Fragments":["word,"]},{"Key":"HashDict.update(hash, word,","Fragments":["\u0026amp;(\u0026amp;1"]},{"Key":"word, \u0026amp;(\u0026amp;1","Fragments":["+"]},{"Key":"or worse","Fragments":["than"]},{"Key":"worse than","Fragments":["using"]},{"Key":"the ```fn```","Fragments":["form,"]},{"Key":"```fn``` form,","Fragments":["but"]},{"Key":"form, but","Fragments":["it's"]},{"Key":"it's handy","Fragments":["for"]},{"Key":"module attribute","Fragments":["initially,","like"]},{"Key":"attribute initially,","Fragments":["but"]},{"Key":"initially, but","Fragments":["now"]},{"Key":"it wrong.","Fragments":["I"]},{"Key":"wrong. I","Fragments":["tried"]},{"Key":"tried `@dora","Fragments":["="]},{"Key":"`@dora =","Fragments":["["]},{"Key":"= [","Fragments":["..."]},{"Key":"[ ...","Fragments":["]`"]},{"Key":"... ]`","Fragments":["and"]},{"Key":"]` and","Fragments":["it"]},{"Key":"it gave","Fragments":["me","a"]},{"Key":"gave me","Fragments":["a"]},{"Key":"a compiler","Fragments":["error","warning"]},{"Key":"compiler error","Fragments":["because"]},{"Key":"error because","Fragments":["I"]},{"Key":"was using","Fragments":["an","the",":list.sort","reduce","a"]},{"Key":"change. :","Fragments":[")"]},{"Key":"refactor this","Fragments":["using"]},{"Key":"for `verse`?","Fragments":["(consider"]},{"Key":"`verse`? (consider","Fragments":["the"]},{"Key":"(consider the","Fragments":["number"]},{"Key":"bottles like","Fragments":["argument)"]},{"Key":"Also check","Fragments":["out"]},{"Key":"out `Enum.map_join/3`","Fragments":["for"]},{"Key":"`Enum.map_join/3` for","Fragments":["`sing`"]},{"Key":"Nice solution!!","Fragments":[","]},{"Key":"solution!! ,","Fragments":["for"]},{"Key":", for","Fragments":["me","that"]},{"Key":"me it´s","Fragments":["ok"]},{"Key":"it´s ok","Fragments":[".."]},{"Key":"ok ..","Fragments":["Only"]},{"Key":".. Only","Fragments":["one"]},{"Key":"Only one","Fragments":["thing","thing"]},{"Key":"define `nucleotides`","Fragments":["like"]},{"Key":"`nucleotides` like","Fragments":[":"]},{"Key":" @nicola","Fragments":["["]},{"Key":"@nicola [","Fragments":["?A,"]},{"Key":"[ ?A,","Fragments":["?T,"]},{"Key":"?A, ?T,","Fragments":["?C,"]},{"Key":"?T, ?C,","Fragments":["?G","?G]`)","?G])`","?G]`),"]},{"Key":"?C, ?G","Fragments":["]"]},{"Key":"your help,","Fragments":["to"]},{"Key":"help, to","Fragments":["both"]},{"Key":"of you!","Fragments":["@jessica"]},{"Key":"you! @jessica","Fragments":["@jessica"]},{"Key":" @maxie","Fragments":["significant"]},{"Key":"@maxie significant","Fragments":["step"]},{"Key":"significant step","Fragments":["forward,"]},{"Key":"step forward,","Fragments":["I"]},{"Key":"forward, I","Fragments":["think"]},{"Key":"is done!","Fragments":["good"]},{"Key":"done! good","Fragments":["job!"]},{"Key":"good job!","Fragments":[":)","(In"]},{"Key":"try `Regex.scan/3`","Fragments":["instead"]},{"Key":"`Regex.scan/3` instead","Fragments":["of"]},{"Key":"latest version","Fragments":["of"]},{"Key":"Elixir (0.10.2,","Fragments":["and"]},{"Key":"(0.10.2, and","Fragments":["it"]},{"Key":"might work","Fragments":["in","quite"]},{"Key":"work in","Fragments":["0.10.1)","this","elixir.","the","a","Elixir","0.14.x.","solving"]},{"Key":"in 0.10.1)","Fragments":["to"]},{"Key":"0.10.1) to","Fragments":["get"]},{"Key":"syntax on","Fragments":["line"]},{"Key":"8 working,","Fragments":["but"]},{"Key":"working, but","Fragments":["I"]},{"Key":"version better.","Fragments":["To","Though"]},{"Key":"better. To","Fragments":["me"]},{"Key":"me it","Fragments":["emphasizes","looks"]},{"Key":"it emphasizes","Fragments":["the"]},{"Key":"emphasizes the","Fragments":["shape"]},{"Key":"desired result","Fragments":["and"]},{"Key":"result and","Fragments":["minimizes"]},{"Key":"and minimizes","Fragments":["the"]},{"Key":"minimizes the","Fragments":["syntactic"]},{"Key":"the syntactic","Fragments":["clutter"]},{"Key":"syntactic clutter","Fragments":["(once"]},{"Key":"clutter (once","Fragments":["you"]},{"Key":"(once you","Fragments":["understand"]},{"Key":"\u0026amp; capture","Fragments":["operator"]},{"Key":"capture operator","Fragments":["does).","is","(`\u0026`)","(`\u0026`)"]},{"Key":"the `not_same?`","Fragments":["function"]},{"Key":"`not_same?` function","Fragments":["is"]},{"Key":"seems strange","Fragments":["that"]},{"Key":"that `contains_all_chars?`","Fragments":["does"]},{"Key":"`contains_all_chars?` does","Fragments":["not"]},{"Key":"not take","Fragments":["in"]},{"Key":"take in","Fragments":["strings."]},{"Key":"in strings.","Fragments":["The"]},{"Key":"strings. The","Fragments":["fact"]},{"Key":"The fact","Fragments":["that","that","that","that","that"]},{"Key":"they must","Fragments":["be"]},{"Key":"be converted","Fragments":["to"]},{"Key":"to codepoints","Fragments":["to"]},{"Key":"codepoints to","Fragments":["be"]},{"Key":"be sorted","Fragments":["is"]},{"Key":"sorted is","Fragments":["at"]},{"Key":"abstraction that","Fragments":["the"]},{"Key":"This else/if","Fragments":["isn't"]},{"Key":"else/if isn't","Fragments":["that"]},{"Key":"isn't that","Fragments":["elegant,"]},{"Key":"that elegant,","Fragments":["I"]},{"Key":"elegant, I","Fragments":["hope"]},{"Key":"hope there's","Fragments":["a"]},{"Key":"nicer way","Fragments":["to","of","to","to"]},{"Key":"give feedback.","Fragments":["I"]},{"Key":"was waiting","Fragments":["for"]},{"Key":"waiting for","Fragments":["a","a","your","the"]},{"Key":"got busy","Fragments":["thinking"]},{"Key":"busy thinking","Fragments":["about"]},{"Key":"other things.","Fragments":["I"]},{"Key":"your suggestions,","Fragments":["especially"]},{"Key":"suggestions, especially","Fragments":["the"]},{"Key":"especially the","Fragments":["default","pattern"]},{"Key":"add `not_same?/2`","Fragments":["inside"]},{"Key":"`not_same?/2` inside","Fragments":["another"]},{"Key":"inside another","Fragments":["`Enum.filter/2`"]},{"Key":"another `Enum.filter/2`","Fragments":["on"]},{"Key":"`Enum.filter/2` on","Fragments":["`match/2`"]},{"Key":"on `match/2`","Fragments":["with"]},{"Key":"`match/2` with","Fragments":["pipeline"]},{"Key":"with pipeline","Fragments":["operator("]},{"Key":"pipeline operator(","Fragments":["`|\u003e`)"]},{"Key":"operator( `|\u003e`)","Fragments":["and"]},{"Key":"`|\u003e`) and","Fragments":["it"]},{"Key":"use Erlang","Fragments":["list"]},{"Key":"Erlang list","Fragments":["sort"]},{"Key":"list sort","Fragments":[":"]},{"Key":" :lists.sort","Fragments":["String.codepoints"]},{"Key":":lists.sort String.codepoints","Fragments":["word"]},{"Key":"certainly not","Fragments":["the"]},{"Key":"most concise","Fragments":["solution."]},{"Key":"concise solution.","Fragments":[":)"]},{"Key":"solution. :)","Fragments":["Consider"]},{"Key":":) Consider","Fragments":["this"]},{"Key":"Consider this","Fragments":["the"]},{"Key":"this the","Fragments":["first","algorithm"]},{"Key":"first that","Fragments":["makes"]},{"Key":"makes all","Fragments":["tests"]},{"Key":"tests successful.","Fragments":["I'm"]},{"Key":"successful. I'm","Fragments":["going"]},{"Key":"into macros","Fragments":["to"]},{"Key":"easier on","Fragments":["the","the"]},{"Key":" @rod,","Fragments":["I","thanks,"]},{"Key":"@rod, I","Fragments":["initially"]},{"Key":"initially thought","Fragments":["the"]},{"Key":"thought the","Fragments":["same,","exercise","order","intent","compiler"]},{"Key":"the same,","Fragments":["but","yelling","so","and"]},{"Key":"same, but","Fragments":["someone"]},{"Key":"but someone","Fragments":["else"]},{"Key":"else nitpicked","Fragments":["over"]},{"Key":"nitpicked over","Fragments":["it"]},{"Key":"over it","Fragments":["and"]},{"Key":"decided I","Fragments":["liked","didn't"]},{"Key":"liked it","Fragments":["separated."]},{"Key":"it separated.","Fragments":["I"]},{"Key":"separated. I","Fragments":["take"]},{"Key":"the codepoints","Fragments":["point","of","conversion."]},{"Key":"codepoints point","Fragments":["though."]},{"Key":"@rod, thanks,","Fragments":["I've"]},{"Key":"thanks, I've","Fragments":["now"]},{"Key":"now figured","Fragments":["out"]},{"Key":"figured out","Fragments":["the","quite","how"]},{"Key":"Yeah, I'd","Fragments":["left"]},{"Key":"I'd left","Fragments":["everything"]},{"Key":"left everything","Fragments":["expanded"]},{"Key":"everything expanded","Fragments":["when"]},{"Key":"expanded when","Fragments":["I"]},{"Key":"I \"finished\"","Fragments":["this,"]},{"Key":"\"finished\" this,","Fragments":["but"]},{"Key":"saw them","Fragments":["collapsed"]},{"Key":"them collapsed","Fragments":["in"]},{"Key":"collapsed in","Fragments":["another"]},{"Key":"another exercise","Fragments":["and"]},{"Key":" Next","Fragments":["is"]},{"Key":"Next is","Fragments":["to"]},{"Key":"out this","Fragments":["@verla"]},{"Key":"this @verla","Fragments":["stuff."]},{"Key":"out `Regex.scan/2`","Fragments":["here,"]},{"Key":"`Regex.scan/2` here,","Fragments":["for"]},{"Key":"here, for","Fragments":["scan"]},{"Key":"scan only","Fragments":["words"]},{"Key":"only words","Fragments":["."]},{"Key":"really necessary","Fragments":["the","nor","for"]},{"Key":"necessary the","Fragments":["`\u0026("]},{"Key":"the `\u0026(","Fragments":[")`"]},{"Key":"`\u0026( )`","Fragments":["in"]},{"Key":")` in","Fragments":["line"]},{"Key":" @nicolas,","Fragments":["thanks"]},{"Key":"@nicolas, thanks","Fragments":["for"]},{"Key":"you comment,","Fragments":["I'll"]},{"Key":"comment, I'll","Fragments":["check"]},{"Key":"I'll check","Fragments":["for","that"]},{"Key":"for Regex.scan/2.","Fragments":["\u0026("]},{"Key":"Regex.scan/2. \u0026(","Fragments":[")"]},{"Key":"\u0026( )","Fragments":["is"]},{"Key":"is required","Fragments":["by","to"]},{"Key":"required by","Fragments":["new"]},{"Key":"by new","Fragments":["syntax."]},{"Key":"syntax. As","Fragments":["I"]},{"Key":"know for","Fragments":["now"]},{"Key":"now Elixir","Fragments":["supports"]},{"Key":"supports variant","Fragments":["without"]},{"Key":"variant without","Fragments":["\u0026(),"]},{"Key":"without \u0026(),","Fragments":["but"]},{"Key":"\u0026(), but","Fragments":["it"]},{"Key":"it is/will","Fragments":["be"]},{"Key":"is/will be","Fragments":["deprecated."]},{"Key":"Looks almost","Fragments":["like"]},{"Key":"almost like","Fragments":["my"]},{"Key":"my own.","Fragments":["The","Thanks.","Very"]},{"Key":"own. The","Fragments":["difference"]},{"Key":"The difference","Fragments":["is","in","is","I"]},{"Key":"only I'm","Fragments":["```String.strip```-ing"]},{"Key":"I'm ```String.strip```-ing","Fragments":["text"]},{"Key":"```String.strip```-ing text","Fragments":["before"]},{"Key":"text before","Fragments":["all"]},{"Key":"before all","Fragments":["3","the"]},{"Key":"all 3","Fragments":["checks,"]},{"Key":"3 checks,","Fragments":["so"]},{"Key":"checks, so","Fragments":["\"What?"]},{"Key":"so \"What?","Fragments":["\""]},{"Key":"\"What? \"","Fragments":["will"]},{"Key":"\" will","Fragments":["work"]},{"Key":"work correctly","Fragments":["then."]},{"Key":"that `tokinizer`","Fragments":["could"]},{"Key":"`tokinizer` could","Fragments":["be"]},{"Key":"be `tokenizer`","Fragments":["no?"]},{"Key":"`tokenizer` no?","Fragments":[":)"]},{"Key":"remove `List.flatten/1`","Fragments":[","]},{"Key":"`List.flatten/1` ,","Fragments":["I"]},{"Key":"Yeah, very","Fragments":["interesting"]},{"Key":"very interesting","Fragments":["idea."]},{"Key":"interesting idea.","Fragments":["I"]},{"Key":"idea. I","Fragments":["wonder","suppose","never","tried","updated"]},{"Key":"wonder how","Fragments":["would","things","clear"]},{"Key":"add ```String.strip```","Fragments":["to"]},{"Key":"```String.strip``` to","Fragments":["the"]},{"Key":"the process?","Fragments":["i.e."]},{"Key":"process? i.e.","Fragments":["to"]},{"Key":"i.e. to","Fragments":["allow"]},{"Key":"allow \"","Fragments":["\""]},{"Key":"\" or","Fragments":["\"","something"]},{"Key":"or \"","Fragments":["What?"]},{"Key":"\" What?","Fragments":["\""]},{"Key":"Looks very","Fragments":["complex."]},{"Key":"very complex.","Fragments":["I"]},{"Key":"complex. I","Fragments":["think","generally"]},{"Key":"extract methods","Fragments":["according","to"]},{"Key":"methods according","Fragments":["possible"]},{"Key":"according possible","Fragments":["checks."]},{"Key":" Instead","Fragments":["of","of","of","of","of","it","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"Instead of","Fragments":["```String.length","redefining","using","having","writing","replacing","removing","`String.last(input)","using","replacing","replacing","removing","using","`HashDict.fetch!`","`[^\\p{L}]`","replacing","`x","using","re-implementing","doing","using","using"]},{"Key":"of ```String.length","Fragments":["=="]},{"Key":"```String.length ==","Fragments":["0```"]},{"Key":"== 0```","Fragments":["you"]},{"Key":"0``` you","Fragments":["can"]},{"Key":"use ```str","Fragments":["=="]},{"Key":"```str ==","Fragments":["\"\"```."]},{"Key":"== \"\"```.","Fragments":["Pattern"]},{"Key":"\"\"```. Pattern","Fragments":["matching"]},{"Key":"matching supports","Fragments":["only"]},{"Key":"supports only","Fragments":["limited"]},{"Key":"only limited","Fragments":["list","precision."]},{"Key":"limited list","Fragments":["of","of"]},{"Key":"matching so","Fragments":["`cond`"]},{"Key":"so `cond`","Fragments":["is"]},{"Key":"right way","Fragments":["to","here."]},{"Key":" Only","Fragments":["thing","one","-","ugly","nitpick","`count`","nit","problem"]},{"Key":"think might","Fragments":["make"]},{"Key":"readable is","Fragments":["not"]},{"Key":"the `Greeting`","Fragments":["module."]},{"Key":"`Greeting` module.","Fragments":["Why"]},{"Key":"module. Why","Fragments":["is"]},{"Key":"Why is","Fragments":["it"]},{"Key":"a Greeting?","Fragments":["Is"]},{"Key":"Greeting? Is","Fragments":["there"]},{"Key":"better name?","Fragments":["What"]},{"Key":"name? What","Fragments":["is"]},{"Key":"What is","Fragments":["the","\"idiomatic\"","it","commonly","the","the","your","your"]},{"Key":"the disadvantage","Fragments":["of"]},{"Key":"disadvantage of","Fragments":["using"]},{"Key":"`defp` private","Fragments":["methods?"]},{"Key":"function definitions,","Fragments":["there"]},{"Key":"definitions, there","Fragments":["is"]},{"Key":"slightly difference","Fragments":["syntax"]},{"Key":"difference syntax","Fragments":["you"]},{"Key":"syntax you","Fragments":["can","could"]},{"Key":"doesn't require","Fragments":["you"]},{"Key":"require you","Fragments":["to"]},{"Key":"add those","Fragments":["semicolons"]},{"Key":"those semicolons","Fragments":["or"]},{"Key":"semicolons or","Fragments":["use"]},{"Key":"use `end`.","Fragments":["It"]},{"Key":"`end`. It","Fragments":["uses"]},{"Key":"It uses","Fragments":["a"]},{"Key":"uses a","Fragments":["comma","German","def","value","Graph","few"]},{"Key":"a comma","Fragments":["after"]},{"Key":"comma after","Fragments":["the"]},{"Key":"a colon","Fragments":["after"]},{"Key":"colon after","Fragments":["do"]},{"Key":"after do","Fragments":["like"]},{"Key":"defp dna_to_rna(?T),","Fragments":["do:"]},{"Key":"dna_to_rna(?T), do:","Fragments":["?U"]},{"Key":"my only","Fragments":["tiny"]},{"Key":"only tiny","Fragments":["nitpick"]},{"Key":"tiny nitpick","Fragments":["would"]},{"Key":"be about","Fragments":["the","the"]},{"Key":"list comprehension.","Fragments":["It's","I'll"]},{"Key":"comprehension. It's","Fragments":["not"]},{"Key":"obvious if","Fragments":["you"]},{"Key":"used `nucleotide`","Fragments":["or"]},{"Key":"`nucleotide` or","Fragments":["`n`"]},{"Key":"or `n`","Fragments":["instead"]},{"Key":"`n` instead","Fragments":["of"]},{"Key":"cool way","Fragments":["of","to"]},{"Key":"of getting","Fragments":["around","something"]},{"Key":"getting around","Fragments":["the"]},{"Key":"no replace","Fragments":["function"]},{"Key":"replace function","Fragments":["for"]},{"Key":"for character","Fragments":["lists!"]},{"Key":"character lists!","Fragments":["I"]},{"Key":"lists! I","Fragments":["didn't"]},{"Key":"thought on","Fragments":["this","`void?`","using"]},{"Key":"helper method:","Fragments":["`dna_string_to_char`."]},{"Key":"method: `dna_string_to_char`.","Fragments":["It"]},{"Key":"`dna_string_to_char`. It","Fragments":["sounds"]},{"Key":"It sounds","Fragments":["like"]},{"Key":"it's converting","Fragments":["a"]},{"Key":"converting a","Fragments":["string","string","list"]},{"Key":"character, not","Fragments":["a"]},{"Key":"of characters.","Fragments":["Also,","Wouldn't"]},{"Key":"characters. Also,","Fragments":["the"]},{"Key":"Also, the","Fragments":["method","string","readme","Map.put_new"]},{"Key":"method doesn't","Fragments":["really"]},{"Key":"have anything","Fragments":["in"]},{"Key":"in it","Fragments":["that","to","since","for","are"]},{"Key":"is specific","Fragments":["to"]},{"Key":"specific to","Fragments":["dna,","the"]},{"Key":"to dna,","Fragments":["so"]},{"Key":"dna, so","Fragments":["you"]},{"Key":"call it","Fragments":["something","once.","multiple","make","`reduce`,","assignment)","as","`is_something`","`count/2`"]},{"Key":"like `string_to_list`","Fragments":["if"]},{"Key":"`string_to_list` if","Fragments":["you"]},{"Key":"be interesting","Fragments":["just"]},{"Key":"interesting just","Fragments":["for"]},{"Key":"just for","Fragments":["the","the","the","consistency,","clarity."]},{"Key":"exercise of","Fragments":["it","exercism"]},{"Key":"of it","Fragments":["to","as","(for","in","scattered","that","like",":\\","in","list_in_list?"]},{"Key":"try implementing","Fragments":["this"]},{"Key":"implementing this","Fragments":["without"]},{"Key":"using `String.replace`,","Fragments":["just"]},{"Key":"`String.replace`, just","Fragments":["working"]},{"Key":"just working","Fragments":["with"]},{"Key":"list natively.","Fragments":["I"]},{"Key":"natively. I","Fragments":["learned"]},{"Key":"few things","Fragments":["by","with","you","though:","on"]},{"Key":"things by","Fragments":["doing","having"]},{"Key":"Thanks @alysha,","Fragments":["I"]},{"Key":"@alysha, I","Fragments":["will"]},{"Key":"will check","Fragments":["it"]},{"Key":"check it","Fragments":["out."]},{"Key":" An","Fragments":["alternative","alternative","option"]},{"Key":"An alternative","Fragments":["idea","would","would"]},{"Key":"alternative idea","Fragments":["for"]},{"Key":"idea for","Fragments":["how"]},{"Key":"to ensure","Fragments":["zip"]},{"Key":"ensure zip","Fragments":["doesn't"]},{"Key":"zip doesn't","Fragments":["\"pad\""]},{"Key":"doesn't \"pad\"","Fragments":["anything"]},{"Key":"\"pad\" anything","Fragments":["with"]},{"Key":"with nils","Fragments":["(compare"]},{"Key":"nils (compare","Fragments":["with"]},{"Key":"(compare with","Fragments":["iteration"]},{"Key":"with iteration","Fragments":["#1)."]},{"Key":"iteration #1).","Fragments":["Not"]},{"Key":"#1). Not","Fragments":["sure"]},{"Key":"if Elixir","Fragments":["provides"]},{"Key":"a neater","Fragments":["solution"]},{"Key":"neater solution","Fragments":["out"]},{"Key":"solution out","Fragments":["of"]},{"Key":"of redefining","Fragments":["downcase,"]},{"Key":"redefining downcase,","Fragments":["look"]},{"Key":"downcase, look","Fragments":["at"]},{"Key":"at Kernel.SpecialForms.import/2.","Fragments":["You"]},{"Key":"Kernel.SpecialForms.import/2. You","Fragments":["can"]},{"Key":"can import","Fragments":["the"]},{"Key":"from String","Fragments":["that"]},{"Key":"String that","Fragments":["you"]},{"Key":"you want,","Fragments":["and"]},{"Key":"want, and","Fragments":["then"]},{"Key":"then use","Fragments":["them","them","that","a"]},{"Key":"them without","Fragments":["the"]},{"Key":"Good to","Fragments":["know,","know","know!","hear"]},{"Key":"to know,","Fragments":["thanks!","if"]},{"Key":" Whitespace","Fragments":["fix..."]},{"Key":" String","Fragments":["has"]},{"Key":"String has","Fragments":["a"]},{"Key":"called `split/1`","Fragments":["that"]},{"Key":"`split/1` that","Fragments":["does"]},{"Key":"what `tokenizer`","Fragments":["is"]},{"Key":"`tokenizer` is","Fragments":["doing."]},{"Key":"Consider renaming","Fragments":["the"]},{"Key":"since each","Fragments":["of"]},{"Key":"functions performs","Fragments":["a"]},{"Key":"performs a","Fragments":["completely"]},{"Key":"a completely","Fragments":["different","useless"]},{"Key":"completely different","Fragments":["task."]},{"Key":"different task.","Fragments":["This"]},{"Key":"task. This","Fragments":["would"]},{"Key":"also let","Fragments":["you","me"]},{"Key":"current `count`","Fragments":["function."]},{"Key":"the is_question","Fragments":["function"]},{"Key":"is_question function","Fragments":["has","should"]},{"Key":"function has","Fragments":["a","quadratic","on"]},{"Key":"pretty cool","Fragments":["implementation,","and","way"]},{"Key":"cool implementation,","Fragments":["but"]},{"Key":"readability you","Fragments":["should"]},{"Key":"probably use","Fragments":["`String.ends_with?/2`","the","`if","a"]},{"Key":"Consider if","Fragments":["there"]},{"Key":"a better/more","Fragments":["consistent"]},{"Key":"better/more consistent","Fragments":["way"]},{"Key":"consistent way","Fragments":["to"]},{"Key":"implement `parse`.","Fragments":["Right"]},{"Key":"`parse`. Right","Fragments":["now"]},{"Key":"Right now","Fragments":["the"]},{"Key":"now the","Fragments":["empty","conditions","regex","code"]},{"Key":"is handled","Fragments":["separately;"]},{"Key":"handled separately;","Fragments":["the"]},{"Key":"separately; the","Fragments":["shouting"]},{"Key":"shouting case","Fragments":["is","to"]},{"Key":"case is","Fragments":["handled;","required","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","not","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","matched,","to"]},{"Key":"is handled;","Fragments":["then"]},{"Key":"handled; then","Fragments":["there"]},{"Key":"then there","Fragments":["is","seems"]},{"Key":"a nested","Fragments":["if"]},{"Key":"if with","Fragments":["a"]},{"Key":"to determine","Fragments":["if","whether","what","how"]},{"Key":"question. it","Fragments":["seems"]},{"Key":"seems that","Fragments":["`is_question`","`String.split/1`","special","the"]},{"Key":"that `is_question`","Fragments":["`is_shout`"]},{"Key":"`is_question` `is_shout`","Fragments":["etc."]},{"Key":"`is_shout` etc.","Fragments":["would"]},{"Key":"etc. would","Fragments":["be"]},{"Key":"consistent internal","Fragments":["implementation."]},{"Key":"also end","Fragments":["function"]},{"Key":"end function","Fragments":["names"]},{"Key":"names with","Fragments":["a","words","the"]},{"Key":"are boolean.","Fragments":["This"]},{"Key":"boolean. This","Fragments":["is"]},{"Key":"the normal","Fragments":["practice","syntax","adjustment","case"]},{"Key":"normal practice","Fragments":["in"]},{"Key":"practice in","Fragments":["the","Elixir","that"]},{"Key":"library, and","Fragments":["would"]},{"Key":"and would","Fragments":["probably","have","aid","be","make"]},{"Key":"probably work","Fragments":["well"]},{"Key":" @haley,","Fragments":["I"]},{"Key":"@haley, I","Fragments":["have"]},{"Key":"have Q","Fragments":["to"]},{"Key":"Q to","Fragments":["you."]},{"Key":"iex(1)\u003e str","Fragments":["="]},{"Key":"str =","Fragments":["\"car"]},{"Key":"= \"car","Fragments":[":"]},{"Key":"\"car :","Fragments":["carpet","carpet"]},{"Key":": carpet","Fragments":["as","as"]},{"Key":"carpet as","Fragments":["java","java"]},{"Key":"as java","Fragments":[":",":"]},{"Key":"java :","Fragments":["javascript!!\u0026@$%^\u0026\"","javascript!!\u0026@$%^\u0026\""]},{"Key":" iex(2)\u003e","Fragments":["Regex.split(%r/\\W+/,",":math.pow(2,64)","a","ListOps.count([1,3,5,7],"]},{"Key":"iex(2)\u003e Regex.split(%r/\\W+/,","Fragments":["str)"]},{"Key":" [\"car\",","Fragments":["\"carpet\","]},{"Key":"[\"car\", \"carpet\",","Fragments":["\"as\","]},{"Key":"\"carpet\", \"as\",","Fragments":["\"java\","]},{"Key":"\"as\", \"java\",","Fragments":["\"javascript\","]},{"Key":"\"java\", \"javascript\",","Fragments":["\"\"]"]},{"Key":"see there","Fragments":["is"]},{"Key":"a blank","Fragments":["string","string."]},{"Key":"blank string","Fragments":["in","check"]},{"Key":"end. How","Fragments":["can"]},{"Key":"How can","Fragments":["I","I","I"]},{"Key":"can I","Fragments":["get","use","avoid","find"]},{"Key":"without direct","Fragments":["comparison?"]},{"Key":"Thanks @kelsi","Fragments":[","]},{"Key":"@kelsi ,","Fragments":["I"]},{"Key":"the response,","Fragments":["good"]},{"Key":"response, good","Fragments":["info"]},{"Key":"good info","Fragments":["there."]},{"Key":"use `Regex.scan/2`","Fragments":["for","that"]},{"Key":"`Regex.scan/2` for","Fragments":["tokenizer"]},{"Key":"for tokenizer","Fragments":["words"]},{"Key":"tokenizer words","Fragments":["and"]},{"Key":"also for","Fragments":["remove","the"]},{"Key":"for remove","Fragments":["`@chelsea`"]},{"Key":"used ```count```","Fragments":["names"]},{"Key":"```count``` names","Fragments":["for"]},{"Key":"follow common","Fragments":["interface."]},{"Key":"common interface.","Fragments":["I"]},{"Key":"allow just","Fragments":["use"]},{"Key":"module as","Fragments":["```Words.count()```","small"]},{"Key":"as ```Words.count()```","Fragments":["with"]},{"Key":"```Words.count()``` with","Fragments":["any"]},{"Key":"with any","Fragments":["type","non-English","enumerable,","foreign","letters,"]},{"Key":"any type","Fragments":["of"]},{"Key":"of input.","Fragments":["You","I"]},{"Key":"input. You","Fragments":["might"]},{"Key":"be have","Fragments":["a"]},{"Key":"and may","Fragments":["be","need","lead"]},{"Key":"be you","Fragments":["have"]},{"Key":"words, so","Fragments":["I"]},{"Key":"to limit","Fragments":["you"]},{"Key":"limit you","Fragments":["to"]},{"Key":"use only","Fragments":["```Strings```"]},{"Key":"only ```Strings```","Fragments":["or"]},{"Key":"```Strings``` or","Fragments":["move"]},{"Key":"move you","Fragments":["to"]},{"Key":"look for","Fragments":["something","an","invalid","something","a","the"]},{"Key":"like ```count_words_in_list```.","Fragments":["Also"]},{"Key":"```count_words_in_list```. Also","Fragments":["I"]},{"Key":"Also I","Fragments":["prefer","think","tried","added"]},{"Key":"guards where","Fragments":["I'm"]},{"Key":"where I'm","Fragments":["expecting"]},{"Key":"I'm expecting","Fragments":["a"]},{"Key":"expecting a","Fragments":["certain","particular"]},{"Key":"certain input","Fragments":["as"]},{"Key":"input as","Fragments":["I","binary"]},{"Key":"will raise","Fragments":["earlier","an"]},{"Key":"raise earlier","Fragments":["if"]},{"Key":"earlier if","Fragments":["you"]},{"Key":"will miss","Fragments":["use"]},{"Key":"miss use","Fragments":["the"]},{"Key":"at split","Fragments":["but"]},{"Key":"split but","Fragments":["moved"]},{"Key":"but moved","Fragments":["forward"]},{"Key":"moved forward","Fragments":["for"]},{"Key":"forward for","Fragments":["unknown"]},{"Key":"for unknown","Fragments":["reason,"]},{"Key":"unknown reason,","Fragments":["I'll"]},{"Key":"reason, I'll","Fragments":["rework"]},{"Key":"I'll rework","Fragments":["that"]},{"Key":"rework that","Fragments":["thnx."]},{"Key":" @ronny","Fragments":["sorry","Queue"]},{"Key":"@ronny sorry","Fragments":["but"]},{"Key":"sorry but","Fragments":["you"]},{"Key":"right ,","Fragments":["`String.split/1`"]},{"Key":", `String.split/1`","Fragments":["splits"]},{"Key":"`String.split/1` splits","Fragments":["a"]},{"Key":"splits a","Fragments":["string"]},{"Key":"string on","Fragments":["substrings","line"]},{"Key":"on substrings","Fragments":["at"]},{"Key":"substrings at","Fragments":["each"]},{"Key":"at each","Fragments":["Unicode","step"]},{"Key":"each Unicode","Fragments":["whitespace"]},{"Key":"Unicode whitespace","Fragments":["occurrence"]},{"Key":"whitespace occurrence","Fragments":["with"]},{"Key":"occurrence with","Fragments":["leading"]},{"Key":"with leading","Fragments":["and"]},{"Key":"leading and","Fragments":["trailing"]},{"Key":"and trailing","Fragments":["whitespace"]},{"Key":"trailing whitespace","Fragments":["ignored"]},{"Key":"whitespace ignored","Fragments":["-\u003e"]},{"Key":"ignored -\u003e","Fragments":["(http://elixir-lang.org/docs/stable/String.html#split/1)"]},{"Key":"-\u003e (http://elixir-lang.org/docs/stable/String.html#split/1)","Fragments":["."]},{"Key":"(http://elixir-lang.org/docs/stable/String.html#split/1) .","Fragments":["It"]},{"Key":". It","Fragments":["could"]},{"Key":"be `String.split/3`","Fragments":["but"]},{"Key":"`String.split/3` but","Fragments":["IMHO"]},{"Key":"fine with","Fragments":["`Regex.scan/2`.","`codepoints`","UTF-8"]},{"Key":"On the","Fragments":["other","other","whole","whole","whole","other","whole","whole","whole","whole","one","other","whole"]},{"Key":"other hand","Fragments":[",","it's","is","only","only","now"]},{"Key":"hand ,","Fragments":["the"]},{"Key":"guards are","Fragments":["never","restricted","a","rather"]},{"Key":"are never","Fragments":["a"]},{"Key":"never a","Fragments":["problem"]},{"Key":"problem (unless","Fragments":["abuse"]},{"Key":"(unless abuse","Fragments":["of"]},{"Key":"abuse of","Fragments":["them),"]},{"Key":"of them),","Fragments":["is"]},{"Key":"them), is","Fragments":["true"]},{"Key":"other name","Fragments":["would"]},{"Key":"is ok","Fragments":["."]},{"Key":"Ok, just","Fragments":["wading"]},{"Key":"just wading","Fragments":["into"]},{"Key":"wading into","Fragments":["elixir"]},{"Key":"into elixir","Fragments":["here,"]},{"Key":"elixir here,","Fragments":["so"]},{"Key":"here, so","Fragments":["I","will","ended","I'll"]},{"Key":"1. `HashDict.update`","Fragments":["takes"]},{"Key":"a callback,","Fragments":["which"]},{"Key":"callback, which","Fragments":["I've"]},{"Key":"I've called","Fragments":["`inc`","`sorted_letters`"]},{"Key":"called `inc`","Fragments":["here."]},{"Key":"`inc` here.","Fragments":["Initially,"]},{"Key":"here. Initially,","Fragments":["I"]},{"Key":"Initially, I","Fragments":["tried"]},{"Key":"define `inc`","Fragments":["as"]},{"Key":"`inc` as","Fragments":["a"]},{"Key":"module method","Fragments":["(with"]},{"Key":"method (with","Fragments":["`def`),"]},{"Key":"(with `def`),","Fragments":["but"]},{"Key":"`def`), but","Fragments":["that"]},{"Key":"doesn't work.","Fragments":["Why"]},{"Key":"work. Why","Fragments":["doesn't"]},{"Key":"Why doesn't","Fragments":["that","it"]},{"Key":"doesn't that","Fragments":["work?"]},{"Key":"2. The","Fragments":["`\u0026`"]},{"Key":"The `\u0026`","Fragments":["lambda"]},{"Key":"`\u0026` lambda","Fragments":["syntax."]},{"Key":"lambda syntax.","Fragments":["It","It's"]},{"Key":"syntax. It","Fragments":["seems","doesn't"]},{"Key":"seems useful","Fragments":["for"]},{"Key":"for small","Fragments":["one-offs","functions","inputs","functions,"]},{"Key":"small one-offs","Fragments":["like"]},{"Key":"one-offs like","Fragments":["I"]},{"Key":"have here,","Fragments":["but"]},{"Key":"could quickly","Fragments":["get"]},{"Key":"quickly get","Fragments":["problematic."]},{"Key":"get problematic.","Fragments":["Is"]},{"Key":"problematic. Is","Fragments":["it"]},{"Key":"it idiomatic","Fragments":["to"]},{"Key":"the definitions","Fragments":["of"]},{"Key":"of `@laurine`","Fragments":["and"]},{"Key":"`@laurine` and","Fragments":["`@laurine`","one"]},{"Key":"and `@laurine`","Fragments":["did"]},{"Key":"`@laurine` did","Fragments":["you"]},{"Key":"the special","Fragments":["syntax"]},{"Key":"for getting","Fragments":["the"]},{"Key":"the integer","Fragments":["value","value,"]},{"Key":"integer value","Fragments":["of"]},{"Key":"a character?","Fragments":["You"]},{"Key":"character? You","Fragments":["can"]},{"Key":"do `?T`","Fragments":["and"]},{"Key":"`?U` instead","Fragments":["of"]},{"Key":"explicitly listing","Fragments":["the"]},{"Key":"listing the","Fragments":["integer"]},{"Key":"integer value,","Fragments":["which"]},{"Key":"value, which","Fragments":["might","you"]},{"Key":"which might","Fragments":["be","provide","not","be","simplify"]},{"Key":"decide what","Fragments":["I"]},{"Key":"the `replace_thymidine`","Fragments":["method."]},{"Key":"`replace_thymidine` method.","Fragments":["It"]},{"Key":"method. It","Fragments":["makes","just"]},{"Key":"sense, but","Fragments":["it's"]},{"Key":"it's kind","Fragments":["of"]},{"Key":"doing two","Fragments":["things.","things"]},{"Key":"two things.","Fragments":["If"]},{"Key":"things. If","Fragments":["`@laurine`"]},{"Key":"If `@laurine`","Fragments":["is"]},{"Key":"`@laurine` is","Fragments":["passed"]},{"Key":"is passed","Fragments":["to","to","to","to","to","they'll"]},{"Key":"to it,","Fragments":["it's","so","not","and"]},{"Key":"it, it's","Fragments":["replacing"]},{"Key":"it's replacing","Fragments":["it"]},{"Key":"with `@laurine`,","Fragments":["but"]},{"Key":"`@laurine`, but","Fragments":["if"]},{"Key":"if not,","Fragments":["it's"]},{"Key":"not, it's","Fragments":["not"]},{"Key":"not replacing","Fragments":["thymidine,"]},{"Key":"replacing thymidine,","Fragments":["it's"]},{"Key":"thymidine, it's","Fragments":["just"]},{"Key":"returning whatever","Fragments":["argument"]},{"Key":"whatever argument","Fragments":["it"]},{"Key":"argument it","Fragments":["was"]},{"Key":"was given.","Fragments":["So,"]},{"Key":"given. So,","Fragments":["I'm"]},{"Key":"would express","Fragments":["a"]},{"Key":"express a","Fragments":["little"]},{"Key":"accurately what","Fragments":["it's"]},{"Key":"it's doing.","Fragments":["On","That"]},{"Key":"doing. On","Fragments":["the"]},{"Key":"hand, taken","Fragments":["as"]},{"Key":"taken as","Fragments":["a"]},{"Key":"a whole,","Fragments":["it"]},{"Key":"whole, it","Fragments":["might"]},{"Key":"be clear","Fragments":["enough."]},{"Key":"clear enough.","Fragments":["Not"]},{"Key":"enough. Not","Fragments":["sure."]},{"Key":"sure. What","Fragments":["do"]},{"Key":"think? In","Fragments":["my"]},{"Key":"implementation I","Fragments":["think","came","wrote","tried","will"]},{"Key":"used something","Fragments":["like","like"]},{"Key":"like `rna_counterpart(nucleotide)`","Fragments":["and"]},{"Key":"`rna_counterpart(nucleotide)` and","Fragments":["I"]},{"Key":"used two","Fragments":["`defp`s,","clauses"]},{"Key":"two `defp`s,","Fragments":["one"]},{"Key":"`defp`s, one","Fragments":["expecting"]},{"Key":"one expecting","Fragments":["`@laurine`","anything"]},{"Key":"expecting `@laurine`","Fragments":["and"]},{"Key":"expecting anything","Fragments":["else."]},{"Key":"totally right.I'm","Fragments":["not"]},{"Key":"right.I'm not","Fragments":["very"]},{"Key":"very happy","Fragments":["with","with","with"]},{"Key":"function `replace_thymidine`","Fragments":["and"]},{"Key":"`replace_thymidine` and","Fragments":["your"]},{"Key":"solution make","Fragments":["sense."]},{"Key":"will think","Fragments":["on"]},{"Key":"think on","Fragments":["it","it"]},{"Key":"on it","Fragments":["for","like","soon."]},{"Key":"a readable","Fragments":["solution.","helper","solution."]},{"Key":"usually forget","Fragments":["the"]},{"Key":"forget the","Fragments":["syntax","`/u`"]},{"Key":"syntax `?X`","Fragments":[":)"]},{"Key":"Much better!!","Fragments":["I"]},{"Key":"better!! I","Fragments":["suppose"]},{"Key":"suppose you","Fragments":["contributed","mean","could"]},{"Key":"you contributed","Fragments":["to"]},{"Key":"contributed to","Fragments":["elixir-core.."]},{"Key":"to elixir-core..","Fragments":["Well"]},{"Key":"elixir-core.. Well","Fragments":["Done"]},{"Key":"Well Done","Fragments":["@carlee!!"]},{"Key":"Very verbose,","Fragments":["this"]},{"Key":"verbose, this","Fragments":["all"]},{"Key":"this all","Fragments":["fits"]},{"Key":"all fits","Fragments":["on"]},{"Key":"fits on","Fragments":["one"]},{"Key":"line if","Fragments":["not","at","you","you"]},{"Key":"if not","Fragments":["wrapped","the"]},{"Key":"not wrapped","Fragments":["in"]},{"Key":"wrapped in","Fragments":["so","well-named"]},{"Key":"many functions,","Fragments":["but"]},{"Key":"clear what","Fragments":["the","happens","it","a","the"]},{"Key":"intent is.","Fragments":["I"]},{"Key":"is. I","Fragments":["prefer","like"]},{"Key":"prefer `\u0026mutation?/1`","Fragments":["to"]},{"Key":"`\u0026mutation?/1` to","Fragments":["the"]},{"Key":"in helpers","Fragments":["private"]},{"Key":"helpers private","Fragments":["methods.And"]},{"Key":"private methods.And","Fragments":["the"]},{"Key":"methods.And the","Fragments":["argument"]},{"Key":"argument `s`","Fragments":["don't"]},{"Key":"`s` don't","Fragments":["say"]},{"Key":"don't say","Fragments":["much"]},{"Key":"better solution","Fragments":["but","either.","would","than","with"]},{"Key":"solution but","Fragments":["I","I"]},{"Key":"could refactorice","Fragments":["some"]},{"Key":"refactorice some","Fragments":["code:"]},{"Key":"* For","Fragments":["me"]},{"Key":"put in","Fragments":["`match/2`","a","because","it...","some"]},{"Key":"`match/2` two","Fragments":["`Enum/filter/2`"]},{"Key":"two `Enum/filter/2`","Fragments":[",separates"]},{"Key":"`Enum/filter/2` ,separates","Fragments":["with"]},{"Key":",separates with","Fragments":["the"]},{"Key":"pipeline operator,","Fragments":["one","I"]},{"Key":"operator, one","Fragments":["for"]},{"Key":"for anagram","Fragments":["and"]},{"Key":"for not","Fragments":["same","making","reusing","being","using"]},{"Key":"not same","Fragments":["word."]},{"Key":"* The","Fragments":["function","function","`is_silence?`","```equal?/2```","```contains?```"]},{"Key":"function `not_same?/2`","Fragments":["don´t"]},{"Key":"`not_same?/2` don´t","Fragments":["say"]},{"Key":"much ,","Fragments":["perhaps"]},{"Key":", perhaps","Fragments":["the"]},{"Key":"perhaps the","Fragments":["name"]},{"Key":"name and","Fragments":["the","their","the","swapped"]},{"Key":"function `chars/1`","Fragments":["do"]},{"Key":"`chars/1` do","Fragments":["more"]},{"Key":"do more","Fragments":["than","reading","accurate"]},{"Key":"than returns","Fragments":["chars"]},{"Key":"returns chars","Fragments":[","]},{"Key":"chars ,","Fragments":["also"]},{"Key":", also","Fragments":["sort"]},{"Key":"also sort","Fragments":["the"]},{"Key":"the chars","Fragments":[".You"]},{"Key":"chars .You","Fragments":["could"]},{"Key":".You could","Fragments":["change"]},{"Key":"change his","Fragments":["name"]},{"Key":"his name","Fragments":["for"]},{"Key":"for `sort_chars`","Fragments":["or"]},{"Key":"`sort_chars` or","Fragments":["something"]},{"Key":"could normalize","Fragments":["the","the","the"]},{"Key":"normalize the","Fragments":["word","word","string","base","base"]},{"Key":"in `chars/1`","Fragments":["instead"]},{"Key":"`chars/1` instead","Fragments":["inside"]},{"Key":"instead inside","Fragments":["the"]},{"Key":" ```\u0026```","Fragments":["isn't"]},{"Key":"```\u0026``` isn't","Fragments":["a"]},{"Key":"syntax. It's","Fragments":["a"]},{"Key":"a *function","Fragments":["capture*"]},{"Key":"*function capture*","Fragments":["syntax."]},{"Key":"capture* syntax.","Fragments":["Think"]},{"Key":"syntax. Think","Fragments":["of"]},{"Key":"function, rather","Fragments":["than","than"]},{"Key":"than define","Fragments":["anonymous"]},{"Key":"define anonymous","Fragments":["functions."]},{"Key":"said, it","Fragments":["*can*","avoids","would"]},{"Key":"it *can*","Fragments":["be"]},{"Key":"*can* be","Fragments":["used"]},{"Key":"to wack","Fragments":["together"]},{"Key":"wack together","Fragments":["anonymous"]},{"Key":"together anonymous","Fragments":["functions,"]},{"Key":"anonymous functions,","Fragments":["but","rather"]},{"Key":"but strictly","Fragments":["speaking","speaking"]},{"Key":"strictly speaking","Fragments":["it","it's"]},{"Key":"speaking it","Fragments":["refers"]},{"Key":"it refers","Fragments":["to"]},{"Key":"than defines","Fragments":["one."]},{"Key":"def inc(num)","Fragments":["do"]},{"Key":" num","Fragments":["+"]},{"Key":"num +","Fragments":["1","1"]},{"Key":"in in","Fragments":["your"]},{"Key":"your update","Fragments":["call"]},{"Key":"update call","Fragments":["like"]},{"Key":"call like","Fragments":["this:"]},{"Key":" HashDict.update(counter,","Fragments":["word,"]},{"Key":"HashDict.update(counter, word,","Fragments":["1,"]},{"Key":"extra module.","Fragments":["Bob"]},{"Key":"module. Bob","Fragments":["doesn't"]},{"Key":"Bob doesn't","Fragments":["need"]},{"Key":"doesn't need","Fragments":["to","to","the","a","to"]},{"Key":"to care","Fragments":["what"]},{"Key":"care what","Fragments":["kind","the"]},{"Key":"what kind","Fragments":["of","of"]},{"Key":"is coming","Fragments":["his"]},{"Key":"coming his","Fragments":["way,"]},{"Key":"his way,","Fragments":["just"]},{"Key":"way, just","Fragments":["how"]},{"Key":"just how","Fragments":["to"]},{"Key":"respond to","Fragments":["it.","those"]},{"Key":"to it.","Fragments":["Maybe",";)","Dict","`Enumerable.reduce`",":)"]},{"Key":"it. Maybe","Fragments":["```Greeting```"]},{"Key":"Maybe ```Greeting```","Fragments":["isn't"]},{"Key":"```Greeting``` isn't","Fragments":["the"]},{"Key":"right name","Fragments":["though."]},{"Key":"name though.","Fragments":["It"]},{"Key":"though. It","Fragments":["implies","reads","only"]},{"Key":"It implies","Fragments":["something"]},{"Key":"implies something","Fragments":["specific"]},{"Key":"something specific","Fragments":["about"]},{"Key":"specific about","Fragments":["what"]},{"Key":"communication is","Fragments":["happening."]},{"Key":"Nice. I","Fragments":["like","like","feel","like"]},{"Key":"short methods","Fragments":["that"]},{"Key":"that each","Fragments":["do"]},{"Key":"each do","Fragments":["one"]},{"Key":"do one","Fragments":["thing.","more"]},{"Key":"one thing.","Fragments":["I"]},{"Key":"thing. I","Fragments":["am"]},{"Key":"am still","Fragments":["not","figuring","figuring","a","a","a"]},{"Key":"name `replace_when_is_thymidine`.","Fragments":["It"]},{"Key":"`replace_when_is_thymidine`. It","Fragments":["seems"]},{"Key":"seems about","Fragments":["the"]},{"Key":"as `replace_thymidine`,","Fragments":["which"]},{"Key":"`replace_thymidine`, which","Fragments":["is"]},{"Key":"is ok,","Fragments":["it"]},{"Key":"ok, it","Fragments":["just"]},{"Key":"first case.","Fragments":["Coming"]},{"Key":"case. Coming","Fragments":["up"]},{"Key":"Coming up","Fragments":["with"]},{"Key":"good name","Fragments":["for","for","for"]},{"Key":"is hard.","Fragments":["There's"]},{"Key":"hard. There's","Fragments":["probably"]},{"Key":"There's probably","Fragments":["a"]},{"Key":"a term","Fragments":["in"]},{"Key":"term in","Fragments":["the","programming."]},{"Key":"of biology","Fragments":["or"]},{"Key":"biology or","Fragments":["whatever"]},{"Key":"or whatever","Fragments":["for"]},{"Key":"whatever for","Fragments":["what"]},{"Key":"for what","Fragments":["this","@addie","it's","is","I"]},{"Key":"this is,","Fragments":["but"]},{"Key":"is, but","Fragments":["I","the","I"]},{"Key":" Anyway,","Fragments":["I","I","I'm"]},{"Key":"good. :","Fragments":[")"]},{"Key":"nice. Super","Fragments":["easy"]},{"Key":"Super easy","Fragments":["to"]},{"Key":"read. You","Fragments":["don't"]},{"Key":"the semi-colons","Fragments":["at"]},{"Key":"semi-colons at","Fragments":["the"]},{"Key":"of lines","Fragments":["8","of"]},{"Key":"lines 8","Fragments":["and"]},{"Key":"8 and","Fragments":["9,","10"]},{"Key":"and 9,","Fragments":["but"]},{"Key":"9, but","Fragments":["other"]},{"Key":"that, I","Fragments":["like","think","could","noticed","tried"]},{"Key":" Yep","Fragments":[","]},{"Key":"Yep ,","Fragments":["It"]},{"Key":", It","Fragments":["is"]},{"Key":"name because","Fragments":["the"]},{"Key":"things .But","Fragments":["for"]},{"Key":".But for","Fragments":["this"]},{"Key":"sort solution","Fragments":["I"]},{"Key":"solution I","Fragments":["think","like"]},{"Key":"very hard","Fragments":["put","to"]},{"Key":"hard put","Fragments":["one.Perhaps"]},{"Key":"put one.Perhaps","Fragments":["with"]},{"Key":"one.Perhaps with","Fragments":["another"]},{"Key":"another design","Fragments":["this"]},{"Key":"design this","Fragments":["problem"]},{"Key":"problem doesn't","Fragments":["appear.Anyway"]},{"Key":"doesn't appear.Anyway","Fragments":["I'm"]},{"Key":"appear.Anyway I'm","Fragments":["happy"]},{"Key":"for comments","Fragments":["@eleazar","@ross"]},{"Key":"need downcase","Fragments":["in"]},{"Key":"the pointer,","Fragments":["new"]},{"Key":"pointer, new","Fragments":["version"]},{"Key":"tests without","Fragments":["it,","copying"]},{"Key":"without it,","Fragments":["but"]},{"Key":"be incorrect.","Fragments":["E.g."]},{"Key":"incorrect. E.g.","Fragments":["tan"]},{"Key":"E.g. tan","Fragments":["is"]},{"Key":"tan is","Fragments":["not"]},{"Key":"pulled downcase","Fragments":["across"]},{"Key":"downcase across","Fragments":["to"]},{"Key":"across to","Fragments":["the"]},{"Key":"the normalisation","Fragments":["function"]},{"Key":"normalisation function","Fragments":["but"]},{"Key":"function but","Fragments":["now"]},{"Key":"now of","Fragments":["course"]},{"Key":"have duplicate","Fragments":["downcasing"]},{"Key":"duplicate downcasing","Fragments":["methods,"]},{"Key":"downcasing methods,","Fragments":["hmm."]},{"Key":" `:lists.append`","Fragments":["is"]},{"Key":"`:lists.append` is","Fragments":["a"]},{"Key":"terribly inefficient","Fragments":["thing"]},{"Key":"inefficient thing","Fragments":["to"]},{"Key":"do, it","Fragments":["is"]},{"Key":"is O(n),","Fragments":["since"]},{"Key":"O(n), since","Fragments":["lists"]},{"Key":"since lists","Fragments":["are"]},{"Key":"are immutable","Fragments":["linked"]},{"Key":"immutable linked","Fragments":["lists."]},{"Key":"linked lists.","Fragments":["You"]},{"Key":"lists. You","Fragments":["should"]},{"Key":"just prepend","Fragments":["it"]},{"Key":"prepend it","Fragments":["and"]},{"Key":"and reverse","Fragments":["the","it","with"]},{"Key":"reverse the","Fragments":["output,","two","results"]},{"Key":"the output,","Fragments":["or","having"]},{"Key":"output, or","Fragments":["use"]},{"Key":"use foldr","Fragments":["instead"]},{"Key":"foldr instead","Fragments":["(which"]},{"Key":"instead (which","Fragments":["basically"]},{"Key":"(which basically","Fragments":["does"]},{"Key":"basically does","Fragments":["just"]},{"Key":"does just","Fragments":["that)."]},{"Key":"just that).","Fragments":["Better"]},{"Key":"that). Better","Fragments":["still,"]},{"Key":"Better still,","Fragments":["use"]},{"Key":"still, use","Fragments":["a"]},{"Key":"a filter,","Fragments":["which"]},{"Key":"filter, which","Fragments":["is"]},{"Key":"a higher","Fragments":["level","level","difficulty","order"]},{"Key":"higher level","Fragments":["version","function","functions"]},{"Key":"level version","Fragments":["of"]},{"Key":"the Regex.replace","Fragments":["and"]},{"Key":"Regex.replace and","Fragments":["pass"]},{"Key":"pass an","Fragments":["appropriate","empty"]},{"Key":"appropriate regex","Fragments":["to"]},{"Key":"regex to","Fragments":["String.split","test","properly","parse","me,","make","accomplish"]},{"Key":"to String.split","Fragments":["to"]},{"Key":"String.split to","Fragments":["make"]},{"Key":"should also","Fragments":["consider","be"]},{"Key":"using HashDict.update","Fragments":["in"]},{"Key":"HashDict.update in","Fragments":["your"]},{"Key":"Ok ,","Fragments":["for","thanks"]},{"Key":"that reason","Fragments":["I"]},{"Key":"I mentioned","Fragments":["that","on","in"]},{"Key":"mentioned that","Fragments":["you"]},{"Key":"two filters,","Fragments":["one"]},{"Key":"filters, one","Fragments":["for"]},{"Key":"for is","Fragments":["anagram"]},{"Key":"is anagram","Fragments":["that"]},{"Key":"anagram that","Fragments":["returns"]},{"Key":"returns you","Fragments":["the","a"]},{"Key":"the anagrams","Fragments":["normalized","and","from"]},{"Key":"anagrams normalized","Fragments":["and"]},{"Key":"normalized and","Fragments":["the"]},{"Key":"other that","Fragments":["check"]},{"Key":"doesn't work","Fragments":["because","in","with","on","on","without","at","here"]},{"Key":"work because","Fragments":["filter","of","you","the"]},{"Key":"because filter","Fragments":["doesn't"]},{"Key":"filter doesn't","Fragments":["modify"]},{"Key":"doesn't modify","Fragments":["it's"]},{"Key":"modify it's","Fragments":["output."]},{"Key":" (I","Fragments":["did"]},{"Key":"(I did","Fragments":["try"]},{"Key":"did try","Fragments":["it"]},{"Key":"you suggested,","Fragments":["a"]},{"Key":"suggested, a","Fragments":["test"]},{"Key":"are right,","Fragments":["It","didn't"]},{"Key":"right, It","Fragments":["should"]},{"Key":"It should","Fragments":["be"]},{"Key":"be I","Fragments":["have"]},{"Key":"have old","Fragments":["tests"]},{"Key":"exercise. Your","Fragments":["code"]},{"Key":"Your code","Fragments":["is","looks","performs","doesn't","additionally"]},{"Key":"an odd","Fragments":["(to"]},{"Key":"odd (to","Fragments":["me)"]},{"Key":"(to me)","Fragments":["error:"]},{"Key":"me) error:","Fragments":["`"]},{"Key":"error: `","Fragments":["**"]},{"Key":"` **","Fragments":["(FunctionClauseError)"]},{"Key":"in DNA.\"-hamming_distance/2-fun-0-\"/1`","Fragments":["-"]},{"Key":"DNA.\"-hamming_distance/2-fun-0-\"/1` -","Fragments":["can"]},{"Key":"can any","Fragments":["kind"]},{"Key":"any kind","Fragments":["reader"]},{"Key":"kind reader","Fragments":["interpret"]},{"Key":"reader interpret","Fragments":["that"]},{"Key":"interpret that","Fragments":["for"]},{"Key":"That looks","Fragments":["very","very"]},{"Key":"very useful!","Fragments":["How"]},{"Key":"useful! How","Fragments":["do"]},{"Key":"do I","Fragments":["got","care","go"]},{"Key":"got about","Fragments":["finding"]},{"Key":"about finding","Fragments":["these"]},{"Key":"finding these","Fragments":["things?"]},{"Key":"these things?","Fragments":["(The"]},{"Key":"things? (The","Fragments":["answer"]},{"Key":"(The answer","Fragments":["may"]},{"Key":"answer may","Fragments":["well"]},{"Key":"well be","Fragments":["\"by","though)."]},{"Key":"be \"by","Fragments":["stopping"]},{"Key":"\"by stopping","Fragments":["being"]},{"Key":"stopping being","Fragments":["lazy"]},{"Key":"being lazy","Fragments":["and"]},{"Key":"lazy and","Fragments":["actually","efficient"]},{"Key":"and actually","Fragments":["reading"]},{"Key":"actually reading","Fragments":["through"]},{"Key":"core language","Fragments":["specifications\"...)"]},{"Key":"default syntax","Fragments":["you"]},{"Key":"Try using","Fragments":["`List.zip/1`","`List.zip/1`","a","`List.zip/1`","case","a"]},{"Key":"using `List.zip/1`","Fragments":["instead"]},{"Key":"this implementation,","Fragments":["you're","sorting"]},{"Key":"implementation, you're","Fragments":["lowercasing"]},{"Key":"you're lowercasing","Fragments":["and"]},{"Key":"lowercasing and","Fragments":["sorting","sorting"]},{"Key":"sorting `word`","Fragments":["n"]},{"Key":"`word` n","Fragments":["times.","times"]},{"Key":"n times.","Fragments":["Perhaps"]},{"Key":"times. Perhaps","Fragments":["you"]},{"Key":"doesn't repeat","Fragments":["so"]},{"Key":"repeat so","Fragments":["much"]},{"Key":"regex in","Fragments":["your","split,","`being_ignored?`","pre","their","`only_letters?`","the","a"]},{"Key":"your call","Fragments":["to"]},{"Key":"to `String.split`","Fragments":["instead"]},{"Key":"`String.split` instead","Fragments":["of"]},{"Key":"point, although","Fragments":["it"]},{"Key":"although it","Fragments":["seems","took"]},{"Key":"that `String.split/1`","Fragments":["obviates"]},{"Key":"`String.split/1` obviates","Fragments":["the"]},{"Key":"obviates the","Fragments":["need"]},{"Key":"need even","Fragments":["for"]},{"Key":"even for","Fragments":["that","huge","huge","huge","huge","huge","huge","huge"]},{"Key":"and just","Fragments":["does","calling","do","check","do","see","put","created"]},{"Key":"just does","Fragments":["the","a"]},{"Key":"thing for","Fragments":["this","function","lists."]},{"Key":" List.zip","Fragments":["to","_is_"]},{"Key":"List.zip to","Fragments":["avoid"]},{"Key":"avoid unpleasantness","Fragments":["involving"]},{"Key":"unpleasantness involving","Fragments":["padding"]},{"Key":"involving padding","Fragments":["with"]},{"Key":"padding with","Fragments":["nils."]},{"Key":"use |\u003e","Fragments":["rather"]},{"Key":"|\u003e rather","Fragments":["to"]},{"Key":"rather to","Fragments":["avoid","test"]},{"Key":"avoid having","Fragments":["to","to","to","`compare`"]},{"Key":"a zipped","Fragments":["variable"]},{"Key":"zipped variable","Fragments":["but"]},{"Key":"variable but","Fragments":["I"]},{"Key":"kept getting","Fragments":["the","compilation"]},{"Key":"the error","Fragments":["**","message","you","and","detection","detection","detection","cases","messages","by"]},{"Key":"error **","Fragments":["(FunctionClauseError)"]},{"Key":"in DNA.\"-hamming_distance/2-fun-0-\"/1","Fragments":["which"]},{"Key":"DNA.\"-hamming_distance/2-fun-0-\"/1 which","Fragments":["I"]},{"Key":"haven't successfully","Fragments":["parsed"]},{"Key":"successfully parsed","Fragments":["yet..."]},{"Key":"Was able","Fragments":["to"]},{"Key":"one-liner by","Fragments":["enclosing"]},{"Key":"by enclosing","Fragments":["the"]},{"Key":"enclosing the","Fragments":["List.zip"]},{"Key":"the List.zip","Fragments":["part"]},{"Key":"List.zip part","Fragments":["in"]},{"Key":"part in","Fragments":["parentheses","why","the"]},{"Key":"in parentheses","Fragments":["to","when","for"]},{"Key":"parentheses to","Fragments":["avoid","make"]},{"Key":"message I","Fragments":["was"]},{"Key":"getting (iterations","Fragments":["passim)."]},{"Key":"(iterations passim).","Fragments":["Why"]},{"Key":"passim). Why","Fragments":["are"]},{"Key":"Why are","Fragments":["the","you","you"]},{"Key":"the parentheses","Fragments":["necessary?","omitted","around","around","are"]},{"Key":"found it","Fragments":["just"]},{"Key":"just by","Fragments":["clicking"]},{"Key":"by clicking","Fragments":["around"]},{"Key":"clicking around","Fragments":["in"]},{"Key":"the docs,","Fragments":["I","but"]},{"Key":"docs, I","Fragments":["figured"]},{"Key":"version would","Fragments":["exist"]},{"Key":"would exist","Fragments":["because"]},{"Key":"exist because","Fragments":["that's"]},{"Key":"because that's","Fragments":["how","unambiguous,"]},{"Key":"that's how","Fragments":["it","it","people","I","you"]},{"Key":"it behaves","Fragments":["in"]},{"Key":"behaves in","Fragments":["Erlang's"]},{"Key":"in Erlang's","Fragments":["lists"]},{"Key":"Erlang's lists","Fragments":["module."]},{"Key":"to decipher","Fragments":["that"]},{"Key":"decipher that","Fragments":["error"]},{"Key":"that error","Fragments":["message"]},{"Key":"message without","Fragments":["the"]},{"Key":"elixir will","Fragments":["consistently"]},{"Key":"will consistently","Fragments":["disappoint"]},{"Key":"consistently disappoint","Fragments":["me"]},{"Key":"disappoint me","Fragments":["if"]},{"Key":"arguments to","Fragments":["functions,","`reduce_with/3`","the"]},{"Key":"to functions,","Fragments":["did"]},{"Key":"functions, did","Fragments":["you"]},{"Key":"try writing","Fragments":["it"]},{"Key":"writing it","Fragments":["with","out"]},{"Key":"My guess","Fragments":["is"]},{"Key":"Elixir's grammar","Fragments":["isn't"]},{"Key":"grammar isn't","Fragments":["really"]},{"Key":"really specified","Fragments":["anywhere"]},{"Key":"specified anywhere","Fragments":["so"]},{"Key":"anywhere so","Fragments":["when"]},{"Key":"so when","Fragments":["they"]},{"Key":"make changes","Fragments":["it's"]},{"Key":"changes it's","Fragments":["hard"]},{"Key":"what kinds","Fragments":["of","of","of"]},{"Key":"kinds of","Fragments":["problems/ambiguities","things","functions","records,","dictionaries,","collections,","dictionaries,","dictionaries","dictionaries,","dictionaries","sentences","sentences"]},{"Key":"of problems/ambiguities","Fragments":["they're"]},{"Key":"problems/ambiguities they're","Fragments":["causing."]},{"Key":"they're causing.","Fragments":["I"]},{"Key":"causing. I","Fragments":["always"]},{"Key":"around function","Fragments":["arguments","arguments","arguments.","parameters","parameters."]},{"Key":"function arguments","Fragments":["because","is","so"]},{"Key":"arguments because","Fragments":["of"]},{"Key":"of this,","Fragments":["and"]},{"Key":"this, and","Fragments":["it"]},{"Key":"work a","Fragments":["lot"]},{"Key":"better that","Fragments":["way."]},{"Key":"Ah, cool!","Fragments":["Thanks"]},{"Key":"cool! Thanks","Fragments":["for"]},{"Key":"feedback, @delpha.","Fragments":["I"]},{"Key":"@delpha. I","Fragments":["didn't"]},{"Key":"realize the","Fragments":["`List`"]},{"Key":"`List` module","Fragments":["had","or"]},{"Key":"module had","Fragments":["a"]},{"Key":"a `zip`","Fragments":["function"]},{"Key":"`zip` function","Fragments":["as"]},{"Key":"well, and","Fragments":["it","frankly,"]},{"Key":"it uses","Fragments":["the"]},{"Key":"the shortest","Fragments":["common"]},{"Key":"shortest common","Fragments":["length."]},{"Key":"common length.","Fragments":["Sweet."]},{"Key":"length. Sweet.","Fragments":["Submitting"]},{"Key":"Sweet. Submitting","Fragments":["a"]},{"Key":"Submitting a","Fragments":["new","new","new"]},{"Key":"\u0026 syntax","Fragments":["to","for","for","but"]},{"Key":"more sane","Fragments":["and"]},{"Key":"sane and","Fragments":["predictable"]},{"Key":"and predictable","Fragments":["when"]},{"Key":"predictable when","Fragments":["it's"]},{"Key":"it's explicitly","Fragments":["delimited,"]},{"Key":"explicitly delimited,","Fragments":["like"]},{"Key":"delimited, like","Fragments":["\u0026(\u00261"]},{"Key":"like \u0026(\u00261","Fragments":["+"]},{"Key":"\u0026(\u00261 +","Fragments":["1).","\u00262))`","1)","\u00262))`","1))","1))`.","1)","1))`"]},{"Key":"+ 1).","Fragments":["In"]},{"Key":"1). In","Fragments":["general"]},{"Key":"that elixir's","Fragments":["grammar"]},{"Key":"elixir's grammar","Fragments":["seems"]},{"Key":"grammar seems","Fragments":["to"]},{"Key":"have ambiguities","Fragments":["when"]},{"Key":"ambiguities when","Fragments":["you"]},{"Key":"meant was:","Fragments":["use"]},{"Key":"was: use","Fragments":["a"]},{"Key":"in split,","Fragments":["and"]},{"Key":"split, and","Fragments":["no"]},{"Key":"and no","Fragments":["regex","longer","longer","so","lower","use"]},{"Key":"no regex","Fragments":["at"]},{"Key":" seejee","Fragments":["-"]},{"Key":"seejee -","Fragments":["you"]},{"Key":"use `Kernel.to_char_list`","Fragments":["(or"]},{"Key":"`Kernel.to_char_list` (or","Fragments":["just"]},{"Key":"(or just","Fragments":["`to_char_list`)","one,"]},{"Key":"just `to_char_list`)","Fragments":["to"]},{"Key":"`to_char_list`) to","Fragments":["convert"]},{"Key":"convert a","Fragments":["bitstring","float","string","string"]},{"Key":"a bitstring","Fragments":["into"]},{"Key":"bitstring into","Fragments":["a"]},{"Key":"of chars.","Fragments":["Not"]},{"Key":"chars. Not","Fragments":["sure"]},{"Key":"it gains","Fragments":["you"]},{"Key":"gains you","Fragments":["anything","much"]},{"Key":"feedback. Just","Fragments":["curious,"]},{"Key":"Just curious,","Fragments":["does","@marjolaine,","but"]},{"Key":"curious, does","Fragments":["the"]},{"Key":"specifying the","Fragments":["function"]},{"Key":"its arity","Fragments":["work"]},{"Key":"arity work","Fragments":["for"]},{"Key":"doing inline","Fragments":["functions"]},{"Key":"inline functions","Fragments":["that","wherever"]},{"Key":"that take","Fragments":["more"]},{"Key":"take more","Fragments":["than","than"]},{"Key":"one parameter?","Fragments":["I"]},{"Key":"parameter? I","Fragments":["mean,"]},{"Key":"I mean,","Fragments":["if"]},{"Key":"mean, if","Fragments":["mutation"]},{"Key":"if mutation","Fragments":["took"]},{"Key":"mutation took","Fragments":["two"]},{"Key":"took two","Fragments":["params,"]},{"Key":"two params,","Fragments":["would"]},{"Key":"params, would","Fragments":["saying"]},{"Key":"would saying","Fragments":["`\u0026mutation?/2`"]},{"Key":"saying `\u0026mutation?/2`","Fragments":["work?"]},{"Key":"`\u0026mutation?/2` work?","Fragments":["If"]},{"Key":"work? If","Fragments":["so,","a"]},{"Key":"so, yeah,","Fragments":["I"]},{"Key":"might like","Fragments":["that"]},{"Key":"syntax better","Fragments":["too."]},{"Key":"Yup, that's","Fragments":["how","the","the","how"]},{"Key":"it works.","Fragments":["Erlang","Would","I"]},{"Key":"works. Erlang","Fragments":["works"]},{"Key":"Erlang works","Fragments":["like"]},{"Key":"works like","Fragments":["that","this"]},{"Key":"cool. I'll","Fragments":["do"]},{"Key":"more revision","Fragments":["with"]},{"Key":"like inlining","Fragments":["the"]},{"Key":"the `homologous_pairs`","Fragments":["and"]},{"Key":"`homologous_pairs` and","Fragments":["`mutation?`"]},{"Key":"and `mutation?`","Fragments":["functions."]},{"Key":"`mutation?` functions.","Fragments":["I"]},{"Key":"might keep","Fragments":["one"]},{"Key":"keep one","Fragments":["or"]},{"Key":"or both","Fragments":["of"]},{"Key":"them, though,","Fragments":["just"]},{"Key":"though, just","Fragments":["because","be"]},{"Key":"adds some","Fragments":["self-documentation"]},{"Key":"some self-documentation","Fragments":["to"]},{"Key":"self-documentation to","Fragments":["what's"]},{"Key":"to what's","Fragments":["going","going"]},{"Key":"what's going","Fragments":["on.","on.","on.","on","on.","on","on"]},{"Key":" `Enum.count(List.zip([as,","Fragments":["bs]),"]},{"Key":"`Enum.count(List.zip([as, bs]),","Fragments":["fn"]},{"Key":"bs]), fn","Fragments":["({a,"]},{"Key":"fn ({a,","Fragments":["b})"]},{"Key":"({a, b})","Fragments":["-\u003e"]},{"Key":"b}) -\u003e","Fragments":["a"]},{"Key":"-\u003e a","Fragments":["!=","+","!="]},{"Key":"a !=","Fragments":["b","b"]},{"Key":"!= b","Fragments":["end)`","end)`,"]},{"Key":"the `mutation?`","Fragments":["method"]},{"Key":"`mutation?` method","Fragments":["there"]},{"Key":"method there","Fragments":["because"]},{"Key":"gives the","Fragments":["operation","reader"]},{"Key":"operation a","Fragments":["nice"]},{"Key":"nice domain","Fragments":["term"]},{"Key":"domain term","Fragments":["and"]},{"Key":"term and","Fragments":["makes"]},{"Key":"read nicely.","Fragments":["Thanks"]},{"Key":"nicely. Thanks","Fragments":["for"]},{"Key":"I see.","Fragments":["Removes","Thanks!"]},{"Key":"see. Removes","Fragments":["the"]},{"Key":"Removes the","Fragments":["need"]},{"Key":"for `normalize`","Fragments":["altogether,"]},{"Key":"`normalize` altogether,","Fragments":["as"]},{"Key":"altogether, as","Fragments":["it"]},{"Key":"be left","Fragments":["being"]},{"Key":"left being","Fragments":["just"]},{"Key":"being just","Fragments":["a"]},{"Key":"a proxy","Fragments":["to"]},{"Key":"proxy to","Fragments":["`downcase`."]},{"Key":"to `downcase`.","Fragments":["Makes"]},{"Key":"`downcase`. Makes","Fragments":["sense"]},{"Key":"Makes sense","Fragments":["to"]},{"Key":" New","Fragments":["version","version","to"]},{"Key":"New version","Fragments":["up.","coming","using"]},{"Key":"with @elijah.","Fragments":["```\u0026(\u00261"]},{"Key":"@elijah. ```\u0026(\u00261","Fragments":["+"]},{"Key":"```\u0026(\u00261 +","Fragments":["1)```"]},{"Key":"+ 1)```","Fragments":["is"]},{"Key":"1)``` is","Fragments":["how"]},{"Key":"that construct","Fragments":["should","as"]},{"Key":"construct should","Fragments":["be"]},{"Key":"way, if","Fragments":["you"]},{"Key":"you notice","Fragments":["such","the"]},{"Key":"notice such","Fragments":["ambiguities"]},{"Key":"such ambiguities","Fragments":["and"]},{"Key":"ambiguities and","Fragments":["can"]},{"Key":"and can","Fragments":["demonstrate","pass","just"]},{"Key":"can demonstrate","Fragments":["eccentricities"]},{"Key":"demonstrate eccentricities","Fragments":["they"]},{"Key":"eccentricities they","Fragments":["cause,"]},{"Key":"they cause,","Fragments":["the"]},{"Key":"cause, the","Fragments":["language"]},{"Key":"language *is*","Fragments":["still"]},{"Key":"*is* still","Fragments":["pre"]},{"Key":"still pre","Fragments":["1.0,"]},{"Key":"pre 1.0,","Fragments":["and"]},{"Key":"1.0, and","Fragments":["I'm"]},{"Key":"sure Jose","Fragments":["et"]},{"Key":"Jose et","Fragments":["al"]},{"Key":"et al","Fragments":["would"]},{"Key":"al would","Fragments":["love"]},{"Key":"love pull","Fragments":["requests/issues"]},{"Key":"to unlock","Fragments":["the"]},{"Key":"unlock the","Fragments":["next","next"]},{"Key":"next one","Fragments":["now"]},{"Key":"one now","Fragments":[";)"]},{"Key":"am certain","Fragments":["there"]},{"Key":"certain there","Fragments":["are"]},{"Key":"the natural","Fragments":["idioms"]},{"Key":"natural idioms","Fragments":["of"]},{"Key":"idioms of","Fragments":["the"]},{"Key":"to stop","Fragments":["combing","nitpicking","the"]},{"Key":"stop combing","Fragments":["through"]},{"Key":"combing through","Fragments":["the"]},{"Key":"let the","Fragments":["Exercism’s","\"completed\"","elegance"]},{"Key":"the Exercism’s","Fragments":["community"]},{"Key":"Exercism’s community","Fragments":["point"]},{"Key":"community point","Fragments":["me"]},{"Key":"point me","Fragments":["in","in","to"]},{"Key":"me in","Fragments":["the","order","my","the","the","my","that","small"]},{"Key":"Nice ,","Fragments":["but"]},{"Key":"put first","Fragments":["the"]},{"Key":"first the","Fragments":["filter"]},{"Key":"filter with","Fragments":["`contains_all_chars?`","the"]},{"Key":"with `contains_all_chars?`","Fragments":["you"]},{"Key":"`contains_all_chars?` you","Fragments":["don´t"]},{"Key":"to normalize","Fragments":["the","the"]},{"Key":"No that","Fragments":["suffers"]},{"Key":"that suffers","Fragments":["the"]},{"Key":"suffers the","Fragments":["same"]},{"Key":"same problem,","Fragments":["e.g."]},{"Key":"e.g. it","Fragments":["thinks"]},{"Key":"it thinks","Fragments":["Banana"]},{"Key":"thinks Banana","Fragments":["is"]},{"Key":"Banana is","Fragments":["an"]},{"Key":"Not worth,","Fragments":["uploaded"]},{"Key":"worth, uploaded","Fragments":["by"]},{"Key":"uploaded by","Fragments":["mistake"]},{"Key":"the ruby","Fragments":["convention","version:","community","convention,"]},{"Key":"ruby convention","Fragments":["of"]},{"Key":"naming predicates","Fragments":["without"]},{"Key":"predicates without","Fragments":["the"]},{"Key":"prefix seeing","Fragments":["as"]},{"Key":"seeing as","Fragments":["`?`"]},{"Key":"as `?`","Fragments":["are"]},{"Key":"`?` are","Fragments":["legal"]},{"Key":"are legal","Fragments":["in"]},{"Key":"legal in","Fragments":["method"]},{"Key":"method names.","Fragments":["e.g."]},{"Key":"names. e.g.","Fragments":["`shout?`"]},{"Key":"e.g. `shout?`","Fragments":["rather"]},{"Key":"`shout?` rather","Fragments":["than"]},{"Key":" Aside","Fragments":["from","from"]},{"Key":"Aside from","Fragments":["that,","use","line"]},{"Key":"from that,","Fragments":["looks"]},{"Key":"No ,","Fragments":["if","in"]},{"Key":", if","Fragments":["you","you"]},{"Key":"match(word, potential_anagrams)","Fragments":["do","do"]},{"Key":" |\u003e","Fragments":["Enum.filter(","Enum.filter(","Enum.filter(","Enum.filter(","Enum.map(\u0026(String.downcase(\u00261)))","Enum.reject(\u0026(target","Enum.filter(\u0026(is_anagram_match?(target_letters,","String.to_char_list!","Enum.reduce(0,","Enum.sort(\u0026(elem(\u00261,","Enum.map(\u0026(elem(\u00261,","list_to_tuple()","String.to_char_list!()","Stream.map(\u0026char_value/1)","Enum.reduce(0,","zip(to)","take(count(to))","count(fn","reverse","Regex.split(%r{\\W+})","Enum.reject(\u0026(\u00261","Enum.reduce(HashDict.new,","count(HashDict.new)","count_single_word(word_counter)","count(remaining_words)","Enum.any?(\u0026(\u00261","String.length()","String.replace(~r/[^\\p{L}\\d-]/u,","String.downcase","String.split","count_words(%{})"]},{"Key":"|\u003e Enum.filter(","Fragments":["\u0026(contains_all_chars?","\u0026(are_not_identical?","\u0026(contains_all_chars?","\u0026(are_not_identical?"]},{"Key":"Enum.filter( \u0026(contains_all_chars?","Fragments":["word,","word,"]},{"Key":"\u0026(contains_all_chars? word,","Fragments":["\u00261)","\u00261)"]},{"Key":"word, \u00261)","Fragments":[")",")",")",")"]},{"Key":"Enum.filter( \u0026(are_not_identical?","Fragments":["word,","word,"]},{"Key":"\u0026(are_not_identical? word,","Fragments":["\u00261)","\u00261)"]},{"Key":", is","Fragments":["this","the","ugly"]},{"Key":"have filter","Fragments":["with"]},{"Key":"word normalize","Fragments":["first"]},{"Key":"normalize first","Fragments":[","]},{"Key":"first ,","Fragments":["and"]},{"Key":", and","Fragments":["then","moved"]},{"Key":"defp are_not_identical?(word_a,","Fragments":["word_b)"]},{"Key":"are_not_identical?(word_a, word_b)","Fragments":["do"]},{"Key":" word_a","Fragments":["!="]},{"Key":"word_a !=","Fragments":["word_b"]},{"Key":" Hadn't","Fragments":["considered"]},{"Key":"Hadn't considered","Fragments":["the"]},{"Key":"considered the","Fragments":["list"]},{"Key":"comprehension ...","Fragments":["looks"]},{"Key":"... looks","Fragments":["great!"]},{"Key":" Added","Fragments":["some","two","more","some"]},{"Key":"Added some","Fragments":["documentation","small"]},{"Key":"some documentation","Fragments":["and","in"]},{"Key":"and re-organized","Fragments":["based"]},{"Key":"re-organized based","Fragments":["on"]},{"Key":" `\u0026(not_same?/1)`","Fragments":["is"]},{"Key":"`\u0026(not_same?/1)` is","Fragments":["more"]},{"Key":"more commonly","Fragments":["written"]},{"Key":"commonly written","Fragments":["as"]},{"Key":"still sort","Fragments":["`word`"]},{"Key":"sort `word`","Fragments":["n"]},{"Key":"n times","Fragments":["(which"]},{"Key":"times (which","Fragments":["is"]},{"Key":"more expensive","Fragments":["than","than"]},{"Key":"expensive than","Fragments":["downcase)","it"]},{"Key":"downcasing of","Fragments":["the","the","the"]},{"Key":"list beforehand","Fragments":["so"]},{"Key":"beforehand so","Fragments":["I"]},{"Key":"downcase them","Fragments":["all"]},{"Key":"them all","Fragments":["twice,","the","by","..."]},{"Key":"all twice,","Fragments":["but"]},{"Key":"twice, but","Fragments":["the"]},{"Key":"tests expect","Fragments":["the","infinite"]},{"Key":"expect the","Fragments":["list","atom","song"]},{"Key":"in their","Fragments":["original","examples,"]},{"Key":"their original","Fragments":["state.","casing."]},{"Key":"was my","Fragments":["first","version"]},{"Key":"first instinct","Fragments":["as"]},{"Key":"instinct as","Fragments":["I'm"]},{"Key":"as I'm","Fragments":["not","still","going","definitely"]},{"Key":"not much","Fragments":["of","else","shorter","need","surprised","for"]},{"Key":"of `is_`","Fragments":["type"]},{"Key":"`is_` type","Fragments":["predicates"]},{"Key":"type predicates","Fragments":["(reminds"]},{"Key":"predicates (reminds","Fragments":["me"]},{"Key":"(reminds me","Fragments":["too"]},{"Key":"me too","Fragments":["much"]},{"Key":"of Java,","Fragments":["a"]},{"Key":"Java, a","Fragments":["painful"]},{"Key":"a painful","Fragments":["memory),"]},{"Key":"painful memory),","Fragments":["but"]},{"Key":"memory), but","Fragments":["from"]},{"Key":"from what","Fragments":["I've","it","the"]},{"Key":"seen of","Fragments":["Elixir"]},{"Key":"used as","Fragments":["guard","constants):","`acc`","an","`~r/[^-[:lower:][:digit:]]/`","the"]},{"Key":"as guard","Fragments":["clauses","clauses,"]},{"Key":"clauses seem","Fragments":["to"]},{"Key":"named things","Fragments":["like"]},{"Key":"things like","Fragments":["`is_list`,","syntax,","that","`+`)","`Enum.map`","counting","`\u0026(\u00261+1)`","`Enum.map`","precedence.","that,","`\u0026(\u00261","the"]},{"Key":"like `is_list`,","Fragments":["as"]},{"Key":"`is_list`, as","Fragments":["in"]},{"Key":"as in","Fragments":["Erlang.","English).","teenager...","many","perfectly","those","the","it's"]},{"Key":"in Erlang.","Fragments":["So","Erlang","There"]},{"Key":"Erlang. So","Fragments":["I"]},{"Key":"that reason.","Fragments":["But"]},{"Key":"reason. But","Fragments":["as"]},{"Key":"But as","Fragments":["I","I"]},{"Key":"I say","Fragments":["I","that"]},{"Key":"convention so","Fragments":["I"]},{"Key":"might change","Fragments":["it."]},{"Key":"change it.","Fragments":["Why"]},{"Key":"it. Why","Fragments":["not."]},{"Key":"like `silence?`,","Fragments":["`shout?`"]},{"Key":"`silence?`, `shout?`","Fragments":["etc"]},{"Key":"`shout?` etc","Fragments":["to"]},{"Key":"etc to","Fragments":["be"]},{"Key":"be guards","Fragments":["on"]},{"Key":"guards on","Fragments":["the","bottle()"]},{"Key":"function rather","Fragments":["than"]},{"Key":"`cond` expression","Fragments":["but"]},{"Key":"expression but","Fragments":["I"]},{"Key":"think Elixir","Fragments":["allows"]},{"Key":"use custom","Fragments":["functions"]},{"Key":"custom functions","Fragments":["as","instead"]},{"Key":"clauses, only","Fragments":["macros"]},{"Key":"only macros","Fragments":["that"]},{"Key":"macros that","Fragments":["expand"]},{"Key":"that expand","Fragments":["to"]},{"Key":"expand to","Fragments":["the"]},{"Key":"allowed BIFs.","Fragments":["But"]},{"Key":"BIFs. But","Fragments":["if"]},{"Key":"anyone knows","Fragments":["a"]},{"Key":"knows a","Fragments":["way"]},{"Key":"this, please","Fragments":["tell"]},{"Key":"please tell","Fragments":["me!"]},{"Key":"clause functions,","Fragments":["but"]},{"Key":"the ONLY","Fragments":["place"]},{"Key":"ONLY place","Fragments":["the"]},{"Key":"place the","Fragments":["`is_foo`","module","`do:`"]},{"Key":"the `is_foo`","Fragments":["convention"]},{"Key":"`is_foo` convention","Fragments":["is"]},{"Key":"is used.","Fragments":["They're","Is"]},{"Key":"used. They're","Fragments":["all"]},{"Key":"They're all","Fragments":["defined"]},{"Key":"all defined","Fragments":["in","for"]},{"Key":"in `Kernel`,","Fragments":["and"]},{"Key":"`Kernel`, and","Fragments":["that's"]},{"Key":"not done","Fragments":["anywhere","much"]},{"Key":"done anywhere","Fragments":["else."]},{"Key":"anywhere else.","Fragments":["Usually"]},{"Key":"else. Usually","Fragments":["because"]},{"Key":"Usually because","Fragments":["they're"]},{"Key":"because they're","Fragments":["named","there."]},{"Key":"they're named","Fragments":["the"]},{"Key":"named the","Fragments":["same"]},{"Key":"equivalent function","Fragments":["in"]},{"Key":"the underlying","Fragments":["Erlang","Erlang","pattern","implementation","implementation.","distinction"]},{"Key":"underlying Erlang","Fragments":["stdlib.","VM."]},{"Key":"Pretty much","Fragments":["everywhere","like"]},{"Key":"much everywhere","Fragments":["else"]},{"Key":"everywhere else","Fragments":["in"]},{"Key":"elixir stdlib,","Fragments":["the"]},{"Key":"stdlib, the","Fragments":["`foo?`"]},{"Key":"the `foo?`","Fragments":["convention"]},{"Key":"`foo?` convention","Fragments":["is"]},{"Key":"Sounds right","Fragments":["about"]},{"Key":"using custom","Fragments":["guard"]},{"Key":"custom guard","Fragments":["functions."]},{"Key":"guard functions.","Fragments":["I"]},{"Key":"that constraint","Fragments":["comes"]},{"Key":"constraint comes","Fragments":["from"]},{"Key":"from Erlang.","Fragments":["The"]},{"Key":"runtime wants","Fragments":["to"]},{"Key":"to guarantee","Fragments":["you're"]},{"Key":"guarantee you're","Fragments":["not"]},{"Key":"doing things","Fragments":["with","*is*","like"]},{"Key":"things with","Fragments":["side","this,"]},{"Key":"with side","Fragments":["effects,"]},{"Key":"side effects,","Fragments":["so"]},{"Key":"effects, so","Fragments":["it"]},{"Key":"it limits","Fragments":["you"]},{"Key":"limits you","Fragments":["to"]},{"Key":"of safe","Fragments":["built"]},{"Key":"safe built","Fragments":["in"]},{"Key":"built in","Fragments":["guard","string","functions","functions","functions"]},{"Key":"at using","Fragments":["the"]},{"Key":"operator `|\u003e`.","Fragments":["This"]},{"Key":"`|\u003e`. This","Fragments":["would"]},{"Key":"would let","Fragments":["you"]},{"Key":"make `count/1`","Fragments":["and"]},{"Key":"`count/1` and","Fragments":["`words_in/1`","supply","a"]},{"Key":"and `words_in/1`","Fragments":["simpler."]},{"Key":"def count(phrase)","Fragments":["do"]},{"Key":" words_in","Fragments":["|\u003e"]},{"Key":" `HashDict.update/4`","Fragments":["is"]},{"Key":"`HashDict.update/4` is","Fragments":["your"]},{"Key":"is your","Fragments":["friend","take?","thoughts","use"]},{"Key":"your friend","Fragments":["for"]},{"Key":"for conditionally","Fragments":["replacing"]},{"Key":"conditionally replacing","Fragments":["a"]},{"Key":"replacing a","Fragments":["key"]},{"Key":"key value","Fragments":["if"]},{"Key":"it exists,","Fragments":["and"]},{"Key":"exists, and","Fragments":["providing"]},{"Key":"and providing","Fragments":["a"]},{"Key":"providing a","Fragments":["default","default"]},{"Key":"default if","Fragments":["it"]},{"Key":"it doesn't.","Fragments":["It"]},{"Key":"doesn't. It","Fragments":["removes"]},{"Key":"It removes","Fragments":["the"]},{"Key":"removes the","Fragments":["need","[literal"]},{"Key":"a `get`/`put`","Fragments":["for"]},{"Key":"`get`/`put` for","Fragments":["every"]},{"Key":"every iteration","Fragments":["through"]},{"Key":"iteration through","Fragments":["the"]},{"Key":"then call","Fragments":["that","\"methods\""]},{"Key":"call that","Fragments":["using"]},{"Key":"the `\u0026`","Fragments":["anonymous","capture","attaches","notation.","notation.","should"]},{"Key":"`\u0026` anonymous","Fragments":["function"]},{"Key":"avoid explicitly","Fragments":["declaring","concatenating"]},{"Key":"explicitly declaring","Fragments":["an"]},{"Key":"declaring an","Fragments":["`fn`"]},{"Key":"an `fn`","Fragments":["inside"]},{"Key":"Also, consider","Fragments":["declaring","whether"]},{"Key":"consider declaring","Fragments":["`import"]},{"Key":"declaring `import","Fragments":["String,"]},{"Key":"`import String,","Fragments":["[downcase:"]},{"Key":"String, [downcase:","Fragments":["1]`,"]},{"Key":"[downcase: 1]`,","Fragments":["and"]},{"Key":"1]`, and","Fragments":["just"]},{"Key":"just calling","Fragments":["that"]},{"Key":"calling that","Fragments":["directly"]},{"Key":"that directly","Fragments":["in","into"]},{"Key":"directly in","Fragments":["`words_in/1`.","`hamming_distance/2`?","the","the"]},{"Key":"from use","Fragments":["of"]},{"Key":"Elixir idioms,","Fragments":["solution","so"]},{"Key":"idioms, solution","Fragments":["looks"]},{"Key":"solution looks","Fragments":["good.","good."]},{"Key":"to @desiree","Fragments":["for"]},{"Key":"@desiree for","Fragments":["the"]},{"Key":"the brilliant","Fragments":["advice."]},{"Key":"brilliant advice.","Fragments":["How’s"]},{"Key":"advice. How’s","Fragments":["this"]},{"Key":"How’s this","Fragments":["looking"]},{"Key":"this looking","Fragments":["now?"]},{"Key":"One way","Fragments":["to","you"]},{"Key":"fix that","Fragments":["is","bad","by","yesterday.)","yesterday."]},{"Key":"separate Enum.reject","Fragments":["calls."]},{"Key":" @americo","Fragments":["looks"]},{"Key":"@americo looks","Fragments":["great."]},{"Key":"At line","Fragments":["7,"]},{"Key":"7, you","Fragments":["could"]},{"Key":"do `\u0026count_word/2`","Fragments":["rather"]},{"Key":"`\u0026count_word/2` rather","Fragments":["than"]},{"Key":"than `count_word(\u00261,\u00262)`.","Fragments":["IMHO"]},{"Key":"`count_word(\u00261,\u00262)`. IMHO","Fragments":["it"]},{"Key":"IMHO it","Fragments":["makes"]},{"Key":"but either","Fragments":["way"]},{"Key":" @dagmar","Fragments":["nice,"]},{"Key":"@dagmar nice,","Fragments":["that'll"]},{"Key":"nice, that'll","Fragments":["be"]},{"Key":"that'll be","Fragments":["much","a","cool."]},{"Key":"much neater.","Fragments":["Elixir"]},{"Key":"neater. Elixir","Fragments":["is"]},{"Key":"a gorgeous","Fragments":["language."]},{"Key":"solution too,","Fragments":["but"]},{"Key":"directly with","Fragments":["`verse`","strings."]},{"Key":"with `verse`","Fragments":["(when"]},{"Key":"`verse` (when","Fragments":["is"]},{"Key":"(when is","Fragments":["0,"]},{"Key":"is 0,","Fragments":["when"]},{"Key":"0, when","Fragments":["is"]},{"Key":"is 1,","Fragments":["when","trim"]},{"Key":"1, when","Fragments":["is"]},{"Key":"This still","Fragments":["looks"]},{"Key":"still looks","Fragments":["like"]},{"Key":"it sorts","Fragments":["the"]},{"Key":"sorts the","Fragments":["given","school."]},{"Key":"the given","Fragments":["`word`","day","day","enumerable"]},{"Key":"given `word`","Fragments":["every"]},{"Key":"`word` every","Fragments":["time"]},{"Key":"it compares","Fragments":["it"]},{"Key":"compares it","Fragments":["with"]},{"Key":"another one","Fragments":["in"]},{"Key":"code, but","Fragments":["I"]},{"Key":"me hash","Fragments":["is"]},{"Key":"an integer","Fragments":["that"]},{"Key":"integer that","Fragments":["is"]},{"Key":"is like","Fragments":["a"]},{"Key":"a fingerprint","Fragments":["of"]},{"Key":"fingerprint of","Fragments":["another"]},{"Key":"of another","Fragments":["binary/datastructure","convention","it's","way"]},{"Key":"another binary/datastructure","Fragments":["like"]},{"Key":"binary/datastructure like","Fragments":["md5/sha1."]},{"Key":"like md5/sha1.","Fragments":["So"]},{"Key":"md5/sha1. So","Fragments":["when"]},{"Key":"So when","Fragments":["I"]},{"Key":"name I","Fragments":["assumed","generally"]},{"Key":"assumed it","Fragments":["did"]},{"Key":"it did","Fragments":["something","that,","not","remind"]},{"Key":"something completely","Fragments":["different."]},{"Key":"not cause","Fragments":["confusion","trouble"]},{"Key":"cause confusion","Fragments":["it'd"]},{"Key":"confusion it'd","Fragments":["be"]},{"Key":"it'd be","Fragments":["great.","fun","worth"]},{"Key":"I'll consider","Fragments":["this","how"]},{"Key":" Nice!!","Fragments":[","]},{"Key":"Nice!! ,","Fragments":["you"]},{"Key":"you also","Fragments":["could"]},{"Key":"also could","Fragments":["do"]},{"Key":"defp non_matching_pair?({nucleotide,","Fragments":["nucleotide2})"]},{"Key":"non_matching_pair?({nucleotide, nucleotide2})","Fragments":[",do:"]},{"Key":"nucleotide2}) ,do:","Fragments":["nucleotide"]},{"Key":",do: nucleotide","Fragments":["!="]},{"Key":"nucleotide !=","Fragments":["nucleotide2"]},{"Key":"First ever","Fragments":["Elixir"]},{"Key":"ever Elixir","Fragments":["program!"]},{"Key":"Elixir program!","Fragments":["Feedback"]},{"Key":"program! Feedback","Fragments":["appreciated"]},{"Key":"Feedback appreciated","Fragments":["since"]},{"Key":"appreciated since","Fragments":["I"]},{"Key":"I hardly","Fragments":["know"]},{"Key":"hardly know","Fragments":["Elixir."]},{"Key":" at","Fragments":["line"]},{"Key":"line 12","Fragments":["you","as","and"]},{"Key":"a recursion","Fragments":["which"]},{"Key":"recursion which","Fragments":["won't"]},{"Key":"which won't","Fragments":["be"]},{"Key":"be tail","Fragments":["call"]},{"Key":"tail call","Fragments":["optimised","optimized.","optimization.","while","optimization.","optimised"]},{"Key":"call optimised","Fragments":["as","as"]},{"Key":"optimised as","Fragments":["the","I","it"]},{"Key":"call is","Fragments":["not","n","ambiguous\",","done."]},{"Key":"last thing","Fragments":["executed"]},{"Key":"thing executed","Fragments":["in"]},{"Key":"executed in","Fragments":["the"]},{"Key":"function (Dict.put","Fragments":["is"]},{"Key":"(Dict.put is","Fragments":["the"]},{"Key":"use an","Fragments":["accumulator","`fn`.","anonymous"]},{"Key":"an accumulator","Fragments":["as","and","for","and","and"]},{"Key":"accumulator as","Fragments":["the"]},{"Key":"first part","Fragments":["of"]},{"Key":"you store","Fragments":["the","them"]},{"Key":"store the","Fragments":["result"]},{"Key":"of `parse","Fragments":["text`"]},{"Key":"`parse text`","Fragments":["in"]},{"Key":"text` in","Fragments":["a"]},{"Key":"a local","Fragments":["variable","variable,","name","name","name","variable,"]},{"Key":"local variable","Fragments":["that","in","in"]},{"Key":"then immediately","Fragments":["use."]},{"Key":"immediately use.","Fragments":["Rather"]},{"Key":"use. Rather","Fragments":["than"]},{"Key":"Rather than","Fragments":["doing","the","updating","using"]},{"Key":"this you","Fragments":["can"]},{"Key":"can simply","Fragments":["\"pipe\"","pass"]},{"Key":"simply \"pipe\"","Fragments":["the"]},{"Key":"\"pipe\" the","Fragments":["value"]},{"Key":"value through","Fragments":["a"]},{"Key":"through a","Fragments":["series","method","dictionary","map,"]},{"Key":"text |\u003e","Fragments":["parse"]},{"Key":"|\u003e parse","Fragments":["|\u003e"]},{"Key":"parse |\u003e","Fragments":["count"]},{"Key":"The `count`","Fragments":["function","method"]},{"Key":"doing quite","Fragments":["a"]},{"Key":"lot -","Fragments":["could"]},{"Key":"could it","Fragments":["be"]},{"Key":"be broken","Fragments":["out","down"]},{"Key":"of smaller","Fragments":["functions,"]},{"Key":"smaller functions,","Fragments":["each"]},{"Key":"each with","Fragments":["a"]},{"Key":"a cohesive,","Fragments":["single"]},{"Key":"cohesive, single","Fragments":["responsibility?"]},{"Key":" @buster","Fragments":["Thanks"]},{"Key":"@buster Thanks","Fragments":["for"]},{"Key":"that out.","Fragments":["I've","Thanks."]},{"Key":"out. I've","Fragments":["broken"]},{"Key":"I've broken","Fragments":["it"]},{"Key":"broken it","Fragments":["up"]},{"Key":"bit in","Fragments":["my","that"]},{"Key":"latest submission.","Fragments":["I'm"]},{"Key":"submission. I'm","Fragments":["really"]},{"Key":"break up","Fragments":["the","the"]},{"Key":"rest of","Fragments":["count,","the","list","the"]},{"Key":"count, though.","Fragments":["It"]},{"Key":"It reads","Fragments":["horribly!"]},{"Key":"reads horribly!","Fragments":["But"]},{"Key":"horribly! But","Fragments":["I"]},{"Key":"could sacrifice","Fragments":["brevity"]},{"Key":"sacrifice brevity","Fragments":["for"]},{"Key":"brevity for","Fragments":["clarity."]},{"Key":"breaking the","Fragments":["anonymous","conditions"]},{"Key":"to `uniq`","Fragments":["out"]},{"Key":"`uniq` out","Fragments":["into"]},{"Key":"Although from","Fragments":["the"]},{"Key":"the looks","Fragments":["of","of"]},{"Key":"looks of","Fragments":["this","that"]},{"Key":"algorithm will","Fragments":["be"]},{"Key":"quite inefficient","Fragments":["as"]},{"Key":"inefficient as","Fragments":["you'll"]},{"Key":"as you'll","Fragments":["be"]},{"Key":"you'll be","Fragments":["traversing","fine"]},{"Key":"be traversing","Fragments":["the"]},{"Key":"traversing the","Fragments":["whole","whole"]},{"Key":"whole list","Fragments":["of","of"]},{"Key":"words for","Fragments":["every"]},{"Key":"every single","Fragments":["word"]},{"Key":"single word","Fragments":["in"]},{"Key":"the counts.","Fragments":["Is"]},{"Key":"counts. Is","Fragments":["there"]},{"Key":"single traversal","Fragments":["using",":-)"]},{"Key":"traversal using","Fragments":["a"]},{"Key":"different function","Fragments":["from","clauses,"]},{"Key":"function from","Fragments":["`Enum`?","`Dict`","`Enum`"]},{"Key":"think those","Fragments":["private","situations"]},{"Key":"functions might","Fragments":["be"]},{"Key":"be slightly","Fragments":["too","more","better","faster."]},{"Key":"slightly too","Fragments":["long"]},{"Key":"too long","Fragments":["to","expression","for","of"]},{"Key":"fit on","Fragments":["one"]},{"Key":"use just","Fragments":["about","`true`"]},{"Key":"just about","Fragments":["any"]},{"Key":"about any","Fragments":["other"]},{"Key":"other method","Fragments":["to","(`question`)"]},{"Key":"string. Why","Fragments":["not"]},{"Key":"not compare","Fragments":["it"]},{"Key":"to `\"\"`","Fragments":["instead"]},{"Key":"`\"\"` instead","Fragments":["of"]},{"Key":"of comparing","Fragments":["the"]},{"Key":"character to","Fragments":["nil?","be","the"]},{"Key":"1. When","Fragments":["using"]},{"Key":"When using","Fragments":["`import`","the"]},{"Key":"using `import`","Fragments":["you","to"]},{"Key":"`import` you","Fragments":["should"]},{"Key":"probably restrict","Fragments":["it"]},{"Key":"restrict it","Fragments":["to"]},{"Key":"to certain","Fragments":["functions."]},{"Key":"certain functions.","Fragments":["That"]},{"Key":"functions. That","Fragments":["way"]},{"Key":"language adds","Fragments":["something"]},{"Key":"adds something","Fragments":["like"]},{"Key":"like `String.uniq`","Fragments":["your"]},{"Key":"`String.uniq` your","Fragments":["code"]},{"Key":"code won't","Fragments":["break.","pass"]},{"Key":"2. `x`","Fragments":["isn't"]},{"Key":"`x` isn't","Fragments":["a"]},{"Key":"a particularly","Fragments":["expressive"]},{"Key":"particularly expressive","Fragments":["variable"]},{"Key":"expressive variable","Fragments":["name.","and","names"]},{"Key":"3. Your","Fragments":["`map`"]},{"Key":"Your `map`","Fragments":["call"]},{"Key":"`map` call","Fragments":["is"]},{"Key":"is n","Fragments":["squared"]},{"Key":"n squared","Fragments":["which"]},{"Key":"squared which","Fragments":["seems"]},{"Key":"bit expensive.","Fragments":["Like"]},{"Key":"expensive. Like","Fragments":["manute"]},{"Key":"Like manute","Fragments":["mentioned"]},{"Key":"manute mentioned","Fragments":["`HashDict.update`"]},{"Key":"mentioned `HashDict.update`","Fragments":["and"]},{"Key":"`HashDict.update` and","Fragments":["`List.foldl`"]},{"Key":"and `List.foldl`","Fragments":["might"]},{"Key":"`List.foldl` might","Fragments":["help"]},{"Key":"I'm being","Fragments":["truly","dense"]},{"Key":"truly nickpicky","Fragments":["here"]},{"Key":"nickpicky here","Fragments":["but"]},{"Key":"here but","Fragments":["unless","calling","I"]},{"Key":"but unless","Fragments":["I'm","it"]},{"Key":"unless I'm","Fragments":["mistaken"]},{"Key":"I'm mistaken","Fragments":["this"]},{"Key":"mistaken this","Fragments":["is"]},{"Key":"not capable","Fragments":["of"]},{"Key":"capable of","Fragments":["being","optimizing","being"]},{"Key":"being tail","Fragments":["call","recursive?"]},{"Key":"call optimized.","Fragments":["If"]},{"Key":"optimized. If","Fragments":["you"]},{"Key":"giant DNA","Fragments":["strand"]},{"Key":"DNA strand","Fragments":["(which","contains"]},{"Key":"strand (which","Fragments":["doesn't"]},{"Key":"(which doesn't","Fragments":["seem"]},{"Key":"seem unreasonable","Fragments":["in"]},{"Key":"unreasonable in","Fragments":["a"]},{"Key":"real world","Fragments":["application)","application","is","difference","at","you"]},{"Key":"world application)","Fragments":["it"]},{"Key":"application) it","Fragments":["could"]},{"Key":"could cause","Fragments":["a"]},{"Key":"cause a","Fragments":["stack","big","`Stack_overflow`","huge"]},{"Key":"a stack","Fragments":["overflow,","overflow","overflow","overflow","overflow"]},{"Key":"stack overflow,","Fragments":["right?"]},{"Key":"overflow, right?","Fragments":["Perhaps"]},{"Key":"right? Perhaps","Fragments":["someone"]},{"Key":"Perhaps someone","Fragments":["more"]},{"Key":"someone more","Fragments":["experienced"]},{"Key":"more experienced","Fragments":["with","developers."]},{"Key":"experienced with","Fragments":["TCO"]},{"Key":"with TCO","Fragments":["and"]},{"Key":"TCO and","Fragments":["Elixir"]},{"Key":"and Elixir","Fragments":["can","this","programmers","`map/1`"]},{"Key":"can confirm","Fragments":["this."]},{"Key":"to optimize","Fragments":["`append_with_acc/2`.","my"]},{"Key":" Be","Fragments":["gentle..","the","aware","aware"]},{"Key":"Be gentle..","Fragments":["This"]},{"Key":"gentle.. This","Fragments":["is"]},{"Key":"first program","Fragments":["ever"]},{"Key":"ever in","Fragments":["Elixir."]},{"Key":"Elixir. Use","Fragments":["small"]},{"Key":"Use small","Fragments":["words."]},{"Key":"Also, please","Fragments":["teach"]},{"Key":"please teach","Fragments":["me"]},{"Key":"teach me","Fragments":["what","not"]},{"Key":"me what","Fragments":["idiomatic"]},{"Key":"what idiomatic","Fragments":["Elixir"]},{"Key":"Elixir is.","Fragments":["Hopefully,"]},{"Key":"is. Hopefully,","Fragments":["I"]},{"Key":"Hopefully, I","Fragments":["can"]},{"Key":"can learn","Fragments":["to"]},{"Key":"learn to","Fragments":["think","read","help","defer"]},{"Key":"Elixir way","Fragments":[":)","to"]},{"Key":"You're on","Fragments":["the","the"]},{"Key":"right track,","Fragments":["good"]},{"Key":"track, good","Fragments":["going"]},{"Key":"good going","Fragments":["on"]},{"Key":"Elixir exercise.","Fragments":["I"]},{"Key":"code here","Fragments":["to","needs"]},{"Key":"be hard","Fragments":["to"]},{"Key":"read --","Fragments":["it's"]},{"Key":"not particularly","Fragments":["intention","intention","clear."]},{"Key":"particularly intention","Fragments":["revealing.","revealing"]},{"Key":"intention revealing.","Fragments":["Maybe"]},{"Key":"revealing. Maybe","Fragments":["consider"]},{"Key":"good but,","Fragments":["as"]},{"Key":"but, as","Fragments":["@rodolfo","for"]},{"Key":"as @rodolfo","Fragments":["says,"]},{"Key":"@rodolfo says,","Fragments":["it's"]},{"Key":"says, it's","Fragments":["not"]},{"Key":"revealing and","Fragments":["putting"]},{"Key":"and putting","Fragments":["the","the"]},{"Key":" BUT.","Fragments":["One"]},{"Key":"BUT. One","Fragments":["thing"]},{"Key":"thing you","Fragments":["said","could","need","have","might","might","can"]},{"Key":"you said","Fragments":["piqued","\"I've","on"]},{"Key":"said piqued","Fragments":["my"]},{"Key":"piqued my","Fragments":["interest."]},{"Key":"my interest.","Fragments":["What"]},{"Key":"interest. What","Fragments":["is"]},{"Key":"is \"idiomatic\"","Fragments":["Elixir?"]},{"Key":"\"idiomatic\" Elixir?","Fragments":["It"]},{"Key":"Elixir? It","Fragments":["might"]},{"Key":"too young","Fragments":["a"]},{"Key":"young a","Fragments":["language"]},{"Key":"have idioms","Fragments":["yet."]},{"Key":"idioms yet.","Fragments":["But"]},{"Key":"yet. But","Fragments":["the"]},{"Key":"word \"idiomatic\"","Fragments":["gets"]},{"Key":"\"idiomatic\" gets","Fragments":["thrown"]},{"Key":"gets thrown","Fragments":["around"]},{"Key":"thrown around","Fragments":["a"]},{"Key":"lot these","Fragments":["days,"]},{"Key":"these days,","Fragments":["or"]},{"Key":"days, or","Fragments":["so"]},{"Key":"or so","Fragments":["it","there.","pipes"]},{"Key":"me, and","Fragments":["the"]},{"Key":"I hear","Fragments":["it"]},{"Key":"hear it","Fragments":["the"]},{"Key":"ask why?","Fragments":["Because"]},{"Key":"why? Because","Fragments":["it"]},{"Key":"Because it","Fragments":["basically"]},{"Key":"it basically","Fragments":["means:"]},{"Key":"basically means:","Fragments":["\"Why"]},{"Key":"means: \"Why","Fragments":["should"]},{"Key":"\"Why should","Fragments":["I"]},{"Key":"do this?","Fragments":["Because"]},{"Key":"this? Because","Fragments":["that's"]},{"Key":"Because that's","Fragments":["how"]},{"Key":"how people","Fragments":["already"]},{"Key":"people already","Fragments":["do"]},{"Key":"already do","Fragments":["it\""]},{"Key":"do it\"","Fragments":["-"]},{"Key":"it\" -","Fragments":["not"]},{"Key":"- not","Fragments":["necessarily","a","all"]},{"Key":"necessarily a","Fragments":["bad"]},{"Key":"bad thing","Fragments":["in"]},{"Key":"in itself","Fragments":["but"]},{"Key":"itself but","Fragments":["I"]},{"Key":"am very","Fragments":["wary"]},{"Key":"very wary","Fragments":["of"]},{"Key":"just following","Fragments":["the"]},{"Key":"the crowd","Fragments":["and"]},{"Key":"crowd and","Fragments":["not"]},{"Key":"understanding the","Fragments":["actual","other."]},{"Key":"actual *reason*","Fragments":["for"]},{"Key":"*reason* for","Fragments":["doing"]},{"Key":"So basically","Fragments":["what"]},{"Key":"basically what","Fragments":["I"]},{"Key":"am saying","Fragments":["is"]},{"Key":"saying is","Fragments":["that"]},{"Key":"while the","Fragments":["\"idiomatic\"","bodies","arabic"]},{"Key":"the \"idiomatic\"","Fragments":["way"]},{"Key":"\"idiomatic\" way","Fragments":["of"]},{"Key":"things *is*","Fragments":["often"]},{"Key":"*is* often","Fragments":["the"]},{"Key":"often the","Fragments":["right"]},{"Key":"right way,","Fragments":["as"]},{"Key":"way, as","Fragments":["most"]},{"Key":"as most","Fragments":["people"]},{"Key":"people do","Fragments":["it","that","wrong","wrong"]},{"Key":"a reason,","Fragments":["if","so"]},{"Key":"reason, if","Fragments":["someone"]},{"Key":"someone tells","Fragments":["you"]},{"Key":"tells you","Fragments":["to"]},{"Key":"to code","Fragments":["in"]},{"Key":"certain way","Fragments":["because"]},{"Key":"way because","Fragments":["it's"]},{"Key":"it's \"idiomatic\",","Fragments":["don't"]},{"Key":"\"idiomatic\", don't","Fragments":["be"]},{"Key":"be shy","Fragments":["of"]},{"Key":"shy of","Fragments":["asking"]},{"Key":"of asking","Fragments":["them"]},{"Key":"asking them","Fragments":["*why*,"]},{"Key":"them *why*,","Fragments":["exactly,"]},{"Key":"*why*, exactly,","Fragments":["it"]},{"Key":"exactly, it","Fragments":["is"]},{"Key":"idiomatic and","Fragments":["what","more"]},{"Key":"what benefits","Fragments":["it"]},{"Key":"benefits it","Fragments":["brings."]},{"Key":"it brings.","Fragments":["\u003c/rant\u003e"]},{"Key":"Ah, thank","Fragments":["you."]},{"Key":"you. I'll","Fragments":["have"]},{"Key":"go look","Fragments":["up"]},{"Key":"up what","Fragments":["these"]},{"Key":"what these","Fragments":["code"]},{"Key":"these code","Fragments":["points"]},{"Key":"code points","Fragments":["/","encoded","(strings"]},{"Key":"points /","Fragments":["lists"]},{"Key":"/ lists","Fragments":["of"]},{"Key":"integers are","Fragments":["for."]},{"Key":" EDIT:","Fragments":["nevermind,"]},{"Key":"EDIT: nevermind,","Fragments":["read"]},{"Key":"nevermind, read","Fragments":["that"]},{"Key":"that wrong,","Fragments":["nothing"]},{"Key":"wrong, nothing","Fragments":["to"]},{"Key":"see here","Fragments":[":)"]},{"Key":"probably better","Fragments":["to","to","to","to"]},{"Key":"like Regex.replace","Fragments":["rather"]},{"Key":"Regex.replace rather","Fragments":["than"]},{"Key":"than scan","Fragments":["to"]},{"Key":"scan to","Fragments":["implement"]},{"Key":"implement this,","Fragments":["so"]},{"Key":"this, so","Fragments":["the","don't"]},{"Key":"single string","Fragments":["rather","or"]},{"Key":"of n","Fragments":["strings."]},{"Key":"n strings.","Fragments":["For"]},{"Key":"strings. For","Fragments":["particularly"]},{"Key":"For particularly","Fragments":["nasty"]},{"Key":"particularly nasty","Fragments":["input"]},{"Key":"nasty input","Fragments":["this"]},{"Key":"input this","Fragments":["implementation"]},{"Key":"is O(","Fragments":["n^2"]},{"Key":"O( n^2","Fragments":[")"]},{"Key":"n^2 )","Fragments":["when"]},{"Key":") when","Fragments":["it","the"]},{"Key":"be O(n)","Fragments":["(getting"]},{"Key":"O(n) (getting","Fragments":["the"]},{"Key":"(getting the","Fragments":["length","unicode"]},{"Key":"list is","Fragments":["O(n)).","O(1),","passed","a","empty","crucial","passed","always","empty.","length","length","length","empty?","going","potentially","passed","obviously","a","a","a"]},{"Key":"is O(n)).","Fragments":["Consider"]},{"Key":"O(n)). Consider","Fragments":["what"]},{"Key":"Consider what","Fragments":["happens","happens"]},{"Key":"happens if","Fragments":["you","the","the","they","you"]},{"Key":"very large","Fragments":["string","lists.","lists.","for"]},{"Key":"large string","Fragments":["of"]},{"Key":" Sorting","Fragments":["is"]},{"Key":"Sorting is","Fragments":["likely"]},{"Key":"is likely","Fragments":["to","to"]},{"Key":"faster than","Fragments":["building","`String.graphemes`.","`String.graphemes`","`String.scan(%r/\\p{L}/)","`cond`","any","opening"]},{"Key":"than building","Fragments":["a"]},{"Key":"a HashDict","Fragments":["due","as","is","to","dictionary.","is,","is"]},{"Key":"HashDict due","Fragments":["to"]},{"Key":"to constant","Fragments":["factors"]},{"Key":"constant factors","Fragments":["(same"]},{"Key":"factors (same","Fragments":["O(n"]},{"Key":"(same O(n","Fragments":["log"]},{"Key":"O(n log","Fragments":["n)"]},{"Key":"log n)","Fragments":["asymptotic","or"]},{"Key":"n) asymptotic","Fragments":["complexity"]},{"Key":"asymptotic complexity","Fragments":["though)."]},{"Key":"to fuse","Fragments":["together"]},{"Key":"fuse together","Fragments":["`different_word?`"]},{"Key":"together `different_word?`","Fragments":["and"]},{"Key":"`different_word?` and","Fragments":["`anagram?`"]},{"Key":"and `anagram?`","Fragments":["so"]},{"Key":"`anagram?` so","Fragments":["that"]},{"Key":"`downcase` operation","Fragments":["doesn't"]},{"Key":"operation doesn't","Fragments":["have"]},{"Key":"will submit","Fragments":["a","another"]},{"Key":"broken down","Fragments":["into"]},{"Key":" \"Idiomatic\"","Fragments":["means"]},{"Key":"\"Idiomatic\" means","Fragments":["\"the"]},{"Key":"means \"the","Fragments":["way"]},{"Key":"\"the way","Fragments":["the"]},{"Key":"language wants","Fragments":["to"]},{"Key":"be written\".","Fragments":["It"]},{"Key":"written\". It","Fragments":["includes"]},{"Key":"It includes","Fragments":["things"]},{"Key":"includes things","Fragments":["like"]},{"Key":"like syntax,","Fragments":["indentation,"]},{"Key":"syntax, indentation,","Fragments":["method"]},{"Key":"indentation, method","Fragments":["size,"]},{"Key":"method size,","Fragments":["method"]},{"Key":"size, method","Fragments":["naming"]},{"Key":"method naming","Fragments":["conventions,"]},{"Key":"naming conventions,","Fragments":["as"]},{"Key":"conventions, as","Fragments":["well"]},{"Key":"as preferred","Fragments":["ways"]},{"Key":"preferred ways","Fragments":["of"]},{"Key":"doing things.","Fragments":["I","Presumably"]},{"Key":"chose `cond`","Fragments":["here"]},{"Key":"`cond` here","Fragments":["because"]},{"Key":"here because","Fragments":["it"]},{"Key":"it reminded","Fragments":["me"]},{"Key":"reminded me","Fragments":["of","about","of"]},{"Key":"of LISP.","Fragments":["Not"]},{"Key":"LISP. Not","Fragments":["necessarily"]},{"Key":"Not necessarily","Fragments":["the"]},{"Key":"best reason","Fragments":["to"]},{"Key":"I expect","Fragments":["that","that","there's","`anything_else`","much"]},{"Key":"that \"idiomatic","Fragments":["elixir\""]},{"Key":"\"idiomatic elixir\"","Fragments":["involves"]},{"Key":"elixir\" involves","Fragments":["pattern-matching,"]},{"Key":"involves pattern-matching,","Fragments":["since"]},{"Key":"pattern-matching, since","Fragments":["that's"]},{"Key":"that's one","Fragments":["of"]},{"Key":"main strengths","Fragments":["of"]},{"Key":"strengths of","Fragments":["Erlang,"]},{"Key":"of Erlang,","Fragments":["but"]},{"Key":"Erlang, but","Fragments":["that's"]},{"Key":"that's my","Fragments":["uneducated"]},{"Key":"my uneducated","Fragments":["guess."]},{"Key":"module, you","Fragments":["could"]},{"Key":"the analyzers","Fragments":["as"]},{"Key":"analyzers as","Fragments":["private"]},{"Key":"not common","Fragments":["to","to"]},{"Key":"input validation","Fragments":["that","is"]},{"Key":"validation that","Fragments":["you"]},{"Key":"in `quiet_at_me?/1`.","Fragments":["What"]},{"Key":"`quiet_at_me?/1`. What","Fragments":["was"]},{"Key":"the rationale","Fragments":["for"]},{"Key":"rationale for","Fragments":["that?"]},{"Key":"for that?","Fragments":["Calling"]},{"Key":"that? Calling","Fragments":["`String.length/1`"]},{"Key":"Calling `String.length/1`","Fragments":["or"]},{"Key":"`String.length/1` or","Fragments":["comparing"]},{"Key":"or comparing","Fragments":["to"]},{"Key":"comparing to","Fragments":["an","the"]},{"Key":"string would","Fragments":["be","incorrectly"]},{"Key":"the `true`","Fragments":["case"]},{"Key":"`true` case","Fragments":["to"]},{"Key":"function, as","Fragments":["`telling_me_something_unimportant?`"]},{"Key":"as `telling_me_something_unimportant?`","Fragments":["doesn't"]},{"Key":"`telling_me_something_unimportant?` doesn't","Fragments":["actually"]},{"Key":"doesn't actually","Fragments":["do","need"]},{"Key":"actually do","Fragments":["anything"]},{"Key":"anything at","Fragments":["all,"]},{"Key":"only makes","Fragments":["sense"]},{"Key":"the context","Fragments":["of","of"]},{"Key":"context of","Fragments":["`hey/1`.","a"]},{"Key":"you adding","Fragments":["a"]},{"Key":"a `/1`","Fragments":["at"]},{"Key":"`/1` at","Fragments":["the"]},{"Key":"names? (are","Fragments":["they"]},{"Key":"(are they","Fragments":["called"]},{"Key":"they called","Fragments":["methods"]},{"Key":"called methods","Fragments":["or"]},{"Key":"methods or","Fragments":["functions?)"]},{"Key":"reason I'm","Fragments":["doing","tending","reusing"]},{"Key":"this input","Fragments":["validation"]},{"Key":"validation is","Fragments":["because"]},{"Key":"needed it","Fragments":["to"]},{"Key":"of other","Fragments":["methods","modules","things","Elixir"]},{"Key":"other methods","Fragments":["that","by"]},{"Key":"would satisfy","Fragments":["these"]},{"Key":"satisfy these","Fragments":["requirements"]},{"Key":"these requirements","Fragments":["properly."]},{"Key":"requirements properly.","Fragments":["I"]},{"Key":"properly. I","Fragments":["need"]},{"Key":"that strings","Fragments":["full","created"]},{"Key":"strings full","Fragments":["of"]},{"Key":"of whitespace,","Fragments":["as"]},{"Key":"whitespace, as","Fragments":["well"]},{"Key":"as empty","Fragments":["strings"]},{"Key":"strings and","Fragments":["`nil`","binaries."]},{"Key":"and `nil`","Fragments":["objects,"]},{"Key":"`nil` objects,","Fragments":["all"]},{"Key":"objects, all","Fragments":["count"]},{"Key":"all count","Fragments":["as"]},{"Key":"count as","Fragments":["\"being","\"cryptic","a"]},{"Key":"as \"being","Fragments":["quiet\"."]},{"Key":"\"being quiet\".","Fragments":["I"]},{"Key":"quiet\". I","Fragments":["expect"]},{"Key":"that `String.length/1`","Fragments":["would"]},{"Key":"`String.length/1` would","Fragments":["barf"]},{"Key":"would barf","Fragments":["if"]},{"Key":"barf if","Fragments":["I"]},{"Key":"I passed","Fragments":["in"]},{"Key":"as abstracting","Fragments":["`true`"]},{"Key":"abstracting `true`","Fragments":[":"]},{"Key":"`true` :","Fragments":["I"]},{"Key":": I","Fragments":["felt"]},{"Key":"felt it","Fragments":["was"]},{"Key":"was important","Fragments":["to"]},{"Key":"bring that","Fragments":["part"]},{"Key":"language into","Fragments":["the"]},{"Key":"code. Should","Fragments":["the"]},{"Key":"implementation change,","Fragments":["that's"]},{"Key":"change, that's","Fragments":["where"]},{"Key":"that's where","Fragments":["it"]},{"Key":"would change.","Fragments":["Do"]},{"Key":"change. Do","Fragments":["you"]},{"Key":"that's really","Fragments":["overkill?","a","a"]},{"Key":"really overkill?","Fragments":["The"]},{"Key":"overkill? The","Fragments":["`cond`"]},{"Key":"`cond` with","Fragments":["a","a"]},{"Key":"a `true`","Fragments":["at","at"]},{"Key":"`true` at","Fragments":["the","the"]},{"Key":"end looked","Fragments":["weird"]},{"Key":"looked weird","Fragments":["to"]},{"Key":" They","Fragments":["are","call","said","work","are"]},{"Key":"are called","Fragments":["functions,","and","\"nitpicks\""]},{"Key":"called functions,","Fragments":["functions"]},{"Key":"functions, functions","Fragments":["are"]},{"Key":"are uniquely","Fragments":["identified"]},{"Key":"uniquely identified","Fragments":["by"]},{"Key":"identified by","Fragments":["their"]},{"Key":"by their","Fragments":["name","conjunction."]},{"Key":"their name","Fragments":["and"]},{"Key":"their arity","Fragments":["(the"]},{"Key":"arity (the","Fragments":["number"]},{"Key":"(the number","Fragments":["of"]},{"Key":"of arguments","Fragments":["that","as","differ"]},{"Key":"arguments that","Fragments":["it"]},{"Key":"it takes),","Fragments":["and"]},{"Key":"takes), and","Fragments":["the"]},{"Key":"for expressing","Fragments":["that"]},{"Key":"expressing that","Fragments":["uses"]},{"Key":"current test","Fragments":["suite"]},{"Key":"suite doesn't","Fragments":["expect","specify"]},{"Key":"doesn't expect","Fragments":["the"]},{"Key":"atom `:nil`","Fragments":["to"]},{"Key":"`:nil` to","Fragments":["be"]},{"Key":"be handled,","Fragments":["perhaps"]},{"Key":"handled, perhaps","Fragments":["you"]},{"Key":"perhaps you","Fragments":["had"]},{"Key":"an old","Fragments":["version?","test","version"]},{"Key":"old version?","Fragments":["There"]},{"Key":"version? There","Fragments":["was"]},{"Key":"There was","Fragments":["a","one"]},{"Key":"a time","Fragments":["where"]},{"Key":"did that,","Fragments":["but"]},{"Key":"idea because","Fragments":["nobody"]},{"Key":"because nobody","Fragments":["should"]},{"Key":"nobody should","Fragments":["write"]},{"Key":"should write","Fragments":["code"]},{"Key":"that don't","Fragments":["have","return","need","work"]},{"Key":"the \"billion","Fragments":["dollar"]},{"Key":"\"billion dollar","Fragments":["mistake\""]},{"Key":"dollar mistake\"","Fragments":["(null"]},{"Key":"mistake\" (null","Fragments":["references),"]},{"Key":"(null references),","Fragments":["so"]},{"Key":"references), so","Fragments":["it"]},{"Key":"was reverted.","Fragments":["`String.valid?/1`"]},{"Key":"reverted. `String.valid?/1`","Fragments":["isn't"]},{"Key":"`String.valid?/1` isn't","Fragments":["actually"]},{"Key":"isn't actually","Fragments":["a"]},{"Key":"a typecheck,","Fragments":["its"]},{"Key":"typecheck, its","Fragments":["purpose"]},{"Key":"its purpose","Fragments":["is","is"]},{"Key":"for invalid","Fragments":["UTF-8."]},{"Key":"invalid UTF-8.","Fragments":["The"]},{"Key":"UTF-8. The","Fragments":["fact"]},{"Key":"doesn't crash","Fragments":["on"]},{"Key":"crash on","Fragments":["type"]},{"Key":"on type","Fragments":["errors","of"]},{"Key":"type errors","Fragments":["is"]},{"Key":"errors is","Fragments":["an"]},{"Key":"an undocumented","Fragments":["implementation"]},{"Key":"undocumented implementation","Fragments":["detail"]},{"Key":"implementation detail","Fragments":["that","to"]},{"Key":"detail that","Fragments":["you"]},{"Key":"you shouldn't","Fragments":["depend"]},{"Key":"shouldn't depend","Fragments":["on."]},{"Key":" `cond`","Fragments":["with","is","is","is"]},{"Key":"end is","Fragments":["not"]},{"Key":"not weird","Fragments":["at"]},{"Key":"weird at","Fragments":["all."]},{"Key":"all. It's","Fragments":["the"]},{"Key":"it's done","Fragments":["in"]},{"Key":"and pretty","Fragments":["much","stand-alone"]},{"Key":"much any","Fragments":["language"]},{"Key":"any language","Fragments":["with"]},{"Key":"similar construct","Fragments":["(sometimes"]},{"Key":"construct (sometimes","Fragments":["an"]},{"Key":"(sometimes an","Fragments":["alias"]},{"Key":"an alias","Fragments":["is","for"]},{"Key":"alias is","Fragments":["used;"]},{"Key":"is used;","Fragments":["Haskell"]},{"Key":"used; Haskell","Fragments":["has"]},{"Key":"Haskell has","Fragments":["an","been"]},{"Key":"has an","Fragments":["alias"]},{"Key":"alias for","Fragments":["`True`"]},{"Key":"for `True`","Fragments":["called"]},{"Key":"`True` called","Fragments":["`otherwise`"]},{"Key":"called `otherwise`","Fragments":["and"]},{"Key":"`otherwise` and","Fragments":["Clojure"]},{"Key":"and Clojure","Fragments":["uses"]},{"Key":"Clojure uses","Fragments":["the"]},{"Key":"the keyword","Fragments":["`:else`"]},{"Key":"keyword `:else`","Fragments":["which"]},{"Key":"`:else` which","Fragments":["happens"]},{"Key":"which happens","Fragments":["to"]},{"Key":"a true","Fragments":["in"]},{"Key":"true in","Fragments":["a"]},{"Key":"boolean context),","Fragments":["take"]},{"Key":"context), take","Fragments":["a"]},{"Key":"the docs:","Fragments":["http://elixir-lang.org/docs/stable/Kernel.html#cond/1"]},{"Key":" Hmm..","Fragments":["I"]},{"Key":"Hmm.. I","Fragments":["don't"]},{"Key":"my test","Fragments":["suite","time","suite?"]},{"Key":"suite though","Fragments":[":/"]},{"Key":"the lessons,","Fragments":["I"]},{"Key":"lessons, I","Fragments":["am"]},{"Key":"am learning","Fragments":["a"]},{"Key":"a lot,","Fragments":["and","got"]},{"Key":"lot, and","Fragments":["much"]},{"Key":"and much","Fragments":["more"]},{"Key":"than going","Fragments":["through"]},{"Key":"the few","Fragments":["tutorials"]},{"Key":"few tutorials","Fragments":["I've"]},{"Key":"tutorials I've","Fragments":["played"]},{"Key":"I've played","Fragments":["with"]},{"Key":" @darian","Fragments":["-"]},{"Key":"@darian -","Fragments":["totally"]},{"Key":"- totally","Fragments":["agree"]},{"Key":"that, this","Fragments":["is","looks","seems"]},{"Key":"great way","Fragments":["to","to"]},{"Key":"to learn!","Fragments":["I've"]},{"Key":"learn! I've","Fragments":["learnt"]},{"Key":"I've learnt","Fragments":["more"]},{"Key":"learnt more","Fragments":["Haskell"]},{"Key":"more Haskell","Fragments":["and"]},{"Key":"Haskell and","Fragments":["Elixir","Elixir."]},{"Key":"Elixir this","Fragments":["way","doesn't","doesn't","doesn't","doesn't","doesn't","doesn't","doesn't"]},{"Key":"a week","Fragments":["than"]},{"Key":"week than","Fragments":["I"]},{"Key":"than I","Fragments":["ever","would","have","expected.","expected.","like."]},{"Key":"I ever","Fragments":["have"]},{"Key":"a slice","Fragments":["or"]},{"Key":"slice or","Fragments":["a"]},{"Key":"match to","Fragments":["lop","`number`"]},{"Key":"to lop","Fragments":["off"]},{"Key":"lop off","Fragments":["the"]},{"Key":"the \"1\",","Fragments":["replace"]},{"Key":"\"1\", replace","Fragments":["is"]},{"Key":"replace is","Fragments":["a"]},{"Key":"a sledgehammer","Fragments":["that"]},{"Key":"sledgehammer that","Fragments":["uses"]},{"Key":"uses more","Fragments":["code"]},{"Key":"and isn't","Fragments":["going","confusing.","there"]},{"Key":"isn't going","Fragments":["to"]},{"Key":"update it,","Fragments":["perhaps"]},{"Key":"it, perhaps","Fragments":["if"]},{"Key":"perhaps if","Fragments":["you"]},{"Key":"you delete","Fragments":["it"]},{"Key":"delete it","Fragments":["and"]},{"Key":"and exercism","Fragments":["fetch?"]},{"Key":"exercism fetch?","Fragments":["Make"]},{"Key":"fetch? Make","Fragments":["sure"]},{"Key":"Make sure","Fragments":["to"]},{"Key":"sure to","Fragments":["save","avoid"]},{"Key":"to save","Fragments":["your","one"]},{"Key":"save your","Fragments":["work"]},{"Key":"your work","Fragments":["first","on"]},{"Key":"work first","Fragments":["of"]},{"Key":" `''`","Fragments":["is"]},{"Key":"`''` is","Fragments":["a","pretty"]},{"Key":"integers (code","Fragments":["points)"]},{"Key":"(code points)","Fragments":["and"]},{"Key":"points) and","Fragments":["`\"\"`"]},{"Key":"and `\"\"`","Fragments":["is"]},{"Key":"`\"\"` is","Fragments":["a"]},{"Key":"string (an","Fragments":["Erlang"]},{"Key":"(an Erlang","Fragments":["binary"]},{"Key":"Erlang binary","Fragments":["with"]},{"Key":"binary with","Fragments":["the"]},{"Key":"points encoded","Fragments":["in"]},{"Key":"encoded in","Fragments":["UTF-8).","UTF8)."]},{"Key":" `String.strip(callout)","Fragments":["=="]},{"Key":"`String.strip(callout) ==","Fragments":["\"\"`"]},{"Key":"bit confusing:","Fragments":["`String.strip(greeting)"]},{"Key":"confusing: `String.strip(greeting)","Fragments":["|\u003e"]},{"Key":"`String.strip(greeting) |\u003e","Fragments":["String.length","String.length"]},{"Key":"|\u003e String.length","Fragments":["==","==","=="]},{"Key":"String.length ==","Fragments":["0`.","0`.","0`"]},{"Key":"== 0`.","Fragments":["The","Only","Even"]},{"Key":"0`. The","Fragments":["casual"]},{"Key":"The casual","Fragments":["reader"]},{"Key":"casual reader","Fragments":["might"]},{"Key":"reader might","Fragments":["not"]},{"Key":"the relative","Fragments":["precedence"]},{"Key":"relative precedence","Fragments":["of"]},{"Key":"precedence of","Fragments":["`|\u003e`"]},{"Key":"of `|\u003e`","Fragments":["and","as"]},{"Key":"`|\u003e` and","Fragments":["`==`"]},{"Key":"and `==`","Fragments":["is"]},{"Key":"is (i.e.","Fragments":["if"]},{"Key":"(i.e. if","Fragments":["it's"]},{"Key":"it's `(String.strip(greeting)","Fragments":["|\u003e"]},{"Key":"`(String.strip(greeting) |\u003e","Fragments":["String.length)"]},{"Key":"|\u003e String.length)","Fragments":["==","=="]},{"Key":"String.length) ==","Fragments":["0`","0`."]},{"Key":"0` or","Fragments":["`String.strip(greeting)"]},{"Key":"or `String.strip(greeting)","Fragments":["|\u003e"]},{"Key":"0`. Only","Fragments":["the"]},{"Key":"Only the","Fragments":["former"]},{"Key":"the former","Fragments":["makes","is"]},{"Key":"former makes","Fragments":["sense"]},{"Key":"course but","Fragments":["it's"]},{"Key":"it's best","Fragments":["to","to","to","to","to"]},{"Key":"best to","Fragments":["avoid","put","use","just","just","extract","write","use","use","be","consistently"]},{"Key":"avoid forcing","Fragments":["the"]},{"Key":"forcing the","Fragments":["reader"]},{"Key":"As @summer","Fragments":["said,"]},{"Key":"@summer said,","Fragments":["you"]},{"Key":"said, you","Fragments":["can"]},{"Key":"the String.length","Fragments":["by"]},{"Key":"String.length by","Fragments":["a"]},{"Key":"a comparison","Fragments":["with","of","word"]},{"Key":"with \"\".","Fragments":["I'm"]},{"Key":"\"\". I'm","Fragments":["not"]},{"Key":"not completely","Fragments":["sure,","sure","sure","clear."]},{"Key":"completely sure,","Fragments":["but"]},{"Key":"sure, but","Fragments":["I","I","it"]},{"Key":"suspect this","Fragments":["to","is","is","is","problem"]},{"Key":"efficient as","Fragments":["well"]},{"Key":"well (if","Fragments":["the"]},{"Key":"(if the","Fragments":["EVM"]},{"Key":"the EVM","Fragments":["checks"]},{"Key":"EVM checks","Fragments":["the"]},{"Key":"checks the","Fragments":["lengths"]},{"Key":"the lengths","Fragments":["of","of","and","would","of"]},{"Key":"lengths of","Fragments":["the","lists","a"]},{"Key":"String binaries","Fragments":["first"]},{"Key":"binaries first","Fragments":["it"]},{"Key":"first it","Fragments":["can","is"]},{"Key":"see they","Fragments":["aren't"]},{"Key":"aren't equal","Fragments":["without"]},{"Key":"equal without","Fragments":["having"]},{"Key":"binary contents).","Fragments":["In"]},{"Key":"contents). In","Fragments":["any"]},{"Key":"any case","Fragments":["`==","I","just","that"]},{"Key":"case `==","Fragments":["\"\"`"]},{"Key":"`== \"\"`","Fragments":["is","and"]},{"Key":"The choice","Fragments":["of"]},{"Key":"a Greeting","Fragments":["module"]},{"Key":"Greeting module","Fragments":["feels","independently."]},{"Key":"overkill looking","Fragments":["at"]},{"Key":"at just","Fragments":["the"]},{"Key":"just the","Fragments":["example","`String`","normal","accumulator.","same","10","first","inverse"]},{"Key":"example but","Fragments":["in","it"]},{"Key":"world application","Fragments":["it"]},{"Key":"application it","Fragments":["could"]},{"Key":"be useful,","Fragments":["depending"]},{"Key":"useful, depending","Fragments":["on"]},{"Key":"larger context.","Fragments":["For"]},{"Key":"context. For","Fragments":["example"]},{"Key":"example if","Fragments":["you","two","you","you","you"]},{"Key":"a \"Grownup\"","Fragments":["or"]},{"Key":"\"Grownup\" or","Fragments":["\"Child\""]},{"Key":"or \"Child\"","Fragments":["module"]},{"Key":"\"Child\" module","Fragments":["with"]},{"Key":"a `hey`","Fragments":["function"]},{"Key":"function it","Fragments":["would","was"]},{"Key":"of extra","Fragments":["work","work"]},{"Key":"extra work","Fragments":["at","but"]},{"Key":"work at","Fragments":["the","the","all"]},{"Key":"first implementation","Fragments":["to","was"]},{"Key":"refactor later.","Fragments":["It"]},{"Key":"later. It","Fragments":["also"]},{"Key":"makes testing","Fragments":["somewhat"]},{"Key":"testing somewhat","Fragments":["easier"]},{"Key":"somewhat easier","Fragments":["as","to"]},{"Key":"easier as","Fragments":["you","a"]},{"Key":"can test","Fragments":["the"]},{"Key":"the Greeting","Fragments":["module"]},{"Key":"You were","Fragments":["wondering","just"]},{"Key":"were wondering","Fragments":["about"]},{"Key":"wondering about","Fragments":["pattern","the"]},{"Key":"matching. One","Fragments":["way"]},{"Key":"could fit","Fragments":["it"]},{"Key":"fit it","Fragments":["in"]},{"Key":"in here","Fragments":["is","so","somehow?"]},{"Key":"some \"Greeting.classify\"","Fragments":["function"]},{"Key":"\"Greeting.classify\" function","Fragments":["that"]},{"Key":"returns `:silence`,","Fragments":["`:shouting`"]},{"Key":"`:silence`, `:shouting`","Fragments":["or"]},{"Key":"`:shouting` or","Fragments":["`:question`"]},{"Key":"or `:question`","Fragments":["and"]},{"Key":"`:question` and","Fragments":["to"]},{"Key":"to `case`","Fragments":["match"]},{"Key":"`case` match","Fragments":["on"]},{"Key":"result. It","Fragments":["seems"]},{"Key":"this example","Fragments":["but","is"]},{"Key":"some benefits","Fragments":["if"]},{"Key":"benefits if","Fragments":["the"]},{"Key":"code were","Fragments":["to"]},{"Key":"were to","Fragments":["be","write","'use"]},{"Key":"be expanded","Fragments":["in"]},{"Key":"expanded in","Fragments":["the"]},{"Key":"the future.","Fragments":["For","This"]},{"Key":"future. For","Fragments":["example"]},{"Key":"if two","Fragments":["of"]},{"Key":"your predicate","Fragments":["functions"]},{"Key":"functions need","Fragments":["a","to"]},{"Key":"certain preprocessing","Fragments":["step"]},{"Key":"preprocessing step","Fragments":["(for"]},{"Key":"step (for","Fragments":["example"]},{"Key":"(for example","Fragments":["if","a","`Enum.zip`","`some_call_that_returns_a_list()","by","using","it"]},{"Key":"distinguish between","Fragments":["shouted"]},{"Key":"between shouted","Fragments":["commands"]},{"Key":"shouted commands","Fragments":["and"]},{"Key":"commands and","Fragments":["shouted"]},{"Key":"and shouted","Fragments":["questions)"]},{"Key":"shouted questions)","Fragments":["the"]},{"Key":"questions) the","Fragments":["`classify`"]},{"Key":"the `classify`","Fragments":["approach"]},{"Key":"`classify` approach","Fragments":["would"]},{"Key":"It's uncommon","Fragments":["to"]},{"Key":"uncommon to","Fragments":["use"]},{"Key":"use `import`","Fragments":["in"]},{"Key":"`import` in","Fragments":["this"]},{"Key":"this way.","Fragments":["Elixir","I","You"]},{"Key":"way. Elixir","Fragments":["code","(through","(through","(through","(through","(through","(through","(through"]},{"Key":"code commonly","Fragments":["uses"]},{"Key":"commonly uses","Fragments":["the"]},{"Key":"the `SpeechAnalyzer.ignoring?`","Fragments":["style."]},{"Key":"sure whether","Fragments":["the"]},{"Key":"the lack","Fragments":["of","of","of"]},{"Key":"of indentation","Fragments":["is"]},{"Key":"indentation is","Fragments":["due"]},{"Key":"is due","Fragments":["to","to","to"]},{"Key":"to exercism","Fragments":["but"]},{"Key":"exercism but","Fragments":["Elixir"]},{"Key":"but Elixir","Fragments":["code","doesn't"]},{"Key":"code typically","Fragments":["has"]},{"Key":"typically has","Fragments":["2"]},{"Key":"has 2","Fragments":["spaces"]},{"Key":"spaces per","Fragments":["indentation","indentation"]},{"Key":"per indentation","Fragments":["level.","level,"]},{"Key":"the separate","Fragments":["module,","private","predicate","module.","`Dict.get`","`Greeting`"]},{"Key":"module, it's","Fragments":["a"]},{"Key":"a tradeoff.","Fragments":["If"]},{"Key":"tradeoff. If","Fragments":["you"]},{"Key":"functions elsewhere","Fragments":["it's"]},{"Key":"elsewhere it's","Fragments":["best"]},{"Key":"be best","Fragments":["to","to","to"]},{"Key":"`defp` or","Fragments":["to"]},{"Key":"or to","Fragments":["just"]},{"Key":"just write","Fragments":["`String.strip(speech)","`String.last(text)`.","`\u0026(\u00261+1)`","`\u0026(\u00261+\u00262)`"]},{"Key":"write `String.strip(speech)","Fragments":["=="]},{"Key":"`String.strip(speech) ==","Fragments":["\"\"`"]},{"Key":"\"\"` and","Fragments":["friends","`String.last(s)","doing"]},{"Key":"and friends","Fragments":["in","private","do)."]},{"Key":"friends in","Fragments":["the"]},{"Key":"condition part","Fragments":["of"]},{"Key":"`cond` clause","Fragments":["(before"]},{"Key":"clause (before","Fragments":["the"]},{"Key":"(before the","Fragments":["`-\u003e`)."]},{"Key":" @carol","Fragments":["Argh."]},{"Key":"@carol Argh.","Fragments":["I've"]},{"Key":"Argh. I've","Fragments":["been"]},{"Key":"been banging","Fragments":["at"]},{"Key":"banging at","Fragments":["this"]},{"Key":"for almost","Fragments":["2","every"]},{"Key":"almost 2","Fragments":["hours,"]},{"Key":"2 hours,","Fragments":["but"]},{"Key":"hours, but","Fragments":["I"]},{"Key":"out which","Fragments":["function","items"]},{"Key":"which function","Fragments":["you","is"]},{"Key":"be referring","Fragments":["to."]},{"Key":"referring to.","Fragments":["Maybe"]},{"Key":"to. Maybe","Fragments":["take_while?"]},{"Key":"think my","Fragments":["frustration","Elixir","append","condition"]},{"Key":"my frustration","Fragments":["is"]},{"Key":"frustration is","Fragments":["figuring"]},{"Key":"is figuring","Fragments":["out"]},{"Key":"out actual","Fragments":["function"]},{"Key":"actual function","Fragments":["formatting."]},{"Key":"function formatting.","Fragments":["Given"]},{"Key":"formatting. Given","Fragments":["the"]},{"Key":"current line","Fragments":["4,"]},{"Key":"4, how","Fragments":["would"]},{"Key":"you expand","Fragments":["that"]},{"Key":"expand that","Fragments":["in"]},{"Key":"just formatting?","Fragments":["Can"]},{"Key":"formatting? Can","Fragments":["it"]},{"Key":"even be","Fragments":["expanded?"]},{"Key":"Also, yeah,","Fragments":["busted"]},{"Key":"yeah, busted","Fragments":["on"]},{"Key":"busted on","Fragments":["the"]},{"Key":"the one-liners.","Fragments":[":)"]},{"Key":"a `count/2`","Fragments":["that","method."]},{"Key":"`count/2` that","Fragments":["you"]},{"Key":" Interestingly","Fragments":["enough"]},{"Key":"Interestingly enough","Fragments":["`List.zip/1`"]},{"Key":"enough `List.zip/1`","Fragments":["doesn't"]},{"Key":"`List.zip/1` doesn't","Fragments":["have"]},{"Key":"at `Enum.reduce`.","Fragments":["To"]},{"Key":"`Enum.reduce`. To","Fragments":["use"]},{"Key":"To use","Fragments":["it"]},{"Key":"it you'll","Fragments":["also"]},{"Key":"create your","Fragments":["`HashDict`"]},{"Key":"your `HashDict`","Fragments":["so","once"]},{"Key":"`HashDict` so","Fragments":["that"]},{"Key":"build it","Fragments":["up"]},{"Key":"up incrementally","Fragments":["rather"]},{"Key":"incrementally rather","Fragments":["than"]},{"Key":"than creating","Fragments":["it","a"]},{"Key":"creating it","Fragments":["in"]},{"Key":"one fell","Fragments":["swoop.","swoop"]},{"Key":"fell swoop.","Fragments":["If"]},{"Key":"swoop. If","Fragments":["you"]},{"Key":"a play","Fragments":["with"]},{"Key":"this I","Fragments":["think","had","added"]},{"Key":"your formatting","Fragments":["with"]},{"Key":"formatting with","Fragments":["clear"]},{"Key":"with clear","Fragments":["itself"]},{"Key":"clear itself","Fragments":["up"]},{"Key":"itself up","Fragments":[":-)"]},{"Key":"With regards","Fragments":["to","to"]},{"Key":"the formatting,","Fragments":["the"]},{"Key":"formatting, the","Fragments":["way"]},{"Key":"way I've","Fragments":["found"]},{"Key":"I've found","Fragments":["of","conversion","the","Mastering","for"]},{"Key":"found of","Fragments":["organizing"]},{"Key":"of organizing","Fragments":["Elixir"]},{"Key":"organizing Elixir","Fragments":["code"]},{"Key":"like best","Fragments":["is"]},{"Key":"best is","Fragments":["thinking"]},{"Key":"is thinking","Fragments":["about"]},{"Key":"the successive","Fragments":["transformations"]},{"Key":"successive transformations","Fragments":["I"]},{"Key":"transformations I","Fragments":["want"]},{"Key":"perform on","Fragments":["the"]},{"Key":"output, having","Fragments":["a"]},{"Key":"different private","Fragments":["function"]},{"Key":"each transformation,","Fragments":["then"]},{"Key":"transformation, then","Fragments":["chaining"]},{"Key":"then chaining","Fragments":["them"]},{"Key":"chaining them","Fragments":["together"]},{"Key":"them together","Fragments":["in"]},{"Key":"together in","Fragments":["the"]},{"Key":" Sometimes","Fragments":["to","the"]},{"Key":"Sometimes to","Fragments":["help"]},{"Key":"to help","Fragments":["me","out","a","the","me","me","simplify","improve"]},{"Key":"me work","Fragments":["out","out"]},{"Key":"what private","Fragments":["functions"]},{"Key":"functions I","Fragments":["need","couldn't"]},{"Key":"write I","Fragments":["write"]},{"Key":"the chain","Fragments":["of","in"]},{"Key":"chain of","Fragments":["functions","functions"]},{"Key":"functions before","Fragments":["I"]},{"Key":"I implement","Fragments":["them"]},{"Key":"implement them","Fragments":["-","in"]},{"Key":"them -","Fragments":["helps"]},{"Key":"- helps","Fragments":["me"]},{"Key":"helps me","Fragments":["write"]},{"Key":"me write","Fragments":["a"]},{"Key":"clear story","Fragments":["all"]},{"Key":"story all","Fragments":["at"]},{"Key":"same level","Fragments":["of"]},{"Key":"So for","Fragments":["this","a","a","100"]},{"Key":"problem I","Fragments":["might","guess,","assume?","can","was","was","have"]},{"Key":"might write","Fragments":["something"]},{"Key":"def count","Fragments":["phrase"]},{"Key":"count phrase","Fragments":["do"]},{"Key":"phrase |\u003e","Fragments":["downcase"]},{"Key":"|\u003e downcase","Fragments":["|\u003e"]},{"Key":"downcase |\u003e","Fragments":["sanitize"]},{"Key":"|\u003e sanitize","Fragments":["|\u003e"]},{"Key":"sanitize |\u003e","Fragments":["split"]},{"Key":"|\u003e split","Fragments":["|\u003e"]},{"Key":"split |\u003e","Fragments":["aggregate"]},{"Key":" ...and","Fragments":["then"]},{"Key":"...and then","Fragments":["try"]},{"Key":"out implementations","Fragments":["for"]},{"Key":"I there's","Fragments":["an"]},{"Key":"there's an","Fragments":["already","Enum.into"]},{"Key":"an already","Fragments":["existing","existing"]},{"Key":"already existing","Fragments":["function","enum"]},{"Key":"existing function","Fragments":["I"]},{"Key":" Yo","Fragments":["could"]},{"Key":"Yo could","Fragments":["normalize"]},{"Key":"before scan","Fragments":["the"]},{"Key":"words instead","Fragments":["for","of","of"]},{"Key":"instead for","Fragments":["each"]},{"Key":"Well \\w","Fragments":["is"]},{"Key":"\\w is","Fragments":["useful,"]},{"Key":"is useful,","Fragments":["but"]},{"Key":"useful, but","Fragments":["I"]},{"Key":"can never","Fragments":["quite","remember"]},{"Key":"never quite","Fragments":["remember"]},{"Key":"quite remember","Fragments":["what"]},{"Key":"remember what","Fragments":["it"]},{"Key":"Erlang re","Fragments":["module"]},{"Key":"re module","Fragments":["man"]},{"Key":"module man","Fragments":["page"]},{"Key":"man page","Fragments":["it"]},{"Key":"page it","Fragments":["seems"]},{"Key":"be all","Fragments":["letters","positive"]},{"Key":"all letters","Fragments":["and","are"]},{"Key":"letters and","Fragments":["digits","thus","numbers).","scores","then"]},{"Key":"and digits","Fragments":["with","in"]},{"Key":"digits with","Fragments":["codepoint"]},{"Key":"with codepoint","Fragments":["\u003c"]},{"Key":"codepoint \u003c","Fragments":["256"]},{"Key":"\u003c 256","Fragments":["plus"]},{"Key":"256 plus","Fragments":["the"]},{"Key":"plus the","Fragments":["underscore."]},{"Key":"the underscore.","Fragments":["That"]},{"Key":"underscore. That","Fragments":["means"]},{"Key":"That means","Fragments":["it","that","that","you"]},{"Key":"means it","Fragments":["doesn't"]},{"Key":"doesn't deal","Fragments":["with,","with","with","well"]},{"Key":"deal with,","Fragments":["say,"]},{"Key":"with, say,","Fragments":["cyrillic"]},{"Key":"say, cyrillic","Fragments":["Д"]},{"Key":"cyrillic Д","Fragments":["and"]},{"Key":"Д and","Fragments":["it"]},{"Key":"also doesn't","Fragments":["handle"]},{"Key":"doesn't handle","Fragments":["words","e.g."]},{"Key":"handle words","Fragments":["where"]},{"Key":"words where","Fragments":["the"]},{"Key":"the hyphen","Fragments":["is","either,"]},{"Key":"hyphen is","Fragments":["part"]},{"Key":"word like","Fragments":["\"kleuren-tv\"","\"für\"","\"für\"","\"für\"?","\"für\"","\"für\"","\"für\"","\"für\""]},{"Key":"like \"kleuren-tv\"","Fragments":["(Dutch"]},{"Key":"\"kleuren-tv\" (Dutch","Fragments":["for"]},{"Key":"(Dutch for","Fragments":["color"]},{"Key":"for color","Fragments":["television)."]},{"Key":"color television).","Fragments":["Of"]},{"Key":"television). Of","Fragments":["course"]},{"Key":"Of course","Fragments":["my","I","in","now"]},{"Key":"course my","Fragments":["code"]},{"Key":"code doesn't","Fragments":["deal","compile","unnecessary","perform","even","look"]},{"Key":"hyphen either,","Fragments":["but"]},{"Key":"that's mainly","Fragments":["because"]},{"Key":"mainly because","Fragments":["I"]},{"Key":"didn't consider","Fragments":["it"]},{"Key":"when writing","Fragments":["it.","expressions","the","helper","this"]},{"Key":"writing it.","Fragments":[":)"]},{"Key":"for downcasing","Fragments":["the"]},{"Key":"downcasing the","Fragments":["string","sentence","whole","each","whole","sentence"]},{"Key":"expresses the","Fragments":["intent"]},{"Key":"better. The","Fragments":["difference","binary_part"]},{"Key":"difference in","Fragments":["performance","the","execution","performance.","how","that","the"]},{"Key":"in performance","Fragments":["should"]},{"Key":"performance should","Fragments":["be"]},{"Key":"be fairly","Fragments":["minimal."]},{"Key":"The general","Fragments":["structure"]},{"Key":"general structure","Fragments":["of"]},{"Key":"Elixir the","Fragments":["convention"]},{"Key":"is lowercase","Fragments":["function","anyway."]},{"Key":"lowercase function","Fragments":["names"]},{"Key":"with words","Fragments":["separated"]},{"Key":"words separated","Fragments":["by"]},{"Key":"separated by","Fragments":["underscores.","a"]},{"Key":"by underscores.","Fragments":["Furthermore"]},{"Key":"underscores. Furthermore","Fragments":["predicates"]},{"Key":"Furthermore predicates","Fragments":["typically"]},{"Key":"predicates typically","Fragments":["have"]},{"Key":"typically have","Fragments":["a"]},{"Key":"a \"?\"","Fragments":["at","at"]},{"Key":"end and","Fragments":["there's"]},{"Key":"no \"is_\"","Fragments":["prefix."]},{"Key":"\"is_\" prefix.","Fragments":["So"]},{"Key":"prefix. So","Fragments":["`silence?`"]},{"Key":"So `silence?`","Fragments":["instead"]},{"Key":"`silence?` instead","Fragments":["of"]},{"Key":"Your isSilence","Fragments":["clause"]},{"Key":"isSilence clause","Fragments":["at"]},{"Key":"clause at","Fragments":["line"]},{"Key":"19 seems","Fragments":["to"]},{"Key":"be rather","Fragments":["complicated."]},{"Key":"rather complicated.","Fragments":["You're"]},{"Key":"complicated. You're","Fragments":["converting"]},{"Key":"You're converting","Fragments":["a"]},{"Key":"codepoints and","Fragments":["then"]},{"Key":"then compare","Fragments":["that","the"]},{"Key":"a hashset","Fragments":["with"]},{"Key":"hashset with","Fragments":["a"]},{"Key":"single space.","Fragments":["Besides"]},{"Key":"space. Besides","Fragments":["being"]},{"Key":"Besides being","Fragments":["complicated"]},{"Key":"being complicated","Fragments":["it"]},{"Key":"complicated it","Fragments":["also"]},{"Key":"also means","Fragments":["it's","that"]},{"Key":"means it's","Fragments":["not","harder"]},{"Key":"not working","Fragments":["for","for","yet"]},{"Key":"working for","Fragments":["whitespace","languages"]},{"Key":"for whitespace","Fragments":["other"]},{"Key":"whitespace other","Fragments":["than"]},{"Key":"the space","Fragments":["character"]},{"Key":"space character","Fragments":["(for"]},{"Key":"character (for","Fragments":["example"]},{"Key":"example a","Fragments":["newline","\"*\""]},{"Key":"a newline","Fragments":["in","like","in","character","before"]},{"Key":"newline in","Fragments":["the","both","the"]},{"Key":"would incorrectly","Fragments":["not"]},{"Key":"incorrectly not","Fragments":["be"]},{"Key":"be recognized","Fragments":["as"]},{"Key":"recognized as","Fragments":["whitespace).","shouting."]},{"Key":"directly or","Fragments":["use"]},{"Key":"use `guards`","Fragments":["(size"]},{"Key":"`guards` (size","Fragments":["of"]},{"Key":"(size of","Fragments":["phone"]},{"Key":"of phone","Fragments":[")instead","numbers."]},{"Key":"phone )instead","Fragments":["of"]},{"Key":")instead of","Fragments":["`cond`"]},{"Key":" @cathrine","Fragments":["because"]},{"Key":"@cathrine because","Fragments":["the"]},{"Key":"documentation says","Fragments":["that"]},{"Key":"says that","Fragments":["this"]},{"Key":"empty, and","Fragments":["I"]},{"Key":"While you're","Fragments":["suggesting"]},{"Key":"you're suggesting","Fragments":["that,"]},{"Key":"suggesting that,","Fragments":["though,"]},{"Key":"that, though,","Fragments":["what"]},{"Key":"though, what","Fragments":["is"]},{"Key":"between `\"\"`","Fragments":["and"]},{"Key":"`\"\"` and","Fragments":["`''`"]},{"Key":"and `''`","Fragments":["?"]},{"Key":"originally considered","Fragments":["function"]},{"Key":"considered function","Fragments":["level"]},{"Key":"function level","Fragments":["pattern"]},{"Key":"level pattern","Fragments":["matching"]},{"Key":"but opted","Fragments":["to"]},{"Key":"opted to","Fragments":["go","have","sort"]},{"Key":"with `cond`","Fragments":["because","and"]},{"Key":"`cond` because","Fragments":["the"]},{"Key":"input needs","Fragments":["to"]},{"Key":"be scrubbed","Fragments":["prior"]},{"Key":"scrubbed prior","Fragments":["to"]},{"Key":"prior to","Fragments":["checking.","exercism.io","the"]},{"Key":"to checking.","Fragments":["It"]},{"Key":"checking. It","Fragments":["also","also"]},{"Key":"also has","Fragments":["a","state,","a","arity"]},{"Key":"a catch","Fragments":["all"]},{"Key":"catch all","Fragments":["case"]},{"Key":"all case","Fragments":["so"]},{"Key":"case so","Fragments":["I"]},{"Key":"about handing","Fragments":["bad"]},{"Key":"handing bad","Fragments":["input"]},{"Key":"bad input","Fragments":["at"]},{"Key":"input at","Fragments":["the","the"]},{"Key":"feedback. My","Fragments":["first"]},{"Key":"solution incorporated","Fragments":["`defp`"]},{"Key":"incorporated `defp`","Fragments":["and"]},{"Key":"agree, in","Fragments":["this"]},{"Key":"case, that","Fragments":["it"]},{"Key":"go that","Fragments":["route.","route"]},{"Key":" Realized","Fragments":["my"]},{"Key":"Realized my","Fragments":["`only:`"]},{"Key":"my `only:`","Fragments":["in"]},{"Key":"`only:` in","Fragments":["the"]},{"Key":"import was","Fragments":["unnecessary"]},{"Key":"was unnecessary","Fragments":["since"]},{"Key":"unnecessary since","Fragments":["I'm"]},{"Key":"I'm importing","Fragments":["every"]},{"Key":"importing every","Fragments":["function"]},{"Key":"every function","Fragments":["anyway."]},{"Key":"like exercism","Fragments":["choked"]},{"Key":"exercism choked","Fragments":["on"]},{"Key":"choked on","Fragments":["the"]},{"Key":"code display","Fragments":["for"]},{"Key":"display for","Fragments":["a"]},{"Key":"a day","Fragments":["or"]},{"Key":"day or","Fragments":["so"]},{"Key":"make `silent?`,","Fragments":["`all_caps?`"]},{"Key":"`silent?`, `all_caps?`","Fragments":["and"]},{"Key":"`all_caps?` and","Fragments":["`question?`"]},{"Key":"`question?` private","Fragments":["(defp),"]},{"Key":"private (defp),","Fragments":["but"]},{"Key":"(defp), but","Fragments":["on"]},{"Key":" @maye","Fragments":["Thanks"]},{"Key":"@maye Thanks","Fragments":["for"]},{"Key":"for this.","Fragments":["I'm","Did"]},{"Key":"this. I'm","Fragments":["still"]},{"Key":"not getting","Fragments":["it,"]},{"Key":"getting it,","Fragments":["but"]},{"Key":"my lack","Fragments":["of"]},{"Key":"of knowledge","Fragments":["of","I"]},{"Key":"knowledge of","Fragments":["how"]},{"Key":"how functions","Fragments":["are"]},{"Key":"and data","Fragments":["structures"]},{"Key":"data structures","Fragments":["are","than"]},{"Key":"are created","Fragments":["in"]},{"Key":"created in","Fragments":["Elixir."]},{"Key":"more reading","Fragments":["first."]},{"Key":"reading first.","Fragments":["But"]},{"Key":"first. But","Fragments":["I'll"]},{"Key":"do so","Fragments":["with","anyway","upon"]},{"Key":"so with","Fragments":["an"]},{"Key":"eye towards","Fragments":["using"]},{"Key":"towards using","Fragments":["reduce."]},{"Key":"using reduce.","Fragments":["Thank"]},{"Key":"reduce. Thank","Fragments":["you!"]},{"Key":"Yeah, except","Fragments":["for"]},{"Key":"what @addie","Fragments":["said,"]},{"Key":"@addie said,","Fragments":["this"]},{"Key":"said, this","Fragments":["looks"]},{"Key":"my Elixir-newbie","Fragments":["eyes."]},{"Key":"Elixir-newbie eyes.","Fragments":["You"]},{"Key":"eyes. You","Fragments":["could"]},{"Key":"could maybe","Fragments":["make","benefit"]},{"Key":"module one-liners.","Fragments":["And"]},{"Key":"one-liners. And","Fragments":["if"]},{"Key":"And if","Fragments":["you","you","you","I"]},{"Key":"you decide","Fragments":["to","to"]},{"Key":"put those","Fragments":["into"]},{"Key":"those into","Fragments":["the"]},{"Key":"module itself,","Fragments":["you"]},{"Key":"itself, you","Fragments":["can"]},{"Key":"can privatize","Fragments":["them"]},{"Key":"privatize them","Fragments":["by"]},{"Key":"them by","Fragments":["using"]},{"Key":" @sylvan","Fragments":["Sometimes"]},{"Key":"@sylvan Sometimes","Fragments":["I"]},{"Key":"Sometimes I","Fragments":["think"]},{"Key":"be *too*","Fragments":["DRY"]},{"Key":"*too* DRY","Fragments":[":-)"]},{"Key":" Passes","Fragments":["all"]},{"Key":"Passes all","Fragments":["the"]},{"Key":"test cases,","Fragments":["but","both"]},{"Key":"cases, but","Fragments":["I"]},{"Key":"some edge","Fragments":["cases"]},{"Key":"cases that","Fragments":["the","are"]},{"Key":"the unit-tests","Fragments":["don't"]},{"Key":"unit-tests don't","Fragments":["cover."]},{"Key":"For count","Fragments":["it"]},{"Key":"count it","Fragments":["does"]},{"Key":"look nice","Fragments":["visually.","to","to"]},{"Key":"use List.foldl","Fragments":["instead"]},{"Key":"List.foldl instead","Fragments":["of"]},{"Key":"the recursion","Fragments":["yourself","in","pattern","and","myself","patter,"]},{"Key":" Ta,","Fragments":["looks"]},{"Key":"Ta, looks","Fragments":["like"]},{"Key":"like we","Fragments":["found"]},{"Key":"we found","Fragments":["a"]},{"Key":"similar solution","Fragments":["in"]},{"Key":"end using","Fragments":["that"]},{"Key":"that fancy","Fragments":["`HashDict`"]},{"Key":"fancy `HashDict`","Fragments":["constructor!"]},{"Key":"`Enum.zip` has","Fragments":["a"]},{"Key":"is effectively","Fragments":["padded","the"]},{"Key":"effectively padded","Fragments":["with"]},{"Key":"padded with","Fragments":["`nil`s."]},{"Key":"Your `zip/2`","Fragments":["is"]},{"Key":"`zip/2` is","Fragments":["a"]},{"Key":"redundant method","Fragments":[","]},{"Key":"method ,","Fragments":["Why"]},{"Key":", Why","Fragments":["don't"]},{"Key":"Why don't","Fragments":["you","use","you"]},{"Key":"don't you","Fragments":["use","like","mean","simply","simply"]},{"Key":"use `List.zip/1`","Fragments":["directly"]},{"Key":"`List.zip/1` directly","Fragments":["in"]},{"Key":"the comment,","Fragments":["I","fixed","rickr."]},{"Key":"comment, I","Fragments":["think"]},{"Key":"example more","Fragments":["clear"]},{"Key":"you @willy!","Fragments":["That"]},{"Key":"@willy! That","Fragments":["was"]},{"Key":"was driving","Fragments":["me"]},{"Key":"driving me","Fragments":["crazy."]},{"Key":"My mind","Fragments":["is"]},{"Key":"mind is","Fragments":["exploding"]},{"Key":"is exploding","Fragments":["and"]},{"Key":"exploding and","Fragments":["expanding."]},{"Key":"and expanding.","Fragments":["Thanks!"]},{"Key":"not `\"\"","Fragments":["=="]},{"Key":"`\"\" ==","Fragments":["String.strip(input)`?","String.strip(input)`."]},{"Key":"Should \"DO","Fragments":["it"]},{"Key":"\"DO it","Fragments":["now?\"","now?\""]},{"Key":"it now?\"","Fragments":["be","has"]},{"Key":"now?\" be","Fragments":["considered"]},{"Key":" Shouldn't","Fragments":["`equal_pairs?`"]},{"Key":"Shouldn't `equal_pairs?`","Fragments":["be"]},{"Key":"`equal_pairs?` be","Fragments":["`unequal_pairs?`?"]},{"Key":"I'd keep","Fragments":["multiple"]},{"Key":"keep multiple","Fragments":["clauses"]},{"Key":"multiple clauses","Fragments":["of","of","for","of"]},{"Key":"clauses of","Fragments":["the","different","an","trim_num"]},{"Key":"function (grade)","Fragments":["closer"]},{"Key":"(grade) closer","Fragments":["together"]},{"Key":"closer together","Fragments":["than"]},{"Key":"together than","Fragments":["clauses"]},{"Key":"than clauses","Fragments":["of"]},{"Key":"of different","Fragments":["functions.","ways","lengths.","lengths.","things."]},{"Key":"different functions.","Fragments":["Just"]},{"Key":"functions. Just","Fragments":["a"]},{"Key":"minor style","Fragments":["point."]},{"Key":" Doh!","Fragments":["Names"]},{"Key":"Doh! Names","Fragments":["are"]},{"Key":"Names are","Fragments":["hard"]},{"Key":"Thanks @celia,","Fragments":["updated"]},{"Key":"@celia, updated","Fragments":["with"]},{"Key":"updated with","Fragments":["your"]},{"Key":"I misunderstood","Fragments":["line","how"]},{"Key":"misunderstood line","Fragments":["8."]},{"Key":"line 8.","Fragments":["It"]},{"Key":"8. It","Fragments":["does"]},{"Key":"does handle","Fragments":["shouting"]},{"Key":"handle shouting","Fragments":["properly."]},{"Key":"are two","Fragments":["basic","codepoints","very","different","loops","separate"]},{"Key":"two basic","Fragments":["approaches"]},{"Key":"basic approaches","Fragments":["here:"]},{"Key":"approaches here:","Fragments":["using"]},{"Key":"here: using","Fragments":["some"]},{"Key":"some form","Fragments":["of"]},{"Key":"dictionary to","Fragments":["count"]},{"Key":"individual letters","Fragments":["or"]},{"Key":"letters or","Fragments":["simply"]},{"Key":"simply sorting","Fragments":["the"]},{"Key":"sorting the","Fragments":["string.","values.","lengths","lengths","lengths...","sides,","names.","students","whole","grades","inputs"]},{"Key":"string. The","Fragments":["former"]},{"Key":"The former","Fragments":["method,","gets"]},{"Key":"former method,","Fragments":["with"]},{"Key":"method, with","Fragments":["idiomatic"]},{"Key":"with idiomatic","Fragments":["Elixir"]},{"Key":"Elixir style,","Fragments":["proved"]},{"Key":"style, proved","Fragments":["to"]},{"Key":"proved to","Fragments":["be"]},{"Key":"much slower","Fragments":["than","-"]},{"Key":"simple benchmark.","Fragments":["So"]},{"Key":"benchmark. So","Fragments":["I"]},{"Key":" @haskell","Fragments":["I"]},{"Key":"@haskell I","Fragments":["see"]},{"Key":"point. To","Fragments":["be"]},{"Key":"honest, I've","Fragments":["not"]},{"Key":"I've not","Fragments":["been","done"]},{"Key":"not been","Fragments":["sure","my"]},{"Key":"been sure","Fragments":["what"]},{"Key":"the idiomatic","Fragments":["thing","way."]},{"Key":"idiomatic thing","Fragments":["was/is"]},{"Key":"thing was/is","Fragments":["in"]},{"Key":"was/is in","Fragments":["Elixir."]},{"Key":"Elixir. Being","Fragments":["so"]},{"Key":"Being so","Fragments":["much"]},{"Key":"Ruby, I","Fragments":["thought"]},{"Key":"thought usage","Fragments":["of"]},{"Key":"of parentheses","Fragments":["should"]},{"Key":"parentheses should","Fragments":["be"]},{"Key":"be minimized","Fragments":["in"]},{"Key":"minimized in","Fragments":["the"]},{"Key":"the interest","Fragments":["of","of","of"]},{"Key":"interest of","Fragments":["noise","giving","getting"]},{"Key":"of noise","Fragments":["reduction."]},{"Key":"Also, it's","Fragments":["a","not"]},{"Key":"get in","Fragments":["the","the"]},{"Key":"using parentheses","Fragments":["in","with"]},{"Key":"calls unless","Fragments":["there's"]},{"Key":"reason not","Fragments":["to."]},{"Key":"not to.","Fragments":["Without"]},{"Key":"to. Without","Fragments":["parentheses"]},{"Key":"Without parentheses","Fragments":["you"]},{"Key":"parentheses you","Fragments":["might","have"]},{"Key":"run into","Fragments":["subtle","an","this","places"]},{"Key":"into subtle","Fragments":["issues"]},{"Key":"subtle issues","Fragments":["such"]},{"Key":"issues such","Fragments":["as"]},{"Key":"as `String.codepoints","Fragments":["\"A\""]},{"Key":"`String.codepoints \"A\"","Fragments":["|\u003e"]},{"Key":"\"A\" |\u003e","Fragments":["Enum.count`"]},{"Key":"|\u003e Enum.count`","Fragments":["not","will"]},{"Key":"Enum.count` not","Fragments":["doing"]},{"Key":"Well, you","Fragments":["don't"]},{"Key":"don't for","Fragments":["the"]},{"Key":"exercise, `''`","Fragments":["is"]},{"Key":"pretty uncommon","Fragments":["in","in"]},{"Key":"uncommon in","Fragments":["Elixir.","Elixir"]},{"Key":"Elixir. Most","Fragments":["of"]},{"Key":"Most of","Fragments":["the","this"]},{"Key":"time Elixir","Fragments":["will"]},{"Key":"Elixir will","Fragments":["use"]},{"Key":"use binaries,","Fragments":["not"]},{"Key":"binaries, not","Fragments":["lists,"]},{"Key":"not lists,","Fragments":["to"]},{"Key":"lists, to","Fragments":["represent"]},{"Key":"represent text.","Fragments":["It's"]},{"Key":"text. It's","Fragments":["probably"]},{"Key":"more useful","Fragments":["if"]},{"Key":"useful if","Fragments":["you're"]},{"Key":"you're interfacing","Fragments":["with"]},{"Key":"interfacing with","Fragments":["Erlang"]},{"Key":"Erlang code,","Fragments":["which"]},{"Key":"code, which","Fragments":["(mostly","I"]},{"Key":"which (mostly","Fragments":["for"]},{"Key":"(mostly for","Fragments":["legacy"]},{"Key":"for legacy","Fragments":["reasons)"]},{"Key":"legacy reasons)","Fragments":["uses"]},{"Key":"reasons) uses","Fragments":["the"]},{"Key":"list representation","Fragments":["for"]},{"Key":"representation for","Fragments":["text"]},{"Key":"for text","Fragments":["pretty"]},{"Key":"text pretty","Fragments":["often."]},{"Key":" @hortense","Fragments":["+1"]},{"Key":"@hortense +1","Fragments":["to"]},{"Key":"to that.","Fragments":["I","Something"]},{"Key":"I try","Fragments":["to","to","to","to","to"]},{"Key":"to aim","Fragments":["to"]},{"Key":"aim to","Fragments":["have"]},{"Key":"have only","Fragments":["a","one"]},{"Key":"a function/method,","Fragments":["and"]},{"Key":"function/method, and","Fragments":["within"]},{"Key":"and within","Fragments":["each"]},{"Key":"within each","Fragments":["function"]},{"Key":"each function","Fragments":["call"]},{"Key":"call only","Fragments":["other"]},{"Key":"other functions","Fragments":["at","like","in","instead","to","to","in"]},{"Key":"functions at","Fragments":["a","this","all."]},{"Key":"a single,","Fragments":["consistent"]},{"Key":"single, consistent","Fragments":["level"]},{"Key":"It's good","Fragments":["to"]},{"Key":"of adding","Fragments":["@arnold","an"]},{"Key":"adding @arnold","Fragments":["comments"]},{"Key":"@arnold comments","Fragments":["for"]},{"Key":"for public","Fragments":["functions."]},{"Key":"too many","Fragments":["helper","list"]},{"Key":"many helper","Fragments":["functions"]},{"Key":"functions here","Fragments":["that","that"]},{"Key":"here that","Fragments":["decrease","could"]},{"Key":"that decrease","Fragments":["readability."]},{"Key":"readability. `different_word?`","Fragments":["is"]},{"Key":"`different_word?` is","Fragments":["so"]},{"Key":"so simple","Fragments":["that"]},{"Key":"simple that","Fragments":["irt"]},{"Key":"that irt","Fragments":["doesn't"]},{"Key":"irt doesn't","Fragments":["really"]},{"Key":"need it's","Fragments":["own"]},{"Key":"it's own","Fragments":["function."]},{"Key":"wouldn't put","Fragments":["a"]},{"Key":"a space","Fragments":["between","in","tradeoff).","and"]},{"Key":"space between","Fragments":["\"Enum.sort\""]},{"Key":"between \"Enum.sort\"","Fragments":["and"]},{"Key":"\"Enum.sort\" and","Fragments":["\"(String.codepoints(word))\""]},{"Key":"you compute","Fragments":["the"]},{"Key":"compute the","Fragments":["downcase"]},{"Key":"downcase and","Fragments":["sorted","sort","do"]},{"Key":"and sorted","Fragments":["characters","I","over","exactly"]},{"Key":"sorted characters","Fragments":["for"]},{"Key":"characters for","Fragments":["the"]},{"Key":"\"word\" parameter","Fragments":["to"]},{"Key":"to \"match\"","Fragments":["again"]},{"Key":"\"match\" again","Fragments":["for"]},{"Key":"each possible","Fragments":["match?","nucleotide."]},{"Key":" @isaac","Fragments":["Hmmm..."]},{"Key":"@isaac Hmmm...","Fragments":["I"]},{"Key":"Hmmm... I","Fragments":["wasn't","suppose"]},{"Key":"wasn't focused","Fragments":["on"]},{"Key":"focused on","Fragments":["performance","what"]},{"Key":"on performance","Fragments":["optimization","of"]},{"Key":"performance optimization","Fragments":["only"]},{"Key":"optimization only","Fragments":["getting","if"]},{"Key":"only getting","Fragments":["the"]},{"Key":"logic correct.","Fragments":["But"]},{"Key":"correct. But","Fragments":["now"]},{"Key":"But now","Fragments":["that","the","I"]},{"Key":"about this,","Fragments":["the","it's"]},{"Key":"this, the","Fragments":["notion","`i`","fact"]},{"Key":"the notion","Fragments":["of"]},{"Key":"notion of","Fragments":["lowercasing","punctuation,","characters,","lower"]},{"Key":"of lowercasing","Fragments":["and"]},{"Key":"sorting seems","Fragments":["intrinsic"]},{"Key":"seems intrinsic","Fragments":["to"]},{"Key":"intrinsic to","Fragments":["the"]},{"Key":"of anagram?.","Fragments":["Passing"]},{"Key":"anagram?. Passing","Fragments":["in"]},{"Key":"Passing in","Fragments":["the"]},{"Key":"parameters already","Fragments":["lowercased"]},{"Key":"already lowercased","Fragments":["and"]},{"Key":"lowercased and","Fragments":["sorted"]},{"Key":"sorted I","Fragments":["think"]},{"Key":"think reduces","Fragments":["the"]},{"Key":"reduces the","Fragments":["utility","character"]},{"Key":"the utility","Fragments":["of"]},{"Key":"utility of","Fragments":["anagram?"]},{"Key":"of anagram?","Fragments":["and"]},{"Key":"anagram? and","Fragments":["is"]},{"Key":"somewhat burdensome","Fragments":["to"]},{"Key":"burdensome to","Fragments":["the"]},{"Key":" True","Fragments":["enough,","enough."]},{"Key":"True enough,","Fragments":["though"]},{"Key":"enough, though","Fragments":["you"]},{"Key":"though you","Fragments":["could"]},{"Key":"a \"preprocess\"","Fragments":["function"]},{"Key":"\"preprocess\" function","Fragments":["that"]},{"Key":"downcasing and","Fragments":["sorting","sorting"]},{"Key":"sorting in","Fragments":["which"]},{"Key":"which case","Fragments":["the"]},{"Key":"check would","Fragments":["just"]},{"Key":"comparison of","Fragments":["two"]},{"Key":"two preprocessed","Fragments":["words."]},{"Key":"You're having","Fragments":["a"]},{"Key":"a limited","Fragments":["notion","list","set","number"]},{"Key":"limited notion","Fragments":["of"]},{"Key":"of punctuation,","Fragments":["there's"]},{"Key":"punctuation, there's","Fragments":["plenty"]},{"Key":"there's plenty","Fragments":["more"]},{"Key":"plenty more","Fragments":["of"]},{"Key":"in unicode.","Fragments":[";)"]},{"Key":"Just because","Fragments":["pipelines"]},{"Key":"because pipelines","Fragments":["are"]},{"Key":"pipelines are","Fragments":["available","also"]},{"Key":"are available","Fragments":["doesn't","(i.e."]},{"Key":"available doesn't","Fragments":["mean"]},{"Key":"doesn't mean","Fragments":["you","you"]},{"Key":"mean you","Fragments":["have","should\""]},{"Key":"the time.","Fragments":["In","What","But"]},{"Key":"time. In","Fragments":["particular"]},{"Key":"In particular","Fragments":["there's"]},{"Key":"particular there's","Fragments":["nothing"]},{"Key":"there's nothing","Fragments":["wrong"]},{"Key":"with writing","Fragments":["`String.split(phase,"]},{"Key":"writing `String.split(phase,","Fragments":["\""]},{"Key":"`String.split(phase, \"","Fragments":["\")`"]},{"Key":"\" \")`","Fragments":["instead"]},{"Key":"\")` instead","Fragments":["of"]},{"Key":"of `phase","Fragments":["|\u003e"]},{"Key":"`phase |\u003e","Fragments":["String.split`."]},{"Key":" `Dict.get`","Fragments":["and"]},{"Key":"`Dict.get` and","Fragments":["`Dict.put`","`Dict.put`.","`Dict.put`?"]},{"Key":"and `Dict.put`","Fragments":["can"]},{"Key":"`Dict.put` can","Fragments":["be","often"]},{"Key":"be combined,","Fragments":["take"]},{"Key":"combined, take","Fragments":["a"]},{"Key":" `Enum.first/1`","Fragments":["isn't"]},{"Key":"`Enum.first/1` isn't","Fragments":["really"]},{"Key":"really needed","Fragments":["as","in"]},{"Key":"know you're","Fragments":["dealing","trying"]},{"Key":"you're dealing","Fragments":["with"]},{"Key":"dealing with","Fragments":["lists.","Unicode.","to_char_list"]},{"Key":"with lists.","Fragments":["`hd/1`"]},{"Key":"lists. `hd/1`","Fragments":["will"]},{"Key":"`hd/1` will","Fragments":["do"]},{"Key":"will do","Fragments":["just","just","the","the","both"]},{"Key":"just fine.","Fragments":["Alternatively","I","Of"]},{"Key":"fine. Alternatively","Fragments":["`lc"]},{"Key":"Alternatively `lc","Fragments":["[w]"]},{"Key":"`lc [w]","Fragments":["inlist"]},{"Key":"[w] inlist","Fragments":["Regex.scan(%r/\\w+/g,"]},{"Key":"inlist Regex.scan(%r/\\w+/g,","Fragments":["string),"]},{"Key":"Regex.scan(%r/\\w+/g, string),","Fragments":["do:"]},{"Key":"string), do:","Fragments":["w`."]},{"Key":"about as","Fragments":["optimised"]},{"Key":"as optimised","Fragments":["as"]},{"Key":"could squeeze","Fragments":["it."]},{"Key":"- `String.codepoints`","Fragments":["is"]},{"Key":"`String.codepoints` is","Fragments":["faster","faster"]},{"Key":"is faster","Fragments":["than","than","than","though."]},{"Key":"- Sorting","Fragments":["the"]},{"Key":"Sorting the","Fragments":["list"]},{"Key":"of chars","Fragments":["is"]},{"Key":"chars is","Fragments":["about","shouting,"]},{"Key":"about twice","Fragments":["as","as"]},{"Key":"twice as","Fragments":["fast","long","long","fast."]},{"Key":"as fast","Fragments":["as"]},{"Key":"fast as","Fragments":["building","well,"]},{"Key":"as building","Fragments":["a"]},{"Key":"a hash","Fragments":["of","with"]},{"Key":"hash of","Fragments":["letter"]},{"Key":"of letter","Fragments":["counts","to","to"]},{"Key":"counts in","Fragments":["my"]},{"Key":" (Edit:","Fragments":["just"]},{"Key":"(Edit: just","Fragments":["noticed"]},{"Key":"just noticed","Fragments":["this","that.","I"]},{"Key":"noticed this","Fragments":["is"]},{"Key":"previous iteration,","Fragments":["guess","so"]},{"Key":"iteration, guess","Fragments":["I"]},{"Key":"I clicked","Fragments":["the"]},{"Key":"clicked the","Fragments":["wrong"]},{"Key":"wrong link,","Fragments":["my"]},{"Key":"link, my","Fragments":["comments"]},{"Key":"my comments","Fragments":["are","on"]},{"Key":"comments are","Fragments":["valid"]},{"Key":"are valid","Fragments":["for","points,"]},{"Key":"valid for","Fragments":["version"]},{"Key":"for version","Fragments":["5"]},{"Key":"version 5","Fragments":["as"]},{"Key":"5 as","Fragments":["well"]},{"Key":" `String.codepoints`","Fragments":["is"]},{"Key":"than `String.graphemes`","Fragments":["because"]},{"Key":"`String.graphemes` because","Fragments":["it"]},{"Key":"something different.","Fragments":["Question"]},{"Key":"different. Question","Fragments":["is"]},{"Key":"Question is","Fragments":["whether"]},{"Key":"is whether","Fragments":["you"]},{"Key":"support multi-codepoint","Fragments":["graphemes","graphemes"]},{"Key":"multi-codepoint graphemes","Fragments":["(i.e.","correctly."]},{"Key":"graphemes (i.e.","Fragments":["e"]},{"Key":"(i.e. e","Fragments":["and"]},{"Key":"e and","Fragments":["an"]},{"Key":"and an","Fragments":["accent","`if`.","Enumerator?"]},{"Key":"an accent","Fragments":["on"]},{"Key":"accent on","Fragments":["e"]},{"Key":"on e","Fragments":["as"]},{"Key":"e as","Fragments":["separate"]},{"Key":"as separate","Fragments":["codepoints).","functions,","\"cond\""]},{"Key":"separate codepoints).","Fragments":["In"]},{"Key":"codepoints). In","Fragments":["most"]},{"Key":"In most","Fragments":["cases"]},{"Key":"most cases","Fragments":["you'll"]},{"Key":"cases you'll","Fragments":["be"]},{"Key":"be fine","Fragments":["with","in"]},{"Key":"with `codepoints`","Fragments":["but"]},{"Key":"`codepoints` but","Fragments":["`graphemes`"]},{"Key":"but `graphemes`","Fragments":["is"]},{"Key":"`graphemes` is","Fragments":["probably"]},{"Key":"probably closer","Fragments":["to"]},{"Key":"write `candidates","Fragments":["|\u003e"]},{"Key":"|\u003e Enum.filter(\u0026anagram?(word,","Fragments":["normalized,"]},{"Key":"Enum.filter(\u0026anagram?(word, normalized,","Fragments":["\u00261))`"]},{"Key":"normalized, \u00261))`","Fragments":["as"]},{"Key":"\u00261))` as","Fragments":["`Enum.filter(candidates,"]},{"Key":"as `Enum.filter(candidates,","Fragments":["\u0026anagram?(word,"]},{"Key":"`Enum.filter(candidates, \u0026anagram?(word,","Fragments":["normalized,"]},{"Key":"\u0026anagram?(word, normalized,","Fragments":["\u00261)`."]},{"Key":"normalized, \u00261)`.","Fragments":["Pipelines"]},{"Key":"\u00261)`. Pipelines","Fragments":["are"]},{"Key":"Pipelines are","Fragments":["just"]},{"Key":"a convenience","Fragments":["for","for"]},{"Key":"convenience for","Fragments":["writing","writing"]},{"Key":"for writing","Fragments":["`f(g(h))`,","different","`foo(bar(baz,","to"]},{"Key":"writing `f(g(h))`,","Fragments":["they're"]},{"Key":"`f(g(h))`, they're","Fragments":["not"]},{"Key":"they're not","Fragments":["really","a","the","strictly"]},{"Key":"really intended","Fragments":["as"]},{"Key":"intended as","Fragments":["a","a","a"]},{"Key":"a general","Fragments":["function","rule","replacement","function","convention","note,","problem"]},{"Key":"general function","Fragments":["application","(getting","(`reduce`)"]},{"Key":"function application","Fragments":["syntax."]},{"Key":"Hey @arlene,","Fragments":["thanks"]},{"Key":"@arlene, thanks","Fragments":["for"]},{"Key":"While looking","Fragments":["through"]},{"Key":"the `Regex`","Fragments":["documentation,"]},{"Key":"`Regex` documentation,","Fragments":["I"]},{"Key":"documentation, I","Fragments":["discovered"]},{"Key":"discovered unicode","Fragments":["specific"]},{"Key":"unicode specific","Fragments":["character"]},{"Key":"specific character","Fragments":["classes,"]},{"Key":"character classes,","Fragments":["which","though"]},{"Key":"classes, which","Fragments":["I"]},{"Key":"second iteration","Fragments":["to","soon"]},{"Key":"iteration to","Fragments":["match"]},{"Key":"match punctuation","Fragments":["and"]},{"Key":"punctuation and","Fragments":["symbols.","splitting","digits","do","then"]},{"Key":"and symbols.","Fragments":["Does"]},{"Key":"symbols. Does","Fragments":["that"]},{"Key":"that solve","Fragments":["the"]},{"Key":"solve the","Fragments":["problem","problem","reverse,","problem."]},{"Key":"problem you","Fragments":["wanted"]},{"Key":"wanted me","Fragments":["to"]},{"Key":"at `Regex.scan`","Fragments":["for?","for"]},{"Key":" Concerning","Fragments":["the"]},{"Key":"Concerning the","Fragments":["usage"]},{"Key":"the usage","Fragments":["of"]},{"Key":"operator, I","Fragments":["agree"]},{"Key":"you on","Fragments":["that","the"]},{"Key":"that particular","Fragments":["instance."]},{"Key":"particular instance.","Fragments":["I"]},{"Key":"function, though,","Fragments":["because"]},{"Key":"though, because","Fragments":["I"]},{"Key":"think putting","Fragments":["the"]},{"Key":"top and","Fragments":["all"]},{"Key":"the transforming","Fragments":["functions"]},{"Key":"transforming functions","Fragments":["underneath"]},{"Key":"functions underneath","Fragments":["it"]},{"Key":"underneath it","Fragments":["reads"]},{"Key":"reads and","Fragments":["looks"]},{"Key":"and looks","Fragments":["very","rather","for"]},{"Key":"very well.","Fragments":["Would","The","It's","I","`blank?`"]},{"Key":"well. Would","Fragments":["you"]},{"Key":"agree on","Fragments":["that?","Stream.chunk/3"]},{"Key":"Using `Dict.update`","Fragments":["makes"]},{"Key":"`Dict.update` makes","Fragments":["the"]},{"Key":"function a","Fragments":["one-liner,","private"]},{"Key":"a one-liner,","Fragments":["which","or","it's"]},{"Key":"one-liner, which","Fragments":["makes"]},{"Key":"me happy","Fragments":[":).","about"]},{"Key":"happy :).","Fragments":["Overall"]},{"Key":":). Overall","Fragments":["I'm"]},{"Key":"Overall I'm","Fragments":["pretty"]},{"Key":"pretty content","Fragments":["with"]},{"Key":"content with","Fragments":["the"]},{"Key":"shape and","Fragments":["readbility"]},{"Key":"and readbility","Fragments":["of"]},{"Key":"readbility of","Fragments":["the"]},{"Key":"had mentioned","Fragments":["before,"]},{"Key":"mentioned before,","Fragments":["a"]},{"Key":"before, a","Fragments":["filter"]},{"Key":"a filter","Fragments":["would","function."]},{"Key":"filter would","Fragments":["be"]},{"Key":"than foldr","Fragments":["here,"]},{"Key":"foldr here,","Fragments":["since"]},{"Key":"here, since","Fragments":["you"]},{"Key":"manage the","Fragments":["accumulator","site?"]},{"Key":"the accumulator","Fragments":["yourself.","explicitly.","pushing","to","and","only","in","is","values","is","list","is","is","to","variable","assignment."]},{"Key":"You're still","Fragments":["taking"]},{"Key":"still taking","Fragments":["the"]},{"Key":"of identifying","Fragments":["what"]},{"Key":"identifying what","Fragments":["you"]},{"Key":"want and","Fragments":["kicking","then","then","operate","then"]},{"Key":"and kicking","Fragments":["that"]},{"Key":"kicking that","Fragments":["out"]},{"Key":"string, then","Fragments":["splitting","split"]},{"Key":"A different","Fragments":["approach,"]},{"Key":"different approach,","Fragments":["one"]},{"Key":"approach, one","Fragments":["which","that"]},{"Key":"one which","Fragments":["uses"]},{"Key":"which uses","Fragments":["`Regex.scan`,","the"]},{"Key":"uses `Regex.scan`,","Fragments":["is"]},{"Key":"`Regex.scan`, is","Fragments":["to"]},{"Key":"identify groups","Fragments":["of"]},{"Key":"groups of","Fragments":["consecutive","characters","characters","characters"]},{"Key":"of consecutive","Fragments":["\"desired\""]},{"Key":"consecutive \"desired\"","Fragments":["characters."]},{"Key":"\"desired\" characters.","Fragments":["That"]},{"Key":"characters. That","Fragments":["way"]},{"Key":"replace `String.replace`,","Fragments":["`String.split`"]},{"Key":"`String.replace`, `String.split`","Fragments":["and"]},{"Key":"and `String.reject`","Fragments":["by"]},{"Key":"`String.reject` by","Fragments":["a"]},{"Key":"a call","Fragments":["to","to","to","since","to","to","to","to","to","to","to","to","to","to","like:"]},{"Key":"are `\u003c\u003c\u003e\u003e`,","Fragments":["`_codepoint`"]},{"Key":"`\u003c\u003c\u003e\u003e`, `_codepoint`","Fragments":["and"]},{"Key":"`_codepoint` and","Fragments":["`\u003c\u003c??\u003e\u003e`"]},{"Key":"and `\u003c\u003c??\u003e\u003e`","Fragments":["?"]},{"Key":"guards for","Fragments":["validate?"]},{"Key":"These way","Fragments":["you"]},{"Key":"lot going","Fragments":["on"]},{"Key":"on in","Fragments":["`anagram_of`"]},{"Key":"in `anagram_of`","Fragments":["and"]},{"Key":"`anagram_of` and","Fragments":["it's"]},{"Key":"that clear,","Fragments":["especially"]},{"Key":"clear, especially","Fragments":["with","since"]},{"Key":"with names","Fragments":["like","that"]},{"Key":"names like","Fragments":["`lw`"]},{"Key":"like `lw`","Fragments":["and"]},{"Key":"`lw` and","Fragments":["`sw`,"]},{"Key":"and `sw`,","Fragments":["what"]},{"Key":"`sw`, what","Fragments":["that"]},{"Key":"might be.","Fragments":["Could","Maybe"]},{"Key":"be. Could","Fragments":["you"]},{"Key":"gain some","Fragments":["clarity"]},{"Key":"some clarity","Fragments":["by"]},{"Key":"clarity by","Fragments":["breaking"]},{"Key":"different parts","Fragments":["into"]},{"Key":"parts into","Fragments":["separate"]},{"Key":"separate functions,","Fragments":["with","but"]},{"Key":"functions, with","Fragments":["helpful"]},{"Key":"with helpful","Fragments":["descriptive"]},{"Key":"helpful descriptive","Fragments":["names?"]},{"Key":"Hey @barry,","Fragments":["thanks"]},{"Key":"@barry, thanks","Fragments":["for"]},{"Key":"to apply","Fragments":["your","your","your","them"]},{"Key":"apply your","Fragments":["advice,","advice,","suggestions"]},{"Key":"your advice,","Fragments":["but","since"]},{"Key":"advice, but","Fragments":["I"]},{"Key":"be missing","Fragments":["something","something,","something."]},{"Key":"something because","Fragments":["I"]},{"Key":"this code.","Fragments":["Would","Thank"]},{"Key":"code. Would","Fragments":["you","that"]},{"Key":"be willing","Fragments":["to","to"]},{"Key":"willing to","Fragments":["elaborate","share","bet","give"]},{"Key":"to elaborate","Fragments":["with"]},{"Key":"elaborate with","Fragments":["a"]},{"Key":"code example?","Fragments":["I"]},{"Key":"example? I","Fragments":["have"]},{"Key":"a feeling","Fragments":["there's"]},{"Key":"feeling there's","Fragments":["a"]},{"Key":"a technique","Fragments":["you","using"]},{"Key":"technique you","Fragments":["have"]},{"Key":"you converting","Fragments":["the"]},{"Key":"binary input","Fragments":["to"]},{"Key":"char list","Fragments":["first?","back","to","so"]},{"Key":"list first?","Fragments":["'cause"]},{"Key":"first? 'cause","Fragments":["then"]},{"Key":"'cause then","Fragments":["I"]},{"Key":"few ways","Fragments":["to","and"]},{"Key":"advice, since","Fragments":["you"]},{"Key":"use `length(list)`","Fragments":["in"]},{"Key":"`length(list)` in","Fragments":["a"]},{"Key":"guard clause,","Fragments":["but"]},{"Key":"clause, but","Fragments":["then","I'm"]},{"Key":"then you'd","Fragments":["have"]},{"Key":"the char","Fragments":["list","sequences"]},{"Key":"binary for","Fragments":["the"]},{"Key":"the output...","Fragments":["hmm..."]},{"Key":"Yeah, if","Fragments":["you"]},{"Key":"share an","Fragments":["example,"]},{"Key":"an example,","Fragments":["that"]},{"Key":"example, that","Fragments":["would"]},{"Key":"much appreciated.","Fragments":["Thanks"]},{"Key":"appreciated. Thanks","Fragments":["as"]},{"Key":"Thanks as","Fragments":["always!","always","always","always,"]},{"Key":", in","Fragments":["this"]},{"Key":"example is","Fragments":["better"]},{"Key":"is better","Fragments":["to","readable","written","written","expressed","than"]},{"Key":"work directly","Fragments":["with"]},{"Key":"with strings.","Fragments":["And"]},{"Key":"strings. And","Fragments":["one"]},{"Key":"And one","Fragments":["guard"]},{"Key":"one guard","Fragments":["for"]},{"Key":"for string","Fragments":["is","is","joining","matching."]},{"Key":"is `size(phone)`.","Fragments":["And"]},{"Key":"`size(phone)`. And","Fragments":["pattern"]},{"Key":"And pattern","Fragments":["matching"]},{"Key":"complicated ,","Fragments":["think"]},{"Key":", think","Fragments":["on"]},{"Key":"like bynary","Fragments":["(\u003c\u003c"]},{"Key":"bynary (\u003c\u003c","Fragments":["\u003e\u003e)"]},{"Key":"cool. I","Fragments":["didn't","actually","just"]},{"Key":"the `size`","Fragments":["function"]},{"Key":"`size` function","Fragments":["for"]},{"Key":"for strings.","Fragments":["I'm","`String.to_char_list!`","Strings","I"]},{"Key":"strings. I'm","Fragments":["still"]},{"Key":"suggestions to","Fragments":["simplify","see"]},{"Key":"to duplicate","Fragments":["the"]},{"Key":"duplicate the","Fragments":["logic"]},{"Key":"of replacing","Fragments":["the","what","the","characters","characters","what","the"]},{"Key":"replacing the","Fragments":["phone","characters","punctuation","variable"]},{"Key":"the phone","Fragments":["number","number","number","number.","number","number","number","number"]},{"Key":"phone number","Fragments":["with",",","would","so","and","which","if","is"]},{"Key":"number with","Fragments":["ten"]},{"Key":"with ten","Fragments":["0s"]},{"Key":"ten 0s","Fragments":["in"]},{"Key":"0s in","Fragments":["two"]},{"Key":"in two","Fragments":["different","funs","empty","different","smallers"]},{"Key":"different places,","Fragments":["so"]},{"Key":"places, so","Fragments":["that"]},{"Key":"that led","Fragments":["me"]},{"Key":"led me","Fragments":["to"]},{"Key":"to stripping","Fragments":["the"]},{"Key":"the country","Fragments":["code"]},{"Key":"country code","Fragments":["first"]},{"Key":"code first","Fragments":["and"]},{"Key":"first and","Fragments":["then","private","turns","removing","then","then","second"]},{"Key":"then validating.","Fragments":["I"]},{"Key":"validating. I","Fragments":["know"]},{"Key":"trying not","Fragments":["to"]},{"Key":"just \"give","Fragments":["away"]},{"Key":"\"give away","Fragments":["the"]},{"Key":"away the","Fragments":["answer\",","fact","need","details"]},{"Key":"the answer\",","Fragments":["but"]},{"Key":"answer\", but","Fragments":["I'm"]},{"Key":"I'm kind","Fragments":["of","of"]},{"Key":" @darien","Fragments":["`Enum.reduce`"]},{"Key":"@darien `Enum.reduce`","Fragments":["is"]},{"Key":"`Enum.reduce` is","Fragments":["the","mainly","a","preferred","more","preferred","somewhat"]},{"Key":"the generally","Fragments":["preferred"]},{"Key":"generally preferred","Fragments":["way","to"]},{"Key":"preferred way","Fragments":["of"]},{"Key":"writing `List.foldl`.","Fragments":["I"]},{"Key":"`List.foldl`. I","Fragments":["don't"]},{"Key":"any explicit","Fragments":["recursion"]},{"Key":"recursion here,","Fragments":["btw."]},{"Key":"The `initial_counts`","Fragments":["function"]},{"Key":"`initial_counts` function","Fragments":["could"]},{"Key":"an attribute","Fragments":["(those","behind","as","of","reader","for","and"]},{"Key":"attribute (those","Fragments":["are"]},{"Key":"(those are","Fragments":["private"]},{"Key":"private to","Fragments":["the","the"]},{"Key":"module by","Fragments":["default"]},{"Key":"by default","Fragments":["and","and"]},{"Key":"default and","Fragments":["often","only"]},{"Key":"and often","Fragments":["used","results"]},{"Key":"often used","Fragments":["as"]},{"Key":"as constants):","Fragments":["`@darien"]},{"Key":"constants): `@darien","Fragments":["HashDict.new"]},{"Key":"`@darien HashDict.new","Fragments":["[{?A,"]},{"Key":"{?G, 0}]`,","Fragments":["use"]},{"Key":"0}]`, use","Fragments":["`@darien`"]},{"Key":"use `@darien`","Fragments":["in"]},{"Key":"`@darien` in","Fragments":["a"]},{"Key":"A style","Fragments":["point:"]},{"Key":"style point:","Fragments":["it's","in"]},{"Key":"point: it's","Fragments":["pretty"]},{"Key":"pretty rare","Fragments":["to","because"]},{"Key":"rare to","Fragments":["see"]},{"Key":"parentheses omitted","Fragments":["in"]},{"Key":"omitted in","Fragments":["the","the"]},{"Key":"function head","Fragments":["(the","with"]},{"Key":"head (the","Fragments":["part"]},{"Key":"(the part","Fragments":["between"]},{"Key":"part between","Fragments":["\"def\"/\"defp\""]},{"Key":"between \"def\"/\"defp\"","Fragments":["and"]},{"Key":"\"def\"/\"defp\" and","Fragments":["\"do\")."]},{"Key":"The `(\u00261","Fragments":["=="]},{"Key":"`(\u00261 ==","Fragments":["nucleotide)`"]},{"Key":"== nucleotide)`","Fragments":["should","in"]},{"Key":"nucleotide)` should","Fragments":["be"]},{"Key":"be `\u0026(\u00261","Fragments":["=="]},{"Key":"`\u0026(\u00261 ==","Fragments":["nucleotide)`"]},{"Key":"nucleotide)` in","Fragments":["newer"]},{"Key":"in newer","Fragments":["Elixir"]},{"Key":"newer Elixir","Fragments":["releases"]},{"Key":"Elixir releases","Fragments":["(omitting"]},{"Key":"releases (omitting","Fragments":["the"]},{"Key":"(omitting the","Fragments":["`\u0026`"]},{"Key":"`\u0026` capture","Fragments":["operator"]},{"Key":" @aileen","Fragments":["Confirmed."]},{"Key":"@aileen Confirmed.","Fragments":["The"]},{"Key":"Confirmed. The","Fragments":["cons"]},{"Key":"The cons","Fragments":["(`[|]`)"]},{"Key":"cons (`[|]`)","Fragments":["is"]},{"Key":"(`[|]`) is","Fragments":["the"]},{"Key":"last expression","Fragments":["so","in","of","is","of","and","to","of","of","of","is","of","of"]},{"Key":"expression so","Fragments":["this"]},{"Key":"not tail","Fragments":["recursive.","recursive","recursive,","recursive.","recursive.","recursive)","call"]},{"Key":"tail recursive.","Fragments":["That's"]},{"Key":"recursive. That's","Fragments":["why"]},{"Key":"That's why","Fragments":["recursive","it","you"]},{"Key":"why recursive","Fragments":["algorithms"]},{"Key":"recursive algorithms","Fragments":["that"]},{"Key":"algorithms that","Fragments":["return"]},{"Key":"list so","Fragments":["often","I","that"]},{"Key":"so often","Fragments":["pass"]},{"Key":"often pass","Fragments":["the"]},{"Key":"the generated","Fragments":["list"]},{"Key":"generated list","Fragments":["in"]},{"Key":"accumulator and","Fragments":["reverse","a","function","therefore"]},{"Key":"reverse it","Fragments":["at"]},{"Key":"it at","Fragments":["the","that"]},{"Key":"do wonder","Fragments":["why"]},{"Key":"wonder why","Fragments":["the","you"]},{"Key":"why the","Fragments":["explicit","phone"]},{"Key":"explicit recursion.","Fragments":["As","Explicit","Did","If"]},{"Key":"recursion. As","Fragments":["a"]},{"Key":"general rule","Fragments":["in"]},{"Key":"rule in","Fragments":["functional"]},{"Key":"in functional","Fragments":["programming","languages!","languages","programming).","programming).","programming).","programming"]},{"Key":"programming it's","Fragments":["better"]},{"Key":"call a","Fragments":["higher","function","function"]},{"Key":"level function","Fragments":["such"]},{"Key":"function such","Fragments":["as","as"]},{"Key":"as map,","Fragments":["filter"]},{"Key":"map, filter","Fragments":["or","and"]},{"Key":"filter or","Fragments":["reduce","sort?"]},{"Key":"reduce instead","Fragments":["of"]},{"Key":"doing explicit","Fragments":["recursion."]},{"Key":"recursion. Explicit","Fragments":["recursion"]},{"Key":"Explicit recursion","Fragments":["is"]},{"Key":"actually rarely","Fragments":["needed."]},{"Key":"Heh, didn't","Fragments":["know"]},{"Key":"list transform","Fragments":["in"]},{"Key":"transform in","Fragments":["`HashDict.new`,"]},{"Key":"in `HashDict.new`,","Fragments":["guess"]},{"Key":"`HashDict.new`, guess","Fragments":["you"]},{"Key":"guess you","Fragments":["learn","would","wouldn't","have"]},{"Key":"you learn","Fragments":["something","about","the"]},{"Key":"learn something","Fragments":["every"]},{"Key":"something every","Fragments":["day."]},{"Key":"say there","Fragments":["is"]},{"Key":"with putting","Fragments":["the","all"]},{"Key":"contents of","Fragments":["`inc`","a","a","`anagram?`"]},{"Key":"of `inc`","Fragments":["in"]},{"Key":"`inc` in","Fragments":["an"]},{"Key":"function (`fn","Fragments":["..."]},{"Key":"(`fn ...","Fragments":["-\u003e"]},{"Key":"... -\u003e","Fragments":["..."]},{"Key":"... end`)","Fragments":["but"]},{"Key":"end`) but","Fragments":["this"]},{"Key":" @callie","Fragments":["-"]},{"Key":"@callie -","Fragments":["thanks,"]},{"Key":"- thanks,","Fragments":["will"]},{"Key":"thanks, will","Fragments":["add"]},{"Key":"will add","Fragments":["parentheses!","another","another"]},{"Key":"add parentheses!","Fragments":["I've"]},{"Key":"parentheses! I've","Fragments":["been"]},{"Key":"been basically","Fragments":["hacking"]},{"Key":"basically hacking","Fragments":["around"]},{"Key":"hacking around","Fragments":["to"]},{"Key":"around to","Fragments":["get","provide","nitpick"]},{"Key":"get partial","Fragments":["application"]},{"Key":"application to","Fragments":["work"]},{"Key":"of examples","Fragments":["I've"]},{"Key":"examples I've","Fragments":["seen"]},{"Key":"seen have","Fragments":["the"]},{"Key":"ampersand outside","Fragments":["the"]},{"Key":"the brackets","Fragments":["but"]},{"Key":"brackets but","Fragments":["I"]},{"Key":"get it","Fragments":["to","right","to","to","down","all","to"]},{"Key":"to work.","Fragments":["Sounds","I","I","My"]},{"Key":"work. Sounds","Fragments":["like"]},{"Key":"Sounds like","Fragments":["I"]},{"Key":"Re: constants","Fragments":["-"]},{"Key":"constants -","Fragments":["this"]},{"Key":"interesting for","Fragments":["me."]},{"Key":"The language","Fragments":["I"]},{"Key":"language I","Fragments":["use","did","already"]},{"Key":"most is","Fragments":["Ruby,"]},{"Key":"is Ruby,","Fragments":["and"]},{"Key":"Ruby, and","Fragments":["in"]},{"Key":"Ruby I","Fragments":["never"]},{"Key":"I never","Fragments":["use","would","think","really"]},{"Key":"never use","Fragments":["constants,","them"]},{"Key":"use constants,","Fragments":["or"]},{"Key":"constants, or","Fragments":["indeed"]},{"Key":"or indeed","Fragments":["instance"]},{"Key":"indeed instance","Fragments":["variables"]},{"Key":"instance variables","Fragments":["directly","and"]},{"Key":"variables directly","Fragments":["(outside"]},{"Key":"directly (outside","Fragments":["of"]},{"Key":"(outside of","Fragments":["a"]},{"Key":"a constructor).","Fragments":["I"]},{"Key":"constructor). I","Fragments":["make"]},{"Key":"of accessing","Fragments":["*everything*"]},{"Key":"accessing *everything*","Fragments":["through"]},{"Key":"*everything* through","Fragments":["methods,"]},{"Key":"through methods,","Fragments":["and"]},{"Key":"methods, and","Fragments":["as","I'm"]},{"Key":"a result","Fragments":["it","of","instead"]},{"Key":"result it","Fragments":["is"]},{"Key":"of indifference","Fragments":["to"]},{"Key":"indifference to","Fragments":["the"]},{"Key":"code whether","Fragments":["the"]},{"Key":"using is","Fragments":["a","the"]},{"Key":"a constant,","Fragments":["a"]},{"Key":"constant, a","Fragments":["method"]},{"Key":"method call","Fragments":["or","inline"]},{"Key":"call or","Fragments":["a"]},{"Key":"local variable,","Fragments":["and","an"]},{"Key":"variable, and","Fragments":["refactoring"]},{"Key":"and refactoring","Fragments":["becomes"]},{"Key":"refactoring becomes","Fragments":["a"]},{"Key":"lot easier","Fragments":["as","to","to"]},{"Key":"I created","Fragments":["`initial_counts`","the"]},{"Key":"created `initial_counts`","Fragments":["as"]},{"Key":"`initial_counts` as","Fragments":["an"]},{"Key":"an attribute,","Fragments":["is","or"]},{"Key":"attribute, is","Fragments":["there"]},{"Key":"an Elixir","Fragments":["way","newbie","PR","idiom"]},{"Key":"to hide","Fragments":["an"]},{"Key":"hide an","Fragments":["attribute"]},{"Key":"attribute behind","Fragments":["a"]},{"Key":"behind a","Fragments":["function?","function"]},{"Key":"also slightly","Fragments":["uncomfortable"]},{"Key":"slightly uncomfortable","Fragments":["with"]},{"Key":"uncomfortable with","Fragments":["having"]},{"Key":"with having","Fragments":["it"]},{"Key":"attribute as","Fragments":["it"]},{"Key":"really isn't","Fragments":["an"]},{"Key":"isn't an","Fragments":["attribute"]},{"Key":"attribute of","Fragments":["DNA,"]},{"Key":"of DNA,","Fragments":["but"]},{"Key":"DNA, but","Fragments":["rather"]},{"Key":"rather an","Fragments":["initial"]},{"Key":"an initial","Fragments":["value"]},{"Key":"initial value","Fragments":["specifically"]},{"Key":"value specifically","Fragments":["for"]},{"Key":"functions *in*","Fragments":["the"]},{"Key":"*in* the","Fragments":["DNA"]},{"Key":"the DNA","Fragments":["module.","four"]},{"Key":"DNA module.","Fragments":["But"]},{"Key":"module. But","Fragments":["I"]},{"Key":"fix this","Fragments":["-"]},{"Key":"this -","Fragments":["I"]},{"Key":"it being","Fragments":["a","calculated"]},{"Key":"Well how","Fragments":["I"]},{"Key":" @simone","Fragments":["'ATCG'","\"\"\"","nucleotide_counts([char])"]},{"Key":" Return","Fragments":["a"]},{"Key":"Return a","Fragments":["new"]},{"Key":"new HashDict","Fragments":["with"]},{"Key":"HashDict with","Fragments":["the"]},{"Key":"of every","Fragments":["nucleotide.","time.","recursive","letter.","new"]},{"Key":"@simone nucleotide_counts([char])","Fragments":["::"]},{"Key":"nucleotide_counts([char]) ::","Fragments":["HashDict.t"]},{"Key":"def nucleotide_counts(dna)","Fragments":["do"]},{"Key":" Enum.reduce(dna,","Fragments":["HashDict.new(Enum.map(@simone,"]},{"Key":"Enum.reduce(dna, HashDict.new(Enum.map(@simone,","Fragments":["\u0026{\u00261,"]},{"Key":"HashDict.new(Enum.map(@simone, \u0026{\u00261,","Fragments":["0})),"]},{"Key":"\u0026{\u00261, 0})),","Fragments":["fn"]},{"Key":"0})), fn","Fragments":["nt,"]},{"Key":"fn nt,","Fragments":["counts"]},{"Key":"nt, counts","Fragments":["-\u003e"]},{"Key":" Dict.update(counts,","Fragments":["nt,","word,"]},{"Key":"Dict.update(counts, nt,","Fragments":["0,"]},{"Key":"nt, 0,","Fragments":["\u0026(\u00261+1))"]},{"Key":"That is,","Fragments":["I","I"]},{"Key":"is, I","Fragments":["created","have","wanted"]},{"Key":"created the","Fragments":["HashMap"]},{"Key":"the HashMap","Fragments":["when"]},{"Key":"HashMap when","Fragments":["it"]},{"Key":"was needed","Fragments":["but"]},{"Key":"needed but","Fragments":["kept"]},{"Key":"but kept","Fragments":["the"]},{"Key":"different letters","Fragments":["as"]},{"Key":"letters as","Fragments":["a","defined"]},{"Key":"a constant","Fragments":["(remember","or"]},{"Key":"constant (remember","Fragments":["that"]},{"Key":"(remember that","Fragments":["`'ATCG'","`ATCG`"]},{"Key":"that `'ATCG'","Fragments":["=="]},{"Key":"`'ATCG' ==","Fragments":["[?A,"]},{"Key":"[?A, ?T,","Fragments":["?C,"]},{"Key":"You can't","Fragments":["hide"]},{"Key":"can't hide","Fragments":["attributes"]},{"Key":"hide attributes","Fragments":["behind"]},{"Key":"attributes behind","Fragments":["a"]},{"Key":"they work","Fragments":["at","fine."]},{"Key":"Erlang level.","Fragments":["That"]},{"Key":"level. That","Fragments":["said,"]},{"Key":"said, I","Fragments":["think"]},{"Key":"about modules","Fragments":["too"]},{"Key":"modules too","Fragments":["much"]},{"Key":"much in","Fragments":["an","the","elixir.","so","that","terms"]},{"Key":"an object-oriented","Fragments":["style."]},{"Key":"object-oriented style.","Fragments":["The"]},{"Key":"style. The","Fragments":["DNA"]},{"Key":"The DNA","Fragments":["module"]},{"Key":"DNA module","Fragments":["is"]},{"Key":"a collection","Fragments":["of","is"]},{"Key":"manipulate DNA,","Fragments":["it's"]},{"Key":"DNA, it's","Fragments":["not"]},{"Key":"an object","Fragments":["of","constructor"]},{"Key":"object of","Fragments":["DNA."]},{"Key":"of DNA.","Fragments":["Some"]},{"Key":"DNA. Some","Fragments":["modules"]},{"Key":"Some modules","Fragments":["are"]},{"Key":"modules are","Fragments":["more","simply","named","`CamelCase`."]},{"Key":"that (such","Fragments":["as"]},{"Key":"(such as","Fragments":["`HashDict`),","in","what","needing"]},{"Key":"as `HashDict`),","Fragments":["but"]},{"Key":"`HashDict`), but","Fragments":["most"]},{"Key":"but most","Fragments":["modules","of"]},{"Key":"most modules","Fragments":["are"]},{"Key":"are simply","Fragments":["collections","syntactic"]},{"Key":"simply collections","Fragments":["of"]},{"Key":"collections of","Fragments":["functions,"]},{"Key":"of functions,","Fragments":["a"]},{"Key":"functions, a","Fragments":["way"]},{"Key":"of grouping","Fragments":["them."]},{"Key":"The everything","Fragments":["through"]},{"Key":"everything through","Fragments":["a"]},{"Key":"method style","Fragments":["works"]},{"Key":"style works","Fragments":["great"]},{"Key":"works great","Fragments":["in"]},{"Key":"great in","Fragments":["Ruby","my"]},{"Key":"Ruby but","Fragments":["less","for"]},{"Key":"but less","Fragments":["well","so"]},{"Key":"less well","Fragments":["in"]},{"Key":"Elixir. Nullary","Fragments":["methods"]},{"Key":"Nullary methods","Fragments":["can"]},{"Key":"used of","Fragments":["course"]},{"Key":"course just","Fragments":["keep"]},{"Key":"value can't","Fragments":["(in"]},{"Key":"can't (in","Fragments":["general,"]},{"Key":"(in general,","Fragments":["don't"]},{"Key":"general, don't","Fragments":["know"]},{"Key":"how smart","Fragments":["Elixir/Erlang"]},{"Key":"smart Elixir/Erlang","Fragments":["is)"]},{"Key":"Elixir/Erlang is)","Fragments":["be"]},{"Key":"is) be","Fragments":["precomputed"]},{"Key":"be precomputed","Fragments":["so"]},{"Key":"precomputed so","Fragments":["it"]},{"Key":"be recalculated","Fragments":["every"]},{"Key":"recalculated every","Fragments":["time"]},{"Key":"time it's","Fragments":["used."]},{"Key":"expose your","Fragments":["constant"]},{"Key":"your constant","Fragments":["to"]},{"Key":"constant to","Fragments":["other","just"]},{"Key":"to other","Fragments":["module"]},{"Key":"other module","Fragments":["I'd"]},{"Key":"module I'd","Fragments":["say"]},{"Key":"say nullary","Fragments":["methods"]},{"Key":"nullary methods","Fragments":["are"]},{"Key":"to go,","Fragments":["accessing"]},{"Key":"go, accessing","Fragments":["attributes"]},{"Key":"accessing attributes","Fragments":["of"]},{"Key":"attributes of","Fragments":["other"]},{"Key":"other modules","Fragments":["is"]},{"Key":"modules is","Fragments":["a"]},{"Key":"bit involved","Fragments":["and"]},{"Key":"involved and","Fragments":["generally"]},{"Key":"and generally","Fragments":["requires"]},{"Key":"generally requires","Fragments":["the"]},{"Key":"module to","Fragments":["explicitly","call","have"]},{"Key":"to explicitly","Fragments":["export","define","use","call","checking"]},{"Key":"explicitly export","Fragments":["the","them."]},{"Key":"export the","Fragments":["attribute."]},{"Key":"For stuff","Fragments":["inside"]},{"Key":"stuff inside","Fragments":["your"]},{"Key":"inside your","Fragments":["own","regular"]},{"Key":"own module","Fragments":["attributes","and"]},{"Key":"attributes don't","Fragments":["have"]},{"Key":"much downsides","Fragments":["as"]},{"Key":"downsides as","Fragments":["you"]},{"Key":"can easily","Fragments":["find","be","switch","call"]},{"Key":"easily find","Fragments":["them"]},{"Key":"find them","Fragments":["when"]},{"Key":"them when","Fragments":["refactoring."]},{"Key":" @vena","Fragments":["I'm"]},{"Key":"@vena I'm","Fragments":["generally"]},{"Key":"I'm generally","Fragments":["allergic"]},{"Key":"generally allergic","Fragments":["to"]},{"Key":"allergic to","Fragments":["functions","seeing"]},{"Key":"functions spanning","Fragments":["over"]},{"Key":"spanning over","Fragments":["a"]},{"Key":"if at","Fragments":["all"]},{"Key":"all possible!","Fragments":["Usually"]},{"Key":"possible! Usually","Fragments":["a"]},{"Key":"Usually a","Fragments":["good"]},{"Key":"good sign","Fragments":["that"]},{"Key":"sign that","Fragments":["some"]},{"Key":"that some","Fragments":["low-level","time","of","tests"]},{"Key":"some low-level","Fragments":["stuff"]},{"Key":"low-level stuff","Fragments":["can"]},{"Key":"stuff can","Fragments":["be"]},{"Key":"be abstracted","Fragments":["away"]},{"Key":"abstracted away","Fragments":["to"]},{"Key":"away to","Fragments":["make"]},{"Key":"to chime","Fragments":["in"]},{"Key":"chime in","Fragments":["counter"]},{"Key":"in counter","Fragments":["to"]},{"Key":"counter to","Fragments":["@glenda"]},{"Key":"to @glenda","Fragments":["here"]},{"Key":"@glenda here","Fragments":["(sorry"]},{"Key":"here (sorry","Fragments":["@glenda!)"]},{"Key":"(sorry @glenda!)","Fragments":["and"]},{"Key":"@glenda!) and","Fragments":["say"]},{"Key":"and say","Fragments":["that","different"]},{"Key":"one exercise","Fragments":["where"]},{"Key":"exercise where","Fragments":["DRY"]},{"Key":"where DRY","Fragments":["is"]},{"Key":"DRY is","Fragments":["definitely"]},{"Key":"definitely something","Fragments":["that"]},{"Key":"will lead","Fragments":["to"]},{"Key":"lead to","Fragments":["less","very","endless","users","weird","ambiguities","less"]},{"Key":"to less","Fragments":["readable","lines"]},{"Key":"readable code.","Fragments":["I'm"]},{"Key":"I'm comfortable","Fragments":["with","with"]},{"Key":"comfortable with","Fragments":["the","reading"]},{"Key":"duplication of","Fragments":["the","the"]},{"Key":"text here","Fragments":["as"]},{"Key":"it serves","Fragments":["well"]},{"Key":"serves well","Fragments":["to"]},{"Key":"function extremely","Fragments":["clear."]},{"Key":"better fit","Fragments":["here"]},{"Key":"fit here","Fragments":["than"]},{"Key":"here than","Fragments":["guard"]},{"Key":"than guard","Fragments":["clauses..."]},{"Key":"guard clauses...","Fragments":["and"]},{"Key":"clauses... and","Fragments":["also,"]},{"Key":"and also,","Fragments":["do"]},{"Key":"also, do","Fragments":["you"]},{"Key":"definitions on","Fragments":["a","a","one"]},{"Key":"line ;-)","Fragments":["what"]},{"Key":";-) what","Fragments":["about"]},{"Key":"80 character","Fragments":["rule?!"]},{"Key":"character rule?!","Fragments":["Even"]},{"Key":"rule?! Even","Fragments":["just"]},{"Key":"Even just","Fragments":["for"]},{"Key":"of exercism,","Fragments":["most"]},{"Key":"exercism, most","Fragments":["of"]},{"Key":"function bodies","Fragments":["are"]},{"Key":"bodies are","Fragments":["off"]},{"Key":"are off","Fragments":["the"]},{"Key":"right of","Fragments":["the","the","course.","the"]},{"Key":"the “readable","Fragments":["but"]},{"Key":"“readable but","Fragments":["repetitive”"]},{"Key":"but repetitive”","Fragments":["version."]},{"Key":"repetitive” version.","Fragments":["I"]},{"Key":"how plain","Fragments":["the"]},{"Key":"plain the","Fragments":["mapping"]},{"Key":"between counts","Fragments":["and"]},{"Key":"strings is,","Fragments":["but"]},{"Key":"verse templates","Fragments":["could"]},{"Key":"templates could","Fragments":["probably"]},{"Key":"be separated","Fragments":["out."]},{"Key":"was guarding","Fragments":["for"]},{"Key":"guarding for","Fragments":["the"]},{"Key":"the null","Fragments":["value,"]},{"Key":"null value,","Fragments":["but"]},{"Key":"value, but","Fragments":["`List.zip/1`"]},{"Key":"but `List.zip/1`","Fragments":["handles"]},{"Key":"`List.zip/1` handles","Fragments":["that"]},{"Key":"handles that","Fragments":["for"]},{"Key":"for you.","Fragments":["Very"]},{"Key":"you. Very","Fragments":["nice."]},{"Key":"nice. I've","Fragments":["also"]},{"Key":"extract that","Fragments":["inline"]},{"Key":"that inline","Fragments":["anon"]},{"Key":"inline anon","Fragments":["function"]},{"Key":"anon function","Fragments":["to"]},{"Key":"named function.","Fragments":["It","I"]},{"Key":"function. It","Fragments":["works,","might"]},{"Key":"It works,","Fragments":["but"]},{"Key":"a deprecation","Fragments":["warning."]},{"Key":"deprecation warning.","Fragments":["I've"]},{"Key":"warning. I've","Fragments":["pushed"]},{"Key":"keeps that","Fragments":["function"]},{"Key":"function inline","Fragments":["and"]},{"Key":"inline and","Fragments":["uses","once"]},{"Key":"and uses","Fragments":["`List.zip/1'"]},{"Key":"uses `List.zip/1'","Fragments":["instead"]},{"Key":"`List.zip/1' instead","Fragments":["of"]},{"Key":" Note","Fragments":["that","also","that","how","how","how","that","how","how","how","how"]},{"Key":"Note that","Fragments":["`size`","you","`\\w`","the","when"]},{"Key":"that `size`","Fragments":["counts"]},{"Key":"`size` counts","Fragments":["the"]},{"Key":"counts the","Fragments":["number"]},{"Key":"of bytes","Fragments":["for"]},{"Key":"bytes for","Fragments":["a"]},{"Key":"string, not","Fragments":["the"]},{"Key":"code points.","Fragments":["Yes,"]},{"Key":"points. Yes,","Fragments":["it"]},{"Key":"Yes, it","Fragments":["works","does"]},{"Key":"in guards","Fragments":["but","and"]},{"Key":"guards but","Fragments":["it","that","no"]},{"Key":"return bad","Fragments":["results"]},{"Key":"bad results","Fragments":["for"]},{"Key":"results for","Fragments":["non-ASCII"]},{"Key":"for non-ASCII","Fragments":["characters.","characters"]},{"Key":"non-ASCII characters.","Fragments":["In"]},{"Key":"characters. In","Fragments":["this"]},{"Key":"exercise that","Fragments":["isn't"]},{"Key":"problem but","Fragments":["you","because"]},{"Key":" @chadd","Fragments":["Why"]},{"Key":"@chadd Why","Fragments":["do"]},{"Key":"strings for","Fragments":["this"]},{"Key":"this example?","Fragments":["I've"]},{"Key":"example? I've","Fragments":["found"]},{"Key":"found conversion","Fragments":["to"]},{"Key":"conversion to","Fragments":["and","list"]},{"Key":"and from","Fragments":["char","some"]},{"Key":"from char","Fragments":["list"]},{"Key":"allow code","Fragments":["outside"]},{"Key":"code outside","Fragments":["this"]},{"Key":"this module","Fragments":["to","uses"]},{"Key":"call `question?`,","Fragments":["`shouting?`"]},{"Key":"`question?`, `shouting?`","Fragments":["and","and"]},{"Key":"`shouting?` and","Fragments":["`silence?`?","`asking_politely?`","`all_caps?`,","`silence?`"]},{"Key":"and `silence?`?","Fragments":["If"]},{"Key":"`silence?`? If","Fragments":["not"]},{"Key":"If not","Fragments":["you","it's"]},{"Key":"them private","Fragments":["(`defp`","you"]},{"Key":"private (`defp`","Fragments":["instead"]},{"Key":"(`defp` instead","Fragments":["of"]},{"Key":" @antonina","Fragments":["Imagine","a"]},{"Key":"@antonina Imagine","Fragments":["a"]},{"Key":"Imagine a","Fragments":["large"]},{"Key":"a large","Fragments":["phone","data","list","enough","list","list.","list","list","list","list","list"]},{"Key":"large phone","Fragments":["number","numbers?"]},{"Key":"number ,","Fragments":["you"]},{"Key":"to first","Fragments":["convert","write","sort","time"]},{"Key":"first convert","Fragments":["to"]},{"Key":"convert to","Fragments":["list"]},{"Key":"to list","Fragments":["and","conversion","first."]},{"Key":"the validations","Fragments":["for"]},{"Key":"validations for","Fragments":["each"]},{"Key":"each item","Fragments":["in"]},{"Key":"the list.","Fragments":["If","I","I","The","The"]},{"Key":"list. If","Fragments":["you"]},{"Key":"use String","Fragments":["you"]},{"Key":"String you","Fragments":["could"]},{"Key":"could validate","Fragments":["directly."]},{"Key":"@antonina a","Fragments":["tip"]},{"Key":"a tip","Fragments":["for"]},{"Key":"tip for","Fragments":["pattern"]},{"Key":"match for","Fragments":["String","function"]},{"Key":"for String","Fragments":[":"]},{"Key":" \u003c\u003c","Fragments":["head"]},{"Key":"\u003c\u003c head","Fragments":["::"]},{"Key":"head ::","Fragments":["[binary,"]},{"Key":":: [binary,","Fragments":["size(1)],","size(10)]\u003e\u003e"]},{"Key":"[binary, size(1)],","Fragments":["phone"]},{"Key":"size(1)], phone","Fragments":["::"]},{"Key":"phone ::","Fragments":["[binary,"]},{"Key":" @pauline","Fragments":["Well"]},{"Key":"@pauline Well","Fragments":["that's"]},{"Key":"Well that's","Fragments":["solvable"]},{"Key":"that's solvable","Fragments":["by"]},{"Key":"solvable by","Fragments":["some"]},{"Key":"by some","Fragments":["very","easier"]},{"Key":"some very","Fragments":["trivial"]},{"Key":"very trivial","Fragments":["input"]},{"Key":"trivial input","Fragments":["checks"]},{"Key":"input checks","Fragments":["on","for"]},{"Key":"checks on","Fragments":["the"]},{"Key":"the front.","Fragments":["There's"]},{"Key":"front. There's","Fragments":["no"]},{"Key":"no reason","Fragments":["why","to","whatsoever)."]},{"Key":"number would","Fragments":["ever"]},{"Key":"would ever","Fragments":["be"]},{"Key":"ever be","Fragments":["more"]},{"Key":"than 11","Fragments":["bytes"]},{"Key":"11 bytes","Fragments":["because"]},{"Key":"bytes because","Fragments":["the"]},{"Key":"only allowed","Fragments":["characters"]},{"Key":"allowed characters","Fragments":["are"]},{"Key":"characters are","Fragments":["in","being","digits,"]},{"Key":"in ASCII.","Fragments":["Anything"]},{"Key":"ASCII. Anything","Fragments":["else"]},{"Key":"Anything else","Fragments":["is"]},{"Key":"how likely","Fragments":["is"]},{"Key":"likely is","Fragments":["it"]},{"Key":"program is","Fragments":["going"]},{"Key":"see extremely","Fragments":["large"]},{"Key":"extremely large","Fragments":["phone"]},{"Key":"Your string","Fragments":["matching"]},{"Key":"string matching","Fragments":["works"]},{"Key":"matching works","Fragments":["for","here"]},{"Key":"this particular","Fragments":["example","case","case","case","case","implementation"]},{"Key":"particular example","Fragments":["btw,"]},{"Key":"example btw,","Fragments":["but"]},{"Key":"btw, but","Fragments":["it's"]},{"Key":"it's wrong","Fragments":["in"]},{"Key":"wrong in","Fragments":["the"]},{"Key":"general case","Fragments":["of"]},{"Key":"of working","Fragments":["with"]},{"Key":"strings due","Fragments":["to"]},{"Key":"not handling","Fragments":["variable"]},{"Key":"handling variable","Fragments":["length"]},{"Key":"variable length","Fragments":["code"]},{"Key":"length code","Fragments":["points"]},{"Key":"points (strings","Fragments":["are"]},{"Key":"(strings are","Fragments":["not"]},{"Key":"just binaries,","Fragments":["they"]},{"Key":"binaries, they","Fragments":["are"]},{"Key":"are binaries","Fragments":["encoded","and"]},{"Key":"binaries encoded","Fragments":["in"]},{"Key":"looks quite","Fragments":["good.","good.","good."]},{"Key":"quite good.","Fragments":["One","You're","I'll"]},{"Key":"One very","Fragments":["minor","minor"]},{"Key":"very minor","Fragments":["nitpick:","things:","thing:","nit."]},{"Key":" Use","Fragments":["of"]},{"Key":"Use of","Fragments":["\u00261"]},{"Key":"of \u00261","Fragments":["without"]},{"Key":"\u00261 without","Fragments":["a"]},{"Key":"a \u0026","Fragments":["(see"]},{"Key":"\u0026 (see","Fragments":["how"]},{"Key":"(see how","Fragments":["I"]},{"Key":"that map)","Fragments":["has"]},{"Key":"map) has","Fragments":["been"]},{"Key":"been deprecated","Fragments":["and"]},{"Key":"deprecated and","Fragments":["no","no"]},{"Key":"longer works","Fragments":["on","in"]},{"Key":"works on","Fragments":["the","Elixir","all","`+`","keyword","ranges)."]},{"Key":"most recent","Fragments":["development","development","version"]},{"Key":"recent development","Fragments":["version","version"]},{"Key":"development version","Fragments":["of","of","the","of"]},{"Key":" You'll","Fragments":["want"]},{"Key":"You'll want","Fragments":["to","to"]},{"Key":"write `Enum.count(\u0026equal_pairs?(\u00261))`","Fragments":["(or"]},{"Key":"`Enum.count(\u0026equal_pairs?(\u00261))` (or","Fragments":["`Enum.count(\u0026equal_pairs?/1)`."]},{"Key":"(or `Enum.count(\u0026equal_pairs?/1)`.","Fragments":["Omitting"]},{"Key":"`Enum.count(\u0026equal_pairs?/1)`. Omitting","Fragments":["the"]},{"Key":"Omitting the","Fragments":["capture"]},{"Key":"operator (`\u0026`)","Fragments":["is","explicitly:"]},{"Key":"(`\u0026`) is","Fragments":["deprecated"]},{"Key":"is deprecated","Fragments":["and"]},{"Key":"the development","Fragments":["version"]},{"Key":"comments, @marjolaine","Fragments":["and"]},{"Key":"@marjolaine and","Fragments":["@marjolaine."]},{"Key":"and @marjolaine.","Fragments":["Just"]},{"Key":"@marjolaine. Just","Fragments":["curious,"]},{"Key":"curious, @marjolaine,","Fragments":["do"]},{"Key":"@marjolaine, do","Fragments":["you"]},{"Key":"any thoughts","Fragments":["on","on"]},{"Key":"current implementation?","Fragments":["I"]},{"Key":"implementation? I","Fragments":["feel"]},{"Key":"pretty expressive","Fragments":["as"]},{"Key":"expressive as","Fragments":["is,"]},{"Key":"could look","Fragments":["into","at"]},{"Key":"into converting","Fragments":["to"]},{"Key":"of `[","Fragments":["head"]},{"Key":"`[ head","Fragments":["|","|","|"]},{"Key":"head |","Fragments":["tail","tail]`","filter(tail,","tail","tail"]},{"Key":"| tail","Fragments":["]`","],","])","]","]`"]},{"Key":"tail ]`","Fragments":["etc.","syntax"]},{"Key":"]` etc.","Fragments":["Not"]},{"Key":"etc. Not","Fragments":["sure","a"]},{"Key":"would gain","Fragments":["readability"]},{"Key":"gain readability","Fragments":["or","by"]},{"Key":"or expressiveness","Fragments":["overall,"]},{"Key":"expressiveness overall,","Fragments":["though,"]},{"Key":"overall, though,","Fragments":["with"]},{"Key":"though, with","Fragments":["adding"]},{"Key":"extra steps","Fragments":["of"]},{"Key":"thing I'm","Fragments":["not"]},{"Key":"not excited","Fragments":["about"]},{"Key":"excited about","Fragments":["in","the"]},{"Key":"about in","Fragments":["my","Ruby:"]},{"Key":"current implementation","Fragments":["is"]},{"Key":"the if","Fragments":["statement","makes","statement","expression","conditional."]},{"Key":"if statement","Fragments":["in","in","is"]},{"Key":"the `strip_country_code`","Fragments":["function.","and"]},{"Key":"`strip_country_code` function.","Fragments":["I'd"]},{"Key":"function. I'd","Fragments":["be"]},{"Key":"be curious","Fragments":["what","to"]},{"Key":"curious what","Fragments":["you","the"]},{"Key":"think just","Fragments":["as"]},{"Key":"second opinion","Fragments":["and","about"]},{"Key":"opinion and","Fragments":["then"]},{"Key":"then I'll","Fragments":["take"]},{"Key":"at refactoring","Fragments":["based","the"]},{"Key":"refactoring based","Fragments":["on"]},{"Key":"from both","Fragments":["of","String"]},{"Key":" Again,","Fragments":["thanks","thanks"]},{"Key":"Again, thanks","Fragments":["so","for"]},{"Key":"thanks so","Fragments":["much","much"]},{"Key":" @verlie:","Fragments":["\u003c\u003c\u003e\u003e"]},{"Key":"@verlie: \u003c\u003c\u003e\u003e","Fragments":["is"]},{"Key":"\u003c\u003c\u003e\u003e is","Fragments":["for","used"]},{"Key":"binary (what","Fragments":["you'd"]},{"Key":"(what you'd","Fragments":["think"]},{"Key":"you'd think","Fragments":["of"]},{"Key":"of as","Fragments":["a","much"]},{"Key":"String in","Fragments":["Ruby","front"]},{"Key":"Ruby or","Fragments":["other","another"]},{"Key":"other languages.","Fragments":["\u003c\u003c\u003e\u003e"]},{"Key":"languages. \u003c\u003c\u003e\u003e","Fragments":["is"]},{"Key":"used instead","Fragments":["of","of"]},{"Key":"\"\" because","Fragments":["\"\""]},{"Key":"because \"\"","Fragments":["produces"]},{"Key":"\"\" produces","Fragments":["an"]},{"Key":"produces an","Fragments":["array"]},{"Key":"an array","Fragments":["of","of"]},{"Key":"of characters,","Fragments":["while","codepoints","not"]},{"Key":"characters, while","Fragments":["\u003c\u003c\u003e\u003e"]},{"Key":"while \u003c\u003c\u003e\u003e","Fragments":["works"]},{"Key":"\u003c\u003c\u003e\u003e works","Fragments":["for"]},{"Key":"any packed","Fragments":["set"]},{"Key":"packed set","Fragments":["of"]},{"Key":"of bits,","Fragments":["so"]},{"Key":"bits, so","Fragments":["it"]},{"Key":"for unicode","Fragments":["Strings.","support","characters","letters.","alpha"]},{"Key":"unicode Strings.","Fragments":["_codepoint"]},{"Key":"Strings. _codepoint","Fragments":["is"]},{"Key":"_codepoint is","Fragments":["just"]},{"Key":"just me","Fragments":["calling","though...","or"]},{"Key":"me calling","Fragments":["the"]},{"Key":"variable codepoint","Fragments":["and"]},{"Key":"codepoint and","Fragments":["then"]},{"Key":"then putting","Fragments":["_"]},{"Key":"putting _","Fragments":["in"]},{"Key":"_ in","Fragments":["front"]},{"Key":"front to","Fragments":["tell"]},{"Key":"to tell","Fragments":["the"]},{"Key":"compiler that","Fragments":["I'm"]},{"Key":"I'm purposely","Fragments":["ignoring"]},{"Key":"purposely ignoring","Fragments":["the"]},{"Key":"ignoring the","Fragments":["variable."]},{"Key":"the variable.","Fragments":["\u003c\u003cvar\u003e\u003e"]},{"Key":"variable. \u003c\u003cvar\u003e\u003e","Fragments":["will"]},{"Key":"\u003c\u003cvar\u003e\u003e will","Fragments":["match"]},{"Key":"match a","Fragments":["single","letter"]},{"Key":"single character.","Fragments":["\u003c\u003c??\u003e\u003e"]},{"Key":"character. \u003c\u003c??\u003e\u003e","Fragments":["is"]},{"Key":"\u003c\u003c??\u003e\u003e is","Fragments":["a"]},{"Key":"binary (\u003c\u003c","Fragments":["\u003e\u003e\u003e)"]},{"Key":"(\u003c\u003c \u003e\u003e\u003e)","Fragments":["with"]},{"Key":"\u003e\u003e\u003e) with","Fragments":["the"]},{"Key":"character code","Fragments":["for","for"]},{"Key":"for ?","Fragments":["in"]},{"Key":"? in","Fragments":["it"]},{"Key":"since ?\u003ca","Fragments":["character\u003e"]},{"Key":"?\u003ca character\u003e","Fragments":["returns"]},{"Key":"character\u003e returns","Fragments":["the"]},{"Key":"that character.","Fragments":["It"]},{"Key":"character. It","Fragments":["would"]},{"Key":"be like","Fragments":["ord('c')"]},{"Key":"like ord('c')","Fragments":["in"]},{"Key":"ord('c') in","Fragments":["Python"]},{"Key":"in Python","Fragments":["or"]},{"Key":"Python or","Fragments":["Ruby."]},{"Key":"Well it","Fragments":["seems"]},{"Key":"verbose than","Fragments":["it"]},{"Key":"to be.","Fragments":["Try","I","I","This"]},{"Key":"be. Try","Fragments":["using"]},{"Key":"using case","Fragments":["and","expression"]},{"Key":"matching as","Fragments":["much"]},{"Key":"as possible,","Fragments":["it","so","but","if"]},{"Key":"possible, it","Fragments":["works"]},{"Key":"works well","Fragments":["for"]},{"Key":"binaries if","Fragments":["you're"]},{"Key":"get every","Fragments":["thing"]},{"Key":"every thing","Fragments":["past"]},{"Key":"thing past","Fragments":["the"]},{"Key":"past the","Fragments":["first"]},{"Key":" Odds","Fragments":["are"]},{"Key":"Odds are","Fragments":["you'll"]},{"Key":"are you'll","Fragments":["find"]},{"Key":"you'll find","Fragments":["a","that","that"]},{"Key":"a less","Fragments":["verbose","than"]},{"Key":"verbose and","Fragments":["more","not"]},{"Key":"approach this","Fragments":["way.","is"]},{"Key":" [This](http://elixir-lang.org/docs/master/Kernel.SpecialForms.html#%3C%3C%3E%3E/1)","Fragments":["should"]},{"Key":"[This](http://elixir-lang.org/docs/master/Kernel.SpecialForms.html#%3C%3C%3E%3E/1) should","Fragments":["come"]},{"Key":"should come","Fragments":["in"]},{"Key":" @jacquelyn","Fragments":["import"]},{"Key":"@jacquelyn import","Fragments":["is"]},{"Key":"import is","Fragments":["rarely"]},{"Key":"is rarely","Fragments":["done","used","done"]},{"Key":"rarely done","Fragments":["in","in"]},{"Key":" `one_or_it`","Fragments":["could"]},{"Key":"`one_or_it` could","Fragments":["be"]},{"Key":"defp one_or_it(n)","Fragments":["when"]},{"Key":"one_or_it(n) when","Fragments":["n"]},{"Key":"when n","Fragments":["\u003e","\u003e"]},{"Key":"n \u003e","Fragments":["1,","0"]},{"Key":"\u003e 1,","Fragments":["do:"]},{"Key":"defp one_or_it(_),","Fragments":["do:"]},{"Key":"one_or_it(_), do:","Fragments":["\"it\""]},{"Key":"In other","Fragments":["words,","words","languages","words,","words,","words","words","words,"]},{"Key":"other words,","Fragments":["you","`Dict.get`","what","simply"]},{"Key":"words, you","Fragments":["don't"]},{"Key":"need `cond`","Fragments":["there,"]},{"Key":"`cond` there,","Fragments":["pattern"]},{"Key":"there, pattern","Fragments":["matching"]},{"Key":"with guards","Fragments":["will","but","instead.","in"]},{"Key":"guards will","Fragments":["do"]},{"Key":" @waylon","Fragments":["I"]},{"Key":"@waylon I","Fragments":["one-upped"]},{"Key":"I one-upped","Fragments":["you"]},{"Key":"one-upped you","Fragments":["in"]},{"Key":"you in","Fragments":["my"]},{"Key":"latest submission","Fragments":["by"]},{"Key":"submission by","Fragments":["using"]},{"Key":"on bottle()","Fragments":["as"]},{"Key":"bottle() as","Fragments":["well."]},{"Key":" \"DO","Fragments":["it"]},{"Key":"now?\" has","Fragments":["lowercase"]},{"Key":"has lowercase","Fragments":["letters"]},{"Key":"lowercase letters","Fragments":["and"]},{"Key":"and thus","Fragments":["is","hard","consider"]},{"Key":"thus is","Fragments":["not"]},{"Key":"not shouting","Fragments":["(according"]},{"Key":"shouting (according","Fragments":["to"]},{"Key":"(according to","Fragments":["the"]},{"Key":"the [tests](https://github.com/kytrinyx/exercism.io/blob/master/assignments/elixir/bob/bob_test.exs)","Fragments":["at"]},{"Key":"[tests](https://github.com/kytrinyx/exercism.io/blob/master/assignments/elixir/bob/bob_test.exs) at","Fragments":["least,"]},{"Key":"least, which","Fragments":["has"]},{"Key":"which has","Fragments":["both","not","total","to","nothing"]},{"Key":"has both","Fragments":["shouting"]},{"Key":"both shouting","Fragments":["instances"]},{"Key":"shouting instances","Fragments":["as"]},{"Key":"instances as","Fragments":["100%"]},{"Key":"as 100%","Fragments":["caps)."]},{"Key":"the empty-string","Fragments":["test"]},{"Key":"empty-string test","Fragments":["tonight."]},{"Key":"test tonight.","Fragments":["I"]},{"Key":"tonight. I","Fragments":["forget"]},{"Key":"I forget","Fragments":["why","about"]},{"Key":"forget why","Fragments":["I"]},{"Key":"a bit_size","Fragments":["test."]},{"Key":" Ugh...","Fragments":["this"]},{"Key":"Ugh... this","Fragments":["is"]},{"Key":"the wartier","Fragments":["aspects"]},{"Key":"wartier aspects","Fragments":["of"]},{"Key":"aspects of","Fragments":["Elixir:","it,","the"]},{"Key":"of Elixir:","Fragments":["strings","it's","if"]},{"Key":"Elixir: strings","Fragments":["and"]},{"Key":" Gotcha.","Fragments":["Thanks","Thanks","That's","Thanks","I","That"]},{"Key":"Gotcha. Thanks","Fragments":["for","for","for"]},{"Key":"the input.","Fragments":["I","I’m","What"]},{"Key":"input. I","Fragments":["finally","like","really"]},{"Key":"finally think","Fragments":["I"]},{"Key":"got what","Fragments":["you"]},{"Key":"you both","Fragments":["were"]},{"Key":"both were","Fragments":["getting"]},{"Key":"were getting","Fragments":["at"]},{"Key":"at and","Fragments":["used"]},{"Key":"used case","Fragments":["and"]},{"Key":"and binary","Fragments":["pattern"]},{"Key":"binary pattern","Fragments":["matching","match"]},{"Key":"the `validate`","Fragments":["function"]},{"Key":"`validate` function","Fragments":["to"]},{"Key":"`strip_country_code` and","Fragments":["`includes_country_code?`"]},{"Key":"and `includes_country_code?`","Fragments":["functions."]},{"Key":"`includes_country_code?` functions.","Fragments":["I"]},{"Key":"those changes.","Fragments":["Let"]},{"Key":"changes. Let","Fragments":["me"]},{"Key":"a chance!","Fragments":["Thanks"]},{"Key":"chance! Thanks","Fragments":["again"]},{"Key":"comment, fixed","Fragments":[":-)"]},{"Key":"various cases","Fragments":["in","mentioned"]},{"Key":"cases in","Fragments":["this"]},{"Key":"this mathematical","Fragments":["exercise."]},{"Key":"docs can","Fragments":["use"]},{"Key":"some improvements","Fragments":["here"]},{"Key":"improvements here","Fragments":["and"]},{"Key":"really see","Fragments":["where","the","the","why"]},{"Key":"see where","Fragments":["the","in","you've"]},{"Key":"operator would","Fragments":["help"]},{"Key":" @frankie","Fragments":["It's"]},{"Key":"@frankie It's","Fragments":["things"]},{"Key":"It's things","Fragments":["like"]},{"Key":"one little","Fragments":["tip","thing:","thing.","thing."]},{"Key":"little tip","Fragments":["that"]},{"Key":"tip that","Fragments":["is"]},{"Key":"is making","Fragments":["my"]},{"Key":"my experience","Fragments":["here"]},{"Key":"experience here","Fragments":["so"]},{"Key":"here so","Fragments":["much","that","I"]},{"Key":"much fun.","Fragments":["Seriously."]},{"Key":"fun. Seriously.","Fragments":["Thanks"]},{"Key":"Seriously. Thanks","Fragments":["once"]},{"Key":"Thanks once","Fragments":["again."]},{"Key":"only improvement","Fragments":["I'd"]},{"Key":"improvement I'd","Fragments":["recommend"]},{"Key":"I'd recommend","Fragments":["is","making","for","a","using"]},{"Key":"recommend is","Fragments":["handling"]},{"Key":"is handling","Fragments":["non-ascii,"]},{"Key":"handling non-ascii,","Fragments":["UTF8"]},{"Key":"non-ascii, UTF8","Fragments":["letters"]},{"Key":"UTF8 letters","Fragments":["on"]},{"Key":"letters on","Fragments":["line"]},{"Key":"line 20,","Fragments":["such"]},{"Key":"20, such","Fragments":["as"]},{"Key":"helps or","Fragments":["makes"]},{"Key":"or makes","Fragments":["it"]},{"Key":"any better,","Fragments":["but"]},{"Key":"was suggested","Fragments":["to","to"]},{"Key":"learn how","Fragments":["to"]},{"Key":"use it.","Fragments":["I","There's"]},{"Key":"just sharing","Fragments":["that"]},{"Key":"sharing that","Fragments":["info."]},{"Key":"Your regex","Fragments":["doesn't","is"]},{"Key":"regex doesn't","Fragments":["support"]},{"Key":"doesn't support","Fragments":["strings"]},{"Key":"support strings","Fragments":["like"]},{"Key":"strings like","Fragments":["\"ÑÉØ\"."]},{"Key":"like \"ÑÉØ\".","Fragments":["Otherwise,"]},{"Key":"\"ÑÉØ\". Otherwise,","Fragments":["looks"]},{"Key":"Otherwise, looks","Fragments":["good!"]},{"Key":"Also, use","Fragments":["2"]},{"Key":"use 2","Fragments":["spaces","spaces"]},{"Key":"spaces instead","Fragments":["of"]},{"Key":"of tabs.","Fragments":[":P"]},{"Key":"Just wondering","Fragments":["why"]},{"Key":"wondering why","Fragments":["you're"]},{"Key":"why you're","Fragments":["using","only"]},{"Key":"the `case`","Fragments":["inside","over","vs"]},{"Key":"`case` inside","Fragments":["a","it"]},{"Key":"a `defp`","Fragments":["when","using"]},{"Key":"`defp` when","Fragments":["all"]},{"Key":"when all","Fragments":["you"]},{"Key":"all you","Fragments":["do","need","needed"]},{"Key":"is match","Fragments":["on"]},{"Key":"number (instead","Fragments":["of"]},{"Key":"(instead of","Fragments":["doing"]},{"Key":"match as","Fragments":["function"]},{"Key":" @kaia","Fragments":["Why"]},{"Key":"@kaia Why","Fragments":["would"]},{"Key":"would that","Fragments":["be","help?"]},{"Key":"be necessary?","Fragments":["Aside"]},{"Key":"necessary? Aside","Fragments":["from"]},{"Key":"8 all","Fragments":["the"]},{"Key":"are pretty","Fragments":["easy","common","awesome","simple","much"]},{"Key":"read (and","Fragments":["line"]},{"Key":"(and line","Fragments":["8"]},{"Key":"8 is","Fragments":["not","the"]},{"Key":"bad either,","Fragments":["just"]},{"Key":"either, just","Fragments":["a"]},{"Key":"little uncommon","Fragments":["regex)."]},{"Key":"You're iterating","Fragments":["four"]},{"Key":"iterating four","Fragments":["times"]},{"Key":"four times","Fragments":["over","as","by"]},{"Key":"times over","Fragments":["the"]},{"Key":"strand with","Fragments":["`count`"]},{"Key":"with `count`","Fragments":["in"]},{"Key":"`count` in","Fragments":["`nucleotide_counts`.","line","`nucleotide_counts`"]},{"Key":"in `nucleotide_counts`.","Fragments":["DNA"]},{"Key":"`nucleotide_counts`. DNA","Fragments":["can"]},{"Key":"DNA can","Fragments":["get"]},{"Key":"get pretty","Fragments":["long,"]},{"Key":"long, so","Fragments":["that"]},{"Key":" Regexes","Fragments":["are"]},{"Key":"Regexes are","Fragments":["in","cool","really"]},{"Key":"general best","Fragments":["avoided"]},{"Key":"best avoided","Fragments":["for"]},{"Key":"avoided for","Fragments":["simple"]},{"Key":"for simple","Fragments":["tasks,","one-liners"]},{"Key":"simple tasks,","Fragments":["for"]},{"Key":"tasks, for","Fragments":["this"]},{"Key":"exercise you","Fragments":["need","should","can't"]},{"Key":"need at","Fragments":["most"]},{"Key":"at most","Fragments":["one."]},{"Key":"String class?","Fragments":["For"]},{"Key":"class? For","Fragments":["example"]},{"Key":"example it","Fragments":["is","also"]},{"Key":" It´s","Fragments":["much"]},{"Key":"It´s much","Fragments":["better."]},{"Key":"much better.","Fragments":["But","Also","Will","I","This","The"]},{"Key":"better. But","Fragments":["a"]},{"Key":"But a","Fragments":["few"]},{"Key":"use `number/1`","Fragments":["for"]},{"Key":"`number/1` for","Fragments":["get"]},{"Key":"for get","Fragments":["area_code"]},{"Key":"get area_code","Fragments":["(imagine"]},{"Key":"area_code (imagine","Fragments":["bad"]},{"Key":"(imagine bad","Fragments":["number"]},{"Key":"bad number","Fragments":["input","and"]},{"Key":"number input","Fragments":["for"]},{"Key":"input for","Fragments":["area_code)","the","another."]},{"Key":"* like","Fragments":["says"]},{"Key":"like says","Fragments":["@ulises"]},{"Key":"says @ulises","Fragments":["use"]},{"Key":"@ulises use","Fragments":["pattern"]},{"Key":"for function","Fragments":["`validate/1`","application.","names!","calls","expressions","names."]},{"Key":"function `validate/1`","Fragments":["instead"]},{"Key":"`validate/1` instead","Fragments":["of"]},{"Key":"of `case`","Fragments":["inside","expressions","with"]},{"Key":"could import","Fragments":["`String.slice/3"]},{"Key":"import `String.slice/3","Fragments":["`and"]},{"Key":"`String.slice/3 `and","Fragments":["remove"]},{"Key":"`and remove","Fragments":["`line_number`,"]},{"Key":"remove `line_number`,","Fragments":["`prefix`"]},{"Key":"`line_number`, `prefix`","Fragments":["and","and"]},{"Key":"`prefix` and","Fragments":["`segment`","`segment`:"]},{"Key":"and `segment`","Fragments":["(IMO"]},{"Key":"`segment` (IMO","Fragments":["are"]},{"Key":"(IMO are","Fragments":["redundant"]},{"Key":"are redundant","Fragments":[")"]},{"Key":"remove @ulises","Fragments":[","]},{"Key":"@ulises ,","Fragments":["no"]},{"Key":", no","Fragments":["use"]},{"Key":"no use","Fragments":["anymore","of"]},{"Key":"use anymore","Fragments":["."]},{"Key":" @ethyl","Fragments":["I"]},{"Key":"@ethyl I","Fragments":["guess"]},{"Key":"guess a","Fragments":["git"]},{"Key":"a git","Fragments":["a"]},{"Key":"git a","Fragments":["little"]},{"Key":"little lazy/complacent","Fragments":["here,"]},{"Key":"lazy/complacent here,","Fragments":["primarily"]},{"Key":"here, primarily","Fragments":["since"]},{"Key":"primarily since","Fragments":["Elixir"]},{"Key":"since Elixir","Fragments":["(apparently)","doesn't"]},{"Key":"Elixir (apparently)","Fragments":["doesn't"]},{"Key":"(apparently) doesn't","Fragments":["have"]},{"Key":"an analog","Fragments":["to","to"]},{"Key":"analog to","Fragments":["Clojure's","the"]},{"Key":"to Clojure's","Fragments":["frequencies."]},{"Key":"Clojure's frequencies.","Fragments":["See"]},{"Key":"frequencies. See","Fragments":["my"]},{"Key":"See my","Fragments":["latest","new"]},{"Key":"I surprised","Fragments":["@astrid"]},{"Key":"surprised @astrid","Fragments":["didn't"]},{"Key":"@astrid didn't","Fragments":["slam"]},{"Key":"didn't slam","Fragments":["me"]},{"Key":"slam me","Fragments":["in"]},{"Key":"previous submission","Fragments":["for"]},{"Key":"submission for","Fragments":["not","the","space-age:","this"]},{"Key":"not making","Fragments":["first_couplet","those"]},{"Key":"making first_couplet","Fragments":["and"]},{"Key":"first_couplet and","Fragments":["second_couplet"]},{"Key":"and second_couplet","Fragments":["private."]},{"Key":"second_couplet private.","Fragments":[";P"]},{"Key":"Why the","Fragments":["separate","`Enum.sort"]},{"Key":"can write","Fragments":["the","line","offset","`String.length(s)","`count_words`","`fn(x)","`String.length(s)","the","`def`","an","function","them","`[\\P{L}]`"]},{"Key":"test as","Fragments":["a"]},{"Key":"expression btw","Fragments":["(using"]},{"Key":"btw (using","Fragments":["and"]},{"Key":"(using and","Fragments":["and"]},{"Key":"and and","Fragments":["or),"]},{"Key":"and or),","Fragments":["not"]},{"Key":"or), not","Fragments":["sure"]},{"Key":"sure that's","Fragments":["much"]},{"Key":"that's much","Fragments":["better","easier"]},{"Key":"Thanks @randi","Fragments":["and"]},{"Key":"@randi and","Fragments":["@randi"]},{"Key":"and @randi","Fragments":["for"]},{"Key":"@randi for","Fragments":["taking"]},{"Key":" @randi,","Fragments":["as","I"]},{"Key":"@randi, as","Fragments":["I'm"]},{"Key":"still an","Fragments":["Elixir"]},{"Key":"Elixir newbie","Fragments":["I"]},{"Key":"newbie I","Fragments":["sometimes"]},{"Key":"I sometimes","Fragments":["forget"]},{"Key":"sometimes forget","Fragments":["what"]},{"Key":"forget what","Fragments":["you"]},{"Key":"and can't","Fragments":["do"]},{"Key":"can't do","Fragments":["with","it"]},{"Key":"the multiple","Fragments":["function","line"]},{"Key":"multiple function","Fragments":["heads.","heads","heads."]},{"Key":"function heads.","Fragments":["I","This"]},{"Key":"heads. I","Fragments":["will"]},{"Key":"that change!","Fragments":[":)"]},{"Key":"@randi, I","Fragments":["thought"]},{"Key":"about sanitizing","Fragments":["the"]},{"Key":"sanitizing the","Fragments":["input"]},{"Key":"to `area_code`","Fragments":["originally"]},{"Key":"`area_code` originally","Fragments":["but"]},{"Key":"originally but","Fragments":["the"]},{"Key":"suite implied","Fragments":["that"]},{"Key":"implied that","Fragments":["you"]},{"Key":"have to--that","Fragments":["the"]},{"Key":"to--that the","Fragments":["caller"]},{"Key":"the caller","Fragments":["would","is"]},{"Key":"caller would","Fragments":["be"]},{"Key":"for that--so","Fragments":["I"]},{"Key":"that--so I","Fragments":["felt"]},{"Key":"it wasn't","Fragments":["necessary.","the","working","matched.","totally"]},{"Key":"your comment","Fragments":["about"]},{"Key":"comment about","Fragments":["`line_number`,","considering"]},{"Key":"about `line_number`,","Fragments":["`prefix`"]},{"Key":"and `segment`:","Fragments":["I"]},{"Key":"`segment`: I","Fragments":["like"]},{"Key":"like having","Fragments":["well-named","them","them","them"]},{"Key":"having well-named","Fragments":["methods"]},{"Key":"well-named methods","Fragments":["for"]},{"Key":"other parts","Fragments":["of","of"]},{"Key":"parts of","Fragments":["the","the","a","the","the","the"]},{"Key":"number so","Fragments":["that"]},{"Key":"the `pretty`","Fragments":["method","function,"]},{"Key":"`pretty` method","Fragments":["reads"]},{"Key":"method reads","Fragments":["clearly","well,","really"]},{"Key":"reads clearly","Fragments":["and"]},{"Key":"clearly and","Fragments":["everything"]},{"Key":"and everything","Fragments":["within"]},{"Key":"everything within","Fragments":["the"]},{"Key":"a consistent","Fragments":["level"]},{"Key":"of abstraction.","Fragments":["As"]},{"Key":"abstraction. As","Fragments":["for"]},{"Key":"for why","Fragments":["I","`downcase`"]},{"Key":"wrote the","Fragments":["`segment`","number","code"]},{"Key":"the `segment`","Fragments":["method,"]},{"Key":"`segment` method,","Fragments":["since"]},{"Key":"method, since","Fragments":["Elixir"]},{"Key":"of `String.slice`","Fragments":["that"]},{"Key":"`String.slice` that","Fragments":["takes"]},{"Key":"range like","Fragments":["Ruby"]},{"Key":"Ruby does,","Fragments":["and"]},{"Key":"does, and","Fragments":["I","that"]},{"Key":"use range","Fragments":["constants"]},{"Key":"range constants","Fragments":["to"]},{"Key":"constants to","Fragments":["avoid"]},{"Key":"avoid magic","Fragments":["numbers"]},{"Key":"magic numbers","Fragments":["in"]},{"Key":"numbers in","Fragments":["the","the","`upper_bound`?","a"]},{"Key":"implement my","Fragments":["own"]},{"Key":"own to","Fragments":["eliminate"]},{"Key":"eliminate duplication.","Fragments":["Plus"]},{"Key":"duplication. Plus","Fragments":["I"]},{"Key":"Plus I","Fragments":["think","don't"]},{"Key":"think `segment`","Fragments":["is"]},{"Key":"`segment` is","Fragments":["a"]},{"Key":"doing in","Fragments":["the","is_all_upcase","`to_decimal`,"]},{"Key":"a phone","Fragments":["number..."]},{"Key":"phone number...","Fragments":["it's"]},{"Key":"number... it's","Fragments":["returning"]},{"Key":"it's returning","Fragments":["a","the"]},{"Key":"a segment","Fragments":["of"]},{"Key":"segment of","Fragments":["the"]},{"Key":"I'll make","Fragments":["a","that","that"]},{"Key":"few more","Fragments":["comments","abstractions"]},{"Key":"more comments","Fragments":["there.","to"]},{"Key":"there. Thanks","Fragments":["again"]},{"Key":"updated `validate`","Fragments":["to"]},{"Key":"`validate` to","Fragments":["use"]},{"Key":"function heads","Fragments":["instead","the"]},{"Key":"heads instead","Fragments":["of"]},{"Key":"statement as","Fragments":["@meta"]},{"Key":"as @meta","Fragments":["and"]},{"Key":"@meta and","Fragments":["@meta"]},{"Key":"and @meta","Fragments":["recommended."]},{"Key":"@meta recommended.","Fragments":["Thanks!"]},{"Key":"previous iteration","Fragments":["I","better,"]},{"Key":"iteration I","Fragments":["accidentally"]},{"Key":"accidentally reintroduced","Fragments":["the"]},{"Key":"reintroduced the","Fragments":["magic"]},{"Key":"magic number","Fragments":["`10`",":)","31557600"]},{"Key":"number `10`","Fragments":["in"]},{"Key":"`10` in","Fragments":["the"]},{"Key":"the validate","Fragments":["function"]},{"Key":"validate function","Fragments":["instead"]},{"Key":"function instead","Fragments":["of","of"]},{"Key":"of referencing","Fragments":["the"]},{"Key":"referencing the","Fragments":["constant"]},{"Key":"the constant","Fragments":["I","to"]},{"Key":"constant I","Fragments":["had"]},{"Key":"had set","Fragments":["up"]},{"Key":"up for","Fragments":["it.","the"]},{"Key":"it. So,","Fragments":["in"]},{"Key":"So, in","Fragments":["this"]},{"Key":"changed the","Fragments":["name","name","meaning","code","right","tests","slice","function","blank"]},{"Key":"just `@meta`","Fragments":["which"]},{"Key":"`@meta` which","Fragments":["is"]},{"Key":"bit shorter","Fragments":["and"]},{"Key":"more generic,","Fragments":["and"]},{"Key":"generic, and","Fragments":["changed"]},{"Key":"and changed","Fragments":["the","it","my","the","the","another:"]},{"Key":"to `number`","Fragments":["instead"]},{"Key":"`number` instead","Fragments":["of"]},{"Key":"of `ten_digit`","Fragments":["because"]},{"Key":"`ten_digit` because","Fragments":["the"]},{"Key":"it's ten","Fragments":["digits"]},{"Key":"ten digits","Fragments":["long"]},{"Key":"digits long","Fragments":["shouldn't"]},{"Key":"long shouldn't","Fragments":["be"]},{"Key":"shouldn't be","Fragments":["encoded","considered","considered","based"]},{"Key":"be encoded","Fragments":["the"]},{"Key":"great. My","Fragments":["only"]},{"Key":"only minor","Fragments":["nitpick","quibble"]},{"Key":"minor nitpick","Fragments":["is"]},{"Key":"nitpick is","Fragments":["-","that"]},{"Key":"is -","Fragments":["could","I"]},{"Key":"give `unequal_pairs?`","Fragments":["a"]},{"Key":"`unequal_pairs?` a","Fragments":["name"]},{"Key":" @brandi","Fragments":["I"]},{"Key":"@brandi I","Fragments":["find"]},{"Key":"find `silent?(input)`","Fragments":["more"]},{"Key":"`silent?(input)` more","Fragments":["informative"]},{"Key":"more informative","Fragments":["than"]},{"Key":"informative than","Fragments":["`\"\""]},{"Key":"than `\"\"","Fragments":["=="]},{"Key":"== String.strip(input)`.","Fragments":["It"]},{"Key":"String.strip(input)`. It","Fragments":["tells"]},{"Key":"It tells","Fragments":["me"]},{"Key":"tells me","Fragments":["what's"]},{"Key":"me what's","Fragments":["happening"]},{"Key":"happening without","Fragments":["me"]},{"Key":"without me","Fragments":["really"]},{"Key":"me really","Fragments":["having","appreciate"]},{"Key":"really having","Fragments":["to"]},{"Key":"parse any","Fragments":["code."]},{"Key":"any code.","Fragments":["Line"]},{"Key":"code. Line","Fragments":["8"]},{"Key":"Line 8","Fragments":["is"]},{"Key":"best example","Fragments":["in"]},{"Key":"this of","Fragments":["where"]},{"Key":"would help.","Fragments":["It","All"]},{"Key":"help. It","Fragments":["also"]},{"Key":"the determination","Fragments":["of"]},{"Key":"determination of","Fragments":["what"]},{"Key":"a shout","Fragments":["is","ending"]},{"Key":"shout is","Fragments":["can"]},{"Key":"is can","Fragments":["change"]},{"Key":"change without","Fragments":["affecting"]},{"Key":"without affecting","Fragments":["`hey`."]},{"Key":"Nothing wrong","Fragments":["with"]},{"Key":"the chill","Fragments":["condition"]},{"Key":"chill condition","Fragments":["as"]},{"Key":"condition as","Fragments":["it","a"]},{"Key":"the attributes","Fragments":["are","at","just"]},{"Key":"attributes are","Fragments":["good","only"]},{"Key":"good too,","Fragments":["for"]},{"Key":"too, for","Fragments":["exactly"]},{"Key":"for exactly","Fragments":["the"]},{"Key":"the reasoning","Fragments":["you","behind","behind"]},{"Key":"reasoning you","Fragments":["describe."]},{"Key":"range `1..3`","Fragments":["is"]},{"Key":"`1..3` is","Fragments":["really"]},{"Key":"record `Range[first:","Fragments":["1,"]},{"Key":"`Range[first: 1,","Fragments":["last:","last:"]},{"Key":"1, last:","Fragments":["3]`","4]`"]},{"Key":"last: 3]`","Fragments":["(which"]},{"Key":"3]` (which","Fragments":["is"]},{"Key":"pretty printed","Fragments":["as"]},{"Key":"printed as","Fragments":["`1..3`),"]},{"Key":"as `1..3`),","Fragments":["so"]},{"Key":"`1..3`), so","Fragments":["you"]},{"Key":"use `some_range.first`","Fragments":["to"]},{"Key":"`some_range.first` to","Fragments":["get"]},{"Key":"first value","Fragments":["of"]},{"Key":"the range","Fragments":["and","is","test"]},{"Key":"range and","Fragments":["`some_range.last`","it"]},{"Key":"and `some_range.last`","Fragments":["to"]},{"Key":"`some_range.last` to","Fragments":["get"]},{"Key":"last value","Fragments":["of"]},{"Key":"downside of","Fragments":["this","those","using","using"]},{"Key":"this approach","Fragments":["is"]},{"Key":"can lead","Fragments":["to"]},{"Key":"to very","Fragments":["verbose"]},{"Key":"very verbose","Fragments":["broken"]},{"Key":"verbose broken","Fragments":["up"]},{"Key":"up code","Fragments":["which","if"]},{"Key":"which degrades","Fragments":["readability."]},{"Key":"degrades readability.","Fragments":["Whether"]},{"Key":"readability. Whether","Fragments":["it"]},{"Key":"Whether it","Fragments":["benefits"]},{"Key":"it benefits","Fragments":["or"]},{"Key":"benefits or","Fragments":["hurts"]},{"Key":"or hurts","Fragments":["readability"]},{"Key":"hurts readability","Fragments":["really"]},{"Key":"readability really","Fragments":["depends"]},{"Key":"really depends","Fragments":["on"]},{"Key":"in question,","Fragments":["in"]},{"Key":"question, in","Fragments":["this"]},{"Key":"particular case","Fragments":["I'd","(\"für\")","I'd","it's"]},{"Key":"case I'd","Fragments":["say","go","say"]},{"Key":"say both","Fragments":["\"inline"]},{"Key":"both \"inline","Fragments":["conditions\""]},{"Key":"\"inline conditions\"","Fragments":["and"]},{"Key":"conditions\" and","Fragments":["\"condition"]},{"Key":"and \"condition","Fragments":["private"]},{"Key":"\"condition private","Fragments":["functions\""]},{"Key":"private functions\"","Fragments":["are"]},{"Key":"functions\" are","Fragments":["fine."]},{"Key":"Thanks, @cecil.","Fragments":["I"]},{"Key":"@cecil. I","Fragments":["was"]},{"Key":"find docs","Fragments":["on"]},{"Key":"docs on","Fragments":["ranges"]},{"Key":"on ranges","Fragments":["and","and"]},{"Key":"ranges and","Fragments":["I","lots"]},{"Key":"time finding","Fragments":["anything."]},{"Key":"finding anything.","Fragments":["Probably"]},{"Key":"anything. Probably","Fragments":["because"]},{"Key":"Probably because","Fragments":["they","of"]},{"Key":"a relatively","Fragments":["new"]},{"Key":"relatively new","Fragments":["addition"]},{"Key":"new addition","Fragments":["to"]},{"Key":"language. That","Fragments":["would"]},{"Key":"That would","Fragments":["definitely","be","require","improve","put","help"]},{"Key":"code easier","Fragments":["to","to","to","to"]},{"Key":"comprehend. I'll","Fragments":["make"]},{"Key":"version. Thanks","Fragments":["again"]},{"Key":"saw @elouise's","Fragments":["code"]},{"Key":"@elouise's code","Fragments":["and"]},{"Key":"it too.","Fragments":["I'd"]},{"Key":"too. I'd","Fragments":["definitely"]},{"Key":"I'd definitely","Fragments":["go"]},{"Key":"definitely go","Fragments":["that"]},{"Key":"that route","Fragments":["to"]},{"Key":"route to","Fragments":["DRY","the"]},{"Key":"DRY up","Fragments":["code"]},{"Key":"use any","Fragments":["of","Regex","underlying"]},{"Key":"conditions more","Fragments":["than"]},{"Key":"me was","Fragments":["to"]},{"Key":"3 private","Fragments":["methods"]},{"Key":"into one-liners.","Fragments":["For"]},{"Key":"one-liners. For","Fragments":["````silence?````"]},{"Key":"For ````silence?````","Fragments":["and"]},{"Key":"````silence?```` and","Fragments":["````question?````,"]},{"Key":"and ````question?````,","Fragments":["you"]},{"Key":"````question?````, you","Fragments":["can"]},{"Key":"operator (````|\u003e````)","Fragments":["to"]},{"Key":"(````|\u003e````) to","Fragments":["shorten"]},{"Key":"shorten them","Fragments":["up."]},{"Key":"The one-liner","Fragments":["is","is"]},{"Key":"one-liner is","Fragments":["probably","probably"]},{"Key":"style thing,","Fragments":["but","but"]},{"Key":"thing, but","Fragments":["using","the","getting"]},{"Key":"but using","Fragments":["the","an"]},{"Key":"operator was","Fragments":["a"]},{"Key":"Otherwise, this","Fragments":["looks"]},{"Key":"had this","Fragments":["kata,"]},{"Key":"this kata,","Fragments":["it"]},{"Key":"kata, it","Fragments":["was"]},{"Key":"was recommended","Fragments":["to"]},{"Key":"recommended to","Fragments":["me"]},{"Key":"in SpeechAnalyzer","Fragments":["one-liners"]},{"Key":"SpeechAnalyzer one-liners","Fragments":["and"]},{"Key":"one-liners and","Fragments":["to"]},{"Key":"is fun","Fragments":["to"]},{"Key":"fun to","Fragments":["use","implement.","try"]},{"Key":"use once","Fragments":["you"]},{"Key":"once you","Fragments":["learn","are","get"]},{"Key":"learn about","Fragments":["it:","Elixir.","was","how"]},{"Key":"just sent","Fragments":["a"]},{"Key":"sent a","Fragments":["message"]},{"Key":"the elixir-core","Fragments":["mailing"]},{"Key":"elixir-core mailing","Fragments":["list"]},{"Key":"mailing list","Fragments":["asking","looking"]},{"Key":"list asking","Fragments":["what"]},{"Key":"asking what","Fragments":["people"]},{"Key":"people think","Fragments":["about","it","those","about","this"]},{"Key":"of String.slice","Fragments":["that"]},{"Key":"String.slice that","Fragments":["takes"]},{"Key":"a range.","Fragments":["I'm"]},{"Key":"range. I'm","Fragments":["used"]},{"Key":"having that","Fragments":["in","extra"]},{"Key":"Ruby, but","Fragments":["I"]},{"Key":"fit with","Fragments":["the","the"]},{"Key":"style or","Fragments":["whatever.","somebody"]},{"Key":"or whatever.","Fragments":["If"]},{"Key":"whatever. If","Fragments":["people"]},{"Key":"If people","Fragments":["think"]},{"Key":"sense it'd","Fragments":["be"]},{"Key":"be fun","Fragments":["to"]},{"Key":"to implement.","Fragments":["Maybe"]},{"Key":"implement. Maybe","Fragments":["get"]},{"Key":"Maybe get","Fragments":["my"]},{"Key":"first pull","Fragments":["request"]},{"Key":"request in","Fragments":["to"]},{"Key":"to Elixir.","Fragments":[":)"]},{"Key":"Line 16","Fragments":["should","improves"]},{"Key":"16 should","Fragments":["have"]},{"Key":"have failed","Fragments":["a"]},{"Key":"failed a","Fragments":["test"]},{"Key":"test since","Fragments":["it'd"]},{"Key":"since it'd","Fragments":["consider"]},{"Key":"it'd consider","Fragments":["\"1,"]},{"Key":"consider \"1,","Fragments":["2,"]},{"Key":"\"1, 2,","Fragments":["3.\"","3\""]},{"Key":"2, 3.\"","Fragments":["as"]},{"Key":"3.\" as","Fragments":["shouting."]},{"Key":"as shouting.","Fragments":["You","You"]},{"Key":"shouting. You","Fragments":["need","can"]},{"Key":"You need","Fragments":["to","to"]},{"Key":"are actual","Fragments":["letters"]},{"Key":"actual letters","Fragments":["in"]},{"Key":"letters in","Fragments":["the","any","the","the","the","all","other"]},{"Key":" Pipelines","Fragments":["certainly"]},{"Key":"Pipelines certainly","Fragments":["have"]},{"Key":"certainly have","Fragments":["their"]},{"Key":"have their","Fragments":["uses,"]},{"Key":"their uses,","Fragments":["but"]},{"Key":"uses, but","Fragments":["they're","maybe"]},{"Key":"but they're","Fragments":["not","frowned","the"]},{"Key":"general replacement","Fragments":["for"]},{"Key":"replacement for","Fragments":["function"]},{"Key":"function application.","Fragments":["I.e."]},{"Key":"application. I.e.","Fragments":["don't"]},{"Key":"I.e. don't","Fragments":["indiscriminately"]},{"Key":"don't indiscriminately","Fragments":["replace"]},{"Key":"indiscriminately replace","Fragments":["`b(a,...)`"]},{"Key":"replace `b(a,...)`","Fragments":["by"]},{"Key":"`b(a,...)` by","Fragments":["`a"]},{"Key":"by `a","Fragments":["|\u003e"]},{"Key":"`a |\u003e","Fragments":["b(...)`,","b","(b"]},{"Key":"|\u003e b(...)`,","Fragments":["it"]},{"Key":"b(...)`, it","Fragments":["doesn't"]},{"Key":"doesn't always","Fragments":["improve"]},{"Key":"always improve","Fragments":["readability"]},{"Key":"you're just","Fragments":["creating"]},{"Key":"just creating","Fragments":["more"]},{"Key":"creating more","Fragments":["work"]},{"Key":"compiler (`|\u003e`","Fragments":["is"]},{"Key":"(`|\u003e` is","Fragments":["a"]},{"Key":"that translates","Fragments":["back"]},{"Key":"translates back","Fragments":["into"]},{"Key":"call form).","Fragments":["Overuse"]},{"Key":"form). Overuse","Fragments":["of"]},{"Key":"Overuse of","Fragments":["pipelines"]},{"Key":"of pipelines","Fragments":["is","and"]},{"Key":"pipelines is","Fragments":["a"]},{"Key":"a newbie","Fragments":["mistake,","to","to","to","to"]},{"Key":"newbie mistake,","Fragments":["in"]},{"Key":"mistake, in","Fragments":["larger"]},{"Key":"in larger","Fragments":["Elixir"]},{"Key":"larger Elixir","Fragments":["codebases"]},{"Key":"Elixir codebases","Fragments":["they"]},{"Key":"codebases they","Fragments":["are"]},{"Key":"as prevalent","Fragments":["as"]},{"Key":"prevalent as","Fragments":["you"]},{"Key":"said, do","Fragments":["feel"]},{"Key":"use pipelines","Fragments":["whenever","to"]},{"Key":"pipelines whenever","Fragments":["you"]},{"Key":"whenever you","Fragments":["think","got"]},{"Key":"it improves","Fragments":["the"]},{"Key":"improves the","Fragments":["readability"]},{"Key":"This most","Fragments":["often"]},{"Key":"most often","Fragments":["occurs"]},{"Key":"often occurs","Fragments":["with"]},{"Key":"occurs with","Fragments":["enumerables"]},{"Key":"with enumerables","Fragments":["(collections),"]},{"Key":"enumerables (collections),","Fragments":["but"]},{"Key":"(collections), but","Fragments":["string"]},{"Key":"but string","Fragments":["pipelines"]},{"Key":"string pipelines","Fragments":["are"]},{"Key":"are also","Fragments":["common"]},{"Key":"also common","Fragments":["because"]},{"Key":"common because","Fragments":["you"]},{"Key":"you often","Fragments":["want"]},{"Key":"often want","Fragments":["to"]},{"Key":"chain functions","Fragments":["that"]},{"Key":"that transform","Fragments":["a"]},{"Key":"transform a","Fragments":["string."]},{"Key":"Updated to","Fragments":["use"]},{"Key":"new `String.slice/2`","Fragments":["that"]},{"Key":"`String.slice/2` that","Fragments":["takes"]},{"Key":"a Range!","Fragments":[":)"]},{"Key":"Range! :)","Fragments":["(Only"]},{"Key":":) (Only","Fragments":["works"]},{"Key":"(Only works","Fragments":["on"]},{"Key":"on Elixir","Fragments":["master","Sips","style"]},{"Key":"Elixir master","Fragments":["at"]},{"Key":"master at","Fragments":["this"]},{"Key":" @matt","Fragments":["Thank"]},{"Key":"@matt Thank","Fragments":["you"]},{"Key":"this info.","Fragments":["While"]},{"Key":"info. While","Fragments":["stumbling"]},{"Key":"While stumbling","Fragments":["through"]},{"Key":"stumbling through","Fragments":["exercises","this."]},{"Key":"through exercises","Fragments":["in"]},{"Key":"exercises in","Fragments":["a","all"]},{"Key":"language you've","Fragments":["never"]},{"Key":"you've never","Fragments":["used,"]},{"Key":"never used,","Fragments":["it's"]},{"Key":"used, it's","Fragments":["really"]},{"Key":"really helpful","Fragments":["to"]},{"Key":"helpful to","Fragments":["hear","write","simplify"]},{"Key":"hear from","Fragments":["more"]},{"Key":"from more","Fragments":["experienced"]},{"Key":"experienced developers.","Fragments":["Much"]},{"Key":"developers. Much","Fragments":["appreciated."]},{"Key":"Thanks, @althea!","Fragments":["Yeah,"]},{"Key":"@althea! Yeah,","Fragments":["I"]},{"Key":"was pretty","Fragments":["geeked","much","surprised","straightforward","generic","sure"]},{"Key":"pretty geeked","Fragments":["out"]},{"Key":"geeked out","Fragments":["about"]},{"Key":"out about","Fragments":["getting","my"]},{"Key":"about getting","Fragments":["a","the"]},{"Key":"getting a","Fragments":["pull","little","little","little"]},{"Key":"request accepted.","Fragments":["I"]},{"Key":"accepted. I","Fragments":["really"]},{"Key":"love open","Fragments":["source."]},{"Key":"open source.","Fragments":["It"]},{"Key":"source. It","Fragments":["makes"]},{"Key":"me irrationally","Fragments":["excited"]},{"Key":"irrationally excited","Fragments":["every"]},{"Key":"excited every","Fragments":["time"]},{"Key":"a chance","Fragments":["to","to"]},{"Key":"chance to","Fragments":["contribute.","talk","contribute."]},{"Key":"to contribute.","Fragments":[":)","Thanks!"]},{"Key":"actually have","Fragments":["not","a"]},{"Key":"not completed","Fragments":["one"]},{"Key":"completed one","Fragments":["of"]},{"Key":"these before,","Fragments":["we'll"]},{"Key":"before, we'll","Fragments":["see"]},{"Key":"we'll see","Fragments":["if"]},{"Key":"it lets","Fragments":["me"]},{"Key":"to guess,","Fragments":["but"]},{"Key":"guess, but","Fragments":["I"]},{"Key":"assume the","Fragments":["idea","new","old","overhead","sentence"]},{"Key":"hash with","Fragments":["word"]},{"Key":"with word","Fragments":["keys"]},{"Key":"word keys","Fragments":["and"]},{"Key":"keys and","Fragments":["count","then","values"]},{"Key":"count values.","Fragments":["But"]},{"Key":"values. But","Fragments":["I"]},{"Key":"what constraints","Fragments":["there"]},{"Key":"constraints there","Fragments":["are"]},{"Key":"input string.","Fragments":["So","If"]},{"Key":"string. So","Fragments":["I'll","that"]},{"Key":"So I'll","Fragments":["trust"]},{"Key":"I'll trust","Fragments":["the"]},{"Key":"trust the","Fragments":["regex"]},{"Key":" Most","Fragments":["obviously,","importantly,","people"]},{"Key":"Most obviously,","Fragments":["on"]},{"Key":"obviously, on","Fragments":["line"]},{"Key":"5, hash_dict","Fragments":["is"]},{"Key":"hash_dict is","Fragments":["unused."]},{"Key":"is unused.","Fragments":["You're"]},{"Key":"unused. You're","Fragments":["just"]},{"Key":"You're just","Fragments":["returning"]},{"Key":"returning it","Fragments":["to"]},{"Key":"next reduce","Fragments":["iteration,"]},{"Key":"reduce iteration,","Fragments":["so"]},{"Key":"iteration, so","Fragments":["no","I"]},{"Key":"so no","Fragments":["need"]},{"Key":"no need","Fragments":["to","for","to","to","to","to","to","to","to"]},{"Key":"to assign","Fragments":["to"]},{"Key":"assign to","Fragments":["a"]},{"Key":"Secondly, and","Fragments":["I'm"]},{"Key":"learning here,","Fragments":["but"]},{"Key":"the preferred","Fragments":["style"]},{"Key":"preferred style","Fragments":["is"]},{"Key":"style is","Fragments":["to","not"]},{"Key":"Dict module","Fragments":["instead","called"]},{"Key":"module instead","Fragments":["of"]},{"Key":"of HashDict","Fragments":["for","nor"]},{"Key":"HashDict for","Fragments":["that"]},{"Key":"that get","Fragments":["and"]},{"Key":"get and","Fragments":["put","put","put"]},{"Key":"Also, take","Fragments":["a","a","a","a"]},{"Key":"at Dict.update.","Fragments":["It"]},{"Key":"Dict.update. It","Fragments":["allows"]},{"Key":"It allows","Fragments":["you"]},{"Key":"to blend","Fragments":["the"]},{"Key":"blend the","Fragments":["get"]},{"Key":"the get","Fragments":["and"]},{"Key":"put calls","Fragments":["into"]},{"Key":"calls into","Fragments":["one"]},{"Key":"one by","Fragments":["providing"]},{"Key":"by providing","Fragments":["a"]},{"Key":" Stylistically","Fragments":["I","the"]},{"Key":"Stylistically I","Fragments":["think"]},{"Key":"line 3","Fragments":["could"]},{"Key":"3 could","Fragments":["be"]},{"Key":"read. You're","Fragments":["using"]},{"Key":"You're using","Fragments":["the","the","a","the","explicit"]},{"Key":"pipeline as","Fragments":["the","the"]},{"Key":"first param","Fragments":["inside"]},{"Key":"param inside","Fragments":["Enum.reduce."]},{"Key":"inside Enum.reduce.","Fragments":["So,"]},{"Key":"Enum.reduce. So,","Fragments":["why"]},{"Key":"So, why","Fragments":["not"]},{"Key":"not put","Fragments":["the"]},{"Key":"before it","Fragments":["and","was","enters"]},{"Key":"pipe into","Fragments":["Enum.reduce?"]},{"Key":"later exercises","Fragments":["where"]},{"Key":"exercises where","Fragments":["a"]},{"Key":"where a","Fragments":["pipeline"]},{"Key":"might definitely","Fragments":["make"]},{"Key":"agree. Don't","Fragments":["see"]},{"Key":"Don't see","Fragments":["how"]},{"Key":"help out","Fragments":["here.","in","with"]},{"Key":"out here.","Fragments":["Thanks"]},{"Key":"here. Thanks","Fragments":["for"]},{"Key":"for throwing","Fragments":["something"]},{"Key":"throwing something","Fragments":["new"]},{"Key":"something new","Fragments":["out"]},{"Key":"new out","Fragments":["there"]},{"Key":"out there","Fragments":["for","for","are","is"]},{"Key":"me though.","Fragments":["Can't"]},{"Key":"though. Can't","Fragments":["wait"]},{"Key":"Can't wait","Fragments":["to"]},{"Key":"wait to","Fragments":["try"]},{"Key":"right idea.","Fragments":["Here's"]},{"Key":"idea. Here's","Fragments":["the"]},{"Key":"various inputs","Fragments":["and"]},{"Key":"inputs and","Fragments":["expected"]},{"Key":"and expected","Fragments":["outputs:"]},{"Key":" {","Fragments":["\"word\",","\"one\",","\"one\",","a,","'AEIOULNRST',","'DG',","'BCMP',","'FHVWY',","'K',","'JX',","'QZ',","n,","good_time,","bad_time,",":ok,","word,","'AEIOULNRST',","'DG',","'BCMP',","'FHVWY',","'K',","'JX',","'QZ',"]},{"Key":"{ \"word\",","Fragments":["1"]},{"Key":"\"word\", 1","Fragments":["}"]},{"Key":"\"one of","Fragments":["each\""]},{"Key":"{ \"one\",","Fragments":["1","1"]},{"Key":"\"one\", 1","Fragments":["},","},"]},{"Key":"1 },","Fragments":["{","{","{","{","{"]},{"Key":"}, {","Fragments":["\"of\",","\"each\",","\"fish\",","\"two\",","\"red\",","\"blue\","]},{"Key":"{ \"of\",","Fragments":["1"]},{"Key":"\"of\", 1","Fragments":["},"]},{"Key":"{ \"each\",","Fragments":["1"]},{"Key":"\"each\", 1","Fragments":["}"]},{"Key":"{ \"fish\",","Fragments":["4"]},{"Key":"\"fish\", 4","Fragments":["},"]},{"Key":"4 },","Fragments":["{"]},{"Key":"{ \"two\",","Fragments":["1"]},{"Key":"\"two\", 1","Fragments":["},"]},{"Key":"{ \"red\",","Fragments":["1"]},{"Key":"\"red\", 1","Fragments":["},"]},{"Key":"{ \"blue\",","Fragments":["1}"]},{"Key":" \"car","Fragments":[":"]},{"Key":" {\"car\",","Fragments":["1},"]},{"Key":"{\"car\", 1},","Fragments":["{\"carpet\","]},{"Key":"1}, {\"carpet\",","Fragments":["1},"]},{"Key":"{\"carpet\", 1},","Fragments":["{\"as\","]},{"Key":"1}, {\"as\",","Fragments":["1},"]},{"Key":"{\"as\", 1},","Fragments":["{\"java\","]},{"Key":"1}, {\"java\",","Fragments":["1},"]},{"Key":"{\"java\", 1},","Fragments":["{\"javascript\","]},{"Key":"1}, {\"javascript\",","Fragments":["1}"]},{"Key":" \"testing,","Fragments":["1,"]},{"Key":"\"testing, 1,","Fragments":["2"]},{"Key":"1, 2","Fragments":["testing\""]},{"Key":" {\"testing\",","Fragments":["2},"]},{"Key":"{\"testing\", 2},","Fragments":["{\"1\","]},{"Key":"2}, {\"1\",","Fragments":["1},"]},{"Key":"{\"1\", 1},","Fragments":["{\"2\","]},{"Key":"1}, {\"2\",","Fragments":["1}"]},{"Key":" \"go","Fragments":["Go"]},{"Key":"\"go Go","Fragments":["GO\""]},{"Key":" {\"go\",","Fragments":["3}"]},{"Key":"The regex","Fragments":["is","I","is","could"]},{"Key":"looking to","Fragments":["remove","treat","refactor"]},{"Key":"remove characters","Fragments":["like","you"]},{"Key":"characters like","Fragments":["!@#$%^\u0026*()","éøñ"]},{"Key":"like !@#$%^\u0026*()","Fragments":["and"]},{"Key":"!@#$%^\u0026*() and","Fragments":["really"]},{"Key":"and really","Fragments":["anything"]},{"Key":"really anything","Fragments":["that's"]},{"Key":"a space,","Fragments":["letter,"]},{"Key":"space, letter,","Fragments":["or"]},{"Key":"letter, or","Fragments":["digit."]},{"Key":"or digit.","Fragments":["It's"]},{"Key":"digit. It's","Fragments":["using"]},{"Key":"It's using","Fragments":["the"]},{"Key":"the UTF-8","Fragments":["safe"]},{"Key":"UTF-8 safe","Fragments":["syntax"]},{"Key":"safe syntax","Fragments":["for"]},{"Key":"for letters","Fragments":["instead","(Unicode"]},{"Key":"letters instead","Fragments":["of"]},{"Key":"the oft-overused","Fragments":["a-zA-Z"]},{"Key":"oft-overused a-zA-Z","Fragments":["stuff"]},{"Key":"a-zA-Z stuff","Fragments":["so"]},{"Key":"stuff so","Fragments":["that"]},{"Key":"way characters","Fragments":["like"]},{"Key":"like éøñ","Fragments":["don't"]},{"Key":"éøñ don't","Fragments":["get"]},{"Key":"using Dict","Fragments":["instead","functions"]},{"Key":"Dict instead","Fragments":["of","of"]},{"Key":"HashDict nor","Fragments":["about"]},{"Key":"nor about","Fragments":["Dict.update,"]},{"Key":"about Dict.update,","Fragments":["so"]},{"Key":"Dict.update, so","Fragments":["I'll"]},{"Key":"some learning","Fragments":["and"]},{"Key":"learning and","Fragments":["refactoring."]},{"Key":"and refactoring.","Fragments":["Thanks"]},{"Key":"refactoring. Thanks","Fragments":["for"]},{"Key":"that heads","Fragments":["up."]},{"Key":"pipeline to","Fragments":["un-nest"]},{"Key":"to un-nest","Fragments":["several"]},{"Key":"un-nest several","Fragments":["operations"]},{"Key":"several operations","Fragments":["done"]},{"Key":"operations done","Fragments":["to"]},{"Key":"done to","Fragments":["the","make"]},{"Key":"string. If","Fragments":["I"]},{"Key":"remember correctly,","Fragments":["pipe"]},{"Key":"correctly, pipe","Fragments":["sends"]},{"Key":"pipe sends","Fragments":["the"]},{"Key":"sends the","Fragments":["result"]},{"Key":"parameters of","Fragments":["the","a"]},{"Key":"next call","Fragments":["but"]},{"Key":"call but","Fragments":["the"]},{"Key":"input string","Fragments":["is"]},{"Key":"for Enum.reduce.","Fragments":["I","An"]},{"Key":"Enum.reduce. I","Fragments":["can,"]},{"Key":"I can,","Fragments":["however,"]},{"Key":"can, however,","Fragments":["do"]},{"Key":"however, do","Fragments":["those"]},{"Key":"those string","Fragments":["changes"]},{"Key":"string changes","Fragments":["on"]},{"Key":"changes on","Fragments":["the"]},{"Key":"line before","Fragments":["to","each"]},{"Key":"the golfy","Fragments":["feel"]},{"Key":"golfy feel","Fragments":["of"]},{"Key":"feel of","Fragments":["the"]},{"Key":"the nit!","Fragments":["I"]},{"Key":"I shall","Fragments":["refactor."]},{"Key":"shall refactor.","Fragments":[":)"]},{"Key":" `List.flatten/1`","Fragments":["is","is"]},{"Key":"`List.flatten/1` is","Fragments":["unneccesary","unneccesary"]},{"Key":"is unneccesary","Fragments":["here","here"]},{"Key":" `import`","Fragments":["is"]},{"Key":"`import` is","Fragments":["rarely","a"]},{"Key":"rarely used","Fragments":["in"]},{"Key":"Elixir. `Enum.filter`","Fragments":["is"]},{"Key":"`Enum.filter` is","Fragments":["much","much"]},{"Key":"common than","Fragments":["just"]},{"Key":"just `filter`","Fragments":["and"]},{"Key":"Elixir programmers","Fragments":["tend"]},{"Key":"programmers tend","Fragments":["to"]},{"Key":"understand `filter`","Fragments":["as"]},{"Key":"`filter` as","Fragments":["\"my"]},{"Key":"as \"my","Fragments":["local"]},{"Key":"\"my local","Fragments":["function"]},{"Key":"local function","Fragments":["filter\"."]},{"Key":"function filter\".","Fragments":["From"]},{"Key":"filter\". From","Fragments":["a"]},{"Key":"From a","Fragments":["\"understanding"]},{"Key":"a \"understanding","Fragments":["it"]},{"Key":"\"understanding it","Fragments":["in"]},{"Key":"one glance\"","Fragments":["perspective"]},{"Key":"glance\" perspective","Fragments":["`Enum.filter`"]},{"Key":"perspective `Enum.filter`","Fragments":["is"]},{"Key":"better. Also","Fragments":["consider"]},{"Key":"example `Enum.zip`","Fragments":["and","and","vs"]},{"Key":"`Enum.zip` and","Fragments":["`List.zip`","`List.zip`,"]},{"Key":"and `List.zip`","Fragments":["(with"]},{"Key":"`List.zip` (with","Fragments":["subtly"]},{"Key":"(with subtly","Fragments":["different"]},{"Key":"subtly different","Fragments":["behaviour)","but","so"]},{"Key":"different behaviour)","Fragments":["and"]},{"Key":"behaviour) and","Fragments":["`zip`"]},{"Key":"and `zip`","Fragments":["could"]},{"Key":"`zip` could","Fragments":["refer"]},{"Key":"could refer","Fragments":["to"]},{"Key":"to any","Fragments":["of"]},{"Key":"two so","Fragments":["to"]},{"Key":"would need","Fragments":["to","(if","to"]},{"Key":"look back","Fragments":["up"]},{"Key":"up at","Fragments":["the"]},{"Key":"to Haskell","Fragments":["where","as"]},{"Key":"Haskell where","Fragments":["imports"]},{"Key":"where imports","Fragments":["are"]},{"Key":"imports are","Fragments":["common,"]},{"Key":"are common,","Fragments":["but"]},{"Key":"common, but","Fragments":["Haskell's"]},{"Key":"but Haskell's","Fragments":["type"]},{"Key":"Haskell's type","Fragments":["system"]},{"Key":"type system","Fragments":["is","really"]},{"Key":"system is","Fragments":["a","based","based"]},{"Key":"big part","Fragments":["in","of"]},{"Key":"in why","Fragments":["that"]},{"Key":"why that","Fragments":["works"]},{"Key":"that works","Fragments":["out.","perfectly","much"]},{"Key":"works out.","Fragments":["The"]},{"Key":"out. The","Fragments":["type"]},{"Key":"The type","Fragments":["system"]},{"Key":"system really","Fragments":["cuts"]},{"Key":"really cuts","Fragments":["down"]},{"Key":"cuts down","Fragments":["the"]},{"Key":"the possible","Fragments":["meanings","values"]},{"Key":"possible meanings","Fragments":["of"]},{"Key":"meanings of","Fragments":["a"]},{"Key":"particular instance","Fragments":["of"]},{"Key":"call and","Fragments":["that's"]},{"Key":"that's often","Fragments":["enough"]},{"Key":"often enough","Fragments":["to"]},{"Key":"reader understand","Fragments":["which","what"]},{"Key":"understand which","Fragments":["function"]},{"Key":"is invoked","Fragments":["without"]},{"Key":"invoked without","Fragments":["looking"]},{"Key":"without looking","Fragments":["at"]},{"Key":"Why `(filter","Fragments":["\u0026mutation?/1)`"]},{"Key":"`(filter \u0026mutation?/1)`","Fragments":["and","-"]},{"Key":"\u0026mutation?/1)` and","Fragments":["not"]},{"Key":"It's common","Fragments":["to","to","not","to","to","to","to","to","to"]},{"Key":"in `def`","Fragments":["and"]},{"Key":"`def` and","Fragments":["`defp`,","`defp`","`defp`"]},{"Key":"and `defp`,","Fragments":["at"]},{"Key":"`defp`, at","Fragments":["least"]},{"Key":"least when","Fragments":["arguments"]},{"Key":"when arguments","Fragments":["are"]},{"Key":"arguments are","Fragments":["used.","full","in","most"]},{"Key":" `String.reverse(s)","Fragments":["|\u003e"]},{"Key":"`String.reverse(s) |\u003e","Fragments":["String.first`"]},{"Key":"|\u003e String.first`","Fragments":["can"]},{"Key":"String.first` can","Fragments":["be"]},{"Key":"making `is_shouting?`","Fragments":["and"]},{"Key":"`is_shouting?` and","Fragments":["friends"]},{"Key":"friends private","Fragments":["(`defp`)"]},{"Key":"private (`defp`)","Fragments":["instead","and","and"]},{"Key":"(`defp`) instead","Fragments":["of"]},{"Key":"of public","Fragments":["(`def`)?"]},{"Key":"you trying","Fragments":["to"]},{"Key":"with `x","Fragments":["!="]},{"Key":"`x !=","Fragments":["String.downcase(x)","String.downcase(x)`:"]},{"Key":"!= String.downcase(x)","Fragments":["and"]},{"Key":"String.downcase(x) and","Fragments":["x"]},{"Key":"and x","Fragments":["=="]},{"Key":"== String.upcase(x)`?","Fragments":["That"]},{"Key":"String.upcase(x)`? That","Fragments":["line"]},{"Key":"That line","Fragments":["is"]},{"Key":"Why `(String.strip","Fragments":["x)`"]},{"Key":"`(String.strip x)`","Fragments":["and","is"]},{"Key":"x)` and","Fragments":["not"]},{"Key":"1) `x","Fragments":["=="]},{"Key":"`x ==","Fragments":["String.upcase(x)`:","String.upcase(x)`"]},{"Key":"== String.upcase(x)`:","Fragments":["String"]},{"Key":"String.upcase(x)`: String","Fragments":["contains"]},{"Key":"String contains","Fragments":["no","uppercase"]},{"Key":"contains no","Fragments":["lowercase"]},{"Key":"no lowercase","Fragments":["characters.","letters)."]},{"Key":" `x","Fragments":["!=","=="]},{"Key":"!= String.downcase(x)`:","Fragments":["String"]},{"Key":"String.downcase(x)`: String","Fragments":["contains"]},{"Key":"contains uppercase","Fragments":["characters."]},{"Key":" Together,","Fragments":["this"]},{"Key":"Together, this","Fragments":["means"]},{"Key":"== String.upcase(x)`","Fragments":["alone"]},{"Key":"String.upcase(x)` alone","Fragments":["fails"]},{"Key":"alone fails","Fragments":["on"]},{"Key":"fails on","Fragments":["the","numbers"]},{"Key":"the corner","Fragments":["case"]},{"Key":"corner case","Fragments":["`\"1,"]},{"Key":"case `\"1,","Fragments":["2,"]},{"Key":"`\"1, 2,","Fragments":["3\"`.","3\"`,","3\"`"]},{"Key":"2) `(String.strip","Fragments":["x)`"]},{"Key":"x)` is","Fragments":["really"]},{"Key":"really stupid,","Fragments":["agreed."]},{"Key":"stupid, agreed.","Fragments":["Am"]},{"Key":"agreed. Am","Fragments":["I"]},{"Key":"I excused","Fragments":["if"]},{"Key":"excused if","Fragments":["I"]},{"Key":"like Clojure?","Fragments":[":-)"]},{"Key":"guess in","Fragments":["the"]},{"Key":"the absence","Fragments":["of"]},{"Key":"absence of","Fragments":["character"]},{"Key":"character property","Fragments":["testing","tests"]},{"Key":"property testing","Fragments":["functions"]},{"Key":"testing functions","Fragments":["in"]},{"Key":"String your","Fragments":["approach"]},{"Key":"is valid.","Fragments":["I've"]},{"Key":"valid. I've","Fragments":["seen"]},{"Key":"people use","Fragments":["a","`reduce`,"]},{"Key":"expression there","Fragments":["to"]},{"Key":"there's at","Fragments":["least"]},{"Key":"one character","Fragments":["in"]},{"Key":"character in","Fragments":["the","a"]},{"Key":"string but","Fragments":["this"]},{"Key":"works too","Fragments":["(and"]},{"Key":"too (and","Fragments":["avoids"]},{"Key":"(and avoids","Fragments":["the"]},{"Key":"avoids the","Fragments":["overhead","deprecated","regex."]},{"Key":"the overhead","Fragments":["of","of","of","of"]},{"Key":"overhead of","Fragments":["a","a","HashDicts","that","string"]},{"Key":"a regex).","Fragments":["You"]},{"Key":"regex). You","Fragments":["may"]},{"Key":"a comment","Fragments":["to","on","or","from","of"]},{"Key":"comment to","Fragments":["explain"]},{"Key":"the odd","Fragments":["looking","code"]},{"Key":"odd looking","Fragments":["line"]},{"Key":"looking line","Fragments":["though."]},{"Key":"got it","Fragments":["backwards."]},{"Key":"it backwards.","Fragments":["Pipe"]},{"Key":"backwards. Pipe","Fragments":["sends"]},{"Key":"Pipe sends","Fragments":["to"]},{"Key":"sends to","Fragments":["the"]},{"Key":"the _first_","Fragments":["parameter"]},{"Key":"_first_ parameter","Fragments":["of"]},{"Key":"parameter of","Fragments":["the"]},{"Key":"the subsequent","Fragments":["function.","comparison"]},{"Key":"subsequent function.","Fragments":["Here's"]},{"Key":"function. Here's","Fragments":["an"]},{"Key":"where I've","Fragments":["used"]},{"Key":"used Enum.reduce","Fragments":["at"]},{"Key":"Enum.reduce at","Fragments":["the"]},{"Key":"pipeline (a","Fragments":["small"]},{"Key":"(a small","Fragments":["one):"]},{"Key":"actually pretty","Fragments":["much"]},{"Key":"much completely","Fragments":["new"]},{"Key":"Haskell as","Fragments":["of"]},{"Key":"of starting","Fragments":["exercism,"]},{"Key":"starting exercism,","Fragments":["so"]},{"Key":"exercism, so","Fragments":["it's"]},{"Key":"not that.","Fragments":["I"]},{"Key":"when I'm","Fragments":["writing"]},{"Key":"I'm writing","Fragments":["code","is","a"]},{"Key":"writing code","Fragments":["I"]},{"Key":"much noise","Fragments":["as"]},{"Key":"noise as","Fragments":["possible,"]},{"Key":"possible, so","Fragments":["every"]},{"Key":"so every","Fragments":["word"]},{"Key":"every word","Fragments":["is"]},{"Key":"is essential","Fragments":["for"]},{"Key":"essential for","Fragments":["telling"]},{"Key":"for telling","Fragments":["the"]},{"Key":"telling the","Fragments":["story"]},{"Key":"story at","Fragments":["whatever"]},{"Key":"at whatever","Fragments":["level"]},{"Key":"whatever level","Fragments":["of"]},{"Key":"abstraction the","Fragments":["function"]},{"Key":"function etc","Fragments":["I'm"]},{"Key":"etc I'm","Fragments":["writing"]},{"Key":"writing is","Fragments":["at."]},{"Key":"about `(filter","Fragments":["\u0026mutation?/1)`"]},{"Key":"\u0026mutation?/1)` -","Fragments":["I"]},{"Key":"that *is*","Fragments":["something"]},{"Key":"*is* something","Fragments":["I've"]},{"Key":"something I've","Fragments":["picked"]},{"Key":"I've picked","Fragments":["up"]},{"Key":"Haskell exercises.","Fragments":["Will"]},{"Key":"exercises. Will","Fragments":["change"]},{"Key":"Will change","Fragments":["that."]},{"Key":" `List.zip`","Fragments":["actually","might","might"]},{"Key":"`List.zip` actually","Fragments":["does"]},{"Key":"does more","Fragments":["what"]},{"Key":"more what","Fragments":["I"]},{"Key":"want here,","Fragments":["so"]},{"Key":"so will","Fragments":["change"]},{"Key":"will change","Fragments":["to"]},{"Key":"change to","Fragments":["use","reduce?","make,","the"]},{"Key":"The parentheses","Fragments":["around","are"]},{"Key":"arguments is","Fragments":["interesting"]},{"Key":"actually hate","Fragments":["it"]},{"Key":"hate it","Fragments":["when"]},{"Key":"reason something","Fragments":["about"]},{"Key":"the `do`","Fragments":["in"]},{"Key":"`do` in","Fragments":["Elixir"]},{"Key":"Elixir makes","Fragments":["me"]},{"Key":"like leaving","Fragments":["them"]},{"Key":"leaving them","Fragments":["off."]},{"Key":"Will rewrite","Fragments":["with"]},{"Key":"rewrite with","Fragments":["your"]},{"Key":"your style","Fragments":["suggestions"]},{"Key":"style suggestions","Fragments":["to"]},{"Key":"about that?","Fragments":["If"]},{"Key":"that? If","Fragments":["I"]},{"Key":"I remove","Fragments":["the","the","it"]},{"Key":"the flatten","Fragments":["I","step.","and"]},{"Key":"flatten I","Fragments":["get"]},{"Key":"list like","Fragments":["this:"]},{"Key":" `[[\"one\"],","Fragments":["[\"fish\"],"]},{"Key":"`[[\"one\"], [\"fish\"],","Fragments":["[\"two\"],"]},{"Key":"cases either,","Fragments":["but"]},{"Key":"languages require","Fragments":["at"]},{"Key":"require at","Fragments":["least"]},{"Key":"one alphabetical","Fragments":["character"]},{"Key":"alphabetical character","Fragments":["to"]},{"Key":"`HashDict.update/4` here.","Fragments":["And"]},{"Key":"here. And","Fragments":["you"]},{"Key":"`Regex.scan/2` that","Fragments":["returns"]},{"Key":"Is \"10!\"","Fragments":["yelling?"]},{"Key":"assuming you","Fragments":["are"]},{"Key":"are referring","Fragments":["to","to,"]},{"Key":"old test","Fragments":["case"]},{"Key":"case that","Fragments":["contained","depends","the","non-tail-recursive"]},{"Key":"that contained","Fragments":["`\"10!\"`.","the"]},{"Key":"contained `\"10!\"`.","Fragments":["The"]},{"Key":"`\"10!\"`. The","Fragments":["current"]},{"Key":"current ones","Fragments":["do","either."]},{"Key":"ones do","Fragments":["not"]},{"Key":"case. Although,","Fragments":["I"]},{"Key":"Although, I","Fragments":["just"]},{"Key":"most current","Fragments":["ones"]},{"Key":"ones either.","Fragments":["Any"]},{"Key":"either. Any","Fragments":["idea"]},{"Key":"idea how","Fragments":["to","to","difficult"]},{"Key":"pull the","Fragments":["latest","list","roster"]},{"Key":"without copying","Fragments":["from"]},{"Key":"copying from","Fragments":["GitHub?"]},{"Key":"regex stuff","Fragments":["altogether"]},{"Key":"stuff altogether","Fragments":["by"]},{"Key":"altogether by","Fragments":["getting"]},{"Key":"by getting","Fragments":["creative"]},{"Key":"getting creative","Fragments":["with"]},{"Key":"creative with","Fragments":["String"]},{"Key":"accomplish what","Fragments":["you're"]},{"Key":"in is_all_upcase","Fragments":["without"]},{"Key":"is_all_upcase without","Fragments":["having"]},{"Key":"to enumerate","Fragments":["through","them"]},{"Key":"enumerate through","Fragments":["all"]},{"Key":"through all","Fragments":["the"]},{"Key":" @mavis","Fragments":["I"]},{"Key":"@mavis I","Fragments":["actually"]},{"Key":"actually still","Fragments":["think"]},{"Key":"think I'd","Fragments":["prefer"]},{"Key":"prefer using","Fragments":["`import`"]},{"Key":"`import` to","Fragments":["reduce"]},{"Key":"the noise","Fragments":["on"]},{"Key":"noise on","Fragments":["line"]},{"Key":"line 4.","Fragments":["Even"]},{"Key":"4. Even","Fragments":["though"]},{"Key":"though the","Fragments":["specifics","result","answer","tests","`Stream.chunk`","name"]},{"Key":"the specifics","Fragments":["of"]},{"Key":"specifics of","Fragments":["`List.zip`","wording"]},{"Key":"of `List.zip`","Fragments":["and"]},{"Key":"`List.zip` and","Fragments":["`Enum.zip`"]},{"Key":"and `Enum.zip`","Fragments":["are"]},{"Key":"`Enum.zip` are","Fragments":["slightly"]},{"Key":"are slightly","Fragments":["different,","more"]},{"Key":"slightly different,","Fragments":["they"]},{"Key":"different, they","Fragments":["still"]},{"Key":"they still","Fragments":["do"]},{"Key":"still do","Fragments":["*in"]},{"Key":"do *in","Fragments":["general"]},{"Key":"*in general","Fragments":["terms*"]},{"Key":"general terms*","Fragments":["the"]},{"Key":"terms* the","Fragments":["same"]},{"Key":"thing, so","Fragments":["I'm","it'd"]},{"Key":"with reading","Fragments":["`zip`"]},{"Key":"reading `zip`","Fragments":["and"]},{"Key":"`zip` and","Fragments":["not"]},{"Key":"not knowing","Fragments":["immediately","what"]},{"Key":"knowing immediately","Fragments":["which"]},{"Key":"immediately which","Fragments":["one"]},{"Key":"one it","Fragments":["is"]},{"Key":"can understand","Fragments":["the","how","why","if"]},{"Key":"the high-level","Fragments":["intent"]},{"Key":"high-level intent","Fragments":["of"]},{"Key":"code fine","Fragments":["(in"]},{"Key":"fine (in","Fragments":["fact"]},{"Key":"(in fact","Fragments":["perhaps","all"]},{"Key":"fact perhaps","Fragments":["better),"]},{"Key":"perhaps better),","Fragments":["and"]},{"Key":"better), and","Fragments":["if"]},{"Key":"becomes apparent","Fragments":["that"]},{"Key":"apparent that","Fragments":["I"]},{"Key":"the specifics,","Fragments":["I"]},{"Key":"specifics, I","Fragments":["can"]},{"Key":"import statement","Fragments":["to","might"]},{"Key":"statement to","Fragments":["find"]},{"Key":"if somebody","Fragments":["uses"]},{"Key":"somebody uses","Fragments":["a"]},{"Key":"a German","Fragments":["word","word","word"]},{"Key":"German word","Fragments":["like","like","like"]},{"Key":"like \"für\"","Fragments":["(for)?","(for)?","(German","(German","(German","(German","(German"]},{"Key":"No idea","Fragments":["to","how"]},{"Key":"was referring","Fragments":["more","to"]},{"Key":"referring more","Fragments":["to"]},{"Key":"general question","Fragments":["of"]},{"Key":"question of","Fragments":["whether"]},{"Key":"a non-empty","Fragments":["string","string","list,"]},{"Key":"non-empty string","Fragments":["that","with"]},{"Key":"string that","Fragments":["doesn't"]},{"Key":"contain letters","Fragments":["is"]},{"Key":"letters is","Fragments":["shouting."]},{"Key":"is shouting.","Fragments":["Just"]},{"Key":"shouting. Just","Fragments":["wanted"]},{"Key":"Just wanted","Fragments":["to","to"]},{"Key":"sure you've","Fragments":["thought"]},{"Key":"you've thought","Fragments":["of","about"]},{"Key":"that (there","Fragments":["isn't"]},{"Key":"(there isn't","Fragments":["a"]},{"Key":"a wrong","Fragments":["answer)."]},{"Key":"That's fine","Fragments":["too,"]},{"Key":"fine too,","Fragments":["you've"]},{"Key":"too, you've","Fragments":["thought"]},{"Key":"it's valid","Fragments":["according"]},{"Key":"valid according","Fragments":["to"]},{"Key":"have three","Fragments":["clauses"]},{"Key":"three clauses","Fragments":["that"]},{"Key":"clauses that","Fragments":["return"]},{"Key":"return `@bettye`.","Fragments":["Can"]},{"Key":"`@bettye`. Can","Fragments":["you"]},{"Key":"you fold","Fragments":["them"]},{"Key":"fold them","Fragments":["into"]},{"Key":"into one?","Fragments":["(Hint:"]},{"Key":"one? (Hint:","Fragments":["cond"]},{"Key":"(Hint: cond","Fragments":["evaluates"]},{"Key":"cond evaluates","Fragments":["conditions"]},{"Key":"evaluates conditions","Fragments":["in"]},{"Key":"for stripping","Fragments":["off","out"]},{"Key":"stripping off","Fragments":["whitespace."]},{"Key":"off whitespace.","Fragments":["That"]},{"Key":"whitespace. That","Fragments":["would"]},{"Key":"for making","Fragments":["`silence?`,","my"]},{"Key":"making `silence?`,","Fragments":["`question?`"]},{"Key":"`silence?`, `question?`","Fragments":["and"]},{"Key":"and `yelling?`","Fragments":["public"]},{"Key":"`yelling?` public","Fragments":["(`def`)"]},{"Key":"public (`def`)","Fragments":["instead"]},{"Key":"(`def`) instead","Fragments":["of"]},{"Key":"really in","Fragments":["love"]},{"Key":"in love","Fragments":["with"]},{"Key":"love with","Fragments":["this"]},{"Key":"this solution.","Fragments":["I"]},{"Key":"solution. I","Fragments":["couldn't","went"]},{"Key":"couldn't work","Fragments":["out","out","out"]},{"Key":"out how/if","Fragments":["there"]},{"Key":"how/if there","Fragments":["was"]},{"Key":"with function","Fragments":["guards","guards"]},{"Key":"function guards","Fragments":["rather","you'd","`when"]},{"Key":"guards rather","Fragments":["than"]},{"Key":"`cond` -","Fragments":["it"]},{"Key":"bit workaday,","Fragments":["like"]},{"Key":"workaday, like","Fragments":["it's"]},{"Key":"really using","Fragments":["anything"]},{"Key":"using anything","Fragments":["particularly"]},{"Key":"anything particularly","Fragments":["interesting"]},{"Key":"particularly interesting","Fragments":["about"]},{"Key":"about Elixir.","Fragments":["Hmmm.","I"]},{"Key":" Btw,","Fragments":["to","with","this","if","it","I","it's","`x..y`","my","this","I","it's","you","`\u0026(String.from_char_list!(\u00261))`","there","it's","because","this","there"]},{"Key":"Btw, to","Fragments":["use"]},{"Key":"guards you'd","Fragments":["need"]},{"Key":"list, match","Fragments":["on"]},{"Key":"then convert","Fragments":["it"]},{"Key":"convert it","Fragments":["back"]},{"Key":"back again.","Fragments":["I"]},{"Key":"again. I","Fragments":["suspect"]},{"Key":"suspect any","Fragments":["performance"]},{"Key":"performance improvement","Fragments":["over","you"]},{"Key":"improvement over","Fragments":["the"]},{"Key":"cond will","Fragments":["be"]},{"Key":"be eaten","Fragments":["by"]},{"Key":"eaten by","Fragments":["the"]},{"Key":" Agreed.","Fragments":["It","They're","I'm"]},{"Key":"Agreed. It","Fragments":["seems"]},{"Key":"seems you","Fragments":["went","could"]},{"Key":"went out","Fragments":["of"]},{"Key":"use Elixir's","Fragments":["pattern","`from..to`.","method"]},{"Key":"matching here,","Fragments":["but"]},{"Key":"problem was","Fragments":["a"]},{"Key":"too simple","Fragments":["for"]},{"Key":"simple for","Fragments":["that."]},{"Key":"Sometimes the","Fragments":["ugly"]},{"Key":"the ugly","Fragments":["workaday"]},{"Key":"ugly workaday","Fragments":["solution"]},{"Key":"workaday solution","Fragments":["is"]},{"Key":"best one.","Fragments":["I"]},{"Key":"with in","Fragments":["this"]},{"Key":"this solution,","Fragments":["you","it"]},{"Key":"solution, you","Fragments":["get","had"]},{"Key":"the job","Fragments":["done,"]},{"Key":"job done,","Fragments":["you"]},{"Key":"done, you","Fragments":["handle"]},{"Key":"handle strings/unicode","Fragments":["correctly"]},{"Key":"strings/unicode correctly","Fragments":["and"]},{"Key":"correctly and","Fragments":["the","I'd"]},{"Key":"I modified","Fragments":["it","the","it."]},{"Key":"modified it","Fragments":["to"]},{"Key":"avoid duplicating","Fragments":["the"]},{"Key":"the @lincoln","Fragments":["response."]},{"Key":"@lincoln response.","Fragments":["But"]},{"Key":"more complex,","Fragments":["so"]},{"Key":"complex, so","Fragments":["I'm"]},{"Key":"sure I'd","Fragments":["chalk"]},{"Key":"I'd chalk","Fragments":["in"]},{"Key":"chalk in","Fragments":["up"]},{"Key":"in up","Fragments":["to"]},{"Key":"a net","Fragments":["win."]},{"Key":"it's about","Fragments":["string"]},{"Key":"about string","Fragments":["manipulation"]},{"Key":"string manipulation","Fragments":["matching","now,","call"]},{"Key":"manipulation matching","Fragments":["vague"]},{"Key":"matching vague","Fragments":["requirements,"]},{"Key":"vague requirements,","Fragments":["and"]},{"Key":"requirements, and","Fragments":["no"]},{"Key":"no so","Fragments":["much"]},{"Key":"much about","Fragments":["me","*why*","elixir","elixir","opinion","changing"]},{"Key":"about me","Fragments":["learning"]},{"Key":"me learning","Fragments":["more"]},{"Key":"learning more","Fragments":["elixir."]},{"Key":" `String.length(...)","Fragments":["\u003e"]},{"Key":"`String.length(...) \u003e","Fragments":["0`"]},{"Key":"\u003e 0`","Fragments":["can"]},{"Key":"0` can","Fragments":["be","be","be","also","be"]},{"Key":"as `...","Fragments":["!="]},{"Key":"`... !=","Fragments":["\"\"`"]},{"Key":"the strip","Fragments":["first"]},{"Key":"strip first","Fragments":["to"]},{"Key":"first to","Fragments":["simplify","convert","point"]},{"Key":"only strip","Fragments":["out"]},{"Key":"strip out","Fragments":["numbers"]},{"Key":"out numbers","Fragments":["and"]},{"Key":"numbers and","Fragments":["comma's?","non-exclamation","hardest","other","special","symbols"]},{"Key":"Elixir exercise","Fragments":["doesn't"]},{"Key":"exercise doesn't","Fragments":["so"]},{"Key":"doesn't so","Fragments":["much"]},{"Key":"much teach","Fragments":["you"]},{"Key":"teach you","Fragments":["the","much"]},{"Key":"the mechanics","Fragments":["of"]},{"Key":"mechanics of","Fragments":["a"]},{"Key":"a language,","Fragments":["it"]},{"Key":"language, it","Fragments":["teaches"]},{"Key":"it teaches","Fragments":["you"]},{"Key":"teaches you","Fragments":["good"]},{"Key":"you good","Fragments":["idioms"]},{"Key":"good idioms","Fragments":["and","in"]},{"Key":"idioms and","Fragments":["style."]},{"Key":"and style.","Fragments":["Unfortunately"]},{"Key":"style. Unfortunately","Fragments":["most"]},{"Key":"Unfortunately most","Fragments":["Elixir"]},{"Key":"most Elixir","Fragments":["exercises"]},{"Key":"Elixir exercises","Fragments":["are","from"]},{"Key":"are about","Fragments":["strings"]},{"Key":"strings right","Fragments":["now."]},{"Key":"right now.","Fragments":["This","Katrina"]},{"Key":"now. This","Fragments":["is"]},{"Key":"is slowly","Fragments":["changing"]},{"Key":"slowly changing","Fragments":["though."]},{"Key":"The major","Fragments":["sticky"]},{"Key":"major sticky","Fragments":["test"]},{"Key":"sticky test","Fragments":["I"]},{"Key":"test I","Fragments":["had","had"]},{"Key":"had was","Fragments":["that"]},{"Key":"that \"1,","Fragments":["2,"]},{"Key":"2, 3\"","Fragments":["has"]},{"Key":"3\" has","Fragments":["to"]},{"Key":"a @vita","Fragments":["response."]},{"Key":"@vita response.","Fragments":["But"]},{"Key":"But that","Fragments":["string","might"]},{"Key":"that string","Fragments":["matches"]},{"Key":"string matches","Fragments":["the"]},{"Key":"matches the","Fragments":["naive","call"]},{"Key":"the naive","Fragments":["upcase","implementation."]},{"Key":"naive upcase","Fragments":["comparison."]},{"Key":"upcase comparison.","Fragments":["If"]},{"Key":"comparison. If","Fragments":["this"]},{"Key":"were real","Fragments":["production"]},{"Key":"real production","Fragments":["code,"]},{"Key":"production code,","Fragments":["I'd"]},{"Key":"code, I'd","Fragments":["probably"]},{"Key":"I'd probably","Fragments":["break","separate","use","write","shorten","go","use","go"]},{"Key":"probably break","Fragments":["down"]},{"Key":"break down","Fragments":["and","the"]},{"Key":"and write","Fragments":["an"]},{"Key":"write an","Fragments":["all_letters_upcase?","anonymous","if,"]},{"Key":"an all_letters_upcase?","Fragments":["method."]},{"Key":"the reviews.","Fragments":["If"]},{"Key":"reviews. If","Fragments":["most"]},{"Key":"If most","Fragments":["of"]},{"Key":"these exercism","Fragments":["exercises"]},{"Key":"exercism exercises","Fragments":["are"]},{"Key":"are string","Fragments":["manipulation"]},{"Key":"manipulation now,","Fragments":["I"]},{"Key":"now, I","Fragments":["think"]},{"Key":"I'll spend","Fragments":["more"]},{"Key":"spend more","Fragments":["time"]},{"Key":"more time","Fragments":["with","to"]},{"Key":"concurrent exercise","Fragments":["I've"]},{"Key":"exercise I've","Fragments":["been"]},{"Key":"been working","Fragments":["on","through"]},{"Key":"on --","Fragments":["an"]},{"Key":"-- an","Fragments":["elevator"]},{"Key":"an elevator","Fragments":["simulator."]},{"Key":"to some","Fragments":["good","great","quick","feedback.","rather","of","magic","non-regex-based"]},{"Key":"good feedback","Fragments":["about"]},{"Key":"feedback about","Fragments":["naming"]},{"Key":"about naming","Fragments":["and","all"]},{"Key":"being introduced","Fragments":["to"]},{"Key":"introduced to","Fragments":["the"]},{"Key":"the \"cond\"","Fragments":["expression,","section"]},{"Key":"\"cond\" expression,","Fragments":["I"]},{"Key":"expression, I","Fragments":["feel"]},{"Key":"feel better","Fragments":["about"]},{"Key":"better about","Fragments":["this."]},{"Key":"about this.","Fragments":["I'd","I","I've"]},{"Key":"this. I'd","Fragments":["still","even"]},{"Key":"I'd still","Fragments":["like","like"]},{"Key":"do all","Fragments":["the","the"]},{"Key":"condition checks","Fragments":["in","into"]},{"Key":"in decode_message","Fragments":["using"]},{"Key":"decode_message using","Fragments":["pattern"]},{"Key":"out how...and","Fragments":["I'm"]},{"Key":"how...and I'm","Fragments":["not"]},{"Key":"completely sure","Fragments":["it","if"]},{"Key":"idea even","Fragments":["if"]},{"Key":"is possible...I'd","Fragments":["just"]},{"Key":"possible...I'd just","Fragments":["like"]},{"Key":"That tightened","Fragments":["it"]},{"Key":"tightened it","Fragments":["up"]},{"Key":"up --","Fragments":["by"]},{"Key":"-- by","Fragments":["adding"]},{"Key":"by adding","Fragments":["a","line","exercises","an","a"]},{"Key":"space in","Fragments":["my"]},{"Key":"my replace","Fragments":["regex,"]},{"Key":"replace regex,","Fragments":["and"]},{"Key":"regex, and","Fragments":["comparing"]},{"Key":"against empty","Fragments":["string"]},{"Key":"length comparison.","Fragments":["The"]},{"Key":"comparison. The","Fragments":["@alessandra"]},{"Key":"The @alessandra","Fragments":["condition"]},{"Key":"@alessandra condition","Fragments":["still"]},{"Key":"condition still","Fragments":["has"]},{"Key":"still has","Fragments":["two"]},{"Key":"has two","Fragments":["and-ed"]},{"Key":"two and-ed","Fragments":["clauses,"]},{"Key":"and-ed clauses,","Fragments":["but"]},{"Key":"read this","Fragments":["way."]},{"Key":"could inline","Fragments":["those","the"]},{"Key":"inline those","Fragments":["attributes"]},{"Key":"those attributes","Fragments":["now,"]},{"Key":"attributes now,","Fragments":["but"]},{"Key":"of like","Fragments":["having"]},{"Key":"having them","Fragments":["separate","nearer","there"]},{"Key":"separate because","Fragments":["specifics"]},{"Key":"because specifics","Fragments":["of"]},{"Key":"of wording","Fragments":["is"]},{"Key":"wording is","Fragments":["one"]},{"Key":"those requirements","Fragments":["likely"]},{"Key":"requirements likely","Fragments":["to"]},{"Key":" Interesting.","Fragments":["I","I","The","Here's"]},{"Key":"Interesting. I","Fragments":["definitely","looked","submitted"]},{"Key":"I definitely","Fragments":["do","prefer","like"]},{"Key":"definitely do","Fragments":["not"]},{"Key":"not acknowledge","Fragments":["that"]},{"Key":"acknowledge that","Fragments":["scenario."]},{"Key":"that scenario.","Fragments":["I"]},{"Key":"scenario. I","Fragments":["think"]},{"Key":"tests I'm","Fragments":["missing"]},{"Key":"missing cover","Fragments":["those"]},{"Key":"cover those","Fragments":["cases."]},{"Key":"those cases.","Fragments":["I'll"]},{"Key":"cases. I'll","Fragments":["have"]},{"Key":"to copy","Fragments":["them","those"]},{"Key":"copy them","Fragments":["from"]},{"Key":"them from","Fragments":["GitHub"]},{"Key":"from GitHub","Fragments":["and"]},{"Key":"GitHub and","Fragments":["submit"]},{"Key":"This one","Fragments":["is","took","was","is","came","only"]},{"Key":"efficient I","Fragments":["think."]},{"Key":"could pass","Fragments":["`String.downcase(string)`","it"]},{"Key":"pass `String.downcase(string)`","Fragments":["to"]},{"Key":"`String.downcase(string)` to","Fragments":["`Regex.scan`"]},{"Key":"to `Regex.scan`","Fragments":["and","returning"]},{"Key":"remove line","Fragments":["9"]},{"Key":"line 9","Fragments":["and"]},{"Key":"9 and","Fragments":["line"]},{"Key":"and line","Fragments":["10.","16."]},{"Key":"And line","Fragments":["14"]},{"Key":"14 ,","Fragments":["is"]},{"Key":"same that","Fragments":["`\u0026(\u00261"]},{"Key":"that `\u0026(\u00261","Fragments":["+"]},{"Key":"`\u0026(\u00261 +","Fragments":["1)`","1)`","1)`","1)`","\u00262)`","1)`","1)`","1)`.","1)`.","\u00262)`"]},{"Key":"whole looks","Fragments":["pretty","good.","good.","like"]},{"Key":"you split","Fragments":["the"]},{"Key":"text then","Fragments":["do"]},{"Key":"then do","Fragments":["a","I","is"]},{"Key":"a `String.replace`?","Fragments":["Is"]},{"Key":"`String.replace`? Is","Fragments":["there"]},{"Key":"few very","Fragments":["minor"]},{"Key":"`|\u003e` at","Fragments":["the","the"]},{"Key":"start of","Fragments":["a"]},{"Key":"line instead","Fragments":["of"]},{"Key":"of at","Fragments":["the"]},{"Key":"end if","Fragments":["you're"]},{"Key":"you're connecting","Fragments":["multiple"]},{"Key":"connecting multiple","Fragments":["lines"]},{"Key":"multiple lines","Fragments":["with","it's","and"]},{"Key":"it (makes","Fragments":["it"]},{"Key":"(makes it","Fragments":["easy"]},{"Key":"it easy","Fragments":["to","to"]},{"Key":"* `\u0026normalize_word(\u00261)`","Fragments":["might"]},{"Key":"`\u0026normalize_word(\u00261)` might","Fragments":["be"]},{"Key":"be alternately","Fragments":["written"]},{"Key":"alternately written","Fragments":["as"]},{"Key":"as `\u0026normalize_word/1`.","Fragments":["Which"]},{"Key":"`\u0026normalize_word/1`. Which","Fragments":["you"]},{"Key":"Which you","Fragments":["use"]},{"Key":"use is","Fragments":["really"]},{"Key":"personal preference,","Fragments":["just","so"]},{"Key":"preference, just","Fragments":["wanted"]},{"Key":"point this","Fragments":["out."]},{"Key":"* `fn(word)","Fragments":["-\u003e"]},{"Key":"`fn(word) -\u003e","Fragments":["String.length(word)"]},{"Key":"-\u003e String.length(word)","Fragments":["=="]},{"Key":"String.length(word) ==","Fragments":["0"]},{"Key":"0 end`","Fragments":["may"]},{"Key":"end` may","Fragments":["be"]},{"Key":"written (personal","Fragments":["preference"]},{"Key":"(personal preference","Fragments":["again)"]},{"Key":"preference again)","Fragments":["as"]},{"Key":"again) as","Fragments":["`\u0026(String.length(\u00261)"]},{"Key":"as `\u0026(String.length(\u00261)","Fragments":["=="]},{"Key":"`\u0026(String.length(\u00261) ==","Fragments":["0)`."]},{"Key":"feedback! I've","Fragments":["submitted"]},{"Key":"an new","Fragments":["version."]},{"Key":"No if","Fragments":["you"]},{"Key":"in `update_word_count`","Fragments":["as"]},{"Key":" update_word_count([word],","Fragments":["words)"]},{"Key":"I've tried","Fragments":["to"]},{"Key":"the `silent?`,","Fragments":["`shouting?`","`question?`"]},{"Key":"`silent?`, `shouting?`","Fragments":["and"]},{"Key":"and `asking_politely?`","Fragments":["conditions"]},{"Key":"`asking_politely?` conditions","Fragments":["mutually"]},{"Key":"conditions mutually","Fragments":["exclusive"]},{"Key":"mutually exclusive","Fragments":["so","with"]},{"Key":"exclusive so","Fragments":["that"]},{"Key":"that their","Fragments":["order"]},{"Key":"their order","Fragments":["in"]},{"Key":"cond block","Fragments":["doesn't"]},{"Key":"block doesn't","Fragments":["matter."]},{"Key":" Why?","Fragments":["In"]},{"Key":"Why? In","Fragments":["general"]},{"Key":"general it's","Fragments":["better","more","best","better","best","better","better","more","better"]},{"Key":"function after","Fragments":["what"]},{"Key":"after what","Fragments":["it","it's"]},{"Key":"does, not","Fragments":["after"]},{"Key":"not after","Fragments":["what"]},{"Key":"it's used","Fragments":["for."]},{"Key":"used for.","Fragments":["But"]},{"Key":"for. But","Fragments":["that"]},{"Key":"my Haskell","Fragments":["experience"]},{"Key":"Haskell experience","Fragments":["speaking."]},{"Key":" `String.strip(phrase)","Fragments":["|\u003e"]},{"Key":"`String.strip(phrase) |\u003e","Fragments":["String.length"]},{"Key":"0` could","Fragments":["be"]},{"Key":"as `String.strip(phrase)","Fragments":["=="]},{"Key":"`String.strip(phrase) ==","Fragments":["\"\"`"]},{"Key":"I'd remove","Fragments":["`@nathan`"]},{"Key":"remove `@nathan`","Fragments":["and"]},{"Key":"`@nathan` and","Fragments":["just"]},{"Key":"do `digit_count","Fragments":["=="]},{"Key":"`digit_count ==","Fragments":["@nathan"]},{"Key":"== @nathan","Fragments":["+","+"]},{"Key":"@nathan +","Fragments":["1`","1`"]},{"Key":"1` on","Fragments":["line"]},{"Key":"line 15.","Fragments":["You're"]},{"Key":"15. You're","Fragments":["using"]},{"Key":"the knowledge","Fragments":["that"]},{"Key":"knowledge that","Fragments":["`@nathan"]},{"Key":"that `@nathan","Fragments":["=="]},{"Key":"`@nathan ==","Fragments":["@nathan"]},{"Key":"1` in","Fragments":["the"]},{"Key":"the slice","Fragments":["on","with","for"]},{"Key":"slice on","Fragments":["line"]},{"Key":"just test","Fragments":["for"]},{"Key":"don't return","Fragments":["a"]},{"Key":"number and","Fragments":["then","`_pretty`"]},{"Key":"then let","Fragments":["all"]},{"Key":"let all","Fragments":["bad"]},{"Key":"all bad","Fragments":["numbers"]},{"Key":"bad numbers","Fragments":["fall"]},{"Key":"numbers fall","Fragments":["to"]},{"Key":"fall to","Fragments":["the"]},{"Key":"the catchall","Fragments":["clause.","block"]},{"Key":"In `shouting?`","Fragments":["you","note"]},{"Key":"`shouting?` you","Fragments":["don't","already"]},{"Key":"need two","Fragments":["regular"]},{"Key":"two regular","Fragments":["expressions","expressions"]},{"Key":"expressions if","Fragments":["you","you"]},{"Key":"use `String.downcase`","Fragments":["and/or","directly."]},{"Key":"`String.downcase` and/or","Fragments":["`String.upcase`."]},{"Key":" @melba","Fragments":["I"]},{"Key":"@melba I","Fragments":["wrote"]},{"Key":"number method","Fragments":["here,"]},{"Key":"method here,","Fragments":["and"]},{"Key":"in Clojure","Fragments":["as","that"]},{"Key":"Clojure as","Fragments":["well,"]},{"Key":"well, by","Fragments":["basically"]},{"Key":"by basically","Fragments":["transcribing"]},{"Key":"basically transcribing","Fragments":["the"]},{"Key":"transcribing the","Fragments":["requirements"]},{"Key":"requirements which","Fragments":["specify"]},{"Key":"which specify","Fragments":["decisions"]},{"Key":"specify decisions","Fragments":["based"]},{"Key":"decisions based","Fragments":["on"]},{"Key":"the cleansed","Fragments":["input."]},{"Key":"cleansed input.","Fragments":["I"]},{"Key":"your idea,","Fragments":["in"]},{"Key":"idea, in","Fragments":["this"]},{"Key":"case, of","Fragments":["instead"]},{"Key":"of instead","Fragments":["write"]},{"Key":"instead write","Fragments":["it"]},{"Key":"write it","Fragments":["by","is","as","as","out","more"]},{"Key":"by minimizing","Fragments":["the"]},{"Key":"minimizing the","Fragments":["number"]},{"Key":"of decisions","Fragments":["and","on"]},{"Key":"decisions and","Fragments":["exit"]},{"Key":"and exit","Fragments":["points."]},{"Key":"tried `String.upcase(s)","Fragments":["=="]},{"Key":"`String.upcase(s) ==","Fragments":["s"]},{"Key":"== s","Fragments":["\u0026\u0026"]},{"Key":"s \u0026\u0026","Fragments":["String.downcase(s)"]},{"Key":"\u0026\u0026 String.downcase(s)","Fragments":["!="]},{"Key":"String.downcase(s) !=","Fragments":["s`"]},{"Key":"seemed no","Fragments":["simpler."]},{"Key":"no simpler.","Fragments":["Is"]},{"Key":"simpler. Is","Fragments":["there"]},{"Key":"both `upcase`","Fragments":["and"]},{"Key":"`upcase` and","Fragments":["`downcase`?","`downcase`"]},{"Key":"you @adelle,","Fragments":["that"]},{"Key":"@adelle, that","Fragments":["conveys"]},{"Key":"that conveys","Fragments":["the"]},{"Key":"conveys the","Fragments":["intent","idea"]},{"Key":"function much","Fragments":["better."]},{"Key":"module called","Fragments":["DNA,","[updated](http://elixir-lang.org/docs/stable/elixir/Dict.html#update/4)"]},{"Key":"called DNA,","Fragments":["so"]},{"Key":"DNA, so","Fragments":["it"]},{"Key":"be reused","Fragments":["elsewhere,"]},{"Key":"reused elsewhere,","Fragments":["and"]},{"Key":"elsewhere, and","Fragments":["calling"]},{"Key":"and calling","Fragments":["it","`Enum.reduce`"]},{"Key":"calling it","Fragments":["something","as","with","actually"]},{"Key":"like `mutation?`","Fragments":["gives"]},{"Key":"`mutation?` gives","Fragments":["the"]},{"Key":"reader some","Fragments":["insight"]},{"Key":"some insight","Fragments":["into"]},{"Key":"insight into","Fragments":["what"]},{"Key":"into what","Fragments":["the"]},{"Key":"code means","Fragments":["-"]},{"Key":"means -","Fragments":["it's"]},{"Key":"- it's","Fragments":["more"]},{"Key":"likely someone","Fragments":["could"]},{"Key":"someone could","Fragments":["read"]},{"Key":"could read","Fragments":["the"]},{"Key":"code not","Fragments":["knowing"]},{"Key":"knowing what","Fragments":["a"]},{"Key":"a Hamming","Fragments":["distance"]},{"Key":"Hamming distance","Fragments":["was"]},{"Key":"distance was","Fragments":["and"]},{"Key":"was and","Fragments":["immediately"]},{"Key":"and immediately","Fragments":["say"]},{"Key":"immediately say","Fragments":["\"ah,"]},{"Key":"say \"ah,","Fragments":["it's"]},{"Key":"\"ah, it's","Fragments":["the"]},{"Key":"of mutations","Fragments":["between"]},{"Key":"mutations between","Fragments":["two"]},{"Key":"between two","Fragments":["strands","strands"]},{"Key":"strands of","Fragments":["DNA!\"","DNA\""]},{"Key":" Whereas","Fragments":["\"the"]},{"Key":"Whereas \"the","Fragments":["number"]},{"Key":"\"the number","Fragments":["of"]},{"Key":"of unequal","Fragments":["pairs"]},{"Key":"unequal pairs","Fragments":["between"]},{"Key":"pairs between","Fragments":["two"]},{"Key":"of DNA\"","Fragments":["doesn't"]},{"Key":"DNA\" doesn't","Fragments":["tell"]},{"Key":"doesn't tell","Fragments":["you"]},{"Key":"tell you","Fragments":["much","that"]},{"Key":"you much","Fragments":["about","about","in"]},{"Key":"about *why*","Fragments":["you"]},{"Key":"*why* you","Fragments":["might"]},{"Key":"be interested","Fragments":["in","in","in"]},{"Key":"that number","Fragments":[":-)","from","of"]},{"Key":"That's an","Fragments":["interesting","interesting"]},{"Key":"interesting point.","Fragments":["It","Would"]},{"Key":"point. It","Fragments":["sort"]},{"Key":"It sort","Fragments":["of"]},{"Key":"of goes","Fragments":["along"]},{"Key":"goes along","Fragments":["with"]},{"Key":"with making","Fragments":["intent"]},{"Key":"making intent","Fragments":["clear."]},{"Key":"intent clear.","Fragments":["Thanks"]},{"Key":"clear. Thanks","Fragments":["for"]},{"Key":" @carey","Fragments":["Yep,"]},{"Key":"@carey Yep,","Fragments":["that's"]},{"Key":"that's exactly","Fragments":["what","the"]},{"Key":" ELSE","Fragments":["is"]},{"Key":"ELSE is","Fragments":["usually"]},{"Key":"usually written","Fragments":["as","`if"]},{"Key":"as just","Fragments":["`true`."]},{"Key":"good, and","Fragments":["your"]},{"Key":"your submissions","Fragments":["have","the"]},{"Key":"submissions have","Fragments":["progressed"]},{"Key":"have progressed","Fragments":["very"]},{"Key":"progressed very","Fragments":["well."]},{"Key":"well. The","Fragments":["only"]},{"Key":"could suggest","Fragments":["is"]},{"Key":"private named","Fragments":["function.","function,"]},{"Key":"we got","Fragments":["those"]},{"Key":"got those","Fragments":["somewhere"]},{"Key":"those somewhere","Fragments":["around"]},{"Key":"somewhere around","Fragments":["version"]},{"Key":"around version","Fragments":["`0.10.2`"]},{"Key":"version `0.10.2`","Fragments":["or"]},{"Key":"`0.10.2` or","Fragments":["so."]},{"Key":"or so.","Fragments":["Given"]},{"Key":"so. Given","Fragments":["that"]},{"Key":"Given that","Fragments":["you","the"]},{"Key":"are 7","Fragments":["submissions"]},{"Key":"7 submissions","Fragments":["into"]},{"Key":"submissions into","Fragments":["this"]},{"Key":"into this","Fragments":["I'd","kind"]},{"Key":"this I'd","Fragments":["say","recommend"]},{"Key":"say unlock","Fragments":["the"]},{"Key":"use my","Fragments":["nitpick","`reduce/3`"]},{"Key":"nitpick (if","Fragments":["you"]},{"Key":"(if you","Fragments":["want)"]},{"Key":"you want)","Fragments":["there."]},{"Key":"Check of","Fragments":["there"]},{"Key":"of there","Fragments":["is"]},{"Key":"one letter","Fragments":["then","names","names","names","and"]},{"Key":"letter then","Fragments":["check"]},{"Key":"if up","Fragments":["cased"]},{"Key":"up cased","Fragments":["form"]},{"Key":"cased form","Fragments":["is"]},{"Key":"form is","Fragments":["the","more"]},{"Key":"Very minor","Fragments":["nitpick:","point"]},{"Key":"minor nitpick:","Fragments":["you"]},{"Key":"nitpick: you","Fragments":["could"]},{"Key":"the `String.downcase(word)`","Fragments":["once"]},{"Key":"`String.downcase(word)` once","Fragments":["before"]},{"Key":"once before","Fragments":["the"]},{"Key":"happens with","Fragments":["a","a","non-English","a","a","a","`keep([1,2,3,4],","the","the"]},{"Key":"a capture","Fragments":["expression"]},{"Key":"capture expression","Fragments":["(`\u0026`)"]},{"Key":"expression (`\u0026`)","Fragments":["that"]},{"Key":"(`\u0026`) that","Fragments":["runs"]},{"Key":"that runs","Fragments":["over","much"]},{"Key":"runs over","Fragments":["multiple","80"]},{"Key":"over multiple","Fragments":["lines"]},{"Key":"lines it's","Fragments":["probably"]},{"Key":"call `Dict.update`","Fragments":["than"]},{"Key":"`Dict.update` than","Fragments":["`HashDict.update`"]},{"Key":"than `HashDict.update`","Fragments":["(i.e."]},{"Key":"`HashDict.update` (i.e.","Fragments":["only"]},{"Key":"(i.e. only","Fragments":["call"]},{"Key":"only call","Fragments":["`HashDict`","it"]},{"Key":"call `HashDict`","Fragments":["functions","functions","functions","functions","functions"]},{"Key":"`HashDict` functions","Fragments":["when","directly","explicitly,","directly","if"]},{"Key":"functions when","Fragments":["you"]},{"Key":"it through","Fragments":["`Dict`).","and","a"]},{"Key":"through `Dict`).","Fragments":["`HashDict`"]},{"Key":"`Dict`). `HashDict`","Fragments":["is"]},{"Key":"`HashDict` is","Fragments":["a","an","a"]},{"Key":"specific dictionary,","Fragments":["`Dict`"]},{"Key":"dictionary, `Dict`","Fragments":["is"]},{"Key":"`Dict` is","Fragments":["the","an","that","an","implemented"]},{"Key":"the interface","Fragments":["to"]},{"Key":"interface to","Fragments":["all"]},{"Key":"Why in","Fragments":["`sort`"]},{"Key":"in `sort`","Fragments":["do"]},{"Key":"`sort` do","Fragments":["you"]},{"Key":"you look","Fragments":["up","carefully.","at"]},{"Key":"the keys","Fragments":["and","in","collide.","in","and","in"]},{"Key":"the values?","Fragments":["Can't"]},{"Key":"values? Can't","Fragments":["you"]},{"Key":"Can't you","Fragments":["do"]},{"Key":"the back","Fragments":["of"]},{"Key":"back of","Fragments":["the"]},{"Key":"the student","Fragments":["list?"]},{"Key":"student list?","Fragments":["Is"]},{"Key":"list? Is","Fragments":["there"]},{"Key":"particular need","Fragments":["for"]},{"Key":"for this?","Fragments":["Prepending"]},{"Key":"this? Prepending","Fragments":["on"]},{"Key":"Prepending on","Fragments":["a"]},{"Key":"is O(1),","Fragments":["appending"]},{"Key":"O(1), appending","Fragments":["is"]},{"Key":"appending is","Fragments":["O(n)."]},{"Key":"first thought","Fragments":["was","when"]},{"Key":"thought was","Fragments":["to"]},{"Key":"apply them","Fragments":["here,"]},{"Key":"them here,","Fragments":["so"]},{"Key":"so ended","Fragments":["up"]},{"Key":"separate predicate","Fragments":["functions"]},{"Key":"functions helped","Fragments":["make"]},{"Key":"helped make","Fragments":["the"]},{"Key":"logic clearer,","Fragments":["I"]},{"Key":"clearer, I","Fragments":["think."]},{"Key":"Oh, right!","Fragments":["Thanks."]},{"Key":" @katelin","Fragments":["OK..."]},{"Key":"@katelin OK...","Fragments":["I"]},{"Key":"OK... I","Fragments":["did","slightly","kinda"]},{"Key":"that about","Fragments":["Dict.","join,"]},{"Key":"about Dict.","Fragments":["Since"]},{"Key":"Dict. Since","Fragments":["the"]},{"Key":"Since the","Fragments":["tests","test"]},{"Key":"tests constructed","Fragments":["HashDicts"]},{"Key":"constructed HashDicts","Fragments":["I"]},{"Key":"HashDicts I","Fragments":["just"]},{"Key":"just figured","Fragments":["I"]},{"Key":"module throughout","Fragments":["my"]},{"Key":"throughout my","Fragments":["code."]},{"Key":"Regarding your","Fragments":["second","second"]},{"Key":"second point,","Fragments":["I"]},{"Key":"point, I","Fragments":["think","do","didn't","like"]},{"Key":"my unfamiliarity","Fragments":["with"]},{"Key":"Elixir libraries.","Fragments":["I"]},{"Key":"libraries. I","Fragments":["thought"]},{"Key":"use HashDict.update","Fragments":["(well..."]},{"Key":"HashDict.update (well...","Fragments":["Dict.update"]},{"Key":"(well... Dict.update","Fragments":["now)"]},{"Key":"Dict.update now)","Fragments":["but"]},{"Key":"now) but","Fragments":["I"]},{"Key":"go through","Fragments":["_all_","and","the","to"]},{"Key":"through _all_","Fragments":["of"]},{"Key":"_all_ of","Fragments":["the"]},{"Key":"the k,v","Fragments":["pairs"]},{"Key":"k,v pairs","Fragments":["in"]},{"Key":"pairs in","Fragments":["one"]},{"Key":"fell swoop","Fragments":["as"]},{"Key":"swoop as","Fragments":["update"]},{"Key":"as update","Fragments":["doesn't"]},{"Key":"update doesn't","Fragments":["mutate;"]},{"Key":"doesn't mutate;","Fragments":["it"]},{"Key":"mutate; it","Fragments":["returns"]},{"Key":"new copy.","Fragments":["I"]},{"Key":"copy. I","Fragments":["just"]},{"Key":"get something","Fragments":["up","passable","quickly"]},{"Key":"something up","Fragments":["and"]},{"Key":"and running;","Fragments":["I'll"]},{"Key":"running; I'll","Fragments":["think"]},{"Key":"I'll think","Fragments":["harder","about","about"]},{"Key":"think harder","Fragments":["now."]},{"Key":" @patsy","Fragments":["I"]},{"Key":"@patsy I","Fragments":["GOT"]},{"Key":"I GOT","Fragments":["IT!1!1"]},{"Key":"don't mean","Fragments":["something"]},{"Key":"like update,","Fragments":["I"]},{"Key":"update, I","Fragments":["was"]},{"Key":"to `Dict.to_list`","Fragments":["to"]},{"Key":"`Dict.to_list` to","Fragments":["make"]},{"Key":"make lines","Fragments":["23-26"]},{"Key":"lines 23-26","Fragments":["simpler."]},{"Key":" @oma","Fragments":["See"]},{"Key":"@oma See","Fragments":["my"]},{"Key":"my new","Fragments":["submission;","version!"]},{"Key":"new submission;","Fragments":["I"]},{"Key":"submission; I","Fragments":["_think_"]},{"Key":"I _think_","Fragments":["I","I"]},{"Key":"_think_ I","Fragments":["got","like"]},{"Key":" +1,","Fragments":["it'll"]},{"Key":"+1, it'll","Fragments":["make"]},{"Key":"it'll make","Fragments":["the"]},{"Key":"the notEmpty","Fragments":["method."]},{"Key":"notEmpty method.","Fragments":["I"]},{"Key":"not found","Fragments":["a","any"]},{"Key":"regex which","Fragments":["returns"]},{"Key":"which returns","Fragments":["non","a","true","you","a","a"]},{"Key":"returns non","Fragments":["empty"]},{"Key":"non empty","Fragments":["strings."]},{"Key":"Yup, that","Fragments":["works."]},{"Key":"test with","Fragments":["a","a"]},{"Key":"a non-ASCII","Fragments":["character"]},{"Key":"non-ASCII character","Fragments":[";-)"]},{"Key":"character ;-)","Fragments":["I"]},{"Key":";-) I","Fragments":["learned"]},{"Key":"learned regular","Fragments":["expressions"]},{"Key":"expressions before","Fragments":["those"]},{"Key":"before those","Fragments":["character"]},{"Key":"those character","Fragments":["classes"]},{"Key":"classes were","Fragments":["broadly"]},{"Key":"were broadly","Fragments":["available,"]},{"Key":"broadly available,","Fragments":["but"]},{"Key":"available, but","Fragments":["google"]},{"Key":"but google","Fragments":["is"]},{"Key":"google is","Fragments":["my","proving"]},{"Key":"my friend","Fragments":["and"]},{"Key":"friend and","Fragments":["I"]},{"Key":"fn and","Fragments":["capture"]},{"Key":"and capture","Fragments":["nesting"]},{"Key":"capture nesting","Fragments":["better"]},{"Key":"nesting better","Fragments":["this"]},{"Key":"better this","Fragments":["way."]},{"Key":"way. I","Fragments":["does","did"]},{"Key":"I does","Fragments":["slightly"]},{"Key":"does slightly","Fragments":["bug"]},{"Key":"slightly bug","Fragments":["me"]},{"Key":"bug me","Fragments":["that","a"]},{"Key":"the delimiters","Fragments":["of","are"]},{"Key":"delimiters of","Fragments":["a"]},{"Key":"a fn","Fragments":["are"]},{"Key":"fn are","Fragments":["'-\u003e'"]},{"Key":"are '-\u003e'","Fragments":["and"]},{"Key":"'-\u003e' and","Fragments":["'end'."]},{"Key":"and 'end'.","Fragments":["I"]},{"Key":"'end'. I","Fragments":["understand"]},{"Key":"support multiple","Fragments":["clauses"]},{"Key":"function. But","Fragments":["it's"]},{"Key":"it's another","Fragments":["of"]},{"Key":"another of","Fragments":["those"]},{"Key":"those syntactic","Fragments":["warts"]},{"Key":"syntactic warts","Fragments":["I"]},{"Key":"warts I","Fragments":["mentioned"]},{"Key":"mentioned on","Fragments":["the"]},{"Key":"the LinkedIn","Fragments":["thread."]},{"Key":"Using `if`","Fragments":["`else`"]},{"Key":"`if` `else`","Fragments":["instead"]},{"Key":"`else` instead","Fragments":["of"]},{"Key":"my very","Fragments":["first"]},{"Key":"very first","Fragments":["elixir","bit"]},{"Key":"elixir code,","Fragments":["though"]},{"Key":"am somewhat","Fragments":["familiar","scared"]},{"Key":"somewhat familiar","Fragments":["with"]},{"Key":" I'm,","Fragments":["frankly,"]},{"Key":"I'm, frankly,","Fragments":["not"]},{"Key":"frankly, not","Fragments":["very"]},{"Key":"solution at","Fragments":["all.","all"]},{"Key":"all. I'd","Fragments":["really"]},{"Key":"Tests for","Fragments":["non-ASCII"]},{"Key":"non-ASCII characters","Fragments":["are"]},{"Key":"being debated","Fragments":["in"]},{"Key":"debated in","Fragments":["the"]},{"Key":"the exercism","Fragments":["project.","cli","tradition","project"]},{"Key":" Actually","Fragments":["the"]},{"Key":"Actually the","Fragments":["delimiters"]},{"Key":"delimiters are","Fragments":["`fn`"]},{"Key":"are `fn`","Fragments":["and"]},{"Key":"`fn` and","Fragments":["`end`,"]},{"Key":"and `end`,","Fragments":["though"]},{"Key":"`end`, though","Fragments":["I"]},{"Key":"it's inconsistent","Fragments":["given"]},{"Key":"inconsistent given","Fragments":["that"]},{"Key":"other places","Fragments":["use","in"]},{"Key":"places use","Fragments":["`do`"]},{"Key":"use `do`","Fragments":["and"]},{"Key":"`do` and","Fragments":["`end`.","`end`."]},{"Key":"and `end`.","Fragments":["Not"]},{"Key":"`end`. Not","Fragments":["much"]},{"Key":"Not much","Fragments":["hope","of","nits"]},{"Key":"much hope","Fragments":["for"]},{"Key":"hope for","Fragments":["this"]},{"Key":"feedback, @susan.","Fragments":["In"]},{"Key":"@susan. In","Fragments":["this"]},{"Key":"case (sounds","Fragments":["like"]},{"Key":"(sounds like","Fragments":["unfortunately)"]},{"Key":"like unfortunately)","Fragments":["the"]},{"Key":"unfortunately) the","Fragments":["tests"]},{"Key":"tests are","Fragments":["expecting","actually","too","a","short","still","passing","passing,"]},{"Key":"are expecting","Fragments":["the"]},{"Key":"expecting the","Fragments":["new"]},{"Key":"new students","Fragments":["to","list"]},{"Key":"students to","Fragments":["be","the"]},{"Key":"be added","Fragments":["to"]},{"Key":"list. I","Fragments":["wasn't","hope"]},{"Key":"that. Is","Fragments":["there?"]},{"Key":"that is_question","Fragments":["function"]},{"Key":"function should","Fragments":["be","be"]},{"Key":"be is_shouting.","Fragments":["And"]},{"Key":"is_shouting. And","Fragments":["the"]},{"Key":"more ruby-ish","Fragments":["convention"]},{"Key":"ruby-ish convention","Fragments":["is"]},{"Key":"end those","Fragments":["boolean"]},{"Key":"those boolean","Fragments":["functions"]},{"Key":"boolean functions","Fragments":["with"]},{"Key":"question mark:","Fragments":["is_shouting?"]},{"Key":"mark: is_shouting?","Fragments":["I"]},{"Key":"is_shouting? I","Fragments":["like"]},{"Key":"the Regex.match?","Fragments":["you"]},{"Key":"Regex.match? you","Fragments":["used"]},{"Key":"used there","Fragments":["to"]},{"Key":"with non-alpha","Fragments":["characters."]},{"Key":"But in","Fragments":["the","any","general","that"]},{"Key":"the bigger","Fragments":["picture,","story"]},{"Key":"bigger picture,","Fragments":["there's"]},{"Key":"picture, there's","Fragments":["definitely"]},{"Key":"there's definitely","Fragments":["an"]},{"Key":"definitely an","Fragments":["unevenness","improvement."]},{"Key":"an unevenness","Fragments":["in"]},{"Key":"unevenness in","Fragments":["the"]},{"Key":"only that","Fragments":["condition"]},{"Key":"that condition","Fragments":["is"]},{"Key":"condition is","Fragments":["called"]},{"Key":"called out","Fragments":["with"]},{"Key":"an individual","Fragments":["method."]},{"Key":"that depends","Fragments":["upon"]},{"Key":"depends upon","Fragments":["nested"]},{"Key":"upon nested","Fragments":["if/else"]},{"Key":"nested if/else","Fragments":["statements."]},{"Key":"if/else statements.","Fragments":["Can"]},{"Key":"statements. Can","Fragments":["you"]},{"Key":"you collapse","Fragments":["those?"]},{"Key":"collapse those?","Fragments":["Maybe"]},{"Key":"those? Maybe","Fragments":["a"]},{"Key":"I'm curious","Fragments":["whether","what","if","about","how","why","about","about","if","why","why"]},{"Key":"curious whether","Fragments":["in"]},{"Key":"whether in","Fragments":["line"]},{"Key":"4 if","Fragments":["letter_freq(source)"]},{"Key":"if letter_freq(source)","Fragments":["is"]},{"Key":"letter_freq(source) is","Fragments":["called"]},{"Key":"called for","Fragments":["each"]},{"Key":"in candidates","Fragments":["or"]},{"Key":"candidates or","Fragments":["if"]},{"Key":"compiler is","Fragments":["smart"]},{"Key":"is smart","Fragments":["enough"]},{"Key":"smart enough","Fragments":["to"]},{"Key":"I'd like","Fragments":["to","to","to","to","to","to","to","to","you","to"]},{"Key":"with purely","Fragments":["pattern"]},{"Key":"purely pattern","Fragments":["matching"]},{"Key":"matching too,","Fragments":["but"]},{"Key":"it's possible.","Fragments":["If"]},{"Key":"possible. If","Fragments":["we"]},{"Key":"If we","Fragments":["accept"]},{"Key":"we accept","Fragments":["that,"]},{"Key":"accept that,","Fragments":["then"]},{"Key":"that, then","Fragments":["I'd"]},{"Key":"I'd urge","Fragments":["you"]},{"Key":"urge you","Fragments":["to","to"]},{"Key":"move a","Fragments":["step"]},{"Key":"it (for","Fragments":["this"]},{"Key":"(for this","Fragments":["exercise)","exercise)."]},{"Key":"this exercise)","Fragments":["to","that"]},{"Key":"exercise) to","Fragments":["provide"]},{"Key":"to provide","Fragments":["more","nits)."]},{"Key":"provide more","Fragments":["of"]},{"Key":"a parallel","Fragments":["structure"]},{"Key":"parallel structure","Fragments":["to"]},{"Key":"structure to","Fragments":["the","make"]},{"Key":"code (like","Fragments":["perhaps"]},{"Key":"(like perhaps","Fragments":["an"]},{"Key":"perhaps an","Fragments":["is_empty?"]},{"Key":"an is_empty?","Fragments":["function)."]},{"Key":"is_empty? function).","Fragments":["If"]},{"Key":"function). If","Fragments":["you"]},{"Key":"think you'll","Fragments":["find","find"]},{"Key":"need both","Fragments":["a"]},{"Key":"case _and_","Fragments":["a"]},{"Key":"_and_ a","Fragments":["cond."]},{"Key":"Ah, yes,","Fragments":["I","I","gen_event"]},{"Key":"yes, I","Fragments":["forgot","missed","think"]},{"Key":"that annoying","Fragments":["test"]},{"Key":"annoying test","Fragments":["requirement."]},{"Key":"test requirement.","Fragments":["The"]},{"Key":"requirement. The","Fragments":["way"]},{"Key":"just trying","Fragments":["to","to","out"]},{"Key":"use language","Fragments":["features"]},{"Key":"features just","Fragments":["because"]},{"Key":"they're there.","Fragments":[":)"]},{"Key":"some great","Fragments":["feedback"]},{"Key":"feedback this","Fragments":["has"]},{"Key":"has finally","Fragments":["turned"]},{"Key":"finally turned","Fragments":["into"]},{"Key":"something i'm","Fragments":["happy"]},{"Key":"i'm happy","Fragments":["with."]},{"Key":"I'm by","Fragments":["no","no"]},{"Key":"by no","Fragments":["means","means"]},{"Key":"no means","Fragments":["an","an"]},{"Key":"means an","Fragments":["elixir","expert,"]},{"Key":"elixir expert,","Fragments":["but"]},{"Key":"expert, but","Fragments":["I","I've","I","I"]},{"Key":"good. i","Fragments":["like"]},{"Key":"i like","Fragments":["the"]},{"Key":"broke everything","Fragments":["down"]},{"Key":"everything down","Fragments":["into"]},{"Key":"pulled out","Fragments":["SentenceRecognizer"]},{"Key":"out SentenceRecognizer","Fragments":["into"]},{"Key":"SentenceRecognizer into","Fragments":["a"]},{"Key":"a reusable","Fragments":["module."]},{"Key":"One tiny","Fragments":["(truly","thing:"]},{"Key":"tiny (truly","Fragments":["nit-picky)"]},{"Key":"(truly nit-picky)","Fragments":["thing...in"]},{"Key":"nit-picky) thing...in","Fragments":["your"]},{"Key":"thing...in your","Fragments":["shouting?"]},{"Key":"your shouting?","Fragments":["function"]},{"Key":"shouting? function","Fragments":["your"]},{"Key":"function your","Fragments":["regex"]},{"Key":"regex only","Fragments":["needs"]},{"Key":"only needs","Fragments":["to"]},{"Key":"make one","Fragments":["single"]},{"Key":"one single","Fragments":["silence?()"]},{"Key":"single silence?()","Fragments":["function."]},{"Key":"silence?() function.","Fragments":["Using"]},{"Key":"function. Using","Fragments":["pattern"]},{"Key":"Using pattern","Fragments":["matching"]},{"Key":"necessary nor","Fragments":["more"]},{"Key":"nor more","Fragments":["readable"]},{"Key":"readable here.","Fragments":["You"]},{"Key":"here. You","Fragments":["might"]},{"Key":"also take","Fragments":["a"]},{"Key":"the String.strip()","Fragments":["function"]},{"Key":"String.strip() function","Fragments":["for"]},{"Key":"for use","Fragments":["in"]},{"Key":"assume you","Fragments":["mean","mean"]},{"Key":"mean for","Fragments":["_hey()"]},{"Key":"for _hey()","Fragments":["to"]},{"Key":"_hey() to","Fragments":["be"]},{"Key":"be private.","Fragments":["You"]},{"Key":"private. You","Fragments":["can"]},{"Key":"using defp","Fragments":["instead"]},{"Key":"defp instead","Fragments":["of"]},{"Key":"of def","Fragments":["when"]},{"Key":"def when","Fragments":["defining"]},{"Key":"defining the","Fragments":["function.","order"]},{"Key":"Yes -","Fragments":["all"]},{"Key":"- all","Fragments":["the"]},{"Key":"tests pass!","Fragments":["Do"]},{"Key":"pass! Do","Fragments":["we"]},{"Key":"have different","Fragments":["tests","upcase","methods"]},{"Key":"different tests","Fragments":["somehow?"]},{"Key":"tests somehow?","Fragments":["Does"]},{"Key":"somehow? Does","Fragments":["your"]},{"Key":"your test","Fragments":["file","methods","suite","file"]},{"Key":"test file","Fragments":["match","and","that","and"]},{"Key":"file match","Fragments":["this?"]},{"Key":"match this?","Fragments":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/elixir/grade-school/grade-school_test.exs"]},{"Key":"Please don't","Fragments":["let"]},{"Key":"don't let","Fragments":["my","the","it"]},{"Key":"let my","Fragments":["question"]},{"Key":"question keep","Fragments":["anyone"]},{"Key":"keep anyone","Fragments":["from"]},{"Key":"anyone from","Fragments":["offering"]},{"Key":"from offering","Fragments":["feedback"]},{"Key":"offering feedback","Fragments":["on"]},{"Key":"on from","Fragments":["this","this"]},{"Key":"from this","Fragments":["exercise,","exercise,","exercise,","issue."]},{"Key":"I plan","Fragments":["to"]},{"Key":"plan to","Fragments":["come"]},{"Key":"once I","Fragments":["learn","had","realized"]},{"Key":"about Enum.reduce","Fragments":["as"]},{"Key":"Enum.reduce as","Fragments":["suggested"]},{"Key":"as suggested","Fragments":["by","by","in"]},{"Key":"by @adolph","Fragments":["(for"]},{"Key":"@adolph (for","Fragments":["which,"]},{"Key":"(for which,","Fragments":["thanks)."]},{"Key":"good ,","Fragments":["but"]},{"Key":"sure all","Fragments":["the"]},{"Key":"have left","Fragments":["out"]},{"Key":"left out","Fragments":["the"]},{"Key":"sort by","Fragments":["grade"]},{"Key":"by grade","Fragments":["(not"]},{"Key":"grade (not","Fragments":["only"]},{"Key":"(not only","Fragments":["by"]},{"Key":"only by","Fragments":["names)","a"]},{"Key":"by names)","Fragments":["and"]},{"Key":"names) and","Fragments":["the","are"]},{"Key":"the plus","Fragments":["one"]},{"Key":"plus one","Fragments":["when"]},{"Key":"when same","Fragments":["grade."]},{"Key":"Nice recursive","Fragments":["solution"]},{"Key":"solution I've","Fragments":["seen","seen"]},{"Key":"seen 2","Fragments":["main","main"]},{"Key":"2 main","Fragments":["styles:","styles:"]},{"Key":"main styles:","Fragments":["recursion","recursion"]},{"Key":"styles: recursion","Fragments":["and","and"]},{"Key":"underscore is","Fragments":["idiomatic","usually","considered"]},{"Key":"idiomatic for","Fragments":["all"]},{"Key":"all private","Fragments":["methods."]},{"Key":"methods. And","Fragments":["even"]},{"Key":"And even","Fragments":["then"]},{"Key":"even then","Fragments":["there"]},{"Key":"there seems","Fragments":["to"]},{"Key":"be differing","Fragments":["opinion"]},{"Key":"differing opinion","Fragments":["on"]},{"Key":"opinion on","Fragments":["whether","the","that."]},{"Key":"use underscore","Fragments":["or"]},{"Key":"underscore or","Fragments":["do_*"]},{"Key":"or do_*","Fragments":["for"]},{"Key":"do_* for","Fragments":["the"]},{"Key":"last 2","Fragments":["methods."]},{"Key":"2 methods.","Fragments":["But"]},{"Key":"methods. But","Fragments":["in"]},{"Key":"wouldn't underscore","Fragments":["'words'"]},{"Key":"underscore 'words'","Fragments":["or"]},{"Key":"'words' or","Fragments":["the"]},{"Key":"Consider Dict.update","Fragments":["instead"]},{"Key":"Dict.update instead","Fragments":["of","of"]},{"Key":"of separate","Fragments":["calls"]},{"Key":"separate calls","Fragments":["to"]},{"Key":"For bonus","Fragments":["points:"]},{"Key":"bonus points:","Fragments":["what"]},{"Key":"points: what","Fragments":["if"]},{"Key":"what if","Fragments":["the","all"]},{"Key":"strings contained","Fragments":["non-ASCII","\"bottle#{s}\""]},{"Key":"contained non-ASCII","Fragments":["chars?"]},{"Key":"non-ASCII chars?","Fragments":["fübar"]},{"Key":"chars? fübar","Fragments":["for"]},{"Key":"fübar for","Fragments":["example?"]},{"Key":"if we","Fragments":["should","ever","sort"]},{"Key":"should suggest","Fragments":["changing"]},{"Key":"suggest changing","Fragments":["the"]},{"Key":"just verify","Fragments":["that"]},{"Key":"verify that","Fragments":["the"]},{"Key":"list contains","Fragments":["the"]},{"Key":"contains the","Fragments":["expected"]},{"Key":"expected students","Fragments":["rather"]},{"Key":"students rather","Fragments":["than"]},{"Key":"than expecting","Fragments":["a"]},{"Key":"particular order?","Fragments":["It"]},{"Key":"order? It","Fragments":["seems"]},{"Key":"seems like--as","Fragments":["you"]},{"Key":"like--as you","Fragments":["pointed"]},{"Key":"you pointed","Fragments":["out--the"]},{"Key":"pointed out--the","Fragments":["tests"]},{"Key":"out--the tests","Fragments":["are"]},{"Key":"are actually","Fragments":["enforcing","a"]},{"Key":"actually enforcing","Fragments":["a"]},{"Key":"enforcing a","Fragments":["less"]},{"Key":"less than","Fragments":["optimal","499.999.500.000.","499.999.500.000.","(since"]},{"Key":"than optimal","Fragments":["(and"]},{"Key":"optimal (and","Fragments":["not"]},{"Key":"(and not","Fragments":["idiomatic"]},{"Key":"not idiomatic","Fragments":["Elixir)"]},{"Key":"idiomatic Elixir)","Fragments":["design"]},{"Key":"Elixir) design","Fragments":["in"]},{"Key":"this case.","Fragments":["What","The","The"]},{"Key":"case. What","Fragments":["do"]},{"Key":"think? Would","Fragments":["you","it"]},{"Key":"pull request?","Fragments":["If"]},{"Key":"request? If","Fragments":["not,"]},{"Key":"not, I'd","Fragments":["be","be"]},{"Key":"be glad","Fragments":["to.","to.","to"]},{"Key":"going ahead","Fragments":["and"]},{"Key":"and sending","Fragments":["in"]},{"Key":"sending in","Fragments":["a"]},{"Key":"a PR.","Fragments":["I"]},{"Key":"PR. I","Fragments":["mentioned"]},{"Key":"my commit","Fragments":["message"]},{"Key":"commit message","Fragments":["that"]},{"Key":"you reminded","Fragments":["me"]},{"Key":"how lists","Fragments":["are","work","work"]},{"Key":"implemented and","Fragments":["how"]},{"Key":"how it's","Fragments":["better"]},{"Key":"add things","Fragments":["to"]},{"Key":"hope that's","Fragments":["ok.","direct"]},{"Key":"that's ok.","Fragments":["I"]},{"Key":"ok. I","Fragments":["will"]},{"Key":"take 100%","Fragments":["credit"]},{"Key":"100% credit","Fragments":["for"]},{"Key":"credit for","Fragments":["any","it,"]},{"Key":"any mistakes","Fragments":["I"]},{"Key":"mistakes I","Fragments":["made,"]},{"Key":"I made,","Fragments":["though!"]},{"Key":"made, though!","Fragments":[":)"]},{"Key":"chain for","Fragments":["the"]},{"Key":"main method","Fragments":["expressed","while","`count(sentence)`"]},{"Key":"method expressed","Fragments":["clearly"]},{"Key":"expressed clearly","Fragments":["the"]},{"Key":"clearly the","Fragments":["process,"]},{"Key":"process, instead","Fragments":["of"]},{"Key":"of hiding","Fragments":["it"]},{"Key":"hiding it","Fragments":["in"]},{"Key":"in sub","Fragments":["methods."]},{"Key":"sub methods.","Fragments":["What"]},{"Key":"methods. What","Fragments":["do"]},{"Key":"for `increment_counter([key]`","Fragments":["and"]},{"Key":"`increment_counter([key]` and","Fragments":["having"]},{"Key":"having `to_words`","Fragments":["return"]},{"Key":"`to_words` return","Fragments":["a"]},{"Key":"of list","Fragments":["but","(tail)"]},{"Key":"list but","Fragments":["it"]},{"Key":"always made","Fragments":["the"]},{"Key":"code less","Fragments":["readable"]},{"Key":"me. Any","Fragments":["idea?"]},{"Key":"started writing","Fragments":["this"]},{"Key":"writing this","Fragments":["using","but"]},{"Key":"just seemed","Fragments":["like","to"]},{"Key":"like overkill;","Fragments":["using"]},{"Key":"overkill; using","Fragments":["cond"]},{"Key":"using cond","Fragments":["in"]},{"Key":"case results","Fragments":["in"]},{"Key":"in pithier","Fragments":["code."]},{"Key":"create as","Fragments":["functional"]},{"Key":"as functional","Fragments":["a"]},{"Key":"functional a","Fragments":["solution"]},{"Key":"solution as","Fragments":["possible","it"]},{"Key":"as possible","Fragments":["while","for","to","and"]},{"Key":"while trying","Fragments":["to","detail"]},{"Key":"avoid being","Fragments":["overly"]},{"Key":"being overly","Fragments":["terse."]},{"Key":"overly terse.","Fragments":["My"]},{"Key":"terse. My","Fragments":["biggest"]},{"Key":"biggest doubt","Fragments":["about"]},{"Key":"doubt about","Fragments":["this"]},{"Key":"the \"lower_case()\"","Fragments":["function."]},{"Key":"\"lower_case()\" function.","Fragments":["I"]},{"Key":"consistency, but","Fragments":["I'm","I"]},{"Key":"was worth","Fragments":["it.","it"]},{"Key":"Good feedback;","Fragments":["thanks!"]},{"Key":"Incorporated some","Fragments":["of"]},{"Key":"of gvaughn's","Fragments":["suggestions."]},{"Key":" Switched","Fragments":["to"]},{"Key":"Switched to","Fragments":["\"reduce\"."]},{"Key":"curious, but","Fragments":["what"]},{"Key":"what promoted","Fragments":["the"]},{"Key":"promoted the","Fragments":["change"]},{"Key":"the change","Fragments":["to","in"]},{"Key":"your original","Fragments":["comment,","code"]},{"Key":"original comment,","Fragments":["you"]},{"Key":"comment, you","Fragments":["said"]},{"Key":"said \"I've","Fragments":["seen"]},{"Key":"\"I've seen","Fragments":["2"]},{"Key":"and reduce\"","Fragments":[":-)"]},{"Key":"reduce approach","Fragments":["would"]},{"Key":"Ok it","Fragments":["is"]},{"Key":"fine ,","Fragments":["I"]},{"Key":"the `Enum.map/2`","Fragments":["is"]},{"Key":"`Enum.map/2` is","Fragments":["already"]},{"Key":"already sorting","Fragments":["by"]},{"Key":"sorting by","Fragments":["grade."]},{"Key":"have expected","Fragments":["the"]},{"Key":"expected the","Fragments":["keys","exercises"]},{"Key":"keys in","Fragments":["a","@aracely","different"]},{"Key":"be ordered,","Fragments":["so"]},{"Key":"ordered, so","Fragments":["maybe"]},{"Key":"idea, I","Fragments":["like","did"]},{"Key":"this style,","Fragments":["it's"]},{"Key":"style, it's","Fragments":["a"]},{"Key":"understand than","Fragments":["a"]},{"Key":"big if-tree","Fragments":["or"]},{"Key":"if-tree or","Fragments":["using"]},{"Key":"or using","Fragments":["`||`","a"]},{"Key":"`||` and","Fragments":["`\u0026\u0026`."]},{"Key":"compiler can","Fragments":["know","often"]},{"Key":"can know","Fragments":["that"]},{"Key":"it's pure/side-effect-free","Fragments":["so"]},{"Key":"pure/side-effect-free so","Fragments":["it"]},{"Key":"it multiple","Fragments":["times."]},{"Key":" `String.graphemes`","Fragments":["might","would"]},{"Key":"`String.graphemes` might","Fragments":["be"]},{"Key":"slightly better","Fragments":["than"]},{"Key":"than `String.codepoints`,","Fragments":["just"]},{"Key":"`String.codepoints`, just","Fragments":["in"]},{"Key":"just in","Fragments":["case"]},{"Key":"case some","Fragments":["text"]},{"Key":"some text","Fragments":["has"]},{"Key":"text has","Fragments":["a"]},{"Key":"a base","Fragments":["character","set"]},{"Key":"base character","Fragments":["+"]},{"Key":"character +","Fragments":["combining"]},{"Key":"+ combining","Fragments":["mark"]},{"Key":"combining mark","Fragments":["(which"]},{"Key":"mark (which","Fragments":["are"]},{"Key":"(which are","Fragments":["two"]},{"Key":"two codepoints","Fragments":["but"]},{"Key":"codepoints but","Fragments":["one"]},{"Key":"but one","Fragments":["grapheme)."]},{"Key":"one grapheme).","Fragments":["Not"]},{"Key":"grapheme). Not","Fragments":["much"]},{"Key":"those texts","Fragments":["going"]},{"Key":"texts going","Fragments":["around"]},{"Key":"going around","Fragments":["though"]},{"Key":"around though","Fragments":["as"]},{"Key":"though as","Fragments":["few","in"]},{"Key":"few programs","Fragments":["support"]},{"Key":"programs support","Fragments":["multi-codepoint"]},{"Key":"source once","Fragments":["in"]},{"Key":"in `match`","Fragments":["to"]},{"Key":"`match` to","Fragments":["avoid"]},{"Key":"avoid repeating","Fragments":["it.","the","the"]},{"Key":"Stylistically the","Fragments":["common"]},{"Key":"is lower","Fragments":["case"]},{"Key":"and underscores","Fragments":["(\"remove_word_from_array\")."]},{"Key":"of for","Fragments":["every","each","the"]},{"Key":" `sing`","Fragments":["could"]},{"Key":"`sing` could","Fragments":["be"]},{"Key":"written using","Fragments":["`Enum.map_join`","`Dict.update`.","`Dict.update`."]},{"Key":"using `Enum.map_join`","Fragments":["(which"]},{"Key":"`Enum.map_join` (which","Fragments":["probably"]},{"Key":"(which probably","Fragments":["ends"]},{"Key":"probably ends","Fragments":["up"]},{"Key":"up doing","Fragments":["the"]},{"Key":"same reduce,","Fragments":["but"]},{"Key":"reduce, but","Fragments":["it","this"]},{"Key":"looks slightly","Fragments":["cleaner)"]},{"Key":"I'd jus","Fragments":["use"]},{"Key":"jus use","Fragments":["`String.downcase`"]},{"Key":"multiple expressions","Fragments":["in","(or"]},{"Key":"expressions in","Fragments":["a","elixir.","that"]},{"Key":"long as","Fragments":["they","writing","they're","strings","the","the","people","`append(list_with_1000_elements,","`append(list_with_1000_elements,","it"]},{"Key":"you call","Fragments":["`String.split`","it","`foo(something,","`sort`","filter"]},{"Key":"call `String.split`","Fragments":["with"]},{"Key":"`String.split` with","Fragments":["a","a","the"]},{"Key":"a regex?","Fragments":["Doesn't"]},{"Key":"regex? Doesn't","Fragments":["the"]},{"Key":"Doesn't the","Fragments":["1"]},{"Key":"the 1","Fragments":["argument","and"]},{"Key":"1 argument","Fragments":["version"]},{"Key":"argument version","Fragments":["do"]},{"Key":"version do","Fragments":["what"]},{"Key":"do what","Fragments":["you","I","`cond`"]},{"Key":" `List.foldl`","Fragments":["is"]},{"Key":"`List.foldl` is","Fragments":["more"]},{"Key":"more idiomatically","Fragments":["written","written"]},{"Key":"idiomatically written","Fragments":["as","`Enum.sort`"]},{"Key":"common not","Fragments":["to","to"]},{"Key":"directly (except","Fragments":["for"]},{"Key":"(except for","Fragments":["`new`)"]},{"Key":"for `new`)","Fragments":["but"]},{"Key":"`new`) but","Fragments":["to"]},{"Key":"corresponding `Dict`","Fragments":["functions."]},{"Key":"`Dict` functions.","Fragments":["`Dict`"]},{"Key":"functions. `Dict`","Fragments":["=","functions"]},{"Key":"`Dict` =","Fragments":["interface,","interface,"]},{"Key":"= interface,","Fragments":["`HashDict`","`HashDict`","HashDict"]},{"Key":"interface, `HashDict`","Fragments":["=","is","="]},{"Key":"`HashDict` =","Fragments":["an","implementation."]},{"Key":"= an","Fragments":["implementation."]},{"Key":"A `Dict.get`","Fragments":["followed"]},{"Key":"`Dict.get` followed","Fragments":["by"]},{"Key":"by `Dict.put`","Fragments":["can"]},{"Key":"can often","Fragments":["be","optimize","be"]},{"Key":"often be","Fragments":["written","written"]},{"Key":" @vickie,","Fragments":["you"]},{"Key":"@vickie, you","Fragments":["are"]},{"Key":"are _very_","Fragments":["thorough."]},{"Key":"_very_ thorough.","Fragments":["I"]},{"Key":"thorough. I","Fragments":["was"]},{"Key":"was quite","Fragments":["pleased"]},{"Key":"quite pleased","Fragments":["with"]},{"Key":"my original,","Fragments":["but"]},{"Key":"original, but","Fragments":["once"]},{"Key":"but once","Fragments":["again,"]},{"Key":"once again,","Fragments":["you"]},{"Key":"again, you","Fragments":["find"]},{"Key":"find great","Fragments":["improvements."]},{"Key":"great improvements.","Fragments":["I'd"]},{"Key":"improvements. I'd","Fragments":["actually"]},{"Key":"actually thought","Fragments":["of","that"]},{"Key":"of you","Fragments":["when"]},{"Key":"you when","Fragments":["I","I"]},{"Key":"chose String.codepoints,","Fragments":["but"]},{"Key":"String.codepoints, but","Fragments":["glad"]},{"Key":"but glad","Fragments":["to"]},{"Key":"glad to","Fragments":["hear","hear","have","help."]},{"Key":"hear about","Fragments":["graphemes.","short"]},{"Key":" :-D","Fragments":["OK","Thanks."]},{"Key":"So, do","Fragments":["you"]},{"Key":"like reduce","Fragments":["better"]},{"Key":"reduce better","Fragments":["than"]},{"Key":"recursion, or","Fragments":["you"]},{"Key":"just felt","Fragments":["like","wrong."]},{"Key":"like stopping?","Fragments":["I"]},{"Key":"stopping? I","Fragments":["like"]},{"Key":"reduce solution","Fragments":["slightly"]},{"Key":"solution slightly","Fragments":["better,"]},{"Key":"slightly better,","Fragments":["but"]},{"Key":"as familiar","Fragments":["with"]},{"Key":"with recursion","Fragments":["or","or"]},{"Key":"recursion or","Fragments":["not.","else"]},{"Key":"first write","Fragments":["`append`"]},{"Key":"write `append`","Fragments":["in","to"]},{"Key":"`append` in","Fragments":["tail","`concat`","`concat`.","your"]},{"Key":"in tail","Fragments":["recursive"]},{"Key":"tail recursive","Fragments":["form","so","implementation:","function","version:","functions","solution.","optimization","version:","function.","as","now,","version:","solution","will","one).","version:","and","version:","version:","version:","is","function","and","manner."]},{"Key":"recursive form","Fragments":["and"]},{"Key":"form and","Fragments":["then"]},{"Key":"then to","Fragments":["analyse","see"]},{"Key":"to analyse","Fragments":["it."]},{"Key":"analyse it.","Fragments":["You'll"]},{"Key":"it. You'll","Fragments":["want"]},{"Key":"it's fast","Fragments":["and","and"]},{"Key":"fast and","Fragments":["when","easy.","not"]},{"Key":"it's slow.","Fragments":["Once"]},{"Key":"slow. Once","Fragments":["you"]},{"Key":"Once you","Fragments":["know","complete"]},{"Key":"that writing","Fragments":["`concat`"]},{"Key":"writing `concat`","Fragments":["will"]},{"Key":"`concat` will","Fragments":["be"]},{"Key":"I gather","Fragments":["it's","that"]},{"Key":"gather it's","Fragments":["more"]},{"Key":"to always","Fragments":["use","use"]},{"Key":"protocol instead","Fragments":["of"]},{"Key":"the concrete","Fragments":["implementation"]},{"Key":"concrete implementation","Fragments":["(Enum"]},{"Key":"implementation (Enum","Fragments":["instead"]},{"Key":"(Enum instead","Fragments":["of"]},{"Key":"of List,","Fragments":["Dict"]},{"Key":"List, Dict","Fragments":["instead"]},{"Key":"of HashDict).","Fragments":["As"]},{"Key":"HashDict). As","Fragments":["primarily"]},{"Key":"As primarily","Fragments":["a"]},{"Key":"primarily a","Fragments":["C#"]},{"Key":"a C#","Fragments":["developer"]},{"Key":"C# developer","Fragments":["that"]},{"Key":"developer that","Fragments":["feels"]},{"Key":"feels pretty","Fragments":["natural"]},{"Key":"pretty natural","Fragments":["to"]},{"Key":"natural to","Fragments":["me."]},{"Key":"me. Is","Fragments":["it"]},{"Key":"it common","Fragments":["to"]},{"Key":"create mocks","Fragments":["of"]},{"Key":"mocks of","Fragments":["elixir"]},{"Key":"elixir protocols","Fragments":["for"]},{"Key":"protocols for","Fragments":["unit"]},{"Key":"for unit","Fragments":["testing?"]},{"Key":"unit testing?","Fragments":["That"]},{"Key":"testing? That","Fragments":["would"]},{"Key":"would require","Fragments":["injecting","appending"]},{"Key":"require injecting","Fragments":["the"]},{"Key":"injecting the","Fragments":["dependent"]},{"Key":"the dependent","Fragments":["modules"]},{"Key":"dependent modules","Fragments":["instead"]},{"Key":"modules instead","Fragments":["of"]},{"Key":"calling .new()","Fragments":["in"]},{"Key":".new() in","Fragments":["the"]},{"Key":"same place","Fragments":["the"]},{"Key":"module (I","Fragments":["want"]},{"Key":"(I want","Fragments":["to"]},{"Key":"say object)","Fragments":["is"]},{"Key":"object) is","Fragments":["used."]},{"Key":"used. Is","Fragments":["that"]},{"Key":"that considered","Fragments":["good"]},{"Key":"considered good","Fragments":["practice?"]},{"Key":"reduce version","Fragments":["slightly"]},{"Key":"version slightly","Fragments":["better."]},{"Key":"logic would","Fragments":["be","fail"]},{"Key":"be clearer,","Fragments":["though,"]},{"Key":"clearer, though,","Fragments":["if"]},{"Key":"extracted separate","Fragments":["functions"]},{"Key":"for (1)","Fragments":["splitting"]},{"Key":"(1) splitting","Fragments":["the"]},{"Key":"input into","Fragments":["words,"]},{"Key":"into words,","Fragments":["and"]},{"Key":"and (2)","Fragments":["keeping"]},{"Key":"(2) keeping","Fragments":["count."]},{"Key":"I second","Fragments":["gvaughn's","the","rud's","what"]},{"Key":"second gvaughn's","Fragments":["suggestion"]},{"Key":"gvaughn's suggestion","Fragments":["of"]},{"Key":"Pretty much,","Fragments":["yes."]},{"Key":"much, yes.","Fragments":["Minor"]},{"Key":"yes. Minor","Fragments":["point,"]},{"Key":"point, `Enum`","Fragments":["isn't"]},{"Key":"`Enum` isn't","Fragments":["the"]},{"Key":"protocol but","Fragments":["a"]},{"Key":"the `Enumerable`","Fragments":["protocol.","protocol)."]},{"Key":"`Enumerable` protocol.","Fragments":["It's"]},{"Key":"protocol. It's","Fragments":["not"]},{"Key":"not possible","Fragments":["to","to","due","to"]},{"Key":"define public","Fragments":["functions","functions"]},{"Key":"public functions","Fragments":["in","in","first","otherwise."]},{"Key":"protocol so","Fragments":["there's","there's"]},{"Key":"so there's","Fragments":["pretty","pretty","no","useful","no"]},{"Key":"there's pretty","Fragments":["much","much"]},{"Key":"much always","Fragments":["a","a","preferred"]},{"Key":"a companion","Fragments":["module.","module.\""]},{"Key":"seen many","Fragments":["mock"]},{"Key":"many mock","Fragments":["modules"]},{"Key":"mock modules","Fragments":["used","seems"]},{"Key":"modules used","Fragments":["yet,"]},{"Key":"used yet,","Fragments":["but"]},{"Key":"yet, but","Fragments":["that's","I","this","I'm"]},{"Key":"probably due","Fragments":["to"]},{"Key":"to protocols","Fragments":["not"]},{"Key":"protocols not","Fragments":["being"]},{"Key":"being used","Fragments":["all"]},{"Key":"all that","Fragments":["much","well","common"]},{"Key":"core lib.","Fragments":["Using"]},{"Key":"lib. Using","Fragments":["mock"]},{"Key":"Using mock","Fragments":["modules"]},{"Key":"modules seems","Fragments":["like"]},{"Key":"good idea.","Fragments":["In","That","I","I","It"]},{"Key":"idea. In","Fragments":["that"]},{"Key":"In that","Fragments":["respect"]},{"Key":"that respect","Fragments":["the"]},{"Key":"respect the","Fragments":["following"]},{"Key":"following trick","Fragments":["is"]},{"Key":"trick is","Fragments":["useful:"]},{"Key":"def creates_new_under_the_hood(mod)","Fragments":["do"]},{"Key":" o","Fragments":["="]},{"Key":"o =","Fragments":["mod.new(...)"]},{"Key":"other words","Fragments":["you","you","`cond`","unlike","appending"]},{"Key":"words you","Fragments":["can","can","do","find","do","never"]},{"Key":"module name","Fragments":["inside","inside"]},{"Key":"name inside","Fragments":["a","a"]},{"Key":"a variable.","Fragments":["That's"]},{"Key":"variable. That's","Fragments":["great"]},{"Key":"That's great","Fragments":["for"]},{"Key":"great for","Fragments":["dependency","this","this"]},{"Key":"for dependency","Fragments":["injection."]},{"Key":" HashDicts","Fragments":["cannot","don't"]},{"Key":"HashDicts cannot","Fragments":["be"]},{"Key":"directly involved","Fragments":["in"]},{"Key":"involved in","Fragments":["list"]},{"Key":"in list","Fragments":["comprehensions","a"]},{"Key":"comprehensions but","Fragments":["you"]},{"Key":"can reduce","Fragments":["them","duplication,"]},{"Key":"reduce them","Fragments":["so"]},{"Key":"them so","Fragments":["you"]},{"Key":"use `Enum.map`","Fragments":["to"]},{"Key":"`Enum.map` to","Fragments":["avoid"]},{"Key":"the intermediate","Fragments":["list."]},{"Key":"It's generally","Fragments":["preferred","better"]},{"Key":"in `Dict`","Fragments":["over"]},{"Key":"`Dict` over","Fragments":["functions"]},{"Key":"over functions","Fragments":["in"]},{"Key":"in `HashDict`","Fragments":["when"]},{"Key":"`HashDict` when","Fragments":["`Dict`"]},{"Key":"when `Dict`","Fragments":["functions"]},{"Key":"`Dict` functions","Fragments":["are","to","if","work","work"]},{"Key":"available (i.e.","Fragments":["`to_list`)."]},{"Key":"(i.e. `to_list`).","Fragments":["`Dict`"]},{"Key":"`to_list`). `Dict`","Fragments":["is"]},{"Key":"an interface,","Fragments":["`HashDict`","the"]},{"Key":"an implementation.","Fragments":["You'll"]},{"Key":"implementation. You'll","Fragments":["rarely"]},{"Key":"You'll rarely","Fragments":["need"]},{"Key":"rarely need","Fragments":["to","`if-elseif-else`"]},{"Key":"functions explicitly,","Fragments":["except"]},{"Key":"explicitly, except","Fragments":["for"]},{"Key":"missed String.strip","Fragments":["when"]},{"Key":"String.strip when","Fragments":["I"]},{"Key":"I skimmed","Fragments":["the"]},{"Key":"skimmed the","Fragments":["documentation"]},{"Key":" @major","Fragments":["Regarding"]},{"Key":"@major Regarding","Fragments":["your"]},{"Key":"second nitpick,","Fragments":["I"]},{"Key":"knew I","Fragments":["could"]},{"Key":"could simply","Fragments":["calculate"]},{"Key":"simply calculate","Fragments":["it"]},{"Key":"calculate it","Fragments":["but","for"]},{"Key":"exercise expected","Fragments":["a"]},{"Key":"expected a","Fragments":["proof"]},{"Key":"a proof","Fragments":["of"]},{"Key":"proof of","Fragments":["sorts."]},{"Key":"suggest using","Fragments":["`Enum.reduce`","unicode"]},{"Key":"using `Enum.reduce`","Fragments":["over","with"]},{"Key":"`Enum.reduce` over","Fragments":["`List.foldl`,"]},{"Key":"over `List.foldl`,","Fragments":["and"]},{"Key":"`List.foldl`, and","Fragments":["`Dict.merge`"]},{"Key":"and `Dict.merge`","Fragments":["over"]},{"Key":"`Dict.merge` over","Fragments":["`HashDict.merge`."]},{"Key":"over `HashDict.merge`.","Fragments":["I"]},{"Key":"`HashDict.merge`. I","Fragments":["think"]},{"Key":"the generic","Fragments":["protocol","one,"]},{"Key":"generic protocol","Fragments":["functions"]},{"Key":"protocol functions","Fragments":["are"]},{"Key":"are preferred,","Fragments":["in"]},{"Key":"preferred, in","Fragments":["general."]},{"Key":"at `Dict.update`,","Fragments":["which","it","it's","it"]},{"Key":"`Dict.update`, which","Fragments":["might"]},{"Key":"might provide","Fragments":["a"]},{"Key":"provide a","Fragments":["slightly","name"]},{"Key":"slightly simpler","Fragments":["solution"]},{"Key":"simpler solution","Fragments":["than","using","using"]},{"Key":"than `Dict.merge`,","Fragments":["in"]},{"Key":"`Dict.merge`, in","Fragments":["this"]},{"Key":" \"It's","Fragments":["not"]},{"Key":"\"It's not","Fragments":["possible"]},{"Key":"That's good","Fragments":["to","to"]},{"Key":" \"In","Fragments":["other"]},{"Key":"\"In other","Fragments":["words"]},{"Key":"of behind","Fragments":["the"]},{"Key":"behind the","Fragments":["scenes","separate","different","scenes","gym!\")"]},{"Key":"the scenes","Fragments":["refactoring","concatenating"]},{"Key":"scenes refactoring","Fragments":["on"]},{"Key":"refactoring on","Fragments":["this"]},{"Key":"one before","Fragments":["posting"]},{"Key":"before posting","Fragments":["the"]},{"Key":"posting the","Fragments":["first"]},{"Key":"version. My","Fragments":["goals"]},{"Key":"My goals","Fragments":["were"]},{"Key":"goals were","Fragments":["to"]},{"Key":"write simple,","Fragments":["readable"]},{"Key":"simple, readable","Fragments":["and"]},{"Key":"and idiomatic","Fragments":["code."]},{"Key":"idiomatic code.","Fragments":["I"]},{"Key":"did pretty","Fragments":["well"]},{"Key":"pretty well","Fragments":["on"]},{"Key":"well on","Fragments":["the"]},{"Key":"first 2","Fragments":["goals,"]},{"Key":"2 goals,","Fragments":["but"]},{"Key":"goals, but","Fragments":["I'm"]},{"Key":"elixir so","Fragments":["I'm","far"]},{"Key":"how idiomatic","Fragments":["this"]},{"Key":"idiomatic this","Fragments":["code"]},{"Key":"chose to","Fragments":["leave","use","introduce"]},{"Key":"to leave","Fragments":["`String.downcase()`","them","it","out"]},{"Key":"leave `String.downcase()`","Fragments":["calls"]},{"Key":"`String.downcase()` calls","Fragments":["both"]},{"Key":"calls both","Fragments":["in"]},{"Key":"both in","Fragments":["`differents?`","function","and","place"]},{"Key":"in `differents?`","Fragments":["and"]},{"Key":"`differents?` and","Fragments":["`letters_of`"]},{"Key":"and `letters_of`","Fragments":["considering"]},{"Key":"`letters_of` considering","Fragments":["that"]},{"Key":"considering that","Fragments":["it","there's","there"]},{"Key":"was each","Fragments":["method's"]},{"Key":"each method's","Fragments":["responsibility."]},{"Key":"Regarding one","Fragments":["liners"]},{"Key":"one liners","Fragments":["for","as"]},{"Key":"liners for","Fragments":["the"]},{"Key":"latest 2","Fragments":["methods"]},{"Key":"2 methods","Fragments":["I"]},{"Key":"methods I","Fragments":["hesitated"]},{"Key":"I hesitated","Fragments":["and"]},{"Key":"hesitated and","Fragments":["finally"]},{"Key":"and finally","Fragments":["used","I","wrote"]},{"Key":"finally used","Fragments":["one"]},{"Key":"used one","Fragments":["liners"]},{"Key":"liners as","Fragments":["the"]},{"Key":"logic was","Fragments":["trivial"]},{"Key":"was trivial","Fragments":["and"]},{"Key":"trivial and","Fragments":["it"]},{"Key":"not had","Fragments":["to"]},{"Key":"take much","Fragments":["vertical"]},{"Key":"much vertical","Fragments":["space!"]},{"Key":"tried here","Fragments":["to"]},{"Key":"explicit the","Fragments":["fact"]},{"Key":"algorithm was","Fragments":["case","more"]},{"Key":"was case","Fragments":["insensitive."]},{"Key":"case insensitive.","Fragments":["I"]},{"Key":"insensitive. I","Fragments":["find"]},{"Key":"it brings","Fragments":["more"]},{"Key":"brings more","Fragments":["readability"]},{"Key":"more readability","Fragments":["to"]},{"Key":"method while","Fragments":["making"]},{"Key":"while making","Fragments":["emerging"]},{"Key":"making emerging","Fragments":["the"]},{"Key":"emerging the","Fragments":["different"]},{"Key":"different anagrams","Fragments":["cases"]},{"Key":"anagrams cases","Fragments":["(with"]},{"Key":"cases (with","Fragments":["guard)."]},{"Key":"Ok, I","Fragments":["understand.","hadn't"]},{"Key":"understand. It","Fragments":["seems"]},{"Key":"seems reminiscent","Fragments":["of"]},{"Key":"reminiscent of","Fragments":["using","Ruby's","a"]},{"Key":"using Map","Fragments":["vs."]},{"Key":"Map vs.","Fragments":["HashMap/TreeMap"]},{"Key":"vs. HashMap/TreeMap","Fragments":["in"]},{"Key":"HashMap/TreeMap in","Fragments":["Java."]},{"Key":"I *know*","Fragments":["there"]},{"Key":"*know* there","Fragments":["is"]},{"Key":"clean this","Fragments":["up.","one"]},{"Key":"this up.","Fragments":["I"]},{"Key":"up. I","Fragments":["just","wonder"]},{"Key":"just don't","Fragments":["know","see","know","pass","have"]},{"Key":"use `String.to_char_list!`","Fragments":["(throws"]},{"Key":"`String.to_char_list!` (throws","Fragments":["exception"]},{"Key":"(throws exception","Fragments":["if"]},{"Key":"exception if","Fragments":["conversion","the","an"]},{"Key":"if conversion","Fragments":["fails)."]},{"Key":"directly but","Fragments":["to"]},{"Key":"`Dict` versions.","Fragments":["`Dict`","`Dict`"]},{"Key":"versions. `Dict`","Fragments":["=","works"]},{"Key":"= implementation.","Fragments":["Exception:","(There"]},{"Key":"implementation. Exception:","Fragments":["`HashDict.new`"]},{"Key":"enforce adding","Fragments":["students"]},{"Key":"adding students","Fragments":["to"]},{"Key":"list, I","Fragments":["can","doubt"]},{"Key":"the `[","Fragments":["head","head","[h|t]|tail]`"]},{"Key":"| tail]`","Fragments":["syntax","syntax."]},{"Key":"tail]` syntax","Fragments":["for"]},{"Key":"for composing","Fragments":["a"]},{"Key":"composing a","Fragments":["new","list"]},{"Key":"students list","Fragments":["by"]},{"Key":"list by","Fragments":["linking","their","adding"]},{"Key":"by linking","Fragments":["the"]},{"Key":"linking the","Fragments":["new"]},{"Key":"new student","Fragments":["to"]},{"Key":"student to","Fragments":["the"]},{"Key":"like String.codepoints","Fragments":["could"]},{"Key":"String.codepoints could","Fragments":["be"]},{"Key":"place of","Fragments":["String.graphemes.","the"]},{"Key":"of String.graphemes.","Fragments":["I'm"]},{"Key":"String.graphemes. I'm","Fragments":["not"]},{"Key":"This first","Fragments":["iteration"]},{"Key":"first iteration","Fragments":["was","on","actually","worked.","(where"]},{"Key":"iteration was","Fragments":["aimed"]},{"Key":"was aimed","Fragments":["at"]},{"Key":"aimed at","Fragments":["reducing"]},{"Key":"at reducing","Fragments":["duplication,"]},{"Key":"reducing duplication,","Fragments":["but"]},{"Key":"duplication, but","Fragments":["architecture","you"]},{"Key":"but architecture","Fragments":["might"]},{"Key":"architecture might","Fragments":["be"]},{"Key":"using `Enum.filter`","Fragments":["instead"]},{"Key":"`Enum.filter` instead","Fragments":["of"]},{"Key":"of `Enum.reduce`","Fragments":["would"]},{"Key":"`Enum.reduce` would","Fragments":["allow"]},{"Key":"few lines","Fragments":["of"]},{"Key":"details (L16","Fragments":["and"]},{"Key":"(L16 and","Fragments":["conditionals"]},{"Key":"and conditionals","Fragments":["returning"]},{"Key":"conditionals returning","Fragments":["`anagrams`)"]},{"Key":"returning `anagrams`)","Fragments":["hence"]},{"Key":"`anagrams`) hence","Fragments":["making"]},{"Key":"hence making","Fragments":["the"]},{"Key":" Graphemes","Fragments":["are"]},{"Key":"Graphemes are","Fragments":["closer"]},{"Key":"are closer","Fragments":["to"]},{"Key":"to our","Fragments":["natural"]},{"Key":"our natural","Fragments":["notion"]},{"Key":"natural notion","Fragments":["of"]},{"Key":"characters, codepoints","Fragments":["are"]},{"Key":"codepoints are","Fragments":["easier","calculated"]},{"Key":"are easier","Fragments":["to","to"]},{"Key":"to compute.","Fragments":["If"]},{"Key":"compute. If","Fragments":["in"]},{"Key":"If in","Fragments":["doubt,"]},{"Key":"in doubt,","Fragments":["use"]},{"Key":"doubt, use","Fragments":["graphemes."]},{"Key":"could downcase","Fragments":["the","the","as"]},{"Key":"input once","Fragments":["instead"]},{"Key":"every time.","Fragments":["Same"]},{"Key":"time. Same","Fragments":["for"]},{"Key":"Same for","Fragments":["sorting","`String.from_char_list`.","`map`"]},{"Key":"for sorting","Fragments":["it."]},{"Key":" Hé","Fragments":["hé,"]},{"Key":"Hé hé,","Fragments":["j'ai"]},{"Key":"hé, j'ai","Fragments":["à"]},{"Key":"j'ai à","Fragments":["peu"]},{"Key":"à peu","Fragments":["près"]},{"Key":"peu près","Fragments":["la"]},{"Key":"près la","Fragments":["même"]},{"Key":"la même","Fragments":["chose"]},{"Key":"même chose","Fragments":[":-)"]},{"Key":"the \"Verse\"","Fragments":["generation"]},{"Key":"\"Verse\" generation","Fragments":["in"]},{"Key":"generation in","Fragments":["its"]},{"Key":"and reduce","Fragments":["duplicated","steps.","calls"]},{"Key":"reduce duplicated","Fragments":["calls"]},{"Key":"duplicated calls","Fragments":["to"]},{"Key":"to `bottles`","Fragments":["but"]},{"Key":"`bottles` but","Fragments":["the"]},{"Key":"code does","Fragments":["seems","pass"]},{"Key":"does seems","Fragments":["less"]},{"Key":"seems less","Fragments":["readable"]},{"Key":"than try","Fragments":["#2"]},{"Key":"try #2","Fragments":["to"]},{"Key":"#2 to","Fragments":["me."]},{"Key":"me. What","Fragments":["do"]},{"Key":"On a","Fragments":["pareil","side"]},{"Key":"a pareil","Fragments":["en"]},{"Key":"pareil en","Fragments":["effet"]},{"Key":"en effet","Fragments":["!"]},{"Key":" Comme","Fragments":["en"]},{"Key":"Comme en","Fragments":["Ruby"]},{"Key":"en Ruby","Fragments":["(au"]},{"Key":"Ruby (au","Fragments":["moins)"]},{"Key":"(au moins)","Fragments":["la"]},{"Key":"moins) la","Fragments":["convention"]},{"Key":"la convention","Fragments":["est"]},{"Key":"convention est","Fragments":["d'utiliser"]},{"Key":"est d'utiliser","Fragments":["des"]},{"Key":"d'utiliser des","Fragments":["\"?\""]},{"Key":"des \"?\"","Fragments":["(et"]},{"Key":"\"?\" (et","Fragments":["des"]},{"Key":"(et des","Fragments":["\"!\")"]},{"Key":"des \"!\")","Fragments":["en"]},{"Key":"\"!\") en","Fragments":["fin"]},{"Key":"en fin","Fragments":["de"]},{"Key":"fin de","Fragments":["nom"]},{"Key":"de nom","Fragments":["de"]},{"Key":"nom de","Fragments":["méthode"]},{"Key":"de méthode","Fragments":["pour"]},{"Key":"méthode pour","Fragments":["plus"]},{"Key":"pour plus","Fragments":["d'expressivité,"]},{"Key":"plus d'expressivité,","Fragments":["voir"]},{"Key":"d'expressivité, voir","Fragments":["http://stackoverflow.com/a/7179058/947019"]},{"Key":" Aussi,","Fragments":["`Regex.run"]},{"Key":"Aussi, `Regex.run","Fragments":["!="]},{"Key":"`Regex.run !=","Fragments":["nil`est"]},{"Key":"!= nil`est","Fragments":["équivalent"]},{"Key":"nil`est équivalent","Fragments":["de"]},{"Key":"équivalent de","Fragments":["`Regex.match`"]},{"Key":" Je","Fragments":["ne"]},{"Key":"Je ne","Fragments":["connaissais"]},{"Key":"ne connaissais","Fragments":["pas"]},{"Key":"connaissais pas","Fragments":["cette"]},{"Key":"pas cette","Fragments":["convention,"]},{"Key":"cette convention,","Fragments":["c'est"]},{"Key":"convention, c'est","Fragments":["astucieux"]},{"Key":"c'est astucieux","Fragments":[":-)"]},{"Key":"could call","Fragments":["the"]},{"Key":"module `Beer.Verse`","Fragments":["to"]},{"Key":"`Beer.Verse` to","Fragments":["make"]},{"Key":"the relation","Fragments":["to"]},{"Key":"relation to","Fragments":["the"]},{"Key":"the `Beer`","Fragments":["module","module"]},{"Key":"`Beer` module","Fragments":["clear.","and"]},{"Key":"module clear.","Fragments":["But"]},{"Key":"clear. But","Fragments":["I","as"]},{"Key":"benefit as","Fragments":["it's"]},{"Key":"works perfectly","Fragments":["well","and"]},{"Key":"perfectly well","Fragments":["with"]},{"Key":"well with","Fragments":["private","elixir.","any","multibytes"]},{"Key":"with private","Fragments":["functions.","functions"]},{"Key":"Thanks, pminten,","Fragments":["String.to_char_list!"]},{"Key":"pminten, String.to_char_list!","Fragments":["is"]},{"Key":"String.to_char_list! is","Fragments":["exactly"]},{"Key":"And thank","Fragments":["you,"]},{"Key":"thank you,","Fragments":["real34,"]},{"Key":"you, real34,","Fragments":["you're"]},{"Key":"real34, you're","Fragments":["right."]},{"Key":"right. This","Fragments":["is","was"]},{"Key":"definitely a","Fragments":["filtering","valid"]},{"Key":"a filtering","Fragments":["problem","function"]},{"Key":"filtering problem","Fragments":["and"]},{"Key":"a reducing","Fragments":["one."]},{"Key":"did consider","Fragments":["that","that,"]},{"Key":"that -","Fragments":["it","I"]},{"Key":"definitely be","Fragments":["more"]},{"Key":"more efficient.","Fragments":["But","Your","Not"]},{"Key":"efficient. But","Fragments":["I"]},{"Key":"a \"clean\"","Fragments":["way"]},{"Key":"\"clean\" way","Fragments":["to"]},{"Key":"that kept","Fragments":["`anagramOf?`"]},{"Key":"kept `anagramOf?`","Fragments":["separate"]},{"Key":"`anagramOf?` separate","Fragments":["from"]},{"Key":"separate from","Fragments":["filtering."]},{"Key":" Despite","Fragments":["the"]},{"Key":"Despite the","Fragments":["fact"]},{"Key":"that swapping","Fragments":["lines"]},{"Key":"swapping lines","Fragments":["16"]},{"Key":"lines 16","Fragments":["and"]},{"Key":"16 and","Fragments":["18"]},{"Key":"and 18","Fragments":["would"]},{"Key":"18 would","Fragments":["make"]},{"Key":"more efficient,","Fragments":["I","but","but"]},{"Key":"efficient, I","Fragments":["prefer"]},{"Key":"prefer this","Fragments":["ordering","style."]},{"Key":"this ordering","Fragments":["because"]},{"Key":"ordering because","Fragments":["I"]},{"Key":"describes the","Fragments":["logic"]},{"Key":"solution better.","Fragments":["First"]},{"Key":"better. First","Fragments":["I"]},{"Key":"I care","Fragments":["to","to"]},{"Key":"care to","Fragments":["know","make","only","explain"]},{"Key":"anagrams and","Fragments":["only","another"]},{"Key":"only then","Fragments":["do"]},{"Key":"sure they're","Fragments":["not"]},{"Key":" ...maybe","Fragments":["that's"]},{"Key":"...maybe that's","Fragments":["just"]},{"Key":"is NOT","Fragments":["a"]},{"Key":"NOT a","Fragments":["nitpick."]},{"Key":"just learned","Fragments":["so","Elixir","on"]},{"Key":"learned so","Fragments":["much"]},{"Key":"about elixir","Fragments":["from","the"]},{"Key":"elixir from","Fragments":["reading"]},{"Key":"from reading","Fragments":["this","a"]},{"Key":"reading this","Fragments":["code.","wrong."]},{"Key":"code. Thank","Fragments":["you."]},{"Key":" ...to","Fragments":["be"]},{"Key":"...to be","Fragments":["more"]},{"Key":"the anagram?()","Fragments":["function,"]},{"Key":"anagram?() function,","Fragments":["and"]},{"Key":"\u00261 to","Fragments":["create"]},{"Key":"something I'm","Fragments":["still"]},{"Key":"still rather","Fragments":["unsure","efficient:"]},{"Key":"rather unsure","Fragments":["about"]},{"Key":"unsure about","Fragments":["\"style\"-related"]},{"Key":"about \"style\"-related","Fragments":["issues..."]},{"Key":"\"style\"-related issues...","Fragments":["when"]},{"Key":"issues... when","Fragments":["to"]},{"Key":"when to","Fragments":["use","use","use"]},{"Key":"parentheses although","Fragments":["they're"]},{"Key":"although they're","Fragments":["not"]},{"Key":"not strictly","Fragments":["necessary....","correct,"]},{"Key":" Plus,","Fragments":["and"]},{"Key":"Plus, and","Fragments":["probably"]},{"Key":"more importantly,","Fragments":["I'm"]},{"Key":"importantly, I'm","Fragments":["new"]},{"Key":"have probably","Fragments":["missed"]},{"Key":"probably missed","Fragments":["opportunities"]},{"Key":"missed opportunities","Fragments":["of"]},{"Key":"opportunities of","Fragments":["using"]},{"Key":"functions (maybe","Fragments":["instead"]},{"Key":"(maybe instead","Fragments":["of"]},{"Key":"Any input","Fragments":["is"]},{"Key":"To make","Fragments":["a","them","functions"]},{"Key":"module doc","Fragments":["string"]},{"Key":"doc string","Fragments":["you","on"]},{"Key":"string you","Fragments":["need"]},{"Key":" @freddie","Fragments":["\"\"\""]},{"Key":" bla","Fragments":["bla"]},{"Key":"bla bla","Fragments":["bla"]},{"Key":"string isn't","Fragments":["enough"]},{"Key":"isn't enough","Fragments":["(this","to"]},{"Key":"enough (this","Fragments":["isn't"]},{"Key":"(this isn't","Fragments":["Python)."]},{"Key":"a way,","Fragments":["but"]},{"Key":"but yet,","Fragments":["it"]},{"Key":"yet, it","Fragments":["makes"]},{"Key":"makes for","Fragments":["slightly","more","a","a","easier","maintainable"]},{"Key":"for slightly","Fragments":["less"]},{"Key":"less nice","Fragments":["code.","error"]},{"Key":"nice code.","Fragments":["That's"]},{"Key":"code. That's","Fragments":["often"]},{"Key":"That's often","Fragments":["a"]},{"Key":"often a","Fragments":["tradeoff.","good","good"]},{"Key":"How to","Fragments":["avoid"]},{"Key":"avoid \"(CompileError)","Fragments":["bob.exs:13:"]},{"Key":"\"(CompileError) bob.exs:13:","Fragments":["function"]},{"Key":"bob.exs:13: function","Fragments":["length/1"]},{"Key":"function length/1","Fragments":["imported"]},{"Key":"length/1 imported","Fragments":["from"]},{"Key":"imported from","Fragments":["both"]},{"Key":"both String","Fragments":["and"]},{"Key":"String and","Fragments":["Kernel,"]},{"Key":"and Kernel,","Fragments":["call"]},{"Key":"Kernel, call","Fragments":["is"]},{"Key":"is ambiguous\",","Fragments":["when"]},{"Key":"ambiguous\", when","Fragments":["removing"]},{"Key":"when removing","Fragments":["String"]},{"Key":"removing String","Fragments":["from"]},{"Key":"String from","Fragments":["String.length"]},{"Key":"from String.length","Fragments":["call?"]},{"Key":" Oops","Fragments":[":)","just"]},{"Key":"My opinion","Fragments":["on"]},{"Key":"the matter","Fragments":["is"]},{"Key":"matter is","Fragments":["that"]},{"Key":"in doubt","Fragments":["use"]},{"Key":"doubt use","Fragments":["parentheses."]},{"Key":"use parentheses.","Fragments":["The"]},{"Key":"parentheses. The","Fragments":["omission"]},{"Key":"The omission","Fragments":["of"]},{"Key":"omission of","Fragments":["them"]},{"Key":"them is","Fragments":["mostly"]},{"Key":"mostly useful","Fragments":["for","for"]},{"Key":"for macro's","Fragments":["such"]},{"Key":"macro's such","Fragments":["as"]},{"Key":"For predicates","Fragments":["(functions"]},{"Key":"predicates (functions","Fragments":["that"]},{"Key":"(functions that","Fragments":["return"]},{"Key":"return booleans)","Fragments":["it's"]},{"Key":"booleans) it's","Fragments":["common"]},{"Key":"it's common","Fragments":["to","to","for","to","not"]},{"Key":" Importing","Fragments":["functions","functions","specific"]},{"Key":"Importing functions","Fragments":["isn't","and"]},{"Key":"functions isn't","Fragments":["done"]},{"Key":"isn't done","Fragments":["often,"]},{"Key":"done often,","Fragments":["usually"]},{"Key":"often, usually","Fragments":["we"]},{"Key":"usually we","Fragments":["just"]},{"Key":"we just","Fragments":["write","write"]},{"Key":"write `String.last(text)`.","Fragments":["That"]},{"Key":"`String.last(text)`. That","Fragments":["way"]},{"Key":"more immediately","Fragments":["clear","obvious"]},{"Key":"are multiple","Fragments":["modules"]},{"Key":"multiple modules","Fragments":["that","the"]},{"Key":"modules that","Fragments":["define"]},{"Key":"function (for","Fragments":["example"]},{"Key":"and `List.zip`,","Fragments":["which"]},{"Key":"`List.zip`, which","Fragments":["are"]},{"Key":"are subtly","Fragments":["different","different"]},{"Key":"different but","Fragments":["both"]},{"Key":"but both","Fragments":["work"]},{"Key":"both work","Fragments":["on","on"]},{"Key":"If your","Fragments":["code","implementation","code"]},{"Key":"code runs","Fragments":["over"]},{"Key":"over 80","Fragments":["characters"]},{"Key":"80 characters","Fragments":["it's","it's"]},{"Key":"characters it's","Fragments":["probably","probably","better"]},{"Key":"best not","Fragments":["to"]},{"Key":"use \"do:\"","Fragments":["but"]},{"Key":"\"do:\" but","Fragments":["a"]},{"Key":"a normal","Fragments":["\"do"]},{"Key":"normal \"do","Fragments":["..."]},{"Key":"\"do ...","Fragments":["end\""]},{"Key":"... end\"","Fragments":["block","would."]},{"Key":"end\" block","Fragments":["and"]},{"Key":"block and","Fragments":["put","got","were"]},{"Key":"main code","Fragments":["on"]},{"Key":"code on","Fragments":["the"]},{"Key":"lines between","Fragments":["\"do\"","cond"]},{"Key":"between \"do\"","Fragments":["and"]},{"Key":"\"do\" and","Fragments":["\"end\"."]},{"Key":"and \"end\".","Fragments":["That"]},{"Key":"\"end\". That","Fragments":["just"]},{"Key":"That just","Fragments":["looks"]},{"Key":"just looks","Fragments":["a","a"]},{"Key":"regex match,","Fragments":["have"]},{"Key":"match, have","Fragments":["you"]},{"Key":"considered what","Fragments":["happens"]},{"Key":"with non-English","Fragments":["words"]},{"Key":"non-English words","Fragments":["like"]},{"Key":"words like","Fragments":["\"für\"","\"usually\"","co-operative)"]},{"Key":"\"für\" (German","Fragments":["for","for","for","for","for","for"]},{"Key":"(German for","Fragments":["\"for\")?","\"for\")?","\"for\")?","\"for\")?","\"for\").","\"for\")"]},{"Key":"some functions","Fragments":["private","from","you"]},{"Key":"whole though","Fragments":["your"]},{"Key":"though your","Fragments":["approach"]},{"Key":"and especially","Fragments":["importing"]},{"Key":"especially importing","Fragments":["all"]},{"Key":"importing all","Fragments":["functions"]},{"Key":"all functions","Fragments":["from","in"]},{"Key":"Elixir. It","Fragments":["makes"]},{"Key":"code harder","Fragments":["to"]},{"Key":"understand since","Fragments":["when"]},{"Key":"since when","Fragments":["functions"]},{"Key":"when functions","Fragments":["are"]},{"Key":"modules the","Fragments":["reader"]},{"Key":"the imports.","Fragments":["For"]},{"Key":"imports. For","Fragments":["example"]},{"Key":"`Enum.zip` vs","Fragments":["`List.zip`,"]},{"Key":"vs `List.zip`,","Fragments":["both"]},{"Key":"`List.zip`, both","Fragments":["work"]},{"Key":"on lists","Fragments":["but"]},{"Key":"lists but","Fragments":["they","I"]},{"Key":"different so","Fragments":["you"]},{"Key":"test your","Fragments":["code?"]},{"Key":"your code?","Fragments":["It"]},{"Key":"code? It","Fragments":["doesn't"]},{"Key":"It doesn't","Fragments":["compile","take","do","pass","cost","work"]},{"Key":"doesn't compile","Fragments":["for","because"]},{"Key":"compile for","Fragments":["me"]},{"Key":"me due","Fragments":["to"]},{"Key":"the clash","Fragments":["between"]},{"Key":"clash between","Fragments":["`String.length`"]},{"Key":"between `String.length`","Fragments":["(imported"]},{"Key":"`String.length` (imported","Fragments":["through"]},{"Key":"(imported through","Fragments":["`import"]},{"Key":"through `import","Fragments":["String`)"]},{"Key":"`import String`)","Fragments":["and"]},{"Key":"String`) and","Fragments":["`Kernel.length`"]},{"Key":"and `Kernel.length`","Fragments":["(imported"]},{"Key":"`Kernel.length` (imported","Fragments":["implicitly)."]},{"Key":"you're referring","Fragments":["to","to."]},{"Key":"my point","Fragments":["about"]},{"Key":"about `to_list`","Fragments":["but"]},{"Key":"`to_list` but","Fragments":["now"]},{"Key":"source HashDict","Fragments":["to"]},{"Key":"HashDict to","Fragments":["`Enum.map`","accumulate"]},{"Key":"to `Enum.map`","Fragments":["you're"]},{"Key":"`Enum.map` you're","Fragments":["doing"]},{"Key":" @constance","Fragments":["I"]},{"Key":"@constance I","Fragments":["could"]},{"Key":"not think","Fragments":["of","of"]},{"Key":"the goals","Fragments":["of"]},{"Key":"goals of","Fragments":["1)"]},{"Key":"of 1)","Fragments":["swapping"]},{"Key":"1) swapping","Fragments":["the"]},{"Key":"swapping the","Fragments":["source","inputs"]},{"Key":"source key/value","Fragments":["pairs,"]},{"Key":"key/value pairs,","Fragments":["and"]},{"Key":"pairs, and","Fragments":["2)"]},{"Key":"and 2)","Fragments":["projecting"]},{"Key":"2) projecting","Fragments":["the"]},{"Key":"projecting the","Fragments":["original"]},{"Key":"original key","Fragments":["to"]},{"Key":"key to","Fragments":["each"]},{"Key":"to each","Fragments":["of","other","other","function,"]},{"Key":"the items","Fragments":["in","in"]},{"Key":"items in","Fragments":["the","the"]},{"Key":" String.at(s,","Fragments":["-1)"]},{"Key":"String.at(s, -1)","Fragments":["=="]},{"Key":"-1) ==","Fragments":["\"?\""]},{"Key":" String.last(s)","Fragments":["=="]},{"Key":"String.last(s) ==","Fragments":["\"?\""]},{"Key":"bit easier","Fragments":["to","to"]},{"Key":"Yup, code","Fragments":["doesn't"]},{"Key":"compile because","Fragments":["of"]},{"Key":"error you","Fragments":["mentioned."]},{"Key":"mentioned. I","Fragments":["was"]},{"Key":"was wondering","Fragments":["if","why.","if","about"]},{"Key":"to resolve","Fragments":["this"]},{"Key":"resolve this","Fragments":["conflict,"]},{"Key":"this conflict,","Fragments":["other"]},{"Key":"conflict, other","Fragments":["than"]},{"Key":"explicitly saying","Fragments":["String.length/1."]},{"Key":"understand that","Fragments":["you","`:list.sort`","requirement","way."]},{"Key":"you saying,","Fragments":["that"]},{"Key":"saying, that","Fragments":["idiomatic"]},{"Key":"that idiomatic","Fragments":["way"]},{"Key":"idiomatic way","Fragments":["is","to","to"]},{"Key":"have explicit","Fragments":["module"]},{"Key":"explicit module","Fragments":["names","names","references"]},{"Key":"module names","Fragments":["in","is","cluttering","(shortening"]},{"Key":"finally went","Fragments":["with"]},{"Key":"a `Beer.Verse`","Fragments":["module"]},{"Key":"`Beer.Verse` module","Fragments":["responsible"]},{"Key":"module responsible","Fragments":["for"]},{"Key":"for singing","Fragments":["a"]},{"Key":"singing a","Fragments":["single"]},{"Key":"single verse","Fragments":["even"]},{"Key":"verse even","Fragments":["if"]},{"Key":"it may","Fragments":["be","be","have","be"]},{"Key":"separate concerns","Fragments":["here,"]},{"Key":"concerns here,","Fragments":["but"]},{"Key":" Integrated","Fragments":["@joseph's"]},{"Key":"Integrated @joseph's","Fragments":["hints"]},{"Key":"@joseph's hints","Fragments":["(thanks"]},{"Key":"hints (thanks","Fragments":["a"]},{"Key":"(thanks a","Fragments":["lot!)."]},{"Key":"Most importantly,","Fragments":["inverted"]},{"Key":"importantly, inverted","Fragments":["the"]},{"Key":"inverted the","Fragments":["Regex"]},{"Key":"the Regex","Fragments":["match","module","by","test","breaking,"]},{"Key":"Regex match","Fragments":["in"]},{"Key":"match in","Fragments":["`has_letters?`,","a","the"]},{"Key":"in `has_letters?`,","Fragments":["the"]},{"Key":"`has_letters?`, the","Fragments":["precondition"]},{"Key":"the precondition","Fragments":["for","of","is"]},{"Key":"precondition for","Fragments":["determining"]},{"Key":" Noticed","Fragments":["that"]},{"Key":"Noticed that","Fragments":["`\u0026(String.downcase"]},{"Key":"that `\u0026(String.downcase","Fragments":["\u00261)`"]},{"Key":"`\u0026(String.downcase \u00261)`","Fragments":["could"]},{"Key":"\u00261)` could","Fragments":["have"]},{"Key":"as `String.downcase","Fragments":["\u00261)`,"]},{"Key":"`String.downcase \u00261)`,","Fragments":["but"]},{"Key":"\u00261)`, but","Fragments":["that"]},{"Key":"is [deprecated](https://groups.google.com/forum/#!topic/elixir-lang-core/FnlK6VjZ190).","Fragments":["Henceforth,"]},{"Key":"[deprecated](https://groups.google.com/forum/#!topic/elixir-lang-core/FnlK6VjZ190). Henceforth,","Fragments":["iteration"]},{"Key":"Henceforth, iteration","Fragments":["#2"]},{"Key":"iteration #2","Fragments":["avoids"]},{"Key":"#2 avoids","Fragments":["the"]},{"Key":"the deprecated","Fragments":["syntax"]},{"Key":"deprecated syntax","Fragments":["in"]},{"Key":"the `List.foldr`'s","Fragments":["`HashDict.update`)."]},{"Key":"The biggest","Fragments":["trade-off"]},{"Key":"biggest trade-off","Fragments":["to"]},{"Key":"trade-off to","Fragments":["be"]},{"Key":"considered here","Fragments":["is"]},{"Key":"probably re-useability","Fragments":["(of,"]},{"Key":"re-useability (of,","Fragments":["say,"]},{"Key":"(of, say,","Fragments":["smaller"]},{"Key":"say, smaller","Fragments":["functions"]},{"Key":"smaller functions","Fragments":["to"]},{"Key":"in `count/1`)","Fragments":["vs."]},{"Key":"`count/1`) vs.","Fragments":["conciseness."]},{"Key":" Conciseness","Fragments":["vs."]},{"Key":"Conciseness vs.","Fragments":["readability"]},{"Key":"vs. readability","Fragments":["is"]},{"Key":"considered w.r.t.","Fragments":["`fn"]},{"Key":"w.r.t. `fn","Fragments":["(w,"]},{"Key":"`fn (w,","Fragments":["h)"]},{"Key":"(w, h)","Fragments":["-\u003e"]},{"Key":"h) -\u003e","Fragments":["..."]},{"Key":"end` in","Fragments":["line","this"]},{"Key":"line #6...","Fragments":["I"]},{"Key":"#6... I","Fragments":["suppose"]},{"Key":"suppose here","Fragments":["it's"]},{"Key":"here it's","Fragments":["more"]},{"Key":"have names","Fragments":["(chars"]},{"Key":"names (chars","Fragments":["hinting"]},{"Key":"(chars hinting","Fragments":["at"]},{"Key":"hinting at","Fragments":["their"]},{"Key":"at their","Fragments":["meaning,"]},{"Key":"their meaning,","Fragments":["at"]},{"Key":"meaning, at","Fragments":["least)..."]},{"Key":" Thought","Fragments":["about","about"]},{"Key":"Thought about","Fragments":["it","declaring"]},{"Key":"again and","Fragments":["refactored"]},{"Key":"and refactored","Fragments":["a","the"]},{"Key":"refactored a","Fragments":["little..."]},{"Key":"a little...","Fragments":["I"]},{"Key":"little... I","Fragments":["think"]},{"Key":"the `inc_counter/2`","Fragments":["could"]},{"Key":"`inc_counter/2` could","Fragments":["actually"]},{"Key":"could actually","Fragments":["just"]},{"Key":"actually just","Fragments":["be"]},{"Key":"be incorporated","Fragments":["into"]},{"Key":"incorporated into","Fragments":["the"]},{"Key":"the `count/1`'s","Fragments":["`foldr`,"]},{"Key":"`count/1`'s `foldr`,","Fragments":["line"]},{"Key":"`foldr`, line","Fragments":["#6..."]},{"Key":"As of","Fragments":["now,"]},{"Key":"of now,","Fragments":["with"]},{"Key":"now, with","Fragments":["the"]},{"Key":"guarded `count`,","Fragments":["this"]},{"Key":"`count`, this","Fragments":["one"]},{"Key":"one has","Fragments":["to","the"]},{"Key":"be exported,","Fragments":["too,","too..."]},{"Key":"exported, too,","Fragments":["as"]},{"Key":"too, as","Fragments":["you"]},{"Key":"can't mix","Fragments":["`def`"]},{"Key":"mix `def`","Fragments":["and"]},{"Key":"and `defp`","Fragments":["with","(and","defines"]},{"Key":"`defp` with","Fragments":["the"]},{"Key":"same name.","Fragments":["It","`Dict.get`"]},{"Key":"name. It","Fragments":["doesn't"]},{"Key":"doesn't take","Fragments":["more","away"]},{"Key":"than renaming","Fragments":["the"]},{"Key":"line #5,","Fragments":["but"]},{"Key":"#5, but","Fragments":["actually"]},{"Key":"but actually","Fragments":["it"]},{"Key":"actually it","Fragments":["seems"]},{"Key":"the indirection","Fragments":["between"]},{"Key":"indirection between","Fragments":["`shouting?`"]},{"Key":"between `shouting?`","Fragments":["and"]},{"Key":"and `all_caps?`,","Fragments":["letting"]},{"Key":"`all_caps?`, letting","Fragments":["you"]},{"Key":"letting you","Fragments":["effectively"]},{"Key":"you effectively","Fragments":["change"]},{"Key":"effectively change","Fragments":["the"]},{"Key":"the predicates,","Fragments":["keeping"]},{"Key":"predicates, keeping","Fragments":["separate"]},{"Key":"keeping separate","Fragments":["what"]},{"Key":"separate what","Fragments":["is"]},{"Key":"is independent.","Fragments":["You"]},{"Key":"independent. You","Fragments":["could"]},{"Key":"could immediately","Fragments":["make"]},{"Key":"immediately make","Fragments":["use"]},{"Key":"this be","Fragments":["expanding","more"]},{"Key":"be expanding","Fragments":["`shouting?`"]},{"Key":"expanding `shouting?`","Fragments":["to"]},{"Key":"`shouting?` to","Fragments":["not"]},{"Key":"return `true`","Fragments":["for"]},{"Key":"`true` for","Fragments":["`\"1,","the","the"]},{"Key":"for `\"1,","Fragments":["2,"]},{"Key":"2, 3\"`,","Fragments":["which"]},{"Key":"3\"`, which","Fragments":["is"]},{"Key":"your submission","Fragments":["is"]},{"Key":"submission is","Fragments":["very","the"]},{"Key":"readable, you","Fragments":["could"]},{"Key":"shorter block","Fragments":["syntax"]},{"Key":"block syntax","Fragments":["for"]},{"Key":"small functions","Fragments":["([see"]},{"Key":"functions ([see","Fragments":["for"]},{"Key":"([see for","Fragments":["example"]},{"Key":"def sum(a,b),","Fragments":["do:"]},{"Key":"sum(a,b), do:","Fragments":["a+b"]},{"Key":" (But","Fragments":["be"]},{"Key":"(But be","Fragments":["sure"]},{"Key":"be sure","Fragments":["to","that","of"]},{"Key":"avoid lines","Fragments":["longer"]},{"Key":"lines longer","Fragments":["than"]},{"Key":"than 80","Fragments":["chars.)"]},{"Key":"Thanks, fixed","Fragments":["the"]},{"Key":"fixed the","Fragments":["`1,","doctest"]},{"Key":"the `1,","Fragments":["2,"]},{"Key":"`1, 2,","Fragments":["3`"]},{"Key":"2, 3`","Fragments":["case"]},{"Key":"3` case","Fragments":["and"]},{"Key":"using short","Fragments":["syntax"]},{"Key":"short syntax","Fragments":["now"]},{"Key":"having \"import","Fragments":["String\""]},{"Key":"\"import String\"","Fragments":["for"]},{"Key":"String\" for","Fragments":["the"]},{"Key":"the module,","Fragments":["explicitly","but"]},{"Key":"module, explicitly","Fragments":["using"]},{"Key":"explicitly using","Fragments":["String"]},{"Key":"of calls","Fragments":["like"]},{"Key":"calls like","Fragments":["\"length\","]},{"Key":"like \"length\",","Fragments":["\"strip\","]},{"Key":"\"length\", \"strip\",","Fragments":["etc."]},{"Key":"Yes, explicit","Fragments":["module"]},{"Key":"names is","Fragments":["the"]},{"Key":"list version","Fragments":["of"]},{"Key":"a diffferent","Fragments":["name?"]},{"Key":"And why","Fragments":["`foldr`?"]},{"Key":"why `foldr`?","Fragments":["It's"]},{"Key":"`foldr`? It's","Fragments":["not"]},{"Key":"not efficient","Fragments":["in"]},{"Key":"efficient in","Fragments":["Elixir","its","terms"]},{"Key":"Elixir due","Fragments":["to"]},{"Key":"case (\"für\")","Fragments":["it's"]},{"Key":"(\"für\") it's","Fragments":["still"]},{"Key":"still going","Fragments":["to"]},{"Key":"of \"f\"","Fragments":["and"]},{"Key":"\"f\" and","Fragments":["\"r\","]},{"Key":"and \"r\",","Fragments":["but"]},{"Key":"\"r\", but","Fragments":["you're"]},{"Key":"right, it's","Fragments":["not"]},{"Key":"for languages","Fragments":["that"]},{"Key":"that aren't","Fragments":["based","allowed,"]},{"Key":"aren't based","Fragments":["on"]},{"Key":"Will fix","Fragments":["the","all"]},{"Key":"the `has_letters`","Fragments":["to"]},{"Key":"`has_letters` to","Fragments":["use"]},{"Key":"use `%r/\\p{L}/i`,","Fragments":["so"]},{"Key":"`%r/\\p{L}/i`, so","Fragments":["it'll"]},{"Key":"so it'll","Fragments":["match"]},{"Key":"it'll match","Fragments":["letters"]},{"Key":"match letters","Fragments":["in"]},{"Key":"about `Enum.reduce`","Fragments":["is"]},{"Key":"is mainly","Fragments":["that"]},{"Key":"mainly that","Fragments":["it"]},{"Key":"on all","Fragments":["kinds","uses","elements","cases","cases"]},{"Key":"all kinds","Fragments":["of","of","of","of","of","of","of"]},{"Key":"things (that","Fragments":["have"]},{"Key":"(that have","Fragments":["an"]},{"Key":"an `Enumerable`","Fragments":["implementation)","implementation,"]},{"Key":"`Enumerable` implementation)","Fragments":["rather"]},{"Key":"implementation) rather","Fragments":["than"]},{"Key":"just lists.","Fragments":["I"]},{"Key":"suspect List.foldr","Fragments":["is"]},{"Key":"List.foldr is","Fragments":["slightly"]},{"Key":"efficient, but","Fragments":["then","the"]},{"Key":"then `:lists.foldr`","Fragments":["gains"]},{"Key":"`:lists.foldr` gains","Fragments":["yet"]},{"Key":"gains yet","Fragments":["a"]},{"Key":"yet a","Fragments":["tiny","clear"]},{"Key":"more speed","Fragments":["(one"]},{"Key":"speed (one","Fragments":["less"]},{"Key":"(one less","Fragments":["function"]},{"Key":"less function","Fragments":["call"]},{"Key":"call indirection).","Fragments":["Idiomatically"]},{"Key":"indirection). Idiomatically","Fragments":["`Enum`"]},{"Key":"Idiomatically `Enum`","Fragments":["is"]},{"Key":"`Enum` is","Fragments":["pretty","the"]},{"Key":"preferred if","Fragments":["it"]},{"Key":" @alfonso","Fragments":["`Regex.match?(%r/\\pL/,"]},{"Key":"@alfonso `Regex.match?(%r/\\pL/,","Fragments":["\"£\")`"]},{"Key":"`Regex.match?(%r/\\pL/, \"£\")`","Fragments":["is","and"]},{"Key":"\"£\")` is","Fragments":["true","false"]},{"Key":"but `Regex.match?(%r/\\pL/u,","Fragments":["\"£\")`"]},{"Key":"`Regex.match?(%r/\\pL/u, \"£\")`","Fragments":["is"]},{"Key":"is false","Fragments":["(which","then"]},{"Key":"false (which","Fragments":["is"]},{"Key":"correct answer,","Fragments":["the"]},{"Key":"answer, the","Fragments":["general"]},{"Key":"general category","Fragments":["of","tests","property,","L","L)."]},{"Key":"category of","Fragments":["the"]},{"Key":"the pound","Fragments":["sign"]},{"Key":"pound sign","Fragments":["is"]},{"Key":"sign is","Fragments":["Sc"]},{"Key":"is Sc","Fragments":["(Symbol,"]},{"Key":"Sc (Symbol,","Fragments":["currency))."]},{"Key":"(Symbol, currency)).","Fragments":["Never"]},{"Key":"currency)). Never","Fragments":["forget"]},{"Key":"Never forget","Fragments":["the"]},{"Key":"the `/u`","Fragments":["when","option","is"]},{"Key":"`/u` when","Fragments":["dealing"]},{"Key":"when dealing","Fragments":["with"]},{"Key":"with Unicode.","Fragments":["I've"]},{"Key":"Unicode. I've","Fragments":["been"]},{"Key":"been bitten","Fragments":["by"]},{"Key":"bitten by","Fragments":["this"]},{"Key":"by this","Fragments":["myself"]},{"Key":"this myself","Fragments":["recently,"]},{"Key":"myself recently,","Fragments":["took"]},{"Key":"recently, took","Fragments":["me"]},{"Key":"few hours","Fragments":["of"]},{"Key":"hours of","Fragments":["searching"]},{"Key":"of searching","Fragments":["(and"]},{"Key":"searching (and","Fragments":["a"]},{"Key":"(and a","Fragments":["good"]},{"Key":"good night's","Fragments":["sleep)"]},{"Key":"night's sleep)","Fragments":["before"]},{"Key":"sleep) before","Fragments":["I"]},{"Key":"missed a","Fragments":["`u`."]},{"Key":"a `u`.","Fragments":["Regex"]},{"Key":"`u`. Regex","Fragments":["does"]},{"Key":"Regex does","Fragments":["not"]},{"Key":"not warn","Fragments":["when"]},{"Key":"warn when","Fragments":["you"]},{"Key":"you forget","Fragments":["that,"]},{"Key":"forget that,","Fragments":["it"]},{"Key":"just gives","Fragments":["really"]},{"Key":"gives really","Fragments":["weird"]},{"Key":"really weird","Fragments":["results.","results","results"]},{"Key":" @kameron","Fragments":["Thanks!,"]},{"Key":"@kameron Thanks!,","Fragments":["fixed"]},{"Key":"Just remember","Fragments":["to"]},{"Key":"remember to","Fragments":["pass"]},{"Key":"`/u` option","Fragments":["to"]},{"Key":"option to","Fragments":["Regex.match?","`start_link`","play"]},{"Key":"to Regex.match?","Fragments":["when"]},{"Key":"Regex.match? when","Fragments":["you're"]},{"Key":"using `\\p`","Fragments":["or"]},{"Key":"`\\p` or","Fragments":["`\\P`"]},{"Key":"or `\\P`","Fragments":["or"]},{"Key":"`\\P` or","Fragments":["you"]},{"Key":"will get","Fragments":["really","merged"]},{"Key":"get really","Fragments":["weird","slower"]},{"Key":"weird results","Fragments":["(and","when"]},{"Key":"results (and","Fragments":["there's"]},{"Key":"(and there's","Fragments":["no"]},{"Key":"no warning","Fragments":["about"]},{"Key":"warning about","Fragments":["this)."]},{"Key":"Thanks, already","Fragments":["did"]},{"Key":"already did","Fragments":["in"]},{"Key":"From [`List`](http://elixir-lang.org/docs/stable/List.html),","Fragments":["I"]},{"Key":"[`List`](http://elixir-lang.org/docs/stable/List.html), I","Fragments":["gather"]},{"Key":"gather that","Fragments":["these"]},{"Key":"are \"only\"","Fragments":["the"]},{"Key":"\"only\" the","Fragments":["re-exported"]},{"Key":"the re-exported","Fragments":["Erlang"]},{"Key":"re-exported Erlang","Fragments":["functions"]},{"Key":"Erlang functions","Fragments":["and","and"]},{"Key":"and `Enum`","Fragments":["is"]},{"Key":"the favored","Fragments":["API."]},{"Key":"favored API.","Fragments":["I"]},{"Key":"API. I","Fragments":["suppose"]},{"Key":"this comes","Fragments":["with"]},{"Key":"comes with","Fragments":["efficiency","a"]},{"Key":"with efficiency","Fragments":["improvements"]},{"Key":"efficiency improvements","Fragments":["over","to"]},{"Key":"improvements over","Fragments":["`List.foldr`"]},{"Key":"over `List.foldr`","Fragments":["(?)."]},{"Key":"a useless","Fragments":["optimization,"]},{"Key":"useless optimization,","Fragments":["but"]},{"Key":"optimization, but","Fragments":["I"]},{"Key":"I converted","Fragments":["the"]},{"Key":"converted the","Fragments":["previous"]},{"Key":"previous `Enum.map_filter`","Fragments":["into"]},{"Key":"`Enum.map_filter` into","Fragments":["a"]},{"Key":"a pattern-match","Fragments":["in","for"]},{"Key":"pattern-match in","Fragments":["`count_word/2`"]},{"Key":"in `count_word/2`","Fragments":["and"]},{"Key":"`count_word/2` and","Fragments":["the"]},{"Key":"the embedded","Fragments":["call"]},{"Key":"embedded call","Fragments":["to"]},{"Key":"to `String.downcase`","Fragments":["to"]},{"Key":"save one","Fragments":["_going"]},{"Key":"one _going","Fragments":["through"]},{"Key":"_going through","Fragments":["the"]},{"Key":"entire list_","Fragments":["operation."]},{"Key":"The Unicode","Fragments":["`Regex.match`"]},{"Key":"Unicode `Regex.match`","Fragments":["is"]},{"Key":"`Regex.match` is","Fragments":["great."]},{"Key":"A tiny","Fragments":["nit"]},{"Key":"tiny nit","Fragments":["on"]},{"Key":"on this,","Fragments":["the","so"]},{"Key":"the `i`","Fragments":["(caseless)"]},{"Key":"`i` (caseless)","Fragments":["option"]},{"Key":"(caseless) option","Fragments":["is"]},{"Key":"really needed,","Fragments":["is"]},{"Key":"needed, is","Fragments":["it?"]},{"Key":"is it?","Fragments":["And"]},{"Key":"it? And","Fragments":["(please"]},{"Key":"And (please","Fragments":["don't"]},{"Key":"(please don't","Fragments":["care"]},{"Key":"this, it's","Fragments":["a"]},{"Key":"a tiny,","Fragments":["irrelevant"]},{"Key":"tiny, irrelevant","Fragments":["edge-case"]},{"Key":"irrelevant edge-case","Fragments":["that"]},{"Key":"edge-case that","Fragments":["makes"]},{"Key":"makes one","Fragments":["tear"]},{"Key":"one tear","Fragments":["one's"]},{"Key":"tear one's","Fragments":["hair)"]},{"Key":"one's hair)","Fragments":["both"]},{"Key":"hair) both","Fragments":["`Regex.match?(%r/\\pL/,"]},{"Key":"both `Regex.match?(%r/\\pL/,","Fragments":["\"£\")`"]},{"Key":"\"£\")` and","Fragments":["`String.upcase(\"£\")"]},{"Key":"and `String.upcase(\"£\")","Fragments":["=="]},{"Key":"`String.upcase(\"£\") ==","Fragments":["\"£\"`"]},{"Key":"== \"£\"`","Fragments":["are"]},{"Key":"\"£\"` are","Fragments":["true."]},{"Key":"are true.","Fragments":["So,"]},{"Key":"true. So,","Fragments":["addressing"]},{"Key":"So, addressing","Fragments":["a"]},{"Key":"addressing a","Fragments":["teenager"]},{"Key":"teenager with","Fragments":["pound-signs"]},{"Key":"with pound-signs","Fragments":["only"]},{"Key":"pound-signs only","Fragments":["would"]},{"Key":"only would","Fragments":["be"]},{"Key":"considered shouted.","Fragments":["(But"]},{"Key":"shouted. (But","Fragments":["that's"]},{"Key":"(But that's","Fragments":["probably"]},{"Key":"probably the","Fragments":["intention","largest","answer,"]},{"Key":"consider `\"","Fragments":["\"`"]},{"Key":"\"` to","Fragments":["be"]},{"Key":"be silence?","Fragments":["(It's"]},{"Key":"silence? (It's","Fragments":["the"]},{"Key":"(It's the","Fragments":["\"prolonged"]},{"Key":"the \"prolonged","Fragments":["silence\""]},{"Key":"\"prolonged silence\"","Fragments":["test"]},{"Key":"silence\" test","Fragments":["that"]},{"Key":"be commented","Fragments":["in","on."]},{"Key":"commented in","Fragments":["to"]},{"Key":"you deliberately","Fragments":["export"]},{"Key":"deliberately export","Fragments":["`Teenager.shouting?`"]},{"Key":"export `Teenager.shouting?`","Fragments":["etc?"]},{"Key":"`Teenager.shouting?` etc?","Fragments":["You"]},{"Key":"etc? You","Fragments":["can"]},{"Key":"can define","Fragments":["_private","functions"]},{"Key":"define _private","Fragments":["functions_"]},{"Key":"_private functions_","Fragments":["with"]},{"Key":"functions_ with","Fragments":["`defp`."]},{"Key":"fix all","Fragments":["of"]},{"Key":"next version.","Fragments":["I'm"]},{"Key":"version. I'm","Fragments":["just"]},{"Key":"elixir, didn't","Fragments":["know"]},{"Key":"know it","Fragments":["had","I"]},{"Key":"it had","Fragments":["privates,"]},{"Key":"had privates,","Fragments":["so"]},{"Key":"privates, so","Fragments":["thanks"]},{"Key":"thanks again","Fragments":[":)","for"]},{"Key":"Regarding strings","Fragments":["that"]},{"Key":"strings that","Fragments":["only","contain","are"]},{"Key":"only contain","Fragments":["unicode"]},{"Key":"contain unicode","Fragments":["currency"]},{"Key":"unicode currency","Fragments":["symbols"]},{"Key":"currency symbols","Fragments":["and"]},{"Key":"symbols and","Fragments":["whitespace","numbers."]},{"Key":"and whitespace","Fragments":["--"]},{"Key":"whitespace --","Fragments":["i"]},{"Key":"i can","Fragments":["catch","figure","not","point"]},{"Key":"can catch","Fragments":["it"]},{"Key":"catch it","Fragments":["with"]},{"Key":"like `Regex.match?(%r/^[\\p{Sc}\\p{S}]+$/,","Fragments":["input)`,"]},{"Key":"`Regex.match?(%r/^[\\p{Sc}\\p{S}]+$/, input)`,","Fragments":["but"]},{"Key":"input)`, but","Fragments":["you're"]},{"Key":"right, it","Fragments":["sounds","is"]},{"Key":"it sounds","Fragments":["like","more"]},{"Key":"like shouting,","Fragments":["so"]},{"Key":"so i'll","Fragments":["leave"]},{"Key":"i'll leave","Fragments":["it"]},{"Key":"as is","Fragments":[":)"]},{"Key":"was composing","Fragments":["my"]},{"Key":"composing my","Fragments":["message"]},{"Key":"my message","Fragments":["when"]},{"Key":"message when","Fragments":["you","the"]},{"Key":"Btw, with","Fragments":["the"]},{"Key":"very latest","Fragments":["Elixir"]},{"Key":"Elixir development","Fragments":["version"]},{"Key":"version the","Fragments":["/u"]},{"Key":"the /u","Fragments":["is"]},{"Key":"/u is","Fragments":["no"]},{"Key":"needed (it's","Fragments":["the"]},{"Key":"(it's the","Fragments":["default"]},{"Key":"the insights","Fragments":[":)"]},{"Key":"I'd break","Fragments":["this"]},{"Key":"break this","Fragments":["down"]},{"Key":"this down","Fragments":["into"]},{"Key":"more functions,","Fragments":["to"]},{"Key":"make count","Fragments":["itself"]},{"Key":"count itself","Fragments":["much"]},{"Key":"itself much","Fragments":["smaller."]},{"Key":"much smaller.","Fragments":["Bonus"]},{"Key":"smaller. Bonus","Fragments":["points"]},{"Key":"Bonus points","Fragments":["if"]},{"Key":"points if","Fragments":["you"]},{"Key":"pipelines to","Fragments":["compose"]},{"Key":"compose said","Fragments":["functions."]},{"Key":"looked for","Fragments":["means"]},{"Key":"for means","Fragments":["to"]},{"Key":"means to","Fragments":["express"]},{"Key":"the `predicate_and?`","Fragments":["with"]},{"Key":"`predicate_and?` with","Fragments":["anything"]},{"Key":"anything provided","Fragments":["by"]},{"Key":"provided by","Fragments":["the","your","exercism."]},{"Key":"standard modules...it","Fragments":["feels"]},{"Key":"modules...it feels","Fragments":["like"]},{"Key":"that `anagram_of?`","Fragments":["and","function."]},{"Key":"`anagram_of?` and","Fragments":["`unequal_caseless?`"]},{"Key":"and `unequal_caseless?`","Fragments":["give"]},{"Key":"`unequal_caseless?` give","Fragments":["you"]},{"Key":"predicates depending","Fragments":["on"]},{"Key":"actual `word`","Fragments":["and"]},{"Key":"`word` and","Fragments":["`predicate_and?`"]},{"Key":"and `predicate_and?`","Fragments":["lets"]},{"Key":"`predicate_and?` lets","Fragments":["you"]},{"Key":"you filter","Fragments":["the","out","out"]},{"Key":"filter the","Fragments":["input"]},{"Key":"input list","Fragments":["by","is","(i.e."]},{"Key":"their conjunction.","Fragments":["(Overgeneralised"]},{"Key":"conjunction. (Overgeneralised","Fragments":["maybe?)"]},{"Key":"The linebreak","Fragments":["on"]},{"Key":"linebreak on","Fragments":["line"]},{"Key":"line #20","Fragments":["is"]},{"Key":"#20 is","Fragments":["to"]},{"Key":"stay below","Fragments":["80"]},{"Key":"below 80","Fragments":["chars"]},{"Key":"80 chars","Fragments":["line"]},{"Key":"chars line","Fragments":["width,"]},{"Key":"line width,","Fragments":["but"]},{"Key":"width, but","Fragments":["I'm"]},{"Key":"that's better","Fragments":["than"]},{"Key":"than violating","Fragments":["that."]},{"Key":"By all","Fragments":["appearances,"]},{"Key":"all appearances,","Fragments":["you"]},{"Key":"appearances, you","Fragments":["cannot"]},{"Key":"you cannot","Fragments":["use"]},{"Key":"cannot use","Fragments":["any"]},{"Key":"any Regex","Fragments":["comparisons"]},{"Key":"Regex comparisons","Fragments":["in"]},{"Key":"comparisons in","Fragments":["pattern"]},{"Key":"writing different","Fragments":["function"]},{"Key":"function clauses,","Fragments":["so","but"]},{"Key":"clauses, so","Fragments":["I"]},{"Key":"The `not_letters_or_yelling`","Fragments":["regex"]},{"Key":"`not_letters_or_yelling` regex","Fragments":["on"]},{"Key":"on _L11_","Fragments":["seemed"]},{"Key":"_L11_ seemed","Fragments":["to"]},{"Key":"be necessary","Fragments":["specifically"]},{"Key":"necessary specifically","Fragments":["for"]},{"Key":"for `test_only_numbers`","Fragments":["as"]},{"Key":"`test_only_numbers` as","Fragments":["otherwise"]},{"Key":"as otherwise","Fragments":["it"]},{"Key":"the `yelling`","Fragments":["regex"]},{"Key":"`yelling` regex","Fragments":["I've"]},{"Key":"regex I've","Fragments":["crafted"]},{"Key":"I've crafted","Fragments":["instead."]},{"Key":"crafted instead.","Fragments":["I"]},{"Key":"instead. I","Fragments":["couldn't","stayed"]},{"Key":"couldn't think","Fragments":["of","of","of"]},{"Key":"keep `yelling`","Fragments":["as"]},{"Key":"`yelling` as","Fragments":["general"]},{"Key":"as general","Fragments":["as"]},{"Key":"general as","Fragments":["possible"]},{"Key":"possible for","Fragments":["the","exercises","multiple"]},{"Key":"of content","Fragments":["it's"]},{"Key":"content it's","Fragments":["meant"]},{"Key":"it's meant","Fragments":["to"]},{"Key":"to match,","Fragments":["but","not","but","you","you"]},{"Key":"match, but","Fragments":["still","also"]},{"Key":"still exclude","Fragments":["phrases"]},{"Key":"exclude phrases","Fragments":["that"]},{"Key":"phrases that","Fragments":["only"]},{"Key":"only contained","Fragments":["numbers"]},{"Key":"contained numbers","Fragments":["and"]},{"Key":"and non-exclamation","Fragments":["punctuation,"]},{"Key":"non-exclamation punctuation,","Fragments":["yet"]},{"Key":"punctuation, yet","Fragments":["not"]},{"Key":"yet not","Fragments":["grow"]},{"Key":"not grow","Fragments":["unnecessarily"]},{"Key":"grow unnecessarily","Fragments":["complex"]},{"Key":"unnecessarily complex","Fragments":["and"]},{"Key":"complex and","Fragments":["thus"]},{"Key":"thus hard","Fragments":["to"]},{"Key":"to comprehend","Fragments":["easily.","when"]},{"Key":"comprehend easily.","Fragments":["This"]},{"Key":"easily. This","Fragments":["is"]},{"Key":"is most","Fragments":["likely"]},{"Key":"most likely","Fragments":["a"]},{"Key":"a failure","Fragments":["of"]},{"Key":"failure of","Fragments":["imagination"]},{"Key":"of imagination","Fragments":["on"]},{"Key":"imagination on","Fragments":["my"]},{"Key":"my part,","Fragments":["and/or"]},{"Key":"part, and/or","Fragments":["a"]},{"Key":"and/or a","Fragments":["weak"]},{"Key":"a weak","Fragments":["grasp","spot"]},{"Key":"weak grasp","Fragments":["of"]},{"Key":"grasp of","Fragments":["regex"]},{"Key":"of regex","Fragments":["syntax."]},{"Key":"is _entirely_","Fragments":["possible"]},{"Key":"_entirely_ possible","Fragments":["that"]},{"Key":"possible that","Fragments":["this"]},{"Key":"more convoluted","Fragments":["than"]},{"Key":"convoluted than","Fragments":["it"]},{"Key":"the javascript","Fragments":["and"]},{"Key":"javascript and","Fragments":["ruby"]},{"Key":"and ruby","Fragments":["versions"]},{"Key":"ruby versions","Fragments":["that"]},{"Key":"I wrote.","Fragments":["I"]},{"Key":"wrote. I","Fragments":["took"]},{"Key":"Regex module","Fragments":["(apparently)."]},{"Key":"module (apparently).","Fragments":["I"]},{"Key":"(apparently). I","Fragments":["also"]},{"Key":"also didn't","Fragments":["want"]},{"Key":"didn't want","Fragments":["to","to","to"]},{"Key":"to taint","Fragments":["my"]},{"Key":"taint my","Fragments":["solution"]},{"Key":"solution by","Fragments":["looking","chus1818"]},{"Key":"example first.","Fragments":["I'll"]},{"Key":"first. I'll","Fragments":["do"]},{"Key":"that now,","Fragments":["and"]},{"Key":"now, and","Fragments":["also"]},{"Key":"also would","Fragments":["_love_"]},{"Key":"would _love_","Fragments":["feedback."]},{"Key":"the example,","Fragments":["and"]},{"Key":"example, and","Fragments":["it's"]},{"Key":"it's also","Fragments":["fairly","more","`if","checking"]},{"Key":"also fairly","Fragments":["arduous."]},{"Key":"Thanks, @edd!","Fragments":["I"]},{"Key":"@edd! I","Fragments":["didn't"]},{"Key":"about hd","Fragments":[":)"]},{"Key":"much regular","Fragments":["expressions?"]},{"Key":"regular expressions?","Fragments":["Most"]},{"Key":"expressions? Most","Fragments":["of"]},{"Key":"a whirl,","Fragments":["thanks"]},{"Key":"whirl, thanks","Fragments":[":)"]},{"Key":"looks overgeneralized","Fragments":["to"]},{"Key":"overgeneralized to","Fragments":["me."]},{"Key":"me. Functions","Fragments":["returning"]},{"Key":"Functions returning","Fragments":["functions"]},{"Key":"returning functions","Fragments":["are"]},{"Key":"in Haskell","Fragments":["but","and","much"]},{"Key":"Haskell but","Fragments":["less"]},{"Key":"less so","Fragments":["in"]},{"Key":"Elixir (we","Fragments":["don't"]},{"Key":"(we don't","Fragments":["have"]},{"Key":"have niceties","Fragments":["like"]},{"Key":"niceties like","Fragments":["the"]},{"Key":"the `.`","Fragments":["operator)."]},{"Key":"{ a,","Fragments":["b"]},{"Key":"a, b","Fragments":["}"]},{"Key":"b }","Fragments":["-\u003e"]},{"Key":"} -\u003e","Fragments":["a"]},{"Key":"a +","Fragments":["b"]},{"Key":" a","Fragments":["-\u003e"]},{"Key":"a -\u003e","Fragments":["a","is_superlist(t,"]},{"Key":"Some constructive","Fragments":["criticism"]},{"Key":"constructive criticism","Fragments":["with"]},{"Key":"criticism with","Fragments":["regards"]},{"Key":"with regards","Fragments":["to","to"]},{"Key":"to providing","Fragments":["constructive"]},{"Key":"providing constructive","Fragments":["criticism."]},{"Key":"constructive criticism.","Fragments":[":)"]},{"Key":"\"Why do","Fragments":["you"]},{"Key":"do X?\"","Fragments":["can"]},{"Key":"X?\" can","Fragments":["be"]},{"Key":"be interpreted","Fragments":["as"]},{"Key":"interpreted as","Fragments":["accusatory","`f(a)"]},{"Key":"as accusatory","Fragments":["and"]},{"Key":"accusatory and","Fragments":["put"]},{"Key":"put people","Fragments":["on","on"]},{"Key":"people on","Fragments":["the","the"]},{"Key":"something liiiiike","Fragments":["-"]},{"Key":"liiiiike -","Fragments":["\"Do"]},{"Key":"- \"Do","Fragments":["you"]},{"Key":"\"Do you","Fragments":["think"]},{"Key":"it's possible","Fragments":["to","to","to","to","you","to","to"]},{"Key":"a lesser","Fragments":["number"]},{"Key":"lesser number","Fragments":["of"]},{"Key":"of regexes?","Fragments":["I"]},{"Key":"regexes? I","Fragments":["think"]},{"Key":"module might","Fragments":["be"]},{"Key":"Be the","Fragments":["solicitor"]},{"Key":"the solicitor","Fragments":["of"]},{"Key":"solicitor of","Fragments":["conversation,"]},{"Key":"of conversation,","Fragments":["build"]},{"Key":"conversation, build","Fragments":["people"]},{"Key":"build people","Fragments":["up,"]},{"Key":"people up,","Fragments":["try"]},{"Key":"up, try","Fragments":["not"]},{"Key":"the defensive","Fragments":[":)"]},{"Key":"p.s. but","Fragments":["seriously"]},{"Key":"but seriously","Fragments":["wtf"]},{"Key":"seriously wtf","Fragments":["with"]},{"Key":"wtf with","Fragments":["the"]},{"Key":"the regexes,","Fragments":["shane"]},{"Key":" p.p.s.","Fragments":["Code"]},{"Key":"p.p.s. Code","Fragments":["looks"]},{"Key":"Code looks","Fragments":["effective"]},{"Key":"looks effective","Fragments":["enough"]},{"Key":"effective enough","Fragments":["to"]},{"Key":" Analyzing","Fragments":["the"]},{"Key":"Analyzing the","Fragments":["contents"]},{"Key":"string for","Fragments":["certain","anything","each"]},{"Key":"for certain","Fragments":["characters"]},{"Key":"certain characters","Fragments":["or"]},{"Key":"characters or","Fragments":["sequences","some"]},{"Key":"or sequences","Fragments":["seems"]},{"Key":"sequences seems","Fragments":["like"]},{"Key":"a natural","Fragments":["fit"]},{"Key":"natural fit","Fragments":["to"]},{"Key":"fit to","Fragments":["me,"]},{"Key":"At a","Fragments":["glance,","glance"]},{"Key":"a glance,","Fragments":["I"]},{"Key":"glance, I","Fragments":["could"]},{"Key":"could replace","Fragments":["L9's","L10's","the","them"]},{"Key":"replace L9's","Fragments":["`Regex.match?`"]},{"Key":"L9's `Regex.match?`","Fragments":["with:"]},{"Key":" `String.last(string)","Fragments":["=="]},{"Key":"`String.last(string) ==","Fragments":["\"?\"`"]},{"Key":"replace L10's","Fragments":["`Regex.match?`"]},{"Key":"L10's `Regex.match?`","Fragments":["with:"]},{"Key":" `String.strip(string)","Fragments":["=="]},{"Key":"`String.strip(string) ==","Fragments":["\"\"`"]},{"Key":"probably replace","Fragments":["L12's"]},{"Key":"replace L12's","Fragments":["`Regex.match?`"]},{"Key":"L12's `Regex.match?`","Fragments":["with:"]},{"Key":" `String.upcase(string)","Fragments":["=="]},{"Key":"`String.upcase(string) ==","Fragments":["string`"]},{"Key":"The L12","Fragments":["change"]},{"Key":"L12 change","Fragments":["is"]},{"Key":"find to","Fragments":["be"]},{"Key":"be considerably","Fragments":["more"]},{"Key":"considerably more","Fragments":["readable","concise"]},{"Key":"regex equivalent,","Fragments":["but"]},{"Key":"equivalent, but","Fragments":["I"]},{"Key":"more open","Fragments":["to"]},{"Key":"to unintentional/unexpected","Fragments":["results."]},{"Key":"unintentional/unexpected results.","Fragments":["The"]},{"Key":"results. The","Fragments":["regex"]},{"Key":"regex I","Fragments":["used"]},{"Key":"used is","Fragments":["fairly"]},{"Key":"is fairly","Fragments":["ugly,","efficient","digestible"]},{"Key":"fairly ugly,","Fragments":["though."]},{"Key":"value on","Fragments":["`sing/2`"]},{"Key":"on `sing/2`","Fragments":["so"]},{"Key":"`sing/2` so","Fragments":["you"]},{"Key":"explicitly define","Fragments":["`sing/1`."]},{"Key":"One nit","Fragments":["about"]},{"Key":"your regex:","Fragments":["what"]},{"Key":"regex: what","Fragments":["happens"]},{"Key":"a non-English","Fragments":["word"]},{"Key":"non-English word","Fragments":["like"]},{"Key":" Sloppy,","Fragments":["forgot"]},{"Key":"Sloppy, forgot","Fragments":["to"]},{"Key":"the commented-out","Fragments":["lines"]},{"Key":"commented-out lines","Fragments":["before"]},{"Key":"lines before","Fragments":["submission.","and"]},{"Key":"before submission.","Fragments":["See"]},{"Key":"submission. See","Fragments":["[revision"]},{"Key":"See [revision","Fragments":["3](http://exercism.io/submissions/ee287179f64bf9f36e52b5fc)."]},{"Key":"the sing/2","Fragments":["function,","function."]},{"Key":"sing/2 function,","Fragments":["at"]},{"Key":"function, at","Fragments":["first"]},{"Key":"list comprehension,","Fragments":["but"]},{"Key":"comprehension, but","Fragments":["then"]},{"Key":"discovered that","Fragments":["in","if"]},{"Key":"elixir they","Fragments":["are,"]},{"Key":"they are,","Fragments":["frankly,"]},{"Key":"are, frankly,","Fragments":["odd."]},{"Key":"frankly, odd.","Fragments":["Then,"]},{"Key":"odd. Then,","Fragments":["happily"]},{"Key":"Then, happily","Fragments":["I"]},{"Key":"happily I","Fragments":["found"]},{"Key":"the Enum.map_join","Fragments":["function"]},{"Key":"Enum.map_join function","Fragments":["that"]},{"Key":"does even","Fragments":["more"]},{"Key":"comprehension so","Fragments":["I"]},{"Key":"The awkward","Fragments":["part"]},{"Key":"awkward part","Fragments":["of"]},{"Key":"the trailing","Fragments":["\"\\n\"","`and`"]},{"Key":"trailing \"\\n\"","Fragments":["in","seems"]},{"Key":"\"\\n\" in","Fragments":["the"]},{"Key":"sing/2 function.","Fragments":["The"]},{"Key":"function. The","Fragments":["only"]},{"Key":"found to","Fragments":["avoid","not"]},{"Key":"avoid it","Fragments":["is","and"]},{"Key":"to verse/1","Fragments":["in"]},{"Key":"verse/1 in","Fragments":["a"]},{"Key":"string like","Fragments":["so:","that."]},{"Key":" Enum.map_join","Fragments":["("]},{"Key":" beer_counts(first,","Fragments":["last),"]},{"Key":"beer_counts(first, last),","Fragments":["\"\\n\","]},{"Key":"last), \"\\n\",","Fragments":["fn(count)"]},{"Key":"\"\\n\", fn(count)","Fragments":["-\u003e"]},{"Key":"fn(count) -\u003e","Fragments":["\"#{verse(count)}\\n\""]},{"Key":"-\u003e \"#{verse(count)}\\n\"","Fragments":["end"]},{"Key":"lot longer","Fragments":["and"]},{"Key":"longer and","Fragments":["more"]},{"Key":"more unwieldy","Fragments":["and"]},{"Key":"unwieldy and","Fragments":["I"]},{"Key":"I lose","Fragments":["the","precision"]},{"Key":"lose the","Fragments":["\u00261","communication"]},{"Key":"Finally, for","Fragments":["the"]},{"Key":"the verse/1","Fragments":["function,"]},{"Key":"verse/1 function,","Fragments":["I"]},{"Key":"I considered","Fragments":["how"]},{"Key":"considered how","Fragments":["I"]},{"Key":"might avoid","Fragments":["repeating"]},{"Key":"the bulk","Fragments":["of"]},{"Key":"bulk of","Fragments":["the"]},{"Key":"the song","Fragments":["text","to","are","as"]},{"Key":"song text","Fragments":["3"]},{"Key":"text 3","Fragments":["times,"]},{"Key":"3 times,","Fragments":["but"]},{"Key":"times, but","Fragments":["I"]},{"Key":"no good","Fragments":["way"]},{"Key":"sacrificing readability","Fragments":["/","too"]},{"Key":"readability /","Fragments":["clarity."]},{"Key":"/ clarity.","Fragments":["Plus"]},{"Key":"clarity. Plus","Fragments":["I"]},{"Key":"song to","Fragments":["change"]},{"Key":"change in","Fragments":["the","3","the","the","signature"]},{"Key":"future so","Fragments":["I"]},{"Key":"I'm taking","Fragments":["a"]},{"Key":"great risk","Fragments":["that"]},{"Key":"risk that","Fragments":["the"]},{"Key":"3 places","Fragments":["in"]},{"Key":"use less","Fragments":["long"]},{"Key":"less long","Fragments":["variable"]},{"Key":"long variable","Fragments":["names."]},{"Key":"variable names.","Fragments":["\"unformatted_phone_number\"","Might"]},{"Key":"names. \"unformatted_phone_number\"","Fragments":["is"]},{"Key":"\"unformatted_phone_number\" is","Fragments":["descriptive"]},{"Key":"is descriptive","Fragments":["but"]},{"Key":"descriptive but","Fragments":["it"]},{"Key":"makes lines","Fragments":["harder"]},{"Key":"lines harder","Fragments":["which"]},{"Key":"harder which","Fragments":["especially"]},{"Key":"which especially","Fragments":["with"]},{"Key":"the limited","Fragments":["view"]},{"Key":"limited view","Fragments":["window"]},{"Key":"view window","Fragments":["of"]},{"Key":"window of","Fragments":["exercism"]},{"Key":"of exercism","Fragments":["means","has","Elixir","isn't"]},{"Key":"exercism means","Fragments":["it's"]},{"Key":"it's harder","Fragments":["to"]},{"Key":"to glance","Fragments":["over."]},{"Key":"the complicated","Fragments":["regular"]},{"Key":"complicated regular","Fragments":["expression"]},{"Key":"expression with","Fragments":["Elixir","assignments"]},{"Key":"Elixir code?","Fragments":["There"]},{"Key":"code? There","Fragments":["is"]},{"Key":"an idiomatic","Fragments":["solution","way"]},{"Key":"idiomatic solution","Fragments":["available."]},{"Key":"when text","Fragments":["is"]},{"Key":"text is","Fragments":["entered"]},{"Key":"is entered","Fragments":["that"]},{"Key":"entered that","Fragments":["contains"]},{"Key":"that contains","Fragments":["for"]},{"Key":"contains for","Fragments":["example"]},{"Key":"a \"*\"","Fragments":["(it"]},{"Key":"\"*\" (it","Fragments":["might"]},{"Key":"(it might","Fragments":["be"]},{"Key":"a math","Fragments":["text)?"]},{"Key":"Is \"something_with_underscores\"","Fragments":["a"]},{"Key":"\"something_with_underscores\" a","Fragments":["valid"]},{"Key":"a valid","Fragments":["English","choice","point.","iolist,","type"]},{"Key":"valid English","Fragments":["word?"]},{"Key":"me. Your","Fragments":["decisions"]},{"Key":"Your decisions","Fragments":["are"]},{"Key":"decisions are","Fragments":["very"]},{"Key":"The trailing","Fragments":["\"\\n\""]},{"Key":"\"\\n\" seems","Fragments":["to"]},{"Key":"that can't","Fragments":["be"]},{"Key":"be avoided.","Fragments":["I"]},{"Key":"avoided. I","Fragments":["used"]},{"Key":"too when","Fragments":["I"]},{"Key":"point! I'll","Fragments":["have"]},{"Key":" Tip:","Fragments":["\\p","Erlang"]},{"Key":"Tip: \\p","Fragments":["construct"]},{"Key":"\\p construct","Fragments":["in"]},{"Key":"construct in","Fragments":["a"]},{"Key":"a regex.","Fragments":["Note"]},{"Key":"regex. Note","Fragments":["that"]},{"Key":"a the","Fragments":["Unicode","time,"]},{"Key":"the Unicode","Fragments":["option","upcase"]},{"Key":"Unicode option","Fragments":["(/u)"]},{"Key":"option (/u)","Fragments":["for"]},{"Key":"(/u) for","Fragments":["that"]},{"Key":"use imports","Fragments":["here"]},{"Key":"imports here","Fragments":["instead"]},{"Key":"of `Enum.map`?","Fragments":["Just"]},{"Key":"`Enum.map`? Just","Fragments":["curious."]},{"Key":"of `def`s","Fragments":["that"]},{"Key":"`def`s that","Fragments":["have"]},{"Key":"have arguments","Fragments":["(i.e."]},{"Key":"arguments (i.e.","Fragments":["`def"]},{"Key":"(i.e. `def","Fragments":["transform(extract)"]},{"Key":"`def transform(extract)","Fragments":["do`"]},{"Key":"transform(extract) do`","Fragments":["instead"]},{"Key":"of `def","Fragments":["transform"]},{"Key":"`def transform","Fragments":["extract"]},{"Key":"transform extract","Fragments":["do`)."]},{"Key":"much getting","Fragments":["to"]},{"Key":"getting to","Fragments":["know","the"]},{"Key":"know elixir,","Fragments":["so"]},{"Key":"yet have","Fragments":["a"]},{"Key":"good feel","Fragments":["for"]},{"Key":"feel for","Fragments":["what","conventions."]},{"Key":"is \"readable\"","Fragments":["elixir"]},{"Key":"\"readable\" elixir","Fragments":["code."]},{"Key":"elixir code.","Fragments":["I"]},{"Key":"myself wondering","Fragments":["if"]},{"Key":"it's wise","Fragments":["to"]},{"Key":"wise to","Fragments":["use"]},{"Key":"pipe forward","Fragments":["operator","operator"]},{"Key":"forward operator","Fragments":["(","("]},{"Key":"( |\u003e","Fragments":[")",")."]},{"Key":"|\u003e )","Fragments":["when"]},{"Key":"the right-hand","Fragments":["function"]},{"Key":"right-hand function","Fragments":["call"]},{"Key":"call takes","Fragments":["more"]},{"Key":"takes more","Fragments":["than"]},{"Key":"one argument.","Fragments":["(see"]},{"Key":"argument. (see","Fragments":["lines"]},{"Key":"(see lines","Fragments":["5"]},{"Key":"lines 5","Fragments":["and"]},{"Key":"and 15)","Fragments":["I"]},{"Key":"15) I","Fragments":["also"]},{"Key":"also wonder","Fragments":["when"]},{"Key":"wonder when","Fragments":["it's"]},{"Key":"it's appropriate","Fragments":["to","or"]},{"Key":"appropriate to","Fragments":["use","me."]},{"Key":"line version","Fragments":["of"]},{"Key":"of def/defp.","Fragments":["I"]},{"Key":"def/defp. I","Fragments":["feel"]},{"Key":"like lines","Fragments":["11"]},{"Key":"lines 11","Fragments":["and"]},{"Key":"11 and","Fragments":["13","then"]},{"Key":"and 13","Fragments":["are"]},{"Key":"13 are","Fragments":["probably"]},{"Key":"are probably","Fragments":["good"]},{"Key":"probably good","Fragments":["uses,"]},{"Key":"good uses,","Fragments":["but"]},{"Key":"maybe 8","Fragments":["and"]},{"Key":"and 10","Fragments":["aren't."]},{"Key":" @enos","Fragments":["I"]},{"Key":"@enos I","Fragments":["looked"]},{"Key":"do pattern","Fragments":["matching","matching"]},{"Key":"for `shout?`","Fragments":["because"]},{"Key":"`shout?` because","Fragments":["there"]},{"Key":"no way","Fragments":["to","around","I","to","to"]},{"Key":"up all","Fragments":["the","of"]},{"Key":"the upper-case","Fragments":["unicode"]},{"Key":"upper-case unicode","Fragments":["characters"]},{"Key":"unicode characters","Fragments":["in","(ü","and","(like"]},{"Key":"Elixir. The","Fragments":["unicode","normal","common"]},{"Key":"The unicode","Fragments":["database"]},{"Key":"unicode database","Fragments":["is","that"]},{"Key":"database is","Fragments":["compiled"]},{"Key":"is compiled","Fragments":["into"]},{"Key":"compiled into","Fragments":["pattern"]},{"Key":"into pattern","Fragments":["matches","matching"]},{"Key":"for `String.upcase/1`","Fragments":["and"]},{"Key":"`String.upcase/1` and","Fragments":["`String.downcase/1`","`String.downcase/1`"]},{"Key":"and `String.downcase/1`","Fragments":["(https://github.com/elixir-lang/elixir/blob/master/lib/elixir/priv/unicode.ex),","instead,"]},{"Key":"`String.downcase/1` (https://github.com/elixir-lang/elixir/blob/master/lib/elixir/priv/unicode.ex),","Fragments":["among"]},{"Key":"(https://github.com/elixir-lang/elixir/blob/master/lib/elixir/priv/unicode.ex), among","Fragments":["other"]},{"Key":"among other","Fragments":["methods"]},{"Key":"methods by","Fragments":["pattern"]},{"Key":"by pattern","Fragments":["matching","matching."]},{"Key":"the lowercase","Fragments":["codepoint"]},{"Key":"lowercase codepoint","Fragments":["to"]},{"Key":"codepoint to","Fragments":["its"]},{"Key":"its uppercase","Fragments":["equivalent"]},{"Key":"uppercase equivalent","Fragments":["and"]},{"Key":"equivalent and","Fragments":["vice-versa."]},{"Key":"and vice-versa.","Fragments":["It"]},{"Key":"vice-versa. It","Fragments":["would"]},{"Key":"on just","Fragments":["ASCII,","`bit`"]},{"Key":"just ASCII,","Fragments":["but"]},{"Key":"ASCII, but","Fragments":["that's"]},{"Key":"that's rather","Fragments":["limiting"]},{"Key":"rather limiting","Fragments":["and"]},{"Key":"limiting and","Fragments":["English-centric."]},{"Key":"and English-centric.","Fragments":["Additionally,"]},{"Key":"English-centric. Additionally,","Fragments":["with"]},{"Key":"Additionally, with","Fragments":["`String.Unicode`"]},{"Key":"with `String.Unicode`","Fragments":["being"]},{"Key":"`String.Unicode` being","Fragments":["in"]},{"Key":"a `priv`","Fragments":["directory,"]},{"Key":"`priv` directory,","Fragments":["so"]},{"Key":"directory, so","Fragments":["I"]},{"Key":"assume that","Fragments":["means","only"]},{"Key":"that means","Fragments":["`String.Unicode`","they","a"]},{"Key":"means `String.Unicode`","Fragments":["is"]},{"Key":"`String.Unicode` is","Fragments":["part"]},{"Key":"implementation and","Fragments":["I"]},{"Key":"should go","Fragments":["and","do","away"]},{"Key":"to access","Fragments":["it"]},{"Key":"access it","Fragments":["directly"]},{"Key":"Re: imports","Fragments":["-"]},{"Key":"imports -","Fragments":["just"]},{"Key":"- just","Fragments":["because"]},{"Key":"having module","Fragments":["names"]},{"Key":"names cluttering","Fragments":["up"]},{"Key":"cluttering up","Fragments":["the"]},{"Key":"code itself,","Fragments":["unless"]},{"Key":"itself, unless","Fragments":["they're"]},{"Key":"unless they're","Fragments":["explicitly","really"]},{"Key":"they're explicitly","Fragments":["needed"]},{"Key":"explicitly needed","Fragments":["(as"]},{"Key":"needed (as","Fragments":["in"]},{"Key":"(as in","Fragments":["the"]},{"Key":"Re: paretheses","Fragments":["-"]},{"Key":"paretheses -","Fragments":["I"]},{"Key":"this may","Fragments":["be"]},{"Key":"because I've","Fragments":["been"]},{"Key":"Haskell exercises","Fragments":["that"]},{"Key":"exercises that","Fragments":["I've","you"]},{"Key":"just gotten","Fragments":["used"]},{"Key":"gotten used","Fragments":["to"]},{"Key":"arguments. I","Fragments":["dunno"]},{"Key":"I dunno","Fragments":["though."]},{"Key":"bit squished","Fragments":["together"]},{"Key":"squished together","Fragments":["with"]},{"Key":"together with","Fragments":["parentheses"]},{"Key":"function arguments,","Fragments":["but","i.e."]},{"Key":"That's how","Fragments":["Elixir","we"]},{"Key":"how Elixir","Fragments":["code","does","does","can"]},{"Key":"code usually","Fragments":["looks.","comes"]},{"Key":"know `if`","Fragments":["can"]},{"Key":"`if` can","Fragments":["be"]},{"Key":"used like","Fragments":["this"]},{"Key":"this too?","Fragments":["`if"]},{"Key":"too? `if","Fragments":["n"]},{"Key":"`if n","Fragments":["==","=="]},{"Key":"n ==","Fragments":["m,","m"]},{"Key":"== m,","Fragments":["do:"]},{"Key":"m, do:","Fragments":["acc,"]},{"Key":"do: acc,","Fragments":["else:"]},{"Key":"acc, else:","Fragments":["acc"]},{"Key":"else: acc","Fragments":["+"]},{"Key":"acc +","Fragments":["1`","1","elem(table,","1)","1","1)","1)","1)","1)","1)","1)"]},{"Key":"It's valid","Fragments":["Elixir"]},{"Key":"valid Elixir","Fragments":["without"]},{"Key":"the parens,","Fragments":["so"]},{"Key":"parens, so","Fragments":["it"]},{"Key":"it must","Fragments":["be"]},{"Key":"be intended","Fragments":["as"]},{"Key":"valid choice","Fragments":["to"]},{"Key":"choice to","Fragments":["leave","uniq","uniq"]},{"Key":"leave them","Fragments":["out.","off"]},{"Key":"them out.","Fragments":["Plus"]},{"Key":"out. Plus","Fragments":["I'm"]},{"Key":"Plus I'm","Fragments":["not"]},{"Key":"how much","Fragments":["weight","fun","you'll"]},{"Key":"much weight","Fragments":["words"]},{"Key":"weight words","Fragments":["like"]},{"Key":"like \"usually\"","Fragments":["carry"]},{"Key":"\"usually\" carry","Fragments":["with"]},{"Key":"carry with","Fragments":["a"]},{"Key":"isn't even","Fragments":["at"]},{"Key":"even at","Fragments":["1.0"]},{"Key":"at 1.0","Fragments":["yet"]},{"Key":"1.0 yet","Fragments":[":-)"]},{"Key":"The parenless","Fragments":["stuff"]},{"Key":"parenless stuff","Fragments":["is"]},{"Key":"mostly used","Fragments":["for","for"]},{"Key":"for macro's.","Fragments":["For"]},{"Key":"macro's. For","Fragments":["example"]},{"Key":"use parens","Fragments":["with","on"]},{"Key":"parens with","Fragments":["`defmodule`"]},{"Key":"with `defmodule`","Fragments":["code"]},{"Key":"`defmodule` code","Fragments":["would"]},{"Key":"look really","Fragments":["ugly."]},{"Key":"really ugly.","Fragments":["Why"]},{"Key":"ugly. Why","Fragments":["parens"]},{"Key":"Why parens","Fragments":["may"]},{"Key":"parens may","Fragments":["be"]},{"Key":"be omitted","Fragments":["in"]},{"Key":"the declaration","Fragments":["I"]},{"Key":"declaration I","Fragments":["don't"]},{"Key":"any call","Fragments":["in"]},{"Key":"main elixir","Fragments":["repo"]},{"Key":"elixir repo","Fragments":["(which","on"]},{"Key":"repo (which","Fragments":["is"]},{"Key":"the biggest","Fragments":["Elixir","drawback"]},{"Key":"biggest Elixir","Fragments":["codebase"]},{"Key":"Elixir codebase","Fragments":["around"]},{"Key":"codebase around","Fragments":["at"]},{"Key":"around at","Fragments":["the"]},{"Key":"the moment)","Fragments":["that"]},{"Key":"moment) that","Fragments":["uses"]},{"Key":"a def","Fragments":["with"]},{"Key":"def with","Fragments":["arguments"]},{"Key":"with arguments","Fragments":["not"]},{"Key":"arguments not","Fragments":["surrounded"]},{"Key":"not surrounded","Fragments":["by"]},{"Key":"Your use","Fragments":["of","of"]},{"Key":"fine, in","Fragments":["fact"]},{"Key":"fact it's","Fragments":["often"]},{"Key":"it's often","Fragments":["most","quite","a"]},{"Key":"often most","Fragments":["useful"]},{"Key":"most useful","Fragments":["in","for","here"]},{"Key":"in such","Fragments":["cases","a"]},{"Key":"cases (for","Fragments":["example"]},{"Key":"example `some_call_that_returns_a_list()","Fragments":["|\u003e"]},{"Key":"`some_call_that_returns_a_list() |\u003e","Fragments":["Enum.map(fn"]},{"Key":"|\u003e Enum.map(fn","Fragments":["x"]},{"Key":"Enum.map(fn x","Fragments":["-\u003e"]},{"Key":"x -\u003e","Fragments":["...","x","x"]},{"Key":"personal rule","Fragments":["for"]},{"Key":"rule for","Fragments":["passing","that","tail"]},{"Key":"for passing","Fragments":["the"]},{"Key":"passing the","Fragments":["body","Russian","`+`","test","map"]},{"Key":"`defp` using","Fragments":["`do:`"]},{"Key":"using `do:`","Fragments":["is"]},{"Key":"`do:` is","Fragments":["that"]},{"Key":"the resulting","Fragments":["line"]},{"Key":"resulting line","Fragments":["doesn't"]},{"Key":"line doesn't","Fragments":["fit"]},{"Key":"in 80","Fragments":["characters"]},{"Key":"use `do","Fragments":["..."]},{"Key":"`do ...","Fragments":["end`."]},{"Key":"... end`.","Fragments":["Some"]},{"Key":"end`. Some","Fragments":["people"]},{"Key":"Some people","Fragments":["like","like","try"]},{"Key":"people like","Fragments":["to","it,","plain"]},{"Key":"to place","Fragments":["the","`|`"]},{"Key":"the `do:`","Fragments":["on"]},{"Key":"`do:` on","Fragments":["the"]},{"Key":"next line","Fragments":["and"]},{"Key":"line and","Fragments":["see","left"]},{"Key":"a too","Fragments":["long"]},{"Key":"long expression","Fragments":["as"]},{"Key":"expression as","Fragments":["a","a"]},{"Key":"they need","Fragments":["to"]},{"Key":"to refactor.","Fragments":["It's"]},{"Key":"refactor. It's","Fragments":["a"]},{"Key":"Line 10","Fragments":["contains"]},{"Key":"10 contains","Fragments":["a"]},{"Key":"contains a","Fragments":["problem","bit","formatting","literal"]},{"Key":"with newer","Fragments":["versions"]},{"Key":"Elixir: it's","Fragments":["no"]},{"Key":"it's no","Fragments":["longer","surprise","better"]},{"Key":"longer allowed","Fragments":["to"]},{"Key":"allowed to","Fragments":["write","be","be"]},{"Key":"write `{\u00261,","Fragments":["0}`"]},{"Key":"`{\u00261, 0}`","Fragments":["by"]},{"Key":"0}` by","Fragments":["itself."]},{"Key":"You must","Fragments":["use"]},{"Key":"must use","Fragments":["the"]},{"Key":"(`\u0026`) explicitly:","Fragments":["`\u0026{\u00261,"]},{"Key":"explicitly: `\u0026{\u00261,","Fragments":["0}`."]},{"Key":"private module","Fragments":["property","attributes","function.","function"]},{"Key":"module property","Fragments":["for","for"]},{"Key":"property for","Fragments":["some","readability."]},{"Key":"the constants.","Fragments":["For"]},{"Key":"constants. For","Fragments":["example:"]},{"Key":" `@fae","Fragments":["HashDict.new('ATCG',"]},{"Key":"`@fae HashDict.new('ATCG',","Fragments":["\u0026{\u00261,"]},{"Key":"HashDict.new('ATCG', \u0026{\u00261,","Fragments":["0})`"]},{"Key":"\u0026{\u00261, 0})`","Fragments":["(remember"]},{"Key":"0})` (remember","Fragments":["that"]},{"Key":"that `ATCG`","Fragments":["=="]},{"Key":"`ATCG` ==","Fragments":["`[?A,"]},{"Key":"== `[?A,","Fragments":["?T,","?T,"]},{"Key":"`[?A, ?T,","Fragments":["?C,","?C,"]},{"Key":"To get","Fragments":["the","the"]},{"Key":"value just","Fragments":["use"]},{"Key":" @crawford,","Fragments":["Thanks,"]},{"Key":"@crawford, Thanks,","Fragments":["once"]},{"Key":"Thanks, once","Fragments":["more,"]},{"Key":"once more,","Fragments":["for"]},{"Key":"more, for","Fragments":["the"]},{"Key":"took my","Fragments":["cue"]},{"Key":"my cue","Fragments":["for"]},{"Key":"cue for","Fragments":["the"]},{"Key":"the unit","Fragments":["test"]},{"Key":"unit test","Fragments":["and"]},{"Key":"test and","Fragments":["didn't","see"]},{"Key":"using single","Fragments":["quoted"]},{"Key":"single quoted","Fragments":["strings."]},{"Key":"had not","Fragments":["yet"]},{"Key":"yet come","Fragments":["across"]},{"Key":"come across","Fragments":["private","the","it"]},{"Key":"across private","Fragments":["modules"]},{"Key":"private modules","Fragments":["properties."]},{"Key":"modules properties.","Fragments":["I"]},{"Key":"properties. I","Fragments":["think"]},{"Key":"right that","Fragments":["I","`bitstring_to_list`"]},{"Key":"One question","Fragments":["though,"]},{"Key":"question though,","Fragments":["I'm"]},{"Key":"though, I'm","Fragments":["using"]},{"Key":"using version","Fragments":["0.10.2"]},{"Key":"version 0.10.2","Fragments":["of"]},{"Key":"0.10.2 of","Fragments":["elixir"]},{"Key":"elixir and","Fragments":["using","better"]},{"Key":"using {\u00261,","Fragments":["0}"]},{"Key":"{\u00261, 0}","Fragments":["worked"]},{"Key":"0} worked","Fragments":["just"]},{"Key":"worked just","Fragments":["fine."]},{"Key":"get any","Fragments":["errors"]},{"Key":"any errors","Fragments":["or"]},{"Key":"errors or","Fragments":["deprecation"]},{"Key":"or deprecation","Fragments":["warnings."]},{"Key":"deprecation warnings.","Fragments":["What"]},{"Key":"warnings. What","Fragments":["am"]},{"Key":"What am","Fragments":["I"]},{"Key":"ah, List.zip","Fragments":["looks"]},{"Key":"List.zip looks","Fragments":["better"]},{"Key":"looks better","Fragments":["for","to","without"]},{"Key":"the purpose,","Fragments":["thanks."]},{"Key":"I'm aware","Fragments":["of","of"]},{"Key":"shorter form","Fragments":["of"]},{"Key":"if (and","Fragments":["also"]},{"Key":"(and also","Fragments":["def,"]},{"Key":"also def,","Fragments":["etc)"]},{"Key":"def, etc)","Fragments":["but"]},{"Key":"etc) but","Fragments":["for"]},{"Key":"they look.","Fragments":["Though"]},{"Key":"look. Though","Fragments":["the"]},{"Key":"Though the","Fragments":["compactness","results"]},{"Key":"the compactness","Fragments":["is"]},{"Key":"compactness is","Fragments":["nice."]},{"Key":"It's deprecated","Fragments":["in"]},{"Key":"deprecated in","Fragments":["0.10.3."]},{"Key":" Parentheses","Fragments":["around","are"]},{"Key":"Parentheses around","Fragments":["`HashDict.new`"]},{"Key":"around `HashDict.new`","Fragments":["are","but"]},{"Key":"`HashDict.new` are","Fragments":["a"]},{"Key":"function parameters","Fragments":["(after"]},{"Key":"parameters (after","Fragments":["the"]},{"Key":"(after the","Fragments":["`def`)."]},{"Key":"understand it's","Fragments":["more","not"]},{"Key":"attributes at","Fragments":["the"]},{"Key":"top of","Fragments":["the","the","my","the","the","nitpicking","this"]},{"Key":"module, but","Fragments":["in","I'd","cannot"]},{"Key":"case, at","Fragments":["least,","least."]},{"Key":"them nearer","Fragments":["to"]},{"Key":"nearer to","Fragments":["the"]},{"Key":"the place","Fragments":["they're"]},{"Key":"place they're","Fragments":["used."]},{"Key":"the `u`","Fragments":["modifier","option"]},{"Key":"`u` modifier","Fragments":["do"]},{"Key":"modifier do","Fragments":["at"]},{"Key":"do at","Fragments":["the"]},{"Key":"expression `%r/p{L}/u`?","Fragments":["Having"]},{"Key":"`%r/p{L}/u`? Having","Fragments":["to"]},{"Key":"Having to","Fragments":["implement"]},{"Key":"implement `Teenger.empty?/1`","Fragments":["makes"]},{"Key":"`Teenger.empty?/1` makes","Fragments":["me"]},{"Key":"Elixir needs","Fragments":["to"]},{"Key":"to added","Fragments":["`String.blank?/1`"]},{"Key":"added `String.blank?/1`","Fragments":["or"]},{"Key":"`String.blank?/1` or","Fragments":["`Enum.blank?/1`"]},{"Key":"or `Enum.blank?/1`","Fragments":["similar"]},{"Key":"`Enum.blank?/1` similar","Fragments":["to"]},{"Key":"to Ruby's","Fragments":["ActiveSupport"]},{"Key":"Ruby's ActiveSupport","Fragments":["extension."]},{"Key":" `u`","Fragments":["is"]},{"Key":"`u` is","Fragments":["for"]},{"Key":"unicode support","Fragments":["(in","using"]},{"Key":"support (in","Fragments":["one"]},{"Key":"(in one","Fragments":["of"]},{"Key":"previous versions","Fragments":["i"]},{"Key":"versions i","Fragments":["was"]},{"Key":"that `shouting?`","Fragments":["didn't"]},{"Key":"`shouting?` didn't","Fragments":["work"]},{"Key":"didn't work","Fragments":["for"]},{"Key":"for foreign","Fragments":["languages"]},{"Key":"foreign languages","Fragments":["because"]},{"Key":"languages because","Fragments":["`has_letters?`"]},{"Key":"because `has_letters?`","Fragments":["only"]},{"Key":"`has_letters?` only","Fragments":["checked"]},{"Key":"only checked","Fragments":["for"]},{"Key":"Regarding `blank?`","Fragments":["-"]},{"Key":"`blank?` -","Fragments":["yes,"]},{"Key":"- yes,","Fragments":["it"]},{"Key":"yes, it","Fragments":["feels"]},{"Key":"Yes you're","Fragments":["right"]},{"Key":"function parameters.","Fragments":["I","`h`"]},{"Key":"parameters. I","Fragments":["have"]},{"Key":"have updated","Fragments":["my"]},{"Key":"also like","Fragments":["to","the"]},{"Key":"`HashDict.new` but","Fragments":["then"]},{"Key":"then elixir","Fragments":["fails"]},{"Key":"elixir fails","Fragments":["with"]},{"Key":"fails with","Fragments":["`**"]},{"Key":"with `**","Fragments":["(BadArityError)"]},{"Key":"`** (BadArityError)","Fragments":["bad"]},{"Key":"(BadArityError) bad","Fragments":["arity"]},{"Key":"bad arity","Fragments":["error:"]},{"Key":"arity error:","Fragments":["#Function\u003c0.55315932"]},{"Key":"error: #Function\u003c0.55315932","Fragments":["in"]},{"Key":"#Function\u003c0.55315932 in","Fragments":["DNA.nucleotide_counts/1\u003e"]},{"Key":"in DNA.nucleotide_counts/1\u003e","Fragments":["called"]},{"Key":"DNA.nucleotide_counts/1\u003e called","Fragments":["with"]},{"Key":"with [{65,","Fragments":["0}]`."]},{"Key":"the (very)","Fragments":["new"]},{"Key":"(very) new","Fragments":["0.11.0"]},{"Key":"new 0.11.0","Fragments":["release"]},{"Key":"0.11.0 release","Fragments":["the"]},{"Key":"release the","Fragments":["`/u`"]},{"Key":"`/u` is","Fragments":["no","not"]},{"Key":"longer necessary.","Fragments":["It"]},{"Key":"necessary. It","Fragments":["was"]},{"Key":"a remnant","Fragments":["of"]},{"Key":"remnant of","Fragments":["Erlang's"]},{"Key":"of Erlang's","Fragments":["non-unicode"]},{"Key":"Erlang's non-unicode","Fragments":["history"]},{"Key":"non-unicode history","Fragments":["which"]},{"Key":"history which","Fragments":["is"]},{"Key":"is rather","Fragments":["irrelevant","weird,"]},{"Key":"rather irrelevant","Fragments":["in"]},{"Key":"irrelevant in","Fragments":["Elixir"]},{"Key":"Elixir (as","Fragments":["all"]},{"Key":"(as all","Fragments":["strings"]},{"Key":"all strings","Fragments":["are"]},{"Key":"are by","Fragments":["definition"]},{"Key":"by definition","Fragments":["UTF-8"]},{"Key":"definition UTF-8","Fragments":["encoded)."]},{"Key":"Character category","Fragments":["functions"]},{"Key":"category functions","Fragments":["(`isSpace`,"]},{"Key":"functions (`isSpace`,","Fragments":["`isUpper`),"]},{"Key":"(`isSpace`, `isUpper`),","Fragments":["etc"]},{"Key":"`isUpper`), etc","Fragments":["are"]},{"Key":"etc are","Fragments":["missing."]},{"Key":"are missing.","Fragments":["There's"]},{"Key":"missing. There's","Fragments":["a"]},{"Key":"a patch","Fragments":["for","to"]},{"Key":"patch for","Fragments":["a"]},{"Key":"function (getting","Fragments":["the"]},{"Key":"the unicode","Fragments":["category)","issue.","issue","equivalent","database"]},{"Key":"unicode category)","Fragments":["but"]},{"Key":"category) but","Fragments":["it"]},{"Key":"it hasn't","Fragments":["been"]},{"Key":"hasn't been","Fragments":["merged"]},{"Key":"been merged","Fragments":["yet","for"]},{"Key":"merged yet","Fragments":["because"]},{"Key":"yet because","Fragments":["there's"]},{"Key":"because there's","Fragments":["not"]},{"Key":"clear need","Fragments":["for"]},{"Key":"a `Char`","Fragments":["module."]},{"Key":"feel `blank?`","Fragments":["is"]},{"Key":"`blank?` is","Fragments":["missing"]},{"Key":"is missing","Fragments":["feel","the"]},{"Key":"missing feel","Fragments":["free"]},{"Key":"an issue","Fragments":["on","of","calling","when","here:","with","with"]},{"Key":"issue on","Fragments":["the"]},{"Key":"the [elixir","Fragments":["bugtracker](https://github.com/elixir-lang/elixir/issues)."]},{"Key":" @herta","Fragments":["Thanks,"]},{"Key":"@herta Thanks,","Fragments":["just"]},{"Key":"to 0.11","Fragments":["and"]},{"Key":"0.11 and","Fragments":["indeed"]},{"Key":"indeed got","Fragments":["warning"]},{"Key":"got warning","Fragments":["that"]},{"Key":"warning that","Fragments":["`/u`"]},{"Key":"that `/u`","Fragments":["is"]},{"Key":"not needed.","Fragments":["Updated.","Other"]},{"Key":"Parentheses are","Fragments":["required"]},{"Key":"are required","Fragments":["when"]},{"Key":"required when","Fragments":["you"]},{"Key":"you nest","Fragments":["functions."]},{"Key":"nest functions.","Fragments":["This"]},{"Key":"functions. This","Fragments":["should","also"]},{"Key":"This should","Fragments":["work"]},{"Key":"should work","Fragments":["(different","as","just","though.","here"]},{"Key":"work (different","Fragments":["parentheses"]},{"Key":"(different parentheses","Fragments":["placement):"]},{"Key":"Enum.reduce HashDict.new([{?A,","Fragments":["0},"]},{"Key":"HashDict.new([{?A, 0},","Fragments":["{?T,"]},{"Key":" fn(x,hh)","Fragments":["-\u003e"]},{"Key":"You gained","Fragments":["in"]},{"Key":"gained in","Fragments":["readability."]},{"Key":"in readability.","Fragments":["In"]},{"Key":"readability. In","Fragments":["Ruby/Elixir"]},{"Key":"In Ruby/Elixir","Fragments":["sintax"]},{"Key":"Ruby/Elixir sintax","Fragments":["is"]},{"Key":"sintax is","Fragments":["common"]},{"Key":"is common","Fragments":["to","to","to"]},{"Key":"attributes in","Fragments":["the"]},{"Key":"perfectly and","Fragments":["is"]},{"Key":"readable. Thanks","Fragments":["!"]},{"Key":" `Enum.first","Fragments":["Regex.scan"]},{"Key":"`Enum.first Regex.scan","Fragments":["phone_pattern,"]},{"Key":"Regex.scan phone_pattern,","Fragments":["unformatted`"]},{"Key":"phone_pattern, unformatted`","Fragments":["is"]},{"Key":"unformatted` is","Fragments":["hard"]},{"Key":"parse for","Fragments":["other"]},{"Key":"other people.","Fragments":["You"]},{"Key":"people. You","Fragments":["could"]},{"Key":"do `Regex.scan(phone_pattern,","Fragments":["unformatted)"]},{"Key":"`Regex.scan(phone_pattern, unformatted)","Fragments":["|\u003e"]},{"Key":"unformatted) |\u003e","Fragments":["Enum.first`","hd`)."]},{"Key":"|\u003e Enum.first`","Fragments":["though"]},{"Key":"Enum.first` though","Fragments":["(or"]},{"Key":"though (or","Fragments":["`Regex.scan(phone_pattenr,"]},{"Key":"(or `Regex.scan(phone_pattenr,","Fragments":["unformatted)"]},{"Key":"`Regex.scan(phone_pattenr, unformatted)","Fragments":["|\u003e"]},{"Key":"an annoying","Fragments":["exercise."]},{"Key":"annoying exercise.","Fragments":["You"]},{"Key":"exercise. You","Fragments":["can"]},{"Key":"can condense","Fragments":["the"]},{"Key":"condense the","Fragments":["code"]},{"Key":"bit using","Fragments":["macro's,"]},{"Key":"using macro's,","Fragments":["take"]},{"Key":"macro's, take","Fragments":["a"]},{"Key":"at [elixir's","Fragments":["unicode.ex](https://github.com/elixir-lang/elixir/blob/master/lib/elixir/unicode/unicode.ex)"]},{"Key":"[elixir's unicode.ex](https://github.com/elixir-lang/elixir/blob/master/lib/elixir/unicode/unicode.ex)","Fragments":["for"]},{"Key":"unicode.ex](https://github.com/elixir-lang/elixir/blob/master/lib/elixir/unicode/unicode.ex) for","Fragments":["how"]},{"Key":"module using","Fragments":["macro"]},{"Key":"using macro","Fragments":["tricks."]},{"Key":"This may","Fragments":["just"]},{"Key":"be me","Fragments":["but","but"]},{"Key":"me but","Fragments":["I","I'm","can't"]},{"Key":"the single-line","Fragments":["functions"]},{"Key":"single-line functions","Fragments":["totally"]},{"Key":"functions totally","Fragments":["unreadable."]},{"Key":"totally unreadable.","Fragments":["YMMV."]},{"Key":"this kata","Fragments":["is"]},{"Key":"kata is","Fragments":["confused"]},{"Key":"is confused","Fragments":["."]},{"Key":"confused .","Fragments":["The"]},{"Key":". The","Fragments":["tests"]},{"Key":"much overkill","Fragments":["and"]},{"Key":"extract `?T`and","Fragments":["`?U`"]},{"Key":"`?T`and `?U`","Fragments":["into"]},{"Key":"`?U` into","Fragments":["variables"]},{"Key":"about them.","Fragments":["It"]},{"Key":"them. It","Fragments":["does"]},{"Key":"seem harder","Fragments":["to","to"]},{"Key":"read at","Fragments":["times.","first"]},{"Key":"using module","Fragments":["attributes?","attributes"]},{"Key":"attributes? I","Fragments":["think"]},{"Key":"idea. That","Fragments":["way"]},{"Key":"could name","Fragments":["them","the"]},{"Key":"name them","Fragments":["instead"]},{"Key":"them instead","Fragments":["of"]},{"Key":"of requiring","Fragments":["the"]},{"Key":"the mental","Fragments":["mapping"]},{"Key":"mental mapping","Fragments":["between"]},{"Key":"the single-letter","Fragments":["symbol."]},{"Key":"really gained","Fragments":["what"]},{"Key":"gained what","Fragments":["I"]},{"Key":"I expected","Fragments":["to","the"]},{"Key":"to by","Fragments":["adding"]},{"Key":"adding line","Fragments":["5"]},{"Key":"line 5","Fragments":["to","and","refers"]},{"Key":"5 to","Fragments":["name"]},{"Key":"name ?T","Fragments":["and"]},{"Key":"?T and","Fragments":["?U,"]},{"Key":"and ?U,","Fragments":["but"]},{"Key":"?U, but","Fragments":["I"]},{"Key":"more self","Fragments":["documenting."]},{"Key":" @abelardo","Fragments":["perhaps"]},{"Key":"@abelardo perhaps","Fragments":["I"]},{"Key":"perhaps I","Fragments":["missed"]},{"Key":"missed something","Fragments":["but"]},{"Key":"something but","Fragments":["How","when"]},{"Key":"but How","Fragments":["can"]},{"Key":"use macros","Fragments":["here?"]},{"Key":"macros here?","Fragments":["I"]},{"Key":"here? I","Fragments":["don´t"]},{"Key":"I don´t","Fragments":["see"]},{"Key":"don´t see","Fragments":["the"]},{"Key":"the benefits","Fragments":[".."]},{"Key":"keep wanting","Fragments":["to"]},{"Key":"wanting to","Fragments":["write","evaluate"]},{"Key":" instead","Fragments":["of","got:"]},{"Key":" String.last(prompt)","Fragments":["=="]},{"Key":"String.last(prompt) ==","Fragments":["\"?\""]},{"Key":"you importing","Fragments":["downcase,"]},{"Key":"importing downcase,","Fragments":["but"]},{"Key":"downcase, but","Fragments":["not"]},{"Key":"not codepoints,","Fragments":["filter"]},{"Key":"codepoints, filter","Fragments":["or"]},{"Key":"erlang way","Fragments":["of"]},{"Key":"of always","Fragments":["explicitly","submitting"]},{"Key":"always explicitly","Fragments":["referring"]},{"Key":"explicitly referring","Fragments":["to"]},{"Key":"function's module,","Fragments":["but"]},{"Key":"rather see","Fragments":["consistent","something"]},{"Key":"see consistent","Fragments":["importing"]},{"Key":"consistent importing","Fragments":["over"]},{"Key":"importing over","Fragments":["a"]},{"Key":"a mixed","Fragments":["approach."]},{"Key":"You end","Fragments":["up"]},{"Key":"defmodule Meetup","Fragments":["do","do"]},{"Key":" @clark","Fragments":["\"\"\"","1","2","3","4","5","6","7","13","19","[\"mon\","]},{"Key":" Calculate","Fragments":["meetup","meetup"]},{"Key":"Calculate meetup","Fragments":["dates.","dates."]},{"Key":"# Aliases","Fragments":["for","for"]},{"Key":"Aliases for","Fragments":["the","the"]},{"Key":"the day","Fragments":["of","written","of","written"]},{"Key":"day of","Fragments":["week","week,","week","week,","the"]},{"Key":"of week","Fragments":["numbers","numbers"]},{"Key":"week numbers","Fragments":["from","from"]},{"Key":"numbers from","Fragments":["Erlang.","Erlang."]},{"Key":"@clark [\"mon\",","Fragments":["\"tues\","]},{"Key":"[\"mon\", \"tues\",","Fragments":["\"wednes\",","\"wednes\","]},{"Key":"\"tues\", \"wednes\",","Fragments":["\"thurs\",","\"thurs\","]},{"Key":"\"wednes\", \"thurs\",","Fragments":["\"fri\",","\"fri\","]},{"Key":"\"thurs\", \"fri\",","Fragments":["\"satur\",","\"satur\","]},{"Key":"\"fri\", \"satur\",","Fragments":["\"sun\"]","\"sun\"]"]},{"Key":" lc","Fragments":["{","{","{","{","{","{","{","{","{","{letters,"]},{"Key":"lc {","Fragments":["dp,","nth,","dp,","dp,","dp,","nth,","dp,","dp,","letters,"]},{"Key":"{ dp,","Fragments":["i","dpi","dpi","i","dpi","dpi"]},{"Key":"dp, i","Fragments":["}","}"]},{"Key":"i }","Fragments":["inlist","inlist"]},{"Key":"} inlist","Fragments":["Enum.with_index(@clark)","Enum.with_index([\"first\",","Enum.with_index(@clark)","Enum.with_index(@clark)","Enum.with_index(@craig)","Enum.with_index([\"first\",","Enum.with_index(@craig)","Enum.with_index(@craig)","l,","score_data,"]},{"Key":"inlist Enum.with_index(@clark)","Fragments":["do","do","do"]},{"Key":"def unquote(binary_to_atom(dp","Fragments":["\u003c\u003e","\u003c\u003e"]},{"Key":"unquote(binary_to_atom(dp \u003c\u003e","Fragments":["\"teenth\"))(month,","\"teenth\"))(month,"]},{"Key":"\u003c\u003e \"teenth\"))(month,","Fragments":["year),","year),"]},{"Key":" do:","Fragments":["dow_in_range(@clark,","dow_in_range(unquote(1+7*ni),","dow_in_range(@craig,","dow_in_range(unquote(1+7*ni),","number(digits)","{"]},{"Key":"do: dow_in_range(@clark,","Fragments":["@clark,"]},{"Key":"dow_in_range(@clark, @clark,","Fragments":["unquote(i+1),"]},{"Key":"@clark, unquote(i+1),","Fragments":["month,"]},{"Key":"unquote(i+1), month,","Fragments":["year)","year)"]},{"Key":"{ nth,","Fragments":["ni","ni"]},{"Key":"nth, ni","Fragments":["}","}"]},{"Key":"ni }","Fragments":["inlist","inlist"]},{"Key":"inlist Enum.with_index([\"first\",","Fragments":["\"second\",","\"second\","]},{"Key":"Enum.with_index([\"first\", \"second\",","Fragments":["\"third\",","\"third\","]},{"Key":"\"second\", \"third\",","Fragments":["\"fourth\"])","\"fourth\"])"]},{"Key":"\"third\", \"fourth\"])","Fragments":["do","do"]},{"Key":"dp, dpi","Fragments":["}","}","}","}"]},{"Key":"dpi }","Fragments":["inlist","inlist","inlist","inlist"]},{"Key":"def unquote(binary_to_atom(\"#{nth}_#{dp}day\"))(month,","Fragments":["year),","year),"]},{"Key":"do: dow_in_range(unquote(1+7*ni),","Fragments":["unquote(7+7*ni),","unquote(7+7*ni),"]},{"Key":"dow_in_range(unquote(1+7*ni), unquote(7+7*ni),","Fragments":["unquote(dpi+1),","unquote(dpi+1),"]},{"Key":"unquote(7+7*ni), unquote(dpi+1),","Fragments":["month,","month,"]},{"Key":"unquote(dpi+1), month,","Fragments":["year)","year)"]},{"Key":"def unquote(binary_to_atom(\"last_#{dp}day\"))(month,","Fragments":["year)","year)"]},{"Key":"unquote(binary_to_atom(\"last_#{dp}day\"))(month, year)","Fragments":["do","do"]},{"Key":" fifth_date","Fragments":["=","="]},{"Key":"fifth_date =","Fragments":["dow_in_range(unquote(1+4*7),","dow_in_range(unquote(1+4*7),"]},{"Key":"= dow_in_range(unquote(1+4*7),","Fragments":["unquote(7+4*7),","unquote(7+4*7),"]},{"Key":"dow_in_range(unquote(1+4*7), unquote(7+4*7),","Fragments":["unquote(dpi+1),","unquote(dpi+1),"]},{"Key":" month,","Fragments":["year)","year)"]},{"Key":"if fifth_date","Fragments":["\u0026\u0026","\u0026\u0026"]},{"Key":"fifth_date \u0026\u0026","Fragments":[":calendar.valid_date(fifth_date)",":calendar.valid_date(fifth_date)"]},{"Key":"\u0026\u0026 :calendar.valid_date(fifth_date)","Fragments":["do","do"]},{"Key":" unquote(binary_to_atom(\"fourth_#{dp}day\"))(month,","Fragments":["year)","year)"]},{"Key":"# Get","Fragments":["the","the"]},{"Key":"Get the","Fragments":["{year,","{year,"]},{"Key":"the {year,","Fragments":["month,","month,"]},{"Key":"{year, month,","Fragments":["day}","day}"]},{"Key":"month, day}","Fragments":["for","for"]},{"Key":"day} for","Fragments":["the","the"]},{"Key":"given day","Fragments":["of","of"]},{"Key":"of week,","Fragments":["month","month"]},{"Key":"week, month","Fragments":["and","and"]},{"Key":"month and","Fragments":["year","year"]},{"Key":"# where","Fragments":["the","the"]},{"Key":"day written","Fragments":["out","out"]},{"Key":"written out","Fragments":["is","is"]},{"Key":"the passed","Fragments":["range.","range.","`Enum`"]},{"Key":"defp dow_in_range(first,","Fragments":["last,","last,"]},{"Key":"dow_in_range(first, last,","Fragments":["dow,","dow,"]},{"Key":"last, dow,","Fragments":["month,","month,"]},{"Key":"dow, month,","Fragments":["year)","year)"]},{"Key":"month, year)","Fragments":["do","do"]},{"Key":"# There","Fragments":["is","is"]},{"Key":"that involves","Fragments":["calculating","calculating"]},{"Key":"involves calculating","Fragments":["but","but"]},{"Key":"calculating but","Fragments":["I","I"]},{"Key":"# this","Fragments":["exercise","exercise"]},{"Key":"exercise so","Fragments":["use","use","I"]},{"Key":"the blunt","Fragments":["approach.","approach."]},{"Key":" d","Fragments":["=","="]},{"Key":"d =","Fragments":["Enum.reduce(first..last,","Enum.reduce(first..last,"]},{"Key":"= Enum.reduce(first..last,","Fragments":["nil,","nil,"]},{"Key":"Enum.reduce(first..last, nil,","Fragments":["fn","fn"]},{"Key":" d,","Fragments":["nil","nil"]},{"Key":"d, nil","Fragments":["-\u003e","-\u003e"]},{"Key":"nil -\u003e","Fragments":["if","if"]},{"Key":"-\u003e if","Fragments":[":calendar.valid_date(year,",":calendar.valid_date(year,","divides?(n,"]},{"Key":"if :calendar.valid_date(year,","Fragments":["month,","month,"]},{"Key":":calendar.valid_date(year, month,","Fragments":["d)","d)"]},{"Key":"month, d)","Fragments":["and","==","and","=="]},{"Key":" :calendar.day_of_the_week(year,","Fragments":["month,","month,"]},{"Key":":calendar.day_of_the_week(year, month,","Fragments":["d)","d)"]},{"Key":"d) ==","Fragments":["dow","dow"]},{"Key":"== dow","Fragments":["do","do"]},{"Key":" _,","Fragments":["d","d","acc"]},{"Key":"_, d","Fragments":["-\u003e","-\u003e"]},{"Key":"d -\u003e","Fragments":["d","d"]},{"Key":"if d,","Fragments":["do:","do:"]},{"Key":"d, do:","Fragments":["{","{"]},{"Key":"do: {","Fragments":["year,","year,","c,","String.downcase(w),"]},{"Key":"{ year,","Fragments":["month,","month,"]},{"Key":"year, month,","Fragments":["d","d"]},{"Key":"month, d","Fragments":["},","},"]},{"Key":"d },","Fragments":["else:","else:"]},{"Key":"}, else:","Fragments":["nil","nil"]},{"Key":"said, it's","Fragments":["ugly."]},{"Key":"it's ugly.","Fragments":["I'm"]},{"Key":"ugly. I'm","Fragments":["currently"]},{"Key":"currently rewriting","Fragments":["the"]},{"Key":"rewriting the","Fragments":["exercise","expression"]},{"Key":"not require","Fragments":["macro","duplication"]},{"Key":"require macro","Fragments":["macro's"]},{"Key":"macro macro's","Fragments":["or"]},{"Key":"macro's or","Fragments":["lots"]},{"Key":"or lots","Fragments":["of"]},{"Key":"lots of","Fragments":["redundant","other"]},{"Key":"of redundant","Fragments":["functions"]},{"Key":"redundant functions","Fragments":["anymore."]},{"Key":"Hmm, come","Fragments":["to"]},{"Key":"it, `if","Fragments":["n"]},{"Key":"== m","Fragments":["do"]},{"Key":"m do","Fragments":["acc"]},{"Key":"do acc","Fragments":["else"]},{"Key":"acc else","Fragments":["acc"]},{"Key":"else acc","Fragments":["+","end"]},{"Key":"end` works","Fragments":["as"]},{"Key":"works as","Fragments":["well,"]},{"Key":"well, no","Fragments":["need"]},{"Key":"the colons","Fragments":["but"]},{"Key":"colons but","Fragments":["you"]},{"Key":"can put","Fragments":["it","that"]},{"Key":"bit confused","Fragments":["by"]},{"Key":"by your","Fragments":["use","standard"]},{"Key":"of newlines.","Fragments":["Why"]},{"Key":"newlines. Why","Fragments":["do"]},{"Key":"put `_area_code`","Fragments":["and"]},{"Key":"`_area_code` and","Fragments":["`_pretty`"]},{"Key":"and `_pretty`","Fragments":["close","all"]},{"Key":"`_pretty` close","Fragments":["to"]},{"Key":"each other","Fragments":["and","in","very"]},{"Key":"other and","Fragments":["not"]},{"Key":"not separated","Fragments":["by"]},{"Key":"newline like","Fragments":["you"]},{"Key":"Oh I","Fragments":["see"]},{"Key":"it ,","Fragments":["is"]},{"Key":"is ugly","Fragments":["yes"]},{"Key":"ugly yes","Fragments":[":)"]},{"Key":"yes :)","Fragments":["."]},{"Key":":) .","Fragments":["But"]},{"Key":". But","Fragments":["the"]},{"Key":"bit condensed","Fragments":["and"]},{"Key":"condensed and","Fragments":["without"]},{"Key":"code @morgan","Fragments":[","]},{"Key":"@morgan ,","Fragments":["I"]},{"Key":"This feels","Fragments":["like","a","the"]},{"Key":"good case","Fragments":["for"]},{"Key":"macro but","Fragments":["I"]},{"Key":"quite work","Fragments":["out"]},{"Key":"I wanted.","Fragments":["Is"]},{"Key":"wanted. Is","Fragments":["it"]},{"Key":"with dynamically","Fragments":["generated"]},{"Key":"dynamically generated","Fragments":["names?"]},{"Key":"generated names?","Fragments":["How"]},{"Key":"names? How","Fragments":["do"]},{"Key":"doing this?","Fragments":["Is"]},{"Key":"this? Is","Fragments":["there"]},{"Key":"existing enum","Fragments":["for"]},{"Key":"enum for","Fragments":["days"]},{"Key":"for days","Fragments":["of"]},{"Key":"days of","Fragments":["the"]},{"Key":"the week","Fragments":["in","and"]},{"Key":"week in","Fragments":["erlang?"]},{"Key":"no standard","Fragments":["constants"]},{"Key":"standard constants","Fragments":["for"]},{"Key":"constants for","Fragments":["the","strings,"]},{"Key":"the weekday","Fragments":["names","type"]},{"Key":"weekday names","Fragments":["in"]},{"Key":"Erlang. Erlang","Fragments":["unfortunately"]},{"Key":"Erlang unfortunately","Fragments":["isn't"]},{"Key":"unfortunately isn't","Fragments":["exactly"]},{"Key":"isn't exactly","Fragments":["the","the"]},{"Key":"the height","Fragments":["of"]},{"Key":"height of","Fragments":["great"]},{"Key":"great API","Fragments":["design"]},{"Key":"design at","Fragments":["times."]},{"Key":"just give","Fragments":["you"]},{"Key":"you my","Fragments":["solution"]},{"Key":"solution so","Fragments":["you","that"]},{"Key":"much fun","Fragments":["doing"]},{"Key":"fun doing","Fragments":["this"]},{"Key":"with macro's","Fragments":["is:"]},{"Key":" @craig","Fragments":["\"\"\"","1","2","3","4","5","6","7","13","19","[\"mon\","]},{"Key":"@craig [\"mon\",","Fragments":["\"tues\","]},{"Key":"inlist Enum.with_index(@craig)","Fragments":["do","do","do"]},{"Key":"do: dow_in_range(@craig,","Fragments":["@craig,"]},{"Key":"dow_in_range(@craig, @craig,","Fragments":["unquote(i+1),"]},{"Key":"@craig, unquote(i+1),","Fragments":["month,"]},{"Key":"Btw, this","Fragments":["exercise","exercise","is"]},{"Key":"being rewritten","Fragments":["to"]},{"Key":"rewritten to","Fragments":["not"]},{"Key":"require duplication","Fragments":["or"]},{"Key":"duplication or","Fragments":["metaprogramming."]},{"Key":"or metaprogramming.","Fragments":["You"]},{"Key":"metaprogramming. You","Fragments":["were"]},{"Key":"were just","Fragments":["a"]},{"Key":"too quick","Fragments":["to"]},{"Key":"quick to","Fragments":["get"]},{"Key":" [EDIT:","Fragments":["Accidentally"]},{"Key":"[EDIT: Accidentally","Fragments":["included"]},{"Key":"Accidentally included","Fragments":["the"]},{"Key":"example for","Fragments":["the","your"]},{"Key":"the reworked","Fragments":["exercise"]},{"Key":"reworked exercise","Fragments":["as"]},{"Key":"Nice -","Fragments":["that"]},{"Key":"the direction","Fragments":["I","on"]},{"Key":"direction I","Fragments":["was"]},{"Key":"going but","Fragments":["I"]},{"Key":"the `unquote`","Fragments":["thing"]},{"Key":"`unquote` thing","Fragments":["for"]},{"Key":"It ends","Fragments":["up"]},{"Key":"up being","Fragments":["almost","more"]},{"Key":"being almost","Fragments":["as"]},{"Key":"almost as","Fragments":["long"]},{"Key":"as writing","Fragments":["it"]},{"Key":"in full,","Fragments":["so"]},{"Key":"full, so","Fragments":["I"]},{"Key":"guess not","Fragments":["the"]},{"Key":"best case","Fragments":["for"]},{"Key":"macro after","Fragments":["all."]},{"Key":"after all.","Fragments":["Glad"]},{"Key":"all. Glad","Fragments":["it's"]},{"Key":"Glad it's","Fragments":["being"]},{"Key":"it's being","Fragments":["rewritten,"]},{"Key":"being rewritten,","Fragments":["it's"]},{"Key":"rewritten, it's","Fragments":["not"]},{"Key":"been my","Fragments":["favourite"]},{"Key":"my favourite","Fragments":["exercise..."]},{"Key":" `contains_char`","Fragments":["is"]},{"Key":"`contains_char` is","Fragments":["an"]},{"Key":"an O(n^2)","Fragments":["algorithm"]},{"Key":"O(n^2) algorithm","Fragments":["when"]},{"Key":"algorithm when","Fragments":["you"]},{"Key":"in O(n","Fragments":["*"]},{"Key":"* log","Fragments":["n)"]},{"Key":"n) or","Fragments":["even"]},{"Key":"even O(n)","Fragments":["(with"]},{"Key":"O(n) (with","Fragments":["a"]},{"Key":"(with a","Fragments":["space"]},{"Key":"space tradeoff).","Fragments":["Consider"]},{"Key":"tradeoff). Consider","Fragments":["sorting,"]},{"Key":"Consider sorting,","Fragments":["it's"]},{"Key":"sorting, it's","Fragments":["fast"]},{"Key":"using List.foldl","Fragments":["or"]},{"Key":"List.foldl or","Fragments":["Enum.reduce"]},{"Key":"or Enum.reduce","Fragments":["instead"]},{"Key":"of explicit","Fragments":["recursion","recursion."]},{"Key":"in `count`.","Fragments":["It's"]},{"Key":"`count`. It's","Fragments":["also"]},{"Key":"It's also","Fragments":["possible","possible","easier","true"]},{"Key":"also possible","Fragments":["to","btw"]},{"Key":"strip invalid","Fragments":["characters"]},{"Key":"invalid characters","Fragments":["at"]},{"Key":"same time","Fragments":["if","as"]},{"Key":"time if","Fragments":["you"]},{"Key":"will definitely","Fragments":["look"]},{"Key":"into trying","Fragments":["`Enum#Reduce`"]},{"Key":"trying `Enum#Reduce`","Fragments":["instead."]},{"Key":"`Enum#Reduce` instead.","Fragments":["I"]},{"Key":"I stayed","Fragments":["away"]},{"Key":"stayed away","Fragments":["from","from"]},{"Key":"from regex","Fragments":["for"]},{"Key":"problem because","Fragments":["my"]},{"Key":"iteration on","Fragments":["the"]},{"Key":"the Bob","Fragments":["exercise"]},{"Key":"Bob exercise","Fragments":["before"]},{"Key":"exercise before","Fragments":["it"]},{"Key":"very regex-heavy","Fragments":["and"]},{"Key":"regex-heavy and","Fragments":["I"]},{"Key":"I more-or-less","Fragments":["got"]},{"Key":"more-or-less got","Fragments":["scolded"]},{"Key":"got scolded","Fragments":["for"]},{"Key":"scolded for","Fragments":["it."]},{"Key":"it. Trying","Fragments":["to"]},{"Key":"to minimize","Fragments":["my","unnecessary","the"]},{"Key":"minimize my","Fragments":["usage"]},{"Key":"my usage","Fragments":["here"]},{"Key":"usage here","Fragments":["when"]},{"Key":"here when","Fragments":["stdlib"]},{"Key":"when stdlib","Fragments":["can"]},{"Key":"stdlib can","Fragments":["do"]},{"Key":"the job,","Fragments":["although"]},{"Key":"job, although","Fragments":["I"]},{"Key":"although I","Fragments":["usually","could"]},{"Key":"prefer regex","Fragments":["myself."]},{"Key":"Well, you're","Fragments":["already"]},{"Key":"you're already","Fragments":["using"]},{"Key":"already using","Fragments":["a"]},{"Key":"so what's","Fragments":["the"]},{"Key":"what's the","Fragments":["problem"]},{"Key":"with doing","Fragments":["the"]},{"Key":"split with","Fragments":["a"]},{"Key":"regex instead","Fragments":["of"]},{"Key":"of replace?","Fragments":["It'd"]},{"Key":"replace? It'd","Fragments":["be"]},{"Key":"and less","Fragments":["code.","generic.","likely"]},{"Key":"less code.","Fragments":["The"]},{"Key":"code. The","Fragments":["regex","\"|\u003e\""]},{"Key":"basically the","Fragments":["same","exact"]},{"Key":"same either","Fragments":["way."]},{"Key":"Oh my,","Fragments":["the"]},{"Key":"my, the","Fragments":["regex"]},{"Key":"so obvious.","Fragments":["Well,"]},{"Key":"obvious. Well,","Fragments":["now"]},{"Key":"Well, now","Fragments":["I"]},{"Key":"I know.","Fragments":["Moving","They"]},{"Key":"know. Moving","Fragments":["on..."]},{"Key":"Ugh, another","Fragments":["metaprogramming"]},{"Key":"another metaprogramming","Fragments":["module."]},{"Key":"metaprogramming module.","Fragments":["I'll"]},{"Key":"module. I'll","Fragments":["submit"]},{"Key":"patch to","Fragments":["clean"]},{"Key":"one up","Fragments":["as"]},{"Key":"minor thing:","Fragments":["it's"]},{"Key":"thing: it's","Fragments":["pretty","more"]},{"Key":"pretty common","Fragments":["to","in","for","to","pattern."]},{"Key":"comprehension for","Fragments":["those"]},{"Key":"those macro","Fragments":["definitions."]},{"Key":"macro definitions.","Fragments":["But"]},{"Key":"definitions. But","Fragments":["that's"]},{"Key":"But that's","Fragments":["really","pretty","really"]},{"Key":"personal style,","Fragments":["admittedly"]},{"Key":"style, admittedly","Fragments":["your"]},{"Key":"admittedly your","Fragments":["code"]},{"Key":"doesn't unnecessary","Fragments":["create"]},{"Key":"unnecessary create","Fragments":["a"]},{"Key":"quite able","Fragments":["to"]},{"Key":"figure the","Fragments":["required"]},{"Key":"the required","Fragments":["regex","tests."]},{"Key":"required regex","Fragments":["out,"]},{"Key":"regex out,","Fragments":["so"]},{"Key":"out, so","Fragments":["I'm"]},{"Key":"on and","Fragments":["maybe","then"]},{"Key":"and maybe","Fragments":["have"]},{"Key":"maybe have","Fragments":["a"]},{"Key":"often optimize","Fragments":["that"]},{"Key":"optimize that","Fragments":["unused"]},{"Key":"that unused","Fragments":["list"]},{"Key":"unused list","Fragments":["away,"]},{"Key":"list away,","Fragments":["not"]},{"Key":"away, not","Fragments":["sure"]},{"Key":"that applies","Fragments":["to"]},{"Key":"to Elixir's","Fragments":["toolchain","tests."]},{"Key":"Elixir's toolchain","Fragments":["or"]},{"Key":"toolchain or","Fragments":["not."]},{"Key":"not. I'm","Fragments":["not"]},{"Key":"of elixir's","Fragments":["comprehension"]},{"Key":"elixir's comprehension","Fragments":["syntax,"]},{"Key":"comprehension syntax,","Fragments":["so"]},{"Key":"syntax, so","Fragments":["haven't"]},{"Key":"so haven't","Fragments":["used"]},{"Key":"That's just","Fragments":["a","the"]},{"Key":"a residual","Fragments":["from"]},{"Key":"residual from","Fragments":["a"]},{"Key":"version where","Fragments":["I","I","I"]},{"Key":"3 components","Fragments":["of"]},{"Key":"components of","Fragments":["the"]},{"Key":"`_pretty` all","Fragments":["together."]},{"Key":"all together.","Fragments":["I'd"]},{"Key":"together. I'd","Fragments":["probably"]},{"Key":"probably separate","Fragments":["all"]},{"Key":"separate all","Fragments":["of"]},{"Key":"point, and","Fragments":["I'd"]},{"Key":"and I'd","Fragments":["condense","love","love"]},{"Key":"I'd condense","Fragments":["some"]},{"Key":"condense some","Fragments":["of"]},{"Key":"shorter ones","Fragments":["into"]},{"Key":"ones into","Fragments":["single"]},{"Key":"into single","Fragments":["line"]},{"Key":"line functions","Fragments":["as"]},{"Key":"left them","Fragments":["multiline","in","both"]},{"Key":"them multiline","Fragments":["to"]},{"Key":"multiline to","Fragments":["make"]},{"Key":"this viewport","Fragments":["though."]},{"Key":"Also, your","Fragments":["implementation"]},{"Key":"of `concat`","Fragments":["requires","if"]},{"Key":"`concat` requires","Fragments":["too"]},{"Key":"requires too","Fragments":["many"]},{"Key":"many list","Fragments":["reversal.","elements."]},{"Key":"list reversal.","Fragments":["One"]},{"Key":"reversal. One","Fragments":["is"]},{"Key":"One is","Fragments":["enough","that","that"]},{"Key":"is enough","Fragments":["if","information."]},{"Key":"enough if","Fragments":["you"]},{"Key":"was previously","Fragments":["unaware"]},{"Key":"previously unaware","Fragments":["of"]},{"Key":"unaware of","Fragments":["`Regex#split`,","update,"]},{"Key":"of `Regex#split`,","Fragments":["but"]},{"Key":"`Regex#split`, but","Fragments":["at"]},{"Key":"but at","Fragments":["the","your","this","what"]},{"Key":"the promptings","Fragments":["of"]},{"Key":"promptings of","Fragments":["[etrepum](http://exercism.io/etrepum),"]},{"Key":"of [etrepum](http://exercism.io/etrepum),","Fragments":["I"]},{"Key":"[etrepum](http://exercism.io/etrepum), I","Fragments":["arrived"]},{"Key":"I arrived","Fragments":["at"]},{"Key":"arrived at","Fragments":["a"]},{"Key":"a far,","Fragments":["far"]},{"Key":"far, far","Fragments":["cleaner"]},{"Key":"far cleaner","Fragments":["implementation"]},{"Key":"cleaner implementation","Fragments":["based"]},{"Key":"and `Enum#reduce`.","Fragments":["Thanks"]},{"Key":"`Enum#reduce`. Thanks","Fragments":["for"]},{"Key":"the nudge","Fragments":["in"]},{"Key":"nudge in","Fragments":["the"]},{"Key":"probably consider","Fragments":["redoing"]},{"Key":"consider redoing","Fragments":["L12"]},{"Key":"redoing L12","Fragments":["to"]},{"Key":"L12 to","Fragments":["use"]},{"Key":"anonymous \u0026-based","Fragments":["function"]},{"Key":"\u0026-based function","Fragments":["definition"]},{"Key":"definition instead","Fragments":["of"]},{"Key":"verbose fn","Fragments":["-\u003e"]},{"Key":"fn -\u003e","Fragments":["variety"]},{"Key":"-\u003e variety","Fragments":["for"]},{"Key":"variety for","Fragments":["something"]},{"Key":"something so","Fragments":["simple,"]},{"Key":"so simple,","Fragments":["but"]},{"Key":"simple, but","Fragments":["a","in"]},{"Key":"iteration based","Fragments":["on","on","on"]},{"Key":"a one-line","Fragments":["change","method"]},{"Key":"one-line change","Fragments":["seems"]},{"Key":"change seems","Fragments":["like"]},{"Key":"Just out","Fragments":["of"]},{"Key":"curiosity, what","Fragments":["don't"]},{"Key":"what don't","Fragments":["you"]},{"Key":"it's different","Fragments":["from"]},{"Key":"different from","Fragments":["every","what"]},{"Key":"from every","Fragments":["other"]},{"Key":"every other","Fragments":["language"]},{"Key":"other language","Fragments":["that","I","besides"]},{"Key":"has comprehensions","Fragments":["that"]},{"Key":"comprehensions that","Fragments":["I"]},{"Key":"know, without","Fragments":["a"]},{"Key":"clear reason","Fragments":["to"]},{"Key":"the filters","Fragments":["don't"]},{"Key":"filters don't","Fragments":["behave"]},{"Key":"don't behave","Fragments":["as"]},{"Key":"behave as","Fragments":["guards."]},{"Key":"as guards.","Fragments":["I"]},{"Key":"guards. I","Fragments":["don't"]},{"Key":"the abbreviations","Fragments":["\"lc\""]},{"Key":"abbreviations \"lc\"","Fragments":["and"]},{"Key":"\"lc\" and","Fragments":["\"bc\""]},{"Key":"and \"bc\"","Fragments":["where"]},{"Key":"\"bc\" where","Fragments":["the"]},{"Key":"the generators","Fragments":["have"]},{"Key":"generators have","Fragments":["bigger"]},{"Key":"have bigger","Fragments":["less"]},{"Key":"bigger less","Fragments":["ambiguous"]},{"Key":"less ambiguous","Fragments":["syntax"]},{"Key":"ambiguous syntax","Fragments":["\"inlist\","]},{"Key":"syntax \"inlist\",","Fragments":["\"inbits\"."]},{"Key":" Really,","Fragments":["I"]},{"Key":"Really, I","Fragments":["just"]},{"Key":"see anything","Fragments":["*to*"]},{"Key":"anything *to*","Fragments":["like"]},{"Key":"*to* like","Fragments":["about"]},{"Key":"this syntax.","Fragments":["It"]},{"Key":"doesn't do","Fragments":["any","escapes).","much","anything.","OO"]},{"Key":"do any","Fragments":["more","special"]},{"Key":"any more","Fragments":["than","\"right\".","feedback"]},{"Key":"Erlang syntax,","Fragments":["and"]},{"Key":"syntax, and","Fragments":["it"]},{"Key":"nice property","Fragments":["that"]},{"Key":"property that","Fragments":["the"]},{"Key":"the comprehensions","Fragments":["in"]},{"Key":"comprehensions in","Fragments":["Erlang"]},{"Key":"Erlang look","Fragments":["something"]},{"Key":"look something","Fragments":["like","like"]},{"Key":"types that","Fragments":["they","have"]},{"Key":" Error","Fragments":["in"]},{"Key":"Error in","Fragments":["submit"]},{"Key":"Moved anonymous","Fragments":["function"]},{"Key":"named function,","Fragments":["per"]},{"Key":"function, per","Fragments":["suggestion."]},{"Key":"very unreadable","Fragments":["the"]},{"Key":"unreadable the","Fragments":["functions"]},{"Key":"line 16.","Fragments":["These","I","Submitting"]},{"Key":"16. These","Fragments":["functions"]},{"Key":"These functions","Fragments":["doesn´t"]},{"Key":"functions doesn´t","Fragments":["follow"]},{"Key":"doesn´t follow","Fragments":["the"]},{"Key":"normal syntax","Fragments":["of","is"]},{"Key":"of Elixir.","Fragments":["The","A"]},{"Key":"The normal","Fragments":["syntax"]},{"Key":"line ,","Fragments":["if"]},{"Key":"is large","Fragments":["the"]},{"Key":"large the","Fragments":["function"]},{"Key":"function please","Fragments":["put"]},{"Key":"please put","Fragments":["`do`"]},{"Key":"put `do`","Fragments":["and"]},{"Key":"in `angrams?`","Fragments":["in"]},{"Key":"`angrams?` in","Fragments":["two"]},{"Key":"two funs","Fragments":[","]},{"Key":"funs ,","Fragments":["one"]},{"Key":"other when","Fragments":["is"]},{"Key":" `\u0026Kernel.!=/2`","Fragments":["should"]},{"Key":"`\u0026Kernel.!=/2` should","Fragments":["work,"]},{"Key":"should work,","Fragments":["no"]},{"Key":"work, no","Fragments":["need"]},{"Key":" @demond","Fragments":["-"]},{"Key":"@demond -","Fragments":["Thanks"]},{"Key":"- Thanks","Fragments":["for","for"]},{"Key":"hadn't learnt","Fragments":["about","the"]},{"Key":"about ```defp```","Fragments":["yet."]},{"Key":"```defp``` yet.","Fragments":["(Did"]},{"Key":"yet. (Did","Fragments":["I"]},{"Key":"(Did I","Fragments":["mention"]},{"Key":"I mention","Fragments":["I"]},{"Key":"mention I","Fragments":["was"]},{"Key":"was new","Fragments":["to"]},{"Key":"to elixir?","Fragments":[":)"]},{"Key":"should know","Fragments":["RegEx"]},{"Key":"know RegEx","Fragments":["better"]},{"Key":"RegEx better","Fragments":["than"]},{"Key":"that ```|```","Fragments":["in"]},{"Key":"```|``` in","Fragments":["there."]},{"Key":"I interpreted","Fragments":["the"]},{"Key":"interpreted the","Fragments":["```String.ends_with?```"]},{"Key":"the ```String.ends_with?```","Fragments":["docs"]},{"Key":"```String.ends_with?``` docs","Fragments":["a"]},{"Key":"docs a","Fragments":["little"]},{"Key":"too literally.","Fragments":["Good"]},{"Key":"literally. Good","Fragments":["to"]},{"Key":"know it'll","Fragments":["accept"]},{"Key":"it'll accept","Fragments":["a"]},{"Key":"string or","Fragments":["an"]},{"Key":"or an","Fragments":["array."]},{"Key":"first bit","Fragments":["of","of"]},{"Key":"I've written.","Fragments":["It's"]},{"Key":"written. It's","Fragments":["pretty"]},{"Key":"much a","Fragments":["direct"]},{"Key":"a direct","Fragments":["port"]},{"Key":"direct port","Fragments":["of"]},{"Key":"port of","Fragments":["how"]},{"Key":"Ruby. I'd","Fragments":["be"]},{"Key":"be keen","Fragments":["to"]},{"Key":"keen to","Fragments":["here"]},{"Key":"to here","Fragments":["any"]},{"Key":"here any","Fragments":["tips"]},{"Key":"tips anyone","Fragments":["has"]},{"Key":"anyone has","Fragments":["on","any","a"]},{"Key":"has on","Fragments":["how","the"]},{"Key":"functional /","Fragments":["Elixir"]},{"Key":"/ Elixir","Fragments":["way."]},{"Key":" `String.ends_with(phrase,","Fragments":["[\"?\"])`"]},{"Key":"`String.ends_with(phrase, [\"?\"])`","Fragments":["may"]},{"Key":"[\"?\"])` may","Fragments":["be"]},{"Key":"as `String.ends_with(phrase,","Fragments":["\"?\")`."]},{"Key":"That `%r/[a-z|A-Z]/`","Fragments":["seems"]},{"Key":"`%r/[a-z|A-Z]/` seems","Fragments":["weird,"]},{"Key":"seems weird,","Fragments":["are"]},{"Key":"weird, are","Fragments":["you"]},{"Key":"place `|`","Fragments":["in"]},{"Key":"`|` in","Fragments":["the"]},{"Key":"character class?","Fragments":["Also,"]},{"Key":"class? Also,","Fragments":["what"]},{"Key":"Also, what","Fragments":["happens"]},{"Key":"you intend","Fragments":["to","to"]},{"Key":"intend to","Fragments":["make","make"]},{"Key":"make `question?`,","Fragments":["`shouting?`","`silence?`"]},{"Key":"`silence?` public","Fragments":["(`def`)?"]},{"Key":"public (`def`)?","Fragments":["To"]},{"Key":"(`def`)? To","Fragments":["make"]},{"Key":"private you","Fragments":["can","can"]},{"Key":"Overall though","Fragments":["this"]},{"Key":"though this","Fragments":["code","partition"]},{"Key":"Tip: Erlang","Fragments":["has"]},{"Key":"Erlang has","Fragments":["the","different","a"]},{"Key":"the [:math](http://www.erlang.org/doc/man/math.html)","Fragments":["library,"]},{"Key":"[:math](http://www.erlang.org/doc/man/math.html) library,","Fragments":["though"]},{"Key":"library, though","Fragments":["to"]},{"Key":"though to","Fragments":["make"]},{"Key":"work you","Fragments":["may","need"]},{"Key":"use `trunc()`","Fragments":["to"]},{"Key":"`trunc()` to","Fragments":["convert"]},{"Key":"a float","Fragments":["to","and"]},{"Key":"float to","Fragments":["an"]},{"Key":"Elixir, Erlang","Fragments":["and"]},{"Key":"and most","Fragments":["functional","are).","expressive,"]},{"Key":"most functional","Fragments":["programming"]},{"Key":"programming languages","Fragments":["there"]},{"Key":"languages there","Fragments":["is"]},{"Key":"an optimization","Fragments":["called"]},{"Key":"optimization called","Fragments":["the"]},{"Key":"called the","Fragments":["tail","iterator,"]},{"Key":"the tail","Fragments":["call","recursion","recursive","recursion,","and"]},{"Key":"call optimization.","Fragments":["If","So,"]},{"Key":"optimization. If","Fragments":["the"]},{"Key":"that same","Fragments":["function"]},{"Key":"function the","Fragments":["stack","last","stack","stack","stack","stack","stack","stack","stack"]},{"Key":"stack frame","Fragments":["of"]},{"Key":"frame of","Fragments":["the"]},{"Key":"caller is","Fragments":["reused"]},{"Key":"is reused","Fragments":["for"]},{"Key":"reused for","Fragments":["the"]},{"Key":"the callee","Fragments":["so"]},{"Key":"callee so","Fragments":["that"]},{"Key":"that no","Fragments":["additional","magical","__info__"]},{"Key":"no additional","Fragments":["memory"]},{"Key":"additional memory","Fragments":["is"]},{"Key":"memory is","Fragments":["used"]},{"Key":"used when","Fragments":["executing"]},{"Key":"when executing","Fragments":["the"]},{"Key":"executing the","Fragments":["call."]},{"Key":"the call.","Fragments":["Often"]},{"Key":"call. Often","Fragments":["this"]},{"Key":"Often this","Fragments":["makes"]},{"Key":"this makes","Fragments":["a"]},{"Key":"a dramatic","Fragments":["difference"]},{"Key":"dramatic difference","Fragments":["in"]},{"Key":"the amount","Fragments":["of"]},{"Key":"of memory","Fragments":["needed.","`[d","use"]},{"Key":"the light","Fragments":["of"]},{"Key":"is efficient","Fragments":["in","in"]},{"Key":"its use","Fragments":["of"]},{"Key":" Writing","Fragments":["some","this"]},{"Key":"Writing some","Fragments":["simple"]},{"Key":"some simple","Fragments":["clauses"]},{"Key":"simple clauses","Fragments":["like"]},{"Key":"clauses like","Fragments":["this"]},{"Key":"defp is_sublist([],","Fragments":["_),"]},{"Key":"is_sublist([], _),","Fragments":["do:"]},{"Key":"defp is_sublist(_,","Fragments":["[]),"]},{"Key":"is_sublist(_, []),","Fragments":["do:"]},{"Key":"[]), do:","Fragments":["false","false","true"]},{"Key":"determine that","Fragments":["something"]},{"Key":"that something","Fragments":["is","that"]},{"Key":"a sublist","Fragments":["simply","and","of"]},{"Key":"sublist simply","Fragments":["by"]},{"Key":"simply by","Fragments":["looking"]},{"Key":"lists could","Fragments":["improve"]},{"Key":"could improve","Fragments":["the"]},{"Key":"the efficiency","Fragments":["of","but","of"]},{"Key":"efficiency of","Fragments":["`is_sublist`","appends"]},{"Key":"of `is_sublist`","Fragments":["further?"]},{"Key":"Just learning","Fragments":["Elixir"]},{"Key":"operator (which","Fragments":["is"]},{"Key":"very cool)","Fragments":["and"]},{"Key":"cool) and","Fragments":["using"]},{"Key":"to iterations","Fragments":["and"]},{"Key":"iterations and","Fragments":["immutable"]},{"Key":"and immutable","Fragments":["variables."]},{"Key":"|\u003e ).","Fragments":["I"]},{"Key":"). I","Fragments":["think"]},{"Key":"could silplify","Fragments":["the"]},{"Key":"silplify the","Fragments":["count/1"]},{"Key":"the count/1","Fragments":["function."]},{"Key":"new solution","Fragments":["for"]},{"Key":"one lime","Fragments":["change."]},{"Key":"lime change.","Fragments":["That's"]},{"Key":"change. That's","Fragments":["what"]},{"Key":"what exercism","Fragments":["is"]},{"Key":"exercism is","Fragments":["all"]},{"Key":"Very minor:","Fragments":["typical"]},{"Key":"minor: typical","Fragments":["is"]},{"Key":"typical is","Fragments":["`defp"]},{"Key":"is `defp","Fragments":["name(args),"]},{"Key":"`defp name(args),","Fragments":["do`,"]},{"Key":"name(args), do`,","Fragments":["not"]},{"Key":"do`, not","Fragments":["`defp"]},{"Key":"not `defp","Fragments":["name(args)"]},{"Key":"`defp name(args)","Fragments":[",do`"]},{"Key":"name(args) ,do`","Fragments":["(it's"]},{"Key":",do` (it's","Fragments":["pretty"]},{"Key":"(it's pretty","Fragments":["much"]},{"Key":"thing: you","Fragments":["could","don't","don't"]},{"Key":"words, saves","Fragments":["a"]},{"Key":"saves a","Fragments":["`String.split`"]},{"Key":"a `String.split`","Fragments":["later."]},{"Key":"Also, beware","Fragments":["of"]},{"Key":"beware of","Fragments":["`\\w`"]},{"Key":"of `\\w`","Fragments":["in"]},{"Key":"`\\w` in","Fragments":["real"]},{"Key":"in real","Fragments":["code,","words","world"]},{"Key":"real code,","Fragments":["it"]},{"Key":"it considers","Fragments":["\"_\""]},{"Key":"considers \"_\"","Fragments":["to","to"]},{"Key":"\"_\" to","Fragments":["be","be"]},{"Key":"letter which","Fragments":["might"]},{"Key":"be what","Fragments":["you"]},{"Key":"Ok !!","Fragments":["Thanks"]},{"Key":"!! Thanks","Fragments":["for"]},{"Key":"Having defined","Fragments":["`bottle/1`,"]},{"Key":"defined `bottle/1`,","Fragments":["you"]},{"Key":"`bottle/1`, you","Fragments":["could"]},{"Key":"in `second_line/1`","Fragments":["to"]},{"Key":"`second_line/1` to","Fragments":["reduce"]},{"Key":"of clauses","Fragments":["you","in"]},{"Key":"clauses you","Fragments":["need."]},{"Key":"Ooh, or","Fragments":["`String.replace(number,%r/(...)(...)(....)/,\"(\\\\1)"]},{"Key":"or `String.replace(number,%r/(...)(...)(....)/,\"(\\\\1)","Fragments":["\\\\2-\\\\3\").`"]},{"Key":"`String.replace(number,%r/(...)(...)(....)/,\"(\\\\1) \\\\2-\\\\3\").`","Fragments":["That"]},{"Key":"\\\\2-\\\\3\").` That","Fragments":["might"]},{"Key":"work quite","Fragments":["nicely!"]},{"Key":"of room","Fragments":["for"]},{"Key":"room for","Fragments":["improvement."]},{"Key":"for improvement.","Fragments":["I"]},{"Key":"improvement. I","Fragments":["just"]},{"Key":"Why run","Fragments":["`number`"]},{"Key":"run `number`","Fragments":["on"]},{"Key":"`number` on","Fragments":["`str`"]},{"Key":"on `str`","Fragments":["in"]},{"Key":"`str` in","Fragments":["`exchange`,"]},{"Key":"in `exchange`,","Fragments":["`subscribe_no`"]},{"Key":"`exchange`, `subscribe_no`","Fragments":["and"]},{"Key":"`subscribe_no` and","Fragments":["`area_code`?"]},{"Key":"and `area_code`?","Fragments":["It"]},{"Key":"`area_code`? It","Fragments":["would"]},{"Key":"faster to","Fragments":["do"]},{"Key":" `String.at(a,","Fragments":["0)"]},{"Key":"`String.at(a, 0)","Fragments":["=="]},{"Key":"0) ==","Fragments":["b`"]},{"Key":"== b`","Fragments":["could","comparison"]},{"Key":"b` could","Fragments":["be"]},{"Key":"as `String.starts_with?(a,","Fragments":["b)`."]},{"Key":"write line","Fragments":["13","2"]},{"Key":"line 13","Fragments":["using","more","to"]},{"Key":"13 using","Fragments":["`HashDict.new(enumerable,"]},{"Key":"using `HashDict.new(enumerable,","Fragments":["transform)`?"]},{"Key":"I'm ashamed","Fragments":["I"]},{"Key":"ashamed I","Fragments":["didn't"]},{"Key":"using bit","Fragments":["shifting"]},{"Key":"bit shifting","Fragments":["in","code","from"]},{"Key":"shifting in","Fragments":["my"]},{"Key":"is by","Fragments":["far"]},{"Key":"cleanest solution","Fragments":["I've"]},{"Key":"doesn't result","Fragments":["in"]},{"Key":"result in","Fragments":["two","parentheses","a","the","a"]},{"Key":"two empty","Fragments":["matches"]},{"Key":"empty matches","Fragments":["at"]},{"Key":"matches at","Fragments":["the"]},{"Key":"Well, that's","Fragments":["not"]},{"Key":"not what","Fragments":["`String.split/3`"]},{"Key":"what `String.split/3`","Fragments":["is"]},{"Key":"`String.split/3` is","Fragments":["for,"]},{"Key":"is for,","Fragments":["so"]},{"Key":"for, so","Fragments":["it's"]},{"Key":"no surprise","Fragments":["that"]},{"Key":"surprise that","Fragments":["it"]},{"Key":"doesn't give","Fragments":["you"]},{"Key":"result you're","Fragments":["looking"]},{"Key":"you're looking","Fragments":["for.","for"]},{"Key":"looking for.","Fragments":["You'd"]},{"Key":"for. You'd","Fragments":["have"]},{"Key":"You'd have","Fragments":["a"]},{"Key":"better time","Fragments":["writing"]},{"Key":"time writing","Fragments":["`pretty/1`"]},{"Key":"writing `pretty/1`","Fragments":["in"]},{"Key":"`pretty/1` in","Fragments":["terms"]},{"Key":"of `String.replace/4`,","Fragments":["or"]},{"Key":"`String.replace/4`, or","Fragments":["`Regex.run/3`."]},{"Key":"Note also","Fragments":["that"]},{"Key":"has string","Fragments":["interpolation"]},{"Key":"interpolation too,","Fragments":["and"]},{"Key":"too, and","Fragments":["you"]},{"Key":"as easily","Fragments":["extract","take"]},{"Key":"easily extract","Fragments":["the"]},{"Key":"characters you're","Fragments":["looking"]},{"Key":"for by","Fragments":["position"]},{"Key":"by position","Fragments":["without"]},{"Key":"position without","Fragments":["using"]},{"Key":" Alternatively","Fragments":["something","because","it's","you"]},{"Key":"Alternatively something","Fragments":["like"]},{"Key":"like `[area_code,","Fragments":["exchange,"]},{"Key":"`[area_code, exchange,","Fragments":["subscriber_no]"]},{"Key":"exchange, subscriber_no]","Fragments":["="]},{"Key":"subscriber_no] =","Fragments":["[String.slice(number,"]},{"Key":"= [String.slice(number,","Fragments":["0,"]},{"Key":"[String.slice(number, 0,","Fragments":["3),"]},{"Key":"0, 3),","Fragments":["String.slice(number,"]},{"Key":"3), String.slice(number,","Fragments":["3,","6,"]},{"Key":"String.slice(number, 3,","Fragments":["3),"]},{"Key":"3, 3),","Fragments":["String.slice(number,"]},{"Key":"String.slice(number, 6,","Fragments":["4)]`"]},{"Key":"6, 4)]`","Fragments":["?"]},{"Key":"Or `%r\\(.{3})(.{3})(.{4})/`","Fragments":["perhaps..."]},{"Key":"`%r\\(.{3})(.{3})(.{4})/` perhaps...","Fragments":["though"]},{"Key":"perhaps... though","Fragments":["that's"]},{"Key":"though that's","Fragments":["actually","a"]},{"Key":"that's actually","Fragments":["longer."]},{"Key":" Figured","Fragments":["out"]},{"Key":"Figured out","Fragments":["how"]},{"Key":"sort a","Fragments":["list"]},{"Key":"list using","Fragments":["the","`String.to_char_list`"]},{"Key":"Erlang Lists","Fragments":["module"]},{"Key":"Lists module","Fragments":["and"]},{"Key":"refactored the","Fragments":["match","nucleotide"]},{"Key":"match function","Fragments":["to"]},{"Key":"function capture","Fragments":["syntax.","to"]},{"Key":"I've worked","Fragments":["with"]},{"Key":"worked with","Fragments":["dates"]},{"Key":"with dates","Fragments":["enough"]},{"Key":"dates enough","Fragments":["in"]},{"Key":"my lifetime","Fragments":["that"]},{"Key":"lifetime that","Fragments":["this"]},{"Key":"very magic","Fragments":["number"]},{"Key":"number :)","Fragments":["I'm"]},{"Key":"to bother","Fragments":["making"]},{"Key":"bother making","Fragments":["the"]},{"Key":"the change,","Fragments":["but"]},{"Key":"change, but","Fragments":["that's"]},{"Key":"that's fair","Fragments":["feedback."]},{"Key":" `\"(\\\\1)","Fragments":["\\\\2-\\\\3\"`"]},{"Key":"`\"(\\\\1) \\\\2-\\\\3\"`","Fragments":["might"]},{"Key":"\\\\2-\\\\3\"` might","Fragments":["be"]},{"Key":"better written","Fragments":["as","as","as","as"]},{"Key":"as `%S\"(\\1)","Fragments":["\\2-\\3\"`"]},{"Key":"`%S\"(\\1) \\2-\\3\"`","Fragments":["(%S"]},{"Key":"\\2-\\3\"` (%S","Fragments":["doesn't"]},{"Key":"(%S doesn't","Fragments":["do"]},{"Key":" `%r/(.{3})(.{3})(.{4})/`","Fragments":["looks"]},{"Key":"`%r/(.{3})(.{3})(.{4})/` looks","Fragments":["better"]},{"Key":"me, it's","Fragments":["longer","the"]},{"Key":"it's longer","Fragments":["but"]},{"Key":"longer but","Fragments":["conveys"]},{"Key":"but conveys","Fragments":["information"]},{"Key":"conveys information","Fragments":["better."]},{"Key":"I'd put","Fragments":["the","the"]},{"Key":"the 86400","Fragments":["in"]},{"Key":"86400 in","Fragments":["a"]},{"Key":"attribute like","Fragments":["`@eula"]},{"Key":"like `@eula","Fragments":["60"]},{"Key":"`@eula 60","Fragments":["*"]},{"Key":"60 *","Fragments":["60","24`"]},{"Key":"* 60","Fragments":["*"]},{"Key":"* 24`","Fragments":["to"]},{"Key":"24` to","Fragments":["avoid"]},{"Key":"avoid a","Fragments":["\"magic\""]},{"Key":"a \"magic\"","Fragments":["constant."]},{"Key":"tests passing.","Fragments":["I'll"]},{"Key":"passing. I'll","Fragments":["do"]},{"Key":"some refactoring","Fragments":["later."]},{"Key":"For slightly","Fragments":["faster"]},{"Key":"slightly faster","Fragments":["code","too).","(no","(as"]},{"Key":"faster code","Fragments":["you"]},{"Key":"code you","Fragments":["could","see"]},{"Key":" @russell","Fragments":["HashDict.new"]},{"Key":"@russell HashDict.new","Fragments":["[{?A,"]},{"Key":"{?G, 0},","Fragments":["{?T,"]},{"Key":"And write","Fragments":["`Enum.reduce(@russell)`."]},{"Key":"empty dict","Fragments":["only"]},{"Key":"dict only","Fragments":["gets"]},{"Key":"only gets","Fragments":["computed","cleaned","passed","cleaned","cleaned","cleaned","cleaned","cleaned","cleaned"]},{"Key":"gets computed","Fragments":["once."]},{"Key":" `|\u003e","Fragments":["+"]},{"Key":"`|\u003e +","Fragments":["@delbert`"]},{"Key":"+ @delbert`","Fragments":["is"]},{"Key":"@delbert` is","Fragments":["interesting."]},{"Key":"is interesting.","Fragments":["I","I'm"]},{"Key":"interesting. I","Fragments":["didn't","wasn't"]},{"Key":"could something","Fragments":["like"]},{"Key":" `from`","Fragments":["could"]},{"Key":"`from` could","Fragments":["be"]},{"Key":"written `date_plus_giga_seconds_to","Fragments":["|\u003e"]},{"Key":"`date_plus_giga_seconds_to |\u003e","Fragments":["elem(0)`,"]},{"Key":"|\u003e elem(0)`,","Fragments":["though"]},{"Key":"elem(0)`, though","Fragments":["pattern"]},{"Key":"though pattern","Fragments":["matching"]},{"Key":"like more","Fragments":["pattern"]},{"Key":"more pattern","Fragments":["matching"]},{"Key":"the `|\u003e","Fragments":["operator`","iolist_to_binary`)."]},{"Key":"`|\u003e operator`","Fragments":["trick,"]},{"Key":"operator` trick,","Fragments":["it"]},{"Key":"trick, it","Fragments":["only"]},{"Key":"on `+`","Fragments":["and"]},{"Key":"`+` and","Fragments":["`-`"]},{"Key":"and `-`","Fragments":["and","not."]},{"Key":"`-` and","Fragments":["only"]},{"Key":"because those","Fragments":["have","boil","letters"]},{"Key":"those have","Fragments":["unary"]},{"Key":"have unary","Fragments":["versions."]},{"Key":"unary versions.","Fragments":["You'll"]},{"Key":"versions. You'll","Fragments":["find"]},{"Key":"You'll find","Fragments":["out"]},{"Key":"find out","Fragments":["quickly","that","about","how"]},{"Key":"out quickly","Fragments":["enough"]},{"Key":"quickly enough","Fragments":["when"]},{"Key":"enough when","Fragments":["using"]},{"Key":"using other","Fragments":["operators","basic"]},{"Key":"other operators","Fragments":["though,"]},{"Key":"operators though,","Fragments":["it"]},{"Key":"though, it","Fragments":["throws"]},{"Key":"it throws","Fragments":["a"]},{"Key":"throws a","Fragments":["syntax"]},{"Key":"What a","Fragments":["pitty"]},{"Key":"a pitty","Fragments":[",is"]},{"Key":"pitty ,is","Fragments":["a"]},{"Key":",is a","Fragments":["trick"]},{"Key":"a trick","Fragments":["very","I","from","to"]},{"Key":"trick very","Fragments":["powerfull"]},{"Key":"very powerfull","Fragments":["."]},{"Key":"powerfull .","Fragments":["Thanks"]},{"Key":". Thanks","Fragments":["for"]},{"Key":"It's inconsistent","Fragments":["to"]},{"Key":"calls everywhere","Fragments":["but"]},{"Key":"everywhere but","Fragments":["`pretty/1`,"]},{"Key":"but `pretty/1`,","Fragments":["otherwise"]},{"Key":"`pretty/1`, otherwise","Fragments":["this"]},{"Key":" Mm,","Fragments":["yeah,","in","probably"]},{"Key":"Mm, yeah,","Fragments":["I"]},{"Key":"did notice","Fragments":["I"]},{"Key":"notice I","Fragments":["was"]},{"Key":"difference I","Fragments":["suppose"]},{"Key":"suppose is","Fragments":["that"]},{"Key":"that `pretty/1`'s","Fragments":["String.replace"]},{"Key":"`pretty/1`'s String.replace","Fragments":["arguments"]},{"Key":"String.replace arguments","Fragments":["are"]},{"Key":"are full","Fragments":["of"]},{"Key":"of \"noisy\"","Fragments":["punctuation-type"]},{"Key":"\"noisy\" punctuation-type","Fragments":["characters,"]},{"Key":"punctuation-type characters,","Fragments":["so"]},{"Key":"characters, so","Fragments":["I"]},{"Key":"was kind","Fragments":["of"]},{"Key":"of reluctant","Fragments":["to"]},{"Key":"reluctant to","Fragments":["enclose"]},{"Key":"to enclose","Fragments":["them"]},{"Key":"enclose them","Fragments":["in"]},{"Key":"in further","Fragments":["parentheses."]},{"Key":"further parentheses.","Fragments":["Having"]},{"Key":"parentheses. Having","Fragments":["said"]},{"Key":"Having said","Fragments":["that,","that,"]},{"Key":"said that,","Fragments":["there's","any"]},{"Key":"that, there's","Fragments":["very"]},{"Key":"there's very","Fragments":["little"]},{"Key":"little excuse","Fragments":["for"]},{"Key":"excuse for","Fragments":["being"]},{"Key":"being inconsistent","Fragments":["about"]},{"Key":"inconsistent about","Fragments":["that"]},{"Key":" @caterina","Fragments":["-"]},{"Key":"@caterina -","Fragments":["Thanks"]},{"Key":"I've had","Fragments":["a"]},{"Key":"for Regex.scan","Fragments":["but"]},{"Key":"Regex.scan but","Fragments":["I"]},{"Key":"could achieve","Fragments":["the","exactly"]},{"Key":"the remove","Fragments":["of"]},{"Key":"remove of","Fragments":["punctuation"]},{"Key":"of punctuation","Fragments":["and"]},{"Key":"and splitting","Fragments":["the"]},{"Key":"words with","Fragments":["the","a","hyphens).","\"-\","]},{"Key":"same call.","Fragments":["Can"]},{"Key":"call. Can","Fragments":["you"]},{"Key":" Didn't","Fragments":["realise"]},{"Key":"Didn't realise","Fragments":["```\\w```"]},{"Key":"realise ```\\w```","Fragments":["would"]},{"Key":"```\\w``` would","Fragments":["match"]},{"Key":"on ```_```","Fragments":["so"]},{"Key":"```_``` so","Fragments":["that's"]},{"Key":"so that's","Fragments":["a","not","there.","there."]},{"Key":"good tip.","Fragments":["I"]},{"Key":"make any","Fragments":["changes","presumptions"]},{"Key":"any changes","Fragments":["for"]},{"Key":"that unless","Fragments":["there","you're"]},{"Key":"it though.","Fragments":["I","I"]},{"Key":"code as","Fragments":["simple","if","well."]},{"Key":"that helps,","Fragments":["it"]},{"Key":"helps, it","Fragments":["would"]},{"Key":"code considerably","Fragments":["longer"]},{"Key":"considerably longer","Fragments":["(which"]},{"Key":"longer (which","Fragments":["hurts"]},{"Key":"(which hurts","Fragments":["readability)"]},{"Key":"hurts readability)","Fragments":["and"]},{"Key":"readability) and","Fragments":["the"]},{"Key":"already there","Fragments":["in"]},{"Key":"there in","Fragments":["the"]},{"Key":"result so","Fragments":["the"]},{"Key":"benefit is","Fragments":["negligible."]},{"Key":"Well I'm","Fragments":["definitely"]},{"Key":"definitely learning","Fragments":["something."]},{"Key":"learning something.","Fragments":["Never"]},{"Key":"something. Never","Fragments":["seen"]},{"Key":"Never seen","Fragments":["the"]},{"Key":"the \"unicode","Fragments":["character"]},{"Key":"\"unicode character","Fragments":["properties\""]},{"Key":"character properties\"","Fragments":["syntax"]},{"Key":"properties\" syntax","Fragments":["before."]},{"Key":"syntax before.","Fragments":["Unfortunately"]},{"Key":"before. Unfortunately","Fragments":["it"]},{"Key":"Unfortunately it","Fragments":["still"]},{"Key":"it still","Fragments":["doesn't","feels","contains"]},{"Key":"still doesn't","Fragments":["work"]},{"Key":"it splits","Fragments":["words"]},{"Key":"splits words","Fragments":["that"]},{"Key":"that contain","Fragments":["punctuation","only"]},{"Key":"contain punctuation","Fragments":["chars"]},{"Key":"punctuation chars","Fragments":["rather","then"]},{"Key":"chars rather","Fragments":["than"]},{"Key":"just ignoring","Fragments":["or"]},{"Key":"ignoring or","Fragments":["removing"]},{"Key":"or removing","Fragments":["them."]},{"Key":" Off","Fragments":["the"]},{"Key":"Off the","Fragments":["top"]},{"Key":"my head:","Fragments":["`Regex.scan(%r/([\\p{L}\\p{N}]+)/)"]},{"Key":"head: `Regex.scan(%r/([\\p{L}\\p{N}]+)/)","Fragments":["|\u003e"]},{"Key":"`Regex.scan(%r/([\\p{L}\\p{N}]+)/) |\u003e","Fragments":["Enum.map(\u0026hd/1)`"]},{"Key":"|\u003e Enum.map(\u0026hd/1)`","Fragments":["(using","to"]},{"Key":"Enum.map(\u0026hd/1)` (using","Fragments":["Unicode"]},{"Key":"(using Unicode","Fragments":["character"]},{"Key":"Unicode character","Fragments":["classes"]},{"Key":"classes to","Fragments":["select"]},{"Key":"to select","Fragments":["letters","only"]},{"Key":"select letters","Fragments":["and"]},{"Key":" Don´t","Fragments":["you"]},{"Key":"Don´t you","Fragments":["think"]},{"Key":"you extract","Fragments":["the"]},{"Key":"into predicate","Fragments":["methods?"]},{"Key":" Though","Fragments":["the"]},{"Key":"results have","Fragments":["the"]},{"Key":"conditions ,","Fragments":["I"]},{"Key":"to abbreviate","Fragments":["this"]},{"Key":"abbreviate this","Fragments":["`cond`."]},{"Key":"this `cond`.","Fragments":["Anyway"]},{"Key":"`cond`. Anyway","Fragments":["is"]},{"Key":"Anyway is","Fragments":["a"]},{"Key":"a subjective","Fragments":["minor"]},{"Key":"subjective minor","Fragments":["point."]},{"Key":"doesn't it","Fragments":["work?"]},{"Key":"it work?","Fragments":["If"]},{"Key":"If a","Fragments":["word"]},{"Key":"word contains","Fragments":["punctuation"]},{"Key":"contains punctuation","Fragments":["chars"]},{"Key":"chars then","Fragments":["logically"]},{"Key":"then logically","Fragments":["it"]},{"Key":"logically it","Fragments":["should"]},{"Key":"be two","Fragments":["words,"]},{"Key":"two words,","Fragments":["at"]},{"Key":"words, at","Fragments":["least"]},{"Key":"least how","Fragments":["I"]},{"Key":"The `Regex.scan`","Fragments":["approach"]},{"Key":"`Regex.scan` approach","Fragments":["certainly"]},{"Key":"approach certainly","Fragments":["passes"]},{"Key":"certainly passes","Fragments":["the"]},{"Key":"tests, it's","Fragments":["how"]},{"Key":"it's how","Fragments":["I"]},{"Key":"solved the","Fragments":["exercise:"]},{"Key":"defmodule Words","Fragments":["do"]},{"Key":"def count(s)","Fragments":["do"]},{"Key":" matches","Fragments":["="]},{"Key":"matches =","Fragments":["Regex.scan(%r/[\\p{L}\\p{N}]+/,"]},{"Key":"= Regex.scan(%r/[\\p{L}\\p{N}]+/,","Fragments":["s)"]},{"Key":" Enum.reduce(matches,","Fragments":["HashDict.new(),"]},{"Key":"Enum.reduce(matches, HashDict.new(),","Fragments":["fn"]},{"Key":"HashDict.new(), fn","Fragments":["[w],"]},{"Key":"fn [w],","Fragments":["d"]},{"Key":"[w], d","Fragments":["-\u003e"]},{"Key":" Dict.update(d,","Fragments":["String.downcase(w),"]},{"Key":"Dict.update(d, String.downcase(w),","Fragments":["1,"]},{"Key":"String.downcase(w), 1,","Fragments":["\u0026(\u00261+1))"]},{"Key":"Should a","Fragments":["string"]},{"Key":"string \"*\"","Fragments":["be"]},{"Key":"\"*\" be","Fragments":["considered"]},{"Key":"That pipeline","Fragments":["on"]},{"Key":"pipeline on","Fragments":["line"]},{"Key":"4 is","Fragments":["confusing,"]},{"Key":"is confusing,","Fragments":["you"]},{"Key":"confusing, you","Fragments":["might"]},{"Key":"as `(speak","Fragments":["|\u003e"]},{"Key":"`(speak |\u003e","Fragments":["String.strip"]},{"Key":"|\u003e String.strip","Fragments":["|\u003e"]},{"Key":"String.strip |\u003e","Fragments":["String.length)"]},{"Key":"0`. Even","Fragments":["better,"]},{"Key":"Even better,","Fragments":["`String.length(s)"]},{"Key":"better, `String.length(s)","Fragments":["=="]},{"Key":"`String.length(s) ==","Fragments":["0`","0`","0`","0`","0`","0`","0`"]},{"Key":"as `s","Fragments":["==","==","==","==","==","=="]},{"Key":"`s ==","Fragments":["\"\"`","\"\"`.","\"\"`.","\"\"`","\"\"`","\"\"`.","\"\"`.","\"\"`."]},{"Key":"\"\"` (I","Fragments":["suspect"]},{"Key":"(I suspect","Fragments":["this","it"]},{"Key":"is every","Fragments":["so"]},{"Key":"every so","Fragments":["slightly"]},{"Key":"so slightly","Fragments":["faster","harder"]},{"Key":"Your `same_letters`","Fragments":["implementation"]},{"Key":"`same_letters` implementation","Fragments":["is"]},{"Key":"certainly creative,","Fragments":["but"]},{"Key":"creative, but","Fragments":["wouldn't"]},{"Key":"but wouldn't","Fragments":["`List.zip`"]},{"Key":"wouldn't `List.zip`","Fragments":["combined"]},{"Key":"`List.zip` combined","Fragments":["with"]},{"Key":"with `Enum.all?`","Fragments":["achieve","and"]},{"Key":"`Enum.all?` achieve","Fragments":["the"]},{"Key":"My apologies.","Fragments":["I"]},{"Key":"apologies. I","Fragments":["'thought'"]},{"Key":"I 'thought'","Fragments":["there"]},{"Key":"'thought' there","Fragments":["was"]},{"Key":"that asserted","Fragments":["the"]},{"Key":"asserted the","Fragments":["the"]},{"Key":"punctuation shouldn't","Fragments":["split."]},{"Key":"shouldn't split.","Fragments":["It's"]},{"Key":"split. It's","Fragments":["an"]},{"Key":"It's an","Fragments":["interesting"]},{"Key":"interesting edge","Fragments":["case"]},{"Key":"edge case","Fragments":["and","in"]},{"Key":"that defines","Fragments":["the"]},{"Key":"the behaviour","Fragments":["either"]},{"Key":"behaviour either","Fragments":["way."]},{"Key":"your solution.","Fragments":["It's"]},{"Key":"solution. It's","Fragments":["very"]},{"Key":"It's very","Fragments":["concise.","brute","readable."]},{"Key":"very concise.","Fragments":["I"]},{"Key":"concise. I","Fragments":["hadn't"]},{"Key":"learnt the","Fragments":["\u0026(\u00261+1)"]},{"Key":"the \u0026(\u00261+1)","Fragments":["syntax"]},{"Key":"\u0026(\u00261+1) syntax","Fragments":["yet"]},{"Key":"syntax yet","Fragments":["so"]},{"Key":"yet so","Fragments":["I'll"]},{"Key":"I'll add","Fragments":["that","some","that"]},{"Key":"it's my","Fragments":["inexperience"]},{"Key":"my inexperience","Fragments":["with","with"]},{"Key":"inexperience with","Fragments":["functional","tail"]},{"Key":"with functional","Fragments":["programming","programming"]},{"Key":"programming though.","Fragments":["I'm"]},{"Key":"though. I'm","Fragments":["going"]},{"Key":"to mark","Fragments":["this","subsequent","this","a","a","some"]},{"Key":"a peak","Fragments":["at"]},{"Key":"peak at","Fragments":["your"]},{"Key":" Hum,","Fragments":["I'm","I","I"]},{"Key":"Hum, I'm","Fragments":["sorry,"]},{"Key":"sorry, this","Fragments":["is"]},{"Key":"first contact","Fragments":["with"]},{"Key":"contact with","Fragments":["elixir,"]},{"Key":"of even","Fragments":["the"]},{"Key":"more basic","Fragments":["idioms."]},{"Key":"basic idioms.","Fragments":["Should"]},{"Key":"idioms. Should","Fragments":["I"]},{"Key":"always wrap","Fragments":["the"]},{"Key":"pipeline result","Fragments":["in"]},{"Key":"parentheses when","Fragments":["using"]},{"Key":" `Enum.reverse(:lists.seq(to,","Fragments":["from))`"]},{"Key":"`Enum.reverse(:lists.seq(to, from))`","Fragments":["is"]},{"Key":"from))` is","Fragments":["much"]},{"Key":"as `:lists.seq(from,","Fragments":["to,"]},{"Key":"`:lists.seq(from, to,","Fragments":["-1)`"]},{"Key":"to, -1)`","Fragments":["or"]},{"Key":"-1)` or","Fragments":["just"]},{"Key":" `reduce`","Fragments":["is","doesn't"]},{"Key":"`reduce` is","Fragments":["not","the","also"]},{"Key":"join strings","Fragments":["together,"]},{"Key":"strings together,","Fragments":["can"]},{"Key":"together, can","Fragments":["you"]},{"Key":"doesn't create","Fragments":["so","an","an","an","an","an","an","an"]},{"Key":"create so","Fragments":["many"]},{"Key":"many temporary","Fragments":["strings?"]},{"Key":"Why `:lists.sort`","Fragments":["and"]},{"Key":"`:lists.sort` and","Fragments":["not"]},{"Key":"not `Enum.sort`?","Fragments":["I"]},{"Key":"`Enum.sort`? I","Fragments":["understand"]},{"Key":"that `:list.sort`","Fragments":["is"]},{"Key":"`:list.sort` is","Fragments":["slightly"]},{"Key":"faster (no","Fragments":["protocol"]},{"Key":"(no protocol","Fragments":["dispatch)"]},{"Key":"protocol dispatch)","Fragments":["but"]},{"Key":"dispatch) but","Fragments":["`Enum.sort`"]},{"Key":"but `Enum.sort`","Fragments":["is"]},{"Key":"`Enum.sort` is","Fragments":["more","implemented,"]},{"Key":"Yes, any","Fragments":["time"]},{"Key":"time you","Fragments":["use","add","pull","accessed","\"change\""]},{"Key":"left argument","Fragments":["of","is","to","to","to","to"]},{"Key":"operator (i.e.","Fragments":["not"]},{"Key":"(i.e. not","Fragments":["just"]},{"Key":"just comparison","Fragments":["but"]},{"Key":"comparison but","Fragments":["also"]},{"Key":"also things","Fragments":["like"]},{"Key":"like `+`)","Fragments":["you"]},{"Key":"`+`) you","Fragments":["should"]},{"Key":"should add","Fragments":["it","that"]},{"Key":"readability. I'm","Fragments":["not"]},{"Key":"sure why,","Fragments":["but"]},{"Key":"but somehow","Fragments":["`a"]},{"Key":"somehow `a","Fragments":["|\u003e"]},{"Key":"|\u003e b","Fragments":["=="]},{"Key":"b ==","Fragments":["4`","c`","c`"]},{"Key":"== 4`","Fragments":["always"]},{"Key":"4` always","Fragments":["parses"]},{"Key":"always parses","Fragments":["as"]},{"Key":"parses as","Fragments":["`a","`f"]},{"Key":"as `a","Fragments":["|\u003e"]},{"Key":"|\u003e (b","Fragments":["=="]},{"Key":"(b ==","Fragments":["4)`"]},{"Key":"== 4)`","Fragments":["for"]},{"Key":"4)` for","Fragments":["me,"]},{"Key":"for me,","Fragments":["maybe","so"]},{"Key":"me, maybe","Fragments":["because","because"]},{"Key":"maybe because","Fragments":["my","I","it's"]},{"Key":"brain thinks","Fragments":["of"]},{"Key":"thinks of","Fragments":["`|\u003e`"]},{"Key":"`|\u003e` as","Fragments":["a","the"]},{"Key":"a \"larger\"","Fragments":["symbol."]},{"Key":"While we're","Fragments":["on"]},{"Key":"we're on","Fragments":["the","the"]},{"Key":"pipelines and","Fragments":["parentheses,"]},{"Key":"and parentheses,","Fragments":["there's"]},{"Key":"parentheses, there's","Fragments":["a"]},{"Key":"a pitfall","Fragments":["you'll","in"]},{"Key":"pitfall you'll","Fragments":["probably"]},{"Key":"probably hit","Fragments":["sooner"]},{"Key":"hit sooner","Fragments":["or"]},{"Key":"sooner or","Fragments":["later:"]},{"Key":"or later:","Fragments":["`Enum.map_join"]},{"Key":"later: `Enum.map_join","Fragments":["[1,2,3],"]},{"Key":"`Enum.map_join [1,2,3],","Fragments":["\",\",","\",\","]},{"Key":"[1,2,3], \",\",","Fragments":["\u0026inspect/1","(\u0026inspect/1"]},{"Key":"\",\", \u0026inspect/1","Fragments":["|\u003e"]},{"Key":"\u0026inspect/1 |\u003e","Fragments":["String.reverse`"]},{"Key":"|\u003e String.reverse`","Fragments":["(very"]},{"Key":"String.reverse` (very","Fragments":["contrived,"]},{"Key":"(very contrived,","Fragments":["I"]},{"Key":"contrived, I","Fragments":["know)"]},{"Key":"I know)","Fragments":["doesn't"]},{"Key":"know) doesn't","Fragments":["work,"]},{"Key":"doesn't work,","Fragments":["you","here's"]},{"Key":"work, you","Fragments":["have"]},{"Key":"write `Enum.map_join([1,2,3],","Fragments":["\",\","]},{"Key":"`Enum.map_join([1,2,3], \",\",","Fragments":["\u0026inspect/1)"]},{"Key":"\",\", \u0026inspect/1)","Fragments":["|\u003e"]},{"Key":"\u0026inspect/1) |\u003e","Fragments":["String.reverse`."]},{"Key":"|\u003e String.reverse`.","Fragments":["The"]},{"Key":"String.reverse`. The","Fragments":["former"]},{"Key":"former gets","Fragments":["parsed"]},{"Key":"gets parsed","Fragments":["as","as"]},{"Key":"parsed as","Fragments":["`Enum.map_join","`\u0026\u0026","`(\u0026"]},{"Key":"as `Enum.map_join","Fragments":["[1,2,3],"]},{"Key":"\",\", (\u0026inspect/1","Fragments":["|\u003e"]},{"Key":"(\u0026inspect/1 |\u003e","Fragments":["String.reverse)`."]},{"Key":" Part","Fragments":["of"]},{"Key":"problem here","Fragments":["is"]},{"Key":"that exercism's","Fragments":["review"]},{"Key":"exercism's review","Fragments":["viewport"]},{"Key":"review viewport","Fragments":["isn't"]},{"Key":"viewport isn't","Fragments":["very"]},{"Key":"isn't very","Fragments":["wide","useful"]},{"Key":"very wide","Fragments":["so"]},{"Key":"wide so","Fragments":["shorter"]},{"Key":"so shorter","Fragments":["lines"]},{"Key":"shorter lines","Fragments":["tend"]},{"Key":"lines tend","Fragments":["to"]},{"Key":"try this","Fragments":["style:"]},{"Key":"do: number(digits)","Fragments":["|\u003e"]},{"Key":"number(digits) |\u003e","Fragments":["String.slice(0,"]},{"Key":"|\u003e String.slice(0,","Fragments":["3)"]},{"Key":" @stephany","Fragments":["I'm"]},{"Key":"@stephany I'm","Fragments":["curious"]},{"Key":"the better","Fragments":["way"]},{"Key":"way will","Fragments":["be,"]},{"Key":"will be,","Fragments":["the"]},{"Key":"be, the","Fragments":["relevant"]},{"Key":"the relevant","Fragments":["functions","functions."]},{"Key":"relevant functions","Fragments":["in"]},{"Key":"library use","Fragments":["the"]},{"Key":"the [relevant","Fragments":["Erlang"]},{"Key":"[relevant Erlang","Fragments":["documentation](http://www.erlang.org/doc/efficiency_guide/binaryhandling.html)"]},{"Key":"Erlang documentation](http://www.erlang.org/doc/efficiency_guide/binaryhandling.html)","Fragments":["repeated"]},{"Key":"documentation](http://www.erlang.org/doc/efficiency_guide/binaryhandling.html) repeated","Fragments":["concatenation"]},{"Key":"repeated concatenation","Fragments":["of"]},{"Key":"concatenation of","Fragments":["binaries","`[[1,","`[[1,"]},{"Key":"of binaries","Fragments":["is","which"]},{"Key":"binaries is","Fragments":["fairly"]},{"Key":"fairly efficient","Fragments":["since"]},{"Key":"efficient since","Fragments":["R12B."]},{"Key":"you all,","Fragments":["that's"]},{"Key":"all, that's","Fragments":["great"]},{"Key":"that's great","Fragments":["advice!"]},{"Key":"great advice!","Fragments":["I've"]},{"Key":"advice! I've","Fragments":["submitted"]},{"Key":"version prior","Fragments":["to"]},{"Key":"to exercism.io","Fragments":["overwriting"]},{"Key":"exercism.io overwriting","Fragments":["it"]},{"Key":"overwriting it","Fragments":["with"]},{"Key":"with what","Fragments":["I","you"]},{"Key":"have as","Fragments":["Rev"]},{"Key":"as Rev","Fragments":["1."]},{"Key":"kinda like","Fragments":["where","this","it"]},{"Key":"like where","Fragments":["this"]},{"Key":"one was","Fragments":["going","the","canned","super"]},{"Key":"going with","Fragments":["the"]},{"Key":"the pattern-matching","Fragments":["versions"]},{"Key":"pattern-matching versions","Fragments":["of"]},{"Key":"bit surprised","Fragments":["that"]},{"Key":"surprised that","Fragments":["all","it","Elixir"]},{"Key":"pass on","Fragments":["this"]},{"Key":"non-alphabetic questions","Fragments":["(which"]},{"Key":"questions (which","Fragments":["would"]},{"Key":"(which would","Fragments":["appear"]},{"Key":"would appear","Fragments":["as","that"]},{"Key":"appear as","Fragments":["if"]},{"Key":"as if","Fragments":["shouted).","it","you","it","it's"]},{"Key":"can expand","Fragments":["it"]},{"Key":"expand it","Fragments":["with","out"]},{"Key":"button at","Fragments":["the"]},{"Key":"top right","Fragments":["of"]},{"Key":"I do.","Fragments":["Thanks."]},{"Key":"notice you","Fragments":["use"]},{"Key":"use explicit","Fragments":["recursion.","recursion"]},{"Key":"recursion. Did","Fragments":["you"]},{"Key":"consider higher","Fragments":["order"]},{"Key":"order functions","Fragments":["like","like","(like","like"]},{"Key":" Nope,","Fragments":["exercises","none","not","`cond`","there"]},{"Key":"Nope, exercises","Fragments":["aren't"]},{"Key":"exercises aren't","Fragments":["really"]},{"Key":"aren't really","Fragments":["all"]},{"Key":"really all","Fragments":["that"]},{"Key":"that well","Fragments":["sorted.","either."]},{"Key":"well sorted.","Fragments":["At"]},{"Key":"sorted. At","Fragments":["the"]},{"Key":"very end","Fragments":["there"]},{"Key":"end there","Fragments":["are","I"]},{"Key":"few with","Fragments":["a"]},{"Key":"higher difficulty","Fragments":["level."]},{"Key":"Generally speaking","Fragments":["it's"]},{"Key":"speaking it's","Fragments":["better","not"]},{"Key":"to accumulate","Fragments":["at","values?"]},{"Key":"accumulate at","Fragments":["the"]},{"Key":"end rather","Fragments":["than"]},{"Key":"than iteratively,","Fragments":["even"]},{"Key":"iteratively, even","Fragments":["if"]},{"Key":"made asymptotically","Fragments":["better"]},{"Key":"asymptotically better","Fragments":["than"]},{"Key":"than O(n^2)","Fragments":["due"]},{"Key":"O(n^2) due","Fragments":["to"]},{"Key":"to overallocation","Fragments":["it's"]},{"Key":"overallocation it's","Fragments":["still"]},{"Key":"not O(n)","Fragments":["since"]},{"Key":"O(n) since","Fragments":["the"]},{"Key":"result binary","Fragments":["isn't"]},{"Key":"binary isn't","Fragments":["pre-sized"]},{"Key":"isn't pre-sized","Fragments":["appropriately."]},{"Key":"pre-sized appropriately.","Fragments":["I'd"]},{"Key":"appropriately. I'd","Fragments":["use"]},{"Key":"use iolist_to_binary","Fragments":["and"]},{"Key":"iolist_to_binary and","Fragments":["a"]},{"Key":"a map,","Fragments":["or","not","so","good"]},{"Key":"map, or","Fragments":["just"]},{"Key":"Wow, that's","Fragments":["a"]},{"Key":"good thing","Fragments":["to"]},{"Key":"to know;","Fragments":["these"]},{"Key":"know; these","Fragments":["kind"]},{"Key":"of parenthesis","Fragments":["hell"]},{"Key":"parenthesis hell","Fragments":["can"]},{"Key":"hell can","Fragments":["pretty"]},{"Key":"can pretty","Fragments":["easily"]},{"Key":"pretty easily","Fragments":["lead"]},{"Key":"easily lead","Fragments":["to"]},{"Key":"to endless","Fragments":["frustration"]},{"Key":"endless frustration","Fragments":["and"]},{"Key":"frustration and","Fragments":["hard"]},{"Key":"and hard","Fragments":["to"]},{"Key":"to debug","Fragments":["errors"]},{"Key":"debug errors","Fragments":[":\\"]},{"Key":" Well...","Fragments":["it"]},{"Key":"Well... it","Fragments":["works."]},{"Key":"works. Would","Fragments":["love"]},{"Key":"Would love","Fragments":["recommendations","to"]},{"Key":"love recommendations","Fragments":["for"]},{"Key":"recommendations for","Fragments":["reducing"]},{"Key":"for reducing","Fragments":["more"]},{"Key":"reducing more","Fragments":["duplication."]},{"Key":" Remember","Fragments":["that"]},{"Key":"Remember that","Fragments":["strings"]},{"Key":"strings created","Fragments":["with"]},{"Key":"single quotes","Fragments":["are","strings"]},{"Key":"quotes are","Fragments":["already"]},{"Key":"already char","Fragments":["lists,"]},{"Key":"char lists,","Fragments":["so","and"]},{"Key":"lists, so","Fragments":["there's"]},{"Key":"use String.to_char_list/1","Fragments":["(Double-quoted"]},{"Key":"String.to_char_list/1 (Double-quoted","Fragments":["strings"]},{"Key":"(Double-quoted strings","Fragments":["are"]},{"Key":"feedback @margarett","Fragments":["and"]},{"Key":"@margarett and","Fragments":["@margarett."]},{"Key":"which form","Fragments":["of"]},{"Key":"string concatenation","Fragments":["is","would"]},{"Key":"concatenation is","Fragments":["actually"]},{"Key":"actually quicker","Fragments":["but"]},{"Key":"quicker but","Fragments":["I"]},{"Key":"a map","Fragments":["is","to","over","of","of","rather"]},{"Key":"map is","Fragments":["cleaner","so","not"]},{"Key":"is cleaner","Fragments":["and"]},{"Key":"cleaner and","Fragments":["easier"]},{"Key":"assume there's","Fragments":["a"]},{"Key":"of counting","Fragments":["occurrences"]},{"Key":"counting occurrences","Fragments":["of"]},{"Key":"occurrences of","Fragments":["a"]},{"Key":"string without","Fragments":["using","whitespace,"]},{"Key":"a Regex.","Fragments":["I"]},{"Key":"Regex. I","Fragments":["could"]},{"Key":"map to","Fragments":["create","which"]},{"Key":"HashDict but","Fragments":["there"]},{"Key":"there doesn't","Fragments":["seem","need"]},{"Key":"be any","Fragments":["point","time"]},{"Key":"any point","Fragments":["until"]},{"Key":"point until","Fragments":["I"]},{"Key":"until I","Fragments":["need","hit","found"]},{"Key":"the valid","Fragments":["dna"]},{"Key":"valid dna","Fragments":["nucleotides"]},{"Key":"dna nucleotides","Fragments":["somewhere"]},{"Key":"nucleotides somewhere","Fragments":["else."]},{"Key":"also done","Fragments":["this"]},{"Key":"in ruby","Fragments":["but","to"]},{"Key":"ruby but","Fragments":["there"]},{"Key":"more tests","Fragments":["to","that"]},{"Key":"to verify","Fragments":["input"]},{"Key":"verify input","Fragments":["etc."]},{"Key":"input etc.","Fragments":["I"]},{"Key":"exercise would","Fragments":["more","indeed"]},{"Key":"interesting with","Fragments":["the"]},{"Key":"same constraints.","Fragments":["I'm"]},{"Key":"constraints. I'm","Fragments":["still"]},{"Key":"still waiting","Fragments":["for"]},{"Key":"reason so","Fragments":["use"]},{"Key":"use Elixirs","Fragments":["function"]},{"Key":"Elixirs function","Fragments":["clauses."]},{"Key":"agree. Not","Fragments":["sure"]},{"Key":"using :list.sort","Fragments":["over"]},{"Key":":list.sort over","Fragments":["Enum.sort."]},{"Key":" @chelsie","Fragments":["Good","Good"]},{"Key":"@chelsie Good","Fragments":["point","catch,"]},{"Key":"on iolist_to_binary.","Fragments":["Now"]},{"Key":"iolist_to_binary. Now","Fragments":["if"]},{"Key":"Now if","Fragments":["you'll"]},{"Key":"if you'll","Fragments":["excuse"]},{"Key":"you'll excuse","Fragments":["me,"]},{"Key":"excuse me,","Fragments":["I'll"]},{"Key":"me, I'll","Fragments":["go"]},{"Key":"make an","Fragments":["Elixir"]},{"Key":"Elixir PR","Fragments":["to"]},{"Key":"PR to","Fragments":["use","fix","fix","fix,","add"]},{"Key":"that approach","Fragments":["for"]},{"Key":"approach for","Fragments":["string","escaping"]},{"Key":"string joining","Fragments":["in"]},{"Key":"joining in","Fragments":["the"]},{"Key":"the stdlib.","Fragments":[":D"]},{"Key":"I'd do","Fragments":["`String.strip(speak)","`Enum.count(fn","`Enum.count(sequence,"]},{"Key":"do `String.strip(speak)","Fragments":["=="]},{"Key":"`String.strip(speak) ==","Fragments":["\"\"`,"]},{"Key":"== \"\"`,","Fragments":["it"]},{"Key":"\"\"`, it","Fragments":["just"]},{"Key":"bit better.","Fragments":["`|\u003e`"]},{"Key":"better. `|\u003e`","Fragments":["is"]},{"Key":"`|\u003e` is","Fragments":["just","less"]},{"Key":"writing `foo(bar(baz,","Fragments":["1))`"]},{"Key":"`foo(bar(baz, 1))`","Fragments":["as"]},{"Key":"1))` as","Fragments":["`baz"]},{"Key":"as `baz","Fragments":["|\u003e"]},{"Key":"`baz |\u003e","Fragments":["bar(1)"]},{"Key":"|\u003e bar(1)","Fragments":["|\u003e"]},{"Key":"bar(1) |\u003e","Fragments":["foo()`."]},{"Key":" `\u0026({\u00261,0})`","Fragments":["can"]},{"Key":"`\u0026({\u00261,0})` can","Fragments":["be"]},{"Key":"your documentation","Fragments":["and"]},{"Key":"of count/1","Fragments":["too."]},{"Key":"count/1 too.","Fragments":["Very"]},{"Key":"too. Very","Fragments":["clean."]},{"Key":"I disagree,","Fragments":["though,"]},{"Key":"disagree, though,","Fragments":["that"]},{"Key":"though, that","Fragments":["efficiency"]},{"Key":"that efficiency","Fragments":["is"]},{"Key":"efficiency is","Fragments":["a"]},{"Key":"enough reason","Fragments":["for"]},{"Key":"not reusing","Fragments":["an"]},{"Key":"reusing an","Fragments":["existing"]},{"Key":"an existing","Fragments":["method...in","`HashDict`,","key"]},{"Key":"existing method...in","Fragments":["this"]},{"Key":"method...in this","Fragments":["case,"]},{"Key":"at least.","Fragments":["For"]},{"Key":"least. For","Fragments":["this"]},{"Key":"think reusing","Fragments":["one"]},{"Key":"reusing one","Fragments":["function"]},{"Key":"implement another","Fragments":["will"]},{"Key":"another will","Fragments":["aide"]},{"Key":"will aide","Fragments":["in"]},{"Key":"aide in","Fragments":["readability"]},{"Key":"in readability","Fragments":["and"]},{"Key":"and understand-ability","Fragments":["of"]},{"Key":"understand-ability of","Fragments":["the"]},{"Key":"code because","Fragments":["once"]},{"Key":"because once","Fragments":["the"]},{"Key":"once the","Fragments":["reader"]},{"Key":"a grasp","Fragments":["on"]},{"Key":"grasp on","Fragments":["one"]},{"Key":"one he/she","Fragments":["will"]},{"Key":"he/she will","Fragments":["be"]},{"Key":"long way","Fragments":["to"]},{"Key":"to understanding","Fragments":["the"]},{"Key":"Also, note","Fragments":["that"]},{"Key":"note that","Fragments":["single","guards","you","it","commonly","Elixir's","using"]},{"Key":"quotes strings","Fragments":["are"]},{"Key":"are lists","Fragments":["of"]},{"Key":"of characters","Fragments":["in","in","it's","including","into","that","and","you","you","instead.","are"]},{"Key":"in elixir,","Fragments":["so"]},{"Key":"line 2","Fragments":["like"]},{"Key":"2 like","Fragments":["this:"]},{"Key":" @khalid","Fragments":["'ACGT'"]},{"Key":"Finally, look","Fragments":["at"]},{"Key":"the HashDict.new/2","Fragments":["function."]},{"Key":"HashDict.new/2 function.","Fragments":["I"]},{"Key":"good fit","Fragments":["for"]},{"Key":"fit for","Fragments":["line"]},{"Key":"any guidelines","Fragments":["for"]},{"Key":"guidelines for","Fragments":["when"]},{"Key":"for when","Fragments":["to","you","you","you","you","you"]},{"Key":"use cond","Fragments":["vs."]},{"Key":"cond vs.","Fragments":["functions"]},{"Key":"vs. functions","Fragments":["with"]},{"Key":"with guard","Fragments":["clauses?","clauses","clauses.","clauses.","clauses/pattern"]},{"Key":"For me,","Fragments":["cond","I","the"]},{"Key":"me, cond","Fragments":["feels"]},{"Key":"cond feels","Fragments":["better"]},{"Key":"feels better","Fragments":["in","to"]},{"Key":"conditions must","Fragments":["be"]},{"Key":"be tested","Fragments":["in"]},{"Key":"tested in","Fragments":["a"]},{"Key":"particular order.","Fragments":["In"]},{"Key":"order. In","Fragments":["other"]},{"Key":"languages with","Fragments":["function/method","more"]},{"Key":"with function/method","Fragments":["overloading,"]},{"Key":"function/method overloading,","Fragments":["I"]},{"Key":"overloading, I","Fragments":["would"]},{"Key":"be surprised","Fragments":["if","if","by"]},{"Key":"surprised if","Fragments":["the","the"]},{"Key":"of declaration","Fragments":["changed"]},{"Key":"declaration changed","Fragments":["the"]},{"Key":"I'm perfectly","Fragments":["happy"]},{"Key":"happy about","Fragments":["the","that,","this"]},{"Key":"definitions defining","Fragments":["the"]},{"Key":"clauses are","Fragments":["tested","uncommon.","equivalent"]},{"Key":"are tested","Fragments":["as"]},{"Key":"tested as","Fragments":["long"]},{"Key":"as they're","Fragments":["defined"]},{"Key":"they're defined","Fragments":["next"]},{"Key":"defined next","Fragments":["to"]},{"Key":"other in","Fragments":["a"]},{"Key":"it obvious.","Fragments":["The"]},{"Key":"obvious. The","Fragments":["only"]},{"Key":"only languages","Fragments":["where"]},{"Key":"languages where","Fragments":["I'd"]},{"Key":"order made","Fragments":["a"]},{"Key":"difference would","Fragments":["be"]},{"Key":"be ones","Fragments":["without"]},{"Key":"ones without","Fragments":["guard"]},{"Key":"without guard","Fragments":["clauses"]},{"Key":"Your `nucleotide_counts`","Fragments":["traverses"]},{"Key":"`nucleotide_counts` traverses","Fragments":["the"]},{"Key":"traverses the","Fragments":["input"]},{"Key":"input 4","Fragments":["times;"]},{"Key":"4 times;","Fragments":["could"]},{"Key":"times; could","Fragments":["you"]},{"Key":"single pass?","Fragments":["Hints:","Consider"]},{"Key":"pass? Hints:","Fragments":["`Enum.reduce`,"]},{"Key":"Hints: `Enum.reduce`,","Fragments":["`Dict.update`."]},{"Key":"Only -","Fragments":["tiny,"]},{"Key":"- tiny,","Fragments":["minor"]},{"Key":"tiny, minor","Fragments":["-"]},{"Key":"minor -","Fragments":["nit"]},{"Key":"- nit","Fragments":["is"]},{"Key":"like abbreviations","Fragments":["in"]},{"Key":"abbreviations in","Fragments":["code"]},{"Key":"code or","Fragments":["single","put"]},{"Key":"or single","Fragments":["letter"]},{"Key":"single letter","Fragments":["variable","and"]},{"Key":"letter variable","Fragments":["names."]},{"Key":"names. Might","Fragments":["not"]},{"Key":"Might not","Fragments":["seem"]},{"Key":"not seem","Fragments":["much","to"]},{"Key":"seem much","Fragments":["here"]},{"Key":"much here","Fragments":["but"]},{"Key":"but calling","Fragments":["`y`"]},{"Key":"calling `y`","Fragments":["`year`"]},{"Key":"`y` `year`","Fragments":["wouldn't"]},{"Key":"`year` wouldn't","Fragments":["hurt"]},{"Key":"wouldn't hurt","Fragments":["and"]},{"Key":"hurt and","Fragments":["would"]},{"Key":"would aid","Fragments":["readability."]},{"Key":" Ha!","Fragments":["As"]},{"Key":"Ha! As","Fragments":["much"]},{"Key":"As much","Fragments":["as"]},{"Key":"as I'd","Fragments":["like"]},{"Key":"take credit","Fragments":["for"]},{"Key":"for it,","Fragments":["the","as","but","but"]},{"Key":"the @bianka","Fragments":["was"]},{"Key":"@bianka was","Fragments":["actually"]},{"Key":"actually already","Fragments":["in"]},{"Key":"already in","Fragments":["the"]},{"Key":"file when","Fragments":["I"]},{"Key":"I fetched","Fragments":["the"]},{"Key":"fetched the","Fragments":["exercise."]},{"Key":" Browsing","Fragments":["through"]},{"Key":"Browsing through","Fragments":["the"]},{"Key":"docs I","Fragments":["realized"]},{"Key":"is `Enum.count/2`","Fragments":["which"]},{"Key":"`Enum.count/2` which","Fragments":["allows"]},{"Key":"which allows","Fragments":["you"]},{"Key":"to filter","Fragments":["out","empty"]},{"Key":"filter out","Fragments":["which","the","anything","what","the","the"]},{"Key":"which items","Fragments":["to"]},{"Key":"items to","Fragments":["count."]},{"Key":"to count.","Fragments":["It's"]},{"Key":"count. It's","Fragments":["pretty"]},{"Key":"cool and","Fragments":["now"]},{"Key":"now `count/1`","Fragments":["is"]},{"Key":"`count/1` is","Fragments":["even","easy"]},{"Key":"was definitely","Fragments":["premature","a","wrong."]},{"Key":"definitely premature","Fragments":["optimization."]},{"Key":"I've changed","Fragments":["it"]},{"Key":"use HashDict.new/2","Fragments":["and"]},{"Key":"HashDict.new/2 and","Fragments":["it's"]},{"Key":"it's way","Fragments":["cleaner"]},{"Key":"cleaner now!","Fragments":["Thanks!"]},{"Key":"Mm, in","Fragments":["general"]},{"Key":"would agree.","Fragments":["I"]},{"Key":"agree. I","Fragments":["guess"]},{"Key":"of \"d,","Fragments":["m,"]},{"Key":"\"d, m,","Fragments":["y\""]},{"Key":"m, y\"","Fragments":["as"]},{"Key":"y\" as","Fragments":["being"]},{"Key":"as being","Fragments":["close","different","unused?"]},{"Key":"being close","Fragments":["enough"]},{"Key":"close enough","Fragments":["as"]},{"Key":"enough as","Fragments":["synonymous","it"]},{"Key":"as synonymous","Fragments":["to"]},{"Key":"synonymous to","Fragments":["\"day,"]},{"Key":"to \"day,","Fragments":["month,"]},{"Key":"\"day, month,","Fragments":["year\""]},{"Key":"month, year\"","Fragments":["as"]},{"Key":"year\" as","Fragments":["to"]},{"Key":"as to","Fragments":["not","what","why","be"]},{"Key":"really count","Fragments":["as"]},{"Key":"as \"cryptic","Fragments":["abbreviations\"..."]},{"Key":"\"cryptic abbreviations\"...","Fragments":["but"]},{"Key":"abbreviations\"... but","Fragments":["it"]},{"Key":"it couldn't","Fragments":["hurt"]},{"Key":"couldn't hurt","Fragments":["to"]},{"Key":"hurt to","Fragments":["change"]},{"Key":"change \"y\"","Fragments":["to"]},{"Key":"\"y\" to","Fragments":["\"year\""]},{"Key":"to \"year\"","Fragments":["here"]},{"Key":"\"year\" here","Fragments":["anyway,"]},{"Key":"here anyway,","Fragments":["at"]},{"Key":"anyway, at","Fragments":["all."]},{"Key":"I'd filter","Fragments":["out"]},{"Key":"the year-on-planet-relative-to-earth","Fragments":["into"]},{"Key":"year-on-planet-relative-to-earth into","Fragments":["its"]},{"Key":"consider that,","Fragments":["can't"]},{"Key":"that, can't","Fragments":["remember"]},{"Key":"can't remember","Fragments":["why","why"]},{"Key":"remember why","Fragments":["I","i"]},{"Key":"didn't now!","Fragments":["Will"]},{"Key":"now! Will","Fragments":["do"]},{"Key":"Will do","Fragments":["so"]},{"Key":"so anyway","Fragments":["to"]},{"Key":"anyway to","Fragments":["see"]},{"Key":"doing a","Fragments":["lot","lot","map","little","single","sort,","number","couple"]},{"Key":"of downcasing","Fragments":["multiple","multiple"]},{"Key":"downcasing multiple","Fragments":["times.","times."]},{"Key":"multiple times.","Fragments":["Also,","Also,"]},{"Key":"times. Also,","Fragments":["you're","you're"]},{"Key":"Also, you're","Fragments":["computing","computing"]},{"Key":"you're computing","Fragments":["the","the"]},{"Key":"computing the","Fragments":["sorted","sorted"]},{"Key":"sorted downcased","Fragments":["letters","letters","\"word\"","`base`"]},{"Key":"downcased letters","Fragments":["for","for"]},{"Key":"for target","Fragments":["over","over"]},{"Key":"target over","Fragments":["and","and"]},{"Key":"over and","Fragments":["over","over","over","over"]},{"Key":"and over","Fragments":["again.","again.","again","again?"]},{"Key":"While certainly","Fragments":["allowed"]},{"Key":"certainly allowed","Fragments":["it's"]},{"Key":"allowed it's","Fragments":["not"]},{"Key":"against invalid","Fragments":["input"]},{"Key":"invalid input","Fragments":["with","as"]},{"Key":"input with","Fragments":["function"]},{"Key":"guards `when","Fragments":["is_binary(target)`."]},{"Key":"`when is_binary(target)`.","Fragments":["That's"]},{"Key":"is_binary(target)`. That's","Fragments":["mostly"]},{"Key":"That's mostly","Fragments":["used"]},{"Key":"hand it's","Fragments":["not"]},{"Key":"validate user","Fragments":["input,"]},{"Key":"user input,","Fragments":["though"]},{"Key":"input, though","Fragments":["that"]},{"Key":"though that","Fragments":["will","shouldn't","makes","`\\w`","maps"]},{"Key":"will usually","Fragments":["be"]},{"Key":"usually be","Fragments":["about","combined","defined"]},{"Key":"In `same_word?`","Fragments":["you"]},{"Key":"`same_word?` you","Fragments":["still"]},{"Key":"you still","Fragments":["downcase","downcase","need","think"]},{"Key":"still downcase","Fragments":["the","the"]},{"Key":"the target","Fragments":["for","word","word","for","collection"]},{"Key":"target for","Fragments":["each","each"]},{"Key":"\u003e You're","Fragments":["doing"]},{"Key":" ~","Fragments":["``pminten``"]},{"Key":"avoid calculating","Fragments":["the"]},{"Key":"calculating the","Fragments":["normalized","remainder"]},{"Key":"the normalized","Fragments":["letters","list","versions.","base"]},{"Key":"normalized letters","Fragments":["of"]},{"Key":"letters of","Fragments":["the"]},{"Key":"target word","Fragments":["more","without"]},{"Key":"word more","Fragments":["than"]},{"Key":"than once,","Fragments":["and","or"]},{"Key":"once, and","Fragments":["I'm","the"]},{"Key":"change as","Fragments":["that"]},{"Key":"as that","Fragments":["was","is","seems","returns"]},{"Key":" Unfortunately,","Fragments":["the"]},{"Key":"Unfortunately, the","Fragments":["test"]},{"Key":"suite expects","Fragments":["the"]},{"Key":"expects the","Fragments":["matching","first"]},{"Key":"the matching","Fragments":["comparison"]},{"Key":"matching comparison","Fragments":["words"]},{"Key":"comparison words","Fragments":["back"]},{"Key":"words back","Fragments":["with"]},{"Key":"back with","Fragments":["their"]},{"Key":"with their","Fragments":["original","module"]},{"Key":"original casing.","Fragments":["I"]},{"Key":"casing. I","Fragments":["was"]},{"Key":"not able","Fragments":["to"]},{"Key":"way for","Fragments":["case-insensitively","the"]},{"Key":"for case-insensitively","Fragments":["checking"]},{"Key":"case-insensitively checking","Fragments":["whether"]},{"Key":"checking whether","Fragments":["a"]},{"Key":"comparison word","Fragments":["was"]},{"Key":"word was","Fragments":["the","already"]},{"Key":"word without","Fragments":["downcasing"]},{"Key":"without downcasing","Fragments":["each"]},{"Key":"each word","Fragments":["a","first","because","occurs,"]},{"Key":"word a","Fragments":["minimum"]},{"Key":"a minimum","Fragments":["of"]},{"Key":"minimum of","Fragments":["twice","thought"]},{"Key":"of twice","Fragments":["-"]},{"Key":"twice -","Fragments":["once"]},{"Key":"- once","Fragments":["for"]},{"Key":"the `same_word?`","Fragments":["check"]},{"Key":"`same_word?` check","Fragments":["and"]},{"Key":"and once","Fragments":["for","in","inside"]},{"Key":"for retrieving","Fragments":["the"]},{"Key":"retrieving the","Fragments":["normalized"]},{"Key":"normalized list","Fragments":["of"]},{"Key":"of letters.","Fragments":["If"]},{"Key":"letters. If","Fragments":["the"]},{"Key":"results could","Fragments":["be"]},{"Key":"be case-insensitive,","Fragments":["then"]},{"Key":"case-insensitive, then","Fragments":["I"]},{"Key":"|\u003e Enum.reject(\u0026(target","Fragments":["=="]},{"Key":"Enum.reject(\u0026(target ==","Fragments":["\u00261))"]},{"Key":"|\u003e Enum.filter(\u0026(is_anagram_match?(target_letters,","Fragments":["\u00261)))"]},{"Key":"\u003e In","Fragments":["same_word?"]},{"Key":"In same_word?","Fragments":["you"]},{"Key":"same_word? you","Fragments":["still"]},{"Key":"just caught","Fragments":["that"]},{"Key":"caught that","Fragments":["myself"]},{"Key":"myself -","Fragments":["doh!"]},{"Key":"- doh!","Fragments":["Should've"]},{"Key":"doh! Should've","Fragments":["done"]},{"Key":"Should've done","Fragments":["it"]},{"Key":"just once,","Fragments":["at"]},{"Key":"once, at","Fragments":["the"]},{"Key":"time as","Fragments":["storing"]},{"Key":"as storing","Fragments":["the"]},{"Key":"storing the","Fragments":["`target_letters`."]},{"Key":"recommend making","Fragments":["your"]},{"Key":"making your","Fragments":["cond","code"]},{"Key":"cond clauses","Fragments":["functions","are"]},{"Key":"clauses functions","Fragments":["to"]},{"Key":" Doing","Fragments":["the"]},{"Key":"Doing the","Fragments":["upcase"]},{"Key":"upcase and","Fragments":["downcase","downcase"]},{"Key":"and downcase","Fragments":["is","representations."]},{"Key":"downcase is","Fragments":["something"]},{"Key":"seen before.","Fragments":["Clever."]},{"Key":"They call","Fragments":["these"]},{"Key":"call these","Fragments":["nitpicks"]},{"Key":"these nitpicks","Fragments":["for"]},{"Key":"nitpicks for","Fragments":["a"]},{"Key":"reason, so","Fragments":["I'm"]},{"Key":"out two","Fragments":["minor","issues"]},{"Key":"two minor","Fragments":["things"]},{"Key":"minor things","Fragments":["I'd","I'd"]},{"Key":"things I'd","Fragments":["recommend","like","like","like"]},{"Key":"recommend for","Fragments":["improvement.","regex"]},{"Key":"Consider inlining","Fragments":["the"]},{"Key":"to HashDict.new.","Fragments":["You"]},{"Key":"HashDict.new. You","Fragments":["never"]},{"Key":"You never","Fragments":["reference"]},{"Key":"never reference","Fragments":["it"]},{"Key":"reference it","Fragments":["again"]},{"Key":"again outside","Fragments":["of"]},{"Key":"anonymous inc","Fragments":["function."]},{"Key":"Well for","Fragments":["one"]},{"Key":"one I'd","Fragments":["just"]},{"Key":"just merge","Fragments":["`two_verse`"]},{"Key":"merge `two_verse`","Fragments":["into"]},{"Key":"`two_verse` into","Fragments":["`verse(2)`."]},{"Key":"into `verse(2)`.","Fragments":["Not"]},{"Key":"`verse(2)`. Not","Fragments":["so"]},{"Key":"Not so","Fragments":["much","much"]},{"Key":"much duplication","Fragments":["as","as"]},{"Key":"duplication as","Fragments":["code","possible,","much"]},{"Key":"as code","Fragments":["brevity."]},{"Key":"reduce duplication,","Fragments":["for"]},{"Key":"duplication, for","Fragments":["example,"]},{"Key":"example, by","Fragments":["making"]},{"Key":"by making","Fragments":["use","everything","line"]},{"Key":"making use","Fragments":["of"]},{"Key":"that `#{}`","Fragments":["supports"]},{"Key":"`#{}` supports","Fragments":["whole"]},{"Key":"supports whole","Fragments":["expressions,"]},{"Key":"whole expressions,","Fragments":["not"]},{"Key":"expressions, not","Fragments":["just"]},{"Key":"could so","Fragments":["something"]},{"Key":"so something","Fragments":["like"]},{"Key":"like `Enum.map(comparisons,","Fragments":["\u0026(\u00261,"]},{"Key":"`Enum.map(comparisons, \u0026(\u00261,","Fragments":["String.downcase(\u00261))"]},{"Key":"\u0026(\u00261, String.downcase(\u00261))","Fragments":["|\u003e"]},{"Key":"String.downcase(\u00261)) |\u003e","Fragments":["Enum.reject(fn"]},{"Key":"|\u003e Enum.reject(fn","Fragments":["(_,"]},{"Key":"Enum.reject(fn (_,","Fragments":["dc)"]},{"Key":"(_, dc)","Fragments":["-\u003e","-\u003e"]},{"Key":"dc) -\u003e","Fragments":["same_word(target,","is_anagram_match?(target,"]},{"Key":"-\u003e same_word(target,","Fragments":["dc)"]},{"Key":"same_word(target, dc)","Fragments":["end)"]},{"Key":"dc) end)","Fragments":["|\u003e","|\u003e"]},{"Key":"end) |\u003e","Fragments":["Enum.filter(fn","Enum.map(\u0026elem(\u00261,","iolist_to_binary"]},{"Key":"|\u003e Enum.filter(fn","Fragments":["(_,"]},{"Key":"Enum.filter(fn (_,","Fragments":["dc)"]},{"Key":"-\u003e is_anagram_match?(target,","Fragments":["dc)"]},{"Key":"is_anagram_match?(target, dc)","Fragments":["end)"]},{"Key":"|\u003e Enum.map(\u0026elem(\u00261,","Fragments":["0))`,"]},{"Key":"Enum.map(\u0026elem(\u00261, 0))`,","Fragments":["though"]},{"Key":"0))`, though","Fragments":["that's"]},{"Key":"The points","Fragments":["you've"]},{"Key":"points you've","Fragments":["found"]},{"Key":"you've found","Fragments":["and","an","that"]},{"Key":"found and","Fragments":["fixed"]},{"Key":"and fixed","Fragments":["are"]},{"Key":"fixed are","Fragments":["the"]},{"Key":"more important","Fragments":["ones."]},{"Key":"those `%s`","Fragments":["sigils?"]},{"Key":"Isn't `newline_appender`","Fragments":["more"]},{"Key":"`newline_appender` more","Fragments":["easily"]},{"Key":"easily written","Fragments":["in"]},{"Key":"style `map_join(...)","Fragments":["\u003c\u003e"]},{"Key":"`map_join(...) \u003c\u003e","Fragments":["\"\\n\")?"]},{"Key":"Overall this","Fragments":["code"]},{"Key":"complicated with","Fragments":["anonymous"]},{"Key":"with anonymous","Fragments":["functions"]},{"Key":"and all.","Fragments":["Do"]},{"Key":"all. Do","Fragments":["you"]},{"Key":"the gain","Fragments":["in"]},{"Key":"gain in","Fragments":["brevity"]},{"Key":"in brevity","Fragments":["is"]},{"Key":"brevity is","Fragments":["worth"]},{"Key":"worth the","Fragments":["complexity?"]},{"Key":"two clauses","Fragments":["for","made","for","`word","are"]},{"Key":"for verse","Fragments":["in"]},{"Key":"verse in","Fragments":["my"]},{"Key":"exercise, one","Fragments":["of"]},{"Key":"the 0","Fragments":["case"]},{"Key":"0 case","Fragments":["and"]},{"Key":"else (which","Fragments":["used"]},{"Key":"(which used","Fragments":["an"]},{"Key":"used an","Fragments":["embedded","anonymous"]},{"Key":"an embedded","Fragments":["if-statement"]},{"Key":"embedded if-statement","Fragments":["and"]},{"Key":"if-statement and","Fragments":["a"]},{"Key":"function `bottle`","Fragments":["that"]},{"Key":"`bottle` that","Fragments":["give"]},{"Key":"correct form","Fragments":["of"]},{"Key":"of bottle","Fragments":["for"]},{"Key":"bottle for","Fragments":["a"]},{"Key":"see guard","Fragments":["clauses","clauses"]},{"Key":"heads the","Fragments":["same"]},{"Key":"case statements:","Fragments":["they"]},{"Key":"statements: they","Fragments":["allow"]},{"Key":"they allow","Fragments":["me"]},{"Key":"allow me","Fragments":["to","to","to","to"]},{"Key":"to augment","Fragments":["the"]},{"Key":"augment the","Fragments":["pattern"]},{"Key":"matching. For","Fragments":["example"]},{"Key":"example they","Fragments":["let"]},{"Key":"they let","Fragments":["me"]},{"Key":"me say","Fragments":["\"this"]},{"Key":"say \"this","Fragments":["clause"]},{"Key":"\"this clause","Fragments":["is"]},{"Key":"clause is","Fragments":["for"]},{"Key":"for binary","Fragments":["inputs\"."]},{"Key":"matching it's","Fragments":["best"]},{"Key":"Do note","Fragments":["that"]},{"Key":"that guards","Fragments":["are"]},{"Key":"are restricted","Fragments":["in"]},{"Key":"restricted in","Fragments":["what"]},{"Key":"they can","Fragments":["do,","call"]},{"Key":"can do,","Fragments":["it's"]},{"Key":"do, it's","Fragments":["a"]},{"Key":"a limitation","Fragments":["of","when"]},{"Key":"limitation of","Fragments":["the"]},{"Key":"Erlang VM.","Fragments":["There's","I"]},{"Key":"VM. There's","Fragments":["only"]},{"Key":"There's only","Fragments":["a"]},{"Key":"in guards,","Fragments":["mostly","btw."]},{"Key":"guards, mostly","Fragments":["arithmetic,"]},{"Key":"mostly arithmetic,","Fragments":["logical,"]},{"Key":"arithmetic, logical,","Fragments":["type"]},{"Key":"logical, type","Fragments":["tests"]},{"Key":"type tests","Fragments":["and"]},{"Key":"and length/size","Fragments":["functions."]},{"Key":"I somewhat","Fragments":["disagree"]},{"Key":"somewhat disagree","Fragments":["with"]},{"Key":"with @london,","Fragments":["single"]},{"Key":"@london, single","Fragments":["char"]},{"Key":"single char","Fragments":["identifiers","names"]},{"Key":"char identifiers","Fragments":["are"]},{"Key":"identifiers are","Fragments":["not","good."]},{"Key":"necessarily problem.","Fragments":["In"]},{"Key":"with `year`","Fragments":["as"]},{"Key":"`year` as","Fragments":["well,"]},{"Key":"are cases","Fragments":["where"]},{"Key":"where single","Fragments":["character"]},{"Key":"single character","Fragments":["identifiers"]},{"Key":"character identifiers","Fragments":["are"]},{"Key":"good rule","Fragments":["of","of"]},{"Key":"rule of","Fragments":["thumb","Roman","thumb","Elixir:"]},{"Key":"of thumb","Fragments":["is","is"]},{"Key":"thumb is","Fragments":["that","that"]},{"Key":"verbose if","Fragments":["it"]},{"Key":"a greater","Fragments":["scope."]},{"Key":"greater scope.","Fragments":["If"]},{"Key":"scope. If","Fragments":["you're"]},{"Key":"a short","Fragments":["`fn`","video","circuit."]},{"Key":"short `fn`","Fragments":["single"]},{"Key":"`fn` single","Fragments":["or"]},{"Key":"single or","Fragments":["double"]},{"Key":"or double","Fragments":["character"]},{"Key":"double character","Fragments":["variable"]},{"Key":"character variable","Fragments":["names"]},{"Key":"are often","Fragments":["a","marked"]},{"Key":"good choice.","Fragments":["For","Sometimes"]},{"Key":"choice. For","Fragments":["short","me,"]},{"Key":"For short","Fragments":["functions:"]},{"Key":"short functions:","Fragments":["a"]},{"Key":"functions: a","Fragments":["single"]},{"Key":"single word,","Fragments":["possibly"]},{"Key":"word, possibly","Fragments":["abbreviated"]},{"Key":"possibly abbreviated","Fragments":["(descrs"]},{"Key":"abbreviated (descrs","Fragments":["instead"]},{"Key":"(descrs instead","Fragments":["of"]},{"Key":"of descriptions).","Fragments":["For"]},{"Key":"descriptions). For","Fragments":["module"]},{"Key":"For module","Fragments":["attributes"]},{"Key":"attributes whole","Fragments":["abbreviated"]},{"Key":"whole abbreviated","Fragments":["words,"]},{"Key":"abbreviated words,","Fragments":["possibly"]},{"Key":"words, possibly","Fragments":["multiple"]},{"Key":"possibly multiple","Fragments":["(separated"]},{"Key":"multiple (separated","Fragments":["by"]},{"Key":"(separated by","Fragments":["underscores)"]},{"Key":"by underscores)","Fragments":["are"]},{"Key":"underscores) are","Fragments":["best."]},{"Key":"your exceptions,","Fragments":["@graham."]},{"Key":"exceptions, @graham.","Fragments":["The"]},{"Key":"@graham. The","Fragments":["classic"]},{"Key":"The classic","Fragments":["one"]},{"Key":"classic one","Fragments":["for"]},{"Key":"is if","Fragments":["you're"]},{"Key":"a truly","Fragments":["generic","\"boolean\""]},{"Key":"truly generic","Fragments":["function"]},{"Key":"generic function","Fragments":["over","like"]},{"Key":"a collection,","Fragments":["for"]},{"Key":"collection, for","Fragments":["example."]},{"Key":"for example.","Fragments":["I'd"]},{"Key":"example. I'd","Fragments":["much,"]},{"Key":"I'd much,","Fragments":["much"]},{"Key":"much, much","Fragments":["rather"]},{"Key":"much rather","Fragments":["see"]},{"Key":"see something","Fragments":["like"]},{"Key":"def sum","Fragments":["[x|xs],","[element|rest_of_list],"]},{"Key":"sum [x|xs],","Fragments":["do:"]},{"Key":"[x|xs], do:","Fragments":["x"]},{"Key":"do: x","Fragments":["+"]},{"Key":"+ sum","Fragments":["xs","rest_of_list"]},{"Key":" than","Fragments":["I"]},{"Key":"sum [element|rest_of_list],","Fragments":["do:"]},{"Key":"[element|rest_of_list], do:","Fragments":["element"]},{"Key":"do: element","Fragments":["+"]},{"Key":"element +","Fragments":["sum"]},{"Key":"But these","Fragments":["kinds"]},{"Key":"these kinds","Fragments":["of"]},{"Key":"almost all","Fragments":["defined"]},{"Key":"defined for","Fragments":["you"]},{"Key":"you already,","Fragments":["and"]},{"Key":"already, and","Fragments":["I"]},{"Key":"using inline","Fragments":["functions"]},{"Key":"functions wherever","Fragments":["possible,"]},{"Key":"wherever possible,","Fragments":["which"]},{"Key":"possible, which","Fragments":["is"]},{"Key":"is perhaps","Fragments":["why","changing"]},{"Key":"perhaps why","Fragments":["I"]},{"Key":"don't tend","Fragments":["to"]},{"Key":"use single","Fragments":["char","letters"]},{"Key":"char names","Fragments":["much"]},{"Key":"names much","Fragments":[":-)"]},{"Key":"do tend","Fragments":["to"]},{"Key":"single letters","Fragments":["mostly"]},{"Key":"letters mostly","Fragments":["for"]},{"Key":"mostly for","Fragments":["generic","practice,"]},{"Key":"for generic","Fragments":["stuff","naming"]},{"Key":"generic stuff","Fragments":["or"]},{"Key":"stuff or","Fragments":["for"]},{"Key":"or for","Fragments":["generic"]},{"Key":"generic naming","Fragments":["(`m`"]},{"Key":"naming (`m`","Fragments":["for"]},{"Key":"(`m` for","Fragments":["the"]},{"Key":"the map","Fragments":["in","and","forward."]},{"Key":"map in","Fragments":["that"]},{"Key":"that piece","Fragments":["of"]},{"Key":"thought those","Fragments":["sigils"]},{"Key":"those sigils","Fragments":["were"]},{"Key":"sigils were","Fragments":["needed"]},{"Key":"were needed","Fragments":["for"]},{"Key":"any string","Fragments":["interpolation,","whose"]},{"Key":"string interpolation,","Fragments":["but"]},{"Key":"interpolation, but","Fragments":["I"]},{"Key":"just verified","Fragments":["that"]},{"Key":"verified that","Fragments":["they're"]},{"Key":"they're not.","Fragments":["Good"]},{"Key":"not. Good","Fragments":["to"]},{"Key":"did spend","Fragments":["some"]},{"Key":"spend some","Fragments":["time","focus"]},{"Key":"time going","Fragments":["back"]},{"Key":"going back","Fragments":["and"]},{"Key":"back and","Fragments":["forth","to","redid","understand","put","improve","look"]},{"Key":"and forth","Fragments":["with"]},{"Key":"forth with","Fragments":["newline_appender."]},{"Key":"with newline_appender.","Fragments":["It"]},{"Key":"newline_appender. It","Fragments":["kinda"]},{"Key":"It kinda","Fragments":["bugged"]},{"Key":"kinda bugged","Fragments":["me"]},{"Key":"bugged me","Fragments":["that"]},{"Key":"required trailing","Fragments":["newlines."]},{"Key":"trailing newlines.","Fragments":["Otherwise"]},{"Key":"newlines. Otherwise","Fragments":["join"]},{"Key":"Otherwise join","Fragments":["would"]},{"Key":"join would","Fragments":["work"]},{"Key":"work nicely.","Fragments":["I"]},{"Key":"nicely. I","Fragments":["wanted"]},{"Key":"wanted a","Fragments":["way","second","excuse"]},{"Key":"explicitly concatenating","Fragments":["a"]},{"Key":"concatenating a","Fragments":["newline","million","million"]},{"Key":"both verse","Fragments":["and"]},{"Key":"verse and","Fragments":["sing.","sing."]},{"Key":"and sing.","Fragments":["I","But"]},{"Key":"sing. I","Fragments":["found","wish"]},{"Key":"found flat_map","Fragments":["and"]},{"Key":"flat_map and","Fragments":["decided","map_reduce.","map","filter,"]},{"Key":"first time.","Fragments":["I'll"]},{"Key":"time. I'll","Fragments":["play"]},{"Key":"I'll play","Fragments":["with"]},{"Key":"with alternatives","Fragments":["and"]},{"Key":"alternatives and","Fragments":["resubmit."]},{"Key":"Regarding the","Fragments":["complexity,","lookup,","leading"]},{"Key":"the complexity,","Fragments":["yeah,"]},{"Key":"complexity, yeah,","Fragments":["maybe"]},{"Key":"yeah, maybe","Fragments":["I","the"]},{"Key":"went too","Fragments":["far."]},{"Key":"too far.","Fragments":["I"]},{"Key":"far. I","Fragments":["wanted"]},{"Key":"avoid any","Fragments":["duplication"]},{"Key":"any duplication","Fragments":["and"]},{"Key":"and push","Fragments":["my"]},{"Key":"push my","Fragments":["skills."]},{"Key":"my skills.","Fragments":["I"]},{"Key":"skills. I","Fragments":["was"]},{"Key":"bit proud","Fragments":["of"]},{"Key":"proud of","Fragments":["only","my"]},{"Key":"only single","Fragments":["line"]},{"Key":"line methods.","Fragments":["I'll"]},{"Key":"methods. I'll","Fragments":["back"]},{"Key":"I'll back","Fragments":["off."]},{"Key":"with map_join.","Fragments":["The"]},{"Key":"map_join. The","Fragments":["two"]},{"Key":"The two","Fragments":["commented"]},{"Key":"two commented","Fragments":["lines"]},{"Key":"commented lines","Fragments":["work,"]},{"Key":"lines work,","Fragments":["but"]},{"Key":"work, but","Fragments":["I","i","my"]},{"Key":"still prefer","Fragments":["having","the","this"]},{"Key":"prefer having","Fragments":["the"]},{"Key":"the newline","Fragments":["behavior"]},{"Key":"newline behavior","Fragments":["factored"]},{"Key":"behavior factored","Fragments":["into"]},{"Key":"factored into","Fragments":["a"]},{"Key":"and shared","Fragments":["between"]},{"Key":"shared between","Fragments":["verse"]},{"Key":"between verse","Fragments":["and"]},{"Key":"sing. But","Fragments":["I"]},{"Key":"did simplify","Fragments":["newline_appender."]},{"Key":"It's way","Fragments":["more"]},{"Key":"efficient because","Fragments":["`iolist_to_binary`"]},{"Key":"because `iolist_to_binary`","Fragments":["is"]},{"Key":"`iolist_to_binary` is","Fragments":["a"]},{"Key":"Erlang, it's","Fragments":["implemented"]},{"Key":"it's implemented","Fragments":["on"]},{"Key":"implemented on","Fragments":["the"]},{"Key":"the C","Fragments":["level"]},{"Key":"C level","Fragments":["of"]},{"Key":"the BEAM","Fragments":["VM."]},{"Key":"BEAM VM.","Fragments":["Iolists"]},{"Key":"VM. Iolists","Fragments":["are"]},{"Key":"Iolists are","Fragments":["pretty","an"]},{"Key":"Erlang for","Fragments":["writing","Great"]},{"Key":"writing to","Fragments":["files"]},{"Key":"to files","Fragments":["as"]},{"Key":"files as","Fragments":["it's"]},{"Key":"it's easy","Fragments":["to","to"]},{"Key":"generate them.","Fragments":["Only"]},{"Key":"them. Only","Fragments":["downside"]},{"Key":"Only downside","Fragments":["of"]},{"Key":"things is","Fragments":["that"]},{"Key":"that an","Fragments":["iolist"]},{"Key":"an iolist","Fragments":["is","is"]},{"Key":"iolist is","Fragments":["annoying","easier"]},{"Key":"is annoying","Fragments":["to"]},{"Key":"annoying to","Fragments":["process","write","nitpick.","write","read."]},{"Key":"to process","Fragments":["due"]},{"Key":"process due","Fragments":["to"]},{"Key":"to [\"A\"|\"B\"]","Fragments":["being"]},{"Key":"[\"A\"|\"B\"] being","Fragments":["a"]},{"Key":"valid iolist,","Fragments":["so"]},{"Key":"iolist, so","Fragments":["things"]},{"Key":"so things","Fragments":["like"]},{"Key":"like `Enum.map`","Fragments":["can","or"]},{"Key":"`Enum.map` can","Fragments":["fail"]},{"Key":"can fail","Fragments":["on"]},{"Key":"fail on","Fragments":["an","an","a"]},{"Key":"Using `count`","Fragments":["for"]},{"Key":"each nucleotide","Fragments":["will","from"]},{"Key":"nucleotide will","Fragments":["mean"]},{"Key":"will mean","Fragments":["the"]},{"Key":"strand will","Fragments":["be"]},{"Key":"be traversed","Fragments":["four"]},{"Key":"traversed four","Fragments":["times"]},{"Key":"of `nucleotide_counts`","Fragments":["-"]},{"Key":"`nucleotide_counts` -","Fragments":["not"]},{"Key":"big deal","Fragments":["for"]},{"Key":"deal for","Fragments":["small"]},{"Key":"small inputs","Fragments":["but"]},{"Key":"inputs but","Fragments":["there"]},{"Key":"the counts","Fragments":["`HashDict`"]},{"Key":"counts `HashDict`","Fragments":["in"]},{"Key":"`HashDict` in","Fragments":["a"]},{"Key":"did that","Fragments":["in"]},{"Key":"iteration actually","Fragments":[":)"]},{"Key":"to elixir,","Fragments":["this","I","this","this","and"]},{"Key":"elixir, this","Fragments":["is","is","is"]},{"Key":"the largest","Fragments":["program","numbers"]},{"Key":"largest program","Fragments":["I've"]},{"Key":"program I've","Fragments":["ever"]},{"Key":"written it","Fragments":["in."]},{"Key":" Anything","Fragments":["I"]},{"Key":"Anything I","Fragments":["can"]},{"Key":"about this?","Fragments":["`map(arr,"]},{"Key":"this? `map(arr,","Fragments":["\u0026[\u00261,"]},{"Key":"`map(arr, \u0026[\u00261,","Fragments":["?\\n])"]},{"Key":"\u0026[\u00261, ?\\n])","Fragments":["|\u003e"]},{"Key":"?\\n]) |\u003e","Fragments":["iolist_to_binary`","iolist_to_binary"]},{"Key":"|\u003e iolist_to_binary`","Fragments":["It's"]},{"Key":"iolist_to_binary` It's","Fragments":["a"]},{"Key":"trick for","Fragments":["efficient"]},{"Key":"for efficient","Fragments":["concatenation,"]},{"Key":"efficient concatenation,","Fragments":["it"]},{"Key":"concatenation, it","Fragments":["works"]},{"Key":"works btw","Fragments":["because"]},{"Key":"btw because","Fragments":["\\n"]},{"Key":"because \\n","Fragments":["is"]},{"Key":"\\n is","Fragments":["7but"]},{"Key":"is 7but","Fragments":["ASCII,"]},{"Key":"7but ASCII,","Fragments":["this"]},{"Key":"ASCII, this","Fragments":["is"]},{"Key":"an Erlang","Fragments":["function","function","world…","trick,","expert,"]},{"Key":"Erlang function","Fragments":["so","that"]},{"Key":"necessarily smart","Fragments":["about"]},{"Key":"smart about","Fragments":["Unicode."]},{"Key":"Very interesting.","Fragments":["I"]},{"Key":"wasn't familiar","Fragments":["with"]},{"Key":"with iolist_to_binary.","Fragments":["I'm"]},{"Key":"iolist_to_binary. I'm","Fragments":["pleasantly"]},{"Key":"I'm pleasantly","Fragments":["surprised","surprised"]},{"Key":"pleasantly surprised","Fragments":["that","to"]},{"Key":"it handles","Fragments":["the"]},{"Key":"nested list","Fragments":["properly."]},{"Key":"list properly.","Fragments":["Conceptually"]},{"Key":"properly. Conceptually","Fragments":["it"]},{"Key":"Conceptually it","Fragments":["is"]},{"Key":"the flat_map/join","Fragments":["that"]},{"Key":"flat_map/join that","Fragments":["I"]},{"Key":"did before,","Fragments":["but"]},{"Key":"before, but","Fragments":["I"]},{"Key":" \u0026[...]","Fragments":["is"]},{"Key":"\u0026[...] is","Fragments":["a"]},{"Key":"trick I","Fragments":["wouldn't","don't","used"]},{"Key":"have thought","Fragments":["of","of","you","to","that","about",":)"]},{"Key":"of on","Fragments":["my"]},{"Key":"general. I","Fragments":["am"]},{"Key":"am rather","Fragments":["curious"]},{"Key":"rather curious","Fragments":["why"]},{"Key":"curious why","Fragments":["you","you","you're","you","you"]},{"Key":"separate Query","Fragments":["module."]},{"Key":"Query module.","Fragments":["I"]},{"Key":"module. I","Fragments":["don't"]},{"Key":"it buys","Fragments":["you"]},{"Key":"buys you","Fragments":["anything"]},{"Key":"Minor point:","Fragments":["The"]},{"Key":"point: The","Fragments":["includes_letters?"]},{"Key":"The includes_letters?","Fragments":["function"]},{"Key":"includes_letters? function","Fragments":["is","it"]},{"Key":"bit strange.","Fragments":["Firstly,"]},{"Key":"strange. Firstly,","Fragments":["since"]},{"Key":"Firstly, since","Fragments":["it's"]},{"Key":"only called","Fragments":["from"]},{"Key":"single place","Fragments":["and"]},{"Key":"is small","Fragments":["enough,"]},{"Key":"small enough,","Fragments":["there's"]},{"Key":"enough, there's","Fragments":["no"]},{"Key":"problem inlining","Fragments":["it."]},{"Key":"inlining it.","Fragments":["Secondly,"]},{"Key":"it. Secondly,","Fragments":["the"]},{"Key":"Secondly, the","Fragments":["name"]},{"Key":"somewhat misleading","Fragments":["from"]},{"Key":"misleading from","Fragments":["what"]},{"Key":"it actually","Fragments":["tests.","hurts","delegates","uses","is","causes"]},{"Key":"actually tests.","Fragments":["It's"]},{"Key":"tests. It's","Fragments":["not","to"]},{"Key":"of letters,","Fragments":["but","and"]},{"Key":"letters, but","Fragments":["indirectly"]},{"Key":"but indirectly","Fragments":["checking"]},{"Key":"indirectly checking","Fragments":["that"]},{"Key":"that letters","Fragments":["have"]},{"Key":"letters have","Fragments":["different","what"]},{"Key":"different upcase","Fragments":["and"]},{"Key":"downcase representations.","Fragments":["I'm"]},{"Key":"representations. I'm","Fragments":["willing"]},{"Key":"I'm willing","Fragments":["to"]},{"Key":"to bet","Fragments":["there's"]},{"Key":"bet there's","Fragments":["some"]},{"Key":"some unicode","Fragments":["corner","characters"]},{"Key":"unicode corner","Fragments":["case,"]},{"Key":"corner case,","Fragments":["though"]},{"Key":"case, though","Fragments":["I"]},{"Key":"know actually","Fragments":["what"]},{"Key":"actually what","Fragments":["it"]},{"Key":"it is.","Fragments":["But"]},{"Key":"is. But","Fragments":["if"]},{"Key":"you inline","Fragments":["it,"]},{"Key":"inline it,","Fragments":["then"]},{"Key":"it, then","Fragments":["the"]},{"Key":"whole naming","Fragments":["question"]},{"Key":"naming question","Fragments":["is"]},{"Key":"is moot","Fragments":[";-)"]},{"Key":"module because","Fragments":["the","I"]},{"Key":"functions didn't","Fragments":["seem"]},{"Key":"to belong","Fragments":["in"]},{"Key":"in Teenager.","Fragments":["Categorising"]},{"Key":"Teenager. Categorising","Fragments":["phrases"]},{"Key":"Categorising phrases","Fragments":["seemed"]},{"Key":"phrases seemed","Fragments":["like"]},{"Key":"separate and","Fragments":["pretty"]},{"Key":"pretty stand-alone","Fragments":["responsibility."]},{"Key":"didn't inline","Fragments":["it"]},{"Key":"inline it","Fragments":["because","though."]},{"Key":"explain why","Fragments":["I"]},{"Key":"did such","Fragments":["a"]},{"Key":"a strange","Fragments":["thing"]},{"Key":"strange thing","Fragments":["at"]},{"Key":"thing at","Fragments":["all."]},{"Key":" Ideally","Fragments":["I'd"]},{"Key":"Ideally I'd","Fragments":["like","write"]},{"Key":"something as","Fragments":["simple","powerful"]},{"Key":"ruby version:","Fragments":["http://exercism.io/submissions/a6a7ce08ece4b2cade0594a2"]},{"Key":"not get","Fragments":["that"]},{"Key":"get that","Fragments":["to","to","organized","reduce","to"]},{"Key":"same naming","Fragments":["scheme"]},{"Key":"naming scheme","Fragments":["as","for"]},{"Key":"scheme as","Fragments":["I"]},{"Key":"the [ruby","Fragments":["version](http://exercism.io/submissions/a6a7ce08ece4b2cade0594a2)."]},{"Key":"[ruby version](http://exercism.io/submissions/a6a7ce08ece4b2cade0594a2).","Fragments":["Using"]},{"Key":"version](http://exercism.io/submissions/a6a7ce08ece4b2cade0594a2). Using","Fragments":["Phrase"]},{"Key":"Using Phrase","Fragments":["instead"]},{"Key":"Phrase instead","Fragments":["of"]},{"Key":"of Query","Fragments":["as"]},{"Key":"Query as","Fragments":["that"]},{"Key":"this domain","Fragments":["and"]},{"Key":"domain and","Fragments":["less"]},{"Key":"pass data","Fragments":["around"]},{"Key":"data around","Fragments":["so"]},{"Key":"around so","Fragments":["much.","it"]},{"Key":"have instance","Fragments":["level"]},{"Key":"instance level","Fragments":["data","data"]},{"Key":"level data","Fragments":["in","within"]},{"Key":"data in","Fragments":["elixir","and"]},{"Key":"elixir or","Fragments":["is"]},{"Key":"that usually","Fragments":["solved"]},{"Key":"usually solved","Fragments":["in"]},{"Key":"solved in","Fragments":["some"]},{"Key":"way or","Fragments":["not"]},{"Key":"Fixed the","Fragments":["odd"]},{"Key":"odd code","Fragments":["in"]},{"Key":"in `uppercase?`","Fragments":["and"]},{"Key":"`uppercase?` and","Fragments":["removed"]},{"Key":"and removed","Fragments":["the"]},{"Key":"the includes_letters?","Fragments":["function"]},{"Key":" OK.","Fragments":["I","Let","I've","I've","I"]},{"Key":"OK. I","Fragments":["see","see"]},{"Key":"reasoning behind","Fragments":["the","using"]},{"Key":"No, there's","Fragments":["no"]},{"Key":"no \"instance\"","Fragments":["in"]},{"Key":"\"instance\" in","Fragments":["elixir"]},{"Key":"for instance","Fragments":["vars.","\"only"]},{"Key":"instance vars.","Fragments":["Yeah,"]},{"Key":"vars. Yeah,","Fragments":["there"]},{"Key":"Yeah, there","Fragments":["are","seem"]},{"Key":"are hacks","Fragments":["to"]},{"Key":"hacks to","Fragments":["use"]},{"Key":"process dictionary,","Fragments":["but"]},{"Key":"dictionary, but","Fragments":["they're"]},{"Key":"they're frowned","Fragments":["upon."]},{"Key":"frowned upon.","Fragments":["Passing"]},{"Key":"upon. Passing","Fragments":["data"]},{"Key":"Passing data","Fragments":["in"]},{"Key":"in and","Fragments":["out","use","mentally"]},{"Key":"no side-effects","Fragments":["is"]},{"Key":"side-effects is","Fragments":["the"]},{"Key":"main point","Fragments":["of","of"]},{"Key":"functional language.","Fragments":["I","I'm"]},{"Key":"language. I","Fragments":["think","find"]},{"Key":"think it'll","Fragments":["feel"]},{"Key":"it'll feel","Fragments":["more"]},{"Key":"natural the","Fragments":["more"]},{"Key":"more you","Fragments":["do"]},{"Key":"myself writing","Fragments":["more"]},{"Key":"writing more","Fragments":["of"]},{"Key":"ruby methods","Fragments":["with"]},{"Key":"no side","Fragments":["effects"]},{"Key":"side effects","Fragments":["when"]},{"Key":"effects when","Fragments":["possible."]},{"Key":"There's one","Fragments":["more"]},{"Key":"more minor","Fragments":["nit"]},{"Key":"can bring","Fragments":["up,"]},{"Key":"bring up,","Fragments":["but"]},{"Key":"really teach","Fragments":["you"]},{"Key":"elixir the","Fragments":["language"]},{"Key":"language --","Fragments":["those"]},{"Key":"-- those","Fragments":["regexes"]},{"Key":"those regexes","Fragments":["will","are"]},{"Key":"regexes will","Fragments":["fail"]},{"Key":"fail in","Fragments":["the"]},{"Key":"characters (ü","Fragments":["for"]},{"Key":"(ü for","Fragments":["example)."]},{"Key":"for example).","Fragments":["The"]},{"Key":"example). The","Fragments":["elixir"]},{"Key":"The elixir","Fragments":["community"]},{"Key":"elixir community","Fragments":["is"]},{"Key":"more international","Fragments":["than"]},{"Key":"international than","Fragments":["others"]},{"Key":"than others","Fragments":["I've"]},{"Key":"others I've","Fragments":["dealt"]},{"Key":"I've dealt","Fragments":["with,"]},{"Key":"dealt with,","Fragments":["so"]},{"Key":"so unicode-awareness","Fragments":["is"]},{"Key":"unicode-awareness is","Fragments":["encouraged."]},{"Key":"Another de-duplication:","Fragments":["sing/1"]},{"Key":"de-duplication: sing/1","Fragments":["can"]},{"Key":"sing/1 can","Fragments":["call"]},{"Key":"also leaning","Fragments":["towards"]},{"Key":"leaning towards","Fragments":["more","`every_x_years`"]},{"Key":"towards more","Fragments":["functional"]},{"Key":"functional ruby","Fragments":["in"]},{"Key":"ruby in","Fragments":["the"]},{"Key":"the sense","Fragments":["that"]},{"Key":"sense that","Fragments":["I","i","I"]},{"Key":"I almost","Fragments":["never"]},{"Key":"almost never","Fragments":["change"]},{"Key":"never change","Fragments":["instance"]},{"Key":"change instance","Fragments":["level"]},{"Key":"data within","Fragments":["a"]},{"Key":"a method.","Fragments":["I"]},{"Key":"just set","Fragments":["it"]},{"Key":"set it","Fragments":["in"]},{"Key":"the initializer","Fragments":["and"]},{"Key":"initializer and","Fragments":["use"]},{"Key":"it throughout","Fragments":["the"]},{"Key":"throughout the","Fragments":["methods","term."]},{"Key":"unicode issue.","Fragments":["I"]},{"Key":"issue. I","Fragments":["don't"]},{"Key":"know any","Fragments":["simple"]},{"Key":"any simple","Fragments":["way"]},{"Key":"handle it","Fragments":["and"]},{"Key":"be important","Fragments":["for"]},{"Key":"important for","Fragments":["this"]},{"Key":"simple example,","Fragments":["but"]},{"Key":"example, but","Fragments":["in"]},{"Key":"in production","Fragments":["code","if"]},{"Key":"would find","Fragments":["a","a"]},{"Key":" Pushed","Fragments":["an"]},{"Key":"Pushed an","Fragments":["updated"]},{"Key":"updated version.","Fragments":["Let"]},{"Key":"version. Let","Fragments":["me"]},{"Key":"you think.","Fragments":["Thanks","Thanks"]},{"Key":"think. Thanks","Fragments":["for","again."]},{"Key":"read back","Fragments":[":-)"]},{"Key":"think `reduce`","Fragments":["is"]},{"Key":"the nicer","Fragments":["option"]},{"Key":"nicer option","Fragments":["here"]},{"Key":"option here","Fragments":["but"]},{"Key":"see why","Fragments":["you'd","@davion","it's","you'd","this","`Woah,"]},{"Key":"why you'd","Fragments":["want","stick"]},{"Key":"you'd want","Fragments":["to","to"]},{"Key":"reuse `count`","Fragments":["too."]},{"Key":"exercises to","Fragments":["get","include","nitpick"]},{"Key":"get more","Fragments":["difficult","experience"]},{"Key":"more difficult","Fragments":["the","ones."]},{"Key":"difficult the","Fragments":["further"]},{"Key":"the further","Fragments":["I"]},{"Key":"further I","Fragments":["went,"]},{"Key":"I went,","Fragments":["but"]},{"Key":"went, but","Fragments":["this"]},{"Key":"one seems","Fragments":["simple.","a"]},{"Key":"seems simple.","Fragments":["That"]},{"Key":"simple. That","Fragments":["probably"]},{"Key":"That probably","Fragments":["means"]},{"Key":"probably means","Fragments":["I'm"]},{"Key":"means I'm","Fragments":["missing"]},{"Key":"of `Stream.zip/2`.","Fragments":["Looks"]},{"Key":"`Stream.zip/2`. Looks","Fragments":["nice."]},{"Key":"notice is","Fragments":["that"]},{"Key":"parens on","Fragments":["your","line"]},{"Key":"function definitions.","Fragments":["Are"]},{"Key":"definitions. Are","Fragments":["you"]},{"Key":"a rubyist","Fragments":["from"]},{"Key":"rubyist from","Fragments":["Seattle?"]},{"Key":"from Seattle?","Fragments":[";-)"]},{"Key":"Seattle? ;-)","Fragments":["I'm"]},{"Key":";-) I'm","Fragments":["by"]},{"Key":"an expert,","Fragments":["but"]},{"Key":"always seen","Fragments":["definitions"]},{"Key":"seen definitions","Fragments":["with"]},{"Key":"definitions with","Fragments":["parens"]},{"Key":"with parens","Fragments":["in","from"]},{"Key":"elixir. It","Fragments":["seems"]},{"Key":"point to","Fragments":["have"]},{"Key":"in sing.","Fragments":["I"]},{"Key":"I wish","Fragments":["I'd","there","I"]},{"Key":"wish I'd","Fragments":["thought"]},{"Key":"I'd thought","Fragments":["of"]},{"Key":"The conditional","Fragments":["in"]},{"Key":"in singalong","Fragments":["seems"]},{"Key":"singalong seems","Fragments":["unnecessary."]},{"Key":"seems unnecessary.","Fragments":["I"]},{"Key":"unnecessary. I","Fragments":["wonder"]},{"Key":"things would","Fragments":["look"]},{"Key":"look with","Fragments":["either"]},{"Key":"with either","Fragments":["guard"]},{"Key":"either guard","Fragments":["clauses"]},{"Key":"clauses with","Fragments":["recursion"]},{"Key":"or else","Fragments":["using"]},{"Key":"else using","Fragments":["Enum.map"]},{"Key":"using Enum.map","Fragments":["with"]},{"Key":"Enum.map with","Fragments":["a"]},{"Key":"the \u0026(...)","Fragments":["syntax"]},{"Key":"\u0026(...) syntax","Fragments":["for"]},{"Key":"in sing","Fragments":["would"]},{"Key":"sing would","Fragments":["help."]},{"Key":"try separate","Fragments":["bottle_phrase"]},{"Key":"separate bottle_phrase","Fragments":["function"]},{"Key":"bottle_phrase function","Fragments":["declarations"]},{"Key":"declarations with","Fragments":["guard"]},{"Key":"clauses instead","Fragments":["of"]},{"Key":"recommend a","Fragments":["triple-quoted"]},{"Key":"a triple-quoted","Fragments":["string"]},{"Key":"triple-quoted string","Fragments":["in"]},{"Key":"in verse","Fragments":["for"]},{"Key":"verse for","Fragments":["improved"]},{"Key":"for improved","Fragments":["line"]},{"Key":"improved line","Fragments":["breaks."]},{"Key":"normal adjustment","Fragments":["towards"]},{"Key":"adjustment towards","Fragments":["a"]},{"Key":"towards a","Fragments":["new","particular"]},{"Key":" `String.last(s)","Fragments":["=="]},{"Key":"`String.last(s) ==","Fragments":["e`","\"?\"`"]},{"Key":"== e`","Fragments":["can"]},{"Key":"e` can","Fragments":["be"]},{"Key":"as `String.ends_with?(s,","Fragments":["e)`.","\"?\")`."]},{"Key":" `String.length(s)","Fragments":["==","=="]},{"Key":"as as","Fragments":["`s"]},{"Key":" @rebecca","Fragments":["It's"]},{"Key":"@rebecca It's","Fragments":["not"]},{"Key":"quite uncommon,","Fragments":["some"]},{"Key":"uncommon, some","Fragments":["people"]},{"Key":"some people","Fragments":["actively","think","find"]},{"Key":"people actively","Fragments":["advocate"]},{"Key":"actively advocate","Fragments":["this"]},{"Key":"advocate this","Fragments":["style."]},{"Key":"`String.graphemes` would","Fragments":["be"]},{"Key":"than `String.codepoints`","Fragments":["here"]},{"Key":"`String.codepoints` here","Fragments":["(there"]},{"Key":"here (there","Fragments":["are"]},{"Key":"(there are","Fragments":["ways"]},{"Key":"are ways","Fragments":["to"]},{"Key":"to encode","Fragments":["the"]},{"Key":"encode the","Fragments":["character","values"]},{"Key":"character \"é\"","Fragments":["with"]},{"Key":"\"é\" with","Fragments":["two"]},{"Key":"To match","Fragments":["a"]},{"Key":"letter you","Fragments":["can"]},{"Key":"use unicode","Fragments":["general","character"]},{"Key":"unicode general","Fragments":["category"]},{"Key":"category tests","Fragments":["in"]},{"Key":"in regexes:","Fragments":["`\"A\""]},{"Key":"regexes: `\"A\"","Fragments":["=~"]},{"Key":"`\"A\" =~","Fragments":["%r/\\p{L}/`","%r/\\p{Lu}/`"]},{"Key":"=~ %r/\\p{L}/`","Fragments":["is","is"]},{"Key":"%r/\\p{L}/` is","Fragments":["true,","false."]},{"Key":"true, `\"1\"","Fragments":["=~"]},{"Key":"`\"1\" =~","Fragments":["%r/\\p{L}/`"]},{"Key":"is false.","Fragments":["Works","I"]},{"Key":"false. Works","Fragments":["for"]},{"Key":"Works for","Fragments":["subcategories"]},{"Key":"for subcategories","Fragments":["too:"]},{"Key":"subcategories too:","Fragments":["`\"A\""]},{"Key":"too: `\"A\"","Fragments":["=~"]},{"Key":"=~ %r/\\p{Lu}/`","Fragments":["is","is"]},{"Key":"%r/\\p{Lu}/` is","Fragments":["true,","false."]},{"Key":"true, `\"a\"","Fragments":["=~"]},{"Key":"`\"a\" =~","Fragments":["%r/\\p{Lu}/`"]},{"Key":"Added two","Fragments":["more"]},{"Key":"two more","Fragments":["test"]},{"Key":"more test","Fragments":["cases"]},{"Key":"characters and","Fragments":["made","`bitstring_to_list`","binaries"]},{"Key":"and made","Fragments":["them","that","me"]},{"Key":"made them","Fragments":["pass."]},{"Key":" @thora","Fragments":["Thanks,"]},{"Key":"@thora Thanks,","Fragments":["I"]},{"Key":"added unicode","Fragments":["support"]},{"Key":"support using","Fragments":["that:"]},{"Key":"using that:","Fragments":["http://exercism.io/submissions/f6dd17cf7779f74e47c102ad"]},{"Key":", when","Fragments":["you"]},{"Key":"you declare","Fragments":["functions"]},{"Key":"declare functions","Fragments":["like"]},{"Key":"this `\u0026namefun`","Fragments":["is"]},{"Key":"`\u0026namefun` is","Fragments":["better"]},{"Key":"better readable","Fragments":["inside"]},{"Key":"readable inside","Fragments":["function"]},{"Key":"inside function","Fragments":["that"]},{"Key":"that apply","Fragments":[":"]},{"Key":" Enum.filter(words,","Fragments":["\u0026anagrams?(downcase(word),"]},{"Key":"Enum.filter(words, \u0026anagrams?(downcase(word),","Fragments":["downcase(\u00261))"]},{"Key":" `Regex.match?(%r/\\p{Lu}/,","Fragments":["string)"]},{"Key":"`Regex.match?(%r/\\p{Lu}/, string)","Fragments":["\u0026\u0026"]},{"Key":"string) \u0026\u0026","Fragments":["!Regex.match?(%r/\\p{Ll}/,"]},{"Key":"\u0026\u0026 !Regex.match?(%r/\\p{Ll}/,","Fragments":["string)`"]},{"Key":"!Regex.match?(%r/\\p{Ll}/, string)`","Fragments":["could"]},{"Key":"string)` could","Fragments":["be"]},{"Key":"as `Regex.match?(r/^[\\p{Lu}\\P{Ll}]+$/)`","Fragments":["using"]},{"Key":"`Regex.match?(r/^[\\p{Lu}\\P{Ll}]+$/)` using","Fragments":["the"]},{"Key":"the `\\P`","Fragments":["negated"]},{"Key":"`\\P` negated","Fragments":["unicode"]},{"Key":"negated unicode","Fragments":["category"]},{"Key":"unicode category","Fragments":["test."]},{"Key":" Err,","Fragments":["correction."]},{"Key":"Err, correction.","Fragments":["That"]},{"Key":"correction. That","Fragments":["regex"]},{"Key":"That regex","Fragments":["fails"]},{"Key":"regex fails","Fragments":["the"]},{"Key":"the \"no","Fragments":["letters"]},{"Key":"\"no letters","Fragments":["test\","]},{"Key":"letters test\",","Fragments":["so"]},{"Key":"test\", so","Fragments":["you"]},{"Key":"need an","Fragments":["additional","expression"]},{"Key":"an additional","Fragments":["regex"]},{"Key":"additional regex","Fragments":["to"]},{"Key":"letter and","Fragments":["overall","no","`\\p{N}`","all","`\\p{N}`"]},{"Key":"and overall","Fragments":["performance","I"]},{"Key":"overall performance","Fragments":["doesn't"]},{"Key":"performance doesn't","Fragments":["improve"]},{"Key":"doesn't improve","Fragments":["much.","performance","readability."]},{"Key":" @jaquan","Fragments":["Yes"]},{"Key":"@jaquan Yes","Fragments":["you"]},{"Key":"Yes you","Fragments":["could"]},{"Key":"probably make","Fragments":["a"]},{"Key":"single regex","Fragments":["for"]},{"Key":"for that,","Fragments":["but"]},{"Key":"more complex.","Fragments":["I"]},{"Key":"generally prefer","Fragments":["built"]},{"Key":"prefer built","Fragments":["in"]},{"Key":"in string","Fragments":["functions"]},{"Key":"or multiple","Fragments":["simple"]},{"Key":"multiple simple","Fragments":["regexes"]},{"Key":"simple regexes","Fragments":["before"]},{"Key":"regexes before","Fragments":["doing"]},{"Key":"doing complex","Fragments":["ones"]},{"Key":"complex ones","Fragments":["to"]},{"Key":"code simple","Fragments":["to"]},{"Key":"understand and","Fragments":["modify.","a"]},{"Key":" Optimizing","Fragments":["code"]},{"Key":"Optimizing code","Fragments":["usually"]},{"Key":"usually comes","Fragments":["with"]},{"Key":"a complexity","Fragments":["cost","of"]},{"Key":"complexity cost","Fragments":["which"]},{"Key":"cost which","Fragments":["slows"]},{"Key":"which slows","Fragments":["down"]},{"Key":"slows down","Fragments":["future"]},{"Key":"down future","Fragments":["development"]},{"Key":"future development","Fragments":["and"]},{"Key":"development and","Fragments":["increases"]},{"Key":"and increases","Fragments":["the"]},{"Key":"the potential","Fragments":["for","sublist."]},{"Key":"potential for","Fragments":["bugs."]},{"Key":"this uses","Fragments":["erlang"]},{"Key":"uses erlang","Fragments":["style"]},{"Key":"erlang style","Fragments":["lists"]},{"Key":"style lists","Fragments":["of"]},{"Key":"characters, not","Fragments":["elixir"]},{"Key":"not elixir","Fragments":["style"]},{"Key":"style binary","Fragments":["strings."]},{"Key":"binary strings.","Fragments":["That"]},{"Key":"strings. That","Fragments":["opens"]},{"Key":"That opens","Fragments":["up"]},{"Key":"opens up","Fragments":["all","some"]},{"Key":"of Enum","Fragments":["for"]},{"Key":"Enum for","Fragments":["doing"]},{"Key":"like counting","Fragments":["occurrences."]},{"Key":"can't really","Fragments":["argue","glance"]},{"Key":"really argue","Fragments":["with"]},{"Key":"argue with","Fragments":["that."]},{"Key":"with that.","Fragments":["Ideally"]},{"Key":"that. Ideally","Fragments":["I'd"]},{"Key":"code without","Fragments":["regexes"]},{"Key":"without regexes","Fragments":["and"]},{"Key":"`Enum.all?` and","Fragments":["`Enum.any?`"]},{"Key":"and `Enum.any?`","Fragments":["but"]},{"Key":"`Enum.any?` but","Fragments":["Elixir"]},{"Key":"doesn't yet","Fragments":["expose"]},{"Key":"yet expose","Fragments":["the"]},{"Key":"remove as","Fragments":["much"]},{"Key":"possible, but","Fragments":["that"]},{"Key":"just ugly","Fragments":["and"]},{"Key":"a naive","Fragments":["implementation"]},{"Key":"naive implementation","Fragments":["like"]},{"Key":"implementation like","Fragments":["this"]},{"Key":"this fits","Fragments":["the"]},{"Key":"fits the","Fragments":["task","problem."]},{"Key":"the task","Fragments":["very"]},{"Key":"task very","Fragments":["well."]},{"Key":"well. It's","Fragments":["not"]},{"Key":"the lyrics","Fragments":["to"]},{"Key":"lyrics to","Fragments":["the"]},{"Key":"song are","Fragments":["going"]},{"Key":"Yeah, I'm","Fragments":["not"]},{"Key":"formatting. Using","Fragments":["`do...end`"]},{"Key":"Using `do...end`","Fragments":["for"]},{"Key":"`do...end` for","Fragments":["longer"]},{"Key":"for longer","Fragments":["lines"]},{"Key":"longer lines","Fragments":["may"]},{"Key":"lines may","Fragments":["be"]},{"Key":"about splitting","Fragments":["anagrams?"]},{"Key":"splitting anagrams?","Fragments":["into"]},{"Key":"anagrams? into","Fragments":["two,"]},{"Key":"into two,","Fragments":["but"]},{"Key":"two, but","Fragments":["I"]},{"Key":"code simpler.","Fragments":["But"]},{"Key":"simpler. But","Fragments":["then"]},{"Key":"saw that","Fragments":["I","`String.split`"]},{"Key":"words when","Fragments":["I"]},{"Key":"I pass","Fragments":["them","things","the"]},{"Key":"pass them","Fragments":["into"]},{"Key":"into `anagrams?`","Fragments":["and"]},{"Key":"`anagrams?` and","Fragments":["the"]},{"Key":"code got","Fragments":["much"]},{"Key":"got much","Fragments":["simpler."]},{"Key":"much simpler.","Fragments":["See"]},{"Key":"simpler. See","Fragments":["next"]},{"Key":"call inline","Fragments":["with"]},{"Key":"inline with","Fragments":["the"]},{"Key":"the outer","Fragments":["function,","parens:"]},{"Key":"outer function,","Fragments":["but"]},{"Key":"very readable.","Fragments":["Maybe"]},{"Key":"readable. Maybe","Fragments":["it"]},{"Key":"Maybe it","Fragments":["would","should"]},{"Key":"extract `downcase_anagrams?`","Fragments":["into"]},{"Key":"`downcase_anagrams?` into","Fragments":["its"]},{"Key":"own method.","Fragments":["Don't"]},{"Key":"method. Don't","Fragments":["know"]},{"Key":"Don't know","Fragments":["why"]},{"Key":"extract `seconds_in_earth_year`","Fragments":["into"]},{"Key":"`seconds_in_earth_year` into","Fragments":["an"]},{"Key":"attribute reader","Fragments":["variable"]},{"Key":"reader variable","Fragments":["like"]},{"Key":"variable like","Fragments":[":"]},{"Key":" @rhett","Fragments":["31557600"]},{"Key":"prefer always","Fragments":["the"]},{"Key":"always the","Fragments":["pattern","option","same.","case"]},{"Key":"of `cond`","Fragments":["or","to","and","and"]},{"Key":"`cond` or","Fragments":["`case`"]},{"Key":"or `case`","Fragments":["because"]},{"Key":"`case` because","Fragments":["IMO"]},{"Key":"because IMO","Fragments":["is"]},{"Key":"IMO is","Fragments":["more"]},{"Key":"def age_on(:mercury,","Fragments":["seconds)"]},{"Key":"age_on(:mercury, seconds)","Fragments":["do"]},{"Key":"seconds) do","Fragments":["..."]},{"Key":"There's just","Fragments":["something"]},{"Key":"about Elixir's","Fragments":["attribute","\"bang\""]},{"Key":"Elixir's attribute","Fragments":["syntax"]},{"Key":"attribute syntax","Fragments":["I"]},{"Key":"syntax I","Fragments":["don't"]},{"Key":"don't like,","Fragments":["but"]},{"Key":"like, but","Fragments":["perhaps"]},{"Key":"perhaps I'll","Fragments":["warm"]},{"Key":"I'll warm","Fragments":["to"]},{"Key":"warm to","Fragments":["it"]},{"Key":"it over","Fragments":["time."]},{"Key":"in functions,","Fragments":["I'd"]},{"Key":"functions, I'd","Fragments":["tend"]},{"Key":"I'd tend","Fragments":["to","to"]},{"Key":"agree, but","Fragments":["in"]},{"Key":"more verbose.","Fragments":["If"]},{"Key":"verbose. If","Fragments":["the"]},{"Key":"definition syntax","Fragments":["was"]},{"Key":"was less","Fragments":["wordy"]},{"Key":"less wordy","Fragments":["I'd"]},{"Key":"wordy I'd","Fragments":["totally"]},{"Key":"I'd totally","Fragments":["do","forgotten"]},{"Key":"totally do","Fragments":["it!"]},{"Key":"syntax error","Fragments":["of","on","before:"]},{"Key":"error of","Fragments":["an"]},{"Key":"extra closing","Fragments":["parenthesis"]},{"Key":"closing parenthesis","Fragments":["on"]},{"Key":"parenthesis on","Fragments":["line"]},{"Key":" Beyond","Fragments":["that,","that,"]},{"Key":"Beyond that,","Fragments":["you've","I"]},{"Key":"that, you've","Fragments":["got"]},{"Key":"good justification","Fragments":["for"]},{"Key":"justification for","Fragments":["the"]},{"Key":"naive implementation.","Fragments":["I"]},{"Key":"won't speak","Fragments":["against"]},{"Key":"speak against","Fragments":["it,"]},{"Key":"against it,","Fragments":["but"]},{"Key":"do believe","Fragments":["you"]},{"Key":"believe you","Fragments":["might"]},{"Key":"might learn","Fragments":["more"]},{"Key":"language working","Fragments":["on"]},{"Key":"on making","Fragments":["a"]},{"Key":"a minimally","Fragments":["duplicative"]},{"Key":"minimally duplicative","Fragments":["solution"]},{"Key":"duplicative solution","Fragments":["maintainable."]},{"Key":"missing something,","Fragments":["but","though?"]},{"Key":"why @davion","Fragments":["is"]},{"Key":"@davion is","Fragments":["a"]},{"Key":"out `List.zip/1`","Fragments":["here"]},{"Key":" Dang,","Fragments":["last"]},{"Key":"Dang, last","Fragments":["minute"]},{"Key":"last minute","Fragments":["refactoring"]},{"Key":"minute refactoring","Fragments":["without"]},{"Key":"refactoring without","Fragments":["running"]},{"Key":"without running","Fragments":["the"]},{"Key":"running the","Fragments":["tests","whole"]},{"Key":"tests again.","Fragments":["Fixed"]},{"Key":"again. Fixed","Fragments":["in"]},{"Key":"point concerning","Fragments":["making"]},{"Key":"concerning making","Fragments":["the"]},{"Key":"with minimal","Fragments":["duplication"]},{"Key":"minimal duplication","Fragments":["maintainable."]},{"Key":"duplication maintainable.","Fragments":["Maybe"]},{"Key":"maintainable. Maybe","Fragments":["I"]},{"Key":" Verse","Fragments":["2"]},{"Key":"Verse 2","Fragments":["is"]},{"Key":"different (1","Fragments":["bottle"]},{"Key":"(1 bottle","Fragments":["of"]},{"Key":"beer instead","Fragments":["of"]},{"Key":"of 1","Fragments":["bottles","over"]},{"Key":"1 bottles","Fragments":["of"]},{"Key":"main things","Fragments":["that"]},{"Key":"that threw","Fragments":["me","a"]},{"Key":"threw me","Fragments":["off"]},{"Key":"me off","Fragments":["were","for"]},{"Key":"off were","Fragments":["the"]},{"Key":"last two","Fragments":["tests","function","function","expressions","functions"]},{"Key":"two tests","Fragments":["that","in"]},{"Key":"tests that","Fragments":["used","make","was","the"]},{"Key":"used only","Fragments":["numbers."]},{"Key":"only numbers.","Fragments":["Since"]},{"Key":"numbers. Since","Fragments":["String.upcase"]},{"Key":"Since String.upcase","Fragments":["on"]},{"Key":"String.upcase on","Fragments":["a"]},{"Key":"a numbers-only","Fragments":["input"]},{"Key":"numbers-only input","Fragments":["will","itself,"]},{"Key":"input will","Fragments":["look"]},{"Key":"look the","Fragments":["same"]},{"Key":"the numbers-only","Fragments":["input"]},{"Key":"input itself,","Fragments":["I"]},{"Key":"itself, I","Fragments":["had"]},{"Key":"move around","Fragments":["my"]},{"Key":"around my","Fragments":["matches","code"]},{"Key":"my matches","Fragments":["such"]},{"Key":"matches such","Fragments":["that"]},{"Key":"such that","Fragments":["we","it","they"]},{"Key":"that we","Fragments":["check","rarely","can","have","add"]},{"Key":"we check","Fragments":["for","for"]},{"Key":"or question","Fragments":["inputs,"]},{"Key":"question inputs,","Fragments":["THEN"]},{"Key":"inputs, THEN","Fragments":["we"]},{"Key":"THEN we","Fragments":["check"]},{"Key":"for numbers-only","Fragments":["and"]},{"Key":"numbers-only and","Fragments":["shouting."]},{"Key":" Aha.","Fragments":["so","I"]},{"Key":"Aha. so","Fragments":["List.zip"]},{"Key":"so List.zip","Fragments":["doesn't"]},{"Key":"List.zip doesn't","Fragments":["pad"]},{"Key":"doesn't pad","Fragments":["with"]},{"Key":"pad with","Fragments":["nil."]},{"Key":"nil. That","Fragments":["tightens"]},{"Key":"That tightens","Fragments":["things"]},{"Key":"tightens things","Fragments":["up."]},{"Key":"things up.","Fragments":["Thanks!"]},{"Key":"single 's'","Fragments":["that"]},{"Key":"'s' that","Fragments":["makes"]},{"Key":"makes verse","Fragments":["2"]},{"Key":"verse 2","Fragments":["a"]},{"Key":"2 a","Fragments":["special"]},{"Key":"case. When","Fragments":["I"]},{"Key":"solved this","Fragments":["I"]},{"Key":"a plural","Fragments":["function"]},{"Key":"plural function","Fragments":["that"]},{"Key":"that returned","Fragments":["\"s\""]},{"Key":"returned \"s\"","Fragments":["or"]},{"Key":"\"s\" or","Fragments":["\"\""]},{"Key":"or \"\"","Fragments":["depending"]},{"Key":"\"\" depending","Fragments":["on"]},{"Key":"number passed","Fragments":["to"]},{"Key":"my interpolation","Fragments":["strings"]},{"Key":"interpolation strings","Fragments":["contained"]},{"Key":"contained \"bottle#{s}\"","Fragments":["and"]},{"Key":"\"bottle#{s}\" and","Fragments":["s"]},{"Key":"and s","Fragments":["was"]},{"Key":"s was","Fragments":["the"]},{"Key":"return val","Fragments":["from"]},{"Key":"val from","Fragments":["my"]},{"Key":"my plural","Fragments":["function."]},{"Key":"it's up","Fragments":["to"]},{"Key":"you whether","Fragments":["to"]},{"Key":"to iterate","Fragments":["on","on","over","over","over"]},{"Key":"iterate on","Fragments":["this","this"]},{"Key":"this or","Fragments":["move"]},{"Key":"move on.","Fragments":[":thumbsup:"]},{"Key":"on. :thumbsup:","Fragments":["from"]},{"Key":":thumbsup: from","Fragments":["me"]},{"Key":"feedback. Moving","Fragments":["on!"]},{"Key":" Few","Fragments":["surprises","remarks:"]},{"Key":"Few surprises","Fragments":["here,"]},{"Key":"surprises here,","Fragments":["I"]},{"Key":"here, I","Fragments":["think.","too"]},{"Key":"avoid running","Fragments":["through"]},{"Key":"running through","Fragments":["the","append"]},{"Key":"DNA four","Fragments":["times"]},{"Key":"times by","Fragments":["using"]},{"Key":"`Enum.reduce` with","Fragments":["`HashDict.update`."]},{"Key":"In `count`","Fragments":["you"]},{"Key":"`count` you","Fragments":["can"]},{"Key":"use `Enum.count(collection,","Fragments":["fun)`."]},{"Key":"write `def","Fragments":["nucleotides`"]},{"Key":"`def nucleotides`","Fragments":["as"]},{"Key":"nucleotides` as","Fragments":["`@freddie"]},{"Key":"as `@freddie","Fragments":["'ATCG'`"]},{"Key":"`@freddie 'ATCG'`","Fragments":["(`'ATCG'`"]},{"Key":"'ATCG'` (`'ATCG'`","Fragments":["=="]},{"Key":"(`'ATCG'` ==","Fragments":["`[?A,"]},{"Key":"?C, ?G]`),","Fragments":["in"]},{"Key":"?G]`), in","Fragments":["Elixir"]},{"Key":"Elixir we","Fragments":["tend","usually"]},{"Key":"we tend","Fragments":["to"]},{"Key":"attributes (`@freddie`)","Fragments":["for"]},{"Key":"(`@freddie`) for","Fragments":["constants."]},{"Key":"for constants.","Fragments":["It's"]},{"Key":"constants. It's","Fragments":["style"]},{"Key":"It's style","Fragments":["matter"]},{"Key":"style matter","Fragments":["and"]},{"Key":"matter and","Fragments":["there's"]},{"Key":"very small","Fragments":["performance","set"]},{"Key":"small performance","Fragments":["benefit","penalty,"]},{"Key":"benefit in","Fragments":["that"]},{"Key":"that those","Fragments":["module"]},{"Key":"those module","Fragments":["attributes"]},{"Key":"attributes only","Fragments":["need"]},{"Key":"only need","Fragments":["to","an","one","one","one"]},{"Key":"be computed","Fragments":["once","in","even"]},{"Key":"computed once","Fragments":["instead"]},{"Key":"use `Enum.count/2`","Fragments":["instead"]},{"Key":"`Enum.count/2` instead","Fragments":["of"]},{"Key":"Is `thymidineToUracil`","Fragments":["intended"]},{"Key":"`thymidineToUracil` intended","Fragments":["as"]},{"Key":"No, I","Fragments":["don't","have"]},{"Key":" Yup.","Fragments":["It's","List"]},{"Key":"Yup. It's","Fragments":["always"]},{"Key":"It's always","Fragments":["a","so"]},{"Key":"interface of","Fragments":["a","the"]},{"Key":"as small","Fragments":["as"]},{"Key":"small as","Fragments":["possible."]},{"Key":"possible. The","Fragments":["smaller"]},{"Key":"The smaller","Fragments":["an","change,"]},{"Key":"smaller an","Fragments":["interface,"]},{"Key":"interface, the","Fragments":["easier"]},{"Key":"the easier","Fragments":["it"]},{"Key":"easier it","Fragments":["will"]},{"Key":"put public","Fragments":["functions"]},{"Key":"functions first","Fragments":["and"]},{"Key":"private ones","Fragments":["last"]},{"Key":"ones last","Fragments":["just"]},{"Key":"last just","Fragments":["to"]},{"Key":"a developer","Fragments":["reading"]},{"Key":"developer reading","Fragments":["the"]},{"Key":"call at","Fragments":["the"]},{"Key":"the file.","Fragments":["Very",":/"]},{"Key":"file. Very","Fragments":["minor"]},{"Key":"like Enum.count/2","Fragments":["better"]},{"Key":"Enum.count/2 better","Fragments":["so"]},{"Key":"to mess","Fragments":["with","with"]},{"Key":"mess with","Fragments":["the","that,"]},{"Key":" Personally","Fragments":["I'd","I"]},{"Key":"Personally I'd","Fragments":["do"]},{"Key":"do `Enum.count(fn","Fragments":["{a,"]},{"Key":"`Enum.count(fn {a,","Fragments":["b}"]},{"Key":"{a, b}","Fragments":["-\u003e"]},{"Key":"b} -\u003e","Fragments":["a"]},{"Key":"b end)`,","Fragments":["but"]},{"Key":"end)`, but","Fragments":["this"]},{"Key":"works too.","Fragments":["Any"]},{"Key":"too. Any","Fragments":["reason"]},{"Key":"reason `point_compare`","Fragments":["is"]},{"Key":"`point_compare` is","Fragments":["public,"]},{"Key":"is public,","Fragments":["btw?"]},{"Key":"used `Enum#count`","Fragments":["instead"]},{"Key":"`Enum#count` instead","Fragments":["of"]},{"Key":"of `Enum#reduce`,","Fragments":["but"]},{"Key":"`Enum#reduce`, but","Fragments":["I"]},{"Key":"it's any","Fragments":["more"]},{"Key":"more \"right\".","Fragments":["I"]},{"Key":"\"right\". I","Fragments":["think"]},{"Key":"good. It's","Fragments":["nice"]},{"Key":"It's nice","Fragments":["and"]},{"Key":"and simple,","Fragments":["like","and"]},{"Key":"simple, like","Fragments":["you"]},{"Key":"about `Regex#replace`?","Fragments":["Either"]},{"Key":"`Regex#replace`? Either","Fragments":["way,"]},{"Key":"Either way,","Fragments":["it's","it"]},{"Key":"way, it's","Fragments":["a","also"]},{"Key":"just considering","Fragments":["whether"]},{"Key":"considering whether","Fragments":["the"]},{"Key":"clauses made","Fragments":["it"]},{"Key":"easier or","Fragments":["harder"]},{"Key":"or harder","Fragments":["to"]},{"Key":"to boot.","Fragments":["For"]},{"Key":"boot. For","Fragments":["some"]},{"Key":"still struggle","Fragments":["to"]},{"Key":"struggle to","Fragments":["remember","notice"]},{"Key":" Haha!","Fragments":["Yes,"]},{"Key":"Haha! Yes,","Fragments":["guilty"]},{"Key":"Yes, guilty","Fragments":["but"]},{"Key":"guilty but","Fragments":["I"]},{"Key":"not from","Fragments":["Seattle,"]},{"Key":"from Seattle,","Fragments":["but"]},{"Key":"Seattle, but","Fragments":["I"]},{"Key":"ported over","Fragments":["my"]},{"Key":"habit with","Fragments":["parens"]},{"Key":"parens from","Fragments":["how"]},{"Key":"from how","Fragments":["I"]},{"Key":"I work","Fragments":["with"]},{"Key":"with Ruby.","Fragments":["As"]},{"Key":"Ruby. As","Fragments":["for"]},{"Key":"the singalong","Fragments":["I"]},{"Key":"singalong I","Fragments":["know"]},{"Key":"know I","Fragments":["have","don't","haven't","got","was"]},{"Key":"have deliberately","Fragments":["stayed"]},{"Key":"deliberately stayed","Fragments":["away"]},{"Key":"from Enum","Fragments":["because"]},{"Key":"Enum because","Fragments":["I"]},{"Key":"wanted my","Fragments":["first"]},{"Key":"first few","Fragments":["elixir","test"]},{"Key":"few elixir","Fragments":["solutions"]},{"Key":"elixir solutions","Fragments":["to"]},{"Key":"solutions to","Fragments":["be","operations"]},{"Key":"be recursive.","Fragments":["No"]},{"Key":"recursive. No","Fragments":["a"]},{"Key":"No a","Fragments":["fan"]},{"Key":"the cond;","Fragments":["do;"]},{"Key":"cond; do;","Fragments":["end"]},{"Key":"do; end","Fragments":["either,"]},{"Key":"end either,","Fragments":["I'll"]},{"Key":"either, I'll","Fragments":["look"]},{"Key":"something else,","Fragments":["probably"]},{"Key":"else, probably","Fragments":["going"]},{"Key":"probably going","Fragments":["to"]},{"Key":"try with","Fragments":["guard"]},{"Key":"guard clauses.","Fragments":["Thanks","To"]},{"Key":"clauses. Thanks","Fragments":["for"]},{"Key":"definitely prefer","Fragments":["the"]},{"Key":"guarded version","Fragments":["of"]},{"Key":"of singalong.","Fragments":["And"]},{"Key":"singalong. And","Fragments":["now"]},{"Key":"And now","Fragments":["that","that","for"]},{"Key":"I'm reminded","Fragments":["of"]},{"Key":"reminded of","Fragments":["another"]},{"Key":"another convention","Fragments":["I've"]},{"Key":"convention I've","Fragments":["noticed."]},{"Key":"I've noticed.","Fragments":["You"]},{"Key":"noticed. You","Fragments":["can"]},{"Key":"clauses named","Fragments":["_sing"]},{"Key":"named _sing","Fragments":["as"]},{"Key":"_sing as","Fragments":["the"]},{"Key":"the delegates","Fragments":["of"]},{"Key":"delegates of","Fragments":["the"]},{"Key":"public sing","Fragments":["function."]},{"Key":"sing function.","Fragments":["There's"]},{"Key":"function. There's","Fragments":["nothing"]},{"Key":"helps signify","Fragments":["that"]},{"Key":"signify that","Fragments":["a"]},{"Key":"a group","Fragments":["of"]},{"Key":"group of","Fragments":["functions"]},{"Key":"one related","Fragments":["\"thought\""]},{"Key":"related \"thought\"","Fragments":["with"]},{"Key":"\"thought\" with","Fragments":["the"]},{"Key":"the _sing","Fragments":["convention."]},{"Key":"other nitpick","Fragments":["is"]},{"Key":"that concatenating","Fragments":["on"]},{"Key":"concatenating on","Fragments":["the"]},{"Key":"an expensive","Fragments":["operation","computation.","structure"]},{"Key":"expensive operation","Fragments":["(and"]},{"Key":"operation (and","Fragments":["you're"]},{"Key":"(and you're","Fragments":["doing"]},{"Key":"every line","Fragments":["of"]},{"Key":"the song).","Fragments":["If"]},{"Key":"song). If","Fragments":["you"]},{"Key":"mind, great,","Fragments":["if"]},{"Key":"great, if","Fragments":["but"]},{"Key":"if but","Fragments":["you'd"]},{"Key":"but you'd","Fragments":["rather"]},{"Key":"you'd rather","Fragments":["move"]},{"Key":"rather move","Fragments":["on,"]},{"Key":"move on,","Fragments":["I"]},{"Key":"on, I","Fragments":["wouldn't"]},{"Key":"wouldn't fault","Fragments":["you."]},{"Key":"fault you.","Fragments":["Since"]},{"Key":"you. Since","Fragments":["you"]},{"Key":"stay recursive,","Fragments":["you'd"]},{"Key":"recursive, you'd","Fragments":["want"]},{"Key":"to recurse","Fragments":["with"]},{"Key":"recurse with","Fragments":["a"]},{"Key":"list as","Fragments":["the","the","a"]},{"Key":"accumulator pushing","Fragments":["new"]},{"Key":"pushing new","Fragments":["strings"]},{"Key":"new strings","Fragments":["onto"]},{"Key":"strings onto","Fragments":["head,"]},{"Key":"onto head,","Fragments":["then"]},{"Key":"head, then","Fragments":["your"]},{"Key":"then your","Fragments":["\"ground"]},{"Key":"your \"ground","Fragments":["clause\""]},{"Key":"\"ground clause\"","Fragments":["(when"]},{"Key":"clause\" (when","Fragments":["from"]},{"Key":"(when from","Fragments":["=="]},{"Key":"from ==","Fragments":["to)"]},{"Key":"== to)","Fragments":["would"]},{"Key":"to) would","Fragments":["reverse"]},{"Key":"would reverse","Fragments":["and"]},{"Key":"reverse and","Fragments":["join"]},{"Key":"and join","Fragments":["the"]},{"Key":"strings all","Fragments":["at"]},{"Key":"I'll second","Fragments":["what"]},{"Key":"second what","Fragments":["@madelyn","@gregory"]},{"Key":"what @madelyn","Fragments":["had"]},{"Key":"@madelyn had","Fragments":["to"]},{"Key":"say about","Fragments":["descriptive"]},{"Key":"about descriptive","Fragments":["names"]},{"Key":"`cond` clauses.","Fragments":["Without"]},{"Key":"clauses. Without","Fragments":["reading"]},{"Key":"Without reading","Fragments":["the"]},{"Key":"suite or","Fragments":["README","something."]},{"Key":"or README","Fragments":["associated"]},{"Key":"README associated","Fragments":["with"]},{"Key":"associated with","Fragments":["this"]},{"Key":"exercise, we","Fragments":["can't"]},{"Key":"really glance","Fragments":["at"]},{"Key":"glance at","Fragments":["your"]},{"Key":"intention behind","Fragments":["the"]},{"Key":"at Dict.get","Fragments":["for"]},{"Key":"Dict.get for","Fragments":["your"]},{"Key":"of HashDict.new/2","Fragments":["in"]},{"Key":"HashDict.new/2 in","Fragments":["your"]},{"Key":"your attribute.","Fragments":["I"]},{"Key":"attribute. I","Fragments":["was"]},{"Key":"that variation","Fragments":["before."]},{"Key":"using Dict.update/4,","Fragments":["but"]},{"Key":"Dict.update/4, but","Fragments":["since"]},{"Key":"you initialize","Fragments":["@jamison"]},{"Key":"initialize @jamison","Fragments":["with"]},{"Key":"@jamison with","Fragments":["zeros,"]},{"Key":"with zeros,","Fragments":["you"]},{"Key":"zeros, you","Fragments":["could"]},{"Key":"You're scanning","Fragments":["the"]},{"Key":"scanning the","Fragments":["entire"]},{"Key":"entire word","Fragments":["list","list."]},{"Key":"list over","Fragments":["and"]},{"Key":"over again","Fragments":["for"]},{"Key":"each word.","Fragments":["Do"]},{"Key":"word. Do","Fragments":["you"]},{"Key":"pass? Consider","Fragments":["instead"]},{"Key":"Consider instead","Fragments":["of"]},{"Key":"of Enum.map","Fragments":["doing"]},{"Key":"Enum.map doing","Fragments":["an"]},{"Key":"doing an","Fragments":["Enum.reduce"]},{"Key":"an Enum.reduce","Fragments":["with"]},{"Key":"Enum.reduce with","Fragments":["a"]},{"Key":"HashDict as","Fragments":["your","the"]},{"Key":"That make","Fragments":["sense.","sense."]},{"Key":"why but","Fragments":["I"]},{"Key":"order mattered","Fragments":["in"]},{"Key":"mattered in","Fragments":["Elixir."]},{"Key":"Elixir. Like","Fragments":["in,"]},{"Key":"Like in,","Fragments":["say,"]},{"Key":"think perhaps","Fragments":["using"]},{"Key":"perhaps using","Fragments":["macros/guards"]},{"Key":"using macros/guards","Fragments":["is"]},{"Key":"macros/guards is","Fragments":["overcomplicating"]},{"Key":"is overcomplicating","Fragments":["this."]},{"Key":"overcomplicating this.","Fragments":["Should"]},{"Key":"this. Should","Fragments":["probably"]},{"Key":"Should probably","Fragments":["redo"]},{"Key":"probably redo","Fragments":["just"]},{"Key":"redo just","Fragments":["with"]},{"Key":"just with","Fragments":["functions","the"]},{"Key":"with functions","Fragments":["and"]},{"Key":"in moving","Fragments":["along,"]},{"Key":"moving along,","Fragments":["but"]},{"Key":"still eager","Fragments":["for"]},{"Key":"eager for","Fragments":["any"]},{"Key":"any feedback","Fragments":["on"]},{"Key":"so don't","Fragments":["let","worry,"]},{"Key":"the \"completed\"","Fragments":["status"]},{"Key":"\"completed\" status","Fragments":["fool"]},{"Key":"status fool","Fragments":["you."]},{"Key":" Functions","Fragments":["in"]},{"Key":"Functions in","Fragments":["elixir"]},{"Key":"elixir can","Fragments":["have"]},{"Key":"have default","Fragments":["values"]},{"Key":"I've send","Fragments":["in","a"]},{"Key":"send in","Fragments":["a"]},{"Key":"bad sorting","Fragments":["test."]},{"Key":"sorting test.","Fragments":["Thanks"]},{"Key":"test. Thanks","Fragments":["for"]},{"Key":"for finding","Fragments":["that"]},{"Key":"finding that","Fragments":["bug.","\"sweet"]},{"Key":"you append","Fragments":["lists","the","the"]},{"Key":"append lists","Fragments":["in"]},{"Key":"lists in","Fragments":["the","general"]},{"Key":"the `add`","Fragments":["function","function"]},{"Key":"`add` function","Fragments":["instead","is"]},{"Key":"of prepending","Fragments":["the"]},{"Key":"prepending the","Fragments":["element?"]},{"Key":"That `Dict.merge`","Fragments":["looks"]},{"Key":"`Dict.merge` looks","Fragments":["weird"]},{"Key":"looks weird","Fragments":["to"]},{"Key":"me. What's","Fragments":["the"]},{"Key":"idea behind","Fragments":["it?","your"]},{"Key":" Initially","Fragments":["I","I"]},{"Key":"Initially I","Fragments":["raised","went"]},{"Key":"I raised","Fragments":["my"]},{"Key":"raised my","Fragments":["eyebrow"]},{"Key":"my eyebrow","Fragments":["at"]},{"Key":"eyebrow at","Fragments":["that"]},{"Key":"that List.insert_at","Fragments":["call,"]},{"Key":"List.insert_at call,","Fragments":["but"]},{"Key":"gets you","Fragments":["that"]},{"Key":"that extra","Fragments":["trailing","check","test","module"]},{"Key":"extra trailing","Fragments":["newline"]},{"Key":"trailing newline","Fragments":["character."]},{"Key":"newline character.","Fragments":["It's"]},{"Key":"character. It's","Fragments":["clever,"]},{"Key":"It's clever,","Fragments":["but"]},{"Key":"clever, but","Fragments":["not"]},{"Key":"particularly clear.","Fragments":["Did"]},{"Key":"clear. Did","Fragments":["you"]},{"Key":"try any","Fragments":["other"]},{"Key":"other alternatives","Fragments":["to","I"]},{"Key":"weird on","Fragments":["the"]},{"Key":"that names","Fragments":["should"]},{"Key":"names should","Fragments":["be"]},{"Key":"inserted but","Fragments":["I"]},{"Key":"they're added","Fragments":["in"]},{"Key":"added in","Fragments":["the"]},{"Key":"order they're","Fragments":["given."]},{"Key":"they're given.","Fragments":["Hence"]},{"Key":"given. Hence","Fragments":["the"]},{"Key":"Hence the","Fragments":["appending."]},{"Key":"The `Dict.merge`","Fragments":["method"]},{"Key":"`Dict.merge` method","Fragments":["takes"]},{"Key":"method takes","Fragments":["two"]},{"Key":"takes two","Fragments":["dictionaries","arguments;","strings."]},{"Key":"two dictionaries","Fragments":["and","so"]},{"Key":"dictionaries and","Fragments":["allows"]},{"Key":"and allows","Fragments":["you"]},{"Key":"you resolve","Fragments":["key"]},{"Key":"resolve key","Fragments":["conflicts"]},{"Key":"key conflicts","Fragments":["during"]},{"Key":"conflicts during","Fragments":["the"]},{"Key":"during the","Fragments":["merge"]},{"Key":"the merge","Fragments":["with"]},{"Key":"merge with","Fragments":["a"]},{"Key":"function. In","Fragments":["this"]},{"Key":"I gave","Fragments":["the"]},{"Key":"gave the","Fragments":["same"]},{"Key":"same two","Fragments":["dictionaries"]},{"Key":"dictionaries so","Fragments":["all","if","if"]},{"Key":"keys collide.","Fragments":["Then"]},{"Key":"collide. Then","Fragments":["I"]},{"Key":"Then I","Fragments":["\"resolve\"","made"]},{"Key":"I \"resolve\"","Fragments":["the"]},{"Key":"\"resolve\" the","Fragments":["conflict"]},{"Key":"the conflict","Fragments":["my"]},{"Key":"conflict my","Fragments":["sorting"]},{"Key":"my sorting","Fragments":["the"]},{"Key":"the values.","Fragments":["It's","Can"]},{"Key":"values. It's","Fragments":["basically"]},{"Key":"It's basically","Fragments":["doing"]},{"Key":"basically doing","Fragments":["a"]},{"Key":"the values","Fragments":["of","in","of","pointed"]},{"Key":"the dict.","Fragments":["I"]},{"Key":"dict. I","Fragments":["could"]},{"Key":"function if","Fragments":["that","there"]},{"Key":"def sort(db)","Fragments":["do"]},{"Key":" map_values","Fragments":["db,"]},{"Key":"map_values db,","Fragments":["fn(roster)"]},{"Key":"db, fn(roster)","Fragments":["-\u003e"]},{"Key":"defp map_values(db,","Fragments":["fun)"]},{"Key":"map_values(db, fun)","Fragments":["do"]},{"Key":" Dict.merge","Fragments":["db,"]},{"Key":"Dict.merge db,","Fragments":["db,"]},{"Key":"db, db,","Fragments":["fn(_,"]},{"Key":"db, fn(_,","Fragments":["roster,"]},{"Key":"fn(_, roster,","Fragments":["_)"]},{"Key":"roster, _)","Fragments":["-\u003e"]},{"Key":"That Dict.merge","Fragments":["is"]},{"Key":"Dict.merge is","Fragments":["interesting."]},{"Key":"interesting. I'm","Fragments":["on"]},{"Key":"I'm on","Fragments":["the","pretty"]},{"Key":"the fence","Fragments":["whether"]},{"Key":"fence whether","Fragments":["I"]},{"Key":"whether I","Fragments":["think"]},{"Key":"it's clever","Fragments":["or"]},{"Key":"clever or","Fragments":["too"]},{"Key":"or too","Fragments":["clever."]},{"Key":" @jovani","Fragments":["I"]},{"Key":"@jovani I","Fragments":["completely"]},{"Key":"line 15","Fragments":["and","doesn't","by","would","entirely"]},{"Key":"15 and","Fragments":["16."]},{"Key":"and 16.","Fragments":["If"]},{"Key":"16. If","Fragments":["the"]},{"Key":"are empty","Fragments":["(which"]},{"Key":"empty (which","Fragments":["is"]},{"Key":"is unlikely)","Fragments":["`List.zip"]},{"Key":"unlikely) `List.zip","Fragments":["|\u003e"]},{"Key":"`List.zip |\u003e","Fragments":["Enum.count`"]},{"Key":"Enum.count` will","Fragments":["be"]},{"Key":"be fast","Fragments":["as"]},{"Key":"well, so","Fragments":["line"]},{"Key":"so line","Fragments":["15"]},{"Key":"15 doesn't","Fragments":["improve"]},{"Key":"improve performance","Fragments":["that"]},{"Key":"performance that","Fragments":["much."]},{"Key":"that much.","Fragments":["Line","Not"]},{"Key":"much. Line","Fragments":["16"]},{"Key":"16 improves","Fragments":["performance"]},{"Key":"improves performance","Fragments":["slightly"]},{"Key":"performance slightly","Fragments":["in"]},{"Key":"slightly in","Fragments":["the"]},{"Key":"same but","Fragments":["if","`Enum.reduce`"]},{"Key":"not it","Fragments":["actually"]},{"Key":"actually hurts","Fragments":["performance"]},{"Key":"hurts performance","Fragments":["by"]},{"Key":"performance by","Fragments":["forcing"]},{"Key":"by forcing","Fragments":["two"]},{"Key":"forcing two","Fragments":["list"]},{"Key":"two list","Fragments":["traversals."]},{"Key":" @asia","Fragments":["thanks"]},{"Key":"@asia thanks","Fragments":["for"]},{"Key":"Minor nit,","Fragments":["but"]},{"Key":"nit, but","Fragments":["there's"]},{"Key":"general convention","Fragments":["of"]},{"Key":"of ending","Fragments":["predicate"]},{"Key":"ending predicate","Fragments":["functions","functions"]},{"Key":"point! I","Fragments":["thought"]},{"Key":"was used","Fragments":["in"]},{"Key":" @kristofer","Fragments":["Jose"]},{"Key":"@kristofer Jose","Fragments":["Valim,"]},{"Key":"Jose Valim,","Fragments":["the"]},{"Key":"Valim, the","Fragments":["author"]},{"Key":"author of","Fragments":["Elixir,"]},{"Key":"Elixir, is","Fragments":["a"]},{"Key":"a committer","Fragments":["on"]},{"Key":"committer on","Fragments":["a"]},{"Key":"of Ruby","Fragments":["projects,"]},{"Key":"Ruby projects,","Fragments":["and"]},{"Key":"projects, and","Fragments":["has"]},{"Key":"has openly","Fragments":["acknowledged"]},{"Key":"openly acknowledged","Fragments":["that"]},{"Key":"acknowledged that","Fragments":["Ruby"]},{"Key":"that Ruby","Fragments":["influenced"]},{"Key":"Ruby influenced","Fragments":["Elixir"]},{"Key":"influenced Elixir","Fragments":["quite"]},{"Key":"Elixir quite","Fragments":["a"]},{"Key":"bit as","Fragments":["he","you"]},{"Key":"as he","Fragments":["was"]},{"Key":"he was","Fragments":["designing"]},{"Key":"was designing","Fragments":["it."]},{"Key":" Giving","Fragments":["a"]},{"Key":"Giving a","Fragments":["name"]},{"Key":"number 31557600","Fragments":["would"]},{"Key":"31557600 would","Fragments":["make"]},{"Key":" @darius","Fragments":["That's"]},{"Key":"@darius That's","Fragments":["definitely"]},{"Key":"That's definitely","Fragments":["the"]},{"Key":"the part","Fragments":["of"]},{"Key":"this iteration","Fragments":["that","feels","and"]},{"Key":"I'm least","Fragments":["happy"]},{"Key":"least happy","Fragments":["with."]},{"Key":"happy with.","Fragments":["I"]},{"Key":"with. I","Fragments":["worked"]},{"Key":"I worked","Fragments":["this"]},{"Key":"worked this","Fragments":["out"]},{"Key":"out over","Fragments":["a"]},{"Key":"a lunch","Fragments":["break"]},{"Key":"lunch break","Fragments":["and"]},{"Key":"break and","Fragments":["I"]},{"Key":"just couldn't","Fragments":["think"]},{"Key":"better solution.","Fragments":["The"]},{"Key":"solution. The","Fragments":["extra","good","`is_anagram`","only"]},{"Key":"newline from","Fragments":["the"]},{"Key":"suite was","Fragments":["a"]},{"Key":"real curveball","Fragments":["for"]},{"Key":"curveball for","Fragments":["me."]},{"Key":"discovered it","Fragments":["either"]},{"Key":"With pminten's","Fragments":["help"]},{"Key":"pminten's help","Fragments":["I"]},{"Key":"help I","Fragments":["ended"]},{"Key":"something akin","Fragments":["to:"]},{"Key":"verses |\u003e","Fragments":["Enum.map(\u0026[\u00261,"]},{"Key":"|\u003e Enum.map(\u0026[\u00261,","Fragments":["?\\n])"]},{"Key":"Enum.map(\u0026[\u00261, ?\\n])","Fragments":["|\u003e"]},{"Key":" iolist_to_binary","Fragments":["dug"]},{"Key":"iolist_to_binary dug","Fragments":["deeper"]},{"Key":"dug deeper","Fragments":["into"]},{"Key":"deeper into","Fragments":["the"]},{"Key":"Erlang bag","Fragments":["of"]},{"Key":"bag of","Fragments":["tricks"]},{"Key":"of tricks","Fragments":["than"]},{"Key":"tricks than","Fragments":["I"]},{"Key":"this partition","Fragments":["method"]},{"Key":"partition method","Fragments":["is"]},{"Key":"more imperative,","Fragments":["my"]},{"Key":"imperative, my","Fragments":["test"]},{"Key":"test time","Fragments":["dropped"]},{"Key":"time dropped","Fragments":["from"]},{"Key":"dropped from","Fragments":["0.3s"]},{"Key":"from 0.3s","Fragments":["to"]},{"Key":"0.3s to","Fragments":["0.1s,"]},{"Key":"to 0.1s,","Fragments":["so"]},{"Key":"0.1s, so","Fragments":["I"]},{"Key":"at Dict.update/4.","Fragments":["I"]},{"Key":"Dict.update/4. I","Fragments":["think"]},{"Key":"simplify count_all","Fragments":["quite"]},{"Key":"count_all quite","Fragments":["a"]},{"Key":"also pipeline","Fragments":["(|\u003e)"]},{"Key":"pipeline (|\u003e)","Fragments":["into"]},{"Key":"(|\u003e) into","Fragments":["count_all"]},{"Key":"into count_all","Fragments":["in"]},{"Key":"count_all in","Fragments":["count"]},{"Key":"like Enum.reduce","Fragments":["is"]},{"Key":"my hammer","Fragments":["and"]},{"Key":"hammer and","Fragments":["all"]},{"Key":"all problems","Fragments":["are"]},{"Key":"problems are","Fragments":["nails"]},{"Key":"are nails","Fragments":[":-)"]},{"Key":"Got rid","Fragments":["of"]},{"Key":"of HashDicts;","Fragments":["they"]},{"Key":"HashDicts; they","Fragments":["were"]},{"Key":"they were","Fragments":["unnecessary.","the","found"]},{"Key":"A cond","Fragments":["with","with"]},{"Key":"cond with","Fragments":["two","two"]},{"Key":"two cases","Fragments":["of"]},{"Key":"cases of","Fragments":["which"]},{"Key":"second is","Fragments":["a"]},{"Key":"a catchall","Fragments":["is","clause"]},{"Key":"catchall is","Fragments":["better"]},{"Key":"a plain","Fragments":["if."]},{"Key":"plain if.","Fragments":["Did"]},{"Key":"if. Did","Fragments":["you"]},{"Key":"you refactor","Fragments":["that"]},{"Key":"refactor that","Fragments":["code?","out"]},{"Key":"You laser-focused","Fragments":["right"]},{"Key":"laser-focused right","Fragments":["on"]},{"Key":"biggest uncertainty","Fragments":[":-)"]},{"Key":"uncertainty :-)","Fragments":["I"]},{"Key":":-) I","Fragments":["tried"]},{"Key":"as cond","Fragments":["and"]},{"Key":"cond and","Fragments":["if.","use"]},{"Key":"and if.","Fragments":["I"]},{"Key":"if. I","Fragments":["also"]},{"Key":"tried case,","Fragments":["but"]},{"Key":"cond version","Fragments":["just"]},{"Key":"version just","Fragments":["because"]},{"Key":"was fewer","Fragments":["lines"]},{"Key":"fewer lines","Fragments":["of"]},{"Key":"code. Which,","Fragments":["in"]},{"Key":"Which, in","Fragments":["retrospect,"]},{"Key":"in retrospect,","Fragments":["isn't"]},{"Key":"retrospect, isn't","Fragments":["a"]},{"Key":"Did I","Fragments":["take"]},{"Key":"the 'if'","Fragments":["too"]},{"Key":"'if' too","Fragments":["far?"]},{"Key":"the if-do-else-end","Fragments":["form."]},{"Key":"if-do-else-end form.","Fragments":["It's"]},{"Key":"form. It's","Fragments":["a","interesting"]},{"Key":"Yes, you're","Fragments":["right"]},{"Key":" @norene","Fragments":["neat"]},{"Key":"@norene neat","Fragments":["nit,"]},{"Key":"neat nit,","Fragments":["thank"]},{"Key":"nit, thank","Fragments":["you!"]},{"Key":" @ressie","Fragments":["I"]},{"Key":"@ressie I","Fragments":["rolled"]},{"Key":"I rolled","Fragments":["my"]},{"Key":"rolled my","Fragments":["own"]},{"Key":"own power","Fragments":["function"]},{"Key":"power function","Fragments":["because","when"]},{"Key":"lose precision","Fragments":["when"]},{"Key":"precision when","Fragments":["using"]},{"Key":"using Erlang's","Fragments":["math.pow():"]},{"Key":"iex(2)\u003e :math.pow(2,64)","Fragments":["=="]},{"Key":":math.pow(2,64) ==","Fragments":["(:math.pow(2,64)-1)"]},{"Key":"expect infinite","Fragments":["precision."]},{"Key":"Or you","Fragments":["could"]},{"Key":"could traverse","Fragments":["the"]},{"Key":"traverse the","Fragments":["dna","list","entire"]},{"Key":"the dna","Fragments":["once"]},{"Key":"dna once","Fragments":["to"]},{"Key":"once to","Fragments":["create"]},{"Key":"the nucleotide_counts","Fragments":["result,","function."]},{"Key":"nucleotide_counts result,","Fragments":["and"]},{"Key":"result, and","Fragments":["the"]},{"Key":"count method","Fragments":["looks","is"]},{"Key":"looks it","Fragments":["up"]},{"Key":" `Enum.map(...)","Fragments":["|\u003e"]},{"Key":"`Enum.map(...) |\u003e","Fragments":["List.flatten`"]},{"Key":"|\u003e List.flatten`","Fragments":["can","can","instead."]},{"Key":"List.flatten` can","Fragments":["often","usually"]},{"Key":"pretty sure","Fragments":["this","the","I'll","the","it"]},{"Key":"as well:","Fragments":["`earth_years","`def"]},{"Key":"well: `earth_years","Fragments":["="]},{"Key":"`earth_years =","Fragments":["@robyn[planet]`."]},{"Key":"Thanks, got","Fragments":["it!"]},{"Key":"avoid second","Fragments":["function"]},{"Key":"second function","Fragments":["definition?","just"]},{"Key":"defp count_words([],","Fragments":["acc)"]},{"Key":"count_words([], acc)","Fragments":["do"]},{"Key":"And any","Fragments":["other"]},{"Key":"general if","Fragments":["you"]},{"Key":"find yourself","Fragments":["using","using"]},{"Key":"yourself using","Fragments":["explicit","other","an"]},{"Key":"using explicit","Fragments":["recursion","recursion?","recursion"]},{"Key":"recursion it's","Fragments":["a"]},{"Key":"step back","Fragments":["and","and"]},{"Key":"recursion pattern","Fragments":["your","is."]},{"Key":"pattern your","Fragments":["code"]},{"Key":"code expresses.","Fragments":["Often"]},{"Key":"expresses. Often","Fragments":["there's"]},{"Key":"Often there's","Fragments":["a"]},{"Key":"reduce (also","Fragments":["known"]},{"Key":"(also known","Fragments":["as"]},{"Key":"known as","Fragments":["fold)"]},{"Key":"as fold)","Fragments":["pattern."]},{"Key":"fold) pattern.","Fragments":["You"]},{"Key":"pattern. You","Fragments":["could","can"]},{"Key":" Enum.reduce(split_lowercased_words,","Fragments":["HashDict.new,"]},{"Key":"Enum.reduce(split_lowercased_words, HashDict.new,","Fragments":["fn"]},{"Key":"HashDict.new, fn","Fragments":["word,"]},{"Key":"fn word,","Fragments":["tally","dict"]},{"Key":"word, tally","Fragments":["-\u003e"]},{"Key":" HashDict.update(tally,","Fragments":["word,"]},{"Key":"HashDict.update(tally, word,","Fragments":["1,"]},{"Key":"function expressions","Fragments":["`\u0026(\u00261+1)`"]},{"Key":"expressions `\u0026(\u00261+1)`","Fragments":["there"]},{"Key":"`\u0026(\u00261+1)` there","Fragments":["for"]},{"Key":" `Enum.reduce`","Fragments":["is"]},{"Key":"useful tool","Fragments":["that"]},{"Key":"tool that","Fragments":["can"]},{"Key":"ways (in","Fragments":["fact"]},{"Key":"fact all","Fragments":["of"]},{"Key":"of `reduce`,","Fragments":["and"]},{"Key":"`reduce`, and","Fragments":["most"]},{"Key":" Those","Fragments":["were"]},{"Key":"Those were","Fragments":["actually"]},{"Key":"were actually","Fragments":["from"]},{"Key":"actually from","Fragments":["my"]},{"Key":"first unsubmitted","Fragments":["solution"]},{"Key":"unsubmitted solution","Fragments":["and"]},{"Key":"solution and","Fragments":["I","forces","my","I","I"]},{"Key":"thought they","Fragments":["would","weren't"]},{"Key":"they would","Fragments":["still","work.","work"]},{"Key":"be useful.","Fragments":["But"]},{"Key":"useful. But","Fragments":["you're"]},{"Key":"But you're","Fragments":["right,"]},{"Key":"right, they","Fragments":["are"]},{"Key":" @jazmyn","Fragments":["thanks!"]},{"Key":"@jazmyn thanks!","Fragments":["That"]},{"Key":"thanks! That","Fragments":["was"]},{"Key":"I understood","Fragments":["correctly"]},{"Key":"understood correctly","Fragments":["`HashDict.update`"]},{"Key":"correctly `HashDict.update`","Fragments":["doesn't"]},{"Key":"`HashDict.update` doesn't","Fragments":["update"]},{"Key":"doesn't update","Fragments":["`tally`"]},{"Key":"update `tally`","Fragments":["as"]},{"Key":"`tally` as","Fragments":["it's"]},{"Key":"it's immutable,","Fragments":["its"]},{"Key":"immutable, its","Fragments":["result"]},{"Key":"its result","Fragments":["is"]},{"Key":"as `acc`","Fragments":["for"]},{"Key":"`acc` for","Fragments":["the","a","a","the","the"]},{"Key":"next `fn`","Fragments":["call,"]},{"Key":"`fn` call,","Fragments":["right?"]},{"Key":" @mauricio","Fragments":["I"]},{"Key":"@mauricio I","Fragments":["dispensed"]},{"Key":"I dispensed","Fragments":["with"]},{"Key":"dispensed with","Fragments":["the"]},{"Key":"the HashDict;","Fragments":["I"]},{"Key":"HashDict; I","Fragments":["just"]},{"Key":"just need","Fragments":["a","to"]},{"Key":"simple keyword","Fragments":["list"]},{"Key":"keyword list","Fragments":["here"]},{"Key":"list here","Fragments":["so"]},{"Key":"protocol wrapper","Fragments":["Dict.update"]},{"Key":"wrapper Dict.update","Fragments":["instead"]},{"Key":"the implementation-specific","Fragments":["HashDict.update"]},{"Key":"To your","Fragments":["last"]},{"Key":"last question:","Fragments":["yes"]},{"Key":"question: yes","Fragments":["HashDict.update"]},{"Key":"yes HashDict.update","Fragments":["(and"]},{"Key":"HashDict.update (and","Fragments":["Dict.update)"]},{"Key":"(and Dict.update)","Fragments":["return"]},{"Key":"Dict.update) return","Fragments":["a"]},{"Key":"a new,","Fragments":["modified"]},{"Key":"new, modified","Fragments":["copy."]},{"Key":"modified copy.","Fragments":["Within"]},{"Key":"copy. Within","Fragments":["Enum.reduce,"]},{"Key":"Within Enum.reduce,","Fragments":["the"]},{"Key":"Enum.reduce, the","Fragments":["return"]},{"Key":"your iteration","Fragments":["function"]},{"Key":"iteration function","Fragments":["gets"]},{"Key":"function gets","Fragments":["passed","reused.","reused.","reused.","reused.","reused.","reused.","reused."]},{"Key":"gets passed","Fragments":["as","a"]},{"Key":"passed as","Fragments":["the","the"]},{"Key":"accumulator to","Fragments":["the","the"]},{"Key":"iteration. That","Fragments":["combination"]},{"Key":"That combination","Fragments":["of"]},{"Key":"of features","Fragments":["makes"]},{"Key":"features makes","Fragments":["this"]},{"Key":"makes this","Fragments":["work"]},{"Key":"work so","Fragments":["succinctly."]},{"Key":"a `:math.pow()`","Fragments":["function"]},{"Key":"`:math.pow()` function","Fragments":["that"]},{"Key":"use (i.e.","Fragments":["a"]},{"Key":"(i.e. a","Fragments":["`pow`","record"]},{"Key":"a `pow`","Fragments":["function"]},{"Key":"`pow` function","Fragments":["in"]},{"Key":"erlang `:math`","Fragments":["module)."]},{"Key":"`:math` module).","Fragments":["Documentation"]},{"Key":"module). Documentation","Fragments":["is"]},{"Key":"Documentation is","Fragments":["[here](http://www.erlang.org/doc/man/math.html)"]},{"Key":"is [here](http://www.erlang.org/doc/man/math.html)","Fragments":["(keep"]},{"Key":"[here](http://www.erlang.org/doc/man/math.html) (keep","Fragments":["in"]},{"Key":"(keep in","Fragments":["mind"]},{"Key":"that Erlang","Fragments":["has"]},{"Key":"has different","Fragments":["syntax,"]},{"Key":"different syntax,","Fragments":["though"]},{"Key":"syntax, though","Fragments":["that"]},{"Key":"The `total`","Fragments":["can"]},{"Key":"`total` can","Fragments":["be"]},{"Key":"computed in","Fragments":["a"]},{"Key":"way when","Fragments":["you"]},{"Key":"it. Hint:","Fragments":["think"]},{"Key":"Hint: think","Fragments":["bits"]},{"Key":"think bits","Fragments":["and"]},{"Key":"bits and","Fragments":["bytes."]},{"Key":" Yikes.","Fragments":["That's"]},{"Key":"Yikes. That's","Fragments":["good"]},{"Key":"Another alternative","Fragments":["is"]},{"Key":"alternative is","Fragments":["`use"]},{"Key":"is `use","Fragments":["Bitwise,"]},{"Key":"`use Bitwise,","Fragments":["only_operators:"]},{"Key":"Bitwise, only_operators:","Fragments":["true`"]},{"Key":"only_operators: true`","Fragments":["and"]},{"Key":"true` and","Fragments":["`(1"]},{"Key":"and `(1","Fragments":["\u003c\u003c\u003c"]},{"Key":"`(1 \u003c\u003c\u003c","Fragments":["n)","n)"]},{"Key":"\u003c\u003c\u003c n)","Fragments":["-","-"]},{"Key":"n) -","Fragments":["1`.","1`"]},{"Key":"cool. Thanks,","Fragments":["@reymundo."]},{"Key":"Thanks, @reymundo.","Fragments":["I'll"]},{"Key":"@reymundo. I'll","Fragments":["submit"]},{"Key":"takes advantage","Fragments":["of","of"]},{"Key":"of `flat_map`.","Fragments":[":)"]},{"Key":"curious if","Fragments":["you","it's"]},{"Key":"one-liner, or","Fragments":["if"]},{"Key":"was split","Fragments":["into","in"]},{"Key":"into multiple","Fragments":["lines"]},{"Key":"lines and","Fragments":["using"]},{"Key":"will unfortunately","Fragments":["call"]},{"Key":"unfortunately call","Fragments":["`Enum.count`"]},{"Key":"call `Enum.count`","Fragments":["4"]},{"Key":"`Enum.count` 4","Fragments":["times"]},{"Key":"4 times","Fragments":["on","whereas"]},{"Key":"times on","Fragments":["the"]},{"Key":"the `sequence`","Fragments":["char_list,"]},{"Key":"`sequence` char_list,","Fragments":["once"]},{"Key":"char_list, once","Fragments":["for"]},{"Key":"may experiment","Fragments":["with"]},{"Key":"experiment with","Fragments":["an","OTP,","Enum.into/3","is","`[h|t]`as"]},{"Key":"`Enum.filter` then","Fragments":["an"]},{"Key":"then an","Fragments":["`Enum.reduce`"]},{"Key":"an `Enum.reduce`","Fragments":["using"]},{"Key":"`Enum.reduce` using","Fragments":["a"]},{"Key":"a `HashDict.update`,","Fragments":["as"]},{"Key":"`HashDict.update`, as","Fragments":["I"]},{"Key":"did with","Fragments":["the"]},{"Key":"the **word_count**","Fragments":["exercise,"]},{"Key":"**word_count** exercise,","Fragments":["but"]},{"Key":"there's going","Fragments":["to"]},{"Key":"big difference","Fragments":["in","in"]},{"Key":"in execution","Fragments":["time"]},{"Key":"execution time","Fragments":["until"]},{"Key":"time until","Fragments":["there"]},{"Key":"until there","Fragments":["are"]},{"Key":"are thousands","Fragments":["of"]},{"Key":"thousands of","Fragments":["characters"]},{"Key":"so, this","Fragments":["has"]},{"Key":"has pretty","Fragments":["few"]},{"Key":"pretty few","Fragments":["moving"]},{"Key":"few moving","Fragments":["parts"]},{"Key":"moving parts","Fragments":["and"]},{"Key":"fairly digestible","Fragments":["mentally,"]},{"Key":"digestible mentally,","Fragments":["at"]},{"Key":"mentally, at","Fragments":["least"]},{"Key":"the pair","Fragments":["of"]},{"Key":"pair of","Fragments":["one-liners"]},{"Key":"of one-liners","Fragments":["is"]},{"Key":"one-liners is","Fragments":["fine."]},{"Key":"the HashDict.to_list(input)","Fragments":["required"]},{"Key":"HashDict.to_list(input) required","Fragments":["for"]},{"Key":"for flat_map?","Fragments":["Odd."]},{"Key":"flat_map? Odd.","Fragments":["Enum.reduce(input,"]},{"Key":"Odd. Enum.reduce(input,","Fragments":["...)"]},{"Key":"Enum.reduce(input, ...)","Fragments":["works"]},{"Key":"...) works","Fragments":["without"]},{"Key":"without explicitly","Fragments":["converting"]},{"Key":"explicitly converting","Fragments":["to"]},{"Key":"feedback, @erica.","Fragments":["I"]},{"Key":"@erica. I","Fragments":["didn't"]},{"Key":"an implicit","Fragments":["conversion"]},{"Key":"implicit conversion","Fragments":["option"]},{"Key":"conversion option","Fragments":["there!"]},{"Key":"option there!","Fragments":["I"]},{"Key":"there! I","Fragments":["have"]},{"Key":"have *a","Fragments":["lot*"]},{"Key":"*a lot*","Fragments":["to"]},{"Key":"lot* to","Fragments":["learn"]},{"Key":"source for","Fragments":["`Enum.flat_map`","range"]},{"Key":"for `Enum.flat_map`","Fragments":["and"]},{"Key":"`Enum.flat_map` and","Fragments":["it","things","`Enum.map`"]},{"Key":"actually delegates","Fragments":["to"]},{"Key":"delegates to","Fragments":["`Enum.reduce`"]},{"Key":"to `Enum.reduce`","Fragments":["if","based"]},{"Key":"`Enum.reduce` if","Fragments":["the"]},{"Key":"input isn't","Fragments":["already","valid."]},{"Key":"isn't already","Fragments":["a"]},{"Key":"already a","Fragments":["list.","space"]},{"Key":"list. As","Fragments":["far"]},{"Key":"as how","Fragments":["that"]},{"Key":"that conversion","Fragments":["works,"]},{"Key":"conversion works,","Fragments":["I"]},{"Key":"works, I","Fragments":["will"]},{"Key":"dig further","Fragments":["into"]},{"Key":"further into","Fragments":["the"]},{"Key":"the meantime,","Fragments":["I'll","I'd"]},{"Key":"meantime, I'll","Fragments":["submit"]},{"Key":"the implicit","Fragments":["conversion."]},{"Key":"implicit conversion.","Fragments":[":)"]},{"Key":" @else","Fragments":["I"]},{"Key":"@else I","Fragments":["agree,"]},{"Key":"agree, I","Fragments":["will","struggled,"]},{"Key":"start tailoring","Fragments":["the"]},{"Key":"tailoring the","Fragments":["solution"]},{"Key":"it fits","Fragments":["the"]},{"Key":"the problem.","Fragments":["@else","But"]},{"Key":"problem. @else","Fragments":["Thanks"]},{"Key":"@else Thanks","Fragments":["again"]},{"Key":"feedback, I","Fragments":["did","didn't"]},{"Key":"did totally","Fragments":["forget"]},{"Key":"totally forget","Fragments":["about"]},{"Key":"forget about","Fragments":["what","`Dict.update/3`,"]},{"Key":"said on","Fragments":["the"]},{"Key":"of giving","Fragments":["a","the","nice"]},{"Key":"giving a","Fragments":["local"]},{"Key":"local name","Fragments":["to","in","during"]},{"Key":"accessed explicitly,","Fragments":["I'll"]},{"Key":"explicitly, I'll","Fragments":["give"]},{"Key":"a try","Fragments":["now."]},{"Key":"Just finished","Fragments":["watching"]},{"Key":"finished watching","Fragments":["the"]},{"Key":"watching the","Fragments":["OTP"]},{"Key":"the OTP","Fragments":["videos","version"]},{"Key":"OTP videos","Fragments":["on"]},{"Key":"videos on","Fragments":["Elixir"]},{"Key":"Elixir Sips","Fragments":["and"]},{"Key":"Sips and","Fragments":["felt"]},{"Key":"and felt","Fragments":["inspired"]},{"Key":"felt inspired","Fragments":["to"]},{"Key":"inspired to","Fragments":["try"]},{"Key":"try it.","Fragments":["Glad"]},{"Key":"it. Glad","Fragments":["I"]},{"Key":"did but","Fragments":["it's"]},{"Key":"it's far","Fragments":["from"]},{"Key":"far from","Fragments":["succinct"]},{"Key":"from succinct","Fragments":["code"]},{"Key":"succinct code","Fragments":["I"]},{"Key":"realize that.","Fragments":["Nitpick","Thanks!"]},{"Key":"that. Nitpick","Fragments":["away!"]},{"Key":"next exercise,","Fragments":["but"]},{"Key":"but feel","Fragments":["free","like"]},{"Key":"pick any","Fragments":["nits"]},{"Key":"any nits","Fragments":["on"]},{"Key":"nits on","Fragments":["this"]},{"Key":" bitstring_to_list,","Fragments":["while"]},{"Key":"bitstring_to_list, while","Fragments":["fast,"]},{"Key":"while fast,","Fragments":["is"]},{"Key":"fast, is","Fragments":["kinda"]},{"Key":"is kinda","Fragments":["deprecated"]},{"Key":"kinda deprecated","Fragments":["for"]},{"Key":"deprecated for","Fragments":["strings."]},{"Key":"strings. `String.to_char_list!`","Fragments":["is"]},{"Key":"`String.to_char_list!` is","Fragments":["preferred.","slightly"]},{"Key":"is preferred.","Fragments":["I"]},{"Key":"preferred. I","Fragments":["understand"]},{"Key":"understand why","Fragments":["you","you","you","scan","you","each"]},{"Key":"like micro","Fragments":["optimization.","optimization."]},{"Key":"different implementation","Fragments":["of","of"]},{"Key":"uses list_to_tuple","Fragments":["and"]},{"Key":"list_to_tuple and","Fragments":["encodes"]},{"Key":"and encodes","Fragments":["the"]},{"Key":"encodes the","Fragments":["letters-with-scores"]},{"Key":"the letters-with-scores","Fragments":["in"]},{"Key":"letters-with-scores in","Fragments":["char"]},{"Key":"in char","Fragments":["lists"]},{"Key":"lists (saves","Fragments":["a"]},{"Key":"(saves a","Fragments":["conversion):"]},{"Key":"def score(word)","Fragments":["do","do"]},{"Key":"|\u003e Enum.reduce(0,","Fragments":["fn","\u0026(\u00261+\u00262))"]},{"Key":" c,","Fragments":["acc"]},{"Key":"c, acc","Fragments":["when"]},{"Key":"acc when","Fragments":["c"]},{"Key":"when c","Fragments":["\u003e=","\u003e=","\u003e="]},{"Key":"c \u003e=","Fragments":["?A","?a","?0"]},{"Key":"\u003e= ?A","Fragments":["and"]},{"Key":"?A and","Fragments":["c"]},{"Key":"and c","Fragments":["\u003c=","\u003c=","\u003c="]},{"Key":"c \u003c=","Fragments":["?Z","?z,","?9,"]},{"Key":"\u003c= ?Z","Fragments":["-\u003e"]},{"Key":" acc","Fragments":["+"]},{"Key":"+ elem(table,","Fragments":["c"]},{"Key":"elem(table, c","Fragments":["-"]},{"Key":"c -","Fragments":["?A)"]},{"Key":"_, acc","Fragments":["-\u003e","-\u003e"]},{"Key":"acc -\u003e","Fragments":["acc","[x|acc]","acc","acc","append(acc,","append(acc,","append(acc,"]},{"Key":" scores","Fragments":["="]},{"Key":"scores =","Fragments":["[{1,"]},{"Key":"= [{1,","Fragments":["'AEIOULNRST'},"]},{"Key":"[{1, 'AEIOULNRST'},","Fragments":["{2,"]},{"Key":"'AEIOULNRST'}, {2,","Fragments":["'DG'},"]},{"Key":"{2, 'DG'},","Fragments":["{3,"]},{"Key":"'DG'}, {3,","Fragments":["'BCMP'},"]},{"Key":"{3, 'BCMP'},","Fragments":["{4,"]},{"Key":"'BCMP'}, {4,","Fragments":["'FHVWY'},"]},{"Key":"{4, 'FHVWY'},","Fragments":["{5,"]},{"Key":"'FHVWY'}, {5,","Fragments":["'K'},"]},{"Key":" {8,","Fragments":["'JX'},"]},{"Key":"{8, 'JX'},","Fragments":["{10,"]},{"Key":"'JX'}, {10,","Fragments":["'QZ'}]"]},{"Key":"defp table","Fragments":["do"]},{"Key":" (lc","Fragments":["{n,"]},{"Key":"(lc {n,","Fragments":["cs}"]},{"Key":"{n, cs}","Fragments":["inlist"]},{"Key":"cs} inlist","Fragments":["scores,"]},{"Key":"inlist scores,","Fragments":["c"]},{"Key":"scores, c","Fragments":["inlist"]},{"Key":"c inlist","Fragments":["cs,"]},{"Key":"inlist cs,","Fragments":["do:"]},{"Key":"cs, do:","Fragments":["{"]},{"Key":"{ c,","Fragments":["n","ws"]},{"Key":"c, n","Fragments":["})"]},{"Key":"|\u003e Enum.sort(\u0026(elem(\u00261,","Fragments":["0)"]},{"Key":"Enum.sort(\u0026(elem(\u00261, 0)","Fragments":["\u003c"]},{"Key":"0) \u003c","Fragments":["elem(\u00262,"]},{"Key":"\u003c elem(\u00262,","Fragments":["0)))"]},{"Key":"|\u003e Enum.map(\u0026(elem(\u00261,","Fragments":["1)))"]},{"Key":"Here's another","Fragments":["alternative,"]},{"Key":"another alternative,","Fragments":["possibly"]},{"Key":"alternative, possibly","Fragments":["slightly"]},{"Key":"possibly slightly","Fragments":["slower"]},{"Key":"slightly slower","Fragments":["than"]},{"Key":"than yours","Fragments":["but"]},{"Key":"yours but","Fragments":["still"]},{"Key":" values","Fragments":["["]},{"Key":"{ 'AEIOULNRST',","Fragments":["1","1"]},{"Key":"'AEIOULNRST', 1","Fragments":["},","},"]},{"Key":"{ 'DG',","Fragments":["2","2"]},{"Key":"'DG', 2","Fragments":["},","},"]},{"Key":"{ 'BCMP',","Fragments":["3","3"]},{"Key":"'BCMP', 3","Fragments":["},","},"]},{"Key":"{ 'FHVWY',","Fragments":["4","4"]},{"Key":"'FHVWY', 4","Fragments":["},","},"]},{"Key":"{ 'K',","Fragments":["5","5"]},{"Key":"'K', 5","Fragments":["},","},"]},{"Key":"{ 'JX',","Fragments":["8","8"]},{"Key":"'JX', 8","Fragments":["},","},"]},{"Key":"{ 'QZ',","Fragments":["10","10"]},{"Key":"'QZ', 10","Fragments":["}","}"]},{"Key":"# For","Fragments":["efficiency"]},{"Key":"For efficiency","Fragments":["use"]},{"Key":"efficiency use","Fragments":["macro"]},{"Key":"use macro","Fragments":["magic."]},{"Key":" fn","Fragments":["{"]},{"Key":"fn {","Fragments":["chars,","allergy,"]},{"Key":"{ chars,","Fragments":["value"]},{"Key":"chars, value","Fragments":["}"]},{"Key":"value }","Fragments":["-\u003e","inlist"]},{"Key":" Enum.map(chars,","Fragments":["fn","\u0026score_letter)"]},{"Key":"Enum.map(chars, fn","Fragments":["char"]},{"Key":"fn char","Fragments":["-\u003e"]},{"Key":"defp char_value(unquote(char)),","Fragments":["do:"]},{"Key":"char_value(unquote(char)), do:","Fragments":["unquote(value)"]},{"Key":"defp char_value(_),","Fragments":["do:"]},{"Key":"char_value(_), do:","Fragments":["0"]},{"Key":" @kenton","Fragments":["There"]},{"Key":"@kenton There","Fragments":["will"]},{"Key":"There will","Fragments":["be"]},{"Key":"exercise involving","Fragments":["parallelism"]},{"Key":"involving parallelism","Fragments":["(much)"]},{"Key":"parallelism (much)","Fragments":["later"]},{"Key":"(much) later","Fragments":["down"]},{"Key":"later down","Fragments":["the"]},{"Key":"the road,","Fragments":["so"]},{"Key":"road, so","Fragments":["don't"]},{"Key":"don't worry,","Fragments":["OTP"]},{"Key":"worry, OTP","Fragments":["is"]},{"Key":"OTP is","Fragments":["in"]},{"Key":" @dashawn","Fragments":["call"]},{"Key":"@dashawn call","Fragments":["versus"]},{"Key":"call versus","Fragments":["cast"]},{"Key":"versus cast","Fragments":["has"]},{"Key":"cast has","Fragments":["more"]},{"Key":"has more","Fragments":["to","to","to"]},{"Key":"with whether","Fragments":["you"]},{"Key":"wait for","Fragments":["an"]},{"Key":"an answer.","Fragments":["It's"]},{"Key":"answer. It's","Fragments":["quite"]},{"Key":"It's quite","Fragments":["common"]},{"Key":"quite common","Fragments":["for"]},{"Key":"return `:ok`","Fragments":["if"]},{"Key":"`:ok` if","Fragments":["the"]},{"Key":"only meaning","Fragments":["of"]},{"Key":" @bell","Fragments":["This"]},{"Key":"@bell This","Fragments":["exercise"]},{"Key":"This exercise","Fragments":["is","seemed","is","contains","contains","contains","contains","contains","is","contains","contains"]},{"Key":"about DNA.","Fragments":["I"]},{"Key":"DNA. I","Fragments":["have"]},{"Key":"have yet","Fragments":["to"]},{"Key":"about short","Fragments":["DNA"]},{"Key":"short DNA","Fragments":["strings."]},{"Key":"DNA strings.","Fragments":[";)"]},{"Key":"strings. ;)","Fragments":["In"]},{"Key":";) In","Fragments":["general"]},{"Key":"were \"real\",","Fragments":["the"]},{"Key":"\"real\", the","Fragments":["fact"]},{"Key":"that tests","Fragments":["are","this:"]},{"Key":"short has","Fragments":["more"]},{"Key":"the sanity","Fragments":["of"]},{"Key":"sanity of","Fragments":["us"]},{"Key":"of us","Fragments":["test"]},{"Key":"us test","Fragments":["writers"]},{"Key":"test writers","Fragments":["than"]},{"Key":"writers than","Fragments":["anything"]},{"Key":"than anything","Fragments":["else."]},{"Key":"do `Enum.count(sequence,","Fragments":["\u0026(\u00261"]},{"Key":"`Enum.count(sequence, \u0026(\u00261","Fragments":["=="]},{"Key":"\u0026(\u00261 ==","Fragments":["nucleotide))`","nucleotide))`"]},{"Key":"== nucleotide))`","Fragments":["instead","using"]},{"Key":"nucleotide))` instead","Fragments":["of"]},{"Key":"of `sequence","Fragments":["|\u003e"]},{"Key":"`sequence |\u003e","Fragments":["Enum.count(\u0026(\u00261"]},{"Key":"|\u003e Enum.count(\u0026(\u00261","Fragments":["=="]},{"Key":"Enum.count(\u0026(\u00261 ==","Fragments":["nucleotide))`,"]},{"Key":"== nucleotide))`,","Fragments":["but"]},{"Key":"nucleotide))`, but","Fragments":["that's"]},{"Key":"that's more","Fragments":["of","of"]},{"Key":"personal taste","Fragments":["matter."]},{"Key":"it. Can","Fragments":["you"]},{"Key":"give some","Fragments":["tips?","pointers?"]},{"Key":" Ambitious","Fragments":[":-)"]},{"Key":"Ambitious :-)","Fragments":["I'm"]},{"Key":":-) I'm","Fragments":["still"]},{"Key":"learning OTP","Fragments":["with"]},{"Key":"OTP with","Fragments":["a"]},{"Key":"a side","Fragments":["project","effect","note"]},{"Key":"side project","Fragments":["myself,"]},{"Key":"project myself,","Fragments":["so"]},{"Key":"myself, so","Fragments":["take"]},{"Key":"take these","Fragments":["with","in"]},{"Key":"these with","Fragments":["that"]},{"Key":"the init","Fragments":["function"]},{"Key":"init function","Fragments":["is"]},{"Key":"is required.","Fragments":["I"]},{"Key":"required. I","Fragments":["think","did"]},{"Key":"have there","Fragments":["is"]},{"Key":"essentially a","Fragments":["default"]},{"Key":"default implementation","Fragments":["you"]},{"Key":"implementation you","Fragments":["get","won't"]},{"Key":"the :all","Fragments":["message"]},{"Key":":all message","Fragments":["should"]},{"Key":"message should","Fragments":["be"]},{"Key":"a cast","Fragments":["instead"]},{"Key":"cast instead","Fragments":["of"]},{"Key":"call since","Fragments":["there's"]},{"Key":"no real","Fragments":["return"]},{"Key":"real return","Fragments":["value."]},{"Key":"could register","Fragments":["your"]},{"Key":"register your","Fragments":["Server"]},{"Key":"your Server","Fragments":["with"]},{"Key":"Server with","Fragments":["a"]},{"Key":"in start_link","Fragments":["and"]},{"Key":"start_link and","Fragments":["then"]},{"Key":"the \"public","Fragments":["api\""]},{"Key":"\"public api\"","Fragments":["methods"]},{"Key":"api\" methods","Fragments":["like"]},{"Key":"like add","Fragments":["can"]},{"Key":"add can","Fragments":["look"]},{"Key":"up via","Fragments":["Process.whereis"]},{"Key":"via Process.whereis","Fragments":["and"]},{"Key":"Process.whereis and","Fragments":["avoid"]},{"Key":"avoid requiring","Fragments":["nucleotide_counts"]},{"Key":"requiring nucleotide_counts","Fragments":["to"]},{"Key":"nucleotide_counts to","Fragments":["keep"]},{"Key":"keep track","Fragments":["of"]},{"Key":"track of","Fragments":["the"]},{"Key":"the server","Fragments":["pid.","around,"]},{"Key":"Quick follow","Fragments":["up"]},{"Key":"follow up","Fragments":["on"]},{"Key":"on this:","Fragments":["I've"]},{"Key":"this: I've","Fragments":["put"]},{"Key":"I've put","Fragments":["in"]},{"Key":"example which","Fragments":["also"]},{"Key":" (And","Fragments":["for"]},{"Key":"(And for","Fragments":["future"]},{"Key":"future readers,","Fragments":["`(1"]},{"Key":"readers, `(1","Fragments":["\u003c\u003c\u003c"]},{"Key":"- 1`","Fragments":["was"]},{"Key":"1` was","Fragments":["wrong"]},{"Key":"wrong (was","Fragments":["in"]},{"Key":"(was in","Fragments":["a"]},{"Key":"a hurry","Fragments":["when"]},{"Key":"hurry when","Fragments":["I"]},{"Key":"wrote that),","Fragments":["it"]},{"Key":"that), it","Fragments":["should"]},{"Key":"be `1","Fragments":["\u003c\u003c\u003c"]},{"Key":"`1 \u003c\u003c\u003c","Fragments":["(n"]},{"Key":"\u003c\u003c\u003c (n","Fragments":["-"]},{"Key":"(n -","Fragments":["1)`)"]},{"Key":"probably write","Fragments":["`Enum.flat_map(input,"]},{"Key":"write `Enum.flat_map(input,","Fragments":["\u0026invert_index/1)"]},{"Key":"`Enum.flat_map(input, \u0026invert_index/1)","Fragments":["|\u003e"]},{"Key":"\u0026invert_index/1) |\u003e","Fragments":["HashDict.new`"]},{"Key":"|\u003e HashDict.new`","Fragments":["here,"]},{"Key":"HashDict.new` here,","Fragments":["it's"]},{"Key":"see (though","Fragments":["your"]},{"Key":"(though your","Fragments":["code"]},{"Key":"code certainly","Fragments":["isn't"]},{"Key":"certainly isn't","Fragments":["wrong"]},{"Key":"isn't wrong","Fragments":["by","but"]},{"Key":"wrong by","Fragments":["any"]},{"Key":"by any","Fragments":["stretch)"]},{"Key":" `\u0026({","Fragments":["String.downcase(\u00261),","\u00261,"]},{"Key":"`\u0026({ String.downcase(\u00261),","Fragments":["letter"]},{"Key":"String.downcase(\u00261), letter","Fragments":["})`","}`."]},{"Key":"letter })`","Fragments":["can"]},{"Key":"})` can","Fragments":["be","be"]},{"Key":"written `\u0026{","Fragments":["String.downcase(\u00261),"]},{"Key":"`\u0026{ String.downcase(\u00261),","Fragments":["letter"]},{"Key":"letter }`.","Fragments":["The"]},{"Key":"}`. The","Fragments":["parens","reason"]},{"Key":"The parens","Fragments":["are","are"]},{"Key":"parens are","Fragments":["only","only"]},{"Key":"are only","Fragments":["required","visible","needed","needed","three","really","a"]},{"Key":"only required","Fragments":["in"]},{"Key":"in things","Fragments":["like"]},{"Key":"like `\u0026(\u00261+1)`","Fragments":["because"]},{"Key":"`\u0026(\u00261+1)` because","Fragments":["otherwise"]},{"Key":"because otherwise","Fragments":["`\u0026`"]},{"Key":"otherwise `\u0026`","Fragments":["would"]},{"Key":"`\u0026` would","Fragments":["attach"]},{"Key":"would attach","Fragments":["to"]},{"Key":"attach to","Fragments":["the"]},{"Key":" `bitstring_to_list`","Fragments":["is","is"]},{"Key":"`bitstring_to_list` is","Fragments":["not","not","the"]},{"Key":"not intended","Fragments":["for","for"]},{"Key":"intended for","Fragments":["strings.","strings."]},{"Key":"strings. Strings","Fragments":["are"]},{"Key":"Strings are","Fragments":["UTF-8"]},{"Key":"are UTF-8","Fragments":["encoded"]},{"Key":"UTF-8 encoded","Fragments":["and","binaries,"]},{"Key":"encoded and","Fragments":["`bitstring_to_list`"]},{"Key":"and `bitstring_to_list`","Fragments":["simply","for"]},{"Key":"`bitstring_to_list` simply","Fragments":["converts"]},{"Key":"simply converts","Fragments":["to"]},{"Key":"converts to","Fragments":["a"]},{"Key":"of bytes.","Fragments":["That"]},{"Key":"bytes. That","Fragments":["really"]},{"Key":"That really","Fragments":["messes"]},{"Key":"really messes","Fragments":["up"]},{"Key":"messes up","Fragments":["non-7-bit-ASCII","the"]},{"Key":"up non-7-bit-ASCII","Fragments":["text:"]},{"Key":"non-7-bit-ASCII text:","Fragments":["`bitstring_to_list(\"José\")`"]},{"Key":"text: `bitstring_to_list(\"José\")`","Fragments":["=="]},{"Key":"`bitstring_to_list(\"José\")` ==","Fragments":["`'JosÃ©'`."]},{"Key":"this so","Fragments":["that"]},{"Key":"`anagram` value","Fragments":["doesn't"]},{"Key":"value doesn't","Fragments":["get"]},{"Key":"doesn't get","Fragments":["downcased","it,","module","compiled"]},{"Key":"get downcased","Fragments":["and"]},{"Key":"downcased and","Fragments":["sorted"]},{"Key":"sorted over","Fragments":["and"]},{"Key":" @gertrude","Fragments":["Thanks,"]},{"Key":"@gertrude Thanks,","Fragments":["I"]},{"Key":"had doubts","Fragments":["about"]},{"Key":"doubts about","Fragments":["`bitstring_to_list`:)"]},{"Key":"about `bitstring_to_list`:)","Fragments":["I"]},{"Key":"`bitstring_to_list`:) I","Fragments":["tried"]},{"Key":"fix these","Fragments":["issues"]},{"Key":"these issues","Fragments":["in"]},{"Key":"issues in","Fragments":["the","iteration"]},{"Key":"could pre-sort","Fragments":["the"]},{"Key":"pre-sort the","Fragments":["anagram"]},{"Key":"anagram as","Fragments":["well."]},{"Key":" @hudson","Fragments":[":)"]},{"Key":"@hudson :)","Fragments":["Glad"]},{"Key":":) Glad","Fragments":["I"]},{"Key":"could contribute,","Fragments":["albeit"]},{"Key":"contribute, albeit","Fragments":["in"]},{"Key":"albeit in","Fragments":["a"]},{"Key":" Sometimes,","Fragments":["I"]},{"Key":"Sometimes, I","Fragments":["overthink"]},{"Key":"I overthink","Fragments":["exercises"]},{"Key":"overthink exercises","Fragments":["like"]},{"Key":"by coming","Fragments":["up"]},{"Key":"coming up","Fragments":["with","with","with"]},{"Key":"with more","Fragments":["general","aggressive"]},{"Key":"general solutions","Fragments":["than"]},{"Key":"solutions than","Fragments":["specific"]},{"Key":"than specific","Fragments":["ones."]},{"Key":"specific ones.","Fragments":["In","In"]},{"Key":"ones. In","Fragments":["this","other"]},{"Key":"thought part","Fragments":["of"]},{"Key":"the challenge","Fragments":["was"]},{"Key":"challenge was","Fragments":["to"]},{"Key":"to in","Fragments":["fact"]},{"Key":"fact implement","Fragments":["a"]},{"Key":"a generic","Fragments":["power","replacement"]},{"Key":"generic power","Fragments":["function"]},{"Key":"problem only","Fragments":["involves"]},{"Key":"only involves","Fragments":["base"]},{"Key":"involves base","Fragments":["2"]},{"Key":"base 2","Fragments":["arithmetic."]},{"Key":"2 arithmetic.","Fragments":["So,"]},{"Key":"arithmetic. So,","Fragments":["I"]},{"Key":"I relented","Fragments":["to"]},{"Key":"relented to","Fragments":["your"]},{"Key":"your implementation.","Fragments":["When"]},{"Key":"implementation. When","Fragments":["the"]},{"Key":"When the","Fragments":["time"]},{"Key":"solve this","Fragments":["problem","exercise","problem,","really","exercise"]},{"Key":"problem if","Fragments":["the"]},{"Key":"the prince","Fragments":["decides"]},{"Key":"prince decides","Fragments":["to"]},{"Key":"decides to","Fragments":["multiply"]},{"Key":"to multiply","Fragments":["the"]},{"Key":"multiply the","Fragments":["number"]},{"Key":"of grains","Fragments":["on","on"]},{"Key":"grains on","Fragments":["each","the"]},{"Key":"each subsequent","Fragments":["square"]},{"Key":"subsequent square","Fragments":["by"]},{"Key":"square by","Fragments":["seven,"]},{"Key":"by seven,","Fragments":["I'll"]},{"Key":"seven, I'll","Fragments":["put"]},{"Key":"I'll put","Fragments":["back"]},{"Key":"put back","Fragments":["my"]},{"Key":"back my","Fragments":["solution."]},{"Key":"my solution.","Fragments":[";P"]},{"Key":"is optimized","Fragments":["well"]},{"Key":"optimized well","Fragments":["beyond"]},{"Key":"well beyond","Fragments":["where"]},{"Key":"beyond where","Fragments":["it"]},{"Key":"it ought","Fragments":["to"]},{"Key":"ought to","Fragments":["be,"]},{"Key":"to be,","Fragments":["although"]},{"Key":"be, although","Fragments":["I"]},{"Key":"go much","Fragments":["further"]},{"Key":"much further","Fragments":["by"]},{"Key":"further by","Fragments":["hand-rolling"]},{"Key":"by hand-rolling","Fragments":["a"]},{"Key":"hand-rolling a","Fragments":["byte"]},{"Key":"a byte","Fragments":["fold"]},{"Key":"byte fold","Fragments":["for"]},{"Key":"fold for","Fragments":["binaries"]},{"Key":"binaries since","Fragments":["the"]},{"Key":"Erlang VM","Fragments":["can"]},{"Key":"VM can","Fragments":["do"]},{"Key":"of thing","Fragments":["in","in","is","to"]},{"Key":"in constant","Fragments":["space"]},{"Key":"constant space","Fragments":["without"]},{"Key":"space without","Fragments":["too"]},{"Key":"without too","Fragments":["much"]},{"Key":"using list_to_tuple","Fragments":["is"]},{"Key":"list_to_tuple is","Fragments":["that"]},{"Key":"a mistake","Fragments":["in","(my"]},{"Key":"mistake in","Fragments":["your"]},{"Key":"your table","Fragments":["is"]},{"Key":"table is","Fragments":["going"]},{"Key":"to cause","Fragments":["a"]},{"Key":"big problem","Fragments":["rather","I"]},{"Key":"problem rather","Fragments":["than"]},{"Key":"small one.","Fragments":["A"]},{"Key":"one. A","Fragments":["duplicated"]},{"Key":"A duplicated","Fragments":["or"]},{"Key":"duplicated or","Fragments":["missing"]},{"Key":"or missing","Fragments":["letter"]},{"Key":"missing letter","Fragments":["with"]},{"Key":"letter with","Fragments":["a"]},{"Key":"a full","Fragments":["table","copy.","discussion"]},{"Key":"full table","Fragments":["such"]},{"Key":"table such","Fragments":["as"]},{"Key":"one doesn't","Fragments":["offset"]},{"Key":"doesn't offset","Fragments":["anything"]},{"Key":"offset anything","Fragments":["else."]},{"Key":"how `bitstring_to_list`","Fragments":["can"]},{"Key":"`bitstring_to_list` can","Fragments":["be"]},{"Key":"be \"deprecated\"","Fragments":["as"]},{"Key":"\"deprecated\" as","Fragments":["long"]},{"Key":"as strings","Fragments":["are"]},{"Key":"are UTF8","Fragments":["binaries."]},{"Key":"UTF8 binaries.","Fragments":["There"]},{"Key":"binaries. There","Fragments":["isn't"]},{"Key":"isn't much","Fragments":["point"]},{"Key":"much point","Fragments":["in"]},{"Key":"point in","Fragments":["dealing","the"]},{"Key":"in dealing","Fragments":["with"]},{"Key":"with to_char_list","Fragments":["as"]},{"Key":"to_char_list as","Fragments":["I"]},{"Key":"to actually","Fragments":["decode","have","extract"]},{"Key":"actually decode","Fragments":["the"]},{"Key":"decode the","Fragments":["UTF8"]},{"Key":"the UTF8","Fragments":["to"]},{"Key":"UTF8 to","Fragments":["solve"]},{"Key":" `Enum.map","Fragments":["|\u003e","|\u003e","|\u003e"]},{"Key":"`Enum.map |\u003e","Fragments":["List.flatten`","Enum.reduce`","Enum.chunk"]},{"Key":"can usually","Fragments":["be"]},{"Key":"be combined","Fragments":["to","to"]},{"Key":"combined to","Fragments":["`Enum.flat_map`.","`Enum.map_reduce`."]},{"Key":"|\u003e Enum.reduce`","Fragments":["can","to","than","be"]},{"Key":"Enum.reduce` can","Fragments":["be"]},{"Key":"not advisable,","Fragments":["it"]},{"Key":"advisable, it","Fragments":["doesn't"]},{"Key":"with character","Fragments":["that","integrals"]},{"Key":"character that","Fragments":["occupy"]},{"Key":"that occupy","Fragments":["more"]},{"Key":"occupy more","Fragments":["than"]},{"Key":"one byte","Fragments":["in"]},{"Key":"byte in","Fragments":["UTF-8."]},{"Key":"in UTF-8.","Fragments":["For"]},{"Key":"UTF-8. For","Fragments":["converting"]},{"Key":"For converting","Fragments":["a"]},{"Key":"use `String.to_char_list`","Fragments":["or"]},{"Key":"`String.to_char_list` or","Fragments":["`String.to_char_list!`."]},{"Key":" `@genesis[char]`","Fragments":["is"]},{"Key":"`@genesis[char]` is","Fragments":["a"]},{"Key":"a ListDict","Fragments":["lookup,"]},{"Key":"ListDict lookup,","Fragments":["which"]},{"Key":"lookup, which","Fragments":["means"]},{"Key":"which means","Fragments":["O(n)"]},{"Key":"means O(n)","Fragments":["complexity"]},{"Key":"O(n) complexity","Fragments":["(on"]},{"Key":"complexity (on","Fragments":["average"]},{"Key":"(on average","Fragments":["it"]},{"Key":"average it","Fragments":["needs"]},{"Key":"to traverse","Fragments":["half","the","a"]},{"Key":"traverse half","Fragments":["the"]},{"Key":" anagram","Fragments":["="]},{"Key":"anagram =","Fragments":["String.downcase(anagram)"]},{"Key":"= String.downcase(anagram)","Fragments":["|\u003e"]},{"Key":"String.downcase(anagram) |\u003e","Fragments":["String.to_char_list!"]},{"Key":"|\u003e String.to_char_list!","Fragments":["|\u003e"]},{"Key":"String.to_char_list! |\u003e","Fragments":["Enum.sort"]},{"Key":"then don't","Fragments":["use"]},{"Key":"use `signature`","Fragments":["on"]},{"Key":"`signature` on","Fragments":["`anagram`"]},{"Key":"on `anagram`","Fragments":["in"]},{"Key":"`anagram` in","Fragments":["`same_letters?`."]},{"Key":"was missing","Fragments":["something..."]},{"Key":"pass both","Fragments":["the"]},{"Key":"sorted anagram","Fragments":["and"]},{"Key":"the merely","Fragments":["downcased"]},{"Key":"merely downcased","Fragments":["anagram"]},{"Key":"downcased anagram","Fragments":["to"]},{"Key":"anagram to","Fragments":["`anagram?`,"]},{"Key":"to `anagram?`,","Fragments":["so"]},{"Key":"`anagram?`, so","Fragments":["you"]},{"Key":"still need","Fragments":["to","to","to","to","to"]},{"Key":"remember the","Fragments":["downcased","README"]},{"Key":"the downcased","Fragments":["anagram.","sorted","version","codepoints"]},{"Key":"What an","Fragments":["exercise"]},{"Key":"exercise requires","Fragments":["is"]},{"Key":"requires is","Fragments":["not"]},{"Key":"always clear,","Fragments":["much"]},{"Key":"clear, much","Fragments":["of"]},{"Key":"original exercises","Fragments":["were"]},{"Key":"were put","Fragments":["in"]},{"Key":"in because","Fragments":["they"]},{"Key":"are exercises,","Fragments":["not"]},{"Key":"exercises, not","Fragments":["so"]},{"Key":"much with","Fragments":["a","protocols,"]},{"Key":"clear focus","Fragments":["on"]},{"Key":"focus on","Fragments":["what","it.","trying"]},{"Key":"they try","Fragments":["to"]},{"Key":"A while","Fragments":["ago"]},{"Key":"while ago","Fragments":["the"]},{"Key":"ago the","Fragments":["string"]},{"Key":"list conversion","Fragments":["function"]},{"Key":"conversion function","Fragments":["was","in"]},{"Key":"function was","Fragments":["split","`odd?`","incompatible"]},{"Key":"in two:","Fragments":["`String.to_char_list!`"]},{"Key":"two: `String.to_char_list!`","Fragments":["for"]},{"Key":"`String.to_char_list!` for","Fragments":["when"]},{"Key":"split a","Fragments":["string","string"]},{"Key":"into characters","Fragments":["and"]},{"Key":"`bitstring_to_list` for","Fragments":["when"]},{"Key":"that `bitstring_to_list`","Fragments":["will","is"]},{"Key":"`bitstring_to_list` will","Fragments":["not"]},{"Key":"cause trouble","Fragments":["here"]},{"Key":"trouble here","Fragments":["due"]},{"Key":"here due","Fragments":["to"]},{"Key":"how UTF-8","Fragments":["works,"]},{"Key":"UTF-8 works,","Fragments":["but"]},{"Key":"take away","Fragments":["the"]},{"Key":"the issues","Fragments":["but","and","in"]},{"Key":"issues but","Fragments":["I've","I'll"]},{"Key":"of use","Fragments":["of"]},{"Key":"of `bitstring_to_list`","Fragments":["lately"]},{"Key":"`bitstring_to_list` lately","Fragments":["and"]},{"Key":"lately and","Fragments":["I"]},{"Key":"want people","Fragments":["who"]},{"Key":"people who","Fragments":["look"]},{"Key":"who look","Fragments":["at"]},{"Key":"to somehow","Fragments":["infer"]},{"Key":"somehow infer","Fragments":["that"]},{"Key":"infer that","Fragments":["`bitstring_to_list`"]},{"Key":"list when","Fragments":["using","checking","you"]},{"Key":"of optimization","Fragments":["which"]},{"Key":"optimization which","Fragments":["should"]},{"Key":"should never","Fragments":["be"]},{"Key":"never be","Fragments":["applied"]},{"Key":"be applied","Fragments":["without"]},{"Key":"applied without","Fragments":["thinking."]},{"Key":"to treat","Fragments":["it"]},{"Key":"as bytes","Fragments":["and"]},{"Key":"bytes and","Fragments":["not","not"]},{"Key":"not characters,","Fragments":["which"]},{"Key":"why there's","Fragments":["a"]},{"Key":"a 256-tuple","Fragments":["lookup"]},{"Key":"256-tuple lookup","Fragments":["table."]},{"Key":"lookup table.","Fragments":["The"]},{"Key":"table. The","Fragments":["comment"]},{"Key":"The comment","Fragments":["starting"]},{"Key":"comment starting","Fragments":["on"]},{"Key":"starting on","Fragments":["line","elixir."]},{"Key":"5 refers","Fragments":["to"]},{"Key":"to bytes","Fragments":["and"]},{"Key":"not saying","Fragments":["this","it's","you"]},{"Key":"saying this","Fragments":["is"]},{"Key":"bad approach,","Fragments":["but"]},{"Key":"still feels","Fragments":["like"]},{"Key":"micro optimization.","Fragments":["Nitpicking"]},{"Key":"optimization. Nitpicking","Fragments":["if"]},{"Key":"Nitpicking if","Fragments":["often"]},{"Key":"if often","Fragments":["as"]},{"Key":"often as","Fragments":["much"]},{"Key":"about opinion","Fragments":["as"]},{"Key":"opinion as","Fragments":["facts."]},{"Key":"as facts.","Fragments":[";)"]},{"Key":"Yeah, passing","Fragments":["2"]},{"Key":"passing 2","Fragments":["versions"]},{"Key":"of original","Fragments":["anagram"]},{"Key":"original anagram","Fragments":["makes"]},{"Key":"anagram makes","Fragments":["code"]},{"Key":"makes code","Fragments":["much","much","much"]},{"Key":"readable because","Fragments":["of"]},{"Key":"of 3","Fragments":["vs"]},{"Key":"3 vs","Fragments":["2"]},{"Key":"vs 2","Fragments":["params."]},{"Key":"2 params.","Fragments":["How"]},{"Key":"params. How","Fragments":["can"]},{"Key":"I avoid","Fragments":["that?"]},{"Key":"Very boring,","Fragments":["I"]},{"Key":"boring, I","Fragments":["have"]},{"Key":"mind for","Fragments":["another"]},{"Key":" @nettie","Fragments":["I"]},{"Key":"@nettie I","Fragments":["was"]},{"Key":"of flat_map","Fragments":["and"]},{"Key":"and map_reduce.","Fragments":["Thanks"]},{"Key":"map_reduce. Thanks","Fragments":["for"]},{"Key":"for those.","Fragments":["(Although,"]},{"Key":"those. (Although,","Fragments":["map_reduce"]},{"Key":"(Although, map_reduce","Fragments":["returns"]},{"Key":"map_reduce returns","Fragments":["a"]},{"Key":"a tuple","Fragments":["instead","with"]},{"Key":"tuple instead","Fragments":["of"]},{"Key":"the accumulator.","Fragments":["Grrrr)","Typically","This"]},{"Key":"accumulator. Grrrr)","Fragments":["And,"]},{"Key":"Grrrr) And,","Fragments":["I"]},{"Key":"And, I","Fragments":["thought"]},{"Key":"looked closely","Fragments":["enough"]},{"Key":"closely enough","Fragments":["at"]},{"Key":"enough at","Fragments":["the"]},{"Key":"the docos","Fragments":["for"]},{"Key":"docos for","Fragments":["String."]},{"Key":"for String.","Fragments":["\u003cfacepalm"]},{"Key":"String. \u003cfacepalm","Fragments":["/\u003e"]},{"Key":"the lookup,","Fragments":["are"]},{"Key":"lookup, are","Fragments":["you"]},{"Key":"you discouraging","Fragments":["that"]},{"Key":"discouraging that","Fragments":["or"]},{"Key":"not? I","Fragments":["had"]},{"Key":"been using","Fragments":["HashDicts","reduce"]},{"Key":"using HashDicts","Fragments":["up"]},{"Key":"HashDicts up","Fragments":["until"]},{"Key":"up until","Fragments":["several"]},{"Key":"until several","Fragments":["exercises"]},{"Key":"several exercises","Fragments":["ago"]},{"Key":"exercises ago","Fragments":["and"]},{"Key":"and thought","Fragments":["that","it"]},{"Key":"that _that_","Fragments":["was"]},{"Key":"_that_ was","Fragments":["not"]},{"Key":" Put","Fragments":["the"]},{"Key":"Put the","Fragments":["contents"]},{"Key":"of `anagram?`","Fragments":["inside"]},{"Key":"`anagram?` inside","Fragments":["the"]},{"Key":"you no","Fragments":["longer"]},{"Key":"longer need","Fragments":["to"]},{"Key":"pass arguments.","Fragments":["Sometimes"]},{"Key":"arguments. Sometimes","Fragments":["splitting"]},{"Key":"Sometimes splitting","Fragments":["up"]},{"Key":"functions doesn't","Fragments":["improve"]},{"Key":" Good:","Fragments":["`HashDict.new`","`Dict.get`"]},{"Key":" Bad:","Fragments":["`HashDict.get`"]},{"Key":"thing that's","Fragments":["discouraged"]},{"Key":"that's discouraged","Fragments":["is"]},{"Key":"discouraged is","Fragments":["calling"]},{"Key":"`HashDict` function","Fragments":["if"]},{"Key":"`Dict` function","Fragments":["of"]},{"Key":"function of","Fragments":["the","the","the","`Enum.into/3`","`Enum.filter/2`","a"]},{"Key":"name. `Dict.get`","Fragments":["calls"]},{"Key":"`Dict.get` calls","Fragments":["`HashDict.get`"]},{"Key":"calls `HashDict.get`","Fragments":["if"]},{"Key":"`HashDict.get` if","Fragments":["a"]},{"Key":"it. Dict","Fragments":["="]},{"Key":"Dict =","Fragments":["interface,"]},{"Key":"interface, HashDict","Fragments":["="]},{"Key":"HashDict =","Fragments":["implementation."]},{"Key":"implementation. (There","Fragments":["is"]},{"Key":" @amiya","Fragments":["OK..."]},{"Key":"@amiya OK...","Fragments":["I"]},{"Key":"I slightly","Fragments":["misinterpreted"]},{"Key":"slightly misinterpreted","Fragments":["feedback"]},{"Key":"misinterpreted feedback","Fragments":["you"]},{"Key":"feedback you","Fragments":["gave"]},{"Key":"you gave","Fragments":["in","a"]},{"Key":"gave in","Fragments":["my"]},{"Key":"first submission","Fragments":["for","as"]},{"Key":"for space-age:","Fragments":["http://exercism.io/submissions/c1fc255d0be5a82dbc0033d9."]},{"Key":"space-age: http://exercism.io/submissions/c1fc255d0be5a82dbc0033d9.","Fragments":["I"]},{"Key":"http://exercism.io/submissions/c1fc255d0be5a82dbc0033d9. I","Fragments":["thought"]},{"Key":"you advocated","Fragments":["for"]},{"Key":"advocated for","Fragments":["dispensing"]},{"Key":"for dispensing","Fragments":["with"]},{"Key":"dispensing with","Fragments":["HashDict"]},{"Key":"with HashDict","Fragments":["'s"]},{"Key":"HashDict 's","Fragments":["altogether"]},{"Key":"'s altogether","Fragments":["when"]},{"Key":"altogether when","Fragments":["you"]},{"Key":"were simply","Fragments":["saying"]},{"Key":"simply saying","Fragments":["that"]},{"Key":"saying that","Fragments":["_retrieving_","sorting"]},{"Key":"that _retrieving_","Fragments":["values"]},{"Key":"_retrieving_ values","Fragments":["from"]},{"Key":"values from","Fragments":["it"]},{"Key":"from it","Fragments":["could"]},{"Key":"be accomplished","Fragments":["using"]},{"Key":"accomplished using","Fragments":["a"]},{"Key":"feedback, @roger.","Fragments":["Nice"]},{"Key":"@roger. Nice","Fragments":["to"]},{"Key":"Nice to","Fragments":["know"]},{"Key":"16. I","Fragments":["tried"]},{"Key":"your suggestion","Fragments":["of","to","above","to"]},{"Key":"of `Enum.flat_map`","Fragments":["to","and"]},{"Key":"`Enum.flat_map` to","Fragments":["`HashDict.new`"]},{"Key":"to `HashDict.new`","Fragments":["and"]},{"Key":"`HashDict.new` and","Fragments":["I"]},{"Key":"better, maybe","Fragments":["just"]},{"Key":"maybe just","Fragments":["because","change"]},{"Key":"much going","Fragments":["on"]},{"Key":"the `flat_map`","Fragments":["that"]},{"Key":"`flat_map` that","Fragments":["it"]},{"Key":"simple constructor","Fragments":["argument"]},{"Key":"constructor argument","Fragments":["and"]},{"Key":"argument and","Fragments":["the"]},{"Key":"`|\u003e` creates","Fragments":["a"]},{"Key":"creates a","Fragments":["nice","new","new"]},{"Key":"nice visual","Fragments":["separation."]},{"Key":"As said","Fragments":["in"]},{"Key":"said in","Fragments":["version"]},{"Key":"in version","Fragments":["1,"]},{"Key":"version 1,","Fragments":["init"]},{"Key":"1, init","Fragments":["is"]},{"Key":"init is","Fragments":["superfluous","again"]},{"Key":"is superfluous","Fragments":["and"]},{"Key":"superfluous and","Fragments":["using"]},{"Key":"using cast","Fragments":["when"]},{"Key":"cast when","Fragments":["nothing"]},{"Key":"when nothing","Fragments":["needs"]},{"Key":"nothing needs","Fragments":["to"]},{"Key":"be returned.","Fragments":["Thanks"]},{"Key":"returned. Thanks","Fragments":["for"]},{"Key":"feedback, moving","Fragments":["on"]},{"Key":"moving on","Fragments":[":D"]},{"Key":"that Dict.get/3","Fragments":["works"]},{"Key":"Dict.get/3 works","Fragments":["with"]},{"Key":"works with","Fragments":["a","all","all","all"]},{"Key":"a keyword","Fragments":["list.","in"]},{"Key":"keyword list.","Fragments":["Or"]},{"Key":"list. Or","Fragments":["perhaps"]},{"Key":"Or perhaps","Fragments":["since"]},{"Key":"perhaps since","Fragments":["the"]},{"Key":"in @aracely","Fragments":["aren't"]},{"Key":"@aracely aren't","Fragments":["atoms,"]},{"Key":"aren't atoms,","Fragments":["then"]},{"Key":"atoms, then","Fragments":["maybe"]},{"Key":"then maybe","Fragments":["that's"]},{"Key":"a manually","Fragments":["created"]},{"Key":"manually created","Fragments":["ListDict."]},{"Key":"took longer","Fragments":["than"]},{"Key":"than expected","Fragments":["not"]},{"Key":"expected not","Fragments":["because"]},{"Key":"not because","Fragments":["of"]},{"Key":"shorthand @scarlett[max_value]","Fragments":["and"]},{"Key":"@scarlett[max_value] and","Fragments":["instead"]},{"Key":"and instead","Fragments":["had"]},{"Key":"instead had","Fragments":["to"]},{"Key":"use Dict.get(@scarlett,","Fragments":["max_value)."]},{"Key":"Dict.get(@scarlett, max_value).","Fragments":["I"]},{"Key":"max_value). I","Fragments":["kept"]},{"Key":"getting compilation","Fragments":["errors"]},{"Key":"compilation errors","Fragments":["when"]},{"Key":"errors when","Fragments":["attempting"]},{"Key":"when attempting","Fragments":["to"]},{"Key":"attempting to","Fragments":["use","implement"]},{"Key":" roman.exs:1:","Fragments":["redefining"]},{"Key":"roman.exs:1: redefining","Fragments":["module"]},{"Key":"redefining module","Fragments":["Roman"]},{"Key":" ==","Fragments":["Compilation"]},{"Key":"== Compilation","Fragments":["error"]},{"Key":"Compilation error","Fragments":["on"]},{"Key":"on file","Fragments":["roman.exs"]},{"Key":"file roman.exs","Fragments":["=="]},{"Key":"(ArgumentError) argument","Fragments":["error"]},{"Key":" :lists.keyfind(:import,","Fragments":["1,"]},{"Key":":lists.keyfind(:import, 1,","Fragments":["7)"]},{"Key":" roman.exs:17:","Fragments":["Kernel.access/2"]},{"Key":"Previous exercises","Fragments":["never"]},{"Key":"exercises never","Fragments":["revealed"]},{"Key":"never revealed","Fragments":["this"]},{"Key":"revealed this","Fragments":["problem."]},{"Key":"problem. Perhaps","Fragments":["there"]},{"Key":"limitation when","Fragments":["using"]},{"Key":"using numeric","Fragments":["keys?"]},{"Key":"numeric keys?","Fragments":["Or"]},{"Key":"keys? Or","Fragments":["even"]},{"Key":"Or even","Fragments":["a"]},{"Key":"think list","Fragments":["comprehensions","comprehensions"]},{"Key":"comprehensions improved","Fragments":["the"]},{"Key":"improved the","Fragments":["code."]},{"Key":"code. Maybe","Fragments":["there's"]},{"Key":"that allows","Fragments":["the"]},{"Key":"nested iterations","Fragments":["to"]},{"Key":"to collapse","Fragments":["to"]},{"Key":"collapse to","Fragments":["one?"]},{"Key":" Today","Fragments":["I"]},{"Key":"Today I","Fragments":["learned"]},{"Key":"learned that","Fragments":["a"]},{"Key":"second generator","Fragments":["in"]},{"Key":"generator in","Fragments":["a"]},{"Key":"comprehension can","Fragments":["depend"]},{"Key":"can depend","Fragments":["on"]},{"Key":"first generator.","Fragments":["Nice!"]},{"Key":"to arrange","Fragments":["things"]},{"Key":"arrange things","Fragments":["so"]},{"Key":"things so","Fragments":["it","each","that"]},{"Key":"it tells","Fragments":["something","more"]},{"Key":"tells something","Fragments":["and"]},{"Key":"have fun","Fragments":["and","with"]},{"Key":"fun and","Fragments":["learn"]},{"Key":"and learn","Fragments":["while","to"]},{"Key":"learn while","Fragments":["doing"]},{"Key":" Cell.add_enzyme(cell,","Fragments":["RNAPolymerase,"]},{"Key":"Cell.add_enzyme(cell, RNAPolymerase,","Fragments":["dna)"]},{"Key":" Cell.signal(cell,","Fragments":[":do_transription)"]},{"Key":"the side-effect","Fragments":["of"]},{"Key":"side-effect of","Fragments":["having"]},{"Key":"the pid","Fragments":["around","to"]},{"Key":"pid around","Fragments":["for"]},{"Key":" Oh!","Fragments":["and","Thanks"]},{"Key":"Oh! and","Fragments":["init"]},{"Key":"and init","Fragments":["is"]},{"Key":"is again","Fragments":["superfluous"]},{"Key":"again superfluous","Fragments":["I"]},{"Key":"superfluous I","Fragments":["realize"]},{"Key":"have gotten","Fragments":["lost","it"]},{"Key":"gotten lost","Fragments":["in"]},{"Key":"the nucleotide","Fragments":["exercise,","as","counters"]},{"Key":"nucleotide exercise,","Fragments":["but"]},{"Key":"only going","Fragments":["to"]},{"Key":"single process","Fragments":["instance,"]},{"Key":"process instance,","Fragments":["you"]},{"Key":"instance, you","Fragments":["can","can"]},{"Key":"can give","Fragments":["it"]},{"Key":"name during","Fragments":["start_link,"]},{"Key":"during start_link,","Fragments":["then"]},{"Key":"start_link, then","Fragments":["look"]},{"Key":"then look","Fragments":["it"]},{"Key":"with Process.whereis","Fragments":["in"]},{"Key":"Process.whereis in","Fragments":["the"]},{"Key":"the Cell","Fragments":["functions."]},{"Key":"Cell functions.","Fragments":["In"]},{"Key":"case, you'd","Fragments":["normally"]},{"Key":"you'd normally","Fragments":["expect"]},{"Key":"normally expect","Fragments":["many"]},{"Key":"expect many","Fragments":["cells,"]},{"Key":"many cells,","Fragments":["so"]},{"Key":"cells, so","Fragments":["it"]},{"Key":"as naturally","Fragments":["as"]},{"Key":"naturally as","Fragments":["the"]},{"Key":"also toyed","Fragments":["with"]},{"Key":"having Cell","Fragments":["be"]},{"Key":"Cell be","Fragments":["a"]},{"Key":"record that","Fragments":["holds"]},{"Key":"that holds","Fragments":["the"]},{"Key":"holds the","Fragments":["pid"]},{"Key":"pid to","Fragments":["the"]},{"Key":"the process.","Fragments":["The"]},{"Key":"process. The","Fragments":["client"]},{"Key":"The client","Fragments":["can"]},{"Key":"client can","Fragments":["then"]},{"Key":"can then","Fragments":["call","be"]},{"Key":"call \"methods\"","Fragments":["of"]},{"Key":"\"methods\" of","Fragments":["that"]},{"Key":"that record.","Fragments":["I"]},{"Key":"record. I","Fragments":["haven't"]},{"Key":"haven't actually","Fragments":["done"]},{"Key":"actually done","Fragments":["it,"]},{"Key":"done it,","Fragments":["and"]},{"Key":"goes against","Fragments":["the","the"]},{"Key":"general erlang","Fragments":["community,","community."]},{"Key":"erlang community,","Fragments":["but"]},{"Key":"community, but","Fragments":["it"]},{"Key":"Agreed. They're","Fragments":["different."]},{"Key":"They're different.","Fragments":["I'm"]},{"Key":"different. I'm","Fragments":["talking"]},{"Key":"I'm talking","Fragments":["about","about"]},{"Key":"about when","Fragments":["they"]},{"Key":"are both","Fragments":["used"]},{"Key":"both used","Fragments":["together."]},{"Key":"used together.","Fragments":["The"]},{"Key":"together. The","Fragments":["barewords"]},{"Key":"The barewords","Fragments":["approach"]},{"Key":"barewords approach","Fragments":["is"]},{"Key":"is simple","Fragments":["when","and"]},{"Key":"simple when","Fragments":["memoization"]},{"Key":"when memoization","Fragments":["is"]},{"Key":"memoization is","Fragments":["needed","still"]},{"Key":"is needed","Fragments":["in"]},{"Key":"in ruby.","Fragments":["Not"]},{"Key":"ruby. Not","Fragments":["so"]},{"Key":" @reta,","Fragments":["yes,"]},{"Key":"@reta, yes,","Fragments":["you're"]},{"Key":"yes, you're","Fragments":["right,"]},{"Key":"more awkward,","Fragments":["which"]},{"Key":"awkward, which","Fragments":["is"]},{"Key":" @alexandre","Fragments":["so","I"]},{"Key":"@alexandre so","Fragments":["should"]},{"Key":"so should","Fragments":["I"]},{"Key":"I change","Fragments":["`\u003c\u003e`","*classify*"]},{"Key":"change `\u003c\u003e`","Fragments":["to"]},{"Key":"`\u003c\u003e` to","Fragments":["something"]},{"Key":"something else?","Fragments":["I"]},{"Key":"else? I","Fragments":["have"]},{"Key":"no experience","Fragments":["in"]},{"Key":"experience in","Fragments":["Erlang"]},{"Key":"Erlang nor","Fragments":["in"]},{"Key":"nor in","Fragments":["Elixir"]},{"Key":"and couldn't","Fragments":["find","find","figure"]},{"Key":"working alternative.","Fragments":["I"]},{"Key":"alternative. I","Fragments":["don't","struggle"]},{"Key":"understand difference","Fragments":["between"]},{"Key":"between lists","Fragments":["of"]},{"Key":"chars, binary","Fragments":["etc."]},{"Key":"binary etc.","Fragments":["Can"]},{"Key":"etc. Can","Fragments":["you"]},{"Key":" @alexandre,","Fragments":["what"]},{"Key":"@alexandre, what","Fragments":["guards"]},{"Key":"what guards","Fragments":["syntax"]},{"Key":"guards syntax","Fragments":["should"]},{"Key":"syntax should","Fragments":["I"]},{"Key":"I use?","Fragments":["I"]},{"Key":"use? I","Fragments":["couldn't"]},{"Key":"anything suitable","Fragments":["in"]},{"Key":"suitable in","Fragments":["Elixir"]},{"Key":"Ah, yes.","Fragments":["`foo[bar]`"]},{"Key":"yes. `foo[bar]`","Fragments":["syntax"]},{"Key":"`foo[bar]` syntax","Fragments":["works"]},{"Key":"syntax works","Fragments":["through"]},{"Key":"works through","Fragments":["the"]},{"Key":"the `Access`","Fragments":["protocol"]},{"Key":"`Access` protocol","Fragments":["which"]},{"Key":"protocol which","Fragments":["can"]},{"Key":"implemented by","Fragments":["all"]},{"Key":"by all","Fragments":["kinds"]},{"Key":"of records,","Fragments":["a"]},{"Key":"records, a","Fragments":["`HashDict`"]},{"Key":"`HashDict` value","Fragments":["is"]},{"Key":"record (though","Fragments":["not"]},{"Key":"(though not","Fragments":["a"]},{"Key":"public one)","Fragments":["and"]},{"Key":"one) and","Fragments":["it's"]},{"Key":"it's `Access`","Fragments":["implementation"]},{"Key":"`Access` implementation","Fragments":["calls"]},{"Key":"implementation calls","Fragments":["`HashDict.get`."]},{"Key":" Sometimes/often","Fragments":["when"]},{"Key":"Sometimes/often when","Fragments":["writing"]},{"Key":"writing expressions","Fragments":["that"]},{"Key":"expressions that","Fragments":["combine"]},{"Key":"that combine","Fragments":["`Enum.flat_map`"]},{"Key":"combine `Enum.flat_map`","Fragments":["and"]},{"Key":"and things","Fragments":["like"]},{"Key":"or `Enum.filter`","Fragments":["list"]},{"Key":"`Enum.filter` list","Fragments":["comprehensions"]},{"Key":"comprehensions can","Fragments":["be"]},{"Key":"def transform(input)","Fragments":["do"]},{"Key":" l","Fragments":["="]},{"Key":"l =","Fragments":["Enum.to_list(input)"]},{"Key":"HashDict.new (lc","Fragments":["{"]},{"Key":"(lc {","Fragments":["c,"]},{"Key":"c, ws","Fragments":["}"]},{"Key":"ws }","Fragments":["inlist"]},{"Key":"inlist l,","Fragments":["w"]},{"Key":"l, w","Fragments":["inlist"]},{"Key":"w inlist","Fragments":["ws,"]},{"Key":"{ String.downcase(w),","Fragments":["c"]},{"Key":"String.downcase(w), c","Fragments":["})"]},{"Key":"Only ugly","Fragments":["bit"]},{"Key":"ugly bit","Fragments":["here"]},{"Key":"bit here","Fragments":["is"]},{"Key":"the forced","Fragments":["conversion"]},{"Key":"forced conversion","Fragments":["to"]},{"Key":"list first.","Fragments":["From"]},{"Key":"first. From","Fragments":["what"]},{"Key":"that requirement","Fragments":["should"]},{"Key":"requirement should","Fragments":["be"]},{"Key":"be lifted","Fragments":["when"]},{"Key":"lifted when","Fragments":["Erlang"]},{"Key":"when Erlang","Fragments":["gains"]},{"Key":"Erlang gains","Fragments":["something"]},{"Key":"gains something","Fragments":["called"]},{"Key":"something called","Fragments":["\"funs","Pipe"]},{"Key":"called \"funs","Fragments":["with"]},{"Key":"\"funs with","Fragments":["names\","]},{"Key":"with names\",","Fragments":["but"]},{"Key":"names\", but","Fragments":["that"]},{"Key":"bug to","Fragments":["me."]},{"Key":"me. Issue","Fragments":["posted."]},{"Key":"a `ListDict`,","Fragments":["yes.","lists"]},{"Key":"comprehension (`lc`)","Fragments":["instead"]},{"Key":"(`lc`) instead","Fragments":["of"]},{"Key":"and `Enum.map`","Fragments":["in","does?","with"]},{"Key":"`Enum.map` in","Fragments":["`@concepcion`."]},{"Key":"the trick.","Fragments":["List"]},{"Key":"trick. List","Fragments":["comprehensions"]},{"Key":"List comprehensions","Fragments":["are"]},{"Key":"comprehensions are","Fragments":["really","simply","something"]},{"Key":"a specialised","Fragments":["list"]},{"Key":"specialised list","Fragments":["monad"]},{"Key":"list monad","Fragments":["syntax."]},{"Key":"I'd factor","Fragments":["out"]},{"Key":"factor out","Fragments":["the","the","the"]},{"Key":"of letters","Fragments":["and","to"]},{"Key":"and scores","Fragments":["into"]},{"Key":"scores into","Fragments":["a"]},{"Key":" Module","Fragments":["attributes"]},{"Key":"Module attributes","Fragments":["are"]},{"Key":"only visible","Fragments":["outside"]},{"Key":"visible outside","Fragments":["the","the"]},{"Key":"module if","Fragments":["you"]},{"Key":"you explicitly","Fragments":["export"]},{"Key":"can register","Fragments":["a"]},{"Key":"register a","Fragments":["name"]},{"Key":"name with","Fragments":["an"]},{"Key":"an option","Fragments":["to","to"]},{"Key":"to `start_link`","Fragments":["and"]},{"Key":"`start_link` and","Fragments":["can"]},{"Key":"can pass","Fragments":["a","a","that","suffixes"]},{"Key":"to `call`.","Fragments":["See"]},{"Key":"`call`. See","Fragments":["the"]},{"Key":"the gen_server","Fragments":["documentation."]},{"Key":" @earnest","Fragments":["Binary"]},{"Key":"@earnest Binary","Fragments":["append"]},{"Key":"Binary append","Fragments":["is"]},{"Key":"append is","Fragments":["a","notoriously","0","2","4","(roughly)","(roughly)"]},{"Key":"efficient than","Fragments":["you","`defdelegate`","`String.codepoints","a"]},{"Key":"might think.","Fragments":["See"]},{"Key":"think. See","Fragments":["the"]},{"Key":"Erlang efficiency","Fragments":["guide."]},{"Key":"not visibility","Fragments":["I'm"]},{"Key":"visibility I'm","Fragments":["concerned"]},{"Key":"I'm concerned","Fragments":["with,"]},{"Key":"concerned with,","Fragments":["really,"]},{"Key":"with, really,","Fragments":["but"]},{"Key":"really, but","Fragments":["mainly"]},{"Key":"but mainly","Fragments":["\"code","it"]},{"Key":"mainly \"code","Fragments":["prettiness\"."]},{"Key":" @katlyn","Fragments":["Not","I"]},{"Key":"@katlyn Not","Fragments":["sure"]},{"Key":"erlang community.","Fragments":["What"]},{"Key":"community. What","Fragments":["you"]},{"Key":"you describe","Fragments":["is"]},{"Key":"describe is","Fragments":["the"]},{"Key":"an active","Fragments":["object."]},{"Key":"active object.","Fragments":["That's"]},{"Key":"object. That's","Fragments":["one"]},{"Key":"That's one","Fragments":["of"]},{"Key":"the fundamental","Fragments":["ideas"]},{"Key":"fundamental ideas","Fragments":["behind"]},{"Key":"ideas behind","Fragments":["gen_server."]},{"Key":"@katlyn I","Fragments":["understand"]},{"Key":"with OTP,","Fragments":["but"]},{"Key":"OTP, but","Fragments":["the"]},{"Key":"the longer","Fragments":["you"]},{"Key":"longer you","Fragments":["make"]},{"Key":"submissions the","Fragments":["less"]},{"Key":"the less","Fragments":["feedback","I"]},{"Key":"less feedback","Fragments":["on"]},{"Key":"exercise specific","Fragments":["code"]},{"Key":"specific code","Fragments":["you're"]},{"Key":"code you're","Fragments":["going"]},{"Key":"to get.","Fragments":["There's"]},{"Key":"get. There's","Fragments":["simply"]},{"Key":"There's simply","Fragments":["so"]},{"Key":"simply so","Fragments":["much"]},{"Key":"much boilerplate","Fragments":["to"]},{"Key":"boilerplate to","Fragments":["wade"]},{"Key":"to wade","Fragments":["through."]},{"Key":"use `Regex.replace`","Fragments":["here,"]},{"Key":"`Regex.replace` here,","Fragments":["it's"]},{"Key":"it's totally","Fragments":["overkill","fine."]},{"Key":"totally overkill","Fragments":["since"]},{"Key":"character `?T`","Fragments":["and"]},{"Key":"and replace","Fragments":["just","any","line"]},{"Key":"replace just","Fragments":["that."]},{"Key":"To avoid","Fragments":["generating"]},{"Key":"avoid generating","Fragments":["an"]},{"Key":"generating an","Fragments":["intermediate"]},{"Key":"intermediate list","Fragments":["you"]},{"Key":"use `Stream.map`","Fragments":["instead"]},{"Key":"`Stream.map` instead","Fragments":["of"]},{"Key":" `HashDict.put(...,","Fragments":["...,"]},{"Key":"`HashDict.put(..., ...,","Fragments":["HashDict.get(...))`"]},{"Key":"..., HashDict.get(...))`","Fragments":["can"]},{"Key":"HashDict.get(...))` can","Fragments":["be"]},{"Key":"that `\\w`","Fragments":["considers","considers","has","is"]},{"Key":"`\\w` considers","Fragments":["`_`","\"_\""]},{"Key":"considers `_`","Fragments":["to"]},{"Key":"be part","Fragments":["of"]},{"Key":"`-` not.","Fragments":["For"]},{"Key":"not. For","Fragments":["example"]},{"Key":"example \"major-elect\"","Fragments":["is"]},{"Key":"\"major-elect\" is","Fragments":["not"]},{"Key":"not considered","Fragments":["to","a"]},{"Key":"considered to","Fragments":["be","be","be"]},{"Key":"be one","Fragments":["word"]},{"Key":"one word","Fragments":["by"]},{"Key":"word by","Fragments":["the"]},{"Key":"the `\\w+`","Fragments":["test."]},{"Key":"Hum, I","Fragments":["understand","didn't"]},{"Key":"understand `/\\w+/`","Fragments":["is"]},{"Key":"`/\\w+/` is","Fragments":["not"]},{"Key":"not perfect,","Fragments":["and"]},{"Key":"perfect, and","Fragments":["I"]},{"Key":"I would't","Fragments":["use"]},{"Key":"would't use","Fragments":["it"]},{"Key":"real life","Fragments":["application."]},{"Key":"life application.","Fragments":["But"]},{"Key":"application. But","Fragments":["I"]},{"Key":"go crazy","Fragments":["here"]},{"Key":"crazy here","Fragments":["and"]},{"Key":"a I","Fragments":["think"]},{"Key":"think regex","Fragments":["to"]},{"Key":"to properly","Fragments":["match","use"]},{"Key":"properly match","Fragments":["words"]},{"Key":"match words","Fragments":["would"]},{"Key":"words would","Fragments":["be"]},{"Key":"overly complicated,","Fragments":["so"]},{"Key":"complicated, so","Fragments":["I"]},{"Key":"would stick","Fragments":["with","with"]},{"Key":"one (it","Fragments":["makes"]},{"Key":"(it makes","Fragments":["the"]},{"Key":" Sure.","Fragments":["I"]},{"Key":"Sure. I","Fragments":["just"]},{"Key":"world is","Fragments":["a"]},{"Key":"more complicated.","Fragments":[";)"]},{"Key":"general I'm","Fragments":["not"]},{"Key":"of expressions","Fragments":["like","allowed"]},{"Key":"expressions like","Fragments":["`round","`\u0026(\u00261","`\u0026(\u00261"]},{"Key":"like `round","Fragments":["1_000_000_000"]},{"Key":"`round 1_000_000_000","Fragments":["/"]},{"Key":"1_000_000_000 /","Fragments":["60"]},{"Key":"/ 60","Fragments":["/","/","/","/"]},{"Key":"60 /","Fragments":["60","24`.","60","24`."]},{"Key":"/ 24`.","Fragments":["To","Consider"]},{"Key":"24`. To","Fragments":["my"]},{"Key":"To my","Fragments":["Haskell-warped","eye,"]},{"Key":"my Haskell-warped","Fragments":["mind"]},{"Key":"Haskell-warped mind","Fragments":["that"]},{"Key":"reads like","Fragments":["`(round","an"]},{"Key":"like `(round","Fragments":["1_000_000_000)"]},{"Key":"`(round 1_000_000_000)","Fragments":["/"]},{"Key":"1_000_000_000) /","Fragments":["60"]},{"Key":"24`. Consider","Fragments":["adding"]},{"Key":"Consider adding","Fragments":["some"]},{"Key":"adding some","Fragments":["parentheses","additional"]},{"Key":"some parentheses","Fragments":["to"]},{"Key":"make precedence","Fragments":["clear."]},{"Key":"precedence clear.","Fragments":["Your"]},{"Key":"clear. Your","Fragments":["co-workers"]},{"Key":"Your co-workers","Fragments":["will"]},{"Key":"co-workers will","Fragments":["thank"]},{"Key":"will thank","Fragments":["you"]},{"Key":"Agreed. I'm","Fragments":["just"]},{"Key":"this forum","Fragments":["to"]},{"Key":"forum to","Fragments":["encourage"]},{"Key":"to encourage","Fragments":["people"]},{"Key":"encourage people","Fragments":["to"]},{"Key":"to explore","Fragments":["more"]},{"Key":"explore more","Fragments":["parts"]},{"Key":"more parts","Fragments":["of"]},{"Key":"find attributes","Fragments":["and"]},{"Key":"attributes and","Fragments":["executing"]},{"Key":"and executing","Fragments":["code"]},{"Key":"executing code","Fragments":["at"]},{"Key":"code at","Fragments":["compile"]},{"Key":"at compile","Fragments":["time"]},{"Key":"compile time","Fragments":["quite","translation"]},{"Key":"time quite","Fragments":["powerful."]},{"Key":"quite powerful.","Fragments":["What"]},{"Key":"powerful. What","Fragments":["is"]},{"Key":"attribute for","Fragments":["days_in_gigaseconds"]},{"Key":"for days_in_gigaseconds","Fragments":["so"]},{"Key":"days_in_gigaseconds so","Fragments":["you're"]},{"Key":"so you're","Fragments":["not","actually","maybe"]},{"Key":"not calculating","Fragments":["it"]},{"Key":"calculating it","Fragments":["each"]},{"Key":"it each","Fragments":["time"]},{"Key":"of attributes","Fragments":["-"]},{"Key":"attributes -","Fragments":["but"]},{"Key":"- but","Fragments":["it","your","given"]},{"Key":"being calculated","Fragments":["each"]},{"Key":"calculated each","Fragments":["time"]},{"Key":"time is","Fragments":["a"]},{"Key":"fair point,","Fragments":["even"]},{"Key":"point, even","Fragments":["though"]},{"Key":"exactly an","Fragments":["expensive"]},{"Key":"I'd encourage","Fragments":["you"]},{"Key":"encourage you","Fragments":["to"]},{"Key":"out guard","Fragments":["clauses"]},{"Key":"for line2","Fragments":["and"]},{"Key":"line2 and","Fragments":["bottleize."]},{"Key":"string concat","Fragments":["is"]},{"Key":"concat is","Fragments":["very"]},{"Key":"very straightforward","Fragments":["code"]},{"Key":"straightforward code","Fragments":["to"]},{"Key":"to write,","Fragments":["however,"]},{"Key":"write, however,","Fragments":["behind"]},{"Key":"however, behind","Fragments":["the"]},{"Key":"scenes concatenating","Fragments":["to"]},{"Key":"concatenating to","Fragments":["the"]},{"Key":"string requires","Fragments":["that"]},{"Key":"requires that","Fragments":["the"]},{"Key":"entire binary","Fragments":["string"]},{"Key":"binary string","Fragments":["be"]},{"Key":"string be","Fragments":["copied"]},{"Key":"be copied","Fragments":["in"]},{"Key":"copied in","Fragments":["memory."]},{"Key":"in memory.","Fragments":["Do"]},{"Key":"memory. Do","Fragments":["you"]},{"Key":"have ideas","Fragments":["on"]},{"Key":"eliminate or","Fragments":["reduce"]},{"Key":"What's pretty","Fragments":["depends"]},{"Key":"pretty depends","Fragments":["on"]},{"Key":"language though.","Fragments":["Bad"]},{"Key":"though. Bad","Fragments":["idioms"]},{"Key":"Bad idioms","Fragments":["in"]},{"Key":"idioms in","Fragments":["one","another."]},{"Key":"one language","Fragments":["may"]},{"Key":"language may","Fragments":["be"]},{"Key":"know, the","Fragments":["syntax"]},{"Key":"syntax just","Fragments":["seems"]},{"Key":"bit weird","Fragments":["to"]},{"Key":"me -","Fragments":["they're"]},{"Key":"- they're","Fragments":["a"]},{"Key":"bit reminiscent","Fragments":["of"]},{"Key":"of Ruby's","Fragments":["instance"]},{"Key":"Ruby's instance","Fragments":["variables"]},{"Key":"variables and","Fragments":["I"]},{"Key":"to never","Fragments":["use"]},{"Key":"object constructor","Fragments":["so"]},{"Key":"constructor so","Fragments":["I've"]},{"Key":"I've become","Fragments":["a"]},{"Key":"become a","Fragments":["bit"]},{"Key":"bit allergic","Fragments":["to"]},{"Key":"to seeing","Fragments":["`@`s","how"]},{"Key":"seeing `@`s","Fragments":["dotted"]},{"Key":"`@`s dotted","Fragments":["around"]},{"Key":"dotted around","Fragments":["my"]},{"Key":"main advantage","Fragments":["is"]},{"Key":"advantage is","Fragments":["that"]},{"Key":"the client","Fragments":["code"]},{"Key":"client code","Fragments":["that","too."]},{"Key":"a value","Fragments":["is","is","that"]},{"Key":"is completely","Fragments":["oblivious"]},{"Key":"completely oblivious","Fragments":["to"]},{"Key":"oblivious to","Fragments":["whether"]},{"Key":"to whether","Fragments":["it"]},{"Key":"variable, an","Fragments":["attribute,"]},{"Key":"attribute, or","Fragments":["a"]},{"Key":"a calculated","Fragments":["value"]},{"Key":"calculated value","Fragments":["that"]},{"Key":"that changes","Fragments":["every"]},{"Key":"changes every","Fragments":["time"]},{"Key":"time -","Fragments":["so"]},{"Key":"- so","Fragments":["if"]},{"Key":"refactor from","Fragments":["one"]},{"Key":"from one","Fragments":["to","little","little"]},{"Key":"other there's","Fragments":["only"]},{"Key":"change (where","Fragments":["the"]},{"Key":"(where the","Fragments":["value"]},{"Key":"is created),","Fragments":["rather"]},{"Key":"created), rather","Fragments":["than"]},{"Key":"than needing","Fragments":["to"]},{"Key":"needing to","Fragments":["change","do"]},{"Key":"change all","Fragments":["the"]},{"Key":"the uses","Fragments":["in"]},{"Key":"uses in","Fragments":["client"]},{"Key":"in client","Fragments":["code"]},{"Key":" Of","Fragments":["course","course,","course"]},{"Key":"same benefit","Fragments":["of"]},{"Key":"of consistency","Fragments":["(and"]},{"Key":"consistency (and","Fragments":["lack"]},{"Key":"(and lack","Fragments":["of"]},{"Key":"of `@`s)","Fragments":["by"]},{"Key":"`@`s) by","Fragments":["using"]},{"Key":"attribute and","Fragments":["having"]},{"Key":"function return","Fragments":["it's"]},{"Key":"return it's","Fragments":["value."]},{"Key":"it's value.","Fragments":["Maybe"]},{"Key":"value. Maybe","Fragments":["I'll"]},{"Key":"It feels","Fragments":["very","a","as","like"]},{"Key":"very boilerplatey","Fragments":["to"]},{"Key":"boilerplatey to","Fragments":["have"]},{"Key":"the `days_in_gigasecond`","Fragments":["function"]},{"Key":"`days_in_gigasecond` function","Fragments":["like"]},{"Key":"like that.","Fragments":["Would","It","I","`numerals_iterator`",":)","What","Probably","But"]},{"Key":"that. Would","Fragments":["be"]},{"Key":"Would be","Fragments":["great"]},{"Key":"be great","Fragments":["if","for"]},{"Key":"great if","Fragments":["elixir"]},{"Key":"if elixir","Fragments":["had"]},{"Key":"elixir had","Fragments":["the"]},{"Key":"equivalent of","Fragments":["ruby's"]},{"Key":"of ruby's","Fragments":["`attr_reader`"]},{"Key":"ruby's `attr_reader`","Fragments":["-"]},{"Key":"`attr_reader` -","Fragments":["or"]},{"Key":"attributes just","Fragments":["defined"]},{"Key":"just defined","Fragments":["such"]},{"Key":"defined such","Fragments":["a"]},{"Key":"syntax resembles","Fragments":["ruby"]},{"Key":"resembles ruby","Fragments":["instance"]},{"Key":"ruby instance","Fragments":["vars,"]},{"Key":"instance vars,","Fragments":["but"]},{"Key":"vars, but","Fragments":["conceptually"]},{"Key":"but conceptually","Fragments":["they're"]},{"Key":"conceptually they're","Fragments":["more"]},{"Key":"they're more","Fragments":["like"]},{"Key":"like CONSTANTS.","Fragments":["I"]},{"Key":"CONSTANTS. I","Fragments":["don't"]},{"Key":"think they're","Fragments":["visible"]},{"Key":"they're visible","Fragments":["outside"]},{"Key":"mean about","Fragments":["client"]},{"Key":"about client","Fragments":["code."]},{"Key":"If it","Fragments":["were","can't"]},{"Key":"were me","Fragments":["I'd"]},{"Key":"me I'd","Fragments":["just"]},{"Key":"just reference","Fragments":["@parker","the"]},{"Key":"reference @parker","Fragments":["in"]},{"Key":"@parker in","Fragments":["from."]},{"Key":"in from.","Fragments":["It's"]},{"Key":"from. It's","Fragments":["only"]},{"Key":"It's only","Fragments":["a"]},{"Key":" @henriette","Fragments":["more"]},{"Key":"@henriette more","Fragments":["than"]},{"Key":"than happy","Fragments":["to"]},{"Key":"happy to","Fragments":["agree","say","say","say","be"]},{"Key":"that :-)","Fragments":["Do"]},{"Key":":-) Do","Fragments":["you"]},{"Key":"any examples","Fragments":["of"]},{"Key":"how having","Fragments":["the"]},{"Key":"`@` prefix","Fragments":["on"]},{"Key":"prefix on","Fragments":["all"]},{"Key":"all uses","Fragments":["of"]},{"Key":"uses of","Fragments":["attribute"]},{"Key":"of attribute","Fragments":["values"]},{"Key":"attribute values","Fragments":["in"]},{"Key":"elixir brings","Fragments":["advantages"]},{"Key":"brings advantages","Fragments":["that"]},{"Key":"advantages that","Fragments":["outweigh"]},{"Key":"that outweigh","Fragments":["the"]},{"Key":"outweigh the","Fragments":["ones"]},{"Key":"ones I've","Fragments":["described"]},{"Key":"I've described","Fragments":["above?"]},{"Key":"short video","Fragments":["that"]},{"Key":"video that","Fragments":["describes"]},{"Key":"describes some","Fragments":["of"]},{"Key":"the advantages","Fragments":["of"]},{"Key":"advantages of","Fragments":["what"]},{"Key":"in Ruby:","Fragments":["http://devblog.avdi.org/2012/10/01/barewords."]},{"Key":" `:math.pow`","Fragments":["is"]},{"Key":"`:math.pow` is","Fragments":["a"]},{"Key":"bit scary,","Fragments":["`:math.pow(2,64)"]},{"Key":"scary, `:math.pow(2,64)","Fragments":["=="]},{"Key":"`:math.pow(2,64) ==","Fragments":[":math.pow(2,64)"]},{"Key":"== :math.pow(2,64)","Fragments":["-"]},{"Key":":math.pow(2,64) -","Fragments":["1`"]},{"Key":"solution using","Fragments":["the","unquote","a","filter"]},{"Key":"the `Bitwise`","Fragments":["module","module.","module"]},{"Key":"`Bitwise` module","Fragments":["that","but"]},{"Key":"only takes","Fragments":["a"]},{"Key":"Nice, you've","Fragments":["found"]},{"Key":"found an","Fragments":["Erlang"]},{"Key":"the conversion.","Fragments":["I"]},{"Key":"conversion. I","Fragments":["missed"]},{"Key":"two clauses,","Fragments":["one"]},{"Key":"clauses, one","Fragments":["of"]},{"Key":"them being","Fragments":["`true`","returned.","horribly"]},{"Key":"being `true`","Fragments":["is"]},{"Key":"`true` is","Fragments":["best"]},{"Key":"is best","Fragments":["written"]},{"Key":"best written","Fragments":["as"]},{"Key":" Kept","Fragments":["the"]},{"Key":"Kept the","Fragments":["GenEvent"]},{"Key":"the GenEvent","Fragments":["structure,"]},{"Key":"GenEvent structure,","Fragments":["but"]},{"Key":"structure, but","Fragments":["as"]},{"Key":"as @krystel","Fragments":["suggested"]},{"Key":"@krystel suggested","Fragments":["replaced"]},{"Key":"suggested replaced","Fragments":["the"]},{"Key":"replaced the","Fragments":["Regex"]},{"Key":"Regex by","Fragments":["pattern"]},{"Key":"matching. Also","Fragments":["integrated"]},{"Key":"Also integrated","Fragments":["@krystel"]},{"Key":"integrated @krystel","Fragments":["suggestion"]},{"Key":"@krystel suggestion","Fragments":["about"]},{"Key":"suggestion about","Fragments":["Process.register/whereis,","`Regex.scan`,"]},{"Key":"about Process.register/whereis,","Fragments":["which"]},{"Key":"Process.register/whereis, which","Fragments":["reads"]},{"Key":"which reads","Fragments":["better"]},{"Key":"in DNA.to_rna.","Fragments":["This"]},{"Key":"DNA.to_rna. This","Fragments":["will"]},{"Key":"last cheeky","Fragments":["version"]},{"Key":"cheeky version","Fragments":["where"]},{"Key":"to force","Fragments":["a","the","you","developers","me","people"]},{"Key":"force a","Fragments":["problem"]},{"Key":"problem into","Fragments":["using"]},{"Key":"using OTP.","Fragments":["Thanks"]},{"Key":"OTP. Thanks","Fragments":["for"]},{"Key":"feedback guys.","Fragments":["Forgot","I've"]},{"Key":"guys. Forgot","Fragments":["to"]},{"Key":"Forgot to","Fragments":["remove"]},{"Key":"remove `cell","Fragments":["="]},{"Key":"`cell =","Fragments":["Cell.create`,"]},{"Key":"= Cell.create`,","Fragments":["just"]},{"Key":"Cell.create`, just","Fragments":["noticed"]},{"Key":"single reference...","Fragments":["but"]},{"Key":"reference... but","Fragments":["I"]},{"Key":"a zero","Fragments":["tolerance"]},{"Key":"zero tolerance","Fragments":["rule"]},{"Key":"tolerance rule","Fragments":["for"]},{"Key":"that sort","Fragments":["of","of","of"]},{"Key":"it hard","Fragments":["to","for","for","to"]},{"Key":"let go","Fragments":["of"]},{"Key":"go of","Fragments":["here"]},{"Key":"of here","Fragments":[":-)"]},{"Key":"Perhaps \"client-code\"","Fragments":["is"]},{"Key":"\"client-code\" is","Fragments":["a"]},{"Key":"bit misleading","Fragments":["-"]},{"Key":"misleading -","Fragments":["I"]},{"Key":"mean any","Fragments":["code"]},{"Key":"any code","Fragments":["(within","in","in"]},{"Key":"code (within","Fragments":["the"]},{"Key":"(within the","Fragments":["module)"]},{"Key":"the module)","Fragments":["that"]},{"Key":"module) that","Fragments":["uses"]},{"Key":"not `:gen_server`","Fragments":["here,"]},{"Key":"`:gen_server` here,","Fragments":["it's"]},{"Key":"it's `:gen_event`.","Fragments":["`:gen_server.start_link\\0`"]},{"Key":"`:gen_event`. `:gen_server.start_link\\0`","Fragments":["doesn't"]},{"Key":"`:gen_server.start_link\\0` doesn't","Fragments":["event"]},{"Key":"doesn't event","Fragments":["exist."]},{"Key":"think its","Fragments":["more"]},{"Key":"its more","Fragments":["of"]},{"Key":"consider most","Fragments":["important.","important."]},{"Key":"most important.","Fragments":["I","Whether"]},{"Key":"important. I","Fragments":["don't"]},{"Key":"the rare","Fragments":["and"]},{"Key":"rare and","Fragments":["easy"]},{"Key":"and easy","Fragments":["conversion"]},{"Key":"easy conversion","Fragments":["from"]},{"Key":"conversion from","Fragments":["private"]},{"Key":"from private","Fragments":["attribute"]},{"Key":"private attribute","Fragments":["to"]},{"Key":"attribute to","Fragments":["function"]},{"Key":"to function","Fragments":["as"]},{"Key":"a problem.","Fragments":["And"]},{"Key":"problem. And","Fragments":["the"]},{"Key":"the @","Fragments":["reminds"]},{"Key":"@ reminds","Fragments":["me","me"]},{"Key":"reminds me","Fragments":["of","of","that"]},{"Key":"Could I","Fragments":["ask"]},{"Key":"I ask","Fragments":["what"]},{"Key":"ask what","Fragments":["you"]},{"Key":"by \"the","Fragments":["@"]},{"Key":"\"the @","Fragments":["reminds"]},{"Key":"the value\"?","Fragments":["Not"]},{"Key":"value\"? Not","Fragments":["sure"]},{"Key":"I quite","Fragments":["understand."]},{"Key":"yes, gen_event","Fragments":["is"]},{"Key":"gen_event is","Fragments":["a"]},{"Key":"weird one.","Fragments":["`:gen_event.start_link/1`"]},{"Key":"one. `:gen_event.start_link/1`","Fragments":["exists"]},{"Key":"`:gen_event.start_link/1` exists","Fragments":["though"]},{"Key":"exists though","Fragments":["and"]},{"Key":"though and","Fragments":["you","the"]},{"Key":"can configure","Fragments":["a"]},{"Key":"configure a","Fragments":["name"]},{"Key":"It reminds","Fragments":["me"]},{"Key":"that identifier","Fragments":["is"]},{"Key":"identifier is","Fragments":["used"]},{"Key":"a constant.","Fragments":["Constants"]},{"Key":"constant. Constants","Fragments":["are"]},{"Key":"Constants are","Fragments":["relatively"]},{"Key":"are relatively","Fragments":["rare"]},{"Key":"relatively rare","Fragments":["so"]},{"Key":"rare so","Fragments":["there's"]},{"Key":"there's useful","Fragments":["information"]},{"Key":"useful information","Fragments":["in"]},{"Key":"information in","Fragments":["that"]},{"Key":"This works,","Fragments":["though"]},{"Key":"works, though","Fragments":["I"]},{"Key":"may revisit","Fragments":["to"]},{"Key":"revisit to","Fragments":["remove"]},{"Key":"two letter","Fragments":["mappings","Roman"]},{"Key":"letter mappings","Fragments":["so"]},{"Key":"mappings so","Fragments":["that"]},{"Key":"code reflects","Fragments":["the"]},{"Key":"reflects the","Fragments":["subtraction"]},{"Key":"the subtraction","Fragments":["rule"]},{"Key":"subtraction rule","Fragments":["of"]},{"Key":"of Roman","Fragments":["numerals."]},{"Key":"important. Whether","Fragments":["something"]},{"Key":"Whether something","Fragments":["is"]},{"Key":"constant or","Fragments":["not"]},{"Key":"not is","Fragments":["an"]},{"Key":"detail to","Fragments":["my"]},{"Key":"thinking -","Fragments":["and"]},{"Key":"knowledge I","Fragments":["want"]},{"Key":"to banish","Fragments":["from"]},{"Key":"banish from","Fragments":["my"]},{"Key":"be concerned","Fragments":["exclusively"]},{"Key":"concerned exclusively","Fragments":["with"]},{"Key":"exclusively with","Fragments":["the"]},{"Key":"the *meaning*","Fragments":["of"]},{"Key":"*meaning* of","Fragments":["the"]},{"Key":"in it,","Fragments":["not"]},{"Key":"it, not","Fragments":["where","by"]},{"Key":"not where","Fragments":["they"]},{"Key":"they come","Fragments":["from"]},{"Key":"come from","Fragments":["or","an"]},{"Key":"from or","Fragments":["how"]},{"Key":"defined or","Fragments":["what"]},{"Key":"or what","Fragments":["language","the"]},{"Key":"what language","Fragments":["features"]},{"Key":"features they","Fragments":["use."]},{"Key":" @leone","Fragments":["I"]},{"Key":"@leone I","Fragments":["do"]},{"Key":"the \"bare","Fragments":["words\""]},{"Key":"\"bare words\"","Fragments":["approach,","fits"]},{"Key":"words\" approach,","Fragments":["and"]},{"Key":"approach, and","Fragments":["I"]},{"Key":"to respect","Fragments":["it"]},{"Key":"respect it","Fragments":["when"]},{"Key":"when coding","Fragments":["ruby."]},{"Key":"coding ruby.","Fragments":["However,"]},{"Key":"ruby. However,","Fragments":["ruby"]},{"Key":"However, ruby","Fragments":["also"]},{"Key":"ruby also","Fragments":["has"]},{"Key":"has state,","Fragments":["and"]},{"Key":"state, and","Fragments":["if"]},{"Key":"is expensive","Fragments":["to"]},{"Key":"expensive to","Fragments":["calculate"]},{"Key":"calculate and","Fragments":["doesn't"]},{"Key":"and doesn't","Fragments":["change,","really"]},{"Key":"doesn't change,","Fragments":["then"]},{"Key":"change, then","Fragments":["you"]},{"Key":"you memoize","Fragments":["it,"]},{"Key":"memoize it,","Fragments":["problem"]},{"Key":"it, problem","Fragments":["solved."]},{"Key":"problem solved.","Fragments":["But"]},{"Key":"solved. But","Fragments":["memoizing"]},{"Key":"But memoizing","Fragments":["is"]},{"Key":"memoizing is","Fragments":["not"]},{"Key":"so natural","Fragments":["in"]},{"Key":"natural in","Fragments":["a"]},{"Key":"language. I'm","Fragments":["not"]},{"Key":"quite so","Fragments":["sure","spaced"]},{"Key":"sure \"bare","Fragments":["words\""]},{"Key":"words\" fits","Fragments":["quite"]},{"Key":"fits quite","Fragments":["as"]},{"Key":"quite as","Fragments":["well","difficult"]},{"Key":"for straightening","Fragments":["me"]},{"Key":"straightening me","Fragments":["out."]},{"Key":"me out.","Fragments":["I"]},{"Key":"was conflating","Fragments":["char"]},{"Key":"conflating char","Fragments":["lists,"]},{"Key":"lists, and","Fragments":["lists"]},{"Key":"and lists","Fragments":["in"]},{"Key":"general that","Fragments":["have","`\\s\\:\\_`"]},{"Key":" @kelli","Fragments":["I'm"]},{"Key":"@kelli I'm","Fragments":["not"]},{"Key":"if memoization","Fragments":["and"]},{"Key":"memoization and","Fragments":["barewords"]},{"Key":"and barewords","Fragments":["are"]},{"Key":"barewords are","Fragments":["quite"]},{"Key":"are quite","Fragments":["that","an"]},{"Key":"quite that","Fragments":["related,"]},{"Key":"that related,","Fragments":["are"]},{"Key":"related, are","Fragments":["they?"]},{"Key":"are they?","Fragments":["They"]},{"Key":"they? They","Fragments":["feel"]},{"Key":"They feel","Fragments":["like"]},{"Key":"like different","Fragments":["things"]},{"Key":"different things","Fragments":["to","that","in"]},{"Key":"me at","Fragments":["least","all."]},{"Key":"But memoization","Fragments":["is"]},{"Key":"still used","Fragments":["in"]},{"Key":"functional languages!","Fragments":["Only"]},{"Key":"languages! Only","Fragments":["in"]},{"Key":"Only in","Fragments":["a"]},{"Key":"different sense","Fragments":["to"]},{"Key":"is commonly","Fragments":["understood","done"]},{"Key":"commonly understood","Fragments":["in"]},{"Key":"understood in","Fragments":["Ruby."]},{"Key":"Ruby. Here's","Fragments":["a"]},{"Key":"bit on","Fragments":["the"]},{"Key":"Haskell wiki","Fragments":["about"]},{"Key":"wiki about","Fragments":["memoization:"]},{"Key":"about memoization:","Fragments":["http://www.haskell.org/haskellwiki/Memoization."]},{"Key":"Now the","Fragments":["two"]},{"Key":"letter Roman","Fragments":["values"]},{"Key":"Roman values","Fragments":["are"]},{"Key":"values are","Fragments":["represented"]},{"Key":"are represented","Fragments":["in"]},{"Key":"represented in","Fragments":["code"]},{"Key":"code instead","Fragments":["of"]},{"Key":"of initialization","Fragments":["data."]},{"Key":"initialization data.","Fragments":["I"]},{"Key":"data. I","Fragments":["just"]},{"Key":"just did","Fragments":["it"]},{"Key":"own interest.","Fragments":["In"]},{"Key":"interest. In","Fragments":["a"]},{"Key":"a practical","Fragments":["sense"]},{"Key":"practical sense","Fragments":["it's"]},{"Key":"sense it's","Fragments":["no"]},{"Key":"no better","Fragments":["than"]},{"Key":"the prior","Fragments":["version."]},{"Key":"a shifty","Fragments":["solution,"]},{"Key":"shifty solution,","Fragments":["but"]},{"Key":"code feels","Fragments":["quite"]},{"Key":"feels quite","Fragments":["straightforward,"]},{"Key":"quite straightforward,","Fragments":["but"]},{"Key":"many steps","Fragments":["it"]},{"Key":"steps it","Fragments":["takes."]},{"Key":" Straight","Fragments":["forward,"]},{"Key":"Straight forward,","Fragments":["once"]},{"Key":"forward, once","Fragments":["I"]},{"Key":"of pairs","Fragments":["basically,","(`{key,"]},{"Key":"pairs basically,","Fragments":["I"]},{"Key":"basically, I","Fragments":["was"]},{"Key":"using reduce","Fragments":["at","so","is"]},{"Key":"reduce at","Fragments":["first"]},{"Key":"first but","Fragments":["Enum.count/2"]},{"Key":"but Enum.count/2","Fragments":["fits"]},{"Key":"Enum.count/2 fits","Fragments":["more"]},{"Key":"fits more","Fragments":["naturally."]},{"Key":"use List.zip","Fragments":["you"]},{"Key":"List.zip you","Fragments":["can"]},{"Key":"avoid that","Fragments":["extra","construct"]},{"Key":"extra check","Fragments":["that"]},{"Key":"that nb","Fragments":["is"]},{"Key":"nb is","Fragments":["not"]},{"Key":"not nil","Fragments":["on"]},{"Key":"nil on","Fragments":["line"]},{"Key":"line 7","Fragments":["because"]},{"Key":"7 because","Fragments":["it"]},{"Key":"made pair_up","Fragments":["and"]},{"Key":"pair_up and","Fragments":["count_mismatches"]},{"Key":"and count_mismatches","Fragments":["as"]},{"Key":"count_mismatches as","Fragments":["separate"]},{"Key":"the usefulness","Fragments":["of"]},{"Key":"usefulness of","Fragments":["applying"]},{"Key":"applying a","Fragments":["name"]},{"Key":"Well, I","Fragments":["got","still","submitted"]},{"Key":"got rid","Fragments":["of"]},{"Key":"the reverse.","Fragments":["And"]},{"Key":"reverse. And","Fragments":["I"]},{"Key":"Yup. List","Fragments":["append"]},{"Key":"List append","Fragments":["is"]},{"Key":"is notoriously","Fragments":["inefficient."]},{"Key":" @andy","Fragments":["There's"]},{"Key":"@andy There's","Fragments":["a"]},{"Key":"trick from","Fragments":["Erlang","the"]},{"Key":"Erlang you","Fragments":["can"]},{"Key":"can use.","Fragments":["You"]},{"Key":"use. You","Fragments":["can"]},{"Key":"and binaries","Fragments":["and","that"]},{"Key":"and character","Fragments":["integrals"]},{"Key":"character integrals","Fragments":["(`?A`)","as"]},{"Key":"integrals (`?A`)","Fragments":["to"]},{"Key":"(`?A`) to","Fragments":["`iolist_to_binary`"]},{"Key":"to `iolist_to_binary`","Fragments":["and"]},{"Key":"`iolist_to_binary` and","Fragments":["it"]},{"Key":"will efficiently","Fragments":["concatenate"]},{"Key":"efficiently concatenate","Fragments":["it"]},{"Key":"concatenate it","Fragments":["into"]},{"Key":"single binary.","Fragments":["Just"]},{"Key":"binary. Just","Fragments":["be"]},{"Key":"Just be","Fragments":["careful","aware"]},{"Key":"be careful","Fragments":["with"]},{"Key":"careful with","Fragments":["character"]},{"Key":"integrals as","Fragments":["the"]},{"Key":"not unicode-aware","Fragments":["(it"]},{"Key":"unicode-aware (it","Fragments":["works"]},{"Key":"(it works","Fragments":["fine"]},{"Key":"with UTF-8","Fragments":["encoded"]},{"Key":"encoded binaries,","Fragments":["just"]},{"Key":"binaries, just","Fragments":["don't"]},{"Key":"don't pass","Fragments":["characters"]},{"Key":"pass characters","Fragments":["\u003e127"]},{"Key":"characters \u003e127","Fragments":["to"]},{"Key":"\u003e127 to","Fragments":["it)."]},{"Key":"example `iolist_to_binary([[\"A\",","Fragments":["?B],"]},{"Key":"`iolist_to_binary([[\"A\", ?B],","Fragments":["\"C\","]},{"Key":"?B], \"C\",","Fragments":["[[[\"D\"]]]])`"]},{"Key":"\"C\", [[[\"D\"]]]])`","Fragments":["=="]},{"Key":"[[[\"D\"]]]])` ==","Fragments":["`\"ABCD\"`."]},{"Key":" `\u0026([student|\u00261])`","Fragments":["can"]},{"Key":"`\u0026([student|\u00261])` can","Fragments":["be"]},{"Key":"as `\u0026[student|\u00261]`,","Fragments":["the"]},{"Key":"`\u0026[student|\u00261]`, the","Fragments":["parentheses"]},{"Key":"parentheses are","Fragments":["not","only"]},{"Key":"guide where","Fragments":["the"]},{"Key":"`\u0026` attaches","Fragments":["to."]},{"Key":"Oh nice,","Fragments":["did"]},{"Key":"nice, did","Fragments":["not"]},{"Key":"using List","Fragments":["would"]},{"Key":"List would","Fragments":["not"]},{"Key":"not pad,","Fragments":["I"]},{"Key":"pad, I","Fragments":["was"]},{"Key":"pretty surprised","Fragments":["by"]},{"Key":"surprised by","Fragments":["the","that"]},{"Key":"test failure","Fragments":["and"]},{"Key":"failure and","Fragments":["discovering"]},{"Key":"and discovering","Fragments":["the"]},{"Key":"discovering the","Fragments":["length"]},{"Key":"length mismatch","Fragments":["issue."]},{"Key":"mismatch issue.","Fragments":["Thanks"]},{"Key":"issue. Thanks","Fragments":["for"]},{"Key":" @candido","Fragments":["thanks"]},{"Key":"@candido thanks","Fragments":["a"]},{"Key":"lot, got","Fragments":["it!"]},{"Key":"got it!","Fragments":["What"]},{"Key":"it! What","Fragments":["would"]},{"Key":"do if","Fragments":["I","you"]},{"Key":"had non-ascii","Fragments":["characters?"]},{"Key":"Just encode","Fragments":["them"]},{"Key":"encode them","Fragments":["as"]},{"Key":"strings, not","Fragments":["as"]},{"Key":"as character","Fragments":["ordinals."]},{"Key":"character ordinals.","Fragments":["`\"é\"`"]},{"Key":"ordinals. `\"é\"`","Fragments":["works"]},{"Key":"`\"é\"` works","Fragments":["fine,"]},{"Key":"works fine,","Fragments":["`?é`"]},{"Key":"fine, `?é`","Fragments":["doesn't."]},{"Key":" @roxane","Fragments":["regarding"]},{"Key":"@roxane regarding","Fragments":["the"]},{"Key":"regarding the","Fragments":["guard","word"]},{"Key":"clauses, sorry,","Fragments":["I"]},{"Key":"being vague,","Fragments":["and"]},{"Key":"vague, and","Fragments":["I"]},{"Key":"actually meant","Fragments":["the"]},{"Key":"meant the","Fragments":["combination"]},{"Key":"reduce explicit","Fragments":["conditional"]},{"Key":"explicit conditional","Fragments":["code."]},{"Key":"conditional code.","Fragments":["2"]},{"Key":"code. 2","Fragments":["examples"]},{"Key":"defp bottleize(0),","Fragments":["do:"]},{"Key":"bottleize(0), do:","Fragments":["\"no"]},{"Key":" which","Fragments":["is","is"]},{"Key":"defp line2(n)","Fragments":["when","do"]},{"Key":"line2(n) when","Fragments":["n"]},{"Key":"guard clause.","Fragments":["But","I","The"]},{"Key":"clause. But","Fragments":["it"]},{"Key":"matching if","Fragments":["you"]},{"Key":"you reverse","Fragments":["the"]},{"Key":"What's up","Fragments":["with"]},{"Key":"with :math.pow?","Fragments":["That"]},{"Key":":math.pow? That","Fragments":["is"]},{"Key":"Well, here's","Fragments":["a"]},{"Key":"here's a","Fragments":["Bitwise"]},{"Key":"a Bitwise","Fragments":["solution."]},{"Key":"Bitwise solution.","Fragments":["It"]},{"Key":"solution. It","Fragments":["still"]},{"Key":"It still","Fragments":["uses"]},{"Key":"still uses","Fragments":["the"]},{"Key":"the zip","Fragments":["stage."]},{"Key":"zip stage.","Fragments":["Am"]},{"Key":"stage. Am","Fragments":["I"]},{"Key":"still missing","Fragments":["a"]},{"Key":"missing a","Fragments":["way","`@brown`"]},{"Key":"Ok, so","Fragments":["I","what"]},{"Key":"mean like","Fragments":["my"]},{"Key":"suspect it's","Fragments":["because","due"]},{"Key":"float and","Fragments":["that"]},{"Key":"has only","Fragments":["limited","check"]},{"Key":" @elza","Fragments":["Even"]},{"Key":"@elza Even","Fragments":["the"]},{"Key":"Even the","Fragments":["if"]},{"Key":"if makes","Fragments":["me"]},{"Key":"me feel","Fragments":["dirty"]},{"Key":"feel dirty","Fragments":["though."]},{"Key":"dirty though.","Fragments":["Do"]},{"Key":"though. Do","Fragments":["you"]},{"Key":"any plans","Fragments":["to"]},{"Key":"plans to","Fragments":["expand"]},{"Key":"to expand","Fragments":["the"]},{"Key":"expand the","Fragments":["set"]},{"Key":"expressions allowed","Fragments":["to"]},{"Key":"in function-level","Fragments":["guards"]},{"Key":"function-level guards","Fragments":["in"]},{"Key":"in Elixir?","Fragments":["(I","Something"]},{"Key":"Elixir? (I","Fragments":["have"]},{"Key":"(I have","Fragments":["no"]},{"Key":"how difficult","Fragments":["that"]},{"Key":"difficult that","Fragments":["would"]},{"Key":"to implement.)","Fragments":["It'd"]},{"Key":"implement.) It'd","Fragments":["be"]},{"Key":"be sweet","Fragments":["to"]},{"Key":"sweet to","Fragments":["move"]},{"Key":"Regex test","Fragments":["upward."]},{"Key":"something we","Fragments":["can"]},{"Key":"we can","Fragments":["decide","create","assume","start"]},{"Key":"can decide","Fragments":["in"]},{"Key":"decide in","Fragments":["Elixir."]},{"Key":"a restriction","Fragments":["in"]},{"Key":"restriction in","Fragments":["the"]},{"Key":"VM. I","Fragments":["believe"]},{"Key":"the reason","Fragments":["is","for","for","I'm","of","I","it","why"]},{"Key":"reason is","Fragments":["that","that"]},{"Key":"makes matching","Fragments":["more"]},{"Key":"matching more","Fragments":["efficient."]},{"Key":" Simple","Fragments":["approach:"]},{"Key":"Simple approach:","Fragments":["filter"]},{"Key":"approach: filter","Fragments":["all"]},{"Key":"filter all","Fragments":["non-factors"]},{"Key":"all non-factors","Fragments":["and"]},{"Key":"non-factors and","Fragments":["sum"]},{"Key":"and sum","Fragments":["up","them"]},{"Key":"Does this","Fragments":["pass","pass","pass"]},{"Key":"the tests?","Fragments":["I'm","This","I'm","It"]},{"Key":"tests? I'm","Fragments":["pretty","particularly"]},{"Key":"for `sing`","Fragments":["expect"]},{"Key":"`sing` expect","Fragments":["a"]},{"Key":"expect a","Fragments":["string"]},{"Key":"be returned,","Fragments":["not"]},{"Key":"returned, not","Fragments":["a"]},{"Key":"list (you're","Fragments":["missing"]},{"Key":"(you're missing","Fragments":["the"]},{"Key":"missing the","Fragments":["`|\u003e","Unicode"]},{"Key":" Stop","Fragments":["making"]},{"Key":"Stop making","Fragments":["such"]},{"Key":"making such","Fragments":["good"]},{"Key":"such good","Fragments":["submissions,","function"]},{"Key":"good submissions,","Fragments":["it"]},{"Key":"submissions, it","Fragments":["makes"]},{"Key":"hard for","Fragments":["me","me","me"]},{"Key":"to race","Fragments":["ahead"]},{"Key":"race ahead","Fragments":["of"]},{"Key":"of you.","Fragments":[";)"]},{"Key":" Rather","Fragments":["than","than"]},{"Key":"typical algorithm","Fragments":["to"]},{"Key":"algorithm to","Fragments":["go"]},{"Key":"go from","Fragments":["small","large"]},{"Key":"from small","Fragments":["numbers"]},{"Key":"small numbers","Fragments":["to"]},{"Key":"numbers to","Fragments":["large,"]},{"Key":"to large,","Fragments":["I"]},{"Key":"large, I","Fragments":["go"]},{"Key":"from large","Fragments":["to"]},{"Key":"large to","Fragments":["small."]},{"Key":"to small.","Fragments":["However,"]},{"Key":"small. However,","Fragments":["that"]},{"Key":"However, that","Fragments":["has"]},{"Key":"extra twist","Fragments":["that"]},{"Key":"twist that","Fragments":["a"]},{"Key":"a factor","Fragments":["found"]},{"Key":"factor found","Fragments":["may"]},{"Key":"found may","Fragments":["not"]},{"Key":"be prime","Fragments":["and"]},{"Key":"prime and","Fragments":["may"]},{"Key":"may need","Fragments":["to"]},{"Key":"be further","Fragments":["factored"]},{"Key":"further factored","Fragments":["itself."]},{"Key":"what exactly","Fragments":["is","right","to"]},{"Key":"exactly is","Fragments":["Ruby-style"]},{"Key":"is Ruby-style","Fragments":["here."]},{"Key":"Not matching","Fragments":["all"]},{"Key":"matching all","Fragments":["possible"]},{"Key":"all possible","Fragments":["values"]},{"Key":"possible values","Fragments":["isn't","to"]},{"Key":"values isn't","Fragments":["a"]},{"Key":"problem here,","Fragments":["you'll"]},{"Key":"here, you'll","Fragments":["just"]},{"Key":"you'll just","Fragments":["get"]},{"Key":"just get","Fragments":["a","rid","a"]},{"Key":"a crash","Fragments":["of"]},{"Key":"crash of","Fragments":["the"]},{"Key":"process if","Fragments":["the"]},{"Key":"input doesn't","Fragments":["match"]},{"Key":"doesn't match","Fragments":["the"]},{"Key":"precondition of","Fragments":["the"]},{"Key":"function (`x`","Fragments":["must"]},{"Key":"(`x` must","Fragments":["be"]},{"Key":"be non-negative).","Fragments":["This"]},{"Key":"non-negative). This","Fragments":["is"]},{"Key":"not user-facing","Fragments":["code"]},{"Key":"user-facing code","Fragments":["so"]},{"Key":"code so","Fragments":["any","one","much","that","it's"]},{"Key":"so any","Fragments":["violation"]},{"Key":"any violation","Fragments":["of"]},{"Key":"violation of","Fragments":["the"]},{"Key":"precondition is","Fragments":["due"]},{"Key":"a bug.","Fragments":["Crashing"]},{"Key":"bug. Crashing","Fragments":["upon"]},{"Key":"Crashing upon","Fragments":["a"]},{"Key":"upon a","Fragments":["bug"]},{"Key":"bug is","Fragments":["fair"]},{"Key":"is fair","Fragments":["behavior,"]},{"Key":"fair behavior,","Fragments":["there's"]},{"Key":"behavior, there's","Fragments":["not"]},{"Key":"much else","Fragments":["you"]},{"Key":"else you","Fragments":["can","know"]},{"Key":"Oops, sorry","Fragments":["I"]},{"Key":"forgot that","Fragments":["part."]},{"Key":"part. It","Fragments":["doesn't"]},{"Key":"doesn't pass","Fragments":["test","one"]},{"Key":"pass test","Fragments":["of"]},{"Key":"test of","Fragments":["course."]},{"Key":"Ok, long","Fragments":["list"]},{"Key":"long list","Fragments":["of","of"]},{"Key":"of nits","Fragments":["here.","as"]},{"Key":"nits here.","Fragments":["That's"]},{"Key":"That's not","Fragments":["unusual","exactly","a","an"]},{"Key":"not unusual","Fragments":["for"]},{"Key":"unusual for","Fragments":["this"]},{"Key":"general `HashDict`","Fragments":["functions,"]},{"Key":"`HashDict` functions,","Fragments":["aside"]},{"Key":"functions, aside","Fragments":["from"]},{"Key":"aside from","Fragments":["`new`","one","one"]},{"Key":"from `new`","Fragments":["aren't"]},{"Key":"`new` aren't","Fragments":["intended"]},{"Key":"aren't intended","Fragments":["to"]},{"Key":"intended to","Fragments":["be","make","get","go","return"]},{"Key":"used directly.","Fragments":["You're"]},{"Key":"directly. You're","Fragments":["supposed"]},{"Key":"You're supposed","Fragments":["to"]},{"Key":"`Dict` works","Fragments":["with","for"]},{"Key":"of dictionaries,","Fragments":["`HashDict`","using","which"]},{"Key":"dictionaries, `HashDict`","Fragments":["is"]},{"Key":"specific implementation","Fragments":["of"]},{"Key":"it simplifies","Fragments":["`Dict.get`"]},{"Key":"simplifies `Dict.get`","Fragments":["and"]},{"Key":" `do_count`","Fragments":["fails"]},{"Key":"`do_count` fails","Fragments":["if"]},{"Key":"empty list","Fragments":["is","and","is","and","is","cases","is"]},{"Key":"of `Enum.any?`","Fragments":["is"]},{"Key":"`Enum.any?` is","Fragments":["interesting,"]},{"Key":"are considered","Fragments":["to","to"]},{"Key":"be trueish","Fragments":["values."]},{"Key":"trueish values.","Fragments":["If"]},{"Key":"values. If","Fragments":["you","you"]},{"Key":"do `Enum.any?([false])`","Fragments":["you'd"]},{"Key":"`Enum.any?([false])` you'd","Fragments":["get"]},{"Key":"you'd get","Fragments":["false."]},{"Key":"get false.","Fragments":["To"]},{"Key":"false. To","Fragments":["check"]},{"Key":"To check","Fragments":["if"]},{"Key":"collection is","Fragments":["empty"]},{"Key":"empty use","Fragments":["`Enum.empty?`."]},{"Key":"better not","Fragments":["to"]},{"Key":"do explicit","Fragments":["recursion"]},{"Key":"recursion (`do_count`)","Fragments":["if"]},{"Key":"(`do_count`) if","Fragments":["you"]},{"Key":"order function","Fragments":["like","passed"]},{"Key":"like `Enum.map`.","Fragments":["In"]},{"Key":"`Enum.map`. In","Fragments":["this"]},{"Key":"underlying pattern","Fragments":["is"]},{"Key":"pattern is","Fragments":["reducing"]},{"Key":"is reducing","Fragments":["a"]},{"Key":"reducing a","Fragments":["list"]},{"Key":"single value,","Fragments":["which"]},{"Key":"Your `filter_valid`","Fragments":["has"]},{"Key":"`filter_valid` has","Fragments":["problems"]},{"Key":"has problems","Fragments":["with"]},{"Key":"problems with","Fragments":["hypens","spacing"]},{"Key":"with hypens","Fragments":["and"]},{"Key":"hypens and","Fragments":["unicode."]},{"Key":"and unicode.","Fragments":["Is"]},{"Key":"unicode. Is","Fragments":["`coöperative`"]},{"Key":"Is `coöperative`","Fragments":["a"]},{"Key":"`coöperative` a","Fragments":["single"]},{"Key":"single word?","Fragments":["Is"]},{"Key":"word? Is","Fragments":["`co-operative`"]},{"Key":"Is `co-operative`","Fragments":["a"]},{"Key":"`co-operative` a","Fragments":["single"]},{"Key":" @johnson,","Fragments":["@johnson"]},{"Key":"@johnson, @johnson","Fragments":["thanks,"]},{"Key":"@johnson thanks,","Fragments":["that"]},{"Key":"Ok so,","Fragments":["I"]},{"Key":"so, I","Fragments":["imposed","was"]},{"Key":"I imposed","Fragments":["on"]},{"Key":"imposed on","Fragments":["myself"]},{"Key":"on myself","Fragments":["not"]},{"Key":"myself not","Fragments":["to"]},{"Key":"number which","Fragments":["could"]},{"Key":"have doubled","Fragments":["as"]},{"Key":"doubled as","Fragments":["a"]},{"Key":"validation check.","Fragments":["That"]},{"Key":"check. That","Fragments":["explains"]},{"Key":"That explains","Fragments":["the"]},{"Key":"explains the","Fragments":["lengthy","difference"]},{"Key":"the lengthy","Fragments":["implementation"]},{"Key":"lengthy implementation","Fragments":["I"]},{"Key":"I came","Fragments":["up","up"]},{"Key":"came up","Fragments":["with.","with","with!"]},{"Key":"The inter-dependency","Fragments":["really"]},{"Key":"inter-dependency really","Fragments":["bothered"]},{"Key":"really bothered","Fragments":["me"]},{"Key":"bothered me","Fragments":["first"]},{"Key":"me first","Fragments":["I","start"]},{"Key":"used `PhoneValidation`","Fragments":["and"]},{"Key":"`PhoneValidation` and","Fragments":["`PhoneParser`"]},{"Key":"and `PhoneParser`","Fragments":["explicitly,"]},{"Key":"`PhoneParser` explicitly,","Fragments":["then"]},{"Key":"explicitly, then","Fragments":["I"]},{"Key":"import them","Fragments":["which"]},{"Key":"them which","Fragments":["created"]},{"Key":"which created","Fragments":["fuzziness"]},{"Key":"created fuzziness","Fragments":["as"]},{"Key":"fuzziness as","Fragments":["to"]},{"Key":"what came","Fragments":["from"]},{"Key":"came from","Fragments":["where,","wondering","the"]},{"Key":"from where,","Fragments":["didn't"]},{"Key":"where, didn't","Fragments":["really"]},{"Key":"didn't really","Fragments":["like","seem","make","feel","come","like"]},{"Key":"finally I","Fragments":["went"]},{"Key":"went the","Fragments":["route"]},{"Key":"the route","Fragments":["I"]},{"Key":"route I","Fragments":["usually"]},{"Key":"usually use","Fragments":["and"]},{"Key":"use and","Fragments":["passed"]},{"Key":"and passed","Fragments":["them"]},{"Key":"passed them","Fragments":["in"]},{"Key":"as optional","Fragments":["params."]},{"Key":"slice with","Fragments":["hardcoded"]},{"Key":"with hardcoded","Fragments":["range"]},{"Key":"hardcoded range","Fragments":["but"]},{"Key":"range but","Fragments":["I"]},{"Key":"feel this","Fragments":["is","is"]},{"Key":"is safe","Fragments":["as"]},{"Key":"safe as","Fragments":["PhoneValidation"]},{"Key":"as PhoneValidation","Fragments":["will"]},{"Key":"PhoneValidation will","Fragments":["still"]},{"Key":"still return","Fragments":["a"]},{"Key":"a 10","Fragments":["digits"]},{"Key":"10 digits","Fragments":["list","we're"]},{"Key":"digits list","Fragments":["in"]},{"Key":"the event","Fragments":["that"]},{"Key":"event that","Fragments":["the"]},{"Key":"isn't valid.","Fragments":["But"]},{"Key":"valid. But","Fragments":["if","it"]},{"Key":"we ever","Fragments":["want"]},{"Key":"ever want","Fragments":["to"]},{"Key":"support european","Fragments":["phone"]},{"Key":"european phone","Fragments":["numbers"]},{"Key":"phone numbers","Fragments":["we"]},{"Key":"numbers we","Fragments":["are"]},{"Key":"in trouble","Fragments":["everywhere."]},{"Key":" Thoughts","Fragments":["about"]},{"Key":"Thoughts about","Fragments":["this"]},{"Key":"the `iolist_to_binary`","Fragments":["inside"]},{"Key":"`iolist_to_binary` inside","Fragments":["`Enum.reduce`."]},{"Key":"inside `Enum.reduce`.","Fragments":["It"]},{"Key":"`Enum.reduce`. It","Fragments":["works"]},{"Key":"works very","Fragments":["recursively"]},{"Key":"very recursively","Fragments":["so"]},{"Key":"recursively so","Fragments":["you"]},{"Key":"def sing(start,","Fragments":["stop"]},{"Key":"sing(start, stop","Fragments":["//"]},{"Key":"stop //","Fragments":["0)"]},{"Key":" Enum.reduce(stop..start,","Fragments":["\"\","]},{"Key":"Enum.reduce(stop..start, \"\",","Fragments":["fn(x,"]},{"Key":"\"\", fn(x,","Fragments":["song)"]},{"Key":"fn(x, song)","Fragments":["-\u003e"]},{"Key":" [verse(x),","Fragments":["\"\\n\","]},{"Key":"[verse(x), \"\\n\",","Fragments":["song]"]},{"Key":" end)","Fragments":["|\u003e"]},{"Key":" @lukas","Fragments":["cool!"]},{"Key":"@lukas cool!","Fragments":["That"]},{"Key":"cool! That","Fragments":["looks"]},{"Key":"much Ruby-style","Fragments":["to"]},{"Key":"Ruby-style to","Fragments":["me."]},{"Key":"me. Or","Fragments":["is"]},{"Key":"Or is","Fragments":["there"]},{"Key":"similar syntax","Fragments":["in"]},{"Key":"it ok,","Fragments":["that"]},{"Key":"ok, that","Fragments":["I"]},{"Key":"don't match","Fragments":["negative"]},{"Key":"match negative","Fragments":["values"]},{"Key":"negative values","Fragments":["in"]},{"Key":"in `line2`","Fragments":["function?"]},{"Key":"Using `end","Fragments":["|\u003e"]},{"Key":"`end |\u003e","Fragments":["function`"]},{"Key":"|\u003e function`","Fragments":["reminded"]},{"Key":"function` reminded","Fragments":["me"]},{"Key":"using `end.method`","Fragments":["in"]},{"Key":"`end.method` in","Fragments":["Ruby."]},{"Key":"is superficially","Fragments":["similar"]},{"Key":"superficially similar","Fragments":["yet."]},{"Key":"similar yet.","Fragments":["I"]},{"Key":"more as","Fragments":["a","implementation","\"you"]},{"Key":"Btw, if","Fragments":["you"]},{"Key":"exercism cli","Fragments":["you'll"]},{"Key":"cli you'll","Fragments":["get"]},{"Key":"you'll get","Fragments":["a"]},{"Key":"a stub","Fragments":["submission"]},{"Key":"stub submission","Fragments":["already"]},{"Key":"submission already","Fragments":["made"]},{"Key":"already made","Fragments":["for"]},{"Key":"made for","Fragments":["you,","a"]},{"Key":"you, makes","Fragments":["the"]},{"Key":"exercises slightly","Fragments":["easier"]},{"Key":"slightly easier","Fragments":["to"]},{"Key":"get started","Fragments":["with.","with"]},{"Key":"the helpers","Fragments":["`do_foo`"]},{"Key":"helpers `do_foo`","Fragments":["instead"]},{"Key":"`do_foo` instead","Fragments":["of"]},{"Key":"of `_foo`.","Fragments":["And"]},{"Key":"`_foo`. And","Fragments":["I'd"]},{"Key":"And I'd","Fragments":["put"]},{"Key":"the `@brady`","Fragments":["before"]},{"Key":"`@brady` before","Fragments":["all"]},{"Key":"the `_for`","Fragments":["clauses"]},{"Key":"`_for` clauses","Fragments":["(stops"]},{"Key":"clauses (stops","Fragments":["it"]},{"Key":"(stops it","Fragments":["from"]},{"Key":"from breaking","Fragments":["those"]},{"Key":"breaking those","Fragments":["up)."]},{"Key":"writing that","Fragments":["`Stream.unfold`"]},{"Key":"that `Stream.unfold`","Fragments":["you"]},{"Key":"`Stream.unfold` you","Fragments":["can"]},{"Key":"a decreasing","Fragments":["range:"]},{"Key":"decreasing range:","Fragments":["`Enum.to_list(4..2)`"]},{"Key":"range: `Enum.to_list(4..2)`","Fragments":["=="]},{"Key":"`Enum.to_list(4..2)` ==","Fragments":["`[4,3,2]`."]},{"Key":"of higher","Fragments":["level","order"]},{"Key":"level functions","Fragments":["though."]},{"Key":" Congratulations","Fragments":["on"]},{"Key":"Congratulations on","Fragments":["finding"]},{"Key":"a solution.","Fragments":["I",":^)"]},{"Key":"the increasing","Fragments":["numbers"]},{"Key":"increasing numbers","Fragments":["myself"]},{"Key":"numbers myself","Fragments":["but"]},{"Key":"myself but","Fragments":["despite"]},{"Key":"but despite","Fragments":["turning"]},{"Key":"despite turning","Fragments":["code"]},{"Key":"turning code","Fragments":["optimization"]},{"Key":"code optimization","Fragments":["on"]},{"Key":"optimization on","Fragments":["that"]},{"Key":"that turned","Fragments":["out"]},{"Key":"too slow","Fragments":["for","when"]},{"Key":"slow for","Fragments":["my"]},{"Key":"my taste,","Fragments":["so"]},{"Key":"taste, so","Fragments":["I"]},{"Key":"I skipped","Fragments":["ahead"]},{"Key":"skipped ahead","Fragments":["(otherwise"]},{"Key":"ahead (otherwise","Fragments":["there'd"]},{"Key":"(otherwise there'd","Fragments":["be"]},{"Key":"there'd be","Fragments":["no-one"]},{"Key":"be no-one","Fragments":["around"]},{"Key":"no-one around","Fragments":["to"]},{"Key":"provide nits).","Fragments":["This"]},{"Key":"nits). This","Fragments":["solution"]},{"Key":"This solution","Fragments":["is","does"]},{"Key":"quite elegant,","Fragments":["avoiding"]},{"Key":"elegant, avoiding","Fragments":["the"]},{"Key":"avoiding the","Fragments":["insane"]},{"Key":"the insane","Fragments":["amount"]},{"Key":"insane amount","Fragments":["of"]},{"Key":"of comparisons","Fragments":["that"]},{"Key":"comparisons that","Fragments":["my"]},{"Key":"my approach","Fragments":["had."]},{"Key":"Thanks. I'm","Fragments":["glad"]},{"Key":"I'm glad","Fragments":["you","to","you"]},{"Key":"glad you","Fragments":["like","like","found"]},{"Key":"it. Don't","Fragments":["let"]},{"Key":"Don't let","Fragments":["the"]},{"Key":"the elegance","Fragments":["fool"]},{"Key":"elegance fool","Fragments":["you"]},{"Key":"fool you","Fragments":["--"]},{"Key":"you --","Fragments":["It"]},{"Key":"-- It","Fragments":["took"]},{"Key":"took more","Fragments":["time"]},{"Key":"it right","Fragments":["than","on","now"]},{"Key":"right than","Fragments":["I"]},{"Key":"be lazy","Fragments":["with"]},{"Key":"lazy with","Fragments":["Stream.unfold","it's"]},{"Key":"with Stream.unfold","Fragments":["(I"]},{"Key":"Stream.unfold (I","Fragments":["had"]},{"Key":"range first).","Fragments":["I"]},{"Key":"first). I","Fragments":["thought"]},{"Key":"thought passing","Fragments":["a"]},{"Key":"range to","Fragments":["an","an"]},{"Key":"an Enum","Fragments":["method"]},{"Key":"Enum method","Fragments":["caused"]},{"Key":"method caused","Fragments":["it"]},{"Key":"caused it","Fragments":["to"]},{"Key":"to instantiate","Fragments":["the"]},{"Key":"instantiate the","Fragments":["whole"]},{"Key":"whole thing.","Fragments":["My"]},{"Key":"thing. My","Fragments":["other"]},{"Key":"My other","Fragments":["concern"]},{"Key":"other concern","Fragments":["is"]},{"Key":"concern is","Fragments":["that"]},{"Key":"exactly tail","Fragments":["recursive."]},{"Key":"So, are","Fragments":["you"]},{"Key":"leading edge","Fragments":["of"]},{"Key":"edge of","Fragments":["the"]},{"Key":"Elixir solutions?","Fragments":["I"]},{"Key":"solutions? I","Fragments":["thought"]},{"Key":"thought somebody","Fragments":["would"]},{"Key":"somebody would","Fragments":["have"]},{"Key":"have solved","Fragments":["them"]},{"Key":"solved them","Fragments":["all"]},{"Key":"all by","Fragments":["now."]},{"Key":"by now.","Fragments":["I'm"]},{"Key":"now. I'm","Fragments":["not"]},{"Key":"not even","Fragments":["sure"]},{"Key":"even sure","Fragments":["how","what"]},{"Key":"many there","Fragments":["are,"]},{"Key":"there are,","Fragments":["but"]},{"Key":"are, but","Fragments":["it's"]},{"Key":"it's already","Fragments":["been"]},{"Key":"already been","Fragments":["more","implemented","added"]},{"Key":"been more","Fragments":["than","idiomatic.)"]},{"Key":"you chose","Fragments":["not","`HashDict.merge/3`","to"]},{"Key":"define `total`","Fragments":["in"]},{"Key":"`total` in","Fragments":["terms"]},{"Key":"Well I","Fragments":["can","can"]},{"Key":"that two","Fragments":["other","of"]},{"Key":"two other","Fragments":["people"]},{"Key":"other people","Fragments":["have","answers"]},{"Key":"people have","Fragments":["completed"]},{"Key":"have completed","Fragments":["the"]},{"Key":"completed the","Fragments":["prime-factors","prime-factors","exercise"]},{"Key":"the prime-factors","Fragments":["exercise","exercise"]},{"Key":"prime-factors exercise","Fragments":["and","three"]},{"Key":"have gone","Fragments":["on","overboard"]},{"Key":"gone on","Fragments":["to"]},{"Key":"to complete","Fragments":["all","this"]},{"Key":"complete all","Fragments":["the"]},{"Key":"elixir exercises","Fragments":["available"]},{"Key":"exercises available","Fragments":["at"]},{"Key":"available at","Fragments":["that"]},{"Key":"that time.","Fragments":["However"]},{"Key":"time. However","Fragments":["both"]},{"Key":"However both","Fragments":["completed"]},{"Key":"both completed","Fragments":["the"]},{"Key":"exercise three","Fragments":["months"]},{"Key":"three months","Fragments":["ago,"]},{"Key":"months ago,","Fragments":["so"]},{"Key":"ago, so","Fragments":["they're"]},{"Key":"they're probably","Fragments":["not"]},{"Key":"not around","Fragments":["to"]},{"Key":"nitpick anymore.","Fragments":["This"]},{"Key":"anymore. This","Fragments":["has"]},{"Key":"has actually","Fragments":["been"]},{"Key":"actually been","Fragments":["a"]},{"Key":"been a","Fragments":["problem","while","weak","long","slow"]},{"Key":"problem for","Fragments":["me","a"]},{"Key":"while longer,","Fragments":["from"]},{"Key":"longer, from","Fragments":["the"]},{"Key":"the people","Fragments":["active","that"]},{"Key":"people active","Fragments":["on"]},{"Key":"active on","Fragments":["the"]},{"Key":"the site","Fragments":["I'm","is","(such","do","emails"]},{"Key":"site I'm","Fragments":["farthest"]},{"Key":"I'm farthest","Fragments":["ahead"]},{"Key":"farthest ahead","Fragments":["in"]},{"Key":"ahead in","Fragments":["the"]},{"Key":"Elixir track.","Fragments":["So","A"]},{"Key":"track. So","Fragments":["my"]},{"Key":"So my","Fragments":["exercise"]},{"Key":"my exercise","Fragments":["routine"]},{"Key":"exercise routine","Fragments":["has"]},{"Key":"routine has","Fragments":["mostly"]},{"Key":"has mostly","Fragments":["been"]},{"Key":"mostly been","Fragments":["to"]},{"Key":"been to","Fragments":["submit","indent"]},{"Key":"submit an","Fragments":["exercise"]},{"Key":"and click","Fragments":["on"]},{"Key":"click on","Fragments":["\"ok,","the"]},{"Key":"on \"ok,","Fragments":["I'm"]},{"Key":"\"ok, I'm","Fragments":["done\"."]},{"Key":" Passing","Fragments":["a"]},{"Key":"Passing a","Fragments":["range"]},{"Key":"an `Enum`","Fragments":["function","function"]},{"Key":"`Enum` function","Fragments":["causes","at"]},{"Key":"function causes","Fragments":["the"]},{"Key":"causes the","Fragments":["reduce"]},{"Key":"reduce operation","Fragments":["of"]},{"Key":"operation of","Fragments":["`Range`"]},{"Key":"of `Range`","Fragments":["to"]},{"Key":"`Range` to","Fragments":["be"]},{"Key":"be invoked.","Fragments":["This"]},{"Key":"invoked. This","Fragments":["is"]},{"Key":"is as","Fragments":["lazy","far","you"]},{"Key":"as lazy","Fragments":["as","as"]},{"Key":"lazy as","Fragments":["`Stream.unfold`.","unfold."]},{"Key":"For details","Fragments":["of"]},{"Key":"whole reduce","Fragments":["system"]},{"Key":"reduce system","Fragments":["works"]},{"Key":"system works","Fragments":["see"]},{"Key":"works see","Fragments":["[my"]},{"Key":"see [my","Fragments":["blog"]},{"Key":"[my blog","Fragments":["post"]},{"Key":"post about","Fragments":["it](http://pminten.github.io/blog/2013/09/05/elixirs-enumerable/)."]},{"Key":"Well, let","Fragments":["me"]},{"Key":"me thank","Fragments":["you"]},{"Key":"time invested","Fragments":["in"]},{"Key":"invested in","Fragments":["nitpicking"]},{"Key":"in nitpicking","Fragments":["other"]},{"Key":"nitpicking other","Fragments":["submissions."]},{"Key":"other submissions.","Fragments":["I'm"]},{"Key":"submissions. I'm","Fragments":["trying"]},{"Key":"follow in","Fragments":["your"]},{"Key":"your footsteps","Fragments":["and"]},{"Key":"footsteps and","Fragments":["stay"]},{"Key":"and stay","Fragments":["generally","in"]},{"Key":"stay generally","Fragments":["available"]},{"Key":"generally available","Fragments":["to"]},{"Key":"available to","Fragments":["do","me,"]},{"Key":"actually did","Fragments":["look"]},{"Key":"did look","Fragments":["over","at"]},{"Key":"look over","Fragments":["that"]},{"Key":"over that","Fragments":["blog","one."]},{"Key":"that blog","Fragments":["post"]},{"Key":"post of","Fragments":["yours."]},{"Key":"of yours.","Fragments":["I"]},{"Key":"yours. I","Fragments":["need"]},{"Key":"to re-read","Fragments":["in"]},{"Key":"re-read in","Fragments":["order"]},{"Key":"to gain","Fragments":["a"]},{"Key":"gain a","Fragments":["deeper"]},{"Key":"a deeper","Fragments":["level"]},{"Key":"deeper level","Fragments":["of"]},{"Key":"of understanding","Fragments":["though."]},{"Key":"understanding though.","Fragments":["But"]},{"Key":"though. But","Fragments":["I'm"]},{"Key":"hear that","Fragments":["the"]},{"Key":"range is","Fragments":["just"]},{"Key":"as unfold.","Fragments":["It"]},{"Key":"unfold. It","Fragments":["does"]},{"Key":"does read","Fragments":["much"]},{"Key":"read much","Fragments":["more"]},{"Key":"more clearly","Fragments":["with","with"]},{"Key":"clearly with","Fragments":["the","an"]},{"Key":"the range.","Fragments":["I'll"]},{"Key":"range. I'll","Fragments":["update"]},{"Key":" Renaming","Fragments":["stuff."]},{"Key":"Renaming stuff.","Fragments":["I"]},{"Key":"also realized","Fragments":["the"]},{"Key":"realized the","Fragments":["'2'"]},{"Key":"the '2'","Fragments":["case"]},{"Key":"'2' case","Fragments":["is"]},{"Key":"required to","Fragments":["avoid","get"]},{"Key":"avoid infinite","Fragments":["recursion."]},{"Key":"infinite recursion.","Fragments":["For"]},{"Key":"recursion. For","Fragments":["these"]},{"Key":"For these","Fragments":["particular"]},{"Key":"these particular","Fragments":["tests,"]},{"Key":"particular tests,","Fragments":["the"]},{"Key":"the prime_cache","Fragments":["appears"]},{"Key":"prime_cache appears","Fragments":["to"]},{"Key":"no difference","Fragments":["in"]},{"Key":"in performance.","Fragments":["I"]},{"Key":"performance. I","Fragments":["like","know"]},{"Key":"it around","Fragments":["because"]},{"Key":"around because","Fragments":["if"]},{"Key":"if offers","Fragments":["a"]},{"Key":"offers a","Fragments":["straightforward"]},{"Key":"a straightforward","Fragments":["space/time"]},{"Key":"straightforward space/time","Fragments":["optimization"]},{"Key":"space/time optimization","Fragments":["though."]},{"Key":"comprehension suggestion,","Fragments":["@watson."]},{"Key":"suggestion, @watson.","Fragments":["I"]},{"Key":"@watson. I","Fragments":["was"]},{"Key":"initially looking","Fragments":["for"]},{"Key":"list without","Fragments":["the"]},{"Key":"flatten step.","Fragments":["I"]},{"Key":"step. I","Fragments":["know"]},{"Key":"know exercism","Fragments":["isn't"]},{"Key":"exercism isn't","Fragments":["about","really"]},{"Key":"isn't about","Fragments":["performance","getting"]},{"Key":"performance optimizations,","Fragments":["but"]},{"Key":"optimizations, but","Fragments":["I'm"]},{"Key":"I'm curious,","Fragments":["do"]},{"Key":"curious, do","Fragments":["you"]},{"Key":"comprehension version","Fragments":["over"]},{"Key":"version over","Fragments":["using"]},{"Key":"over using","Fragments":["flat_map"]},{"Key":"using flat_map","Fragments":["and"]},{"Key":"and map","Fragments":["together?","would"]},{"Key":"current solution","Fragments":["a"]},{"Key":"than your","Fragments":["example","code"]},{"Key":"your example","Fragments":["code","I"]},{"Key":"code (I","Fragments":["know"]},{"Key":"(I know","Fragments":["it's"]},{"Key":"know it's","Fragments":["just"]},{"Key":"an example),","Fragments":["so"]},{"Key":"example), so","Fragments":["I"]},{"Key":"feel is","Fragments":["pretty"]},{"Key":"pretty readable","Fragments":["using"]},{"Key":"readable using","Fragments":["the"]},{"Key":"comprehension. I'll","Fragments":["submit"]},{"Key":"submit that","Fragments":["version,","next."]},{"Key":"that version,","Fragments":["and"]},{"Key":"hear your","Fragments":["thoughts."]},{"Key":"as always","Fragments":["for","for"]},{"Key":"always for","Fragments":["the","the"]},{"Key":"the helpful","Fragments":["feedback!","feedback"]},{"Key":"this needs","Fragments":["some"]},{"Key":"some explaining,","Fragments":["I"]},{"Key":"explaining, I","Fragments":["noticed"]},{"Key":"noticed in","Fragments":["the","the"]},{"Key":"implementation allows","Fragments":["outside"]},{"Key":"allows outside","Fragments":["code"]},{"Key":"outside code","Fragments":["to"]},{"Key":"the school's","Fragments":["internal"]},{"Key":"school's internal","Fragments":["DB"]},{"Key":"internal DB","Fragments":["directly,"]},{"Key":"DB directly,","Fragments":["see"]},{"Key":"directly, see","Fragments":["if"]},{"Key":"can prevent","Fragments":["this"]},{"Key":"went back","Fragments":["and"]},{"Key":"and redid","Fragments":["the"]},{"Key":"redid the","Fragments":["exercise"]},{"Key":"exercise using","Fragments":["OTP,"]},{"Key":"using OTP,","Fragments":["I"]},{"Key":"OTP, I","Fragments":["dropped"]},{"Key":"I dropped","Fragments":["db","the"]},{"Key":"dropped db","Fragments":["as"]},{"Key":"db as","Fragments":["the"]},{"Key":"first params","Fragments":["to"]},{"Key":"params to","Fragments":["`add`,"]},{"Key":"to `add`,","Fragments":["`grade`"]},{"Key":"`add`, `grade`","Fragments":["and"]},{"Key":"`grade` and","Fragments":["`sort`"]},{"Key":"and `sort`","Fragments":["so"]},{"Key":"`sort` so","Fragments":["I"]},{"Key":"modified the","Fragments":["tests"]},{"Key":"reflect that.","Fragments":["Otherwise"]},{"Key":"that. Otherwise","Fragments":["my"]},{"Key":"Otherwise my","Fragments":["first"]},{"Key":"pretty straightforward","Fragments":["and"]},{"Key":"straightforward and","Fragments":["you"]},{"Key":"see pieces","Fragments":["of"]},{"Key":"pieces of","Fragments":["it"]},{"Key":"it scattered","Fragments":["around"]},{"Key":"scattered around","Fragments":["in"]},{"Key":"to 'use","Fragments":["Bitwise'"]},{"Key":"'use Bitwise'","Fragments":["instead"]},{"Key":"Bitwise' instead","Fragments":["of"]},{"Key":"of require,","Fragments":["then"]},{"Key":"require, then","Fragments":["the"]},{"Key":"the bsl","Fragments":["function"]},{"Key":"bsl function","Fragments":["would"]},{"Key":"your namespace","Fragments":["and"]},{"Key":"namespace and","Fragments":["you"]},{"Key":"no conceptual","Fragments":["improvement"]},{"Key":"conceptual improvement","Fragments":["of"]},{"Key":"improvement of","Fragments":["a"]},{"Key":"a comprehension","Fragments":["over","and"]},{"Key":"comprehension over","Fragments":["flat_map"]},{"Key":"over flat_map","Fragments":["and"]},{"Key":"and filter,","Fragments":["comprehensions"]},{"Key":"filter, comprehensions","Fragments":["are"]},{"Key":"simply syntactic","Fragments":["sugar"]},{"Key":"minor real","Fragments":["world"]},{"Key":"world difference","Fragments":["though,"]},{"Key":"difference though,","Fragments":["a"]},{"Key":"though, a","Fragments":["list"]},{"Key":"comprehension desugars","Fragments":["to"]},{"Key":"desugars to","Fragments":["calls"]},{"Key":"to calls","Fragments":["to"]},{"Key":"like :lists.mapfoldl","Fragments":["(Erlang's"]},{"Key":":lists.mapfoldl (Erlang's","Fragments":["flat_map)"]},{"Key":"(Erlang's flat_map)","Fragments":["and"]},{"Key":"flat_map) and","Fragments":["some"]},{"Key":"and some","Fragments":["custom","complication"]},{"Key":"some custom","Fragments":["functions"]},{"Key":"of `filter`.","Fragments":["So"]},{"Key":"`filter`. So","Fragments":["it"]},{"Key":"slightly faster.","Fragments":["If"]},{"Key":"faster. If","Fragments":["you"]},{"Key":"much you'll","Fragments":["have"]},{"Key":"you'll have","Fragments":["to","less"]},{"Key":"to benchmark","Fragments":["it","it"]},{"Key":"benchmark it","Fragments":["(tip:","to"]},{"Key":"it (tip:","Fragments":["use"]},{"Key":"(tip: use","Fragments":["Erlang's"]},{"Key":"Erlang's `timer`","Fragments":["module)."]},{"Key":" Odd","Fragments":["indeed."]},{"Key":" Things","Fragments":["like"]},{"Key":"Things like","Fragments":["`?A`"]},{"Key":"like `?A`","Fragments":["are"]},{"Key":"`?A` are","Fragments":["integers"]},{"Key":"are integers","Fragments":["(65),"]},{"Key":"integers (65),","Fragments":["so"]},{"Key":"(65), so","Fragments":["you"]},{"Key":"write offset","Fragments":["as"]},{"Key":"offset as","Fragments":["`?a"]},{"Key":"as `?a","Fragments":["+"]},{"Key":"`?a +","Fragments":["?z`."]},{"Key":"used this","Fragments":["for"]},{"Key":"the conversion","Fragments":["(with","fails.","fails"]},{"Key":"conversion (with","Fragments":["filtering"]},{"Key":"(with filtering","Fragments":["out"]},{"Key":"filtering out","Fragments":["the","the"]},{"Key":"nil values","Fragments":["later):"]},{"Key":"defp convert(c)","Fragments":["when","when"]},{"Key":"convert(c) when","Fragments":["c","c"]},{"Key":"\u003e= ?a","Fragments":["and"]},{"Key":"?a and","Fragments":["c"]},{"Key":"\u003c= ?z,","Fragments":["do:"]},{"Key":"?z, do:","Fragments":["?z"]},{"Key":"do: ?z","Fragments":["-"]},{"Key":"?z -","Fragments":["(c"]},{"Key":"- (c","Fragments":["-"]},{"Key":"(c -","Fragments":["?a)"]},{"Key":"\u003e= ?0","Fragments":["and"]},{"Key":"?0 and","Fragments":["c"]},{"Key":"\u003c= ?9,","Fragments":["do:"]},{"Key":"?9, do:","Fragments":["c"]},{"Key":"defp convert(_),","Fragments":["do:"]},{"Key":"convert(_), do:","Fragments":["nil"]},{"Key":"way here","Fragments":["to"]},{"Key":"out doing","Fragments":["the"]},{"Key":"the offset","Fragments":["inline"]},{"Key":"offset inline","Fragments":["similar"]},{"Key":"inline similar","Fragments":["to"]},{"Key":"but refactored","Fragments":["to"]},{"Key":"refactored to","Fragments":["the","much"]},{"Key":"the lookup","Fragments":["Dict"]},{"Key":"lookup Dict","Fragments":["because"]},{"Key":"Dict because","Fragments":["it"]},{"Key":"it allowed","Fragments":["a"]},{"Key":"more linear","Fragments":["pipeline."]},{"Key":"linear pipeline.","Fragments":["I'll"]},{"Key":"pipeline. I'll","Fragments":["be"]},{"Key":"I'll be","Fragments":["curious","taking"]},{"Key":"curious to","Fragments":["see"]},{"Key":"your whole","Fragments":["solution."]},{"Key":"the info.","Fragments":[":)"]},{"Key":":-D Thanks.","Fragments":["I'll"]},{"Key":"Thanks. I'll","Fragments":["be"]},{"Key":"be taking","Fragments":["a"]},{"Key":"days off","Fragments":["for"]},{"Key":"off for","Fragments":["the","a"]},{"Key":"the US","Fragments":["Thanksgiving"]},{"Key":"US Thanksgiving","Fragments":["holiday"]},{"Key":"Thanksgiving holiday","Fragments":["later"]},{"Key":"holiday later","Fragments":["this"]},{"Key":"later this","Fragments":["week."]},{"Key":"OK. Let","Fragments":["me"]},{"Key":"me update","Fragments":["my"]},{"Key":"my cli","Fragments":["and"]},{"Key":"cli and","Fragments":["race"]},{"Key":"and race","Fragments":["to"]},{"Key":"race to","Fragments":["the","the"]},{"Key":"There were","Fragments":["2","no"]},{"Key":"were 2","Fragments":["things"]},{"Key":"2 things","Fragments":["I"]},{"Key":"I wished","Fragments":["I"]},{"Key":"wished I","Fragments":["could"]},{"Key":"find in","Fragments":["elixir"]},{"Key":"elixir when","Fragments":["I","using"]},{"Key":"doing this.","Fragments":["For","Don't"]},{"Key":"this. For","Fragments":["the","example,"]},{"Key":"the @nyasia","Fragments":["processing,"]},{"Key":"@nyasia processing,","Fragments":["I"]},{"Key":"processing, I","Fragments":["really"]},{"Key":"really wanted","Fragments":["some","to","to"]},{"Key":"wanted some","Fragments":["sort","programmatic"]},{"Key":"of map_with_index","Fragments":["iterator,"]},{"Key":"map_with_index iterator,","Fragments":["but"]},{"Key":"iterator, but","Fragments":["couldn't"]},{"Key":"one. Also,","Fragments":["I"]},{"Key":"some programmatic","Fragments":["way"]},{"Key":"programmatic way","Fragments":["to"]},{"Key":"first or","Fragments":["last"]},{"Key":"or last","Fragments":["element"]},{"Key":"tuple. If","Fragments":["there's"]},{"Key":"up match","Fragments":["and"]},{"Key":"match and","Fragments":["the","returning"]},{"Key":"Yup, looks","Fragments":["good."]},{"Key":"you complete","Fragments":["the"]},{"Key":"complete the","Fragments":["exercise"]},{"Key":"Oh, no","Fragments":["need"]},{"Key":"to slow","Fragments":["down"]},{"Key":"slow down","Fragments":["anymore."]},{"Key":"down anymore.","Fragments":["I've"]},{"Key":"anymore. I've","Fragments":["finished"]},{"Key":"I've finished","Fragments":["my"]},{"Key":"finished my","Fragments":["race"]},{"Key":"my race","Fragments":["to"]},{"Key":"the exercises.","Fragments":[":P"]},{"Key":" `Stream.with_index","Fragments":["|\u003e"]},{"Key":"`Stream.with_index |\u003e","Fragments":["Enum.map`,","Enum.reduce`"]},{"Key":"|\u003e Enum.map`,","Fragments":["`Stream`","with"]},{"Key":"Enum.map`, `Stream`","Fragments":["functions"]},{"Key":"`Stream` functions","Fragments":["are","of"]},{"Key":"are lazy","Fragments":["and"]},{"Key":"and efficient","Fragments":["when"]},{"Key":"efficient when","Fragments":["used"]},{"Key":"in chains","Fragments":["with"]},{"Key":"chains with","Fragments":["an"]},{"Key":"function at","Fragments":["the","all","its"]},{"Key":" `elem(t,","Fragments":["0)`"]},{"Key":"`elem(t, 0)`","Fragments":["selects"]},{"Key":"0)` selects","Fragments":["the"]},{"Key":"selects the","Fragments":["first","last"]},{"Key":"first element.","Fragments":["`elem(t,"]},{"Key":"element. `elem(t,","Fragments":["size(t)"]},{"Key":"`elem(t, size(t)","Fragments":["-"]},{"Key":"size(t) -","Fragments":["1)`"]},{"Key":"- 1)`","Fragments":["selects"]},{"Key":"1)` selects","Fragments":["the"]},{"Key":"last (I","Fragments":["suspect"]},{"Key":"suspect it","Fragments":["will","has"]},{"Key":"empty tuple","Fragments":["though,"]},{"Key":"tuple though,","Fragments":["`elem(t,"]},{"Key":"though, `elem(t,","Fragments":["-1)`"]},{"Key":"`elem(t, -1)`","Fragments":["doesn't"]},{"Key":"-1)` doesn't","Fragments":["sound"]},{"Key":"doesn't sound","Fragments":["right)."]},{"Key":" Creating","Fragments":["a","the"]},{"Key":"Creating a","Fragments":["tuple"]},{"Key":"tuple with","Fragments":["a"]},{"Key":"nil field","Fragments":["just"]},{"Key":"field just","Fragments":["to"]},{"Key":"`match` function's","Fragments":["expectations"]},{"Key":"function's expectations","Fragments":["doesn't"]},{"Key":"expectations doesn't","Fragments":["feel"]},{"Key":"feel right.","Fragments":["I'd"]},{"Key":"right. I'd","Fragments":["let"]},{"Key":"I'd let","Fragments":["`match`"]},{"Key":"let `match`","Fragments":["work"]},{"Key":"`match` work","Fragments":["on"]},{"Key":"just `bit`","Fragments":["and"]},{"Key":"`bit` and","Fragments":["opt"]},{"Key":"and opt","Fragments":["for"]},{"Key":"opt for","Fragments":["a"]},{"Key":"complex function","Fragments":["in"]},{"Key":" Haha.","Fragments":["Sometimes","Nope","I"]},{"Key":"Haha. Sometimes","Fragments":["it"]},{"Key":"takes someone","Fragments":["in"]},{"Key":"someone in","Fragments":["a"]},{"Key":"a close","Fragments":["second","look"]},{"Key":"close second","Fragments":["place"]},{"Key":"second place","Fragments":["to"]},{"Key":"to urge","Fragments":["you"]},{"Key":"to greater","Fragments":["speed"]},{"Key":"For an","Fragments":["8"]},{"Key":"an 8","Fragments":["element"]},{"Key":"8 element","Fragments":["list,"]},{"Key":"element list,","Fragments":["I"]},{"Key":"doubt Stream.with_index","Fragments":["makes"]},{"Key":"Stream.with_index makes","Fragments":["much"]},{"Key":"makes much","Fragments":["of"]},{"Key":"difference from","Fragments":["Enum.with_index,"]},{"Key":"from Enum.with_index,","Fragments":["but"]},{"Key":"Enum.with_index, but","Fragments":["it's"]},{"Key":" elem","Fragments":["is"]},{"Key":"elem is","Fragments":["what"]},{"Key":"was forgetting!","Fragments":["Thanks."]},{"Key":"forgetting! Thanks.","Fragments":["But"]},{"Key":"Thanks. But","Fragments":["it"]},{"Key":"help the","Fragments":["code,","reader"]},{"Key":"explicit anonymous","Fragments":["function"]},{"Key":"was odd","Fragments":["that"]},{"Key":"odd that","Fragments":["the"]},{"Key":"the README","Fragments":["doesn't","tell","says","excludes","\"How","so"]},{"Key":"README doesn't","Fragments":["mention"]},{"Key":"doesn't mention","Fragments":["punctuation,"]},{"Key":"mention punctuation,","Fragments":["numbers,"]},{"Key":"punctuation, numbers,","Fragments":["or"]},{"Key":"numbers, or","Fragments":["the"]},{"Key":"the 5","Fragments":["letter","factors"]},{"Key":"5 letter","Fragments":["chunks."]},{"Key":" José","Fragments":["confirmed"]},{"Key":"José confirmed","Fragments":["that"]},{"Key":"confirmed that","Fragments":["I"]},{"Key":"I hit","Fragments":["a","the"]},{"Key":"hit a","Fragments":["bug","roadblock"]},{"Key":"in Enum.chunks.","Fragments":["I'll"]},{"Key":"Enum.chunks. I'll","Fragments":["see"]},{"Key":"to fix,","Fragments":["so"]},{"Key":"fix, so","Fragments":["I"]},{"Key":"may take","Fragments":["a"]},{"Key":"a brief","Fragments":["break"]},{"Key":"brief break","Fragments":["from"]},{"Key":"break from","Fragments":["exercism.","Elixir."]},{"Key":"the `\u003c\u003c\u003c`","Fragments":["left"]},{"Key":"`\u003c\u003c\u003c` left","Fragments":["bitshift"]},{"Key":"left bitshift","Fragments":["operator"]},{"Key":"bitshift operator","Fragments":["available."]},{"Key":"the partition","Fragments":["function."]},{"Key":"partition function.","Fragments":["I"]},{"Key":"wouldn't give","Fragments":["names"]},{"Key":"give names","Fragments":["to"]},{"Key":"just simple","Fragments":["wrappers"]},{"Key":"simple wrappers","Fragments":["for"]},{"Key":"wrappers for","Fragments":["another"]},{"Key":"another function.","Fragments":["And"]},{"Key":"function. And","Fragments":["if"]},{"Key":"you absolutely","Fragments":["have"]},{"Key":"absolutely have","Fragments":["to"]},{"Key":"to it's","Fragments":["better","anagram"]},{"Key":"You're missing","Fragments":["a"]},{"Key":"a `@brown`","Fragments":["before"]},{"Key":"`@brown` before","Fragments":["that"]},{"Key":"before that","Fragments":["doc","was"]},{"Key":"that doc","Fragments":["string"]},{"Key":"you flatten","Fragments":["in"]},{"Key":"flatten in","Fragments":["`consolidate`"]},{"Key":"in `consolidate`","Fragments":["is"]},{"Key":"`consolidate` is","Fragments":["a"]},{"Key":"lists (i.e.","Fragments":["you"]},{"Key":"(i.e. you","Fragments":["don't"]},{"Key":"need recursive","Fragments":["flatten)"]},{"Key":"recursive flatten)","Fragments":["`Stream.concat`"]},{"Key":"flatten) `Stream.concat`","Fragments":["might"]},{"Key":"`Stream.concat` might","Fragments":["be"]},{"Key":"it's lazy","Fragments":["(doesn't"]},{"Key":"lazy (doesn't","Fragments":["build"]},{"Key":"(doesn't build","Fragments":["an"]},{"Key":"build an","Fragments":["intermediate"]},{"Key":"if `String.replace(%r/\\P{L}/)`","Fragments":["is"]},{"Key":"`String.replace(%r/\\P{L}/)` is","Fragments":["faster"]},{"Key":"than `String.scan(%r/\\p{L}/)","Fragments":["|\u003e"]},{"Key":"`String.scan(%r/\\p{L}/) |\u003e","Fragments":["Stream.map(\u0026elem(\u00261,"]},{"Key":"|\u003e Stream.map(\u0026elem(\u00261,","Fragments":["0))"]},{"Key":"Stream.map(\u0026elem(\u00261, 0))","Fragments":["|\u003e"]},{"Key":"0)) |\u003e","Fragments":["Enum.join`"]},{"Key":"|\u003e Enum.join`","Fragments":["(might"]},{"Key":"Enum.join` (might","Fragments":["very"]},{"Key":"(might very","Fragments":["well"]},{"Key":"very well","Fragments":["be"]},{"Key":"looks absolutely","Fragments":["great."]},{"Key":"last exercise","Fragments":["at"]},{"Key":"exercise at","Fragments":["the"]},{"Key":"the moment.","Fragments":["There"]},{"Key":"moment. There","Fragments":["is"]},{"Key":"the pipeline,","Fragments":["hopefully"]},{"Key":"pipeline, hopefully","Fragments":["it"]},{"Key":"hopefully it","Fragments":["will"]},{"Key":"get merged","Fragments":["soon."]},{"Key":"merged soon.","Fragments":["If"]},{"Key":"soon. If","Fragments":["you"]},{"Key":"want I'll","Fragments":["let"]},{"Key":"I'll let","Fragments":["you"]},{"Key":"recursive so","Fragments":["given"]},{"Key":"so given","Fragments":["enough"]},{"Key":"given enough","Fragments":["primes"]},{"Key":"enough primes","Fragments":["it"]},{"Key":"primes it","Fragments":["will"]},{"Key":"will eventually","Fragments":["run"]},{"Key":"eventually run","Fragments":["out"]},{"Key":"run out","Fragments":["of"]},{"Key":"memory `[d","Fragments":["|"]},{"Key":"`[d |","Fragments":["for_iter(d,"]},{"Key":"| for_iter(d,","Fragments":["div(n,d))]`."]},{"Key":"think special","Fragments":["casing"]},{"Key":"special casing","Fragments":["2","`2`"]},{"Key":"casing 2","Fragments":["in"]},{"Key":"2 in","Fragments":["`for`"]},{"Key":"in `for`","Fragments":["is"]},{"Key":"`for` is","Fragments":["more"]},{"Key":"elegant than","Fragments":["the"]},{"Key":"the `d","Fragments":["=="]},{"Key":"`d ==","Fragments":["2`"]},{"Key":"== 2`","Fragments":["clause"]},{"Key":"2` clause","Fragments":["in"]},{"Key":"That docstring","Fragments":["is"]},{"Key":"docstring is","Fragments":["actually"]},{"Key":"actually for","Fragments":["a"]},{"Key":"gave a","Fragments":["compiler","name"]},{"Key":"compiler warning","Fragments":["if"]},{"Key":"warning if","Fragments":["I"]},{"Key":"attribute tag","Fragments":["in"]},{"Key":"tag in","Fragments":["place."]},{"Key":"in place.","Fragments":["I"]},{"Key":"place. I","Fragments":["thought"]},{"Key":"thought this","Fragments":["was","one","through"]},{"Key":"a decent","Fragments":["compromise,","amount"]},{"Key":"decent compromise,","Fragments":["but"]},{"Key":"compromise, but","Fragments":["it's"]},{"Key":"area I","Fragments":["don't","haven't"]},{"Key":"any feel","Fragments":["for"]},{"Key":" Stream.concat","Fragments":["is"]},{"Key":"Stream.concat is","Fragments":["great."]},{"Key":"great. Thanks.","Fragments":["That"]},{"Key":"Thanks. That","Fragments":["List.flatten"]},{"Key":"That List.flatten","Fragments":["did"]},{"Key":"List.flatten did","Fragments":["bug"]},{"Key":"did bug","Fragments":["me"]},{"Key":"were enough","Fragments":["other"]},{"Key":"enough other","Fragments":["challenges"]},{"Key":"other challenges","Fragments":["that"]},{"Key":"challenges that","Fragments":["I"]},{"Key":"didn't spend","Fragments":["enough"]},{"Key":"spend enough","Fragments":["time"]},{"Key":"enough time","Fragments":["on","to"]},{"Key":"time on","Fragments":["that"]},{"Key":"better choice.","Fragments":["For"]},{"Key":"most challenging","Fragments":["exercise.","part"]},{"Key":"challenging exercise.","Fragments":["But"]},{"Key":"exercise. But","Fragments":["strangely,","you"]},{"Key":"But strangely,","Fragments":["it"]},{"Key":"strangely, it","Fragments":["wasn't"]},{"Key":"wasn't the","Fragments":["concurrency","problem"]},{"Key":"the concurrency","Fragments":["specifically."]},{"Key":"concurrency specifically.","Fragments":["The"]},{"Key":"specifically. The","Fragments":["most"]},{"Key":"The most","Fragments":["challenging","difficult"]},{"Key":"challenging part","Fragments":["was"]},{"Key":"part was","Fragments":["partitioning","the"]},{"Key":"was partitioning","Fragments":["the"]},{"Key":"partitioning the","Fragments":["list"]},{"Key":"of strings","Fragments":["into"]},{"Key":"strings into","Fragments":["an"]},{"Key":"an equal","Fragments":["amount"]},{"Key":"equal amount","Fragments":["of"]},{"Key":"the specified","Fragments":["workers."]},{"Key":"don't mind,","Fragments":["I"]},{"Key":"mind, I","Fragments":["think"]},{"Key":"leave String.replace","Fragments":["because"]},{"Key":"String.replace because","Fragments":["the"]},{"Key":" Woohoo,","Fragments":["I"]},{"Key":"Woohoo, I","Fragments":["made"]},{"Key":"the end!","Fragments":["Sure,"]},{"Key":"end! Sure,","Fragments":["keep"]},{"Key":"Sure, keep","Fragments":["me"]},{"Key":"keep me","Fragments":["in"]},{"Key":"the loop","Fragments":["for"]},{"Key":"loop for","Fragments":["future"]},{"Key":"future exercises.","Fragments":["Are"]},{"Key":"exercises. Are","Fragments":["you"]},{"Key":"you helping","Fragments":["manage"]},{"Key":"helping manage","Fragments":["the"]},{"Key":"the site?","Fragments":["I"]},{"Key":"site? I","Fragments":["can't"]},{"Key":"how else","Fragments":["you","to","to"]},{"Key":"same exercises","Fragments":["in"]},{"Key":"in all","Fragments":["languages.","caps,","upper","languages"]},{"Key":"all languages.","Fragments":["Is"]},{"Key":"languages. Is","Fragments":["that"]},{"Key":"that rem","Fragments":["was"]},{"Key":"rem was","Fragments":["available"]},{"Key":"was available","Fragments":["in"]},{"Key":"a `Regex.scan`","Fragments":["call"]},{"Key":"`Regex.scan` call","Fragments":["to"]},{"Key":"to isolate","Fragments":["only"]},{"Key":"isolate only","Fragments":["the"]},{"Key":"the parts","Fragments":["you","that","of"]},{"Key":"parts you","Fragments":["want."]},{"Key":" Convention","Fragments":["for"]},{"Key":"Convention for","Fragments":["private"]},{"Key":"methods is","Fragments":["to"]},{"Key":"use '#'","Fragments":["comments."]},{"Key":"languages share","Fragments":["a"]},{"Key":"share a","Fragments":["base"]},{"Key":"base set","Fragments":["of"]},{"Key":"of exercises,","Fragments":["but"]},{"Key":"exercises, but","Fragments":["not"]},{"Key":"not all","Fragments":["languages","that","tests"]},{"Key":"all languages","Fragments":["have","including"]},{"Key":"languages have","Fragments":["completely"]},{"Key":"have completely","Fragments":["the"]},{"Key":"completely the","Fragments":["same"]},{"Key":"same set.","Fragments":["It"]},{"Key":"set. It","Fragments":["depends"]},{"Key":"It depends","Fragments":["on"]},{"Key":"whether someone","Fragments":["adds"]},{"Key":"someone adds","Fragments":["a"]},{"Key":"adds a","Fragments":["translation"]},{"Key":"a translation","Fragments":["for"]},{"Key":"translation for","Fragments":["an"]},{"Key":"an exercise.","Fragments":["For"]},{"Key":"exercise. For","Fragments":["example"]},{"Key":"example `parallel-letter-frequency`","Fragments":["is"]},{"Key":"`parallel-letter-frequency` is","Fragments":["only"]},{"Key":"I help","Fragments":["out"]},{"Key":"with exercism","Fragments":["by"]},{"Key":"exercism by","Fragments":["adding"]},{"Key":"adding exercises","Fragments":["for"]},{"Key":"exercises for","Fragments":["Elixir"]},{"Key":"and Haskell.","Fragments":["The"]},{"Key":"Haskell. The","Fragments":["Elixir"]},{"Key":"exercises from","Fragments":["bank-account"]},{"Key":"from bank-account","Fragments":["onward"]},{"Key":"bank-account onward","Fragments":["are"]},{"Key":"onward are","Fragments":["of"]},{"Key":"The zipper","Fragments":["exercise"]},{"Key":"zipper exercise","Fragments":["has"]},{"Key":"exercise has","Fragments":["now"]},{"Key":"has now","Fragments":["been"]},{"Key":"now been","Fragments":["merged"]},{"Key":"merged for","Fragments":["Elixir,"]},{"Key":"for Elixir,","Fragments":["as","following"]},{"Key":"Elixir, as","Fragments":["you"]},{"Key":"you probably","Fragments":["have","want","meant"]},{"Key":"probably have","Fragments":["noticed.","to","made","readable"]},{"Key":"@alexandre I","Fragments":["don't"]},{"Key":"have moved","Fragments":["the"]},{"Key":"the d==2","Fragments":["clause"]},{"Key":"d==2 clause","Fragments":["out"]},{"Key":"clause out","Fragments":["of"]},{"Key":"of \"for_iter\"","Fragments":["and"]},{"Key":"\"for_iter\" and","Fragments":["up"]},{"Key":"and up","Fragments":["into"]},{"Key":"pattern-match for","Fragments":["\"for\";"]},{"Key":"for \"for\";","Fragments":["2"]},{"Key":"\"for\"; 2","Fragments":["remains"]},{"Key":"2 remains","Fragments":["a"]},{"Key":"remains a","Fragments":["potential"]},{"Key":"potential divisor","Fragments":["in"]},{"Key":"divisor in","Fragments":["the"]},{"Key":"the midst","Fragments":["of"]},{"Key":"midst of","Fragments":["the"]},{"Key":"the calculation","Fragments":["not"]},{"Key":"calculation not","Fragments":["just"]},{"Key":"just at","Fragments":["the"]},{"Key":"the beginning.","Fragments":["Forgive"]},{"Key":"beginning. Forgive","Fragments":["me"]},{"Key":"Forgive me","Fragments":["if","if"]},{"Key":"being dense","Fragments":["here."]},{"Key":" `d==2","Fragments":["\u0026\u0026"]},{"Key":"`d==2 \u0026\u0026","Fragments":["3"]},{"Key":"\u0026\u0026 3","Fragments":["||"]},{"Key":"3 ||","Fragments":["d+2`,"]},{"Key":"|| d+2`,","Fragments":["is"]},{"Key":"d+2`, is","Fragments":["better"]},{"Key":"as `if","Fragments":["d","cond"]},{"Key":"`if d","Fragments":["=="]},{"Key":"d ==","Fragments":["2,"]},{"Key":"== 2,","Fragments":["do:"]},{"Key":"2, do:","Fragments":["3,"]},{"Key":"do: 3,","Fragments":["or:"]},{"Key":"3, or:","Fragments":["d"]},{"Key":"or: d","Fragments":["+"]},{"Key":"d +","Fragments":["2`"]},{"Key":"+ 2`","Fragments":["(`if`"]},{"Key":"2` (`if`","Fragments":["is"]},{"Key":"(`if` is","Fragments":["an"]},{"Key":"I've taken","Fragments":["another","with"]},{"Key":"taken another","Fragments":["look"]},{"Key":"that special","Fragments":["casing"]},{"Key":"casing `2`","Fragments":["won't"]},{"Key":"`2` won't","Fragments":["work,"]},{"Key":"won't work,","Fragments":["so"]},{"Key":"work, so","Fragments":["your","I"]},{"Key":"so your","Fragments":["original"]},{"Key":"original code","Fragments":["was"]},{"Key":"code was","Fragments":["good"]},{"Key":"was good","Fragments":["(and"]},{"Key":"good (and","Fragments":["easier"]},{"Key":"(and easier","Fragments":["to"]},{"Key":"read than","Fragments":["this","the"]},{"Key":"OK. I've","Fragments":["updated","got"]},{"Key":"the comments.","Fragments":["That's","Oh,"]},{"Key":"comments. That's","Fragments":["cool"]},{"Key":"That's cool","Fragments":["that","that","if"]},{"Key":"and Haskell","Fragments":["make"]},{"Key":"Haskell make","Fragments":["concurrency"]},{"Key":"make concurrency","Fragments":["simple"]},{"Key":"concurrency simple","Fragments":["enough"]},{"Key":"simple enough","Fragments":["to","solution."]},{"Key":"include in","Fragments":["this"]},{"Key":"this exercism","Fragments":["format."]},{"Key":"exercism format.","Fragments":["Haskell"]},{"Key":"format. Haskell","Fragments":["has"]},{"Key":"been on","Fragments":["my"]},{"Key":"my list","Fragments":["of"]},{"Key":"learn for","Fragments":["a"]},{"Key":"a while,","Fragments":["but","read"]},{"Key":"while, but","Fragments":["I"]},{"Key":"haven't spent","Fragments":["the","time"]},{"Key":"spent the","Fragments":["time"]},{"Key":"not noticed","Fragments":["anything"]},{"Key":"noticed anything","Fragments":["about"]},{"Key":"the zipper","Fragments":["exercise."]},{"Key":"zipper exercise.","Fragments":["A"]},{"Key":"exercise. A","Fragments":["plain"]},{"Key":"A plain","Fragments":["'exercism"]},{"Key":"plain 'exercism","Fragments":["fetch'"]},{"Key":"'exercism fetch'","Fragments":["doesn't"]},{"Key":"fetch' doesn't","Fragments":["get"]},{"Key":"get it,","Fragments":["and"]},{"Key":"and 'exercism","Fragments":["fetch"]},{"Key":"'exercism fetch","Fragments":["elixir"]},{"Key":"fetch elixir","Fragments":["zipper'"]},{"Key":"elixir zipper'","Fragments":["gives"]},{"Key":"zipper' gives","Fragments":["a"]},{"Key":"a 400","Fragments":["error."]},{"Key":"got zipper","Fragments":["now."]},{"Key":"zipper now.","Fragments":["But"]},{"Key":"now. But","Fragments":["I'm"]},{"Key":"I'm leaving","Fragments":["on"]},{"Key":"leaving on","Fragments":["holiday"]},{"Key":"on holiday","Fragments":["for"]},{"Key":"holiday for","Fragments":["a"]},{"Key":"few days,","Fragments":["so"]},{"Key":"days, so","Fragments":["I"]},{"Key":"doubt I'll","Fragments":["work"]},{"Key":"exactly a","Fragments":["problem,"]},{"Key":"a problem,","Fragments":["gives","but"]},{"Key":"problem, gives","Fragments":["me"]},{"Key":"gives me","Fragments":["time","an","an","an","this"]},{"Key":"me time","Fragments":["to"]},{"Key":"of new","Fragments":["exercises."]},{"Key":"new exercises.","Fragments":[";)"]},{"Key":"have developed","Fragments":["a"]},{"Key":"developed a","Fragments":["habit"]},{"Key":"of trying","Fragments":["whatever","to"]},{"Key":"trying whatever","Fragments":["is"]},{"Key":"whatever is","Fragments":["in"]},{"Key":"in Kernel","Fragments":["in"]},{"Key":"Kernel in","Fragments":["guards"]},{"Key":"guards and","Fragments":["see","just"]},{"Key":" Style","Fragments":["feedback"]},{"Key":"Style feedback","Fragments":["also"]},{"Key":"feedback also","Fragments":["welcome"]},{"Key":"also welcome","Fragments":["here."]},{"Key":"Only nitpick","Fragments":["I"]},{"Key":"nitpick I","Fragments":["have","can"]},{"Key":"regex (yours","Fragments":["will"]},{"Key":"(yours will","Fragments":["only"]},{"Key":"match lowercase","Fragments":["a"]},{"Key":"lowercase a","Fragments":["through"]},{"Key":"a through","Fragments":["z)."]},{"Key":" Replace","Fragments":["it"]},{"Key":"Replace it","Fragments":["with"]},{"Key":"with %r/\\p{L}/","Fragments":["(any"]},{"Key":"%r/\\p{L}/ (any","Fragments":["unicode"]},{"Key":"(any unicode","Fragments":["letter)"]},{"Key":"unicode letter)","Fragments":["and"]},{"Key":"letter) and","Fragments":["you"]},{"Key":"be golden","Fragments":["IMO."]},{"Key":" @webster","Fragments":["that's","I"]},{"Key":"@webster that's","Fragments":["awesome,"]},{"Key":"that's awesome,","Fragments":["never"]},{"Key":"awesome, never","Fragments":["knew"]},{"Key":"never knew","Fragments":["that."]},{"Key":"@webster I","Fragments":["am"]},{"Key":"am new","Fragments":["to","to","to","to"]},{"Key":"language and","Fragments":["am","we're","that","if"]},{"Key":"still figuring","Fragments":["out","list"]},{"Key":"out things","Fragments":["like"]},{"Key":"like precedence.","Fragments":["Did"]},{"Key":"precedence. Did","Fragments":["not"]},{"Key":"Did not","Fragments":["want","know"]},{"Key":"not want","Fragments":["to"]},{"Key":"parentheses but","Fragments":["had"]},{"Key":"had failing","Fragments":["tests"]},{"Key":"failing tests","Fragments":["because"]},{"Key":"tests because","Fragments":["`String.upcase"]},{"Key":"because `String.upcase","Fragments":["input"]},{"Key":"`String.upcase input","Fragments":["=="]},{"Key":"input ==","Fragments":["input`","String.upcase(input)"]},{"Key":"== input`","Fragments":["reduces"]},{"Key":"input` reduces","Fragments":["to"]},{"Key":"reduces to","Fragments":["`String.upcase"]},{"Key":"to `String.upcase","Fragments":["true`."]},{"Key":"`String.upcase true`.","Fragments":["I've"]},{"Key":"true`. I've","Fragments":["added"]},{"Key":"added parentheses","Fragments":["in"]},{"Key":" According","Fragments":["to","to"]},{"Key":"According to","Fragments":["some","[this"]},{"Key":"some quick","Fragments":["googling,"]},{"Key":"quick googling,","Fragments":["[[:alpha:]]"]},{"Key":"googling, [[:alpha:]]","Fragments":["is"]},{"Key":"[[:alpha:]] is","Fragments":["a-zA-Z."]},{"Key":"is a-zA-Z.","Fragments":["If"]},{"Key":"a-zA-Z. If","Fragments":["you"]},{"Key":"want unicode","Fragments":["letter"]},{"Key":"unicode letter","Fragments":["support,"]},{"Key":"letter support,","Fragments":["use"]},{"Key":"support, use","Fragments":["\\p{L}"]},{"Key":"use \\p{L}","Fragments":["instead."]},{"Key":"Ah, nice..","Fragments":["I"]},{"Key":"nice.. I","Fragments":["assumed"]},{"Key":"assumed alpha","Fragments":["would"]},{"Key":"alpha would","Fragments":["be"]},{"Key":"be unicode","Fragments":["aware"]},{"Key":"unicode aware","Fragments":["but"]},{"Key":"aware but","Fragments":["apparently"]},{"Key":"apparently not!","Fragments":["Thanks!"]},{"Key":" Although...","Fragments":["there"]},{"Key":"Although... there","Fragments":["are"]},{"Key":"no unicode","Fragments":["chars"]},{"Key":"unicode chars","Fragments":["in"]},{"Key":"chars in","Fragments":["the"]},{"Key":"the spec","Fragments":[":D","for","line","because","will"]},{"Key":"Nope, none","Fragments":["in"]},{"Key":"none in","Fragments":["the"]},{"Key":"the spec...","Fragments":["but"]},{"Key":"spec... but","Fragments":["this"]},{"Key":"nitpick after","Fragments":["all"]},{"Key":"after all","Fragments":["(and"]},{"Key":"all (and","Fragments":["being"]},{"Key":"(and being","Fragments":["UTF-8"]},{"Key":"being UTF-8","Fragments":["aware"]},{"Key":"UTF-8 aware","Fragments":["is"]},{"Key":"aware is","Fragments":["good"]},{"Key":"good IMO).","Fragments":[":D"]},{"Key":" `fn(count)","Fragments":["-\u003e"]},{"Key":"`fn(count) -\u003e","Fragments":["count+1"]},{"Key":"-\u003e count+1","Fragments":["end`"]},{"Key":"count+1 end`","Fragments":["is"]},{"Key":"end` is","Fragments":["nice","a","false.","just"]},{"Key":"and explicit,","Fragments":["but","not"]},{"Key":"explicit, but","Fragments":["`\u0026(\u00261+1)`","instead","it","I"]},{"Key":"but `\u0026(\u00261+1)`","Fragments":["is"]},{"Key":"`\u0026(\u00261+1)` is","Fragments":["also"]},{"Key":"also perfectly","Fragments":["acceptable."]},{"Key":"implement `split`","Fragments":["using"]},{"Key":"`split` using","Fragments":["`Regex.scan`,"]},{"Key":"`Regex.scan`, it's","Fragments":["not"]},{"Key":"shorter in","Fragments":["code"]},{"Key":"code but","Fragments":["it"]},{"Key":"to search","Fragments":["for"]},{"Key":"search for","Fragments":["the","\"Cond\"","the","groups"]},{"Key":"stuff you","Fragments":["want","don't"]},{"Key":"want instead","Fragments":["of","of"]},{"Key":"parentheses with","Fragments":["`String.strip`"]},{"Key":"with `String.strip`","Fragments":["and"]},{"Key":"`String.strip` and","Fragments":["not"]},{"Key":"`String.ends_with?` and","Fragments":["`Regex.run`?"]},{"Key":" Precedence","Fragments":["can"]},{"Key":"Precedence can","Fragments":["be"]},{"Key":"be annoying.","Fragments":["Another"]},{"Key":"annoying. Another","Fragments":["common"]},{"Key":"Another common","Fragments":["bug:"]},{"Key":"common bug:","Fragments":["`List.duplicate"]},{"Key":"bug: `List.duplicate","Fragments":["\"a\","]},{"Key":"`List.duplicate \"a\",","Fragments":["5","(5"]},{"Key":"\"a\", 5","Fragments":["|\u003e"]},{"Key":"5 |\u003e","Fragments":["Enum.map(\u0026String.upcase/1)"]},{"Key":"|\u003e Enum.map(\u0026String.upcase/1)","Fragments":["`"]},{"Key":"Enum.map(\u0026String.upcase/1) `","Fragments":["means"]},{"Key":"` means","Fragments":["`List.duplicate"]},{"Key":"means `List.duplicate","Fragments":["\"a\","]},{"Key":"\"a\", (5","Fragments":["|\u003e"]},{"Key":"(5 |\u003e","Fragments":["Enum.map(\u0026String.upcase/1))"]},{"Key":"|\u003e Enum.map(\u0026String.upcase/1))","Fragments":["`,"]},{"Key":"Enum.map(\u0026String.upcase/1)) `,","Fragments":["not"]},{"Key":"`, not","Fragments":["`List.duplicate(\"a\","]},{"Key":"not `List.duplicate(\"a\",","Fragments":["5)"]},{"Key":"`List.duplicate(\"a\", 5)","Fragments":["|\u003e"]},{"Key":"5) |\u003e","Fragments":["Enum.map(\u0026String.upcase/1)`."]},{"Key":"the macros","Fragments":["are"]},{"Key":"macros are","Fragments":["overcomplicating"]},{"Key":"are overcomplicating","Fragments":["things."]},{"Key":"overcomplicating things.","Fragments":["The"]},{"Key":"things. The","Fragments":["guards"]},{"Key":"The guards","Fragments":["are"]},{"Key":"Nope, not","Fragments":["possible"]},{"Key":"possible due","Fragments":["to"]},{"Key":"to Erlang's","Fragments":["restrictions"]},{"Key":"Erlang's restrictions","Fragments":["on"]},{"Key":"restrictions on","Fragments":["guards."]},{"Key":"started doing","Fragments":["it,"]},{"Key":"no macros.","Fragments":["This"]},{"Key":"macros. This","Fragments":["was"]},{"Key":"was fine","Fragments":["for"]},{"Key":"almost every","Fragments":["case,"]},{"Key":"every case,","Fragments":["but"]},{"Key":"the triangle","Fragments":["inequality","inequality","inequality."]},{"Key":"triangle inequality","Fragments":["case","case?"]},{"Key":"inequality case","Fragments":["I"]},{"Key":"it needed","Fragments":["a","to"]},{"Key":"make clear","Fragments":["what","what's"]},{"Key":"meant -","Fragments":["that's"]},{"Key":"up writing","Fragments":["macros","the"]},{"Key":"writing macros","Fragments":["as"]},{"Key":"macros as","Fragments":["I"]},{"Key":"wanted the","Fragments":["others"]},{"Key":"the others","Fragments":["to"]},{"Key":"to match.","Fragments":["Is"]},{"Key":"match. Is","Fragments":["there"]},{"Key":"guard a","Fragments":["name"]},{"Key":"capture to","Fragments":["be"]},{"Key":"than traditional","Fragments":["\"fn"]},{"Key":"traditional \"fn","Fragments":["-\u003e"]},{"Key":"\"fn -\u003e","Fragments":["...\""]},{"Key":"-\u003e ...\"","Fragments":["when"]},{"Key":"...\" when","Fragments":["using"]},{"Key":"using pipes.","Fragments":["What"]},{"Key":"pipes. What","Fragments":["do"]},{"Key":" Went","Fragments":["for"]},{"Key":"Went for","Fragments":["a"]},{"Key":"a map/reduce,","Fragments":["instead","next"]},{"Key":"map/reduce, instead","Fragments":["of"]},{"Key":"a map/map.","Fragments":["The"]},{"Key":"map/map. The","Fragments":["more"]},{"Key":"I look","Fragments":["at","at","at"]},{"Key":"less I","Fragments":["like"]},{"Key":"functions, especially","Fragments":["1"]},{"Key":"especially 1","Fragments":["arg"]},{"Key":"1 arg","Fragments":["ones."]},{"Key":"`\u0026({ \u00261,","Fragments":["count(dna_chars,"]},{"Key":"\u00261, count(dna_chars,","Fragments":["\u00261)","\u00261)"]},{"Key":"count(dna_chars, \u00261)","Fragments":["})`","}`."]},{"Key":"\u00261) })`","Fragments":["can"]},{"Key":"as `\u0026{","Fragments":["\u00261,"]},{"Key":"`\u0026{ \u00261,","Fragments":["count(dna_chars,"]},{"Key":"\u00261) }`.","Fragments":["The"]},{"Key":"reason `\u0026(\u00261","Fragments":["+"]},{"Key":"1)` must","Fragments":["be"]},{"Key":"parentheses is","Fragments":["that"]},{"Key":"that otherwise","Fragments":["the"]},{"Key":"otherwise the","Fragments":["parser","sorting"]},{"Key":"the parser","Fragments":["gets"]},{"Key":"parser gets","Fragments":["confused,"]},{"Key":"gets confused,","Fragments":["with"]},{"Key":"confused, with","Fragments":["`\u0026{\u00261,"]},{"Key":"with `\u0026{\u00261,","Fragments":[":a}`,"]},{"Key":"`\u0026{\u00261, :a}`,","Fragments":["`\u0026[\u00261,"]},{"Key":":a}`, `\u0026[\u00261,","Fragments":[":a]`"]},{"Key":"`\u0026[\u00261, :a]`","Fragments":["or"]},{"Key":":a]` or","Fragments":["`\u0026foo(\u00261)`"]},{"Key":"or `\u0026foo(\u00261)`","Fragments":["that's"]},{"Key":"`\u0026foo(\u00261)` that's","Fragments":["not"]},{"Key":"Ok, on","Fragments":["consideration"]},{"Key":"on consideration","Fragments":["I"]},{"Key":"consideration I","Fragments":["decided"]},{"Key":"guards as","Fragments":["the"]},{"Key":"values (both","Fragments":["in"]},{"Key":"(both in","Fragments":["the"]},{"Key":"error and","Fragments":["non-error"]},{"Key":"and non-error","Fragments":["cases)"]},{"Key":"non-error cases)","Fragments":["explain"]},{"Key":"cases) explain","Fragments":["their"]},{"Key":"their meaning","Fragments":["unambiguously."]},{"Key":"got caught","Fragments":["a"]},{"Key":"caught a","Fragments":["few"]},{"Key":"few times","Fragments":["with","in"]},{"Key":"times with","Fragments":["missing","explicit","a"]},{"Key":"with missing","Fragments":["parenthesis"]},{"Key":"missing parenthesis","Fragments":["that's"]},{"Key":"parenthesis that's","Fragments":["why"]},{"Key":"too much...","Fragments":["it"]},{"Key":"much... it","Fragments":["will"]},{"Key":"use `nucleotide_counts/1`","Fragments":["and"]},{"Key":"`nucleotide_counts/1` and","Fragments":["`Dict.get`,"]},{"Key":"and `Dict.get`,","Fragments":["since"]},{"Key":"`Dict.get`, since","Fragments":["this"]},{"Key":"since this","Fragments":["would","matches"]},{"Key":"the computation","Fragments":["a"]},{"Key":"computation a","Fragments":["bit"]},{"Key":"You're mixing","Fragments":["imports"]},{"Key":"mixing imports","Fragments":["(`downcase`"]},{"Key":"imports (`downcase`","Fragments":["and"]},{"Key":"(`downcase` and","Fragments":["`merge`,"]},{"Key":"and `merge`,","Fragments":["though"]},{"Key":"`merge`, though","Fragments":["`import`"]},{"Key":"though `import`","Fragments":["is"]},{"Key":"than `defdelegate`","Fragments":["actually,"]},{"Key":"`defdelegate` actually,","Fragments":["I"]},{"Key":"actually, I","Fragments":["should"]},{"Key":"that before)","Fragments":["with"]},{"Key":"before) with","Fragments":["direct"]},{"Key":"with direct","Fragments":["module"]},{"Key":"direct module","Fragments":["calls."]},{"Key":"module calls.","Fragments":["Is"]},{"Key":"calls. Is","Fragments":["there"]},{"Key":"specific reason","Fragments":["for","you"]},{"Key":"why `downcase`","Fragments":["doesn't"]},{"Key":"`downcase` doesn't","Fragments":["get"]},{"Key":"get module","Fragments":["qualified"]},{"Key":"module qualified","Fragments":["and"]},{"Key":"qualified and","Fragments":["`Enum.map`"]},{"Key":"Importing specific","Fragments":["functions"]},{"Key":"specific functions","Fragments":["is","and"]},{"Key":"very rare","Fragments":["in"]},{"Key":"rare in","Fragments":["Elixir"]},{"Key":"Elixir btw","Fragments":["and"]},{"Key":"btw and","Fragments":["it"]},{"Key":"much harder","Fragments":["to"]},{"Key":"reader think","Fragments":["\"what"]},{"Key":"think \"what","Fragments":["did"]},{"Key":"\"what did","Fragments":["merge"]},{"Key":"did merge","Fragments":["mean?\""]},{"Key":"merge mean?\"","Fragments":["while"]},{"Key":"mean?\" while","Fragments":["`Dict.merge`"]},{"Key":"while `Dict.merge`","Fragments":["is"]},{"Key":"`Dict.merge` is","Fragments":["immediately"]},{"Key":"is immediately","Fragments":["obvious."]},{"Key":"agree completely","Fragments":["this"]},{"Key":"completely this","Fragments":["is"]},{"Key":"as I'll","Fragments":["go"]},{"Key":"`Dict.merge` but","Fragments":["the"]},{"Key":"other approach","Fragments":["is"]},{"Key":"to map/map","Fragments":["then"]},{"Key":"map/map then","Fragments":["flatten"]},{"Key":"then flatten","Fragments":["which"]},{"Key":"flatten which","Fragments":["I"]},{"Key":"like either.","Fragments":["Ah"]},{"Key":"either. Ah","Fragments":["well.."]},{"Key":"regex felt","Fragments":["like"]},{"Key":"the simplest","Fragments":["way"]},{"Key":"simplest way","Fragments":["to"]},{"Key":"to finish","Fragments":["the"]},{"Key":"finish the","Fragments":["problem."]},{"Key":"First stab","Fragments":["at"]},{"Key":"it, had","Fragments":["a"]},{"Key":"of trouble","Fragments":["with","figuring"]},{"Key":"trouble with","Fragments":["the","the"]},{"Key":"the teenth","Fragments":["concept,"]},{"Key":"teenth concept,","Fragments":["clicked"]},{"Key":"concept, clicked","Fragments":["once"]},{"Key":"clicked once","Fragments":["I"]},{"Key":"realized \"teen\"","Fragments":["as"]},{"Key":"\"teen\" as","Fragments":["in"]},{"Key":"in teenager...","Fragments":["clever."]},{"Key":"teenager... clever.","Fragments":["Nothing"]},{"Key":"clever. Nothing","Fragments":["spectacular"]},{"Key":"Nothing spectacular","Fragments":["going"]},{"Key":"spectacular going","Fragments":["on,"]},{"Key":"going on,","Fragments":["we"]},{"Key":"on, we","Fragments":["start"]},{"Key":"we start","Fragments":["at","with"]},{"Key":"start at","Fragments":["the"]},{"Key":"week and","Fragments":["scan"]},{"Key":"and scan","Fragments":["till"]},{"Key":"scan till","Fragments":["we"]},{"Key":"till we","Fragments":["hit"]},{"Key":"we hit","Fragments":["the"]},{"Key":"expected day.","Fragments":["We"]},{"Key":"day. We","Fragments":["could"]},{"Key":"We could","Fragments":["also"]},{"Key":"expected weekday","Fragments":["number"]},{"Key":"weekday number","Fragments":["to"]},{"Key":"one returned","Fragments":["by"]},{"Key":"returned by","Fragments":["`:calendar`"]},{"Key":"by `:calendar`","Fragments":["to"]},{"Key":"`:calendar` to","Fragments":["return"]},{"Key":"right result","Fragments":["quicker."]},{"Key":"result quicker.","Fragments":["I"]},{"Key":"quicker. I","Fragments":["might"]},{"Key":"might submit","Fragments":["that"]},{"Key":"that next.","Fragments":["One"]},{"Key":"next. One","Fragments":["major"]},{"Key":"One major","Fragments":["nitpick,"]},{"Key":"major nitpick,","Fragments":["the"]},{"Key":"nitpick, the","Fragments":["suite"]},{"Key":"the suite","Fragments":["of"]},{"Key":"suite of","Fragments":["test"]},{"Key":"of test","Fragments":["forced","cases","cases"]},{"Key":"test forced","Fragments":["me"]},{"Key":"forced me","Fragments":["to","to"]},{"Key":"implement almost","Fragments":["everything"]},{"Key":"almost everything","Fragments":["at"]},{"Key":"everything at","Fragments":["once"]},{"Key":"once which","Fragments":["I"]},{"Key":"is bad","Fragments":["you"]},{"Key":"bad you","Fragments":["haven't"]},{"Key":"original tests,","Fragments":["those"]},{"Key":"tests, those","Fragments":["would"]},{"Key":"would force","Fragments":["you"]},{"Key":"force you","Fragments":["do","to"]},{"Key":"have loads","Fragments":["and"]},{"Key":"loads and","Fragments":["loads"]},{"Key":"and loads","Fragments":["of"]},{"Key":"loads of","Fragments":["functions"]},{"Key":"like `sunteenth`","Fragments":["and"]},{"Key":"`sunteenth` and","Fragments":["`first_monday`."]},{"Key":"That said","Fragments":["I"]},{"Key":"said I","Fragments":["don't"]},{"Key":"exercise either.","Fragments":["It's"]},{"Key":"either. It's","Fragments":["annoying"]},{"Key":"It's annoying","Fragments":["to"]},{"Key":"write and","Fragments":["annoying","annoying"]},{"Key":"and annoying","Fragments":["to","to"]},{"Key":" congrats","Fragments":["mate"]},{"Key":"congrats mate","Fragments":[":)"]},{"Key":"simple exercise,","Fragments":["I"]},{"Key":"it simply,","Fragments":["with"]},{"Key":"simply, with","Fragments":["clearly"]},{"Key":"with clearly","Fragments":["named"]},{"Key":"small suggestion:","Fragments":["you"]},{"Key":"suggestion: you","Fragments":["don't"]},{"Key":"don't technically","Fragments":["need"]},{"Key":"technically need","Fragments":["to"]},{"Key":"sorted array","Fragments":["back"]},{"Key":"array back","Fragments":["into"]},{"Key":"arrays directly.","Fragments":["But"]},{"Key":"directly. But","Fragments":["yeah,"]},{"Key":"yeah, other","Fragments":["than"]},{"Key":"great. Good","Fragments":["clear,"]},{"Key":"Good clear,","Fragments":["expressive"]},{"Key":"clear, expressive","Fragments":["variable"]},{"Key":"variable and","Fragments":["method"]},{"Key":"When trying","Fragments":["to"]},{"Key":"of standard","Fragments":["`Enum`"]},{"Key":"standard `Enum`","Fragments":["functions,"]},{"Key":"`Enum` functions,","Fragments":["I"]},{"Key":"functions, I","Fragments":["ended"]},{"Key":"up either","Fragments":["having"]},{"Key":"either having","Fragments":["to"]},{"Key":"the collections","Fragments":["more"]},{"Key":"collections more","Fragments":["than"]},{"Key":"once, or","Fragments":["doing"]},{"Key":"or doing","Fragments":["more"]},{"Key":"doing more","Fragments":["operations","work","than"]},{"Key":"more operations","Fragments":["in"]},{"Key":"operations in","Fragments":["total."]},{"Key":"Sorry to","Fragments":["keep"]},{"Key":"keep rambling...","Fragments":["but,"]},{"Key":"rambling... but,","Fragments":["if"]},{"Key":"but, if","Fragments":["you"]},{"Key":"did want","Fragments":["to"]},{"Key":"the duplicate","Fragments":["calls","\"Whatever.\""]},{"Key":"duplicate calls","Fragments":["to"]},{"Key":"base word,","Fragments":["I"]},{"Key":"word, I","Fragments":["guess"]},{"Key":"the `anagram?`","Fragments":["function","function?"]},{"Key":"logic inline","Fragments":["in"]},{"Key":"inline in","Fragments":["an","the","`accumulate`"]},{"Key":"to `Enum.filter`.","Fragments":["That"]},{"Key":"`Enum.filter`. That","Fragments":["way"]},{"Key":"once, then","Fragments":["in"]},{"Key":"could compare","Fragments":["the"]},{"Key":"the originals","Fragments":["and"]},{"Key":"originals and","Fragments":["the"]},{"Key":"normalized versions.","Fragments":["Like"]},{"Key":"versions. Like","Fragments":["I"]},{"Key":"Like I","Fragments":["said,"]},{"Key":"I said,","Fragments":["in","it"]},{"Key":"said, in","Fragments":["my"]},{"Key":"opinion, that","Fragments":["is"]},{"Key":"bit less","Fragments":["readable","obvious","readable),"]},{"Key":"nice function","Fragments":["that"]},{"Key":"that gives","Fragments":["a","an"]},{"Key":"logic like","Fragments":["you"]},{"Key":"you have,","Fragments":["but"]},{"Key":"have, but","Fragments":["that"]},{"Key":"one way","Fragments":["you","and"]},{"Key":"production if","Fragments":["you"]},{"Key":"were doing","Fragments":["this","this"]},{"Key":"large data","Fragments":["set"]},{"Key":"data set","Fragments":["or"]},{"Key":"set or","Fragments":["repeatedly"]},{"Key":"or repeatedly","Fragments":["in"]},{"Key":"repeatedly in","Fragments":["a"]},{"Key":"a tight","Fragments":["loop."]},{"Key":"Ok... I'll","Fragments":["stop"]},{"Key":"I'll stop","Fragments":["commenting"]},{"Key":"stop commenting","Fragments":["now!"]},{"Key":"commenting now!","Fragments":[":)"]},{"Key":" @helena","Fragments":["thanks."]},{"Key":"@helena thanks.","Fragments":["I"]},{"Key":"realize that","Fragments":["about","it","Dave"]},{"Key":"about join,","Fragments":["I'll"]},{"Key":"join, I'll","Fragments":["update"]},{"Key":"on repeatedly","Fragments":["calling"]},{"Key":"repeatedly calling","Fragments":["normalize_word"]},{"Key":"calling normalize_word","Fragments":["in"]},{"Key":"normalize_word in","Fragments":["the"]},{"Key":"`anagram?` function?","Fragments":["I"]},{"Key":"function? I","Fragments":["don't"]},{"Key":" Hmmm...","Fragments":["I"]},{"Key":"change things","Fragments":["up"]},{"Key":"that checks","Fragments":["for","each","if"]},{"Key":"for anagrams","Fragments":["expects"]},{"Key":"anagrams expects","Fragments":["the"]},{"Key":"normalized base","Fragments":["word."]},{"Key":"word. That","Fragments":["would"]},{"Key":"efficiency but","Fragments":["it"]},{"Key":"function less","Fragments":["maintainable"]},{"Key":"less maintainable","Fragments":["and"]},{"Key":"maintainable and","Fragments":["understandable."]},{"Key":"and understandable.","Fragments":["I"]},{"Key":"understandable. I","Fragments":["think"]},{"Key":"are currently","Fragments":["doing"]},{"Key":"currently doing","Fragments":["it,"]},{"Key":"in production,","Fragments":["consider"]},{"Key":"production, consider","Fragments":["the"]},{"Key":"the optimization","Fragments":["only"]},{"Key":"if benchmarking","Fragments":["showed"]},{"Key":"benchmarking showed","Fragments":["that"]},{"Key":"showed that","Fragments":["it"]},{"Key":"an issue.","Fragments":["What"]},{"Key":"issue. What","Fragments":["do"]},{"Key":"Oh, nevermind...","Fragments":["what"]},{"Key":"nevermind... what","Fragments":["I"]},{"Key":"suggested wouldn't","Fragments":["work"]},{"Key":"wouldn't work","Fragments":["because"]},{"Key":"word (before","Fragments":["normalizing)"]},{"Key":"(before normalizing)","Fragments":["isn't"]},{"Key":"normalizing) isn't","Fragments":["exactly"]},{"Key":"word as","Fragments":["the","the"]},{"Key":"the candidate.","Fragments":["I'm"]},{"Key":"candidate. I'm","Fragments":["sure"]},{"Key":"sure we","Fragments":["could"]},{"Key":"we could","Fragments":["think"]},{"Key":"around it,","Fragments":["but"]},{"Key":" hahahah","Fragments":["no"]},{"Key":"hahahah no","Fragments":["problem,"]},{"Key":"no problem,","Fragments":["not"]},{"Key":"problem, not","Fragments":["at"]},{"Key":"guess I'm","Fragments":["happy","so"]},{"Key":"current version,","Fragments":["I"]},{"Key":"version, I","Fragments":["like","decided"]},{"Key":"the readability.","Fragments":["I"]},{"Key":"opinion about","Fragments":["wether"]},{"Key":"about wether","Fragments":["those"]},{"Key":"wether those","Fragments":["calls"]},{"Key":"those calls","Fragments":["were"]},{"Key":"calls were","Fragments":["a"]},{"Key":"problem or","Fragments":["not"]},{"Key":" @eva","Fragments":["Took"]},{"Key":"@eva Took","Fragments":["your"]},{"Key":"Took your","Fragments":["advice"]},{"Key":"your advice","Fragments":["from","and"]},{"Key":"advice from","Fragments":["my"]},{"Key":"submission as","Fragments":["well","is.","it","i"]},{"Key":"my improvement","Fragments":["from"]},{"Key":"improvement from","Fragments":["the"]},{"Key":"could shorten","Fragments":["this","up"]},{"Key":"shorten this","Fragments":["a"]},{"Key":"defp pling(n)","Fragments":["when"]},{"Key":"pling(n) when","Fragments":["rem(n,"]},{"Key":"when rem(n,","Fragments":["3)"]},{"Key":"rem(n, 3)","Fragments":["=="]},{"Key":"3) ==","Fragments":["0,"]},{"Key":"== 0,","Fragments":["do:"]},{"Key":"0, do:","Fragments":["\"Pling\""]},{"Key":"defp pling(_),","Fragments":["do:"]},{"Key":"pling(_), do:","Fragments":["\"\""]},{"Key":" (`rem`","Fragments":["is"]},{"Key":"(`rem` is","Fragments":["allowed"]},{"Key":"use `Enum.map_join`","Fragments":["instead"]},{"Key":"`Enum.map_join` instead","Fragments":["of"]},{"Key":"that map+reduce","Fragments":["combo."]},{"Key":"probably shorten","Fragments":["to"]},{"Key":"shorten to","Fragments":["`Enum.map_join(fn"]},{"Key":"to `Enum.map_join(fn","Fragments":["{d,"]},{"Key":"`Enum.map_join(fn {d,","Fragments":["msg}"]},{"Key":"{d, msg}","Fragments":["-\u003e"]},{"Key":"msg} -\u003e","Fragments":["if"]},{"Key":"if divides?(n,","Fragments":["d),"]},{"Key":"divides?(n, d),","Fragments":["do:"]},{"Key":"d), do:","Fragments":["msg,"]},{"Key":"do: msg,","Fragments":["else:"]},{"Key":"msg, else:","Fragments":["\"\""]},{"Key":"else: \"\"","Fragments":["end)`"]},{"Key":"of regular","Fragments":["expressions,","expressions,"]},{"Key":"expressions, but","Fragments":["I"]},{"Key":"find another","Fragments":["way."]},{"Key":" `\u0026(\u00261","Fragments":["+"]},{"Key":"1)` looks","Fragments":["rather"]},{"Key":"looks rather","Fragments":["ugly,","weird."]},{"Key":"rather ugly,","Fragments":["I"]},{"Key":"ugly, I","Fragments":["wish"]},{"Key":"wish there","Fragments":["was"]},{"Key":"an `inc`","Fragments":["function"]},{"Key":"`inc` function","Fragments":["like","wouldn't"]},{"Key":"like in","Fragments":["Clojure","Ruby.","`count`"]},{"Key":"Clojure that","Fragments":["can"]},{"Key":"in higher","Fragments":["order"]},{"Key":"order functions.","Fragments":["`fn(x)","I"]},{"Key":"functions. `fn(x)","Fragments":["-\u003e"]},{"Key":" @karolann","Fragments":["divides?"]},{"Key":"@karolann divides?","Fragments":["now"]},{"Key":"divides? now","Fragments":["just"]},{"Key":"now just","Fragments":["takes"]},{"Key":"just takes","Fragments":["two"]},{"Key":"two arguments;","Fragments":["I"]},{"Key":"arguments; I","Fragments":["get"]},{"Key":"get annoyed","Fragments":["with"]},{"Key":"annoyed with","Fragments":["myself"]},{"Key":"with myself","Fragments":["when"]},{"Key":"myself when","Fragments":["I"]},{"Key":"pass things","Fragments":["to"]},{"Key":"that simply","Fragments":["get"]},{"Key":"simply get","Fragments":["passed"]},{"Key":"get passed","Fragments":["back"]},{"Key":"passed back","Fragments":["unchanged."]},{"Key":"use `id`","Fragments":["in"]},{"Key":"`id` in","Fragments":["Haskell"]},{"Key":"Haskell much","Fragments":["then?"]},{"Key":"much then?","Fragments":[":P"]},{"Key":" @johnnie","Fragments":[":D"]},{"Key":"Maybe this","Fragments":["is"]},{"Key":"issue of","Fragments":["anonymous"]},{"Key":"of anonymous","Fragments":["vs.","functions"]},{"Key":"anonymous vs.","Fragments":["named"]},{"Key":"vs. named","Fragments":["functions,"]},{"Key":"pass reducing_function","Fragments":["directly"]},{"Key":"reducing_function directly","Fragments":["as"]},{"Key":"directly as","Fragments":["the"]},{"Key":"the 2nd","Fragments":["param","list."]},{"Key":"2nd param","Fragments":["of"]},{"Key":"of reduce.","Fragments":["Perhaps"]},{"Key":"reduce. Perhaps","Fragments":["pminten"]},{"Key":"Perhaps pminten","Fragments":["can"]},{"Key":"pminten can","Fragments":["explain"]},{"Key":"can explain","Fragments":["more."]},{"Key":"the rules","Fragments":["based","for","stated","of","in"]},{"Key":"rules based","Fragments":["on"]},{"Key":"on pattern","Fragments":["matching","matching"]},{"Key":"matching because","Fragments":["it"]},{"Key":"it felt","Fragments":["easy","more","like"]},{"Key":"felt easy","Fragments":["to"]},{"Key":"add new","Fragments":["rules."]},{"Key":"bit complex","Fragments":["to","but","for"]},{"Key":"complex to","Fragments":["understand"]},{"Key":"understand with","Fragments":["the"]},{"Key":"and all,","Fragments":["but"]},{"Key":"all, but","Fragments":["I","it"]},{"Key":"it. Like","Fragments":["you"]},{"Key":"Like you","Fragments":["said,"]},{"Key":"you said,","Fragments":["it"]},{"Key":"avoids iterating","Fragments":["over"]},{"Key":"lists more","Fragments":["than","than"]},{"Key":"any clearer","Fragments":["if"]},{"Key":"clearer if","Fragments":["you","different"]},{"Key":"explicit case","Fragments":["the"]},{"Key":"actually adds","Fragments":["distance?"]},{"Key":"adds distance?","Fragments":["By"]},{"Key":"distance? By","Fragments":["that"]},{"Key":"By that","Fragments":["I"]},{"Key":"mean reversing","Fragments":["the"]},{"Key":"reversing the","Fragments":["order","list","elements","two"]},{"Key":"two function","Fragments":["clauses","clauses"]},{"Key":"clauses (I'm","Fragments":["not"]},{"Key":"(I'm not","Fragments":["sure","*totally*"]},{"Key":"right term","Fragments":["here)"]},{"Key":"term here)","Fragments":["and"]},{"Key":"here) and","Fragments":["putting"]},{"Key":"the `when`","Fragments":["on"]},{"Key":"`when` on","Fragments":["the"]},{"Key":"case where","Fragments":["`n1","there","the","length","str='"]},{"Key":"where `n1","Fragments":["!="]},{"Key":"`n1 !=","Fragments":["n2`?"]},{"Key":"So, you","Fragments":["would","eliminated"]},{"Key":"would basically","Fragments":["be"]},{"Key":"basically be","Fragments":["saying,"]},{"Key":"be saying,","Fragments":["when"]},{"Key":"saying, when","Fragments":["the"]},{"Key":"nucleotides are","Fragments":["different","the"]},{"Key":"different add","Fragments":["to"]},{"Key":"the distance,","Fragments":["otherwise,"]},{"Key":"distance, otherwise,","Fragments":["I"]},{"Key":"otherwise, I","Fragments":["don't"]},{"Key":"nucleotides are,","Fragments":["just"]},{"Key":"are, just","Fragments":["pass"]},{"Key":"same distance","Fragments":["along..."]},{"Key":"it wouldn't","Fragments":["be"]},{"Key":"wouldn't be","Fragments":["as"]},{"Key":"be as","Fragments":["explicit,","if","good"]},{"Key":"as explicit,","Fragments":["but"]},{"Key":"but instead","Fragments":["of","it"]},{"Key":"a `when`","Fragments":["clause,"]},{"Key":"`when` clause,","Fragments":["could"]},{"Key":"clause, could","Fragments":["you"]},{"Key":"clauses look","Fragments":["something"]},{"Key":"defp do_hamming_distance([n1","Fragments":["|","|"]},{"Key":"do_hamming_distance([n1 |","Fragments":["tail_1],","tail_1],"]},{"Key":"| tail_1],","Fragments":["[n2","[n1"]},{"Key":"tail_1], [n2","Fragments":["|"]},{"Key":"[n2 |","Fragments":["tail_2],"]},{"Key":"| tail_2],","Fragments":["distance)","distance)"]},{"Key":"tail_2], distance)","Fragments":["...","..."]},{"Key":"tail_1], [n1","Fragments":["|"]},{"Key":"[n1 |","Fragments":["tail_2],"]},{"Key":"thinking through","Fragments":["it","it"]},{"Key":"it correctly,","Fragments":["the","but"]},{"Key":"correctly, the","Fragments":["first"]},{"Key":"match if","Fragments":["the","they","you","you"]},{"Key":"nucleotides were","Fragments":["different"]},{"Key":"were different","Fragments":["and"]},{"Key":"different and","Fragments":["the","ordered,"]},{"Key":"second would","Fragments":["match"]},{"Key":"Just kind","Fragments":["throwing"]},{"Key":"kind throwing","Fragments":["that"]},{"Key":"throwing that","Fragments":["out"]},{"Key":"for consideration,","Fragments":["but"]},{"Key":"consideration, but","Fragments":["like"]},{"Key":"but like","Fragments":["I"]},{"Key":"more subtle","Fragments":["and"]},{"Key":"subtle and","Fragments":["probably"]},{"Key":"probably harder","Fragments":["to"]},{"Key":"to notice","Fragments":["the","when","the"]},{"Key":"notice the","Fragments":["difference","performance","testsuite","performance"]},{"Key":"regex could","Fragments":["be","be"]},{"Key":"made slightly","Fragments":["less"]},{"Key":"less ugly","Fragments":["like"]},{"Key":"ugly like","Fragments":["this:"]},{"Key":"like this:","Fragments":["`%r/[^\\p{L}\\p{N}\\s]/`","a","`?a`."]},{"Key":"this: `%r/[^\\p{L}\\p{N}\\s]/`","Fragments":["(i.e."]},{"Key":"`%r/[^\\p{L}\\p{N}\\s]/` (i.e.","Fragments":["filter"]},{"Key":"(i.e. filter","Fragments":["out"]},{"Key":"out anything","Fragments":["not"]},{"Key":"anything not","Fragments":["a"]},{"Key":"a letter,","Fragments":["a"]},{"Key":"letter, a","Fragments":["number","number"]},{"Key":"number or","Fragments":["a","a"]},{"Key":"is indeed","Fragments":["the","a","not","a"]},{"Key":"indeed the","Fragments":["best"]},{"Key":"way right","Fragments":["now"]},{"Key":"now and","Fragments":["for"]},{"Key":"the foreseeable","Fragments":["future."]},{"Key":"foreseeable future.","Fragments":["As"]},{"Key":"future. As","Fragments":["things"]},{"Key":"As things","Fragments":["stand"]},{"Key":"things stand","Fragments":["right"]},{"Key":"stand right","Fragments":["now"]},{"Key":"now there","Fragments":["is"]},{"Key":"no chance","Fragments":["of"]},{"Key":"like `is_alpha`","Fragments":["going"]},{"Key":"`is_alpha` going","Fragments":["in"]},{"Key":"going in","Fragments":["to"]},{"Key":"The `\u0026(\u00261","Fragments":["+"]},{"Key":"1)` isn't","Fragments":["particularly"]},{"Key":"isn't particularly","Fragments":["pretty,"]},{"Key":"particularly pretty,","Fragments":["true."]},{"Key":"pretty, true.","Fragments":["An"]},{"Key":"true. An","Fragments":["`inc`"]},{"Key":"An `inc`","Fragments":["function"]},{"Key":"function wouldn't","Fragments":["necessarily"]},{"Key":"wouldn't necessarily","Fragments":["improve"]},{"Key":"necessarily improve","Fragments":["it"]},{"Key":"improve it","Fragments":["too"]},{"Key":"much though,","Fragments":["you'd"]},{"Key":"though, you'd","Fragments":["end"]},{"Key":"up calling","Fragments":["it"]},{"Key":" @violette","Fragments":["That"]},{"Key":"@violette That","Fragments":["should"]},{"Key":"That should","Fragments":["work.","help"]},{"Key":"should work.","Fragments":["It's"]},{"Key":"work. It's","Fragments":["not"]},{"Key":"not totally","Fragments":["equivalent","sure,"]},{"Key":"totally equivalent","Fragments":["though,"]},{"Key":"equivalent though,","Fragments":["`1"]},{"Key":"though, `1","Fragments":["=="]},{"Key":"`1 ==","Fragments":["1.0`","1.0`"]},{"Key":"== 1.0`","Fragments":["is","is"]},{"Key":"1.0` is","Fragments":["true","false,","true."]},{"Key":"true while","Fragments":["`case"]},{"Key":"while `case","Fragments":["{1,"]},{"Key":"`case {1,","Fragments":["1.0}"]},{"Key":"{1, 1.0}","Fragments":["do"]},{"Key":"1.0} do","Fragments":["{a,"]},{"Key":"do {a,","Fragments":["a}"]},{"Key":"{a, a}","Fragments":["-\u003e"]},{"Key":"a} -\u003e","Fragments":["true;"]},{"Key":"-\u003e true;","Fragments":["{_"]},{"Key":"true; {_","Fragments":[",_}"]},{"Key":"{_ ,_}","Fragments":["-\u003e"]},{"Key":",_} -\u003e","Fragments":["false"]},{"Key":"-\u003e false","Fragments":["end`"]},{"Key":"false end`","Fragments":["is"]},{"Key":"false. I","Fragments":["suspect"]},{"Key":"suspect strict","Fragments":["equality"]},{"Key":"equality (`===`)","Fragments":["is","and"]},{"Key":"(`===`) is","Fragments":["used"]},{"Key":"complex but","Fragments":["I"]},{"Key":"your recursive","Fragments":["approach"]},{"Key":"recursive approach","Fragments":["!"]},{"Key":"the Enum.zip","Fragments":["|\u003e"]},{"Key":"Enum.zip |\u003e","Fragments":["Enum.filter"]},{"Key":"|\u003e Enum.filter","Fragments":["|\u003e"]},{"Key":"Enum.filter |\u003e","Fragments":["Enum.count"]},{"Key":"|\u003e Enum.count","Fragments":["to"]},{"Key":"Enum.count to","Fragments":["solve"]},{"Key":"this problem,","Fragments":["I"]},{"Key":"problem, I","Fragments":["agree"]},{"Key":"this implies","Fragments":["iterating"]},{"Key":"implies iterating","Fragments":["the"]},{"Key":"iterating the","Fragments":["lists"]},{"Key":"I come","Fragments":["from"]},{"Key":"Erlang world…","Fragments":["I"]},{"Key":"world… I","Fragments":["just"]},{"Key":"learned Elixir","Fragments":["in"]},{"Key":"Elixir in","Fragments":["ErlangDC","several"]},{"Key":"in ErlangDC","Fragments":["(Dec"]},{"Key":"ErlangDC (Dec","Fragments":["2013)"]},{"Key":"(Dec 2013)","Fragments":[":)"]},{"Key":"you avoid","Fragments":["`cond`","that?","that?","recomputing","that?"]},{"Key":"avoid `cond`","Fragments":["on"]},{"Key":" `find_answer`","Fragments":["could"]},{"Key":"`find_answer` could","Fragments":["be"]},{"Key":" BTW,","Fragments":["I"]},{"Key":"BTW, I","Fragments":["didn't"]},{"Key":"what ``cond``","Fragments":["does"]},{"Key":"``cond`` does","Fragments":["and"]},{"Key":"does and","Fragments":["it"]},{"Key":"was forbidding","Fragments":["me"]},{"Key":"forbidding me","Fragments":["from"]},{"Key":"from compiling","Fragments":["my"]},{"Key":"compiling my","Fragments":["module,"]},{"Key":"my module,","Fragments":["so"]},{"Key":"I removed","Fragments":["it","the","the","the","it.","the"]},{"Key":"This second","Fragments":["submission"]},{"Key":"second submission","Fragments":["is"]},{"Key":"first just","Fragments":["with"]},{"Key":"docs updated","Fragments":["a"]},{"Key":"updated a","Fragments":["little"]},{"Key":"implementation (not","Fragments":["using"]},{"Key":"(not using","Fragments":["built","`=="]},{"Key":"using built","Fragments":["in"]},{"Key":"of learning,","Fragments":["etc)."]},{"Key":"learning, etc).","Fragments":[":)"]},{"Key":"of thing,","Fragments":["so"]},{"Key":"so it'd","Fragments":["be","probably"]},{"Key":"worth figuring","Fragments":["out"]},{"Key":"it. There's","Fragments":["an"]},{"Key":"example on","Fragments":["this"]},{"Key":"this page","Fragments":["in","and"]},{"Key":"page in","Fragments":["the"]},{"Key":"the getting","Fragments":["started"]},{"Key":"getting started","Fragments":["guide:"]},{"Key":"started guide:","Fragments":["http://elixir-lang.org/getting_started/2.html."]},{"Key":"guide: http://elixir-lang.org/getting_started/2.html.","Fragments":["Just"]},{"Key":"http://elixir-lang.org/getting_started/2.html. Just","Fragments":["do"]},{"Key":"Just do","Fragments":["a"]},{"Key":"a search","Fragments":["for"]},{"Key":"for \"Cond\"","Fragments":["on"]},{"Key":"\"Cond\" on","Fragments":["that"]},{"Key":"that page","Fragments":["(unfortunately"]},{"Key":"page (unfortunately","Fragments":["there's"]},{"Key":"(unfortunately there's","Fragments":["no"]},{"Key":"no anchor","Fragments":["for"]},{"Key":"anchor for","Fragments":["that"]},{"Key":"But basically","Fragments":["it"]},{"Key":"basically it","Fragments":["would"]},{"Key":" allCaps(input)","Fragments":["-\u003e"]},{"Key":"allCaps(input) -\u003e","Fragments":["\"Woah,"]},{"Key":" empty(input)","Fragments":["-\u003e"]},{"Key":"empty(input) -\u003e","Fragments":["\"Fine."]},{"Key":"... etc","Fragments":["..."]},{"Key":"quick note","Fragments":["on"]},{"Key":"note on","Fragments":["conventions.","implementation","style:"]},{"Key":"on conventions.","Fragments":["I"]},{"Key":"conventions. I","Fragments":["think"]},{"Key":"think snake_case","Fragments":["is"]},{"Key":"snake_case is","Fragments":["the"]},{"Key":"Elixir, following","Fragments":["Ruby."]},{"Key":"following Ruby.","Fragments":["Also,"]},{"Key":"Also, predicate","Fragments":["methods"]},{"Key":"are typically","Fragments":["suffixed"]},{"Key":"typically suffixed","Fragments":["with"]},{"Key":"suffixed with","Fragments":["a"]},{"Key":"mark, like","Fragments":["`question?`."]},{"Key":"One final","Fragments":["note"]},{"Key":"final note","Fragments":["about"]},{"Key":"note about","Fragments":["naming.","this"]},{"Key":"about naming.","Fragments":["Two"]},{"Key":"naming. Two","Fragments":["of"]},{"Key":"test methods","Fragments":["(`allCaps`"]},{"Key":"methods (`allCaps`","Fragments":["and"]},{"Key":"(`allCaps` and","Fragments":["`empty`)"]},{"Key":"and `empty`)","Fragments":["are"]},{"Key":"`empty`) are","Fragments":["named"]},{"Key":"after string","Fragments":["parsing"]},{"Key":"string parsing","Fragments":["concerns,"]},{"Key":"parsing concerns,","Fragments":["and"]},{"Key":"concerns, and","Fragments":["your"]},{"Key":"method (`question`)","Fragments":["is"]},{"Key":"(`question`) is","Fragments":["more"]},{"Key":"more semantic,","Fragments":["about"]},{"Key":"semantic, about","Fragments":["what"]},{"Key":"what type","Fragments":["of"]},{"Key":"of sentence","Fragments":["the"]},{"Key":"sentence the","Fragments":["teenager"]},{"Key":"teenager is","Fragments":["hearing.","feeling"]},{"Key":"is hearing.","Fragments":["What"]},{"Key":"hearing. What","Fragments":["would"]},{"Key":"naming all","Fragments":["of"]},{"Key":"methods based","Fragments":["on"]},{"Key":"of sentence?","Fragments":["Thoughts"]},{"Key":"sentence? Thoughts","Fragments":["might"]},{"Key":"Thoughts might","Fragments":["be"]},{"Key":"be `silence?`","Fragments":["or"]},{"Key":"simpler to","Fragments":["use"]},{"Key":"use `Bitwise`","Fragments":["and"]},{"Key":"`Bitwise` and","Fragments":["just"]},{"Key":"just check","Fragments":["if","to","to"]},{"Key":"the lowest","Fragments":["bit","common"]},{"Key":"lowest bit","Fragments":["is"]},{"Key":"bit is","Fragments":["on"]},{"Key":"then right","Fragments":["shift"]},{"Key":"right shift","Fragments":["by"]},{"Key":"shift by","Fragments":["one?"]},{"Key":" `allergic_to`","Fragments":["can"]},{"Key":"`allergic_to` can","Fragments":["be"]},{"Key":"be expressed","Fragments":["more","as"]},{"Key":"expressed more","Fragments":["simply"]},{"Key":"more simply","Fragments":["using"]},{"Key":"simply using","Fragments":["`Bitwise`."]},{"Key":"It actually","Fragments":["translates","does"]},{"Key":"actually translates","Fragments":["to"]},{"Key":"translates to","Fragments":["a","erlang's","`a-zA-Z`."]},{"Key":"a tree","Fragments":["of","and"]},{"Key":"tree of","Fragments":["`case`"]},{"Key":"`case` expressions","Fragments":["with"]},{"Key":"expressions with","Fragments":["`true`"]},{"Key":"`true` and","Fragments":["`false`"]},{"Key":"and `false`","Fragments":["as"]},{"Key":"`false` as","Fragments":["clauses."]},{"Key":"as clauses.","Fragments":["But"]},{"Key":"clauses. But","Fragments":["that's"]},{"Key":"that common","Fragments":["in"]},{"Key":"Elixir either,","Fragments":["most"]},{"Key":"either, most","Fragments":["of"]},{"Key":"time we","Fragments":["use","hang"]},{"Key":"we use","Fragments":["head"]},{"Key":"use head","Fragments":["matching","matching"]},{"Key":"head matching","Fragments":["or","to"]},{"Key":"matching or","Fragments":["case"]},{"Key":"or case","Fragments":["expressions."]},{"Key":"case expressions.","Fragments":["The"]},{"Key":"expressions. The","Fragments":["fact"]},{"Key":"comes up","Fragments":["in"]},{"Key":"first exercise","Fragments":["of"]},{"Key":"exercism has","Fragments":["more"]},{"Key":"exercism tradition","Fragments":["that"]},{"Key":"tradition that","Fragments":["\"bob\""]},{"Key":"that \"bob\"","Fragments":["is"]},{"Key":"\"bob\" is","Fragments":["the"]},{"Key":"Awesome, great","Fragments":["to"]},{"Key":"great to","Fragments":["know!","have","me."]},{"Key":"to know!","Fragments":["Thank"]},{"Key":"know! Thank","Fragments":["you"]},{"Key":"you very","Fragments":["much"]},{"Key":"Aha. I","Fragments":["see"]},{"Key":"see what's","Fragments":["wrong.","up.","available"]},{"Key":"what's wrong.","Fragments":["I'm"]},{"Key":"wrong. I'm","Fragments":["counting"]},{"Key":"I'm counting","Fragments":["multiples"]},{"Key":"counting multiples","Fragments":["of"]},{"Key":"of 15","Fragments":["twice"]},{"Key":"15 twice","Fragments":["(once"]},{"Key":"twice (once","Fragments":["in"]},{"Key":"(once in","Fragments":["the"]},{"Key":"5 factors","Fragments":["list)."]},{"Key":"factors list).","Fragments":["I"]},{"Key":"list). I","Fragments":["could"]},{"Key":"probably figure","Fragments":["out"]},{"Key":"nice way","Fragments":["to","to"]},{"Key":"to subtract","Fragments":["that"]},{"Key":"subtract that","Fragments":["out","leaving"]},{"Key":"for arbitrary","Fragments":["factors,"]},{"Key":"arbitrary factors,","Fragments":["but"]},{"Key":"factors, but","Fragments":["maybe"]},{"Key":"maybe I'm","Fragments":["just"]},{"Key":"take into","Fragments":["account","account"]},{"Key":"into account","Fragments":["that","Unicode."]},{"Key":"account that","Fragments":["you're"]},{"Key":"avoid functions","Fragments":["it"]},{"Key":"The function/f","Fragments":["and"]},{"Key":"function/f and","Fragments":["result/acc"]},{"Key":"and result/acc","Fragments":["arguments"]},{"Key":"result/acc arguments","Fragments":["are"]},{"Key":"order than","Fragments":["reduce","`Enum.reduce`"]},{"Key":"than reduce","Fragments":["which"]},{"Key":"reduce which","Fragments":["very"]},{"Key":"which very","Fragments":["slightly"]},{"Key":"very slightly","Fragments":["decreases"]},{"Key":"slightly decreases","Fragments":["readability."]},{"Key":"decreases readability.","Fragments":["But"]},{"Key":"readability. But","Fragments":["that's"]},{"Key":"Very simplified","Fragments":["based"]},{"Key":"simplified based","Fragments":["on"]},{"Key":"the suggestions","Fragments":["by","incrementally.","you"]},{"Key":"bet ``cond","Fragments":["do``"]},{"Key":"``cond do``","Fragments":["translates"]},{"Key":"do`` translates","Fragments":["to"]},{"Key":"to erlang's","Fragments":["`ìf``"]},{"Key":"erlang's `ìf``","Fragments":["…"]},{"Key":"`ìf`` …","Fragments":["that's"]},{"Key":"… that's","Fragments":["why"]},{"Key":"didn't thought","Fragments":["of"]},{"Key":"using something","Fragments":["like","along"]},{"Key":"on elixir,","Fragments":["but"]},{"Key":"elixir, but","Fragments":["on"]},{"Key":"my Erlang","Fragments":["code"]},{"Key":"Erlang code","Fragments":["I"]},{"Key":"construct as","Fragments":["much"]},{"Key":"Quick cleanup","Fragments":["of"]},{"Key":"cleanup of","Fragments":["some"]},{"Key":" @deangelo","Fragments":["From"]},{"Key":"@deangelo From","Fragments":["the"]},{"Key":" Keep","Fragments":["your","in"]},{"Key":"Keep your","Fragments":["hands"]},{"Key":"your hands","Fragments":["off"]},{"Key":"hands off","Fragments":["that"]},{"Key":"off that","Fragments":["collect/map/fmap/whatchamacallit"]},{"Key":"that collect/map/fmap/whatchamacallit","Fragments":["functionality"]},{"Key":" provided","Fragments":["by"]},{"Key":"your standard","Fragments":["library!"]},{"Key":" Solve","Fragments":["this"]},{"Key":"Solve this","Fragments":["one"]},{"Key":"one yourself","Fragments":["using"]},{"Key":"other basic","Fragments":["tools"]},{"Key":"basic tools","Fragments":["instead."]},{"Key":"Ah, yeah,","Fragments":["good"]},{"Key":"yeah, good","Fragments":["point.","improvement!"]},{"Key":"will switch","Fragments":["those"]},{"Key":"switch those","Fragments":["params"]},{"Key":"those params","Fragments":["around"]},{"Key":"params around","Fragments":["so"]},{"Key":"it matches","Fragments":["the","uppercase","what"]},{"Key":"call signature","Fragments":["of"]},{"Key":"signature of","Fragments":["`Enum.reduce`."]},{"Key":"of `Enum.reduce`.","Fragments":["I"]},{"Key":"`Enum.reduce`. I","Fragments":["guess"]},{"Key":"it's usually","Fragments":["good"]},{"Key":"usually good","Fragments":["to"]},{"Key":"last param","Fragments":["anyway."]},{"Key":"param anyway.","Fragments":[":)"]},{"Key":"Cool. Yeah,","Fragments":["I"]},{"Key":"should get","Fragments":["used","equal","rid","rid"]},{"Key":"get used","Fragments":["to","to"]},{"Key":"the Stream","Fragments":["module"]},{"Key":"Stream module","Fragments":["functions."]},{"Key":"module functions.","Fragments":["I'll",":)"]},{"Key":"functions. I'll","Fragments":["submit"]},{"Key":"Yup, function","Fragments":["last"]},{"Key":"function last","Fragments":["is"]},{"Key":"last is","Fragments":["pretty"]},{"Key":"code look","Fragments":["prettier.","better"]},{"Key":"think `split`","Fragments":["should"]},{"Key":"`split` should","Fragments":["really"]},{"Key":"really be","Fragments":["declared","the","using"]},{"Key":"be declared","Fragments":["as"]},{"Key":"declared as","Fragments":["a"]},{"Key":"function (you","Fragments":["can"]},{"Key":"(you can","Fragments":["do"]},{"Key":"using `defp`)","Fragments":["since"]},{"Key":"`defp`) since","Fragments":["it's"]},{"Key":"for internal","Fragments":["use."]},{"Key":"internal use.","Fragments":["I"]},{"Key":"use. I","Fragments":["second"]},{"Key":"second the","Fragments":["suggestion"]},{"Key":"the suggestion","Fragments":["about","on","on","to"]},{"Key":"about `Regex.scan`,","Fragments":["since"]},{"Key":"`Regex.scan`, since","Fragments":["it"]},{"Key":"tells more","Fragments":["about"]},{"Key":"you're interested","Fragments":["in,","in"]},{"Key":"interested in,","Fragments":["rather"]},{"Key":"in, rather","Fragments":["than"]},{"Key":"probably choose","Fragments":["a"]},{"Key":"more context-sensitive","Fragments":["name"]},{"Key":"context-sensitive name","Fragments":["for"]},{"Key":"the `dict`","Fragments":["param"]},{"Key":"`dict` param","Fragments":["of"]},{"Key":"the callback","Fragments":["function;","since"]},{"Key":"callback function;","Fragments":["something"]},{"Key":"function; something","Fragments":["like"]},{"Key":"like frequencies","Fragments":["or"]},{"Key":"frequencies or","Fragments":["counts,"]},{"Key":"or counts,","Fragments":["maybe."]},{"Key":"one, since","Fragments":["I"]},{"Key":"haven't been","Fragments":["doing","giving","able"]},{"Key":"doing elixir","Fragments":["for"]},{"Key":"long time,","Fragments":["but"]},{"Key":"time, but","Fragments":["I","certainly"]},{"Key":"usually indent","Fragments":["the"]},{"Key":"indent the","Fragments":["pipes"]},{"Key":"the pipes","Fragments":["when","come"]},{"Key":"pipes when","Fragments":["using"]},{"Key":"using multiline","Fragments":["chaining;"]},{"Key":"multiline chaining;","Fragments":["I"]},{"Key":"chaining; I","Fragments":["think"]},{"Key":"show what;s","Fragments":["happening."]},{"Key":"what;s happening.","Fragments":["I'm"]},{"Key":"happening. I'm","Fragments":["not"]},{"Key":"is popular","Fragments":["convention"]},{"Key":"popular convention","Fragments":["though."]},{"Key":"general the","Fragments":["solution","rule"]},{"Key":"This pipe","Fragments":["convention"]},{"Key":"pipe convention","Fragments":["is"]},{"Key":"- `defp`...","Fragments":["will"]},{"Key":"`defp`... will","Fragments":["fix."]},{"Key":"- change","Fragments":["name"]},{"Key":"change name","Fragments":["of"]},{"Key":"of `dict`...","Fragments":["will"]},{"Key":"`dict`... will","Fragments":["fix."]},{"Key":"- `Regex.scan`...","Fragments":["fantastic"]},{"Key":"`Regex.scan`... fantastic","Fragments":["idea"]},{"Key":"fantastic idea","Fragments":["and"]},{"Key":"- Pipe","Fragments":["convention..."]},{"Key":"Pipe convention...","Fragments":["could"]},{"Key":"convention... could","Fragments":["use"]},{"Key":"to José's","Fragments":["style"]},{"Key":"José's style","Fragments":["or"]},{"Key":"or somebody","Fragments":["else"]},{"Key":"somebody else","Fragments":["influential"]},{"Key":"else influential","Fragments":["so"]},{"Key":"influential so","Fragments":["I"]},{"Key":"do what's","Fragments":["most"]},{"Key":"what's most","Fragments":["accepted."]},{"Key":" @angus","Fragments":["Once"]},{"Key":"@angus Once","Fragments":["again,"]},{"Key":"Once again,","Fragments":["I"]},{"Key":"again, I","Fragments":["thank","probably"]},{"Key":"I thank","Fragments":["you"]},{"Key":"code even","Fragments":["tighter."]},{"Key":"even tighter.","Fragments":["You"]},{"Key":"tighter. You","Fragments":["guys"]},{"Key":"You guys","Fragments":["are"]},{"Key":"guys are","Fragments":["definitely"]},{"Key":"are definitely","Fragments":["keeping","style"]},{"Key":"definitely keeping","Fragments":["me"]},{"Key":"keeping me","Fragments":["on"]},{"Key":"my toes.","Fragments":[";P"]},{"Key":"consider to","Fragments":["hold"]},{"Key":"to hold","Fragments":["the"]},{"Key":"hold the","Fragments":["most"]},{"Key":"most standard","Fragments":["style"]},{"Key":"standard style","Fragments":["code."]},{"Key":"In `list`","Fragments":["you"]},{"Key":"`list` you","Fragments":["could"]},{"Key":"use `|\u003e","Fragments":["Enum.filter_map(\u0026match?(\u00261,"]},{"Key":"`|\u003e Enum.filter_map(\u0026match?(\u00261,","Fragments":["{1,"]},{"Key":"Enum.filter_map(\u0026match?(\u00261, {1,","Fragments":["_}),"]},{"Key":"{1, _}),","Fragments":["\u0026elem(\u00261,"]},{"Key":"_}), \u0026elem(\u00261,","Fragments":["1))`"]},{"Key":"\u0026elem(\u00261, 1))`","Fragments":["to"]},{"Key":"1))` to","Fragments":["abbreviate,"]},{"Key":"to abbreviate,","Fragments":["not"]},{"Key":"abbreviate, not","Fragments":["saying"]},{"Key":"saying it's","Fragments":["more"]},{"Key":"ask for","Fragments":["a"]},{"Key":"link how","Fragments":["they're"]},{"Key":"how they're","Fragments":["using"]},{"Key":"they're using","Fragments":["pipes,"]},{"Key":"using pipes,","Fragments":["of"]},{"Key":"pipes, of","Fragments":["course"]},{"Key":"course his","Fragments":["language"]},{"Key":"his language","Fragments":["repository"]},{"Key":"language repository","Fragments":["should"]},{"Key":"repository should","Fragments":["be"]},{"Key":"good style.","Fragments":[":P"]},{"Key":"Thanks. I've","Fragments":["send"]},{"Key":"a note","Fragments":["about","to","that"]},{"Key":"wasn't totally","Fragments":["sure","clear"]},{"Key":"totally sure","Fragments":["at"]},{"Key":"sure at","Fragments":["what"]},{"Key":"what level","Fragments":["to"]},{"Key":"level to","Fragments":["reinvent","avoid"]},{"Key":"to reinvent","Fragments":["the"]},{"Key":"reinvent the","Fragments":["wheel"]},{"Key":"the wheel","Fragments":["on"]},{"Key":"wheel on","Fragments":["this"]},{"Key":"figured since","Fragments":["I"]},{"Key":"I re-implemented","Fragments":["`Enum.reduce`"]},{"Key":"re-implemented `Enum.reduce`","Fragments":["and"]},{"Key":"and `Enum.reverse`","Fragments":["in"]},{"Key":"`Enum.reverse` in","Fragments":["the"]},{"Key":"previous exercise","Fragments":["I"]},{"Key":"was safe","Fragments":["to"]},{"Key":"safe to","Fragments":["just"]},{"Key":"built-in versions","Fragments":["this"]},{"Key":"versions this","Fragments":["time."]},{"Key":"nice. Nice","Fragments":["named"]},{"Key":"Nice named","Fragments":["functions"]},{"Key":"for detecting","Fragments":["the","if"]},{"Key":"detecting the","Fragments":["different"]},{"Key":"different types","Fragments":["of","of"]},{"Key":"of sentences.","Fragments":["Nice"]},{"Key":"sentences. Nice","Fragments":["use"]},{"Key":"`silent?`, `question?`","Fragments":["and"]},{"Key":"`shouting?` functions","Fragments":["part"]},{"Key":"functions part","Fragments":["of"]},{"Key":"the module?","Fragments":["I"]},{"Key":"I sort","Fragments":["of"]},{"Key":"see those","Fragments":["more"]},{"Key":"those more","Fragments":["as"]},{"Key":"as implementation","Fragments":["details."]},{"Key":"implementation details.","Fragments":["What"]},{"Key":"details. What","Fragments":["do"]},{"Key":"think? If","Fragments":["you"]},{"Key":"you didn't","Fragments":["already","already","know","have","use"]},{"Key":"didn't already","Fragments":["know,","know,"]},{"Key":"already know,","Fragments":["you","`def`"]},{"Key":"make functions","Fragments":["private","private"]},{"Key":"exercise seemed","Fragments":["like"]},{"Key":"practice regular","Fragments":["expressions"]},{"Key":"elixir. I","Fragments":["was"]},{"Key":"an `Elixir.match?/2`","Fragments":["function"]},{"Key":"`Elixir.match?/2` function","Fragments":["that"]},{"Key":"always returned","Fragments":["false"]},{"Key":"returned false","Fragments":["for"]},{"Key":"false for","Fragments":["me,","any"]},{"Key":"explicitly use","Fragments":["`Regex.match?/2`"]},{"Key":"use `Regex.match?/2`","Fragments":["to"]},{"Key":"`Regex.match?/2` to","Fragments":["get"]},{"Key":"was inspired","Fragments":["by"]},{"Key":"example `@brayan`","Fragments":["declaration"]},{"Key":"`@brayan` declaration","Fragments":["to"]},{"Key":"declaration to","Fragments":["practice","the"]},{"Key":"practice specifying","Fragments":["my"]},{"Key":"specifying my","Fragments":["function"]},{"Key":"my function","Fragments":["signatures."]},{"Key":"function signatures.","Fragments":["The"]},{"Key":"signatures. The","Fragments":["problem"]},{"Key":"problem seemed","Fragments":["like"]},{"Key":"practice tail-recursion","Fragments":["as"]},{"Key":"tail-recursion as","Fragments":["well,"]},{"Key":"well, not","Fragments":["to"]},{"Key":"mention multiple","Fragments":["function"]},{"Key":"heads. This","Fragments":["problem"]},{"Key":"This problem","Fragments":["seems","itself"]},{"Key":"problem seems","Fragments":["particularly"]},{"Key":"seems particularly","Fragments":["well-suited"]},{"Key":"particularly well-suited","Fragments":["to"]},{"Key":"well-suited to","Fragments":["functional"]},{"Key":"to functional","Fragments":["programming,","languages,"]},{"Key":"shorter solution,","Fragments":["but"]},{"Key":"wanted more","Fragments":["practice"]},{"Key":"more practice","Fragments":["with"]},{"Key":"practice with","Fragments":["`@brayan`"]},{"Key":"with `@brayan`","Fragments":["so"]},{"Key":"`@brayan` so","Fragments":["I"]},{"Key":"split it","Fragments":["into","again","and","in"]},{"Key":"tiny functions.","Fragments":["I"]},{"Key":"noticed that,","Fragments":["while"]},{"Key":"that, while","Fragments":["the"]},{"Key":"the bodies","Fragments":["of"]},{"Key":"are more-or-less","Fragments":["easy"]},{"Key":"more-or-less easy","Fragments":["to"]},{"Key":"read, they","Fragments":["seem"]},{"Key":"they seem","Fragments":["to","harder"]},{"Key":"get swallowed","Fragments":["up"]},{"Key":"swallowed up","Fragments":["by"]},{"Key":"up by","Fragments":["the","replacing","`[[:alpha:]]`...","using"]},{"Key":"there I","Fragments":["was"]},{"Key":"built-in increment","Fragments":["function,"]},{"Key":"increment function,","Fragments":["or"]},{"Key":"least not","Fragments":["one","at"]},{"Key":"could find,","Fragments":["so"]},{"Key":"find, so","Fragments":["I"]},{"Key":"wrote one.","Fragments":["This"]},{"Key":"one. This","Fragments":["was"]},{"Key":"more silliness","Fragments":["than"]},{"Key":"silliness than","Fragments":["usefulness,"]},{"Key":"than usefulness,","Fragments":["since"]},{"Key":"usefulness, since","Fragments":["I"]},{"Key":"filter empty","Fragments":["strings"]},{"Key":"strings from","Fragments":["my"]},{"Key":"what we're","Fragments":["here"]},{"Key":"we're here","Fragments":["for."]},{"Key":"here for.","Fragments":[":)"]},{"Key":"show how","Fragments":["`filter`"]},{"Key":"how `filter`","Fragments":["is"]},{"Key":"`filter` is","Fragments":["implemented"]},{"Key":"is implemented","Fragments":["in","it"]},{"Key":"of `reduce`","Fragments":["so","...","(although","...","and","to"]},{"Key":"`reduce` so","Fragments":["it's"]},{"Key":"it's fine","Fragments":["to"]},{"Key":" Usually","Fragments":["we","the"]},{"Key":"Usually we","Fragments":["just"]},{"Key":"write `\u0026(\u00261+1)`","Fragments":["when"]},{"Key":"`\u0026(\u00261+1)` when","Fragments":["we"]},{"Key":"when we","Fragments":["need"]},{"Key":"we need","Fragments":["`inc`."]},{"Key":"need `inc`.","Fragments":["So"]},{"Key":"`inc`. So","Fragments":["there's"]},{"Key":"So there's","Fragments":["not","a","that."]},{"Key":"much need","Fragments":["for"]},{"Key":" `List.t`","Fragments":["is"]},{"Key":"`List.t` is","Fragments":["not"]},{"Key":"valid type","Fragments":["spec"]},{"Key":"type spec","Fragments":["btw,","included"]},{"Key":"spec btw,","Fragments":["there"]},{"Key":"btw, there","Fragments":["is"]},{"Key":"no `t`","Fragments":["type"]},{"Key":"`t` type","Fragments":["in"]},{"Key":"type in","Fragments":["the"]},{"Key":"library documentation","Fragments":["of","doesn't"]},{"Key":"documentation of","Fragments":["`List`.","records"]},{"Key":"of `List`.","Fragments":["For"]},{"Key":"`List`. For","Fragments":["lists"]},{"Key":"For lists","Fragments":["you"]},{"Key":"lists you","Fragments":["can"]},{"Key":"use `[any]`","Fragments":["or"]},{"Key":"`[any]` or","Fragments":["the"]},{"Key":"the non-syntactic-sugar","Fragments":["form"]},{"Key":"non-syntactic-sugar form","Fragments":["`list(any)`"]},{"Key":"form `list(any)`","Fragments":["or"]},{"Key":"`list(any)` or","Fragments":["just"]},{"Key":"just `list`","Fragments":["(which"]},{"Key":"`list` (which","Fragments":["means"]},{"Key":"(which means","Fragments":["`list(any)`)."]},{"Key":"Thanks pminten","Fragments":["for"]},{"Key":"pminten for","Fragments":["the"]},{"Key":"the insight","Fragments":["about"]},{"Key":"insight about","Fragments":["`list`"]},{"Key":"about `list`","Fragments":["and"]},{"Key":"`list` and","Fragments":["`\u0026(\u00261+1)`."]},{"Key":"and `\u0026(\u00261+1)`.","Fragments":["That"]},{"Key":"`\u0026(\u00261+1)`. That","Fragments":["reduces"]},{"Key":"That reduces","Fragments":["the"]},{"Key":"character count","Fragments":["quite"]},{"Key":"count quite","Fragments":["a"]},{"Key":"readability too","Fragments":["much."]},{"Key":"a wee","Fragments":["bit"]},{"Key":"wee bit","Fragments":["hackish"]},{"Key":"bit hackish","Fragments":["since"]},{"Key":"hackish since","Fragments":["this"]},{"Key":"this matches","Fragments":["on"]},{"Key":"range first","Fragments":["and"]},{"Key":"and turns","Fragments":["it"]},{"Key":"turns it","Fragments":["into"]},{"Key":"a List;","Fragments":["I"]},{"Key":"List; I","Fragments":["could"]},{"Key":"not figure","Fragments":["out"]},{"Key":"else to","Fragments":["accomplish","do"]},{"Key":"implement this","Fragments":["using"]},{"Key":"using `Enum.reduce`.","Fragments":["When","That"]},{"Key":"`Enum.reduce`. When","Fragments":["originally"]},{"Key":"When originally","Fragments":["ported"]},{"Key":"originally ported","Fragments":["this"]},{"Key":"exercise did","Fragments":["only"]},{"Key":"did only","Fragments":["require"]},{"Key":"only require","Fragments":["solving"]},{"Key":"require solving","Fragments":["it"]},{"Key":"solving it","Fragments":["for"]},{"Key":"for lists","Fragments":["but","of"]},{"Key":"asked for","Fragments":["it"]},{"Key":"be changed","Fragments":["because"]},{"Key":"changed because","Fragments":["map"]},{"Key":"because map","Fragments":["is"]},{"Key":"so utterly","Fragments":["trivial"]},{"Key":"utterly trivial","Fragments":["to"]},{"Key":"trivial to","Fragments":["implement","do"]},{"Key":"would present","Fragments":["no"]},{"Key":"present no","Fragments":["challenge."]},{"Key":" @rudolph","Fragments":["I"]},{"Key":"@rudolph I","Fragments":["thought"]},{"Key":"thought no","Fragments":["magical"]},{"Key":"no magical","Fragments":["functions","functions"]},{"Key":"magical functions","Fragments":["were","rule?"]},{"Key":"functions were","Fragments":["allowed"]},{"Key":"were allowed","Fragments":["but"]},{"Key":"allowed but","Fragments":["at"]},{"Key":"your insistence","Fragments":["("]},{"Key":"insistence (","Fragments":[";P"]},{"Key":"( ;P","Fragments":[")"]},{"Key":";P )","Fragments":["I've"]},{"Key":") I've","Fragments":["reimplemented"]},{"Key":"I've reimplemented","Fragments":["this"]},{"Key":"reimplemented this","Fragments":["using"]},{"Key":"Did the","Fragments":["README"]},{"Key":"README tell","Fragments":["you"]},{"Key":"functions rule?","Fragments":["If"]},{"Key":"rule? If","Fragments":["so"]},{"Key":"If so","Fragments":["I"]},{"Key":"to clarify","Fragments":["it"]},{"Key":"clarify it","Fragments":["for"]},{"Key":"Gotcha. That's","Fragments":["sort"]},{"Key":"That's sort","Fragments":["of"]},{"Key":"I thought,","Fragments":["but"]},{"Key":"thought, but","Fragments":["I"]},{"Key":"wasn't sure.","Fragments":["Thanks!"]},{"Key":"didn't manage","Fragments":["to"]},{"Key":"manage to","Fragments":["find","do"]},{"Key":"this pipe","Fragments":["case"]},{"Key":"pipe case","Fragments":[":\\"]},{"Key":"things jump","Fragments":["out"]},{"Key":"jump out","Fragments":["at"]},{"Key":"out at","Fragments":["me.","30s."]},{"Key":"at me.","Fragments":["First,"]},{"Key":"me. First,","Fragments":["you"]},{"Key":"First, you","Fragments":["probably"]},{"Key":"want String.graphemes","Fragments":["instead"]},{"Key":"String.graphemes instead","Fragments":["of"]},{"Key":"of codepoints.","Fragments":["Secondly,","If"]},{"Key":"codepoints. Secondly,","Fragments":["I"]},{"Key":"Secondly, I","Fragments":["wouldn't"]},{"Key":"wouldn't expect","Fragments":["this"]},{"Key":"expect this","Fragments":["try/catch"]},{"Key":"this try/catch","Fragments":["for"]},{"Key":"try/catch for","Fragments":["flow"]},{"Key":"for flow","Fragments":["control"]},{"Key":"flow control","Fragments":["unless"]},{"Key":"control unless","Fragments":["there's"]},{"Key":"good performance","Fragments":["reason.","with"]},{"Key":"tests never","Fragments":["forced"]},{"Key":"never forced","Fragments":["me"]},{"Key":"implement 'up',","Fragments":["so"]},{"Key":"'up', so","Fragments":["I"]},{"Key":"implement most/all","Fragments":["of"]},{"Key":"most/all of","Fragments":["this"]},{"Key":"the record","Fragments":["itself.","is","felt","directly:","directly\"","directly.","from"]},{"Key":"record itself.","Fragments":["I'm"]},{"Key":"itself. I'm","Fragments":["not"]},{"Key":"it's residual","Fragments":["OO"]},{"Key":"residual OO","Fragments":["thinking"]},{"Key":"OO thinking","Fragments":["or"]},{"Key":"thinking or","Fragments":["uniting"]},{"Key":"or uniting","Fragments":["all"]},{"Key":"uniting all","Fragments":["the"]},{"Key":"behavior in","Fragments":["a"]},{"Key":"My problem","Fragments":["with"]},{"Key":"did so","Fragments":["fast,","because,"]},{"Key":"readable. I","Fragments":["tried","think","dropped"]},{"Key":"tried aligning","Fragments":["the"]},{"Key":"aligning the","Fragments":["function"]},{"Key":"arguments so","Fragments":["you"]},{"Key":"different lines","Fragments":["are"]},{"Key":"more clearly,","Fragments":["but"]},{"Key":"clearly, but","Fragments":["now"]},{"Key":"change anything","Fragments":["to"]},{"Key":"it longer.","Fragments":["Tail"]},{"Key":"longer. Tail","Fragments":["recursion"]},{"Key":"Tail recursion","Fragments":["is","means","means","means","means","means","means","means"]},{"Key":"a wonderful","Fragments":["thing."]},{"Key":"@ronny Queue","Fragments":["up"]},{"Key":"Queue up","Fragments":["fascinated_spock.jpg;"]},{"Key":"up fascinated_spock.jpg;","Fragments":["this"]},{"Key":"fascinated_spock.jpg; this","Fragments":["works!"]},{"Key":"this works!","Fragments":["I"]},{"Key":"works! I","Fragments":["should"]},{"Key":"have at","Fragments":["least"]},{"Key":"least tried.","Fragments":["Thanks!"]},{"Key":"tried. Thanks!","Fragments":["cc/"]},{"Key":"Thanks! cc/","Fragments":["@ronny"]},{"Key":"Well, there's","Fragments":["no"]},{"Key":"no other","Fragments":["way"]},{"Key":"have early","Fragments":["exit"]},{"Key":"early exit","Fragments":["for"]},{"Key":"exit for","Fragments":["Enum.reduce."]},{"Key":"Enum.reduce. An","Fragments":["alternative"]},{"Key":"alternative would","Fragments":["be","be"]},{"Key":"recursion on","Fragments":["the"]},{"Key":"find one","Fragments":["here:"]},{"Key":"one here:","Fragments":["https://github.com/elixir-lang/elixir/blob/master/lib/mix/lib/mix/deps.ex#L371"]},{"Key":"used `grep","Fragments":["'^\\s\\+|\u003e'"]},{"Key":"`grep '^\\s\\+|\u003e'","Fragments":["**/*.ex`"]},{"Key":"'^\\s\\+|\u003e' **/*.ex`","Fragments":["to"]},{"Key":"**/*.ex` to","Fragments":["find"]},{"Key":"find files","Fragments":["with"]},{"Key":"files with","Fragments":["`|\u003e`"]},{"Key":"with `|\u003e`","Fragments":["as","pipelines."]},{"Key":"thing on","Fragments":["a","one"]},{"Key":" @gabe","Fragments":["Yup,"]},{"Key":"@gabe Yup,","Fragments":["I"]},{"Key":"noticed that","Fragments":["and","keep","two","you","some"]},{"Key":" Wanting","Fragments":["to"]},{"Key":"Wanting to","Fragments":["implement"]},{"Key":"is object","Fragments":["style"]},{"Key":"object style","Fragments":["thinking,","thinking"]},{"Key":"style thinking,","Fragments":["when"]},{"Key":"thinking, when","Fragments":["you"]},{"Key":"more experience","Fragments":["with"]},{"Key":"programming it'll","Fragments":["go"]},{"Key":"it'll go","Fragments":["away."]},{"Key":"The trick","Fragments":["here","with"]},{"Key":"trick here","Fragments":["is"]},{"Key":"parameters. `h`","Fragments":["instead"]},{"Key":"`h` instead","Fragments":["of"]},{"Key":"of `head`,","Fragments":["`t`"]},{"Key":"`head`, `t`","Fragments":["instead"]},{"Key":"`t` instead","Fragments":["of"]},{"Key":"of `tail`","Fragments":["and"]},{"Key":"`tail` and","Fragments":["`f`"]},{"Key":"and `f`","Fragments":["instead"]},{"Key":"`f` instead","Fragments":["of"]},{"Key":"of `function`.","Fragments":["Those"]},{"Key":"`function`. Those","Fragments":["one"]},{"Key":"Those one","Fragments":["letter"]},{"Key":"letter names","Fragments":["are","easier","are"]},{"Key":"are so","Fragments":["common"]},{"Key":"so common","Fragments":["people"]},{"Key":"common people","Fragments":["will"]},{"Key":"people will","Fragments":["understand","recognise"]},{"Key":"will understand","Fragments":["what"]},{"Key":"you mean.","Fragments":["In"]},{"Key":"mean. In","Fragments":["fact"]},{"Key":"In fact","Fragments":["I","in"]},{"Key":"fact I","Fragments":["find"]},{"Key":"names easier","Fragments":["to"]},{"Key":"whole word","Fragments":["names,"]},{"Key":"word names,","Fragments":["exactly"]},{"Key":"names, exactly","Fragments":["because"]},{"Key":"exactly because","Fragments":["one"]},{"Key":"because one","Fragments":["letter"]},{"Key":"The intention","Fragments":["here"]},{"Key":"intention here","Fragments":["is"]},{"Key":"use Enum.reduce","Fragments":["to"]},{"Key":"Enum.reduce to","Fragments":["implement"]},{"Key":"implement both.","Fragments":["Enum.reduce"]},{"Key":"both. Enum.reduce","Fragments":["is"]},{"Key":"the primitive","Fragments":["that"]},{"Key":"primitive that","Fragments":["all"]},{"Key":"other Enum","Fragments":["functionality"]},{"Key":"Enum functionality","Fragments":["is"]},{"Key":"functionality is","Fragments":["built"]},{"Key":"is built","Fragments":["on."]},{"Key":"have separate","Fragments":["implementations"]},{"Key":"for keep","Fragments":["and"]},{"Key":"keep and","Fragments":["discard","discard"]},{"Key":"and discard","Fragments":["is","have","would"]},{"Key":"discard is","Fragments":["performance."]},{"Key":"is performance.","Fragments":["The"]},{"Key":"performance. The","Fragments":["wrapper"]},{"Key":"The wrapper","Fragments":["to"]},{"Key":"wrapper to","Fragments":["negate"]},{"Key":"to negate","Fragments":["the"]},{"Key":"function doesn't","Fragments":["get","need"]},{"Key":"get compiled","Fragments":["away,"]},{"Key":"compiled away,","Fragments":["so"]},{"Key":"away, so","Fragments":["it"]},{"Key":"difference. In","Fragments":["languages"]},{"Key":"In languages","Fragments":["with"]},{"Key":"more aggressive","Fragments":["compilers,"]},{"Key":"aggressive compilers,","Fragments":["like"]},{"Key":"compilers, like","Fragments":["Haskell,"]},{"Key":"like Haskell,","Fragments":["you"]},{"Key":"Haskell, you","Fragments":["would"]},{"Key":"would absolutely","Fragments":["implement"]},{"Key":"absolutely implement","Fragments":["discard"]},{"Key":"implement discard","Fragments":["in"]},{"Key":"discard in","Fragments":["terms"]},{"Key":"of keep","Fragments":["(or"]},{"Key":"keep (or","Fragments":["simply"]},{"Key":"(or simply","Fragments":["not"]},{"Key":"simply not","Fragments":["have"]},{"Key":"a discard","Fragments":["implementation"]},{"Key":"discard implementation","Fragments":["at"]},{"Key":"implementation at","Fragments":["all)."]},{"Key":"want object","Fragments":["style"]},{"Key":"style thinking","Fragments":["to","is"]},{"Key":"thinking to","Fragments":["\"go"]},{"Key":"to \"go","Fragments":["away\"."]},{"Key":"\"go away\".","Fragments":["I"]},{"Key":"away\". I","Fragments":["think"]},{"Key":"it's useful","Fragments":["in"]},{"Key":"right situations.","Fragments":["Granted,"]},{"Key":"situations. Granted,","Fragments":["many/most"]},{"Key":"Granted, many/most","Fragments":["people"]},{"Key":"many/most people","Fragments":["think"]},{"Key":"those situations","Fragments":["are"]},{"Key":"situations are","Fragments":["broader"]},{"Key":"are broader","Fragments":["than"]},{"Key":"broader than","Fragments":["they"]},{"Key":"than they","Fragments":["should","really"]},{"Key":"be. I'm","Fragments":["still"]},{"Key":"to refine","Fragments":["my"]},{"Key":"refine my","Fragments":["ideas"]},{"Key":"my ideas","Fragments":["of"]},{"Key":"ideas of","Fragments":["when"]},{"Key":"of when","Fragments":["it's"]},{"Key":"appropriate or","Fragments":["not."]},{"Key":"The from_tree","Fragments":["function"]},{"Key":"from_tree function","Fragments":["on"]},{"Key":"record felt","Fragments":["natural,"]},{"Key":"felt natural,","Fragments":["it's"]},{"Key":"natural, it's","Fragments":["like"]},{"Key":"a constructor","Fragments":["of"]},{"Key":"constructor of","Fragments":["the"]},{"Key":"what's up.","Fragments":["There's"]},{"Key":"up. There's","Fragments":["an"]},{"Key":"an ambiguity.","Fragments":["The"]},{"Key":"ambiguity. The","Fragments":["README"]},{"Key":"The README","Fragments":["says","talks"]},{"Key":"README says","Fragments":["\"treat","up"]},{"Key":"says \"treat","Fragments":["invalid"]},{"Key":"\"treat invalid","Fragments":["input"]},{"Key":"binary 0.\"","Fragments":["So"]},{"Key":"0.\" So","Fragments":["you"]},{"Key":"you implemented","Fragments":["a"]},{"Key":"implemented a","Fragments":["solution"]},{"Key":"which any","Fragments":["invalid"]},{"Key":"any invalid","Fragments":["digit"]},{"Key":"invalid digit","Fragments":["returned"]},{"Key":"digit returned","Fragments":["an"]},{"Key":"returned an","Fragments":["overall"]},{"Key":"an overall","Fragments":["0."]},{"Key":"overall 0.","Fragments":["I"]},{"Key":"0. I","Fragments":["had"]},{"Key":"had interpreted","Fragments":["that"]},{"Key":"interpreted that","Fragments":["as"]},{"Key":"as any","Fragments":["particular"]},{"Key":"particular binary","Fragments":["digit"]},{"Key":"binary digit","Fragments":["should"]},{"Key":"digit should","Fragments":["be"]},{"Key":"be treated","Fragments":["as"]},{"Key":"as 0","Fragments":["if"]},{"Key":"0 if","Fragments":["it"]},{"Key":"was invalid.","Fragments":["And"]},{"Key":"invalid. And","Fragments":["either"]},{"Key":"And either","Fragments":["approach"]},{"Key":"either approach","Fragments":["passes"]},{"Key":"approach passes","Fragments":["tests."]},{"Key":" Object","Fragments":["style"]},{"Key":"Object style","Fragments":["thinking"]},{"Key":"thinking is","Fragments":["very","my"]},{"Key":"very appropriate","Fragments":["when","for"]},{"Key":"have objects.","Fragments":["In"]},{"Key":"objects. In","Fragments":["Elixir"]},{"Key":"Elixir that","Fragments":["tends"]},{"Key":"that tends","Fragments":["to"]},{"Key":"to mean","Fragments":["gen_servers."]},{"Key":"The `from_tree`","Fragments":["function"]},{"Key":"`from_tree` function","Fragments":["isn't"]},{"Key":"function isn't","Fragments":["a"]},{"Key":"guess, considering","Fragments":["that"]},{"Key":"there's also","Fragments":["`ZipData.new`.","a","a"]},{"Key":"That Range","Fragments":["in"]},{"Key":"Range in","Fragments":["the"]},{"Key":"test pushed","Fragments":["me"]},{"Key":"pushed me","Fragments":["to"]},{"Key":"Enum.to_list. I'm","Fragments":["not"]},{"Key":"exactly happy","Fragments":["about"]},{"Key":"about that,","Fragments":["but","but","but"]},{"Key":" @cassandre","Fragments":["neato!"]},{"Key":"@cassandre neato!","Fragments":["I"]},{"Key":"neato! I","Fragments":["still"]},{"Key":"still find","Fragments":["it"]},{"Key":"it weird,","Fragments":["but"]},{"Key":"weird, but","Fragments":["I'd"]},{"Key":"rather adhere","Fragments":["the"]},{"Key":"adhere the","Fragments":["conventions."]},{"Key":"make people","Fragments":["use","think","look"]},{"Key":"use `reduce`,","Fragments":["though"]},{"Key":"`reduce`, though","Fragments":["it"]},{"Key":"work badly","Fragments":["for"]},{"Key":"badly for","Fragments":["that."]},{"Key":"reduce so","Fragments":["much"]},{"Key":"many of","Fragments":["these","the"]},{"Key":"these exercises,","Fragments":["I"]},{"Key":"exercises, I","Fragments":["actually"]},{"Key":"actually wanted","Fragments":["to"]},{"Key":"recursion myself","Fragments":["for"]},{"Key":"myself for","Fragments":["this.","how"]},{"Key":"use enough","Fragments":["list"]},{"Key":"enough list","Fragments":["comprehensions.","the"]},{"Key":"list comprehensions.","Fragments":["I","This"]},{"Key":"comprehensions. I","Fragments":["like"]},{"Key":"even better","Fragments":[":-)","control"]},{"Key":" @bertram","Fragments":["I"]},{"Key":"@bertram I","Fragments":["hope"]},{"Key":"better. Seems","Fragments":["like"]},{"Key":"of duplicated","Fragments":["code,"]},{"Key":"duplicated code,","Fragments":["which"]},{"Key":"can't currently","Fragments":["figure"]},{"Key":"currently figure","Fragments":["out"]},{"Key":"to reduce.","Fragments":["Any"]},{"Key":"reduce. Any","Fragments":["hints"]},{"Key":"Any hints","Fragments":["on"]},{"Key":"hints on","Fragments":["how"]},{"Key":"this any","Fragments":["tighter?"]},{"Key":"This actually","Fragments":["fails"]},{"Key":"actually fails","Fragments":["2"]},{"Key":"fails 2","Fragments":["tests,"]},{"Key":"2 tests,","Fragments":["but"]},{"Key":"tests, but","Fragments":["they're","just","the"]},{"Key":"they're the","Fragments":["largest"]},{"Key":"largest numbers","Fragments":["and"]},{"Key":"and hardest","Fragments":["to"]},{"Key":"hardest to","Fragments":["manually"]},{"Key":"manually verify.","Fragments":["I'll"]},{"Key":"verify. I'll","Fragments":["keep"]},{"Key":"keep looking,","Fragments":["but"]},{"Key":"looking, but","Fragments":["I"]},{"Key":"also ambiguous","Fragments":["in"]},{"Key":"ambiguous in","Fragments":["that"]},{"Key":"says up","Fragments":["to"]},{"Key":"and including","Fragments":["the"]},{"Key":"the limit,","Fragments":["but"]},{"Key":"limit, but","Fragments":["then"]},{"Key":"README excludes","Fragments":["the"]},{"Key":"excludes the","Fragments":["2"]},{"Key":"the 2","Fragments":["x"]},{"Key":"2 x","Fragments":["5"]},{"Key":"x 5","Fragments":["multiple."]},{"Key":"5 multiple.","Fragments":["That's"]},{"Key":"multiple. That's","Fragments":["where"]},{"Key":"That's where","Fragments":["the","pattern"]},{"Key":"-1 on","Fragments":["line"]},{"Key":"line 11","Fragments":["comes"]},{"Key":"11 comes","Fragments":["from."]},{"Key":"Your filter","Fragments":["has"]},{"Key":"filter has","Fragments":["quadratic"]},{"Key":"has quadratic","Fragments":["time","complexity.","time"]},{"Key":"quadratic time","Fragments":["complexity","complexity,","complexity"]},{"Key":"time complexity","Fragments":["(O(n^2)).","problem."]},{"Key":"complexity (O(n^2)).","Fragments":["Consider"]},{"Key":"(O(n^2)). Consider","Fragments":["what"]},{"Key":"with `keep([1,2,3,4],","Fragments":["fn"]},{"Key":"`keep([1,2,3,4], fn","Fragments":["_"]},{"Key":"fn _","Fragments":["-\u003e"]},{"Key":"-\u003e true","Fragments":["end)`:"]},{"Key":"* `[]","Fragments":["++","++"]},{"Key":"`[] ++","Fragments":["[1]`","[1,2]`","[1,","[1,"]},{"Key":"* `[1]","Fragments":["++"]},{"Key":"`[1] ++","Fragments":["[2]`"]},{"Key":"* `[1,2]","Fragments":["++","++"]},{"Key":"`[1,2] ++","Fragments":["[3]`","[3,4]`"]},{"Key":"* `[1,2,3]","Fragments":["++"]},{"Key":"`[1,2,3] ++","Fragments":["[4]`"]},{"Key":"The time","Fragments":["`++`","needed"]},{"Key":"time `++`","Fragments":["takes"]},{"Key":"`++` takes","Fragments":["is","longer","longer"]},{"Key":"takes is","Fragments":["determined"]},{"Key":"is determined","Fragments":["by","solely"]},{"Key":"determined by","Fragments":["the"]},{"Key":"argument (it's","Fragments":["`O(n)`)"]},{"Key":"(it's `O(n)`)","Fragments":["but"]},{"Key":"`O(n)`) but","Fragments":["when"]},{"Key":"you repeatedly","Fragments":["use"]},{"Key":"repeatedly use","Fragments":["it"]},{"Key":"a loop","Fragments":["like","per"]},{"Key":"loop like","Fragments":["this"]},{"Key":"this every","Fragments":["new"]},{"Key":"every new","Fragments":["append","append"]},{"Key":"new append","Fragments":["takes","becomes"]},{"Key":"append takes","Fragments":["slightly"]},{"Key":"takes slightly","Fragments":["longer"]},{"Key":"slightly longer","Fragments":["than"]},{"Key":"I fully","Fragments":["agree"]},{"Key":"fully agree","Fragments":["with"]},{"Key":"your note","Fragments":["on"]},{"Key":"on implementation","Fragments":["details."]},{"Key":"about `defp`.","Fragments":["Just"]},{"Key":"`defp`. Just","Fragments":["starting"]},{"Key":"Just starting","Fragments":["on","with","to"]},{"Key":"on elixir.","Fragments":["Thank"]},{"Key":"elixir. Thank","Fragments":["you"]},{"Key":"logic to","Fragments":["check","support"]},{"Key":"check to","Fragments":["see","see","see","see","see","see","compare"]},{"Key":"string contained","Fragments":["letters."]},{"Key":"contained letters.","Fragments":["Good"]},{"Key":"letters. Good","Fragments":["improvement."]},{"Key":"Good improvement.","Fragments":["Looks"]},{"Key":"improvement. Looks","Fragments":["great!"]},{"Key":"One possibility","Fragments":["is"]},{"Key":"possibility is","Fragments":["to"]},{"Key":"pipeline (collection","Fragments":["|\u003e"]},{"Key":"(collection |\u003e","Fragments":["reduce"]},{"Key":"|\u003e reduce","Fragments":["|\u003e"]},{"Key":"reduce |\u003e","Fragments":["reverse)"]},{"Key":"|\u003e reverse)","Fragments":["that"]},{"Key":"reverse) that","Fragments":["takes"]},{"Key":"the reducing","Fragments":["function","function","ones"]},{"Key":"reducing function","Fragments":["as","in"]},{"Key":"parameter. There","Fragments":["is"]},{"Key":"point where","Fragments":["readability"]},{"Key":"where readability","Fragments":["suffers"]},{"Key":"readability suffers","Fragments":["from"]},{"Key":"suffers from","Fragments":["too"]},{"Key":"from too","Fragments":["much"]},{"Key":"much tightness.","Fragments":["I"]},{"Key":"tightness. I","Fragments":["don't"]},{"Key":"you're reached","Fragments":["it"]},{"Key":"reached it","Fragments":["yet,"]},{"Key":"it yet,","Fragments":["but"]},{"Key":"just caution","Fragments":["that"]},{"Key":"caution that","Fragments":["it's"]},{"Key":"Another observation","Fragments":["is"]},{"Key":"observation is","Fragments":["that"]},{"Key":"two reducing","Fragments":["functions"]},{"Key":"reducing functions","Fragments":["vary"]},{"Key":"functions vary","Fragments":["only"]},{"Key":"vary only","Fragments":["by"]},{"Key":"boolean NOT.","Fragments":["I"]},{"Key":"NOT. I","Fragments":["worry"]},{"Key":"I worry","Fragments":["that"]},{"Key":"worry that","Fragments":["taking"]},{"Key":"that taking","Fragments":["advantage"]},{"Key":"could cross","Fragments":["that"]},{"Key":"cross that","Fragments":["readability"]},{"Key":"that readability","Fragments":["threshold"]},{"Key":"readability threshold","Fragments":["though."]},{"Key":"disagree that","Fragments":["implementing"]},{"Key":"that implementing","Fragments":["one"]},{"Key":"implementing one","Fragments":["in"]},{"Key":"other would","Fragments":["be"]},{"Key":"be less","Fragments":["readable.","idiomatic"]},{"Key":"called \"nitpicks\"","Fragments":["so"]},{"Key":"\"nitpicks\" so","Fragments":["allow"]},{"Key":"so allow","Fragments":["me"]},{"Key":"get picky","Fragments":[":-)"]},{"Key":"any non-English","Fragments":["unicode"]},{"Key":"non-English unicode","Fragments":["chars."]},{"Key":"unicode chars.","Fragments":["Also,"]},{"Key":"chars. Also,","Fragments":["consider"]},{"Key":"downcase as","Fragments":["the"]},{"Key":"first step","Fragments":["of","would","yourself","would"]},{"Key":"think get_counts","Fragments":["(and"]},{"Key":"get_counts (and","Fragments":["friends)"]},{"Key":"(and friends)","Fragments":["would"]},{"Key":"friends) would","Fragments":["be"]},{"Key":"straightforward as","Fragments":["an"]},{"Key":" @alvis","Fragments":["@alvis"]},{"Key":"@alvis @alvis","Fragments":["OK..."]},{"Key":"@alvis OK...","Fragments":["I"]},{"Key":"this but","Fragments":["am","unless","mistakenly"]},{"Key":"but am","Fragments":["a"]},{"Key":"bit annoyed","Fragments":["that"]},{"Key":"annoyed that","Fragments":["I"]},{"Key":"the wrap","Fragments":["the"]},{"Key":"the invocation","Fragments":["of"]},{"Key":"invocation of","Fragments":["the"]},{"Key":"another anonymous","Fragments":["function"]},{"Key":"this straightforward","Fragments":["algorithm"]},{"Key":"straightforward algorithm","Fragments":["was"]},{"Key":"what was","Fragments":["intended","_actually_"]},{"Key":"curious about","Fragments":["why","how","the","the","your","your"]},{"Key":"about why","Fragments":["you","I"]},{"Key":"chose `HashDict.merge/3`","Fragments":["over"]},{"Key":"`HashDict.merge/3` over","Fragments":["`HashDict.update/4`."]},{"Key":"over `HashDict.update/4`.","Fragments":["Everything"]},{"Key":"`HashDict.update/4`. Everything","Fragments":["else"]},{"Key":"They said","Fragments":["we"]},{"Key":"said we","Fragments":["couldn't"]},{"Key":"we couldn't","Fragments":["use"]},{"Key":"couldn't use","Fragments":["`filter`","the"]},{"Key":"use `filter`","Fragments":["or","for"]},{"Key":"`filter` or","Fragments":["`reject`,"]},{"Key":"or `reject`,","Fragments":["because"]},{"Key":"`reject`, because","Fragments":["we're"]},{"Key":"because we're","Fragments":["re-writing","on"]},{"Key":"we're re-writing","Fragments":["them"]},{"Key":"re-writing them","Fragments":["our"]},{"Key":"them our","Fragments":["own"]},{"Key":"our own","Fragments":["way,"]},{"Key":"own way,","Fragments":["but"]},{"Key":"they didn't","Fragments":["say"]},{"Key":"didn't say","Fragments":["anything"]},{"Key":"say anything","Fragments":["about"]},{"Key":"about `reverse`","Fragments":["or"]},{"Key":"`reverse` or","Fragments":["`to_list`."]},{"Key":"curious how","Fragments":["many"]},{"Key":"many people","Fragments":["would","do","do"]},{"Key":"people would","Fragments":["implement","define"]},{"Key":"would implement","Fragments":["with"]},{"Key":"implement with","Fragments":["`keep`"]},{"Key":"with `keep`","Fragments":["as"]},{"Key":"`keep` as","Fragments":["the"]},{"Key":"underlying implementation","Fragments":["vs."]},{"Key":"implementation vs.","Fragments":["`discard`."]},{"Key":"vs. `discard`.","Fragments":["Does"]},{"Key":"`discard`. Does","Fragments":["implementing"]},{"Key":"Does implementing","Fragments":["`keep`"]},{"Key":"implementing `keep`","Fragments":["and"]},{"Key":"`keep` and","Fragments":["having","`discard`"]},{"Key":"having `discard`","Fragments":["just"]},{"Key":"`discard` just","Fragments":["call"]},{"Key":"make me","Fragments":["an"]},{"Key":"This time","Fragments":["I","I","I","each"]},{"Key":"used `Enum.reduce`","Fragments":["and"]},{"Key":"and implemented","Fragments":["two","everything"]},{"Key":"implemented two","Fragments":["separate"]},{"Key":"separate filtering","Fragments":["functions"]},{"Key":"filtering functions","Fragments":["so"]},{"Key":"that `keep`","Fragments":["and"]},{"Key":"and `discard`","Fragments":["will"]},{"Key":"`discard` will","Fragments":["have"]},{"Key":"same performance","Fragments":["profile."]},{"Key":"performance profile.","Fragments":["I"]},{"Key":"profile. I","Fragments":["tried"]},{"Key":"keep it","Fragments":["**DRY**"]},{"Key":"it **DRY**","Fragments":["where"]},{"Key":"**DRY** where","Fragments":["possible"]},{"Key":"where possible","Fragments":["by"]},{"Key":"possible by","Fragments":["creating"]},{"Key":"by creating","Fragments":["a"]},{"Key":"a handy","Fragments":["`reduce_with/3`"]},{"Key":"handy `reduce_with/3`","Fragments":["method."]},{"Key":"to `reduce_with/3`","Fragments":["presented."]},{"Key":"`reduce_with/3` presented.","Fragments":["I"]},{"Key":"presented. I","Fragments":["started"]},{"Key":"just `f`","Fragments":["and"]},{"Key":"`f` and","Fragments":["`g`,"]},{"Key":"and `g`,","Fragments":["but"]},{"Key":"`g`, but","Fragments":["that's"]},{"Key":"completely opaque.","Fragments":["I"]},{"Key":"I settled","Fragments":["on","for"]},{"Key":"on `generate`","Fragments":["and"]},{"Key":"`generate` and","Fragments":["`decide`"]},{"Key":"and `decide`","Fragments":["because"]},{"Key":"`decide` because","Fragments":["the"]},{"Key":"the goal","Fragments":["is","of"]},{"Key":"will actually","Fragments":["be","take"]},{"Key":"`Enum.reduce` based","Fragments":["on"]},{"Key":"another function","Fragments":["that","`do_x`,","from"]},{"Key":"will decide","Fragments":["which"]},{"Key":"decide which","Fragments":["elements","I"]},{"Key":"which elements","Fragments":["pass"]},{"Key":"elements pass","Fragments":["the"]},{"Key":"also curious","Fragments":["about"]},{"Key":"to spec","Fragments":["`reduce_with/3`."]},{"Key":"spec `reduce_with/3`.","Fragments":["I"]},{"Key":"`reduce_with/3`. I","Fragments":["kept"]},{"Key":"kept running","Fragments":["into"]},{"Key":"running into","Fragments":["spec"]},{"Key":"into spec","Fragments":["syntax"]},{"Key":"spec syntax","Fragments":["errors"]},{"Key":"syntax errors","Fragments":["while"]},{"Key":"errors while","Fragments":["trying"]},{"Key":"trying detail","Fragments":["the"]},{"Key":"detail the","Fragments":["spec"]},{"Key":"spec for","Fragments":["the","the"]},{"Key":"the `generate`","Fragments":["argument."]},{"Key":"`generate` argument.","Fragments":["I"]},{"Key":"argument. I","Fragments":["think"]},{"Key":"I heard","Fragments":["in"]},{"Key":"heard in","Fragments":["the"]},{"Key":"the [mostly","Fragments":["Erlang](http://mostlyerlang.com/)"]},{"Key":"[mostly Erlang](http://mostlyerlang.com/)","Fragments":["podcast"]},{"Key":"Erlang](http://mostlyerlang.com/) podcast","Fragments":["that"]},{"Key":"podcast that","Fragments":["you"]},{"Key":"can't nest","Fragments":["specs"]},{"Key":"nest specs","Fragments":["like"]},{"Key":"specs like","Fragments":["that,"]},{"Key":"have misinterpreted","Fragments":["the"]},{"Key":"misinterpreted the","Fragments":["comment."]},{"Key":"common pattern.","Fragments":["For"]},{"Key":"pattern. For","Fragments":["example"]},{"Key":"example here's","Fragments":["how"]},{"Key":"here's how","Fragments":["`Enum.to_list`","I"]},{"Key":"how `Enum.to_list`","Fragments":["could"]},{"Key":"`Enum.to_list` could","Fragments":["be"]},{"Key":"implemented (it's","Fragments":["actually"]},{"Key":"(it's actually","Fragments":["implemented"]},{"Key":"actually implemented","Fragments":["in"]},{"Key":"of `Enum.reverse","Fragments":["|\u003e"]},{"Key":"`Enum.reverse |\u003e","Fragments":[":lists.reverse`):"]},{"Key":"def to_list(coll),","Fragments":["do:"]},{"Key":" Enum.reduce(coll,","Fragments":["[],"]},{"Key":"Enum.reduce(coll, [],","Fragments":["fn"]},{"Key":"[], fn","Fragments":["x,","l,","l,","l,"]},{"Key":"fn x,","Fragments":["acc","acc"]},{"Key":"x, acc","Fragments":["-\u003e","-\u003e"]},{"Key":"-\u003e [x|acc]","Fragments":["end))"]},{"Key":"[x|acc] end))","Fragments":["|\u003e"]},{"Key":"end)) |\u003e","Fragments":[":lists.reverse()"]},{"Key":"finding any","Fragments":["meaningful"]},{"Key":"any meaningful","Fragments":["refactoring"]},{"Key":"meaningful refactoring","Fragments":["either,"]},{"Key":"refactoring either,","Fragments":["so"]},{"Key":"either, so","Fragments":["I'll"]},{"Key":"leave my","Fragments":["submission"]},{"Key":"Wouldn't `if`","Fragments":["be"]},{"Key":"`if` be","Fragments":["a"]},{"Key":"bit nicer","Fragments":["than"]},{"Key":"than `cond`","Fragments":["for","(`cond`"]},{"Key":"`cond` for","Fragments":["this"]},{"Key":"my experience,","Fragments":["`decide`"]},{"Key":"experience, `decide`","Fragments":["would"]},{"Key":"`decide` would","Fragments":["normally"]},{"Key":"would normally","Fragments":["be"]},{"Key":"normally be","Fragments":["called"]},{"Key":"called something","Fragments":["like","like"]},{"Key":"like `predicate`","Fragments":["(perhaps"]},{"Key":"`predicate` (perhaps","Fragments":["`p`"]},{"Key":"(perhaps `p`","Fragments":["or"]},{"Key":"`p` or","Fragments":["`pred`)"]},{"Key":"or `pred`)","Fragments":["or"]},{"Key":"`pred`) or","Fragments":["`filter`."]},{"Key":"or `filter`.","Fragments":["The"]},{"Key":"`filter`. The","Fragments":["Elixir"]},{"Key":"docs use","Fragments":["`filter`"]},{"Key":"`filter` for","Fragments":["Enum.filter_map"]},{"Key":"for Enum.filter_map","Fragments":["which"]},{"Key":"Enum.filter_map which","Fragments":["is"]},{"Key":"same use","Fragments":["case","case"]},{"Key":"as yours.","Fragments":["As"]},{"Key":"yours. As","Fragments":["for"]},{"Key":"for `generate`","Fragments":["I"]},{"Key":"`generate` I","Fragments":["might"]},{"Key":"it `reduce`,","Fragments":["`accumulate`,"]},{"Key":"`reduce`, `accumulate`,","Fragments":["`fold`"]},{"Key":"`accumulate`, `fold`","Fragments":["or"]},{"Key":"`fold` or","Fragments":["something"]},{"Key":"else along","Fragments":["those"]},{"Key":"along those","Fragments":["lines."]},{"Key":"those lines.","Fragments":["All"]},{"Key":"lines. All","Fragments":["that"]},{"Key":"All that","Fragments":["said,"]},{"Key":"that said,","Fragments":["I'm"]},{"Key":"said, I'm","Fragments":["usually"]},{"Key":"I'm usually","Fragments":["perfectly"]},{"Key":"usually perfectly","Fragments":["happy"]},{"Key":"with short","Fragments":["meaningless"]},{"Key":"short meaningless","Fragments":["names"]},{"Key":"meaningless names","Fragments":["whose"]},{"Key":"names whose","Fragments":["purpose"]},{"Key":"whose purpose","Fragments":["can"]},{"Key":"purpose can","Fragments":["easily"]},{"Key":"easily be","Fragments":["inferred"]},{"Key":"be inferred","Fragments":["from"]},{"Key":"inferred from","Fragments":["context,"]},{"Key":"from context,","Fragments":["especially"]},{"Key":"context, especially","Fragments":["since"]},{"Key":"especially since","Fragments":["you","the"]},{"Key":"have type","Fragments":["signatures"]},{"Key":"type signatures","Fragments":["here.","with"]},{"Key":"a `@santina`","Fragments":["like"]},{"Key":"`@santina` like","Fragments":["this:"]},{"Key":" @santina","Fragments":["filter","reduce_with(Enum.t,"]},{"Key":"@santina filter","Fragments":["::"]},{"Key":"filter ::","Fragments":["(any"]},{"Key":":: (any","Fragments":["-\u003e"]},{"Key":"(any -\u003e","Fragments":["as_boolean(term))"]},{"Key":"@santina reduce_with(Enum.t,","Fragments":["filter,"]},{"Key":"reduce_with(Enum.t, filter,","Fragments":["(filter"]},{"Key":"filter, (filter","Fragments":["-\u003e"]},{"Key":"(filter -\u003e","Fragments":["(list"]},{"Key":"-\u003e (list","Fragments":["-\u003e"]},{"Key":"(list -\u003e","Fragments":["list)))"]},{"Key":"-\u003e list)))","Fragments":["::"]},{"Key":"list))) ::","Fragments":["list"]},{"Key":" Run","Fragments":["of"]},{"Key":"Run of","Fragments":["the"]},{"Key":"the mill","Fragments":["recursive"]},{"Key":"mill recursive","Fragments":["solution"]},{"Key":"so satisfying","Fragments":["in"]},{"Key":"satisfying in","Fragments":["Elixir/Erlang."]},{"Key":"was unaware","Fragments":["of"]},{"Key":"of update,","Fragments":["but"]},{"Key":"update, but","Fragments":["great"]},{"Key":"great tip.","Fragments":["Thanks!"]},{"Key":"first raw","Fragments":["implementation"]},{"Key":"raw implementation","Fragments":["of"]},{"Key":" Works","Fragments":["but"]},{"Key":"Works but","Fragments":["seems"]},{"Key":"but seems","Fragments":["inefficient,"]},{"Key":"seems inefficient,","Fragments":["specially"]},{"Key":"inefficient, specially","Fragments":["the"]},{"Key":"specially the","Fragments":["concat","way"]},{"Key":"the concat","Fragments":["tests","implementation","function,","and","functions.","implementation"]},{"Key":"concat tests","Fragments":["takes"]},{"Key":"tests takes","Fragments":["forever"]},{"Key":"takes forever","Fragments":["to","that's"]},{"Key":"forever to","Fragments":["complete."]},{"Key":"Please suggest","Fragments":["how"]},{"Key":"suggest how","Fragments":["I"]},{"Key":"it better,","Fragments":["more"]},{"Key":"and better","Fragments":["performing."]},{"Key":"am anxiously","Fragments":["waiting"]},{"Key":"anxiously waiting","Fragments":["for"]},{"Key":" Beautiful,","Fragments":["readable"]},{"Key":"Beautiful, readable","Fragments":["and"]},{"Key":"clean use","Fragments":["of"]},{"Key":"pipeline and","Fragments":["separate"]},{"Key":"and separate","Fragments":["well"]},{"Key":"separate well","Fragments":["named"]},{"Key":"little thing:","Fragments":["`String.length(s)"]},{"Key":"thing: `String.length(s)","Fragments":["=="]},{"Key":"always equivalent","Fragments":["to"]},{"Key":"to `s","Fragments":["=="]},{"Key":"for `if`,","Fragments":["and"]},{"Key":"`if`, and","Fragments":["I"]},{"Key":"feel dumb","Fragments":["for"]},{"Key":"dumb for","Fragments":["forgetting"]},{"Key":"for forgetting","Fragments":["that"]},{"Key":"forgetting that","Fragments":["was"]},{"Key":"was there","Fragments":["on"]},{"Key":"there on","Fragments":["the"]},{"Key":"first page","Fragments":["of"]},{"Key":"page of","Fragments":["the"]},{"Key":"the Elixir-lang.org","Fragments":["tutorial."]},{"Key":"Elixir-lang.org tutorial.","Fragments":["I've"]},{"Key":"tutorial. I've","Fragments":["been"]},{"Key":"working through","Fragments":["[Learn","the"]},{"Key":"through [Learn","Fragments":["You"]},{"Key":"[Learn You","Fragments":["Some"]},{"Key":"You Some","Fragments":["Erlang"]},{"Key":"Some Erlang","Fragments":["for"]},{"Key":"for Great","Fragments":["Good](http://learnyousomeerlang.com),"]},{"Key":"Great Good](http://learnyousomeerlang.com),","Fragments":["and"]},{"Key":"Good](http://learnyousomeerlang.com), and","Fragments":["there"]},{"Key":"there they","Fragments":["implement"]},{"Key":"they implement","Fragments":["everything"]},{"Key":"implement everything","Fragments":["with"]},{"Key":"everything with","Fragments":["`cond`"]},{"Key":"Erlang doesn't","Fragments":["have"]},{"Key":"have `cond`","Fragments":["(you're"]},{"Key":"`cond` (you're","Fragments":["likely"]},{"Key":"(you're likely","Fragments":["thinking"]},{"Key":"likely thinking","Fragments":["of"]},{"Key":"of `case`)","Fragments":["and"]},{"Key":"`case`) and","Fragments":["its"]},{"Key":"and its","Fragments":["`if`"]},{"Key":"its `if`","Fragments":["doesn't"]},{"Key":"`if` doesn't","Fragments":["have"]},{"Key":"same semantics","Fragments":["as"]},{"Key":"semantics as","Fragments":["Elixir…"]},{"Key":"as Elixir…","Fragments":["so"]},{"Key":"Elixir… so","Fragments":["I"]},{"Key":"why it's","Fragments":["confusing","%r"]},{"Key":"it's confusing","Fragments":["to"]},{"Key":"be learning","Fragments":["them"]},{"Key":"learning them","Fragments":["simultaneously."]},{"Key":"I recognized","Fragments":["the"]},{"Key":"recognized the","Fragments":["problem"]},{"Key":"problem description","Fragments":["as"]},{"Key":"description as","Fragments":["a"]},{"Key":"a `filter`","Fragments":["operation,"]},{"Key":"`filter` operation,","Fragments":["so"]},{"Key":"operation, so","Fragments":["I"]},{"Key":"felt that","Fragments":["was","front","this"]},{"Key":"best library","Fragments":["tool"]},{"Key":"library tool","Fragments":["for"]},{"Key":"tool for","Fragments":["the"]},{"Key":"top level.","Fragments":["This"]},{"Key":"level. This","Fragments":["takes"]},{"Key":"This takes","Fragments":["a"]},{"Key":"a Boolean,","Fragments":["so"]},{"Key":"Boolean, so","Fragments":["I"]},{"Key":"higher-order function","Fragments":["`matches?/1`"]},{"Key":"function `matches?/1`","Fragments":["to"]},{"Key":"`matches?/1` to","Fragments":["generate"]},{"Key":"generate that","Fragments":["filter."]},{"Key":"that filter.","Fragments":["Finally,"]},{"Key":"filter. Finally,","Fragments":["the"]},{"Key":"Finally, the","Fragments":["filter"]},{"Key":"filter just","Fragments":["compares"]},{"Key":"just compares","Fragments":["letter"]},{"Key":"compares letter","Fragments":["sets,"]},{"Key":"letter sets,","Fragments":["which"]},{"Key":"sets, which","Fragments":["are"]},{"Key":"are sorted","Fragments":["character","(hint:"]},{"Key":"sorted character","Fragments":["lists."]},{"Key":"great, only","Fragments":["one"]},{"Key":"one suggestion:","Fragments":["have"]},{"Key":"suggestion: have","Fragments":["you"]},{"Key":"seen `Regex.scan`?","Fragments":["I"]},{"Key":"`Regex.scan`? I","Fragments":["find"]},{"Key":"direct for","Fragments":["this,"]},{"Key":"this, since","Fragments":["you're"]},{"Key":"you're specifying","Fragments":["what"]},{"Key":"specifying what","Fragments":["you"]},{"Key":"spent time","Fragments":["refactoring"]},{"Key":"time refactoring","Fragments":["this"]},{"Key":"refactoring this","Fragments":["yet,"]},{"Key":"this yet,","Fragments":["but"]},{"Key":"this works.","Fragments":["I'm","Note"]},{"Key":"works. I'm","Fragments":["open"]},{"Key":"Minor style","Fragments":["point:"]},{"Key":"point: in","Fragments":["Elixir"]},{"Key":"we usually","Fragments":["don't","explicitly"]},{"Key":"usually don't","Fragments":["import"]},{"Key":"don't import","Fragments":["things"]},{"Key":"import things","Fragments":["but"]},{"Key":"things but","Fragments":["call","you"]},{"Key":"but call","Fragments":["them"]},{"Key":"call them","Fragments":["as","`npa`"]},{"Key":"as `Enum.map`.","Fragments":["It"]},{"Key":"`Enum.map`. It","Fragments":["helps"]},{"Key":"helps distinguish","Fragments":["for"]},{"Key":"distinguish for","Fragments":["example"]},{"Key":"example when","Fragments":["you're"]},{"Key":"a `Enum.map`","Fragments":["or"]},{"Key":"a `Stream.map`","Fragments":["and"]},{"Key":"`Stream.map` and","Fragments":["makes"]},{"Key":"understand for","Fragments":["the","an"]},{"Key":"A `Dict.put(...,","Fragments":["...,"]},{"Key":"`Dict.put(..., ...,","Fragments":["Dict.get(...))`","Dict.get(...))`"]},{"Key":"..., Dict.get(...))`","Fragments":["expression","using"]},{"Key":"Dict.get(...))` expression","Fragments":["can"]},{"Key":"expression can","Fragments":["also"]},{"Key":"Looks quite","Fragments":["good."]},{"Key":"good. You're","Fragments":["using"]},{"Key":"as I've","Fragments":["taken"]},{"Key":"taken with","Fragments":["the"]},{"Key":"probably missing","Fragments":["something"]},{"Key":"add adjacent-mine","Fragments":["numbers"]},{"Key":"adjacent-mine numbers","Fragments":["in"]},{"Key":"the grid","Fragments":["dict"]},{"Key":"grid dict","Fragments":["you"]},{"Key":"dict you","Fragments":["store"]},{"Key":"store them","Fragments":["as"]},{"Key":"as ints,","Fragments":["yet"]},{"Key":"ints, yet","Fragments":["when"]},{"Key":"yet when","Fragments":["you"]},{"Key":"you convert","Fragments":["back"]},{"Key":"convert back","Fragments":["to"]},{"Key":"to strings","Fragments":["you"]},{"Key":"strings you","Fragments":["don't","do"]},{"Key":"add `?0`","Fragments":["so"]},{"Key":"`?0` so","Fragments":["wouldn't"]},{"Key":"so wouldn't","Fragments":["those"]},{"Key":"wouldn't those","Fragments":["numbers"]},{"Key":"those numbers","Fragments":["come"]},{"Key":"numbers come","Fragments":["out"]},{"Key":"come out","Fragments":["ASCII"]},{"Key":"out ASCII","Fragments":["numbers"]},{"Key":"ASCII numbers","Fragments":["1,"]},{"Key":"numbers 1,","Fragments":["2,"]},{"Key":"1, 2,","Fragments":["3"]},{"Key":"3 (i.e.","Fragments":["`\"\\000\","]},{"Key":"(i.e. `\"\\000\",","Fragments":["\"\\001\","]},{"Key":"`\"\\000\", \"\\001\",","Fragments":["etc)?"]},{"Key":"Your overall","Fragments":["approach"]},{"Key":"overall approach","Fragments":["is"]},{"Key":"a right","Fragments":["one.","fold.","fold."]},{"Key":"useful here:","Fragments":["`String.ends_with?`,"]},{"Key":"here: `String.ends_with?`,","Fragments":["`String.strip`."]},{"Key":"I've done","Fragments":["with","this","that","this"]},{"Key":"with Conway's","Fragments":["Game"]},{"Key":"Conway's Game","Fragments":["of"]},{"Key":"Game of","Fragments":["Life"]},{"Key":"of Life","Fragments":["too."]},{"Key":"Life too.","Fragments":["I"]},{"Key":"too. I","Fragments":["got","need"]},{"Key":"got lucky","Fragments":["with"]},{"Key":"lucky with","Fragments":["those"]},{"Key":"those integers.","Fragments":["I"]},{"Key":"integers. I","Fragments":["didn't"]},{"Key":"apparently Enum.join","Fragments":["takes"]},{"Key":"Enum.join takes","Fragments":["care"]},{"Key":"takes care","Fragments":["of","of","of"]},{"Key":" Enum.join(","Fragments":["[\"*\","]},{"Key":"Enum.join( [\"*\",","Fragments":["2])"]},{"Key":"[\"*\", 2])","Fragments":["=\u003e"]},{"Key":"2]) =\u003e","Fragments":["\"*2\""]},{"Key":"but avoided","Fragments":["using"]},{"Key":"avoided using","Fragments":["`Enum.reverse`."]},{"Key":"what most","Fragments":["are"]},{"Key":"most are","Fragments":["referring"]},{"Key":"referring to,","Fragments":["is"]},{"Key":"to, is","Fragments":["that"]},{"Key":"feel \"functional\"","Fragments":["enough;"]},{"Key":"\"functional\" enough;","Fragments":["in"]},{"Key":"enough; in","Fragments":["functional"]},{"Key":"languages you","Fragments":["can"]},{"Key":"can solve","Fragments":["this","with"]},{"Key":"this really","Fragments":["elegant"]},{"Key":"really elegant","Fragments":["using"]},{"Key":"elegant using","Fragments":["functional"]},{"Key":"using functional","Fragments":["operators,"]},{"Key":"functional operators,","Fragments":["f.e.:"]},{"Key":"def hamming_distance(from,to)","Fragments":["do"]},{"Key":"|\u003e count(fn","Fragments":["{left,right}"]},{"Key":"count(fn {left,right}","Fragments":["-\u003e"]},{"Key":"{left,right} -\u003e","Fragments":["left"]},{"Key":"-\u003e left","Fragments":["!="]},{"Key":"left !=","Fragments":["right"]},{"Key":"!= right","Fragments":["end)"]},{"Key":"While there","Fragments":["might"]},{"Key":"performance penalty,","Fragments":["it"]},{"Key":"penalty, it","Fragments":["should"]},{"Key":"elegant and","Fragments":["easier"]},{"Key":"Just looked","Fragments":["into"]},{"Key":"looked into","Fragments":["the","Inspect.Algebra"]},{"Key":"code, `Enum.join`","Fragments":["calls"]},{"Key":"`Enum.join` calls","Fragments":["`to_string`"]},{"Key":"calls `to_string`","Fragments":["on"]},{"Key":"`to_string` on","Fragments":["all"]},{"Key":"all elements","Fragments":["of"]},{"Key":"elements of","Fragments":["the","the","the"]},{"Key":"so `Enum.join([:a,","Fragments":["2])`"]},{"Key":"`Enum.join([:a, 2])`","Fragments":["gives"]},{"Key":"2])` gives","Fragments":["`\"a2\"`."]},{"Key":"Do all","Fragments":["of"]},{"Key":"be public?","Fragments":["To"]},{"Key":"public? To","Fragments":["make"]},{"Key":"`defp` instead","Fragments":["of","of","of","of"]},{"Key":"code performs","Fragments":["downcasing"]},{"Key":"performs downcasing","Fragments":["and"]},{"Key":"sorting of","Fragments":["the"]},{"Key":"base multiple","Fragments":["times"]},{"Key":"times (once","Fragments":["for"]},{"Key":"(once for","Fragments":["every"]},{"Key":"every candidate).","Fragments":["Can"]},{"Key":"candidate). Can","Fragments":["you"]},{"Key":"arguments, i.e.","Fragments":["`defp"]},{"Key":"i.e. `defp","Fragments":["do_reverse([h"]},{"Key":"`defp do_reverse([h","Fragments":["|"]},{"Key":"do_reverse([h |","Fragments":["t],"]},{"Key":"| t],","Fragments":["acc)`."]},{"Key":"For `concat`","Fragments":["the"]},{"Key":"`concat` the","Fragments":["reason"]},{"Key":"for slowless","Fragments":["can"]},{"Key":"slowless can","Fragments":["be"]},{"Key":"be found","Fragments":["in"]},{"Key":"found in","Fragments":["what","the"]},{"Key":"what order","Fragments":["you're"]},{"Key":"order you're","Fragments":["doing"]},{"Key":"the appends","Fragments":["and"]},{"Key":"appends and","Fragments":["the"]},{"Key":"of appends","Fragments":["for"]},{"Key":"appends for","Fragments":["lists"]},{"Key":" @tamara","Fragments":["Of"]},{"Key":"@tamara Of","Fragments":["course."]},{"Key":"Of course.","Fragments":["That"]},{"Key":"course. That","Fragments":["seems"]},{"Key":"That seems","Fragments":["more","a"]},{"Key":"more intention-revealing,","Fragments":["as"]},{"Key":"intention-revealing, as","Fragments":["well."]},{"Key":"I incorporated","Fragments":["feedback"]},{"Key":"incorporated feedback","Fragments":["from"]},{"Key":"previous revision","Fragments":["and"]},{"Key":"revision and","Fragments":["pulled"]},{"Key":"and pulled","Fragments":["the"]},{"Key":"two `Regex.match?`","Fragments":["statements"]},{"Key":"`Regex.match?` statements","Fragments":["into"]},{"Key":"statements into","Fragments":["private"]},{"Key":"for better","Fragments":["clarity."]},{"Key":"very brute","Fragments":["force,"]},{"Key":"brute force,","Fragments":["but"]},{"Key":"force, but","Fragments":["I"]},{"Key":"my artificial","Fragments":["6"]},{"Key":"artificial 6","Fragments":["digit"]},{"Key":"6 digit","Fragments":["limit"]},{"Key":"digit limit","Fragments":["on"]},{"Key":"limit on","Fragments":["palindrome?"]},{"Key":"on palindrome?","Fragments":["but"]},{"Key":"palindrome? but","Fragments":["I"]},{"Key":"can't think","Fragments":["of","of"]},{"Key":"way except","Fragments":["to"]},{"Key":"except to","Fragments":["convert"]},{"Key":"convert to/from","Fragments":["strings."]},{"Key":"you scan","Fragments":["for"]},{"Key":"for strings","Fragments":["of","that"]},{"Key":"characters including","Fragments":["spaces,"]},{"Key":"including spaces,","Fragments":["join"]},{"Key":"spaces, join","Fragments":["the"]},{"Key":"results and","Fragments":["then"]},{"Key":"then split","Fragments":["it","it"]},{"Key":"again on","Fragments":["spaces?"]},{"Key":"a `+`","Fragments":["at"]},{"Key":"`+` at","Fragments":["the"]},{"Key":"your regex.","Fragments":["`x+`","What"]},{"Key":"regex. `x+`","Fragments":["matches"]},{"Key":"`x+` matches","Fragments":["1"]},{"Key":"matches 1","Fragments":["or"]},{"Key":"about regular","Fragments":["expressions,"]},{"Key":"expressions, for","Fragments":["example"]},{"Key":"example at","Fragments":["http://www.regular-expressions.info/"]},{"Key":" Here,","Fragments":["I've"]},{"Key":"Here, I've","Fragments":["made"]},{"Key":"made all","Fragments":["but"]},{"Key":"top-level `match`","Fragments":["function"]},{"Key":"function private,","Fragments":["and"]},{"Key":"private, and","Fragments":["I"]},{"Key":"I `downcase`","Fragments":["base"]},{"Key":"`downcase` base","Fragments":["at"]},{"Key":"base at","Fragments":["the"]},{"Key":"the repeated","Fragments":["effort."]},{"Key":"The sorting","Fragments":["could"]},{"Key":"sorting could","Fragments":["be"]},{"Key":"done once","Fragments":["as"]},{"Key":"once as","Fragments":["well,"]},{"Key":"well, though","Fragments":["that"]},{"Key":"complicated code","Fragments":["so"]},{"Key":"so one","Fragments":["may"]},{"Key":"one may","Fragments":["argue"]},{"Key":"may argue","Fragments":["whether"]},{"Key":"argue whether","Fragments":["it's"]},{"Key":" Agree","Fragments":["with"]},{"Key":"I abandoned","Fragments":["the","that"]},{"Key":"abandoned the","Fragments":["approach"]},{"Key":"separate markup","Fragments":["to"]},{"Key":"markup to","Fragments":["be"]},{"Key":"be parsed","Fragments":["by","as"]},{"Key":"parsed by","Fragments":["a"]},{"Key":"generic replacement","Fragments":["function."]},{"Key":"replacement function.","Fragments":["This"]},{"Key":"function. This","Fragments":["just"]},{"Key":"just uses","Fragments":["Elixir's"]},{"Key":"uses Elixir's","Fragments":["built-in"]},{"Key":"Elixir's built-in","Fragments":["interpolation"]},{"Key":"built-in interpolation","Fragments":["to"]},{"Key":"interpolation to","Fragments":["call"]},{"Key":"the filler","Fragments":["functions"]},{"Key":"filler functions","Fragments":["directly."]},{"Key":"time each","Fragments":["string"]},{"Key":"each string","Fragments":["(including"]},{"Key":"string (including","Fragments":["the"]},{"Key":"(including the","Fragments":["base)","first)"]},{"Key":"the base)","Fragments":["is"]},{"Key":"base) is","Fragments":["`downcase`'d"]},{"Key":"is `downcase`'d","Fragments":["and"]},{"Key":"`downcase`'d and","Fragments":["sorted"]},{"Key":"sorted exactly","Fragments":["once."]},{"Key":"exactly once.","Fragments":["I"]},{"Key":"once. I","Fragments":["think"]},{"Key":"it's always","Fragments":["worth"]},{"Key":"always worth","Fragments":["it"]},{"Key":"minimize unnecessary","Fragments":["work"]},{"Key":"unnecessary work","Fragments":["in","by"]},{"Key":"inner loop","Fragments":["of"]},{"Key":"loop of","Fragments":["a"]},{"Key":"a process,","Fragments":["I'm"]},{"Key":"process, I'm","Fragments":["just"]},{"Key":"maximize readability","Fragments":["of"]},{"Key":"parse and","Fragments":["fill"]},{"Key":"and fill","Fragments":["in"]},{"Key":"fill in","Fragments":["a"]},{"Key":"a template","Fragments":["without"]},{"Key":"template without","Fragments":["tons"]},{"Key":"without tons","Fragments":["of"]},{"Key":"tons of","Fragments":["duplication,"]},{"Key":"of duplication,","Fragments":["and"]},{"Key":"got stuck","Fragments":["somewhere."]},{"Key":"stuck somewhere.","Fragments":["If"]},{"Key":"somewhere. If","Fragments":["I"]},{"Key":"knew how","Fragments":["to"]},{"Key":"convert between","Fragments":["a"]},{"Key":"between a","Fragments":["string"]},{"Key":"could map","Fragments":["the"]},{"Key":"map the","Fragments":["template"]},{"Key":"template to","Fragments":["concurrent"]},{"Key":"to concurrent","Fragments":["processes,"]},{"Key":"concurrent processes,","Fragments":["one"]},{"Key":"processes, one","Fragments":["process"]},{"Key":"one process","Fragments":["per"]},{"Key":"process per","Fragments":["template"]},{"Key":"per template","Fragments":["marker."]},{"Key":"template marker.","Fragments":["As"]},{"Key":"marker. As","Fragments":["it"]},{"Key":"As it","Fragments":["is,","is"]},{"Key":"it is,","Fragments":["I'm","and"]},{"Key":"is, I'm","Fragments":["running"]},{"Key":"running sequential","Fragments":["string"]},{"Key":"sequential string","Fragments":["operations,"]},{"Key":"string operations,","Fragments":["which"]},{"Key":"operations, which","Fragments":["is"]},{"Key":"not Elixir's","Fragments":["best"]},{"Key":"Elixir's best","Fragments":["use-case."]},{"Key":"Anyway, I'm","Fragments":["sure"]},{"Key":"that together","Fragments":["we"]},{"Key":"together we","Fragments":["can"]},{"Key":"can create","Fragments":["a","private"]},{"Key":"a song-generator","Fragments":["for"]},{"Key":"song-generator for","Fragments":["random"]},{"Key":"for random","Fragments":["combinations"]},{"Key":"random combinations","Fragments":["like"]},{"Key":"combinations like","Fragments":["\"27"]},{"Key":"like \"27","Fragments":["presses"]},{"Key":"\"27 presses","Fragments":["of"]},{"Key":"presses of","Fragments":["snooze","the","snooze"]},{"Key":"of snooze","Fragments":["left","left"]},{"Key":"snooze left","Fragments":["today,","today.\""]},{"Key":"left today,","Fragments":["27"]},{"Key":"today, 27","Fragments":["presses"]},{"Key":"27 presses","Fragments":["of"]},{"Key":"the snooze.","Fragments":["Take"]},{"Key":"snooze. Take","Fragments":["a"]},{"Key":"a nap","Fragments":["and"]},{"Key":"nap and","Fragments":["stay"]},{"Key":"the sack,","Fragments":["26"]},{"Key":"sack, 26","Fragments":["presses"]},{"Key":"26 presses","Fragments":["of"]},{"Key":"supports interpolation,","Fragments":["like"]},{"Key":"interpolation, like","Fragments":["Ruby:"]},{"Key":"like Ruby:","Fragments":["`x"]},{"Key":"Ruby: `x","Fragments":["="]},{"Key":"`x =","Fragments":["\"B\";"]},{"Key":"= \"B\";","Fragments":["y"]},{"Key":"\"B\"; y","Fragments":["="]},{"Key":"y =","Fragments":["\"C\";"]},{"Key":"= \"C\";","Fragments":["\"A#{x"]},{"Key":"\"C\"; \"A#{x","Fragments":["\u003c\u003e"]},{"Key":"\"A#{x \u003c\u003e","Fragments":["y}D\"`"]},{"Key":"\u003c\u003e y}D\"`","Fragments":["(=="]},{"Key":"y}D\"` (==","Fragments":["`\"ABCD\"`)."]},{"Key":"opinion, this","Fragments":["exercise"]},{"Key":"exercise should","Fragments":["have"]},{"Key":"have come","Fragments":["much"]},{"Key":"come much","Fragments":["earlier"]},{"Key":"are correct.","Fragments":["This"]},{"Key":"correct. This","Fragments":["is"]},{"Key":"is nowhere","Fragments":["near"]},{"Key":"nowhere near","Fragments":["the"]},{"Key":"near the","Fragments":["difficulty","bottom."]},{"Key":"the difficulty","Fragments":["level"]},{"Key":"difficulty level","Fragments":["of"]},{"Key":"of minesweeper","Fragments":["(which"]},{"Key":"minesweeper (which","Fragments":["precedes"]},{"Key":"(which precedes","Fragments":["it)"]},{"Key":"precedes it)","Fragments":["and"]},{"Key":"it) and","Fragments":["dot-dsl"]},{"Key":"and dot-dsl","Fragments":["and"]},{"Key":"dot-dsl and","Fragments":["custom-set","such."]},{"Key":"and custom-set","Fragments":["(which"]},{"Key":"custom-set (which","Fragments":["follow"]},{"Key":"(which follow","Fragments":["it)."]},{"Key":"There's currently","Fragments":["some"]},{"Key":"currently some","Fragments":["discussion"]},{"Key":"discussion in","Fragments":["the"]},{"Key":"exercism project","Fragments":["about"]},{"Key":"project about","Fragments":["what"]},{"Key":"what exercises","Fragments":["to"]},{"Key":"include and","Fragments":["such."]},{"Key":"and such.","Fragments":["It",":)"]},{"Key":"such. It","Fragments":["may"]},{"Key":"that once","Fragments":["a","Katrina"]},{"Key":"once a","Fragments":["consensus"]},{"Key":"a consensus","Fragments":["is"]},{"Key":"is reached","Fragments":["some"]},{"Key":"reached some","Fragments":["trails"]},{"Key":"some trails","Fragments":["can"]},{"Key":"trails can","Fragments":["be"]},{"Key":"be cleaned","Fragments":["up.","up."]},{"Key":"- I'd","Fragments":["totally"]},{"Key":"totally forgotten","Fragments":["about"]},{"Key":"forgotten about","Fragments":["Elixir's"]},{"Key":"Elixir's \"bang\"","Fragments":["versions"]},{"Key":"\"bang\" versions","Fragments":["of"]},{"Key":"functions. That's","Fragments":["much"]},{"Key":"That's much","Fragments":["nicer.","better."]},{"Key":"much nicer.","Fragments":["And"]},{"Key":"nicer. And","Fragments":["`\u0026Kernel.+/2`"]},{"Key":"And `\u0026Kernel.+/2`","Fragments":["is"]},{"Key":"`\u0026Kernel.+/2` is","Fragments":["horrible,"]},{"Key":"is horrible,","Fragments":["I"]},{"Key":"horrible, I","Fragments":["can"]},{"Key":"you'd stick","Fragments":["with"]},{"Key":"with `\u0026(\u00261+\u00262)`.","Fragments":["Oh"]},{"Key":"`\u0026(\u00261+\u00262)`. Oh","Fragments":["how"]},{"Key":"Oh how","Fragments":["I"]},{"Key":"I yearn","Fragments":["for"]},{"Key":"yearn for","Fragments":["Ruby's"]},{"Key":"for Ruby's","Fragments":["`reduce(:+)`!"]},{"Key":"Submitted this","Fragments":["even"]},{"Key":"working yet","Fragments":["in"]},{"Key":"yet in","Fragments":["the"]},{"Key":"the hope","Fragments":["that"]},{"Key":"hope that","Fragments":["someone"]},{"Key":"someone can","Fragments":["point"]},{"Key":"can point","Fragments":["me","you","out"]},{"Key":"direction. So","Fragments":["far,"]},{"Key":"So far,","Fragments":["google"]},{"Key":"far, google","Fragments":["has"]},{"Key":"google has","Fragments":["failed"]},{"Key":"has failed","Fragments":["to"]},{"Key":"the macro","Fragments":["working","I","syntax."]},{"Key":"macro working","Fragments":["such"]},{"Key":"working such","Fragments":["that"]},{"Key":"it defines","Fragments":["a"]},{"Key":"defines a","Fragments":["series","public","private"]},{"Key":"defp score_letter(?a),","Fragments":["do:"]},{"Key":"score_letter(?a), do:","Fragments":["1"]},{"Key":"defp score_letter(?e),","Fragments":["do:"]},{"Key":"score_letter(?e), do:","Fragments":["1"]},{"Key":"Instead it","Fragments":["appears","returns"]},{"Key":"be defining","Fragments":["and"]},{"Key":"defining and","Fragments":["redefining"]},{"Key":"and redefining","Fragments":["one"]},{"Key":"redefining one","Fragments":["where"]},{"Key":"one where","Fragments":["`letter`"]},{"Key":"where `letter`","Fragments":["does"]},{"Key":"`letter` does","Fragments":["not"]},{"Key":"appear to","Fragments":["be"]},{"Key":"be being","Fragments":["unquoted"]},{"Key":"being unquoted","Fragments":["properly,"]},{"Key":"unquoted properly,","Fragments":["like"]},{"Key":"properly, like","Fragments":["this:"]},{"Key":"defp score_letter(letter),","Fragments":["do:"]},{"Key":"score_letter(letter), do:","Fragments":["1"]},{"Key":"Let's see.","Fragments":["Here's"]},{"Key":"see. Here's","Fragments":["how"]},{"Key":"Here's how","Fragments":["I","I","the"]},{"Key":"would write","Fragments":["this:","something"]},{"Key":" score_data","Fragments":["="]},{"Key":"score_data =","Fragments":["[{'AEIOULNRST',"]},{"Key":"= [{'AEIOULNRST',","Fragments":["1},"]},{"Key":"[{'AEIOULNRST', 1},","Fragments":["{'DG',"]},{"Key":"1}, {'DG',","Fragments":["2},"]},{"Key":"{'DG', 2},","Fragments":["...]"]},{"Key":"{ letters,","Fragments":["value"]},{"Key":"letters, value","Fragments":["}"]},{"Key":"inlist score_data,","Fragments":["letter"]},{"Key":"score_data, letter","Fragments":["inlist"]},{"Key":"letter inlist","Fragments":["letters","letters,"]},{"Key":"inlist letters","Fragments":["do"]},{"Key":"defp score_letter(unquote(letter)),","Fragments":["do:"]},{"Key":"score_letter(unquote(letter)), do:","Fragments":["unquote(value)"]},{"Key":"`Enum.reduce` in","Fragments":["`sing`"]},{"Key":"in `sing`","Fragments":["using"]},{"Key":"`sing` using","Fragments":["`Enum.map_join`,"]},{"Key":"using `Enum.map_join`,","Fragments":["though"]},{"Key":"`Enum.map_join`, though","Fragments":["it"]},{"Key":"require appending","Fragments":["a"]},{"Key":"appending a","Fragments":["newline","list"]},{"Key":"newline character","Fragments":["to"]},{"Key":"Minor stylistic","Fragments":["nit:"]},{"Key":"stylistic nit:","Fragments":["I"]},{"Key":"probably would","Fragments":["put"]},{"Key":"would put","Fragments":["a","me"]},{"Key":"newline before","Fragments":["the"]},{"Key":"pipeline |\u003e","Fragments":["operator"]},{"Key":"|\u003e operator","Fragments":["rather"]},{"Key":"than hang","Fragments":["it"]},{"Key":"hang it","Fragments":["on"]},{"Key":"Yeah, not","Fragments":["a"]},{"Key":"bad idea.","Fragments":["Interestingly"]},{"Key":"idea. Interestingly","Fragments":["I"]},{"Key":"Interestingly I","Fragments":["(feeling"]},{"Key":"I (feeling","Fragments":["a"]},{"Key":"(feeling a","Fragments":["bit"]},{"Key":"bit rusty","Fragments":["at"]},{"Key":"rusty at","Fragments":["Elixir"]},{"Key":"at Elixir","Fragments":["after"]},{"Key":"Elixir after","Fragments":["a"]},{"Key":"a break)","Fragments":["got"]},{"Key":"break) got","Fragments":["some"]},{"Key":"some pointers","Fragments":["from"]},{"Key":"pointers from","Fragments":["the"]},{"Key":"of Enum.map/2","Fragments":["halfway"]},{"Key":"Enum.map/2 halfway","Fragments":["down"]},{"Key":"halfway down","Fragments":["this"]},{"Key":"down this","Fragments":["page,","route."]},{"Key":"this page,","Fragments":["and"]},{"Key":"page, and","Fragments":["they"]},{"Key":"they piped","Fragments":["to"]},{"Key":"piped to","Fragments":["reverse"]},{"Key":"to reverse","Fragments":["on","only","the","before","a"]},{"Key":"reverse on","Fragments":["the"]},{"Key":"reduce call...","Fragments":["but"]},{"Key":"call... but","Fragments":["I"]},{"Key":"better I","Fragments":["think!"]},{"Key":"conditions you","Fragments":["are"]},{"Key":"are testing","Fragments":["for","the"]},{"Key":"testing for","Fragments":["in"]},{"Key":"block, making","Fragments":["their"]},{"Key":"making their","Fragments":["meanings"]},{"Key":"their meanings","Fragments":["more"]},{"Key":"meanings more","Fragments":["clear."]},{"Key":"Not passing","Fragments":["the"]},{"Key":"the Russian","Fragments":["test","shouting"]},{"Key":"Russian test","Fragments":["yet...","are","and"]},{"Key":"really straightforward.","Fragments":["I"]},{"Key":"straightforward. I","Fragments":["haven't"]},{"Key":"haven't personally","Fragments":["tested"]},{"Key":"personally tested","Fragments":["this,"]},{"Key":"tested this,","Fragments":["but"]},{"Key":"I'm told","Fragments":["there"]},{"Key":"told there","Fragments":["are"]},{"Key":"are performance","Fragments":["benefits"]},{"Key":"performance benefits","Fragments":["to"]},{"Key":"benefits to","Fragments":["pushing"]},{"Key":"to pushing","Fragments":["the"]},{"Key":"pushing the","Fragments":["new"]},{"Key":"new element","Fragments":["on"]},{"Key":"element on","Fragments":["the"]},{"Key":"then doing","Fragments":["a"]},{"Key":"single reverse","Fragments":["at"]},{"Key":"reverse at","Fragments":["the","the"]},{"Key":" @tressa","Fragments":["Try"]},{"Key":"@tressa Try","Fragments":["running"]},{"Key":"Try running","Fragments":["this"]},{"Key":"running this","Fragments":["with"]},{"Key":"different numbers","Fragments":["(i.e."]},{"Key":"numbers (i.e.","Fragments":["save"]},{"Key":"(i.e. save","Fragments":["as"]},{"Key":"save as","Fragments":["`bench.ex`"]},{"Key":"as `bench.ex`","Fragments":["and"]},{"Key":"`bench.ex` and","Fragments":["run"]},{"Key":"and run","Fragments":["`./bench.ex","`exercism"]},{"Key":"run `./bench.ex","Fragments":["100`,"]},{"Key":"`./bench.ex 100`,","Fragments":["`./bench.ex"]},{"Key":"100`, `./bench.ex","Fragments":["1000`,"]},{"Key":"`./bench.ex 1000`,","Fragments":["`./bench.ex"]},{"Key":"1000`, `./bench.ex","Fragments":["10000`)."]},{"Key":"defmodule Test","Fragments":["do"]},{"Key":"def good(e),","Fragments":["do:"]},{"Key":"good(e), do:","Fragments":["Enum.reduce(e,"]},{"Key":"do: Enum.reduce(e,","Fragments":["[],","[],"]},{"Key":"Enum.reduce(e, [],","Fragments":["\u0026([\u00261|\u00262]))","\u0026(\u00262"]},{"Key":"[], \u0026([\u00261|\u00262]))","Fragments":["|\u003e"]},{"Key":"\u0026([\u00261|\u00262])) |\u003e","Fragments":["Enum.reverse"]},{"Key":"def bad(e),","Fragments":["do:"]},{"Key":"bad(e), do:","Fragments":["Enum.reduce(e,"]},{"Key":"[], \u0026(\u00262","Fragments":["++"]},{"Key":"\u0026(\u00262 ++","Fragments":["[\u00261]))"]},{"Key":" [","Fragments":["s"]},{"Key":"[ s","Fragments":["]"]},{"Key":"s ]","Fragments":["="]},{"Key":"] =","Fragments":["System.argv"]},{"Key":"{ n,","Fragments":["\"\""]},{"Key":"n, \"\"","Fragments":["}"]},{"Key":"\"\" }","Fragments":["="]},{"Key":"} =","Fragments":["Integer.parse(s)",":timer.tc(Test,",":timer.tc(Test,","String.to_char_list(word)","String.to_char_list(...)`"]},{"Key":"{ good_time,","Fragments":["_"]},{"Key":"good_time, _","Fragments":["}"]},{"Key":"_ }","Fragments":["=","="]},{"Key":"= :timer.tc(Test,","Fragments":[":good,",":bad,"]},{"Key":":timer.tc(Test, :good,","Fragments":["[1..n])"]},{"Key":"{ bad_time,","Fragments":["_"]},{"Key":"bad_time, _","Fragments":["}"]},{"Key":":timer.tc(Test, :bad,","Fragments":["[1..n])"]},{"Key":" IO.puts(\"good","Fragments":["time:"]},{"Key":"IO.puts(\"good time:","Fragments":["#{good_time},"]},{"Key":"time: #{good_time},","Fragments":["bad"]},{"Key":"#{good_time}, bad","Fragments":["time:"]},{"Key":"bad time:","Fragments":["#{bad_time}\")"]},{"Key":"Thanks, @adriana.","Fragments":["I"]},{"Key":"@adriana. I","Fragments":["guess"]},{"Key":"hoping more","Fragments":["for"]},{"Key":"more for","Fragments":["a"]},{"Key":"hint as","Fragments":["to"]},{"Key":"to why","Fragments":["it"]},{"Key":"wasn't working","Fragments":["than"]},{"Key":"working than","Fragments":["just"]},{"Key":"to copy/paste...","Fragments":["but"]},{"Key":"copy/paste... but","Fragments":["is"]},{"Key":"the gist","Fragments":["of"]},{"Key":"gist of","Fragments":["it"]},{"Key":"the unquoting","Fragments":["of"]},{"Key":"unquoting of","Fragments":["letter"]},{"Key":"letter to","Fragments":["a","value"]},{"Key":"a literal","Fragments":["can't","condition."]},{"Key":"literal can't","Fragments":["be"]},{"Key":"done inside","Fragments":["a","the"]},{"Key":"to `unquote(unquote(letter))`","Fragments":["inside"]},{"Key":"`unquote(unquote(letter))` inside","Fragments":["the"]},{"Key":"macro I","Fragments":["get"]},{"Key":"a compile","Fragments":["error"]},{"Key":"compile error","Fragments":["\"unquote"]},{"Key":"error \"unquote","Fragments":["called"]},{"Key":"\"unquote called","Fragments":["outside"]},{"Key":"called outside","Fragments":["quote\""]},{"Key":"outside quote\"","Fragments":["-"]},{"Key":"quote\" -","Fragments":["but"]},{"Key":"but your","Fragments":["solution","code","\u003ccode\u003eis_empty?\u003c/code\u003e"]},{"Key":"using unquote","Fragments":["outside"]},{"Key":"unquote outside","Fragments":["of"]},{"Key":"macro works","Fragments":["fine."]},{"Key":"works fine.","Fragments":["Not"]},{"Key":"why this","Fragments":["would","is?"]},{"Key":" Can't","Fragments":["help"]},{"Key":"Can't help","Fragments":["but"]},{"Key":"succinct on","Fragments":["line"]},{"Key":"8 in","Fragments":["terms"]},{"Key":"of passing","Fragments":["the"]},{"Key":"the `+`","Fragments":["operator","operator","should"]},{"Key":"`+` operator","Fragments":["to","is"]},{"Key":"a `reduce`.","Fragments":["As"]},{"Key":"`reduce`. As","Fragments":["I'm"]},{"Key":"As I'm","Fragments":["just"]},{"Key":"it's intended","Fragments":["it"]},{"Key":"intended it","Fragments":["doesn't"]},{"Key":"the arguments.","Fragments":["But"]},{"Key":"arguments. But","Fragments":["I"]},{"Key":"for referring","Fragments":["to","to","to"]},{"Key":"operator as","Fragments":["a"]},{"Key":"function value,","Fragments":["and"]},{"Key":"value, and","Fragments":["google"]},{"Key":"and google","Fragments":["is"]},{"Key":"is proving","Fragments":["unhelpful."]},{"Key":" `calculate_score`","Fragments":["could"]},{"Key":"`calculate_score` could","Fragments":["be"]},{"Key":"defp calculate_score(word)","Fragments":["do"]},{"Key":"{ :ok,","Fragments":["chars",":isosceles",":isosceles"]},{"Key":":ok, chars","Fragments":["}","}"]},{"Key":"chars }","Fragments":["=","="]},{"Key":" (No","Fragments":["need"]},{"Key":"(No need","Fragments":["for"]},{"Key":"as `String.to_char_list!(word)","Fragments":["|\u003e"]},{"Key":"`String.to_char_list!(word) |\u003e","Fragments":["Enum.map(chars,"]},{"Key":"|\u003e Enum.map(chars,","Fragments":["\u0026score_letter/1)`"]},{"Key":"Enum.map(chars, \u0026score_letter/1)`","Fragments":["though."]},{"Key":"\u0026score_letter/1)` though.","Fragments":["`String.to_char_list!/1`"]},{"Key":"though. `String.to_char_list!/1`","Fragments":["throws"]},{"Key":"`String.to_char_list!/1` throws","Fragments":["an"]},{"Key":"throws an","Fragments":["exception"]},{"Key":"is `\u0026Kernel.+/2`.","Fragments":["I"]},{"Key":"`\u0026Kernel.+/2`. I","Fragments":["generally"]},{"Key":"generally just","Fragments":["write","follow"]},{"Key":"write `\u0026(\u00261+\u00262)`","Fragments":["though."]},{"Key":"really understand","Fragments":["the","it,","why,"]},{"Key":"of macro's","Fragments":["that"]},{"Key":"macro's that","Fragments":["well"]},{"Key":"well either.","Fragments":["I"]},{"Key":"just know","Fragments":["some"]},{"Key":"know some","Fragments":["things"]},{"Key":"work (hence","Fragments":["the"]},{"Key":"(hence the","Fragments":["example"]},{"Key":"example instead","Fragments":["of"]},{"Key":"of explanation).","Fragments":["For"]},{"Key":"explanation). For","Fragments":["a"]},{"Key":"better explanation","Fragments":["you"]},{"Key":"explanation you","Fragments":["should"]},{"Key":"should ask","Fragments":["on"]},{"Key":"ask on","Fragments":["#elixir-lang"]},{"Key":"on #elixir-lang","Fragments":["on"]},{"Key":"#elixir-lang on","Fragments":["freenode"]},{"Key":"on freenode","Fragments":["IRC"]},{"Key":"freenode IRC","Fragments":["or"]},{"Key":"IRC or","Fragments":["the"]},{"Key":"the [elixir-lang-talk](https://groups.google.com/forum/?fromgroups#!forum/elixir-lang-talk)","Fragments":["mailing"]},{"Key":"[elixir-lang-talk](https://groups.google.com/forum/?fromgroups#!forum/elixir-lang-talk) mailing","Fragments":["list."]},{"Key":"No problem,","Fragments":["good"]},{"Key":"problem, good","Fragments":["luck"]},{"Key":"good luck","Fragments":["with"]},{"Key":"luck with","Fragments":["the"]},{"Key":"the fix.","Fragments":["Pretty"]},{"Key":"fix. Pretty","Fragments":["sure"]},{"Key":"Pretty sure","Fragments":["this"]},{"Key":"this started","Fragments":["happening"]},{"Key":"started happening","Fragments":["when"]},{"Key":"happening when","Fragments":["I"]},{"Key":"I upgraded","Fragments":["from"]},{"Key":"upgraded from","Fragments":["0.10"]},{"Key":"from 0.10","Fragments":["to"]},{"Key":"0.10 to","Fragments":["0.12;"]},{"Key":"to 0.12;","Fragments":["the"]},{"Key":"0.12; the","Fragments":["ordering"]},{"Key":"the ordering","Fragments":["of","of"]},{"Key":"ordering of","Fragments":["the","the"]},{"Key":"the Dicts","Fragments":["was"]},{"Key":"Dicts was","Fragments":["subtly"]},{"Key":"was subtly","Fragments":["different."]},{"Key":"the option","Fragments":["of"]},{"Key":"option of","Fragments":["using"]},{"Key":"using `Stream.map","Fragments":["|\u003e"]},{"Key":"`Stream.map |\u003e","Fragments":["Enum.reduce`","Stream.chunk"]},{"Key":"Enum.reduce` to","Fragments":["avoid"]},{"Key":"list (though","Fragments":["in"]},{"Key":"(though in","Fragments":["this"]},{"Key":"suspect there","Fragments":["is"]},{"Key":"so little","Fragments":["overhead"]},{"Key":"little overhead","Fragments":["it"]},{"Key":"overhead it","Fragments":["doesn't"]},{"Key":"Very interesting","Fragments":["approach."]},{"Key":"interesting approach.","Fragments":["The"]},{"Key":"explicit Enum.map","Fragments":["by"]},{"Key":"Enum.map by","Fragments":["calling"]},{"Key":"by calling","Fragments":["score_letter"]},{"Key":"calling score_letter","Fragments":["in"]},{"Key":"score_letter in","Fragments":["your"]},{"Key":"Wow. This","Fragments":["is"]},{"Key":"most difficult","Fragments":["exercise","part"]},{"Key":"difficult exercise","Fragments":["yet."]},{"Key":"exercise yet.","Fragments":["I'm"]},{"Key":"yet. I'm","Fragments":["not","guessing"]},{"Key":"finished, but","Fragments":["wanted"]},{"Key":"but wanted","Fragments":["to"]},{"Key":"put this","Fragments":["up"]},{"Key":"this up","Fragments":["as"]},{"Key":"a save","Fragments":["point."]},{"Key":"save point.","Fragments":["Remaining"]},{"Key":"point. Remaining","Fragments":["to"]},{"Key":"Remaining to","Fragments":["do"]},{"Key":"do are","Fragments":["the"]},{"Key":"the exceptions,","Fragments":["which"]},{"Key":"exceptions, which","Fragments":["I've"]},{"Key":"only ever","Fragments":["skimmed"]},{"Key":"ever skimmed","Fragments":["over"]},{"Key":"skimmed over","Fragments":["before."]},{"Key":"difficult part","Fragments":["about"]},{"Key":"part about","Fragments":["this"]},{"Key":"that before","Fragments":["I","and","but"]},{"Key":"found Macro.escape,","Fragments":["I"]},{"Key":"Macro.escape, I","Fragments":["was"]},{"Key":"trying a","Fragments":["quote"]},{"Key":"a quote","Fragments":["block"]},{"Key":"quote block","Fragments":["and"]},{"Key":"completely useless","Fragments":["error"]},{"Key":"useless error","Fragments":["message."]},{"Key":"Using guards.","Fragments":["Much"]},{"Key":"guards. Much","Fragments":["neater!"]},{"Key":"I included","Fragments":["the"]},{"Key":"the exceptions.","Fragments":["I'm"]},{"Key":"exceptions. I'm","Fragments":["not"]},{"Key":"works. I","Fragments":["feel"]},{"Key":"like I've","Fragments":["found"]},{"Key":"the dark","Fragments":["side"]},{"Key":"dark side","Fragments":["of"]},{"Key":"matching. Sure,","Fragments":["each"]},{"Key":"Sure, each","Fragments":["of"]},{"Key":"are focused","Fragments":["small"]},{"Key":"focused small","Fragments":["functions,"]},{"Key":"be horrible","Fragments":["to"]},{"Key":"horrible to","Fragments":["maintain."]},{"Key":"maintain. I","Fragments":["don't"]},{"Key":"error detection","Fragments":["is","isn't","being"]},{"Key":"detection is","Fragments":["all"]},{"Key":"all mixed","Fragments":["in"]},{"Key":"mixed in","Fragments":["at"]},{"Key":"in at","Fragments":["different"]},{"Key":"at different","Fragments":["places"]},{"Key":"different places","Fragments":["in","as"]},{"Key":"in different","Fragments":["ways.","orders","place."]},{"Key":"pretty fiendish","Fragments":["one,"]},{"Key":"fiendish one,","Fragments":["yes."]},{"Key":"one, yes.","Fragments":["On"]},{"Key":"yes. On","Fragments":["the"]},{"Key":"whole your","Fragments":["code"]},{"Key":"good. I'll","Fragments":["add"]},{"Key":"specific comments","Fragments":["in"]},{"Key":" Elixir's","Fragments":["AST","library"]},{"Key":"Elixir's AST","Fragments":["is"]},{"Key":"AST is","Fragments":["not"]},{"Key":"quite entirely","Fragments":["trivial,"]},{"Key":"entirely trivial,","Fragments":["I"]},{"Key":"trivial, I","Fragments":["grant"]},{"Key":"I grant","Fragments":["you"]},{"Key":"grant you","Fragments":["that."]},{"Key":"you that.","Fragments":["But"]},{"Key":"But hey,","Fragments":["it's"]},{"Key":"hey, it's","Fragments":["the"]},{"Key":"you struggle","Fragments":["with"]},{"Key":"struggle with","Fragments":["that"]},{"Key":"learn the","Fragments":["most"]},{"Key":"most from.","Fragments":[";)"]},{"Key":"notice when","Fragments":["comparing","I"]},{"Key":"when comparing","Fragments":["your","HashDicts,"]},{"Key":"comparing your","Fragments":["code"]},{"Key":"with mine","Fragments":["is"]},{"Key":"mine is","Fragments":["that","your"]},{"Key":"have significantly","Fragments":["more"]},{"Key":"significantly more","Fragments":["function"]},{"Key":"more function","Fragments":["clauses"]},{"Key":"for `dsl_to_dict`.","Fragments":["A"]},{"Key":"`dsl_to_dict`. A","Fragments":["common"]},{"Key":"A common","Fragments":["pattern"]},{"Key":"is `if","Fragments":["Keyword.keyword?(kws)"]},{"Key":"`if Keyword.keyword?(kws)","Fragments":["do"]},{"Key":"Keyword.keyword?(kws) do","Fragments":["..."]},{"Key":"... else","Fragments":["raise_invalid_stmt(stmt)","if","if","..."]},{"Key":"else raise_invalid_stmt(stmt)","Fragments":["end`."]},{"Key":"raise_invalid_stmt(stmt) end`.","Fragments":["I"]},{"Key":"end`. I","Fragments":["also"]},{"Key":"of node","Fragments":["and"]},{"Key":"node and","Fragments":["edge"]},{"Key":"and edge","Fragments":["(one"]},{"Key":"edge (one","Fragments":["for"]},{"Key":"(one for","Fragments":["the"]},{"Key":"where there","Fragments":["are"]},{"Key":"no keywords","Fragments":["and"]},{"Key":"keywords and","Fragments":["one"]},{"Key":"the are)","Fragments":["plus"]},{"Key":"are) plus","Fragments":["a"]},{"Key":"plus a","Fragments":["single","catchall"]},{"Key":"single clause","Fragments":["for"]},{"Key":"the graph","Fragments":["(it"]},{"Key":"graph (it","Fragments":["always"]},{"Key":"(it always","Fragments":["has"]},{"Key":"always has","Fragments":["to"]},{"Key":"What I'm","Fragments":["kind"]},{"Key":"of missing","Fragments":["in"]},{"Key":"missing in","Fragments":["your"]},{"Key":"is `Code.eval_quoted`.","Fragments":["I"]},{"Key":"`Code.eval_quoted`. I","Fragments":["didn't"]},{"Key":"without transforming","Fragments":["an"]},{"Key":"transforming an","Fragments":["AST"]},{"Key":"an AST","Fragments":["into"]},{"Key":"AST into","Fragments":["normal"]},{"Key":"into normal","Fragments":["values."]},{"Key":"Btw, it","Fragments":["might"]},{"Key":"just update","Fragments":["the"]},{"Key":"record directly:","Fragments":["`Graph.edges([e|Graph.edges])`"]},{"Key":"directly: `Graph.edges([e|Graph.edges])`","Fragments":["appends"]},{"Key":"`Graph.edges([e|Graph.edges])` appends","Fragments":["`e`"]},{"Key":"appends `e`","Fragments":["to"]},{"Key":"`e` to","Fragments":["the"]},{"Key":"of edges","Fragments":["and"]},{"Key":"edges and","Fragments":["returns"]},{"Key":"and returns","Fragments":["a","a"]},{"Key":"new `Graph`.","Fragments":["(Embarrassingly"]},{"Key":"`Graph`. (Embarrassingly","Fragments":["I"]},{"Key":"(Embarrassingly I","Fragments":["used"]},{"Key":"used `Graph.update`","Fragments":["in"]},{"Key":"`Graph.update` in","Fragments":["the"]},{"Key":"example while","Fragments":["this"]},{"Key":"while this","Fragments":["would"]},{"Key":"I'm so","Fragments":["used"]},{"Key":"so used","Fragments":["to"]},{"Key":"the \"map\"","Fragments":["and"]},{"Key":"\"map\" and","Fragments":["\"reduce\""]},{"Key":"and \"reduce\"","Fragments":["parts"]},{"Key":"\"reduce\" parts","Fragments":["of"]},{"Key":"functions being","Fragments":["kept"]},{"Key":"being kept","Fragments":["separate"]},{"Key":"kept separate","Fragments":["for"]},{"Key":"separate for","Fragments":["clarity"]},{"Key":"for clarity","Fragments":["-"]},{"Key":"clarity -","Fragments":["but"]},{"Key":"but given","Fragments":["Elixir's","the"]},{"Key":"given Elixir's","Fragments":["slightly"]},{"Key":"Elixir's slightly","Fragments":["awkward"]},{"Key":"slightly awkward","Fragments":["way"]},{"Key":"awkward way","Fragments":["of"]},{"Key":"writing reduce","Fragments":["I"]},{"Key":"reduce I","Fragments":["don't"]},{"Key":"think folding","Fragments":["the"]},{"Key":"folding the","Fragments":["two","`a"]},{"Key":"two operations","Fragments":["together"]},{"Key":"operations together","Fragments":["would"]},{"Key":"together would","Fragments":["lose"]},{"Key":"would lose","Fragments":["that"]},{"Key":"lose that","Fragments":["much."]},{"Key":"much. Not","Fragments":["sure"]},{"Key":"out combining","Fragments":["the"]},{"Key":"map and","Fragments":["reduce","filter"]},{"Key":"reduce calls","Fragments":["from"]},{"Key":"calls from","Fragments":["the"]},{"Key":"previous versions,","Fragments":["as"]},{"Key":"versions, as","Fragments":["per"]},{"Key":"per @sabryna's","Fragments":["suggestion."]},{"Key":"Also, before","Fragments":["anyone"]},{"Key":"before anyone","Fragments":["says"]},{"Key":"anyone says","Fragments":["anything"]},{"Key":"says anything","Fragments":["about"]},{"Key":"Elixir not","Fragments":["usually"]},{"Key":"not usually","Fragments":["importing","`is_something?`."]},{"Key":"usually importing","Fragments":["stuff"]},{"Key":"importing stuff","Fragments":["and"]},{"Key":"calling `Enum.reduce`","Fragments":["explicitly..."]},{"Key":"`Enum.reduce` explicitly...","Fragments":["just"]},{"Key":"explicitly... just","Fragments":["trying","makes"]},{"Key":"trying out","Fragments":["that","`Stream.chunk`"]},{"Key":"the balance","Fragments":["of"]},{"Key":"balance of","Fragments":["clarity/conciseness"]},{"Key":"of clarity/conciseness","Fragments":["v."]},{"Key":"clarity/conciseness v.","Fragments":["explicitness"]},{"Key":"v. explicitness","Fragments":["is."]},{"Key":"explicitness is.","Fragments":["I"]},{"Key":"this lets","Fragments":["me"]},{"Key":"me fit","Fragments":["all"]},{"Key":"fit all","Fragments":["of"]},{"Key":"of `score`","Fragments":["on"]},{"Key":"`score` on","Fragments":["a"]},{"Key":"comments. Oh,","Fragments":["I"]},{"Key":"I struggled,","Fragments":["and"]},{"Key":"struggled, and","Fragments":["I've"]},{"Key":"and I've","Fragments":["learned","been"]},{"Key":"there's still","Fragments":["more"]},{"Key":"still more","Fragments":["I"]},{"Key":"learn. That's","Fragments":["actually"]},{"Key":"That's actually","Fragments":["my","exactly"]},{"Key":"actually my","Fragments":["first"]},{"Key":"first macro.","Fragments":["I"]},{"Key":"macro. I","Fragments":["just"]},{"Key":"just went","Fragments":["to"]},{"Key":"went to","Fragments":["read"]},{"Key":"for Code.eval_quoted","Fragments":["and"]},{"Key":"Code.eval_quoted and","Fragments":["I'm"]},{"Key":"quite seeing","Fragments":["how"]},{"Key":"fit in.","Fragments":["I"]},{"Key":"in. I","Fragments":["obviously"]},{"Key":"I obviously","Fragments":["need"]},{"Key":"obviously need","Fragments":["to"]},{"Key":"to re-study","Fragments":["how"]},{"Key":"re-study how","Fragments":["macros"]},{"Key":"how macros","Fragments":["work."]},{"Key":"macros work.","Fragments":["I"]},{"Key":"as difficult","Fragments":["of"]},{"Key":"difficult of","Fragments":["a"]},{"Key":"a conceptual","Fragments":["leap"]},{"Key":"conceptual leap","Fragments":["from"]},{"Key":"leap from","Fragments":["metaprogramming"]},{"Key":"from metaprogramming","Fragments":["dynamic"]},{"Key":"metaprogramming dynamic","Fragments":["languages"]},{"Key":"dynamic languages","Fragments":["at"]},{"Key":"languages at","Fragments":["parse"]},{"Key":"at parse","Fragments":["time"]},{"Key":"parse time","Fragments":["to"]},{"Key":"to proper","Fragments":["macros."]},{"Key":"actually didn't","Fragments":["find","change"]},{"Key":"find Keyword.keyword?","Fragments":["until"]},{"Key":"Keyword.keyword? until","Fragments":["late"]},{"Key":"until late","Fragments":["in"]},{"Key":"late in","Fragments":["the"]},{"Key":"exercise (used","Fragments":["on"]},{"Key":"(used on","Fragments":["line"]},{"Key":"line 52).","Fragments":["Yes,"]},{"Key":"52). Yes,","Fragments":["I"]},{"Key":"simplify other","Fragments":["parts"]},{"Key":"your description","Fragments":["of"]},{"Key":"description of","Fragments":["basically","the"]},{"Key":"of basically","Fragments":["a"]},{"Key":"of graph/nodes/edges,","Fragments":["which"]},{"Key":"graph/nodes/edges, which","Fragments":["is"]},{"Key":"By \"update","Fragments":["the"]},{"Key":"\"update the","Fragments":["record"]},{"Key":"record directly\"","Fragments":["are"]},{"Key":"directly\" are","Fragments":["you"]},{"Key":"you suggesting","Fragments":["I"]},{"Key":"suggesting I","Fragments":["use","rearrange"]},{"Key":"a Graph","Fragments":["record","record"]},{"Key":"Graph record","Fragments":["instead","as"]},{"Key":"record instead","Fragments":["of"]},{"Key":"accumulate values?","Fragments":["That's"]},{"Key":"values? That's","Fragments":["a"]},{"Key":"used HashDict","Fragments":["because"]},{"Key":"HashDict because","Fragments":["I'm"]},{"Key":"more familiar","Fragments":["with"]},{"Key":"also found","Fragments":["myself"]},{"Key":"found myself","Fragments":["adding"]},{"Key":"myself adding","Fragments":["some"]},{"Key":"some additional","Fragments":["test"]},{"Key":"additional test","Fragments":["prior"]},{"Key":"test prior","Fragments":["to"]},{"Key":"the big","Fragments":["\"graph"]},{"Key":"big \"graph","Fragments":["with"]},{"Key":"\"graph with","Fragments":["attributes\""]},{"Key":"with attributes\"","Fragments":["test"]},{"Key":"attributes\" test","Fragments":["to"]},{"Key":"test to","Fragments":["help","handle"]},{"Key":"me build","Fragments":["out"]},{"Key":"build out","Fragments":["incremental"]},{"Key":"out incremental","Fragments":["pieces"]},{"Key":"incremental pieces","Fragments":["before"]},{"Key":"pieces before","Fragments":["a"]},{"Key":"before a","Fragments":["more"]},{"Key":"more realistic","Fragments":["use."]},{"Key":"realistic use.","Fragments":["I'll"]},{"Key":"use. I'll","Fragments":["get"]},{"Key":"I'll get","Fragments":["that"]},{"Key":"that organized","Fragments":["and"]},{"Key":"organized and","Fragments":["submit"]},{"Key":"PR when","Fragments":["I"]},{"Key":"still finding","Fragments":["my"]},{"Key":"my \"style\".","Fragments":["I've"]},{"Key":"\"style\". I've","Fragments":["not"]},{"Key":"done much","Fragments":["importing,"]},{"Key":"much importing,","Fragments":["so"]},{"Key":"importing, so","Fragments":["I"]},{"Key":"an opinion","Fragments":["on"]},{"Key":"do find","Fragments":["that","it"]},{"Key":"in cases","Fragments":["like"]},{"Key":"your 3","Fragments":["pipelines"]},{"Key":"3 pipelines","Fragments":["on"]},{"Key":"pipelines on","Fragments":["a"]},{"Key":"single line,","Fragments":["that's"]},{"Key":"line, that's","Fragments":["sort"]},{"Key":"the border","Fragments":["where"]},{"Key":"border where","Fragments":["I"]},{"Key":"consider going","Fragments":["to"]},{"Key":"to multiple","Fragments":["lines.","lines.","lines,","lines."]},{"Key":"multiple lines.","Fragments":["I",";)"]},{"Key":"lines. I","Fragments":["waffle"]},{"Key":"I waffle","Fragments":["which"]},{"Key":"waffle which","Fragments":["side"]},{"Key":"which side","Fragments":["which"]},{"Key":"side which","Fragments":["specific"]},{"Key":"which specific","Fragments":["case"]},{"Key":"specific case","Fragments":["falls","of","and"]},{"Key":"case falls","Fragments":["upon."]},{"Key":"mean updating","Fragments":["the"]},{"Key":"record directly.","Fragments":["It's"]},{"Key":"directly. It's","Fragments":["a"]},{"Key":"faster too","Fragments":["(not"]},{"Key":"too (not","Fragments":["that"]},{"Key":"(not that","Fragments":["it"]},{"Key":"it matters,","Fragments":["but"]},{"Key":"matters, but","Fragments":["it's"]},{"Key":"small tuple","Fragments":["update"]},{"Key":"tuple update","Fragments":["compared"]},{"Key":"update compared","Fragments":["to"]},{"Key":"a hashdict","Fragments":["update)."]},{"Key":"The big","Fragments":["graph"]},{"Key":"big graph","Fragments":["with"]},{"Key":"graph with","Fragments":["attributes"]},{"Key":"with attributes","Fragments":["test"]},{"Key":"attributes test","Fragments":["is"]},{"Key":"indeed a","Fragments":["bit","functional"]},{"Key":"bit monolithic.","Fragments":["Guess"]},{"Key":"monolithic. Guess","Fragments":["I"]},{"Key":"Guess I","Fragments":["got"]},{"Key":"got lazy","Fragments":["when"]},{"Key":"lazy when","Fragments":["writing"]},{"Key":"and threw","Fragments":["a"]},{"Key":"threw a","Fragments":["lot","syntax"]},{"Key":"of possible","Fragments":["problems"]},{"Key":"possible problems","Fragments":["in"]},{"Key":"problems in","Fragments":["a"]},{"Key":"single test","Fragments":["case."]},{"Key":" `Code.eval_quoted`","Fragments":["turns"]},{"Key":"`Code.eval_quoted` turns","Fragments":["out"]},{"Key":"out not","Fragments":["to"]},{"Key":"be needed","Fragments":["at"]},{"Key":"needed at","Fragments":["all"]},{"Key":"all if","Fragments":["you"]},{"Key":"use Record.new(a:","Fragments":["...,"]},{"Key":"Record.new(a: ...,","Fragments":["b:"]},{"Key":"..., b:","Fragments":["...)","...]`","...]`"]},{"Key":"b: ...)","Fragments":["instead"]},{"Key":"...) instead","Fragments":["of"]},{"Key":"the `Record[a:","Fragments":["...,","...,"]},{"Key":"`Record[a: ...,","Fragments":["b:","b:"]},{"Key":"b: ...]`","Fragments":["syntax.","syntax."]},{"Key":"...]` syntax.","Fragments":["I"]},{"Key":"syntax. I","Fragments":["suspect"]},{"Key":"has something","Fragments":["to","to","called"]},{"Key":"the compile","Fragments":["time"]},{"Key":"time translation","Fragments":["of"]},{"Key":"translation of","Fragments":["the","the"]},{"Key":"an uncommon","Fragments":["style"]},{"Key":"uncommon style","Fragments":["of"]},{"Key":"function naming","Fragments":["or"]},{"Key":"naming or","Fragments":["imports"]},{"Key":"or imports","Fragments":["or"]},{"Key":"imports or","Fragments":["anything"]},{"Key":"or anything","Fragments":["like"]},{"Key":"anything like","Fragments":["that"]},{"Key":"things on","Fragments":["a","the"]},{"Key":"line it's","Fragments":["time"]},{"Key":"it's time","Fragments":["to"]},{"Key":"move to","Fragments":["multiple"]},{"Key":"Don't get","Fragments":["me"]},{"Key":"get me","Fragments":["wrong;"]},{"Key":"me wrong;","Fragments":["using"]},{"Key":"wrong; using","Fragments":["the"]},{"Key":"imports isn't","Fragments":["about"]},{"Key":"line -","Fragments":["that's"]},{"Key":"nice side-effect.","Fragments":["The"]},{"Key":"side-effect. The","Fragments":["reason"]},{"Key":"I'm tending","Fragments":["to"]},{"Key":"tending to","Fragments":["like"]},{"Key":"like using","Fragments":["imports"]},{"Key":"using imports","Fragments":["is"]},{"Key":"imports is","Fragments":["that"]},{"Key":"module references","Fragments":["clutter"]},{"Key":"references clutter","Fragments":["the"]},{"Key":"clutter the","Fragments":["code"]},{"Key":"and hinder","Fragments":["your"]},{"Key":"hinder your","Fragments":["immediate"]},{"Key":"your immediate","Fragments":["understanding"]},{"Key":"immediate understanding","Fragments":["of"]},{"Key":"understanding of","Fragments":["what"]},{"Key":"it *does*","Fragments":["rather"]},{"Key":"*does* rather","Fragments":["than"]},{"Key":"than which","Fragments":["implementations"]},{"Key":"implementations it","Fragments":["happens"]},{"Key":"it happens","Fragments":["to"]},{"Key":"like `s","Fragments":["=="]},{"Key":"interesting exercise","Fragments":["with"]},{"Key":"the \"DRY\"","Fragments":["principle."]},{"Key":"\"DRY\" principle.","Fragments":["If"]},{"Key":"principle. If","Fragments":["you"]},{"Key":"different verses","Fragments":["of"]},{"Key":"verses of","Fragments":["the"]},{"Key":"song as","Fragments":["*content*"]},{"Key":"as *content*","Fragments":["rather"]},{"Key":"*content* rather","Fragments":["than"]},{"Key":"than logic","Fragments":["(which"]},{"Key":"logic (which","Fragments":["they"]},{"Key":"(which they","Fragments":["are),"]},{"Key":"they are),","Fragments":["then"]},{"Key":"are), then","Fragments":["it"]},{"Key":"then it","Fragments":["becomes","struck","has","probably"]},{"Key":"becomes more","Fragments":["palatable"]},{"Key":"more palatable","Fragments":["to"]},{"Key":"palatable to","Fragments":["have"]},{"Key":"have repetition","Fragments":["in","for"]},{"Key":"in them.","Fragments":["If","Doing"]},{"Key":"them. If","Fragments":["you"]},{"Key":"you allow","Fragments":["yourself"]},{"Key":"allow yourself","Fragments":["to"]},{"Key":"yourself to","Fragments":["have"]},{"Key":"repetition for","Fragments":["the"]},{"Key":"are dissimilar","Fragments":["enough"]},{"Key":"dissimilar enough","Fragments":["to"]},{"Key":"to merit","Fragments":["it,"]},{"Key":"merit it,","Fragments":["I"]},{"Key":"complete this","Fragments":["exercise"]},{"Key":"in about","Fragments":["half"]},{"Key":"about half","Fragments":["as"]},{"Key":"half as","Fragments":["much"]},{"Key":"much code,","Fragments":["with"]},{"Key":"code, with","Fragments":["a"]},{"Key":"readable result","Fragments":["(IMHO)."]},{"Key":"suggestions incrementally.","Fragments":["This"]},{"Key":"incrementally. This","Fragments":["uses"]},{"Key":"This uses","Fragments":["a"]},{"Key":"record as","Fragments":["my"]},{"Key":"my accumulators.","Fragments":["I"]},{"Key":"accumulators. I","Fragments":["definitely"]},{"Key":"definitely like","Fragments":["the"]},{"Key":"the improvement.","Fragments":["Next"]},{"Key":"improvement. Next","Fragments":["I'll"]},{"Key":"Next I'll","Fragments":["tackle"]},{"Key":"I'll tackle","Fragments":["trying"]},{"Key":"tackle trying","Fragments":["to"]},{"Key":"the exception","Fragments":["raising","of","is","of"]},{"Key":"exception raising","Fragments":["code"]},{"Key":"raising code","Fragments":["more"]},{"Key":"Yup, definitely","Fragments":["an"]},{"Key":"`Dict.update`, it's","Fragments":["often"]},{"Key":"often quite","Fragments":["useful."]},{"Key":" `import","Fragments":["Enum`"]},{"Key":"`import Enum`","Fragments":["is"]},{"Key":"Enum` is","Fragments":["not"]},{"Key":"not recommended","Fragments":["in"]},{"Key":"recommended in","Fragments":["Elixir."]},{"Key":"The common","Fragments":["way"]},{"Key":"common way","Fragments":["is","to"]},{"Key":"to qualify","Fragments":["functions"]},{"Key":"qualify functions","Fragments":["with"]},{"Key":"their module","Fragments":["names"]},{"Key":"names (shortening","Fragments":["them"]},{"Key":"(shortening them","Fragments":["with"]},{"Key":"with `alias`","Fragments":["if"]},{"Key":"`alias` if","Fragments":["necessary)."]},{"Key":"if necessary).","Fragments":["Specifically"]},{"Key":"necessary). Specifically","Fragments":["with"]},{"Key":"Specifically with","Fragments":["`Enum`"]},{"Key":"with `Enum`","Fragments":["there","or"]},{"Key":"`Enum` there","Fragments":["is"]},{"Key":"that `Stream`","Fragments":["exposes"]},{"Key":"`Stream` exposes","Fragments":["much"]},{"Key":"exposes much","Fragments":["of"]},{"Key":"same functions","Fragments":["but"]},{"Key":"functions but","Fragments":["in"]},{"Key":"way (`Stream.map(...)","Fragments":["|\u003e"]},{"Key":"(`Stream.map(...) |\u003e","Fragments":["Enum.filter(...)`"]},{"Key":"|\u003e Enum.filter(...)`","Fragments":["avoids"]},{"Key":"Enum.filter(...)` avoids","Fragments":["creating"]},{"Key":"avoids creating","Fragments":["a"]},{"Key":"list between","Fragments":["`map`"]},{"Key":"between `map`","Fragments":["and"]},{"Key":"`map` and","Fragments":["`filter`).","`filter`.","`filter`.","`filter`.","`filter`","`filter`:","`filter`","`filter`","`filter`","`filter`,"]},{"Key":" `{","Fragments":[":ok,"]},{"Key":"`{ :ok,","Fragments":["chars"]},{"Key":"= String.to_char_list(...)`","Fragments":["can"]},{"Key":"String.to_char_list(...)` can","Fragments":["be"]},{"Key":"written `chars","Fragments":["="]},{"Key":"`chars =","Fragments":["String.to_char_list!`."]},{"Key":"= String.to_char_list!`.","Fragments":["In"]},{"Key":"String.to_char_list!`. In","Fragments":["both"]},{"Key":"In both","Fragments":["cases"]},{"Key":"both cases","Fragments":["an"]},{"Key":"cases an","Fragments":["error"]},{"Key":"error is","Fragments":["raised"]},{"Key":"is raised","Fragments":["if"]},{"Key":"raised if","Fragments":["the"]},{"Key":"conversion fails","Fragments":["but"]},{"Key":"fails but","Fragments":["`String.to_char_list!`"]},{"Key":"but `String.to_char_list!`","Fragments":["is"]},{"Key":"slightly shorter","Fragments":["and"]},{"Key":"works better","Fragments":["with"]},{"Key":"`|\u003e` pipelines.","Fragments":["Same"]},{"Key":"pipelines. Same","Fragments":["for"]},{"Key":"About your","Fragments":["approach"]},{"Key":"this problem:","Fragments":["you"]},{"Key":"problem: you","Fragments":["recompute"]},{"Key":"you recompute","Fragments":["the"]},{"Key":"recompute the","Fragments":["sorted"]},{"Key":"downcased \"word\"","Fragments":["for"]},{"Key":"\"word\" for","Fragments":["every"]},{"Key":"every possibility.","Fragments":["Can"]},{"Key":"possibility. Can","Fragments":["you"]},{"Key":"have these","Fragments":["viewpoints,"]},{"Key":"these viewpoints,","Fragments":["thanks!"]},{"Key":"Yup, parens","Fragments":["aren't"]},{"Key":"parens aren't","Fragments":["a"]},{"Key":"aren't a","Fragments":["part"]},{"Key":"capture expression.","Fragments":["They"]},{"Key":"expression. They","Fragments":["are"]},{"Key":"only needed","Fragments":["in","for"]},{"Key":"in expressions","Fragments":["like"]},{"Key":"like `\u0026(\u00261","Fragments":["+","+","+","+"]},{"Key":"+ \u00262)`","Fragments":["and","which"]},{"Key":"\u00262)` and","Fragments":["`\u0026(\u00261)`"]},{"Key":"and `\u0026(\u00261)`","Fragments":["(because"]},{"Key":"`\u0026(\u00261)` (because","Fragments":["`\u0026\u00261`"]},{"Key":"(because `\u0026\u00261`","Fragments":["gets"]},{"Key":"`\u0026\u00261` gets","Fragments":["parsed"]},{"Key":"as `\u0026\u0026","Fragments":["1`)."]},{"Key":"few comments:","Fragments":["You"]},{"Key":"comments: You","Fragments":["can"]},{"Key":"write `String.length(s)","Fragments":["==","=="]},{"Key":"0` as","Fragments":["`s","`s"]},{"Key":"and `String.last(s)","Fragments":["=="]},{"Key":"\"?\"` as","Fragments":["`String.ends_with?(s,"]},{"Key":"more consideration,","Fragments":["though:"]},{"Key":"consideration, though:","Fragments":["it"]},{"Key":"though: it","Fragments":["seems"]},{"Key":"some unnecessary","Fragments":["work"]},{"Key":"by joining","Fragments":["the"]},{"Key":"the enum","Fragments":["at"]},{"Key":"enum at","Fragments":["the"]},{"Key":"of cleanup","Fragments":["then"]},{"Key":"cleanup then","Fragments":["splitting"]},{"Key":"string again","Fragments":["inside"]},{"Key":"again inside","Fragments":["split."]},{"Key":"inside split.","Fragments":["I"]},{"Key":"split. I","Fragments":["would"]},{"Key":"make cleanup","Fragments":["return"]},{"Key":"cleanup return","Fragments":["an"]},{"Key":"an enum","Fragments":["and"]},{"Key":"enum and","Fragments":["then"]},{"Key":"just map","Fragments":["`String.downcase`"]},{"Key":"map `String.downcase`","Fragments":["over"]},{"Key":"`String.downcase` over","Fragments":["it,"]},{"Key":"over it,","Fragments":["as"]},{"Key":"feels more","Fragments":["straightforward."]},{"Key":"great. Just","Fragments":["an"]},{"Key":"an FYI,","Fragments":["not"]},{"Key":"FYI, not","Fragments":["really"]},{"Key":"extra parens","Fragments":["around"]},{"Key":"capture expression:","Fragments":["`\u0026[function.(\u00261)"]},{"Key":"expression: `\u0026[function.(\u00261)","Fragments":["|"]},{"Key":"`\u0026[function.(\u00261) |","Fragments":["\u00262]`"]},{"Key":"| \u00262]`","Fragments":["should"]},{"Key":"\u00262]` should","Fragments":["work"]},{"Key":"work just","Fragments":["fine.","as"]},{"Key":"fine. Of","Fragments":["course,"]},{"Key":"Of course,","Fragments":["if","you","you'd"]},{"Key":"course, if","Fragments":["you"]},{"Key":"them there","Fragments":["that's"]},{"Key":"there that's","Fragments":["fine"]},{"Key":"that's fine","Fragments":["too."]},{"Key":"fine too.","Fragments":[":)"]},{"Key":"Thanks, @spencer.","Fragments":["I"]},{"Key":"@spencer. I","Fragments":["was"]},{"Key":"was wondering,","Fragments":["is"]},{"Key":"wondering, is","Fragments":["it"]},{"Key":"it standard","Fragments":["(acceptable"]},{"Key":"standard (acceptable","Fragments":["and"]},{"Key":"(acceptable and","Fragments":["good)"]},{"Key":"and good)","Fragments":["practice"]},{"Key":"good) practice","Fragments":["in"]},{"Key":"clauses where","Fragments":["the"]},{"Key":"source order","Fragments":["is"]},{"Key":"order is","Fragments":["significant?","the","`f.(h)`"]},{"Key":"is significant?","Fragments":["For"]},{"Key":"significant? For","Fragments":["example,"]},{"Key":"the earth-specific","Fragments":["clause"]},{"Key":"earth-specific clause","Fragments":["of"]},{"Key":"clause of","Fragments":["`age_on`","handle_decl.","`cond`","the"]},{"Key":"of `age_on`","Fragments":["down"]},{"Key":"`age_on` down","Fragments":["below"]},{"Key":"generic one,","Fragments":["it"]},{"Key":"one, it","Fragments":["would"]},{"Key":"would no","Fragments":["longer"]},{"Key":"longer function","Fragments":["correctly."]},{"Key":"function correctly.","Fragments":["That"]},{"Key":"correctly. That","Fragments":["seems"]},{"Key":"little brittle","Fragments":["to"]},{"Key":"brittle to","Fragments":["me,"]},{"Key":"that normal","Fragments":["and"]},{"Key":"normal and","Fragments":["preferred"]},{"Key":"and preferred","Fragments":["to"]},{"Key":"that, or","Fragments":["is","did"]},{"Key":"clauses mutually","Fragments":["exclusive"]},{"Key":"exclusive with","Fragments":["guards,"]},{"Key":"That's completely","Fragments":["normal,"]},{"Key":"completely normal,","Fragments":["both"]},{"Key":"normal, both","Fragments":["in"]},{"Key":"clauses and","Fragments":["guard"]},{"Key":"helpful feedback","Fragments":["with"]},{"Key":"feedback with","Fragments":["Elixir."]},{"Key":"Elixir. Hope","Fragments":["you"]},{"Key":"great Christmas","Fragments":["and"]},{"Key":"Christmas and","Fragments":["New","a"]},{"Key":"and New","Fragments":["Years."]},{"Key":"New Years.","Fragments":[":)"]},{"Key":"And merry","Fragments":["Christmas"]},{"Key":"merry Christmas","Fragments":["and"]},{"Key":"happy new","Fragments":["year"]},{"Key":"new year","Fragments":["to"]},{"Key":"year to","Fragments":["you"]},{"Key":"you as","Fragments":["well."]},{"Key":"at `Regex.scan`?","Fragments":["It"]},{"Key":"`Regex.scan`? It","Fragments":["can"]},{"Key":"update an","Fragments":["accumulator","existing"]},{"Key":"accumulator for","Fragments":["each"]},{"Key":"list. This","Fragments":["is","can"]},{"Key":"very general","Fragments":["pattern","function"]},{"Key":"general pattern","Fragments":["and"]},{"Key":"pattern and","Fragments":["there"]},{"Key":"function `Enum.reduce`","Fragments":["that"]},{"Key":"`Enum.reduce` that","Fragments":["encapsulates"]},{"Key":"that encapsulates","Fragments":["that"]},{"Key":"encapsulates that","Fragments":["pattern."]},{"Key":"initially had","Fragments":["the"]},{"Key":"shifting code","Fragments":["inline"]},{"Key":"code inline","Fragments":["in"]},{"Key":"the square","Fragments":["function,"]},{"Key":"square function,","Fragments":["but"]},{"Key":"little clearer","Fragments":["to"]},{"Key":"reader unfamiliar","Fragments":["with"]},{"Key":"the technique","Fragments":["to","before,"]},{"Key":"technique to","Fragments":["extract","extract"]},{"Key":"extract it","Fragments":["out"]},{"Key":"Btw, I","Fragments":["agree","think"]},{"Key":"detection isn't","Fragments":["what"]},{"Key":"isn't what","Fragments":["you'd"]},{"Key":"what you'd","Fragments":["use"]},{"Key":"regular code.","Fragments":["There's"]},{"Key":"code. There's","Fragments":["a"]},{"Key":"tradeoff for","Fragments":["an"]},{"Key":"exercise author,","Fragments":["requiring"]},{"Key":"author, requiring","Fragments":["the"]},{"Key":"the user","Fragments":["to","towards","of","of","to"]},{"Key":"user to","Fragments":["do","classify"]},{"Key":"more accurate","Fragments":["error"]},{"Key":"accurate error","Fragments":["reporting"]},{"Key":"error reporting","Fragments":["tends"]},{"Key":"reporting tends","Fragments":["to"]},{"Key":"force the","Fragments":["user"]},{"Key":"user towards","Fragments":["a"]},{"Key":"particular solution","Fragments":["and"]},{"Key":"and forces","Fragments":["more"]},{"Key":"forces more","Fragments":["complicated"]},{"Key":"much happier","Fragments":["about"]},{"Key":"happier about","Fragments":["the"]},{"Key":"detection being","Fragments":["better"]},{"Key":"being better","Fragments":["localized"]},{"Key":"better localized","Fragments":["primarily"]},{"Key":"localized primarily","Fragments":["to"]},{"Key":"primarily to","Fragments":["handle_keywords,"]},{"Key":"to handle_keywords,","Fragments":["plus"]},{"Key":"handle_keywords, plus","Fragments":["a"]},{"Key":"catchall clause","Fragments":["of"]},{"Key":" Sigh,","Fragments":["I"]},{"Key":"Sigh, I","Fragments":["need"]},{"Key":"stop nitpicking","Fragments":["this"]},{"Key":"nitpicking this","Fragments":["exercise."]},{"Key":"I seem","Fragments":["to","to"]},{"Key":"same comment","Fragments":["regardless"]},{"Key":"comment regardless","Fragments":["of"]},{"Key":"problem actually","Fragments":["exists."]},{"Key":"actually exists.","Fragments":["You're"]},{"Key":"exists. You're","Fragments":["right"]},{"Key":"Having slightly","Fragments":["different"]},{"Key":"names would","Fragments":["help,"]},{"Key":"would help,","Fragments":["but"]},{"Key":"help, but","Fragments":["this","vague"]},{"Key":"of me","Fragments":["not"]},{"Key":"not reading","Fragments":["correctly."]},{"Key":"anonymous inline","Fragments":["functions,","functions,"]},{"Key":"inline functions,","Fragments":["it's","but","as"]},{"Key":"functions, it's","Fragments":["a"]},{"Key":"taste when","Fragments":["to"]},{"Key":"use them.","Fragments":["I'd"]},{"Key":"them. I'd","Fragments":["just"]},{"Key":"simple expressions","Fragments":["like","is"]},{"Key":"1)` (something","Fragments":["done"]},{"Key":"(something done","Fragments":["correctly"]},{"Key":"done correctly","Fragments":["here)."]},{"Key":"Regarding new,","Fragments":["the"]},{"Key":"new, the","Fragments":["intention"]},{"Key":"intention was","Fragments":["that"]},{"Key":"on any","Fragments":["Enumerable."]},{"Key":"any Enumerable.","Fragments":["Maybe"]},{"Key":"Enumerable. Maybe","Fragments":["I"]},{"Key":"have added","Fragments":["a"]},{"Key":"a doc","Fragments":["comment"]},{"Key":"doc comment","Fragments":["in"]},{"Key":"comment in","Fragments":["the","the","several","the"]},{"Key":"bit curious","Fragments":["why"]},{"Key":"`Enum.count` when","Fragments":["you"]},{"Key":"you already","Fragments":["know","know","know","knew","knew"]},{"Key":"already know","Fragments":["the","the","roughly"]},{"Key":"the backing","Fragments":["list","map"]},{"Key":"backing list","Fragments":["is"]},{"Key":"list? Going","Fragments":["through"]},{"Key":"Going through","Fragments":["Enumerable"]},{"Key":"through Enumerable","Fragments":["does"]},{"Key":"Enumerable does","Fragments":["cost"]},{"Key":"does cost","Fragments":["a"]},{"Key":"cost a","Fragments":["bit"]},{"Key":"You sometimes","Fragments":["sort","sort"]},{"Key":"sometimes sort","Fragments":["the","the"]},{"Key":"list upon","Fragments":["adding"]},{"Key":"upon adding","Fragments":["an"]},{"Key":"adding an","Fragments":["element,","else","element","element"]},{"Key":"an element,","Fragments":["sometimes"]},{"Key":"element, sometimes","Fragments":["not."]},{"Key":"sometimes not.","Fragments":["You"]},{"Key":"not. You","Fragments":["sometimes"]},{"Key":"equality. If","Fragments":["you"]},{"Key":"you ensure","Fragments":["that"]},{"Key":"ensure that","Fragments":["every","something"]},{"Key":"that every","Fragments":["modification","time"]},{"Key":"every modification","Fragments":["operation"]},{"Key":"modification operation","Fragments":["keeps"]},{"Key":"operation keeps","Fragments":["the"]},{"Key":"list sorted","Fragments":["you"]},{"Key":"sorted you","Fragments":["don't"]},{"Key":"so upon","Fragments":["equality"]},{"Key":"upon equality","Fragments":["checking."]},{"Key":"equality checking.","Fragments":["It"]},{"Key":"also gives","Fragments":["you","us"]},{"Key":"gives you","Fragments":["a"]},{"Key":"useful invariant","Fragments":["to"]},{"Key":"invariant to","Fragments":["speed"]},{"Key":"to speed","Fragments":["up"]},{"Key":"speed up","Fragments":["various","this","this"]},{"Key":"up various","Fragments":["operations."]},{"Key":"The `Inspect`","Fragments":["instance"]},{"Key":"`Inspect` instance","Fragments":["could"]},{"Key":"instance could","Fragments":["be"]},{"Key":" defimpl","Fragments":["Inspect,"]},{"Key":"defimpl Inspect,","Fragments":["for:"]},{"Key":"Inspect, for:","Fragments":["CustomSet"]},{"Key":"for: CustomSet","Fragments":["do"]},{"Key":"import Kernel,","Fragments":["except:"]},{"Key":"Kernel, except:","Fragments":["[inspect:"]},{"Key":"except: [inspect:","Fragments":["2]"]},{"Key":"def inspect(s,","Fragments":["opts)"]},{"Key":"inspect(s, opts)","Fragments":["do"]},{"Key":" concat","Fragments":["[\"#\u003cCustomSet"]},{"Key":"concat [\"#\u003cCustomSet","Fragments":["\","]},{"Key":"[\"#\u003cCustomSet \",","Fragments":["Kernel.inspect(CustomSet.to_list(s),"]},{"Key":"\", Kernel.inspect(CustomSet.to_list(s),","Fragments":["opts),"]},{"Key":"Kernel.inspect(CustomSet.to_list(s), opts),","Fragments":["\"\u003e\"]"]},{"Key":"Using `Inspect.Algebra`","Fragments":["should"]},{"Key":"`Inspect.Algebra` should","Fragments":["make"]},{"Key":"should make","Fragments":["it","the","a"]},{"Key":"pretty print","Fragments":["nicer"]},{"Key":"print nicer","Fragments":["when"]},{"Key":"nicer when","Fragments":["space"]},{"Key":"when space","Fragments":["is"]},{"Key":"space is","Fragments":["tight."]},{"Key":"good, you've","Fragments":["avoided"]},{"Key":"you've avoided","Fragments":["most"]},{"Key":"avoided most","Fragments":["of"]},{"Key":"standard mistakes","Fragments":["on"]},{"Key":"mistakes on","Fragments":["this"]},{"Key":"one (not","Fragments":["using"]},{"Key":"using `==","Fragments":["\"\"`"]},{"Key":"and doing","Fragments":["`String.last(input)"]},{"Key":"doing `String.last(input)","Fragments":["=="]},{"Key":"`String.last(input) ==","Fragments":["\"?\"`).","\"?\"`","\"?\"`","\"?\"`."]},{"Key":"== \"?\"`).","Fragments":["One"]},{"Key":"\"?\"`). One","Fragments":["thing"]},{"Key":"though: should","Fragments":["\"1\""]},{"Key":"should \"1\"","Fragments":["be"]},{"Key":"\"1\" be","Fragments":["considered"]},{"Key":"Thank you!","Fragments":[":)"]},{"Key":"Ah, good","Fragments":["point"]},{"Key":"point -","Fragments":["haven't"]},{"Key":"- haven't","Fragments":["considered"]},{"Key":"haven't considered","Fragments":["that"]},{"Key":"considered that","Fragments":["upcasing","this"]},{"Key":"that upcasing","Fragments":["numbers"]},{"Key":"upcasing numbers","Fragments":["and"]},{"Key":"other non","Fragments":["alpha"]},{"Key":"non alpha","Fragments":["chars"]},{"Key":"alpha chars","Fragments":["is"]},{"Key":"is shouting,","Fragments":["too"]},{"Key":"shouting, too","Fragments":["..."]},{"Key":"too ...","Fragments":["will"]},{"Key":"... will","Fragments":["fix!"]},{"Key":"Oh, nice,","Fragments":["I"]},{"Key":"write `count_words`","Fragments":["using"]},{"Key":"`count_words` using","Fragments":["`Enum.reduce`."]},{"Key":"`Enum.reduce`. That","Fragments":["way"]},{"Key":"won't need","Fragments":["to"]},{"Key":"explicit recursion,","Fragments":["it"]},{"Key":"recursion, it","Fragments":["also"]},{"Key":"also works","Fragments":["with","with","on"]},{"Key":"of collections,","Fragments":["not"]},{"Key":"collections, not","Fragments":["just"]},{"Key":"replacing what","Fragments":["you","you"]},{"Key":"need with","Fragments":["spaces"]},{"Key":"spaces you","Fragments":["could"]},{"Key":"only extract","Fragments":["the"]},{"Key":"parts that","Fragments":["you","have"]},{"Key":"Oh! Thanks","Fragments":["so"]},{"Key":"Thanks so","Fragments":["much","much!","much"]},{"Key":"tips :)","Fragments":["..."]},{"Key":":) ...","Fragments":["indeed,"]},{"Key":"... indeed,","Fragments":["that"]},{"Key":"indeed, that","Fragments":["works"]},{"Key":"works much","Fragments":["better."]},{"Key":"better. Will","Fragments":["fix."]},{"Key":"didn't end","Fragments":["up"]},{"Key":"using Inspect.Algebra,","Fragments":["then"]},{"Key":"Inspect.Algebra, then","Fragments":["I"]},{"Key":"of protocol","Fragments":["String.Chars"]},{"Key":"protocol String.Chars","Fragments":["not"]},{"Key":"String.Chars not","Fragments":["implemented"]},{"Key":"not implemented","Fragments":["for"]},{"Key":"implemented for","Fragments":["{some"]},{"Key":"for {some","Fragments":["internal"]},{"Key":"{some internal","Fragments":["data"]},{"Key":"internal data","Fragments":["structure"]},{"Key":"data structure","Fragments":["that","you","that"]},{"Key":"structure that","Fragments":["I","contained"]},{"Key":"I shouldn't","Fragments":["care"]},{"Key":"shouldn't care","Fragments":["about}."]},{"Key":"care about}.","Fragments":["I"]},{"Key":"about}. I","Fragments":["think"]},{"Key":"biggest complaint","Fragments":["about"]},{"Key":"complaint about","Fragments":["Elxiir"]},{"Key":"about Elxiir","Fragments":["and"]},{"Key":"Elxiir and","Fragments":["the"]},{"Key":"whole Erlang","Fragments":["ecosystem"]},{"Key":"Erlang ecosystem","Fragments":["in"]},{"Key":"ecosystem in","Fragments":["general."]},{"Key":"Thanks. Yeah,","Fragments":["I"]},{"Key":"didn't do","Fragments":["a","tail","the"]},{"Key":"of refactoring","Fragments":["after"]},{"Key":"refactoring after","Fragments":["just"]},{"Key":"after just","Fragments":["getting"]},{"Key":"getting all","Fragments":["the"]},{"Key":"to pass,","Fragments":["so","but"]},{"Key":"pass, so","Fragments":["the"]},{"Key":"for Enum.count","Fragments":["is"]},{"Key":"Enum.count is","Fragments":["that"]},{"Key":"no List.count,","Fragments":["but"]},{"Key":"List.count, but","Fragments":["now"]},{"Key":"see Kernel.length","Fragments":["as"]},{"Key":"Kernel.length as","Fragments":["a"]},{"Key":"choice. Sometimes","Fragments":["it's"]},{"Key":"Sometimes it's","Fragments":["hard"]},{"Key":"find those","Fragments":["optimal"]},{"Key":"those optimal","Fragments":["calls."]},{"Key":"optimal calls.","Fragments":["However,"]},{"Key":"calls. However,","Fragments":["I"]},{"Key":"still don't","Fragments":["see"]},{"Key":"any alternative","Fragments":["to"]},{"Key":"to Enum.sort,","Fragments":["Enum.concat,"]},{"Key":"Enum.sort, Enum.concat,","Fragments":["Enum.member?"]},{"Key":"through and","Fragments":["refactor","made","do","implemented"]},{"Key":"and refactor","Fragments":["the"]},{"Key":"sort and","Fragments":["de-duplicate"]},{"Key":"and de-duplicate","Fragments":["behavior."]},{"Key":"actually looked","Fragments":["into","through"]},{"Key":"into Inspect.Algebra","Fragments":["for"]},{"Key":"Inspect.Algebra for","Fragments":["beer-song."]},{"Key":"for beer-song.","Fragments":["It's"]},{"Key":"beer-song. It's","Fragments":["not"]},{"Key":"not documented","Fragments":["well,"]},{"Key":"documented well,","Fragments":["and"]},{"Key":"and frankly,","Fragments":["for"]},{"Key":"frankly, for","Fragments":["this"]},{"Key":"case, I'm","Fragments":["not"]},{"Key":"it. The","Fragments":["only","`Kernel.inspect`","whole"]},{"Key":"only hint","Fragments":["you're"]},{"Key":"hint you're","Fragments":["giving"]},{"Key":"you're giving","Fragments":["it"]},{"Key":"to favor","Fragments":["breaking"]},{"Key":"favor breaking","Fragments":["between"]},{"Key":"breaking between","Fragments":["\"CustomSet\""]},{"Key":"between \"CustomSet\"","Fragments":["and"]},{"Key":"\"CustomSet\" and","Fragments":["the"]},{"Key":"space and","Fragments":["would","comma"]},{"Key":"a favored","Fragments":["line-break"]},{"Key":"favored line-break","Fragments":["point"]},{"Key":"line-break point","Fragments":["anyway."]},{"Key":"point anyway.","Fragments":["I"]},{"Key":"anyway. I","Fragments":["did"]},{"Key":"did run","Fragments":["into"]},{"Key":"issue calling","Fragments":["Kernel.inspect"]},{"Key":"calling Kernel.inspect","Fragments":["without"]},{"Key":"Kernel.inspect without","Fragments":["doing"]},{"Key":"without doing","Fragments":["what","that","extra"]},{"Key":"did to","Fragments":["avoid"]},{"Key":"avoid importing","Fragments":["it."]},{"Key":"importing it.","Fragments":["Nice."]},{"Key":" Reusing","Fragments":["the"]},{"Key":"Reusing the","Fragments":["Enum.reduce"]},{"Key":"the Enum.reduce","Fragments":["trick"]},{"Key":"Enum.reduce trick","Fragments":["from"]},{"Key":"previous (word_count)","Fragments":["exercise."]},{"Key":"reason that","Fragments":["there's","`a"]},{"Key":"no `List.count`","Fragments":["is"]},{"Key":"`List.count` is","Fragments":["that"]},{"Key":"there's `length`.","Fragments":["You"]},{"Key":"`length`. You","Fragments":["can"]},{"Key":"use `length`","Fragments":["in"]},{"Key":"`length` in","Fragments":["guards,"]},{"Key":" Alternative","Fragments":["to","to","to"]},{"Key":"Alternative to","Fragments":["`Enum.concat`:","`Enum.sort`:","`Enum.member?`:"]},{"Key":"to `Enum.concat`:","Fragments":["`++`."]},{"Key":"to `Enum.sort`:","Fragments":["Do"]},{"Key":"`Enum.sort`: Do","Fragments":["it"]},{"Key":"Do it","Fragments":["manually"]},{"Key":"it manually","Fragments":["(yes,"]},{"Key":"manually (yes,","Fragments":["it's"]},{"Key":"(yes, it's","Fragments":["a"]},{"Key":"work but","Fragments":["it","my","reverse"]},{"Key":"important optimization","Fragments":["here)."]},{"Key":"to `Enum.member?`:","Fragments":["`:lists.member`"]},{"Key":"`Enum.member?`: `:lists.member`","Fragments":["(first"]},{"Key":"`:lists.member` (first","Fragments":["rule"]},{"Key":"(first rule","Fragments":["of"]},{"Key":"Elixir: if","Fragments":["you"]},{"Key":"stdlib, look","Fragments":["in"]},{"Key":"Erlang (yes,","Fragments":["it"]},{"Key":"(yes, it","Fragments":["makes"]},{"Key":"a rather","Fragments":["weird","simple","readable"]},{"Key":"rather weird","Fragments":["stdlib))"]},{"Key":"for Algebra,","Fragments":["that"]},{"Key":"Algebra, that","Fragments":["wasn't"]},{"Key":"wasn't a","Fragments":["hint,"]},{"Key":"a hint,","Fragments":["that"]},{"Key":"hint, that","Fragments":["was"]},{"Key":"was all","Fragments":["I","uppercase."]},{"Key":"understand of","Fragments":["that"]},{"Key":"that module.","Fragments":[";)"]},{"Key":"module. ;)","Fragments":["I"]},{"Key":";) I","Fragments":["completely"]},{"Key":"completely understand","Fragments":["how"]},{"Key":"avoid it.","Fragments":["The"]},{"Key":"The `Kernel.inspect`","Fragments":["thing"]},{"Key":"`Kernel.inspect` thing","Fragments":["took"]},{"Key":"thing took","Fragments":["me"]},{"Key":"little while","Fragments":["to"]},{"Key":"figure out,","Fragments":["Elixir/Erlang","how"]},{"Key":"out, Elixir/Erlang","Fragments":["and"]},{"Key":"Elixir/Erlang and","Fragments":["good"]},{"Key":"good error","Fragments":["messages"]},{"Key":"error messages","Fragments":["don't","for","with"]},{"Key":"messages don't","Fragments":["really"]},{"Key":"really go","Fragments":["together."]},{"Key":" @benjamin","Fragments":["it"]},{"Key":"@benjamin it","Fragments":["looks"]},{"Key":"only sorted","Fragments":["and"]},{"Key":"sorted and","Fragments":["downcased","unsorted"]},{"Key":"and downcased","Fragments":["once"]},{"Key":"downcased once","Fragments":["here."]},{"Key":"once here.","Fragments":["Maybe"]},{"Key":"here. Maybe","Fragments":["the"]},{"Key":"if different","Fragments":["names"]},{"Key":"different names","Fragments":["were"]},{"Key":"names were","Fragments":["chosen"]},{"Key":"were chosen","Fragments":["for"]},{"Key":"chosen for","Fragments":["the"]},{"Key":"to `match`","Fragments":["vs."]},{"Key":"`match` vs.","Fragments":["`sorted_chars`?"]},{"Key":"vs. `sorted_chars`?","Fragments":["I"]},{"Key":"`sorted_chars`? I","Fragments":["also"]},{"Key":"also prefer","Fragments":["named"]},{"Key":"prefer named","Fragments":["private"]},{"Key":"to anonymous","Fragments":["inline"]},{"Key":"know what's","Fragments":["going"]},{"Key":"on. That","Fragments":["has"]},{"Key":"That has","Fragments":["less"]},{"Key":"has less","Fragments":["to"]},{"Key":"with `Inspect.Algebra`","Fragments":["and"]},{"Key":"`Inspect.Algebra` and","Fragments":["more"]},{"Key":"more with","Fragments":["`\"#{...}\"`","pattern"]},{"Key":"with `\"#{...}\"`","Fragments":["string"]},{"Key":"`\"#{...}\"` string","Fragments":["interpolation."]},{"Key":"string interpolation.","Fragments":["I"]},{"Key":"interpolation. I","Fragments":["believe"]},{"Key":"believe string","Fragments":["interpolation"]},{"Key":"interpolation converts","Fragments":["using"]},{"Key":"converts using","Fragments":["`String.Chars`"]},{"Key":"using `String.Chars`","Fragments":["and"]},{"Key":"`String.Chars` and","Fragments":["becomes"]},{"Key":"and becomes","Fragments":["annoying"]},{"Key":"becomes annoying","Fragments":["when"]},{"Key":"annoying when","Fragments":["you"]},{"Key":"a `String.Chars`","Fragments":["implementation."]},{"Key":"doesn't perform","Fragments":["as"]},{"Key":"perform as","Fragments":["well"]},{"Key":"it could.","Fragments":["For"]},{"Key":"could. For","Fragments":["example"]},{"Key":"example computing","Fragments":["an"]},{"Key":"computing an","Fragments":["intersection"]},{"Key":"an intersection","Fragments":["of"]},{"Key":"intersection of","Fragments":["the"]},{"Key":"lists using","Fragments":["that"]},{"Key":"that list","Fragments":["comprehension"]},{"Key":"comprehension has","Fragments":["`O(n*m)`"]},{"Key":"has `O(n*m)`","Fragments":["complexity,"]},{"Key":"`O(n*m)` complexity,","Fragments":["i.e."]},{"Key":"complexity, i.e.","Fragments":["`CustomSet.intersection(s1,"]},{"Key":"i.e. `CustomSet.intersection(s1,","Fragments":["s1)`"]},{"Key":"`CustomSet.intersection(s1, s1)`","Fragments":["has"]},{"Key":"s1)` has","Fragments":["quadratic"]},{"Key":"quadratic complexity.","Fragments":["It's"]},{"Key":"complexity. It's","Fragments":["possible"]},{"Key":"complexity of","Fragments":["`O(n+m)`"]},{"Key":"of `O(n+m)`","Fragments":["by"]},{"Key":"`O(n+m)` by","Fragments":["using"]},{"Key":"both lists","Fragments":["are","and","instead"]},{"Key":"sorted (hint:","Fragments":["think"]},{"Key":"(hint: think","Fragments":["of"]},{"Key":"how you'd","Fragments":["merge"]},{"Key":"you'd merge","Fragments":["the"]},{"Key":"merge the","Fragments":["lists"]},{"Key":"lists if","Fragments":["non-unique"]},{"Key":"if non-unique","Fragments":["elements"]},{"Key":"non-unique elements","Fragments":["are"]},{"Key":"elements are","Fragments":["allowed","in","in"]},{"Key":"allowed by","Fragments":["the"]},{"Key":"result would","Fragments":["still"]},{"Key":" @carlie","Fragments":["{"]},{"Key":"@carlie {","Fragments":[":inline,"]},{"Key":"{ :inline,","Fragments":["wrap:"]},{"Key":":inline, wrap:","Fragments":["1,"]},{"Key":"wrap: 1,","Fragments":["unwrap:"]},{"Key":"1, unwrap:","Fragments":["1"]},{"Key":"unwrap: 1","Fragments":["}"]},{"Key":"defp wrap(l)","Fragments":["do"]},{"Key":" set(list:","Fragments":["l)"]},{"Key":"defp unwrap(s)","Fragments":["do"]},{"Key":" set(s,","Fragments":[":list)"]},{"Key":" (Makes","Fragments":["the"]},{"Key":"(Makes the","Fragments":["code"]},{"Key":"good, aside","Fragments":["from","from"]},{"Key":"little thing.","Fragments":["This","This"]},{"Key":"thing. This","Fragments":["is","is"]},{"Key":"something many","Fragments":["people","people"]},{"Key":"do wrong","Fragments":["the","the"]},{"Key":"wrong the","Fragments":["first","first"]},{"Key":"first time:","Fragments":["repeated","repeated"]},{"Key":"time: repeated","Fragments":["appending","appending"]},{"Key":"repeated appending","Fragments":["using","using"]},{"Key":"appending using","Fragments":["`++`.","`++`."]},{"Key":"problem should","Fragments":["become","become","go"]},{"Key":"should become","Fragments":["obvious","obvious"]},{"Key":"become obvious","Fragments":["when","when"]},{"Key":"obvious when","Fragments":["you","you","you"]},{"Key":"write out","Fragments":["how","how"]},{"Key":"how your","Fragments":["code","code","code"]},{"Key":"code updates","Fragments":["the","the"]},{"Key":"updates the","Fragments":["`acc`","`acc`"]},{"Key":"the `acc`","Fragments":["for","for"]},{"Key":"list [1,","Fragments":["2,","2,"]},{"Key":"[1, 2,","Fragments":["3,","3]","3,","3]"]},{"Key":"2, 3,","Fragments":["4,","4,","4]`,","4]","4,","4,","4]`,","4]","4,","4,"]},{"Key":"3, 4,","Fragments":["...]","...]","5,","5,","5,","5,"]},{"Key":"4, ...]","Fragments":["(assuming","(assuming"]},{"Key":"...] (assuming","Fragments":["`f","`f"]},{"Key":"(assuming `f","Fragments":["=","="]},{"Key":"`f =","Fragments":["fun","fun"]},{"Key":"= fun","Fragments":["x","x","_,"]},{"Key":"fun x","Fragments":["-\u003e","-\u003e"]},{"Key":" []","Fragments":["++","++","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"]},{"Key":"[] ++","Fragments":["[1]","[1]"]},{"Key":" [1]","Fragments":["++","++"]},{"Key":"[1] ++","Fragments":["[2]","[2]"]},{"Key":" [1,","Fragments":["2]","2,","2]","2,"]},{"Key":"[1, 2]","Fragments":["++","++"]},{"Key":"2] ++","Fragments":["[3]","[3]","[3,","[3,","[3,","[3,"]},{"Key":"2, 3]","Fragments":["++","++"]},{"Key":"3] ++","Fragments":["[4]","[4]"]},{"Key":" Append","Fragments":["`++`","`++`"]},{"Key":"Append `++`","Fragments":["takes","takes"]},{"Key":"takes longer","Fragments":["the","the"]},{"Key":"longer the","Fragments":["more","more"]},{"Key":"more elements","Fragments":["are","are"]},{"Key":"list, in","Fragments":["terms","terms"]},{"Key":"of complexity","Fragments":["notation","notation"]},{"Key":"complexity notation","Fragments":["it's","it's"]},{"Key":"notation it's","Fragments":["`O(n)`.","`O(n)`."]},{"Key":"it's `O(n)`.","Fragments":["So","So"]},{"Key":"`O(n)`. So","Fragments":["the","the"]},{"Key":"step would","Fragments":["take","take"]},{"Key":"would take","Fragments":["approximately","1","approximately","1"]},{"Key":"take approximately","Fragments":["0","0"]},{"Key":"approximately 0","Fragments":["units","units"]},{"Key":"0 units","Fragments":["of","of"]},{"Key":"units of","Fragments":["time,","time.","time,","time."]},{"Key":"of time,","Fragments":["the","the","the","the"]},{"Key":"time, the","Fragments":["next","next","next","next"]},{"Key":"next step","Fragments":["(1","(1"]},{"Key":"step (1","Fragments":["element","element"]},{"Key":"(1 element","Fragments":["in","in"]},{"Key":"in `acc`)","Fragments":["would","would"]},{"Key":"`acc`) would","Fragments":["take","take"]},{"Key":"take 1","Fragments":["unit","unit","*","*"]},{"Key":"1 unit","Fragments":["of","of"]},{"Key":"unit of","Fragments":["time,","time,"]},{"Key":"next 2,","Fragments":["then","then"]},{"Key":"2, then","Fragments":["3,","3,"]},{"Key":"then 3,","Fragments":["then","then"]},{"Key":"3, then","Fragments":["4,","4,"]},{"Key":"then 4,","Fragments":["...","..."]},{"Key":"of 10","Fragments":["elements","elements"]},{"Key":"10 elements","Fragments":["the","the"]},{"Key":"elements the","Fragments":["time","time"]},{"Key":"time taken","Fragments":["is","is"]},{"Key":"taken is","Fragments":["(roughly)","(roughly)"]},{"Key":"is (roughly)","Fragments":["`Enum.reduce(1..10,","`Enum.reduce(1..10,","linearly","linearly"]},{"Key":"(roughly) `Enum.reduce(1..10,","Fragments":["0,","0,"]},{"Key":"`Enum.reduce(1..10, 0,","Fragments":["\u0026(\u00261","\u0026(\u00261"]},{"Key":"0, \u0026(\u00261","Fragments":["+","+"]},{"Key":"+ \u00262))`","Fragments":["(==","(=="]},{"Key":"\u00262))` (==","Fragments":["55)","55)"]},{"Key":"(== 55)","Fragments":["units","units"]},{"Key":"55) units","Fragments":["of","of"]},{"Key":"of time.","Fragments":["For","For"]},{"Key":"time. For","Fragments":["a","a"]},{"Key":"of 1000","Fragments":["elements","elements","elements","elements"]},{"Key":"1000 elements","Fragments":["it's","takes","it's","takes"]},{"Key":"elements it's","Fragments":["`500500`.","`500500`."]},{"Key":"it's `500500`.","Fragments":["So","So"]},{"Key":"`500500`. So","Fragments":["the","the"]},{"Key":"time needed","Fragments":["becomes","becomes","for","for","for"]},{"Key":"needed becomes","Fragments":["a","a"]},{"Key":"performance problem","Fragments":["given","given"]},{"Key":"problem given","Fragments":["a","a"]},{"Key":"given a","Fragments":["big","big","large"]},{"Key":"big enough","Fragments":["list.","list."]},{"Key":"standard solution","Fragments":["to","to"]},{"Key":"this which","Fragments":["involves","involves"]},{"Key":"which involves","Fragments":["prepending","prepending"]},{"Key":"involves prepending","Fragments":["(which","(which"]},{"Key":"prepending (which","Fragments":["is","is"]},{"Key":"is extremely","Fragments":["cheap)","cheap)","terse."]},{"Key":"extremely cheap)","Fragments":["and","and"]},{"Key":"cheap) and","Fragments":["then","then"]},{"Key":"then reversing.","Fragments":["The","The"]},{"Key":"reversing. The","Fragments":["reverse","reverse"]},{"Key":"The reverse","Fragments":["may","may"]},{"Key":"reverse may","Fragments":["sound","sound"]},{"Key":"may sound","Fragments":["like","like"]},{"Key":"sound like","Fragments":["a","a"]},{"Key":"huge time","Fragments":["waste","waste"]},{"Key":"time waste","Fragments":["but","but"]},{"Key":"waste but","Fragments":["reverse","reverse"]},{"Key":"but reverse","Fragments":["is","is","takes"]},{"Key":"reverse is","Fragments":["`O(n)`,","`O(n)`,","done"]},{"Key":"is `O(n)`,","Fragments":["a","a"]},{"Key":"`O(n)`, a","Fragments":["reverse","reverse"]},{"Key":"a reverse","Fragments":["of","at","of"]},{"Key":"reverse of","Fragments":["a","a","a","a"]},{"Key":"elements takes","Fragments":["only","only"]},{"Key":"takes only","Fragments":["about","about"]},{"Key":"only about","Fragments":["2","2"]},{"Key":"about 2","Fragments":["times","times"]},{"Key":"2 times","Fragments":["as","as"]},{"Key":"the reverse","Fragments":["of","of","is","implementation.","implementation.","inside","method."]},{"Key":"of 500","Fragments":["elements.","elements."]},{"Key":"can believe","Fragments":["the"]},{"Key":"the String.Chars","Fragments":["protocol's"]},{"Key":"String.Chars protocol's","Fragments":["interaction"]},{"Key":"protocol's interaction","Fragments":["with"]},{"Key":"interaction with","Fragments":["string"]},{"Key":"with string","Fragments":["interpolation"]},{"Key":"interpolation could","Fragments":["be"]},{"Key":"the cause.","Fragments":["However,"]},{"Key":"cause. However,","Fragments":["my"]},{"Key":"However, my","Fragments":["first"]},{"Key":"iteration worked.","Fragments":["But"]},{"Key":"worked. But","Fragments":["if"]},{"Key":"I qualify","Fragments":["the"]},{"Key":"qualify the","Fragments":["inspect"]},{"Key":"the inspect","Fragments":["call","issue"]},{"Key":"inspect call","Fragments":["with"]},{"Key":"call with","Fragments":["the"]},{"Key":"module (Kernel.inspect)","Fragments":["things"]},{"Key":"(Kernel.inspect) things","Fragments":["start"]},{"Key":"things start","Fragments":["going"]},{"Key":"start going","Fragments":["haywire."]},{"Key":"going haywire.","Fragments":["I"]},{"Key":"haywire. I","Fragments":["don't"]},{"Key":"good mental","Fragments":["model"]},{"Key":"mental model","Fragments":["for"]},{"Key":"model for","Fragments":["why."]},{"Key":"that wrap/unwrap","Fragments":["idea."]},{"Key":"wrap/unwrap idea.","Fragments":["I"]},{"Key":"never would","Fragments":["have"]},{"Key":"give compile","Fragments":["hints"]},{"Key":"compile hints","Fragments":["to"]},{"Key":"hints to","Fragments":["inline","pass"]},{"Key":"to inline","Fragments":["it","the"]},{"Key":"performance mentality.","Fragments":["Which"]},{"Key":"mentality. Which","Fragments":["leads"]},{"Key":"Which leads","Fragments":["to"]},{"Key":"leads to","Fragments":["your","some"]},{"Key":"other comments.","Fragments":["I"]},{"Key":"comments. I","Fragments":["noticed"]},{"Key":"README \"How","Fragments":["it"]},{"Key":"\"How it","Fragments":["works"]},{"Key":"works internally","Fragments":["doesn't"]},{"Key":"internally doesn't","Fragments":["matter\""]},{"Key":"doesn't matter\"","Fragments":["which"]},{"Key":"matter\" which","Fragments":["made"]},{"Key":"which made","Fragments":["me","the"]},{"Key":"optimize my","Fragments":["algorithms"]},{"Key":"my algorithms","Fragments":[";-)"]},{"Key":"you again","Fragments":["for"]},{"Key":"a thorough","Fragments":["Nitpick"]},{"Key":"thorough Nitpick","Fragments":[":)"]},{"Key":"Nitpick :)","Fragments":["and"]},{"Key":":) and","Fragments":["yes,"]},{"Key":"and yes,","Fragments":["you"]},{"Key":"are absolutely","Fragments":["right."]},{"Key":"absolutely right.","Fragments":["Fixed"]},{"Key":"right. Fixed","Fragments":["in"]},{"Key":"next iteration","Fragments":["(and","has","manages"]},{"Key":"iteration (and","Fragments":["switched"]},{"Key":"(and switched","Fragments":["to"]},{"Key":"switched to","Fragments":["pipes).","some"]},{"Key":"exercism Elixir","Fragments":["branch!"]},{"Key":"Elixir branch!","Fragments":[":)"]},{"Key":" Alrighty.","Fragments":["Done."]},{"Key":"That README","Fragments":["comment"]},{"Key":"README comment","Fragments":["was"]},{"Key":"comment was","Fragments":["meant"]},{"Key":"was meant","Fragments":["more","to"]},{"Key":"meant more","Fragments":["as"]},{"Key":"as \"you","Fragments":["can"]},{"Key":"\"you can","Fragments":["use"]},{"Key":"any underlying","Fragments":["data"]},{"Key":"underlying data","Fragments":["structure"]},{"Key":"structure you","Fragments":["want\"."]},{"Key":"you want\".","Fragments":["Nitpickers"]},{"Key":"want\". Nitpickers","Fragments":["never"]},{"Key":"Nitpickers never","Fragments":["remember"]},{"Key":"never remember","Fragments":["the","those"]},{"Key":"README so","Fragments":["performance"]},{"Key":"so performance","Fragments":["stuff"]},{"Key":"performance stuff","Fragments":["will"]},{"Key":"stuff will","Fragments":["always"]},{"Key":"will always","Fragments":["be"]},{"Key":"always be","Fragments":["commented","written"]},{"Key":"OK, this","Fragments":["one"]},{"Key":"the wrap/unwrap","Fragments":["implementation."]},{"Key":"wrap/unwrap implementation.","Fragments":["I'll"]},{"Key":"implementation. I'll","Fragments":["still"]},{"Key":"I'll still","Fragments":["need"]},{"Key":"to circle","Fragments":["back"]},{"Key":"circle back","Fragments":["on"]},{"Key":"back on","Fragments":["performance","the"]},{"Key":"performance of","Fragments":["intersection"]},{"Key":"of intersection","Fragments":["when"]},{"Key":"intersection when","Fragments":["I"]},{"Key":"can spend","Fragments":["some"]},{"Key":"some focus","Fragments":["on"]},{"Key":" FYI:","Fragments":["on"]},{"Key":"FYI: on","Fragments":["elixir-lang-talk"]},{"Key":"on elixir-lang-talk","Fragments":["José"]},{"Key":"elixir-lang-talk José","Fragments":["actually"]},{"Key":"José actually","Fragments":["explained"]},{"Key":"actually explained","Fragments":["the"]},{"Key":"explained the","Fragments":["inspect"]},{"Key":"inspect issue","Fragments":["in"]},{"Key":"issue in","Fragments":["response"]},{"Key":"in response","Fragments":["to"]},{"Key":"response to","Fragments":["my","shouting"]},{"Key":"About indenting","Fragments":["the"]},{"Key":"indenting the","Fragments":["pipes:"]},{"Key":"the pipes:","Fragments":["https://github.com/elixir-lang/vim-elixir/pull/54"]},{"Key":"saw the","Fragments":["exchange","comment","point"]},{"Key":"the exchange","Fragments":["about"]},{"Key":"exchange about","Fragments":["stack"]},{"Key":"about stack","Fragments":["traces."]},{"Key":"In `difference`,","Fragments":["line"]},{"Key":"`difference`, line","Fragments":["44"]},{"Key":"line 44","Fragments":["you"]},{"Key":"44 you","Fragments":["could"]},{"Key":"use `unwrap`,","Fragments":["btw."]},{"Key":"more data:","Fragments":["in"]},{"Key":"data: in","Fragments":["OCaml"]},{"Key":"in OCaml","Fragments":["the","and","and","and","and","and","and","and"]},{"Key":"OCaml the","Fragments":["\"official\""]},{"Key":"the \"official\"","Fragments":["style"]},{"Key":"\"official\" style","Fragments":["seems"]},{"Key":"style seems","Fragments":["to"]},{"Key":"line because","Fragments":["that"]},{"Key":"line isn't","Fragments":["finished"]},{"Key":"isn't finished","Fragments":["yet."]},{"Key":"finished yet.","Fragments":["I"]},{"Key":"logic behind","Fragments":["that,","your"]},{"Key":"behind that,","Fragments":["but"]},{"Key":"but Elixir's","Fragments":["style"]},{"Key":"Elixir's style","Fragments":["still","of"]},{"Key":"style still","Fragments":["strikes"]},{"Key":"still strikes","Fragments":["me"]},{"Key":"strikes me","Fragments":["as","as"]},{"Key":"as more","Fragments":["elegant."]},{"Key":"more elegant.","Fragments":["In"]},{"Key":"elegant. In","Fragments":["OCaml"]},{"Key":"In OCaml","Fragments":["`|\u003e`"]},{"Key":"OCaml `|\u003e`","Fragments":["is"]},{"Key":"is less","Fragments":["of","intuitive","obvious","or","than"]},{"Key":"a prominent","Fragments":["feature"]},{"Key":"prominent feature","Fragments":["though."]},{"Key":"char sequences","Fragments":["of"]},{"Key":"sequences of","Fragments":["anagrams","one"]},{"Key":"of anagrams","Fragments":["we"]},{"Key":"anagrams we","Fragments":["should"]},{"Key":"get equal","Fragments":["char"]},{"Key":"equal char","Fragments":["lists."]},{"Key":" Looms","Fragments":["good."]},{"Key":"But can","Fragments":["you"]},{"Key":"avoid recomputing","Fragments":["the"]},{"Key":"recomputing the","Fragments":["downcased","sorted"]},{"Key":"downcased sorted","Fragments":["base"]},{"Key":"sorted base","Fragments":["for"]},{"Key":"base for","Fragments":["each"]},{"Key":"Ah yes,","Fragments":["of"]},{"Key":"yes, of","Fragments":["course"]},{"Key":"that `cond`","Fragments":["as"]},{"Key":"`cond` as","Fragments":["a"]},{"Key":"a `case`.","Fragments":["`case`"]},{"Key":"`case`. `case`","Fragments":["tends"]},{"Key":"`case` tends","Fragments":["to"]},{"Key":"lot faster","Fragments":["than","programs"]},{"Key":"`cond` (`cond`","Fragments":["is"]},{"Key":"(`cond` is","Fragments":["just"]},{"Key":"just shorthand","Fragments":["for","for"]},{"Key":"for repeated","Fragments":["`case"]},{"Key":"repeated `case","Fragments":["condition1"]},{"Key":"`case condition1","Fragments":["do"]},{"Key":"condition1 do","Fragments":["true"]},{"Key":"do true","Fragments":["-\u003e"]},{"Key":"-\u003e ...;","Fragments":["false"]},{"Key":"...; false","Fragments":["-\u003e"]},{"Key":"false -\u003e","Fragments":["case"]},{"Key":"-\u003e case","Fragments":["condition2"]},{"Key":"case condition2","Fragments":["do"]},{"Key":"condition2 do","Fragments":["..."]},{"Key":"... end","Fragments":["end`,"]},{"Key":"end end`,","Fragments":["in"]},{"Key":"end`, in","Fragments":["other"]},{"Key":"words `cond`","Fragments":["is"]},{"Key":"is shorthand","Fragments":["for","for","for","for"]},{"Key":"an `if","Fragments":["..."]},{"Key":"`if ...","Fragments":["else"]},{"Key":"else if","Fragments":["...","...`"]},{"Key":"if ...","Fragments":["else"]},{"Key":"if ...`","Fragments":["kind"]},{"Key":"...` kind","Fragments":["of"]},{"Key":"Oh, did","Fragments":["not"]},{"Key":"that cond","Fragments":["was"]},{"Key":"cond was","Fragments":["a"]},{"Key":"a synonym","Fragments":["for"]},{"Key":"synonym for","Fragments":["case"]},{"Key":"case in","Fragments":["Elixir.","my","the","`shouting?`","filter()"]},{"Key":"Nope, `cond`","Fragments":["and"]},{"Key":"and `case`","Fragments":["are"]},{"Key":"`case` are","Fragments":["two"]},{"Key":"two very","Fragments":["different"]},{"Key":"different constructs","Fragments":["and"]},{"Key":"constructs and","Fragments":["there"]},{"Key":"in how","Fragments":["often"]},{"Key":"how often","Fragments":["they"]},{"Key":"often they","Fragments":["are"]},{"Key":"are used.","Fragments":["`cond`"]},{"Key":"used. `cond`","Fragments":["is"]},{"Key":"rare because","Fragments":["pattern"]},{"Key":"because pattern","Fragments":["matching"]},{"Key":"so powerful","Fragments":["that"]},{"Key":"powerful that","Fragments":["we"]},{"Key":"we rarely","Fragments":["need"]},{"Key":"need `if-elseif-else`","Fragments":["chains."]},{"Key":"thing: `\u0026({\u00261,","Fragments":["count(strand,"]},{"Key":"`\u0026({\u00261, count(strand,","Fragments":["\u00261)})`"]},{"Key":"count(strand, \u00261)})`","Fragments":["can"]},{"Key":"\u00261)})` can","Fragments":["be"]},{"Key":"as `\u0026{\u00261,","Fragments":["count(strand,"]},{"Key":"`\u0026{\u00261, count(strand,","Fragments":["\u00261)}`."]},{"Key":"count(strand, \u00261)}`.","Fragments":["The"]},{"Key":"\u00261)}`. The","Fragments":["parentheses"]},{"Key":"for things","Fragments":["like","like"]},{"Key":"1)` due","Fragments":["to"]},{"Key":"to parsing","Fragments":["issues."]},{"Key":"Generally `Enum.reduce`","Fragments":["is"]},{"Key":"over `List.foldl`","Fragments":["as"]},{"Key":"`List.foldl` as","Fragments":["`Enum.reduce`"]},{"Key":"as `Enum.reduce`","Fragments":["is"]},{"Key":"general (works","Fragments":["on"]},{"Key":"(works on","Fragments":["ranges"]},{"Key":"and lots","Fragments":["of"]},{"Key":"things as","Fragments":["well)."]},{"Key":"of removing","Fragments":["the","characters","those"]},{"Key":"characters you","Fragments":["don't","do","can","don't","don't","do","don't","don't","do","don't","do","are","don't","want"]},{"Key":"want maybe","Fragments":["you"]},{"Key":"could search","Fragments":["for"]},{"Key":"do want","Fragments":["(tip:","(for","and","a"]},{"Key":"want (tip:","Fragments":["`Regex.scan`)."]},{"Key":" `Regex.scan(...)","Fragments":["|\u003e"]},{"Key":"`Regex.scan(...) |\u003e","Fragments":["Enum.map(\u0026hd/1)`","Enum.map(\u0026hd/1)`."]},{"Key":"Enum.map(\u0026hd/1)` to","Fragments":["get"]},{"Key":"Thanks pminten.","Fragments":["I"]},{"Key":"pminten. I","Fragments":["was"]},{"Key":"was too","Fragments":["proud","much"]},{"Key":"too proud","Fragments":["of"]},{"Key":"my use","Fragments":["of"]},{"Key":"of recursion","Fragments":["to","to"]},{"Key":"pattern I'm","Fragments":["already"]},{"Key":"I'm already","Fragments":["familiar"]},{"Key":"already familiar","Fragments":["with."]},{"Key":"at Regex.scan","Fragments":["and"]},{"Key":"Regex.scan and","Fragments":["I","a"]},{"Key":"wasn't clear","Fragments":["on"]},{"Key":"clear on","Fragments":["how"]},{"Key":"clearer. It","Fragments":["looked"]},{"Key":"would result","Fragments":["in"]},{"Key":"bunch more","Fragments":["unpacking"]},{"Key":"more unpacking","Fragments":["data"]},{"Key":"unpacking data","Fragments":["structures"]},{"Key":"than captureing","Fragments":["what"]},{"Key":"captureing what","Fragments":["I"]},{"Key":"I want.","Fragments":["I'm"]},{"Key":"want. I'm","Fragments":["open"]},{"Key":"to exploring","Fragments":["more,"]},{"Key":"exploring more,","Fragments":["but"]},{"Key":"more, but","Fragments":["I'm"]},{"Key":"not clear","Fragments":["what","just"]},{"Key":"solution would","Fragments":["be.","not"]},{"Key":" Based","Fragments":["on","on"]},{"Key":"a suggestion","Fragments":["I","to"]},{"Key":"suggestion I","Fragments":["changed","would"]},{"Key":"changed to","Fragments":["use","`\\\\`"]},{"Key":"few hd","Fragments":["functions"]},{"Key":"hd functions","Fragments":["to"]},{"Key":"to unpack","Fragments":["the"]},{"Key":"unpack the","Fragments":["results"]},{"Key":"You're searching","Fragments":["for"]},{"Key":"searching for","Fragments":["all"]},{"Key":"the potentially","Fragments":["matching"]},{"Key":"potentially matching","Fragments":["words"]},{"Key":"matching words","Fragments":["and","once?"]},{"Key":"then only","Fragments":["use"]},{"Key":"one every","Fragments":["iteration."]},{"Key":"every iteration.","Fragments":["Wouldn't"]},{"Key":"iteration. Wouldn't","Fragments":["it"]},{"Key":"Also your","Fragments":["regex"]},{"Key":"be improved.","Fragments":["You"]},{"Key":"improved. You","Fragments":["use"]},{"Key":"You use","Fragments":["`\\w*`","tail"]},{"Key":"use `\\w*`","Fragments":["which"]},{"Key":"`\\w*` which","Fragments":["is"]},{"Key":"is (zero","Fragments":["or"]},{"Key":"(zero or","Fragments":["more"]},{"Key":"more \"word\"","Fragments":["chars),","chars)?"]},{"Key":"\"word\" chars),","Fragments":["don't"]},{"Key":"chars), don't","Fragments":["you"]},{"Key":"mean `\\w+`","Fragments":["(one"]},{"Key":"`\\w+` (one","Fragments":["or"]},{"Key":"(one or","Fragments":["more"]},{"Key":"of background","Fragments":["info"]},{"Key":"background info","Fragments":["(you"]},{"Key":"info (you","Fragments":["don't"]},{"Key":"(you don't","Fragments":["need"]},{"Key":"this exercise),","Fragments":["be","but"]},{"Key":"exercise), be","Fragments":["aware"]},{"Key":"be aware","Fragments":["that","that","that"]},{"Key":"that \"_\"","Fragments":["count"]},{"Key":"\"_\" count","Fragments":["as"]},{"Key":"word char","Fragments":["but"]},{"Key":"char but","Fragments":["\"-\""]},{"Key":"but \"-\"","Fragments":["does"]},{"Key":"\"-\" does","Fragments":["not"]},{"Key":"not (although","Fragments":["there"]},{"Key":"(although there","Fragments":["are"]},{"Key":"are English","Fragments":["words","words"]},{"Key":"English words","Fragments":["with","with"]},{"Key":"a hyphen","Fragments":["and","isn't,"]},{"Key":"hyphen and","Fragments":["many"]},{"Key":"and many","Fragments":["other"]},{"Key":"languages, like","Fragments":["Dutch,"]},{"Key":"like Dutch,","Fragments":["have"]},{"Key":"Dutch, have","Fragments":["a"]},{"Key":"small thing","Fragments":["though:"]},{"Key":"though: `String.length(s)","Fragments":["=="]},{"Key":"an all","Fragments":["tail"]},{"Key":"all tail","Fragments":["recursive","recursive"]},{"Key":"def accumulate(collection,","Fragments":["function)"]},{"Key":"accumulate(collection, function)","Fragments":["do"]},{"Key":" accumulate(collection,","Fragments":["function,"]},{"Key":"accumulate(collection, function,","Fragments":["[])"]},{"Key":"defp accumulate([],","Fragments":["_function,"]},{"Key":"accumulate([], _function,","Fragments":["acc),"]},{"Key":"_function, acc),","Fragments":["do:"]},{"Key":"acc), do:","Fragments":["acc","acc","do_reverse(t,","acc","do_count(t,","count(tail,"]},{"Key":"do: acc","Fragments":["|\u003e"]},{"Key":"acc |\u003e","Fragments":["Enum.reverse"]},{"Key":"defp accumulate([","Fragments":["element"]},{"Key":"accumulate([ element","Fragments":["|"]},{"Key":"element |","Fragments":["tail"]},{"Key":"tail ],","Fragments":["function,"]},{"Key":"], function,","Fragments":["acc)"]},{"Key":"function, acc)","Fragments":["do"]},{"Key":" processed_element","Fragments":["="]},{"Key":"processed_element =","Fragments":["function.(element)"]},{"Key":" accumulate(tail,","Fragments":["function,"]},{"Key":"accumulate(tail, function,","Fragments":["["]},{"Key":"function, [","Fragments":["processed_element"]},{"Key":"[ processed_element","Fragments":["|"]},{"Key":"processed_element |","Fragments":["acc"]},{"Key":"| acc","Fragments":["])"]},{"Key":"It worked","Fragments":["except"]},{"Key":"worked except","Fragments":["with"]},{"Key":"except with","Fragments":["the"]},{"Key":"the range,","Fragments":["because","while"]},{"Key":"range, because","Fragments":["that"]},{"Key":"has its","Fragments":["own"]},{"Key":"own enumerable","Fragments":["implementation."]},{"Key":"enumerable implementation.","Fragments":["I"]},{"Key":"I wondered","Fragments":["if"]},{"Key":"wondered if","Fragments":["it"]},{"Key":"it keeping","Fragments":["both"]},{"Key":"keeping both","Fragments":["in"]},{"Key":"to fall","Fragments":["back","over"]},{"Key":"fall back","Fragments":["on"]},{"Key":"the submitted","Fragments":["version"]},{"Key":"submitted version","Fragments":["only"]},{"Key":"version only","Fragments":["for"]},{"Key":"range, while","Fragments":["using"]},{"Key":"while using","Fragments":["recursion"]},{"Key":"recursion for","Fragments":["the","`map`"]},{"Key":"the other,","Fragments":["but"]},{"Key":"other, but","Fragments":["in"]},{"Key":"Great advice,","Fragments":["thank"]},{"Key":"advice, thank","Fragments":["you."]},{"Key":"you. That","Fragments":["is"]},{"Key":"lot cleaner.","Fragments":["Submitting.","I"]},{"Key":" Changed","Fragments":["to","the","to","the","tab"]},{"Key":"Changed to","Fragments":["use","use"]},{"Key":"ampersand notation","Fragments":["for"]},{"Key":"Nice. There's","Fragments":["a"]},{"Key":"a neverending","Fragments":["discussion"]},{"Key":"neverending discussion","Fragments":["on"]},{"Key":"ruby community","Fragments":["about"]},{"Key":"community about","Fragments":["trailing/leading"]},{"Key":"about trailing/leading","Fragments":["dots"]},{"Key":"trailing/leading dots","Fragments":["on"]},{"Key":"dots on","Fragments":["chaining"]},{"Key":"on chaining","Fragments":["also;"]},{"Key":"chaining also;","Fragments":["same"]},{"Key":"also; same","Fragments":["arguments:"]},{"Key":"same arguments:","Fragments":["trailing"]},{"Key":"arguments: trailing","Fragments":["dots"]},{"Key":"trailing dots","Fragments":["make"]},{"Key":"dots make","Fragments":["it"]},{"Key":"identify chaining,","Fragments":["leading"]},{"Key":"chaining, leading","Fragments":["dots"]},{"Key":"leading dots","Fragments":["are"]},{"Key":"dots are","Fragments":["more"]},{"Key":"few small","Fragments":["remarks:","things:"]},{"Key":"`question?`, `silence?`","Fragments":["and"]},{"Key":"of `String.last(input)","Fragments":["==","=="]},{"Key":"\"?\"` you","Fragments":["can"]},{"Key":"use `String.ends_with?(input,","Fragments":["\"?\")`."]},{"Key":"`shouting?` note","Fragments":["that"]},{"Key":"return `true`,","Fragments":["`false`"]},{"Key":"`true`, `false`","Fragments":["or"]},{"Key":"`false` or","Fragments":["`nil`"]},{"Key":"`nil` (`if`","Fragments":["and"]},{"Key":"(`if` and","Fragments":["`unless`"]},{"Key":"and `unless`","Fragments":["return"]},{"Key":"`unless` return","Fragments":["nil"]},{"Key":"return nil","Fragments":["if"]},{"Key":"nil if","Fragments":["the"]},{"Key":"condition isn't","Fragments":["true"]},{"Key":"isn't true","Fragments":["or"]},{"Key":"true or","Fragments":["false"]},{"Key":"or false","Fragments":["respectively"]},{"Key":"false respectively","Fragments":["and"]},{"Key":"respectively and","Fragments":["there"]},{"Key":"not else","Fragments":["clause)."]},{"Key":"else clause).","Fragments":["`nil`"]},{"Key":"clause). `nil`","Fragments":["is"]},{"Key":"`nil` is","Fragments":["considered"]},{"Key":"is considered","Fragments":["a","a","a"]},{"Key":"a \"falsy\"","Fragments":["value"]},{"Key":"\"falsy\" value","Fragments":["so"]},{"Key":"value so","Fragments":["that's"]},{"Key":"problem, but","Fragments":["strictly","I"]},{"Key":"More importantly","Fragments":["though"]},{"Key":"importantly though","Fragments":["you're"]},{"Key":"though you're","Fragments":["repeating"]},{"Key":"you're repeating","Fragments":["work."]},{"Key":"repeating work.","Fragments":["Since"]},{"Key":"work. Since","Fragments":["the"]},{"Key":"for `silence?`","Fragments":["in"]},{"Key":"`silence?` in","Fragments":["`hey`"]},{"Key":"in `hey`","Fragments":["is"]},{"Key":"`hey` is","Fragments":["done"]},{"Key":"done before","Fragments":["`shouting?`"]},{"Key":"before `shouting?`","Fragments":["you"]},{"Key":"string doesn't","Fragments":["consist"]},{"Key":"doesn't consist","Fragments":["of"]},{"Key":"consist of","Fragments":["only"]},{"Key":"only whitespace.","Fragments":["So"]},{"Key":"whitespace. So","Fragments":["you"]},{"Key":"that again.","Fragments":["Unless"]},{"Key":"again. Unless","Fragments":["of"]},{"Key":"Unless of","Fragments":["course"]},{"Key":"course you","Fragments":["intended","would"]},{"Key":"you intended","Fragments":["to"]},{"Key":"make `shouting?`","Fragments":["a"]},{"Key":"`shouting?` a","Fragments":["publicly"]},{"Key":"a publicly","Fragments":["usable"]},{"Key":"publicly usable","Fragments":["function"]},{"Key":"usable function","Fragments":["(not"]},{"Key":"function (not","Fragments":["needed"]},{"Key":"(not needed","Fragments":["for"]},{"Key":"this exercise).","Fragments":["But","I"]},{"Key":"exercise). But","Fragments":["in"]},{"Key":"not repeat","Fragments":["the"]},{"Key":"repeat the","Fragments":["test"]},{"Key":"test if","Fragments":["called"]},{"Key":"if called","Fragments":["from"]},{"Key":"from `hey`","Fragments":["(for"]},{"Key":"`hey` (for","Fragments":["example"]},{"Key":"example by","Fragments":["factoring","avoiding"]},{"Key":"by factoring","Fragments":["out"]},{"Key":"factoring out","Fragments":["common"]},{"Key":"out common","Fragments":["code"]},{"Key":"common code","Fragments":["into"]},{"Key":"code into","Fragments":["a"]},{"Key":"Not very","Fragments":["satisfied"]},{"Key":"very satisfied","Fragments":["about"]},{"Key":"satisfied about","Fragments":["the"]},{"Key":"the repetition","Fragments":["of","with"]},{"Key":"repetition of","Fragments":["the"]},{"Key":"reduce construct,","Fragments":["but"]},{"Key":" Warning:","Fragments":["this"]},{"Key":"Warning: this","Fragments":["is"]},{"Key":"is broken","Fragments":["with"]},{"Key":"broken with","Fragments":["ranges."]},{"Key":"seen this","Fragments":["in"]},{"Key":"previous exercise,","Fragments":["but"]},{"Key":"this time","Fragments":["I"]},{"Key":"a purely","Fragments":["recursive"]},{"Key":"purely recursive","Fragments":["solution"]},{"Key":"solution despite","Fragments":["the"]},{"Key":"the failing","Fragments":["tests,"]},{"Key":"failing tests,","Fragments":["as"]},{"Key":"tests, as","Fragments":["ranges"]},{"Key":"as ranges","Fragments":["are"]},{"Key":"ranges are","Fragments":["quite"]},{"Key":"quite an","Fragments":["edge"]},{"Key":"an edge","Fragments":["case","case."]},{"Key":"opinion. I'll","Fragments":["switch"]},{"Key":"I'll switch","Fragments":["to"]},{"Key":"a reduce","Fragments":["based","pattern.","you"]},{"Key":"reduce based","Fragments":["implementation"]},{"Key":"based implementation","Fragments":["to"]},{"Key":"keep this","Fragments":["as"]},{"Key":"many cases","Fragments":["it's"]},{"Key":"cases it's","Fragments":["good"]},{"Key":"implementing `discard`","Fragments":["in","in"]},{"Key":"`discard` in","Fragments":["terms","terms"]},{"Key":"of `keep`","Fragments":["or","besides"]},{"Key":"`keep` or","Fragments":["vice-versa"]},{"Key":"or vice-versa","Fragments":["in"]},{"Key":"vice-versa in","Fragments":["order"]},{"Key":"eliminate that","Fragments":["duplication?","duplication?","way."]},{"Key":"agree, only","Fragments":["`hey`"]},{"Key":"only `hey`","Fragments":["needs"]},{"Key":"`hey` needs","Fragments":["to"]},{"Key":"public (for","Fragments":["this"]},{"Key":"exercise). I","Fragments":["like"]},{"Key":"the `ends_with?`","Fragments":["function."]},{"Key":"`ends_with?` function.","Fragments":["I'll"]},{"Key":"function. I'll","Fragments":["use","update"]},{"Key":"I'll use","Fragments":["that"]},{"Key":"Regarding `shouting?`,","Fragments":["it"]},{"Key":"`shouting?`, it","Fragments":["was"]},{"Key":"lot simpler","Fragments":["at"]},{"Key":"simpler at","Fragments":["one"]},{"Key":"had one","Fragments":["spec"]},{"Key":"one spec","Fragments":["that"]},{"Key":"spec that","Fragments":["didn't"]},{"Key":"that didn't","Fragments":["pass:"]},{"Key":"test \"only","Fragments":["numbers\""]},{"Key":"\"only numbers\"","Fragments":["do"]},{"Key":"assert Teenager.hey(\"1,","Fragments":["2,","2,","2,"]},{"Key":"Teenager.hey(\"1, 2,","Fragments":["3\")","3!\")","3"]},{"Key":"2, 3\")","Fragments":["=="]},{"Key":"3\") ==","Fragments":["\"Whatever.\""]},{"Key":"Because `alphabetize`","Fragments":["strips"]},{"Key":"`alphabetize` strips","Fragments":["out"]},{"Key":"strips out","Fragments":["all"]},{"Key":"out all","Fragments":["characters","the"]},{"Key":"all characters","Fragments":["other"]},{"Key":"characters other","Fragments":["than","than","than"]},{"Key":"than letters,","Fragments":["it"]},{"Key":"letters, it","Fragments":["becomes","shouldn't"]},{"Key":"blank string.","Fragments":["So"]},{"Key":"I'm reusing","Fragments":["the"]},{"Key":"reusing the","Fragments":["`silence?`"]},{"Key":"`silence?` function.","Fragments":["I'm"]},{"Key":"of `letters","Fragments":["="]},{"Key":"`letters =","Fragments":["String.upcase(alphabetize(input))`"]},{"Key":"= String.upcase(alphabetize(input))`","Fragments":["and"]},{"Key":"String.upcase(alphabetize(input))` and","Fragments":["not"]},{"Key":"not on","Fragments":["the","what"]},{"Key":"the `input`","Fragments":["variable."]},{"Key":"`input` variable.","Fragments":["So"]},{"Key":"So maybe","Fragments":["there's"]},{"Key":"maybe there's","Fragments":["a"]},{"Key":"a \"better\"","Fragments":["solution"]},{"Key":"\"better\" solution","Fragments":["to"]},{"Key":"about `shouting?`","Fragments":["returning"]},{"Key":"`shouting?` returning","Fragments":["`nil`"]},{"Key":"returning `nil`","Fragments":["not"]},{"Key":"`nil` not","Fragments":["being"]},{"Key":"truly \"boolean\"","Fragments":["function."]},{"Key":"\"boolean\" function.","Fragments":["I"]},{"Key":"tried short-circuiting","Fragments":["with"]},{"Key":"short-circuiting with","Fragments":["`return"]},{"Key":"with `return","Fragments":["false"]},{"Key":"`return false","Fragments":["if"]},{"Key":"false if","Fragments":["silence?(letters)`"]},{"Key":"if silence?(letters)`","Fragments":["but"]},{"Key":"silence?(letters)` but","Fragments":["that"]},{"Key":"error. And","Fragments":["the"]},{"Key":"the thought","Fragments":["of"]},{"Key":"an else","Fragments":["just"]},{"Key":"else just","Fragments":["to"]},{"Key":"false felt","Fragments":["unnecessary."]},{"Key":"a 'reimplementing","Fragments":["the"]},{"Key":"'reimplementing the","Fragments":["wheel'"]},{"Key":"the wheel'","Fragments":["version."]},{"Key":"wheel' version.","Fragments":["Could"]},{"Key":"version. Could","Fragments":["replace"]},{"Key":"Could replace","Fragments":["`accumulate\\3`"]},{"Key":"replace `accumulate\\3`","Fragments":["with"]},{"Key":"`accumulate\\3` with","Fragments":["`Enum.reduce`."]},{"Key":"move all","Fragments":["of"]},{"Key":"conditionals to","Fragments":["their"]},{"Key":"You did","Fragments":["this"]},{"Key":"for `action`","Fragments":["and"]},{"Key":"`action` and","Fragments":["`pred`,"]},{"Key":"and `pred`,","Fragments":["why"]},{"Key":"`pred`, why","Fragments":["not"]},{"Key":"not factor","Fragments":["out"]},{"Key":"in `bottles_of_beer`","Fragments":["and"]},{"Key":"`bottles_of_beer` and","Fragments":["`take_one_down`"]},{"Key":"`take_one_down` as","Fragments":["well?"]},{"Key":"of ugly,","Fragments":["but"]},{"Key":"ugly, but","Fragments":["as","in"]},{"Key":"am extremely","Fragments":["new"]},{"Key":"extremely new","Fragments":["to"]},{"Key":"am unsure","Fragments":["of","if"]},{"Key":"unsure of","Fragments":["how"]},{"Key":"you noticed","Fragments":["that","the"]},{"Key":"that keep","Fragments":["and"]},{"Key":"discard have","Fragments":["a"]},{"Key":"in common.","Fragments":["You"]},{"Key":"common. You","Fragments":["could"]},{"Key":"could factor","Fragments":["out"]},{"Key":"common parts","Fragments":["to"]},{"Key":"parts to","Fragments":["a"]},{"Key":"general strain","Fragments":["function"]},{"Key":"strain function","Fragments":["that"]},{"Key":"a match","Fragments":["value","instead","event","and"]},{"Key":"match value","Fragments":["as"]},{"Key":"value as","Fragments":["a"]},{"Key":"parameter and","Fragments":["returns"]},{"Key":"course, you","Fragments":["might"]},{"Key":"not end","Fragments":["up"]},{"Key":"up saving","Fragments":["any"]},{"Key":"saving any","Fragments":["lines"]},{"Key":"any lines","Fragments":["of"]},{"Key":"that way,","Fragments":["given","it's","interesting"]},{"Key":"way, given","Fragments":["the"]},{"Key":"simple nature","Fragments":["of"]},{"Key":" `return`","Fragments":["is"]},{"Key":"`return` is","Fragments":["not"]},{"Key":"keyword in","Fragments":["Elixir"]},{"Key":"won't work.","Fragments":["`\u0026\u0026`"]},{"Key":"work. `\u0026\u0026`","Fragments":["should"]},{"Key":"`\u0026\u0026` should","Fragments":["work"]},{"Key":"With regard","Fragments":["to","to","to"]},{"Key":"regard to","Fragments":["`shouting?`","style","tail"]},{"Key":"to `shouting?`","Fragments":["it"]},{"Key":"`shouting?` it","Fragments":["might"]},{"Key":"this: a","Fragments":["sentence"]},{"Key":"shouting if","Fragments":["it"]},{"Key":"it contains","Fragments":["at","at","a"]},{"Key":"contains at","Fragments":["least","least","least"]},{"Key":"one uppercase","Fragments":["letter","character."]},{"Key":"uppercase letter","Fragments":["and"]},{"Key":"no lower","Fragments":["case"]},{"Key":"the escape","Fragments":["hatch"]},{"Key":"escape hatch","Fragments":["of"]},{"Key":"hatch of","Fragments":["`Enum.to_list`,"]},{"Key":"of `Enum.to_list`,","Fragments":["using"]},{"Key":"`Enum.to_list`, using","Fragments":["`Enum.reduce`?"]},{"Key":" `Dict.update`","Fragments":["might","might"]},{"Key":"`Dict.update` might","Fragments":["be","be","be"]},{"Key":"Btw, it's","Fragments":["generally","more","common"]},{"Key":"generally considered","Fragments":["better"]},{"Key":"considered better","Fragments":["to"]},{"Key":"call `Dict.some_fun`","Fragments":["than","instead"]},{"Key":"`Dict.some_fun` than","Fragments":["`HashDict.some_fun`"]},{"Key":"than `HashDict.some_fun`","Fragments":["(with"]},{"Key":"`HashDict.some_fun` (with","Fragments":["the"]},{"Key":"exception of","Fragments":["`HashDict.new`","'-'),"]},{"Key":"of `HashDict.new`","Fragments":["which"]},{"Key":"`HashDict.new` which","Fragments":["has"]},{"Key":"has not","Fragments":["`Dict`"]},{"Key":"not `Dict`","Fragments":["equivalent)."]},{"Key":"`Dict` equivalent).","Fragments":["Think"]},{"Key":"equivalent). Think","Fragments":["of"]},{"Key":"of `Dict`","Fragments":["as","is"]},{"Key":"`Dict` as","Fragments":["an"]},{"Key":"an interface","Fragments":["and","for"]},{"Key":"and `HashDict`","Fragments":["as"]},{"Key":"`HashDict` as","Fragments":["a"]},{"Key":"specific implementation.","Fragments":["By"]},{"Key":"implementation. By","Fragments":["relying"]},{"Key":"By relying","Fragments":["on"]},{"Key":"relying on","Fragments":["`Dict`","`:lists.append/2`...","regexes","reduce","conversion"]},{"Key":"on `Dict`","Fragments":["you"]},{"Key":"`Dict` you","Fragments":["can"]},{"Key":"can more","Fragments":["easily"]},{"Key":"easily change","Fragments":["the"]},{"Key":"Using `reduce`","Fragments":["was","is"]},{"Key":"`reduce` was","Fragments":["actually"]},{"Key":"actually the","Fragments":["idea","addition,"]},{"Key":"the exercise.","Fragments":["But","`Enum.reduce`"]},{"Key":"But you","Fragments":["do"]},{"Key":"important bit","Fragments":["correct"]},{"Key":"bit correct","Fragments":["(using"]},{"Key":"correct (using","Fragments":["an"]},{"Key":"(using an","Fragments":["accumulator"]},{"Key":" Obviously","Fragments":["not","the"]},{"Key":"Obviously not","Fragments":["ideal"]},{"Key":"not ideal","Fragments":["having"]},{"Key":"ideal having","Fragments":["to"]},{"Key":"passed `Enum`","Fragments":["to"]},{"Key":"`Enum` to","Fragments":["a","make"]},{"Key":"a `List`","Fragments":["before"]},{"Key":"`List` before","Fragments":["calling"]},{"Key":"before calling","Fragments":["`do_accumulate`"]},{"Key":"calling `do_accumulate`","Fragments":["but"]},{"Key":"`do_accumulate` but","Fragments":["I"]},{"Key":"use nice","Fragments":["pattern"]},{"Key":"nice pattern","Fragments":["matching/destructuring"]},{"Key":"pattern matching/destructuring","Fragments":["for"]},{"Key":"matching/destructuring for","Fragments":["the"]},{"Key":"recursive functions","Fragments":["and","because","are","is"]},{"Key":"this just","Fragments":["doesn't","does"]},{"Key":"just doesn't","Fragments":["seem","seem"]},{"Key":"Does anyone","Fragments":["know"]},{"Key":"anyone know","Fragments":["why"]},{"Key":"this is?","Fragments":["Seems"]},{"Key":"is? Seems","Fragments":["a"]},{"Key":"a shame","Fragments":["to","as"]},{"Key":"shame to","Fragments":["lose"]},{"Key":"to lose","Fragments":["something","the"]},{"Key":"lose something","Fragments":["as"]},{"Key":"as powerful","Fragments":["as"]},{"Key":"powerful as","Fragments":["list"]},{"Key":"as list","Fragments":["pattern"]},{"Key":"list pattern","Fragments":["matching"]},{"Key":"matching by","Fragments":["using","using:"]},{"Key":"This confuses","Fragments":["at"]},{"Key":"confuses at","Fragments":["least"]},{"Key":"least half","Fragments":["the"]},{"Key":"people that","Fragments":["do"]},{"Key":"exercise though,","Fragments":["which"]},{"Key":"though, which","Fragments":["is"]},{"Key":"why I'm","Fragments":["writing","finding"]},{"Key":"a replacement","Fragments":["right"]},{"Key":"replacement right","Fragments":["now"]},{"Key":"now for","Fragments":["accumulate","each","the","the"]},{"Key":"for accumulate","Fragments":["and"]},{"Key":"accumulate and","Fragments":["strain"]},{"Key":"and strain","Fragments":["that"]},{"Key":"strain that","Fragments":["only"]},{"Key":"only requires","Fragments":["working","working"]},{"Key":"requires working","Fragments":["on","on"]},{"Key":"the readme","Fragments":["about","specifies"]},{"Key":"readme about","Fragments":["using"]},{"Key":"using `reduce`..","Fragments":["I"]},{"Key":"`reduce`.. I","Fragments":["think"]},{"Key":"the confusion","Fragments":["maybe"]},{"Key":"confusion maybe","Fragments":["came"]},{"Key":"maybe came","Fragments":["from"]},{"Key":"from wondering","Fragments":["why,"]},{"Key":"wondering why,","Fragments":["if"]},{"Key":"why, if","Fragments":["the"]},{"Key":"exercise was","Fragments":["about"]},{"Key":"was about","Fragments":["reimplementing"]},{"Key":"about reimplementing","Fragments":["`map`,"]},{"Key":"reimplementing `map`,","Fragments":["you"]},{"Key":"`map`, you","Fragments":["would"]},{"Key":"a ready","Fragments":["built"]},{"Key":"ready built","Fragments":["`reduce`"]},{"Key":"built `reduce`","Fragments":["function"]},{"Key":"all rather","Fragments":["than"]},{"Key":"than implementing","Fragments":["it"]},{"Key":"implementing it","Fragments":["yourself?","using"]},{"Key":"it yourself?","Fragments":["I"]},{"Key":"that reduce","Fragments":["is"]},{"Key":"reduce is","Fragments":["a","called","tail","a"]},{"Key":"a generalization","Fragments":["of"]},{"Key":"generalization of","Fragments":["a"]},{"Key":"recursive function","Fragments":["that","on","is","that","has"]},{"Key":"then be","Fragments":["used"]},{"Key":"write map,","Fragments":["but"]},{"Key":"map, but","Fragments":["without"]},{"Key":"step yourself","Fragments":["(ie"]},{"Key":"yourself (ie","Fragments":["implementing"]},{"Key":"(ie implementing","Fragments":["reduce)"]},{"Key":"implementing reduce)","Fragments":["the"]},{"Key":"reduce) the","Fragments":["exercise"]},{"Key":"exercise feels","Fragments":["oddly"]},{"Key":"feels oddly","Fragments":["like"]},{"Key":"oddly like","Fragments":["you're"]},{"Key":"you're cheating","Fragments":["if"]},{"Key":"cheating if","Fragments":["you"]},{"Key":"use reduce","Fragments":[";-)","as","now."]},{"Key":"that, any","Fragments":["idea"]},{"Key":"any idea","Fragments":["why"]},{"Key":"idea why","Fragments":["pattern","pattern","we"]},{"Key":"why pattern","Fragments":["matching","matching"]},{"Key":"matching doesn't","Fragments":["work","work"]},{"Key":"on ranges,","Fragments":["because"]},{"Key":"ranges, because","Fragments":["it"]},{"Key":"iex(1)\u003e a..b","Fragments":["="]},{"Key":"a..b =","Fragments":["1..4"]},{"Key":" iex(3)\u003e","Fragments":["b","String.downcase/1","ListOps.count([1,3,5,7],"]},{"Key":"Btw, `x..y`","Fragments":["is"]},{"Key":"`x..y` is","Fragments":["just"]},{"Key":"for `Range[first:","Fragments":["x,"]},{"Key":"`Range[first: x,","Fragments":["last:"]},{"Key":"x, last:","Fragments":["y]`."]},{"Key":"last: y]`.","Fragments":["So"]},{"Key":"y]`. So","Fragments":["you"]},{"Key":"do `r","Fragments":["="]},{"Key":"`r =","Fragments":["1..4;"]},{"Key":"= 1..4;","Fragments":["r.x`"]},{"Key":"1..4; r.x`","Fragments":["and"]},{"Key":"r.x` and","Fragments":["get"]},{"Key":"Ok, interesting","Fragments":["that"]},{"Key":"interesting that","Fragments":["you"]},{"Key":"match over","Fragments":["ranges"]},{"Key":"over ranges","Fragments":["like"]},{"Key":"ranges like","Fragments":["that."]},{"Key":"guess the","Fragments":["intention","`String`"]},{"Key":"intention is","Fragments":["that"]},{"Key":"use *list*","Fragments":["pattern"]},{"Key":"*list* pattern","Fragments":["matching"]},{"Key":"matching (with","Fragments":["the"]},{"Key":"the cons","Fragments":["operator)"]},{"Key":"cons operator)","Fragments":["on"]},{"Key":"operator) on","Fragments":["anything"]},{"Key":"on anything","Fragments":["other","that"]},{"Key":"anything other","Fragments":["than"]},{"Key":"list. Which","Fragments":["seems"]},{"Key":"Which seems","Fragments":["a"]},{"Key":"shame as","Fragments":["I"]},{"Key":"was easy","Fragments":["enough"]},{"Key":"easy enough","Fragments":["to","to"]},{"Key":"support \"head\"","Fragments":["and"]},{"Key":"\"head\" and","Fragments":["\"tail\"","\"tail\""]},{"Key":"and \"tail\"","Fragments":["on","on"]},{"Key":"\"tail\" on","Fragments":["a","a"]},{"Key":"a range...","Fragments":["\u0026"]},{"Key":"range... \u0026","Fragments":["unless"]},{"Key":"\u0026 unless","Fragments":["I"]},{"Key":"unless I","Fragments":["miss","ramped"]},{"Key":"I miss","Fragments":["my"]},{"Key":"miss my","Fragments":["guess"]},{"Key":"my guess","Fragments":["this"]},{"Key":"all you'd","Fragments":["need"]},{"Key":"not wanting","Fragments":["to"]},{"Key":"to evaluate","Fragments":["any","to:"]},{"Key":"evaluate any","Fragments":["code"]},{"Key":"function guard.","Fragments":["I"]},{"Key":"guard. I","Fragments":["don't"]},{"Key":"range with","Fragments":["a"]},{"Key":"a custom,","Fragments":["perhaps"]},{"Key":"custom, perhaps","Fragments":["side-effecting,"]},{"Key":"perhaps side-effecting,","Fragments":["next"]},{"Key":"side-effecting, next","Fragments":["element"]},{"Key":"next element","Fragments":["generator,"]},{"Key":"element generator,","Fragments":["but"]},{"Key":"generator, but","Fragments":["I"]},{"Key":"wouldn't want","Fragments":["that"]},{"Key":"want that","Fragments":["sort"]},{"Key":"evaluated while","Fragments":["deciding"]},{"Key":"while deciding","Fragments":["if"]},{"Key":"deciding if","Fragments":["a"]},{"Key":" \"head\"","Fragments":["and"]},{"Key":"a range:","Fragments":["yes,"]},{"Key":"range: yes,","Fragments":["but"]},{"Key":"yes, but","Fragments":["no."]},{"Key":"but no.","Fragments":["Thing"]},{"Key":"no. Thing","Fragments":["is,"]},{"Key":"Thing is,","Fragments":["it's"]},{"Key":"is, it's","Fragments":["easy"]},{"Key":"support when","Fragments":["the"]},{"Key":"collection system","Fragments":["is","is"]},{"Key":"is based","Fragments":["on","on","off"]},{"Key":"of iterators","Fragments":["that"]},{"Key":"iterators that","Fragments":["support"]},{"Key":"function `next(iter)","Fragments":["::"]},{"Key":"`next(iter) ::","Fragments":["iter`"]},{"Key":":: iter`","Fragments":["and"]},{"Key":"iter` and","Fragments":["a"]},{"Key":"function `value(iter)","Fragments":["::"]},{"Key":"`value(iter) ::","Fragments":["any`."]},{"Key":":: any`.","Fragments":["However"]},{"Key":"any`. However","Fragments":["Elixir's"]},{"Key":"However Elixir's","Fragments":["collection"]},{"Key":"Elixir's collection","Fragments":["system"]},{"Key":"on enumerators.","Fragments":["Elixir"]},{"Key":"enumerators. Elixir","Fragments":["did"]},{"Key":"Elixir did","Fragments":["have"]},{"Key":"did have","Fragments":["iterators","an"]},{"Key":"have iterators","Fragments":["in"]},{"Key":"iterators in","Fragments":["the","a"]},{"Key":"past but","Fragments":["they"]},{"Key":"were found","Fragments":["to"]},{"Key":"not perform","Fragments":["well","terribly"]},{"Key":"perform well","Fragments":["enough."]},{"Key":"well enough.","Fragments":["Enumerators"]},{"Key":"enough. Enumerators","Fragments":["also"]},{"Key":"Enumerators also","Fragments":["support"]},{"Key":"also support","Fragments":["some"]},{"Key":"support some","Fragments":["things"]},{"Key":"that iterators","Fragments":["don't,"]},{"Key":"iterators don't,","Fragments":["but"]},{"Key":"don't, but","Fragments":["I"]},{"Key":"don't recall","Fragments":["what"]},{"Key":"recall what","Fragments":["exactly"]},{"Key":"exactly right","Fragments":["now."]},{"Key":" Evaluating","Fragments":["code"]},{"Key":"Evaluating code","Fragments":["in"]},{"Key":"function guard:","Fragments":["that's"]},{"Key":"guard: that's","Fragments":["not"]},{"Key":"not generally","Fragments":["possible,"]},{"Key":"generally possible,","Fragments":["only"]},{"Key":"possible, only","Fragments":["a"]},{"Key":"small set","Fragments":["of"]},{"Key":"Elixir it's","Fragments":["common","helpful"]},{"Key":"indentation level,","Fragments":["like"]},{"Key":"level, like","Fragments":["in"]},{"Key":"Ruby. Also","Fragments":["empty"]},{"Key":"Also empty","Fragments":["lines"]},{"Key":"empty lines","Fragments":["between"]},{"Key":"between cond","Fragments":["clauses"]},{"Key":" `String.last(input)","Fragments":["=="]},{"Key":"as `String.ends_with?(input,","Fragments":["\"?\")`."]},{"Key":"In `input","Fragments":["=~"]},{"Key":"`input =~","Fragments":["%r/[A-Z]+/`"]},{"Key":"=~ %r/[A-Z]+/`","Fragments":["you"]},{"Key":"%r/[A-Z]+/` you","Fragments":["don't"]},{"Key":"the `+`.","Fragments":["What"]},{"Key":"`+`. What","Fragments":["matters"]},{"Key":"What matters","Fragments":["is"]},{"Key":"matters is","Fragments":["that"]},{"Key":"uppercase character.","Fragments":["Removing"]},{"Key":"character. Removing","Fragments":["the"]},{"Key":"Removing the","Fragments":["`+`"]},{"Key":"`+` should","Fragments":["make"]},{"Key":"faster (as","Fragments":["the"]},{"Key":"(as the","Fragments":["regex"]},{"Key":"regex engine","Fragments":["can"]},{"Key":"engine can","Fragments":["stop"]},{"Key":"can stop","Fragments":["after"]},{"Key":"stop after","Fragments":["seeing"]},{"Key":"after seeing","Fragments":["the"]},{"Key":"first matching","Fragments":["character)."]},{"Key":"to anything","Fragments":["that"]},{"Key":"that explains","Fragments":["the","their"]},{"Key":"between an","Fragments":["Iterator","expression"]},{"Key":"an Iterator","Fragments":["and"]},{"Key":"Iterator and","Fragments":["an"]},{"Key":"an Enumerator?","Fragments":["Google"]},{"Key":"Enumerator? Google","Fragments":["is"]},{"Key":"Google is","Fragments":["just"]},{"Key":"just bringing","Fragments":["up"]},{"Key":"bringing up","Fragments":["stuff"]},{"Key":"up stuff","Fragments":["about"]},{"Key":"stuff about","Fragments":["the","Streams."]},{"Key":"the Java","Fragments":["collection"]},{"Key":"Java collection","Fragments":["interfaces"]},{"Key":"collection interfaces","Fragments":["\u0026"]},{"Key":"interfaces \u0026","Fragments":["I'm"]},{"Key":"\u0026 I'm","Fragments":["not"]},{"Key":"how well","Fragments":["they"]},{"Key":"well they","Fragments":["match"]},{"Key":"they match","Fragments":["up"]},{"Key":"match up","Fragments":["with"]},{"Key":"underlying distinction","Fragments":["you're"]},{"Key":"distinction you're","Fragments":["referring"]},{"Key":"Definitely a","Fragments":["good"]},{"Key":"good idea,","Fragments":["I","and"]},{"Key":"did go","Fragments":["for"]},{"Key":"iteration (where","Fragments":["ranges"]},{"Key":"(where ranges","Fragments":["did"]},{"Key":"ranges did","Fragments":["not"]},{"Key":"not work)","Fragments":["for"]},{"Key":"work) for","Fragments":["plain"]},{"Key":"for plain","Fragments":["lists/tuples."]},{"Key":"did hit","Fragments":["a"]},{"Key":"a roadblock","Fragments":["though,"]},{"Key":"roadblock though,","Fragments":["it's"]},{"Key":"good chance","Fragments":["to"]},{"Key":"to talk","Fragments":["about","about","about"]},{"Key":"it loudly","Fragments":["taking"]},{"Key":"loudly taking","Fragments":["also"]},{"Key":"taking also","Fragments":["a"]},{"Key":"for range","Fragments":["\u003chttps://github.com/elixir-lang/elixir/blob/v0.12.0/lib/elixir/lib/range.ex\u003e:"]},{"Key":"range \u003chttps://github.com/elixir-lang/elixir/blob/v0.12.0/lib/elixir/lib/range.ex\u003e:","Fragments":["the"]},{"Key":"\u003chttps://github.com/elixir-lang/elixir/blob/v0.12.0/lib/elixir/lib/range.ex\u003e: the","Fragments":["source"]},{"Key":"source shows","Fragments":["no"]},{"Key":"shows no","Fragments":["implementation"]},{"Key":"no implementation","Fragments":["for"]},{"Key":"for intersect/union/subtract/addition,","Fragments":["so"]},{"Key":"intersect/union/subtract/addition, so","Fragments":["those"]},{"Key":"so those","Fragments":["operations"]},{"Key":"operations would","Fragments":["need"]},{"Key":"need (if","Fragments":["I'm"]},{"Key":"(if I'm","Fragments":["not"]},{"Key":"not mistaken)","Fragments":["transforming"]},{"Key":"mistaken) transforming","Fragments":["a"]},{"Key":"transforming a","Fragments":["range"]},{"Key":"range into","Fragments":["a"]},{"Key":"list first,","Fragments":["i.e."]},{"Key":"first, i.e.","Fragments":["loading"]},{"Key":"i.e. loading","Fragments":["the"]},{"Key":"loading the","Fragments":["whole","expense"]},{"Key":"in memory","Fragments":["(twice,"]},{"Key":"memory (twice,","Fragments":["as"]},{"Key":"(twice, as","Fragments":["you"]},{"Key":"whole collection","Fragments":["and"]},{"Key":"collection and","Fragments":["the"]},{"Key":"the subset","Fragments":["to"]},{"Key":"subset to","Fragments":["subtract)."]},{"Key":"point you","Fragments":["to","can"]},{"Key":"the Clojure","Fragments":["[reducers](http://clojure.org/reducers)"]},{"Key":"Clojure [reducers](http://clojure.org/reducers)","Fragments":["that"]},{"Key":"[reducers](http://clojure.org/reducers) that","Fragments":["Elixir's"]},{"Key":"Elixir's enumerators","Fragments":["are"]},{"Key":"enumerators are","Fragments":["based"]},{"Key":"are based","Fragments":["on."]},{"Key":"based on.","Fragments":["These"]},{"Key":"on. These","Fragments":["are"]},{"Key":"less based","Fragments":["on"]},{"Key":"the strict","Fragments":["left-fold"]},{"Key":"strict left-fold","Fragments":["enumerators"]},{"Key":"left-fold enumerators","Fragments":["of"]},{"Key":"enumerators of","Fragments":["Haskell"]},{"Key":"of Haskell","Fragments":["btw."]},{"Key":"for iterators,","Fragments":["I"]},{"Key":"iterators, I","Fragments":["don't"]},{"Key":"if my","Fragments":["terminology","initial"]},{"Key":"my terminology","Fragments":["is"]},{"Key":"terminology is","Fragments":["correct"]},{"Key":"correct and","Fragments":["I"]},{"Key":"a reference","Fragments":["for","to"]},{"Key":"for iterators","Fragments":["in"]},{"Key":"a non-imperative","Fragments":["language."]},{"Key":"indeed not","Fragments":["possible"]},{"Key":"remove elements","Fragments":["from"]},{"Key":"elements from","Fragments":["a"]},{"Key":"range since","Fragments":["a"]},{"Key":"since a","Fragments":["range"]},{"Key":"range `1..4`","Fragments":["is"]},{"Key":"`1..4` is","Fragments":["just"]},{"Key":"just this:","Fragments":["`Range[first:"]},{"Key":"this: `Range[first:","Fragments":["1,"]},{"Key":"last: 4]`","Fragments":["(i.e."]},{"Key":"4]` (i.e.","Fragments":["a"]},{"Key":"record with","Fragments":["two"]},{"Key":"No function","Fragments":["that"]},{"Key":"that relies","Fragments":["on"]},{"Key":"relies on","Fragments":["`Enumerable.reduce`","passing"]},{"Key":"on `Enumerable.reduce`","Fragments":["(i.e."]},{"Key":"`Enumerable.reduce` (i.e.","Fragments":["that"]},{"Key":"(i.e. that","Fragments":["only"]},{"Key":"only knows","Fragments":["of"]},{"Key":"knows of","Fragments":["an"]},{"Key":"of `Enumerable`","Fragments":["for"]},{"Key":"`Enumerable` for","Fragments":["it)"]},{"Key":"for it)","Fragments":["can"]},{"Key":"it) can","Fragments":["return"]},{"Key":"same type","Fragments":["for"]},{"Key":"type for","Fragments":["all"]},{"Key":"all values","Fragments":["that"]},{"Key":"values that","Fragments":["are"]},{"Key":"are passed","Fragments":["to"]},{"Key":"it. `Enumerable.reduce`","Fragments":["is"]},{"Key":"`Enumerable.reduce` is","Fragments":["always"]},{"Key":"a transformation","Fragments":["from"]},{"Key":"transformation from","Fragments":["something"]},{"Key":"from something","Fragments":["to","I"]},{"Key":"else. What","Fragments":["it"]},{"Key":"What it","Fragments":["transforms"]},{"Key":"it transforms","Fragments":["to"]},{"Key":"transforms to","Fragments":["is"]},{"Key":"to is","Fragments":["determined"]},{"Key":"determined solely","Fragments":["by"]},{"Key":"solely by","Fragments":["the"]},{"Key":"not by","Fragments":["the"]},{"Key":"why `Enum`","Fragments":["functions"]},{"Key":"functions tend","Fragments":["to"]},{"Key":"return lists","Fragments":["and"]},{"Key":"and `Stream`","Fragments":["functions"]},{"Key":"name return","Fragments":["streams"]},{"Key":"return streams","Fragments":["(usually"]},{"Key":"streams (usually","Fragments":["in"]},{"Key":"(usually in","Fragments":["the"]},{"Key":"the form","Fragments":["of","`VAR"]},{"Key":"of `Stream.Lazy`","Fragments":["records)."]},{"Key":"This answers","Fragments":["my"]},{"Key":"answers my","Fragments":["question,"]},{"Key":"my question,","Fragments":["meaning"]},{"Key":"question, meaning","Fragments":["that"]},{"Key":"meaning that","Fragments":["it"]},{"Key":"implementation (at","Fragments":["least"]},{"Key":"(at least","Fragments":["on","not"]},{"Key":"least on","Fragments":["the"]},{"Key":"the overall","Fragments":["repetition"]},{"Key":"overall repetition","Fragments":["level)."]},{"Key":"repetition level).","Fragments":["Thanks"]},{"Key":"level). Thanks","Fragments":["for"]},{"Key":"the thorough","Fragments":["explanation!"]},{"Key":"else pointed","Fragments":["out"]},{"Key":"my implementation,","Fragments":["changing"]},{"Key":"implementation, changing","Fragments":["\"*\""]},{"Key":"changing \"*\"","Fragments":["to"]},{"Key":"\"*\" to","Fragments":["\"+\""]},{"Key":"to \"+\"","Fragments":["in"]},{"Key":"\"+\" in","Fragments":["your"]},{"Key":"regex should","Fragments":["remove"]},{"Key":"should remove","Fragments":["the"]},{"Key":"to reject","Fragments":["empty"]},{"Key":"reject empty","Fragments":["strings","words,"]},{"Key":"counting function","Fragments":["sent"]},{"Key":"function sent","Fragments":["to"]},{"Key":"sent to","Fragments":["Dict.update:"]},{"Key":"to Dict.update:","Fragments":["\u0026(\u00261"]},{"Key":"Dict.update: \u0026(\u00261","Fragments":["+"]},{"Key":"feels the","Fragments":["cleanest","most"]},{"Key":"cleanest iteration","Fragments":["so"]},{"Key":"iteration so","Fragments":["far."]},{"Key":" @pietro","Fragments":["Why"]},{"Key":"@pietro Why","Fragments":["would"]},{"Key":"This seemed","Fragments":["to"]},{"Key":"fairly straightforward","Fragments":["exercise"]},{"Key":"straightforward exercise","Fragments":["until"]},{"Key":"exercise until","Fragments":["I"]},{"Key":"range test","Fragments":["case.","was"]},{"Key":"case. I","Fragments":["don't"]},{"Key":"like treating","Fragments":["it"]},{"Key":"treating it","Fragments":["as"]},{"Key":"special case,","Fragments":["but"]},{"Key":"with lists","Fragments":["and"]},{"Key":"and ranges","Fragments":["in","(or"]},{"Key":"ranges in","Fragments":["a","Elixir"]},{"Key":"of \"apply_accumulate\"","Fragments":["as"]},{"Key":"\"apply_accumulate\" as","Fragments":["a"]},{"Key":"because \"apply\"","Fragments":["has"]},{"Key":"\"apply\" has","Fragments":["a"]},{"Key":"certain meaning,","Fragments":["but"]},{"Key":"meaning, but","Fragments":["I"]},{"Key":"hate the","Fragments":["\"do_X\"","pattern"]},{"Key":"the \"do_X\"","Fragments":["pattern"]},{"Key":"\"do_X\" pattern","Fragments":["for"]},{"Key":"pattern for","Fragments":["function"]},{"Key":"you've already","Fragments":["moved","defined."]},{"Key":"already moved","Fragments":["on"]},{"Key":"`keep` besides","Fragments":["the"]},{"Key":"set difference","Fragments":["approach"]},{"Key":"difference approach","Fragments":["that"]},{"Key":"were using","Fragments":["in","inject"]},{"Key":"iteration. Have","Fragments":["any"]},{"Key":"Have any","Fragments":["thoughts?"]},{"Key":"any thoughts?","Fragments":["Or"]},{"Key":"thoughts? Or","Fragments":["would"]},{"Key":"Or would","Fragments":["you"]},{"Key":"still interested","Fragments":["to"]},{"Key":"interested to","Fragments":["talk"]},{"Key":"potentially reduce","Fragments":["the"]},{"Key":"initial collection,","Fragments":["using"]},{"Key":"collection, using","Fragments":["`conditionally_add_item`"]},{"Key":"using `conditionally_add_item`","Fragments":["to"]},{"Key":"`conditionally_add_item` to","Fragments":["keep"]},{"Key":"accumulator only","Fragments":["the"]},{"Key":"elements that","Fragments":["are"]},{"Key":"the `keep`","Fragments":["collection."]},{"Key":"`keep` collection.","Fragments":["Is"]},{"Key":"collection. Is","Fragments":["this"]},{"Key":"had in","Fragments":["mind?","mind","some"]},{"Key":"thinking more","Fragments":["along"]},{"Key":"more along","Fragments":["the"]},{"Key":"of inverting","Fragments":["the"]},{"Key":"inverting the","Fragments":["result"]},{"Key":"test function.","Fragments":["For"]},{"Key":"function. For","Fragments":["example,"]},{"Key":"test function","Fragments":["was"]},{"Key":"was `odd?`","Fragments":["which"]},{"Key":"`odd?` which","Fragments":["returns"]},{"Key":"returns true","Fragments":["if"]},{"Key":"true if","Fragments":["a"]},{"Key":"number is","Fragments":["odd,","still","not","11","1,"]},{"Key":"is odd,","Fragments":["`keep`"]},{"Key":"odd, `keep`","Fragments":["would"]},{"Key":"`keep` would","Fragments":["be"]},{"Key":"implemented just","Fragments":["as"]},{"Key":"have it,","Fragments":["and"]},{"Key":"discard would","Fragments":["be"]},{"Key":"of `keep`,","Fragments":["except"]},{"Key":"`keep`, except","Fragments":["the"]},{"Key":"be inverted:","Fragments":["`!odd?`."]},{"Key":" You'd","Fragments":["just"]},{"Key":"You'd just","Fragments":["have"]},{"Key":"original function","Fragments":["and"]},{"Key":"and `!`","Fragments":["it."]},{"Key":"`!` it.","Fragments":["Does"]},{"Key":"it. Does","Fragments":["that"]},{"Key":"time explaining","Fragments":["myself","it"]},{"Key":"explaining myself","Fragments":["clearly"]},{"Key":"myself clearly","Fragments":["without"]},{"Key":"without just","Fragments":["writing"]},{"Key":"just writing","Fragments":["out"]},{"Key":"writing out","Fragments":["the","the"]},{"Key":"code. :/","Fragments":["Sorry"]},{"Key":":/ Sorry","Fragments":["about"]},{"Key":"Sorry about","Fragments":["that."]},{"Key":"example would","Fragments":["be","work!"]},{"Key":"you mean,","Fragments":["but","but"]},{"Key":"mean, but","Fragments":["at","are"]},{"Key":"point a","Fragments":["code"]},{"Key":"code example","Fragments":["would"]},{"Key":"would work!","Fragments":["Thanks"]},{"Key":"work! Thanks","Fragments":[":-)"]},{"Key":"Cool, sorry,","Fragments":["I"]},{"Key":"was having","Fragments":["a","to","was"]},{"Key":"explaining it","Fragments":["clearly."]},{"Key":"it clearly.","Fragments":["Here's"]},{"Key":"clearly. Here's","Fragments":["how"]},{"Key":"def discard(collection,","Fragments":["function)"]},{"Key":"discard(collection, function)","Fragments":["do"]},{"Key":" keep(collection,","Fragments":["fn(x)"]},{"Key":"keep(collection, fn(x)","Fragments":["-\u003e"]},{"Key":"fn(x) -\u003e","Fragments":["!function.(x)","1"]},{"Key":"-\u003e !function.(x)","Fragments":["end)"]},{"Key":"For even","Fragments":["more"]},{"Key":"more awesomeness,","Fragments":["which"]},{"Key":"awesomeness, which","Fragments":["I"]},{"Key":"just saw,","Fragments":["since"]},{"Key":"saw, since","Fragments":["you've"]},{"Key":"since you've","Fragments":["marked"]},{"Key":"you've marked","Fragments":["the"]},{"Key":"marked the","Fragments":["exercise"]},{"Key":"as complete,","Fragments":["you"]},{"Key":"complete, you","Fragments":["could"]},{"Key":"out @bart's","Fragments":["implementation."]},{"Key":"@bart's implementation.","Fragments":["Much"]},{"Key":"implementation. Much","Fragments":["simpler"]},{"Key":"Much simpler","Fragments":["than"]},{"Key":"are something","Fragments":["I"]},{"Key":"to reach","Fragments":["for"]},{"Key":"reach for","Fragments":["more","that"]},{"Key":"more often","Fragments":["in"]},{"Key":"often in","Fragments":["Elixir."]},{"Key":"Elixir. Seems","Fragments":["like"]},{"Key":"like they","Fragments":["often","would"]},{"Key":"often provide","Fragments":["one"]},{"Key":"provide one","Fragments":["of"]},{"Key":"the most,","Fragments":["if"]},{"Key":"most, if","Fragments":["not"]},{"Key":"most elegant","Fragments":["solutions"]},{"Key":"elegant solutions","Fragments":["to"]},{"Key":"to operations","Fragments":["involving"]},{"Key":"operations involving","Fragments":["lists."]},{"Key":"For `count`,","Fragments":["did"]},{"Key":"`count`, did","Fragments":["you"]},{"Key":"about `Enum.count/2`?","Fragments":["You"]},{"Key":"`Enum.count/2`? You","Fragments":["might"]},{"Key":"For `nucleotide_counts`,","Fragments":["what"]},{"Key":"`nucleotide_counts`, what","Fragments":["would"]},{"Key":"using `Dict.update/3`","Fragments":["to"]},{"Key":"`Dict.update/3` to","Fragments":["get"]},{"Key":"one call","Fragments":["rather","to"]},{"Key":"call rather","Fragments":["than"]},{"Key":"separate `Dict.get`","Fragments":["and"]},{"Key":"general note,","Fragments":["I"]},{"Key":"note, I","Fragments":["think"]},{"Key":"a best","Fragments":["practice"]},{"Key":"best practice","Fragments":["to"]},{"Key":"standard `Dict`","Fragments":["functions"]},{"Key":"`HashDict` once","Fragments":["it's"]},{"Key":"it's been","Fragments":["created,"]},{"Key":"been created,","Fragments":["rather"]},{"Key":"created, rather","Fragments":["than"]},{"Key":"the `HashDict`","Fragments":["specific","though."]},{"Key":"`HashDict` specific","Fragments":["ones."]},{"Key":"words, `Dict.get`","Fragments":["instead"]},{"Key":"`Dict.get` instead","Fragments":["of"]},{"Key":"for detailed","Fragments":["feedback!"]},{"Key":"- Regarding","Fragments":["`count`:"]},{"Key":"Regarding `count`:","Fragments":["I've"]},{"Key":"`count`: I've","Fragments":["used"]},{"Key":"a tail","Fragments":["recursive","recursive","call.","call","recursive","recursive","recursive","recursive","recursive","recursive","recursive","recursive","recursive","recursive","recursive"]},{"Key":"on purpose","Fragments":["as"]},{"Key":"purpose as","Fragments":["I'm"]},{"Key":"through learning","Fragments":["Erlang"]},{"Key":"learning Erlang","Fragments":["itself"]},{"Key":"Erlang itself","Fragments":["at"]},{"Key":"itself at","Fragments":["the"]},{"Key":"same time,","Fragments":["but"]},{"Key":"but certainly","Fragments":["`Enum.count/2`"]},{"Key":"certainly `Enum.count/2`","Fragments":["would"]},{"Key":"- It's","Fragments":["the"]},{"Key":"second time","Fragments":["I"]},{"Key":"about `Dict.update/3`,","Fragments":["especially"]},{"Key":"`Dict.update/3`, especially","Fragments":["with"]},{"Key":"`\u0026` notation.","Fragments":["I'll","Think"]},{"Key":"notation. I'll","Fragments":["amend"]},{"Key":"I'll amend","Fragments":["it."]},{"Key":"The `Dict`","Fragments":["change"]},{"Key":"`Dict` change","Fragments":["makes"]},{"Key":"change makes","Fragments":["a"]},{"Key":"of sense,","Fragments":["I"]},{"Key":"sense, I","Fragments":["have"]},{"Key":"note to","Fragments":["look"]},{"Key":"whole HashDict","Fragments":["documentation"]},{"Key":"HashDict documentation","Fragments":["is"]},{"Key":"a massive","Fragments":["alias"]},{"Key":"massive alias","Fragments":["to"]},{"Key":"alias to","Fragments":["Dict,"]},{"Key":"to Dict,","Fragments":["so"]},{"Key":"Dict, so","Fragments":["I"]},{"Key":"previous nitpickers","Fragments":["may"]},{"Key":"nitpickers may","Fragments":["have"]},{"Key":"have had","Fragments":["in","a","in"]},{"Key":"mind as","Fragments":["far"]},{"Key":"as using","Fragments":["`Regex.scan`"]},{"Key":"`Regex.scan` was","Fragments":["to"]},{"Key":"to essentially","Fragments":["select"]},{"Key":"essentially select","Fragments":["what"]},{"Key":"select what","Fragments":["you"]},{"Key":"want (sequences","Fragments":["of"]},{"Key":"(sequences of","Fragments":["word"]},{"Key":"of word","Fragments":["characters),","characters."]},{"Key":"word characters),","Fragments":["rather"]},{"Key":"characters), rather","Fragments":["than"]},{"Key":"than delete","Fragments":["what"]},{"Key":"delete what","Fragments":["you"]},{"Key":"don't want,","Fragments":["or"]},{"Key":"want, or","Fragments":["split"]},{"Key":"or split","Fragments":["on"]},{"Key":"split on","Fragments":["what"]},{"Key":"To select","Fragments":["sequences"]},{"Key":"select sequences","Fragments":["of"]},{"Key":"more word","Fragments":["characters"]},{"Key":"word characters","Fragments":["you","but"]},{"Key":"regex matcher","Fragments":["`\\w+`"]},{"Key":"matcher `\\w+`","Fragments":["or"]},{"Key":"`\\w+` or","Fragments":["in"]},{"Key":"or in","Fragments":["Elixir"]},{"Key":"syntax something","Fragments":["like"]},{"Key":"like `%r/\\w+/`","Fragments":["or"]},{"Key":"`%r/\\w+/` or","Fragments":["`%r{\\w+}`."]},{"Key":"or `%r{\\w+}`.","Fragments":["I"]},{"Key":"`%r{\\w+}`. I","Fragments":["like"]},{"Key":"the forward","Fragments":["slash"]},{"Key":"forward slash","Fragments":["delimiter"]},{"Key":"slash delimiter","Fragments":["myself"]},{"Key":"delimiter myself","Fragments":["since"]},{"Key":"myself since","Fragments":["that"]},{"Key":"looks more","Fragments":["like"]},{"Key":"use whatever","Fragments":["delimiter"]},{"Key":"whatever delimiter","Fragments":["you"]},{"Key":"delimiter you","Fragments":["like."]},{"Key":"you like.","Fragments":[":)"]},{"Key":"use `Enum.to_list(collection)`","Fragments":["to"]},{"Key":"`Enum.to_list(collection)` to","Fragments":["transform"]},{"Key":"transform any","Fragments":["Enumerable"]},{"Key":"any Enumerable","Fragments":["into","without"]},{"Key":"Enumerable into","Fragments":["a"]},{"Key":"the safest","Fragments":["option"]},{"Key":"safest option","Fragments":["since"]},{"Key":"option since","Fragments":["the"]},{"Key":"function interface","Fragments":["is"]},{"Key":"is spec'd","Fragments":["(if"]},{"Key":"spec'd (if","Fragments":["I"]},{"Key":"(if I","Fragments":["understand"]},{"Key":"spec line","Fragments":["correctly)"]},{"Key":"line correctly)","Fragments":["to"]},{"Key":"correctly) to","Fragments":["accept"]},{"Key":"accept anything","Fragments":["that"]},{"Key":"that implements","Fragments":["the","that"]},{"Key":"the Enumerable","Fragments":["protocol,"]},{"Key":"Enumerable protocol,","Fragments":["not"]},{"Key":"protocol, not","Fragments":["just"]},{"Key":"just explicit","Fragments":["lists"]},{"Key":"explicit lists","Fragments":["and"]},{"Key":"the implementation,","Fragments":["do","and","not","and"]},{"Key":"implementation, do","Fragments":["you"]},{"Key":"about list","Fragments":["comprehensions?"]},{"Key":"list comprehensions?","Fragments":["If"]},{"Key":"comprehensions? If","Fragments":["you"]},{"Key":"used `Enum.to_list`","Fragments":["first"]},{"Key":"`Enum.to_list` first","Fragments":["to"]},{"Key":"collection to","Fragments":["a"]},{"Key":"list, you","Fragments":["could"]},{"Key":"those and","Fragments":["just"]},{"Key":"implementation inline","Fragments":["in"]},{"Key":"in `accumulate`","Fragments":["without"]},{"Key":"`accumulate` without","Fragments":["having"]},{"Key":"private helpers.","Fragments":["What"]},{"Key":"helpers. What","Fragments":["do"]},{"Key":"didn't quite","Fragments":["feel"]},{"Key":"quite feel","Fragments":["the"]},{"Key":"exercise properly","Fragments":["and"]},{"Key":"properly and","Fragments":["cheated"]},{"Key":"and cheated","Fragments":["a"]},{"Key":"cheated a","Fragments":["bit"]},{"Key":"using list","Fragments":["comprehensions.","comprehension","comprehensions"]},{"Key":"comprehensions. This","Fragments":["is"]},{"Key":"somewhat cheating","Fragments":["because"]},{"Key":"cheating because","Fragments":["those"]},{"Key":"those boil","Fragments":["down"]},{"Key":"boil down","Fragments":["to"]},{"Key":"something semantically","Fragments":["equivalent"]},{"Key":"semantically equivalent","Fragments":["to"]},{"Key":"to `filter`,","Fragments":["`flat_map`"]},{"Key":"`filter`, `flat_map`","Fragments":["and"]},{"Key":"`flat_map` and","Fragments":["`map`"]},{"Key":"and `map`","Fragments":["(the"]},{"Key":"`map` (the","Fragments":["actual"]},{"Key":"(the actual","Fragments":["implementation"]},{"Key":"actual implementation","Fragments":["in"]},{"Key":"implementation in","Fragments":["Erlang"]},{"Key":"Erlang uses","Fragments":["optimized"]},{"Key":"uses optimized","Fragments":["code"]},{"Key":"optimized code","Fragments":["for"]},{"Key":"bit verbose","Fragments":["but"]},{"Key":"verbose but","Fragments":["otherwise"]},{"Key":"but otherwise","Fragments":["I"]},{"Key":"small tip","Fragments":["to"]},{"Key":"tip to","Fragments":["reduce"]},{"Key":"reduce verbosity:","Fragments":["what"]},{"Key":"verbosity: what","Fragments":["I"]},{"Key":"submission was","Fragments":["to"]},{"Key":"first sort","Fragments":["the"]},{"Key":"the numbers.","Fragments":["That"]},{"Key":"numbers. That","Fragments":["way"]},{"Key":"way less","Fragments":["checks"]},{"Key":"less checks","Fragments":["are"]},{"Key":"checks are","Fragments":["needed."]},{"Key":" Bear","Fragments":["in"]},{"Key":"Bear in","Fragments":["mind"]},{"Key":"mind though","Fragments":["that"]},{"Key":"word character","Fragments":["but","but","even","but","and"]},{"Key":"character but","Fragments":["not","hyphens","a"]},{"Key":"not \"-\"","Fragments":["(even"]},{"Key":"\"-\" (even","Fragments":["though"]},{"Key":"(even though","Fragments":["there","it"]},{"Key":"though there","Fragments":["are"]},{"Key":"with \"-\",","Fragments":["such"]},{"Key":"\"-\", such","Fragments":["as"]},{"Key":"That won't","Fragments":["be"]},{"Key":"test don't","Fragments":["check"]},{"Key":" `Dict`","Fragments":["vs"]},{"Key":"`Dict` vs","Fragments":["`HashDict`:"]},{"Key":"vs `HashDict`:","Fragments":["It's"]},{"Key":"`HashDict`: It's","Fragments":["worth"]},{"Key":"It's worth","Fragments":["to"]},{"Key":"worth to","Fragments":["remember"]},{"Key":"`ListDict`, lists","Fragments":["of"]},{"Key":"pairs (`{key,","Fragments":["value}`"]},{"Key":"(`{key, value}`","Fragments":["tuples)"]},{"Key":"value}` tuples)","Fragments":["can"]},{"Key":"tuples) can","Fragments":["be"]},{"Key":"easily switch","Fragments":["out"]},{"Key":"switch out","Fragments":["the"]},{"Key":"specific dictionary","Fragments":["implementation"]},{"Key":"dictionary implementation","Fragments":["without"]},{"Key":"implementation without","Fragments":["having"]},{"Key":"you're curious","Fragments":["about"]},{"Key":"wrote a","Fragments":["[blog"]},{"Key":"a [blog","Fragments":["article](http://pminten.github.io/blog/2013/09/12/elixir-patterns-abstract-data-structures/)"]},{"Key":"[blog article](http://pminten.github.io/blog/2013/09/12/elixir-patterns-abstract-data-structures/)","Fragments":["about"]},{"Key":"article](http://pminten.github.io/blog/2013/09/12/elixir-patterns-abstract-data-structures/) about","Fragments":["that"]},{"Key":"nit: this","Fragments":["wouldn't"]},{"Key":"this wouldn't","Fragments":["match"]},{"Key":"wouldn't match","Fragments":["\"für\""]},{"Key":"match \"für\"","Fragments":["(German"]},{"Key":"use Unicode","Fragments":["categories"]},{"Key":"Unicode categories","Fragments":["using"]},{"Key":"categories using","Fragments":["the"]},{"Key":"the `\\p{}`","Fragments":["syntax"]},{"Key":"`\\p{}` syntax","Fragments":["in"]},{"Key":"expressions. For","Fragments":["example"]},{"Key":"example `\\p{L}`","Fragments":["matches","for"]},{"Key":"`\\p{L}` matches","Fragments":["any","for","any"]},{"Key":"matches any","Fragments":["letter","number.","Unicode","Unicode"]},{"Key":"any letter","Fragments":["and","(any"]},{"Key":"and `\\p{N}`","Fragments":["matches","for"]},{"Key":"`\\p{N}` matches","Fragments":["any"]},{"Key":" Insisting","Fragments":["on"]},{"Key":"Insisting on","Fragments":["adding"]},{"Key":"on adding","Fragments":["that"]},{"Key":"adding that","Fragments":["range"]},{"Key":"that range","Fragments":["test"]},{"Key":"mistake (my","Fragments":["mistake),"]},{"Key":"(my mistake),","Fragments":["pretty"]},{"Key":"mistake), pretty","Fragments":["much"]},{"Key":"much everyone","Fragments":["seems"]},{"Key":"everyone seems","Fragments":["to"]},{"Key":"fall over","Fragments":["that"]},{"Key":"ranges (or","Fragments":["more"]},{"Key":"(or more","Fragments":["exactly"]},{"Key":"more exactly","Fragments":["any"]},{"Key":"exactly any","Fragments":["enumerable,"]},{"Key":"any enumerable,","Fragments":["ranges","which"]},{"Key":"enumerable, ranges","Fragments":["were"]},{"Key":"ranges were","Fragments":["used"]},{"Key":"the non-list","Fragments":["enumerables)."]},{"Key":"The good","Fragments":["news","news"]},{"Key":"good news","Fragments":["is","is"]},{"Key":"news is","Fragments":["that","though"]},{"Key":"once Katrina","Fragments":["merges"]},{"Key":"Katrina merges","Fragments":["my"]},{"Key":"merges my","Fragments":["list-ops"]},{"Key":"my list-ops","Fragments":["PR"]},{"Key":"list-ops PR","Fragments":["this"]},{"Key":"PR this","Fragments":["exercise"]},{"Key":"exercise will","Fragments":["be"]},{"Key":"be gone","Fragments":["and"]},{"Key":"gone and","Fragments":["replaced"]},{"Key":"by one","Fragments":["that"]},{"Key":" Brought","Fragments":["the"]},{"Key":"Brought the","Fragments":["cond"]},{"Key":"cond onto","Fragments":["single"]},{"Key":"onto single","Fragments":["lines,"]},{"Key":"single lines,","Fragments":["I","but"]},{"Key":"lines, I","Fragments":["think","think"]},{"Key":" Mmm...","Fragments":["sorry,"]},{"Key":"Mmm... sorry,","Fragments":["@jerel,"]},{"Key":"sorry, @jerel,","Fragments":["my"]},{"Key":"@jerel, my","Fragments":["comment"]},{"Key":"about considering","Fragments":["list"]},{"Key":"considering list","Fragments":["comprehensions"]},{"Key":"comprehensions for","Fragments":["this"]},{"Key":"exercise didn't","Fragments":["really"]},{"Key":"the `strain`","Fragments":["exercise."]},{"Key":"`strain` exercise.","Fragments":[":/"]},{"Key":"exercise. :/","Fragments":["But"]},{"Key":":/ But","Fragments":["yeah,"]},{"Key":"yeah, `Enum.to_list`","Fragments":["and"]},{"Key":"`Enum.to_list` and","Fragments":["`Enum.reduce`"]},{"Key":"and `Enum.reduce`","Fragments":["(which"]},{"Key":"`Enum.reduce` (which","Fragments":["is"]},{"Key":"use here)","Fragments":["both"]},{"Key":"here) both","Fragments":["can"]},{"Key":"both can","Fragments":["handle"]},{"Key":"handle any","Fragments":["Enumerable"]},{"Key":"Enumerable without","Fragments":["having"]},{"Key":"any special","Fragments":["case","logic"]},{"Key":"case stuff.","Fragments":["I"]},{"Key":"I apologize","Fragments":["if"]},{"Key":"apologize if","Fragments":["my"]},{"Key":"initial nit","Fragments":["had"]},{"Key":"nit had","Fragments":["you"]},{"Key":"had you","Fragments":["wondering"]},{"Key":"you wondering","Fragments":["what"]},{"Key":"wondering what","Fragments":["the"]},{"Key":"the heck","Fragments":["I"]},{"Key":"heck I","Fragments":["was"]},{"Key":" @jerel,","Fragments":["as"]},{"Key":"@jerel, as","Fragments":["far"]},{"Key":"as whether","Fragments":["the"]},{"Key":"the addition","Fragments":["of"]},{"Key":"addition of","Fragments":["the"]},{"Key":"a Range","Fragments":["was"]},{"Key":"Range was","Fragments":["a"]},{"Key":"mistake, maybe","Fragments":["this"]},{"Key":"maybe this","Fragments":["exercise","should"]},{"Key":"best place","Fragments":["for","for"]},{"Key":"it's designed","Fragments":["to"]},{"Key":"to teach/practice","Fragments":["a"]},{"Key":"teach/practice a","Fragments":["different"]},{"Key":"different concept,","Fragments":["but"]},{"Key":"concept, but","Fragments":["I"]},{"Key":"having exercises","Fragments":["with"]},{"Key":"exercises with","Fragments":["tests"]},{"Key":"with tests","Fragments":["that"]},{"Key":"about protocols","Fragments":["and"]},{"Key":"protocols and","Fragments":["designing"]},{"Key":"and designing","Fragments":["functions"]},{"Key":"designing functions","Fragments":["that"]},{"Key":"implements that","Fragments":["protocol"]},{"Key":"that protocol","Fragments":["is"]},{"Key":"protocol is","Fragments":["valuable."]},{"Key":"is valuable.","Fragments":["Protocols"]},{"Key":"valuable. Protocols","Fragments":["in"]},{"Key":"Protocols in","Fragments":["general"]},{"Key":"general is","Fragments":["an"]},{"Key":"haven't really","Fragments":["learned"]},{"Key":"learned in","Fragments":["Elixir"]},{"Key":"Elixir yet,","Fragments":["and"]},{"Key":"yet, and","Fragments":["this"]},{"Key":"it stands","Fragments":["with"]},{"Key":"stands with","Fragments":["that"]},{"Key":"extra test","Fragments":["made"]},{"Key":"test made","Fragments":["me"]},{"Key":"me dig","Fragments":["into"]},{"Key":"into it","Fragments":["a"]},{"Key":"bit, for","Fragments":["which"]},{"Key":"for which","Fragments":["I","`[A-Z]`"]},{"Key":"was grateful.","Fragments":["Just"]},{"Key":"grateful. Just","Fragments":["my"]},{"Key":"Just my","Fragments":["two"]},{"Key":"my two","Fragments":["cents."]},{"Key":"two cents.","Fragments":[":)"]},{"Key":"feedback as","Fragments":["always,"]},{"Key":"as always,","Fragments":["@jerad.","@pink!"]},{"Key":"always, @jerad.","Fragments":["Yeah,"]},{"Key":"@jerad. Yeah,","Fragments":["I"]},{"Key":"wasn't super","Fragments":["happy"]},{"Key":"super happy","Fragments":["with","with"]},{"Key":"improve it.","Fragments":["It"]},{"Key":"It did","Fragments":["seem"]},{"Key":"did seem","Fragments":["pretty"]},{"Key":"seem pretty","Fragments":["long/verbose."]},{"Key":"suggestion to","Fragments":["reduce","define","make","extract"]},{"Key":"the verbosity,","Fragments":["were"]},{"Key":"verbosity, were","Fragments":["you"]},{"Key":"were you","Fragments":["thinking","saying"]},{"Key":"thinking just","Fragments":["of"]},{"Key":"just of","Fragments":["my"]},{"Key":"of `violates_triangle_inequality?`...","Fragments":["sorting"]},{"Key":"`violates_triangle_inequality?`... sorting","Fragments":["the"]},{"Key":"lengths and","Fragments":["then"]},{"Key":"just doing","Fragments":["one"]},{"Key":"doing one","Fragments":["check"]},{"Key":"one check","Fragments":["rather"]},{"Key":"check rather","Fragments":["than"]},{"Key":"than all","Fragments":["three?"]},{"Key":"all three?","Fragments":["Or"]},{"Key":"three? Or","Fragments":["were"]},{"Key":"Or were","Fragments":["you"]},{"Key":"you saying","Fragments":["that"]},{"Key":"that sorting","Fragments":["the","every"]},{"Key":"lengths would","Fragments":["allow"]},{"Key":"eliminate other","Fragments":["checks/functions"]},{"Key":"other checks/functions","Fragments":["as"]},{"Key":"checks/functions as","Fragments":["well?"]},{"Key":" @emmanuelle","Fragments":["Good"]},{"Key":"@emmanuelle Good","Fragments":["point,"]},{"Key":"current set","Fragments":["of"]},{"Key":"exercises doesn't","Fragments":["do"]},{"Key":"do much","Fragments":["with"]},{"Key":"with protocols,","Fragments":["or"]},{"Key":"protocols, or","Fragments":["enumerators"]},{"Key":"or enumerators","Fragments":["for"]},{"Key":"enumerators for","Fragments":["that"]},{"Key":"think (it's","Fragments":["been"]},{"Key":"(it's been","Fragments":["a"]},{"Key":"while since","Fragments":["I've"]},{"Key":"since I've","Fragments":["done"]},{"Key":"exercise) that","Fragments":["it"]},{"Key":"only helps","Fragments":["for"]},{"Key":"helps for","Fragments":["the"]},{"Key":"Btw, my","Fragments":["own"]},{"Key":"own submission","Fragments":["for"]},{"Key":"this only","Fragments":["took"]},{"Key":"took 9","Fragments":["lines"]},{"Key":"9 lines","Fragments":["(inside"]},{"Key":"lines (inside","Fragments":["`kind`),"]},{"Key":"(inside `kind`),","Fragments":["though"]},{"Key":"`kind`), though","Fragments":["it"]},{"Key":"it used","Fragments":["a"]},{"Key":"single `cond`","Fragments":["(no"]},{"Key":"`cond` (no","Fragments":["`case`)"]},{"Key":"(no `case`)","Fragments":["so"]},{"Key":"`case`) so","Fragments":["it's"]},{"Key":"little slower","Fragments":["than"]},{"Key":"code probably.","Fragments":["Looking"]},{"Key":"probably. Looking","Fragments":["back"]},{"Key":"back I","Fragments":["could"]},{"Key":"in 8","Fragments":["lines"]},{"Key":"8 lines","Fragments":["by"]},{"Key":"lines by","Fragments":["folding"]},{"Key":"by folding","Fragments":["the"]},{"Key":"the `a","Fragments":["=="]},{"Key":"`a ==","Fragments":["b","b","b","b`"]},{"Key":"== b","Fragments":["-\u003e","\u0026\u0026","||"]},{"Key":"b -\u003e","Fragments":["{"]},{"Key":"-\u003e {","Fragments":[":ok,",":ok,"]},{"Key":":ok, :isosceles","Fragments":["}`","}`"]},{"Key":":isosceles }`","Fragments":["and","clauses"]},{"Key":"}` and","Fragments":["`b"]},{"Key":"and `b","Fragments":["=="]},{"Key":"`b ==","Fragments":["c"]},{"Key":"== c","Fragments":["-\u003e"]},{"Key":"c -\u003e","Fragments":["{"]},{"Key":"}` clauses","Fragments":["into"]},{"Key":"clauses into","Fragments":["a"]},{"Key":"single clause.","Fragments":["Anyway,"]},{"Key":"clause. Anyway,","Fragments":["that's"]},{"Key":"Anyway, that's","Fragments":["just"]},{"Key":"to illustrate","Fragments":["how","this"]},{"Key":"illustrate how","Fragments":["short"]},{"Key":"how short","Fragments":["an"]},{"Key":"short an","Fragments":["answer"]},{"Key":"an answer","Fragments":["could"]},{"Key":"answer could","Fragments":["be."]},{"Key":"Thanks! That's","Fragments":["tremendously"]},{"Key":"That's tremendously","Fragments":["useful"]},{"Key":"tremendously useful","Fragments":["feedback,"]},{"Key":"useful feedback,","Fragments":["as"]},{"Key":"feedback, as","Fragments":["I"]},{"Key":"hadn't touched","Fragments":["Elixir"]},{"Key":"touched Elixir","Fragments":["in"]},{"Key":"in several","Fragments":["months,","places"]},{"Key":"several months,","Fragments":["and"]},{"Key":"months, and","Fragments":["lost"]},{"Key":"and lost","Fragments":["most"]},{"Key":"lost most","Fragments":["of"]},{"Key":"what I'd","Fragments":["learned","done"]},{"Key":"I'd learned","Fragments":[":)"]},{"Key":" Slight","Fragments":["optimization:"]},{"Key":"Slight optimization:","Fragments":["you"]},{"Key":"optimization: you","Fragments":["could"]},{"Key":"write `[function.(x)]","Fragments":["++"]},{"Key":"`[function.(x)] ++","Fragments":["acc]`"]},{"Key":"++ acc]`","Fragments":["as"]},{"Key":"acc]` as","Fragments":["`[function.(x)"]},{"Key":"as `[function.(x)","Fragments":["|"]},{"Key":"`[function.(x) |","Fragments":["acc]`."]},{"Key":"extracting those","Fragments":["conditions"]},{"Key":"conditions because","Fragments":["I"]},{"Key":"they weren't","Fragments":["very"]},{"Key":"weren't very","Fragments":["reusable"]},{"Key":"very reusable","Fragments":["and"]},{"Key":"make better","Fragments":["sense"]},{"Key":"better sense","Fragments":["if"]},{"Key":"sense if","Fragments":["read"]},{"Key":"if read","Fragments":["inline."]},{"Key":"read inline.","Fragments":["I'm"]},{"Key":"inline. I'm","Fragments":["not"]},{"Key":"very convinced","Fragments":["about"]},{"Key":"convinced about","Fragments":["extracting"]},{"Key":"extracting them","Fragments":["just"]},{"Key":"them just","Fragments":["for"]},{"Key":"general explicit","Fragments":["recursion"]},{"Key":"recursion like","Fragments":["in"]},{"Key":"better expressed","Fragments":["with"]},{"Key":"expressed with","Fragments":["`Enum`"]},{"Key":"`Enum` or","Fragments":["`Stream`","a"]},{"Key":"or `Stream`","Fragments":["functions."]},{"Key":"`Stream` functions.","Fragments":["For"]},{"Key":"functions. For","Fragments":["example"]},{"Key":"example `count`","Fragments":["is"]},{"Key":"is known","Fragments":["in"]},{"Key":"known in","Fragments":["the"]},{"Key":"programming world","Fragments":["as"]},{"Key":"world as","Fragments":["a"]},{"Key":"reduce pattern.","Fragments":["You"]},{"Key":"can express","Fragments":["it","them"]},{"Key":"express it","Fragments":["quite","more"]},{"Key":"it quite","Fragments":["easily"]},{"Key":"quite easily","Fragments":["with","for","for"]},{"Key":"easily with","Fragments":["`Enum.reduce`."]},{"Key":"In sanitize","Fragments":["you"]},{"Key":"sanitize you","Fragments":["remove"]},{"Key":"don't want.","Fragments":["Wouldn't"]},{"Key":"want. Wouldn't","Fragments":["it"]},{"Key":"do want?","Fragments":["`Regex.scan`","For","Take"]},{"Key":"want? `Regex.scan`","Fragments":["can"]},{"Key":"`Regex.scan` can","Fragments":["come"]},{"Key":" `fn(val)","Fragments":["-\u003e"]},{"Key":"`fn(val) -\u003e","Fragments":["val"]},{"Key":"-\u003e val","Fragments":["+"]},{"Key":"end` could","Fragments":["be"]},{"Key":"be alternatively","Fragments":["written"]},{"Key":"alternatively written","Fragments":["as"]},{"Key":"as `\u0026(\u00261","Fragments":["+","+"]},{"Key":"+ 1)`.","Fragments":["This","It's"]},{"Key":"1)`. This","Fragments":["is"]},{"Key":"Gotcha. I","Fragments":["like"]},{"Key":"of sorting","Fragments":["the","the"]},{"Key":"the lengths...","Fragments":["seems"]},{"Key":"lengths... seems","Fragments":["like"]},{"Key":"might enable","Fragments":["simpler"]},{"Key":"enable simpler","Fragments":["checks"]},{"Key":"simpler checks","Fragments":["in"]},{"Key":"areas since","Fragments":["you"]},{"Key":"more assumptions","Fragments":["at"]},{"Key":"assumptions at","Fragments":["that"]},{"Key":"that point.","Fragments":["I'll"]},{"Key":"point. I'll","Fragments":["see"]},{"Key":"like better","Fragments":["than"]},{"Key":"one and","Fragments":["re-submit.","set"]},{"Key":"and re-submit.","Fragments":["Although"]},{"Key":"re-submit. Although","Fragments":["this"]},{"Key":"Although this","Fragments":["one"]},{"Key":"is verbose,","Fragments":["I"]},{"Key":"verbose, I","Fragments":["like"]},{"Key":"like most","Fragments":["aspects","of"]},{"Key":"most aspects","Fragments":["of"]},{"Key":"it, except","Fragments":["my"]},{"Key":"except my","Fragments":["`violates_triangle_inequality?`"]},{"Key":"my `violates_triangle_inequality?`","Fragments":["function."]},{"Key":"`violates_triangle_inequality?` function.","Fragments":["I"]},{"Key":"other private","Fragments":["methods"]},{"Key":"methods take","Fragments":["a"]},{"Key":"of sides","Fragments":["and"]},{"Key":"sides and","Fragments":["that"]},{"Key":"function takes","Fragments":["the"]},{"Key":"three sides","Fragments":["explicitly..."]},{"Key":"sides explicitly...","Fragments":["just"]},{"Key":"just makes","Fragments":["it"]},{"Key":"it stick","Fragments":["out"]},{"Key":"stick out","Fragments":["and"]},{"Key":"less intuitive","Fragments":["to"]},{"Key":"intuitive to","Fragments":["use.","me"]},{"Key":"to use.","Fragments":["And"]},{"Key":"use. And","Fragments":["yeah,"]},{"Key":"And yeah,","Fragments":["the"]},{"Key":"yeah, the","Fragments":["explicit","site"]},{"Key":"explicit listing","Fragments":["of"]},{"Key":"listing of","Fragments":["the"]},{"Key":"three cases","Fragments":["seems"]},{"Key":"cases seems","Fragments":["like"]},{"Key":"1. Using","Fragments":["`collection`","[`Dict.update/4`](http://elixir-lang.org/docs/master/Dict.html#update/4)"]},{"Key":"Using `collection`","Fragments":["as"]},{"Key":"`collection` as","Fragments":["a"]},{"Key":"accumulator in","Fragments":["`accumulate/3`"]},{"Key":"in `accumulate/3`","Fragments":["is"]},{"Key":"`accumulate/3` is","Fragments":["a"]},{"Key":"confusing, since","Fragments":["it's"]},{"Key":"original collection","Fragments":["from"]},{"Key":"collection from","Fragments":["`accumulate/2`,"]},{"Key":"from `accumulate/2`,","Fragments":["but"]},{"Key":"`accumulate/2`, but","Fragments":["rather"]},{"Key":"rather the","Fragments":["result,"]},{"Key":"the result,","Fragments":["or","but"]},{"Key":"result, or","Fragments":["the"]},{"Key":"accumulator. Typically","Fragments":["this"]},{"Key":"Typically this","Fragments":["variable"]},{"Key":"this variable","Fragments":["is"]},{"Key":"2. For","Fragments":["composing"]},{"Key":"For composing","Fragments":["a"]},{"Key":"an element","Fragments":["to","to"]},{"Key":"element to","Fragments":["its","the"]},{"Key":"its head,","Fragments":["instead"]},{"Key":"head, instead","Fragments":["of"]},{"Key":"using `++`","Fragments":["you"]},{"Key":"`++` you","Fragments":["can"]},{"Key":"use `[head","Fragments":["|"]},{"Key":"`[head |","Fragments":["tail]`"]},{"Key":"tail]` syntax.","Fragments":["So,"]},{"Key":"syntax. So,","Fragments":["instead"]},{"Key":"So, instead","Fragments":["of"]},{"Key":"of `[func.(head)]","Fragments":["++"]},{"Key":"`[func.(head)] ++","Fragments":["collection`"]},{"Key":"++ collection`","Fragments":["you"]},{"Key":"collection` you","Fragments":["could"]},{"Key":"do `[func.(head)","Fragments":["|"]},{"Key":"`[func.(head) |","Fragments":["collection]`."]},{"Key":"| collection]`.","Fragments":["And"]},{"Key":"collection]`. And","Fragments":["that's"]},{"Key":"most efficient","Fragments":["way","way"]},{"Key":"efficient way","Fragments":["to","of"]},{"Key":"it, too.","Fragments":[":)"]},{"Key":"using `Enum.reverse`","Fragments":["on"]},{"Key":"`Enum.reverse` on","Fragments":["the"]},{"Key":"front end","Fragments":["allows"]},{"Key":"end allows","Fragments":["`accumulate/2`"]},{"Key":"allows `accumulate/2`","Fragments":["to"]},{"Key":"`accumulate/2` to","Fragments":["work"]},{"Key":"enumerable, which","Fragments":["is"]},{"Key":"Thanks guys.","Fragments":["Well,"]},{"Key":"guys. Well,","Fragments":["I"]},{"Key":"still learned","Fragments":["something"]},{"Key":"learned something","Fragments":["from","there,"]},{"Key":"something from","Fragments":["this"]},{"Key":"exercise, so","Fragments":["I"]},{"Key":"appreciate it","Fragments":["in"]},{"Key":"any case.","Fragments":["Incoming"]},{"Key":"case. Incoming","Fragments":["with"]},{"Key":"Incoming with","Fragments":["Enum.reduce"]},{"Key":" @lindsey,","Fragments":["thank"]},{"Key":"@lindsey, thank","Fragments":["you"]},{"Key":"your suggestions.","Fragments":["One"]},{"Key":"suggestions. One","Fragments":["thing"]},{"Key":"I noticed,","Fragments":["that"]},{"Key":"noticed, that","Fragments":["seems"]},{"Key":"little odd","Fragments":["is"]},{"Key":"odd is","Fragments":["the","the"]},{"Key":"from `Regex.scan`.","Fragments":["I"]},{"Key":"`Regex.scan`. I","Fragments":["was"]},{"Key":"hoping it","Fragments":["would"]},{"Key":"single list.","Fragments":["Instead"]},{"Key":"list. Instead","Fragments":["it"]},{"Key":"lists. So","Fragments":["I"]},{"Key":"I piped","Fragments":["it"]},{"Key":"piped it","Fragments":["to"]},{"Key":" @enola,","Fragments":["thank"]},{"Key":"@enola, thank","Fragments":["you"]},{"Key":"an iteration","Fragments":["based"]},{"Key":"suggestions you","Fragments":["made."]},{"Key":"you made.","Fragments":["Thanks"]},{"Key":"made. Thanks","Fragments":["again."]},{"Key":" `List.flatten`","Fragments":["or"]},{"Key":"`List.flatten` or","Fragments":["`|\u003e"]},{"Key":"or `|\u003e","Fragments":["Enum.map(\u0026hd/1)`"]},{"Key":"`|\u003e Enum.map(\u0026hd/1)`","Fragments":["is"]},{"Key":"Enum.map(\u0026hd/1)` is","Fragments":["fine."]},{"Key":"fine. `Regex.scan`","Fragments":["indeed"]},{"Key":"`Regex.scan` indeed","Fragments":["returns"]},{"Key":"indeed returns","Fragments":["a"]},{"Key":"use captures","Fragments":["in"]},{"Key":"captures in","Fragments":["it","regexes,"]},{"Key":"for even","Fragments":["better"]},{"Key":"control of","Fragments":["what's"]},{"Key":"Usually the","Fragments":["reverse"]},{"Key":"done after","Fragments":["the"]},{"Key":"the reduce,","Fragments":["but"]},{"Key":"works equally","Fragments":["well."]},{"Key":" Took","Fragments":["@celine's","me"]},{"Key":"Took @celine's","Fragments":["suggestion"]},{"Key":"@celine's suggestion","Fragments":["of"]},{"Key":"the sides,","Fragments":["which"]},{"Key":"sides, which","Fragments":["allowed"]},{"Key":"which allowed","Fragments":["me"]},{"Key":"allowed me","Fragments":["to"]},{"Key":"to then","Fragments":["simplify","get"]},{"Key":"then simplify","Fragments":["the"]},{"Key":"required tests.","Fragments":["While"]},{"Key":"tests. While","Fragments":["this"]},{"Key":"While this","Fragments":["version"]},{"Key":"less explicit","Fragments":["in"]},{"Key":"explicit in","Fragments":["that"]},{"Key":"error cases","Fragments":["are"]},{"Key":"cases are","Fragments":["now","right"]},{"Key":"are now","Fragments":["inline","tail"]},{"Key":"now inline","Fragments":["(therefore"]},{"Key":"inline (therefore","Fragments":["no"]},{"Key":"(therefore no","Fragments":["longer"]},{"Key":"longer have","Fragments":["names)"]},{"Key":"have names)","Fragments":["and"]},{"Key":"more \"clever\",","Fragments":["it's"]},{"Key":"\"clever\", it's","Fragments":["considerably"]},{"Key":"it's considerably","Fragments":["more"]},{"Key":"think sufficiently","Fragments":["clear,"]},{"Key":"sufficiently clear,","Fragments":["especially"]},{"Key":"messages for","Fragments":["the"]},{"Key":"two semi-complex","Fragments":["cases"]},{"Key":"semi-complex cases","Fragments":["are"]},{"Key":"right next","Fragments":["to"]},{"Key":"in them","Fragments":["being"]},{"Key":"being returned.","Fragments":["That"]},{"Key":"returned. That","Fragments":["kind"]},{"Key":"That kind","Fragments":["of"]},{"Key":"of makes","Fragments":["up"]},{"Key":"makes up","Fragments":["for"]},{"Key":"tests themselves","Fragments":["not"]},{"Key":"themselves not","Fragments":["being"]},{"Key":"being wrapped","Fragments":["in"]},{"Key":"in well-named","Fragments":["functions."]},{"Key":"think? Between","Fragments":["this"]},{"Key":"Between this","Fragments":["version"]},{"Key":"the previous,","Fragments":["which"]},{"Key":"previous, which","Fragments":["do"]},{"Key":"which do","Fragments":["you"]},{"Key":"you prefer?","Fragments":["Do"]},{"Key":"prefer? Do","Fragments":["you"]},{"Key":"this version,","Fragments":["or"]},{"Key":"version, or","Fragments":["would"]},{"Key":"or would","Fragments":["you"]},{"Key":"make further","Fragments":["improvements?"]},{"Key":"of this.","Fragments":["Just"]},{"Key":"this. Just","Fragments":["wonder"]},{"Key":"Just wonder","Fragments":["if"]},{"Key":"the HashSet","Fragments":["is"]},{"Key":"HashSet is","Fragments":["necessary"]},{"Key":"necessary considering","Fragments":["that"]},{"Key":"only three","Fragments":["elements."]},{"Key":"to reason","Fragments":["that","about"]},{"Key":"that `a","Fragments":["=="]},{"Key":"b \u0026\u0026","Fragments":["b"]},{"Key":"\u0026\u0026 b","Fragments":["=="]},{"Key":"== c`","Fragments":["means","means"]},{"Key":"c` means","Fragments":["3","2"]},{"Key":"means 3","Fragments":["sides"]},{"Key":"3 sides","Fragments":["are"]},{"Key":"sides are","Fragments":["the","the","sorted."]},{"Key":"same and","Fragments":["if"]},{"Key":"case `a","Fragments":["=="]},{"Key":"b ||","Fragments":["b"]},{"Key":"|| b","Fragments":["=="]},{"Key":"means 2","Fragments":["sides"]},{"Key":"2 sides","Fragments":["are"]},{"Key":"Your `String.split`","Fragments":["is"]},{"Key":"`String.split` is","Fragments":["intended"]},{"Key":"is intended","Fragments":["to","to"]},{"Key":"characters. Wouldn't","Fragments":["it"]},{"Key":"You're recomputing","Fragments":["the"]},{"Key":"downcased `base`","Fragments":["for"]},{"Key":"`base` for","Fragments":["each"]},{"Key":"each `candidate`.","Fragments":["Could"]},{"Key":"`candidate`. Could","Fragments":["you"]},{"Key":"Ah, gotcha.","Fragments":["Things","I"]},{"Key":"gotcha. Things","Fragments":["do"]},{"Key":"Things do","Fragments":["get"]},{"Key":"do get","Fragments":["much"]},{"Key":"simpler when","Fragments":["the"]},{"Key":"the sides","Fragments":["are"]},{"Key":"are sorted.","Fragments":["Interesting.","Then"]},{"Key":"sorted. Interesting.","Fragments":["I"]},{"Key":"version. :)","Fragments":["Thanks"]},{"Key":":) Thanks","Fragments":["for"]},{"Key":"your feedback!","Fragments":["I"]},{"Key":"of `String.to_char_list!`","Fragments":["previously."]},{"Key":"`String.to_char_list!` previously.","Fragments":["Also"]},{"Key":"previously. Also","Fragments":["good"]},{"Key":"Also good","Fragments":["call"]},{"Key":"good call","Fragments":["on"]},{"Key":"on not","Fragments":["recomputing","relying"]},{"Key":"not recomputing","Fragments":["base"]},{"Key":"recomputing base","Fragments":["each"]},{"Key":"base each","Fragments":["time."]},{"Key":" @ocie","Fragments":["thanks"]},{"Key":"@ocie thanks","Fragments":["a"]},{"Key":"feedback! I'm","Fragments":["pretty"]},{"Key":"minor improvement","Fragments":["you"]},{"Key":"improvement you","Fragments":["could","could","might"]},{"Key":"could make:","Fragments":["currently","`String.ends_with?(input,"]},{"Key":"make: currently","Fragments":["you"]},{"Key":"currently you","Fragments":["don't"]},{"Key":"don't recognize","Fragments":["shouting"]},{"Key":"recognize shouting","Fragments":["in"]},{"Key":"shouting in","Fragments":["non-latin","Russian","Russian","Russian","Russian","Russian"]},{"Key":"in non-latin","Fragments":["languages"]},{"Key":"non-latin languages","Fragments":["such"]},{"Key":"languages such","Fragments":["as"]},{"Key":"as Russian.","Fragments":["For"]},{"Key":"Russian. For","Fragments":["example"]},{"Key":"example \"УХОДИТЬ\"","Fragments":["(Russian"]},{"Key":"\"УХОДИТЬ\" (Russian","Fragments":["for"]},{"Key":"(Russian for","Fragments":["\"get"]},{"Key":"for \"get","Fragments":["out\",","out\""]},{"Key":"\"get out\",","Fragments":["according"]},{"Key":"out\", according","Fragments":["to"]},{"Key":"Google Translate)","Fragments":["isn't"]},{"Key":"Translate) isn't","Fragments":["recognized"]},{"Key":"isn't recognized","Fragments":["as"]},{"Key":"can fix","Fragments":["that"]},{"Key":"using `/\\p{Lu}/`","Fragments":["as"]},{"Key":"`/\\p{Lu}/` as","Fragments":["a"]},{"Key":"regex (`\\p{}`","Fragments":["matches"]},{"Key":"(`\\p{}` matches","Fragments":["a"]},{"Key":"matches a","Fragments":["character"]},{"Key":"character based","Fragments":["on"]},{"Key":"a Unicode","Fragments":["general"]},{"Key":"Unicode general","Fragments":["category","category"]},{"Key":"category property,","Fragments":["in"]},{"Key":"property, in","Fragments":["this"]},{"Key":"matches uppercase","Fragments":["letters)."]},{"Key":"test \"shouting","Fragments":["in","in","with","numbers\"","with","numbers\""]},{"Key":"\"shouting in","Fragments":["russian","Russian\"","Russian\""]},{"Key":"in russian","Fragments":["with"]},{"Key":"russian with","Fragments":["no"]},{"Key":"no exclamation","Fragments":["mark\"","mark,"]},{"Key":"exclamation mark\"","Fragments":["do"]},{"Key":"assert Teenager.hey(\"УХОДИТЬ\")","Fragments":["==","=="]},{"Key":"Teenager.hey(\"УХОДИТЬ\") ==","Fragments":["\"Woah,","\"Woah,"]},{"Key":"== \"Woah,","Fragments":["chill","chill","chill","chill","chill","chill"]},{"Key":"how we","Fragments":["all"]},{"Key":"we all","Fragments":["start."]},{"Key":"all start.","Fragments":[";)"]},{"Key":"Yes, that's","Fragments":["a"]},{"Key":"good one.","Fragments":["I'll","I"]},{"Key":"one. I'll","Fragments":["add"]},{"Key":"official tests","Fragments":["as"]},{"Key":"tests as","Fragments":["well."]},{"Key":"though: why","Fragments":["not","not"]},{"Key":"not reuse","Fragments":["`append`"]},{"Key":"reuse `append`","Fragments":["in"]},{"Key":"in `concat`","Fragments":["(just"]},{"Key":"`concat` (just","Fragments":["curious)."]},{"Key":"using it.","Fragments":["Do"]},{"Key":"it. Do","Fragments":["you"]},{"Key":" reduce(ll,","Fragments":["[],"]},{"Key":"reduce(ll, [],","Fragments":["fn(acc,","fn"]},{"Key":"[], fn(acc,","Fragments":["l)"]},{"Key":"fn(acc, l)","Fragments":["-\u003e"]},{"Key":" append(reverse(l),","Fragments":["acc)"]},{"Key":"little simpler","Fragments":["but"]},{"Key":"simpler but","Fragments":["it's"]},{"Key":"it's calling","Fragments":["reverse"]},{"Key":"calling reverse","Fragments":["twice"]},{"Key":"reverse twice","Fragments":["for"]},{"Key":"twice for","Fragments":["each"]},{"Key":"each list","Fragments":["in","once","is"]},{"Key":"of lists,","Fragments":["once","where"]},{"Key":"lists, once","Fragments":["inline"]},{"Key":"once inline","Fragments":["and"]},{"Key":"once inside","Fragments":["of","the"]},{"Key":"reuse it","Fragments":["you"]},{"Key":"were thinking","Fragments":["of?"]},{"Key":"explicit group","Fragments":["capturing."]},{"Key":"group capturing.","Fragments":["By"]},{"Key":"capturing. By","Fragments":["default"]},{"Key":"By default","Fragments":["a"]},{"Key":"default a","Fragments":["list"]},{"Key":"one element,","Fragments":["the","I"]},{"Key":"element, the","Fragments":["entire"]},{"Key":"entire matched","Fragments":["text,"]},{"Key":"matched text,","Fragments":["is"]},{"Key":"text, is","Fragments":["returned."]},{"Key":"do `Stream.map(\u0026hd/1)","Fragments":["|\u003e"]},{"Key":"`Stream.map(\u0026hd/1) |\u003e","Fragments":["Enum.reduce`"]},{"Key":"Enum.reduce` than","Fragments":["to"]},{"Key":"The indentation","Fragments":["style"]},{"Key":"indentation style","Fragments":["here"]},{"Key":"style here","Fragments":["is"]},{"Key":"is uncommon.","Fragments":["It's"]},{"Key":"uncommon. It's","Fragments":["perfectly"]},{"Key":"perfectly fine","Fragments":["to","but","to"]},{"Key":" Enum.map_reduce","Fragments":["matches,"]},{"Key":"Enum.map_reduce matches,","Fragments":["HashDict.new,"]},{"Key":"matches, HashDict.new,","Fragments":["fn([word],"]},{"Key":"HashDict.new, fn([word],","Fragments":["acc)"]},{"Key":"fn([word], acc)","Fragments":["-\u003e"]},{"Key":"{ word,","Fragments":["HashDict.update(acc,"]},{"Key":"word, HashDict.update(acc,","Fragments":["String.downcase(word),"]},{"Key":"HashDict.update(acc, String.downcase(word),","Fragments":["1,"]},{"Key":"String.downcase(word), 1,","Fragments":["fn(x)"]},{"Key":"-\u003e 1","Fragments":["+","+"]},{"Key":"1 +","Fragments":["x","x","rest","1","temp","foo(a","rest","1","rest","1","2","count(t)","2","rest","1","2","rest","1","rest","1","rest","1"]},{"Key":"+ x","Fragments":["end)","end`"]},{"Key":"x end)","Fragments":["}"]},{"Key":"To reduce","Fragments":["the"]},{"Key":"the verbosity","Fragments":["you"]},{"Key":"verbosity you","Fragments":["can"]},{"Key":"write `fn(x)","Fragments":["-\u003e"]},{"Key":"x end`","Fragments":["as"]},{"Key":"as `\u0026(1","Fragments":["+"]},{"Key":"`\u0026(1 +","Fragments":["\u00261)`."]},{"Key":"using `reduce`","Fragments":["in","and","for","as","to","as","a","and"]},{"Key":"`reduce` in","Fragments":["many"]},{"Key":"places instead","Fragments":["of"]},{"Key":"def concat(ll),","Fragments":["do:"]},{"Key":"concat(ll), do:","Fragments":["reverse(ll)","reduce(ll,"]},{"Key":"do: reverse(ll)","Fragments":["|\u003e"]},{"Key":"reverse(ll) |\u003e","Fragments":["reduce([],"]},{"Key":"|\u003e reduce([],","Fragments":["\u0026(append(\u00262,"]},{"Key":"reduce([], \u0026(append(\u00262,","Fragments":["\u00261)))"]},{"Key":" Single","Fragments":["characters"]},{"Key":"Single characters","Fragments":["can"]},{"Key":" @luella","Fragments":["good"]},{"Key":"@luella good","Fragments":["point!"]},{"Key":"So this","Fragments":["definition"]},{"Key":"this definition","Fragments":["of"]},{"Key":"function doesn’t","Fragments":["actually"]},{"Key":"doesn’t actually","Fragments":["meet"]},{"Key":"actually meet","Fragments":["the"]},{"Key":"meet the","Fragments":["spec."]},{"Key":"the spec.","Fragments":["What’s","That"]},{"Key":"spec. What’s","Fragments":["the"]},{"Key":"What’s the","Fragments":["practice?"]},{"Key":"the practice?","Fragments":["Define"]},{"Key":"practice? Define","Fragments":["a"]},{"Key":"Define a","Fragments":["second"]},{"Key":"second spec","Fragments":["for"]},{"Key":"of taking","Fragments":["a"]},{"Key":" @alan","Fragments":["to_rna(char)","to_rna([char])"]},{"Key":"@alan to_rna(char)","Fragments":["::"]},{"Key":"to_rna(char) ::","Fragments":["char"]},{"Key":"@alan to_rna([char])","Fragments":["::"]},{"Key":"to_rna([char]) ::","Fragments":["[char]"]},{"Key":" @devonte","Fragments":["That’s"]},{"Key":"@devonte That’s","Fragments":["the"]},{"Key":"That’s the","Fragments":["first"]},{"Key":"first practical","Fragments":["explanation"]},{"Key":"practical explanation","Fragments":["of"]},{"Key":"explanation of","Fragments":["tail"]},{"Key":"of tail","Fragments":["recursion","call"]},{"Key":"tail recursion","Fragments":["that’s","the","by","the","before","to","but","and","the","for","but","in","but","the","the","and","and","the","comment:","the","but","is","(and"]},{"Key":"recursion that’s","Fragments":["made"]},{"Key":"that’s made","Fragments":["sense"]},{"Key":"made sense","Fragments":["to","too"]},{"Key":"so much!","Fragments":["Going"]},{"Key":"much! Going","Fragments":["to"]},{"Key":"try rewriting","Fragments":["these"]},{"Key":"rewriting these","Fragments":["list"]},{"Key":"these list","Fragments":["ops"]},{"Key":"list ops","Fragments":["using"]},{"Key":"ops using","Fragments":["it."]},{"Key":" @neha","Fragments":["awesome,"]},{"Key":"@neha awesome,","Fragments":["I"]},{"Key":"I couldn’t","Fragments":["recall"]},{"Key":"couldn’t recall","Fragments":["how"]},{"Key":"recall how","Fragments":["that"]},{"Key":"that shorthand","Fragments":["for"]},{"Key":"for referencing","Fragments":["a"]},{"Key":"referencing a","Fragments":["function."]},{"Key":"exercise contains","Fragments":["several","several","several","several","several","several","several"]},{"Key":"contains several","Fragments":["functions","functions","functions","functions","functions","functions","functions"]},{"Key":"several functions","Fragments":["that","that","that","that","that","that","that"]},{"Key":"a wrong,","Fragments":["which","which","which","which","which","which","which"]},{"Key":"wrong, which","Fragments":["is","is","is","is","is","is","is"]},{"Key":"say very","Fragments":["inefficient,","inefficient,","inefficient,","inefficient,","inefficient,","inefficient,","inefficient,"]},{"Key":"very inefficient,","Fragments":["way.","way.","way.","way.","way.","way.","way."]},{"Key":"inefficient, way.","Fragments":["And","And","And"]},{"Key":"way. And","Fragments":["I'm","I'm","I'm","yes,"]},{"Key":"And I'm","Fragments":["happy","happy","happy"]},{"Key":"say you've","Fragments":["triggered","triggered","triggered"]},{"Key":"you've triggered","Fragments":["it","it","it"]},{"Key":"triggered it","Fragments":["(happy,","(happy,","(happy,"]},{"Key":"it (happy,","Fragments":["because","because","because"]},{"Key":"(happy, because","Fragments":["it","it","it"]},{"Key":"explain an","Fragments":["important","important","important"]},{"Key":"important concept","Fragments":["in","in","in"]},{"Key":"concept in","Fragments":["functional","functional","functional"]},{"Key":"at `count`.","Fragments":["I'll","I'll","I'll","I'll","I'll","I'll","I'll"]},{"Key":"`count`. I'll","Fragments":["rewrite","rewrite","rewrite","rewrite","rewrite","rewrite","rewrite"]},{"Key":"I'll rewrite","Fragments":["it","it","it","it","it","it","it"]},{"Key":"the explanation","Fragments":["easier","easier","easier","easier","easier","easier","easier"]},{"Key":"explanation easier","Fragments":["to","to","to","to","to","to","to"]},{"Key":"def count(l)","Fragments":["do","do","do","do","do","do","do"]},{"Key":" case","Fragments":["l","l","l","list","l","l","schedule","l","l","l","l","l","l","l","l","l","l"]},{"Key":"case l","Fragments":["do","do","do","do","do","do","do","do","do","do","do","do","do","do","do"]},{"Key":"[] -\u003e","Fragments":["0","0","#","reversed_list","0","0","0","0","0","acc","0","acc","0","acc","0","acc"]},{"Key":" [_|t]","Fragments":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"]},{"Key":" rest","Fragments":["=","=","=","=","=","=","="]},{"Key":"rest =","Fragments":["count(t)","count(t)","count(t)","count(t)","count(t)","count(t)","count(t)"]},{"Key":" 1","Fragments":["+","+","+","+","+","+","+","+"]},{"Key":"Here's happens","Fragments":["when","when","when","when","when","when","when"]},{"Key":"you run","Fragments":["`count([1,2])`:","`count([1,2])`:","`count([1,2])`:","`count([1,2])`:","`count([1,2])`:","`count([1,2])`:","`count([1,2])`:"]},{"Key":"* New","Fragments":["stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack"]},{"Key":"New stack","Fragments":["entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry"]},{"Key":"stack entry","Fragments":["is","is","is","has","of","is","is","is","was","is","is","is","has","of","is","is","is","was","is","is","is","has","of","is","is","is","was","is","is","is","has","of","is","is","is","was","is","is","is","has","of","is","is","is","was","is","is","is","has","of","is","is","is","was","is","is","is","has","of","is","is","is","was"]},{"Key":"entry is","Fragments":["created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created","created"]},{"Key":"created for","Fragments":["the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the","the"]},{"Key":"* Case","Fragments":["match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match","match"]},{"Key":"* Second","Fragments":["case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case","case"]},{"Key":"Second case","Fragments":["is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is","is"]},{"Key":"is matched,","Fragments":["`t`","`t`","return","`t`","`t`","`acc`","`t`","`t`","return","`t`","`t`","`acc`","`t`","`t`","return","`t`","`t`","`acc`","`t`","`t`","return","`t`","`t`","`acc`","`t`","`t`","return","`t`","`t`","`acc`","`t`","`t`","return","`t`","`t`","`acc`","`t`","`t`","return","`t`","`t`","`acc`"]},{"Key":"matched, `t`","Fragments":["=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","="]},{"Key":"`t` =","Fragments":["[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]","[2]","[]"]},{"Key":"* Recursion,","Fragments":["new","new","no","new","new","no","new","new","no","new","new","no","new","new","no","new","new","no","new","new","no"]},{"Key":"Recursion, new","Fragments":["stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack"]},{"Key":"new stack","Fragments":["entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry","entry"]},{"Key":"* First","Fragments":["case","case","case","case","case","case","case","case","case","case","case","case","case","case"]},{"Key":"First case","Fragments":["is","is","is","is","is","is","is","is","is","is","is","is","is","is"]},{"Key":"matched, return","Fragments":["value","value","value","value","value","value","value"]},{"Key":"* `rest`","Fragments":["=","=","=","=","=","=","=","=","=","=","=","=","=","="]},{"Key":"`rest` =","Fragments":["0","1","0","1","0","1","0","1","0","1","0","1","0","1"]},{"Key":"= 0","Fragments":["(return","(return","(return","(return","(return","(return","(return"]},{"Key":"0 (return","Fragments":["value","value","value","value","value","value","value"]},{"Key":"(return value","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"* return","Fragments":["value","value","value","value","value","value","value","value","value","value","value","value","value","value"]},{"Key":"0 +","Fragments":["1","1","1","1","1","1","1","1","1","1"]},{"Key":"1 =","Fragments":["1","2","1","2","1","2","1","2","1","2","1","2","1","2"]},{"Key":"= 1","Fragments":["(return","(return","(return","(return","(return","(return","(return"]},{"Key":"1 (return","Fragments":["value","value","value","value","value","value","value"]},{"Key":"is 1","Fragments":["+","+","+","+","+","+","+"]},{"Key":"Note how","Fragments":["for","for","for","for","for","for","for"]},{"Key":"how for","Fragments":["each","each","each","each","each","each","each"]},{"Key":"each entry","Fragments":["in","in","in","in","in","in","in"]},{"Key":"entry in","Fragments":["the","the","the","the","the","the","the"]},{"Key":"list a","Fragments":["new","new","new","new","new","and","new","new"]},{"Key":"entry has","Fragments":["to","to","to","to","to","to","to"]},{"Key":"be created","Fragments":["which","which","which","which","which","which","which"]},{"Key":"created which","Fragments":["only","only","only","only","only","only","only"]},{"Key":"which only","Fragments":["gets","gets","gets","gets","gets","gets","gets"]},{"Key":"gets cleaned","Fragments":["up","up","up","up","up","up","up"]},{"Key":"up after","Fragments":["the","the","the","the","the","the","the"]},{"Key":"entire list","Fragments":["has","has","has","has","has","to","has","has"]},{"Key":"list has","Fragments":["been","been","been","to","been","to","been","been","been"]},{"Key":"been traversed.","Fragments":["In","In","In","In","In","In","In"]},{"Key":"traversed. In","Fragments":["Erlang","Erlang","Erlang","Erlang","Erlang","Erlang","Erlang"]},{"Key":"In Erlang","Fragments":["based","and","based","based","based","based","based","based"]},{"Key":"Erlang based","Fragments":["languages","languages","languages","languages","languages","languages","languages"]},{"Key":"based languages","Fragments":["like","like","like","like","like","like","like"]},{"Key":"like Elixir","Fragments":["this","this","this","this","this","this","this"]},{"Key":"obvious problem,","Fragments":["even","even","even","even","even","even","even"]},{"Key":"problem, even","Fragments":["for","for","for","for","for","for","for"]},{"Key":"for huge","Fragments":["numbers,","numbers,","numbers,","numbers,","numbers,","list","numbers,","numbers,"]},{"Key":"huge numbers,","Fragments":["but","but","but","but","but","but","but"]},{"Key":"OCaml and","Fragments":["try","try","try","try","try","try","try"]},{"Key":"approach the","Fragments":["system","system","system","system","system","system","system"]},{"Key":"the system","Fragments":["will","to","will","will","will","will","will","will"]},{"Key":"system will","Fragments":["simply","simply","simply","simply","simply","simply","simply"]},{"Key":"will simply","Fragments":["throw","throw","throw","throw","throw","throw","throw"]},{"Key":"simply throw","Fragments":["exception","exception","exception","exception","exception","exception","exception"]},{"Key":"throw exception","Fragments":["due","due","due","due","due","due","due"]},{"Key":"exception due","Fragments":["to","to","to","to","to","to","to"]},{"Key":"to stack","Fragments":["overflow","overflows","overflow","overflow","overflow","overflow","overflow","overflow"]},{"Key":"stack overflow","Fragments":["at","at","exception","exception","at","in","for","at","at","at","at"]},{"Key":"overflow at","Fragments":["some","some","some","some","some","some","some"]},{"Key":"some point.","Fragments":["Even","Even","Even","Even","Even","Even","Even"]},{"Key":"point. Even","Fragments":["in","in","in","in","in","in","in"]},{"Key":"Even in","Fragments":["Elixir/Erlang","Elixir","Elixir/Erlang","Elixir/Erlang","Elixir/Erlang","Elixir/Erlang","Elixir/Erlang","Elixir/Erlang"]},{"Key":"Elixir/Erlang you","Fragments":["end","end","end","end","end","end","end"]},{"Key":"more memory","Fragments":["consumption","than","consumption","consumption","(temporarily)","consumption","consumption","consumption","consumption"]},{"Key":"memory consumption","Fragments":["than","than","than","than","than","than","than"]},{"Key":"consumption than","Fragments":["is","is","is","is","is","is","is"]},{"Key":"than is","Fragments":["desirable.","desirable.","desirable.","desirable.","desirable.","desirable.","desirable."]},{"Key":"better way.","Fragments":["Elixir","Elixir","Elixir","Elixir","Elixir","Elixir","Elixir"]},{"Key":"Elixir (through","Fragments":["Erlang)","Erlang)","Erlang)","Erlang)","Erlang)","Erlang)","Erlang)"]},{"Key":"(through Erlang)","Fragments":["supports","supports","supports","supports","supports","supports","supports"]},{"Key":"Erlang) supports","Fragments":["tail","tail","tail","tail","tail","tail","tail"]},{"Key":"supports tail","Fragments":["recursion.","recursion.","recursion.","recursion.","recursion.","recursion.","recursion."]},{"Key":"recursion. Tail","Fragments":["recursion","recursion","recursion","recursion","recursion","recursion","recursion"]},{"Key":"recursion means","Fragments":["that","that","that","that","that","that","that"]},{"Key":"expression of","Fragments":["the","the","the","the","the","the","the"]},{"Key":"entry of","Fragments":["the","the","the","the","the","the","the"]},{"Key":"gets reused.","Fragments":["Here's","Here's","Here's","Here's","Here's","Here's","Here's"]},{"Key":"reused. Here's","Fragments":["a","a","a","a","a","a","a"]},{"Key":"def count(l),","Fragments":["do:","do:","do:","do:","do:","do:","do:","do:"]},{"Key":"count(l), do:","Fragments":["do_count(l,","do_count(l,","do_count(l,","do_count(l,","do_count(l,","do_count(l,","do_count(l,","do_count(l,","do_count(l,"]},{"Key":"do: do_count(l,","Fragments":["0)","0)","0)","0)","0)`.","0)","0)","0)","0)"]},{"Key":"defp do_count(l,","Fragments":["acc)","acc)","acc)","acc)","acc)","acc)","acc)"]},{"Key":"do_count(l, acc)","Fragments":["do","do","do","do","do","do","do"]},{"Key":"[_|t] -\u003e","Fragments":["do_count(t,","do_count(t,","do_count(t,","do_count(t,","do_count(t,","do_count(t,","do_count(t,"]},{"Key":"-\u003e do_count(t,","Fragments":["acc","acc","acc","acc","acc","acc","acc"]},{"Key":"do_count(t, acc","Fragments":["+","+","+","+","+","+","+"]},{"Key":"Now look","Fragments":["at","at","at","at","at","at","at"]},{"Key":"* `do_call(l,","Fragments":["0)`","0)`","0)`","0)`","0)`","0)`","0)`"]},{"Key":"`do_call(l, 0)`","Fragments":["is","is","is","is","is","is","is"]},{"Key":"0)` is","Fragments":["called","called","called","called","called","called","called"]},{"Key":"* `acc","Fragments":["+","+","+","+","+","+","+","+","+","+","+","+","+","+"]},{"Key":"`acc +","Fragments":["1`","1`","1`","1`","1`","1`","1`","1`","1`","1`","1`","1`","1`","1`"]},{"Key":"is computed,","Fragments":["`acc","`acc","`acc","`acc","`acc","`acc","`acc","`acc","`acc","`acc","`acc","`acc","`acc","`acc"]},{"Key":"computed, `acc","Fragments":["=","=","=","=","=","=","=","=","=","=","=","=","=","="]},{"Key":"`acc =","Fragments":["0`,","1`","1`,","0`,","1`","1`,","0`,","1`","1`,","0`,","1`","1`,","0`,","1`","1`,","0`,","1`","1`,","0`,","1`","1`,"]},{"Key":"= 0`,","Fragments":["result","result","result","result","result","result","result"]},{"Key":"0`, result","Fragments":["is","is","is","is","is","is","is"]},{"Key":"* Tail","Fragments":["recursion,","recursion,","recursion,","recursion,","recursion,","recursion,","recursion,"]},{"Key":"Tail recursion,","Fragments":["no","no","no","no","no","no","no"]},{"Key":"recursion, no","Fragments":["new","new","new","new","new","new","new"]},{"Key":"no new","Fragments":["stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack","stack"]},{"Key":"the call,","Fragments":["`acc","`acc","`acc","`acc","`acc","`acc","`acc"]},{"Key":"call, `acc","Fragments":["=","=","=","=","=","=","="]},{"Key":"= 1`,","Fragments":["result","result","result","result","result","result","result"]},{"Key":"1`, result","Fragments":["is","is","is","is","is","is","is"]},{"Key":"Recursion, no","Fragments":["new","new","new","new","new","new","new"]},{"Key":"matched, `acc`","Fragments":["(2)","(2)","(2)","(2)","(2)","(2)","(2)"]},{"Key":"`acc` (2)","Fragments":["is","is","is","is","is","is","is"]},{"Key":"(2) is","Fragments":["returned","returned","returned","returned","returned","returned","returned"]},{"Key":"* Because","Fragments":["the","the","the","the","the","the","the"]},{"Key":"Because the","Fragments":["stack","stack","stack","accumulator","stack","accumulator","stack","documentation","stack","stack"]},{"Key":"entry was","Fragments":["reused","reused","reused","reused","reused","reused","reused"]},{"Key":"was reused","Fragments":["`do_count`","`do_count`","`do_count`","`do_count`","`do_count`","`do_count`","`do_count`"]},{"Key":"reused `do_count`","Fragments":["now","now","now","now","now","now","now"]},{"Key":"`do_count` now","Fragments":["immediately","immediately","immediately","immediately","immediately","immediately","immediately"]},{"Key":"now immediately","Fragments":["returns","returns","returns","returns","returns","returns","returns"]},{"Key":"immediately returns","Fragments":["2","2","`[]`,","2","2","2","2","2"]},{"Key":"returns 2","Fragments":["to","to","to","to","to","to","to"]},{"Key":"2 to","Fragments":["`count`","`count`","`count`","`count`","`count`","`count`","`count`"]},{"Key":"Using tail","Fragments":["recursion","recursion","recursion","recursion","recursion","recursion","recursion"]},{"Key":"recursion the","Fragments":["memory","memory","memory","memory","memory","memory","memory"]},{"Key":"the memory","Fragments":["use","use","use","use","use","use","use"]},{"Key":"memory use","Fragments":["of","of","of","of","of","do","of","of"]},{"Key":"quite low","Fragments":["and","and","and","and","and","and","and"]},{"Key":"low and","Fragments":["constant","constant","constant","constant","constant","constant","constant"]},{"Key":"and constant","Fragments":["while","while","while","while","while","while","while"]},{"Key":"constant while","Fragments":["without","without","without","without","without","without","without"]},{"Key":"while without","Fragments":["it's","it's","it's","it's","it's","it's","it's"]},{"Key":"without it's","Fragments":["large","large","large","large","large","large","large"]},{"Key":"it's large","Fragments":["for","for","for","for","for","for","for"]},{"Key":"large for","Fragments":["a","a","a","a","a","a","a","`n"]},{"Key":"large list","Fragments":["and","and","and","and","and","and","and","tests"]},{"Key":"and huge","Fragments":["for","for","for","for","for","for","for"]},{"Key":"huge for","Fragments":["a","a","a","a","a","a","a"]},{"Key":"Very minor,","Fragments":["you"]},{"Key":"minor, you","Fragments":["could"]},{"Key":"also write","Fragments":["`\u0026do_to_rna(\u00261)`","`\u0026String.to_char_list/1`","the"]},{"Key":"write `\u0026do_to_rna(\u00261)`","Fragments":["(extra"]},{"Key":"`\u0026do_to_rna(\u00261)` (extra","Fragments":["parentheses"]},{"Key":"(extra parentheses","Fragments":["you"]},{"Key":"have are","Fragments":["not"]},{"Key":"not needed)","Fragments":["as"]},{"Key":"needed) as","Fragments":["`\u0026do_to_rna/1`."]},{"Key":"Most people","Fragments":["would"]},{"Key":"would define","Fragments":["a","multiple"]},{"Key":"to `Enum.map`,","Fragments":["for"]},{"Key":"`Enum.map`, for","Fragments":["example"]},{"Key":"example `do_to_rna`","Fragments":["(`do_foo`"]},{"Key":"`do_to_rna` (`do_foo`","Fragments":["is"]},{"Key":"(`do_foo` is","Fragments":["a"]},{"Key":"common name","Fragments":["for"]},{"Key":"helper for","Fragments":["`foo`)."]},{"Key":" @zelda","Fragments":["thanks"]},{"Key":"@zelda thanks","Fragments":["for"]},{"Key":"the advice.","Fragments":["Now"]},{"Key":"advice. Now","Fragments":["you"]},{"Key":"the do_foo","Fragments":["convention"]},{"Key":"do_foo convention","Fragments":["around."]},{"Key":"shorthand comes","Fragments":["from"]},{"Key":"Erlang notation","Fragments":["for"]},{"Key":"for functions:","Fragments":["`name/arity`."]},{"Key":"functions: `name/arity`.","Fragments":["For"]},{"Key":"`name/arity`. For","Fragments":["example"]},{"Key":"example `map/2`","Fragments":["for"]},{"Key":"`map/2` for","Fragments":["a"]},{"Key":"function `map`","Fragments":["that"]},{"Key":"`map` that","Fragments":["takes"]},{"Key":"takes 2","Fragments":["arguments."]},{"Key":"2 arguments.","Fragments":["In"]},{"Key":"arguments. In","Fragments":["Erlang"]},{"Key":"Elixir `map/1`","Fragments":["and"]},{"Key":"`map/1` and","Fragments":["`map/2`"]},{"Key":"and `map/2`","Fragments":["are"]},{"Key":"`map/2` are","Fragments":["two"]},{"Key":"like each","Fragments":["candidate"]},{"Key":"each candidate","Fragments":["is"]},{"Key":"is downcased","Fragments":["twice:"]},{"Key":"downcased twice:","Fragments":["once"]},{"Key":"the `split_sort`","Fragments":["function,"]},{"Key":"`split_sort` function,","Fragments":["and"]},{"Key":"and again","Fragments":["to"]},{"Key":"with `base`.","Fragments":["While"]},{"Key":"`base`. While","Fragments":["you"]},{"Key":"probably need","Fragments":["to","a","a"]},{"Key":"to sift","Fragments":["through"]},{"Key":"sift through","Fragments":["a"]},{"Key":"a dictionary","Fragments":["before","of"]},{"Key":"dictionary before","Fragments":["you'd"]},{"Key":"before you'd","Fragments":["notice"]},{"Key":"you'd notice","Fragments":["the"]},{"Key":"the performance","Fragments":["difference,","difference.","may"]},{"Key":"performance difference,","Fragments":["you"]},{"Key":"difference, you","Fragments":["could"]},{"Key":"could slightly","Fragments":["optimize","speed","simplify"]},{"Key":"slightly optimize","Fragments":["by"]},{"Key":"optimize by","Fragments":["storing"]},{"Key":"by storing","Fragments":["a"]},{"Key":"storing a","Fragments":["downcased"]},{"Key":"a downcased","Fragments":["version","list"]},{"Key":"downcased version","Fragments":["of","of"]},{"Key":"word first","Fragments":["and"]},{"Key":"removing `String.downcase`","Fragments":["from"]},{"Key":"`String.downcase` from","Fragments":["the"]},{"Key":"chain in","Fragments":["`split_sort`.","count"]},{"Key":"in `split_sort`.","Fragments":["I"]},{"Key":"`split_sort`. I","Fragments":["see"]},{"Key":"see from","Fragments":["the"]},{"Key":"comparison `base","Fragments":["!="]},{"Key":"`base !=","Fragments":["String.downcase(word)`"]},{"Key":"!= String.downcase(word)`","Fragments":["that"]},{"Key":"String.downcase(word)` that","Fragments":["we"]},{"Key":"can assume","Fragments":["`base`","the"]},{"Key":"assume `base`","Fragments":["is"]},{"Key":"`base` is","Fragments":["lowercase"]},{"Key":"Good catch,","Fragments":["I"]},{"Key":"catch, I","Fragments":["totally"]},{"Key":"totally missed","Fragments":["that"]},{"Key":"gotcha. I","Fragments":["guess"]},{"Key":"I should've","Fragments":["thought"]},{"Key":"should've thought","Fragments":["longer"]},{"Key":"thought longer","Fragments":["about"]},{"Key":"longer about","Fragments":["the"]},{"Key":"of reusing","Fragments":["it."]},{"Key":"reusing it.","Fragments":["Submitting"]},{"Key":"it. Submitting","Fragments":["a"]},{"Key":"version now.","Fragments":["I"]},{"Key":"`fn` syntax","Fragments":["so"]},{"Key":"syntax so","Fragments":["that"]},{"Key":"was clear","Fragments":["which"]},{"Key":"clear which","Fragments":["param"]},{"Key":"which param","Fragments":["was"]},{"Key":"param was","Fragments":["which."]},{"Key":"great exercise,","Fragments":["really"]},{"Key":"exercise, really","Fragments":["fun"]},{"Key":"really fun","Fragments":["for"]},{"Key":"fun for","Fragments":["someone"]},{"Key":"for someone","Fragments":["learning"]},{"Key":"someone learning","Fragments":["the"]},{"Key":"learning the","Fragments":["functional","details"]},{"Key":"I admit","Fragments":["that","regular"]},{"Key":"admit that","Fragments":["after"]},{"Key":"that after","Fragments":["beating"]},{"Key":"after beating","Fragments":["my"]},{"Key":"beating my","Fragments":["head"]},{"Key":"the wall","Fragments":["for"]},{"Key":"wall for","Fragments":["a","a"]},{"Key":"few hours,","Fragments":["I"]},{"Key":"hours, I","Fragments":["resorted"]},{"Key":"I resorted","Fragments":["to"]},{"Key":"resorted to","Fragments":["http://stackoverflow.com/questions/4092113/how-to-reverse-a-list"]},{"Key":"to http://stackoverflow.com/questions/4092113/how-to-reverse-a-list","Fragments":["to"]},{"Key":"http://stackoverflow.com/questions/4092113/how-to-reverse-a-list to","Fragments":["get"]},{"Key":"get an","Fragments":["idea"]},{"Key":"not super","Fragments":["excited"]},{"Key":"super excited","Fragments":["about"]},{"Key":"the \"if\"","Fragments":["statement"]},{"Key":"\"if\" statement","Fragments":["in"]},{"Key":"filter implementation,","Fragments":["but"]},{"Key":"get around","Fragments":["it.","that?"]},{"Key":"little skeptical","Fragments":["of"]},{"Key":"skeptical of","Fragments":["the"]},{"Key":"concat implementation","Fragments":["relying","to"]},{"Key":"implementation relying","Fragments":["completely"]},{"Key":"relying completely","Fragments":["on"]},{"Key":"completely on","Fragments":["the"]},{"Key":"the append","Fragments":["implementation.","in","function."]},{"Key":"append implementation.","Fragments":["The"]},{"Key":"implementation. The","Fragments":["append","obvious"]},{"Key":"The append","Fragments":["implementation"]},{"Key":"append implementation","Fragments":["got"]},{"Key":"implementation got","Fragments":["driven"]},{"Key":"got driven","Fragments":["beyond"]},{"Key":"driven beyond","Fragments":["the"]},{"Key":"beyond the","Fragments":["spec"]},{"Key":"spec because","Fragments":["of"]},{"Key":"of concat","Fragments":["and","and","using","pass","with"]},{"Key":"concat and","Fragments":["also","reverse","in","append"]},{"Key":"also me","Fragments":["trying"]},{"Key":"me trying","Fragments":["to"]},{"Key":" @jamar,","Fragments":["@jamar,"]},{"Key":"guys. I've","Fragments":["submitted"]},{"Key":"another iteration.","Fragments":["I've"]},{"Key":"iteration. I've","Fragments":["also"]},{"Key":"I'm checking","Fragments":["the"]},{"Key":"the inequality","Fragments":["of"]},{"Key":"inequality of","Fragments":["`base`"]},{"Key":"of `base`","Fragments":["and"]},{"Key":"`base` and","Fragments":["the"]},{"Key":"the candidate","Fragments":["so"]},{"Key":"candidate so","Fragments":["that"]},{"Key":"that fails","Fragments":["it"]},{"Key":"fails it","Fragments":["won't"]},{"Key":"won't bother","Fragments":["with"]},{"Key":"rest on","Fragments":["the"]},{"Key":"reverse inside","Fragments":["append."]},{"Key":"without append","Fragments":["we"]},{"Key":"append we","Fragments":["have"]},{"Key":"reverse only","Fragments":["one"]},{"Key":"time at","Fragments":["the"]},{"Key":"You've avoided","Fragments":["the","all","all"]},{"Key":"avoided the","Fragments":["typical","non-tail-recursive","tail"]},{"Key":"typical pitfall","Fragments":["of"]},{"Key":"pitfall of","Fragments":["non-tail-recursive"]},{"Key":"of non-tail-recursive","Fragments":["definitions."]},{"Key":" Typically","Fragments":["the","helper","predicate"]},{"Key":"Typically the","Fragments":["helper"]},{"Key":"is private","Fragments":["`defp`"]},{"Key":"private `defp`","Fragments":["and","and"]},{"Key":"and called","Fragments":["`do_foo`","`do_count`"]},{"Key":"called `do_foo`","Fragments":["for"]},{"Key":"`do_foo` for","Fragments":["a","a"]},{"Key":"def reverse(l),","Fragments":["do:"]},{"Key":"reverse(l), do:","Fragments":["do_reverse(l,"]},{"Key":"do: do_reverse(l,","Fragments":["[])"]},{"Key":"defp do_reverse([],","Fragments":["acc),"]},{"Key":"do_reverse([], acc),","Fragments":["do:"]},{"Key":"defp do_reverse([h|t],","Fragments":["acc),"]},{"Key":"do_reverse([h|t], acc),","Fragments":["do:"]},{"Key":"do: do_reverse(t,","Fragments":["[h|acc])"]},{"Key":"Your `append`","Fragments":["is","looks"]},{"Key":"`append` is","Fragments":["a","overkill!","just"]},{"Key":"bit weird,","Fragments":["probably"]},{"Key":"weird, probably","Fragments":["because"]},{"Key":"because you're","Fragments":["mixing"]},{"Key":"you're mixing","Fragments":["it"]},{"Key":"mixing it","Fragments":["with"]},{"Key":"with `concat`.","Fragments":["It's"]},{"Key":"`concat`. It's","Fragments":["perfectly"]},{"Key":"perfectly possible","Fragments":["to"]},{"Key":"`append` to","Fragments":["just"]},{"Key":"just append","Fragments":["two"]},{"Key":"append two","Fragments":["lists"]},{"Key":"write `concat`","Fragments":["in"]},{"Key":"`concat` in","Fragments":["terms","terms","terms"]},{"Key":"of `append`","Fragments":["without"]},{"Key":"`append` without","Fragments":["`append`"]},{"Key":"without `append`","Fragments":["having"]},{"Key":"`append` having","Fragments":["any"]},{"Key":"having any","Fragments":["special"]},{"Key":"special logic","Fragments":["to"]},{"Key":"support that.","Fragments":["Hint:"]},{"Key":"that. Hint:","Fragments":["it"]},{"Key":"Hint: it","Fragments":["actually"]},{"Key":"actually uses","Fragments":["three"]},{"Key":"uses three","Fragments":["functions"]},{"Key":"functions you've","Fragments":["already"]},{"Key":"The if-statement","Fragments":["is"]},{"Key":"if-statement is","Fragments":["how"]},{"Key":"do `filter`,","Fragments":["because"]},{"Key":"`filter`, because","Fragments":["of"]},{"Key":"of constraints","Fragments":["in"]},{"Key":"constraints in","Fragments":["what's"]},{"Key":"in what's","Fragments":["allowed"]},{"Key":"what's allowed","Fragments":["in"]},{"Key":"good. There","Fragments":["are","are","are"]},{"Key":"few minor","Fragments":["things","things:"]},{"Key":"You're a","Fragments":["bit"]},{"Key":"inconsistent with","Fragments":["the","the"]},{"Key":"helper functions,","Fragments":["`defp","allowing"]},{"Key":"functions, `defp","Fragments":["reverse`"]},{"Key":"`defp reverse`","Fragments":["vs"]},{"Key":"reverse` vs","Fragments":["`defp"]},{"Key":"vs `defp","Fragments":["do_append`."]},{"Key":"`defp do_append`.","Fragments":["The"]},{"Key":"do_append`. The","Fragments":["`do_foo`"]},{"Key":"The `do_foo`","Fragments":["form"]},{"Key":"`do_foo` form","Fragments":["is"]},{"Key":"`reduce` doesn't","Fragments":["actually"]},{"Key":"helper function,","Fragments":["you"]},{"Key":"don't introduce","Fragments":["an"]},{"Key":"introduce an","Fragments":["extra"]},{"Key":"extra accumulator","Fragments":["parameter"]},{"Key":"accumulator parameter","Fragments":["there."]},{"Key":"noticed I","Fragments":["got"]},{"Key":"function mixed","Fragments":["up"]},{"Key":"mixed up","Fragments":["in"]},{"Key":"exercise. `Enum.reduce`","Fragments":["gets"]},{"Key":"`Enum.reduce` gets","Fragments":["a"]},{"Key":"gets a","Fragments":["function"]},{"Key":"function `(element,","Fragments":["acc)"]},{"Key":"`(element, acc)","Fragments":["-\u003e"]},{"Key":"acc) -\u003e","Fragments":["acc`,","acc"]},{"Key":"-\u003e acc`,","Fragments":["this"]},{"Key":"acc`, this","Fragments":["one"]},{"Key":"one takes","Fragments":["a"]},{"Key":"function `(acc,","Fragments":["element)"]},{"Key":"`(acc, element)","Fragments":["-\u003e"]},{"Key":"element) -\u003e","Fragments":["acc`."]},{"Key":"problem in","Fragments":["your","getting","two"]},{"Key":"code though,","Fragments":["just"]},{"Key":"real reduce","Fragments":["works"]},{"Key":"reduce works","Fragments":["slightly"]},{"Key":"works slightly","Fragments":["differently."]},{"Key":" Both","Fragments":["are","of","those"]},{"Key":"Both are","Fragments":["valid"]},{"Key":"valid points,","Fragments":["thanks."]},{"Key":"Not super","Fragments":["happy"]},{"Key":"with `concat`,","Fragments":["and"]},{"Key":"`concat`, and","Fragments":["it"]},{"Key":"seems using","Fragments":["a"]},{"Key":"a using","Fragments":["the"]},{"Key":"the tail-call","Fragments":["form"]},{"Key":"tail-call form","Fragments":["requires"]},{"Key":"form requires","Fragments":["use"]},{"Key":"requires use","Fragments":["of"]},{"Key":"of `reverse`.","Fragments":["Is"]},{"Key":"`reverse`. Is","Fragments":["there"]},{"Key":"sure, to","Fragments":["me"]},{"Key":"last line","Fragments":["of","in","`name_of_recursive_function(args...)`."]},{"Key":"every recursive","Fragments":["function"]},{"Key":"to itself","Fragments":["so"]},{"Key":"itself so","Fragments":["I"]},{"Key":"think so,","Fragments":["but"]},{"Key":"there could","Fragments":["be"]},{"Key":"be some","Fragments":["finer","extraction","extra"]},{"Key":"some finer","Fragments":["details"]},{"Key":"finer details","Fragments":["I'm"]},{"Key":"details I'm","Fragments":["missing."]},{"Key":"The functions","Fragments":["benchmark"]},{"Key":"functions benchmark","Fragments":["alright"]},{"Key":"benchmark alright","Fragments":["speedwise,"]},{"Key":"alright speedwise,","Fragments":["not"]},{"Key":"speedwise, not","Fragments":["sure"]},{"Key":"about memory","Fragments":["though."]},{"Key":"might think","Fragments":["the"]},{"Key":"line in","Fragments":["a"]},{"Key":"to itself.","Fragments":["However"]},{"Key":"itself. However","Fragments":["there's"]},{"Key":"However there's","Fragments":["a"]},{"Key":"expression and","Fragments":["a","are"]},{"Key":"a line.","Fragments":["A"]},{"Key":"line. A","Fragments":["line"]},{"Key":"A line","Fragments":["can"]},{"Key":"line can","Fragments":["contain"]},{"Key":"can contain","Fragments":["multiple"]},{"Key":"contain multiple","Fragments":["expressions"]},{"Key":"expressions (or","Fragments":["just"]},{"Key":"just one,","Fragments":["or"]},{"Key":"one, or","Fragments":["only"]},{"Key":"or only","Fragments":["part"]},{"Key":"only part","Fragments":["of"]},{"Key":"Take for","Fragments":["example"]},{"Key":"example `1","Fragments":["+"]},{"Key":"`1 +","Fragments":["count(tail)`."]},{"Key":"+ count(tail)`.","Fragments":["I"]},{"Key":"count(tail)`. I","Fragments":["won't"]},{"Key":"won't blame","Fragments":["you"]},{"Key":"blame you","Fragments":["for"]},{"Key":"for thinking","Fragments":["that's"]},{"Key":"thinking that's","Fragments":["a"]},{"Key":"tail call.","Fragments":["However"]},{"Key":"call. However","Fragments":["rewriting"]},{"Key":"However rewriting","Fragments":["the"]},{"Key":"with assignments","Fragments":["(technically"]},{"Key":"assignments (technically","Fragments":["unification"]},{"Key":"(technically unification","Fragments":["or"]},{"Key":"unification or","Fragments":["something"]},{"Key":"but let's","Fragments":["call"]},{"Key":"let's call","Fragments":["it"]},{"Key":"it assignment)","Fragments":["makes"]},{"Key":"assignment) makes","Fragments":["clarifies"]},{"Key":"makes clarifies","Fragments":["what's"]},{"Key":"clarifies what's","Fragments":["happening:"]},{"Key":"def count([","Fragments":["_head"]},{"Key":"count([ _head","Fragments":["|"]},{"Key":"_head |","Fragments":["tail"]},{"Key":"tail ])","Fragments":["do"]},{"Key":" temp","Fragments":["="]},{"Key":"temp =","Fragments":["count(tail)"]},{"Key":"doesn't change","Fragments":["how"]},{"Key":"change how","Fragments":["the"]},{"Key":"function works","Fragments":["so"]},{"Key":"works so","Fragments":["it's"]},{"Key":"a safe","Fragments":["change"]},{"Key":"safe change","Fragments":["to"]},{"Key":"to make,","Fragments":["just"]},{"Key":"make, just","Fragments":["plain"]},{"Key":"just plain","Fragments":["old"]},{"Key":"plain old","Fragments":["refactoring."]},{"Key":"old refactoring.","Fragments":["It"]},{"Key":"refactoring. It","Fragments":["does"]},{"Key":"does however","Fragments":["show"]},{"Key":"however show","Fragments":["that"]},{"Key":"show that","Fragments":["the"]},{"Key":"expression is","Fragments":["actually","a"]},{"Key":"the addition,","Fragments":["not"]},{"Key":"addition, not","Fragments":["the"]},{"Key":"The call","Fragments":["has"]},{"Key":"call has","Fragments":["to"]},{"Key":"last expression.","Fragments":["So","A"]},{"Key":"expression. So","Fragments":["`def"]},{"Key":"So `def","Fragments":["foo(a),"]},{"Key":"`def foo(a),","Fragments":["do:","do:"]},{"Key":"foo(a), do:","Fragments":["foo(a","1"]},{"Key":"do: foo(a","Fragments":["+"]},{"Key":"foo(a +","Fragments":["1)`","1)`"]},{"Key":"1)` is","Fragments":["a","not."]},{"Key":"call while","Fragments":["`def"]},{"Key":"while `def","Fragments":["foo(a),"]},{"Key":"do: 1","Fragments":["+","+"]},{"Key":"+ foo(a","Fragments":["+"]},{"Key":" Non-tail-recursive","Fragments":["functions"]},{"Key":"Non-tail-recursive functions","Fragments":["often"]},{"Key":"functions often","Fragments":["do"]},{"Key":"often do","Fragments":["well"]},{"Key":"do well","Fragments":["speedwise,"]},{"Key":"well speedwise,","Fragments":["it's"]},{"Key":"speedwise, it's","Fragments":["the"]},{"Key":"argument that's","Fragments":["used"]},{"Key":"that's used","Fragments":["to"]},{"Key":"to justify","Fragments":["them"]},{"Key":"justify them","Fragments":["in"]},{"Key":"library of","Fragments":["OCaml."]},{"Key":"of OCaml.","Fragments":["Memory"]},{"Key":"OCaml. Memory","Fragments":["wise"]},{"Key":"Memory wise","Fragments":["however"]},{"Key":"wise however","Fragments":["they"]},{"Key":"however they","Fragments":["tend"]},{"Key":"they tend","Fragments":["to"]},{"Key":"be bad.","Fragments":["In"]},{"Key":"bad. In","Fragments":["Elixir/Erlang"]},{"Key":"In Elixir/Erlang","Fragments":["that","it's"]},{"Key":"Elixir/Erlang that","Fragments":["means"]},{"Key":"means they","Fragments":["consume"]},{"Key":"they consume","Fragments":["more"]},{"Key":"consume more","Fragments":["memory"]},{"Key":"memory than","Fragments":["they"]},{"Key":"need to.","Fragments":["In","What"]},{"Key":"to. In","Fragments":["a"]},{"Key":"like OCaml","Fragments":["it","you"]},{"Key":"OCaml it","Fragments":["means"]},{"Key":"that given","Fragments":["a"]},{"Key":"large enough","Fragments":["list"]},{"Key":"list the","Fragments":["program"]},{"Key":"program will","Fragments":["crash"]},{"Key":"will crash","Fragments":["with"]},{"Key":"crash with","Fragments":["a"]},{"Key":"very unhelpful","Fragments":["error"]},{"Key":"unhelpful error","Fragments":["message"]},{"Key":"message (\"Stack_overflow\").","Fragments":["Even"]},{"Key":"(\"Stack_overflow\"). Even","Fragments":["in"]},{"Key":"it's helpful","Fragments":["to"]},{"Key":"write tail","Fragments":["recursive"]},{"Key":"functions because","Fragments":["if"]},{"Key":"function eats","Fragments":["too"]},{"Key":"eats too","Fragments":["much"]},{"Key":"much memory","Fragments":["it","for"]},{"Key":"memory it","Fragments":["will"]},{"Key":"will cause","Fragments":["the","a","the","it"]},{"Key":"cause the","Fragments":["system","co-operative"]},{"Key":"system to","Fragments":["go"]},{"Key":"go paging","Fragments":["(i.e."]},{"Key":"paging (i.e.","Fragments":["swapping)"]},{"Key":"(i.e. swapping)","Fragments":["making"]},{"Key":"swapping) making","Fragments":["the"]},{"Key":"the computer","Fragments":["very"]},{"Key":"computer very","Fragments":["very"]},{"Key":"very very","Fragments":["slow."]},{"Key":" Many","Fragments":["tail-call"]},{"Key":"Many tail-call","Fragments":["things"]},{"Key":"tail-call things","Fragments":["require"]},{"Key":"things require","Fragments":["the"]},{"Key":"require the","Fragments":["use","list"]},{"Key":"of `reverse`,","Fragments":["including"]},{"Key":"`reverse`, including","Fragments":["`concat`."]},{"Key":"including `concat`.","Fragments":["There's"]},{"Key":"`concat`. There's","Fragments":["no"]},{"Key":" Hint:","Fragments":["You"]},{"Key":"Hint: You","Fragments":["can"]},{"Key":"can implement","Fragments":["`concat`"]},{"Key":"implement `concat`","Fragments":["fairly","in"]},{"Key":"`concat` fairly","Fragments":["simply"]},{"Key":"fairly simply","Fragments":["in"]},{"Key":"simply in","Fragments":["terms"]},{"Key":"of `append`,","Fragments":["`reverse`"]},{"Key":"`append`, `reverse`","Fragments":["and"]},{"Key":"`reverse` and","Fragments":["one"]},{"Key":"one other","Fragments":["function.","thing"]},{"Key":"Regarding extracting","Fragments":["conditions"]},{"Key":"separate methods:","Fragments":["it's"]},{"Key":"methods: it's","Fragments":["really"]},{"Key":"style thing.","Fragments":["Some"]},{"Key":"thing. Some","Fragments":["people"]},{"Key":"it, some","Fragments":["don't."]},{"Key":"some don't.","Fragments":["It's"]},{"Key":"don't. It's","Fragments":["OK"]},{"Key":"It's OK","Fragments":["if"]},{"Key":"OK if","Fragments":["you"]},{"Key":"unless it","Fragments":["makes"]},{"Key":"code significantly","Fragments":["easier"]},{"Key":"significantly easier","Fragments":["to"]},{"Key":"The thing","Fragments":["with","here"]},{"Key":"thing with","Fragments":["extracting"]},{"Key":"with extracting","Fragments":["relatively"]},{"Key":"extracting relatively","Fragments":["simple"]},{"Key":"relatively simple","Fragments":["expressions"]},{"Key":"expressions is","Fragments":["that","important","fine,"]},{"Key":"readability by","Fragments":["naming","making"]},{"Key":"by naming","Fragments":["things"]},{"Key":"naming things","Fragments":["but"]},{"Key":"you lose","Fragments":["it"]},{"Key":"lose it","Fragments":["by"]},{"Key":"by spreading","Fragments":["the"]},{"Key":"spreading the","Fragments":["logic"]},{"Key":"a wider","Fragments":["area"]},{"Key":"wider area","Fragments":["of"]},{"Key":"text. So","Fragments":["there's"]},{"Key":"tradeoff and","Fragments":["different"]},{"Key":"and different","Fragments":["people"]},{"Key":"different people","Fragments":["attach"]},{"Key":"people attach","Fragments":["different"]},{"Key":"attach different","Fragments":["weight"]},{"Key":"different weight","Fragments":["to"]},{"Key":"weight to","Fragments":["the"]},{"Key":" @rodger,","Fragments":["about"]},{"Key":"@rodger, about","Fragments":["the"]},{"Key":"in `filter`,","Fragments":["would"]},{"Key":"`filter`, would","Fragments":["this"]},{"Key":"def filter([head","Fragments":["|"]},{"Key":"filter([head |","Fragments":["tail],"]},{"Key":"| tail],","Fragments":["f)"]},{"Key":"tail], f)","Fragments":["do"]},{"Key":" f.(head)","Fragments":["-\u003e"]},{"Key":"f.(head) -\u003e","Fragments":["["]},{"Key":"-\u003e [","Fragments":["head"]},{"Key":"[ head","Fragments":["|","|"]},{"Key":"| filter(tail,","Fragments":["f)]","f,"]},{"Key":"-\u003e filter(tail,","Fragments":["f)"]},{"Key":"still in","Fragments":["the"]},{"Key":"process of","Fragments":["grokking"]},{"Key":"of grokking","Fragments":["a"]},{"Key":"grokking a","Fragments":["lot"]},{"Key":"of things,","Fragments":["so","especially"]},{"Key":"things, so","Fragments":["can"]},{"Key":"so can","Fragments":["you"]},{"Key":"better idea","Fragments":["of"]},{"Key":"I avoided","Fragments":["the"]},{"Key":"the non-tail-recursive","Fragments":["pitfall?"]},{"Key":"non-tail-recursive pitfall?","Fragments":["Is"]},{"Key":"pitfall? Is","Fragments":["it"]},{"Key":"added function","Fragments":["defs"]},{"Key":"function defs","Fragments":["for"]},{"Key":"defs for","Fragments":["empty"]},{"Key":"empty lists","Fragments":["instead"]},{"Key":"lists instead","Fragments":["of","of"]},{"Key":"pattern of","Fragments":["a"]},{"Key":"function `x`","Fragments":["calling"]},{"Key":"`x` calling","Fragments":["another"]},{"Key":"calling another","Fragments":["function"]},{"Key":"function `do_x`,","Fragments":["probably"]},{"Key":"`do_x`, probably","Fragments":["because"]},{"Key":"of enterprise","Fragments":["Java"]},{"Key":"enterprise Java","Fragments":["doing"]},{"Key":"Java doing","Fragments":["that."]},{"Key":"get into","Fragments":["a","future"]},{"Key":"full discussion","Fragments":["about"]},{"Key":"discussion about","Fragments":["why"]},{"Key":"it's bad,","Fragments":["but"]},{"Key":"bad, but","Fragments":["don't"]},{"Key":"be said","Fragments":["that"]},{"Key":"can't follow","Fragments":["conventions"]},{"Key":"follow conventions","Fragments":["---"]},{"Key":"conventions ---","Fragments":["I'll"]},{"Key":"--- I'll","Fragments":["fix"]},{"Key":"a go","Fragments":["at"]},{"Key":"at cleaning","Fragments":["up"]},{"Key":"You avoided","Fragments":["the"]},{"Key":"recursion by","Fragments":["using","using"]},{"Key":"an accumulator.","Fragments":["See"]},{"Key":"accumulator. See","Fragments":["[this"]},{"Key":"See [this","Fragments":["submission](http://exercism.io/submissions/24eefe8414acff22fea99fcf)"]},{"Key":"[this submission](http://exercism.io/submissions/24eefe8414acff22fea99fcf)","Fragments":["for"]},{"Key":"submission](http://exercism.io/submissions/24eefe8414acff22fea99fcf) for","Fragments":["some"]},{"Key":"The if","Fragments":["statement"]},{"Key":"is absolutely","Fragments":["better"]},{"Key":"absolutely better","Fragments":["than"]},{"Key":"using cond.","Fragments":["There"]},{"Key":"cond. There","Fragments":["is"]},{"Key":"using if","Fragments":["here"]},{"Key":"if here","Fragments":["while"]},{"Key":"here while","Fragments":["cond"]},{"Key":"while cond","Fragments":["is"]},{"Key":"less obvious","Fragments":["and","but"]},{"Key":"and feels","Fragments":["consulted.","readable."]},{"Key":"Ok, this","Fragments":["seems","was"]},{"Key":"tests even","Fragments":["though"]},{"Key":"rules for","Fragments":["something"]},{"Key":"like \"This","Fragments":["Isn't"]},{"Key":"\"This Isn't","Fragments":["Shouting\""]},{"Key":"Isn't Shouting\"","Fragments":["(which"]},{"Key":"Shouting\" (which","Fragments":["shouldn't"]},{"Key":"(which shouldn't","Fragments":["be"]},{"Key":"considered shouting).","Fragments":["I've"]},{"Key":"shouting). I've","Fragments":["amended"]},{"Key":"I've amended","Fragments":["the"]},{"Key":"amended the","Fragments":["tests"]},{"Key":" Excellent,","Fragments":["that's"]},{"Key":"Excellent, that's","Fragments":["exactly"]},{"Key":"of subtle","Fragments":["issue"]},{"Key":"subtle issue","Fragments":["I"]},{"Key":"issue I","Fragments":["was"]},{"Key":"like map.","Fragments":["Based"]},{"Key":"map. Based","Fragments":["on"]},{"Key":"this info,","Fragments":["reduce"]},{"Key":"info, reduce","Fragments":["and"]},{"Key":"reduce and","Fragments":["concat"]},{"Key":"and concat","Fragments":["look","are"]},{"Key":"concat look","Fragments":["tail-recursive,"]},{"Key":"look tail-recursive,","Fragments":["but"]},{"Key":"tail-recursive, but","Fragments":["map,"]},{"Key":"but map,","Fragments":["filter"]},{"Key":"and append","Fragments":["are","functions."]},{"Key":"append are","Fragments":["not?"]},{"Key":"I tested","Fragments":["this","one"]},{"Key":"tested this","Fragments":["code"]},{"Key":"code it","Fragments":["seemed"]},{"Key":"to fail","Fragments":["this"]},{"Key":"fail this","Fragments":["test:"]},{"Key":"test \"reduce","Fragments":["with"]},{"Key":"\"reduce with","Fragments":["non-commutative"]},{"Key":"with non-commutative","Fragments":["function\""]},{"Key":"non-commutative function\"","Fragments":["do"]},{"Key":"assert 0","Fragments":["=="]},{"Key":"0 ==","Fragments":["L.reduce([1,2,3,4],"]},{"Key":"== L.reduce([1,2,3,4],","Fragments":["10,"]},{"Key":"L.reduce([1,2,3,4], 10,","Fragments":["fn"]},{"Key":"10, fn","Fragments":["x,"]},{"Key":"-\u003e acc","Fragments":["-","+","\u003c\u003c\u003c"]},{"Key":"acc -","Fragments":["x"]},{"Key":"- x","Fragments":["end)"]},{"Key":"line 36","Fragments":["the"]},{"Key":"36 the","Fragments":["reduce"]},{"Key":"provided function","Fragments":["with"]},{"Key":"with parameters","Fragments":["(acc,"]},{"Key":"parameters (acc,","Fragments":["h)"]},{"Key":"(acc, h)","Fragments":["but"]},{"Key":"h) but","Fragments":["the"]},{"Key":"function appears","Fragments":["to"]},{"Key":"to expect","Fragments":["(h,"]},{"Key":"expect (h,","Fragments":["acc)"]},{"Key":"your map","Fragments":["and"]},{"Key":"filter are","Fragments":["not","not"]},{"Key":"tail recursive,","Fragments":["amongst"]},{"Key":"recursive, amongst","Fragments":["other"]},{"Key":"amongst other","Fragments":["issues,"]},{"Key":"other issues,","Fragments":["more"]},{"Key":"issues, more","Fragments":["on"]},{"Key":"on those","Fragments":["another","choices."]},{"Key":"those another","Fragments":["time."]},{"Key":" Yea,","Fragments":["I"]},{"Key":"Yea, I","Fragments":["think"]},{"Key":"gotten it","Fragments":["right"]},{"Key":"on accident.","Fragments":["I'll"]},{"Key":"accident. I'll","Fragments":["think"]},{"Key":"that more","Fragments":["and","quickly."]},{"Key":"also reading","Fragments":["through"]},{"Key":"through this:","Fragments":["http://www.erlang.org/doc/efficiency_guide/myths.html#id61501."]},{"Key":"this: http://www.erlang.org/doc/efficiency_guide/myths.html#id61501.","Fragments":["It"]},{"Key":"http://www.erlang.org/doc/efficiency_guide/myths.html#id61501. It","Fragments":["seems"]},{"Key":"it's saying","Fragments":["tail-recursion"]},{"Key":"saying tail-recursion","Fragments":["is"]},{"Key":"tail-recursion is","Fragments":["still"]},{"Key":" Over-engineered","Fragments":["`concat`"]},{"Key":"Over-engineered `concat`","Fragments":["on"]},{"Key":"`concat` on","Fragments":["the"]},{"Key":"last attempt","Fragments":["as"]},{"Key":"attempt as","Fragments":["a"]},{"Key":"of mistaking","Fragments":["it"]},{"Key":"mistaking it","Fragments":["for"]},{"Key":" @janis","Fragments":["thanks"]},{"Key":"@janis thanks","Fragments":["so"]},{"Key":"your guidance","Fragments":["on"]},{"Key":"guidance on","Fragments":["this"]},{"Key":"one. It’s","Fragments":["a"]},{"Key":"It’s a","Fragments":["great"]},{"Key":" Tail","Fragments":["recursive"]},{"Key":"Tail recursive","Fragments":["functions"]},{"Key":"necessarily faster,","Fragments":["they"]},{"Key":"faster, they","Fragments":["just"]},{"Key":"they just","Fragments":["have","add"]},{"Key":"better memory","Fragments":["usage."]},{"Key":"memory usage.","Fragments":["In"]},{"Key":"usage. In","Fragments":["Elixir/Erlang"]},{"Key":"Elixir/Erlang it's","Fragments":["pretty"]},{"Key":"pretty hard","Fragments":["to","to"]},{"Key":"get problems","Fragments":["due"]},{"Key":"problems due","Fragments":["to"]},{"Key":"stack overflows","Fragments":["(I"]},{"Key":"overflows (I","Fragments":["tried),"]},{"Key":"(I tried),","Fragments":["but"]},{"Key":"tried), but","Fragments":["in"]},{"Key":"OCaml you","Fragments":["won't"]},{"Key":"pass some","Fragments":["of"]},{"Key":"exercise without","Fragments":["a"]},{"Key":"effectively the","Fragments":["same"]},{"Key":"last iteration.","Fragments":["I","On"]},{"Key":"just grabbed","Fragments":["the"]},{"Key":"grabbed the","Fragments":["latest"]},{"Key":"tests with","Fragments":["the"]},{"Key":"updated order","Fragments":["of"]},{"Key":"callback params","Fragments":["and"]},{"Key":"params and","Fragments":["changed"]},{"Key":"changed my","Fragments":["implementation","mind"]},{"Key":"Thanks. Good","Fragments":["to"]},{"Key":"hear the","Fragments":["exercise"]},{"Key":"exercise works","Fragments":["well."]},{"Key":"works well.","Fragments":[":)"]},{"Key":"Nice. Looks","Fragments":["good."]},{"Key":"Your `has_letters?`","Fragments":["won't"]},{"Key":"`has_letters?` won't","Fragments":["work"]},{"Key":"won't work","Fragments":["for","with"]},{"Key":"for words","Fragments":["in","you"]},{"Key":"in non-Latin","Fragments":["languages"]},{"Key":"non-Latin languages","Fragments":["like"]},{"Key":"like Russian.","Fragments":["You"]},{"Key":"Russian. You","Fragments":["can"]},{"Key":"use `/\\p{L}/`","Fragments":["to","to"]},{"Key":"`/\\p{L}/` to","Fragments":["match","check"]},{"Key":"match any","Fragments":["letter","more."]},{"Key":"letter (any","Fragments":["character,"]},{"Key":"(any character,","Fragments":["codepoint"]},{"Key":"character, codepoint","Fragments":["technically,"]},{"Key":"codepoint technically,","Fragments":["with"]},{"Key":"technically, with","Fragments":["Unicode"]},{"Key":"with Unicode","Fragments":["general"]},{"Key":"category L","Fragments":["(letter))."]},{"Key":"just `true`","Fragments":["as"]},{"Key":"condition for","Fragments":["the"]},{"Key":"last clause","Fragments":["in","I","to"]},{"Key":"in `cond`.","Fragments":["There's"]},{"Key":"`cond`. There's","Fragments":["no"]},{"Key":"an `anything_else`","Fragments":["function."]},{"Key":"doesn't satisfy","Fragments":["the"]},{"Key":"the specs","Fragments":["using","have"]},{"Key":"specs using","Fragments":["huge"]},{"Key":"using huge","Fragments":["lists."]},{"Key":"huge lists.","Fragments":["I'm","Running"]},{"Key":"lists. I'm","Fragments":["still"]},{"Key":"still using,","Fragments":["some"]},{"Key":"using, some","Fragments":["functions"]},{"Key":"from `Enum`,","Fragments":["I"]},{"Key":"`Enum`, I","Fragments":["got"]},{"Key":"it, to","Fragments":["get"]},{"Key":"get tail","Fragments":["recursive"]},{"Key":"recursive optimization","Fragments":["I"]},{"Key":"optimization I","Fragments":["need"]},{"Key":"itself be","Fragments":["the"]},{"Key":"last operation","Fragments":["in"]},{"Key":"operation in","Fragments":["the"]},{"Key":"function. I've","Fragments":["done"]},{"Key":"done that","Fragments":["now"]},{"Key":"these except","Fragments":["concat,"]},{"Key":"except concat,","Fragments":["which"]},{"Key":"concat, which","Fragments":["I"]},{"Key":"using reverse","Fragments":["a"]},{"Key":"reverse a","Fragments":["few","list,"]},{"Key":"times. That","Fragments":["feels"]},{"Key":"That feels","Fragments":["weird"]},{"Key":"feels weird","Fragments":["to"]},{"Key":"more more","Fragments":["complex"]},{"Key":"be. This","Fragments":["is"]},{"Key":"my attempt","Fragments":["to"]},{"Key":"attempt to","Fragments":["reduce"]},{"Key":"reduce duplication","Fragments":["as"]},{"Key":"of while","Fragments":["playing"]},{"Key":"while playing","Fragments":["around"]},{"Key":"around more","Fragments":["with"]},{"Key":"matching. Looking","Fragments":["forward"]},{"Key":"Looking forward","Fragments":["to","to","to"]},{"Key":" Pattern","Fragments":["matching"]},{"Key":"matching (case)","Fragments":["is"]},{"Key":"(case) is","Fragments":["better"]},{"Key":"than if","Fragments":["or"]},{"Key":"if or","Fragments":["cond."]},{"Key":"or cond.","Fragments":["It's"]},{"Key":"cond. It's","Fragments":["more"]},{"Key":"powerful and","Fragments":["often"]},{"Key":"often results","Fragments":["in"]},{"Key":"faster programs","Fragments":["since"]},{"Key":"programs since","Fragments":["the"]},{"Key":"compiler and","Fragments":["VM","standard"]},{"Key":"and VM","Fragments":["are"]},{"Key":"VM are","Fragments":["optimized"]},{"Key":"are optimized","Fragments":["for"]},{"Key":"optimized for","Fragments":["it."]},{"Key":"may assume","Fragments":["that"]},{"Key":"only valid","Fragments":["input"]},{"Key":"valid input","Fragments":["is"]},{"Key":"the functions,","Fragments":["e.g."]},{"Key":"functions, e.g.","Fragments":["`reduce`"]},{"Key":"e.g. `reduce`","Fragments":["only"]},{"Key":"`reduce` only","Fragments":["gets"]},{"Key":"passed a","Fragments":["list."]},{"Key":"list. With","Fragments":["pattern"]},{"Key":"With pattern","Fragments":["matching"]},{"Key":"a correct","Fragments":["exception"]},{"Key":"correct exception","Fragments":["will"]},{"Key":"exception will","Fragments":["be"]},{"Key":"be thrown","Fragments":["if","for"]},{"Key":"thrown if","Fragments":["this"]},{"Key":"the case,","Fragments":["which"]},{"Key":" @idell,","Fragments":["sadly,"]},{"Key":"@idell, sadly,","Fragments":["right"]},{"Key":"sadly, right","Fragments":["now"]},{"Key":"now my","Fragments":["implementation"]},{"Key":"implementation relies","Fragments":["on"]},{"Key":"on passing","Fragments":["`nil`"]},{"Key":"passing `nil`","Fragments":["to"]},{"Key":"to `reduce`,","Fragments":["because"]},{"Key":"`reduce`, because","Fragments":["of"]},{"Key":"of `Enum.slice`","Fragments":["(`Enum.slice([],"]},{"Key":"`Enum.slice` (`Enum.slice([],","Fragments":["1..-1)"]},{"Key":"(`Enum.slice([], 1..-1)","Fragments":["#=\u003e"]},{"Key":"1..-1) #=\u003e","Fragments":["nil`)."]},{"Key":"do need","Fragments":["reverse,"]},{"Key":"need reverse,","Fragments":["though"]},{"Key":"reverse, though","Fragments":["for"]},{"Key":"though for","Fragments":["this"]},{"Key":"exercise never","Fragments":["twice"]},{"Key":"never twice","Fragments":["in"]},{"Key":"where pattern","Fragments":["matching","matching"]},{"Key":"matching (or","Fragments":["`hd`"]},{"Key":"(or `hd`","Fragments":["and"]},{"Key":"`hd` and","Fragments":["`tl`,"]},{"Key":"and `tl`,","Fragments":["but"]},{"Key":"`tl`, but","Fragments":["much"]},{"Key":"but much","Fragments":["preferably"]},{"Key":"much preferably","Fragments":["pattern"]},{"Key":"preferably pattern","Fragments":["matching)"]},{"Key":"pattern matching)","Fragments":["comes"]},{"Key":"matching) comes","Fragments":["in."]},{"Key":"-\u003e #","Fragments":["what","h"]},{"Key":"# what","Fragments":["you"]},{"Key":"do when","Fragments":["the"]},{"Key":" [h|t]","Fragments":["-\u003e"]},{"Key":"[h|t] -\u003e","Fragments":["#"]},{"Key":"# h","Fragments":["="]},{"Key":"h =","Fragments":["first"]},{"Key":"= first","Fragments":["element"]},{"Key":"first element","Fragments":["(head),","had"]},{"Key":"element (head),","Fragments":["t"]},{"Key":"(head), t","Fragments":["="]},{"Key":"t =","Fragments":["rest"]},{"Key":"= rest","Fragments":["of"]},{"Key":"Oh, correct,","Fragments":["I"]},{"Key":"correct, I","Fragments":["understan"]},{"Key":"I understan","Fragments":["now."]},{"Key":"understan now.","Fragments":["That"]},{"Key":"now. That","Fragments":["shoves"]},{"Key":"That shoves","Fragments":["away"]},{"Key":"shoves away","Fragments":["the"]},{"Key":"for slice","Fragments":["and"]},{"Key":"slice and","Fragments":["at"]},{"Key":"and at","Fragments":["for"]},{"Key":"at for","Fragments":["now."]},{"Key":"for now.","Fragments":["Thanks!"]},{"Key":"the basics.","Fragments":["Since"]},{"Key":"basics. Since","Fragments":["all"]},{"Key":"Since all","Fragments":["of"]},{"Key":"the inputs","Fragments":["were","first.","to"]},{"Key":"inputs were","Fragments":["string"]},{"Key":"were string","Fragments":["related,"]},{"Key":"string related,","Fragments":["and"]},{"Key":"related, and","Fragments":["the"]},{"Key":"output decision","Fragments":["was"]},{"Key":"decision was","Fragments":["based"]},{"Key":"was based","Fragments":["on"]},{"Key":"on string","Fragments":["contents"]},{"Key":"string contents","Fragments":["I"]},{"Key":"contents I","Fragments":["went"]},{"Key":"string matching.","Fragments":["I"]},{"Key":"matching. I","Fragments":["don't","think"]},{"Key":"don't particularly","Fragments":["like"]},{"Key":"regex match","Fragments":["on"]},{"Key":"12 as","Fragments":["I"]},{"Key":"it falls","Fragments":["into"]},{"Key":"falls into","Fragments":["a"]},{"Key":"a 'general","Fragments":["case'"]},{"Key":"'general case'","Fragments":["solution."]},{"Key":"Ugh, I","Fragments":["don't"]},{"Key":"exercise, it's","Fragments":["rather"]},{"Key":"it's rather","Fragments":["hard"]},{"Key":"rather hard","Fragments":["to"]},{"Key":"logic though","Fragments":["all"]},{"Key":"though all","Fragments":["the"]},{"Key":"wonder a","Fragments":["bit"]},{"Key":"whether `count`","Fragments":["couldn't"]},{"Key":"`count` couldn't","Fragments":["be"]},{"Key":"couldn't be","Fragments":["simplified."]},{"Key":"be simplified.","Fragments":["You"]},{"Key":"simplified. You","Fragments":["compute"]},{"Key":"You compute","Fragments":["`last`"]},{"Key":"compute `last`","Fragments":["all"]},{"Key":"`last` all","Fragments":["the"]},{"Key":"time but","Fragments":["only"]},{"Key":"it if","Fragments":["`joined`"]},{"Key":"if `joined`","Fragments":["is"]},{"Key":"`joined` is","Fragments":["passed."]},{"Key":"using `String.replace`","Fragments":["to"]},{"Key":"`String.replace` to","Fragments":["check"]},{"Key":"for characters","Fragments":["you"]},{"Key":"also check","Fragments":["for"]},{"Key":"for whether","Fragments":["a"]},{"Key":"sentence contains","Fragments":["characters"]},{"Key":"contains characters","Fragments":["you"]},{"Key":"do want.","Fragments":["You"]},{"Key":"want. You","Fragments":["can"]},{"Key":"letters (Unicode","Fragments":["general"]},{"Key":"(Unicode general","Fragments":["category"]},{"Key":"You've correctly","Fragments":["applied"]},{"Key":"correctly applied","Fragments":["tail"]},{"Key":"applied tail","Fragments":["recursion.","recursion"]},{"Key":" `func","Fragments":["="]},{"Key":"`func =","Fragments":["\u0026(\u00261","fun","\u0026[\u00261|\u00262]`"]},{"Key":"= \u0026(\u00261","Fragments":["-\u00261"]},{"Key":"\u0026(\u00261 -\u00261","Fragments":["+"]},{"Key":"-\u00261 +","Fragments":["\u00262"]},{"Key":"+ \u00262","Fragments":["+"]},{"Key":"\u00262 +","Fragments":["1)`."]},{"Key":"1)`. It's","Fragments":["probably"]},{"Key":"use `func","Fragments":["="]},{"Key":"fun _,","Fragments":["acc"]},{"Key":"The `\u00261","Fragments":["-"]},{"Key":"`\u00261 -","Fragments":["\u00261`","\u00261`."]},{"Key":"- \u00261`","Fragments":["is"]},{"Key":"\u00261` is","Fragments":["rather"]},{"Key":"rather weird,","Fragments":["I"]},{"Key":"weird, I","Fragments":["understand"]},{"Key":"two clause","Fragments":["`reverse`"]},{"Key":"clause `reverse`","Fragments":["are"]},{"Key":"`reverse` are","Fragments":["often"]},{"Key":"often marked","Fragments":["private"]},{"Key":"marked private","Fragments":["(`defp`)"]},{"Key":"(`defp`) and","Fragments":["named","named"]},{"Key":"and named","Fragments":["`do_foo`","slightly","them"]},{"Key":"named `do_foo`","Fragments":["for"]},{"Key":"a main","Fragments":["function"]},{"Key":"main function","Fragments":["`foo`.","more"]},{"Key":"your pattern","Fragments":["matching","includes"]},{"Key":"case list","Fragments":["do"]},{"Key":" [head|tail]","Fragments":["-\u003e"]},{"Key":"[head|tail] -\u003e","Fragments":["reverse(tail,"]},{"Key":"-\u003e reverse(tail,","Fragments":["[head|reversed_list])"]},{"Key":"effect, some","Fragments":["people"]},{"Key":"def reverse([],","Fragments":["reversed_list),","acc,"]},{"Key":"reverse([], reversed_list),","Fragments":["do:"]},{"Key":"reversed_list), do:","Fragments":["reversed_list","reverse(tail,"]},{"Key":"def reverse([head|tail],","Fragments":["reversed_list),"]},{"Key":"reverse([head|tail], reversed_list),","Fragments":["do:"]},{"Key":"do: reverse(tail,","Fragments":["[head|reversed_list])"]},{"Key":"possible btw","Fragments":["to"]},{"Key":"btw to","Fragments":["express"]},{"Key":"express `concat`","Fragments":["in"]},{"Key":" Makes","Fragments":["sense."]},{"Key":"lot closer","Fragments":["to"]},{"Key":"my original","Fragments":["implementation"]},{"Key":"original implementation","Fragments":["before"]},{"Key":"implementation before","Fragments":["I"]},{"Key":"I destroyed","Fragments":["all"]},{"Key":"destroyed all","Fragments":["readability"]},{"Key":"all readability","Fragments":["by"]},{"Key":"making everything","Fragments":["\"too"]},{"Key":"everything \"too","Fragments":["DRY\"."]},{"Key":"need `Enum.to_list(start..finish)`.","Fragments":["`Enum.reduce`"]},{"Key":"`Enum.to_list(start..finish)`. `Enum.reduce`","Fragments":["(and"]},{"Key":"`Enum.reduce` (and","Fragments":["all"]},{"Key":"(and all","Fragments":["other"]},{"Key":"other `Enum`","Fragments":["functions)"]},{"Key":"`Enum` functions)","Fragments":["work"]},{"Key":"functions) work","Fragments":["on"]},{"Key":"on data","Fragments":["types"]},{"Key":"`Enumerable` implementation,","Fragments":["like"]},{"Key":"implementation, like","Fragments":["ranges."]},{"Key":"like ranges.","Fragments":["So"]},{"Key":"ranges. So","Fragments":["`Enum.reduce(start..finish,"]},{"Key":"So `Enum.reduce(start..finish,","Fragments":["...,"]},{"Key":"`Enum.reduce(start..finish, ...,","Fragments":["...)`"]},{"Key":"..., ...)`","Fragments":["works"]},{"Key":"...)` works","Fragments":["fine."]},{"Key":"the `do_foo`","Fragments":["suggestion.","helper"]},{"Key":"`do_foo` suggestion.","Fragments":["That"]},{"Key":"suggestion. That","Fragments":["frees"]},{"Key":"That frees","Fragments":["up"]},{"Key":"frees up","Fragments":["`foo`"]},{"Key":"up `foo`","Fragments":["if"]},{"Key":"`foo` if","Fragments":["I"]},{"Key":"a `foo`","Fragments":["that"]},{"Key":"`foo` that","Fragments":["has"]},{"Key":"same number","Fragments":["of"]},{"Key":"arguments as","Fragments":["the"]},{"Key":"helper function.","Fragments":["Thanks"]},{"Key":"function. Thanks","Fragments":["for"]},{"Key":"Good suggestions.","Fragments":["I"]},{"Key":"suggestions. I","Fragments":["meant","didn't"]},{"Key":"mention ask","Fragments":["specifically"]},{"Key":"ask specifically","Fragments":["about"]},{"Key":"specifically about","Fragments":["better"]},{"Key":"about better","Fragments":["ways"]},{"Key":"ways around","Fragments":["`\u00261"]},{"Key":"around `\u00261","Fragments":["-"]},{"Key":"- \u00261`.","Fragments":["Appreciate"]},{"Key":"\u00261`. Appreciate","Fragments":["it"]},{"Key":"Appreciate it","Fragments":[":)"]},{"Key":"About multiple","Fragments":["versions"]},{"Key":"of \"foo\".","Fragments":["Did"]},{"Key":"\"foo\". Did","Fragments":["you"]},{"Key":"def foo(a,","Fragments":["b"]},{"Key":"foo(a, b","Fragments":["//"]},{"Key":"b //","Fragments":["0)"]},{"Key":"will aromatically","Fragments":["get"]},{"Key":"aromatically get","Fragments":["both"]},{"Key":"get both","Fragments":["`foo/1`"]},{"Key":"both `foo/1`","Fragments":["(1"]},{"Key":"`foo/1` (1","Fragments":["argument)"]},{"Key":"(1 argument)","Fragments":["and"]},{"Key":"argument) and","Fragments":["`foo/2`."]},{"Key":"and `foo/2`.","Fragments":["If"]},{"Key":"`foo/2`. If","Fragments":["you"]},{"Key":"as `foo(something)`","Fragments":["it"]},{"Key":"`foo(something)` it","Fragments":["will"]},{"Key":"call `foo(something,","Fragments":["0)`."]},{"Key":"`foo(something, 0)`.","Fragments":["This"]},{"Key":"0)`. This","Fragments":["is"]},{"Key":"in `Enum.count`","Fragments":["to"]},{"Key":"`Enum.count` to","Fragments":["make"]},{"Key":"a counting","Fragments":["function."]},{"Key":"Looks a","Fragments":["lot","lot"]},{"Key":"One little","Fragments":["style","tip:"]},{"Key":"little style","Fragments":["thing:","tip:"]},{"Key":"style thing:","Fragments":["if"]},{"Key":"thing: if","Fragments":["you","you"]},{"Key":"write `func","Fragments":["="]},{"Key":"= \u0026[\u00261|\u00262]`","Fragments":["it's"]},{"Key":"\u0026[\u00261|\u00262]` it's","Fragments":["a"]},{"Key":"bit confusing","Fragments":["what","what"]},{"Key":"confusing what","Fragments":["you're","the"]},{"Key":"to do.","Fragments":["It's","It"]},{"Key":"do. It's","Fragments":["often"]},{"Key":"It's often","Fragments":["better"]},{"Key":"often better","Fragments":["to"]},{"Key":"explicit if","Fragments":["the"]},{"Key":"placeholder syntax","Fragments":["isn't"]},{"Key":"syntax isn't","Fragments":["completely"]},{"Key":"isn't completely","Fragments":["obvious."]},{"Key":" Quality","Fragments":["copy"]},{"Key":"Quality copy","Fragments":["pasted"]},{"Key":"copy pasted","Fragments":["nitpicks"]},{"Key":"pasted nitpicks","Fragments":["actually."]},{"Key":"nitpicks actually.","Fragments":[":)"]},{"Key":"suspect not","Fragments":["throwing"]},{"Key":"not throwing","Fragments":["a","a"]},{"Key":"throwing a","Fragments":["stack","stack"]},{"Key":"overflow exception","Fragments":["has","on"]},{"Key":"exception has","Fragments":["to"]},{"Key":"the capability","Fragments":["of"]},{"Key":"capability of","Fragments":["growing"]},{"Key":"of growing","Fragments":["the"]},{"Key":"growing the","Fragments":["stack"]},{"Key":"stack of","Fragments":["a"]},{"Key":"a process","Fragments":["while"]},{"Key":"process while","Fragments":["it"]},{"Key":"while it","Fragments":["runs."]},{"Key":"it runs.","Fragments":["This"]},{"Key":"runs. This","Fragments":["in"]},{"Key":"This in","Fragments":["turn"]},{"Key":"in turn","Fragments":["allows"]},{"Key":"turn allows","Fragments":["processes"]},{"Key":"allows processes","Fragments":["to"]},{"Key":"processes to","Fragments":["start"]},{"Key":"start with","Fragments":["really","my","tail","\"do_\"","the","an"]},{"Key":"with really","Fragments":["small"]},{"Key":"really small","Fragments":["stacks"]},{"Key":"small stacks","Fragments":["which"]},{"Key":"stacks which","Fragments":["is"]},{"Key":"important if","Fragments":["you"]},{"Key":"support millions","Fragments":["of"]},{"Key":"millions of","Fragments":["processes."]},{"Key":"small (and","Fragments":["optional)"]},{"Key":"(and optional)","Fragments":["thing:"]},{"Key":"optional) thing:","Fragments":["if"]},{"Key":"general \"shape\"","Fragments":["of"]},{"Key":"\"shape\" of","Fragments":["`concat_`,"]},{"Key":"of `concat_`,","Fragments":["do"]},{"Key":"`concat_`, do","Fragments":["you"]},{"Key":"could express","Fragments":["it"]},{"Key":" Learned","Fragments":["more","of"]},{"Key":"Learned more","Fragments":["about"]},{"Key":"about `Enum.count`","Fragments":["and","and"]},{"Key":"`Enum.count` and","Fragments":["getting","thought"]},{"Key":"and getting","Fragments":["the"]},{"Key":"using predicates.","Fragments":["Rather"]},{"Key":"predicates. Rather","Fragments":["than"]},{"Key":"than updating","Fragments":["an"]},{"Key":"updating an","Fragments":["existing"]},{"Key":"existing `HashDict`,","Fragments":["just"]},{"Key":"`HashDict`, just","Fragments":["create"]},{"Key":"just create","Fragments":["one"]},{"Key":"create one","Fragments":["and"]},{"Key":"set the","Fragments":["keys"]},{"Key":"and values","Fragments":["all"]},{"Key":"values all","Fragments":["at"]},{"Key":"once with","Fragments":["`HashDict.new/2`"]},{"Key":"Heh, my","Fragments":["strategy"]},{"Key":"my strategy","Fragments":["of"]},{"Key":"always submitting","Fragments":["the"]},{"Key":"submitting the","Fragments":["minimum"]},{"Key":"the minimum","Fragments":["of"]},{"Key":"of thought","Fragments":["and"]},{"Key":"thought and","Fragments":["effort"]},{"Key":"and effort","Fragments":["required"]},{"Key":"effort required","Fragments":["to"]},{"Key":"pass really","Fragments":["pays"]},{"Key":"really pays","Fragments":["off"]},{"Key":"pays off","Fragments":["when"]},{"Key":"off when","Fragments":["I"]},{"Key":"get quality","Fragments":["nitpicks"]},{"Key":"quality nitpicks","Fragments":["like"]},{"Key":"nitpicks like","Fragments":["these!"]},{"Key":"like these!","Fragments":["I've"]},{"Key":"these! I've","Fragments":["read"]},{"Key":"on tail","Fragments":["recursion"]},{"Key":"recursion before","Fragments":["but"]},{"Key":"before but","Fragments":["it's","couldn't"]},{"Key":"it's great","Fragments":["to"]},{"Key":"the reminder.","Fragments":["Funny"]},{"Key":"reminder. Funny","Fragments":["that"]},{"Key":"Funny that","Fragments":["Elixir"]},{"Key":"Elixir kind","Fragments":["of"]},{"Key":"of facilitates","Fragments":["bad"]},{"Key":"facilitates bad","Fragments":["code"]},{"Key":"bad code","Fragments":["by"]},{"Key":"by not","Fragments":["throwing"]},{"Key":"exception on","Fragments":["my"]},{"Key":"my non-tail-recursive","Fragments":["functions"]},{"Key":"non-tail-recursive functions","Fragments":["above..."]},{"Key":" Welcome","Fragments":["to","to","to"]},{"Key":"Welcome to","Fragments":["the","the","the"]},{"Key":"You actually","Fragments":["only","only"]},{"Key":"actually only","Fragments":["need","need"]},{"Key":"place in","Fragments":["this"]},{"Key":"the \"catch-all\"","Fragments":["clause"]},{"Key":"\"catch-all\" clause","Fragments":["of"]},{"Key":"`cond` to","Fragments":["be"]},{"Key":"called `true`.","Fragments":["You're"]},{"Key":"`true`. You're","Fragments":["probably"]},{"Key":"probably thinking","Fragments":["of"]},{"Key":"a catch-all","Fragments":["clause"]},{"Key":"catch-all clause","Fragments":["in"]},{"Key":" `","Fragments":["reduce(ll,"]},{"Key":"` reduce(ll,","Fragments":["acc,"]},{"Key":"reduce(ll, acc,","Fragments":["\u0026append/2)`"]},{"Key":"acc, \u0026append/2)`","Fragments":["?"]},{"Key":"I recently","Fragments":["learned","learned"]},{"Key":"recently learned","Fragments":["about","is"]},{"Key":"exercise. Predicates","Fragments":["are"]},{"Key":"Predicates are","Fragments":["pretty"]},{"Key":"pretty awesome","Fragments":["too."]},{"Key":"gone overboard","Fragments":["on"]},{"Key":"overboard on","Fragments":["methods"]},{"Key":"on methods","Fragments":["with"]},{"Key":"default arguments","Fragments":["but"]},{"Key":"arguments but","Fragments":["I"]},{"Key":"than most","Fragments":["other"]},{"Key":"most other","Fragments":["times"]},{"Key":"other times","Fragments":["I"]},{"Key":"I written","Fragments":["a"]},{"Key":"went a","Fragments":["step","different"]},{"Key":" @cale","Fragments":["That's"]},{"Key":"@cale That's","Fragments":["due"]},{"Key":"That's due","Fragments":["to"]},{"Key":"a change","Fragments":["in"]},{"Key":"tests a","Fragments":["while"]},{"Key":"while back.","Fragments":["Originally","My"]},{"Key":"back. Originally","Fragments":["when"]},{"Key":"Originally when","Fragments":["I"]},{"Key":"wrote this","Fragments":["test"]},{"Key":"than `Enum.reduce`","Fragments":["uses."]},{"Key":"`Enum.reduce` uses.","Fragments":["I"]},{"Key":"uses. I","Fragments":["changed"]},{"Key":"time later","Fragments":["to"]},{"Key":"later to","Fragments":["be"]},{"Key":"library. Your","Fragments":["tests"]},{"Key":"Your tests","Fragments":["assume"]},{"Key":"tests assume","Fragments":["the"]},{"Key":"new order","Fragments":["while"]},{"Key":"order while","Fragments":["@cale's"]},{"Key":"while @cale's","Fragments":["tests"]},{"Key":"@cale's tests","Fragments":["probably"]},{"Key":"tests probably","Fragments":["assume"]},{"Key":"probably assume","Fragments":["the"]},{"Key":"Correct. Your","Fragments":["`map`,"]},{"Key":"Your `map`,","Fragments":["`filter`"]},{"Key":"`map`, `filter`","Fragments":["and"]},{"Key":"and `append`","Fragments":["all","uses"]},{"Key":"`append` all","Fragments":["do"]},{"Key":"all do","Fragments":["list"]},{"Key":"do list","Fragments":["construction"]},{"Key":"list construction","Fragments":["`["]},{"Key":"construction `[","Fragments":["a"]},{"Key":"`[ a","Fragments":["|","|"]},{"Key":"a |","Fragments":["b","b"]},{"Key":"| b","Fragments":["]`","]`"]},{"Key":"b ]`","Fragments":["as","or"]},{"Key":"]` as","Fragments":["their"]},{"Key":"as their","Fragments":["last"]},{"Key":"their last","Fragments":["expression"]},{"Key":"are thus","Fragments":["not"]},{"Key":"thus not","Fragments":["tail"]},{"Key":"I fixed","Fragments":["it.","up","here."]},{"Key":"that. Thanks,","Fragments":["@geovanni."]},{"Key":" Exercism","Fragments":["fetch","does","keeps"]},{"Key":"Exercism fetch","Fragments":["provides"]},{"Key":"fetch provides","Fragments":["a"]},{"Key":"a leap.exs","Fragments":["file,"]},{"Key":"leap.exs file,","Fragments":["but"]},{"Key":"file, but","Fragments":["the"]},{"Key":"test expects","Fragments":["year.exs"]},{"Key":"expects year.exs","Fragments":[":)"]},{"Key":"know what...","Fragments":["I've"]},{"Key":"what... I've","Fragments":["actually"]},{"Key":"I've actually","Fragments":["used"]},{"Key":"actually used","Fragments":["that","anywhere,","the"]},{"Key":"and forgot.","Fragments":["Took"]},{"Key":"forgot. Took","Fragments":["way"]},{"Key":"Took way","Fragments":["too"]},{"Key":"way too","Fragments":["long","spread"]},{"Key":"long of","Fragments":["a"]},{"Key":"a break","Fragments":["from"]},{"Key":"fixed up","Fragments":["the"]},{"Key":"the catch-all","Fragments":["clause."]},{"Key":"catch-all clause.","Fragments":["I'm"]},{"Key":"clause. I'm","Fragments":["still"]},{"Key":"one expression","Fragments":["inside"]},{"Key":"expression inside","Fragments":["the"]},{"Key":"You've applied","Fragments":["tail"]},{"Key":"to most","Fragments":["functions.","readers?"]},{"Key":"Only `count`","Fragments":["is"]},{"Key":"not tail-recursive,","Fragments":["so"]},{"Key":"tail-recursive, so","Fragments":["it"]},{"Key":"will consume","Fragments":["much"]},{"Key":"consume much","Fragments":["memory"]},{"Key":"memory for","Fragments":["a"]},{"Key":"large list.","Fragments":["Could"]},{"Key":"list. Could","Fragments":["you"]},{"Key":"`count` tail","Fragments":["recursive"]},{"Key":"recursive as","Fragments":["well?"]},{"Key":"With `acc`","Fragments":["being"]},{"Key":"`acc` being","Fragments":["initially"]},{"Key":"being initially","Fragments":["the"]},{"Key":"initially the","Fragments":["empty"]},{"Key":"and `ll`","Fragments":["being"]},{"Key":"`ll` being","Fragments":["the"]},{"Key":"being the","Fragments":["reversed"]},{"Key":"the reversed","Fragments":["input"]},{"Key":"reversed input","Fragments":["list,","list"]},{"Key":"input list,","Fragments":["yes."]},{"Key":"list, yes.","Fragments":["The"]},{"Key":"The reversed","Fragments":["input"]},{"Key":"is crucial","Fragments":["as"]},{"Key":"crucial as","Fragments":["you"]},{"Key":"do `(a","Fragments":["++"]},{"Key":"`(a ++","Fragments":["(b"]},{"Key":"++ (b","Fragments":["++"]},{"Key":"(b ++","Fragments":["(c"]},{"Key":"++ (c","Fragments":["++"]},{"Key":"(c ++","Fragments":["(d"]},{"Key":"++ (d","Fragments":["++"]},{"Key":"(d ++","Fragments":["e))))`"]},{"Key":"++ e))))`","Fragments":["and"]},{"Key":"e))))` and","Fragments":["not"]},{"Key":"not `((((a","Fragments":["++"]},{"Key":"`((((a ++","Fragments":["b)"]},{"Key":"++ b)","Fragments":["++"]},{"Key":"b) ++","Fragments":["c)"]},{"Key":"++ c)","Fragments":["++"]},{"Key":"c) ++","Fragments":["d)"]},{"Key":"++ d)","Fragments":["++"]},{"Key":"d) ++","Fragments":["e)`"]},{"Key":"++ e)`","Fragments":["because"]},{"Key":"e)` because","Fragments":["of"]},{"Key":"how `++`/`append`","Fragments":["works."]},{"Key":"really recommended","Fragments":["because"]},{"Key":"recommended because","Fragments":["you"]},{"Key":"are exposing","Fragments":["your"]},{"Key":"exposing your","Fragments":["internals."]},{"Key":"your internals.","Fragments":["The"]},{"Key":"internals. The","Fragments":["helper"]},{"Key":"The helper","Fragments":["function"]},{"Key":"function for,","Fragments":["say,"]},{"Key":"for, say,","Fragments":["`map`"]},{"Key":"say, `map`","Fragments":["is"]},{"Key":"`map` is","Fragments":["an"]},{"Key":"internal detail","Fragments":["of"]},{"Key":"detail of","Fragments":["how"]},{"Key":"code works","Fragments":["and"]},{"Key":"and depends","Fragments":["on"]},{"Key":"particular invariant","Fragments":["(namely"]},{"Key":"invariant (namely","Fragments":["that"]},{"Key":"(namely that","Fragments":["the"]},{"Key":"a reversed","Fragments":["list"]},{"Key":"reversed list","Fragments":["of"]},{"Key":"of mapped","Fragments":["values)."]},{"Key":"mapped values).","Fragments":["Exposing"]},{"Key":"values). Exposing","Fragments":["it"]},{"Key":"Exposing it","Fragments":["could"]},{"Key":"could lead","Fragments":["to","to"]},{"Key":"to users","Fragments":["accidentally"]},{"Key":"users accidentally","Fragments":["calling"]},{"Key":"accidentally calling","Fragments":["the"]},{"Key":"three clause","Fragments":["map"]},{"Key":"clause map","Fragments":["which"]},{"Key":"map which","Fragments":["could"]},{"Key":"to weird","Fragments":["bugs."]},{"Key":" Defaults","Fragments":["arguments"]},{"Key":"Defaults arguments","Fragments":["are"]},{"Key":"are most","Fragments":["useful"]},{"Key":"define multiple","Fragments":["public"]},{"Key":"multiple public","Fragments":["functions"]},{"Key":"Try looking","Fragments":["in"]},{"Key":"looking in","Fragments":["the"]},{"Key":"`String` module:","Fragments":["`String.strip`,"]},{"Key":"module: `String.strip`,","Fragments":["`String.ends_with?`"]},{"Key":"`String.strip`, `String.ends_with?`","Fragments":["can"]},{"Key":"`String.ends_with?` can","Fragments":["come"]},{"Key":"on regular","Fragments":["expressions"]},{"Key":"expressions as","Fragments":["well,"]},{"Key":"well, your","Fragments":["code"]},{"Key":"few weird","Fragments":["regexes:"]},{"Key":"* `[?]`","Fragments":["is"]},{"Key":"`[?]` is","Fragments":["a"]},{"Key":"class with","Fragments":["only"]},{"Key":"element, I","Fragments":["guess"]},{"Key":"guess you're","Fragments":["trying"]},{"Key":"to escape","Fragments":["`?`,"]},{"Key":"escape `?`,","Fragments":["a"]},{"Key":"`?`, a","Fragments":["more"]},{"Key":"general approach","Fragments":["for"]},{"Key":"for escaping","Fragments":["\"magic\""]},{"Key":"escaping \"magic\"","Fragments":["characters"]},{"Key":"\"magic\" characters","Fragments":["is"]},{"Key":"characters is","Fragments":["to"]},{"Key":"prefix them","Fragments":["with"]},{"Key":"a backslash,","Fragments":["so"]},{"Key":"backslash, so","Fragments":["`\\?`."]},{"Key":"* `[a-z,","Fragments":["A-Z,"]},{"Key":"`[a-z, A-Z,","Fragments":["1-9]`"]},{"Key":"A-Z, 1-9]`","Fragments":["is"]},{"Key":"1-9]` is","Fragments":["the"]},{"Key":"class of","Fragments":["lowercase","characters"]},{"Key":"of lowercase","Fragments":["English"]},{"Key":"lowercase English","Fragments":["letters,"]},{"Key":"English letters,","Fragments":["uppercase","digits"]},{"Key":"letters, uppercase","Fragments":["English"]},{"Key":"uppercase English","Fragments":["letters,"]},{"Key":"letters, digits","Fragments":["from"]},{"Key":"digits from","Fragments":["1"]},{"Key":"from 1","Fragments":["to"]},{"Key":"1 to","Fragments":["9","1"]},{"Key":"to 9","Fragments":["(no"]},{"Key":"9 (no","Fragments":["0),"]},{"Key":"(no 0),","Fragments":["spaces"]},{"Key":"0), spaces","Fragments":["and"]},{"Key":"spaces and","Fragments":["commas."]},{"Key":"and commas.","Fragments":["You"]},{"Key":"commas. You","Fragments":["add"]},{"Key":"You add","Fragments":["space"]},{"Key":"add space","Fragments":["and"]},{"Key":"and comma","Fragments":["twice"]},{"Key":"comma twice","Fragments":["to"]},{"Key":"character class,","Fragments":["which"]},{"Key":"class, which","Fragments":["is"]},{"Key":"unnecessary and","Fragments":["looks"]},{"Key":"In `nucleotide_counts`","Fragments":["you"]},{"Key":"`nucleotide_counts` you","Fragments":["traverse"]},{"Key":"you traverse","Fragments":["the"]},{"Key":"list once","Fragments":["for","is"]},{"Key":"every nucleotide.","Fragments":["It's"]},{"Key":"nucleotide. It's","Fragments":["possible"]},{"Key":"could alternatively","Fragments":["express","write"]},{"Key":"alternatively express","Fragments":["that"]},{"Key":"express that","Fragments":["map"]},{"Key":"that map","Fragments":["as"]},{"Key":"map as","Fragments":["`Enum.map(dna,"]},{"Key":"as `Enum.map(dna,","Fragments":["\u0026transcribe/1)`."]},{"Key":"`Enum.map(dna, \u0026transcribe/1)`.","Fragments":["`\u0026transcribe/1`"]},{"Key":"\u0026transcribe/1)`. `\u0026transcribe/1`","Fragments":["is"]},{"Key":"`\u0026transcribe/1` is","Fragments":["shorthand"]},{"Key":"for \"function","Fragments":["value"]},{"Key":"\"function value","Fragments":["of"]},{"Key":"named 'transcribe'","Fragments":["which"]},{"Key":"'transcribe' which","Fragments":["takes"]},{"Key":"which takes","Fragments":["one","the","care"]},{"Key":"takes one","Fragments":["parameter\"."]},{"Key":"Just updated","Fragments":["my"]},{"Key":"A pretty","Fragments":["literal"]},{"Key":"pretty literal","Fragments":["conversion"]},{"Key":"literal conversion","Fragments":["of"]},{"Key":"conversion of","Fragments":["my"]},{"Key":"Haskell. Obvious","Fragments":["questions:"]},{"Key":" (1)","Fragments":["Can","Nope."]},{"Key":"(1) Can","Fragments":["I"]},{"Key":"I convert","Fragments":["the"]},{"Key":"weekday type","Fragments":["to"]},{"Key":"type to","Fragments":["a"]},{"Key":"number by","Fragments":["some"]},{"Key":"some easier","Fragments":["method"]},{"Key":"easier method","Fragments":["(like"]},{"Key":"method (like","Fragments":["Haskell's"]},{"Key":"(like Haskell's","Fragments":["fromEnum)?"]},{"Key":" (2)","Fragments":["Is","Using"]},{"Key":"(2) Is","Fragments":["it"]},{"Key":"it okay","Fragments":["to"]},{"Key":"okay to","Fragments":["use"]},{"Key":"Erlang's calendar","Fragments":["module"]},{"Key":"calendar module","Fragments":["like"]},{"Key":"module like","Fragments":["this,"]},{"Key":"like this,","Fragments":["or","but"]},{"Key":"this, or","Fragments":["is"]},{"Key":" (3)","Fragments":["Are","You"]},{"Key":"(3) Are","Fragments":["all"]},{"Key":"Are all","Fragments":["these"]},{"Key":"all these","Fragments":["ifs"]},{"Key":"these ifs","Fragments":["nested"]},{"Key":"ifs nested","Fragments":["inside"]},{"Key":"nested inside","Fragments":["case"]},{"Key":"inside case","Fragments":["statements"]},{"Key":"case statements","Fragments":["bad","in"]},{"Key":"statements bad","Fragments":["style?"]},{"Key":"bad style?","Fragments":["They"]},{"Key":"style? They","Fragments":["don't"]},{"Key":"They don't","Fragments":["look"]},{"Key":"don't look","Fragments":["very"]},{"Key":"very pretty,","Fragments":["do"]},{"Key":"pretty, do","Fragments":["they..."]},{"Key":"can't (going","Fragments":["back"]},{"Key":"(going back","Fragments":["to"]},{"Key":"the ListOps","Fragments":["exercise)","exercise."]},{"Key":"ListOps exercise)","Fragments":["do"]},{"Key":"exercise) do","Fragments":["`case"]},{"Key":"do `case","Fragments":["[h|t]"]},{"Key":"`case [h|t]","Fragments":["when"]},{"Key":"[h|t] when","Fragments":["f.(h)"]},{"Key":"when f.(h)","Fragments":["-\u003e`,"]},{"Key":"f.(h) -\u003e`,","Fragments":["though,"]},{"Key":"-\u003e`, though,","Fragments":["can"]},{"Key":"though, can","Fragments":["i?"]},{"Key":"(1) Nope.","Fragments":["The"]},{"Key":"Nope. The","Fragments":["Elixir"]},{"Key":"Elixir system","Fragments":["doesn't"]},{"Key":"system doesn't","Fragments":["have"]},{"Key":"which names","Fragments":["map"]},{"Key":"names map","Fragments":["to"]},{"Key":"to which","Fragments":["numbers"]},{"Key":"which numbers","Fragments":["(typespecs"]},{"Key":"numbers (typespecs","Fragments":["don't"]},{"Key":"(typespecs don't","Fragments":["count,"]},{"Key":"don't count,","Fragments":["the"]},{"Key":"count, the","Fragments":["compiler"]},{"Key":"compiler doesn't","Fragments":["really"]},{"Key":"really look","Fragments":["at"]},{"Key":"at them,","Fragments":["only"]},{"Key":"them, only","Fragments":["the"]},{"Key":"the dialyzer","Fragments":["tool"]},{"Key":"dialyzer tool","Fragments":["and"]},{"Key":"tool and","Fragments":["friends"]},{"Key":"(2) Using","Fragments":["a"]},{"Key":"a library","Fragments":["is"]},{"Key":"library is","Fragments":["not"]},{"Key":"only perfectly","Fragments":["fine"]},{"Key":"fine but","Fragments":["given"]},{"Key":"the rather","Fragments":["complicated"]},{"Key":"rather complicated","Fragments":["nature"]},{"Key":"complicated nature","Fragments":["of"]},{"Key":"of calendars","Fragments":["perfectly"]},{"Key":"calendars perfectly","Fragments":["sensible"]},{"Key":"perfectly sensible","Fragments":["as"]},{"Key":"sensible as","Fragments":["well."]},{"Key":"(3) You","Fragments":["can"]},{"Key":"case schedule","Fragments":["do"]},{"Key":" :teenth","Fragments":["when","-\u003e"]},{"Key":":teenth when","Fragments":["first"]},{"Key":"when first","Fragments":["+"]},{"Key":"first +","Fragments":["7","7","14"]},{"Key":"+ 7","Fragments":["\u003e"]},{"Key":"7 \u003e","Fragments":["12"]},{"Key":"\u003e 12","Fragments":["-\u003e"]},{"Key":"12 -\u003e","Fragments":["first"]},{"Key":"-\u003e first","Fragments":["+","+"]},{"Key":":teenth -\u003e","Fragments":["first"]},{"Key":" :first","Fragments":["-\u003e"]},{"Key":":first -\u003e","Fragments":["first"]},{"Key":" Unfortunately","Fragments":["not,","having"]},{"Key":"Unfortunately not,","Fragments":["guards"]},{"Key":"not, guards","Fragments":["are"]},{"Key":"are rather","Fragments":["limited","limited"]},{"Key":"rather limited","Fragments":["in","in"]},{"Key":"limited in","Fragments":["what","order"]},{"Key":"they support.","Fragments":["See"]},{"Key":"support. See","Fragments":["http://en.wikibooks.org/wiki/Erlang_Programming/guards"]},{"Key":"Now lc","Fragments":["free."]},{"Key":"lc free.","Fragments":["Seems"]},{"Key":"free. Seems","Fragments":["like"]},{"Key":"like reversing","Fragments":["is"]},{"Key":"reversing is","Fragments":["common"]},{"Key":"to preserve","Fragments":["order."]},{"Key":"accomplish map,","Fragments":["concat"]},{"Key":"map, concat","Fragments":["and"]},{"Key":"reverse with","Fragments":["tail"]},{"Key":"recursion but","Fragments":["without","when","i","never"]},{"Key":"an inbuilt","Fragments":["Elixir"]},{"Key":"inbuilt Elixir","Fragments":["function"]},{"Key":"Elixir function","Fragments":["to"]},{"Key":"to raise","Fragments":["to"]},{"Key":"raise to","Fragments":["the"]},{"Key":"the power","Fragments":["of,"]},{"Key":"power of,","Fragments":["but"]},{"Key":"of, but","Fragments":["it"]},{"Key":"write my","Fragments":["own"]},{"Key":"own quick","Fragments":["one"]},{"Key":"quick one","Fragments":["after"]},{"Key":"one after","Fragments":["the"]},{"Key":"ListOps exercise.","Fragments":["2^64-1"]},{"Key":"exercise. 2^64-1","Fragments":["is"]},{"Key":"2^64-1 is","Fragments":["a"]},{"Key":"a low","Fragments":["effort"]},{"Key":"low effort","Fragments":["route"]},{"Key":"effort route","Fragments":["to"]},{"Key":"admit regular","Fragments":["expressions"]},{"Key":"expressions has","Fragments":["always"]},{"Key":"has always","Fragments":["been"]},{"Key":"always been","Fragments":["a","nice"]},{"Key":"weak spot","Fragments":["of"]},{"Key":"spot of","Fragments":["mine."]},{"Key":"of mine.","Fragments":["Is"]},{"Key":"mine. Is","Fragments":["there"]},{"Key":"a resource","Fragments":["you"]},{"Key":"resource you","Fragments":["recommend"]},{"Key":"for regex","Fragments":["style"]},{"Key":"regex style","Fragments":["guidelines"]},{"Key":"style guidelines","Fragments":["/"]},{"Key":"guidelines /","Fragments":["patterns?"]},{"Key":"Well I've","Fragments":["found"]},{"Key":"found Mastering","Fragments":["Regular"]},{"Key":"Mastering Regular","Fragments":["Expressions"]},{"Key":"Regular Expressions","Fragments":["by"]},{"Key":"Expressions by","Fragments":["Jeffrey"]},{"Key":"by Jeffrey","Fragments":["Friedl"]},{"Key":"Jeffrey Friedl","Fragments":["to"]},{"Key":"Friedl to","Fragments":["be"]},{"Key":"very good","Fragments":["book","-"]},{"Key":"good book","Fragments":["for"]},{"Key":"book for","Fragments":["learning"]},{"Key":"expressions, though","Fragments":["it's"]},{"Key":"an introduction","Fragments":["level"]},{"Key":"introduction level","Fragments":["book."]},{"Key":"at http://www.regular-expressions.info,","Fragments":["there's"]},{"Key":"http://www.regular-expressions.info, there's","Fragments":["quite"]},{"Key":"of info","Fragments":["about"]},{"Key":"info about","Fragments":["regexes"]},{"Key":"about regexes","Fragments":["on"]},{"Key":"regexes on","Fragments":["that"]},{"Key":"Elixir's library","Fragments":["documentation"]},{"Key":"doesn't include","Fragments":["Erlang"]},{"Key":"include Erlang","Fragments":["functions"]},{"Key":"a policy","Fragments":["of"]},{"Key":"policy of","Fragments":["not"]},{"Key":"of not","Fragments":["implementing","exposing"]},{"Key":"not implementing","Fragments":["in"]},{"Key":"implementing in","Fragments":["Elixir","terms"]},{"Key":"Elixir what","Fragments":["has"]},{"Key":"what has","Fragments":["already"]},{"Key":"has already","Fragments":["been"]},{"Key":"been implemented","Fragments":["in"]},{"Key":"Erlang. There","Fragments":["is"]},{"Key":"a `:math.pow/2`","Fragments":["function,"]},{"Key":"`:math.pow/2` function,","Fragments":["but"]},{"Key":"but note","Fragments":["that"]},{"Key":"a double","Fragments":["precision","list?","list."]},{"Key":"double precision","Fragments":["floating"]},{"Key":"precision floating","Fragments":["point"]},{"Key":"floating point","Fragments":["number."]},{"Key":"Alternatively because","Fragments":["the"]},{"Key":"base is","Fragments":["2"]},{"Key":"is 2","Fragments":["you","(input"]},{"Key":"2 you","Fragments":["can"]},{"Key":"A Bitwise-based","Fragments":["solution."]},{"Key":" `lc`","Fragments":["actually","(list"]},{"Key":"`lc` actually","Fragments":["boils"]},{"Key":"actually boils","Fragments":["down"]},{"Key":"boils down","Fragments":["to"]},{"Key":"to (flat_)maps","Fragments":["and"]},{"Key":"(flat_)maps and","Fragments":["filters"]},{"Key":"and filters","Fragments":["under"]},{"Key":"filters under","Fragments":["the"]},{"Key":"the hood,","Fragments":["so"]},{"Key":"hood, so","Fragments":["you're"]},{"Key":"actually implementing","Fragments":["in"]},{"Key":"of existing","Fragments":["library"]},{"Key":"existing library","Fragments":["functions."]},{"Key":"library functions.","Fragments":["But"]},{"Key":"It's possible.","Fragments":["It's"]},{"Key":"possible. It's","Fragments":["been"]},{"Key":"time since","Fragments":["I"]},{"Key":"I last","Fragments":["touched"]},{"Key":"last touched","Fragments":["this"]},{"Key":"touched this","Fragments":["exercise."]},{"Key":"exercise. I'll","Fragments":["update"]},{"Key":"Try `%r/\\p{L}/`","Fragments":["instead"]},{"Key":"`%r/\\p{L}/` instead","Fragments":["of"]},{"Key":"using `[[:alpha:]]`.","Fragments":["POSIX"]},{"Key":"`[[:alpha:]]`. POSIX","Fragments":["character"]},{"Key":"POSIX character","Fragments":["classes","classes,"]},{"Key":"classes (`[[:alpha:]]`)","Fragments":["might"]},{"Key":"(`[[:alpha:]]`) might","Fragments":["not"]},{"Key":"not support","Fragments":["Unicode"]},{"Key":"support Unicode","Fragments":["whereas"]},{"Key":"Unicode whereas","Fragments":["`\\p{L}`"]},{"Key":"whereas `\\p{L}`","Fragments":["tests"]},{"Key":"`\\p{L}` tests","Fragments":["for"]},{"Key":"a unicode","Fragments":["letter.","list."]},{"Key":"comprehension would","Fragments":["be"]},{"Key":"be most","Fragments":["useful"]},{"Key":"useful here","Fragments":["@cristobal?"]},{"Key":"here @cristobal?","Fragments":["Converting"]},{"Key":"@cristobal? Converting","Fragments":["a"]},{"Key":"Converting a","Fragments":["list"]},{"Key":"characters into","Fragments":["a"]},{"Key":"of scores","Fragments":["before"]},{"Key":"scores before","Fragments":["summing"]},{"Key":"before summing","Fragments":["them?"]},{"Key":"summing them?","Fragments":["Have"]},{"Key":"them? Have","Fragments":["I"]},{"Key":"Have I","Fragments":["missed"]},{"Key":"missed what","Fragments":["you're"]},{"Key":"Yeah that","Fragments":["makes"]},{"Key":"Looks fairly","Fragments":["good."]},{"Key":"fairly good.","Fragments":["I"]},{"Key":"just wonder","Fragments":["why"]},{"Key":"don't convert","Fragments":["the"]},{"Key":"before scoring","Fragments":["the"]},{"Key":"scoring the","Fragments":["letters."]},{"Key":"few additional","Fragments":["tips:"]},{"Key":"can convert","Fragments":["a"]},{"Key":"character list","Fragments":["using"]},{"Key":"using `String.to_char_list`","Fragments":["and"]},{"Key":"`String.to_char_list` and","Fragments":["`String.to_char_list!`."]},{"Key":"2. Character","Fragments":["literals"]},{"Key":"Character literals","Fragments":["can"]},{"Key":"literals can","Fragments":["be"]},{"Key":"are several","Fragments":["shorter","smaller"]},{"Key":"several shorter","Fragments":["ways"]},{"Key":"shorter ways","Fragments":["btw,"]},{"Key":"ways btw,","Fragments":["from"]},{"Key":"btw, from","Fragments":["a"]},{"Key":"technique using","Fragments":["macro's"]},{"Key":"using macro's","Fragments":["to"]},{"Key":"macro's to","Fragments":["creating"]},{"Key":"to creating","Fragments":["a"]},{"Key":"a dict","Fragments":["with"]},{"Key":"dict with","Fragments":["the"]},{"Key":"the score","Fragments":["of"]},{"Key":"score of","Fragments":["every"]},{"Key":"expect there's","Fragments":["a"]},{"Key":"way you're","Fragments":["creating"]},{"Key":"you're creating","Fragments":["the"]},{"Key":"creating the","Fragments":["scores"]},{"Key":"the scores","Fragments":["HashDict"]},{"Key":"scores HashDict","Fragments":["is"]},{"Key":"definitely more","Fragments":["concise,","of"]},{"Key":"this form","Fragments":["what"]},{"Key":"form what","Fragments":["letters"]},{"Key":"what letters","Fragments":["have"]},{"Key":"have what","Fragments":["values."]},{"Key":"what values.","Fragments":["If"]},{"Key":"you ever","Fragments":["had","feel","really"]},{"Key":"ever had","Fragments":["to"]},{"Key":"letter it","Fragments":["would"]},{"Key":"little tricky","Fragments":["to"]},{"Key":"tricky to","Fragments":["make"]},{"Key":"you changed","Fragments":["the"]},{"Key":"right one.","Fragments":["What"]},{"Key":"1. It","Fragments":["would"]},{"Key":"was some","Fragments":["documentation"]},{"Key":"documentation in","Fragments":["the"]},{"Key":"code (by","Fragments":["that"]},{"Key":"(by that","Fragments":["I"]},{"Key":"mean well","Fragments":["named"]},{"Key":"or variables,","Fragments":["not"]},{"Key":"variables, not","Fragments":["comments)"]},{"Key":"not comments)","Fragments":["to"]},{"Key":"comments) to","Fragments":["explain"]},{"Key":"are trying","Fragments":["to"]},{"Key":"match, not","Fragments":["only"]},{"Key":"only literally","Fragments":["what"]},{"Key":"literally what","Fragments":["they're"]},{"Key":"what they're","Fragments":["trying"]},{"Key":"they're trying","Fragments":["to"]},{"Key":"also what","Fragments":["the"]},{"Key":"things they","Fragments":["are"]},{"Key":"are matching","Fragments":["signify"]},{"Key":"matching signify","Fragments":["about"]},{"Key":"signify about","Fragments":["the"]},{"Key":"input in","Fragments":["terms","terms"]},{"Key":"domain (i.e.","Fragments":["shouting,"]},{"Key":"(i.e. shouting,","Fragments":["asking,"]},{"Key":"shouting, asking,","Fragments":["silence,"]},{"Key":"asking, silence,","Fragments":["etc)."]},{"Key":"silence, etc).","Fragments":["Do"]},{"Key":"etc). Do","Fragments":["you"]},{"Key":"the expressiveness","Fragments":["and"]},{"Key":"expressiveness and","Fragments":["readability"]},{"Key":"and readability","Fragments":["of"]},{"Key":"the code?","Fragments":["If"]},{"Key":"code? If","Fragments":["so,"]},{"Key":"so, can","Fragments":["you"]},{"Key":"2. It","Fragments":["feels"]},{"Key":"awkward for","Fragments":["the"]},{"Key":"the default,","Fragments":["and"]},{"Key":"default, and","Fragments":["for"]},{"Key":"to shouting","Fragments":["to"]},{"Key":"shouting to","Fragments":["be"]},{"Key":"be repeated","Fragments":["twice"]},{"Key":"repeated twice","Fragments":["within"]},{"Key":"twice within","Fragments":["the"]},{"Key":"the `cond`.","Fragments":["Is"]},{"Key":"`cond`. Is","Fragments":["there"]},{"Key":"could reorder","Fragments":["or"]},{"Key":"reorder or","Fragments":["redesign"]},{"Key":"or redesign","Fragments":["things"]},{"Key":"redesign things","Fragments":["so"]},{"Key":"so each","Fragments":["response"]},{"Key":"each response","Fragments":["only","is"]},{"Key":"response only","Fragments":["has"]},{"Key":"one case","Fragments":["in"]},{"Key":"general I'd","Fragments":["suggest"]},{"Key":"I'd suggest","Fragments":["looking","is"]},{"Key":"suggest looking","Fragments":["for","at"]},{"Key":"the properties","Fragments":["you're"]},{"Key":"properties you're","Fragments":["interested"]},{"Key":"in besides","Fragments":["regexes."]},{"Key":"besides regexes.","Fragments":["It"]},{"Key":"regexes. It","Fragments":["turns"]},{"Key":"It turns","Fragments":["out","out","out"]},{"Key":"pretty simple","Fragments":["and","way"]},{"Key":"elegant ways","Fragments":["to"]},{"Key":"detect these","Fragments":["things"]},{"Key":"as hard","Fragments":["to"]},{"Key":"to read/maintain/understand","Fragments":["as"]},{"Key":"read/maintain/understand as","Fragments":["the"]},{"Key":"the regexes.","Fragments":["Please"]},{"Key":"regexes. Please","Fragments":["let"]},{"Key":"Please let","Fragments":["me"]},{"Key":"if you'd","Fragments":["like","like","like"]},{"Key":"you'd like","Fragments":["any","a","to."]},{"Key":"like any","Fragments":["suggestions."]},{"Key":"any suggestions.","Fragments":["But"]},{"Key":"suggestions. But","Fragments":["yeah,"]},{"Key":"would explore","Fragments":["the"]},{"Key":"explore the","Fragments":["[docs"]},{"Key":"the [docs","Fragments":["for"]},{"Key":"[docs for","Fragments":["the"]},{"Key":"String module](http://elixir-lang.org/docs/master/String.html)","Fragments":["and"]},{"Key":"module](http://elixir-lang.org/docs/master/String.html) and","Fragments":["just"]},{"Key":"just see","Fragments":["what's"]},{"Key":"what's available","Fragments":["and"]},{"Key":"available and","Fragments":["what"]},{"Key":"`lc` (list","Fragments":["comprehensions)"]},{"Key":"(list comprehensions)","Fragments":["might"]},{"Key":"comprehensions) might","Fragments":["be"]},{"Key":" Playing","Fragments":["with"]},{"Key":"Playing with","Fragments":["list"]},{"Key":"with list","Fragments":["comprehensions"]},{"Key":"comprehensions as","Fragments":["suggested"]},{"Key":"by @savannah.","Fragments":["Not"]},{"Key":"@savannah. Not","Fragments":["sure"]},{"Key":"I've *quite*","Fragments":["got"]},{"Key":"*quite* got","Fragments":["the"]},{"Key":"No, you","Fragments":["need"]},{"Key":"me put","Fragments":["it"]},{"Key":"this way,","Fragments":["here's"]},{"Key":"way, here's","Fragments":["how"]},{"Key":"would encode","Fragments":["the"]},{"Key":" @kevin","Fragments":["["]},{"Key":"Keep in","Fragments":["mind"]},{"Key":"that `'AB'","Fragments":["=="]},{"Key":"`'AB' ==","Fragments":["[?A,"]},{"Key":"[?A, ?B]`.","Fragments":["Using"]},{"Key":"?B]`. Using","Fragments":["a"]},{"Key":"comprehension to","Fragments":["create"]},{"Key":"dictionary of","Fragments":["letter"]},{"Key":"to value","Fragments":["leads"]},{"Key":"value leads","Fragments":["to"]},{"Key":"some rather","Fragments":["elegant","large"]},{"Key":"rather elegant","Fragments":["code."]},{"Key":"lc {letters,","Fragments":["value}"]},{"Key":"{letters, value}","Fragments":["inlist"]},{"Key":"value} inlist","Fragments":["values,"]},{"Key":"inlist values,","Fragments":["letter"]},{"Key":"values, letter","Fragments":["inlist"]},{"Key":"inlist letters,","Fragments":["do:"]},{"Key":"letters, do:","Fragments":["{letter,"]},{"Key":"do: {letter,","Fragments":["value}"]},{"Key":"previous iteration;","Fragments":["I"]},{"Key":"iteration; I","Fragments":["just"]},{"Key":"just fixed","Fragments":["a"]},{"Key":"fixed a","Fragments":["couple"]},{"Key":"of formatting","Fragments":["inconsistencies."]},{"Key":"this slightly","Fragments":["more"]},{"Key":"efficient by","Fragments":["using"]},{"Key":"of possibly","Fragments":["useful"]},{"Key":"possibly useful","Fragments":["number-letter"]},{"Key":"useful number-letter","Fragments":["pairs"]},{"Key":"number-letter pairs","Fragments":["will"]},{"Key":"pairs will","Fragments":["shrink"]},{"Key":"will shrink","Fragments":["as"]},{"Key":"shrink as","Fragments":["you"]},{"Key":"go along.","Fragments":["For"]},{"Key":"along. For","Fragments":["example"]},{"Key":"number 111","Fragments":["you"]},{"Key":"111 you","Fragments":["will"]},{"Key":"will first","Fragments":["find"]},{"Key":"first find","Fragments":["100,"]},{"Key":"find 100,","Fragments":["subtract"]},{"Key":"100, subtract","Fragments":["that"]},{"Key":"that leaving","Fragments":["11"]},{"Key":"leaving 11","Fragments":["and"]},{"Key":"then find","Fragments":["the"]},{"Key":"number 10.","Fragments":["At"]},{"Key":"10. At","Fragments":["that"]},{"Key":"At that","Fragments":["point"]},{"Key":"that point","Fragments":["you"]},{"Key":"that everything","Fragments":["higher"]},{"Key":"everything higher","Fragments":["than"]},{"Key":"higher than","Fragments":["10"]},{"Key":"than 10","Fragments":["won't"]},{"Key":"10 won't","Fragments":["match"]},{"Key":"won't match","Fragments":["any"]},{"Key":"Ooh, thanks.","Fragments":["That's"]},{"Key":"thanks. That's","Fragments":["pretty"]},{"Key":" nothing","Fragments":["fancy,"]},{"Key":"nothing fancy,","Fragments":["as"]},{"Key":"fancy, as","Fragments":["simple"]},{"Key":"version taking","Fragments":["that"]},{"Key":"taking that","Fragments":["into"]},{"Key":"into account.","Fragments":[":)"]},{"Key":" @bertram,","Fragments":["this"]},{"Key":"@bertram, this","Fragments":["iteration"]},{"Key":"iteration feels","Fragments":["a"]},{"Key":"that `next_numeral_pair`","Fragments":["returns"]},{"Key":"`next_numeral_pair` returns","Fragments":["not"]},{"Key":"returns not","Fragments":["only"]},{"Key":"the numeral","Fragments":["pair,"]},{"Key":"numeral pair,","Fragments":["but"]},{"Key":"pair, but","Fragments":["an"]},{"Key":"extra piece","Fragments":["of"]},{"Key":"of information","Fragments":["that's"]},{"Key":"information that's","Fragments":["sort"]},{"Key":"implementation detail.","Fragments":["I"]},{"Key":"detail. I","Fragments":["guess"]},{"Key":"guess that's","Fragments":["why"]},{"Key":"that GenServer","Fragments":["version"]},{"Key":"GenServer version","Fragments":["last"]},{"Key":"version last","Fragments":["time"]},{"Key":"time so","Fragments":["I"]},{"Key":"could encapsulate","Fragments":["that"]},{"Key":"encapsulate that","Fragments":["state"]},{"Key":"that state","Fragments":["in"]},{"Key":"state in","Fragments":["the"]},{"Key":"other process.","Fragments":["However,"]},{"Key":"process. However,","Fragments":["with"]},{"Key":"However, with","Fragments":["that"]},{"Key":"that version","Fragments":["I"]},{"Key":"reference to","Fragments":["the"]},{"Key":"server around,","Fragments":["so"]},{"Key":"around, so","Fragments":["both"]},{"Key":"so both","Fragments":["of"]},{"Key":"them have","Fragments":["that"]},{"Key":"that trade","Fragments":["off."]},{"Key":"guessing you","Fragments":["might","can"]},{"Key":"in mind?","Fragments":["Maybe"]},{"Key":"mind? Maybe","Fragments":["reducing"]},{"Key":"Maybe reducing","Fragments":["over"]},{"Key":"reducing over","Fragments":["the"]},{"Key":"the `@bertram`","Fragments":["and"]},{"Key":"`@bertram` and","Fragments":["appending"]},{"Key":"and appending","Fragments":["the"]},{"Key":"appending the","Fragments":["roman"]},{"Key":"the roman","Fragments":["chars"]},{"Key":"roman chars","Fragments":["to"]},{"Key":"chars to","Fragments":["the"]},{"Key":"result while","Fragments":["the"]},{"Key":"the arabic","Fragments":["number"]},{"Key":"arabic number","Fragments":["is"]},{"Key":"still greater","Fragments":["than"]},{"Key":"current pair's","Fragments":["value?"]},{"Key":"pair's value?","Fragments":["I've"]},{"Key":"value? I've","Fragments":["started"]},{"Key":"I've started","Fragments":["down"]},{"Key":"started down","Fragments":["a"]},{"Key":"down a","Fragments":["route"]},{"Key":"a route","Fragments":["like"]},{"Key":"route like","Fragments":["that"]},{"Key":"times but","Fragments":["it"]},{"Key":"got kind","Fragments":["of"]},{"Key":"of complicated.","Fragments":["I"]},{"Key":"complicated. I","Fragments":["will"]},{"Key":"will keep","Fragments":["thinking."]},{"Key":"keep thinking.","Fragments":["In"]},{"Key":"thinking. In","Fragments":["the"]},{"Key":"meantime, I'd","Fragments":["love"]},{"Key":"love your","Fragments":["thoughts"]},{"Key":"thoughts (or","Fragments":["anyone's)"]},{"Key":"(or anyone's)","Fragments":["on"]},{"Key":"anyone's) on","Fragments":["this"]},{"Key":"iteration and","Fragments":["the"]},{"Key":"previous one.","Fragments":["Thanks"]},{"Key":"one. Thanks","Fragments":["as"]},{"Key":"I'm mainly","Fragments":["just"]},{"Key":"mainly just","Fragments":["submitting"]},{"Key":"just submitting","Fragments":["this"]},{"Key":"for practice.","Fragments":["I'll"]},{"Key":"practice. I'll","Fragments":["submit"]},{"Key":"without GenServer","Fragments":["in"]},{"Key":"GenServer in","Fragments":["a"]},{"Key":"Ok, I'm","Fragments":["liking"]},{"Key":"liking this","Fragments":["one"]},{"Key":"better. This","Fragments":["is"]},{"Key":"I've thought","Fragments":["of"]},{"Key":"recursive callback","Fragments":["to"]},{"Key":"to `reduce`.","Fragments":["I"]},{"Key":"`reduce`. I","Fragments":["had"]},{"Key":"time coming","Fragments":["up"]},{"Key":"callback since","Fragments":["what"]},{"Key":"since what","Fragments":["it's"]},{"Key":"put into","Fragments":["concise"]},{"Key":"into concise","Fragments":["words."]},{"Key":"concise words.","Fragments":["Any"]},{"Key":"words. Any","Fragments":["thoughts"]},{"Key":"Any thoughts","Fragments":["on"]},{"Key":"implementation and/or","Fragments":["the"]},{"Key":"and/or the","Fragments":["name"]},{"Key":" Doesn't","Fragments":["look","this"]},{"Key":"Doesn't look","Fragments":["too"]},{"Key":"look too","Fragments":["bad."]},{"Key":"too bad.","Fragments":["A"]},{"Key":"bad. A","Fragments":["few"]},{"Key":"Typically helper","Fragments":["functions"]},{"Key":"called `do_count`","Fragments":["for"]},{"Key":"`do_count` for","Fragments":["a"]},{"Key":"want why","Fragments":["not"]},{"Key":"not try","Fragments":["extracting"]},{"Key":"try extracting","Fragments":["the"]},{"Key":"want? For","Fragments":["example"]},{"Key":"example using","Fragments":["`Regex.scan`.","`String.scan`)."]},{"Key":"the comments","Fragments":["on","and","very","there.","above!"]},{"Key":"comments on","Fragments":["this","each","your","dot-dsl","the"]},{"Key":"this submission...se","Fragments":["iteration"]},{"Key":"submission...se iteration","Fragments":["3"]},{"Key":"feedback, this","Fragments":["just"]},{"Key":"match instead","Fragments":["of"]},{"Key":"string replace","Fragments":["and"]},{"Key":"replace and","Fragments":["looks"]},{"Key":"looks for","Fragments":["strings"]},{"Key":"contain only","Fragments":["non-unicode-letter-class"]},{"Key":"only non-unicode-letter-class","Fragments":["graphemes."]},{"Key":"get back","Fragments":["into","to"]},{"Key":"the mind","Fragments":["of"]},{"Key":"mind of","Fragments":["functional"]},{"Key":"and list","Fragments":["processing."]},{"Key":"list processing.","Fragments":["The"]},{"Key":"processing. The","Fragments":["string"]},{"Key":"manipulation call","Fragments":["feels"]},{"Key":"call feels","Fragments":["ugly,"]},{"Key":"feels ugly,","Fragments":["and"]},{"Key":"ugly, and","Fragments":["I"]},{"Key":"I welcome","Fragments":["any"]},{"Key":"welcome any","Fragments":["suggestions"]},{"Key":"any suggestions","Fragments":["for","for"]},{"Key":"suggestions for","Fragments":["alternates.","how"]},{"Key":"Also for","Fragments":["the"]},{"Key":"silence I","Fragments":["have"]},{"Key":"using either","Fragments":["pattern"]},{"Key":"either pattern","Fragments":["matching"]},{"Key":"on \"\",","Fragments":["\""]},{"Key":"\"\", \"","Fragments":["\","]},{"Key":"\" \",","Fragments":["and"]},{"Key":"\", and","Fragments":["\""]},{"Key":"and \"","Fragments":["\"","\"."]},{"Key":"like String.starts_with(\"","Fragments":["\")"]},{"Key":"String.starts_with(\" \")","Fragments":["\u0026\u0026"]},{"Key":"\") \u0026\u0026","Fragments":["String.ends_with(\""]},{"Key":"\u0026\u0026 String.ends_with(\"","Fragments":["\")"]},{"Key":"String.ends_with(\" \")","Fragments":["but,"]},{"Key":"\") but,","Fragments":["both"]},{"Key":"but, both","Fragments":["of"]},{"Key":"those seemed","Fragments":["to"]},{"Key":"have issues.","Fragments":["Like"]},{"Key":"issues. Like","Fragments":["\""]},{"Key":"Like \"","Fragments":["Hey"]},{"Key":"\" Hey","Fragments":["I'm"]},{"Key":"Hey I'm","Fragments":["asking"]},{"Key":"I'm asking","Fragments":["you"]},{"Key":"asking you","Fragments":["a"]},{"Key":"a question?","Fragments":["\""]},{"Key":"question? \"","Fragments":["and"]},{"Key":"\" and","Fragments":["\""]},{"Key":"\" \".","Fragments":["Though"]},{"Key":"\". Though","Fragments":["I"]},{"Key":"Though I","Fragments":["suppose"]},{"Key":"suppose the","Fragments":["tests","problem"]},{"Key":"really cover","Fragments":["those."]},{"Key":"Also count_words","Fragments":["maybe"]},{"Key":"count_words maybe","Fragments":["should"]},{"Key":"maybe should","Fragments":["do"]},{"Key":"the uniq","Fragments":["inside"]},{"Key":"uniq inside","Fragments":["the"]},{"Key":"the count_words","Fragments":["function."]},{"Key":"`String` module","Fragments":["functions.","functions,","needs"]},{"Key":"1. I'm","Fragments":["curious"]},{"Key":"only testing","Fragments":["the"]},{"Key":"testing the","Fragments":["last","`input`,","input"]},{"Key":"last word","Fragments":["in","holds"]},{"Key":"the string?","Fragments":["Maybe","Might"]},{"Key":"string? Maybe","Fragments":["the"]},{"Key":"tests need","Fragments":["to"]},{"Key":"improved to","Fragments":["force"]},{"Key":"whole thing?","Fragments":["Interesting..."]},{"Key":"2. I","Fragments":["noticed","don't","was"]},{"Key":"cases result","Fragments":["in"]},{"Key":"Teenager responding","Fragments":["with"]},{"Key":"responding with","Fragments":["\"Woah,"]},{"Key":"chill out!\".","Fragments":["Is","If"]},{"Key":"out!\". Is","Fragments":["there"]},{"Key":"could consolidate","Fragments":["those"]},{"Key":"consolidate those","Fragments":["two"]},{"Key":"two into","Fragments":["one"]},{"Key":"3. What","Fragments":["would"]},{"Key":"about giving","Fragments":["meaningful"]},{"Key":"giving meaningful","Fragments":["names"]},{"Key":"meaningful names","Fragments":["to"]},{"Key":"different cases?","Fragments":["In"]},{"Key":"cases? In","Fragments":["other"]},{"Key":"words, what","Fragments":["does"]},{"Key":"it mean","Fragments":["to"]},{"Key":"Teenager that","Fragments":["the"]},{"Key":"input ends","Fragments":["with"]},{"Key":"mark, or","Fragments":["if"]},{"Key":"all caps,","Fragments":["etc?","you"]},{"Key":"understand as","Fragments":["far"]},{"Key":"as what","Fragments":["the","you"]},{"Key":"different responses","Fragments":["are"]},{"Key":"responses are","Fragments":["responding"]},{"Key":"are responding","Fragments":["to."]},{"Key":"responding to.","Fragments":[":)"]},{"Key":"general because","Fragments":["they"]},{"Key":"is feeling","Fragments":["about"]},{"Key":"feeling about","Fragments":["what"]},{"Key":"are hearing,","Fragments":["it"]},{"Key":"hearing, it","Fragments":["feels"]},{"Key":"awkward because","Fragments":["it"]},{"Key":"be asking","Fragments":["questions"]},{"Key":"asking questions","Fragments":["about"]},{"Key":"questions about","Fragments":["the"]},{"Key":"the `input`,","Fragments":["rather","which"]},{"Key":"`input`, rather","Fragments":["than"]},{"Key":"than about","Fragments":["the"]},{"Key":"the teenager,","Fragments":["and"]},{"Key":"teenager, and","Fragments":["when"]},{"Key":"when looked","Fragments":["at"]},{"Key":"names don't","Fragments":["feel"]},{"Key":"feel quite","Fragments":["right."]},{"Key":"quite right.","Fragments":["What"]},{"Key":"right. What","Fragments":["do"]},{"Key":"think? Kind","Fragments":["of"]},{"Key":"Kind of","Fragments":["a"]},{"Key":"a subtle","Fragments":["thing."]},{"Key":"subtle thing.","Fragments":["`question?(input)`"]},{"Key":"thing. `question?(input)`","Fragments":["instead"]},{"Key":"`question?(input)` instead","Fragments":["of"]},{"Key":"different cases,","Fragments":["a"]},{"Key":"cases, a","Fragments":["few"]},{"Key":"1. It's","Fragments":["probably"]},{"Key":"a deficiency","Fragments":["of"]},{"Key":"deficiency of","Fragments":["the"]},{"Key":"test suite,","Fragments":["but","since","yet","just"]},{"Key":"suite, but","Fragments":["I"]},{"Key":"your definition","Fragments":["of"]},{"Key":"of `being_yelled_at?`","Fragments":["is"]},{"Key":"`being_yelled_at?` is","Fragments":["quite"]},{"Key":"quite accurate.","Fragments":["I"]},{"Key":"accurate. I","Fragments":["think"]},{"Key":"test about","Fragments":["yelling","twice"]},{"Key":"about yelling","Fragments":["in"]},{"Key":"yelling in","Fragments":["Russian"]},{"Key":"in Russian","Fragments":["was","test","test?","test:","test","test?"]},{"Key":"Russian was","Fragments":["meant"]},{"Key":"make you","Fragments":["think"]},{"Key":"about characters","Fragments":["other"]},{"Key":"just A-Z.","Fragments":["But"]},{"Key":"A-Z. But","Fragments":["the"]},{"Key":"still essentially","Fragments":["the"]},{"Key":"essentially the","Fragments":["same,"]},{"Key":"same, yelling","Fragments":["means"]},{"Key":"yelling means","Fragments":["a"]},{"Key":"means a","Fragments":["non-empty","very"]},{"Key":"all capital","Fragments":["letters","letters"]},{"Key":"letters (or","Fragments":["no"]},{"Key":"(or no","Fragments":["lowercase"]},{"Key":"lowercase letters).","Fragments":["So,"]},{"Key":"letters). So,","Fragments":["theoretically"]},{"Key":"So, theoretically","Fragments":["if"]},{"Key":"theoretically if","Fragments":["there"]},{"Key":"another test","Fragments":["that"]},{"Key":"was in","Fragments":["another","the"]},{"Key":"but included","Fragments":["lowercase"]},{"Key":"included lowercase","Fragments":["letters,"]},{"Key":"lowercase letters,","Fragments":["it"]},{"Key":"it shouldn't","Fragments":["be"]},{"Key":"considered yelling.","Fragments":["Also,"]},{"Key":"yelling. Also,","Fragments":["I"]},{"Key":"of shouting","Fragments":["has"]},{"Key":"shouting has","Fragments":["anything"]},{"Key":"has anything","Fragments":["to"]},{"Key":"with adjacent","Fragments":["capital"]},{"Key":"adjacent capital","Fragments":["letters"]},{"Key":"letters per","Fragments":["say,"]},{"Key":"per say,","Fragments":["but"]},{"Key":"say, but","Fragments":["just"]},{"Key":"but just","Fragments":["that","looking"]},{"Key":"that *all","Fragments":["the"]},{"Key":"*all the","Fragments":["letters*"]},{"Key":"the letters*","Fragments":["are"]},{"Key":"letters* are","Fragments":["capital."]},{"Key":"are capital.","Fragments":["It"]},{"Key":"capital. It","Fragments":["turns"]},{"Key":"way (without","Fragments":["regexes)"]},{"Key":"(without regexes)","Fragments":["to"]},{"Key":"regexes) to","Fragments":["check"]},{"Key":"entire string","Fragments":["is"]},{"Key":"is uppercase.","Fragments":["Let"]},{"Key":"uppercase. Let","Fragments":["me"]},{"Key":"don't mind","Fragments":["the","the","a"]},{"Key":"mind the","Fragments":["regex","name","4"]},{"Key":"in `being_ignored?`","Fragments":["but"]},{"Key":"`being_ignored?` but","Fragments":["is"]},{"Key":"the regex?","Fragments":["If"]},{"Key":"regex? If","Fragments":["you"]},{"Key":"out, which","Fragments":["one"]},{"Key":"one do","Fragments":["you"]},{"Key":"more readable?","Fragments":["I'm"]},{"Key":"readable? I'm","Fragments":["not"]},{"Key":"change it,","Fragments":["just"]},{"Key":"it, just","Fragments":["saying"]},{"Key":"just saying","Fragments":["it"]},{"Key":"saying it","Fragments":["might"]},{"Key":"worth exploring.","Fragments":["Regexes"]},{"Key":"exploring. Regexes","Fragments":["are"]},{"Key":"are cool","Fragments":["but"]},{"Key":"cool but","Fragments":["they"]},{"Key":"and maintain","Fragments":["than"]},{"Key":"maintain than","Fragments":["other"]},{"Key":"than other","Fragments":["alternatives,"]},{"Key":"other alternatives,","Fragments":["so"]},{"Key":"alternatives, so","Fragments":["I"]},{"Key":"avoid them","Fragments":["unless"]},{"Key":"them unless","Fragments":["they're"]},{"Key":"they're really","Fragments":["necessary"]},{"Key":"checking complex","Fragments":["conditions."]},{"Key":"some ideas","Fragments":["about","on"]},{"Key":"ideas about","Fragments":["the"]},{"Key":"those changes","Fragments":["but,"]},{"Key":"changes but,","Fragments":["as"]},{"Key":"as for","Fragments":["detecting"]},{"Key":"detecting if","Fragments":["a"]},{"Key":"contains all","Fragments":["capital"]},{"Key":"letters I","Fragments":["would"]},{"Key":"love a","Fragments":["hint"]},{"Key":"hint because","Fragments":["I"]},{"Key":"not seen","Fragments":["any"]},{"Key":"seen any","Fragments":["functions"]},{"Key":"any functions","Fragments":["that"]},{"Key":"that seem","Fragments":["like"]},{"Key":"of stripping","Fragments":["the"]},{"Key":"punctuation if","Fragments":["anyone"]},{"Key":"Cool, no","Fragments":["prob."]},{"Key":"no prob.","Fragments":["For"]},{"Key":"prob. For","Fragments":["detecting"]},{"Key":"For detecting","Fragments":["silence","all"]},{"Key":"detecting silence","Fragments":["you"]},{"Key":"silence you","Fragments":["could"]},{"Key":"could strip","Fragments":["the"]},{"Key":"whitespace and","Fragments":["then"]},{"Key":"stripped string","Fragments":["with","to"]},{"Key":"with `\"\"`.","Fragments":["For"]},{"Key":"`\"\"`. For","Fragments":["detecting"]},{"Key":"detecting all","Fragments":["caps,"]},{"Key":"caps, you","Fragments":["can"]},{"Key":"can first","Fragments":["make"]},{"Key":"first make","Fragments":["sure"]},{"Key":"string (probably","Fragments":["reuse"]},{"Key":"(probably reuse","Fragments":["the"]},{"Key":"for silence),","Fragments":["and"]},{"Key":"silence), and","Fragments":["then"]},{"Key":"the uppercase","Fragments":["version"]},{"Key":"uppercase version","Fragments":["of"]},{"Key":"is equal","Fragments":["to"]},{"Key":"equal to","Fragments":["the","`b`."]},{"Key":"original version.","Fragments":["If"]},{"Key":"version. If","Fragments":["so,","that"]},{"Key":"so, then","Fragments":["the"]},{"Key":"original was","Fragments":["all"]},{"Key":"all uppercase.","Fragments":[":)"]},{"Key":"have someone","Fragments":["point"]},{"Key":"someone point","Fragments":["that"]},{"Key":"point that","Fragments":["uppercase","out."]},{"Key":"that uppercase","Fragments":["trick"]},{"Key":"uppercase trick","Fragments":["out"]},{"Key":"trick out","Fragments":["to"]},{"Key":"me when","Fragments":["I","I"]},{"Key":"I first","Fragments":["did","submitted","scanned"]},{"Key":"first did","Fragments":["this"]},{"Key":"Ruby. It","Fragments":["seems"]},{"Key":"seems so","Fragments":["obvious"]},{"Key":"so obvious","Fragments":["when"]},{"Key":"just wasn't","Fragments":["coming"]},{"Key":"wasn't coming","Fragments":["to"]},{"Key":"me. Anyway,","Fragments":["you"]},{"Key":"Anyway, you","Fragments":["should"]},{"Key":"do both","Fragments":["of","clean"]},{"Key":"the [String](http://elixir-lang.org/docs/master/String.html)","Fragments":["module."]},{"Key":"[String](http://elixir-lang.org/docs/master/String.html) module.","Fragments":["Hope"]},{"Key":"module. Hope","Fragments":["that"]},{"Key":"Hope that","Fragments":["helps.","helps.","helps."]},{"Key":"on Unicode","Fragments":["in"]},{"Key":"Unicode in","Fragments":["regular"]},{"Key":"Regarding `anything_else`,","Fragments":["I"]},{"Key":"`anything_else`, I","Fragments":["was"]},{"Key":"it improved","Fragments":["readability."]},{"Key":"improved readability.","Fragments":["Given"]},{"Key":"readability. Given","Fragments":["it"]},{"Key":"Given it","Fragments":["is"]},{"Key":"use `true`","Fragments":["for","for"]},{"Key":"clause I","Fragments":["expect"]},{"Key":"expect `anything_else`","Fragments":["did"]},{"Key":"`anything_else` did","Fragments":["not"]},{"Key":"great. One","Fragments":["little"]},{"Key":"little tip:","Fragments":["you","using","in"]},{"Key":"tip: you","Fragments":["can"]},{"Key":"use `\\P{L}`","Fragments":["to"]},{"Key":"`\\P{L}` to","Fragments":["get"]},{"Key":"negation of","Fragments":["`\\p{L}`","`\\p{x}`)."]},{"Key":"of `\\p{L}`","Fragments":["(i.e."]},{"Key":"`\\p{L}` (i.e.","Fragments":["`\\P{L}`"]},{"Key":"(i.e. `\\P{L}`","Fragments":["=="]},{"Key":"`\\P{L}` ==","Fragments":["`[^\\p{L}]`)."]},{"Key":"with true,","Fragments":["people"]},{"Key":"true, people","Fragments":["will"]},{"Key":"will recognise","Fragments":["the"]},{"Key":"recognise the","Fragments":["intention"]},{"Key":"version as","Fragments":["well.","well"]},{"Key":"well. One","Fragments":["thing"]},{"Key":"not `if","Fragments":["arabic"]},{"Key":"`if arabic","Fragments":["\u003c"]},{"Key":"arabic \u003c","Fragments":["value"]},{"Key":"\u003c value","Fragments":["do"]},{"Key":"value do","Fragments":["..."]},{"Key":"else ...","Fragments":["end`?"]},{"Key":"for naming,","Fragments":["if"]},{"Key":"naming, if","Fragments":["I"]},{"Key":"generally go","Fragments":["for"]},{"Key":"like `numerals_worker`","Fragments":["or"]},{"Key":"`numerals_worker` or","Fragments":["`do_numerals`"]},{"Key":"or `do_numerals`","Fragments":["or"]},{"Key":"`do_numerals` or","Fragments":["something"]},{"Key":"that. `numerals_iterator`","Fragments":["might"]},{"Key":"`numerals_iterator` might","Fragments":["also"]},{"Key":"also work","Fragments":["(if"]},{"Key":"work (if","Fragments":["that"]},{"Key":"(if that","Fragments":["function"]},{"Key":"function argument","Fragments":["to"]},{"Key":"the iterator,","Fragments":["can"]},{"Key":"iterator, can","Fragments":["never"]},{"Key":"remember those","Fragments":["terms"]},{"Key":"those terms","Fragments":["to"]},{"Key":"terms to","Fragments":["be"]},{"Key":"a slight","Fragments":["trick","difference"]},{"Key":"slight trick","Fragments":["you"]},{"Key":"trick you","Fragments":["could"]},{"Key":"improve performance.","Fragments":["Erlang"]},{"Key":"performance. Erlang","Fragments":["has"]},{"Key":"of iolists","Fragments":["which"]},{"Key":"iolists which","Fragments":["are"]},{"Key":"are arbitrarily","Fragments":["nested"]},{"Key":"binaries which","Fragments":["can"]},{"Key":"be efficiently","Fragments":["merged","concatenated"]},{"Key":"efficiently merged","Fragments":["using"]},{"Key":"merged using","Fragments":["`iolist_to_binary`."]},{"Key":"using `iolist_to_binary`.","Fragments":["What"]},{"Key":"`iolist_to_binary`. What","Fragments":["you"]},{"Key":"do here","Fragments":["is"]},{"Key":"replace `roman","Fragments":["\u003c\u003e"]},{"Key":"`roman \u003c\u003e","Fragments":["chars`","translate(...)`"]},{"Key":"\u003c\u003e chars`","Fragments":["by"]},{"Key":"chars` by","Fragments":["`[roman,"]},{"Key":"by `[roman,","Fragments":["chars]`"]},{"Key":"`[roman, chars]`","Fragments":["(or"]},{"Key":"chars]` (or","Fragments":["even"]},{"Key":"(or even","Fragments":["`[roman"]},{"Key":"even `[roman","Fragments":["|"]},{"Key":"`[roman |","Fragments":["chars]`,","translate(...)]`"]},{"Key":"| chars]`,","Fragments":["iolists"]},{"Key":"chars]`, iolists","Fragments":["allow"]},{"Key":"iolists allow","Fragments":["that)"]},{"Key":"allow that)","Fragments":["and"]},{"Key":"that) and","Fragments":["call"]},{"Key":"and call","Fragments":["`iolist_to_binary(roman)`","it."]},{"Key":"call `iolist_to_binary(roman)`","Fragments":["at"]},{"Key":"`iolist_to_binary(roman)` at","Fragments":["the"]},{"Key":"Your `count_words`","Fragments":["function"]},{"Key":"`count_words` function","Fragments":["has"]},{"Key":"time complexity,","Fragments":["for"]},{"Key":"complexity, for","Fragments":["each"]},{"Key":"each world","Fragments":["in"]},{"Key":"world in","Fragments":["the"]},{"Key":"list it","Fragments":["has","has","receives."]},{"Key":"word list.","Fragments":["So"]},{"Key":"list. So","Fragments":["for"]},{"Key":"for 100","Fragments":["words"]},{"Key":"100 words","Fragments":["in","100"]},{"Key":"traverse a","Fragments":["list"]},{"Key":"of 100","Fragments":["words"]},{"Key":"words 100","Fragments":["times."]},{"Key":"alternative approach","Fragments":["using"]},{"Key":"using dictionaries","Fragments":["that"]},{"Key":"dictionaries that","Fragments":["runs"]},{"Key":"runs much","Fragments":["faster."]},{"Key":"removing characters","Fragments":["that"]},{"Key":"needed search","Fragments":["for"]},{"Key":"for groups","Fragments":["of","of","of"]},{"Key":"want (for","Fragments":["example"]},{"Key":" pminten:","Fragments":["good"]},{"Key":"pminten: good","Fragments":["point"]},{"Key":"point thanks","Fragments":["for"]},{"Key":"will investigate","Fragments":["a"]},{"Key":"investigate a","Fragments":["approach"]},{"Key":"a approach","Fragments":["using"]},{"Key":" People","Fragments":["will"]},{"Key":"People will","Fragments":["more"]},{"Key":"will more","Fragments":["quickly"]},{"Key":"more quickly","Fragments":["understand"]},{"Key":"quickly understand","Fragments":["the"]},{"Key":"if expression","Fragments":["though,"]},{"Key":"expression though,","Fragments":["it's"]},{"Key":"feedback and","Fragments":["for","the","even","the"]},{"Key":"tip about","Fragments":["iolists."]},{"Key":"about iolists.","Fragments":["I"]},{"Key":"iolists. I","Fragments":["was"]},{"Key":"actually thinking","Fragments":["of"]},{"Key":"of implementing","Fragments":["it"]},{"Key":"character lists,","Fragments":["building"]},{"Key":"lists, building","Fragments":["them"]},{"Key":"building them","Fragments":["with"]},{"Key":"with [","Fragments":["head"]},{"Key":"tail ]","Fragments":["and"]},{"Key":"] and","Fragments":["then"]},{"Key":"then reversing","Fragments":["the"]},{"Key":"list at","Fragments":["the"]},{"Key":"end for","Fragments":["efficiency"]},{"Key":"for efficiency","Fragments":["reasons,"]},{"Key":"efficiency reasons,","Fragments":["but"]},{"Key":"reasons, but","Fragments":["using"]},{"Key":"easier and","Fragments":["easier"]},{"Key":"comprehend when","Fragments":["reading"]},{"Key":"as why","Fragments":["I"]},{"Key":"`case` over","Fragments":["`if`"]},{"Key":"over `if`","Fragments":["`else`,"]},{"Key":"`if` `else`,","Fragments":["basically"]},{"Key":"`else`, basically","Fragments":["just"]},{"Key":"basically just","Fragments":["because","use"]},{"Key":"less line","Fragments":["of"]},{"Key":"it reads.","Fragments":["I"]},{"Key":"reads. I","Fragments":["also"]},{"Key":"just more","Fragments":["lines"]},{"Key":"more lines","Fragments":["of","of"]},{"Key":"more duplication","Fragments":["of"]},{"Key":"matching setup.","Fragments":["After"]},{"Key":"setup. After","Fragments":["trying"]},{"Key":"After trying","Fragments":["all"]},{"Key":"trying all","Fragments":["of"]},{"Key":"those I","Fragments":["thought"]},{"Key":"one looked","Fragments":["the"]},{"Key":"looked the","Fragments":["nicest."]},{"Key":"the callback,","Fragments":["thanks"]},{"Key":"callback, thanks","Fragments":["for"]},{"Key":"naming tips.","Fragments":["After"]},{"Key":"tips. After","Fragments":["thinking"]},{"Key":"After thinking","Fragments":["through"]},{"Key":"I'm ok","Fragments":["with"]},{"Key":"ok with","Fragments":["the"]},{"Key":"current name.","Fragments":["I"]},{"Key":"gives at","Fragments":["least"]},{"Key":"least some","Fragments":["idea"]},{"Key":"some idea","Fragments":["of"]},{"Key":"it's doing,","Fragments":["which"]},{"Key":"doing, which","Fragments":["is"]},{"Key":"I suppose.","Fragments":["I'll"]},{"Key":"suppose. I'll","Fragments":["update"]},{"Key":"Wouldn't `Stream.with_index","Fragments":["|\u003e"]},{"Key":"Enum.reduce` be","Fragments":["an"]},{"Key":"Your typespec","Fragments":["looks"]},{"Key":"typespec looks","Fragments":["pretty"]},{"Key":"good. What","Fragments":["is"]},{"Key":"commonly done","Fragments":["to"]},{"Key":"them clearer","Fragments":["when"]},{"Key":"clearer when","Fragments":["most"]},{"Key":"when most","Fragments":["of"]},{"Key":"types involved","Fragments":["are"]},{"Key":"involved are","Fragments":["'any'"]},{"Key":"are 'any'","Fragments":["is"]},{"Key":"'any' is","Fragments":["to"]},{"Key":"small `@lenora","Fragments":["acc"]},{"Key":"`@lenora acc","Fragments":["::"]},{"Key":"acc ::","Fragments":["any`"]},{"Key":":: any`","Fragments":["above"]},{"Key":"any` above","Fragments":["it"]},{"Key":"above it","Fragments":["so"]},{"Key":"it so","Fragments":["you","you","happens"]},{"Key":"use `acc`","Fragments":["for"]},{"Key":"accumulator values","Fragments":["without"]},{"Key":"values without","Fragments":["changing"]},{"Key":"without changing","Fragments":["the","*hey*,"]},{"Key":"the `reduce_with_index/3`","Fragments":["function"]},{"Key":"`reduce_with_index/3` function","Fragments":["to"]},{"Key":"simplify what","Fragments":["I"]},{"Key":"in `to_decimal`,","Fragments":["and"]},{"Key":"`to_decimal`, and","Fragments":["I"]},{"Key":"pretty generic","Fragments":["and"]},{"Key":"generic and","Fragments":["reusable,"]},{"Key":"and reusable,","Fragments":["so,"]},{"Key":"reusable, so,","Fragments":["mostly"]},{"Key":"so, mostly","Fragments":["for"]},{"Key":"for practice,","Fragments":["I"]},{"Key":"practice, I","Fragments":["extracted"]},{"Key":"extracted it","Fragments":["out"]},{"Key":"helper module","Fragments":["I"]},{"Key":"module I","Fragments":["just"]},{"Key":"just called","Fragments":["`ExtendedEnum`,"]},{"Key":"called `ExtendedEnum`,","Fragments":["complete"]},{"Key":"`ExtendedEnum`, complete","Fragments":["with"]},{"Key":"complete with","Fragments":["spec"]},{"Key":"with spec","Fragments":["and"]},{"Key":"spec and","Fragments":["docs"]},{"Key":"and docs","Fragments":["with"]},{"Key":"docs with","Fragments":["examples."]},{"Key":"with examples.","Fragments":["I"]},{"Key":"examples. I","Fragments":["don't"]},{"Key":"much experience","Fragments":["writing"]},{"Key":"experience writing","Fragments":["specs,"]},{"Key":"writing specs,","Fragments":["so"]},{"Key":"specs, so","Fragments":["I'm"]},{"Key":"on that,","Fragments":["too,"]},{"Key":"that, too,","Fragments":["if"]},{"Key":"too, if","Fragments":["you're"]},{"Key":"you're willing","Fragments":["to"]},{"Key":"give it,","Fragments":["even"]},{"Key":"it, even","Fragments":["though"]},{"Key":"necessarily part","Fragments":["of"]},{"Key":"Unfortunately having","Fragments":["that"]},{"Key":"extra module","Fragments":["kind"]},{"Key":"module kind","Fragments":["of"]},{"Key":"of clutters","Fragments":["up"]},{"Key":"clutters up","Fragments":["the"]},{"Key":"exercise here","Fragments":["being"]},{"Key":"here being","Fragments":["at"]},{"Key":"being at","Fragments":["the"]},{"Key":"the help","Fragments":["pminten.","page"]},{"Key":"suggestion on","Fragments":["aliasing","using"]},{"Key":"on aliasing","Fragments":["`any`"]},{"Key":"aliasing `any`","Fragments":["to"]},{"Key":"`any` to","Fragments":["`acc`"]},{"Key":"to `acc`","Fragments":["for"]},{"Key":"spec. That","Fragments":["does"]},{"Key":" Ah...","Fragments":["`Stream.with_index`..."]},{"Key":"Ah... `Stream.with_index`...","Fragments":["cool."]},{"Key":"`Stream.with_index`... cool.","Fragments":["I"]},{"Key":"looked through","Fragments":["`Enum`"]},{"Key":"through `Enum`","Fragments":["trying"]},{"Key":"`Enum` trying","Fragments":["to"]},{"Key":"see it.","Fragments":["I"]},{"Key":"think maybe","Fragments":["because","part"]},{"Key":"was expecting","Fragments":["it"]},{"Key":"expecting it","Fragments":["to"]},{"Key":"be `each_with_index`","Fragments":["like"]},{"Key":"`each_with_index` like","Fragments":["Ruby"]},{"Key":"didn't notice","Fragments":["it"]},{"Key":"notice it","Fragments":["down"]},{"Key":"down near","Fragments":["the"]},{"Key":"the bottom.","Fragments":["Yeah,"]},{"Key":"bottom. Yeah,","Fragments":["that"]},{"Key":"Yeah, that","Fragments":["eliminates","is"]},{"Key":"that eliminates","Fragments":["the"]},{"Key":"my custom","Fragments":["helper.","`reduce_with_index`."]},{"Key":"custom helper.","Fragments":["I'll"]},{"Key":"helper. I'll","Fragments":["submit"]},{"Key":"Using `Stream.with_index`","Fragments":["with"]},{"Key":"`Stream.with_index` with","Fragments":["`Enum.reduce`"]},{"Key":"with `Enum.reduce`","Fragments":["instead","you","we"]},{"Key":"custom `reduce_with_index`.","Fragments":[":)"]},{"Key":"always so","Fragments":["easy"]},{"Key":"so easy","Fragments":["to"]},{"Key":"to underestimate","Fragments":["dates"]},{"Key":"underestimate dates","Fragments":["related"]},{"Key":"dates related","Fragments":["tasks..."]},{"Key":"based off","Fragments":["of"]},{"Key":"off of","Fragments":["reversing"]},{"Key":"of reversing","Fragments":["an"]},{"Key":"reversing an","Fragments":["algorithm"]},{"Key":"an algorithm","Fragments":["on"]},{"Key":"algorithm on","Fragments":["wikipedia."]},{"Key":"on wikipedia.","Fragments":["It's"]},{"Key":"wikipedia. It's","Fragments":["mostly"]},{"Key":"It's mostly","Fragments":["table"]},{"Key":"mostly table","Fragments":["lookups"]},{"Key":"table lookups","Fragments":["and"]},{"Key":"lookups and","Fragments":["simple"]},{"Key":"simple math","Fragments":["so"]},{"Key":"math so","Fragments":["it"]},{"Key":"be relatively","Fragments":["fast,"]},{"Key":"relatively fast,","Fragments":["but"]},{"Key":"fast, but","Fragments":["at"]},{"Key":"In retrospect,","Fragments":["it"]},{"Key":"retrospect, it","Fragments":["would"]},{"Key":"simpler algorithm","Fragments":["that"]},{"Key":"that involved","Fragments":["more"]},{"Key":"involved more","Fragments":["calculation."]},{"Key":"more calculation.","Fragments":["It"]},{"Key":"calculation. It","Fragments":["would"]},{"Key":"be negligibly","Fragments":["slower"]},{"Key":"negligibly slower","Fragments":["and"]},{"Key":"slower and","Fragments":["negligibly"]},{"Key":"and negligibly","Fragments":["less"]},{"Key":"negligibly less","Fragments":["memory"]},{"Key":"less memory","Fragments":["intensive,"]},{"Key":"memory intensive,","Fragments":["but"]},{"Key":"intensive, but","Fragments":["mainly"]},{"Key":"mainly it","Fragments":["would"]},{"Key":"more understandable,","Fragments":["which"]},{"Key":"understandable, which","Fragments":["for"]},{"Key":"which for","Fragments":["a"]},{"Key":"probably by","Fragments":["far"]},{"Key":" Often","Fragments":["code"]},{"Key":"Often code","Fragments":["with"]},{"Key":"recursion can","Fragments":["be"]},{"Key":"as `Enum.reduce`.","Fragments":["It's"]},{"Key":"`Enum.reduce`. It's","Fragments":["also"]},{"Key":"also easier","Fragments":["to"]},{"Key":"avoid accidental","Fragments":["errors"]},{"Key":"accidental errors","Fragments":["that"]},{"Key":"errors that","Fragments":["way."]},{"Key":"1. this","Fragments":["might"]},{"Key":"be true","Fragments":["on"]},{"Key":"true on","Fragments":["all"]},{"Key":"all cases","Fragments":["quick","So"]},{"Key":"cases quick","Fragments":["look"]},{"Key":"quick look","Fragments":["at"]},{"Key":"the suitcase","Fragments":["you"]},{"Key":"suitcase you","Fragments":["will"]},{"Key":"will notice","Fragments":["that"]},{"Key":"notice that","Fragments":["the","you're"]},{"Key":"word holds","Fragments":["enough"]},{"Key":"holds enough","Fragments":["hints"]},{"Key":"enough hints","Fragments":["to"]},{"Key":"tests. on","Fragments":["all"]},{"Key":"cases So","Fragments":["yes"]},{"Key":"So yes","Fragments":["if"]},{"Key":"yes if","Fragments":["you"]},{"Key":"force developers","Fragments":["to"]},{"Key":"developers to","Fragments":["use"]},{"Key":"string the","Fragments":["test"]},{"Key":"test suit","Fragments":["needs"]},{"Key":"suit needs","Fragments":["improvements."]},{"Key":"2. let","Fragments":["me"]},{"Key":"me see","Fragments":["if","what"]},{"Key":"if i","Fragments":["can"]},{"Key":"figure this","Fragments":["out."]},{"Key":"use \"or\"","Fragments":["clause"]},{"Key":"\"or\" clause","Fragments":["to"]},{"Key":"to combine","Fragments":["the","them."]},{"Key":"two expressions","Fragments":["but"]},{"Key":"expressions but","Fragments":["thats"]},{"Key":"but thats","Fragments":["just"]},{"Key":"thats just","Fragments":["the"]},{"Key":"separate \"cond\"","Fragments":["expressions."]},{"Key":"3. i","Fragments":["will"]},{"Key":"submit another","Fragments":["iteration"]},{"Key":"iteration with","Fragments":["comments"]},{"Key":"with comments","Fragments":["on"]},{"Key":"your comments,","Fragments":["and"]},{"Key":"comments, and","Fragments":["sorry"]},{"Key":"and sorry","Fragments":["for"]},{"Key":"the delayed","Fragments":["response."]},{"Key":"P.S. i","Fragments":["am"]},{"Key":"i am","Fragments":["new"]},{"Key":"this website,","Fragments":["i"]},{"Key":"website, i","Fragments":["couldn't"]},{"Key":"i couldn't","Fragments":["figure"]},{"Key":"out, how","Fragments":["to"]},{"Key":"review other","Fragments":["people"]},{"Key":"people answers","Fragments":["or"]},{"Key":"answers or","Fragments":["code."]},{"Key":"or code.","Fragments":["How"]},{"Key":"code. How","Fragments":["did"]},{"Key":"How did","Fragments":["you"]},{"Key":"about my","Fragments":["answer?"]},{"Key":"do use","Fragments":["`\\pL`"]},{"Key":"use `\\pL`","Fragments":["in"]},{"Key":"`\\pL` in","Fragments":["the"]},{"Key":"one style","Fragments":["improvement"]},{"Key":"style improvement","Fragments":["you"]},{"Key":"make: `String.ends_with?(input,","Fragments":["\"?\")`"]},{"Key":"`String.ends_with?(input, \"?\")`","Fragments":["instead"]},{"Key":"\"?\")` instead","Fragments":["of"]},{"Key":"great. There","Fragments":["are"]},{"Key":"few little","Fragments":["things"]},{"Key":"little things","Fragments":["I'd"]},{"Key":" `\\w`","Fragments":["is"]},{"Key":"is said","Fragments":["to"]},{"Key":"said to","Fragments":["match"]},{"Key":"match word","Fragments":["characters"]},{"Key":"characters but","Fragments":["it's"]},{"Key":"it's definition","Fragments":["of"]},{"Key":"bit weird.","Fragments":["Underscores","It"]},{"Key":"weird. Underscores","Fragments":["are"]},{"Key":"Underscores are","Fragments":["considered"]},{"Key":"but hyphens","Fragments":["(such"]},{"Key":"hyphens (such","Fragments":["as"]},{"Key":"in perfectly","Fragments":["normal"]},{"Key":"perfectly normal","Fragments":["words"]},{"Key":"normal words","Fragments":["like"]},{"Key":"like co-operative)","Fragments":["aren't."]},{"Key":" `List.first`","Fragments":["could"]},{"Key":"`List.first` could","Fragments":["be"]},{"Key":"by `hd`.","Fragments":["There's"]},{"Key":"`hd`. There's","Fragments":["a"]},{"Key":"slight difference","Fragments":["in"]},{"Key":"that `hd`","Fragments":["will"]},{"Key":"`hd` will","Fragments":["throw"]},{"Key":"will throw","Fragments":["an"]},{"Key":"while `List.first`","Fragments":["would"]},{"Key":"`List.first` would","Fragments":["return"]},{"Key":"return `nil`.","Fragments":["In"]},{"Key":"`nil`. In","Fragments":["this"]},{"Key":"exception is","Fragments":["probably","`HashDict.new`"]},{"Key":"more desirable","Fragments":["as"]},{"Key":"desirable as","Fragments":["you"]},{"Key":"to operate","Fragments":["on"]},{"Key":"on empty","Fragments":["lists,"]},{"Key":"empty lists,","Fragments":["whereas"]},{"Key":"lists, whereas","Fragments":["with"]},{"Key":"whereas with","Fragments":["`List.first`"]},{"Key":"with `List.first`","Fragments":["you'd"]},{"Key":"`List.first` you'd","Fragments":["silently"]},{"Key":"you'd silently","Fragments":["end"]},{"Key":"silently end","Fragments":["up"]},{"Key":"an entry","Fragments":["with"]},{"Key":"entry with","Fragments":["key"]},{"Key":"with key","Fragments":["`nil`"]},{"Key":"key `nil`","Fragments":["in"]},{"Key":"`nil` in","Fragments":["the"]},{"Key":"Hi, a","Fragments":["few"]},{"Key":"few comments","Fragments":["on"]},{"Key":"1. The","Fragments":["tests","test"]},{"Key":"tests often","Fragments":["aren't"]},{"Key":"aren't perfect,","Fragments":["but"]},{"Key":"perfect, but","Fragments":["the"]},{"Key":"really to","Fragments":["just","flatten"]},{"Key":"a conversation","Fragments":["about"]},{"Key":"conversation about","Fragments":["what"]},{"Key":"like. Good","Fragments":["code"]},{"Key":"Good code","Fragments":["often"]},{"Key":"code often","Fragments":["goes"]},{"Key":"often goes","Fragments":["above"]},{"Key":"goes above","Fragments":["and"]},{"Key":"above and","Fragments":["beyond"]},{"Key":"and beyond","Fragments":["what"]},{"Key":"beyond what","Fragments":["the"]},{"Key":"tests require,","Fragments":["because"]},{"Key":"require, because","Fragments":["tests"]},{"Key":"because tests","Fragments":["can't"]},{"Key":"tests can't","Fragments":["check"]},{"Key":"can't check","Fragments":["everything."]},{"Key":"clauses `word","Fragments":["=="]},{"Key":"String.upcase word`","Fragments":["and"]},{"Key":"word` and","Fragments":["`(String.ends_with?"]},{"Key":"and `(String.ends_with?","Fragments":["word,"]},{"Key":"`(String.ends_with? word,","Fragments":["\"!\")"]},{"Key":"word, \"!\")","Fragments":["and"]},{"Key":"\"!\") and","Fragments":["(word","word"]},{"Key":"and (word","Fragments":["=="]},{"Key":"(word ==","Fragments":["String.upcase"]},{"Key":"String.upcase word)`.","Fragments":["Let"]},{"Key":"word)`. Let","Fragments":["me"]},{"Key":"me rephrase","Fragments":["that"]},{"Key":"rephrase that","Fragments":["in"]},{"Key":"an abstract","Fragments":["way:"]},{"Key":"abstract way:","Fragments":["clauses"]},{"Key":"way: clauses","Fragments":["`P`"]},{"Key":"clauses `P`","Fragments":["and"]},{"Key":"`P` and","Fragments":["`Q"]},{"Key":"and `Q","Fragments":["and"]},{"Key":"`Q and","Fragments":["P`."]},{"Key":"and P`.","Fragments":["As"]},{"Key":"P`. As","Fragments":["you"]},{"Key":"you correctly","Fragments":["note"]},{"Key":"correctly note","Fragments":["the"]},{"Key":"note the","Fragments":["two"]},{"Key":"are equivalent","Fragments":["to"]},{"Key":"an or:","Fragments":["`P"]},{"Key":"or: `P","Fragments":["or"]},{"Key":"`P or","Fragments":["(Q","(Q"]},{"Key":"or (Q","Fragments":["and","and"]},{"Key":"(Q and","Fragments":["P)`.","P)`"]},{"Key":"and P)`.","Fragments":["The"]},{"Key":"P)`. The","Fragments":["thing"]},{"Key":"thing here","Fragments":["is"]},{"Key":"the truth","Fragments":["of"]},{"Key":"truth of","Fragments":["`P"]},{"Key":"of `P","Fragments":["or"]},{"Key":"and P)`","Fragments":["depends"]},{"Key":"P)` depends","Fragments":["solely"]},{"Key":"depends solely","Fragments":["on"]},{"Key":"solely on","Fragments":["P,"]},{"Key":"on P,","Fragments":["if"]},{"Key":"P, if","Fragments":["P"]},{"Key":"if P","Fragments":["(`word"]},{"Key":"P (`word","Fragments":["=="]},{"Key":"(`word ==","Fragments":["String.upcase"]},{"Key":"String.upcase word`)","Fragments":["is"]},{"Key":"word`) is","Fragments":["true"]},{"Key":"true then","Fragments":["the"]},{"Key":"clause matches,","Fragments":["regardless"]},{"Key":"matches, regardless","Fragments":["of"]},{"Key":"of Q","Fragments":["(`String.ends_with?"]},{"Key":"Q (`String.ends_with?","Fragments":["word,"]},{"Key":"(`String.ends_with? word,","Fragments":["\"!\")."]},{"Key":"word, \"!\").","Fragments":["If"]},{"Key":"\"!\"). If","Fragments":["P"]},{"Key":"If P","Fragments":["is"]},{"Key":"P is","Fragments":["false"]},{"Key":"false then","Fragments":["the"]},{"Key":"clause doesn't","Fragments":["match,"]},{"Key":"doesn't match,","Fragments":["regardless"]},{"Key":"match, regardless","Fragments":["of"]},{"Key":" Reviewing","Fragments":["the"]},{"Key":"Reviewing the","Fragments":["code"]},{"Key":"code of","Fragments":["others"]},{"Key":"of others","Fragments":["is"]},{"Key":"others is","Fragments":["only"]},{"Key":"only possible","Fragments":["for"]},{"Key":"for exercises","Fragments":["you've"]},{"Key":"you've completed","Fragments":["yourself.","your"]},{"Key":"completed yourself.","Fragments":["As"]},{"Key":"yourself. As","Fragments":["you"]},{"Key":"haven't completed","Fragments":["an"]},{"Key":"completed an","Fragments":["exercise"]},{"Key":"can't comment","Fragments":["yet."]},{"Key":"comment yet.","Fragments":["If"]},{"Key":"yet. If","Fragments":["there"]},{"Key":"are submissions","Fragments":["you"]},{"Key":"submissions you","Fragments":["can"]},{"Key":"can comment","Fragments":["on"]},{"Key":"the website","Fragments":["will"]},{"Key":"website will","Fragments":["tell"]},{"Key":"will tell","Fragments":["you."]},{"Key":"parentheses explicitly,","Fragments":["for"]},{"Key":"explicitly, for","Fragments":["example"]},{"Key":"example `String.ends_with?(word,","Fragments":["\"!\")"]},{"Key":"`String.ends_with?(word, \"!\")","Fragments":["and"]},{"Key":"and word","Fragments":["=="]},{"Key":"word ==","Fragments":["String.upcase","\"\""]},{"Key":" @harvey,","Fragments":["yeah,"]},{"Key":"@harvey, yeah,","Fragments":["the"]},{"Key":"site is","Fragments":["a"]},{"Key":"little confusing","Fragments":["right"]},{"Key":"confusing right","Fragments":["now."]},{"Key":"now. Katrina","Fragments":["Owen"]},{"Key":"Katrina Owen","Fragments":["is"]},{"Key":"Owen is","Fragments":["working"]},{"Key":"working hard","Fragments":["on"]},{"Key":"a redesign","Fragments":["that"]},{"Key":"redesign that","Fragments":["will"]},{"Key":"will hopefully","Fragments":["make"]},{"Key":"hopefully make","Fragments":["it"]},{"Key":"time users","Fragments":["how"]},{"Key":"users how","Fragments":["it"]},{"Key":"to expect.","Fragments":["@harvey"]},{"Key":"expect. @harvey","Fragments":["explained"]},{"Key":"@harvey explained","Fragments":["it"]},{"Key":"explained it","Fragments":["well,","made","to"]},{"Key":"it well,","Fragments":["but"]},{"Key":"but yeah,","Fragments":["you"]},{"Key":"yeah, you","Fragments":["will","are"]},{"Key":"nitpick once","Fragments":["you've"]},{"Key":"completed your","Fragments":["first"]},{"Key":"first exercise,","Fragments":["and"]},{"Key":"exercise, and","Fragments":["by"]},{"Key":"and by","Fragments":["\"completed\""]},{"Key":"by \"completed\"","Fragments":["right"]},{"Key":"\"completed\" right","Fragments":["now"]},{"Key":"mean when","Fragments":["you"]},{"Key":"you click","Fragments":["the"]},{"Key":"click the","Fragments":["button"]},{"Key":"button that","Fragments":["says"]},{"Key":"says \"Ok,","Fragments":["I'm"]},{"Key":"\"Ok, I'm","Fragments":["done."]},{"Key":"I'm done.","Fragments":["I"]},{"Key":"want any","Fragments":["more"]},{"Key":"on this.\"","Fragments":["Basically,"]},{"Key":"this.\" Basically,","Fragments":["once"]},{"Key":"Basically, once","Fragments":["you"]},{"Key":"are satisfied","Fragments":["with"]},{"Key":"on \"bob\"","Fragments":["you"]},{"Key":"\"bob\" you","Fragments":["can"]},{"Key":"you're done,","Fragments":["and"]},{"Key":"done, and","Fragments":["then"]},{"Key":"nitpick other","Fragments":["people's"]},{"Key":"people's \"bob\"","Fragments":["submissions."]},{"Key":"\"bob\" submissions.","Fragments":["And"]},{"Key":"submissions. And","Fragments":["the"]},{"Key":"process just","Fragments":["continues"]},{"Key":"just continues","Fragments":["like"]},{"Key":"continues like","Fragments":["that."]},{"Key":"the site!","Fragments":["The"]},{"Key":"site! The","Fragments":["Elixir"]},{"Key":"Elixir track","Fragments":["is"]},{"Key":"track is","Fragments":["a"]},{"Key":"great one","Fragments":["because"]},{"Key":"because @harvey","Fragments":["stays"]},{"Key":"@harvey stays","Fragments":["on"]},{"Key":"stays on","Fragments":["top"]},{"Key":"of nitpicking","Fragments":["(and"]},{"Key":"nitpicking (and","Fragments":["I"]},{"Key":"to jump","Fragments":["in"]},{"Key":"jump in","Fragments":["there"]},{"Key":"there too)","Fragments":["so"]},{"Key":"too) so","Fragments":["you"]},{"Key":"you tend","Fragments":["to"]},{"Key":"lot quicker","Fragments":["feedback"]},{"Key":"quicker feedback","Fragments":["than"]},{"Key":"feedback than","Fragments":["on"]},{"Key":"than on","Fragments":["some"]},{"Key":"other tracks.","Fragments":[":)"]},{"Key":"the feedback....gotta","Fragments":["get"]},{"Key":"feedback....gotta get","Fragments":["used"]},{"Key":"`List.zip` might","Fragments":["come","come"]},{"Key":"might come","Fragments":["in","in"]},{"Key":"List.zip _is_","Fragments":["handy."]},{"Key":"figuring list","Fragments":["comprehensions"]},{"Key":"and alot","Fragments":["of"]},{"Key":"alot of","Fragments":["other"]},{"Key":"other Elixir","Fragments":["idioms,"]},{"Key":"idioms, so","Fragments":["I"]},{"Key":"conditional and","Fragments":["individual","rely"]},{"Key":"and individual","Fragments":["functions"]},{"Key":"individual functions","Fragments":["to","for"]},{"Key":"The russian","Fragments":["language"]},{"Key":"russian language","Fragments":["was"]},{"Key":"language was","Fragments":["particularly"]},{"Key":"was particularly","Fragments":["hard...I"]},{"Key":"particularly hard...I","Fragments":["think"]},{"Key":"hard...I think","Fragments":["my"]},{"Key":"is pre","Fragments":["0.12.2"]},{"Key":"pre 0.12.2","Fragments":["and"]},{"Key":"0.12.2 and","Fragments":["it"]},{"Key":"Unicode upcase","Fragments":["--"]},{"Key":"upcase --","Fragments":["so"]},{"Key":"-- so","Fragments":["I"]},{"Key":"just slapped","Fragments":["the"]},{"Key":"slapped the","Fragments":["characters"]},{"Key":"of elixir,","Fragments":["I"]},{"Key":"elixir, I","Fragments":["know","did"]},{"Key":"there needs","Fragments":["to"]},{"Key":"some extraction","Fragments":["here."]},{"Key":"extraction here.","Fragments":["Still"]},{"Key":"here. Still","Fragments":["digging"]},{"Key":"Still digging","Fragments":["into"]},{"Key":"and idiomatically.","Fragments":["I"]},{"Key":"idiomatically. I","Fragments":["am"]},{"Key":"somewhat scared","Fragments":["(probably","to"]},{"Key":"scared (probably","Fragments":["needlessly)"]},{"Key":"(probably needlessly)","Fragments":["that"]},{"Key":"needlessly) that","Fragments":["I"]},{"Key":"get some","Fragments":["OO","feedback"]},{"Key":"some OO","Fragments":["in"]},{"Key":"OO in","Fragments":["my"]},{"Key":"unsure if","Fragments":["there"]},{"Key":"did some","Fragments":["basic"]},{"Key":"some basic","Fragments":["extraction","syntactic"]},{"Key":"basic extraction","Fragments":["but"]},{"Key":"extraction but","Fragments":["it"]},{"Key":"feel as","Fragments":["natural"]},{"Key":"as natural","Fragments":["when"]},{"Key":"natural when","Fragments":["trying"]},{"Key":"when trying","Fragments":["to"]},{"Key":"things immutable.","Fragments":["That"]},{"Key":"immutable. That","Fragments":["might"]},{"Key":"are here,","Fragments":["but"]},{"Key":"but hope","Fragments":["to"]},{"Key":"hope to","Fragments":["get"]},{"Key":"how badly","Fragments":["I"]},{"Key":"badly I","Fragments":["am"]},{"Key":"am missing","Fragments":["this"]},{"Key":"missing this","Fragments":["one."]},{"Key":"Indeed. You've","Fragments":["avoided"]},{"Key":"avoided all","Fragments":["the","of"]},{"Key":"the usual","Fragments":["pitfalls","pitfalls"]},{"Key":"usual pitfalls","Fragments":["(no","(no"]},{"Key":"pitfalls (no","Fragments":["tail","tail"]},{"Key":"(no tail","Fragments":["recursion","recursion"]},{"Key":"left folding","Fragments":["with","over","concat","concat"]},{"Key":"folding with","Fragments":["append)."]},{"Key":" Two","Fragments":["tiny"]},{"Key":"Two tiny","Fragments":["nits:"]},{"Key":"tiny nits:","Fragments":["it's"]},{"Key":"nits: it's","Fragments":["often"]},{"Key":"idea not","Fragments":["to"]},{"Key":"`//` (which","Fragments":["has"]},{"Key":"(which has","Fragments":["changed"]},{"Key":"has changed","Fragments":["to"]},{"Key":"to `\\\\`","Fragments":["in"]},{"Key":"`\\\\` in","Fragments":["the"]},{"Key":"recent version","Fragments":["btw)"]},{"Key":"version btw)","Fragments":["syntax"]},{"Key":"btw) syntax","Fragments":["for"]},{"Key":"for accumulators","Fragments":["if"]},{"Key":"accumulators if","Fragments":["the"]},{"Key":"defp do_count([],","Fragments":["acc),","hash)","hash),"]},{"Key":"do_count([], acc),","Fragments":["do:"]},{"Key":"defp do_count([_|t],","Fragments":["acc),"]},{"Key":"do_count([_|t], acc),","Fragments":["do:"]},{"Key":"do: do_count(t,","Fragments":["acc+1)"]},{"Key":"not exposing","Fragments":["the"]},{"Key":"the internal","Fragments":["helper.","methods."]},{"Key":"A second","Fragments":["minor"]},{"Key":"second minor","Fragments":["nit:"]},{"Key":"nit: `case","Fragments":["func.(head)"]},{"Key":"`case func.(head)","Fragments":["of"]},{"Key":"func.(head) of","Fragments":["true"]},{"Key":"of true","Fragments":["-\u003e"]},{"Key":"-\u003e ...`","Fragments":["is"]},{"Key":"...` is","Fragments":["usually"]},{"Key":"written `if","Fragments":["func.(head)"]},{"Key":"`if func.(head)","Fragments":["do`."]},{"Key":"func.(head) do`.","Fragments":["It's"]},{"Key":"do`. It's","Fragments":["more"]},{"Key":"immediately obvious","Fragments":["what's"]},{"Key":"obvious what's","Fragments":["going"]},{"Key":"unicode issue","Fragments":["you"]},{"Key":"issue you","Fragments":["can"]},{"Key":"can append","Fragments":["`u`"]},{"Key":"append `u`","Fragments":["to"]},{"Key":"`u` to","Fragments":["the"]},{"Key":"in pre","Fragments":["0.12.2:"]},{"Key":"pre 0.12.2:","Fragments":["`%r/\\p{L}/u`"]},{"Key":"0.12.2: `%r/\\p{L}/u`","Fragments":["(`\\p{L}`"]},{"Key":"`%r/\\p{L}/u` (`\\p{L}`","Fragments":["="]},{"Key":"(`\\p{L}` =","Fragments":["any"]},{"Key":"= any","Fragments":["unicode"]},{"Key":"any unicode","Fragments":["letter).","letter?"]},{"Key":"you included","Fragments":["that"]},{"Key":"included that","Fragments":["__info__."]},{"Key":"that __info__.","Fragments":["The"]},{"Key":"__info__. The","Fragments":["one"]},{"Key":"one argument","Fragments":["__info__"]},{"Key":"argument __info__","Fragments":["function"]},{"Key":"__info__ function","Fragments":["is"]},{"Key":"something advanced","Fragments":["used"]},{"Key":"advanced used","Fragments":["mainly"]},{"Key":"used mainly","Fragments":["by"]},{"Key":"mainly by","Fragments":["the"]},{"Key":"and standard","Fragments":["library."]},{"Key":"A variable","Fragments":["name"]},{"Key":"name prefixed","Fragments":["with"]},{"Key":"an underscore","Fragments":["is","is"]},{"Key":"usually used","Fragments":["to"]},{"Key":"indicate the","Fragments":["variable"]},{"Key":"variable isn't","Fragments":["used"]},{"Key":"isn't used","Fragments":["(often"]},{"Key":"used (often","Fragments":["useful"]},{"Key":"(often useful","Fragments":["in"]},{"Key":" Odd,","Fragments":["that"]},{"Key":"Odd, that","Fragments":["shouldn't"]},{"Key":"shouldn't happen.","Fragments":["What"]},{"Key":"happen. What","Fragments":["version"]},{"Key":" @percival","Fragments":["it"]},{"Key":"@percival it","Fragments":["was"]},{"Key":"test error","Fragments":["I"]},{"Key":"error I","Fragments":["got"]},{"Key":"got that","Fragments":["no","thx!"]},{"Key":"no __info__","Fragments":["was"]},{"Key":"__info__ was","Fragments":["defined"]},{"Key":"to reformat","Fragments":["the"]},{"Key":"reformat the","Fragments":["code"]},{"Key":"not mostly","Fragments":["one"]},{"Key":"mostly one","Fragments":["liner."]},{"Key":"one liner.","Fragments":["Other"]},{"Key":"liner. Other","Fragments":["than"]},{"Key":"much surprised","Fragments":["here."]},{"Key":"Surely you","Fragments":["can"]},{"Key":"can pre-compute","Fragments":["the"]},{"Key":"pre-compute the","Fragments":["planet"]},{"Key":"the planet","Fragments":["periods"]},{"Key":"planet periods","Fragments":["in"]},{"Key":"periods in","Fragments":["seconds"]},{"Key":"in seconds","Fragments":["rather"]},{"Key":"seconds rather","Fragments":["than"]},{"Key":"than years","Fragments":["..."]},{"Key":"find `Enum.count`","Fragments":["handy"]},{"Key":"`Enum.count` handy","Fragments":["as"]},{"Key":"handy as","Fragments":["well."]},{"Key":"Thank you,","Fragments":["both"]},{"Key":"you, both","Fragments":["for"]},{"Key":"awesome site,","Fragments":["and"]},{"Key":"site, and","Fragments":["it"]},{"Key":"can not","Fragments":["review"]},{"Key":"not review","Fragments":["exercises"]},{"Key":"review exercises","Fragments":["until"]},{"Key":"exercises until","Fragments":["i"]},{"Key":"until i","Fragments":["complete"]},{"Key":"i complete","Fragments":["them"]},{"Key":"complete them","Fragments":["("]},{"Key":"them (","Fragments":["maybe"]},{"Key":"( maybe","Fragments":["this"]},{"Key":"be mentioned","Fragments":["in"]},{"Key":"the Nitpick","Fragments":["help"]},{"Key":"Nitpick help","Fragments":["page?)."]},{"Key":" now","Fragments":["for"]},{"Key":"code, now","Fragments":["i"]},{"Key":"now i","Fragments":["realise"]},{"Key":"i realise","Fragments":["that"]},{"Key":"realise that","Fragments":["i"]},{"Key":"i did","Fragments":["a","it"]},{"Key":"a stupid","Fragments":["mistake,"]},{"Key":"stupid mistake,","Fragments":["i"]},{"Key":"mistake, i","Fragments":["can't"]},{"Key":"i can't","Fragments":["remember"]},{"Key":"why i","Fragments":["did"]},{"Key":"way but","Fragments":["i","I"]},{"Key":"of \"cond\"","Fragments":["expressions"]},{"Key":"\"cond\" expressions","Fragments":["is"]},{"Key":"important (unlike","Fragments":["using"]},{"Key":"(unlike using","Fragments":["\"or\")."]},{"Key":"using \"or\").","Fragments":["However,"]},{"Key":"\"or\"). However,","Fragments":["this"]},{"Key":"However, this","Fragments":["code"]},{"Key":"doesn't even","Fragments":["pass"]},{"Key":"even pass","Fragments":["the"]},{"Key":"test !","Fragments":["("]},{"Key":"! (","Fragments":["it"]},{"Key":"( it","Fragments":["was"]},{"Key":"was passing","Fragments":["the"]},{"Key":"test when","Fragments":["i"]},{"Key":"when i","Fragments":["submitted"]},{"Key":"i submitted","Fragments":["before"]},{"Key":"submitted before","Fragments":["5"]},{"Key":"before 5","Fragments":["days,"]},{"Key":"5 days,","Fragments":["did"]},{"Key":"days, did","Fragments":["the"]},{"Key":"test change?)","Fragments":["i"]},{"Key":"change?) i","Fragments":["found"]},{"Key":"i found","Fragments":["out"]},{"Key":"found out","Fragments":["that","there's"]},{"Key":"i don't","Fragments":["need"]},{"Key":"for exclamation","Fragments":["mark."]},{"Key":" neat","Fragments":["!"]},{"Key":"you counting","Fragments":["unique"]},{"Key":"counting unique","Fragments":["words"]},{"Key":"unique words","Fragments":["only?","and"]},{"Key":"2) elixir","Fragments":["has"]},{"Key":"called Pipe","Fragments":["operator"]},{"Key":"Pipe operator","Fragments":["`|\u003e`"]},{"Key":"operator `|\u003e`","Fragments":[","]},{"Key":"`|\u003e` ,","Fragments":["it"]},{"Key":"Simplified by","Fragments":["using"]},{"Key":" @tessie","Fragments":["you"]},{"Key":"@tessie you","Fragments":["are"]},{"Key":"right, didn't","Fragments":["think"]},{"Key":"up unwanted","Fragments":["symbols,"]},{"Key":"unwanted symbols,","Fragments":["i"]},{"Key":"symbols, i","Fragments":["guess"]},{"Key":"i guess","Fragments":["i"]},{"Key":"guess i","Fragments":["picked"]},{"Key":"i picked","Fragments":["the"]},{"Key":"picked the","Fragments":["lazy"]},{"Key":"the lazy","Fragments":["way"]},{"Key":"lazy way","Fragments":["of"]},{"Key":"Sure, this","Fragments":["works."]},{"Key":"works. Note","Fragments":["that"]},{"Key":"exercise ask","Fragments":["you"]},{"Key":"ask you","Fragments":["to"]},{"Key":"avoid existing","Fragments":["functions"]},{"Key":"existing functions","Fragments":["though."]},{"Key":" LOL;","Fragments":["my"]},{"Key":"LOL; my","Fragments":["bad!"]},{"Key":"my bad!","Fragments":["I'll"]},{"Key":"bad! I'll","Fragments":["change"]},{"Key":"change them","Fragments":[":p"]},{"Key":"Alternatively it's","Fragments":["possible,"]},{"Key":"it's possible,","Fragments":["though"]},{"Key":"possible, though","Fragments":["probably"]},{"Key":"though probably","Fragments":["slightly"]},{"Key":"probably slightly","Fragments":["slower,"]},{"Key":"slightly slower,","Fragments":["to"]},{"Key":"slower, to","Fragments":["implement"]},{"Key":"Well you","Fragments":["could","would"]},{"Key":"regex, `\\p{L}`","Fragments":["matches"]},{"Key":"every letter","Fragments":["for"]},{"Key":"letter for","Fragments":["which"]},{"Key":"which `[A-Z]`","Fragments":["matches."]},{"Key":"The `question?`","Fragments":["function"]},{"Key":"`question?` function","Fragments":["could"]},{"Key":"separate `Greeting`","Fragments":["module"]},{"Key":"`Greeting` module","Fragments":["isn't"]},{"Key":"module isn't","Fragments":["wrong"]},{"Key":"wrong but","Fragments":["you"]},{"Key":"alternatively write","Fragments":["those"]},{"Key":"write those","Fragments":["predicate"]},{"Key":"those predicate","Fragments":["methods"]},{"Key":"methods as","Fragments":["private"]},{"Key":"(`defp`) in","Fragments":["`Teenager`."]},{"Key":" @alvina","Fragments":["Often"]},{"Key":"@alvina Often","Fragments":["functions"]},{"Key":"Often functions","Fragments":["like"]},{"Key":"like `Enum.reduce`","Fragments":["are","than","is"]},{"Key":"`Enum.reduce` are","Fragments":["helpful"]},{"Key":"are helpful","Fragments":["to"]},{"Key":"running `list_of_words`","Fragments":["a"]},{"Key":"`list_of_words` a","Fragments":["lot"]},{"Key":"of times,","Fragments":["whereas"]},{"Key":"times, whereas","Fragments":["the"]},{"Key":"same every","Fragments":["time."]},{"Key":"tip: using","Fragments":["`Regex.scan`"]},{"Key":"`Regex.scan` combined","Fragments":["with"]},{"Key":"`Enum.reduce` you","Fragments":["can"]},{"Key":"in only","Fragments":["a"]},{"Key":"small number","Fragments":["of"]},{"Key":"points @kayli","Fragments":["and"]},{"Key":"@kayli and","Fragments":["@kayli."]},{"Key":"and @kayli.","Fragments":["Thanks"]},{"Key":"@kayli. Thanks","Fragments":["for"]},{"Key":"the direction,","Fragments":["I"]},{"Key":"direction, I","Fragments":["felt"]},{"Key":"was stumbling","Fragments":["through"]},{"Key":" @elva,","Fragments":["if"]},{"Key":"@elva, if","Fragments":["you"]},{"Key":"ever feel","Fragments":["like"]},{"Key":"like something","Fragments":["could"]},{"Key":"something could","Fragments":["or"]},{"Key":"could or","Fragments":["should"]},{"Key":"improved on","Fragments":["the"]},{"Key":"site (such","Fragments":["as"]},{"Key":"you suggested),","Fragments":["@elva"]},{"Key":"suggested), @elva","Fragments":["is"]},{"Key":"@elva is","Fragments":["very"]},{"Key":"very open","Fragments":["to"]},{"Key":"to receiving","Fragments":["feedback"]},{"Key":"receiving feedback","Fragments":["and"]},{"Key":"and even","Fragments":["pull"]},{"Key":"even pull","Fragments":["requests."]},{"Key":"pull requests.","Fragments":["It's"]},{"Key":"requests. It's","Fragments":["a"]},{"Key":"to contribute,","Fragments":["if"]},{"Key":"contribute, if","Fragments":["you'd"]},{"Key":"like to.","Fragments":[":)"]},{"Key":"Excellent points","Fragments":["as"]},{"Key":"points as","Fragments":["usual,"]},{"Key":"as usual,","Fragments":["thanks"]},{"Key":"usual, thanks","Fragments":["@ellsworth"]},{"Key":"me or","Fragments":["does"]},{"Key":"the test-suite","Fragments":["feels"]},{"Key":"test-suite feels","Fragments":["really"]},{"Key":"really sluggish","Fragments":["for"]},{"Key":"sluggish for","Fragments":["this"]},{"Key":"It breathes","Fragments":["now"]},{"Key":"breathes now","Fragments":["at"]},{"Key":"now at","Fragments":["least!"]},{"Key":"good. Often","Fragments":["people"]},{"Key":"Often people","Fragments":["put"]},{"Key":"people put","Fragments":["the"]},{"Key":"`do_foo` helper","Fragments":["functions"]},{"Key":"the `foo`","Fragments":["functions"]},{"Key":"`foo` functions","Fragments":["to"]},{"Key":"follow, but","Fragments":["there"]},{"Key":"isn't anything","Fragments":["wrong"]},{"Key":"anything wrong","Fragments":["with","with"]},{"Key":"Check it","Fragments":["out:"]},{"Key":"it out:","Fragments":["https://gist.github.com/diogovk/8700256"]},{"Key":"tested one","Fragments":["append"]},{"Key":"one append","Fragments":["version"]},{"Key":"append version","Fragments":["of"]},{"Key":"in certain","Fragments":["cases"]},{"Key":"certain cases","Fragments":["is"]},{"Key":"is get","Fragments":["really"]},{"Key":"really slower","Fragments":["than"]},{"Key":"Please share","Fragments":["if"]},{"Key":"share if","Fragments":["you"]},{"Key":"a faster","Fragments":["version"]},{"Key":"faster version","Fragments":["of"]},{"Key":"concat using","Fragments":["append."]},{"Key":"Great idea.","Fragments":["I'll"]},{"Key":"idea. I'll","Fragments":["try"]},{"Key":"suite uses","Fragments":["some"]},{"Key":"uses some","Fragments":["rather"]},{"Key":"rather large","Fragments":["lists"]},{"Key":"large lists","Fragments":["to"]},{"Key":"lists to","Fragments":["point"]},{"Key":"out problems,","Fragments":["such"]},{"Key":"problems, such","Fragments":["as"]},{"Key":"as left","Fragments":["folding"]},{"Key":"folding over","Fragments":["`append`"]},{"Key":"over `append`","Fragments":["in"]},{"Key":"in `concat`.","Fragments":["That's"]},{"Key":"`concat`. That's","Fragments":["why"]},{"Key":" Considering","Fragments":["the"]},{"Key":"Considering the","Fragments":["version"]},{"Key":"`reduce` and","Fragments":["`append`","`reverse`,","`append`,"]},{"Key":"`append` uses","Fragments":["a"]},{"Key":"more abstractions","Fragments":["such"]},{"Key":"abstractions such","Fragments":["as"]},{"Key":"function values","Fragments":["(\u0026append/1)"]},{"Key":"values (\u0026append/1)","Fragments":["this"]},{"Key":"(\u0026append/1) this","Fragments":["doesn't"]},{"Key":"doesn't surprise","Fragments":["me"]},{"Key":"surprise me","Fragments":["at"]},{"Key":"why standard","Fragments":["libraries"]},{"Key":"standard libraries","Fragments":["tend"]},{"Key":"libraries tend","Fragments":["to"]},{"Key":"have ugly","Fragments":["implementations."]},{"Key":"realized after","Fragments":["thinking"]},{"Key":"after thinking","Fragments":["about"]},{"Key":"algorithm a","Fragments":["little"]},{"Key":"more (and","Fragments":["watching"]},{"Key":"(and watching","Fragments":["a"]},{"Key":"watching a","Fragments":["[cute"]},{"Key":"a [cute","Fragments":["YouTube"]},{"Key":"[cute YouTube","Fragments":["video](http://www.youtube.com/watch?v=V08g_lkKj6Q)"]},{"Key":"YouTube video](http://www.youtube.com/watch?v=V08g_lkKj6Q)","Fragments":["of"]},{"Key":"video](http://www.youtube.com/watch?v=V08g_lkKj6Q) of","Fragments":["an"]},{"Key":"an animated","Fragments":["professor"]},{"Key":"animated professor","Fragments":["explaining"]},{"Key":"professor explaining","Fragments":["it)"]},{"Key":"explaining it)","Fragments":["that"]},{"Key":"it) that","Fragments":["the"]},{"Key":"the `is_prime?/2`","Fragments":["function"]},{"Key":"`is_prime?/2` function","Fragments":["wasn't"]},{"Key":"function wasn't","Fragments":["necessary,"]},{"Key":"wasn't necessary,","Fragments":["or"]},{"Key":"necessary, or","Fragments":["really"]},{"Key":"really part","Fragments":["of"]},{"Key":"the Sieve","Fragments":["of"]},{"Key":"Sieve of","Fragments":["Eratosthenes"]},{"Key":"of Eratosthenes","Fragments":["process."]},{"Key":"Eratosthenes process.","Fragments":["As"]},{"Key":"process. As","Fragments":["I"]},{"Key":"next number","Fragments":["in"]},{"Key":"number in","Fragments":["the"]},{"Key":"the candidates","Fragments":["list"]},{"Key":"candidates list","Fragments":["is","until","is"]},{"Key":"a prime,","Fragments":["so"]},{"Key":"prime, so","Fragments":["you"]},{"Key":"can go","Fragments":["ahead"]},{"Key":"and always","Fragments":["add"]},{"Key":"of primes","Fragments":["and"]},{"Key":"primes and","Fragments":["then"]},{"Key":"then reject","Fragments":["any"]},{"Key":"reject any","Fragments":["multiples"]},{"Key":"any multiples","Fragments":["of"]},{"Key":"number from","Fragments":["the"]},{"Key":"the remaining","Fragments":["candidates","candidates"]},{"Key":"remaining candidates","Fragments":["list","list"]},{"Key":"list until","Fragments":["the"]},{"Key":"until the","Fragments":["remaining"]},{"Key":"been giving","Fragments":["much"]},{"Key":"giving much","Fragments":["useful"]},{"Key":"much useful","Fragments":["feedback"]},{"Key":"useful feedback","Fragments":["lately,"]},{"Key":"feedback lately,","Fragments":["but"]},{"Key":"to reproduce","Fragments":["the"]},{"Key":"reproduce the","Fragments":["error"]},{"Key":"error by","Fragments":["using"]},{"Key":"module without","Fragments":["the"]},{"Key":"the __info__","Fragments":["defined"]},{"Key":"__info__ defined","Fragments":["but"]},{"Key":"defined but","Fragments":["it"]},{"Key":"just ran","Fragments":["normally."]},{"Key":"No prob,","Fragments":["@layne."]},{"Key":"prob, @layne.","Fragments":["I"]},{"Key":"@layne. I","Fragments":["appreciate"]},{"Key":"appreciate you","Fragments":["always"]},{"Key":"you always","Fragments":["taking"]},{"Key":"always taking","Fragments":["a"]},{"Key":"look so","Fragments":["quickly","good"]},{"Key":"so quickly","Fragments":["and"]},{"Key":"quickly and","Fragments":["giving"]},{"Key":"and giving","Fragments":["feedback"]},{"Key":"giving feedback","Fragments":["when"]},{"Key":"any to","Fragments":["give."]},{"Key":"to give.","Fragments":[":)"]},{"Key":"After a","Fragments":["few"]},{"Key":"few exercises","Fragments":["you"]},{"Key":"exercises you","Fragments":["should"]},{"Key":"should reach","Fragments":["the"]},{"Key":"reach the","Fragments":["more"]},{"Key":"difficult ones.","Fragments":["I'm"]},{"Key":"ones. I'm","Fragments":["pretty"]},{"Key":"sure I'll","Fragments":["have"]},{"Key":"have comments","Fragments":["on"]},{"Key":"on dot-dsl","Fragments":["and"]},{"Key":"Nice! Looking","Fragments":["forward"]},{"Key":"On your","Fragments":["first"]},{"Key":"point, yeah,","Fragments":["I"]},{"Key":"of that.","Fragments":["For"]},{"Key":"that. For","Fragments":["some"]},{"Key":"head that","Fragments":["the"]},{"Key":"element had","Fragments":["something"]},{"Key":"order it","Fragments":["would"]},{"Key":"would iterate","Fragments":["in."]},{"Key":"iterate in.","Fragments":["Probably"]},{"Key":"in. Probably","Fragments":["because"]},{"Key":"went about","Fragments":["coming"]},{"Key":"about coming","Fragments":["up"]},{"Key":"for `list`","Fragments":["first,"]},{"Key":"`list` first,","Fragments":["then"]},{"Key":"first, then","Fragments":["changing"]},{"Key":"then changing","Fragments":["things"]},{"Key":"changing things","Fragments":["to"]},{"Key":"make `allergic_to?`","Fragments":["efficient,"]},{"Key":"`allergic_to?` efficient,","Fragments":["and"]},{"Key":"efficient, and","Fragments":["then"]},{"Key":"then making","Fragments":["both"]},{"Key":"making both","Fragments":["work."]},{"Key":"both work.","Fragments":["Yeah,"]},{"Key":"work. Yeah,","Fragments":["just"]},{"Key":"Yeah, just","Fragments":["reversing"]},{"Key":"just reversing","Fragments":["the","one"]},{"Key":"elements makes","Fragments":["total"]},{"Key":"total sense.","Fragments":["I'll"]},{"Key":"using `Enum.filter_map`","Fragments":["too.","or"]},{"Key":"`Enum.filter_map` too.","Fragments":["I'll"]},{"Key":"I reversed","Fragments":["the"]},{"Key":"reversed the","Fragments":["order"]},{"Key":"the tuples,","Fragments":["which"]},{"Key":"tuples, which","Fragments":["made"]},{"Key":"the dict","Fragments":["from"]},{"Key":"dict from","Fragments":["the"]},{"Key":"list trivial.","Fragments":["I"]},{"Key":"trivial. I","Fragments":["tried"]},{"Key":"using filter","Fragments":["and","and"]},{"Key":"map would","Fragments":["simplify"]},{"Key":"simplify `list`,","Fragments":["though,"]},{"Key":"`list`, though,","Fragments":["and"]},{"Key":"couldn't come","Fragments":["up","up"]},{"Key":"that seemed","Fragments":["simpler"]},{"Key":"seemed simpler","Fragments":["that"]},{"Key":"simpler that","Fragments":["what"]},{"Key":"already have,","Fragments":["given"]},{"Key":"have, given","Fragments":["the"]},{"Key":"the `@rashawn`","Fragments":["list"]},{"Key":"`@rashawn` list","Fragments":["accessible"]},{"Key":"list accessible","Fragments":["and"]},{"Key":"accessible and","Fragments":["can"]},{"Key":"just iterate","Fragments":["over","over"]},{"Key":"really dislike","Fragments":["that"]},{"Key":"dislike that","Fragments":["regex."]},{"Key":"to switch","Fragments":["the","implementation."]},{"Key":"switch the","Fragments":["tuple"]},{"Key":"tuple elements","Fragments":["in"]},{"Key":"elements in","Fragments":["`@bailey`?","a"]},{"Key":"suspect `list`","Fragments":["could"]},{"Key":"`list` could","Fragments":["be"]},{"Key":"simplified using","Fragments":["`Enum.filter_map`"]},{"Key":"`Enum.filter_map` or","Fragments":["`Stream.filter"]},{"Key":"or `Stream.filter","Fragments":["|\u003e"]},{"Key":"`Stream.filter |\u003e","Fragments":["Enum.map`.","Enum.map`,"]},{"Key":"It **is**","Fragments":["sort"]},{"Key":"**is** sort","Fragments":["of"]},{"Key":"of weird","Fragments":["that"]},{"Key":"that `@demetrius`","Fragments":["and"]},{"Key":"`@demetrius` and","Fragments":["`@demetrius`"]},{"Key":"and `@demetrius`","Fragments":["have"]},{"Key":"`@demetrius` have","Fragments":["basically"]},{"Key":"have basically","Fragments":["the"]},{"Key":"same content,","Fragments":["and"]},{"Key":"content, and","Fragments":["the"]},{"Key":"for `@demetrius`","Fragments":["to"]},{"Key":"`@demetrius` to","Fragments":["exist"]},{"Key":"to exist","Fragments":["is"]},{"Key":"exist is","Fragments":["for"]},{"Key":"results to","Fragments":["be"]},{"Key":"expected order,","Fragments":["which"]},{"Key":"order, which","Fragments":["feels"]},{"Key":"which feels","Fragments":["like","the"]},{"Key":"pretty arbitrary","Fragments":["requirement"]},{"Key":"arbitrary requirement","Fragments":["in"]},{"Key":"requirement in","Fragments":["the"]},{"Key":"first place.","Fragments":["Perhaps"]},{"Key":"place. Perhaps","Fragments":["if"]},{"Key":"have `@demetrius`","Fragments":["available"]},{"Key":"`@demetrius` available","Fragments":["to"]},{"Key":"think these","Fragments":["are"]},{"Key":"recursive now,","Fragments":["but"]},{"Key":"little fuzzy","Fragments":["on"]},{"Key":"fuzzy on","Fragments":["why"]},{"Key":"why they","Fragments":["work,","are"]},{"Key":"they work,","Fragments":["and"]},{"Key":"work, and","Fragments":["what"]},{"Key":"what should","Fragments":["start"]},{"Key":"should start","Fragments":["to"]},{"Key":"start to","Fragments":["be"]},{"Key":"be intuitive","Fragments":["to"]},{"Key":"I solve","Fragments":["problems"]},{"Key":"solve problems","Fragments":["the"]},{"Key":"problems the","Fragments":["functional"]},{"Key":"The exercise","Fragments":["would"]},{"Key":"would indeed","Fragments":["be"]},{"Key":"indeed be","Fragments":["better"]},{"Key":"with sets.","Fragments":["Unfortunately"]},{"Key":"sets. Unfortunately","Fragments":["doing"]},{"Key":"Unfortunately doing","Fragments":["that"]},{"Key":"that generally","Fragments":["would"]},{"Key":"generally would","Fragments":["make"]},{"Key":"the assert","Fragments":["failure"]},{"Key":"assert failure","Fragments":["messages"]},{"Key":"failure messages","Fragments":["much"]},{"Key":"messages much","Fragments":["uglier"]},{"Key":"much uglier","Fragments":["as"]},{"Key":"uglier as","Fragments":["assert"]},{"Key":"as assert","Fragments":["is"]},{"Key":"assert is","Fragments":["special"]},{"Key":"is special","Fragments":["cased"]},{"Key":"special cased","Fragments":["to"]},{"Key":"cased to","Fragments":["handle"]},{"Key":"handle `==`","Fragments":["and"]},{"Key":"`==` and","Fragments":["to"]},{"Key":"to generally","Fragments":["compare"]},{"Key":"generally compare","Fragments":["sets"]},{"Key":"compare sets","Fragments":["you"]},{"Key":"sets you","Fragments":["need"]},{"Key":"need `Set.equals`","Fragments":["(actually,"]},{"Key":"`Set.equals` (actually,","Fragments":["even"]},{"Key":"(actually, even","Fragments":["that"]},{"Key":"even that","Fragments":["is"]},{"Key":"not enough","Fragments":["as","too."]},{"Key":"handle e.g.","Fragments":["sets"]},{"Key":"e.g. sets","Fragments":["of"]},{"Key":"sets of","Fragments":["sets,"]},{"Key":"of sets,","Fragments":["Elixir"]},{"Key":"sets, Elixir","Fragments":["currently"]},{"Key":"Elixir currently","Fragments":["too"]},{"Key":"currently too","Fragments":["strongly"]},{"Key":"too strongly","Fragments":["depends"]},{"Key":"strongly depends","Fragments":["on"]},{"Key":"on polymorphic","Fragments":["compare)."]},{"Key":"like (warning:","Fragments":["untested)"]},{"Key":" Enum.filter_map(@westley,","Fragments":["\u0026flag_set(score,"]},{"Key":"Enum.filter_map(@westley, \u0026flag_set(score,","Fragments":["elem(\u00261,"]},{"Key":"\u0026flag_set(score, elem(\u00261,","Fragments":["1)),"]},{"Key":"elem(\u00261, 1)),","Fragments":["\u0026elem(\u00261,"]},{"Key":"1)), \u0026elem(\u00261,","Fragments":["0))"]},{"Key":"obvious but","Fragments":["also"]},{"Key":" Enum.flat_map(@westley,","Fragments":["fn"]},{"Key":"Enum.flat_map(@westley, fn","Fragments":["{"]},{"Key":"{ allergy,","Fragments":["flag"]},{"Key":"allergy, flag","Fragments":["}"]},{"Key":"flag }","Fragments":["-\u003e"]},{"Key":"if flag_set(score,","Fragments":["flag),"]},{"Key":"flag_set(score, flag),","Fragments":["do:"]},{"Key":"flag), do:","Fragments":["[allergy],"]},{"Key":"do: [allergy],","Fragments":["else:"]},{"Key":"[allergy], else:","Fragments":["[]"]},{"Key":"HashDicts don't","Fragments":["preserve"]},{"Key":"don't preserve","Fragments":["order"]},{"Key":"preserve order","Fragments":["so"]},{"Key":"order so","Fragments":["I"]},{"Key":"doubt you'd","Fragments":["find"]},{"Key":"you'd find","Fragments":["a"]},{"Key":"solution with","Fragments":["just","shortcuts","a"]},{"Key":"HashDict dictionary.","Fragments":["The"]},{"Key":"dictionary. The","Fragments":["best"]},{"Key":"The best","Fragments":["you"]},{"Key":"best you","Fragments":["could"]},{"Key":"the much","Fragments":["less"]},{"Key":"less efficient","Fragments":["ListDict"]},{"Key":"efficient ListDict","Fragments":["in"]},{"Key":"ListDict in","Fragments":["`allergic_to?`."]},{"Key":"They work","Fragments":["because"]},{"Key":"expression to","Fragments":["be","get"]},{"Key":"evaluated is","Fragments":["a"]},{"Key":"a call,","Fragments":["so"]},{"Key":"call, so","Fragments":["there's"]},{"Key":"keep variables","Fragments":["from"]},{"Key":"variables from","Fragments":["the"]},{"Key":"the calling","Fragments":["function"]},{"Key":"calling function","Fragments":["around"]},{"Key":"function around","Fragments":["any"]},{"Key":"around any","Fragments":["more,"]},{"Key":"any more,","Fragments":["other"]},{"Key":"more, other","Fragments":["than"]},{"Key":"than those","Fragments":["used"]},{"Key":"those used","Fragments":["in"]},{"Key":"the called","Fragments":["function."]},{"Key":"Btw, you","Fragments":["don't"]},{"Key":"a `[]`","Fragments":["clause"]},{"Key":"`[]` clause","Fragments":["in"]},{"Key":"in `reduce`.","Fragments":["`map`"]},{"Key":"`reduce`. `map`","Fragments":["and"]},{"Key":"and `filter`.","Fragments":["If","Was"]},{"Key":"`filter`. If","Fragments":["`reverse`"]},{"Key":"If `reverse`","Fragments":["receives"]},{"Key":"`reverse` receives","Fragments":["an"]},{"Key":"receives an","Fragments":["empty"]},{"Key":"and passes","Fragments":["it"]},{"Key":"passes it","Fragments":["to"]},{"Key":"to `do_reverse`","Fragments":["you"]},{"Key":"`do_reverse` you","Fragments":["get"]},{"Key":"get `do_reverse([],","Fragments":["[])`"]},{"Key":"`do_reverse([], [])`","Fragments":["which"]},{"Key":"[])` which","Fragments":["immediately"]},{"Key":"which immediately","Fragments":["returns"]},{"Key":"returns `[]`,","Fragments":["so"]},{"Key":"`[]`, so","Fragments":["it"]},{"Key":"right thing.","Fragments":["Same"]},{"Key":"thing. Same","Fragments":["for"]},{"Key":"for `map`","Fragments":["and","and","and"]},{"Key":"and suggestions.","Fragments":["I"]},{"Key":"the `elem`","Fragments":["function."]},{"Key":"`elem` function.","Fragments":["Cool."]},{"Key":"function. Cool.","Fragments":[":)"]},{"Key":"Cool. :)","Fragments":["Yeah,"]},{"Key":":) Yeah,","Fragments":["that"]},{"Key":"concise. I'm","Fragments":["not","sadly"]},{"Key":"prefer between","Fragments":["the"]},{"Key":"the `filter_map`","Fragments":["solution","solution"]},{"Key":"`filter_map` solution","Fragments":["and","is"]},{"Key":"and my","Fragments":["current"]},{"Key":"current one.","Fragments":["I"]},{"Key":"current one","Fragments":["seems"]},{"Key":"gives names","Fragments":["to"]},{"Key":"result, but","Fragments":["maybe"]},{"Key":"problem, and","Fragments":["wouldn't","therefore"]},{"Key":"and wouldn't","Fragments":["require"]},{"Key":"wouldn't require","Fragments":["the"]},{"Key":"in reverse","Fragments":["order","order,"]},{"Key":"reverse order","Fragments":["(or"]},{"Key":"order (or","Fragments":["to"]},{"Key":"(or to","Fragments":["reverse"]},{"Key":"results afterward)","Fragments":["like"]},{"Key":"afterward) like","Fragments":["I"]},{"Key":"think? I'll","Fragments":["go"]},{"Key":"version in","Fragments":["any"]},{"Key":"case just","Fragments":["so"]},{"Key":"can visualize","Fragments":["the"]},{"Key":"visualize the","Fragments":["difference."]},{"Key":"|\u003e Enum.chunk","Fragments":["|\u003e"]},{"Key":"Enum.chunk |\u003e","Fragments":["Enum.map_join`"]},{"Key":"|\u003e Enum.map_join`","Fragments":["could","to"]},{"Key":"Enum.map_join` could","Fragments":["be"]},{"Key":"expressed as","Fragments":["`Stream.map"]},{"Key":"as `Stream.map","Fragments":["|\u003e"]},{"Key":"|\u003e Stream.chunk","Fragments":["|\u003e"]},{"Key":"Stream.chunk |\u003e","Fragments":["Enum.map_join`"]},{"Key":"Enum.map_join` to","Fragments":["avoid"]},{"Key":"avoid building","Fragments":["intermediate"]},{"Key":"building intermediate","Fragments":["lists."]},{"Key":"intermediate lists.","Fragments":["Not"]},{"Key":"lists. Not","Fragments":["sure"]},{"Key":"Well readability","Fragments":["wise"]},{"Key":"readability wise","Fragments":["I'd"]},{"Key":"wise I'd","Fragments":["actually"]},{"Key":"actually go","Fragments":["for"]},{"Key":"for `Stream.filter","Fragments":["|\u003e"]},{"Key":"Enum.map`, with","Fragments":["explicit"]},{"Key":"syntax (`fn`)","Fragments":["instead"]},{"Key":"(`fn`) instead","Fragments":["of"]},{"Key":"of capture","Fragments":["shorthand"]},{"Key":"capture shorthand","Fragments":["(`\u0026`)."]},{"Key":"Your current","Fragments":["version"]},{"Key":"but ever","Fragments":["so"]},{"Key":"slightly harder","Fragments":["to"]},{"Key":"understand because","Fragments":["you"]},{"Key":"function (`reduce`)","Fragments":["while"]},{"Key":"(`reduce`) while","Fragments":["your"]},{"Key":"while your","Fragments":["new"]},{"Key":"bit harder","Fragments":["to"]},{"Key":"read due","Fragments":["to"]},{"Key":"the captures","Fragments":["but"]},{"Key":"captures but","Fragments":["the"]},{"Key":"operations (filter","Fragments":["and"]},{"Key":"(filter and","Fragments":["map)"]},{"Key":"and map)","Fragments":["are"]},{"Key":"map) are","Fragments":["immediately"]},{"Key":"are immediately","Fragments":["clear."]},{"Key":"sense. Since","Fragments":["there's"]},{"Key":"Since there's","Fragments":["no"]},{"Key":"no variables","Fragments":["there"]},{"Key":"variables there","Fragments":["doesn't"]},{"Key":"new frame.","Fragments":["Good."]},{"Key":"frame. Good.","Fragments":["I'll"]},{"Key":"Good. I'll","Fragments":["clean"]},{"Key":"I'll clean","Fragments":["up"]},{"Key":"Not quite","Fragments":["sure"]},{"Key":"that `100`","Fragments":["is"]},{"Key":"`100` is","Fragments":["doing"]},{"Key":"doing on","Fragments":["line","line"]},{"Key":"5, didn't","Fragments":["seem"]},{"Key":"stop the","Fragments":["tests"]},{"Key":"passing mind","Fragments":["you!"]},{"Key":"up unnecessary","Fragments":["clauses,"]},{"Key":"unnecessary clauses,","Fragments":["added"]},{"Key":"clauses, added","Fragments":["a"]},{"Key":"The outer","Fragments":["parens"]},{"Key":"outer parens","Fragments":["in"]},{"Key":"in if","Fragments":["in"]},{"Key":"in filter","Fragments":["are"]},{"Key":"needed. Other","Fragments":["than"]},{"Key":"feedback, @thora.","Fragments":["My"]},{"Key":"@thora. My","Fragments":["next"]},{"Key":"iteration has","Fragments":["taken"]},{"Key":"suggestions into","Fragments":["account."]},{"Key":"know either.","Fragments":["As"]},{"Key":"either. As","Fragments":["it's"]},{"Key":"As it's","Fragments":["just"]},{"Key":"a lone","Fragments":["literal"]},{"Key":"lone literal","Fragments":["expression"]},{"Key":"literal expression","Fragments":["in"]},{"Key":"module it","Fragments":["doesn't"]},{"Key":"do anything.","Fragments":["It's"]},{"Key":"anything. It's","Fragments":["the"]},{"Key":"was on","Fragments":["a"]},{"Key":"by its","Fragments":["own"]},{"Key":"slightly speed","Fragments":["up"]},{"Key":"up this","Fragments":["code","code"]},{"Key":"by writing","Fragments":["`roman","`fn(value)"]},{"Key":"writing `roman","Fragments":["\u003c\u003e"]},{"Key":"\u003c\u003e translate(...)`","Fragments":["as"]},{"Key":"translate(...)` as","Fragments":["`[roman,"]},{"Key":"as `[roman,","Fragments":["translate(...)]`"]},{"Key":"`[roman, translate(...)]`","Fragments":["or"]},{"Key":"translate(...)]` or","Fragments":["`[roman"]},{"Key":"or `[roman","Fragments":["|"]},{"Key":"| translate(...)]`","Fragments":["and"]},{"Key":"translate(...)]` and","Fragments":["using"]},{"Key":"using `translate(number,","Fragments":["@gerald)"]},{"Key":"`translate(number, @gerald)","Fragments":["|\u003e"]},{"Key":"@gerald) |\u003e","Fragments":["iolist_to_binary()`"]},{"Key":"|\u003e iolist_to_binary()`","Fragments":["in"]},{"Key":"iolist_to_binary()` in","Fragments":["`numerals`."]},{"Key":"in `numerals`.","Fragments":["Iolists"]},{"Key":"`numerals`. Iolists","Fragments":["are"]},{"Key":"Erlang trick,","Fragments":["they're"]},{"Key":"trick, they're","Fragments":["lists"]},{"Key":"they're lists","Fragments":["of"]},{"Key":"binaries that","Fragments":["can"]},{"Key":"efficiently concatenated","Fragments":["or"]},{"Key":"concatenated or","Fragments":["even"]},{"Key":"even passed","Fragments":["directly"]},{"Key":"passed directly","Fragments":["to"]},{"Key":"to output","Fragments":["functions."]},{"Key":"output functions.","Fragments":["They're"]},{"Key":"functions. They're","Fragments":["not"]},{"Key":"not UTF-8","Fragments":["aware,"]},{"Key":"UTF-8 aware,","Fragments":["which"]},{"Key":"aware, which","Fragments":["can"]},{"Key":"bit tricky","Fragments":["sometimes,"]},{"Key":"tricky sometimes,","Fragments":["but"]},{"Key":"sometimes, but","Fragments":["in"]},{"Key":"case they","Fragments":["work"]},{"Key":"feedback. That","Fragments":["makes"]},{"Key":"think after","Fragments":["doing"]},{"Key":"after doing","Fragments":["the","my"]},{"Key":"the list_ops","Fragments":["exercise"]},{"Key":"list_ops exercise","Fragments":["I"]},{"Key":"so comfortable","Fragments":["using"]},{"Key":"comfortable using","Fragments":["`reduce`"]},{"Key":"`reduce` for","Fragments":["so"]},{"Key":"have started","Fragments":["seeing"]},{"Key":"started seeing","Fragments":["every"]},{"Key":"seeing every","Fragments":["problem"]},{"Key":"every problem","Fragments":["as"]},{"Key":"problem as","Fragments":["something","possible."]},{"Key":"as something","Fragments":["I","to","you"]},{"Key":"solve with","Fragments":["reduce,"]},{"Key":"with reduce,","Fragments":["and"]},{"Key":"reduce, and","Fragments":["it"]},{"Key":"feels super","Fragments":["natural."]},{"Key":"super natural.","Fragments":["But"]},{"Key":"natural. But","Fragments":["yeah,"]},{"Key":"to step","Fragments":["back"]},{"Key":"and understand","Fragments":["the","compared","what"]},{"Key":"the clarity","Fragments":["of"]},{"Key":"clarity of","Fragments":["the"]},{"Key":"other more","Fragments":["specific"]},{"Key":"right tool(s)","Fragments":["for"]},{"Key":"tool(s) for","Fragments":["the"]},{"Key":"using `Stream.filter`","Fragments":["and"]},{"Key":"`Stream.filter` and","Fragments":["`Enum.map`"]},{"Key":"`Enum.map` with","Fragments":["explicit"]},{"Key":"explicit inline","Fragments":["functions,"]},{"Key":"functions, as","Fragments":["that","well"]},{"Key":"easiest to","Fragments":["read"]},{"Key":"most expressive,","Fragments":["even"]},{"Key":"expressive, even","Fragments":["though"]},{"Key":"write `\u0026String.to_char_list/1`","Fragments":["instead"]},{"Key":"`\u0026String.to_char_list/1` instead","Fragments":["of"]},{"Key":"Oh, yeah,","Fragments":["true."]},{"Key":"yeah, true.","Fragments":["I"]},{"Key":"syntax better,","Fragments":["and"]},{"Key":"better, and","Fragments":["it"]},{"Key":"code consistent","Fragments":["since"]},{"Key":"consistent since","Fragments":["that's"]},{"Key":"16. Submitting","Fragments":["a"]},{"Key":"Btw, `\u0026(String.from_char_list!(\u00261))`","Fragments":["doesn't"]},{"Key":"`\u0026(String.from_char_list!(\u00261))` doesn't","Fragments":["need"]},{"Key":"outer parens:","Fragments":["`\u0026String.from_char_list!(\u00261)`."]},{"Key":"use bit","Fragments":["shifting"]},{"Key":"shifting from","Fragments":["the"]},{"Key":"like `fn","Fragments":["(x,"]},{"Key":"`fn (x,","Fragments":["acc)"]},{"Key":"(x, acc)","Fragments":["-\u003e"]},{"Key":"acc \u003c\u003c\u003c","Fragments":["1"]},{"Key":"\u003c\u003c\u003c 1","Fragments":["|||"]},{"Key":"1 |||","Fragments":["convert(x)"]},{"Key":"||| convert(x)","Fragments":["end`"]},{"Key":"convert(x) end`","Fragments":["as"]},{"Key":"to shake","Fragments":["out"]},{"Key":"shake out","Fragments":["the"]},{"Key":"`Enum.reduce` some","Fragments":["more..."]},{"Key":"some more...","Fragments":["that"]},{"Key":"more... that","Fragments":["`list_of_one_word`"]},{"Key":"that `list_of_one_word`","Fragments":["bugs"]},{"Key":"`list_of_one_word` bugs","Fragments":["me."]},{"Key":"thought I'd","Fragments":["try"]},{"Key":"I'd try","Fragments":["it"]},{"Key":"without OTP","Fragments":["to"]},{"Key":"OTP to","Fragments":["start."]},{"Key":"to start.","Fragments":["I'm"]},{"Key":"start. I'm","Fragments":["on"]},{"Key":"on pretty","Fragments":["shaky"]},{"Key":"pretty shaky","Fragments":["ground"]},{"Key":"shaky ground","Fragments":["with"]},{"Key":"ground with","Fragments":["this"]},{"Key":"this stuff.","Fragments":["I"]},{"Key":"The OTP","Fragments":["version"]},{"Key":"OTP version","Fragments":["is","as"]},{"Key":"more reliable","Fragments":["in","in"]},{"Key":"reliable in","Fragments":["terms","terms"]},{"Key":"of fault","Fragments":["handling","handling,"]},{"Key":"fault handling","Fragments":["behaviour"]},{"Key":"handling behaviour","Fragments":["of"]},{"Key":"behaviour of","Fragments":["course."]},{"Key":"And by","Fragments":["more"]},{"Key":"by more","Fragments":["reliable"]},{"Key":"fault handling,","Fragments":["do"]},{"Key":"handling, do","Fragments":["you"]},{"Key":"mean just","Fragments":["using","put"]},{"Key":"using GenServer,","Fragments":["or"]},{"Key":"GenServer, or","Fragments":["using"]},{"Key":"a Supervisor","Fragments":["as","in"]},{"Key":"Supervisor as","Fragments":["well?","well."]},{"Key":"Cool, now","Fragments":["that"]},{"Key":"you've looked","Fragments":["at"]},{"Key":"and said","Fragments":["it"]},{"Key":"said it","Fragments":["seems"]},{"Key":"seems ok,","Fragments":["I"]},{"Key":"ok, I","Fragments":["think"]},{"Key":"I'll implement","Fragments":["the"]},{"Key":"implement the","Fragments":["OTP","other","comparability"]},{"Key":"well just","Fragments":["to"]},{"Key":"that looks.","Fragments":["You'd"]},{"Key":"looks. You'd","Fragments":["basically"]},{"Key":"You'd basically","Fragments":["just"]},{"Key":"use `GenServer.Behaviour`,","Fragments":["right?"]},{"Key":" Supervisor","Fragments":["as"]},{"Key":"well. That's","Fragments":["the"]},{"Key":"core of","Fragments":["OTP's"]},{"Key":"of OTP's","Fragments":["error"]},{"Key":"OTP's error","Fragments":["handling"]},{"Key":"error handling","Fragments":["model."]},{"Key":" quick","Fragments":["hint,"]},{"Key":"quick hint,","Fragments":["you"]},{"Key":"hint, you","Fragments":["may"]},{"Key":"may use","Fragments":["`Enum.reduce`"]},{"Key":"first start","Fragments":["with"]},{"Key":"my standard","Fragments":["nit","tail"]},{"Key":"standard nit","Fragments":["about"]},{"Key":"about tail","Fragments":["recursion.","recursion,","recursion","recursion"]},{"Key":"recursion. There","Fragments":["are"]},{"Key":"other issues","Fragments":["but","left?"]},{"Key":"I'll respond","Fragments":["to"]},{"Key":"those on","Fragments":["your"]},{"Key":"your next","Fragments":["submission"]},{"Key":"next submission","Fragments":["as"]},{"Key":"you figure","Fragments":["them"]},{"Key":"figure them","Fragments":["out"]},{"Key":"them out","Fragments":["yourself."]},{"Key":"of POSIX","Fragments":["character"]},{"Key":"classes, though","Fragments":["I'm"]},{"Key":"not 100%","Fragments":["sure"]},{"Key":"100% sure","Fragments":["they"]},{"Key":"sure they","Fragments":["cover","are"]},{"Key":"they cover","Fragments":["all"]},{"Key":"cover all","Fragments":["the"]},{"Key":"digits in","Fragments":["Unicode."]},{"Key":"write `silent?`","Fragments":["using"]},{"Key":"`silent?` using","Fragments":["`String.strip`"]},{"Key":"using `String.strip`","Fragments":["as"]},{"Key":"`String.strip` as","Fragments":["that"]},{"Key":"without whitespace,","Fragments":["which"]},{"Key":"whitespace, which","Fragments":["is"]},{"Key":"write yelling","Fragments":["using"]},{"Key":"yelling using","Fragments":["a"]},{"Key":"straightforward positive","Fragments":["(i.e."]},{"Key":"positive (i.e.","Fragments":["focused"]},{"Key":"(i.e. focused","Fragments":["on"]},{"Key":"to see,","Fragments":["not"]},{"Key":"see, not","Fragments":["on"]},{"Key":"to see)","Fragments":["logic:"]},{"Key":"see) logic:","Fragments":["a"]},{"Key":"logic: a","Fragments":["string"]},{"Key":"is yelling","Fragments":["if","`input`."]},{"Key":"yelling if","Fragments":["there"]},{"Key":"letters are","Fragments":["uppercase.","later"]},{"Key":"for these","Fragments":["thoughtful","two","little"]},{"Key":"these thoughtful","Fragments":["comments!"]},{"Key":"thoughtful comments!","Fragments":["New"]},{"Key":"comments! New","Fragments":["version"]},{"Key":"version coming","Fragments":["up."]},{"Key":"version uses","Fragments":["GenServer,"]},{"Key":"uses GenServer,","Fragments":["but"]},{"Key":"GenServer, but","Fragments":["I"]},{"Key":"properly use","Fragments":["a"]},{"Key":"Supervisor in","Fragments":["this"]},{"Key":"this context.","Fragments":["I"]},{"Key":"context. I","Fragments":["found"]},{"Key":"the examples","Fragments":["therein"]},{"Key":"examples therein","Fragments":["kind"]},{"Key":"therein kind","Fragments":["of"]},{"Key":"of hard","Fragments":["to","to","to","for"]},{"Key":"to follow.","Fragments":["Any","Curious"]},{"Key":"follow. Any","Fragments":["suggestions"]},{"Key":"Any suggestions","Fragments":["would"]},{"Key":"suggestions would","Fragments":["be"]},{"Key":"Also, did","Fragments":["I"]},{"Key":"did I","Fragments":["handle","not"]},{"Key":"I handle","Fragments":["the"]},{"Key":"the `close_bank`","Fragments":["implementation"]},{"Key":"`close_bank` implementation","Fragments":["sensibly"]},{"Key":"implementation sensibly","Fragments":["here?"]},{"Key":"opted not","Fragments":["to"]},{"Key":"methods back","Fragments":["to"]},{"Key":"to `Teenager`","Fragments":["because"]},{"Key":"`Teenager` because","Fragments":["`shout`,"]},{"Key":"because `shout`,","Fragments":["`silence`"]},{"Key":"`shout`, `silence`","Fragments":["and"]},{"Key":"`silence` and","Fragments":["`question`"]},{"Key":"and `question`","Fragments":["don't"]},{"Key":"`question` don't","Fragments":["really"]},{"Key":"really describe","Fragments":["the"]},{"Key":"the Teenager,","Fragments":["they"]},{"Key":"Teenager, they","Fragments":["describe"]},{"Key":"the greeting.","Fragments":["That"]},{"Key":"greeting. That","Fragments":["might"]},{"Key":"my OO","Fragments":["background,"]},{"Key":"OO background,","Fragments":["happy"]},{"Key":"background, happy","Fragments":["to"]},{"Key":"be proven","Fragments":["wrong."]},{"Key":"Seems that","Fragments":["there"]},{"Key":"what `cond`","Fragments":["is"]},{"Key":"doing with","Fragments":["guard"]},{"Key":"implement this.","Fragments":["Absolutely"]},{"Key":"this. Absolutely","Fragments":["nothing"]},{"Key":"Absolutely nothing","Fragments":["wrong"]},{"Key":"Parens are","Fragments":["pretty"]},{"Key":"much required","Fragments":["for"]},{"Key":"for pipeline","Fragments":["expressions"]},{"Key":"pipeline expressions","Fragments":["if"]},{"Key":"to run","Fragments":["into","a","at","even","this"]},{"Key":"of issue","Fragments":["all"]},{"Key":"issue all","Fragments":["the"]},{"Key":"time. What","Fragments":["goes"]},{"Key":"What goes","Fragments":["wrong"]},{"Key":"goes wrong","Fragments":["here"]},{"Key":"wrong here","Fragments":["is"]},{"Key":"that `f","Fragments":["a"]},{"Key":"`f a","Fragments":["|\u003e"]},{"Key":"a |\u003e","Fragments":["b`"]},{"Key":"|\u003e b`","Fragments":["isn't","but"]},{"Key":"b` isn't","Fragments":["interpreted"]},{"Key":"isn't interpreted","Fragments":["as"]},{"Key":"as `f(a)","Fragments":["|\u003e"]},{"Key":"`f(a) |\u003e","Fragments":["b`"]},{"Key":"b` but","Fragments":["as"]},{"Key":"as `f","Fragments":["(a","(x"]},{"Key":"`f (a","Fragments":["|\u003e"]},{"Key":"(a |\u003e","Fragments":["b)`."]},{"Key":"|\u003e b)`.","Fragments":["In"]},{"Key":"b)`. In","Fragments":["general"]},{"Key":"parentheses by","Fragments":["default"]},{"Key":"only leave","Fragments":["them"]},{"Key":"them off","Fragments":["it"]},{"Key":"off it","Fragments":["it"]},{"Key":"it it","Fragments":["really"]},{"Key":"really makes","Fragments":["the"]},{"Key":"look better","Fragments":["and"]},{"Key":"Your word","Fragments":["counter"]},{"Key":"word counter","Fragments":["would"]},{"Key":"counter would","Fragments":["fail"]},{"Key":"for \"for\")","Fragments":["because"]},{"Key":"\"for\") because","Fragments":["it"]},{"Key":"Also instead","Fragments":["of"]},{"Key":"replacing characters","Fragments":["you","you"]},{"Key":"splitting you","Fragments":["could","could"]},{"Key":"could scan","Fragments":["(`Regex.scan`)"]},{"Key":"scan (`Regex.scan`)","Fragments":["for"]},{"Key":"(`Regex.scan`) for","Fragments":["groups","groups"]},{"Key":"and operate","Fragments":["on"]},{"Key":" Taking","Fragments":["off"]},{"Key":"Taking off","Fragments":["the"]},{"Key":"parens for","Fragments":["`Regex.replace/3`"]},{"Key":"for `Regex.replace/3`","Fragments":["gives"]},{"Key":"`Regex.replace/3` gives","Fragments":["me"]},{"Key":"me this","Fragments":["error:"]},{"Key":" (elixir)","Fragments":["unicode/unicode.ex:126:","lib/code.ex:274:","src/elixir_lexical.erl:17:","lib/code.ex:303:","lib/code.ex:274:","src/elixir_lexical.erl:17:","lib/code.ex:303:"]},{"Key":"(elixir) unicode/unicode.ex:126:","Fragments":["String.Unicode.split([])"]},{"Key":" word_count.exs:6:","Fragments":["Words.count/1"]},{"Key":" word_count_test.exs:38:","Fragments":["WordsTest.\"test"]},{"Key":"word_count_test.exs:38: WordsTest.\"test","Fragments":["normalize"]},{"Key":" `close_bank`","Fragments":["looks"]},{"Key":"`close_bank` looks","Fragments":["good."]},{"Key":"a supervisor","Fragments":["for"]},{"Key":"supervisor for","Fragments":["this,"]},{"Key":"module uses","Fragments":["GenServer"]},{"Key":"uses GenServer","Fragments":["makes"]},{"Key":"GenServer makes","Fragments":["it"]},{"Key":"it fit","Fragments":["in"]},{"Key":"a supervised","Fragments":["structure"]},{"Key":"supervised structure","Fragments":["well."]},{"Key":"fairly good","Fragments":["approach."]},{"Key":"good approach.","Fragments":["Some"]},{"Key":"approach. Some","Fragments":["specific"]},{"Key":"Some specific","Fragments":["nits:"]},{"Key":"generally better","Fragments":["to"]},{"Key":"use `Dict.some_func`","Fragments":["instead"]},{"Key":"`Dict.some_func` instead","Fragments":["of"]},{"Key":"of `HashDict.some_func`.","Fragments":["`Dict`"]},{"Key":"`HashDict.some_func`. `Dict`","Fragments":["is"]},{"Key":"interface for","Fragments":["all"]},{"Key":"dictionaries, using","Fragments":["it"]},{"Key":"have less","Fragments":["places","places"]},{"Key":"less places","Fragments":["to","to"]},{"Key":"places to","Fragments":["update","update."]},{"Key":"update if","Fragments":["you"]},{"Key":"your dictionary","Fragments":["implementation."]},{"Key":"dictionary implementation.","Fragments":["The"]},{"Key":"obvious exception","Fragments":["is"]},{"Key":"is `HashDict.new`","Fragments":["(effectively"]},{"Key":"`HashDict.new` (effectively","Fragments":["the"]},{"Key":"(effectively the","Fragments":["\"constructor\""]},{"Key":"the \"constructor\"","Fragments":["of"]},{"Key":"\"constructor\" of","Fragments":["HashDicts)"]},{"Key":"of HashDicts)","Fragments":["as"]},{"Key":"HashDicts) as","Fragments":["there"]},{"Key":"no `Dict`","Fragments":["equivalent"]},{"Key":"`Dict` equivalent","Fragments":["for"]},{"Key":"equivalent for","Fragments":["that."]},{"Key":"worth taking","Fragments":["a"]},{"Key":"look at,","Fragments":["it"]},{"Key":"at, it","Fragments":["can"]},{"Key":"try scanning","Fragments":["(`Regex.scan`)"]},{"Key":"scanning (`Regex.scan`)","Fragments":["for"]},{"Key":"A function","Fragments":["like"]},{"Key":"like `lowercase_sentence`","Fragments":["isn't"]},{"Key":"`lowercase_sentence` isn't","Fragments":["really"]},{"Key":"useful as","Fragments":["it","it"]},{"Key":"just calls","Fragments":["`String.downcase`"]},{"Key":"calls `String.downcase`","Fragments":["which"]},{"Key":"`String.downcase` which","Fragments":["equally"]},{"Key":"which equally","Fragments":["well"]},{"Key":"equally well","Fragments":["describes"]},{"Key":"well describes","Fragments":["what's"]},{"Key":"describes what's","Fragments":["going"]},{"Key":"will stay","Fragments":["with"]},{"Key":"stay with","Fragments":["`List.flatten`"]},{"Key":"with `List.flatten`","Fragments":["at"]},{"Key":"`List.flatten` at","Fragments":["least"]},{"Key":"least that","Fragments":["gives"]},{"Key":"gives an","Fragments":["idea"]},{"Key":"direction on","Fragments":["the"]},{"Key":"the shortening,","Fragments":["I"]},{"Key":"shortening, I","Fragments":["was"]},{"Key":"was aware","Fragments":["of"]},{"Key":"but somewhat","Fragments":["scared"]},{"Key":"scared to","Fragments":["use"]},{"Key":"more concerned","Fragments":["about"]},{"Key":"concerned about","Fragments":["readability."]},{"Key":"heads up","Fragments":["on"]},{"Key":"`\\w` but","Fragments":["what"]},{"Key":"recommend there?","Fragments":["`[\\w-]+`?"]},{"Key":"there? `[\\w-]+`?","Fragments":["I"]},{"Key":"`[\\w-]+`? I","Fragments":["didn't"]},{"Key":"didn't expand","Fragments":["it"]},{"Key":"out because","Fragments":["I"]},{"Key":"really feel","Fragments":["the"]},{"Key":"tests forcing","Fragments":["me"]},{"Key":"forcing me","Fragments":["to."]},{"Key":"track. A","Fragments":["few"]},{"Key":"can mark","Fragments":["methods"]},{"Key":"mark methods","Fragments":["that"]},{"Key":"public as","Fragments":["private","private,"]},{"Key":"The `is_silence?`","Fragments":["function"]},{"Key":"`is_silence?` function","Fragments":["doesn't"]},{"Key":"regular expression.","Fragments":["`String.strip`"]},{"Key":"expression. `String.strip`","Fragments":["will"]},{"Key":"`String.strip` will","Fragments":["work"]},{"Key":"fine and","Fragments":["also"]},{"Key":"one \"Fine.","Fragments":["Be"]},{"Key":"way!\" response","Fragments":["path."]},{"Key":"* Your","Fragments":["`is_yelling?`"]},{"Key":"Your `is_yelling?`","Fragments":["logic"]},{"Key":"`is_yelling?` logic","Fragments":["would"]},{"Key":"fail for","Fragments":["an"]},{"Key":"input like","Fragments":["\"+\"."]},{"Key":"case insensitive","Fragments":["regular"]},{"Key":"insensitive regular","Fragments":["expression"]},{"Key":"expression matching","Fragments":["in"]},{"Key":"in `is_just_number?`","Fragments":["when"]},{"Key":"`is_just_number?` when","Fragments":["none"]},{"Key":"when none","Fragments":["of"]},{"Key":"none of","Fragments":["the","the","those"]},{"Key":"for have","Fragments":["a"]},{"Key":"a notion","Fragments":["of"]},{"Key":"of lower","Fragments":["and"]},{"Key":"lower and","Fragments":["upper"]},{"Key":"and upper","Fragments":["case?"]},{"Key":"Nope, there","Fragments":["isn't."]},{"Key":"there isn't.","Fragments":["Guard"]},{"Key":"isn't. Guard","Fragments":["clauses"]},{"Key":"Guard clauses","Fragments":["in"]},{"Key":"Erlang (and","Fragments":["thus"]},{"Key":"(and thus","Fragments":["in"]},{"Key":"thus in","Fragments":["Elixir)"]},{"Key":"in Elixir)","Fragments":["are"]},{"Key":"Elixir) are","Fragments":["rather"]},{"Key":"allow them","Fragments":["to"]},{"Key":"be translated","Fragments":["into"]},{"Key":"into very","Fragments":["efficient"]},{"Key":"very efficient","Fragments":["code."]},{"Key":"Your submission","Fragments":["uses","pass"]},{"Key":"submission uses","Fragments":["regular"]},{"Key":"uses regular","Fragments":["expressions"]},{"Key":"expressions very","Fragments":["effectively,"]},{"Key":"very effectively,","Fragments":["however"]},{"Key":"effectively, however","Fragments":["you"]},{"Key":"however you","Fragments":["only","need..."]},{"Key":"need one","Fragments":["regular","regular","method"]},{"Key":"one regular","Fragments":["expression","expression"]},{"Key":"exercise, the","Fragments":["other"]},{"Key":"other regexes","Fragments":["can","can"]},{"Key":"regexes can","Fragments":["be","be"]},{"Key":"replaced using","Fragments":["functions"]},{"Key":"`String` module.","Fragments":["Regular"]},{"Key":"module. Regular","Fragments":["expressions"]},{"Key":"Regular expressions","Fragments":["are"]},{"Key":"are powerful","Fragments":["but"]},{"Key":"powerful but","Fragments":["they"]},{"Key":"are fairly","Fragments":["hard","short"]},{"Key":"fairly hard","Fragments":["to"]},{"Key":"understand compared","Fragments":["to"]},{"Key":"to normal","Fragments":["`String`"]},{"Key":"normal `String`","Fragments":["functions."]},{"Key":"little slow","Fragments":["on"]},{"Key":"slow on","Fragments":["`Regex.scan`,"]},{"Key":"on `Regex.scan`,","Fragments":["but"]},{"Key":"but how","Fragments":["you"]},{"Key":"you explained","Fragments":["it"]},{"Key":"made sense.","Fragments":["The"]},{"Key":"sense. The","Fragments":["only"]},{"Key":"like was","Fragments":["having"]},{"Key":"to throw","Fragments":["the"]},{"Key":"throw the","Fragments":["`List.flatten`"]},{"Key":"the `List.flatten`","Fragments":["on"]},{"Key":"`List.flatten` on","Fragments":["it,"]},{"Key":"around that?","Fragments":["or"]},{"Key":"that? or","Fragments":["is"]},{"Key":"so standard","Fragments":["that"]},{"Key":"standard that","Fragments":["it"]},{"Key":"I re-extracted","Fragments":["the"]},{"Key":"re-extracted the","Fragments":["`count_of_words`"]},{"Key":"the `count_of_words`","Fragments":["method"]},{"Key":"`count_of_words` method","Fragments":["so"]},{"Key":"`|\u003e` operator,","Fragments":["that"]},{"Key":"operator, that","Fragments":["might"]},{"Key":"my favorite","Fragments":["operator,"]},{"Key":"favorite operator,","Fragments":["absolute"]},{"Key":"operator, absolute","Fragments":["genius."]},{"Key":"absolute genius.","Fragments":["I"]},{"Key":"genius. I","Fragments":["do"]},{"Key":"still some","Fragments":["cleanup"]},{"Key":"some cleanup","Fragments":["I"]},{"Key":"cleanup I","Fragments":["am"]},{"Key":"Well instead","Fragments":["of"]},{"Key":"of `List.flatten`","Fragments":["you"]},{"Key":"`List.flatten` you","Fragments":["can"]},{"Key":"do `Enum.map(\u0026hd/1)`","Fragments":["(`\u0026hd/1`"]},{"Key":"`Enum.map(\u0026hd/1)` (`\u0026hd/1`","Fragments":["="]},{"Key":"(`\u0026hd/1` =","Fragments":["`\u0026hd(\u00261)`"]},{"Key":"= `\u0026hd(\u00261)`","Fragments":["="]},{"Key":"`\u0026hd(\u00261)` =","Fragments":["`fun"]},{"Key":"= `fun","Fragments":["l"]},{"Key":"`fun l","Fragments":["-\u003e"]},{"Key":"l -\u003e","Fragments":["hd(l)"]},{"Key":"-\u003e hd(l)","Fragments":["end`)."]},{"Key":"the `Dict.update`","Fragments":["slightly"]},{"Key":"`Dict.update` slightly","Fragments":["more"]},{"Key":"more compact","Fragments":["by"]},{"Key":"compact by","Fragments":["writing"]},{"Key":"writing `fn(value)","Fragments":["-\u003e"]},{"Key":"`fn(value) -\u003e","Fragments":["value"]},{"Key":"Be aware","Fragments":["that","btw"]},{"Key":"`\\w` has","Fragments":["a"]},{"Key":"bit strange","Fragments":["definition"]},{"Key":"strange definition","Fragments":["of"]},{"Key":"word characters.","Fragments":["\"-\""]},{"Key":"characters. \"-\"","Fragments":["is"]},{"Key":"\"-\" is","Fragments":["not"]},{"Key":"character even","Fragments":["though"]},{"Key":"though words","Fragments":["like"]},{"Key":" \"co-operative\"","Fragments":["exist."]},{"Key":"\"co-operative\" exist.","Fragments":["\"_\""]},{"Key":"exist. \"_\"","Fragments":["on"]},{"Key":"\"_\" on","Fragments":["the"]},{"Key":"hand is","Fragments":["considered"]},{"Key":"was one","Fragments":["of","issue"]},{"Key":"more challenging","Fragments":["exercises"]},{"Key":"challenging exercises","Fragments":["I"]},{"Key":"exercises I","Fragments":["have"]},{"Key":"some time.","Fragments":["Some"]},{"Key":"time. Some","Fragments":["notes:"]},{"Key":"1. tried","Fragments":["to"]},{"Key":"mark subsequent","Fragments":["methods"]},{"Key":"subsequent methods","Fragments":["that"]},{"Key":"as private,","Fragments":["but"]},{"Key":"private, but","Fragments":["had"]},{"Key":"some issues","Fragments":["later"]},{"Key":"issues later","Fragments":["when"]},{"Key":"the arity","Fragments":["was","of"]},{"Key":"arity was","Fragments":["the"]},{"Key":"same. I","Fragments":["feel"]},{"Key":"having `counter`,","Fragments":["just"]},{"Key":"`counter`, just","Fragments":["felt"]},{"Key":"2. `append`","Fragments":["and"]},{"Key":"`append` and","Fragments":["`concat`","`concat`","`concat`","`concat`","`concat`"]},{"Key":"and `concat`","Fragments":["were","using","using","without","as"]},{"Key":"`concat` were","Fragments":["very"]},{"Key":"were very","Fragments":["hard,"]},{"Key":"very hard,","Fragments":["I"]},{"Key":"hard, I","Fragments":["was"]},{"Key":"was pleased","Fragments":["to"]},{"Key":"pleased to","Fragments":["finally"]},{"Key":"to finally","Fragments":["get"]},{"Key":"finally get","Fragments":["something"]},{"Key":"something passable","Fragments":["and"]},{"Key":"passable and","Fragments":["start"]},{"Key":"and start","Fragments":["getting"]},{"Key":"start getting","Fragments":["some"]},{"Key":"getting some","Fragments":["help."]},{"Key":"some help.","Fragments":["**note**"]},{"Key":"help. **note**","Fragments":["concat"]},{"Key":"**note** concat","Fragments":["doesn't"]},{"Key":"concat doesn't","Fragments":["pass"]},{"Key":"pass one","Fragments":["test,"]},{"Key":"one test,","Fragments":["but"]},{"Key":"test, but","Fragments":["I"]},{"Key":"would pass","Fragments":["eventually,","through."]},{"Key":"pass eventually,","Fragments":["it"]},{"Key":"eventually, it","Fragments":["just"]},{"Key":"just never","Fragments":["finishes."]},{"Key":"never finishes.","Fragments":["I"]},{"Key":"finishes. I","Fragments":["_am"]},{"Key":"I _am","Fragments":["pretty"]},{"Key":"_am pretty","Fragments":["sure_"]},{"Key":"pretty sure_","Fragments":["this"]},{"Key":"sure_ this","Fragments":["is"]},{"Key":"because append","Fragments":["and"]},{"Key":"append and","Fragments":["concat"]},{"Key":"concat are","Fragments":["ugly"]},{"Key":"are ugly","Fragments":["and"]},{"Key":"and need","Fragments":["help.","to"]},{"Key":" Feedback","Fragments":["is"]},{"Key":"Feedback is","Fragments":["appreciated!"]},{"Key":"fun with","Fragments":["pattern"]},{"Key":"matching here.","Fragments":["the"]},{"Key":"here. the","Fragments":["last"]},{"Key":"last statement","Fragments":["def"]},{"Key":"statement def","Fragments":["seems"]},{"Key":"def seems","Fragments":["a"]},{"Key":"little verbose","Fragments":["and"]},{"Key":"to increment","Fragments":["the"]},{"Key":"have factored","Fragments":["this"]},{"Key":"factored this","Fragments":["out"]},{"Key":"too far,","Fragments":["but"]},{"Key":"far, but","Fragments":["I"]},{"Key":"of wanted","Fragments":["that"]},{"Key":"wanted that","Fragments":["`anagram_of?`"]},{"Key":"the `Word`","Fragments":["module"]},{"Key":"`Word` module","Fragments":["because"]},{"Key":"felt the","Fragments":["sorted"]},{"Key":"and unsorted","Fragments":["char"]},{"Key":"unsorted char","Fragments":["lists"]},{"Key":"lists were","Fragments":["really"]},{"Key":"were really","Fragments":["a"]},{"Key":"function regarding","Fragments":["the"]},{"Key":"word rather","Fragments":["than"]},{"Key":"Gotcha. That","Fragments":["make"]},{"Key":"Just playing","Fragments":["with"]},{"Key":"with processes","Fragments":[":)","and"]},{"Key":"with `[\\p{L}-]+`","Fragments":["(letters"]},{"Key":"`[\\p{L}-]+` (letters","Fragments":["and"]},{"Key":"(letters and","Fragments":["the"]},{"Key":"the dash,","Fragments":["no"]},{"Key":"dash, no","Fragments":["underscore)."]},{"Key":"function `foo`","Fragments":["`do_foo`,"]},{"Key":"`foo` `do_foo`,","Fragments":["that"]},{"Key":"`do_foo`, that","Fragments":["avoids"]},{"Key":"that avoids","Fragments":["your","the"]},{"Key":"avoids your","Fragments":["arity"]},{"Key":"your arity","Fragments":["problem."]},{"Key":"you've created","Fragments":["a"]},{"Key":"created a","Fragments":["tail","classify"]},{"Key":"for `count`","Fragments":["but"]},{"Key":"`count` but","Fragments":["not"]},{"Key":"not for","Fragments":["`map`","this"]},{"Key":"`filter`. Was","Fragments":["this"]},{"Key":"Was this","Fragments":["intentional?"]},{"Key":"`append` looks","Fragments":["a"]},{"Key":"weird. It","Fragments":["can"]},{"Key":"done by","Fragments":["just"]},{"Key":"by just","Fragments":["reversing","being"]},{"Key":"reversing one","Fragments":["of"]},{"Key":"input lists","Fragments":["first"]},{"Key":"lists first","Fragments":["and"]},{"Key":"then using","Fragments":["a","String.split/1.","*append*"]},{"Key":"rather simple","Fragments":["recursive"]},{"Key":"simple recursive","Fragments":["function."]},{"Key":"If `concat`","Fragments":["takes"]},{"Key":"`concat` takes","Fragments":["forever"]},{"Key":"forever that's","Fragments":["because"]},{"Key":"that's because","Fragments":["it"]},{"Key":"it triggers","Fragments":["the"]},{"Key":"triggers the","Fragments":["old"]},{"Key":"old quadratic","Fragments":["time"]},{"Key":"complexity problem.","Fragments":["The"]},{"Key":"an `append`","Fragments":["operation"]},{"Key":"`append` operation","Fragments":["should"]},{"Key":"operation should","Fragments":["be"]},{"Key":"be linearly","Fragments":["relative"]},{"Key":"linearly relative","Fragments":["to","to"]},{"Key":"relative to","Fragments":["the","the"]},{"Key":"first list","Fragments":["(in","you","longer"]},{"Key":"list (in","Fragments":["`a"]},{"Key":"(in `a","Fragments":["++"]},{"Key":"`a ++","Fragments":["b`"]},{"Key":"++ b`","Fragments":["that"]},{"Key":"b` that","Fragments":["would"]},{"Key":"be `a`).","Fragments":["There's"]},{"Key":"`a`). There's","Fragments":["no"]},{"Key":"know to","Fragments":["make"]},{"Key":"efficient. Your","Fragments":["`concat`"]},{"Key":"Your `concat`","Fragments":["implementation","looks"]},{"Key":"`concat` implementation","Fragments":["basically"]},{"Key":"implementation basically","Fragments":["works"]},{"Key":"basically works","Fragments":["like"]},{"Key":"* `[1,2,3,4]","Fragments":["++"]},{"Key":"`[1,2,3,4] ++","Fragments":["[5,6]`"]},{"Key":"accumulator list","Fragments":["(the"]},{"Key":"list (the","Fragments":["left"]},{"Key":"(the left","Fragments":["argument)"]},{"Key":"left argument)","Fragments":["grows?"]},{"Key":"argument) grows?","Fragments":["Given"]},{"Key":"grows? Given","Fragments":["that"]},{"Key":"what determines","Fragments":["the","the"]},{"Key":"determines the","Fragments":["cost","time"]},{"Key":"the cost","Fragments":["(officially","of","of","of","of"]},{"Key":"cost (officially","Fragments":["time"]},{"Key":"(officially time","Fragments":["complexity)"]},{"Key":"time complexity)","Fragments":["of"]},{"Key":"complexity) of","Fragments":["an"]},{"Key":"an append","Fragments":["it","is","is"]},{"Key":"append it","Fragments":["means"]},{"Key":"cost of","Fragments":["every","the","the","the","that"]},{"Key":"append becomes","Fragments":["ever"]},{"Key":"becomes ever","Fragments":["larger."]},{"Key":"ever larger.","Fragments":["For"]},{"Key":"larger. For","Fragments":["a"]},{"Key":"a million","Fragments":["small","1","lists","lists"]},{"Key":"million small","Fragments":["lists"]},{"Key":"small lists","Fragments":["that","/"]},{"Key":"very bad","Fragments":["cost."]},{"Key":"bad cost.","Fragments":["Say"]},{"Key":"cost. Say","Fragments":["the"]},{"Key":"Say the","Fragments":["cost"]},{"Key":"first append","Fragments":["is"]},{"Key":"0 (input","Fragments":["list"]},{"Key":"(input list","Fragments":["is","is","is"]},{"Key":"is length","Fragments":["0),","2),","4)"]},{"Key":"length 0),","Fragments":["the"]},{"Key":"0), the","Fragments":["cost"]},{"Key":"second append","Fragments":["is"]},{"Key":"2 (input","Fragments":["list"]},{"Key":"length 2),","Fragments":["the"]},{"Key":"2), the","Fragments":["cost"]},{"Key":"third append","Fragments":["is"]},{"Key":"is 4","Fragments":["(input"]},{"Key":"4 (input","Fragments":["list"]},{"Key":"length 4)","Fragments":["then"]},{"Key":"4) then","Fragments":["the"]},{"Key":"the total","Fragments":["cost","directly"]},{"Key":"total cost","Fragments":["is","of","20000000"]},{"Key":"cost is","Fragments":["6."]},{"Key":"Now consider","Fragments":["a"]},{"Key":"million 1","Fragments":["element"]},{"Key":"1 element","Fragments":["lists."]},{"Key":"element lists.","Fragments":["The"]},{"Key":"lists. The","Fragments":["total"]},{"Key":"The total","Fragments":["cost"]},{"Key":"+ 2","Fragments":["+","+","+"]},{"Key":"+ 3","Fragments":["+","+","+"]},{"Key":"3 +","Fragments":["...","4","4"]},{"Key":"+ ...","Fragments":["+","+","+"]},{"Key":"... +","Fragments":["999999,","999","999"]},{"Key":"+ 999999,","Fragments":["or"]},{"Key":"999999, or","Fragments":["`Enum.reduce(0..999999,"]},{"Key":"or `Enum.reduce(0..999999,","Fragments":["0,"]},{"Key":"`Enum.reduce(0..999999, 0,","Fragments":["\u0026(\u00261+\u00262))`"]},{"Key":"0, \u0026(\u00261+\u00262))`","Fragments":["="]},{"Key":"\u0026(\u00261+\u00262))` =","Fragments":["499999500000."]},{"Key":"= 499999500000.","Fragments":["There"]},{"Key":"499999500000. There","Fragments":["exists"]},{"Key":"There exists","Fragments":["a"]},{"Key":"exists a","Fragments":["solution"]},{"Key":"solution which","Fragments":["has"]},{"Key":"has total","Fragments":["cost"]},{"Key":"cost 20000000","Fragments":["which"]},{"Key":"20000000 which","Fragments":["is"]},{"Key":"about 5","Fragments":["orders"]},{"Key":"5 orders","Fragments":["of"]},{"Key":"orders of","Fragments":["magnitude","magnitude","magnitude"]},{"Key":"of magnitude","Fragments":["faster.","less","less"]},{"Key":"The `concat`","Fragments":["test","does"]},{"Key":"`concat` test","Fragments":["that"]},{"Key":"you ran","Fragments":["into"]},{"Key":"into was","Fragments":["specifically"]},{"Key":"was specifically","Fragments":["designed"]},{"Key":"specifically designed","Fragments":["to"]},{"Key":"illustrate this","Fragments":["problem"]},{"Key":"slightly simplify","Fragments":["by"]},{"Key":"three argument","Fragments":["form"]},{"Key":"argument form","Fragments":["of"]},{"Key":"of `Dict.get`","Fragments":["(which"]},{"Key":"`Dict.get` (which","Fragments":["allows"]},{"Key":"(which allows","Fragments":["passing"]},{"Key":"allows passing","Fragments":["a"]},{"Key":"for if","Fragments":["the"]},{"Key":"key can't","Fragments":["be"]},{"Key":"you've refactored","Fragments":["to"]},{"Key":"much is","Fragments":["to","that"]},{"Key":"of someone","Fragments":["else"]},{"Key":"else having","Fragments":["to"]},{"Key":"Would that","Fragments":["hypothetical"]},{"Key":"that hypothetical","Fragments":["programmer"]},{"Key":"hypothetical programmer","Fragments":["have"]},{"Key":"programmer have","Fragments":["an"]},{"Key":"an easy","Fragments":["time"]},{"Key":"easy time","Fragments":["understand"]},{"Key":"time understand","Fragments":["what"]},{"Key":"code does?","Fragments":["If"]},{"Key":"does? If","Fragments":["not"]},{"Key":"not it's","Fragments":["probably"]},{"Key":"refactor or","Fragments":["if"]},{"Key":"real good","Fragments":["reason"]},{"Key":"reason (such","Fragments":["as"]},{"Key":"as needing","Fragments":["to"]},{"Key":"do ugly","Fragments":["tricks"]},{"Key":"ugly tricks","Fragments":["for"]},{"Key":"tricks for","Fragments":["vital","matching"]},{"Key":"for vital","Fragments":["performance)"]},{"Key":"vital performance)","Fragments":["document"]},{"Key":"performance) document","Fragments":["the"]},{"Key":"document the","Fragments":["logic"]},{"Key":"behind your","Fragments":["code.","previous"]},{"Key":"say your","Fragments":["code"]},{"Key":"so factored","Fragments":["out"]},{"Key":"factored out","Fragments":["that"]},{"Key":"you downcase","Fragments":["and","the","the"]},{"Key":"and sort","Fragments":["the"]},{"Key":"word for","Fragments":["every"]},{"Key":"every candidate,","Fragments":["even"]},{"Key":"candidate, even","Fragments":["though"]},{"Key":"at `List.zip`.","Fragments":["In"]},{"Key":"`List.zip`. In","Fragments":["general"]},{"Key":"use higher","Fragments":["order"]},{"Key":"`Enum.reduce` than","Fragments":["to","`List.foldl`."]},{"Key":"write explicitly","Fragments":["recursive"]},{"Key":"explicitly recursive","Fragments":["functions,"]},{"Key":"recursive functions,","Fragments":["the"]},{"Key":"functions, the","Fragments":["code"]},{"Key":"less likely","Fragments":["to"]},{"Key":"to contain","Fragments":["bugs"]},{"Key":"contain bugs","Fragments":["that"]},{"Key":"bugs that","Fragments":["way."]},{"Key":"Also `if(cond,","Fragments":["do:"]},{"Key":"`if(cond, do:","Fragments":["whatever)`"]},{"Key":"do: whatever)`","Fragments":["is"]},{"Key":"whatever)` is","Fragments":["pretty"]},{"Key":"much never","Fragments":["written"]},{"Key":"never written","Fragments":["that"]},{"Key":"written that","Fragments":["way,"]},{"Key":"also `if","Fragments":["cond,"]},{"Key":"`if cond,","Fragments":["do:"]},{"Key":"cond, do:","Fragments":["whatever`"]},{"Key":"do: whatever`","Fragments":["and"]},{"Key":"whatever` and","Fragments":["when"]},{"Key":"when `whatever`","Fragments":["is"]},{"Key":"`whatever` is","Fragments":["used"]},{"Key":"side effect","Fragments":["usually"]},{"Key":"effect usually","Fragments":["as"]},{"Key":"usually as","Fragments":["`if"]},{"Key":"`if cond","Fragments":["do"]},{"Key":"cond do","Fragments":["whatever"]},{"Key":"do whatever","Fragments":["end`."]},{"Key":"thought because","Fragments":["of"]},{"Key":"the optimizations","Fragments":["for"]},{"Key":"optimizations for","Fragments":["pattern"]},{"Key":"was preferable","Fragments":["to"]},{"Key":"preferable to","Fragments":["use","use","call"]},{"Key":"recursion over","Fragments":["the","the"]},{"Key":"the higher","Fragments":["order","order"]},{"Key":"a \"just","Fragments":["because"]},{"Key":"\"just because","Fragments":["you"]},{"Key":"you can,","Fragments":["doesn't"]},{"Key":"can, doesn't","Fragments":["mean"]},{"Key":"you should\"","Fragments":["situation."]},{"Key":"should\" situation.","Fragments":["Thanks"]},{"Key":"situation. Thanks","Fragments":["for"]},{"Key":"Thanks! that","Fragments":["one"]},{"Key":"one should","Fragments":["have"]},{"Key":" Algorithmically","Fragments":["this"]},{"Key":"Algorithmically this","Fragments":["looks"]},{"Key":"good. With","Fragments":["regard"]},{"Key":"to style","Fragments":["I'd"]},{"Key":"style I'd","Fragments":["like","use"]},{"Key":"to note","Fragments":["that"]},{"Key":"that commonly","Fragments":["helper"]},{"Key":"commonly helper","Fragments":["methods"]},{"Key":"named slightly","Fragments":["different"]},{"Key":"main method,","Fragments":["for"]},{"Key":"method, for","Fragments":["example"]},{"Key":"example `do_filter`.","Fragments":["Naming"]},{"Key":"`do_filter`. Naming","Fragments":["them"]},{"Key":"Naming them","Fragments":["slightly"]},{"Key":"them slightly","Fragments":["different"]},{"Key":"different makes","Fragments":["it"]},{"Key":"to spot","Fragments":["the"]},{"Key":"spot the","Fragments":["control"]},{"Key":"initial instinct","Fragments":["was"]},{"Key":"instinct was","Fragments":["to"]},{"Key":"to ignore","Fragments":["the","this","the"]},{"Key":"the supplied","Fragments":["cond"]},{"Key":"supplied cond","Fragments":["and"]},{"Key":"guards instead.","Fragments":["However"]},{"Key":"instead. However","Fragments":["I"]},{"Key":"couldn't see","Fragments":["a"]},{"Key":"a straight","Fragments":["forward"]},{"Key":"straight forward","Fragments":["way"]},{"Key":"forward way","Fragments":["to"]},{"Key":"test regexs","Fragments":["in"]},{"Key":"regexs in","Fragments":["a"]},{"Key":"guard. Looking","Fragments":["forward"]},{"Key":"this better,","Fragments":["or"]},{"Key":"better, or","Fragments":["at"]},{"Key":"least more","Fragments":["idiomatically."]},{"Key":"more idiomatically.","Fragments":[":)"]},{"Key":"so subtle","Fragments":["nudges"]},{"Key":"subtle nudges","Fragments":["in"]},{"Key":"nudges in","Fragments":["the"]},{"Key":"do tail","Fragments":["recursion"]},{"Key":"and `filter`","Fragments":["because","functions","implementations.","(the"]},{"Key":"`filter` because","Fragments":["I"]},{"Key":"concise way.","Fragments":["I"]},{"Key":"did actually","Fragments":["start"]},{"Key":"actually start","Fragments":["with"]},{"Key":"was working","Fragments":["on"]},{"Key":"on filter,","Fragments":["I"]},{"Key":"filter, I","Fragments":["went"]},{"Key":"this direction","Fragments":["because"]},{"Key":"direction because","Fragments":["it"]},{"Key":"direct and","Fragments":["concise."]},{"Key":"can't believe","Fragments":["I"]},{"Key":"believe I","Fragments":["didn't","need"]},{"Key":"the `reverse`","Fragments":["for","method,"]},{"Key":"`reverse` for","Fragments":["the"]},{"Key":"the `append`,","Fragments":["I"]},{"Key":"`append`, I","Fragments":["dismissed"]},{"Key":"I dismissed","Fragments":["it"]},{"Key":"dismissed it","Fragments":["as"]},{"Key":"as 'ugly'","Fragments":["at"]},{"Key":"'ugly' at","Fragments":["first"]},{"Key":"settled for","Fragments":["what"]},{"Key":"I *think*the","Fragments":["`concat`"]},{"Key":"*think*the `concat`","Fragments":["function"]},{"Key":"`concat` function","Fragments":["should"]},{"Key":"be fixed","Fragments":["now,","at"]},{"Key":"fixed now,","Fragments":["all"]},{"Key":"now, all","Fragments":["of"]},{"Key":"tests run","Fragments":["and","in","consistently"]},{"Key":"run and","Fragments":["this"]},{"Key":"this shouldn't","Fragments":["run","work"]},{"Key":"shouldn't run","Fragments":["in"]},{"Key":"in quadratic","Fragments":["time."]},{"Key":"quadratic time.","Fragments":["I"]},{"Key":"time. I","Fragments":["do,"]},{"Key":"I do,","Fragments":["however,"]},{"Key":"do, however,","Fragments":["feel"]},{"Key":"however, feel","Fragments":["like"]},{"Key":"way do","Fragments":["'fix'"]},{"Key":"do 'fix'","Fragments":["the"]},{"Key":"'fix' the","Fragments":["`contact`"]},{"Key":"the `contact`","Fragments":["function"]},{"Key":"`contact` function","Fragments":["so"]},{"Key":"have so","Fragments":["many"]},{"Key":"many nested","Fragments":["functions,","functions"]},{"Key":"really come","Fragments":["up"]},{"Key":"`concat` looks","Fragments":["good"]},{"Key":"not many","Fragments":["nested"]},{"Key":"nested functions","Fragments":["at"]},{"Key":"to tail","Fragments":["recursion"]},{"Key":"in `map`","Fragments":["and"]},{"Key":"and `filter`:","Fragments":["it's"]},{"Key":"`filter`: it's","Fragments":["impossible"]},{"Key":"it's impossible","Fragments":["to"]},{"Key":"impossible to","Fragments":["get"]},{"Key":"overflow in","Fragments":["Erlang/Elixir"]},{"Key":"in Erlang/Elixir","Fragments":["it"]},{"Key":"Erlang/Elixir it","Fragments":["seems"]},{"Key":"seems but","Fragments":["in"]},{"Key":"in for","Fragments":["example"]},{"Key":"example OCaml","Fragments":["not"]},{"Key":"OCaml not","Fragments":["making"]},{"Key":"making those","Fragments":["tail"]},{"Key":"those tail","Fragments":["recursive"]},{"Key":"recursive will","Fragments":["cause"]},{"Key":"a `Stack_overflow`","Fragments":["exception"]},{"Key":"`Stack_overflow` exception","Fragments":["to"]},{"Key":"exception to","Fragments":["be","the"]},{"Key":"thrown for","Fragments":["very"]},{"Key":"large lists.","Fragments":["In","What"]},{"Key":"that non-tail-recursive","Fragments":["version"]},{"Key":"non-tail-recursive version","Fragments":["eats"]},{"Key":"version eats","Fragments":["more"]},{"Key":"eats more","Fragments":["memory"]},{"Key":"memory (temporarily)","Fragments":["than"]},{"Key":"(temporarily) than","Fragments":["the"]},{"Key":" Realised","Fragments":["I'd"]},{"Key":"Realised I'd","Fragments":["made"]},{"Key":"I'd made","Fragments":["a"]},{"Key":"small boo-boo","Fragments":["in"]},{"Key":"boo-boo in","Fragments":["my"]},{"Key":"my contains_letters?","Fragments":["regex"]},{"Key":"contains_letters? regex","Fragments":[":)"]},{"Key":" @halie","Fragments":["Thanks"]},{"Key":"@halie Thanks","Fragments":["for"]},{"Key":"the comprehensive","Fragments":["explanation."]},{"Key":"am familiar","Fragments":["with"]},{"Key":"i forgot","Fragments":["about"]},{"Key":"it completely,","Fragments":["and"]},{"Key":"completely, and","Fragments":["here"]},{"Key":"and here","Fragments":["i"]},{"Key":"here i","Fragments":["was"]},{"Key":"reason of","Fragments":["test"]},{"Key":"cases with","Fragments":["large"]},{"Key":"with large","Fragments":["lists.","lists)"]},{"Key":"think now?","Fragments":["is"]},{"Key":"now? is","Fragments":["there"]},{"Key":"will trust","Fragments":["you"]},{"Key":"trust you","Fragments":["on"]},{"Key":"tail recursion,","Fragments":["thanks","but","do"]},{"Key":"recursion, thanks","Fragments":["again"]},{"Key":"exercise. The","Fragments":["other"]},{"Key":"The other","Fragments":["regexes","alternatives"]},{"Key":"by calls","Fragments":["to"]},{"Key":"to `String`","Fragments":["functions,"]},{"Key":"`String` functions,","Fragments":["which"]},{"Key":"you wrap","Fragments":["the"]},{"Key":"of `parse`","Fragments":["in"]},{"Key":"`parse` in","Fragments":["a"]},{"Key":"Typically predicate","Fragments":["methods"]},{"Key":"methods (methods","Fragments":["that"]},{"Key":"(methods that","Fragments":["return"]},{"Key":"boolean result)","Fragments":["in"]},{"Key":"result) in","Fragments":["Elixir"]},{"Key":"named with","Fragments":["a"]},{"Key":"a trailing","Fragments":["question"]},{"Key":"trailing question","Fragments":["mark"]},{"Key":"mark like","Fragments":["`four_years?`."]},{"Key":"clear just","Fragments":["from"]},{"Key":"just from","Fragments":["the"]},{"Key":"functions what","Fragments":["they"]},{"Key":"do or","Fragments":["what"]},{"Key":"value they","Fragments":["return"]},{"Key":"return means.","Fragments":["I"]},{"Key":"means. I","Fragments":["know"]},{"Key":"hard functions","Fragments":["to"]},{"Key":"name concisely,","Fragments":["but"]},{"Key":"concisely, but","Fragments":["what"]},{"Key":"think? Are","Fragments":["there","there"]},{"Key":"there names","Fragments":["you","you"]},{"Key":"names you","Fragments":["could","could"]},{"Key":"tests? This","Fragments":["implementation"]},{"Key":"of `sort`","Fragments":["I"]},{"Key":"`sort` I","Fragments":["believe"]},{"Key":"believe will","Fragments":["only"]},{"Key":"the grades,","Fragments":["not"]},{"Key":"grades, not","Fragments":["the"]},{"Key":"the students","Fragments":["in","each"]},{"Key":"students in","Fragments":["each"]},{"Key":"in each","Fragments":["grade,","of","iteration","of"]},{"Key":"each grade,","Fragments":["right?"]},{"Key":"used helper","Fragments":["functions"]},{"Key":"testing properties","Fragments":["of"]},{"Key":"input. I’m","Fragments":["wondering"]},{"Key":"I’m wondering","Fragments":["if"]},{"Key":"them private?","Fragments":["I"]},{"Key":"private? I","Fragments":["also"]},{"Key":"also noticed","Fragments":["that"]},{"Key":"an \u003ccode\u003einvalid_string?(str)\u003c/code\u003e","Fragments":["function"]},{"Key":"\u003ccode\u003einvalid_string?(str)\u003c/code\u003e function","Fragments":["which"]},{"Key":"you don’t","Fragments":["actually"]},{"Key":"don’t actually","Fragments":["call"]},{"Key":"actually call","Fragments":["in"]},{"Key":"module. Were","Fragments":["you"]},{"Key":"Were you","Fragments":["planning"]},{"Key":"you planning","Fragments":["on"]},{"Key":"planning on","Fragments":["using"]},{"Key":"the `number`","Fragments":["function","function"]},{"Key":"`number` function","Fragments":["reads.","was"]},{"Key":"function reads.","Fragments":["It"]},{"Key":"reads. It","Fragments":["makes"]},{"Key":"it very","Fragments":["clear"]},{"Key":"very clear","Fragments":["that"]},{"Key":"not valid","Fragments":["it"]},{"Key":"valid it","Fragments":["returns"]},{"Key":"Regex in","Fragments":["`valid_number`"]},{"Key":"in `valid_number`","Fragments":["to"]},{"Key":"`valid_number` to","Fragments":["capture"]},{"Key":"to capture","Fragments":["just"]},{"Key":"capture just","Fragments":["the"]},{"Key":"the 10","Fragments":["digits","last"]},{"Key":"digits we're","Fragments":["interested"]},{"Key":"we're interested","Fragments":["in."]},{"Key":"interested in.","Fragments":["The"]},{"Key":"in. The","Fragments":["`List.last`"]},{"Key":"The `List.last`","Fragments":["part"]},{"Key":"`List.last` part","Fragments":["took"]},{"Key":"part took","Fragments":["me"]},{"Key":"to understand.","Fragments":["It's","You","(What"]},{"Key":"understand. It's","Fragments":["concise,"]},{"Key":"It's concise,","Fragments":["but"]},{"Key":"little non-obvious.","Fragments":["What"]},{"Key":"non-obvious. What","Fragments":["do"]},{"Key":"more expressive/clear","Fragments":["to"]},{"Key":"expressive/clear to","Fragments":["do"]},{"Key":"do an","Fragments":["explicit"]},{"Key":"explicit check","Fragments":["to"]},{"Key":"is empty?","Fragments":["Maybe"]},{"Key":"empty? Maybe","Fragments":["returning"]},{"Key":"Maybe returning","Fragments":["`false`"]},{"Key":"returning `false`","Fragments":["if"]},{"Key":"`false` if","Fragments":["so?"]},{"Key":"the `clean`","Fragments":["function."]},{"Key":"`clean` function.","Fragments":["Another"]},{"Key":"function. Another","Fragments":["way"]},{"Key":"with `String.replace`","Fragments":["and"]},{"Key":"`String.replace` and","Fragments":["replace"]},{"Key":"replace any","Fragments":["non-digits"]},{"Key":"any non-digits","Fragments":["with"]},{"Key":"non-digits with","Fragments":["an"]},{"Key":"string. I'm","Fragments":["not"]},{"Key":"would end","Fragments":["up"]},{"Key":"the replace","Fragments":["method"]},{"Key":"replace method","Fragments":["might"]},{"Key":"functions `next_three`","Fragments":["and"]},{"Key":"`next_three` and","Fragments":["`last_four`,"]},{"Key":"and `last_four`,","Fragments":["those"]},{"Key":"`last_four`, those","Fragments":["are"]},{"Key":"are kind","Fragments":["of"]},{"Key":"name since","Fragments":["most"]},{"Key":"since most","Fragments":["people"]},{"Key":"the significance","Fragments":["(if"]},{"Key":"significance (if","Fragments":["any)"]},{"Key":"(if any)","Fragments":["of"]},{"Key":"any) of","Fragments":["the"]},{"Key":"different sections","Fragments":["of"]},{"Key":"phone numbers.","Fragments":["The"]},{"Key":"numbers. The","Fragments":["comments"]},{"Key":"The comments","Fragments":["in"]},{"Key":"code called","Fragments":["those"]},{"Key":"called those","Fragments":["sections"]},{"Key":"those sections","Fragments":["\"exchange"]},{"Key":"sections \"exchange","Fragments":["(number)\""]},{"Key":"\"exchange (number)\"","Fragments":["and"]},{"Key":"(number)\" and","Fragments":["\"subscriber"]},{"Key":"and \"subscriber","Fragments":["number\","]},{"Key":"\"subscriber number\",","Fragments":["respectively."]},{"Key":"number\", respectively.","Fragments":["Maybe"]},{"Key":"respectively. Maybe","Fragments":["you"]},{"Key":"use those","Fragments":["names?","in"]},{"Key":"those names?","Fragments":["I"]},{"Key":"names? I","Fragments":["don't"]},{"Key":"name `last_four`","Fragments":["because"]},{"Key":"`last_four` because","Fragments":["that's"]},{"Key":"that's unambiguous,","Fragments":["but"]},{"Key":"unambiguous, but","Fragments":["`next_three`"]},{"Key":"but `next_three`","Fragments":["bothers"]},{"Key":"`next_three` bothers","Fragments":["me"]},{"Key":"code assumes","Fragments":["will"]},{"Key":"assumes will","Fragments":["be"]},{"Key":"called first.","Fragments":["Next"]},{"Key":"first. Next","Fragments":["after"]},{"Key":"Next after","Fragments":["what?"]},{"Key":"`pretty` function,","Fragments":["using"]},{"Key":"function, using","Fragments":["`Enum.join`"]},{"Key":"using `Enum.join`","Fragments":["seems"]},{"Key":"`Enum.join` seems","Fragments":["good."]},{"Key":"seems good.","Fragments":["Alternatively,"]},{"Key":"good. Alternatively,","Fragments":["did"]},{"Key":"Alternatively, did","Fragments":["you"]},{"Key":"do string","Fragments":["interpolation"]},{"Key":"interpolation with","Fragments":["`\"hello"]},{"Key":"with `\"hello","Fragments":["#{code}\"`?"]},{"Key":"`\"hello #{code}\"`?","Fragments":["That"]},{"Key":"#{code}\"`? That","Fragments":["might"]},{"Key":"might result","Fragments":["in"]},{"Key":"great naming","Fragments":["scheme"]},{"Key":"scheme for","Fragments":["those"]},{"Key":"be. Maybe","Fragments":["you"]},{"Key":"like `multiple_of?(number,","Fragments":["multiple)`"]},{"Key":"`multiple_of?(number, multiple)`","Fragments":["and"]},{"Key":"multiple)` and","Fragments":["then"]},{"Key":"with 4,","Fragments":["400"]},{"Key":"4, 400","Fragments":["and"]},{"Key":"400 and","Fragments":["100?"]},{"Key":"as going","Fragments":["to"]},{"Key":"multiple lines,","Fragments":["I"]},{"Key":"totally fine.","Fragments":["I'd"]},{"Key":"fine. I'd","Fragments":["tend"]},{"Key":"see doing","Fragments":["it"]},{"Key":" multiple_of?(year,","Fragments":["4)"]},{"Key":"multiple_of?(year, 4)","Fragments":["\u0026\u0026"]},{"Key":" (multiple_of?(year,","Fragments":["400)"]},{"Key":"(multiple_of?(year, 400)","Fragments":["||"]},{"Key":"400) ||","Fragments":["!multiple_of?(year,"]},{"Key":"|| !multiple_of?(year,","Fragments":["100)"]},{"Key":" Hmm...","Fragments":["yeah,"]},{"Key":"Hmm... yeah,","Fragments":["maybe"]},{"Key":"be updated","Fragments":["to"]},{"Key":"sure people","Fragments":["are"]},{"Key":"are sorting","Fragments":["the"]},{"Key":"names. Would","Fragments":["you"]},{"Key":"in submitting","Fragments":["a"]},{"Key":"request with","Fragments":["some"]},{"Key":"suite, since","Fragments":["you"]},{"Key":"issue? If","Fragments":["not,"]},{"Key":"was leaning","Fragments":["towards"]},{"Key":"towards `every_x_years`","Fragments":["but"]},{"Key":"`every_x_years` but","Fragments":["I"]},{"Key":"was somewhat","Fragments":["afraid"]},{"Key":"somewhat afraid","Fragments":["of"]},{"Key":"afraid of","Fragments":["making"]},{"Key":"the `leap_year?`","Fragments":["method"]},{"Key":"`leap_year?` method","Fragments":["too"]},{"Key":"method too","Fragments":["long,"]},{"Key":"too long,","Fragments":["it"]},{"Key":"long, it","Fragments":["is"]},{"Key":"already longer","Fragments":["than"]},{"Key":"I like.","Fragments":["I","As"]},{"Key":"like. I","Fragments":["was"]},{"Key":"was unsure","Fragments":["what"]},{"Key":"unsure what","Fragments":["the"]},{"Key":"taking things","Fragments":["to"]},{"Key":" it","Fragments":["does"]},{"Key":"does pass","Fragments":["all","the","that"]},{"Key":"just looking","Fragments":["at"]},{"Key":"suite it","Fragments":["doesn't"]},{"Key":"force me","Fragments":["to"]},{"Key":"individual grade","Fragments":["output."]},{"Key":"grade output.","Fragments":["The"]},{"Key":"output. The","Fragments":["final"]},{"Key":"The final","Fragments":["test"]},{"Key":"test only","Fragments":["sorts"]},{"Key":"only sorts","Fragments":["the"]},{"Key":"the school.","Fragments":["I"]},{"Key":"school. I","Fragments":["was"]},{"Key":"was surprised,","Fragments":["the"]},{"Key":"surprised, the","Fragments":["other"]},{"Key":"explicit test","Fragments":["for"]},{"Key":"feedback! That","Fragments":["will"]},{"Key":"That will","Fragments":["teach"]},{"Key":"will teach","Fragments":["me"]},{"Key":"comments very","Fragments":["well."]},{"Key":"them `npa`","Fragments":["and"]},{"Key":"`npa` and","Fragments":["`nxx`"]},{"Key":"and `nxx`","Fragments":["but"]},{"Key":"`nxx` but","Fragments":["I"]},{"Key":"didn't expect","Fragments":["anyone"]},{"Key":"expect anyone","Fragments":["would"]},{"Key":"anyone would","Fragments":["know"]},{"Key":"would know","Fragments":["what"]},{"Key":"that meant.","Fragments":["`exchange`"]},{"Key":"meant. `exchange`","Fragments":["and"]},{"Key":"`exchange` and","Fragments":["`subscriber_number`"]},{"Key":"and `subscriber_number`","Fragments":["definitely"]},{"Key":"`subscriber_number` definitely","Fragments":["sound"]},{"Key":"definitely sound","Fragments":["better"]},{"Key":"sound better","Fragments":["and"]},{"Key":"being accurate","Fragments":["and"]},{"Key":"accurate and","Fragments":["lining"]},{"Key":"and lining","Fragments":["up"]},{"Key":"lining up","Fragments":["with"]},{"Key":"did use","Fragments":["`scan`"]},{"Key":"use `scan`","Fragments":["over"]},{"Key":"`scan` over","Fragments":["`replace`"]},{"Key":"over `replace`","Fragments":["intentionally"]},{"Key":"`replace` intentionally","Fragments":["and"]},{"Key":"intentionally and","Fragments":["for"]},{"Key":"for bad","Fragments":["reasons,"]},{"Key":"bad reasons,","Fragments":["this"]},{"Key":"reasons, this","Fragments":["feels"]},{"Key":"this feels","Fragments":["better."]},{"Key":"way with","Fragments":["the"]},{"Key":"the `valid_number`","Fragments":["function,"]},{"Key":"`valid_number` function,","Fragments":["I"]},{"Key":"my mind","Fragments":["when"]},{"Key":"mind when","Fragments":["I"]},{"Key":"first submitted","Fragments":["this"]},{"Key":"didn't go","Fragments":["this"]},{"Key":"go this","Fragments":["way"]},{"Key":"as people","Fragments":["don't"]},{"Key":"mind a","Fragments":["little"]},{"Key":"little regex.","Fragments":["what"]},{"Key":"regex. what","Fragments":["do"]},{"Key":" yeah,","Fragments":["you"]},{"Key":"right. I","Fragments":["didn't"]},{"Key":"the communication","Fragments":["of"]},{"Key":"communication of","Fragments":["the"]},{"Key":"the year","Fragments":["but"]},{"Key":"year but","Fragments":["I"]},{"Key":"first argument.","Fragments":["Much"]},{"Key":"argument. Much","Fragments":["more"]},{"Key":"Much more","Fragments":["clear."]},{"Key":"No, perfect.","Fragments":["I"]},{"Key":"perfect. I","Fragments":["have"]},{"Key":"been lurking","Fragments":["in"]},{"Key":"lurking in","Fragments":["the"]},{"Key":"the mailing","Fragments":["list"]},{"Key":"list looking","Fragments":["for"]},{"Key":"your changes.","Fragments":["Nice"]},{"Key":"changes. Nice","Fragments":["and"]},{"Key":"I'm sadly","Fragments":["not"]},{"Key":"sadly not","Fragments":["a"]},{"Key":"regex expert,","Fragments":["but"]},{"Key":"generally like","Fragments":["seeing"]},{"Key":"like seeing","Fragments":["named"]},{"Key":"seeing named","Fragments":["captures"]},{"Key":"named captures","Fragments":["in"]},{"Key":"in regexes,","Fragments":["because"]},{"Key":"regexes, because","Fragments":["everyone"]},{"Key":"because everyone","Fragments":["understands"]},{"Key":"everyone understands","Fragments":["names,"]},{"Key":"understands names,","Fragments":["even"]},{"Key":"names, even","Fragments":["if"]},{"Key":"regex itself.","Fragments":["I"]},{"Key":"itself. I","Fragments":["think"]},{"Key":"here makes","Fragments":["the"]},{"Key":"clearer. It's","Fragments":["obvious"]},{"Key":"It's obvious","Fragments":["that"]},{"Key":"obvious that","Fragments":["it's"]},{"Key":"number if","Fragments":["it's"]},{"Key":"it's matched,","Fragments":["and"]},{"Key":"matched, and","Fragments":["if"]},{"Key":"reader understands","Fragments":["how"]},{"Key":"understands how","Fragments":["`[]`"]},{"Key":"how `[]`","Fragments":["works"]},{"Key":"`[]` works","Fragments":["on"]},{"Key":"on keyword","Fragments":["lists,"]},{"Key":"keyword lists,","Fragments":["you"]},{"Key":"lists, you","Fragments":["can"]},{"Key":"return `nil`","Fragments":["(a"]},{"Key":"`nil` (a","Fragments":["falsy"]},{"Key":"(a falsy","Fragments":["value)"]},{"Key":"falsy value)","Fragments":["if"]},{"Key":"value) if","Fragments":["it"]},{"Key":"wasn't matched.","Fragments":["So"]},{"Key":"matched. So","Fragments":["yeah,"]},{"Key":"So yeah,","Fragments":["good"]},{"Key":"name `interval`...","Fragments":["feels"]},{"Key":"`interval`... feels","Fragments":["very"]},{"Key":"appropriate for","Fragments":["the"]},{"Key":"the pull","Fragments":["request"]},{"Key":"request and","Fragments":["in"]},{"Key":"the mean","Fragments":["time,"]},{"Key":"mean time,","Fragments":["I"]},{"Key":"time, I","Fragments":["posted"]},{"Key":"I posted","Fragments":["this."]},{"Key":"posted this.","Fragments":["I"]},{"Key":"am sorting","Fragments":["it"]},{"Key":"sorting it","Fragments":["when","on"]},{"Key":"I put","Fragments":["in","all"]},{"Key":"in it...","Fragments":["but"]},{"Key":"it... but","Fragments":["I"]},{"Key":"I fear","Fragments":["I"]},{"Key":"fear I","Fragments":["might"]},{"Key":"be doing","Fragments":["too","to"]},{"Key":"doing too","Fragments":["much"]},{"Key":"think that'll","Fragments":["be"]},{"Key":"good change","Fragments":["to"]},{"Key":"tests. Thanks","Fragments":["for"]},{"Key":"for submitting","Fragments":["it!"]},{"Key":"implementation, sorting","Fragments":["the"]},{"Key":"students each","Fragments":["time"]},{"Key":"add one","Fragments":["works,"]},{"Key":"one works,","Fragments":["but"]},{"Key":"things. Presumably","Fragments":["the"]},{"Key":"Presumably the","Fragments":["user"]},{"Key":"user of","Fragments":["the","the"]},{"Key":"module would","Fragments":["be"]},{"Key":"of students","Fragments":["but"]},{"Key":"students but","Fragments":["only"]},{"Key":"only sorting","Fragments":["the"]},{"Key":"whole roster","Fragments":["once,"]},{"Key":"roster once,","Fragments":["so"]},{"Key":"once, so","Fragments":["you're"]},{"Key":"you're maybe","Fragments":["doing"]},{"Key":"maybe doing","Fragments":["more"]},{"Key":"work than","Fragments":["you"]},{"Key":"to. What","Fragments":["do"]},{"Key":"Another performance","Fragments":["improvement"]},{"Key":"consider for","Fragments":["the"]},{"Key":"]` syntax","Fragments":["for"]},{"Key":"very efficiently","Fragments":["adding"]},{"Key":"efficiently adding","Fragments":["an"]},{"Key":"think `[head|tail]`","Fragments":["thinking"]},{"Key":"`[head|tail]` thinking","Fragments":["is"]},{"Key":"biggest hurdle","Fragments":["in"]},{"Key":"hurdle in","Fragments":["getting"]},{"Key":"in getting","Fragments":["my","back","the"]},{"Key":"getting my","Fragments":["head","head"]},{"Key":"on entry","Fragments":["vs."]},{"Key":"entry vs.","Fragments":["retrieval"]},{"Key":"vs. retrieval","Fragments":["for"]},{"Key":"retrieval for","Fragments":["two"]},{"Key":"for two","Fragments":["reasons:"]},{"Key":"test in","Fragments":["JavaScript"]},{"Key":"JavaScript dictated","Fragments":["that"]},{"Key":"dictated that","Fragments":["`grade`"]},{"Key":"that `grade`","Fragments":["pull"]},{"Key":"`grade` pull","Fragments":["the"]},{"Key":"list alphabetically","Fragments":["as"]},{"Key":"alphabetically as","Fragments":["well"]},{"Key":"the `sort`","Fragments":["method","function,"]},{"Key":"`sort` method","Fragments":["pull"]},{"Key":"method pull","Fragments":["grades"]},{"Key":"pull grades","Fragments":["alphabetically."]},{"Key":"grades alphabetically.","Fragments":["The"]},{"Key":"alphabetically. The","Fragments":["pull"]},{"Key":"The pull","Fragments":["request"]},{"Key":"request that","Fragments":["I"]},{"Key":"submitted followed","Fragments":["that"]},{"Key":"followed that","Fragments":["model."]},{"Key":"that model.","Fragments":["That"]},{"Key":"model. That","Fragments":["would"]},{"Key":"me sorting","Fragments":["the"]},{"Key":"the grades","Fragments":["twice.","and"]},{"Key":"grades twice.","Fragments":["I"]},{"Key":"twice. I","Fragments":["felt"]},{"Key":"felt this","Fragments":["was"]},{"Key":"the dryer","Fragments":["way."]},{"Key":"2. Thinking","Fragments":["about"]},{"Key":"Thinking about","Fragments":["how","this"]},{"Key":"a school.","Fragments":["Generally,"]},{"Key":"school. Generally,","Fragments":["you"]},{"Key":"Generally, you","Fragments":["would"]},{"Key":"only add","Fragments":["students"]},{"Key":"add students","Fragments":["once"]},{"Key":"students once","Fragments":["per"]},{"Key":"per term,","Fragments":["but"]},{"Key":"term, but","Fragments":["you"]},{"Key":"would pull","Fragments":["the"]},{"Key":"the roster","Fragments":["and"]},{"Key":"roster and","Fragments":["grade"]},{"Key":"and grade","Fragments":["list"]},{"Key":"grade list","Fragments":["regularly"]},{"Key":"list regularly","Fragments":["throughout"]},{"Key":"regularly throughout","Fragments":["the"]},{"Key":"the term.","Fragments":["You"]},{"Key":"term. You","Fragments":["might"]},{"Key":"a student","Fragments":["here"]},{"Key":"student here","Fragments":["and"]},{"Key":"for whatever","Fragments":["reason,"]},{"Key":"whatever reason,","Fragments":["but"]},{"Key":"reason, but","Fragments":["that"]},{"Key":"would really","Fragments":["be"]},{"Key":"the exception.","Fragments":["So,"]},{"Key":"exception. So,","Fragments":["I"]},{"Key":"that front","Fragments":["loading"]},{"Key":"front loading","Fragments":["the"]},{"Key":"expense would","Fragments":["be"]},{"Key":"more practical","Fragments":["that"]},{"Key":"practical that","Fragments":["sorting"]},{"Key":"sorting every","Fragments":["time"]},{"Key":"you pull","Fragments":["a"]},{"Key":"pull a","Fragments":["roster."]},{"Key":" Removed","Fragments":["negative"]},{"Key":"Removed negative","Fragments":["logic"]},{"Key":"negative logic","Fragments":["in"]},{"Key":"that choice","Fragments":["for"]},{"Key":"good reason.","Fragments":["I"]},{"Key":"reason. I","Fragments":["guess"]},{"Key":"it's sort","Fragments":["of"]},{"Key":"performance when","Fragments":["you"]},{"Key":"a super","Fragments":["concrete"]},{"Key":"super concrete","Fragments":["use"]},{"Key":"concrete use","Fragments":["case."]},{"Key":"case. Let","Fragments":["me"]},{"Key":"me push","Fragments":["back"]},{"Key":"push back","Fragments":["just","a"]},{"Key":"back just","Fragments":["a"]},{"Key":"Since this","Fragments":["is"]},{"Key":"and we're","Fragments":["not"]},{"Key":"we're not","Fragments":["mutating"]},{"Key":"not mutating","Fragments":["internal"]},{"Key":"mutating internal","Fragments":["state,"]},{"Key":"internal state,","Fragments":["but"]},{"Key":"state, but","Fragments":["rather"]},{"Key":"rather making","Fragments":["a"]},{"Key":"new copy","Fragments":["of","of"]},{"Key":"copy of","Fragments":["the","the"]},{"Key":"HashDict every","Fragments":["time"]},{"Key":"and passing","Fragments":["it"]},{"Key":"each function,","Fragments":["I"]},{"Key":"of pictured","Fragments":["the"]},{"Key":"pictured the","Fragments":["process"]},{"Key":"process working","Fragments":["like"]},{"Key":"working like","Fragments":["this:"]},{"Key":"First you","Fragments":["add"]},{"Key":"add all","Fragments":["the"]},{"Key":"the students,","Fragments":["efficiently."]},{"Key":"students, efficiently.","Fragments":["Then,"]},{"Key":"efficiently. Then,","Fragments":["if"]},{"Key":"Then, if","Fragments":["you"]},{"Key":"Dict sorted,","Fragments":["you"]},{"Key":"sorted, you","Fragments":["call"]},{"Key":"call `sort`","Fragments":["which"]},{"Key":"`sort` which","Fragments":["returns"]},{"Key":"HashDict where","Fragments":["the"]},{"Key":"grades and","Fragments":["students"]},{"Key":"and students","Fragments":["are"]},{"Key":"students are","Fragments":["sorted."]},{"Key":"sorted. Then","Fragments":["you"]},{"Key":"pass that","Fragments":["sorted","test.","test,"]},{"Key":"that sorted","Fragments":["version"]},{"Key":"sorted version","Fragments":["around"]},{"Key":"version around","Fragments":["and"]},{"Key":"around and","Fragments":["use"]},{"Key":"it however","Fragments":["you"]},{"Key":"you need...","Fragments":["you"]},{"Key":"need... you","Fragments":["wouldn't"]},{"Key":"wouldn't need","Fragments":["to"]},{"Key":"to re-sort","Fragments":["it"]},{"Key":"re-sort it","Fragments":["every"]},{"Key":"it every","Fragments":["time"]},{"Key":"you accessed","Fragments":["it,"]},{"Key":"accessed it,","Fragments":["unlike"]},{"Key":"it, unlike","Fragments":["in"]},{"Key":"unlike in","Fragments":["the"]},{"Key":"OO versions","Fragments":["of"]},{"Key":"exercise, where","Fragments":["the"]},{"Key":"state is","Fragments":["hidden"]},{"Key":"is hidden","Fragments":["from"]},{"Key":"hidden from","Fragments":["you"]},{"Key":"from you","Fragments":["and"]},{"Key":"and abstracted","Fragments":["away."]},{"Key":"course in","Fragments":["the"]},{"Key":"world at","Fragments":["some"]},{"Key":"some point","Fragments":["the","in"]},{"Key":"point the","Fragments":["HashDict"]},{"Key":"HashDict would","Fragments":["get"]},{"Key":"get persisted","Fragments":["to"]},{"Key":"persisted to","Fragments":["the"]},{"Key":"the database","Fragments":["and","before"]},{"Key":"database and","Fragments":["read"]},{"Key":"and read","Fragments":["back,"]},{"Key":"read back,","Fragments":["so"]},{"Key":"back, so","Fragments":["you'd"]},{"Key":"so you'd","Fragments":["have","have"]},{"Key":"factor that","Fragments":["in,"]},{"Key":"that in,","Fragments":["too."]},{"Key":"in, too.","Fragments":["Anyway,"]},{"Key":"too. Anyway,","Fragments":["just"]},{"Key":"Anyway, just","Fragments":["some"]},{"Key":"just some","Fragments":["thoughts."]},{"Key":"some thoughts.","Fragments":["That's"]},{"Key":"thoughts. That's","Fragments":["cool"]},{"Key":"cool if","Fragments":["you"]},{"Key":"think sorting","Fragments":["it"]},{"Key":"on `add`","Fragments":["is"]},{"Key":"`add` is","Fragments":["best,"]},{"Key":"is best,","Fragments":["just"]},{"Key":"best, just","Fragments":["wanted"]},{"Key":"explain my","Fragments":["perspective"]},{"Key":"perspective as","Fragments":["well."]},{"Key":"you \"change\"","Fragments":["an"]},{"Key":"\"change\" an","Fragments":["object,"]},{"Key":"an object,","Fragments":["it"]},{"Key":"object, it","Fragments":["really"]},{"Key":"really creates","Fragments":["a"]},{"Key":"new one.","Fragments":["That"]},{"Key":"game changer.","Fragments":["Thanks"]},{"Key":"changer. Thanks","Fragments":["for"]},{"Key":"for helping","Fragments":["me"]},{"Key":"helping me","Fragments":["think"]},{"Key":"small note","Fragments":["on"]},{"Key":"on style:","Fragments":["did"]},{"Key":"style: did","Fragments":["you"]},{"Key":"write function","Fragments":["definitions","definitions"]},{"Key":"def count([]),","Fragments":["do:"]},{"Key":"count([]), do:","Fragments":["0"]},{"Key":"def count([_|t]),","Fragments":["do:"]},{"Key":"count([_|t]), do:","Fragments":["1"]},{"Key":"or not,","Fragments":["but","can","I"]},{"Key":"not, but","Fragments":["that"]},{"Key":"shorten up","Fragments":["the","the"]},{"Key":"and sometimes","Fragments":["I"]},{"Key":"sometimes I","Fragments":["find"]},{"Key":"read for","Fragments":["multiple"]},{"Key":"for multiple","Fragments":["short","clauses"]},{"Key":"multiple short","Fragments":["function"]},{"Key":"short function","Fragments":["clauses."]},{"Key":"not written","Fragments":["in"]},{"Key":"optimization. So,","Fragments":["while"]},{"Key":"So, while","Fragments":["they"]},{"Key":"while they","Fragments":["would"]},{"Key":"for relatively","Fragments":["small"]},{"Key":"relatively small","Fragments":["lists,"]},{"Key":"small lists,","Fragments":["they"]},{"Key":"lists, they","Fragments":["might"]},{"Key":"might end","Fragments":["up"]},{"Key":"using more","Fragments":["stack"]},{"Key":"more stack","Fragments":["space"]},{"Key":"stack space","Fragments":["than"]},{"Key":"space than","Fragments":["necessary"]},{"Key":"than necessary","Fragments":["and"]},{"Key":"possible you","Fragments":["could"]},{"Key":"overflow for","Fragments":["very"]},{"Key":"lists. What","Fragments":["do"]},{"Key":"new object","Fragments":["the"]},{"Key":"object the","Fragments":["runtime"]},{"Key":"runtime only","Fragments":["has"]},{"Key":"copy those","Fragments":["parts"]},{"Key":"those parts","Fragments":["that"]},{"Key":"have changed.","Fragments":["This"]},{"Key":"changed. This","Fragments":["is"]},{"Key":"makes trees","Fragments":["so"]},{"Key":"trees so","Fragments":["effective"]},{"Key":"so effective","Fragments":["for"]},{"Key":"effective for","Fragments":["functional"]},{"Key":"for functional","Fragments":["programming,"]},{"Key":"programming, if","Fragments":["you"]},{"Key":"a leaf","Fragments":["a"]},{"Key":"leaf a","Fragments":["new"]},{"Key":"new leaf","Fragments":["and"]},{"Key":"leaf and","Fragments":["a"]},{"Key":"new node","Fragments":["for"]},{"Key":"node for","Fragments":["every"]},{"Key":"every parent,","Fragments":["grandparent,"]},{"Key":"parent, grandparent,","Fragments":["etc"]},{"Key":"grandparent, etc","Fragments":["of"]},{"Key":"etc of","Fragments":["the"]},{"Key":"the leaf","Fragments":["needs"]},{"Key":"leaf needs","Fragments":["to"]},{"Key":"be created.","Fragments":["But"]},{"Key":"created. But","Fragments":["the"]},{"Key":"the tree","Fragments":["hasn't"]},{"Key":"tree hasn't","Fragments":["changed"]},{"Key":"hasn't changed","Fragments":["so"]},{"Key":"changed so","Fragments":["the"]},{"Key":"new nodes","Fragments":["can"]},{"Key":"nodes can","Fragments":["just"]},{"Key":"other branches.","Fragments":["In"]},{"Key":"branches. In","Fragments":["other"]},{"Key":"words unlike","Fragments":["with"]},{"Key":"unlike with","Fragments":["C"]},{"Key":"with C","Fragments":["you"]},{"Key":"C you","Fragments":["can"]},{"Key":"can share","Fragments":["pointers"]},{"Key":"share pointers","Fragments":["without"]},{"Key":"pointers without","Fragments":["fearing"]},{"Key":"without fearing","Fragments":["that"]},{"Key":"fearing that","Fragments":["the"]},{"Key":"values pointed","Fragments":["to"]},{"Key":"pointed to","Fragments":["will"]},{"Key":"to will","Fragments":["change,"]},{"Key":"will change,","Fragments":["because"]},{"Key":"change, because","Fragments":["they"]},{"Key":"the `Enum.sort","Fragments":["|\u003e"]},{"Key":"`Enum.sort |\u003e","Fragments":["HashDict.new`?"]},{"Key":"|\u003e HashDict.new`?","Fragments":["`HashDict.new`"]},{"Key":"HashDict.new`? `HashDict.new`","Fragments":["doesn't"]},{"Key":"`HashDict.new` doesn't","Fragments":["make"]},{"Key":"any presumptions","Fragments":["about"]},{"Key":"presumptions about","Fragments":["the"]},{"Key":"input order","Fragments":["of"]},{"Key":"of keys","Fragments":["so"]},{"Key":"keys so","Fragments":["there"]},{"Key":"so there","Fragments":["is"]},{"Key":"no benefit","Fragments":["to"]},{"Key":"to sorting","Fragments":["the"]},{"Key":"you submit","Fragments":["this"]},{"Key":"this accidentally?","Fragments":["This"]},{"Key":"accidentally? This","Fragments":["code"]},{"Key":"won't pass","Fragments":["the"]},{"Key":"Probably doesn't","Fragments":["solve"]},{"Key":"doesn't solve","Fragments":["the"]},{"Key":"problem using","Fragments":["idiomatic"]},{"Key":"using idiomatic","Fragments":["elixir."]},{"Key":"idiomatic elixir.","Fragments":["Just"]},{"Key":"elixir. Just","Fragments":["starting"]},{"Key":"starting to","Fragments":["dive","learn"]},{"Key":"to dive","Fragments":["into","in"]},{"Key":"dive into","Fragments":["elixir;"]},{"Key":"into elixir;","Fragments":["still"]},{"Key":"elixir; still","Fragments":["need"]},{"Key":"review the","Fragments":["best"]},{"Key":"manipulate numbers","Fragments":["which"]},{"Key":"numbers which","Fragments":["are"]},{"Key":"are within","Fragments":["strings."]},{"Key":" Suggestions","Fragments":["on"]},{"Key":"Suggestions on","Fragments":["what"]},{"Key":"exactly to","Fragments":["look"]},{"Key":"this submission","Fragments":["would","–"]},{"Key":"submission would","Fragments":["be"]},{"Key":"be greatly","Fragments":["appreciated.","appreciated."]},{"Key":"recursion when","Fragments":["higher","Enum.reduce/3"]},{"Key":"when higher","Fragments":["order"]},{"Key":"functions (like","Fragments":["`Enum.map`)"]},{"Key":"(like `Enum.map`)","Fragments":["will"]},{"Key":"`Enum.map`) will","Fragments":["do."]},{"Key":"will do.","Fragments":["The"]},{"Key":"do. The","Fragments":["code"]},{"Key":"code becomes","Fragments":["easier"]},{"Key":"becomes easier","Fragments":["to"]},{"Key":"right idea","Fragments":["using"]},{"Key":"idea using","Fragments":["`cond`"]},{"Key":"and extracting","Fragments":["some"]},{"Key":"extracting some","Fragments":["helper"]},{"Key":"some helper","Fragments":["functions"]},{"Key":"give good","Fragments":["names"]},{"Key":"good names","Fragments":["to","to","to","..."]},{"Key":"just try","Fragments":["to"]},{"Key":"`cond` down","Fragments":["to"]},{"Key":"just four","Fragments":["cases,"]},{"Key":"four cases,","Fragments":["though,"]},{"Key":"cases, though,","Fragments":["those"]},{"Key":"though, those","Fragments":["cases"]},{"Key":"those cases","Fragments":["being","things","pass."]},{"Key":"cases being","Fragments":["(in"]},{"Key":"being (in","Fragments":["your"]},{"Key":"(in your","Fragments":["whatever"]},{"Key":"your whatever","Fragments":["words"]},{"Key":"whatever words","Fragments":["you"]},{"Key":"find most","Fragments":["appropriate):"]},{"Key":"most appropriate):","Fragments":["1."]},{"Key":"appropriate): 1.","Fragments":["silence,"]},{"Key":"1. silence,","Fragments":["2."]},{"Key":"silence, 2.","Fragments":["asking,"]},{"Key":"2. asking,","Fragments":["3."]},{"Key":"asking, 3.","Fragments":["shouting,"]},{"Key":"3. shouting,","Fragments":["4."]},{"Key":"shouting, 4.","Fragments":["anything"]},{"Key":"4. anything","Fragments":["else."]},{"Key":"anything else.","Fragments":["(Note"]},{"Key":"else. (Note","Fragments":["it's"]},{"Key":"(Note it's","Fragments":["common"]},{"Key":"the anything","Fragments":["else"]},{"Key":"would focus","Fragments":["on"]},{"Key":"on trying","Fragments":["to"]},{"Key":"lowest common","Fragments":["denominator"]},{"Key":"common denominator","Fragments":["of"]},{"Key":"denominator of","Fragments":["the"]},{"Key":"the cases,","Fragments":["basically,"]},{"Key":"cases, basically,","Fragments":["what"]},{"Key":"basically, what","Fragments":["really"]},{"Key":"what really","Fragments":["signifies"]},{"Key":"really signifies","Fragments":["shouting,"]},{"Key":"signifies shouting,","Fragments":["or"]},{"Key":"shouting, or","Fragments":["asking?"]},{"Key":"or asking?","Fragments":["Let"]},{"Key":"asking? Let","Fragments":["me"]},{"Key":"help getting","Fragments":["to"]},{"Key":"the root","Fragments":["of"]},{"Key":"root of","Fragments":["what"]},{"Key":"what traits","Fragments":["of"]},{"Key":"traits of","Fragments":["the"]},{"Key":"string uniquely","Fragments":["identify"]},{"Key":"uniquely identify","Fragments":["those"]},{"Key":"identify those","Fragments":["things."]},{"Key":"those things.","Fragments":["One"]},{"Key":"things. One","Fragments":["hint"]},{"Key":"One hint","Fragments":["is"]},{"Key":"hint is","Fragments":["that"]},{"Key":"the letters","Fragments":["in","in"]},{"Key":"test are","Fragments":["all","implemented."]},{"Key":"upper case,","Fragments":["even","it"]},{"Key":"case, even","Fragments":["though"]},{"Key":"though they","Fragments":["may"]},{"Key":"they may","Fragments":["not"]},{"Key":"the non-Russian","Fragments":["eye."]},{"Key":"private by","Fragments":["using"]},{"Key":"that helps.","Fragments":["Feel","If"]},{"Key":"helps. Feel","Fragments":["free"]},{"Key":"ask if","Fragments":["you","you"]},{"Key":"new `~`","Fragments":["instead"]},{"Key":"`~` instead","Fragments":["of"]},{"Key":"of `%`","Fragments":["for"]},{"Key":"`%` for","Fragments":["sigils."]},{"Key":"for sigils.","Fragments":["Threw"]},{"Key":"sigils. Threw","Fragments":["me"]},{"Key":"Threw me","Fragments":["off"]},{"Key":"second there.","Fragments":[":)"]},{"Key":"tests, including","Fragments":["the"]},{"Key":"Russian test?","Fragments":["I","It"]},{"Key":"test? I","Fragments":["notice"]},{"Key":"you're checking","Fragments":["explicitly","to"]},{"Key":"checking explicitly","Fragments":["for"]},{"Key":"for A-Z","Fragments":["and"]},{"Key":"A-Z and","Fragments":["not"]},{"Key":"not a-z.","Fragments":["I'm"]},{"Key":"a-z. I'm","Fragments":["guessing"]},{"Key":"guessing this","Fragments":["won't"]},{"Key":"this won't","Fragments":["handle"]},{"Key":"won't handle","Fragments":["other"]},{"Key":"handle other","Fragments":["languages?"]},{"Key":"Hmmm sorry","Fragments":["it"]},{"Key":"sorry it","Fragments":["seems"]},{"Key":"working when","Fragments":["I"]},{"Key":"run the","Fragments":["test."]},{"Key":"test. Let","Fragments":["me"]},{"Key":"me revisit","Fragments":["this."]},{"Key":" is_without","Fragments":["could"]},{"Key":"is_without could","Fragments":["just"]},{"Key":"string after","Fragments":["strip"]},{"Key":"after strip","Fragments":["=="]},{"Key":"strip ==","Fragments":["\"\""]},{"Key":"\"\" instead","Fragments":["of","of"]},{"Key":"then get","Fragments":["the"]},{"Key":" is_yell","Fragments":["won't"]},{"Key":"is_yell won't","Fragments":["work"]},{"Key":"any foreign","Fragments":["characters"]},{"Key":"foreign characters","Fragments":["(utf-8)"]},{"Key":"if some","Fragments":["of"]},{"Key":"still commented","Fragments":["out?"]},{"Key":"The hardest","Fragments":["part"]},{"Key":"hardest part","Fragments":["was"]},{"Key":"the yelling.","Fragments":["I"]},{"Key":"yelling. I","Fragments":["wasn't"]},{"Key":"if e.g.","Fragments":["\"HEY"]},{"Key":"e.g. \"HEY","Fragments":["YOu\""]},{"Key":"\"HEY YOu\"","Fragments":["would"]},{"Key":"YOu\" would","Fragments":["be"]},{"Key":"it nice","Fragments":["and"]},{"Key":"and easy,","Fragments":["I"]},{"Key":"easy, I","Fragments":["chose"]},{"Key":"chose the","Fragments":["path"]},{"Key":"the path","Fragments":["with"]},{"Key":"path with","Fragments":["the"]},{"Key":"There's really","Fragments":["not"]},{"Key":"say here,","Fragments":["you"]},{"Key":"here, you","Fragments":["clearly"]},{"Key":"you clearly","Fragments":["understand"]},{"Key":"clearly understand","Fragments":["the"]},{"Key":"issues and","Fragments":["have"]},{"Key":"implemented the","Fragments":["functions"]},{"Key":"by swapping","Fragments":["the"]},{"Key":"inputs to","Fragments":["the"]},{"Key":"the `append`","Fragments":["call."]},{"Key":"`append` call.","Fragments":["Do"]},{"Key":"call. Do","Fragments":["you"]},{"Key":"the super-slow","Fragments":["`def"]},{"Key":"super-slow `def","Fragments":["concat(ll),"]},{"Key":"`def concat(ll),","Fragments":["do:"]},{"Key":"do: reduce(ll,","Fragments":["[],"]},{"Key":"fn l,","Fragments":["acc","acc","acc"]},{"Key":"l, acc","Fragments":["-\u003e","-\u003e","-\u003e"]},{"Key":"-\u003e append(acc,","Fragments":["l))","l))","l))"]},{"Key":"append(acc, l))","Fragments":["end`?","end`","end`"]},{"Key":"Btw, there","Fragments":["is","was"]},{"Key":"second shorthand","Fragments":["for"]},{"Key":"to named","Fragments":["functions"]},{"Key":"certain number","Fragments":["of"]},{"Key":"of arguments:","Fragments":["`\u0026append/2`"]},{"Key":"arguments: `\u0026append/2`","Fragments":["(the"]},{"Key":"`\u0026append/2` (the","Fragments":["function"]},{"Key":"(the function","Fragments":["named"]},{"Key":"named `append`","Fragments":["with"]},{"Key":"`append` with","Fragments":["2"]},{"Key":"2 arguments).","Fragments":["I"]},{"Key":"arguments). I","Fragments":["can"]},{"Key":"understand if","Fragments":["you"]},{"Key":"less explicit,","Fragments":["but"]},{"Key":"can sometimes","Fragments":["come"]},{"Key":"sometimes come","Fragments":["in"]},{"Key":"write `def`","Fragments":["and"]},{"Key":"`defp` (and","Fragments":["everything"]},{"Key":"(and everything","Fragments":["else"]},{"Key":"else that","Fragments":["takes"]},{"Key":"a `do`","Fragments":["block)"]},{"Key":"`do` block)","Fragments":["with"]},{"Key":"block) with","Fragments":["keyword"]},{"Key":"with keyword","Fragments":["syntax:"]},{"Key":"keyword syntax:","Fragments":["`def"]},{"Key":"syntax: `def","Fragments":["count(l),"]},{"Key":"`def count(l),","Fragments":["do:"]},{"Key":"do_count(l, 0)`.","Fragments":["That"]},{"Key":"0)`. That","Fragments":["works"]},{"Key":"That works","Fragments":["because"]},{"Key":"because `foo","Fragments":["do"]},{"Key":"`foo do","Fragments":["bla"]},{"Key":"do bla","Fragments":["end`"]},{"Key":"bla end`","Fragments":["is"]},{"Key":"just syntactic","Fragments":["sugar"]},{"Key":"for `foo(do:","Fragments":["bla)`,"]},{"Key":"`foo(do: bla)`,","Fragments":["which"]},{"Key":"bla)`, which","Fragments":["is"]},{"Key":"for `foo([do:","Fragments":["bla])`"]},{"Key":"`foo([do: bla])`","Fragments":["(feel"]},{"Key":"bla])` (feel","Fragments":["free"]},{"Key":"(feel free","Fragments":["to"]},{"Key":"ignore this","Fragments":["if"]},{"Key":"this if","Fragments":["it"]},{"Key":"Well `\u0026append/2`","Fragments":["isn't"]},{"Key":"`\u0026append/2` isn't","Fragments":["very"]},{"Key":"two parameters","Fragments":["mean."]},{"Key":"parameters mean.","Fragments":["But"]},{"Key":"mean. But","Fragments":["I've"]},{"Key":"But I've","Fragments":["found"]},{"Key":"found for","Fragments":["example"]},{"Key":"example `\u0026hd/1`","Fragments":["to"]},{"Key":"`\u0026hd/1` to","Fragments":["be"]},{"Key":"useful on","Fragments":["some"]},{"Key":"some occasions,","Fragments":["for"]},{"Key":"occasions, for","Fragments":["example"]},{"Key":"example `Regex.scan(...)","Fragments":["|\u003e"]},{"Key":"The issue","Fragments":["with","with"]},{"Key":"with `concat`","Fragments":["is","is"]},{"Key":"`concat` is","Fragments":["that","a","that","a"]},{"Key":"the \"obvious\"","Fragments":["way","way"]},{"Key":"\"obvious\" way","Fragments":["of","of"]},{"Key":"of `reduce(ll,","Fragments":["[],","[],"]},{"Key":"`reduce(ll, [],","Fragments":["fn","fn"]},{"Key":"l)) end`","Fragments":["you're","you're"]},{"Key":"end` you're","Fragments":["[left-folding](https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29)","[left-folding](https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29)"]},{"Key":"you're [left-folding](https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29)","Fragments":["over","over"]},{"Key":"[left-folding](https://en.wikipedia.org/wiki/Fold_%28higher-order_function%29) over","Fragments":["the","the"]},{"Key":"list. The","Fragments":["way","way"]},{"Key":"way you've","Fragments":["(correctly)","(correctly)","broken"]},{"Key":"you've (correctly)","Fragments":["written","written"]},{"Key":"(correctly) written","Fragments":["`concat`","`concat`"]},{"Key":"written `concat`","Fragments":["is","is"]},{"Key":"Let's take","Fragments":["for","for"]},{"Key":"take for","Fragments":["example","example"]},{"Key":"example the","Fragments":["concatenation","concatenation"]},{"Key":"the concatenation","Fragments":["of","of"]},{"Key":"of `[[1,","Fragments":["2],","2],"]},{"Key":"`[[1, 2],","Fragments":["[3,","[3,"]},{"Key":"2], [3,","Fragments":["4],","4],"]},{"Key":"[3, 4],","Fragments":["[5,","[5,"]},{"Key":"4], [5,","Fragments":["6]]`.","6]]`."]},{"Key":"[5, 6]]`.","Fragments":["Here's","Here's"]},{"Key":"6]]`. Here's","Fragments":["what","what"]},{"Key":"happen with","Fragments":["the","the","this"]},{"Key":"* `acc`","Fragments":["=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","="]},{"Key":"`acc` =","Fragments":["`[]`,","`[1,","`[1,","`[1,","`[]`,","`[5,","`[3,","`[1,","`[]`,","`[1,","`[1,","`[1,","`[]`,","`[5,","`[3,","`[1,"]},{"Key":"= `[]`,","Fragments":["`l`","`l`","`l`","`l`"]},{"Key":"`[]`, `l`","Fragments":["=","=","=","="]},{"Key":"`l` =","Fragments":["`[1,","`[3,","`[5,","`[5,","`[3,","`[1,","`[1,","`[3,","`[5,","`[5,","`[3,","`[1,"]},{"Key":"= `[1,","Fragments":["2]`","2]`,","2,","2,","2]`","2,","2]`","2]`,","2,","2,","2]`","2,"]},{"Key":"* Compute","Fragments":["`[]","`[1,","`[1,","`[5,","`[3,","`[1,","`[]","`[1,","`[1,","`[5,","`[3,","`[1,"]},{"Key":"Compute `[]","Fragments":["++","++"]},{"Key":"++ [1,","Fragments":["2]`","2]`"]},{"Key":"`[1, 2]`,","Fragments":["`l`","`l`"]},{"Key":"2]`, `l`","Fragments":["=","="]},{"Key":"= `[3,","Fragments":["4]`","4]`","4,","4]`","4]`","4,"]},{"Key":"Compute `[1,","Fragments":["2]","2,","2]","2]","2,","2]"]},{"Key":"`[1, 2]","Fragments":["++","++","++","++","==","==="]},{"Key":"++ [3,","Fragments":["4]`","4.","4]`","4."]},{"Key":"`[1, 2,","Fragments":["3,","3,","3,","3,","3,","3,","3,","3,"]},{"Key":"3, 4]`,","Fragments":["`l`","`l`"]},{"Key":"4]`, `l`","Fragments":["=","="]},{"Key":"= `[5,","Fragments":["6]`","6]`","6]`,","6]`","6]`","6]`,"]},{"Key":"3, 4]","Fragments":["++","++"]},{"Key":"4] ++","Fragments":["[5,","[5,","[5,","[5,"]},{"Key":"++ [5,","Fragments":["6]`","6]`","6]`","6]`"]},{"Key":"4, 5,","Fragments":["6]`","6]`,","6]`","6]`","6]`,","6]`"]},{"Key":"And here's","Fragments":["what","what"]},{"Key":"here's what","Fragments":["happens","happens"]},{"Key":"Compute `[5,","Fragments":["6]","6]"]},{"Key":"`[5, 6]","Fragments":["++","++"]},{"Key":"6] ++","Fragments":["[]`","[]`"]},{"Key":"`[5, 6]`,","Fragments":["`l`","`l`"]},{"Key":"6]`, `l`","Fragments":["=","=","=","="]},{"Key":"Compute `[3,","Fragments":["4]","4]"]},{"Key":"`[3, 4]","Fragments":["++","++"]},{"Key":"`[3, 4,","Fragments":["5,","5,"]},{"Key":"5, 6]`,","Fragments":["`l`","`l`"]},{"Key":"[3, 4.","Fragments":["5,","5,"]},{"Key":"4. 5,","Fragments":["6]`","6]`"]},{"Key":"the important","Fragments":["insight:","insight:","stuff.","function."]},{"Key":"important insight:","Fragments":["the","the"]},{"Key":"insight: the","Fragments":["time","time"]},{"Key":"(roughly) linearly","Fragments":["related","related"]},{"Key":"linearly related","Fragments":["to","to"]},{"Key":"related to","Fragments":["the","the","it's","a"]},{"Key":"the size","Fragments":["of","of","of"]},{"Key":"size of","Fragments":["the","the","the"]},{"Key":"left (the","Fragments":["first)","first)"]},{"Key":"(the first)","Fragments":["argument","argument"]},{"Key":"first) argument","Fragments":["due","due"]},{"Key":"argument due","Fragments":["to","to"]},{"Key":"lists work","Fragments":["(the","(the"]},{"Key":"work (the","Fragments":["entire","entire"]},{"Key":"(the entire","Fragments":["left","left"]},{"Key":"entire left","Fragments":["list","list"]},{"Key":"left list","Fragments":["has","has"]},{"Key":"be traversed/copied).","Fragments":["That","That"]},{"Key":"traversed/copied). That","Fragments":["means","means"]},{"Key":"that `append(list_with_500_elements,","Fragments":["list_with_million_elements)`","list_with_million_elements)`"]},{"Key":"`append(list_with_500_elements, list_with_million_elements)`","Fragments":["will","will"]},{"Key":"list_with_million_elements)` will","Fragments":["take","take"]},{"Key":"take twice","Fragments":["as","as"]},{"Key":"as `append(list_with_1000_elements,","Fragments":["list_with_million_elements)`.","list_with_million_elements)`."]},{"Key":"a left","Fragments":["folding","folding"]},{"Key":"folding concat","Fragments":["concatenating","concatenating"]},{"Key":"concat concatenating","Fragments":["a","a"]},{"Key":"million lists","Fragments":["of","of"]},{"Key":"single elements","Fragments":["(which","(which"]},{"Key":"elements (which","Fragments":["is","is"]},{"Key":"test does)","Fragments":["will","will"]},{"Key":"does) will","Fragments":["take","take"]},{"Key":"take 0","Fragments":["+","+"]},{"Key":"+ 4","Fragments":["+","+"]},{"Key":"4 +","Fragments":["...","..."]},{"Key":"+ 999","Fragments":["=","="]},{"Key":"999 =","Fragments":["499.999.500.000","499.999.500.000"]},{"Key":"= 499.999.500.000","Fragments":["steps.","steps."]},{"Key":"499.999.500.000 steps.","Fragments":["The","The"]},{"Key":"steps. The","Fragments":["right","required","right","required"]},{"Key":"The right","Fragments":["fold","fold"]},{"Key":"right fold","Fragments":["on","on"]},{"Key":"fold on","Fragments":["the","the"]},{"Key":"hand only","Fragments":["has","has"]},{"Key":"list with","Fragments":["a","a","`b_len`"]},{"Key":"single element","Fragments":["as","as"]},{"Key":"element as","Fragments":["the","the"]},{"Key":"to append,","Fragments":["so","so"]},{"Key":"append, so","Fragments":["it","it"]},{"Key":"1 *","Fragments":["1.000.000","1.000.000"]},{"Key":"* 1.000.000","Fragments":["=","="]},{"Key":"1.000.000 =","Fragments":["1.000.000","1.000.000"]},{"Key":"= 1.000.000","Fragments":["steps.","steps."]},{"Key":"1.000.000 steps.","Fragments":["The","The"]},{"Key":"The required","Fragments":["reverse","reverse"]},{"Key":"required reverse","Fragments":["will","will"]},{"Key":"reverse will","Fragments":["add","add"]},{"Key":"add another","Fragments":["1.000.000","1.000.000"]},{"Key":"another 1.000.000","Fragments":["steps","steps"]},{"Key":"1.000.000 steps","Fragments":["but","but"]},{"Key":"steps but","Fragments":["2.000.000","2.000.000"]},{"Key":"but 2.000.000","Fragments":["is","is"]},{"Key":"2.000.000 is","Fragments":["still","still"]},{"Key":"still several","Fragments":["orders","orders"]},{"Key":"several orders","Fragments":["of","of"]},{"Key":"magnitude less","Fragments":["than","than"]},{"Key":"I uploaded","Fragments":["a","a"]},{"Key":"version. Just","Fragments":["for"]},{"Key":"two functions","Fragments":["I"]},{"Key":"them tail-recursive.","Fragments":["Maybe"]},{"Key":"tail-recursive. Maybe","Fragments":["I'll"]},{"Key":"I'll upload","Fragments":["a"]},{"Key":"upload a","Fragments":["new"]},{"Key":"version again","Fragments":["later."]},{"Key":"feedback pminten,","Fragments":["the"]},{"Key":"pminten, the","Fragments":["swapped"]},{"Key":"the swapped","Fragments":["'acc,"]},{"Key":"swapped 'acc,","Fragments":["l'"]},{"Key":"'acc, l'","Fragments":["vs."]},{"Key":"l' vs.","Fragments":["'l,acc'"]},{"Key":"vs. 'l,acc'","Fragments":["is"]},{"Key":"'l,acc' is","Fragments":["exactly"]},{"Key":"I meant.","Fragments":["I"]},{"Key":"meant. I","Fragments":["observe"]},{"Key":"I observe","Fragments":["that"]},{"Key":"observe that","Fragments":["it"]},{"Key":"much slower,","Fragments":["but"]},{"Key":"slower, but","Fragments":["I"]},{"Key":"haven't convinced","Fragments":["myself"]},{"Key":"convinced myself","Fragments":["of"]},{"Key":"myself of","Fragments":["_why_"]},{"Key":"of _why_","Fragments":["it"]},{"Key":"_why_ it","Fragments":["is"]},{"Key":"slower -","Fragments":["if"]},{"Key":"- if","Fragments":["you"]},{"Key":"like shining","Fragments":["some"]},{"Key":"shining some","Fragments":["light"]},{"Key":"some light","Fragments":["on"]},{"Key":"light on","Fragments":["that"]},{"Key":"would appreciate","Fragments":["it."]},{"Key":"the \u0026append/2","Fragments":["syntax"]},{"Key":"\u0026append/2 syntax","Fragments":["would"]},{"Key":"syntax would","Fragments":["be"]},{"Key":"be useful/necessary","Fragments":["and"]},{"Key":"useful/necessary and","Fragments":["not"]},{"Key":"Also: I","Fragments":["intended"]},{"Key":"I intended","Fragments":["to"]},{"Key":"back through","Fragments":["and"]},{"Key":"the alternate","Fragments":["function"]},{"Key":"alternate function","Fragments":["syntax"]},{"Key":"syntax (do:","Fragments":["..."]},{"Key":"(do: ...","Fragments":["vs."]},{"Key":"... vs.","Fragments":["do"]},{"Key":"vs. do","Fragments":["..."]},{"Key":"... end),","Fragments":["but"]},{"Key":"end), but","Fragments":["for"]},{"Key":"reason just","Fragments":["collapsed"]},{"Key":"just collapsed","Fragments":["the"]},{"Key":"collapsed the","Fragments":["methods"]},{"Key":"the do...end","Fragments":["syntax!"]},{"Key":"Basically to","Fragments":["match"]},{"Key":"of Regex.scan,","Fragments":["which"]},{"Key":"don't fully","Fragments":["understand"]},{"Key":"fully understand","Fragments":["why"]},{"Key":"why scan","Fragments":["returns"]},{"Key":"scan returns","Fragments":["the"]},{"Key":"way it","Fragments":["does...","appears"]},{"Key":"it does...","Fragments":["The"]},{"Key":"does... The","Fragments":["documentation"]},{"Key":"The documentation","Fragments":["seems"]},{"Key":"documentation seems","Fragments":["to"]},{"Key":"suggest it","Fragments":["would"]},{"Key":"return [[matches],","Fragments":["[captures]]"]},{"Key":"[[matches], [captures]]","Fragments":["like"]},{"Key":"[captures]] like","Fragments":["so:"]},{"Key":"``` [","Fragments":["[\"1234567890\"],","[\"1234567890\","]},{"Key":"[ [\"1234567890\"],","Fragments":["[\"\","]},{"Key":"[\"1234567890\"], [\"\",","Fragments":["\"123\","]},{"Key":"[\"\", \"123\",","Fragments":["\"456\","]},{"Key":"\"123\", \"456\",","Fragments":["\"7890\"]","\"7890\"]"]},{"Key":"\"456\", \"7890\"]","Fragments":["]","]"]},{"Key":"[ [\"1234567890\",","Fragments":["\"\","]},{"Key":"[\"1234567890\", \"\",","Fragments":["\"123\","]},{"Key":"\"\", \"123\",","Fragments":["\"456\","]},{"Key":"return as","Fragments":["the"]},{"Key":"docs indicate","Fragments":["for"]},{"Key":"indicate for","Fragments":["the"]},{"Key":"their examples,","Fragments":["but"]},{"Key":"removing those","Fragments":["characters"]},{"Key":"those characters","Fragments":["you"]},{"Key":"want how","Fragments":["about"]},{"Key":"about matching","Fragments":["for"]},{"Key":"want? Take","Fragments":["a"]},{"Key":"Also `Dict.update`","Fragments":["might"]},{"Key":"Wow. @jarod","Fragments":["thank"]},{"Key":"@jarod thank","Fragments":["you"]},{"Key":"even know","Fragments":["there"]},{"Key":"While we","Fragments":["are"]},{"Key":"are nitpicking,","Fragments":["in"]},{"Key":"nitpicking, in","Fragments":["your"]},{"Key":"believe `[]`","Fragments":["should"]},{"Key":"`[]` should","Fragments":["return"]},{"Key":"should return","Fragments":["`acc`","`:sublist`","1","a"]},{"Key":"return `acc`","Fragments":["rather"]},{"Key":"`acc` rather","Fragments":["than"]},{"Key":"than `0`.","Fragments":[";)"]},{"Key":"that comment","Fragments":["in"]},{"Key":"several places","Fragments":["and"]},{"Key":"places and","Fragments":["you're"]},{"Key":"you're the","Fragments":["first"]},{"Key":"Haha. Nope","Fragments":["but"]},{"Key":"Nope but","Fragments":["I"]},{"Key":"pretty powerful","Fragments":["machine..."]},{"Key":"powerful machine...","Fragments":[";)"]},{"Key":"Same problem","Fragments":["I"]},{"Key":"programming use","Fragments":["of"]},{"Key":"over explicit","Fragments":["recursion."]},{"Key":"recursion. If","Fragments":["you"]},{"Key":"reduce you","Fragments":["already"]},{"Key":"know roughly","Fragments":["how"]},{"Key":"roughly how","Fragments":["the"]},{"Key":"be traversed,","Fragments":["with"]},{"Key":"traversed, with","Fragments":["explicit"]},{"Key":"recursion you","Fragments":["have"]},{"Key":"close look","Fragments":["what"]},{"Key":"look what","Fragments":["the"]},{"Key":"actual recursion","Fragments":["pattern"]},{"Key":"Btw. you","Fragments":["can"]},{"Key":"unicode character","Fragments":["property"]},{"Key":"property tests","Fragments":["in"]},{"Key":"in regexes","Fragments":["as"]},{"Key":"well. For","Fragments":["example"]},{"Key":"`\\p{L}` for","Fragments":["matching","unicode"]},{"Key":"for matching","Fragments":["a","a","unicode"]},{"Key":"`\\p{N}` for","Fragments":["matching"]},{"Key":" looks","Fragments":["pretty"]},{"Key":"good, there","Fragments":["is"]},{"Key":"one thing:","Fragments":["There"]},{"Key":"thing: There","Fragments":["is"]},{"Key":"for questions","Fragments":["-"]},{"Key":"better `String.t`","Fragments":["function..."]},{"Key":"Hi @judah,","Fragments":["thanks"]},{"Key":"@judah, thanks","Fragments":["for"]},{"Key":"solution does","Fragments":["indeed"]},{"Key":"does indeed","Fragments":["pass","use","lack"]},{"Key":"indeed pass","Fragments":["all"]},{"Key":"suite does","Fragments":["not","not"]},{"Key":"not include","Fragments":["any"]},{"Key":"include any","Fragments":["tests"]},{"Key":"any tests","Fragments":["in"]},{"Key":"language besides","Fragments":["English."]},{"Key":"besides English.","Fragments":["You"]},{"Key":"English. You","Fragments":["are"]},{"Key":"are correct","Fragments":["that"]},{"Key":"correct that","Fragments":["my"]},{"Key":"not pass","Fragments":["that"]},{"Key":"that test.","Fragments":["I'll"]},{"Key":"test. I'll","Fragments":["try"]},{"Key":"try another","Fragments":["solution"]},{"Key":"another solution","Fragments":["that","(but"]},{"Key":"you happen","Fragments":["to"]},{"Key":"Russian shouting","Fragments":["test"]},{"Key":"shouting test","Fragments":["case?"]},{"Key":"test case?","Fragments":["If"]},{"Key":"case? If","Fragments":["so,"]},{"Key":"so, could","Fragments":["you"]},{"Key":"you paste","Fragments":["it"]},{"Key":"paste it","Fragments":["in","from"]},{"Key":" `:lists.sort`","Fragments":["is"]},{"Key":"`:lists.sort` is","Fragments":["more"]},{"Key":"written `Enum.sort`","Fragments":["(that"]},{"Key":"`Enum.sort` (that","Fragments":["actually"]},{"Key":"(that actually","Fragments":["works"]},{"Key":"actually works","Fragments":["for"]},{"Key":"Thanks @gunnar!","Fragments":["Didn't"]},{"Key":"@gunnar! Didn't","Fragments":["think"]},{"Key":"Didn't think","Fragments":["to","this"]},{"Key":"the testsuite","Fragments":["took"]},{"Key":"testsuite took","Fragments":["very"]},{"Key":"took very","Fragments":["long"]},{"Key":"very long","Fragments":["to"]},{"Key":"to run?","Fragments":["(In"]},{"Key":"run? (In","Fragments":["particular"]},{"Key":"(In particular","Fragments":["the"]},{"Key":"particular the","Fragments":["\"concat"]},{"Key":"the \"concat","Fragments":["of"]},{"Key":"\"concat of","Fragments":["huge","normal","huge"]},{"Key":"of huge","Fragments":["list","list","list\"","list"]},{"Key":"huge list","Fragments":["of","of","of","of"]},{"Key":"small lists\"","Fragments":["test.)","never","test,"]},{"Key":" Different","Fragments":["one."]},{"Key":"point, got","Fragments":["carried"]},{"Key":"got carried","Fragments":["away"]},{"Key":"carried away","Fragments":["there","with"]},{"Key":"away there","Fragments":["with"]},{"Key":"there with","Fragments":["trying"]},{"Key":"with trying","Fragments":["to"]},{"Key":"A fairly","Fragments":["quick"]},{"Key":"fairly quick","Fragments":["and"]},{"Key":"quick and","Fragments":["naive"]},{"Key":"and naive","Fragments":["approach"]},{"Key":"naive approach","Fragments":["-"]},{"Key":"approach -","Fragments":["I'm"]},{"Key":"are efficiencies","Fragments":["that"]},{"Key":"efficiencies that","Fragments":["could"]},{"Key":"made from","Fragments":["here."]},{"Key":"Oh, sorry,","Fragments":["yeah"]},{"Key":"sorry, yeah","Fragments":["the"]},{"Key":"yeah the","Fragments":["test"]},{"Key":"test suites","Fragments":["change"]},{"Key":"suites change","Fragments":["occasionally,"]},{"Key":"change occasionally,","Fragments":["so"]},{"Key":"occasionally, so","Fragments":["you"]},{"Key":"you must","Fragments":["have"]},{"Key":"must have","Fragments":["grabbed"]},{"Key":"have grabbed","Fragments":["it"]},{"Key":"grabbed it","Fragments":["just"]},{"Key":"was added.","Fragments":["I"]},{"Key":"added. I","Fragments":["think"]},{"Key":"can delete","Fragments":["the","your"]},{"Key":"delete the","Fragments":["test"]},{"Key":"file and","Fragments":["run","do"]},{"Key":"run `exercism","Fragments":["fetch`"]},{"Key":"`exercism fetch`","Fragments":["again","to"]},{"Key":"fetch` again","Fragments":["to"]},{"Key":"to grab","Fragments":["the","the"]},{"Key":"grab the","Fragments":["latest","latest"]},{"Key":"latest version.","Fragments":["If"]},{"Key":"work, here's","Fragments":["the"]},{"Key":"here's the","Fragments":["shouting"]},{"Key":"in Russian\"","Fragments":["do","test?"]},{"Key":"# Hopefully","Fragments":["this"]},{"Key":"Hopefully this","Fragments":["is"]},{"Key":"is Russian","Fragments":["for"]},{"Key":"Russian for","Fragments":["\"get"]},{"Key":"# assert","Fragments":["Teenager.hey(\"УХОДИТЬ\")"]},{"Key":"see you","Fragments":["submitted"]},{"Key":"you submitted","Fragments":["a"]},{"Key":"new iteration.","Fragments":["I'll"]},{"Key":"iteration. I'll","Fragments":["check"]},{"Key":"out now.","Fragments":[":)"]},{"Key":"that implementation--checking","Fragments":["to"]},{"Key":"implementation--checking to","Fragments":["see"]},{"Key":"any letters","Fragments":["and","as"]},{"Key":"all caps.","Fragments":["Nice."]},{"Key":"totally sure,","Fragments":["but"]},{"Key":"think `:alpha:`","Fragments":["translates"]},{"Key":"`:alpha:` translates","Fragments":["to"]},{"Key":"to `a-zA-Z`.","Fragments":["I"]},{"Key":"`a-zA-Z`. I","Fragments":["think"]},{"Key":"unicode equivalent","Fragments":["is"]},{"Key":"equivalent is","Fragments":["something"]},{"Key":"like `\\p{L}`","Fragments":["for"]},{"Key":"unicode letters.","Fragments":["You"]},{"Key":"letters. You","Fragments":["might"]},{"Key":"that against","Fragments":["the"]},{"Key":" Thank-you","Fragments":["for"]},{"Key":"Thank-you for","Fragments":["your"]},{"Key":"finally managed","Fragments":["to"]},{"Key":"to reimplement","Fragments":["`append`"]},{"Key":"reimplement `append`","Fragments":["and"]},{"Key":"`concat` using","Fragments":["`reduce`","`reduce`"]},{"Key":"`reduce` as","Fragments":["well.","well."]},{"Key":"the delay","Fragments":["in"]},{"Key":"delay in","Fragments":["getting"]},{"Key":"getting back","Fragments":["to"]},{"Key":"to you.","Fragments":["I"]},{"Key":"a hectic","Fragments":["day"]},{"Key":"hectic day","Fragments":["yesterday."]},{"Key":"day yesterday.","Fragments":[":)"]},{"Key":"right track","Fragments":["with"]},{"Key":"track with","Fragments":["using"]},{"Key":"`reduce` to","Fragments":["implement","implement","count!"]},{"Key":"other functions.","Fragments":["It"]},{"Key":"`Enum` module","Fragments":["are","and","is","they"]},{"Key":"module are","Fragments":["implemented."]},{"Key":"are implemented.","Fragments":["Since","The"]},{"Key":"implemented. Since","Fragments":["reduce"]},{"Key":"Since reduce","Fragments":["is"]},{"Key":"is tail","Fragments":["recursive","recursive","recursive"]},{"Key":"recursive and","Fragments":["is","it's"]},{"Key":"pretty general","Fragments":["purpose"]},{"Key":"general purpose","Fragments":["function,"]},{"Key":"purpose function,","Fragments":["you"]},{"Key":"implement `append`","Fragments":["and"]},{"Key":"good! Just","Fragments":["a"]},{"Key":"could arguably","Fragments":["be"]},{"Key":"arguably be","Fragments":["more"]},{"Key":"wanted to,","Fragments":["you","not","you"]},{"Key":"an if,","Fragments":["else,"]},{"Key":"if, else,","Fragments":["end"]},{"Key":"else, end","Fragments":["expression"]},{"Key":"end expression","Fragments":["inline"]},{"Key":"expression inline","Fragments":["like"]},{"Key":"inline like","Fragments":["the"]},{"Key":"the ternary","Fragments":["operator"]},{"Key":"ternary operator","Fragments":["in"]},{"Key":"languages, so","Fragments":["if"]},{"Key":"in `filter`","Fragments":["you"]},{"Key":"`filter` you","Fragments":["could"]},{"Key":"the `acc_fun`","Fragments":["body"]},{"Key":"`acc_fun` body","Fragments":["as:"]},{"Key":"if f.(h)","Fragments":["do"]},{"Key":"f.(h) do","Fragments":["[h"]},{"Key":"do [h","Fragments":["|"]},{"Key":"[h |","Fragments":["acc]"]},{"Key":"| acc]","Fragments":["else"]},{"Key":"acc] else","Fragments":["acc"]},{"Key":"it inline","Fragments":["rather"]},{"Key":"inline rather","Fragments":["than"]},{"Key":"than separating","Fragments":["it"]},{"Key":"separating it","Fragments":["out."]},{"Key":"out. But","Fragments":["yeah,"]},{"Key":"yeah, your","Fragments":["version"]},{"Key":"your version","Fragments":["may"]},{"Key":"version may","Fragments":["be"]},{"Key":"readable. Just","Fragments":["wanted"]},{"Key":"point it","Fragments":["out"]},{"Key":"out as","Fragments":["something","it"]},{"Key":"thing, which","Fragments":["@cody"]},{"Key":"which @cody","Fragments":["pointed"]},{"Key":"@cody pointed","Fragments":["out"]},{"Key":"exercise, is","Fragments":["that"]},{"Key":"use `append`","Fragments":["in"]},{"Key":"`concat` if","Fragments":["you"]},{"Key":"want to.","Fragments":["This"]},{"Key":"to. This","Fragments":["shortens"]},{"Key":"This shortens","Fragments":["up"]},{"Key":"shortens up","Fragments":["that"]},{"Key":"up that","Fragments":["implementation"]},{"Key":"that implementation","Fragments":["a","using","of"]},{"Key":"implementation a","Fragments":["bit."]},{"Key":" @ezra","Fragments":["covered"]},{"Key":"@ezra covered","Fragments":["the"]},{"Key":"covered the","Fragments":["important"]},{"Key":"important stuff.","Fragments":["Let"]},{"Key":"stuff. Let","Fragments":["me"]},{"Key":"me just","Fragments":["add","insert"]},{"Key":"style tip:","Fragments":["`\u0026([\u00261|\u00262])`"]},{"Key":"tip: `\u0026([\u00261|\u00262])`","Fragments":["can"]},{"Key":"`\u0026([\u00261|\u00262])` can","Fragments":["be"]},{"Key":"as `\u0026[\u00261|\u00262]`.","Fragments":["The"]},{"Key":"`\u0026[\u00261|\u00262]`. The","Fragments":["parens"]},{"Key":"only really","Fragments":["needed"]},{"Key":"case like","Fragments":["`\u0026(\u00261","this"]},{"Key":"\u00262)` which","Fragments":["would"]},{"Key":"would otherwise","Fragments":["be"]},{"Key":"otherwise be","Fragments":["parsed"]},{"Key":"as `(\u0026","Fragments":["\u00261)"]},{"Key":"`(\u0026 \u00261)","Fragments":["+"]},{"Key":"\u00261) +","Fragments":["\u00262`"]},{"Key":"+ \u00262`","Fragments":["and"]},{"Key":"\u00262` and","Fragments":["give"]},{"Key":"a parser","Fragments":["error."]},{"Key":"efficient ways","Fragments":["(which","to"]},{"Key":"ways (which","Fragments":["I"]},{"Key":"(which I","Fragments":["don't"]},{"Key":"know because","Fragments":["I'm"]},{"Key":"I'm bad","Fragments":["at"]},{"Key":"exercise), but","Fragments":["from"]},{"Key":"an aesthetic","Fragments":["perspective"]},{"Key":"aesthetic perspective","Fragments":["this"]},{"Key":"perspective this","Fragments":["is"]},{"Key":"call `Dict`","Fragments":["functions"]},{"Key":"they're available","Fragments":["rather"]},{"Key":"available rather","Fragments":["than"]},{"Key":"than `HashDict`","Fragments":["functions."]},{"Key":"`HashDict` functions.","Fragments":["`Dict`"]},{"Key":"functions work","Fragments":["for","with"]},{"Key":"all dictionary","Fragments":["types"]},{"Key":"dictionary types","Fragments":["so"]},{"Key":"types so","Fragments":["if"]},{"Key":"you change","Fragments":["your","dict","the"]},{"Key":"implementation type","Fragments":["you"]},{"Key":"type you","Fragments":["won't"]},{"Key":"update so","Fragments":["much","much"]},{"Key":"using `HashDict.fetch(@rosalyn,","Fragments":["nucleotide)`"]},{"Key":"`HashDict.fetch(@rosalyn, nucleotide)`","Fragments":["why"]},{"Key":"nucleotide)` why","Fragments":["not"]},{"Key":"not write","Fragments":["`@rosalyn[nucleotide]`?"]},{"Key":"use unqualified","Fragments":["imports"]},{"Key":"unqualified imports","Fragments":["`import"]},{"Key":"imports `import","Fragments":["Dict`."]},{"Key":"`import Dict`.","Fragments":["Instead"]},{"Key":"Dict`. Instead","Fragments":["we"]},{"Key":"Instead we","Fragments":["usually"]},{"Key":"usually explicitly","Fragments":["mention"]},{"Key":"explicitly mention","Fragments":["the"]},{"Key":"mention the","Fragments":["module","`Order[...]`","doc."]},{"Key":"module in","Fragments":["every"]},{"Key":"in every","Fragments":["call."]},{"Key":"every call.","Fragments":["This"]},{"Key":"call. This","Fragments":["makes"]},{"Key":"that `Dict.put(...,","Fragments":["...,"]},{"Key":"Dict.get(...))` using","Fragments":["another"]},{"Key":"using another","Fragments":["function"]},{"Key":"from `Dict`","Fragments":["for"]},{"Key":"`Dict` for","Fragments":["updating"]},{"Key":"for updating","Fragments":["values"]},{"Key":"updating values","Fragments":["in"]},{"Key":"of `HashDict.fetch!`","Fragments":["you"]},{"Key":"`HashDict.fetch!` you","Fragments":["could"]},{"Key":"use `translation_dict[x]`,","Fragments":["it's"]},{"Key":"`translation_dict[x]`, it's","Fragments":["slightly"]},{"Key":"slightly nicer","Fragments":["to"]},{"Key":"an equilvalent","Fragments":["in"]},{"Key":"equilvalent in","Fragments":["`Dict`."]},{"Key":"in `Dict`.","Fragments":["`Dict`"]},{"Key":"`Dict`. `Dict`","Fragments":["works"]},{"Key":"of dictionaries","Fragments":["so","so"]},{"Key":"change dict","Fragments":["implementation"]},{"Key":"dict implementation","Fragments":["you"]},{"Key":"Why `:lists.seq`","Fragments":["and"]},{"Key":"`:lists.seq` and","Fragments":["not"]},{"Key":" Huh,","Fragments":["I"]},{"Key":"Huh, I","Fragments":["was"]},{"Key":"was Googling","Fragments":["for"]},{"Key":"Googling for","Fragments":["ranges"]},{"Key":"for ranges","Fragments":["in"]},{"Key":"reason all","Fragments":["I"]},{"Key":"I turned","Fragments":["up"]},{"Key":"turned up","Fragments":["was"]},{"Key":"up was","Fragments":["a"]},{"Key":"of cutting-edge","Fragments":["stuff"]},{"Key":"cutting-edge stuff","Fragments":["about"]},{"Key":"about Streams.","Fragments":["Glad"]},{"Key":"Streams. Glad","Fragments":["to"]},{"Key":"Glad to","Fragments":["see"]},{"Key":"see there's","Fragments":["actually"]},{"Key":"there's actually","Fragments":["a"]},{"Key":"simple native","Fragments":["approach!"]},{"Key":"using `Enum.count`","Fragments":["for"]},{"Key":"`Enum.count` for","Fragments":["your"]},{"Key":"of `shouting?`,","Fragments":["do"]},{"Key":"`shouting?`, do","Fragments":["you"]},{"Key":"actually extract","Fragments":["the"]},{"Key":"the letter","Fragments":["characters,","characters"]},{"Key":"letter characters,","Fragments":["or"]},{"Key":"characters, or","Fragments":["could"]},{"Key":"or could","Fragments":["you"]},{"Key":"were any","Fragments":["in"]},{"Key":"any in","Fragments":["the"]},{"Key":"string? Might","Fragments":["be"]},{"Key":"less work","Fragments":["that"]},{"Key":"work that","Fragments":["way?"]},{"Key":"tiny thought","Fragments":["on"]},{"Key":"on `void?`","Fragments":["..."]},{"Key":"`void?` ...","Fragments":["is"]},{"Key":"... is","Fragments":["there"]},{"Key":"domain a","Fragments":["little","bit"]},{"Key":"general idea","Fragments":["behind"]},{"Key":"iteration better,","Fragments":["extracting"]},{"Key":"better, extracting","Fragments":["private"]},{"Key":"extracting private","Fragments":["functions"]},{"Key":"that gave","Fragments":["good"]},{"Key":"gave good","Fragments":["names"]},{"Key":"each case.","Fragments":["it","It"]},{"Key":"case. it","Fragments":["was"]},{"Key":"code. :)","Fragments":["I"]},{"Key":"maybe consider","Fragments":["returning","reworking"]},{"Key":"consider returning","Fragments":["to"]},{"Key":"returning to","Fragments":["a"]},{"Key":"solution like","Fragments":["that."]},{"Key":"will try,","Fragments":["the"]},{"Key":"try, the","Fragments":["reason"]},{"Key":"abandoned that","Fragments":["is"]},{"Key":"just copied","Fragments":["the"]},{"Key":"copied the","Fragments":["example"]},{"Key":"example and","Fragments":["did"]},{"Key":"Definitely feel","Fragments":["free"]},{"Key":"any questions,","Fragments":["but"]},{"Key":"questions, but","Fragments":["basically"]},{"Key":"but basically","Fragments":["you"]},{"Key":"basically you","Fragments":["would"]},{"Key":"move your","Fragments":["tests"]},{"Key":"tests into","Fragments":["nicely","functions.","private"]},{"Key":"into nicely","Fragments":["named"]},{"Key":"nicely named","Fragments":["private"]},{"Key":"those in","Fragments":["your"]},{"Key":"your `cond`","Fragments":["statement."]},{"Key":"`cond` statement.","Fragments":["An"]},{"Key":"statement. An","Fragments":["example"]},{"Key":"An example","Fragments":["for"]},{"Key":"first case","Fragments":["would"]},{"Key":"case would","Fragments":["be:","lead"]},{"Key":"def hey(input)","Fragments":["do","do"]},{"Key":" silence?(input)","Fragments":["-\u003e"]},{"Key":"silence?(input) -\u003e","Fragments":["\"Fine."]},{"Key":"defp silence?(input),","Fragments":["do:"]},{"Key":"silence?(input), do:","Fragments":["String.strip(input)"]},{"Key":"do: String.strip(input)","Fragments":["==","==","=="]},{"Key":"String.strip(input) ==","Fragments":["\"\"","\"\"","\"\"","\"\"","\"\"","\"\""]},{"Key":"line like","Fragments":["I"]},{"Key":"did above,","Fragments":["or"]},{"Key":"above, or","Fragments":["you"]},{"Key":"write them","Fragments":["with"]},{"Key":"line form","Fragments":["like:"]},{"Key":"defp silence?(input)","Fragments":["do","do"]},{"Key":" String.strip(input)","Fragments":["==","|\u003e","=="]},{"Key":"helps. If","Fragments":["you"]},{"Key":"know, `def`","Fragments":["defines"]},{"Key":"`def` defines","Fragments":["a"]},{"Key":"public function,","Fragments":["and"]},{"Key":"`defp` defines","Fragments":["a"]},{"Key":"function. Private","Fragments":["functions"]},{"Key":"Private functions","Fragments":["can"]},{"Key":"by other","Fragments":["functions","function,"]},{"Key":"same module,","Fragments":["but"]},{"Key":"but cannot","Fragments":["be"]},{"Key":"used directly","Fragments":["by"]},{"Key":"directly by","Fragments":["functions"]},{"Key":"by functions","Fragments":["in"]},{"Key":"modules. (Forgive","Fragments":["me"]},{"Key":"(Forgive me","Fragments":["if"]},{"Key":"already knew","Fragments":["all","that).","to"]},{"Key":"knew all","Fragments":["that)."]},{"Key":"good! The","Fragments":["`hey`"]},{"Key":"The `hey`","Fragments":["function"]},{"Key":"function reads","Fragments":["really"]},{"Key":"reads really","Fragments":["nicely","well.","well."]},{"Key":"small nit,","Fragments":["the"]},{"Key":"nit, the","Fragments":["regex"]},{"Key":"in `only_letters?`","Fragments":["is"]},{"Key":"`only_letters?` is","Fragments":["not"]},{"Key":"entirely composed","Fragments":["of"]},{"Key":"composed of","Fragments":["only"]},{"Key":"only letters,","Fragments":["it's"]},{"Key":"letters, it's","Fragments":["just"]},{"Key":"one letter.","Fragments":["Maybe"]},{"Key":"letter. Maybe","Fragments":["a"]},{"Key":"consider reversing","Fragments":["the"]},{"Key":"in `shout?`","Fragments":["so"]},{"Key":"`shout?` so","Fragments":["that"]},{"Key":"the upcasing","Fragments":["and"]},{"Key":"upcasing and","Fragments":["comparison"]},{"Key":"and comparison","Fragments":["if"]},{"Key":"comparison if","Fragments":["there"]},{"Key":"no letters","Fragments":["in"]},{"Key":"string. Might","Fragments":["just"]},{"Key":"Might just","Fragments":["bit"]},{"Key":"just bit","Fragments":["a"]},{"Key":"bit a","Fragments":["little"]},{"Key":"efficient. Not","Fragments":["a"]},{"Key":"`Regex.scan` returning","Fragments":["multiple"]},{"Key":"returning multiple","Fragments":["results"]},{"Key":"multiple results","Fragments":["if"]},{"Key":"results if","Fragments":["multiple"]},{"Key":"if multiple","Fragments":["parts"]},{"Key":"multiple parts","Fragments":["of"]},{"Key":"string match.","Fragments":["Other"]},{"Key":"match. Other","Fragments":["`Regex`"]},{"Key":"Other `Regex`","Fragments":["functions"]},{"Key":"`Regex` functions","Fragments":["return"]},{"Key":"functions return","Fragments":["only"]},{"Key":"return only","Fragments":["one"]},{"Key":"Yeah, that's","Fragments":["probably"]},{"Key":"because ranges","Fragments":["usually"]},{"Key":"ranges usually","Fragments":["are"]},{"Key":"usually are","Fragments":["used"]},{"Key":"in conjunction","Fragments":["with"]},{"Key":"conjunction with","Fragments":["Enum/Stream."]},{"Key":"with Enum/Stream.","Fragments":["The"]},{"Key":"Enum/Stream. The","Fragments":["only"]},{"Key":"a user","Fragments":["is"]},{"Key":"user is","Fragments":["that"]},{"Key":"function wants","Fragments":["an"]},{"Key":"wants an","Fragments":["enumerable"]},{"Key":"an enumerable","Fragments":["you"]},{"Key":"enumerable you","Fragments":["can"]},{"Key":"simply pass","Fragments":["in"]},{"Key":"the obvious","Fragments":["thing."]},{"Key":" Computing","Fragments":["length"]},{"Key":"Computing length","Fragments":["of"]},{"Key":"is potentially","Fragments":["expensive."]},{"Key":"potentially expensive.","Fragments":["Maybe"]},{"Key":"expensive. Maybe","Fragments":["you"]},{"Key":"could cache","Fragments":["the"]},{"Key":"cache the","Fragments":["returned","list"]},{"Key":" Ist","Fragments":["`Enum.take`"]},{"Key":"Ist `Enum.take`","Fragments":["what"]},{"Key":"`Enum.take` what","Fragments":["your"]},{"Key":"your `Enum.slice`","Fragments":["is"]},{"Key":"`Enum.slice` is","Fragments":["trying"]},{"Key":"is trying","Fragments":["to","to"]},{"Key":" `Enum.take`","Fragments":["is"]},{"Key":"`Enum.take` is","Fragments":["obviously"]},{"Key":"obviously better!","Fragments":["Is"]},{"Key":"better! Is","Fragments":["there"]},{"Key":"to cache","Fragments":["the"]},{"Key":"list lengths","Fragments":["than"]},{"Key":"lengths than","Fragments":["creating"]},{"Key":"new `is_superlist/4`","Fragments":["which"]},{"Key":"`is_superlist/4` which","Fragments":["takes"]},{"Key":"a and","Fragments":["b","b"]},{"Key":"and b","Fragments":["as","directly."]},{"Key":"b as","Fragments":["parameters"]},{"Key":"as parameters","Fragments":["3"]},{"Key":"parameters 3","Fragments":["and"]},{"Key":" Made","Fragments":["small"]},{"Key":"Made small","Fragments":["changes"]},{"Key":"small changes","Fragments":["to"]},{"Key":"and swapped","Fragments":["the"]},{"Key":"swapped the","Fragments":["logic"]},{"Key":"Yeah, exactly.","Fragments":["You"]},{"Key":"exactly. You","Fragments":["can"]},{"Key":"create private","Fragments":["functions"]},{"Key":"with `defp`","Fragments":["if","instead"]},{"Key":"`defp` if","Fragments":["you"]},{"Key":"Not that","Fragments":["I","I"]},{"Key":"Could eliminate","Fragments":["line"]},{"Key":"eliminate line","Fragments":["24"]},{"Key":"line 24","Fragments":["and"]},{"Key":"24 and","Fragments":["replace"]},{"Key":"replace line","Fragments":["28"]},{"Key":"line 28","Fragments":["with"]},{"Key":"28 with","Fragments":["`[_|t]"]},{"Key":"with `[_|t]","Fragments":["="]},{"Key":"`[_|t] =","Fragments":["a"]},{"Key":"= a","Fragments":["-\u003e"]},{"Key":"-\u003e is_superlist(t,","Fragments":["b,"]},{"Key":"is_superlist(t, b,","Fragments":["a_len-1,"]},{"Key":"b, a_len-1,","Fragments":["b_len)`,"]},{"Key":"a_len-1, b_len)`,","Fragments":["if"]},{"Key":"b_len)`, if","Fragments":["that"]},{"Key":"isn't too","Fragments":["tricksy?","bad"]},{"Key":" Hmm.","Fragments":["What"]},{"Key":"Hmm. What","Fragments":["I"]},{"Key":"do there","Fragments":["to"]},{"Key":"clear what's","Fragments":["going"]},{"Key":"write `defp","Fragments":["is_superlist([_|t]"]},{"Key":"`defp is_superlist([_|t]","Fragments":["="]},{"Key":"is_superlist([_|t] =","Fragments":["a,"]},{"Key":"= a,","Fragments":["b,"]},{"Key":"b, a_len,","Fragments":["b_len)`."]},{"Key":"a_len, b_len)`.","Fragments":["That"]},{"Key":"b_len)`. That","Fragments":["way"]},{"Key":"if people","Fragments":["want"]},{"Key":"people want","Fragments":["to"]},{"Key":"passed they'll","Fragments":["quickly"]},{"Key":"they'll quickly","Fragments":["see"]},{"Key":"quickly see","Fragments":["that"]},{"Key":"gets handled","Fragments":["in"]},{"Key":"other case","Fragments":["of"]},{"Key":"still recompute","Fragments":["`length(a)`"]},{"Key":"recompute `length(a)`","Fragments":["potentially"]},{"Key":"`length(a)` potentially","Fragments":["a"]},{"Key":"potentially a","Fragments":["few"]},{"Key":"times in","Fragments":["`compare`"]},{"Key":"in `compare`","Fragments":["and","even"]},{"Key":"`compare` and","Fragments":["`is_superlist/2`."]},{"Key":"code additionally","Fragments":["contains"]},{"Key":"additionally contains","Fragments":["a"]},{"Key":"an inefficiently","Fragments":["in"]},{"Key":"inefficiently in","Fragments":["the"]},{"Key":"of `Enum.take`.","Fragments":["Consider"]},{"Key":"`Enum.take`. Consider","Fragments":["a"]},{"Key":"Consider a","Fragments":["`compare(list_with_500_000_element,"]},{"Key":"a `compare(list_with_500_000_element,","Fragments":["list_with_1_000_000_000_elements)`"]},{"Key":"`compare(list_with_500_000_element, list_with_1_000_000_000_elements)`","Fragments":["."]},{"Key":"list_with_1_000_000_000_elements)` .","Fragments":["That"]},{"Key":". That","Fragments":["`Enum.take`"]},{"Key":"That `Enum.take`","Fragments":["always"]},{"Key":"`Enum.take` always","Fragments":["creates"]},{"Key":"always creates","Fragments":["a"]},{"Key":"new list","Fragments":["with","I","and"]},{"Key":"with `b_len`","Fragments":["elements"]},{"Key":"`b_len` elements","Fragments":["whenever"]},{"Key":"elements whenever","Fragments":["it's"]},{"Key":"whenever it's","Fragments":["invoked,"]},{"Key":"it's invoked,","Fragments":["even"]},{"Key":"invoked, even","Fragments":["if"]},{"Key":"few steps","Fragments":["into"]},{"Key":"steps into","Fragments":["the"]},{"Key":"subsequent comparison","Fragments":["it's"]},{"Key":"comparison it's","Fragments":["clear"]},{"Key":"it's clear","Fragments":["that","what"]},{"Key":"lists aren't","Fragments":["equal."]},{"Key":"the logic,","Fragments":["though."]},{"Key":"logic, though.","Fragments":["The"]},{"Key":"though. The","Fragments":["`pling`,"]},{"Key":"The `pling`,","Fragments":["`plang`"]},{"Key":"`pling`, `plang`","Fragments":["and"]},{"Key":"`plang` and","Fragments":["`plong`"]},{"Key":"and `plong`","Fragments":["functions"]},{"Key":"`plong` functions","Fragments":["are"]},{"Key":"all identical","Fragments":["except"]},{"Key":"values. Can","Fragments":["you"]},{"Key":"feedback. Do","Fragments":["you"]},{"Key":"different cond","Fragments":["tests"]},{"Key":"cond tests","Fragments":["in"]},{"Key":"in named","Fragments":["functions?"]},{"Key":"pretty nice","Fragments":["in"]},{"Key":"nice in","Fragments":["general."]},{"Key":"general. Nice","Fragments":["use"]},{"Key":"your cases","Fragments":["is"]},{"Key":"great. The","Fragments":["only"]},{"Key":"is considering","Fragments":["giving"]},{"Key":"considering giving","Fragments":["good"]},{"Key":"giving good","Fragments":["names"]},{"Key":"different cases","Fragments":["so"]},{"Key":"cases so","Fragments":["the"]},{"Key":"reader knows","Fragments":["what"]},{"Key":"knows what","Fragments":["those"]},{"Key":"those different","Fragments":["string"]},{"Key":"different string","Fragments":["tests"]},{"Key":"tests actually","Fragments":["mean"]},{"Key":"actually mean","Fragments":["in"]},{"Key":"domain. What","Fragments":["do"]},{"Key":"was guessing","Fragments":["I"]},{"Key":"guessing I","Fragments":["would","can"]},{"Key":"get called","Fragments":["on"]},{"Key":"called on","Fragments":["that"]},{"Key":"iex\u003e Phone.number(\"+1","Fragments":["(303)"]},{"Key":"Phone.number(\"+1 (303)","Fragments":["555-1212\")","555-1212\")"]},{"Key":"# Preserve","Fragments":["leading"]},{"Key":"Preserve leading","Fragments":["number"]},{"Key":"test \"valid","Fragments":["when"]},{"Key":"\"valid when","Fragments":["11"]},{"Key":"when 11","Fragments":["digits"]},{"Key":"11 digits","Fragments":["and","numbers","numbers,","and"]},{"Key":"digits and","Fragments":["first","the"]},{"Key":"and first","Fragments":["is"]},{"Key":"first is","Fragments":["1\"","more","that"]},{"Key":"is 1\"","Fragments":["do"]},{"Key":"assert \"1234567890\"","Fragments":["=="]},{"Key":"\"1234567890\" ==","Fragments":["Phone.number(\"11234567890\")"]},{"Key":"# Discard","Fragments":["leading"]},{"Key":"Discard leading","Fragments":["number"]},{"Key":" Additionally","Fragments":["to"]},{"Key":"Additionally to","Fragments":["what"]},{"Key":"what @emmalee","Fragments":["said:"]},{"Key":"@emmalee said:","Fragments":["In"]},{"Key":"said: In","Fragments":["this"]},{"Key":"Although it","Fragments":["is","was"]},{"Key":"very powerful,","Fragments":["it"]},{"Key":"powerful, it","Fragments":["is"]},{"Key":"always preferable","Fragments":["to"]},{"Key":"`Enum` if","Fragments":["possible."]},{"Key":"`HashDict.update` (without","Fragments":["`!`)"]},{"Key":"(without `!`)","Fragments":["method,"]},{"Key":"`!`) method,","Fragments":["that"]},{"Key":"method, that","Fragments":["would"]},{"Key":"would save","Fragments":["you"]},{"Key":"save you","Fragments":["the"]},{"Key":"entire `increase_count/2`","Fragments":["method."]},{"Key":"actually is","Fragments":["necessary"]},{"Key":"letter characters","Fragments":["in"]},{"Key":"in `shouting?`,","Fragments":["because"]},{"Key":"`shouting?`, because","Fragments":["those"]},{"Key":"those letters","Fragments":["are"]},{"Key":"are later","Fragments":["being"]},{"Key":"later being","Fragments":["compared"]},{"Key":"being compared","Fragments":["to"]},{"Key":"the `upcase`d","Fragments":["version"]},{"Key":"`upcase`d version","Fragments":["of"]},{"Key":"those some","Fragments":["letters"]},{"Key":"some letters","Fragments":["to"]},{"Key":"letters to","Fragments":["see","integer"]},{"Key":"the `void?`","Fragments":["function"]},{"Key":"`void?` function","Fragments":["given"]},{"Key":"function given","Fragments":["this"]},{"Key":"given this","Fragments":["definintion:"]},{"Key":"this definintion:","Fragments":["_containing"]},{"Key":"definintion: _containing","Fragments":["nothing"]},{"Key":"_containing nothing","Fragments":["\u0026lt;void"]},{"Key":"nothing \u0026lt;void","Fragments":["space\u0026gt;_."]},{"Key":"\u0026lt;void space\u0026gt;_.","Fragments":["However,"]},{"Key":"space\u0026gt;_. However,","Fragments":["I"]},{"Key":"do see","Fragments":["your","hyphens."]},{"Key":"point and","Fragments":["in"]},{"Key":"my Clojure","Fragments":["implementation"]},{"Key":"Clojure implementation","Fragments":["of"]},{"Key":"called it","Fragments":["`silence?`"]},{"Key":"it `silence?`","Fragments":["instead."]},{"Key":"your names","Fragments":["with"]},{"Key":"the music","Fragments":["theme."]},{"Key":"music theme.","Fragments":["Very"]},{"Key":"theme. Very","Fragments":["creative."]},{"Key":"Very creative.","Fragments":[":)"]},{"Key":"you eliminated","Fragments":["some"]},{"Key":"eliminated some","Fragments":["duplication,"]},{"Key":"some duplication,","Fragments":["but"]},{"Key":"still repeating","Fragments":["the"]},{"Key":"call three","Fragments":["times"]},{"Key":"three times","Fragments":["with"]},{"Key":"explicit values.","Fragments":["What"]},{"Key":"values. What","Fragments":["if"]},{"Key":"a data","Fragments":["structure"]},{"Key":"contained the","Fragments":["prime"]},{"Key":"the prime","Fragments":["factors"]},{"Key":"prime factors","Fragments":["and"]},{"Key":"factors and","Fragments":["their"]},{"Key":"their associated","Fragments":["sounds?"]},{"Key":"associated sounds?","Fragments":["Could"]},{"Key":"sounds? Could","Fragments":["you"]},{"Key":"from `Enum`","Fragments":["or","to","module."]},{"Key":"explicitly call","Fragments":["`rain_music`"]},{"Key":"call `rain_music`","Fragments":["for"]},{"Key":"`rain_music` for","Fragments":["each"]},{"Key":"Just to","Fragments":["push"]},{"Key":"to push","Fragments":["back","some"]},{"Key":"back a","Fragments":["little,"]},{"Key":"a little,","Fragments":["consider"]},{"Key":"little, consider","Fragments":["the"]},{"Key":" input","Fragments":["="]},{"Key":"input =","Fragments":["\"ZOMG"]},{"Key":"= \"ZOMG","Fragments":["THE"]},{"Key":"\"ZOMG THE","Fragments":["%^*@#$(*^"]},{"Key":"THE %^*@#$(*^","Fragments":["ZOMBIES"]},{"Key":"%^*@#$(*^ ZOMBIES","Fragments":["ARE"]},{"Key":"ZOMBIES ARE","Fragments":["COMING!!11!!1!\""]},{"Key":" String.upcase(input)","Fragments":["==","==","==","==","=="]},{"Key":" Upcasing","Fragments":["characters"]},{"Key":"Upcasing characters","Fragments":["other"]},{"Key":"than letters","Fragments":["just"]},{"Key":"letters just","Fragments":["leaves"]},{"Key":"just leaves","Fragments":["them"]},{"Key":"leaves them","Fragments":["the"]},{"Key":"same, so","Fragments":["the"]},{"Key":"test still","Fragments":["works"]},{"Key":"still works","Fragments":["without","and"]},{"Key":"without going","Fragments":["through"]},{"Key":"the trouble","Fragments":["of"]},{"Key":"trouble of","Fragments":["scanning,"]},{"Key":"of scanning,","Fragments":["flattening"]},{"Key":"scanning, flattening","Fragments":["and"]},{"Key":"flattening and","Fragments":["joining."]},{"Key":"and joining.","Fragments":["Of"]},{"Key":"joining. Of","Fragments":["course,"]},{"Key":"course, you'd","Fragments":["probably"]},{"Key":"you'd probably","Fragments":["have"]},{"Key":"be sure,","Fragments":["but"]},{"Key":"just upcase","Fragments":["everything"]},{"Key":"upcase everything","Fragments":["rather"]},{"Key":"everything rather","Fragments":["than"]},{"Key":"extra processing","Fragments":["to"]},{"Key":"processing to","Fragments":["select"]},{"Key":"select only","Fragments":["the"]},{"Key":"the letters.","Fragments":["What"]},{"Key":"letters. What","Fragments":["do"]},{"Key":"like `silence?`","Fragments":["better","might"]},{"Key":"`silence?` better","Fragments":["as"]},{"Key":"sounds more","Fragments":["relevant"]},{"Key":"more relevant","Fragments":["to"]},{"Key":"what someone","Fragments":["hears.","else"]},{"Key":"someone hears.","Fragments":["`void?`"]},{"Key":"hears. `void?`","Fragments":["seems"]},{"Key":"`void?` seems","Fragments":["more"]},{"Key":"more reminiscent","Fragments":["of"]},{"Key":"a programming","Fragments":["term"]},{"Key":"programming term","Fragments":["or"]},{"Key":"term or","Fragments":["the"]},{"Key":"the emptiness","Fragments":["of"]},{"Key":"emptiness of","Fragments":["space."]},{"Key":"of space.","Fragments":["I"]},{"Key":"space. I","Fragments":["don't"]},{"Key":"it's *wrong*,","Fragments":["just"]},{"Key":"*wrong*, just","Fragments":["think"]},{"Key":"just think","Fragments":["something"]},{"Key":"think something","Fragments":["like"]},{"Key":"`silence?` might","Fragments":["fit"]},{"Key":"more nicely.","Fragments":[":)"]},{"Key":"Updated based","Fragments":["on","on"]},{"Key":"on feedback","Fragments":["by"]},{"Key":"feedback by","Fragments":["@georgette"]},{"Key":"great. :)","Fragments":["Just"]},{"Key":":) Just","Fragments":["in"]},{"Key":"Just in","Fragments":["case"]},{"Key":"you hadn't","Fragments":["come"]},{"Key":"hadn't come","Fragments":["across"]},{"Key":"across the","Fragments":["technique"]},{"Key":"technique before,","Fragments":["an"]},{"Key":"before, an","Fragments":["alternative"]},{"Key":"explicitly checking","Fragments":["for"]},{"Key":"unicode alpha","Fragments":["characters"]},{"Key":"alpha characters","Fragments":["would"]},{"Key":"characters would","Fragments":["be"]},{"Key":"== input","Fragments":["\u0026\u0026","and","checks","and"]},{"Key":"input \u0026\u0026","Fragments":["String.downcase(input)"]},{"Key":"\u0026\u0026 String.downcase(input)","Fragments":["!=","!="]},{"Key":"String.downcase(input) !=","Fragments":["input","input","input","input."]},{"Key":"less efficient?","Fragments":["Not"]},{"Key":"efficient? Not","Fragments":["sure."]},{"Key":"sure. But","Fragments":["just"]},{"Key":"But just","Fragments":["an"]},{"Key":"nice. Just","Fragments":["a","a"]},{"Key":"Line 21","Fragments":["is"]},{"Key":"21 is","Fragments":["getting"]},{"Key":"bit long.","Fragments":["What"]},{"Key":"long. What","Fragments":["do"]},{"Key":"your creative","Fragments":["or"]},{"Key":"creative or","Fragments":["more"]},{"Key":"names if","Fragments":["you"]},{"Key":"wanted instead","Fragments":["of"]},{"Key":"of `result`","Fragments":["and"]},{"Key":"`result` and","Fragments":["`acc`."]},{"Key":"Thanks, knew","Fragments":["that"]},{"Key":"knew that","Fragments":["```slice```"]},{"Key":"that ```slice```","Fragments":["looked"]},{"Key":"```slice``` looked","Fragments":["unwieldy."]},{"Key":"Very rough","Fragments":["attempt."]},{"Key":"rough attempt.","Fragments":["I"]},{"Key":"attempt. I","Fragments":["would"]},{"Key":"would think","Fragments":["there"]},{"Key":"use ```|\u003e```","Fragments":["in"]},{"Key":"```|\u003e``` in","Fragments":["here"]},{"Key":"Yes, good","Fragments":["start"]},{"Key":"good start","Fragments":["nonetheless."]},{"Key":"First I'd","Fragments":["downcase"]},{"Key":"I'd downcase","Fragments":["the"]},{"Key":"then map","Fragments":["it"]},{"Key":"map it","Fragments":["using"]},{"Key":"awesomeness that","Fragments":["is"]},{"Key":"Also think","Fragments":["about"]},{"Key":"just iterating","Fragments":["your"]},{"Key":"iterating your","Fragments":["array"]},{"Key":"your array","Fragments":["of"]},{"Key":"words using","Fragments":["`Dict.update`"]},{"Key":"using `Dict.update`","Fragments":["(think"]},{"Key":"`Dict.update` (think","Fragments":["about"]},{"Key":"(think about","Fragments":["it"]},{"Key":"as `Hash.new(default)`","Fragments":["for"]},{"Key":"`Hash.new(default)` for","Fragments":["ruby)."]},{"Key":" Funny,","Fragments":["on"]},{"Key":"Funny, on","Fragments":["my"]},{"Key":"my text","Fragments":["editor,"]},{"Key":"text editor,","Fragments":["the"]},{"Key":"editor, the","Fragments":["code"]},{"Key":"look quite","Fragments":["so"]},{"Key":"so spaced","Fragments":["out"]},{"Key":"spaced out","Fragments":["as"]},{"Key":"does on","Fragments":["this"]},{"Key":"for `\\w`","Fragments":["an"]},{"Key":"`\\w` an","Fragments":["underscore"]},{"Key":"hyphen isn't,","Fragments":["even"]},{"Key":"isn't, even","Fragments":["though"]},{"Key":"though in","Fragments":["real"]},{"Key":"real words","Fragments":["you"]},{"Key":"you never","Fragments":["see"]},{"Key":"never see","Fragments":["underscores"]},{"Key":"see underscores","Fragments":["but"]},{"Key":"underscores but","Fragments":["you"]},{"Key":"guess `result`","Fragments":["could've"]},{"Key":"`result` could've","Fragments":["been"]},{"Key":"could've been","Fragments":["`music`,"]},{"Key":"been `music`,","Fragments":["for"]},{"Key":"`music`, for","Fragments":["extra"]},{"Key":"for extra","Fragments":["colour..."]},{"Key":"of `[^\\p{L}]`","Fragments":["you"]},{"Key":"`[^\\p{L}]` you","Fragments":["can"]},{"Key":"write `[\\P{L}]`","Fragments":["(`\\P{x}`"]},{"Key":"`[\\P{L}]` (`\\P{x}`","Fragments":["is"]},{"Key":"(`\\P{x}` is","Fragments":["the"]},{"Key":"use `if","Fragments":["result"]},{"Key":"`if result","Fragments":["==="]},{"Key":"result ===","Fragments":["\"\","]},{"Key":"=== \"\",","Fragments":["do:"]},{"Key":"\"\", do:","Fragments":["to_string(number),"]},{"Key":"do: to_string(number),","Fragments":["else:"]},{"Key":"to_string(number), else:","Fragments":["result`,"]},{"Key":"else: result`,","Fragments":["but"]},{"Key":"result`, but","Fragments":["your"]},{"Key":"nice. I","Fragments":["like"]},{"Key":"names. Yeah,","Fragments":["`music`"]},{"Key":"Yeah, `music`","Fragments":["or"]},{"Key":"`music` or","Fragments":["`symphony`"]},{"Key":"or `symphony`","Fragments":["would"]},{"Key":"`symphony` would","Fragments":["be"]},{"Key":"be cool","Fragments":["there."]},{"Key":"cool there.","Fragments":[":)"]},{"Key":"there. :)","Fragments":["I"]},{"Key":"`case` vs","Fragments":["`if"]},{"Key":"vs `if","Fragments":["else`."]},{"Key":"there seem","Fragments":["to"]},{"Key":"some extra","Fragments":["newlines"]},{"Key":"extra newlines","Fragments":["in"]},{"Key":"newlines in","Fragments":["there."]},{"Key":"some `String`","Fragments":["functions"]},{"Key":"`String` functions","Fragments":["to"]},{"Key":"avoid several","Fragments":["regexes"]},{"Key":"several regexes","Fragments":["here"]},{"Key":"regexes here","Fragments":["btw."]},{"Key":"here btw.","Fragments":["It"]},{"Key":"btw. It","Fragments":["also"]},{"Key":"code somewhat","Fragments":["easier"]},{"Key":" String.match?","Fragments":["would"]},{"Key":"String.match? would","Fragments":["be"]},{"Key":"be promising","Fragments":["for"]},{"Key":"promising for","Fragments":["the"]},{"Key":"the there_are_letters","Fragments":["function,"]},{"Key":"there_are_letters function,","Fragments":["but"]},{"Key":"doesn't loo","Fragments":["like"]},{"Key":"loo like","Fragments":["it's"]},{"Key":"it's available","Fragments":["in"]},{"Key":"the 0.12.3-dev","Fragments":["version"]},{"Key":"0.12.3-dev version","Fragments":["of"]},{"Key":"Elixir I'm","Fragments":["using."]},{"Key":"I'm using.","Fragments":["(That's"]},{"Key":"using. (That's","Fragments":["also"]},{"Key":"(That's also","Fragments":["why"]},{"Key":"it's %r","Fragments":["and"]},{"Key":"%r and","Fragments":["not"]},{"Key":"use String.ends_with,","Fragments":["so"]},{"Key":"String.ends_with, so","Fragments":["that'll"]},{"Key":"so that'll","Fragments":["be"]},{"Key":"be cool.","Fragments":["I"]},{"Key":"just can't","Fragments":["help","get"]},{"Key":"can't help","Fragments":["myself."]},{"Key":"help myself.","Fragments":["I'm"]},{"Key":"myself. I'm","Fragments":["a"]},{"Key":"time Perl","Fragments":["programmer."]},{"Key":"Perl programmer.","Fragments":["RegExes"]},{"Key":"programmer. RegExes","Fragments":["don't"]},{"Key":"RegExes don't","Fragments":["scare"]},{"Key":"don't scare","Fragments":["me"]},{"Key":"scare me","Fragments":["so"]},{"Key":"had problems","Fragments":["with"]},{"Key":"with spacing","Fragments":["when"]},{"Key":"spacing when","Fragments":["I"]},{"Key":"Ruby versions","Fragments":["of"]},{"Key":"of Exercism,","Fragments":["too."]},{"Key":"Exercism, too.","Fragments":["I"]},{"Key":"to delete","Fragments":["some","it."]},{"Key":"delete some","Fragments":["of"]},{"Key":"those extra","Fragments":["lines."]},{"Key":"extra lines.","Fragments":["Looks"]},{"Key":"lines. Looks","Fragments":["great"]},{"Key":"my editor,","Fragments":["but"]},{"Key":"editor, but","Fragments":["way"]},{"Key":"but way","Fragments":["too"]},{"Key":"too spread","Fragments":["out"]},{"Key":"spread out","Fragments":["on"]},{"Key":"For `not_saying_anything`","Fragments":["you"]},{"Key":"`not_saying_anything` you","Fragments":["could"]},{"Key":"use `String.strip(statement)","Fragments":["=="]},{"Key":"`String.strip(statement) ==","Fragments":["\"\"`."]},{"Key":"All test","Fragments":["pass"]},{"Key":"test pass","Fragments":["but"]},{"Key":"pass but","Fragments":["I"]},{"Key":"newbie to","Fragments":["Elixir","elixir,","elixir,","read)"]},{"Key":"please do","Fragments":["enlighten","remove"]},{"Key":"do enlighten","Fragments":["me."]},{"Key":"Oops just","Fragments":["as"]},{"Key":"I suspected","Fragments":["I"]},{"Key":"suspected I","Fragments":["had"]},{"Key":"file that","Fragments":["only"]},{"Key":"only had","Fragments":["9"]},{"Key":"had 9","Fragments":["test"]},{"Key":"9 test","Fragments":["cases."]},{"Key":"test cases.","Fragments":["So"]},{"Key":"cases. So","Fragments":["I"]},{"Key":"Elixir's method","Fragments":["signature"]},{"Key":"signature pattern","Fragments":["matching"]},{"Key":"these conditionals.","Fragments":["For"]},{"Key":"conditionals. For","Fragments":["instance,"]},{"Key":"For instance,","Fragments":["for","`ends_in_question_mark?/1`"]},{"Key":"instance, for","Fragments":["your"]},{"Key":"your action","Fragments":["method,"]},{"Key":"action method,","Fragments":["you"]},{"Key":"method, you","Fragments":["could"]},{"Key":"defp action(0),","Fragments":["do"]},{"Key":"action(0), do","Fragments":["\"Go"]},{"Key":"do \"Go","Fragments":["to"]},{"Key":"\"Go to","Fragments":["the"]},{"Key":"defp action(beer_count),","Fragments":["do"]},{"Key":"action(beer_count), do","Fragments":["take_one_down(beer_count)"]},{"Key":"sure. Phone-number","Fragments":["is"]},{"Key":"Phone-number is","Fragments":["one"]},{"Key":"those tests","Fragments":["that"]},{"Key":"was translated","Fragments":["from"]},{"Key":"translated from","Fragments":["another"]},{"Key":"from another","Fragments":["language"]},{"Key":"original tests","Fragments":["it"]},{"Key":"tests it","Fragments":["probably"]},{"Key":"it probably","Fragments":["translated","can't"]},{"Key":"probably translated","Fragments":["to"]},{"Key":"translated to","Fragments":["Elixir's","`f(x)`)."]},{"Key":"want could","Fragments":["you"]},{"Key":"Now all","Fragments":["13"]},{"Key":"all 13","Fragments":["tests"]},{"Key":"13 tests","Fragments":["pass."]},{"Key":"Let the","Fragments":["nitpicking"]},{"Key":"the nitpicking","Fragments":["begin!"]},{"Key":"much nits","Fragments":["to"]},{"Key":"nits to","Fragments":["pick"]},{"Key":"pick in","Fragments":["this"]},{"Key":"case, you","Fragments":["did","could"]},{"Key":"did most","Fragments":["things"]},{"Key":"most things","Fragments":["correctly,"]},{"Key":"things correctly,","Fragments":["even"]},{"Key":"correctly, even","Fragments":["used"]},{"Key":"even used","Fragments":["`\\p{Lu}`."]},{"Key":"used `\\p{Lu}`.","Fragments":["Only"]},{"Key":"`\\p{Lu}`. Only","Fragments":["improvement"]},{"Key":"Only improvement","Fragments":["I"]},{"Key":"improvement I","Fragments":["can"]},{"Key":"is `String.strip(msg)","Fragments":["=="]},{"Key":"\"\"` instead","Fragments":["of"]},{"Key":"of `String.length(String.strip(msg))","Fragments":["=="]},{"Key":"`String.length(String.strip(msg)) ==","Fragments":["0`."]},{"Key":"of that?","Fragments":["Thanks"]},{"Key":"that? Thanks","Fragments":["@george"]},{"Key":"Thanks @george","Fragments":["for"]},{"Key":"@george for","Fragments":["the"]},{"Key":"extracting well-named","Fragments":["private"]},{"Key":"case? That","Fragments":["would"]},{"Key":"things were","Fragments":["truly"]},{"Key":"were truly","Fragments":["checking"]},{"Key":"truly checking","Fragments":["for"]},{"Key":" Define","Fragments":["`reduce`"]},{"Key":"Define `reduce`","Fragments":["first,"]},{"Key":"`reduce` first,","Fragments":["and"]},{"Key":"rest in","Fragments":["term"]},{"Key":"good, just","Fragments":["a"]},{"Key":"small comment.","Fragments":["Usually"]},{"Key":"comment. Usually","Fragments":["when"]},{"Key":"Usually when","Fragments":["naming"]},{"Key":"when naming","Fragments":["a"]},{"Key":"naming a","Fragments":["predicate"]},{"Key":"predicate method","Fragments":["you","end"]},{"Key":"method you","Fragments":["either"]},{"Key":"you either","Fragments":["call"]},{"Key":"either call","Fragments":["it"]},{"Key":"it `is_something`","Fragments":["or"]},{"Key":"`is_something` or","Fragments":["`something?`"]},{"Key":"or `something?`","Fragments":["but"]},{"Key":"`something?` but","Fragments":["not"]},{"Key":"usually `is_something?`.","Fragments":["In"]},{"Key":"`is_something?`. In","Fragments":["Elixir"]},{"Key":"Elixir adding","Fragments":["the"]},{"Key":"mark is","Fragments":["the"]},{"Key":"the convention,","Fragments":["so"]},{"Key":"convention, so","Fragments":["I"]},{"Key":"maybe recommend","Fragments":["just"]},{"Key":"recommend just","Fragments":["`question?`"]},{"Key":"just `question?`","Fragments":["What"]},{"Key":"`question?` What","Fragments":["do"]},{"Key":"really nitpicky,","Fragments":["but"]},{"Key":"nitpicky, but","Fragments":["the"]},{"Key":"three names","Fragments":["of"]},{"Key":"function don't","Fragments":["seem"]},{"Key":"other very","Fragments":["well."]},{"Key":"well. `blank?`","Fragments":["sounds"]},{"Key":"`blank?` sounds","Fragments":["like"]},{"Key":"it's talking","Fragments":["about"]},{"Key":"in programming","Fragments":["terms,"]},{"Key":"programming terms,","Fragments":["rather"]},{"Key":"terms, rather","Fragments":["than"]},{"Key":"than necessarily","Fragments":["in"]},{"Key":"necessarily in","Fragments":["terms"]},{"Key":"domain. `yells?(input)`","Fragments":["sounds"]},{"Key":"`yells?(input)` sounds","Fragments":["like"]},{"Key":"it's asking","Fragments":["if"]},{"Key":"asking if","Fragments":["the"]},{"Key":"Teenager is","Fragments":["yelling"]},{"Key":"yelling `input`.","Fragments":["`is_question?`"]},{"Key":"`input`. `is_question?`","Fragments":["sounds"]},{"Key":"`is_question?` sounds","Fragments":["like"]},{"Key":"it's testing","Fragments":["the"]},{"Key":"`input`, which","Fragments":["feels"]},{"Key":"most appropriate","Fragments":["to"]},{"Key":"all three","Fragments":["are"]},{"Key":"three are","Fragments":["testing"]},{"Key":"Oh, good","Fragments":["one."]},{"Key":"docs, but","Fragments":["it's"]},{"Key":"it's working.","Fragments":["Time"]},{"Key":"working. Time","Fragments":["for"]},{"Key":"Time for","Fragments":["an"]},{"Key":" (He","Fragments":["says,"]},{"Key":"(He says,","Fragments":["begrudgingly"]},{"Key":"says, begrudgingly","Fragments":["realizing"]},{"Key":"begrudgingly realizing","Fragments":["that"]},{"Key":"realizing that","Fragments":["most"]},{"Key":"that most","Fragments":["people"]},{"Key":"like plain","Fragments":["English"]},{"Key":"plain English","Fragments":["better"]},{"Key":"English better","Fragments":["than"]},{"Key":"than regexes...","Fragments":[";-)"]},{"Key":" @michele","Fragments":["I"]},{"Key":"@michele I","Fragments":["got"]},{"Key":"understand about","Fragments":["is_yell."]},{"Key":"about is_yell.","Fragments":["I"]},{"Key":"is_yell. I","Fragments":["knew"]},{"Key":"knew just","Fragments":["finding"]},{"Key":"just finding","Fragments":["alphabet"]},{"Key":"finding alphabet","Fragments":["is"]},{"Key":"alphabet is","Fragments":["not"]},{"Key":"saw your","Fragments":["code,","question","code"]},{"Key":"code, you","Fragments":["use"]},{"Key":"use remove_number.","Fragments":["It's"]},{"Key":"remove_number. It's","Fragments":["not"]},{"Key":"we will","Fragments":["remove"]},{"Key":"will remove","Fragments":["numbers"]},{"Key":"remove numbers","Fragments":["and"]},{"Key":"and special","Fragments":["characters."]},{"Key":"special characters.","Fragments":["Isn't"]},{"Key":"characters. Isn't","Fragments":["it?"]},{"Key":"pretty nice.","Fragments":["Does","Just"]},{"Key":"nice. Does","Fragments":["it"]},{"Key":"I'm particularly","Fragments":["curious"]},{"Key":"particularly curious","Fragments":["about"]},{"Key":"test? It","Fragments":["looks"]},{"Key":"as defined","Fragments":["by"]},{"Key":"defined by","Fragments":["`[a-zA-z]`"]},{"Key":"by `[a-zA-z]`","Fragments":["rather"]},{"Key":"`[a-zA-z]` rather","Fragments":["than"]},{"Key":"Just another","Fragments":["Elixir"]},{"Key":"another Elixir","Fragments":["style"]},{"Key":"style thing...","Fragments":["it's"]},{"Key":"thing... it's","Fragments":["idiomatic"]},{"Key":"predicate method,","Fragments":["so"]},{"Key":"have `not_saying_anything?`,","Fragments":["etc."]},{"Key":"`not_saying_anything?`, etc.","Fragments":["Not"]},{"Key":"a requirement,","Fragments":["but"]},{"Key":"requirement, but","Fragments":["it's"]},{"Key":"nice convention","Fragments":["that"]},{"Key":"convention that","Fragments":["clearly"]},{"Key":"clearly indicates","Fragments":["that"]},{"Key":"indicates that","Fragments":["the"]},{"Key":"a truthy","Fragments":["or"]},{"Key":"truthy or","Fragments":["falsy"]},{"Key":"or falsy","Fragments":["result."]},{"Key":"falsy result.","Fragments":[":)"]},{"Key":"tests. So","Fragments":["I"]},{"Key":"I blame","Fragments":["the"]},{"Key":"blame the","Fragments":["test"]},{"Key":"being Unicode-specific.","Fragments":[";-)"]},{"Key":"the reminder","Fragments":["about"]},{"Key":"reminder about","Fragments":["the"]},{"Key":"mark. I'm","Fragments":["going"]},{"Key":"to tweak","Fragments":["that"]},{"Key":"tweak that","Fragments":["next!"]},{"Key":"last tweak","Fragments":["to"]},{"Key":"tweak to","Fragments":["get"]},{"Key":"that commented-out","Fragments":["line"]},{"Key":"commented-out line","Fragments":["of"]},{"Key":"code. No","Fragments":["need"]},{"Key":"So, does","Fragments":["your"]},{"Key":"suite have","Fragments":["the"]},{"Key":"the \"shouting","Fragments":["in"]},{"Key":"Russian\" test?","Fragments":["The"]},{"Key":"test? The","Fragments":["intent"]},{"Key":"intent with","Fragments":["that"]},{"Key":"people look","Fragments":["outside"]},{"Key":"look outside","Fragments":["the"]},{"Key":"the A-Z","Fragments":["alphabet,"]},{"Key":"A-Z alphabet,","Fragments":["so"]},{"Key":"alphabet, so","Fragments":["if"]},{"Key":"is passing","Fragments":["that"]},{"Key":"passing that","Fragments":["test,"]},{"Key":"test, I'm","Fragments":["really"]},{"Key":"really curious","Fragments":["how."]},{"Key":"curious how.","Fragments":["I"]},{"Key":"how. I","Fragments":["might"]},{"Key":" Regardless","Fragments":["of"]},{"Key":"Regardless of","Fragments":["if"]},{"Key":"has that","Fragments":["test"]},{"Key":"test or","Fragments":["not,"]},{"Key":"not, can","Fragments":["you"]},{"Key":"code work","Fragments":["with"]},{"Key":"any letters,","Fragments":["not"]},{"Key":"letters, not","Fragments":["just"]},{"Key":"just a-z?","Fragments":["If"]},{"Key":"a-z? If","Fragments":["you"]},{"Key":"test, you","Fragments":["can"]},{"Key":"delete your","Fragments":["test"]},{"Key":"do `exercism","Fragments":["fetch`"]},{"Key":"fetch` to","Fragments":["grab"]},{"Key":"latest one...","Fragments":["or"]},{"Key":"one... or","Fragments":["click"]},{"Key":"or click","Fragments":["on"]},{"Key":"the Test","Fragments":["Suite"]},{"Key":"Test Suite","Fragments":["link"]},{"Key":"Suite link","Fragments":["on"]},{"Key":"link on","Fragments":["the"]},{"Key":"page and","Fragments":["copy"]},{"Key":"and copy","Fragments":["and"]},{"Key":"copy and","Fragments":["paste","paste"]},{"Key":"and paste","Fragments":["it","with"]},{"Key":"that, that's","Fragments":["fine."]},{"Key":"curious. 'Cause","Fragments":["if"]},{"Key":"'Cause if","Fragments":["this"]},{"Key":"test, then","Fragments":["I"]},{"Key":"out how!","Fragments":[":)"]},{"Key":" @kaley","Fragments":["Generally"]},{"Key":"@kaley Generally","Fragments":["it's"]},{"Key":"Generally it's","Fragments":["preferable"]},{"Key":"`Dict.some_fun` instead","Fragments":["of"]},{"Key":"of `HashDict.some_fun`.","Fragments":["The"]},{"Key":"`HashDict.some_fun`. The","Fragments":["way"]},{"Key":"way `Dict`","Fragments":["is"]},{"Key":"implemented it","Fragments":["calls"]},{"Key":"it calls","Fragments":["`HashDict`"]},{"Key":"calls `HashDict`","Fragments":["automatically"]},{"Key":"`HashDict` automatically","Fragments":["for"]},{"Key":"automatically for","Fragments":["`HashDict`"]},{"Key":"for `HashDict`","Fragments":["values"]},{"Key":"`HashDict` values","Fragments":["but"]},{"Key":"values but","Fragments":["it"]},{"Key":"other kinds","Fragments":["of"]},{"Key":"dictionaries, which","Fragments":["makes"]},{"Key":"tip: in","Fragments":["a"]},{"Key":"regex `\\p{L}`","Fragments":["matches"]},{"Key":"any Unicode","Fragments":["letter,","uppercase"]},{"Key":"Unicode letter,","Fragments":["`\\p{Lu}`"]},{"Key":"letter, `\\p{Lu}`","Fragments":["matches"]},{"Key":"`\\p{Lu}` matches","Fragments":["any"]},{"Key":"Unicode uppercase","Fragments":["letter."]},{"Key":"Thanks, that","Fragments":["would"]},{"Key":"cleaner solution,","Fragments":["I'll"]},{"Key":"solution, I'll","Fragments":["try"]},{"Key":"general `|\u003e`","Fragments":["makes"]},{"Key":"`|\u003e` makes","Fragments":["sense"]},{"Key":"sense whenever","Fragments":["you"]},{"Key":"a logical","Fragments":["\"flow\"."]},{"Key":"logical \"flow\".","Fragments":["I"]},{"Key":"\"flow\". I","Fragments":["downcase"]},{"Key":"I downcase","Fragments":["a"]},{"Key":"downcase a","Fragments":["sentence,"]},{"Key":"a sentence,","Fragments":["then"]},{"Key":"sentence, then","Fragments":["I"]},{"Key":"in words,","Fragments":["then"]},{"Key":"words, then","Fragments":["I","I"]},{"Key":"I reject","Fragments":["empty"]},{"Key":"empty words,","Fragments":["then"]},{"Key":"I fold","Fragments":["(`reduce`)"]},{"Key":"fold (`reduce`)","Fragments":["over"]},{"Key":"(`reduce`) over","Fragments":["them"]},{"Key":"over them","Fragments":["to"]},{"Key":"each distinct","Fragments":["word."]},{"Key":"distinct word.","Fragments":["If"]},{"Key":"word. If","Fragments":["you"]},{"Key":"out like","Fragments":["that"]},{"Key":"flow becomes","Fragments":["obvious."]},{"Key":"people try","Fragments":["to"]},{"Key":"to shoehorn","Fragments":["everything"]},{"Key":"shoehorn everything","Fragments":["into"]},{"Key":"everything into","Fragments":["the"]},{"Key":"pipeline (`|\u003e`)","Fragments":["shape","syntax"]},{"Key":"(`|\u003e`) shape","Fragments":["but"]},{"Key":"shape but","Fragments":["I"]},{"Key":"only where","Fragments":["it"]},{"Key":"it presents","Fragments":["itself"]},{"Key":"presents itself","Fragments":["as"]},{"Key":"itself as","Fragments":["natural."]},{"Key":"A very","Fragments":["clean"]},{"Key":"very clean","Fragments":["readable","implementation:"]},{"Key":"clean readable","Fragments":["solution"]},{"Key":"readable solution","Fragments":["but"]},{"Key":"for russian","Fragments":["yelling."]},{"Key":"to research","Fragments":["that"]},{"Key":"research that","Fragments":["also"]},{"Key":"that also","Fragments":["and"]},{"Key":"also and","Fragments":["found"]},{"Key":"and found","Fragments":["the","I"]},{"Key":"following link","Fragments":["very"]},{"Key":"link very","Fragments":["helpful:"]},{"Key":"that passes","Fragments":["all","all"]},{"Key":"tests, would","Fragments":["love","love"]},{"Key":"hear how","Fragments":["I","I"]},{"Key":" Stylistically:","Fragments":["I'd"]},{"Key":"Stylistically: I'd","Fragments":["write"]},{"Key":"|\u003e Enum.reject(\u0026(\u00261","Fragments":["=="]},{"Key":"Enum.reject(\u0026(\u00261 ==","Fragments":["\"\"))"]},{"Key":"== \"\"))","Fragments":["#"]},{"Key":"\"\")) #","Fragments":["Shorthand"]},{"Key":"# Shorthand","Fragments":["for"]},{"Key":"Shorthand for","Fragments":["fn"]},{"Key":"for fn","Fragments":["word","to"]},{"Key":"fn word","Fragments":["-\u003e"]},{"Key":"word -\u003e","Fragments":["word"]},{"Key":"-\u003e word","Fragments":["=="]},{"Key":"|\u003e Enum.reduce(HashDict.new,","Fragments":["fn"]},{"Key":"Enum.reduce(HashDict.new, fn","Fragments":["word,"]},{"Key":"word, dict","Fragments":["-\u003e"]},{"Key":" Dict.update(dict,","Fragments":["word,"]},{"Key":"Dict.update(dict, word,","Fragments":["1,"]},{"Key":"1, \u0026(\u00261","Fragments":["+","+","+"]},{"Key":"aware btw","Fragments":["that"]},{"Key":"btw that","Fragments":["word"]},{"Key":"word chars","Fragments":["according"]},{"Key":"chars according","Fragments":["to"]},{"Key":"to `\\w`","Fragments":["and"]},{"Key":"`\\w` and","Fragments":["`\\W`"]},{"Key":"and `\\W`","Fragments":["include"]},{"Key":"`\\W` include","Fragments":["underscore"]},{"Key":"include underscore","Fragments":["but"]},{"Key":"underscore but","Fragments":["don't"]},{"Key":"don't include","Fragments":["hyphens."]},{"Key":"include hyphens.","Fragments":["So"]},{"Key":"hyphens. So","Fragments":["\"co-operative\""]},{"Key":"So \"co-operative\"","Fragments":["would"]},{"Key":"\"co-operative\" would","Fragments":["be"]},{"Key":"as two","Fragments":["words."]},{"Key":" @ilene","Fragments":["thanks"]},{"Key":"@ilene thanks","Fragments":["for"]},{"Key":"debated readability","Fragments":["vs"]},{"Key":"readability vs","Fragments":["idiomatic"]},{"Key":"vs idiomatic","Fragments":["elixir"]},{"Key":"using |\u003e","Fragments":["but"]},{"Key":"|\u003e but","Fragments":["it"]},{"Key":"pitfall in","Fragments":["that"]},{"Key":"that though.","Fragments":["Elixir"]},{"Key":"though. Elixir","Fragments":["doesn't"]},{"Key":"do OO","Fragments":["and"]},{"Key":"OO and","Fragments":["thinking"]},{"Key":"and thinking","Fragments":["of"]},{"Key":"in OO","Fragments":["terms"]},{"Key":"OO terms","Fragments":["is"]},{"Key":"terms is","Fragments":["likely"]},{"Key":"lead you","Fragments":["to"]},{"Key":"to solutions","Fragments":["that"]},{"Key":"don't work","Fragments":["well"]},{"Key":"you condensed","Fragments":["the"]},{"Key":"condensed the","Fragments":["lines"]},{"Key":"lines inside","Fragments":["the"]},{"Key":"\"cond\" section","Fragments":["there."]},{"Key":"section there.","Fragments":["Yours"]},{"Key":"there. Yours","Fragments":["is"]},{"Key":"Yours is","Fragments":["the"]},{"Key":"seen do","Fragments":["it."]},{"Key":"it. (There","Fragments":["are"]},{"Key":"(There are","Fragments":["likely"]},{"Key":"are likely","Fragments":["others,"]},{"Key":"likely others,","Fragments":["but"]},{"Key":"others, but","Fragments":["I"]},{"Key":"haven't looked","Fragments":["around"]},{"Key":"around THAT","Fragments":["much"]},{"Key":"THAT much","Fragments":["yet...)"]},{"Key":"the modules","Fragments":["to","you"]},{"Key":"modules to","Fragments":["be"]},{"Key":"be bracketed","Fragments":["in"]},{"Key":"bracketed in","Fragments":["do/end"]},{"Key":"in do/end","Fragments":["instead"]},{"Key":"do/end instead","Fragments":["of"]},{"Key":"lines, but","Fragments":["that's"]},{"Key":"minor stylistic","Fragments":["thing."]},{"Key":"stylistic thing.","Fragments":["Can't"]},{"Key":"thing. Can't","Fragments":["fault"]},{"Key":"Can't fault","Fragments":["you"]},{"Key":"fault you","Fragments":["for"]},{"Key":"Both of","Fragments":["these"]},{"Key":"are personal","Fragments":["preferences,"]},{"Key":"personal preferences,","Fragments":["easily"]},{"Key":"preferences, easily","Fragments":["learned"]},{"Key":"easily learned","Fragments":["and"]},{"Key":"and adapted","Fragments":["to."]},{"Key":"adapted to.","Fragments":["Good"]},{"Key":"to. Good","Fragments":["job!"]},{"Key":"at `Regex.scan`.","Fragments":["It's"]},{"Key":"`Regex.scan`. It's","Fragments":["more"]},{"Key":"than `String.codepoints","Fragments":["|\u003e"]},{"Key":"`String.codepoints |\u003e","Fragments":["Enum.filter`."]},{"Key":"Would `HashDict.new/2`","Fragments":["be"]},{"Key":"`HashDict.new/2` be","Fragments":["useful"]},{"Key":"you think,","Fragments":["naming"]},{"Key":"think, naming","Fragments":["the"]},{"Key":"variable words","Fragments":["instead"]},{"Key":"be move","Fragments":["attention"]},{"Key":"move attention","Fragments":["revealing?"]},{"Key":" @donna","Fragments":["I"]},{"Key":"@donna I","Fragments":["tried"]},{"Key":"tried your","Fragments":["suggestion"]},{"Key":"suggestion above","Fragments":["but"]},{"Key":" ```|\u003e","Fragments":["Regex.split(%r{\\W+})```"]},{"Key":" does","Fragments":["not","that"]},{"Key":"am too","Fragments":["new"]},{"Key":"too new","Fragments":["to"]},{"Key":"why or","Fragments":["how"]},{"Key":"fix but","Fragments":["I"]},{"Key":"tried a","Fragments":["few"]},{"Key":"ways and","Fragments":["does"]},{"Key":"send second","Fragments":["variable"]},{"Key":"second variable","Fragments":["expected"]},{"Key":"variable expected","Fragments":["to"]},{"Key":"a pipeline?","Fragments":["Is"]},{"Key":"pipeline? Is","Fragments":["it"]},{"Key":"appreciate your","Fragments":["help"]},{"Key":"your help","Fragments":["here."]},{"Key":"Not really.","Fragments":["The"]},{"Key":"really. The","Fragments":["code"]},{"Key":"is short","Fragments":["enough"]},{"Key":"short enough","Fragments":["that"]},{"Key":"enough that","Fragments":["any"]},{"Key":"that any","Fragments":["word"]},{"Key":"any word","Fragments":["will"]},{"Key":"word will","Fragments":["be"]},{"Key":"done is","Fragments":["`Regex.scan(,..)"]},{"Key":"is `Regex.scan(,..)","Fragments":["|\u003e"]},{"Key":"`Regex.scan(,..) |\u003e","Fragments":["Enum.reduce(HashDict.new(),"]},{"Key":"|\u003e Enum.reduce(HashDict.new(),","Fragments":["...)`."]},{"Key":"Enum.reduce(HashDict.new(), ...)`.","Fragments":["Guess"]},{"Key":"...)`. Guess","Fragments":["at"]},{"Key":"Guess at","Fragments":["the"]},{"Key":"You seem","Fragments":["to"]},{"Key":"very old","Fragments":["version"]},{"Key":"Elixir tests.","Fragments":["This"]},{"Key":"tests. This","Fragments":["one"]},{"Key":"was canned","Fragments":["a"]},{"Key":"canned a","Fragments":["long"]},{"Key":"time ago","Fragments":["due","and"]},{"Key":"ago due","Fragments":["to"]},{"Key":"to being","Fragments":["annoying"]},{"Key":"being annoying","Fragments":["to"]},{"Key":"one as","Fragments":["great"]},{"Key":"as great","Fragments":["simply"]},{"Key":"great simply","Fragments":["on"]},{"Key":"simply on","Fragments":["the"]},{"Key":"logic that","Fragments":["if"]},{"Key":"you managed","Fragments":["to"]},{"Key":"all that's","Fragments":["great."]},{"Key":"the grouping","Fragments":["based"]},{"Key":"grouping based","Fragments":["on"]},{"Key":"on words,","Fragments":["not"]},{"Key":"words, not","Fragments":["individual"]},{"Key":"not individual","Fragments":["characters."]},{"Key":"individual characters.","Fragments":["Maybe"]},{"Key":"characters. Maybe","Fragments":["I'm"]},{"Key":"using Regex.scan","Fragments":["correctly?","."]},{"Key":"tiny thing:","Fragments":["it's"]},{"Key":"than `List.foldl`.","Fragments":["They"]},{"Key":"`List.foldl`. They","Fragments":["do"]},{"Key":"They do","Fragments":["the"]},{"Key":"but `Enum.reduce`","Fragments":["is"]},{"Key":"somewhat more","Fragments":["idiomatic"]},{"Key":"flexible (for","Fragments":["example"]},{"Key":"use tail","Fragments":["recursion"]},{"Key":"and implement","Fragments":["concat"]},{"Key":"implement concat","Fragments":["by"]},{"Key":"concat by","Fragments":["appending"]},{"Key":"by appending","Fragments":["in"]},{"Key":"appending in","Fragments":["the"]},{"Key":"need `reduce_iter`,","Fragments":["you"]},{"Key":"`reduce_iter`, you","Fragments":["can"]},{"Key":"def reduce([],","Fragments":["acc,","acc,"]},{"Key":"reduce([], acc,","Fragments":["_),","_),"]},{"Key":"acc, _),","Fragments":["do:","do:","do:"]},{"Key":"def reduce([h|t],","Fragments":["acc,","acc,"]},{"Key":"reduce([h|t], acc,","Fragments":["f),","f),"]},{"Key":"acc, f),","Fragments":["do:","do:"]},{"Key":"f), do:","Fragments":["reduce(t,","reduce(t,"]},{"Key":"do: reduce(t,","Fragments":["f.(h,","f.(h,"]},{"Key":"reduce(t, f.(h,","Fragments":["acc),","acc),"]},{"Key":"f.(h, acc),","Fragments":["f)","f)"]},{"Key":"want nice","Fragments":["names"]},{"Key":"nice names","Fragments":["of","to"]},{"Key":"the ExDoc","Fragments":["documentation"]},{"Key":"ExDoc documentation","Fragments":["you"]},{"Key":"documentation you","Fragments":["can"]},{"Key":"head with","Fragments":["no"]},{"Key":"no body","Fragments":["like"]},{"Key":"body like","Fragments":["this:"]},{"Key":"def reduce(l,","Fragments":["acc,"]},{"Key":"reduce(l, acc,","Fragments":["f)"]},{"Key":"great. You've","Fragments":["avoided"]},{"Key":"and very","Fragments":["slow"]},{"Key":"very slow","Fragments":["concat"]},{"Key":"slow concat","Fragments":["for"]},{"Key":"concat for","Fragments":["huge","instance."]},{"Key":"did know","Fragments":["about","a"]},{"Key":"syntax but","Fragments":["for"]},{"Key":"never think","Fragments":["to"]},{"Key":"define update_dict","Fragments":["as"]},{"Key":"update_dict as","Fragments":["a"]},{"Key":"module function.","Fragments":["Thanks!"]},{"Key":"you *could*","Fragments":["do"]},{"Key":"*could* do","Fragments":["if"]},{"Key":"to, not","Fragments":["that"]},{"Key":"they're necessarily","Fragments":["objectively"]},{"Key":"necessarily objectively","Fragments":["better:"]},{"Key":"Line 17","Fragments":["could"]},{"Key":"17 could","Fragments":["be"]},{"Key":"written as:","Fragments":["`Enum.count(strand,"]},{"Key":"as: `Enum.count(strand,","Fragments":["\u0026(\u00261"]},{"Key":"`Enum.count(strand, \u0026(\u00261","Fragments":["=="]},{"Key":"nucleotide))` using","Fragments":["the"]},{"Key":"shorthand capture","Fragments":["syntax,"]},{"Key":"syntax, where","Fragments":["`\u0026`"]},{"Key":"where `\u0026`","Fragments":["indicates"]},{"Key":"`\u0026` indicates","Fragments":["the"]},{"Key":"indicates the","Fragments":["anonymous"]},{"Key":"and `\u00261`","Fragments":["is"]},{"Key":"`\u00261` is","Fragments":["the"]},{"Key":"the representation","Fragments":["of"]},{"Key":"representation of","Fragments":["the"]},{"Key":"parameter (forgive","Fragments":["me"]},{"Key":"(forgive me","Fragments":["if"]},{"Key":" Similarly","Fragments":["line"]},{"Key":"Similarly line","Fragments":["32"]},{"Key":"line 32","Fragments":["could"]},{"Key":"32 could","Fragments":["be"]},{"Key":"as `Dict.update(dict,","Fragments":["char,"]},{"Key":"`Dict.update(dict, char,","Fragments":["1,"]},{"Key":"char, 1,","Fragments":["\u0026(\u00261"]},{"Key":"function `update_dict`","Fragments":["a"]},{"Key":"`update_dict` a","Fragments":["private"]},{"Key":"into `Enum.reduce`","Fragments":["on"]},{"Key":"`Enum.reduce` on","Fragments":["line"]},{"Key":"line 34","Fragments":["like:"]},{"Key":" Enum.reduce(strand,","Fragments":["dict,"]},{"Key":"Enum.reduce(strand, dict,","Fragments":["\u0026update_dict/2)"]},{"Key":" @burley","Fragments":["Ugh..."]},{"Key":"@burley Ugh...","Fragments":["I"]},{"Key":"Ugh... I","Fragments":["got"]},{"Key":"little carried","Fragments":["away"]},{"Key":"with copy","Fragments":["and"]},{"Key":"paste with","Fragments":["reduce."]},{"Key":"with reduce.","Fragments":["Fixed"]},{"Key":"reduce. Fixed","Fragments":["and"]},{"Key":"Fixed and","Fragments":["resubmitted."]},{"Key":"few efficiency","Fragments":["improvements"]},{"Key":"improvements to","Fragments":["be"]},{"Key":"be had","Fragments":["though."]},{"Key":"had though.","Fragments":["For"]},{"Key":"though. For","Fragments":["example"]},{"Key":"example you","Fragments":["potentially","linked,"]},{"Key":"you potentially","Fragments":["run"]},{"Key":"potentially run","Fragments":["`Enum.count(a)`"]},{"Key":"run `Enum.count(a)`","Fragments":["twice"]},{"Key":"`Enum.count(a)` twice","Fragments":["in"]},{"Key":"`compare` even","Fragments":["though"]},{"Key":"answer won't","Fragments":["change"]},{"Key":"won't change","Fragments":["between"]},{"Key":"change between","Fragments":["the"]},{"Key":"and second","Fragments":["time."]},{"Key":"a somewhat","Fragments":["subtle"]},{"Key":"somewhat subtle","Fragments":["bug"]},{"Key":"subtle bug","Fragments":["in"]},{"Key":"suite didn't","Fragments":["test"]},{"Key":"didn't test","Fragments":["for"]},{"Key":"for (I've","Fragments":["submitted"]},{"Key":"(I've submitted","Fragments":["a"]},{"Key":"PR for","Fragments":["that):"]},{"Key":"for that):","Fragments":["`Sublist.compare([1,1,2],[1,1,1,2])`"]},{"Key":"that): `Sublist.compare([1,1,2],[1,1,1,2])`","Fragments":["should"]},{"Key":"`Sublist.compare([1,1,2],[1,1,1,2])` should","Fragments":["return"]},{"Key":"return `:sublist`","Fragments":["instead"]},{"Key":"`:sublist` instead","Fragments":["of"]},{"Key":"was attempting","Fragments":["to"]},{"Key":"implement all","Fragments":["of","function"]},{"Key":"functions such","Fragments":["that"]},{"Key":"they support","Fragments":["TCO."]},{"Key":"support TCO.","Fragments":["I"]},{"Key":"TCO. I","Fragments":["couldn't"]},{"Key":"couldn't manage","Fragments":["to"]},{"Key":"for `append`","Fragments":["and"]},{"Key":"`concat` without","Fragments":["them","it"]},{"Key":"being horribly","Fragments":["slow."]},{"Key":"horribly slow.","Fragments":["Any"]},{"Key":"slow. Any","Fragments":["assistance"]},{"Key":"Any assistance","Fragments":["would"]},{"Key":"assistance would","Fragments":["be"]},{"Key":"Your `allergic_to?`","Fragments":["requires"]},{"Key":"`allergic_to?` requires","Fragments":["traversing"]},{"Key":"requires traversing","Fragments":["the"]},{"Key":"of allergens.","Fragments":["Could"]},{"Key":"allergens. Could","Fragments":["you"]},{"Key":"use `Dict.foo`","Fragments":["instead"]},{"Key":"`Dict.foo` instead","Fragments":["of"]},{"Key":"of `HashDict.foo`","Fragments":["if"]},{"Key":"`HashDict.foo` if","Fragments":["possible."]},{"Key":"if possible.","Fragments":["`Dict`"]},{"Key":"possible. `Dict`","Fragments":["functions"]},{"Key":"code changes","Fragments":["you'll"]},{"Key":"changes you'll","Fragments":["have"]},{"Key":"Creating the","Fragments":["HashDict"]},{"Key":"HashDict anew","Fragments":["for"]},{"Key":"anew for","Fragments":["every"]},{"Key":"every call","Fragments":["to"]},{"Key":"to `allergic_to?`","Fragments":["strikes"]},{"Key":"`allergic_to?` strikes","Fragments":["me"]},{"Key":"Oh yes,","Fragments":["I"]},{"Key":"think I've","Fragments":["been"]},{"Key":"been getting","Fragments":["a"]},{"Key":"little muddled.","Fragments":["Not"]},{"Key":"muddled. Not","Fragments":["even"]},{"Key":"Not even","Fragments":["sure"]},{"Key":"extra virtue","Fragments":["of"]},{"Key":"virtue of","Fragments":["a","a"]},{"Key":"HashDict is,","Fragments":["I"]},{"Key":"to say,","Fragments":["except","that"]},{"Key":"say, except","Fragments":["I"]},{"Key":"except I","Fragments":["seemed"]},{"Key":"I seemed","Fragments":["to"]},{"Key":"across it","Fragments":["more"]},{"Key":"more when","Fragments":["starting"]},{"Key":"when starting","Fragments":["to"]},{"Key":"learn Elixir","Fragments":["through"]},{"Key":"Elixir through","Fragments":["Exercism."]},{"Key":"through Exercism.","Fragments":["I"]},{"Key":"Exercism. I","Fragments":["should"]},{"Key":"go do","Fragments":["some"]},{"Key":"some reading","Fragments":["up..."]},{"Key":"The virtue","Fragments":["of"]},{"Key":"it's (far)","Fragments":["more"]},{"Key":"(far) more","Fragments":["efficient"]},{"Key":"tuples when","Fragments":["you"]},{"Key":"key and","Fragments":["want","value"]},{"Key":"and want","Fragments":["to"]},{"Key":"the value.","Fragments":["In"]},{"Key":"value. In","Fragments":["the"]},{"Key":"lists /","Fragments":["HashDict's"]},{"Key":"/ HashDict's","Fragments":["that"]},{"Key":"HashDict's that","Fragments":["might"]},{"Key":"be always","Fragments":["the"]},{"Key":"in those","Fragments":["cases"]},{"Key":"cases things","Fragments":["like"]},{"Key":"the (slightly)","Fragments":["larger"]},{"Key":"(slightly) larger","Fragments":["overhead"]},{"Key":"larger overhead","Fragments":["of"]},{"Key":"of HashDicts","Fragments":["come"]},{"Key":"HashDicts come","Fragments":["into"]},{"Key":"come into","Fragments":["play."]},{"Key":"Exercism does","Fragments":["indeed"]},{"Key":"indeed use","Fragments":["HashDict's"]},{"Key":"use HashDict's","Fragments":["a"]},{"Key":"HashDict's a","Fragments":["lot."]},{"Key":"a lot.","Fragments":["I'm","I"]},{"Key":"lot. I'm","Fragments":["not"]},{"Key":"it's due","Fragments":["to"]},{"Key":"that ExUnit","Fragments":["(the"]},{"Key":"ExUnit (the","Fragments":["testing"]},{"Key":"(the testing","Fragments":["library)"]},{"Key":"testing library)","Fragments":["has"]},{"Key":"library) has","Fragments":["good"]},{"Key":"has good","Fragments":["support"]},{"Key":"good support","Fragments":["for"]},{"Key":"for nice","Fragments":["error"]},{"Key":"nice error","Fragments":["messages","message"]},{"Key":"with structural","Fragments":["compare"]},{"Key":"structural compare","Fragments":["(`==`)"]},{"Key":"compare (`==`)","Fragments":["and"]},{"Key":"(`==`) and","Fragments":["for"]},{"Key":"force people","Fragments":["to"]},{"Key":"particular dict","Fragments":["implementation."]},{"Key":"function where","Fragments":["the"]},{"Key":"use do","Fragments":["you"]},{"Key":"your `map`","Fragments":["and"]},{"Key":"`filter` functions","Fragments":["are"]},{"Key":"with shortcuts","Fragments":["for"]},{"Key":"shortcuts for","Fragments":["fn"]},{"Key":"Definitely not","Fragments":[":)"]},{"Key":"not :)","Fragments":["I'll"]},{"Key":":) I'll","Fragments":["go"]},{"Key":"some tail","Fragments":["recursion."]},{"Key":"better. Most","Fragments":["functions"]},{"Key":"Most functions","Fragments":["are"]},{"Key":"now tail","Fragments":["recursive..."]},{"Key":"For chunking","Fragments":["you"]},{"Key":"chunking you","Fragments":["might"]},{"Key":"at `Dict.update`","Fragments":["and"]},{"Key":"`Dict.update` and","Fragments":["`Enum.reduce`."]},{"Key":"and `Enum.reduce`.","Fragments":["Those"]},{"Key":"`Enum.reduce`. Those","Fragments":["functions"]},{"Key":"Those functions","Fragments":["can"]},{"Key":"code quite","Fragments":["a"]},{"Key":"Mm, probably","Fragments":["best"]},{"Key":"be consistent","Fragments":["isn't"]},{"Key":"consistent isn't","Fragments":["it?"]},{"Key":"isn't it?","Fragments":["I"]},{"Key":"it? I","Fragments":["usually"]},{"Key":"usually think","Fragments":["it"]},{"Key":"better without","Fragments":["parentheses,"]},{"Key":"without parentheses,","Fragments":["but"]},{"Key":"parentheses, but","Fragments":["then"]},{"Key":"into places","Fragments":["where"]},{"Key":"places where","Fragments":["it","I"]},{"Key":"work without","Fragments":["them","actually"]},{"Key":"them (e.g.","Fragments":["`Enum.map"]},{"Key":"(e.g. `Enum.map","Fragments":["\u0026encode_char/1`"]},{"Key":"`Enum.map \u0026encode_char/1`","Fragments":["breaks"]},{"Key":"\u0026encode_char/1` breaks","Fragments":["for"]},{"Key":"breaks for","Fragments":["me)."]},{"Key":"for me).","Fragments":["Putting"]},{"Key":"me). Putting","Fragments":["parentheses"]},{"Key":"Putting parentheses","Fragments":["in"]},{"Key":"in everywhere","Fragments":["is"]},{"Key":"everywhere is","Fragments":["probably"]},{"Key":"answer, I'm","Fragments":["thinking."]},{"Key":"The previous","Fragments":["nit"]},{"Key":"previous nit","Fragments":["is"]},{"Key":"some tricks","Fragments":["for"]},{"Key":"matching unicode","Fragments":["characters"]},{"Key":"characters (like","Fragments":["the"]},{"Key":"(like the","Fragments":["russian)"]},{"Key":"the russian)","Fragments":["using"]},{"Key":"russian) using","Fragments":["regex."]},{"Key":"using regex.","Fragments":["Look"]},{"Key":"regex. Look","Fragments":["into"]},{"Key":"into posix","Fragments":["bracket"]},{"Key":"posix bracket","Fragments":["expressions."]},{"Key":" Think","Fragments":["about"]},{"Key":"how pattern","Fragments":["matching"]},{"Key":"functions works.","Fragments":["That"]},{"Key":"works. That","Fragments":["can"]},{"Key":"That can","Fragments":["help","save"]},{"Key":"an elegant","Fragments":["way"]},{"Key":"elegant way","Fragments":["to"]},{"Key":"most general","Fragments":["way"]},{"Key":"general way","Fragments":["you"]},{"Key":"of to","Fragments":["make"]},{"Key":"make each","Fragments":["match?"]},{"Key":"each match?","Fragments":["What"]},{"Key":"match? What","Fragments":["happens"]},{"Key":"they add","Fragments":["a"]},{"Key":"new test?","Fragments":["If"]},{"Key":"test? If","Fragments":["your"]},{"Key":"is flexible","Fragments":["enough"]},{"Key":"flexible enough","Fragments":["to"]},{"Key":"without change","Fragments":["then"]},{"Key":"change then","Fragments":["that"]},{"Key":"then that","Fragments":["is"]},{"Key":"Finally, you","Fragments":["started"]},{"Key":"you started","Fragments":["out"]},{"Key":"out red,","Fragments":["now"]},{"Key":"red, now","Fragments":["you're"]},{"Key":"now you're","Fragments":["green."]},{"Key":"you're green.","Fragments":["Now"]},{"Key":"green. Now","Fragments":["you"]},{"Key":"to refactor!","Fragments":["Enjoy"]},{"Key":"refactor! Enjoy","Fragments":["it"]},{"Key":"Enjoy it","Fragments":[":D"]},{"Key":" `f","Fragments":["x"]},{"Key":"`f x","Fragments":["|\u003e"]},{"Key":"x |\u003e","Fragments":["g`"]},{"Key":"|\u003e g`","Fragments":["is"]},{"Key":"g` is","Fragments":["a"]},{"Key":"known precedence","Fragments":["problem."]},{"Key":"precedence problem.","Fragments":["It"]},{"Key":"problem. It","Fragments":["parses"]},{"Key":"It parses","Fragments":["as"]},{"Key":"`f (x","Fragments":["|\u003e"]},{"Key":"(x |\u003e","Fragments":["g)`"]},{"Key":"|\u003e g)`","Fragments":["instead"]},{"Key":"g)` instead","Fragments":["of"]},{"Key":"of `f(x)","Fragments":["|\u003e"]},{"Key":"`f(x) |\u003e","Fragments":["g`."]},{"Key":"|\u003e g`.","Fragments":["It's"]},{"Key":"g`. It's","Fragments":["indeed"]},{"Key":"It's indeed","Fragments":["best"]},{"Key":"indeed best","Fragments":["to"]},{"Key":"to consistently","Fragments":["use"]},{"Key":"consistently use","Fragments":["parentheses."]},{"Key":"Personally I","Fragments":["always","think"]},{"Key":"parentheses except","Fragments":["sometimes"]},{"Key":"except sometimes","Fragments":["for"]},{"Key":"sometimes for","Fragments":["things"]},{"Key":" Enum.each","Fragments":["l,"]},{"Key":"Enum.each l,","Fragments":["fn"]},{"Key":"l, fn","Fragments":["x"]},{"Key":"fn x","Fragments":["-\u003e"]},{"Key":"cond as","Fragments":["simple"]},{"Key":"could with","Fragments":["the"]},{"Key":"goal of","Fragments":["one"]},{"Key":"clause per","Fragments":["outcome."]},{"Key":"like pattern","Fragments":["matching"]},{"Key":"with first","Fragments":["match","list"]},{"Key":"first match","Fragments":["wins"]},{"Key":"match wins","Fragments":["logic."]},{"Key":"any non-regex","Fragments":["tools"]},{"Key":"non-regex tools","Fragments":["that"]},{"Key":"tools that","Fragments":["would"]},{"Key":"help. All","Fragments":["regex"]},{"Key":"All regex","Fragments":["all"]},{"Key":"regex all","Fragments":["the"]},{"Key":"time gets","Fragments":["dull."]},{"Key":"like pipelines,","Fragments":["so"]},{"Key":"pipelines, so","Fragments":["that's"]},{"Key":"recursion patter,","Fragments":["so"]},{"Key":"patter, so","Fragments":["that's"]},{"Key":"like little,","Fragments":["private"]},{"Key":"little, private","Fragments":["functions"]},{"Key":"like increment","Fragments":["to"]},{"Key":"increment to","Fragments":["make"]},{"Key":"I strongly","Fragments":["dislike"]},{"Key":"strongly dislike","Fragments":["the"]},{"Key":"dislike the","Fragments":["reassignment"]},{"Key":"the reassignment","Fragments":["garbage"]},{"Key":"reassignment garbage","Fragments":["in"]},{"Key":"garbage in","Fragments":["the"]},{"Key":"the sanitize/1","Fragments":["function."]},{"Key":"sanitize/1 function.","Fragments":["I"]},{"Key":"to Regex#replace/4","Fragments":["is"]},{"Key":"Regex#replace/4 is","Fragments":["the"]},{"Key":"string. I'd","Fragments":["appreciate"]},{"Key":"appreciate thoughts","Fragments":["on"]},{"Key":"# Iteration","Fragments":["2"]},{"Key":" Ok.","Fragments":["That's"]},{"Key":"Ok. That's","Fragments":["better."]},{"Key":"That's better.","Fragments":["At"]},{"Key":"better. At","Fragments":["least"]},{"Key":"At least","Fragments":["now","that's","the","I"]},{"Key":"least now","Fragments":["the"]},{"Key":"regex hell","Fragments":["is"]},{"Key":"hell is","Fragments":["documented"]},{"Key":"is documented","Fragments":["inside"]},{"Key":"documented inside","Fragments":["little"]},{"Key":"inside little","Fragments":["private"]},{"Key":"little private","Fragments":["functions"]},{"Key":"functions which","Fragments":["also","have"]},{"Key":"also permit","Fragments":["pipe-lining."]},{"Key":"hear more","Fragments":["ideas"]},{"Key":"more ideas","Fragments":["for"]},{"Key":"for improving","Fragments":["this","my"]},{"Key":"improving this","Fragments":["code."]},{"Key":" Amazing","Fragments":["to"]},{"Key":"Amazing to","Fragments":["get"]},{"Key":"A big","Fragments":["problem"]},{"Key":"is append","Fragments":["behaves"]},{"Key":"append behaves","Fragments":["oddly"]},{"Key":"behaves oddly","Fragments":["performance"]},{"Key":"oddly performance","Fragments":["wise,"]},{"Key":"performance wise,","Fragments":["since"]},{"Key":"wise, since","Fragments":["it's"]},{"Key":"it's actually","Fragments":["pre-pending","helping"]},{"Key":"actually pre-pending","Fragments":["the"]},{"Key":"pre-pending the","Fragments":["1st"]},{"Key":"1st list","Fragments":["to"]},{"Key":"2nd list.","Fragments":["Wasn't"]},{"Key":"list. Wasn't","Fragments":["sure"]},{"Key":"Wasn't sure","Fragments":["about"]},{"Key":"*think* the","Fragments":["code"]},{"Key":"is relatively","Fragments":["clear"]},{"Key":"relatively clear","Fragments":["and"]},{"Key":"explicit, not","Fragments":["sure"]},{"Key":"about concise","Fragments":["at"]},{"Key":"concise at","Fragments":["all."]},{"Key":"The whole","Fragments":["trick"]},{"Key":"whole trick","Fragments":["to"]},{"Key":"trick to","Fragments":["implementing","anagram"]},{"Key":"to implementing","Fragments":["`concat`"]},{"Key":"implementing `concat`","Fragments":["somewhat","without"]},{"Key":"`concat` somewhat","Fragments":["efficiently"]},{"Key":"somewhat efficiently","Fragments":["is"]},{"Key":"efficiently is","Fragments":["to"]},{"Key":"minimize the","Fragments":["length"]},{"Key":"to `append`","Fragments":["as"]},{"Key":"`append` as","Fragments":["that's"]},{"Key":"as that's","Fragments":["what"]},{"Key":"time `append`","Fragments":["needs."]},{"Key":"typical regex","Fragments":["route."]},{"Key":"regex route.","Fragments":["I"]},{"Key":"route. I","Fragments":["wanted"]},{"Key":"use cond.","Fragments":["But"]},{"Key":"cond. But","Fragments":["I"]},{"Key":"found any","Fragments":["alternative."]},{"Key":"any alternative.","Fragments":["I"]},{"Key":"I struggle","Fragments":["a"]},{"Key":"struggle a","Fragments":["bit"]},{"Key":"test until","Fragments":["I"]},{"Key":"found Erland","Fragments":["Unicode"]},{"Key":"Erland Unicode","Fragments":["documentation."]},{"Key":"Unicode documentation.","Fragments":["Not"]},{"Key":"documentation. Not","Fragments":["sure"]},{"Key":"am using","Fragments":["is"]},{"Key":"choice though","Fragments":["the"]},{"Key":"at couple","Fragments":["of"]},{"Key":"of submissions,","Fragments":["I"]},{"Key":"submissions, I","Fragments":["have"]},{"Key":"have refactored","Fragments":["my"]},{"Key":"use pipelining","Fragments":["idioms"]},{"Key":"pipelining idioms","Fragments":["wherever"]},{"Key":"idioms wherever","Fragments":["possible."]},{"Key":"wherever possible.","Fragments":["Its"]},{"Key":"Its quiet","Fragments":["similar"]},{"Key":"quiet similar","Fragments":["to"]},{"Key":"past submission.","Fragments":["Curious"]},{"Key":"submission. Curious","Fragments":["to"]},{"Key":"Curious to","Fragments":["know,"]},{"Key":"know, if","Fragments":["anyone"]},{"Key":"it `cond`","Fragments":["free."]},{"Key":" Aha!","Fragments":["I"]},{"Key":"Aha! I","Fragments":["had"]},{"Key":"couldn't remember","Fragments":["exactly"]},{"Key":"remember exactly","Fragments":["what"]},{"Key":"it was.","Fragments":["One"]},{"Key":"was. One","Fragments":["runthrough"]},{"Key":"One runthrough","Fragments":["of"]},{"Key":"runthrough of","Fragments":["regexes"]},{"Key":"of regexes","Fragments":["in","for"]},{"Key":"regexes in","Fragments":["Elixir","my"]},{"Key":"Elixir had","Fragments":["only"]},{"Key":"had only","Fragments":["mentioned"]},{"Key":"only mentioned","Fragments":["the"]},{"Key":"mentioned the","Fragments":["`[[:name:]]`"]},{"Key":"the `[[:name:]]`","Fragments":["character"]},{"Key":"`[[:name:]]` character","Fragments":["classes."]},{"Key":"character classes.","Fragments":["Of"]},{"Key":"classes. Of","Fragments":["course"]},{"Key":"course now","Fragments":["that"]},{"Key":"at [Erlang's","Fragments":["`re`"]},{"Key":"[Erlang's `re`","Fragments":["docs](http://www.erlang.org/doc/man/re.html)"]},{"Key":"`re` docs](http://www.erlang.org/doc/man/re.html)","Fragments":["there"]},{"Key":"docs](http://www.erlang.org/doc/man/re.html) there","Fragments":["it"]},{"Key":"there it","Fragments":["is."]},{"Key":"figured as","Fragments":["much."]},{"Key":"it though,","Fragments":["except","it's"]},{"Key":"though, except","Fragments":["for"]},{"Key":"repetition with","Fragments":["the"]},{"Key":"class name","Fragments":["it"]},{"Key":"name it","Fragments":["sorta"]},{"Key":"it sorta","Fragments":["reads"]},{"Key":"sorta reads","Fragments":["like"]},{"Key":"OO method","Fragments":["call."]},{"Key":"of `x","Fragments":["|\u003e"]},{"Key":"`x |\u003e","Fragments":["f`"]},{"Key":"|\u003e f`","Fragments":["it's","gets"]},{"Key":"f` it's","Fragments":["perfectly"]},{"Key":"it's perfectly","Fragments":["fine"]},{"Key":"write `f(x)`.","Fragments":["The"]},{"Key":"`f(x)`. The","Fragments":["pipeline"]},{"Key":"(`|\u003e`) syntax","Fragments":["is"]},{"Key":"you chain","Fragments":["functions,"]},{"Key":"chain functions,","Fragments":["when"]},{"Key":"functions, when","Fragments":["you"]},{"Key":"as input","Fragments":["for"]},{"Key":"for another.","Fragments":["There"]},{"Key":"another. There","Fragments":["is"]},{"Key":"nothing magical","Fragments":["about"]},{"Key":"magical about","Fragments":["it"]},{"Key":"macro (`x","Fragments":["|\u003e"]},{"Key":"(`x |\u003e","Fragments":["f`"]},{"Key":"f` gets","Fragments":["translated"]},{"Key":"gets translated","Fragments":["to"]},{"Key":"Got some","Fragments":["really"]},{"Key":"results when","Fragments":["comparing"]},{"Key":"comparing HashDicts,","Fragments":["basically"]},{"Key":"HashDicts, basically","Fragments":["sometimes"]},{"Key":"basically sometimes","Fragments":["the"]},{"Key":"sometimes the","Fragments":["dictionaries"]},{"Key":"the dictionaries","Fragments":["track"]},{"Key":"dictionaries track","Fragments":["the"]},{"Key":"track the","Fragments":["keys","accumulator."]},{"Key":"different orders","Fragments":["and"]},{"Key":"orders and","Fragments":["that"]},{"Key":"actually messes","Fragments":["up"]},{"Key":" iex(16)\u003e","Fragments":["h1"]},{"Key":"iex(16)\u003e h1","Fragments":["="]},{"Key":"h1 =","Fragments":["HashDict.new"]},{"Key":"= HashDict.new","Fragments":["[{\"apple\",","[{\"boat\",","[{\"apple\","]},{"Key":"HashDict.new [{\"apple\",","Fragments":["1},","1},"]},{"Key":"[{\"apple\", 1},","Fragments":["{\"boat\",","{\"boat\","]},{"Key":"1}, {\"boat\",","Fragments":["2},","2},","2},","2},"]},{"Key":"{\"boat\", 2},","Fragments":["{\"ballerina\",","{\"ballerina\",","{\"ballerina\",","{\"ballerina\","]},{"Key":"2}, {\"ballerina\",","Fragments":["2},","2},","2},","2},"]},{"Key":"{\"ballerina\", 2},","Fragments":["{\"artichoke\",","{\"artichoke\",","{\"artichoke\",","{\"artichoke\",","{\"artichoke\",","{\"artichoke\","]},{"Key":"2}, {\"artichoke\",","Fragments":["1}]","1}]\u003e","1}]","1}]\u003e","1}]","1}]\u003e"]},{"Key":" #HashDict\u003c[{\"apple\",","Fragments":["1},","1},"]},{"Key":"#HashDict\u003c[{\"apple\", 1},","Fragments":["{\"boat\",","{\"boat\","]},{"Key":" iex(17)\u003e","Fragments":["h2"]},{"Key":"iex(17)\u003e h2","Fragments":["="]},{"Key":"h2 =","Fragments":["HashDict.new"]},{"Key":"HashDict.new [{\"boat\",","Fragments":["2},"]},{"Key":"[{\"boat\", 2},","Fragments":["{\"apple\","]},{"Key":"2}, {\"apple\",","Fragments":["1},","1},"]},{"Key":"{\"apple\", 1},","Fragments":["{\"ballerina\",","{\"ballerina\","]},{"Key":"1}, {\"ballerina\",","Fragments":["2},","2},"]},{"Key":" #HashDict\u003c[{\"boat\",","Fragments":["2},"]},{"Key":"#HashDict\u003c[{\"boat\", 2},","Fragments":["{\"apple\","]},{"Key":" iex(18)\u003e","Fragments":["h3"]},{"Key":"iex(18)\u003e h3","Fragments":["="]},{"Key":"h3 =","Fragments":["HashDict.new"]},{"Key":" iex(19)\u003e","Fragments":["h1"]},{"Key":"iex(19)\u003e h1","Fragments":["=="]},{"Key":"h1 ==","Fragments":["h2","h3"]},{"Key":" iex(20)\u003e","Fragments":["h1"]},{"Key":"iex(20)\u003e h1","Fragments":["=="]},{"Key":"a glance","Fragments":["it"]},{"Key":"glance it","Fragments":["would"]},{"Key":"the ==","Fragments":["operator"]},{"Key":"== operator","Fragments":["isn't"]},{"Key":"operator isn't","Fragments":["sufficient"]},{"Key":"isn't sufficient","Fragments":["to"]},{"Key":"sufficient to","Fragments":["compare"]},{"Key":"compare two","Fragments":["HashDicts."]},{"Key":"two HashDicts.","Fragments":["Currently"]},{"Key":"HashDicts. Currently","Fragments":["using"]},{"Key":"Currently using","Fragments":["0.12.5"]},{"Key":"Btw, because","Fragments":["you"]},{"Key":"using `HashDict.new`","Fragments":["I'm"]},{"Key":"`HashDict.new` I'm","Fragments":["marking"]},{"Key":"I'm marking","Fragments":["this"]},{"Key":"marking this","Fragments":["as"]},{"Key":"The perils","Fragments":["of"]},{"Key":"perils of","Fragments":["polymorphic"]},{"Key":"of polymorphic","Fragments":["compare..."]},{"Key":"known problem","Fragments":["and"]},{"Key":"been wondering","Fragments":["when"]},{"Key":"wondering when","Fragments":["it"]},{"Key":"would surface.","Fragments":["The"]},{"Key":"surface. The","Fragments":["problem"]},{"Key":"with HashDict.equal?","Fragments":["is"]},{"Key":"HashDict.equal? is","Fragments":["that"]},{"Key":"the assertion","Fragments":["fails"]},{"Key":"assertion fails","Fragments":["due"]},{"Key":"fails due","Fragments":["to"]},{"Key":"some magic","Fragments":["in"]},{"Key":"magic in","Fragments":["the"]},{"Key":"the ExUnit","Fragments":["test","documentation,"]},{"Key":"ExUnit test","Fragments":["system."]},{"Key":"pointing this","Fragments":["out,"]},{"Key":"this out,","Fragments":["I'll"]},{"Key":"out, I'll","Fragments":["need"]},{"Key":"I'll need","Fragments":["to"]},{"Key":"Having thought","Fragments":["this"]},{"Key":"this through","Fragments":["I"]},{"Key":"through I","Fragments":["don't"]},{"Key":"there's really","Fragments":["a"]},{"Key":"good solution.","Fragments":["The"]},{"Key":"is though","Fragments":["that"]},{"Key":"that maps","Fragments":["are"]},{"Key":"maps are","Fragments":["coming"]},{"Key":"coming and","Fragments":["they"]},{"Key":"don't suffer","Fragments":["from"]},{"Key":"suffer from","Fragments":["this"]},{"Key":"this issue.","Fragments":["So"]},{"Key":"issue. So","Fragments":["eventually"]},{"Key":"So eventually","Fragments":["this"]},{"Key":"eventually this","Fragments":["problem"]},{"Key":"go away","Fragments":["for"]},{"Key":"away for","Fragments":["dicts."]},{"Key":"All tests","Fragments":["pass","are"]},{"Key":"implementation using","Fragments":["the"]},{"Key":"latest test","Fragments":["suite."]},{"Key":"concat pass","Fragments":["the"]},{"Key":"tests? It","Fragments":["seems"]},{"Key":"and produce","Fragments":["the"]},{"Key":"result instead","Fragments":["of"]},{"Key":"of flattening","Fragments":["the"]},{"Key":"be failing","Fragments":["this"]},{"Key":"failing this","Fragments":["test"]},{"Key":"test \"concat","Fragments":["of"]},{"Key":"of normal","Fragments":["list"]},{"Key":"normal list","Fragments":["of"]},{"Key":"assert [1,2,3,4,5,6]","Fragments":["=="]},{"Key":"[1,2,3,4,5,6] ==","Fragments":["L.concat([[1,2],[3],[],[4,5,6]])"]},{"Key":" update:","Fragments":["I"]},{"Key":"update: I","Fragments":["misread"]},{"Key":"I misread","Fragments":["the"]},{"Key":"misread the","Fragments":["implementation,"]},{"Key":"somehow didn't","Fragments":["see"]},{"Key":"now after","Fragments":["viewing"]},{"Key":"after viewing","Fragments":["another"]},{"Key":"viewing another","Fragments":["answer"]},{"Key":"another answer","Fragments":["that"]},{"Key":"answer that","Fragments":["I"]},{"Key":"used defp","Fragments":["for"]},{"Key":"defp for","Fragments":["all"]},{"Key":"about declaring","Fragments":["a"]},{"Key":"declaring a","Fragments":["submodule"]},{"Key":"a submodule","Fragments":["for"]},{"Key":"submodule for","Fragments":["the"]},{"Key":"the questions","Fragments":["and"]},{"Key":"questions and","Fragments":["another"]},{"Key":"another for","Fragments":["responses"]},{"Key":"for responses","Fragments":["but"]},{"Key":"responses but","Fragments":["didn't."]},{"Key":" indifferent?","Fragments":["should"]},{"Key":"indifferent? should","Fragments":["be"]},{"Key":"be !Regex.match(~r/[[:alpha:]]/,","Fragments":["input)"]},{"Key":"!Regex.match(~r/[[:alpha:]]/, input)","Fragments":["but"]},{"Key":"input) but","Fragments":["I"]},{"Key":"with unicode.","Fragments":["Its"]},{"Key":"unicode. Its","Fragments":["indicated"]},{"Key":"Its indicated","Fragments":["it"]},{"Key":"indicated it","Fragments":["should"]},{"Key":"work here","Fragments":["https://groups.google.com/forum/#!topic/elixir-lang-talk/qLGX6D4ei70","yet,"]},{"Key":"some indentation","Fragments":["problems"]},{"Key":"indentation problems","Fragments":["because"]},{"Key":"problems because","Fragments":["my"]},{"Key":"editor was","Fragments":["not"]},{"Key":"not correctly","Fragments":["set"]},{"Key":"correctly set","Fragments":["to"]},{"Key":"set to","Fragments":["2","0."]},{"Key":"to 2","Fragments":["space"]},{"Key":"2 space","Fragments":["tabs"]},{"Key":"the map/reduce","Fragments":["pattern"]},{"Key":"map/reduce pattern","Fragments":["clearly"]},{"Key":"pattern clearly","Fragments":["visible"]},{"Key":"clearly visible","Fragments":["in"]},{"Key":"visible in","Fragments":["the"]},{"Key":"The \"|\u003e\"","Fragments":["operator"]},{"Key":"\"|\u003e\" operator","Fragments":["reads"]},{"Key":"reads well","Fragments":["for"]},{"Key":"use character","Fragments":["classes","classes"]},{"Key":"classes rather","Fragments":["than"]},{"Key":"enumerate them","Fragments":["all"]},{"Key":"all ...","Fragments":["look"]},{"Key":"... look","Fragments":["at"]},{"Key":"the `\\p`","Fragments":["and"]},{"Key":"`\\p` and","Fragments":["`\\P`"]},{"Key":"and `\\P`","Fragments":["commands"]},{"Key":"`\\P` commands","Fragments":["in"]},{"Key":"commands in","Fragments":["the"]},{"Key":"Erlang `re`","Fragments":["module"]},{"Key":"`re` module","Fragments":["documentation."]},{"Key":"the `/\\p{L}/`","Fragments":["before"]},{"Key":"`/\\p{L}/` before","Fragments":["..."]},{"Key":"before ...","Fragments":["that's"]},{"Key":"... that's","Fragments":["the"]},{"Key":"for as","Fragments":["I"]},{"Key":"can tell,","Fragments":["this","the"]},{"Key":"tell, this","Fragments":["shouldn't"]},{"Key":"shouldn't work","Fragments":["for"]},{"Key":"the German","Fragments":["test.","test"]},{"Key":"German test.","Fragments":["the"]},{"Key":"test. the","Fragments":["`~r/\\W+/`"]},{"Key":"the `~r/\\W+/`","Fragments":["doesn't"]},{"Key":"`~r/\\W+/` doesn't","Fragments":["deal"]},{"Key":"deal well","Fragments":["with"]},{"Key":"with multibytes","Fragments":["unicode"]},{"Key":"multibytes unicode","Fragments":["characters."]},{"Key":"Ok, learning","Fragments":["to"]},{"Key":"learning to","Fragments":["use"]},{"Key":"and `|\u003e`","Fragments":["notation"]},{"Key":" Compressed","Fragments":["the"]},{"Key":"Compressed the","Fragments":["representation,"]},{"Key":"the representation,","Fragments":["and"]},{"Key":"representation, and","Fragments":["added"]},{"Key":"and added","Fragments":["comments"]},{"Key":"iex(1)\u003e Regex.run(~r/\\w+/,","Fragments":["\"Götterfunken\")"]},{"Key":"For `question?`","Fragments":["take"]},{"Key":"`question?` take","Fragments":["a"]},{"Key":"could speed","Fragments":["up"]},{"Key":"code some","Fragments":["more?"]},{"Key":"some more?","Fragments":["For"]},{"Key":"more? For","Fragments":["example"]},{"Key":"by avoiding","Fragments":["large"]},{"Key":"avoiding large","Fragments":["amounts"]},{"Key":"large amounts","Fragments":["of"]},{"Key":"amounts of","Fragments":["work"]},{"Key":"work if","Fragments":["you"]},{"Key":"iex(1)\u003e Regex.split(~r/\\W+/,","Fragments":["\"Götterfunken\")"]},{"Key":" [\"G\",","Fragments":["\"tterfunken\"]"]},{"Key":"So \"ö\"","Fragments":["is"]},{"Key":"\"ö\" is","Fragments":["simultaneously"]},{"Key":"is simultaneously","Fragments":["a"]},{"Key":"simultaneously a","Fragments":["word"]},{"Key":"a non-word","Fragments":["character."]},{"Key":"non-word character.","Fragments":["Very"]},{"Key":"character. Very","Fragments":["odd,"]},{"Key":"Very odd,","Fragments":["I"]},{"Key":"odd, I","Fragments":["suspect"]},{"Key":"one issue","Fragments":["with"]},{"Key":"this exercise:","Fragments":["the"]},{"Key":"exercise: the","Fragments":["inline"]},{"Key":"the inline","Fragments":["test"]},{"Key":"inline test","Fragments":["for","assumes"]},{"Key":"was incompatible","Fragments":["with"]},{"Key":"incompatible with","Fragments":["the"]},{"Key":"test file.","Fragments":["The"]},{"Key":"file. The","Fragments":["inline"]},{"Key":"The inline","Fragments":["test"]},{"Key":"test assumes","Fragments":["11"]},{"Key":"assumes 11","Fragments":["digits"]},{"Key":"digits numbers","Fragments":["are"]},{"Key":"numbers are","Fragments":["returned"]},{"Key":"are returned","Fragments":["as"]},{"Key":"returned as","Fragments":["11"]},{"Key":"as 11","Fragments":["digits"]},{"Key":"digits numbers,","Fragments":["as"]},{"Key":"numbers, as","Fragments":["the"]},{"Key":"the external","Fragments":["one"]},{"Key":"external one","Fragments":["expect"]},{"Key":"one expect","Fragments":["only"]},{"Key":"expect only","Fragments":["the"]},{"Key":"10 last","Fragments":["digits."]},{"Key":"consistent. For","Fragments":["example,"]},{"Key":"I return","Fragments":["a"]},{"Key":"a `[{grade,","Fragments":["[String.t]}]`"]},{"Key":"`[{grade, [String.t]}]`","Fragments":["for"]},{"Key":"[String.t]}]` for","Fragments":["the"]},{"Key":"`sort` function,","Fragments":["otherwise"]},{"Key":"function, otherwise","Fragments":["the"]},{"Key":"sorting on","Fragments":["the"]},{"Key":"the grade","Fragments":["is"]},{"Key":"grade is","Fragments":["simply"]},{"Key":"the `grade`","Fragments":["function"]},{"Key":"`grade` function","Fragments":["is"]},{"Key":"a sorted","Fragments":["list","List"]},{"Key":"sorted list","Fragments":["of","of"]},{"Key":"of students,","Fragments":["I"]},{"Key":"students, I","Fragments":["removed"]},{"Key":"the `Enum.sort`","Fragments":["in"]},{"Key":"understand why,","Fragments":["but"]},{"Key":"test fails","Fragments":["if"]},{"Key":"the `==`","Fragments":["operator,"]},{"Key":"`==` operator,","Fragments":["but"]},{"Key":"operator, but","Fragments":["succeed"]},{"Key":"but succeed","Fragments":["if"]},{"Key":"use `HashDict.equal?`","Fragments":["..."]},{"Key":"think defining","Fragments":["functions"]},{"Key":"defining functions","Fragments":["for"]},{"Key":"your constants","Fragments":["is"]},{"Key":"constants is","Fragments":["overkill!"]},{"Key":"is overkill!","Fragments":["You","Why"]},{"Key":"overkill! You","Fragments":["should"]},{"Key":"be using","Fragments":["module","`reduce`","the","the"]},{"Key":"for that.","Fragments":["And"]},{"Key":"that. And","Fragments":["it"]},{"Key":"conditions having","Fragments":["the"]},{"Key":"same output,","Fragments":["and"]},{"Key":"output, and","Fragments":["it's"]},{"Key":"a mistake:","Fragments":["it"]},{"Key":"mistake: it","Fragments":["is"]},{"Key":"is specified","Fragments":["that"]},{"Key":"specified that","Fragments":["a"]},{"Key":"question in","Fragments":["all"]},{"Key":"case should","Fragments":["trigger"]},{"Key":"should trigger","Fragments":["the"]},{"Key":"trigger the","Fragments":["`angered`","`agreed`"]},{"Key":"the `angered`","Fragments":["answer."]},{"Key":"`angered` answer.","Fragments":["In"]},{"Key":"answer. In","Fragments":["your"]},{"Key":"your implementation,","Fragments":["it"]},{"Key":"implementation, it","Fragments":["will"]},{"Key":"will trigger","Fragments":["the"]},{"Key":"the `agreed`","Fragments":["answer."]},{"Key":"In count/1","Fragments":["I"]},{"Key":"count/1 I","Fragments":["wanted"]},{"Key":"seems Elixir","Fragments":["has"]},{"Key":"convention to","Fragments":["make"]},{"Key":"the receiver","Fragments":["the"]},{"Key":"receiver the","Fragments":["first"]},{"Key":"function, so","Fragments":["I","you"]},{"Key":"wrote count/2","Fragments":["as"]},{"Key":"count/2 as","Fragments":["having"]},{"Key":"as having","Fragments":["the"]},{"Key":"first argument,","Fragments":["so"]},{"Key":"argument, so","Fragments":["couldn't"]},{"Key":"so couldn't","Fragments":["use"]},{"Key":"same choice","Fragments":["with"]},{"Key":"choice with","Fragments":["count_single_word/2,"]},{"Key":"with count_single_word/2,","Fragments":["which"]},{"Key":"count_single_word/2, which","Fragments":["prevented"]},{"Key":"which prevented","Fragments":["me"]},{"Key":"prevented me","Fragments":["from"]},{"Key":" Working","Fragments":["on"]},{"Key":"Working on","Fragments":["not"]},{"Key":"not relying","Fragments":["on"]},{"Key":"on `:lists.append/2`...","Fragments":["I"]},{"Key":"`:lists.append/2`... I","Fragments":["thought"]},{"Key":"replace them","Fragments":["with"]},{"Key":"with `[","Fragments":["a"]},{"Key":"]` or","Fragments":["something."]},{"Key":"good, except","Fragments":["the"]},{"Key":"used will","Fragments":["cause"]},{"Key":"the co-operative","Fragments":["and"]},{"Key":"co-operative and","Fragments":["german"]},{"Key":"and german","Fragments":["tests"]},{"Key":"german tests","Fragments":["to"]},{"Key":"to fail.","Fragments":["You"]},{"Key":"fail. You","Fragments":["can"]},{"Key":"can modify","Fragments":["the"]},{"Key":"modify the","Fragments":["regex","tests"]},{"Key":"agree having","Fragments":["functions"]},{"Key":"having functions","Fragments":["to"]},{"Key":"return those","Fragments":["strings"]},{"Key":"those strings","Fragments":["may"]},{"Key":"strings may","Fragments":["be"]},{"Key":"be overkill.","Fragments":["I"]},{"Key":"so because,","Fragments":["in"]},{"Key":"because, in","Fragments":["general,"]},{"Key":"general, I","Fragments":["tend"]},{"Key":"avoid constants","Fragments":["for"]},{"Key":"for strings,","Fragments":["because"]},{"Key":"strings, because","Fragments":["usually"]},{"Key":"because usually","Fragments":["they"]},{"Key":"usually they","Fragments":["are"]},{"Key":"are dynamic","Fragments":["depending"]},{"Key":"dynamic depending","Fragments":["on"]},{"Key":"application (for","Fragments":["i18n"]},{"Key":"(for i18n","Fragments":["purposes)."]},{"Key":"not see","Fragments":["where"]},{"Key":"where in","Fragments":["the"]},{"Key":"the specification","Fragments":["it"]},{"Key":"specification it","Fragments":["says"]},{"Key":"it says","Fragments":["all"]},{"Key":"says all","Fragments":["upper"]},{"Key":"case followed","Fragments":["by"]},{"Key":"mark should","Fragments":["be"]},{"Key":"be \"angered\".","Fragments":["The"]},{"Key":"\"angered\". The","Fragments":["test"]},{"Key":"that case.","Fragments":["Where"]},{"Key":"case. Where","Fragments":["can"]},{"Key":"Where can","Fragments":["I"]},{"Key":" mmhhh","Fragments":["..."]},{"Key":"mmhhh ...","Fragments":["it"]},{"Key":"... it","Fragments":["so"]},{"Key":"so happens","Fragments":["that"]},{"Key":"happens that","Fragments":["I've"]},{"Key":"languages, and","Fragments":["it","doesn't","elixir"]},{"Key":"tests most","Fragments":["of"]},{"Key":"time. But","Fragments":["this"]},{"Key":"general problem","Fragments":["of"]},{"Key":"exercises here:","Fragments":["it's"]},{"Key":"here: it's","Fragments":["almost"]},{"Key":"it's almost","Fragments":["always"]},{"Key":"almost always","Fragments":["under-pecified"]},{"Key":"always under-pecified","Fragments":["and"]},{"Key":"under-pecified and","Fragments":["you"]},{"Key":"know more","Fragments":["about"]},{"Key":"what needs","Fragments":["to"]},{"Key":"Ah, of","Fragments":["course."]},{"Key":"course. Will","Fragments":["have"]},{"Key":"Will have","Fragments":["to"]},{"Key":"I start","Fragments":["writing"]},{"Key":"start writing","Fragments":["`when"]},{"Key":"writing `when","Fragments":["..."]},{"Key":"`when ...","Fragments":["==`"]},{"Key":"Indeed. Pattern","Fragments":["matching"]},{"Key":"works here","Fragments":["as"]},{"Key":"well: `def","Fragments":["is_empty?(\"\"),"]},{"Key":"`def is_empty?(\"\"),","Fragments":["do:"]},{"Key":"is_empty?(\"\"), do:","Fragments":["true`.","true"]},{"Key":"Ok all","Fragments":["list"]},{"Key":"all list","Fragments":["things"]},{"Key":"list things","Fragments":["should"]},{"Key":"things should","Fragments":["be"]},{"Key":"be based","Fragments":["on","on"]},{"Key":"on `[","Fragments":["|"]},{"Key":"`[ |","Fragments":["]`"]},{"Key":"| ]`","Fragments":["now."]},{"Key":" Needing","Fragments":["those"]},{"Key":"Needing those","Fragments":["accumulator"]},{"Key":"those accumulator","Fragments":["versions"]},{"Key":"accumulator versions","Fragments":["to"]},{"Key":"versions to","Fragments":["power"]},{"Key":"power `reverse/1`","Fragments":["and"]},{"Key":"`reverse/1` and","Fragments":["`append/2`"]},{"Key":"and `append/2`","Fragments":["is"]},{"Key":"`append/2` is","Fragments":["a"]},{"Key":"using `case","Fragments":["l`"]},{"Key":"`case l`","Fragments":["and"]},{"Key":"l` and","Fragments":["having"]},{"Key":"having `[]`","Fragments":["as"]},{"Key":"`[]` as","Fragments":["one"]},{"Key":"values to","Fragments":["match,"]},{"Key":"match, you","Fragments":["could","probably"]},{"Key":"signature itself,","Fragments":["like"]},{"Key":"itself, like","Fragments":["(for"]},{"Key":"like (for","Fragments":["`count`,"]},{"Key":"(for `count`,","Fragments":["for"]},{"Key":"`count`, for","Fragments":["example):"]},{"Key":"for example):","Fragments":["`defp"]},{"Key":"example): `defp","Fragments":["count([],"]},{"Key":"count([], result),","Fragments":["do:"]},{"Key":"result), do:","Fragments":["result`"]},{"Key":"do: result`","Fragments":["and"]},{"Key":"result` and","Fragments":["have"]},{"Key":"separate `defp","Fragments":["count([_h,t],"]},{"Key":"`defp count([_h,t],","Fragments":["result)"]},{"Key":"count([_h,t], result)","Fragments":["...`"]},{"Key":"result) ...`","Fragments":["for"]},{"Key":"...` for","Fragments":["the"]},{"Key":"the non-empty","Fragments":["case."]},{"Key":"Nice! Just","Fragments":["a"]},{"Key":"Elixir's default","Fragments":["parameters"]},{"Key":"default parameters","Fragments":["make","from"]},{"Key":"parameters make","Fragments":["the"]},{"Key":"for creating","Fragments":["a"]},{"Key":"function just","Fragments":["to"]},{"Key":"pass another","Fragments":["parameter"]},{"Key":"another parameter","Fragments":["through"]},{"Key":"parameter through","Fragments":["pretty"]},{"Key":"through pretty","Fragments":["small!"]},{"Key":"pretty small!","Fragments":["I.e."]},{"Key":"small! I.e.","Fragments":["reverse(list,"]},{"Key":"I.e. reverse(list,","Fragments":["tsil"]},{"Key":"reverse(list, tsil","Fragments":["\\\\"]},{"Key":"tsil \\\\","Fragments":["[])"]},{"Key":"\\\\ [])","Fragments":[":-)"]},{"Key":"of `count/1`","Fragments":["which","into"]},{"Key":"`count/1` which","Fragments":["doesn't"]},{"Key":"to delegate","Fragments":["to"]},{"Key":"delegate to","Fragments":["a"]},{"Key":" Enumerating","Fragments":["\"forbidden"]},{"Key":"Enumerating \"forbidden","Fragments":["signs\""]},{"Key":"\"forbidden signs\"","Fragments":["are"]},{"Key":"signs\" are","Fragments":["really"]},{"Key":"to go.","Fragments":["You"]},{"Key":"go. You","Fragments":["should"]},{"Key":"use regexp","Fragments":["class"]},{"Key":"regexp class","Fragments":["of"]},{"Key":" `String.length`","Fragments":["is"]},{"Key":"`String.length` is","Fragments":["not"]},{"Key":"will go","Fragments":["through"]},{"Key":"whole string.","Fragments":["It"]},{"Key":"equality with","Fragments":["an"]},{"Key":"readme specifies","Fragments":["that"]},{"Key":"specifies that","Fragments":["if"]},{"Key":"if shouted","Fragments":["at,"]},{"Key":"shouted at,","Fragments":["the"]},{"Key":"at, the","Fragments":["answer"]},{"Key":"answer doesn't","Fragments":["depends"]},{"Key":"doesn't depends","Fragments":["on"]},{"Key":"the sentence","Fragments":["being","before","and","when","string","as","when","into","string","at","and","and","is"]},{"Key":"sentence being","Fragments":["a"]},{"Key":"question, so","Fragments":["you"]},{"Key":"should invert","Fragments":["the"]},{"Key":"and shouting","Fragments":["tests."]},{"Key":" @columbus","Fragments":["what"]},{"Key":"@columbus what","Fragments":["do"]},{"Key":"why we","Fragments":["should"]},{"Key":"return 1","Fragments":["if"]},{"Key":"1 if","Fragments":["there","none"]},{"Key":"no digits","Fragments":["..."]},{"Key":"that `\\s\\:\\_`","Fragments":["for"]},{"Key":"`\\s\\:\\_` for","Fragments":["the"]},{"Key":"the characters?","Fragments":["You"]},{"Key":"characters? You","Fragments":["should"]},{"Key":"erlang `re`:","Fragments":["module:"]},{"Key":"`re`: module:","Fragments":["http://www.erlang.org/doc/man/re.html#regexp_syntax"]},{"Key":"Also, punctuation","Fragments":["should"]},{"Key":"punctuation should","Fragments":["separate"]},{"Key":"should separate","Fragments":["words"]},{"Key":"separate words","Fragments":["(with","as"]},{"Key":"words (with","Fragments":["the"]},{"Key":"of '-'),","Fragments":["not"]},{"Key":"'-'), not","Fragments":["be"]},{"Key":"be simply","Fragments":["ignored."]},{"Key":"explicit formula","Fragments":["for"]},{"Key":"formula for","Fragments":["these"]},{"Key":"these two","Fragments":["functions?"]},{"Key":"two functions?","Fragments":["They"]},{"Key":"functions? They","Fragments":["would"]},{"Key":"They would","Fragments":["be"]},{"Key":"Using `Enum.chunk`","Fragments":["seems"]},{"Key":"`Enum.chunk` seems","Fragments":["to"]},{"Key":"be completely","Fragments":["overkill!"]},{"Key":"Really not","Fragments":["happy"]},{"Key":"my sort","Fragments":["implementation."]},{"Key":"sort implementation.","Fragments":["Ran"]},{"Key":"implementation. Ran","Fragments":["into"]},{"Key":"Ran into","Fragments":["a"]},{"Key":"few problems","Fragments":["when"]},{"Key":"problems when","Fragments":["using"]},{"Key":"using Enum.sort,","Fragments":["as"]},{"Key":"Enum.sort, as","Fragments":["it"]},{"Key":"a dict,","Fragments":["and"]},{"Key":"a dict.","Fragments":["Any"]},{"Key":"dict. Any","Fragments":["criticisms"]},{"Key":"Any criticisms","Fragments":["will"]},{"Key":"criticisms will","Fragments":["be"]},{"Key":"be appreciated!","Fragments":[":-)"]},{"Key":"out any","Fragments":["way"]},{"Key":"the reverse,","Fragments":["append","I"]},{"Key":"reverse, append","Fragments":["or"]},{"Key":"append or","Fragments":["concat"]},{"Key":"or concat","Fragments":["problems."]},{"Key":"concat problems.","Fragments":["I'm"]},{"Key":"problems. I'm","Fragments":["sure"]},{"Key":"sure my","Fragments":["count"]},{"Key":"my count","Fragments":["method"]},{"Key":"is inefficient.","Fragments":["any"]},{"Key":"inefficient. any","Fragments":["help"]},{"Key":"forgot the","Fragments":["case"]},{"Key":"the `largest_product`","Fragments":["function"]},{"Key":"And here,","Fragments":["generate"]},{"Key":"here, generate","Fragments":["the"]},{"Key":"the multiples,","Fragments":["merge"]},{"Key":"multiples, merge","Fragments":["them"]},{"Key":"merge them","Fragments":["and"]},{"Key":"them and","Fragments":["sum"]},{"Key":"sum them","Fragments":["up."]},{"Key":"lists can","Fragments":["be"]},{"Key":" Shortcut","Fragments":["the"]},{"Key":"Shortcut the","Fragments":["end"]},{"Key":"of `test_sublist`","Fragments":["when"]},{"Key":"`test_sublist` when","Fragments":["the"]},{"Key":"the \"bigger\"","Fragments":["list"]},{"Key":"\"bigger\" list","Fragments":["becomes"]},{"Key":"list becomes","Fragments":["smaller"]},{"Key":"becomes smaller","Fragments":["than"]},{"Key":"smaller than","Fragments":["the"]},{"Key":"using `reduce_right`","Fragments":["too."]},{"Key":" Wanted","Fragments":["to"]},{"Key":"Wanted to","Fragments":["separate"]},{"Key":"* In","Fragments":["the"]},{"Key":"`reverse` method,","Fragments":["using"]},{"Key":"method, using","Fragments":["`append`"]},{"Key":"using `append`","Fragments":["is"]},{"Key":"overkill! Why","Fragments":["not"]},{"Key":"the `[h|t]`","Fragments":["construction?"]},{"Key":"* Instead","Fragments":["of"]},{"Key":"of re-implementing","Fragments":["all"]},{"Key":"re-implementing all","Fragments":["the"]},{"Key":"the iterations.","Fragments":["Maybe"]},{"Key":"iterations. Maybe","Fragments":["you"]},{"Key":"express them","Fragments":["in"]},{"Key":"`reduce` (although","Fragments":["it"]},{"Key":"(although it","Fragments":["will"]},{"Key":"bit slower).","Fragments":["You"]},{"Key":"slower). You","Fragments":["might"]},{"Key":"different version","Fragments":["of"]},{"Key":"Indeed. That","Fragments":["can"]},{"Key":"can save","Fragments":["a"]},{"Key":"save a","Fragments":["lot"]},{"Key":"time in","Fragments":["some"]},{"Key":"As there","Fragments":["is"]},{"Key":"compare floats","Fragments":["and"]},{"Key":"floats and","Fragments":["integers"]},{"Key":"and integers","Fragments":["as"]},{"Key":"integers as","Fragments":["being"]},{"Key":"being different","Fragments":["and"]},{"Key":"and ordered,","Fragments":["case"]},{"Key":"ordered, case","Fragments":["is"]},{"Key":"is nice,","Fragments":["bit"]},{"Key":"nice, bit","Fragments":["lacks"]},{"Key":"bit lacks","Fragments":["documentation"]},{"Key":"lacks documentation","Fragments":["for"]},{"Key":"documentation for","Fragments":["this"]},{"Key":"operation and","Fragments":["*then*"]},{"Key":"and *then*","Fragments":["reverse"]},{"Key":"*then* reverse","Fragments":["whenever"]},{"Key":"reverse whenever","Fragments":["possible."]},{"Key":"possible. It","Fragments":["doesn't"]},{"Key":"doesn't cost","Fragments":["anything"]},{"Key":"cost anything","Fragments":["and,"]},{"Key":"anything and,","Fragments":["in"]},{"Key":"and, in","Fragments":["case"]},{"Key":"operation fails,","Fragments":["it"]},{"Key":"fails, it","Fragments":["will"]},{"Key":"For reverse","Fragments":["you"]},{"Key":"reverse you","Fragments":["could"]},{"Key":"the notation","Fragments":["`\u0026([\u00261|\u00262])`"]},{"Key":"notation `\u0026([\u00261|\u00262])`","Fragments":["for"]},{"Key":"`\u0026([\u00261|\u00262])` for","Fragments":["very"]},{"Key":"simple expressions,","Fragments":["it's","each"]},{"Key":"expressions, it's","Fragments":["shorter"]},{"Key":"it's shorter","Fragments":["and"]},{"Key":"For trivial","Fragments":["functions,"]},{"Key":"trivial functions,","Fragments":["you"]},{"Key":"functions, you","Fragments":["can"]},{"Key":"the notation:","Fragments":["`def"]},{"Key":"notation: `def","Fragments":["fct(args),"]},{"Key":"`def fct(args),","Fragments":["do:"]},{"Key":"fct(args), do:","Fragments":["result`"]},{"Key":"initial clause","Fragments":["of"]},{"Key":"nicer looking","Fragments":["this"]},{"Key":"looking this","Fragments":["way:"]},{"Key":"reverse([], acc,","Fragments":["_),"]},{"Key":"Your concatenation","Fragments":["reverse"]},{"Key":"concatenation reverse","Fragments":["lists"]},{"Key":"reverse lists","Fragments":["too"]},{"Key":"lists too","Fragments":["much."]},{"Key":"too much.","Fragments":["You"]},{"Key":"much. You","Fragments":["can"]},{"Key":"Just found","Fragments":["out"]},{"Key":"out there's","Fragments":["an"]},{"Key":"an Enum.into","Fragments":["method"]},{"Key":"Enum.into method","Fragments":["that"]},{"Key":"method that","Fragments":["I"]},{"Key":"to easily","Fragments":["create","see","reason"]},{"Key":"easily create","Fragments":["a"]},{"Key":"new dict.","Fragments":["Will"]},{"Key":"dict. Will","Fragments":["be"]},{"Key":"be posting","Fragments":["second"]},{"Key":"posting second","Fragments":["iteration"]},{"Key":"iteration soon","Fragments":[":-)"]},{"Key":"soon :-)","Fragments":["Then"]},{"Key":":-) Then","Fragments":["a"]},{"Key":"Then a","Fragments":["third"]},{"Key":"a third","Fragments":["iteration","numeric"]},{"Key":"third iteration","Fragments":["will"]},{"Key":"iteration will","Fragments":["follow"]},{"Key":"will follow","Fragments":["to"]},{"Key":"follow to","Fragments":["tackle"]},{"Key":"to tackle","Fragments":["the"]},{"Key":"tackle the","Fragments":["bonus"]},{"Key":"the bonus","Fragments":["section!"]},{"Key":"between strict","Fragments":["equality"]},{"Key":"(`===`) and","Fragments":["non-strict"]},{"Key":"and non-strict","Fragments":["equality"]},{"Key":"non-strict equality","Fragments":["(`==`)?"]},{"Key":"equality (`==`)?","Fragments":["Bottom"]},{"Key":"(`==`)? Bottom","Fragments":["line:"]},{"Key":"Bottom line:","Fragments":["`1"]},{"Key":"line: `1","Fragments":["==="]},{"Key":"`1 ===","Fragments":["1.0`"]},{"Key":"=== 1.0`","Fragments":["is"]},{"Key":"is false,","Fragments":["`1"]},{"Key":"false, `1","Fragments":["=="]},{"Key":"indeed lack","Fragments":["documentation"]},{"Key":"lack documentation","Fragments":["on"]},{"Key":"documentation on","Fragments":["a"]},{"Key":"things, especially","Fragments":["stuff"]},{"Key":"especially stuff","Fragments":["like"]},{"Key":"comes straight","Fragments":["from"]},{"Key":"straight from","Fragments":["Erlang."]},{"Key":"Would `Enum.count`","Fragments":["be"]},{"Key":"`Enum.count` be","Fragments":["useful"]},{"Key":"Doesn't this","Fragments":["sieve"]},{"Key":"this sieve","Fragments":["function"]},{"Key":"sieve function","Fragments":["cause"]},{"Key":"function cause","Fragments":["a"]},{"Key":"huge memory","Fragments":["bloat"]},{"Key":"memory bloat","Fragments":["due"]},{"Key":"bloat due","Fragments":["to"]},{"Key":"are equivalent,","Fragments":["the"]},{"Key":"equivalent, the","Fragments":["former"]},{"Key":"former is","Fragments":["just"]},{"Key":"just slightly","Fragments":["more"]},{"Key":" @marty","Fragments":["Good"]},{"Key":"@marty Good","Fragments":["point,"]},{"Key":"didn't that","Fragments":["function!"]},{"Key":" Tail-recursive","Fragments":["version"]},{"Key":"Tail-recursive version","Fragments":["of"]},{"Key":" @armani","Fragments":["..."]},{"Key":"@armani ...","Fragments":["I"]},{"Key":"... I","Fragments":["hadn't"]},{"Key":"seen streams","Fragments":["yet!"]},{"Key":"Using `Stream`","Fragments":["instead"]},{"Key":"`Stream` instead","Fragments":["of"]},{"Key":"It's true,","Fragments":["but"]},{"Key":"implement an","Fragments":["ordered"]},{"Key":"an ordered","Fragments":["set"]},{"Key":"ordered set","Fragments":["if"]},{"Key":"set if","Fragments":["both"]},{"Key":"both `1","Fragments":["\u003c"]},{"Key":"`1 \u003c","Fragments":["1.0"]},{"Key":"\u003c 1.0","Fragments":["`"]},{"Key":"1.0 `","Fragments":["and"]},{"Key":"` and","Fragments":["`1.0"]},{"Key":"and `1.0","Fragments":["\u003c"]},{"Key":"`1.0 \u003c","Fragments":["1`"]},{"Key":"\u003c 1`","Fragments":["are"]},{"Key":"1` are","Fragments":["false."]},{"Key":"Isn't `sorted`","Fragments":["easier"]},{"Key":"`sorted` easier","Fragments":["expressed"]},{"Key":"easier expressed","Fragments":["using"]},{"Key":"expressed using","Fragments":["something"]},{"Key":"something along","Fragments":["the"]},{"Key":"of `[a,","Fragments":["b,"]},{"Key":"`[a, b,","Fragments":["c]"]},{"Key":"b, c]","Fragments":["="]},{"Key":"c] =","Fragments":["Enum.sort([a,b,c])`?"]},{"Key":"Yes, but","Fragments":["this"]},{"Key":"version minimises","Fragments":["the"]},{"Key":"minimises the","Fragments":["number"]},{"Key":"of tests.","Fragments":["Although"]},{"Key":"tests. Although","Fragments":["I"]},{"Key":"Although I","Fragments":["don't","don't"]},{"Key":"how `Enum.sort`","Fragments":["is"]},{"Key":"is implemented,","Fragments":["so"]},{"Key":"implemented, so","Fragments":["it"]},{"Key":"than any","Fragments":["code"]},{"Key":"Why `Order.new(type:","Fragments":["read,"]},{"Key":"`Order.new(type: read,","Fragments":["caller:"]},{"Key":"read, caller:","Fragments":["Process.self())`"]},{"Key":"caller: Process.self())`","Fragments":["and"]},{"Key":"Process.self())` and","Fragments":["not"]},{"Key":"not `Order[type:","Fragments":[":read,"]},{"Key":"`Order[type: :read,","Fragments":["caller:"]},{"Key":":read, caller:","Fragments":["Process.self()]`?"]},{"Key":"True, `Enum.sort`","Fragments":["will"]},{"Key":"`Enum.sort` will","Fragments":["be"]},{"Key":"be slower","Fragments":["(it"]},{"Key":"slower (it","Fragments":["has"]},{"Key":"(it has","Fragments":["to"]},{"Key":"better. Though","Fragments":["`Stream.filter`"]},{"Key":"Though `Stream.filter`","Fragments":["might"]},{"Key":"`Stream.filter` might","Fragments":["be"]},{"Key":"`Enum.filter` (avoids","Fragments":["an"]},{"Key":"(avoids an","Fragments":["intermediate"]},{"Key":" Beats","Fragments":["me,"]},{"Key":"Beats me,","Fragments":["I"]},{"Key":"never really","Fragments":["saw"]},{"Key":"really saw","Fragments":["the"]},{"Key":" @jessica","Fragments":["Because"]},{"Key":"@jessica Because","Fragments":["the"]},{"Key":"of records","Fragments":["is"]},{"Key":"records is","Fragments":["confusing"]},{"Key":"is confusing","Fragments":["and"]},{"Key":"confusing and","Fragments":["say"]},{"Key":"say different","Fragments":["things"]},{"Key":"different place.","Fragments":["In"]},{"Key":"place. In","Fragments":["the"]},{"Key":"the Part","Fragments":["4"]},{"Key":"Part 4","Fragments":["of"]},{"Key":"4 of","Fragments":["\"Getting"]},{"Key":"of \"Getting","Fragments":["started\","]},{"Key":"\"Getting started\",","Fragments":["which"]},{"Key":"started\", which","Fragments":["I"]},{"Key":"had read","Fragments":["a"]},{"Key":"the time,","Fragments":["they"]},{"Key":"time, they","Fragments":["don't"]},{"Key":"don't mention","Fragments":["the"]},{"Key":"the `Order[...]`","Fragments":["syntax,"]},{"Key":"`Order[...]` syntax,","Fragments":["only"]},{"Key":"syntax, only","Fragments":["the"]},{"Key":"the `Order.new(...)`","Fragments":["one."]},{"Key":"`Order.new(...)` one.","Fragments":["Aren't"]},{"Key":"one. Aren't","Fragments":["they"]},{"Key":"Aren't they","Fragments":["equivalent"]},{"Key":"they equivalent","Fragments":["anyway?"]},{"Key":"Yeah, they're","Fragments":["a"]},{"Key":"a hidden","Fragments":["gem"]},{"Key":"hidden gem","Fragments":["in"]},{"Key":"gem in","Fragments":["the"]},{"Key":"language. Streams","Fragments":["are"]},{"Key":"Streams are","Fragments":["actually"]},{"Key":"of why","Fragments":["`Enumerable`","I'm"]},{"Key":"why `Enumerable`","Fragments":["is"]},{"Key":"`Enumerable` is","Fragments":["used"]},{"Key":"used so","Fragments":["much"]},{"Key":"they help","Fragments":["avoid"]},{"Key":"help avoid","Fragments":["unnecessary"]},{"Key":"avoid unnecessary","Fragments":["lists."]},{"Key":"Hmm, that's","Fragments":["weird."]},{"Key":"that's weird.","Fragments":["I"]},{"Key":"weird. I","Fragments":["thought"]},{"Key":"thought types","Fragments":["had"]},{"Key":"types had","Fragments":["a"]},{"Key":"total ordering","Fragments":["but"]},{"Key":"ordering but","Fragments":["apparently"]},{"Key":"apparently Erlang","Fragments":["groups"]},{"Key":"Erlang groups","Fragments":["together"]},{"Key":"groups together","Fragments":["ints"]},{"Key":"together ints","Fragments":["and"]},{"Key":"ints and","Fragments":["floats"]},{"Key":"and floats","Fragments":["under"]},{"Key":"floats under","Fragments":["numbers."]},{"Key":"is implementing","Fragments":["a"]},{"Key":"implementing a","Fragments":["custom"]},{"Key":"custom predicate","Fragments":["for"]},{"Key":"predicate for","Fragments":["`\u003c`"]},{"Key":"for `\u003c`","Fragments":["that"]},{"Key":"`\u003c` that","Fragments":["for"]},{"Key":"for equal","Fragments":["values"]},{"Key":"equal values","Fragments":["uses"]},{"Key":"values uses","Fragments":["`is_integer/is_float`"]},{"Key":"uses `is_integer/is_float`","Fragments":["to"]},{"Key":"`is_integer/is_float` to","Fragments":["check"]},{"Key":"both have","Fragments":["the"]},{"Key":"type. I","Fragments":["agree"]},{"Key":"it's ugly","Fragments":["though."]},{"Key":"new implementation,","Fragments":["based"]},{"Key":"implementation, based","Fragments":["on"]},{"Key":"sorted List","Fragments":["Zipper"]},{"Key":"List Zipper","Fragments":["and"]},{"Key":"Zipper and","Fragments":["handles"]},{"Key":"the float/int","Fragments":["problem."]},{"Key":" **Note:**","Fragments":["If"]},{"Key":"**Note:** If","Fragments":["there"]},{"Key":"is ever","Fragments":["a"]},{"Key":"ever a","Fragments":["third"]},{"Key":"third numeric","Fragments":["type,"]},{"Key":"numeric type,","Fragments":["this"]},{"Key":"type, this","Fragments":["implementation"]},{"Key":"implementation will","Fragments":["fail!"]},{"Key":"Changed the","Fragments":["record","helper"]},{"Key":"record from","Fragments":["public"]},{"Key":"from public","Fragments":["to"]},{"Key":"public to","Fragments":["private"]},{"Key":" Absolutely,","Fragments":["though"]},{"Key":"Absolutely, though","Fragments":["I"]},{"Key":"a struggle","Fragments":["to"]},{"Key":" Cleaner","Fragments":["implementation"]},{"Key":"Cleaner implementation","Fragments":["with"]},{"Key":"with better","Fragments":["separation"]},{"Key":"better separation","Fragments":["of"]},{"Key":"heavy on","Fragments":["the"]},{"Key":"numbers. Perhaps","Fragments":["you"]},{"Key":"make module","Fragments":["attributes"]},{"Key":"attributes (`@eda`)","Fragments":["out"]},{"Key":"(`@eda`) out","Fragments":["of"]},{"Key":" Feels","Fragments":["like"]},{"Key":"Feels like","Fragments":["there"]},{"Key":"is some","Fragments":["fancy"]},{"Key":"some fancy","Fragments":["macro/quote"]},{"Key":"fancy macro/quote","Fragments":["thing"]},{"Key":"macro/quote thing","Fragments":["I"]},{"Key":"functions (especially","Fragments":["the"]},{"Key":"(especially the","Fragments":["one"]},{"Key":"The commented","Fragments":["out"]},{"Key":"out solution","Fragments":["actually"]},{"Key":"solution actually","Fragments":["seems"]},{"Key":"actually seems","Fragments":["to"]},{"Key":"run a","Fragments":["bit"]},{"Key":"bit faster,","Fragments":["but"]},{"Key":"faster, but","Fragments":["the"]},{"Key":"first could","Fragments":["be"]},{"Key":"be sped","Fragments":["up"]},{"Key":"sped up","Fragments":["by"]},{"Key":"by replacing","Fragments":["Enum.slice"]},{"Key":"replacing Enum.slice","Fragments":["with"]},{"Key":"Enum.slice with","Fragments":["a"]},{"Key":"checks each","Fragments":["element"]},{"Key":"good! As","Fragments":["a"]},{"Key":"a further","Fragments":["exercise,"]},{"Key":"further exercise,","Fragments":["you"]},{"Key":"exercise, you","Fragments":["could"]},{"Key":"all function","Fragments":["in"]},{"Key":"`reduce` ...","Fragments":["which"]},{"Key":"... which","Fragments":["would"]},{"Key":"would provide","Fragments":["a"]},{"Key":"the number,","Fragments":["which"]},{"Key":"number, which","Fragments":["makes"]},{"Key":"added some","Fragments":["comments,"]},{"Key":"some comments,","Fragments":["but"]},{"Key":"comments, but","Fragments":["the"]},{"Key":"numbers really","Fragments":["don't"]},{"Key":"have good","Fragments":["names"]},{"Key":"Added more","Fragments":["comments"]},{"Key":"comments to","Fragments":["the"]},{"Key":"consider replacing","Fragments":["your"]},{"Key":"replacing your","Fragments":["case"]},{"Key":"your case","Fragments":["statements"]},{"Key":"in compare","Fragments":["with"]},{"Key":"with if/else","Fragments":["blocks"]},{"Key":"if/else blocks","Fragments":["for"]},{"Key":"blocks for","Fragments":["readability."]},{"Key":"two compare","Fragments":["implementations"]},{"Key":"compare implementations","Fragments":["to"]},{"Key":"implementations to","Fragments":["be","a"]},{"Key":"more DRY,","Fragments":["since"]},{"Key":"DRY, since","Fragments":["they"]},{"Key":"are basically","Fragments":["identical"]},{"Key":"basically identical","Fragments":["with"]},{"Key":"two small","Fragments":["differences."]},{"Key":"Nice one","Fragments":["with"]},{"Key":"one with","Fragments":["Enum.chunk(_,_,1)."]},{"Key":"I didnt","Fragments":["know"]},{"Key":"didnt know","Fragments":["that"]},{"Key":" Bacause","Fragments":["of"]},{"Key":"Bacause of","Fragments":["it"]},{"Key":"it list_in_list?","Fragments":["is"]},{"Key":"list_in_list? is","Fragments":["really"]},{"Key":"really beautiful","Fragments":["and"]},{"Key":"beautiful and","Fragments":["concise."]},{"Key":"about tl,","Fragments":["thanks"]},{"Key":"tl, thanks","Fragments":["for"]},{"Key":" makes","Fragments":["the"]},{"Key":"functions uniform","Fragments":["to"]},{"Key":"uniform to","Fragments":["start"]},{"Key":"23 we","Fragments":["have:"]},{"Key":"if ah","Fragments":["==="]},{"Key":"ah ===","Fragments":["bh"]},{"Key":"=== bh","Fragments":["and"]},{"Key":"bh and","Fragments":["match(at,bt)"]},{"Key":"and match(at,bt)","Fragments":["do"]},{"Key":"the \"matching\"","Fragments":["(including"]},{"Key":"\"matching\" (including","Fragments":["the"]},{"Key":"the first)","Fragments":["were"]},{"Key":"first) were","Fragments":["done"]},{"Key":"were done","Fragments":["inside"]},{"Key":" [_","Fragments":["|"]},{"Key":"[_ |","Fragments":["tb]"]},{"Key":"| tb]","Fragments":["="]},{"Key":"tb] =","Fragments":["b"]},{"Key":" contains(a,","Fragments":["tb)","tl(b))"]},{"Key":" why","Fragments":["not:"]},{"Key":"But one","Fragments":["thing"]},{"Key":"realized is","Fragments":["that"]},{"Key":"whole chunk","Fragments":["will"]},{"Key":"chunk will","Fragments":["be"]},{"Key":"computed even","Fragments":["after"]},{"Key":"even after","Fragments":["you've"]},{"Key":"after you've","Fragments":["found"]},{"Key":"use Stream.chunk,","Fragments":["instead"]},{"Key":"Stream.chunk, instead","Fragments":["of"]},{"Key":" Enum.chunk:","Fragments":["2.7"]},{"Key":"Enum.chunk: 2.7","Fragments":["seconds"]},{"Key":" Stream.chunk:","Fragments":["1.4"]},{"Key":"Stream.chunk: 1.4","Fragments":["seconds"]},{"Key":"Oops, bad","Fragments":["submission."]},{"Key":"bad submission.","Fragments":["Ignore"]},{"Key":"submission. Ignore","Fragments":["this."]},{"Key":"Oops, wrong","Fragments":["submission."]},{"Key":" Clean","Fragments":["up","solution,"]},{"Key":"Clean up","Fragments":["the"]},{"Key":"use Enum.filter","Fragments":["instead"]},{"Key":"Enum.filter instead","Fragments":["of"]},{"Key":"A new","Fragments":["version"]},{"Key":"functions based","Fragments":["on"]},{"Key":"on reduce().","Fragments":["This"]},{"Key":"reduce(). This","Fragments":["version"]},{"Key":"much concise,","Fragments":["but"]},{"Key":"performance may","Fragments":["not"]},{"Key":"a sort,","Fragments":["you"]},{"Key":"sort, you","Fragments":["can"]},{"Key":"function head,","Fragments":["e.g."]},{"Key":"def kind(a,","Fragments":["a,","a,"]},{"Key":"kind(a, a,","Fragments":["a)","b)"]},{"Key":"a, a)","Fragments":["do"]},{"Key":"a) do","Fragments":[".."]},{"Key":"a, b)","Fragments":["do"]},{"Key":"b) do","Fragments":[".."]},{"Key":" @thalia","Fragments":["I"]},{"Key":"@thalia I","Fragments":["don't"]},{"Key":"You would","Fragments":["add","just"]},{"Key":"would add","Fragments":["more"]},{"Key":"add more","Fragments":["tests"]},{"Key":"sorting does,","Fragments":["and"]},{"Key":"be harder","Fragments":["to"]},{"Key":"* Sorting","Fragments":["="]},{"Key":"Sorting =","Fragments":["3"]},{"Key":"= 3","Fragments":["tests"]},{"Key":"* not","Fragments":["sorting"]},{"Key":"not sorting","Fragments":["=\u003e"]},{"Key":"* negative","Fragments":["side:"]},{"Key":"negative side:","Fragments":["+2"]},{"Key":"side: +2","Fragments":["tests"]},{"Key":"* inequalities:","Fragments":["+2"]},{"Key":"inequalities: +2","Fragments":["tests,"]},{"Key":"+2 tests,","Fragments":["+2"]},{"Key":"tests, +2","Fragments":["sums"]},{"Key":"* isosceles:","Fragments":["+1"]},{"Key":"isosceles: +1","Fragments":["test"]},{"Key":"My understanding","Fragments":["is"]},{"Key":"understanding is","Fragments":["that"]},{"Key":"test codes","Fragments":["shouldn't","should","still","are"]},{"Key":"codes shouldn't","Fragments":["be"]},{"Key":"the codes","Fragments":["under","under","a"]},{"Key":"codes under","Fragments":["test","test,"]},{"Key":"under test","Fragments":["are"]},{"Key":"implemented. The","Fragments":["test"]},{"Key":"codes should","Fragments":["be"]},{"Key":"be generic","Fragments":["so"]},{"Key":"generic so","Fragments":["that"]},{"Key":"even later","Fragments":["on"]},{"Key":"on you","Fragments":["change"]},{"Key":"under test,","Fragments":["those"]},{"Key":"test, those","Fragments":["test"]},{"Key":"those test","Fragments":["codes"]},{"Key":"codes still","Fragments":["apply."]},{"Key":"still apply.","Fragments":["So"]},{"Key":"apply. So","Fragments":["number"]},{"Key":"So number","Fragments":["of"]},{"Key":"written should","Fragments":["be"]},{"Key":"Ignore this","Fragments":["submission"]},{"Key":"submission –","Fragments":["it"]},{"Key":"– it","Fragments":["contains","pipes"]},{"Key":"appreciate `gofmt`.","Fragments":["Although"]},{"Key":"`gofmt`. Although","Fragments":["I"]},{"Key":"its decisions,","Fragments":["it"]},{"Key":"decisions, it","Fragments":["sure"]},{"Key":"sure is","Fragments":["handy"]},{"Key":"is handy","Fragments":["to"]},{"Key":"handy to","Fragments":["have"]},{"Key":"code formatting","Fragments":["tool"]},{"Key":"formatting tool","Fragments":["as"]},{"Key":"tool as","Fragments":["part"]},{"Key":"the *standard*","Fragments":["toolkit."]},{"Key":"For readability,","Fragments":["I","you"]},{"Key":"readability, I","Fragments":["extracted"]},{"Key":"me recall","Fragments":["some"]},{"Key":"recall some","Fragments":["basic"]},{"Key":"basic syntactic","Fragments":["items"]},{"Key":"syntactic items","Fragments":["I"]},{"Key":"items I","Fragments":["had"]},{"Key":"had already","Fragments":["learned"]},{"Key":"already learned","Fragments":["about"]},{"Key":"Elixir (I'm","Fragments":["not"]},{"Key":"not *totally*","Fragments":["unfamiliar"]},{"Key":"*totally* unfamiliar","Fragments":["with"]},{"Key":"I'm excited","Fragments":["to"]},{"Key":"excited to","Fragments":["get"]},{"Key":"into future","Fragments":["lessons."]},{"Key":"future lessons.","Fragments":["This"]},{"Key":"lessons. This","Fragments":["one"]},{"Key":"one came","Fragments":["down"]},{"Key":"came down","Fragments":["to"]},{"Key":"learning about","Fragments":["a"]},{"Key":"of `String`","Fragments":["module"]},{"Key":"module functions,","Fragments":["as"]},{"Key":"as tinkering","Fragments":["around"]},{"Key":"tinkering around","Fragments":["with"]},{"Key":"with regular","Fragments":["expressions"]},{"Key":"expressions (which","Fragments":["I've"]},{"Key":"(which I've","Fragments":["never"]},{"Key":"never been","Fragments":["good"]},{"Key":"did learn","Fragments":["about"]},{"Key":"about was","Fragments":["the"]},{"Key":"base case","Fragments":["condition"]},{"Key":"case condition","Fragments":["of"]},{"Key":"of `Kernel.cond/1`,","Fragments":["and"]},{"Key":"`Kernel.cond/1`, and","Fragments":["helpful"]},{"Key":"and helpful","Fragments":["compiler"]},{"Key":"helpful compiler","Fragments":["messages."]},{"Key":"compiler messages.","Fragments":["At"]},{"Key":"messages. At","Fragments":["first,"]},{"Key":"At first,","Fragments":["I"]},{"Key":"first, I","Fragments":["wrote"]},{"Key":"my default","Fragments":["condition"]},{"Key":"condition with","Fragments":["the","a"]},{"Key":"`_` like","Fragments":["so:"]},{"Key":" is_empty?(input)","Fragments":["-\u003e"]},{"Key":"is_empty?(input) -\u003e","Fragments":["\"Fine."]},{"Key":" _","Fragments":["-\u003e"]},{"Key":" Upon","Fragments":["compilation,"]},{"Key":"Upon compilation,","Fragments":["I"]},{"Key":"compilation, I","Fragments":["was"]},{"Key":"was greeted","Fragments":["with"]},{"Key":"greeted with","Fragments":["this"]},{"Key":"this helpful","Fragments":["message:"]},{"Key":"(ArgumentError) unbound","Fragments":["variable"]},{"Key":"unbound variable","Fragments":["_"]},{"Key":"variable _","Fragments":["inside"]},{"Key":"_ inside","Fragments":["cond."]},{"Key":"inside cond.","Fragments":["If"]},{"Key":"cond. If","Fragments":["you"]},{"Key":"want the","Fragments":["last"]},{"Key":"probably meant","Fragments":["to"]},{"Key":"use true","Fragments":["-\u003e"]},{"Key":" /private/tmp/elixir-cRJq/elixir-0.11.2/lib/elixir/lib/kernel.ex:2636:","Fragments":["Kernel.\"MACRO-cond\"/2"]},{"Key":" bob.exs:3:","Fragments":["Kernel.cond/1"]},{"Key":"I tweaked","Fragments":["the"]},{"Key":"tweaked the","Fragments":["regular"]},{"Key":"get all","Fragments":["of"]},{"Key":"is incomplete;","Fragments":["it"]},{"Key":"incomplete; it","Fragments":["still"]},{"Key":"still contains","Fragments":["a"]},{"Key":"literal condition.","Fragments":["I"]},{"Key":"condition. I","Fragments":["wanted"]},{"Key":"something quickly","Fragments":["posted,"]},{"Key":"quickly posted,","Fragments":["though,"]},{"Key":"posted, though,","Fragments":["for"]},{"Key":"though, for","Fragments":["any"]},{"Key":"any immediate","Fragments":["Elixir"]},{"Key":"immediate Elixir","Fragments":["idioms"]},{"Key":"Elixir idioms","Fragments":["nitpick."]},{"Key":"idioms nitpick.","Fragments":["Now"]},{"Key":"nitpick. Now","Fragments":["I'll"]},{"Key":"Now I'll","Fragments":["go"]},{"Key":"and improve","Fragments":["the"]},{"Key":"This removes","Fragments":["the"]},{"Key":"the [literal","Fragments":["`\"1,"]},{"Key":"[literal `\"1,","Fragments":["2,"]},{"Key":"2, 3\"`","Fragments":["check](http://exercism.io/submissions/7fadf6f1774fb4df69b2580d)"]},{"Key":"3\"` check](http://exercism.io/submissions/7fadf6f1774fb4df69b2580d)","Fragments":["from"]},{"Key":"check](http://exercism.io/submissions/7fadf6f1774fb4df69b2580d) from","Fragments":["`Teenager`"]},{"Key":"from `Teenager`","Fragments":["conditions."]},{"Key":"to commit","Fragments":["my"]},{"Key":"commit my","Fragments":["tinkering"]},{"Key":"my tinkering","Fragments":["with"]},{"Key":"tinkering with","Fragments":["the"]},{"Key":"Elixir pipe","Fragments":["operator","operator"]},{"Key":"then concentrate","Fragments":["on"]},{"Key":"concentrate on","Fragments":["fixing"]},{"Key":"on fixing","Fragments":["my"]},{"Key":"fixing my","Fragments":["regex."]},{"Key":"This extracts","Fragments":["the"]},{"Key":"core function","Fragments":["body"]},{"Key":"`count/1` into","Fragments":["a"]},{"Key":"functions, allowing","Fragments":["us"]},{"Key":"allowing us","Fragments":["to"]},{"Key":"us to","Fragments":["easily","learn."]},{"Key":"easily see","Fragments":["the"]},{"Key":"the transformation","Fragments":["with","function","function","function.","function","function"]},{"Key":"transformation with","Fragments":["Elixir's"]},{"Key":"Elixir's pipe","Fragments":["operator"]},{"Key":"My two","Fragments":["takeaways:"]},{"Key":"Using [`Dict.update/4`](http://elixir-lang.org/docs/master/Dict.html#update/4)","Fragments":["with"]},{"Key":"[`Dict.update/4`](http://elixir-lang.org/docs/master/Dict.html#update/4) with","Fragments":["the"]},{"Key":"the [function","Fragments":["capture"]},{"Key":"[function capture","Fragments":["operator](http://elixir-lang.org/getting_started/6.html#toc_5)"]},{"Key":"capture operator](http://elixir-lang.org/getting_started/6.html#toc_5)","Fragments":["made"]},{"Key":"operator](http://elixir-lang.org/getting_started/6.html#toc_5) made","Fragments":["for"]},{"Key":"cleaner counting","Fragments":["of"]},{"Key":"counting of","Fragments":["words."]},{"Key":"was disappointed","Fragments":["that"]},{"Key":"disappointed that","Fragments":["I"]},{"Key":"couldn't name","Fragments":["the"]},{"Key":"the `count_words/1`","Fragments":["function"]},{"Key":"`count_words/1` function","Fragments":["`count/1`"]},{"Key":"function `count/1`","Fragments":["and"]},{"Key":"and supply","Fragments":["a"]},{"Key":"supply a","Fragments":["guard"]},{"Key":"defp count(words)","Fragments":["when"]},{"Key":"count(words) when","Fragments":["is_list(words)"]},{"Key":"when is_list(words)","Fragments":["do"]},{"Key":"You seemingly","Fragments":["can't"]},{"Key":"seemingly can't","Fragments":["share"]},{"Key":"can't share","Fragments":["names"]},{"Key":"share names","Fragments":["when"]},{"Key":"names when","Fragments":["spanning"]},{"Key":"when spanning","Fragments":["public"]},{"Key":"spanning public","Fragments":["and"]},{"Key":"public and","Fragments":["private"]},{"Key":"Hi PierreBdR,","Fragments":["I"]},{"Key":"PierreBdR, I","Fragments":["couldn't"]},{"Key":"implement `concat/1`","Fragments":["differently,"]},{"Key":"`concat/1` differently,","Fragments":["can"]},{"Key":"differently, can","Fragments":["you"]},{"Key":"you tell","Fragments":["me"]},{"Key":"me how","Fragments":["you"]},{"Key":"lists with","Fragments":["100,000"]},{"Key":"with 100,000","Fragments":["elements"]},{"Key":"100,000 elements","Fragments":["concat."]},{"Key":"elements concat.","Fragments":["The"]},{"Key":"concat. The","Fragments":["test"]},{"Key":"test just","Fragments":["hangs."]},{"Key":"just hangs.","Fragments":["I"]},{"Key":"hangs. I","Fragments":["would"]},{"Key":"love some","Fragments":["ideas"]},{"Key":"on speeding","Fragments":["that"]},{"Key":"speeding that","Fragments":["up"]},{"Key":"up some.","Fragments":["Spawning"]},{"Key":"some. Spawning","Fragments":["new"]},{"Key":"Spawning new","Fragments":["processes"]},{"Key":"new processes","Fragments":["seems"]},{"Key":"processes seems","Fragments":["like"]},{"Key":"the thing,","Fragments":["but"]},{"Key":"but getting","Fragments":["them"]},{"Key":"getting them","Fragments":["to"]},{"Key":"to report","Fragments":["back"]},{"Key":"report back","Fragments":["in"]},{"Key":"right order","Fragments":["is"]},{"Key":" @lennie","Fragments":["Yes,"]},{"Key":"@lennie Yes,","Fragments":["I"]},{"Key":"ones in","Fragments":["the","the"]},{"Key":"Now, I","Fragments":["see"]},{"Key":"were talking","Fragments":["about."]},{"Key":"talking about.","Fragments":["There"]},{"Key":"about. There","Fragments":["is"]},{"Key":"do such","Fragments":["testings."]},{"Key":"Please refer","Fragments":["to"]},{"Key":" @chris","Fragments":["What"]},{"Key":"@chris What","Fragments":["you"]},{"Key":"need is","Fragments":["a","a"]},{"Key":"that prepend","Fragments":["the"]},{"Key":"the *inverse*","Fragments":["of"]},{"Key":"*inverse* of","Fragments":["a"]},{"Key":"to another","Fragments":["list."]},{"Key":"another list.","Fragments":["This"]},{"Key":"This can","Fragments":["be"]},{"Key":"a tail-recursive","Fragments":["manner."]},{"Key":"tail-recursive manner.","Fragments":["Tell"]},{"Key":"manner. Tell","Fragments":["me"]},{"Key":"Tell me","Fragments":["if"]},{"Key":" @kelly","Fragments":["What"]},{"Key":"@kelly What","Fragments":["test"]},{"Key":"What test","Fragments":["codes"]},{"Key":"codes are","Fragments":["you"]},{"Key":"you talking","Fragments":["about?"]},{"Key":"talking about?","Fragments":["The"]},{"Key":"about? The","Fragments":["ones"]},{"Key":"The ones","Fragments":["in"]},{"Key":"test files?","Fragments":["If"]},{"Key":"files? If","Fragments":["so,"]},{"Key":"my code,","Fragments":["like"]},{"Key":"code, like","Fragments":["`a"]},{"Key":"like `a","Fragments":["\u003c="]},{"Key":"`a \u003c=","Fragments":["b`"]},{"Key":"\u003c= b`","Fragments":["is"]},{"Key":"b` is","Fragments":["a"]},{"Key":"if `a`","Fragments":["is"]},{"Key":"`a` is","Fragments":["less"]},{"Key":"less or","Fragments":["equal"]},{"Key":"or equal","Fragments":["to"]},{"Key":" Learning","Fragments":["elixir."]},{"Key":"Learning elixir.","Fragments":["It's"]},{"Key":"a slow","Fragments":["and"]},{"Key":"slow and","Fragments":["painful"]},{"Key":"and painful","Fragments":["experience."]},{"Key":"painful experience.","Fragments":["Please"]},{"Key":"experience. Please","Fragments":["rip"]},{"Key":"Please rip","Fragments":["this"]},{"Key":"rip this","Fragments":["apart."]},{"Key":"Yep, that","Fragments":["is"]},{"Key":"why elixir","Fragments":["really"]},{"Key":"elixir really","Fragments":["need"]},{"Key":"proper language","Fragments":["specification"]},{"Key":"language specification","Fragments":["document."]},{"Key":"specification document.","Fragments":["Nowhere"]},{"Key":"document. Nowhere","Fragments":["is"]},{"Key":"Nowhere is","Fragments":["it"]},{"Key":"it written","Fragments":["you"]},{"Key":"written you","Fragments":["can"]},{"Key":"can re-use","Fragments":["the"]},{"Key":"same variable","Fragments":["more"]},{"Key":"variable more","Fragments":["than"]},{"Key":"than once","Fragments":["in"]},{"Key":"a given","Fragments":["pattern","sentence."]},{"Key":"given pattern","Fragments":["matching"]},{"Key":"matching expression.","Fragments":["That"]},{"Key":"expression. That","Fragments":["is"]},{"Key":"biggest drawback","Fragments":["of"]},{"Key":"drawback of","Fragments":["elixir:"]},{"Key":"of elixir:","Fragments":["if"]},{"Key":"elixir: if","Fragments":["you're"]},{"Key":"Erlang expert,","Fragments":["many"]},{"Key":"expert, many","Fragments":["aspects"]},{"Key":"many aspects","Fragments":["of"]},{"Key":"language are","Fragments":["under"]},{"Key":"are under","Fragments":["specified."]},{"Key":"A definition","Fragments":["would"]},{"Key":"definition would","Fragments":["be"]},{"Key":"nice yes.","Fragments":["But"]},{"Key":"yes. But","Fragments":["Elixir"]},{"Key":"But Elixir","Fragments":["is"]},{"Key":"still so","Fragments":["in"]},{"Key":"in flux","Fragments":["that"]},{"Key":"flux that","Fragments":["that"]},{"Key":"be just","Fragments":["a"]},{"Key":"keep up","Fragments":["to"]},{"Key":"to date,","Fragments":["so"]},{"Key":"date, so","Fragments":["it'd"]},{"Key":"it'd probably","Fragments":["go"]},{"Key":"go out","Fragments":["of"]},{"Key":"of date","Fragments":["quickly."]},{"Key":"*think* this","Fragments":["should"]},{"Key":"should all","Fragments":["work,"]},{"Key":"all work,","Fragments":["but"]},{"Key":"but my","Fragments":["[large-list-concat][llc]","`concat/1`","tendency"]},{"Key":"my [large-list-concat][llc]","Fragments":["test"]},{"Key":"[large-list-concat][llc] test","Fragments":["seemingly"]},{"Key":"test seemingly","Fragments":["never"]},{"Key":"seemingly never","Fragments":["completes,"]},{"Key":"never completes,","Fragments":["stalling"]},{"Key":"completes, stalling","Fragments":["the"]},{"Key":"stalling the","Fragments":["test"]},{"Key":"suite. Has","Fragments":["anyone"]},{"Key":"Has anyone","Fragments":["else"]},{"Key":"else hit","Fragments":["this"]},{"Key":"hit this","Fragments":["problem?"]},{"Key":" [llc]:","Fragments":["https://github.com/andrewsardone/exercism-exercises/blob/ab9208fc530437654af21db24b97eae2322b0653/elixir/list-ops/list-ops_test.exs#L112-L115"]},{"Key":" very","Fragments":["nice!"]},{"Key":"very nice!","Fragments":["I"]},{"Key":"with @jerry","Fragments":["comment."]},{"Key":"the normalize/1","Fragments":["method"]},{"Key":"nice solution","Fragments":["–"]},{"Key":"solution –","Fragments":["good"]},{"Key":"– good","Fragments":["work!"]},{"Key":"minor suggestion.","Fragments":["Your"]},{"Key":"suggestion. Your","Fragments":["`prefix/2`"]},{"Key":"Your `prefix/2`","Fragments":["function"]},{"Key":"`prefix/2` function","Fragments":["clauses"]},{"Key":"clauses could","Fragments":["omit"]},{"Key":"could omit","Fragments":["the"]},{"Key":"explicit `head1","Fragments":["==="]},{"Key":"`head1 ===","Fragments":["head2`"]},{"Key":"=== head2`","Fragments":["conditional"]},{"Key":"head2` conditional","Fragments":["and"]},{"Key":"and rely","Fragments":["on"]},{"Key":"matching within","Fragments":["the"]},{"Key":"defp prefix?([],","Fragments":["_),"]},{"Key":"prefix?([], _),","Fragments":["do:"]},{"Key":"defp prefix?([head|tail1],","Fragments":["[head|tail2]),"]},{"Key":"prefix?([head|tail1], [head|tail2]),","Fragments":["do:"]},{"Key":"[head|tail2]), do:","Fragments":["prefix?(tail1,"]},{"Key":"do: prefix?(tail1,","Fragments":["tail2)"]},{"Key":"defp prefix?(_,","Fragments":["_),","[]),"]},{"Key":"prefix?(_, _),","Fragments":["do:"]},{"Key":"flow if","Fragments":["your"]},{"Key":"your hey/1","Fragments":["method,"]},{"Key":"hey/1 method,","Fragments":["very"]},{"Key":"method, very","Fragments":["readable."]},{"Key":"The Regexp","Fragments":["in"]},{"Key":"Regexp in","Fragments":["line"]},{"Key":"line 17","Fragments":["is","completely.","is","to"]},{"Key":"17 is","Fragments":["extremely","clearer"]},{"Key":"extremely terse.","Fragments":["Ah,"]},{"Key":"terse. Ah,","Fragments":["finally"]},{"Key":"Ah, finally","Fragments":["found"]},{"Key":"found it,","Fragments":["```\\p{L}```"]},{"Key":"it, ```\\p{L}```","Fragments":["means"]},{"Key":"```\\p{L}``` means","Fragments":["\"any"]},{"Key":"means \"any","Fragments":["letter\"."]},{"Key":"\"any letter\".","Fragments":["Hadn't"]},{"Key":"letter\". Hadn't","Fragments":["seen"]},{"Key":"Hadn't seen","Fragments":["that"]},{"Key":"that form","Fragments":["before."]},{"Key":"form before.","Fragments":["You"]},{"Key":"before. You","Fragments":["could"]},{"Key":"achieve exactly","Fragments":["the"]},{"Key":"same by","Fragments":["using"]},{"Key":"using ```String.match?(str,","Fragments":["~r/[[:alpha:]]/)```,"]},{"Key":"```String.match?(str, ~r/[[:alpha:]]/)```,","Fragments":["what"]},{"Key":"~r/[[:alpha:]]/)```, what","Fragments":["do"]},{"Key":" @lesley,","Fragments":["thanks"]},{"Key":"@lesley, thanks","Fragments":["a"]},{"Key":"your suggestion.","Fragments":["It"]},{"Key":"suggestion. It","Fragments":["make"]},{"Key":"It make","Fragments":["the"]},{"Key":"codes a","Fragments":["lot"]},{"Key":"cleaner. I","Fragments":["will"]},{"Key":"implementation accordingly.","Fragments":["However,"]},{"Key":"accordingly. However,","Fragments":["I"]},{"Key":"following function","Fragments":["clause:"]},{"Key":"prefix?(_, []),","Fragments":["do:"]},{"Key":"this clause","Fragments":["won't"]},{"Key":"clause won't","Fragments":["be"]},{"Key":"be hit","Fragments":["in"]},{"Key":"hit in","Fragments":["this"]},{"Key":"particular implementation","Fragments":["because"]},{"Key":"implementation because","Fragments":["the"]},{"Key":"the 3rd","Fragments":["clause"]},{"Key":"3rd clause","Fragments":["in"]},{"Key":"in sublist?","Fragments":["prevent"]},{"Key":"sublist? prevent","Fragments":["it"]},{"Key":"prevent it","Fragments":["from"]},{"Key":"from happening,","Fragments":["but"]},{"Key":"happening, but","Fragments":["if"]},{"Key":"other function,","Fragments":["e.g."]},{"Key":"function, e.g.","Fragments":["new"]},{"Key":"e.g. new","Fragments":["development"]},{"Key":"new development","Fragments":["in"]},{"Key":"development in","Fragments":["the"]},{"Key":"the future,","Fragments":["there"]},{"Key":"future, there","Fragments":["will"]},{"Key":"there will","Fragments":["be"]},{"Key":"issue when","Fragments":["calling"]},{"Key":"list longer","Fragments":["than"]},{"Key":"than second","Fragments":["list."]},{"Key":" @clarissa,","Fragments":["I"]},{"Key":"@clarissa, I","Fragments":["seem"]},{"Key":"remember Chinese","Fragments":["characters"]},{"Key":"Chinese characters","Fragments":["or"]},{"Key":"other glyphs","Fragments":["not"]},{"Key":"glyphs not","Fragments":["being"]},{"Key":"being picked","Fragments":["up"]},{"Key":" Either","Fragments":["way,"]},{"Key":"way, it","Fragments":["appears"]},{"Key":"Elixir 0.13","Fragments":["or","or","you","expects"]},{"Key":"0.13 or","Fragments":["Erlang","Erlang"]},{"Key":"or Erlang","Fragments":["R17","R17"]},{"Key":"Erlang R17","Fragments":["has","seems"]},{"Key":"R17 has","Fragments":["broken"]},{"Key":"has broken","Fragments":["the"]},{"Key":"broken the","Fragments":["`\\p{L}`","`\\p{L}`","functionality"]},{"Key":"the `\\p{L}`","Fragments":["bit","bit"]},{"Key":"`\\p{L}` bit","Fragments":["of","of"]},{"Key":" ~/workspace/exercism/elixir/bob","Fragments":["$"]},{"Key":"~/workspace/exercism/elixir/bob $","Fragments":["elixir"]},{"Key":"$ elixir","Fragments":["bob_test.exs","word_count_test.exs"]},{"Key":"(SyntaxError) bob.exs:17:","Fragments":["invalid"]},{"Key":"bob.exs:17: invalid","Fragments":["token:"]},{"Key":"(elixir) lib/code.ex:274:","Fragments":["Code.load_file/2","Code.load_file/2"]},{"Key":" bob_test.exs:4:","Fragments":["(file)"]},{"Key":"(elixir) src/elixir_lexical.erl:17:","Fragments":[":elixir_lexical.run/2",":elixir_lexical.run/2"]},{"Key":"(elixir) lib/code.ex:303:","Fragments":["Code.require_file/2","Code.require_file/2"]},{"Key":"the pipe-operator,","Fragments":["think","think"]},{"Key":"pipe-operator, think","Fragments":["it","it"]},{"Key":"it flows","Fragments":["quite","quite"]},{"Key":"flows quite","Fragments":["easily","easily"]},{"Key":"easily for","Fragments":["this","this"]},{"Key":"the ```word_count```","Fragments":["local","local"]},{"Key":"```word_count``` local","Fragments":["variable","variable"]},{"Key":"The ```","Fragments":["|\u003e"]},{"Key":"``` |\u003e","Fragments":["Enum.filter(\u0026(String.length(\u00261)"]},{"Key":"|\u003e Enum.filter(\u0026(String.length(\u00261)","Fragments":["\u003e"]},{"Key":"Enum.filter(\u0026(String.length(\u00261) \u003e","Fragments":["0))```"]},{"Key":"\u003e 0))```","Fragments":["seems"]},{"Key":"0))``` seems","Fragments":["a"]},{"Key":"bit clunky","Fragments":["to"]},{"Key":"clunky to","Fragments":["me,"]},{"Key":"me, any","Fragments":["tips?"]},{"Key":"R17 seems","Fragments":["to"]},{"Key":"have broken","Fragments":["the"]},{"Key":" ~/workspace/exercism/elixir/word-count","Fragments":["$"]},{"Key":"~/workspace/exercism/elixir/word-count $","Fragments":["elixir"]},{"Key":"(SyntaxError) word_count.exs:8:","Fragments":["invalid"]},{"Key":"word_count.exs:8: invalid","Fragments":["token:"]},{"Key":"token: \\p{L}0-9]+/i","Fragments":[","]},{"Key":"\\p{L}0-9]+/i ,","Fragments":["String.downcase(text))"]},{"Key":" word_count_test.exs:4:","Fragments":["(file)"]},{"Key":"Should actually","Fragments":["be"]},{"Key":"be `Regex.scan(~r/\\w+/,","Fragments":["sentence)"]},{"Key":"`Regex.scan(~r/\\w+/, sentence)","Fragments":["|\u003e"]},{"Key":"sentence) |\u003e","Fragments":["List.flatten`"]},{"Key":"need from","Fragments":["the"]},{"Key":"the Kernel","Fragments":["import?"]},{"Key":"The regular","Fragments":["expressions"]},{"Key":"are somewhat","Fragments":["odd,"]},{"Key":"somewhat odd,","Fragments":["are"]},{"Key":"odd, are","Fragments":["those"]},{"Key":"are those","Fragments":["Russian","rules?"]},{"Key":"those Russian","Fragments":["characters"]},{"Key":"Russian characters","Fragments":["that"]},{"Key":"that somehow","Fragments":["fit"]},{"Key":"somehow fit","Fragments":["into"]},{"Key":"fit into","Fragments":["the"]},{"Key":"the ASCII","Fragments":["sequence"]},{"Key":"ASCII sequence","Fragments":["in"]},{"Key":"sequence in","Fragments":["some"]},{"Key":"some expected","Fragments":["order?"]},{"Key":"expected order?","Fragments":["I"]},{"Key":"order? I","Fragments":["think"]},{"Key":"standard character","Fragments":["group"]},{"Key":"group is","Fragments":["much"]},{"Key":"0.13 you","Fragments":["need"]},{"Key":"use `~r`","Fragments":["instead"]},{"Key":"`~r` instead","Fragments":["of"]},{"Key":"of `%r`","Fragments":["to"]},{"Key":"`%r` to","Fragments":["mark"]},{"Key":"mark a","Fragments":["regex.","Regex,"]},{"Key":" Previously","Fragments":["I"]},{"Key":"Previously I","Fragments":["overlooked"]},{"Key":"I overlooked","Fragments":["the"]},{"Key":"overlooked the","Fragments":["`@louisa`"]},{"Key":"the `@louisa`","Fragments":["constant,"]},{"Key":"`@louisa` constant,","Fragments":["so"]},{"Key":"constant, so","Fragments":["[I"]},{"Key":"so [I","Fragments":["integrated"]},{"Key":"[I integrated","Fragments":["that](https://github.com/andrewsardone/exercism-exercises/compare/andrewsardone:d3ebbff...andrewsardone:b3c590e)"]},{"Key":"integrated that](https://github.com/andrewsardone/exercism-exercises/compare/andrewsardone:d3ebbff...andrewsardone:b3c590e)","Fragments":["into"]},{"Key":"that](https://github.com/andrewsardone/exercism-exercises/compare/andrewsardone:d3ebbff...andrewsardone:b3c590e) into","Fragments":["`nucleotide_counts/1`"]},{"Key":"into `nucleotide_counts/1`","Fragments":["with"]},{"Key":"`nucleotide_counts/1` with","Fragments":["some"]},{"Key":"some [partial","Fragments":["application](http://elixir-lang.org/crash-course.html#toc_22)"]},{"Key":"[partial application](http://elixir-lang.org/crash-course.html#toc_22)","Fragments":["(inspired"]},{"Key":"application](http://elixir-lang.org/crash-course.html#toc_22) (inspired","Fragments":["by"]},{"Key":"(inspired by","Fragments":["[@louisa](http://exercism.io/submissions/b739754988359bcd6a2ae487))."]},{"Key":"like relying","Fragments":["on"]},{"Key":"on regexes","Fragments":["so"]},{"Key":"regexes so","Fragments":["much."]},{"Key":"much. Felt","Fragments":["like"]},{"Key":"Felt like","Fragments":["cheating,"]},{"Key":"like cheating,","Fragments":["like"]},{"Key":"cheating, like","Fragments":["I"]},{"Key":"knew to","Fragments":["pass"]},{"Key":"test on","Fragments":["another","line"]},{"Key":"another I","Fragments":["don't"]},{"Key":"don't quite","Fragments":["yet"]},{"Key":"quite yet","Fragments":["grok."]},{"Key":"Good use","Fragments":["of","of"]},{"Key":" @franz","Fragments":["%r"]},{"Key":"@franz %r","Fragments":["can"]},{"Key":"%r can","Fragments":["no"]},{"Key":"can no","Fragments":["longer"]},{"Key":"longer be","Fragments":["used"]},{"Key":"later version","Fragments":["of"]},{"Key":"Elixir. A","Fragments":["lot"]},{"Key":"A lot","Fragments":["has","of"]},{"Key":"lot has","Fragments":["happened"]},{"Key":"has happened","Fragments":["since"]},{"Key":"happened since","Fragments":["then."]},{"Key":"since then.","Fragments":["The"]},{"Key":"then. The","Fragments":["code"]},{"Key":"here needs","Fragments":["to"]},{"Key":"The `do_dna_rna_conversion/1`","Fragments":["function"]},{"Key":"`do_dna_rna_conversion/1` function","Fragments":["is"]},{"Key":"is overkill.","Fragments":["I"]},{"Key":"simple `Enum.map/2`.","Fragments":["Resubmitting…"]},{"Key":"The `is_yelling?`","Fragments":["and"]},{"Key":"`is_yelling?` and","Fragments":["`is_a_question?`"]},{"Key":"and `is_a_question?`","Fragments":["methods"]},{"Key":"`is_a_question?` methods","Fragments":["make"]},{"Key":"why each","Fragments":["response"]},{"Key":"response is","Fragments":["returned."]},{"Key":"The `is_shouting`","Fragments":["method"]},{"Key":"`is_shouting` method","Fragments":["makes"]},{"Key":"method makes","Fragments":["it"]},{"Key":"why `Woah,","Fragments":["chill"]},{"Key":"`Woah, chill","Fragments":["out!`"]},{"Key":"chill out!`","Fragments":["is"]},{"Key":"out!` is","Fragments":["returned."]},{"Key":"operator. I","Fragments":["also"]},{"Key":"consider downcasing","Fragments":["the","the"]},{"Key":"sentence before","Fragments":["it"]},{"Key":"it enters","Fragments":["the"]},{"Key":"enters the","Fragments":["pipeline"]},{"Key":"the collect_words","Fragments":["function"]},{"Key":"collect_words function","Fragments":["more"]},{"Key":"a narrow","Fragments":["focus."]},{"Key":"you're feeling","Fragments":["like"]},{"Key":"feeling like","Fragments":["focusing"]},{"Key":"like focusing","Fragments":["the"]},{"Key":"focusing the","Fragments":["function"]},{"Key":"function even","Fragments":["more,"]},{"Key":"even more,","Fragments":["you"]},{"Key":"more, you","Fragments":["could"]},{"Key":"List.flatten bit","Fragments":["into"]},{"Key":"bit into","Fragments":["the"]},{"Key":"good flow","Fragments":["to"]},{"Key":"flow to","Fragments":["it,"]},{"Key":"used `String.split`","Fragments":["with"]},{"Key":"punctuation was","Fragments":["a"]},{"Key":"little unexpected,","Fragments":["but"]},{"Key":"unexpected, but","Fragments":["I"]},{"Key":"sentence and","Fragments":["ends","throwing","count"]},{"Key":"and ends","Fragments":["up"]},{"Key":"up filtering","Fragments":["out"]},{"Key":"The `@johnathan`","Fragments":["list"]},{"Key":"`@johnathan` list","Fragments":["seems"]},{"Key":"list seems","Fragments":["like"]},{"Key":"decent amount","Fragments":["of"]},{"Key":"of \"manual","Fragments":["labor\"."]},{"Key":"\"manual labor\".","Fragments":["Could"]},{"Key":"labor\". Could","Fragments":["you"]},{"Key":"help readability","Fragments":["would"]},{"Key":"readability would","Fragments":["be"]},{"Key":"like keeping","Fragments":["the"]},{"Key":"keeping the","Fragments":["`List.flatten/1`"]},{"Key":"the `List.flatten/1`","Fragments":["call"]},{"Key":"`List.flatten/1` call","Fragments":["in"]},{"Key":"in `collect_words/1`","Fragments":["–"]},{"Key":"`collect_words/1` –","Fragments":["it"]},{"Key":"it pipes","Fragments":["nicely"]},{"Key":"pipes nicely","Fragments":["into"]},{"Key":"nicely into","Fragments":["`count_words/1`"]},{"Key":"into `count_words/1`","Fragments":["(collection"]},{"Key":"`count_words/1` (collection","Fragments":["-\u003e"]},{"Key":"(collection -\u003e","Fragments":["count)."]},{"Key":"-\u003e count).","Fragments":["But"]},{"Key":"count). But","Fragments":["I"]},{"Key":"extract downcasing;","Fragments":["it"]},{"Key":"downcasing; it","Fragments":["does"]},{"Key":"does narrow","Fragments":["the"]},{"Key":"narrow the","Fragments":["focus"]},{"Key":"the focus","Fragments":["of"]},{"Key":"focus of","Fragments":["a"]},{"Key":"the `word_count`","Fragments":["variable."]},{"Key":"`word_count` variable.","Fragments":["It"]},{"Key":"variable. It","Fragments":["helps"]},{"Key":"helps identify","Fragments":["what"]},{"Key":"identify what","Fragments":["the"]},{"Key":"Dict is","Fragments":["storing"]},{"Key":"is storing","Fragments":["and"]},{"Key":"storing and","Fragments":["why"]},{"Key":"and why","Fragments":["it"]},{"Key":"code. Perhaps","Fragments":["renaming"]},{"Key":"Perhaps renaming","Fragments":["it"]},{"Key":"reflect the","Fragments":["number","return"]},{"Key":"times this","Fragments":["word"]},{"Key":"this word","Fragments":["was"]},{"Key":"already counted,","Fragments":["something"]},{"Key":"counted, something","Fragments":["like"]},{"Key":"obvious what","Fragments":["the"]},{"Key":"filter step","Fragments":["is"]},{"Key":"to remove.","Fragments":["Is"]},{"Key":"remove. Is","Fragments":["there"]},{"Key":"filter to","Fragments":["reference"]},{"Key":"the unwanted","Fragments":["punctuation"]},{"Key":"unwanted punctuation","Fragments":["instead"]},{"Key":"punctuation instead","Fragments":["of"]},{"Key":"Also, Elixir's","Fragments":["import"]},{"Key":"Elixir's import","Fragments":["statement"]},{"Key":"statement might","Fragments":["be"]},{"Key":"that happens.","Fragments":["It's"]},{"Key":"happens. It's","Fragments":["considered"]},{"Key":"It's considered","Fragments":["one"]},{"Key":"considered one","Fragments":["of"]},{"Key":"the challenges","Fragments":["of"]},{"Key":"challenges of","Fragments":["this"]},{"Key":" Useful","Fragments":["and"]},{"Key":"Useful and","Fragments":["excellent"]},{"Key":"and excellent","Fragments":["comments"]},{"Key":"excellent comments","Fragments":["@allan,"]},{"Key":"comments @allan,","Fragments":["thank"]},{"Key":"@allan, thank","Fragments":["you!"]},{"Key":"Neat! Probably","Fragments":["a"]},{"Key":"good pattern","Fragments":["to"]},{"Key":"through to","Fragments":["figure"]},{"Key":"me, even","Fragments":["sparked"]},{"Key":"even sparked","Fragments":["a"]},{"Key":"sparked a","Fragments":["few"]},{"Key":"few ideas","Fragments":["for"]},{"Key":"improving my","Fragments":["own"]},{"Key":"own attempts","Fragments":["at"]},{"Key":"attempts at","Fragments":["the","concat()"]},{"Key":"reverse, I","Fragments":["had"]},{"Key":"similar performance","Fragments":["issue"]},{"Key":"performance issue","Fragments":["initially."]},{"Key":"issue initially.","Fragments":["I"]},{"Key":"initially. I","Fragments":["learned"]},{"Key":"learned what","Fragments":["I"]},{"Key":"did wrong","Fragments":["from"]},{"Key":"wrong from","Fragments":["http://www.cs.sfu.ca/CourseCentral/310/pwfong/Lisp/2/tutorial2.html"]},{"Key":"Hmm, not","Fragments":["sure"]},{"Key":"difference, but","Fragments":["you"]},{"Key":"inline the","Fragments":["list-append","append","HashDict.new"]},{"Key":"the list-append","Fragments":["in"]},{"Key":"list-append in","Fragments":["line"]},{"Key":"line ~25","Fragments":["in"]},{"Key":"~25 in","Fragments":["the"]},{"Key":"reverse method.","Fragments":["I"]},{"Key":"the rebinding","Fragments":["of"]},{"Key":"rebinding of","Fragments":["the"]},{"Key":"name causes","Fragments":["any"]},{"Key":"causes any","Fragments":["perceptible"]},{"Key":"any perceptible","Fragments":["impact"]},{"Key":"perceptible impact","Fragments":["to"]},{"Key":"impact to","Fragments":["performance."]},{"Key":"to performance.","Fragments":["I"]},{"Key":"got good","Fragments":["performance"]},{"Key":"performance with","Fragments":["a"]},{"Key":"similar implementation","Fragments":["with"]},{"Key":"private \"reverse_inner\"","Fragments":["method"]},{"Key":"\"reverse_inner\" method","Fragments":["and"]},{"Key":"Learned of","Fragments":["default"]},{"Key":"parameters from","Fragments":["your"]},{"Key":"code here,","Fragments":["neat!"]},{"Key":"the link","Fragments":["@newell.","it"]},{"Key":"link @newell.","Fragments":["Very"]},{"Key":"@newell. Very","Fragments":["deep"]},{"Key":"Very deep","Fragments":["discussion"]},{"Key":"deep discussion","Fragments":["of"]},{"Key":"discussion of","Fragments":["the"]},{"Key":"the issue!","Fragments":["Thanks"]},{"Key":"issue! Thanks","Fragments":["also"]},{"Key":"the advice","Fragments":["to"]},{"Key":"advice to","Fragments":["inline"]},{"Key":"append in","Fragments":["line"]},{"Key":"having was","Fragments":["in"]},{"Key":"concat function,","Fragments":["not"]},{"Key":"function, not","Fragments":["in"]},{"Key":"in reverse.","Fragments":["What"]},{"Key":"reverse. What","Fragments":["I"]},{"Key":"discovered -","Fragments":["and"]},{"Key":"will soon","Fragments":["post"]},{"Key":"soon post","Fragments":["as"]},{"Key":"post as","Fragments":["a"]},{"Key":"iteration -","Fragments":["is"]},{"Key":"append the","Fragments":["accumulator","head"]},{"Key":"the head,","Fragments":["as"]},{"Key":"head, as","Fragments":["I"]},{"Key":"was doing,","Fragments":["it's"]},{"Key":"doing, it's","Fragments":["very"]},{"Key":"very inefficient.","Fragments":["If"]},{"Key":"inefficient. If","Fragments":["you"]},{"Key":"head to","Fragments":["the","that."]},{"Key":"the accumulator,","Fragments":["however,"]},{"Key":"accumulator, however,","Fragments":["it"]},{"Key":"however, it","Fragments":["is"]},{"Key":"words appending","Fragments":["a"]},{"Key":"of many","Fragments":["elements","elements","of"]},{"Key":"many elements","Fragments":["to","is"]},{"Key":"elements to","Fragments":["a"]},{"Key":"single item","Fragments":["is","to"]},{"Key":"item is","Fragments":["slow."]},{"Key":"is slow.","Fragments":["Appending"]},{"Key":"slow. Appending","Fragments":["a"]},{"Key":"Appending a","Fragments":["single"]},{"Key":"item to","Fragments":["a"]},{"Key":"elements is","Fragments":["faster."]},{"Key":"least that's","Fragments":["the"]},{"Key":"Yes, what","Fragments":["@nels"]},{"Key":"what @nels","Fragments":["said."]},{"Key":"@nels said.","Fragments":["It's"]},{"Key":"said. It's","Fragments":["tricky."]},{"Key":"It's tricky.","Fragments":["I"]},{"Key":"tricky. I","Fragments":["recommend"]},{"Key":"recommend taking","Fragments":["an"]},{"Key":"taking an","Fragments":["input"]},{"Key":"and walking","Fragments":["through"]},{"Key":"walking through","Fragments":["each"]},{"Key":"through each","Fragments":["step","of"]},{"Key":"each step","Fragments":["to","in"]},{"Key":"step to","Fragments":["see"]},{"Key":"doing. That","Fragments":["helped"]},{"Key":"That helped","Fragments":["me."]},{"Key":" @stanford","Fragments":["If"]},{"Key":"@stanford If","Fragments":["you"]},{"Key":"are stuck","Fragments":["on"]},{"Key":"stuck on","Fragments":["the"]},{"Key":"the large","Fragments":["concat","list"]},{"Key":"large concat","Fragments":["test"]},{"Key":"concat test","Fragments":["-"]},{"Key":"test -","Fragments":["as"]},{"Key":"- as","Fragments":["I","a"]},{"Key":"was for","Fragments":["weeks!"]},{"Key":"for weeks!","Fragments":["-"]},{"Key":"weeks! -","Fragments":["consider"]},{"Key":"- consider","Fragments":["how","using","downcasing"]},{"Key":"consider how","Fragments":["concat","to"]},{"Key":"how concat","Fragments":["interacts"]},{"Key":"concat interacts","Fragments":["with"]},{"Key":"interacts with","Fragments":["the"]},{"Key":"append function.","Fragments":["(I"]},{"Key":"function. (I","Fragments":["hope"]},{"Key":"that's direct","Fragments":["enough"]},{"Key":"direct enough","Fragments":["to"]},{"Key":"to help,","Fragments":["but"]},{"Key":"but vague","Fragments":["enough"]},{"Key":"vague enough","Fragments":["to"]},{"Key":"not spoil","Fragments":["the"]},{"Key":"spoil the","Fragments":["fun."]},{"Key":"the fun.","Fragments":[":^)"]},{"Key":"fun. :^)","Fragments":[")"]},{"Key":"the help,","Fragments":["@erna"]},{"Key":"help, @erna","Fragments":["\u0026"]},{"Key":"@erna \u0026","Fragments":["@erna!"]},{"Key":"\u0026 @erna!","Fragments":["I"]},{"Key":"@erna! I","Fragments":["[pushed"]},{"Key":"I [pushed","Fragments":["up][p]"]},{"Key":"[pushed up][p]","Fragments":["some"]},{"Key":"up][p] some","Fragments":["changes."]},{"Key":" [p]:","Fragments":["https://github.com/andrewsardone/exercism-exercises/commit/45fea974d882da167ba0c2bdfc851f143408361d"]},{"Key":"about simplifying","Fragments":["the"]},{"Key":"simplifying the","Fragments":["`cond`"]},{"Key":"`cond` patterns","Fragments":["by"]},{"Key":"patterns by","Fragments":["extracting"]},{"Key":"by extracting","Fragments":["a"]},{"Key":"extracting a","Fragments":["bunch"]},{"Key":"functions named","Fragments":["after"]},{"Key":"after various","Fragments":["cases"]},{"Key":"cases mentioned","Fragments":["in"]},{"Key":" only_letters?","Fragments":["is"]},{"Key":"only_letters? is","Fragments":["not"]},{"Key":"necessary, you","Fragments":["can"]},{"Key":"do input","Fragments":["=="]},{"Key":"== String.upcase(input)","Fragments":["\u0026\u0026"]},{"Key":"String.upcase(input) \u0026\u0026","Fragments":["String.downcase(input)"]},{"Key":" since","Fragments":["you"]},{"Key":"have expressed","Fragments":["all"]},{"Key":"expressed all","Fragments":["conditions"]},{"Key":"all conditions","Fragments":["interms"]},{"Key":"conditions interms","Fragments":["of"]},{"Key":"interms of","Fragments":["function,"]},{"Key":"of function,","Fragments":["you"]},{"Key":"last default","Fragments":["condition"]},{"Key":"like :","Fragments":["whaterver?(input)"]},{"Key":": whaterver?(input)","Fragments":[":"]},{"Key":"whaterver?(input) :","Fragments":["\"Whatever.\""]},{"Key":"use `reduce/3`","Fragments":["for"]},{"Key":"`reduce/3` for","Fragments":["all","everything."]},{"Key":"other functions,","Fragments":["then"]},{"Key":"functions, then","Fragments":["you"]},{"Key":"functions just","Fragments":["to"]},{"Key":"haven't yet","Fragments":["completed"]},{"Key":"yet completed","Fragments":["the"]},{"Key":"exercise –","Fragments":["I"]},{"Key":"– I","Fragments":["still"]},{"Key":"a failing","Fragments":["doctest:"]},{"Key":"1) test","Fragments":["doc"]},{"Key":"test doc","Fragments":["at"]},{"Key":"doc at","Fragments":["Phone.number/1"]},{"Key":"at Phone.number/1","Fragments":["(5)"]},{"Key":"Phone.number/1 (5)","Fragments":["(PhoneTest)"]},{"Key":" expected","Fragments":["doctest:"]},{"Key":"expected doctest:","Fragments":["Phone.number(\"+1"]},{"Key":"doctest: Phone.number(\"+1","Fragments":["(303)"]},{"Key":" to","Fragments":["evaluate"]},{"Key":"evaluate to:","Fragments":["\"13035551212\""]},{"Key":"instead got:","Fragments":["\"3035551212\""]},{"Key":" phone_number.exs:20:","Fragments":["Phone"]},{"Key":"phone_number.exs:20: Phone","Fragments":["(module)"]},{"Key":"What's odd","Fragments":["is"]},{"Key":"doctest seems","Fragments":["to"]},{"Key":"to contradict","Fragments":["the"]},{"Key":"contradict the","Fragments":["README:"]},{"Key":"\u003e If","Fragments":["the"]},{"Key":"is 11","Fragments":["digits"]},{"Key":"first number","Fragments":["is"]},{"Key":"1, trim","Fragments":["the"]},{"Key":"trim the","Fragments":["1"]},{"Key":"first 10","Fragments":["digits"]},{"Key":"Haha. I","Fragments":["got"]},{"Key":"an email","Fragments":["about","notification"]},{"Key":"email about","Fragments":["this."]},{"Key":"this. I've","Fragments":["been"]},{"Key":"been neglecting","Fragments":["exercism"]},{"Key":"neglecting exercism","Fragments":["of"]},{"Key":"exercism of","Fragments":["late"]},{"Key":"great. It's","Fragments":["a"]},{"Key":"good combination","Fragments":["of"]},{"Key":"really terse","Fragments":["code"]},{"Key":"terse code","Fragments":["and"]},{"Key":"and complete","Fragments":["self"]},{"Key":"complete self","Fragments":["documentation."]},{"Key":"the trimmed","Fragments":["string"]},{"Key":"trimmed string","Fragments":["for"]},{"Key":"for anything","Fragments":["but"]},{"Key":"your \u003ccode\u003eis_empty?\u003c/code\u003e","Fragments":["function,"]},{"Key":"\u003ccode\u003eis_empty?\u003c/code\u003e function,","Fragments":["so"]},{"Key":"your \u003ccode\u003etrimmed","Fragments":["="]},{"Key":"\u003ccode\u003etrimmed =","Fragments":["String.strip(input)\u003c/code\u003e"]},{"Key":"= String.strip(input)\u003c/code\u003e","Fragments":["if"]},{"Key":"String.strip(input)\u003c/code\u003e if","Fragments":["you"]},{"Key":"Your \u003ccode\u003ehey\u003c/code\u003e","Fragments":["function"]},{"Key":"super small","Fragments":["and"]},{"Key":"and efficient,","Fragments":["which"]},{"Key":"efficient, which","Fragments":["is"]},{"Key":"is awesome.","Fragments":["But,"]},{"Key":"awesome. But,","Fragments":["in"]},{"Key":"But, in","Fragments":["order"]},{"Key":"understand what's","Fragments":["going"]},{"Key":"take enough","Fragments":["time"]},{"Key":"of sentences","Fragments":["each","would"]},{"Key":"sentences each","Fragments":["regular"]},{"Key":"each regular","Fragments":["expression"]},{"Key":"expression would","Fragments":["catch,"]},{"Key":"would catch,","Fragments":["and"]},{"Key":"catch, and","Fragments":["what"]},{"Key":"sentences would","Fragments":["pass"]},{"Key":"lot less","Fragments":["cognitive"]},{"Key":"less cognitive","Fragments":["load"]},{"Key":"cognitive load","Fragments":["if","necessary"]},{"Key":"load if","Fragments":["you"]},{"Key":"you tucked","Fragments":["those"]},{"Key":"tucked those","Fragments":["at"]},{"Key":"those at","Fragments":["least"]},{"Key":"least into","Fragments":["named"]},{"Key":"functions, such","Fragments":["as"]},{"Key":"as \u003ccode\u003eis_shouting?\u003c/code\u003e","Fragments":["or"]},{"Key":"\u003ccode\u003eis_shouting?\u003c/code\u003e or","Fragments":["used"]},{"Key":"or used","Fragments":["explicit"]},{"Key":"used explicit","Fragments":["\u003ccode\u003eString\u003c/code\u003e"]},{"Key":"explicit \u003ccode\u003eString\u003c/code\u003e","Fragments":["functions"]},{"Key":"\u003ccode\u003eString\u003c/code\u003e functions","Fragments":["like"]},{"Key":"like \u003ccode\u003eString.ends_with?\u003c/code\u003e","Fragments":["that"]},{"Key":"\u003ccode\u003eString.ends_with?\u003c/code\u003e that","Fragments":["are"]},{"Key":"job making","Fragments":["your"]},{"Key":"code self","Fragments":["documenting."]},{"Key":"self documenting.","Fragments":["You"]},{"Key":"documenting. You","Fragments":["really"]},{"Key":"You really","Fragments":["reduced"]},{"Key":"really reduced","Fragments":["the"]},{"Key":"reduced the","Fragments":["cognitive"]},{"Key":"load necessary","Fragments":["to"]},{"Key":"using such","Fragments":["good"]},{"Key":"good function","Fragments":["names."]},{"Key":"names. That","Fragments":["said,"]},{"Key":"said, your","Fragments":["first"]},{"Key":"first function","Fragments":["is"]},{"Key":"a \u003ccode\u003eString.match?\u003c/code\u003e","Fragments":["against"]},{"Key":"\u003ccode\u003eString.match?\u003c/code\u003e against","Fragments":["a"]},{"Key":"against a","Fragments":["regular","list"]},{"Key":"expression that","Fragments":["does"]},{"Key":"take extra","Fragments":["time"]},{"Key":"extra time","Fragments":["to","potentially,"]},{"Key":"understand. You","Fragments":["could"]},{"Key":"reduce this","Fragments":["by"]},{"Key":"by either","Fragments":["moving"]},{"Key":"either moving","Fragments":["it"]},{"Key":"into another","Fragments":["more","simple"]},{"Key":"another more","Fragments":["explicitly"]},{"Key":"more explicitly","Fragments":["named"]},{"Key":"explicitly named","Fragments":["private"]},{"Key":"a combination","Fragments":["of"]},{"Key":"of \u003ccode\u003eString.is_empty?\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eString.is_empty?\u003c/code\u003e and","Fragments":["\u003ccode\u003eString.strip\u003c/code\u003e."]},{"Key":"Also, just","Fragments":["a"]},{"Key":"small stylistic","Fragments":["thing,"]},{"Key":"stylistic thing,","Fragments":["Elixir"]},{"Key":"thing, Elixir","Fragments":["functions"]},{"Key":"Elixir functions","Fragments":["seem"]},{"Key":"functions seem","Fragments":["to"]},{"Key":"to usually","Fragments":["be"]},{"Key":"be defined","Fragments":["using"]},{"Key":"defined using","Fragments":["\u003ccode\u003esnake_case\u003c/code\u003e"]},{"Key":"using \u003ccode\u003esnake_case\u003c/code\u003e","Fragments":["(AKA"]},{"Key":"\u003ccode\u003esnake_case\u003c/code\u003e (AKA","Fragments":["\u003ccode\u003eunderscore_case\u003c/code\u003e)"]},{"Key":"(AKA \u003ccode\u003eunderscore_case\u003c/code\u003e)","Fragments":["while"]},{"Key":"\u003ccode\u003eunderscore_case\u003c/code\u003e) while","Fragments":["modules"]},{"Key":"while modules","Fragments":["are","are"]},{"Key":"named using","Fragments":["\u003ccode\u003eCamelCaseWithTheFirstLetterCapitalized\u003c/code\u003e."]},{"Key":" Woah,","Fragments":["nice,"]},{"Key":"Woah, nice,","Fragments":["the"]},{"Key":"nice, the","Fragments":["solution"]},{"Key":"solution here","Fragments":["for"]},{"Key":"for `is_shouting?/1`","Fragments":["is"]},{"Key":"`is_shouting?/1` is","Fragments":["really"]},{"Key":"really simple","Fragments":["and"]},{"Key":"still bugging","Fragments":["me"]},{"Key":"bugging me","Fragments":["a","but"]},{"Key":"1) The","Fragments":["function"]},{"Key":"name 'contained_within?'","Fragments":["sorta"]},{"Key":"'contained_within?' sorta","Fragments":["conveys"]},{"Key":"sorta conveys","Fragments":["the"]},{"Key":"completely clear.","Fragments":["The"]},{"Key":"clear. The","Fragments":["other"]},{"Key":"alternatives I","Fragments":["thought"]},{"Key":"of were","Fragments":["all"]},{"Key":"were all","Fragments":["seriously"]},{"Key":"all seriously","Fragments":["long"]},{"Key":"seriously long","Fragments":["and"]},{"Key":"long and","Fragments":["uncomfortable","run-on,"]},{"Key":"and uncomfortable","Fragments":["to"]},{"Key":"uncomfortable to","Fragments":["type."]},{"Key":"2) If","Fragments":["I"]},{"Key":"length comparison","Fragments":["from","for"]},{"Key":"comparison from","Fragments":["the","the"]},{"Key":"the sublist?","Fragments":["implementation,"]},{"Key":"sublist? implementation,","Fragments":["the"]},{"Key":"implementation, the","Fragments":["tests"]},{"Key":"run consistently","Fragments":["0.1"]},{"Key":"consistently 0.1","Fragments":["second"]},{"Key":"0.1 second","Fragments":["faster."]},{"Key":"second faster.","Fragments":["But"]},{"Key":"faster. But","Fragments":["if"]},{"Key":"remove it","Fragments":["from"]},{"Key":"from superlist?,","Fragments":["it"]},{"Key":"superlist?, it","Fragments":["runs"]},{"Key":"it runs","Fragments":["0.1"]},{"Key":"runs 0.1","Fragments":["seconds"]},{"Key":"0.1 seconds","Fragments":["slower."]},{"Key":"seconds slower.","Fragments":["???"]},{"Key":"slower. ???","Fragments":["I"]},{"Key":"??? I","Fragments":["left"]},{"Key":"them both","Fragments":["in","out."]},{"Key":"place just","Fragments":["for"]},{"Key":"for consistency,","Fragments":["but"]},{"Key":"easily take","Fragments":["them"]},{"Key":"take them","Fragments":["both"]},{"Key":" Márcio,","Fragments":["não"]},{"Key":"Márcio, não","Fragments":["ta"]},{"Key":"não ta","Fragments":["passando"]},{"Key":"ta passando","Fragments":["todos"]},{"Key":"passando todos","Fragments":["os"]},{"Key":"todos os","Fragments":["testes."]},{"Key":" tem","Fragments":["que"]},{"Key":"tem que","Fragments":["descomentar."]},{"Key":"my `concat/1`","Fragments":["is"]},{"Key":"`concat/1` is","Fragments":["WAY"]},{"Key":"is WAY","Fragments":["too"]},{"Key":"WAY too","Fragments":["slow"]},{"Key":"slow when","Fragments":["working"]},{"Key":"when working","Fragments":["with"]},{"Key":"with many","Fragments":["list"]},{"Key":"list elements.","Fragments":["The"]},{"Key":"elements. The","Fragments":["`\"concat"]},{"Key":"The `\"concat","Fragments":["of"]},{"Key":"`\"concat of","Fragments":["huge"]},{"Key":"small lists\"`","Fragments":["test"]},{"Key":"lists\"` test","Fragments":["never"]},{"Key":"test never","Fragments":["finishes"]},{"Key":"never finishes","Fragments":["for"]},{"Key":"finishes for","Fragments":["me"]},{"Key":"me (even","Fragments":["after"]},{"Key":"(even after","Fragments":["an"]},{"Key":"after an","Fragments":["hour)."]},{"Key":"an hour).","Fragments":["Not"]},{"Key":"hour). Not","Fragments":["sure"]},{"Key":"sure where","Fragments":["I"]},{"Key":"look to","Fragments":["fix"]},{"Key":"fix my","Fragments":["inefficiency"]},{"Key":"my inefficiency","Fragments":["problem"]},{"Key":"inefficiency problem","Fragments":["here?"]},{"Key":"so. All","Fragments":["tests"]},{"Key":"are passing,","Fragments":["and"]},{"Key":"passing, and","Fragments":["there"]},{"Key":"isn't comments.","Fragments":["Please"]},{"Key":"comments. Please","Fragments":["give"]},{"Key":"Please give","Fragments":["a","a"]},{"Key":"Writing this","Fragments":["one"]},{"Key":"was super","Fragments":["easy"]},{"Key":"super easy","Fragments":["and"]},{"Key":"easy and","Fragments":["made"]},{"Key":"appreciate how","Fragments":["Elixir"]},{"Key":"used `Stream.chunk/2`","Fragments":["instead"]},{"Key":"`Stream.chunk/2` instead","Fragments":["of"]},{"Key":"of `Enum.chunk/2`","Fragments":["so"]},{"Key":"`Enum.chunk/2` so","Fragments":["that"]},{"Key":"that `Enum.any?/2`","Fragments":["could"]},{"Key":"`Enum.any?/2` could","Fragments":["short-circuit"]},{"Key":"could short-circuit","Fragments":["and"]},{"Key":"short-circuit and","Fragments":["return"]},{"Key":"return in","Fragments":["a"]},{"Key":"match event","Fragments":["without"]},{"Key":"event without","Fragments":["waiting"]},{"Key":"without waiting","Fragments":["for"]},{"Key":"be chunked.","Fragments":["This"]},{"Key":"chunked. This","Fragments":["made"]},{"Key":"This made","Fragments":["the"]},{"Key":"for `is_sublist/2`","Fragments":["I"]},{"Key":"`is_sublist/2` I","Fragments":["could"]},{"Key":"have omitted","Fragments":["the"]},{"Key":"omitted the","Fragments":["guards"]},{"Key":"list cases","Fragments":["first,"]},{"Key":"cases first,","Fragments":["but"]},{"Key":"seemed less","Fragments":["readable"]},{"Key":"the edge-cases","Fragments":["first,"]},{"Key":"edge-cases first,","Fragments":["especially"]},{"Key":"first, especially","Fragments":["after"]},{"Key":"especially after","Fragments":["a"]},{"Key":"a doc-string.","Fragments":["Is"]},{"Key":"doc-string. Is","Fragments":["there"]},{"Key":"not thrilled","Fragments":["with"]},{"Key":"thrilled with","Fragments":["line"]},{"Key":"with line","Fragments":["23,"]},{"Key":"line 23,","Fragments":["is"]},{"Key":"23, is","Fragments":["there"]},{"Key":"express an","Fragments":["inline"]},{"Key":"an inline","Fragments":["function"]},{"Key":"Nice usage","Fragments":["of"]},{"Key":"Elixir built-ins","Fragments":["to"]},{"Key":"built-ins to","Fragments":["keep"]},{"Key":"things tight","Fragments":["and"]},{"Key":"tight and","Fragments":["avoid"]},{"Key":"do manual","Fragments":["recursion"]},{"Key":"manual recursion","Fragments":["over"]},{"Key":"I'd personally","Fragments":["favor"]},{"Key":"personally favor","Fragments":["removing"]},{"Key":"favor removing","Fragments":["the"]},{"Key":"comparison for","Fragments":["readability,","this"]},{"Key":"for readability,","Fragments":["since","my","e.g."]},{"Key":"readability, since","Fragments":["they"]},{"Key":"real significant","Fragments":["impact"]},{"Key":"significant impact","Fragments":["on"]},{"Key":"impact on","Fragments":["the"]},{"Key":"second version,","Fragments":["I"]},{"Key":"the `is_sublist`","Fragments":["empty"]},{"Key":"`is_sublist` empty","Fragments":["cases"]},{"Key":"empty cases","Fragments":["above"]},{"Key":"cases above","Fragments":["the"]},{"Key":"above the","Fragments":["normal","interpolated","main"]},{"Key":"normal case","Fragments":["and"]},{"Key":"the guards,","Fragments":["favoring"]},{"Key":"guards, favoring","Fragments":["brevity"]},{"Key":"favoring brevity","Fragments":["instead."]},{"Key":"also renamed","Fragments":["the"]},{"Key":"to `sublist?`","Fragments":["favoring"]},{"Key":"`sublist?` favoring","Fragments":["the"]},{"Key":"favoring the","Fragments":["Elixir"]},{"Key":"idiom (I","Fragments":["think)"]},{"Key":"(I think)","Fragments":["of"]},{"Key":"of `state?`","Fragments":["rather"]},{"Key":"`state?` rather","Fragments":["than"]},{"Key":"also removed","Fragments":["some"]},{"Key":"removed some","Fragments":["redundant"]},{"Key":"some redundant","Fragments":["parens."]},{"Key":" there","Fragments":["are"]},{"Key":"some tests","Fragments":["missing.","failed"]},{"Key":" for","Fragments":["instance","a","the","i"]},{"Key":"instance \"only","Fragments":["numbers\""]},{"Key":"iteration. On","Fragments":["the"]},{"Key":"one hand,","Fragments":["I"]},{"Key":"hand, I","Fragments":["really"]},{"Key":"really liked","Fragments":["the","how"]},{"Key":"the short-circuiting","Fragments":["nature"]},{"Key":"short-circuiting nature","Fragments":["of"]},{"Key":"didn't actually","Fragments":["buy"]},{"Key":"actually buy","Fragments":["much."]},{"Key":"buy much.","Fragments":["As"]},{"Key":"much. As","Fragments":["is,"]},{"Key":"As is,","Fragments":["it"]},{"Key":"is, it","Fragments":["just"]},{"Key":"just reads","Fragments":["more","more"]},{"Key":"might offer","Fragments":["a"]},{"Key":"offer a","Fragments":["few","couple"]},{"Key":"few nits.","Fragments":["One"]},{"Key":"nits. One","Fragments":["is"]},{"Key":"the Posix","Fragments":["character"]},{"Key":"Posix character","Fragments":["class"]},{"Key":"class [:punct:]","Fragments":["inside"]},{"Key":"[:punct:] inside","Fragments":["your"]},{"Key":"out punctuation.","Fragments":["This"]},{"Key":"punctuation. This","Fragments":["might"]},{"Key":"13 more","Fragments":["visually"]},{"Key":"more visually","Fragments":["appealing."]},{"Key":"Another is","Fragments":["that","that","to","that"]},{"Key":"probably inline","Fragments":["the"]},{"Key":"the HashDict.new","Fragments":["declaration"]},{"Key":"HashDict.new declaration","Fragments":["in"]},{"Key":"declaration in","Fragments":["place"]},{"Key":"accumulator variable","Fragments":["on"]},{"Key":"variable on","Fragments":["line"]},{"Key":"line 18.","Fragments":["Then"]},{"Key":"18. Then","Fragments":["you"]},{"Key":"of line","Fragments":["17"]},{"Key":"The third","Fragments":["is"]},{"Key":"third is","Fragments":["a"]},{"Key":"preference, so","Fragments":["take"]},{"Key":"huge grain","Fragments":["of"]},{"Key":"grain of","Fragments":["salt."]},{"Key":"of salt.","Fragments":["When"]},{"Key":"salt. When","Fragments":["using"]},{"Key":"pipe operator,","Fragments":["once"]},{"Key":"operator, once","Fragments":["you"]},{"Key":"get past","Fragments":["two"]},{"Key":"past two","Fragments":["or"]},{"Key":"two or","Fragments":["so"]},{"Key":"so pipes","Fragments":["on"]},{"Key":"pipes on","Fragments":["a"]},{"Key":"a line,","Fragments":["it"]},{"Key":"line, it","Fragments":["seems"]},{"Key":"seems much","Fragments":["easier"]},{"Key":"they all","Fragments":["go"]},{"Key":"all go","Fragments":["vertically"]},{"Key":"go vertically","Fragments":["instead"]},{"Key":"vertically instead","Fragments":["of"]},{"Key":"of horizontally.","Fragments":["It"]},{"Key":"horizontally. It","Fragments":["feels"]},{"Key":"feels as","Fragments":["if"]},{"Key":"just easier","Fragments":["to"]},{"Key":"to scan,","Fragments":["but"]},{"Key":"but again,","Fragments":["that's"]},{"Key":"again, that's","Fragments":["just"]},{"Key":" And,","Fragments":["yes,","duh,"]},{"Key":"And, yes,","Fragments":["the"]},{"Key":"the slowness","Fragments":["of"]},{"Key":"slowness of","Fragments":["concat"]},{"Key":"concat with","Fragments":["huge"]},{"Key":"with huge","Fragments":["lists"]},{"Key":"huge lists","Fragments":["is"]},{"Key":"lists is","Fragments":["really"]},{"Key":"really annoying.","Fragments":["But"]},{"Key":"annoying. But","Fragments":["fear"]},{"Key":"But fear","Fragments":["not,"]},{"Key":"fear not,","Fragments":["there"]},{"Key":"not, there","Fragments":["is"]},{"Key":"solution. :^)","Fragments":["I"]},{"Key":":^) I","Fragments":["would"]},{"Key":"the interactions","Fragments":["between"]},{"Key":"interactions between","Fragments":["the"]},{"Key":"the functionality","Fragments":["into"]},{"Key":"functionality into","Fragments":["small,","lines"]},{"Key":"into small,","Fragments":["focused"]},{"Key":"small, focused","Fragments":["private"]},{"Key":"focused private","Fragments":["methods."]},{"Key":"might offer.","Fragments":["One"]},{"Key":"offer. One","Fragments":["is"]},{"Key":"sentence when","Fragments":["it","it"]},{"Key":"string, you","Fragments":["don't","don't"]},{"Key":"words once","Fragments":["you've","you've"]},{"Key":"you've spit","Fragments":["them","them"]},{"Key":"spit them","Fragments":["up.","up."]},{"Key":"them up.","Fragments":["Another"]},{"Key":"up. Another","Fragments":["is"]},{"Key":"Regex has","Fragments":["a","a"]},{"Key":"great function","Fragments":["called","called"]},{"Key":"called 'scan'","Fragments":["which","which"]},{"Key":"'scan' which","Fragments":["you","you"]},{"Key":"sentence string","Fragments":["into","into"]},{"Key":"words. Those","Fragments":["two"]},{"Key":"Those two","Fragments":["should"]},{"Key":"two should","Fragments":["allow"]},{"Key":"should allow","Fragments":["you"]},{"Key":"to uniq","Fragments":["the","the"]},{"Key":"uniq the","Fragments":["list","list"]},{"Key":"the sentence.","Fragments":["Isn't"]},{"Key":"sentence. Isn't","Fragments":["the"]},{"Key":"count however","Fragments":["many"]},{"Key":"however many","Fragments":["instances"]},{"Key":"many instances","Fragments":["of"]},{"Key":"word there","Fragments":["might"]},{"Key":"given sentence.","Fragments":["Forgive"]},{"Key":"sentence. Forgive","Fragments":["me"]},{"Key":"second rud's","Fragments":["comments"]},{"Key":"rud's comments","Fragments":["above."]},{"Key":"comments above.","Fragments":["I"]},{"Key":"above. I","Fragments":["might"]},{"Key":"readability, you","Fragments":["might"]},{"Key":"consider adding","Fragments":["private"]},{"Key":"adding private","Fragments":["methods"]},{"Key":"cond block.","Fragments":["I"]},{"Key":"block. I","Fragments":["might"]},{"Key":"also suggest","Fragments":["using"]},{"Key":"using unicode","Fragments":["compliant"]},{"Key":"unicode compliant","Fragments":["character"]},{"Key":"compliant character","Fragments":["classes"]},{"Key":"classes for","Fragments":["your","readability?"]},{"Key":"regex. What","Fragments":["happens"]},{"Key":"your teenager","Fragments":["converse"]},{"Key":"teenager converse","Fragments":["in"]},{"Key":"converse in","Fragments":["Japanese?"]},{"Key":"in Japanese?","Fragments":[":^)"]},{"Key":"Hey Chad!","Fragments":["Fancy"]},{"Key":"Chad! Fancy","Fragments":["meeting"]},{"Key":"Fancy meeting","Fragments":["you"]},{"Key":"meeting you","Fragments":["here."]},{"Key":"you here.","Fragments":[":^)"]},{"Key":"looking good.","Fragments":["I","You","I"]},{"Key":"can kill","Fragments":["line"]},{"Key":"kill line","Fragments":["15"]},{"Key":"15 by","Fragments":["making"]},{"Key":"making line","Fragments":["16"]},{"Key":"16 be:","Fragments":["String.downcase"]},{"Key":"be: String.downcase","Fragments":["str"]},{"Key":"String.downcase str","Fragments":["(without"]},{"Key":"str (without","Fragments":["the"]},{"Key":"(without the","Fragments":["pipe"]},{"Key":"pipe at","Fragments":["the"]},{"Key":"the line.","Fragments":["Same"]},{"Key":"line. Same","Fragments":["story"]},{"Key":"Same story","Fragments":["for"]},{"Key":"story for","Fragments":["line"]},{"Key":"- String","Fragments":["also"]},{"Key":"String also","Fragments":["has"]},{"Key":"called 'graphemes',","Fragments":["which"]},{"Key":"'graphemes', which","Fragments":["will"]},{"Key":"which will","Fragments":["turn"]},{"Key":"will turn","Fragments":["the"]},{"Key":"a unicode-safe","Fragments":["list"]},{"Key":"unicode-safe list","Fragments":["of"]},{"Key":"of graphemes.","Fragments":["Not"]},{"Key":"graphemes. Not","Fragments":["a"]},{"Key":"a biggie","Fragments":["for"]},{"Key":"biggie for","Fragments":["this"]},{"Key":"but good","Fragments":["to"]},{"Key":"the 'match'","Fragments":["function"]},{"Key":"'match' function","Fragments":["tell"]},{"Key":"function tell","Fragments":["the"]},{"Key":"bigger story","Fragments":["with"]},{"Key":"story with","Fragments":["private"]},{"Key":"functions doing","Fragments":["the"]},{"Key":"the work.","Fragments":["I'm","Neat."]},{"Key":"work. I'm","Fragments":["thinking"]},{"Key":"might identify","Fragments":["the"]},{"Key":"would filter","Fragments":["out"]},{"Key":"word matches.","Fragments":["Just"]},{"Key":"matches. Just","Fragments":["a"]},{"Key":"Fixed some","Fragments":["funny"]},{"Key":"some funny","Fragments":["formatting"]},{"Key":"funny formatting","Fragments":["in"]},{"Key":"formatting in","Fragments":["the"]},{"Key":"what @gregory","Fragments":["says"]},{"Key":"@gregory says","Fragments":["above:"]},{"Key":"says above:","Fragments":["nice"]},{"Key":"above: nice","Fragments":["flow;"]},{"Key":"nice flow;","Fragments":["nice"]},{"Key":"flow; nice","Fragments":["separation"]},{"Key":"nice separation","Fragments":["of"]},{"Key":"of functionality","Fragments":["into"]},{"Key":"into lines","Fragments":["of"]},{"Key":"the pipeline;","Fragments":["readability"]},{"Key":"pipeline; readability","Fragments":["might"]},{"Key":"readability might","Fragments":["be"]},{"Key":"be enhanced","Fragments":["by"]},{"Key":"enhanced by","Fragments":["using"]},{"Key":"functions. I'd","Fragments":["like"]},{"Key":"to offer","Fragments":["a"]},{"Key":"nits as","Fragments":["well."]},{"Key":"- including","Fragments":["the"]},{"Key":"arity of","Fragments":["a"]},{"Key":"actually causes","Fragments":["a"]},{"Key":"causes a","Fragments":["syntax"]},{"Key":"error. how","Fragments":["are"]},{"Key":"you getting","Fragments":["the"]},{"Key":"iex(3)\u003e String.downcase/1","Fragments":["\"HELLO\""]},{"Key":"(SyntaxError) iex:3:","Fragments":["syntax"]},{"Key":"iex:3: syntax","Fragments":["error"]},{"Key":"error before:","Fragments":["[\u003c\u003c\"HELLO\"\u003e\u003e]"]},{"Key":" that","Fragments":["would"]},{"Key":"that \u0026String.downcase/1","Fragments":["on"]},{"Key":"\u0026String.downcase/1 on","Fragments":["line"]},{"Key":"15 would","Fragments":["be"]},{"Key":"as \u0026String.downcase.","Fragments":["same"]},{"Key":"\u0026String.downcase. same","Fragments":["with"]},{"Key":"same with","Fragments":["reducer/2"]},{"Key":"with reducer/2","Fragments":["=\u003e"]},{"Key":"reducer/2 =\u003e","Fragments":["reducer"]},{"Key":"=\u003e reducer","Fragments":["on"]},{"Key":"reducer on","Fragments":["line"]},{"Key":"Regex.scan .","Fragments":["This"]},{"Key":". This","Fragments":["might"]},{"Key":"both splitting","Fragments":["the"]},{"Key":"sentence as","Fragments":["well"]},{"Key":"whole sentence","Fragments":["on","to"]},{"Key":"sentence on","Fragments":["line"]},{"Key":"12 and","Fragments":["eliminating"]},{"Key":"and eliminating","Fragments":["line"]},{"Key":"eliminating line","Fragments":["15"]},{"Key":"a convention,","Fragments":["when"]},{"Key":"convention, when","Fragments":["a"]},{"Key":"when a","Fragments":["pipeline"]},{"Key":"is stacked","Fragments":["vertically,"]},{"Key":"stacked vertically,","Fragments":["as"]},{"Key":"vertically, as","Fragments":["in"]},{"Key":"count function,","Fragments":["I've"]},{"Key":"function, I've","Fragments":["seen"]},{"Key":"pipes come","Fragments":["at"]},{"Key":"come at","Fragments":["the"]},{"Key":"line much","Fragments":["more"]},{"Key":"catch on","Fragments":["the"]},{"Key":"accumulator assignment.","Fragments":["I"]},{"Key":"assignment. I","Fragments":["don't"]},{"Key":"be instantiated","Fragments":["before"]},{"Key":"instantiated before","Fragments":["passed"]},{"Key":"before passed","Fragments":["to"]},{"Key":" Regex'ing","Fragments":["with"]},{"Key":"Regex'ing with","Fragments":["`[[:punct]]`"]},{"Key":"with `[[:punct]]`","Fragments":["seems"]},{"Key":"`[[:punct]]` seems","Fragments":["to"]},{"Key":"make two","Fragments":["of"]},{"Key":"tests fail,","Fragments":["because"]},{"Key":"fail, because","Fragments":["it"]},{"Key":"also ends","Fragments":["up"]},{"Key":"up stripping","Fragments":["out"]},{"Key":"out accented","Fragments":["characters"]},{"Key":"accented characters","Fragments":["such"]},{"Key":"characters such","Fragments":["as"]},{"Key":"German test","Fragments":["example."]},{"Key":"\u003e if","Fragments":["you"]},{"Key":"with downcasing","Fragments":["the"]},{"Key":"the each","Fragments":["word"]},{"Key":"word because","Fragments":["it"]},{"Key":"it preserved","Fragments":["a"]},{"Key":"preserved a","Fragments":["certain"]},{"Key":"certain amount","Fragments":["of"]},{"Key":"of \"flow\".","Fragments":["That"]},{"Key":"\"flow\". That","Fragments":["is,"]},{"Key":"sentence into","Fragments":["separate"]},{"Key":"words as","Fragments":["quickly"]},{"Key":"as quickly","Fragments":["as"]},{"Key":"quickly as","Fragments":["possible"]},{"Key":"possible and","Fragments":["then"]},{"Key":"then perform","Fragments":["all"]},{"Key":"perform all","Fragments":["other"]},{"Key":"other operations","Fragments":["on"]},{"Key":"operations on","Fragments":["that"]},{"Key":"that list.","Fragments":["Is"]},{"Key":"list. Is","Fragments":["there"]},{"Key":"performance or","Fragments":["some"]},{"Key":"other reason","Fragments":["to"]},{"Key":"prefer downcasing","Fragments":["the"]},{"Key":"sentence to","Fragments":["begin"]},{"Key":"to begin","Fragments":["with?"]},{"Key":"\u003e Regex","Fragments":["has"]},{"Key":"point. Would","Fragments":["using"]},{"Key":"Would using","Fragments":["`Regex.scan`"]},{"Key":"`Regex.scan` be","Fragments":["more"]},{"Key":"idiomatic than","Fragments":["`String.split`"]},{"Key":"`String.split` for","Fragments":["this"]},{"Key":"\u003e I'm","Fragments":["curious"]},{"Key":"we're going","Fragments":["to"]},{"Key":"count how","Fragments":["many","many"]},{"Key":"many times","Fragments":["each","it"]},{"Key":"times each","Fragments":["word"]},{"Key":"word occurs,","Fragments":["we"]},{"Key":"occurs, we","Fragments":["can"]},{"Key":"can start","Fragments":["with"]},{"Key":"of unique","Fragments":["words."]},{"Key":"unique words.","Fragments":["Then,"]},{"Key":"words. Then,","Fragments":["with"]},{"Key":"Then, with","Fragments":["`Enum.reduce`"]},{"Key":"`Enum.reduce` we","Fragments":["loop"]},{"Key":"we loop","Fragments":["through"]},{"Key":"loop through","Fragments":["each"]},{"Key":"the unique","Fragments":["words"]},{"Key":"times it","Fragments":["occurs."]},{"Key":"it occurs.","Fragments":["The"]},{"Key":"occurs. The","Fragments":["motivation"]},{"Key":"The motivation","Fragments":["there"]},{"Key":"motivation there","Fragments":["was"]},{"Key":"do as","Fragments":["few"]},{"Key":"few counting","Fragments":["iterations"]},{"Key":"counting iterations","Fragments":["as"]},{"Key":"iterations as","Fragments":["possible,"]},{"Key":"possible, if","Fragments":["that"]},{"Key":" @carolyne,","Fragments":["you’re"]},{"Key":"@carolyne, you’re","Fragments":["welcome."]},{"Key":"you’re welcome.","Fragments":["Thanks"]},{"Key":"welcome. Thanks","Fragments":["for"]},{"Key":" I’d","Fragments":["like"]},{"Key":"I’d like","Fragments":["to"]},{"Key":"these in","Fragments":["reverse"]},{"Key":"reverse order,","Fragments":["actually."]},{"Key":"order, actually.","Fragments":["I"]},{"Key":"actually. I","Fragments":["would"]},{"Key":"that there’s","Fragments":["a"]},{"Key":"there’s a","Fragments":["way"]},{"Key":"use raw","Fragments":["recursion"]},{"Key":"raw recursion","Fragments":["with","when"]},{"Key":"recursion with","Fragments":["Dict.update/4"]},{"Key":"with Dict.update/4","Fragments":["so"]},{"Key":"Dict.update/4 so","Fragments":["that"]},{"Key":"you wouldn’t","Fragments":["need","have"]},{"Key":"wouldn’t need","Fragments":["to"]},{"Key":"that unique","Fragments":["list"]},{"Key":"list beforehand.","Fragments":["With"]},{"Key":"beforehand. With","Fragments":["that"]},{"Key":"in place,","Fragments":["all","downcasing"]},{"Key":"place, all","Fragments":["you"]},{"Key":"downcased list","Fragments":["of"]},{"Key":"words. I","Fragments":["don’t","feel"]},{"Key":"I don’t","Fragments":["know"]},{"Key":"don’t know","Fragments":["which"]},{"Key":"more idiomatic,","Fragments":["Regex.scan"]},{"Key":"idiomatic, Regex.scan","Fragments":["or"]},{"Key":"Regex.scan or","Fragments":["String.split,"]},{"Key":"or String.split,","Fragments":["but"]},{"Key":"String.split, but","Fragments":["I"]},{"Key":"think Regex.scan","Fragments":["is"]},{"Key":"simpler in","Fragments":["this"]},{"Key":"you craft","Fragments":["your"]},{"Key":"craft your","Fragments":["regex"]},{"Key":"regex properly,","Fragments":["it"]},{"Key":"properly, it","Fragments":["will"]},{"Key":"both clean","Fragments":["up"]},{"Key":"the split.","Fragments":["The"]},{"Key":"split. The","Fragments":["one"]},{"Key":"one fly","Fragments":["in"]},{"Key":"fly in","Fragments":["the"]},{"Key":"the ointment","Fragments":["is"]},{"Key":"ointment is","Fragments":["that"]},{"Key":"to List.flatten","Fragments":["afterward."]},{"Key":"List.flatten afterward.","Fragments":["So,"]},{"Key":"afterward. So,","Fragments":["now"]},{"Key":"So, now","Fragments":["that"]},{"Key":"place, downcasing","Fragments":["the"]},{"Key":"sentence at","Fragments":["the"]},{"Key":"beginning seems","Fragments":["like"]},{"Key":"In pseudo-code,","Fragments":["that"]},{"Key":"pseudo-code, that","Fragments":["would"]},{"Key":" downcase","Fragments":["sentence"]},{"Key":"downcase sentence","Fragments":["=\u003e"]},{"Key":"sentence =\u003e","Fragments":["regex"]},{"Key":"=\u003e regex","Fragments":["scan"]},{"Key":"regex scan","Fragments":["=\u003e"]},{"Key":"scan =\u003e","Fragments":["list"]},{"Key":"=\u003e list","Fragments":["flatten"]},{"Key":"list flatten","Fragments":["=\u003e"]},{"Key":"flatten =\u003e","Fragments":["recursive"]},{"Key":"=\u003e recursive","Fragments":["dict"]},{"Key":"recursive dict","Fragments":["update","update."]},{"Key":"that flow,","Fragments":["there"]},{"Key":"flow, there","Fragments":["are"]},{"Key":"two loops","Fragments":["through"]},{"Key":"loops through","Fragments":["the"]},{"Key":"list, one","Fragments":["for"]},{"Key":"flatten and","Fragments":["one"]},{"Key":"dict update.","Fragments":["I"]},{"Key":"update. I","Fragments":["hope"]},{"Key":"hope I'm","Fragments":["explaining"]},{"Key":"I'm explaining","Fragments":["this"]},{"Key":"explaining this","Fragments":["well."]},{"Key":"didn't buy","Fragments":["much"]},{"Key":"buy much","Fragments":["is"]},{"Key":"the `Stream.chunk/3`","Fragments":["is"]},{"Key":"`Stream.chunk/3` is","Fragments":["going"]},{"Key":"return `[]`","Fragments":["in"]},{"Key":"`[]` in","Fragments":["the"]},{"Key":"where length","Fragments":["is"]},{"Key":"length is","Fragments":["less"]},{"Key":"than (since","Fragments":["there"]},{"Key":"(since there","Fragments":["isn't"]},{"Key":"single chunk),","Fragments":["and"]},{"Key":"chunk), and","Fragments":["then"]},{"Key":"the `Enum.any?/2`","Fragments":["on"]},{"Key":"`Enum.any?/2` on","Fragments":["an"]},{"Key":"obviously going","Fragments":["to"]},{"Key":"execute pretty","Fragments":["fast."]},{"Key":"pretty fast.","Fragments":["Looking"]},{"Key":"fast. Looking","Fragments":["good."]},{"Key":"Fixed this","Fragments":["to"]},{"Key":"with 0.13.x","Fragments":["and"]},{"Key":"0.13.x and","Fragments":["moved"]},{"Key":"List.flatten into","Fragments":["a"]},{"Key":"natural place","Fragments":["for"]},{"Key":" Had","Fragments":["to"]},{"Key":"Had to","Fragments":["modify"]},{"Key":"to modify","Fragments":["the"]},{"Key":"get this","Fragments":["to"]},{"Key":"And, duh,","Fragments":["no"]},{"Key":"duh, no","Fragments":["need"]},{"Key":"do raw","Fragments":["recursion"]},{"Key":"when Enum.reduce/3","Fragments":["is"]},{"Key":"Enum.reduce/3 is","Fragments":["there"]},{"Key":"Interesting. The","Fragments":["fact"]},{"Key":"tests failed","Fragments":["when"]},{"Key":"failed when","Fragments":["you"]},{"Key":"used \u003ccode\u003e[:punct:]\u003c/code\u003e","Fragments":["made","in"]},{"Key":"\u003ccode\u003e[:punct:]\u003c/code\u003e made","Fragments":["me"]},{"Key":"me go","Fragments":["back"]},{"Key":"my implementation.","Fragments":["Apparently,","Focuses"]},{"Key":"implementation. Apparently,","Fragments":["I"]},{"Key":"Apparently, I","Fragments":["had"]},{"Key":"\u003ccode\u003e[:punct:]\u003c/code\u003e in","Fragments":["another"]},{"Key":"another exercise.","Fragments":["Duh."]},{"Key":" But,","Fragments":["it"]},{"Key":"But, it","Fragments":["did"]},{"Key":"did remind","Fragments":["me"]},{"Key":"remind me","Fragments":["that"]},{"Key":"used Regex.scan/3","Fragments":["to"]},{"Key":"Regex.scan/3 to","Fragments":["split"]},{"Key":"using String.split/1.","Fragments":["The"]},{"Key":"String.split/1. The","Fragments":["downside"]},{"Key":"using Regex.scan/3","Fragments":["is"]},{"Key":"Regex.scan/3 is","Fragments":["that"]},{"Key":"call List.flatten/1","Fragments":["afterward."]},{"Key":"List.flatten/1 afterward.","Fragments":["The"]},{"Key":"afterward. The","Fragments":["upside"]},{"Key":"The upside","Fragments":["is"]},{"Key":"upside is","Fragments":["that"]},{"Key":"really well.","Fragments":["Perhaps"]},{"Key":"well. Perhaps","Fragments":["worth"]},{"Key":"Perhaps worth","Fragments":["considering"]},{"Key":"worth considering","Fragments":["for"]},{"Key":"considering for","Fragments":["your"]},{"Key":"feedback @rosario!","Fragments":["Totally"]},{"Key":"@rosario! Totally","Fragments":["agree"]},{"Key":"Totally agree","Fragments":["on"]},{"Key":"on Stream.chunk/3","Fragments":["returning"]},{"Key":"Stream.chunk/3 returning","Fragments":["an"]},{"Key":"at Enum.count/2","Fragments":["for"]},{"Key":"Enum.count/2 for","Fragments":["the"]},{"Key":"count function.","Fragments":["It","Both"]},{"Key":"might clean","Fragments":["up"]},{"Key":"The doctest","Fragments":["on"]},{"Key":"doctest on","Fragments":["line","line","line"]},{"Key":"line `12-13`","Fragments":["was"]},{"Key":"`12-13` was","Fragments":["inconsistent"]},{"Key":"was inconsistent","Fragments":["with"]},{"Key":"rules stated","Fragments":["in"]},{"Key":"the README,","Fragments":["so"]},{"Key":"README, so","Fragments":["I"]},{"Key":"Using pipes","Fragments":["instead"]},{"Key":"pipes instead","Fragments":["of"]},{"Key":"of local","Fragments":["variables"]},{"Key":"pipe and","Fragments":["shorter"]},{"Key":"and shorter","Fragments":["function","but"]},{"Key":"shorter function","Fragments":["syntax"]},{"Key":"That's true,","Fragments":["but"]},{"Key":"to sanitize","Fragments":["that"]},{"Key":"sanitize that","Fragments":["input"]},{"Key":"that input","Fragments":["so"]},{"Key":"input so","Fragments":["it"]},{"Key":"matches what","Fragments":["I'm"]},{"Key":"I'm expecting.","Fragments":["Also"]},{"Key":"expecting. Also","Fragments":["it"]},{"Key":"mean modifying","Fragments":["`is_empty?/1`"]},{"Key":"modifying `is_empty?/1`","Fragments":["to"]},{"Key":"`is_empty?/1` to","Fragments":["return"]},{"Key":"return `String.strip(str)","Fragments":["=="]},{"Key":"`String.strip(str) ==","Fragments":["\"\"`"]},{"Key":"\"\"` or","Fragments":["something,"]},{"Key":"something, which","Fragments":["I"]},{"Key":"less idiomatic","Fragments":["in"]},{"Key":"idiomatic in","Fragments":["Elixir"]},{"Key":"Elixir compared","Fragments":["to"]},{"Key":"definitions I","Fragments":["have"]},{"Key":" re","Fragments":["the"]},{"Key":"re the","Fragments":["Regex"]},{"Key":"Regex breaking,","Fragments":["@may"]},{"Key":"breaking, @may","Fragments":["[pointed"]},{"Key":"@may [pointed","Fragments":["out"]},{"Key":"[pointed out","Fragments":["that"]},{"Key":"0.13 expects","Fragments":["a"]},{"Key":"a tilde","Fragments":["`~r`"]},{"Key":"tilde `~r`","Fragments":["to"]},{"Key":"`~r` to","Fragments":["mark"]},{"Key":"Regex, not","Fragments":["a"]},{"Key":"a percent","Fragments":["`%r`](http://exercism.io/submissions/928be06edaf8aea5df839411)."]},{"Key":" Iteration2","Fragments":["was"]},{"Key":"Iteration2 was","Fragments":["a"]},{"Key":"a mistaken","Fragments":["submission"]},{"Key":"mistaken submission","Fragments":["as"]},{"Key":"as i","Fragments":["was"]},{"Key":"trying other","Fragments":["user"]},{"Key":"other user","Fragments":["submitted"]},{"Key":"user submitted","Fragments":["code"]},{"Key":"submitted code","Fragments":["with"]},{"Key":"suite in","Fragments":["the"]},{"Key":"does regexes,","Fragments":["I"]},{"Key":"regexes, I","Fragments":["switched"]},{"Key":"some non-regex-based","Fragments":["tests."]},{"Key":"non-regex-based tests.","Fragments":["Next"]},{"Key":"tests. Next","Fragments":["iteration,"]},{"Key":"Next iteration,","Fragments":["I'll"]},{"Key":"iteration, I'll","Fragments":["consider"]},{"Key":"break out","Fragments":["the"]},{"Key":"one only","Fragments":["iterates","has"]},{"Key":"iterates through","Fragments":["the"]},{"Key":"list once,","Fragments":["and"]},{"Key":"the semantics","Fragments":["of"]},{"Key":"semantics of","Fragments":["what"]},{"Key":"what constitutes","Fragments":["an"]},{"Key":"constitutes an","Fragments":["matching"]},{"Key":"an matching","Fragments":["anagram"]},{"Key":"matching anagram","Fragments":["are"]},{"Key":"anagram are","Fragments":["all"]},{"Key":"with Enum.into/3,","Fragments":["I"]},{"Key":"Enum.into/3, I","Fragments":["could"]},{"Key":"turn nucleotide_counts","Fragments":["into"]},{"Key":"nucleotide_counts into","Fragments":["a"]},{"Key":"one-liner without","Fragments":["the"]},{"Key":"of |\u003e,","Fragments":["I"]},{"Key":"|\u003e, I","Fragments":["don't"]},{"Key":"actually helping","Fragments":["your"]},{"Key":"helping your","Fragments":["readability"]},{"Key":"your readability","Fragments":["in"]},{"Key":"readability in","Fragments":["line"]},{"Key":"line 17.","Fragments":["In"]},{"Key":"17. In","Fragments":["other"]},{"Key":"words, simply","Fragments":["inlining"]},{"Key":"simply inlining","Fragments":["'strand'"]},{"Key":"inlining 'strand'","Fragments":["into"]},{"Key":"'strand' into","Fragments":["Enum.count"]},{"Key":"into Enum.count","Fragments":["seems","and"]},{"Key":"Enum.count seems","Fragments":["more"]},{"Key":"running elixir","Fragments":["0.13.x,"]},{"Key":"elixir 0.13.x,","Fragments":["check"]},{"Key":"0.13.x, check","Fragments":["out"]},{"Key":"the Enum.into/3","Fragments":["for"]},{"Key":"Enum.into/3 for","Fragments":["nucleotide_counts.","the","the"]},{"Key":"for nucleotide_counts.","Fragments":["I"]},{"Key":"nucleotide_counts. I","Fragments":["believe"]},{"Key":"believe it's","Fragments":["possible","customary"]},{"Key":"turn everything","Fragments":["below"]},{"Key":"everything below","Fragments":["line"]},{"Key":"below line","Fragments":["30","29"]},{"Key":"30 into","Fragments":["a"]},{"Key":"point, thanks","Fragments":["@timmy!"]},{"Key":"thanks @timmy!","Fragments":["My"]},{"Key":"@timmy! My","Fragments":["next"]},{"Key":"iteration manages","Fragments":["to"]},{"Key":"manages to","Fragments":["use"]},{"Key":"my `reduce/3`","Fragments":["for"]},{"Key":"the conditionals,","Fragments":["but"]},{"Key":"conditionals, but","Fragments":["I'm"]},{"Key":"first character","Fragments":["of","of","and"]},{"Key":"clause. I","Fragments":["would"]},{"Key":"more multi-clause","Fragments":["functions,","functions."]},{"Key":"multi-clause functions,","Fragments":["but"]},{"Key":" Tidying","Fragments":["up"]},{"Key":"Tidying up","Fragments":["just"]},{"Key":"up just","Fragments":["a"]},{"Key":"own `reduce/3`","Fragments":["to"]},{"Key":"`reduce/3` to","Fragments":["power"]},{"Key":"power the","Fragments":["other"]},{"Key":"having each","Fragments":["one"]},{"Key":"each one","Fragments":["recurse."]},{"Key":"one recurse.","Fragments":["Needing"]},{"Key":"recurse. Needing","Fragments":["to"]},{"Key":"Needing to","Fragments":["reverse"]},{"Key":"reverse before","Fragments":["using"]},{"Key":"little weird,","Fragments":["and"]},{"Key":"weird, and","Fragments":["overall"]},{"Key":"overall I","Fragments":["think"]},{"Key":"results (especially","Fragments":["`filter/2`)"]},{"Key":"(especially `filter/2`)","Fragments":["aren't"]},{"Key":"`filter/2`) aren't","Fragments":["as"]},{"Key":"aren't as","Fragments":["nice"]},{"Key":"as nice","Fragments":["to"]},{"Key":"Seems there's","Fragments":["no"]},{"Key":"mark some","Fragments":["parameters"]},{"Key":"some parameters","Fragments":["of"]},{"Key":"a `\u0026()`","Fragments":["anonymous"]},{"Key":"`\u0026()` anonymous","Fragments":["function"]},{"Key":" `count/1`","Fragments":["is"]},{"Key":"The `sanitize/1`","Fragments":["method"]},{"Key":"`sanitize/1` method","Fragments":["is"]},{"Key":"bit arbitrary","Fragments":["in"]},{"Key":"arbitrary in","Fragments":["what"]},{"Key":"it filters","Fragments":["out,"]},{"Key":"filters out,","Fragments":["maybe"]},{"Key":"out, maybe","Fragments":["you"]},{"Key":"a whitelist","Fragments":["based","of"]},{"Key":"whitelist based","Fragments":["on"]},{"Key":"on character","Fragments":["classes"]},{"Key":"classes instead?","Fragments":["Oh,"]},{"Key":"instead? Oh,","Fragments":["and"]},{"Key":"pattern includes","Fragments":["`\u0026`"]},{"Key":"includes `\u0026`","Fragments":["twice,"]},{"Key":"`\u0026` twice,","Fragments":["so"]},{"Key":"twice, so","Fragments":["that"]},{"Key":"fixed at","Fragments":["least."]},{"Key":" `summarize/1`","Fragments":["does"]},{"Key":"`summarize/1` does","Fragments":["run"]},{"Key":"does run","Fragments":["on"]},{"Key":"run on","Fragments":["a"]},{"Key":"bit, maybe","Fragments":["splurge"]},{"Key":"maybe splurge","Fragments":["on"]},{"Key":"splurge on","Fragments":["a"]},{"Key":"a method-body","Fragments":["instead"]},{"Key":"method-body instead","Fragments":["of"]},{"Key":"a oneline","Fragments":["definition?"]},{"Key":"oneline definition?","Fragments":["Maybe"]},{"Key":"definition? Maybe","Fragments":["it's"]},{"Key":"my font-size,","Fragments":["but"]},{"Key":"font-size, but","Fragments":["it"]},{"Key":"seem worthy","Fragments":["of"]},{"Key":"worthy of","Fragments":["a"]},{"Key":"more space","Fragments":["for"]},{"Key":" Short","Fragments":["and"]},{"Key":"Short and","Fragments":["elegant."]},{"Key":"The `a","Fragments":["=="]},{"Key":"b` comparison","Fragments":["is"]},{"Key":"comparison is","Fragments":["not","apt),"]},{"Key":"strictly correct,","Fragments":["in"]},{"Key":"correct, in","Fragments":["that"]},{"Key":"that `[1,","Fragments":["2]"]},{"Key":"2] ==","Fragments":["[1.0,"]},{"Key":"== [1.0,","Fragments":["2.0]`"]},{"Key":"[1.0, 2.0]`","Fragments":["is","is"]},{"Key":"2.0]` is","Fragments":["`true`","`false`."]},{"Key":"is `true`","Fragments":["in"]},{"Key":"`true` in","Fragments":["elixir"]},{"Key":"elixir while","Fragments":["`[1,"]},{"Key":"while `[1,","Fragments":["2]"]},{"Key":"2] ===","Fragments":["[1.0,"]},{"Key":"=== [1.0,","Fragments":["2.0]`"]},{"Key":"is `false`.","Fragments":["I'd"]},{"Key":"`false`. I'd","Fragments":["go"]},{"Key":"a `===`","Fragments":["comparison"]},{"Key":"`===` comparison","Fragments":["for"]},{"Key":"this usecase","Fragments":["even"]},{"Key":"usecase even","Fragments":["though"]},{"Key":"though none","Fragments":["of"]},{"Key":"the delivered","Fragments":["tests"]},{"Key":"delivered tests","Fragments":["highlight"]},{"Key":"tests highlight","Fragments":["the"]},{"Key":"highlight the","Fragments":["issue."]},{"Key":"The `contains_sequence?`","Fragments":["method"]},{"Key":"`contains_sequence?` method","Fragments":["is"]},{"Key":"is elegant.","Fragments":["Had"]},{"Key":"elegant. Had","Fragments":["never"]},{"Key":"Had never","Fragments":["seen"]},{"Key":"seen `hd/1`","Fragments":["before,"]},{"Key":"`hd/1` before,","Fragments":["neat."]},{"Key":"test \"really","Fragments":["shouting?\""]},{"Key":"\"really shouting?\"","Fragments":["do"]},{"Key":"assert Teenager.hey(\"!\")","Fragments":["=="]},{"Key":"Teenager.hey(\"!\") ==","Fragments":["\"Whatever.\""]},{"Key":"The ```equal?/2```","Fragments":["method"]},{"Key":"```equal?/2``` method","Fragments":["definition"]},{"Key":"definition seems","Fragments":["a"]},{"Key":"bit clumsy,","Fragments":["there"]},{"Key":"clumsy, there","Fragments":["must"]},{"Key":"The ```contains?```","Fragments":["method"]},{"Key":"```contains?``` method","Fragments":["does"]},{"Key":"method does","Fragments":["not","in"]},{"Key":"perform terribly","Fragments":["well,"]},{"Key":"terribly well,","Fragments":["an"]},{"Key":"well, an","Fragments":["alternative"]},{"Key":"alternative tail-recursive","Fragments":["algorithm"]},{"Key":"tail-recursive algorithm","Fragments":["would"]},{"Key":"algorithm would","Fragments":["probably"]},{"Key":"probably help","Fragments":["with"]},{"Key":"I've gone","Fragments":["for","through"]},{"Key":"gone for","Fragments":["mostly"]},{"Key":"for mostly","Fragments":["private"]},{"Key":"mostly private","Fragments":["methods"]},{"Key":"methods here,","Fragments":["but"]},{"Key":"but developing","Fragments":["and"]},{"Key":"developing and","Fragments":["testing"]},{"Key":"and testing","Fragments":["each"]},{"Key":"testing each","Fragments":["of"]},{"Key":"these internal","Fragments":["helper-methods"]},{"Key":"internal helper-methods","Fragments":["would"]},{"Key":"helper-methods would","Fragments":["probably"]},{"Key":"sense too","Fragments":["in"]},{"Key":"too in","Fragments":["a"]},{"Key":"concise than","Fragments":["what"]},{"Key":"I wrote,","Fragments":["elegant."]},{"Key":"The ```contains/2```","Fragments":["method"]},{"Key":"```contains/2``` method","Fragments":["reads"]},{"Key":"reads well,","Fragments":["I"]},{"Key":"the ```Enum.take/2```","Fragments":["method"]},{"Key":"```Enum.take/2``` method","Fragments":["to"]},{"Key":"to farm","Fragments":["out"]},{"Key":"farm out","Fragments":["most"]},{"Key":"out most","Fragments":["of"]},{"Key":"The ```count```","Fragments":["method"]},{"Key":"```count``` method","Fragments":["reads"]},{"Key":" ```to_words_list/1```","Fragments":["could"]},{"Key":"```to_words_list/1``` could","Fragments":["probably"]},{"Key":"readable regular","Fragments":["expression,"]},{"Key":"regular expression,","Fragments":["maybe"]},{"Key":"expression, maybe","Fragments":["try"]},{"Key":"maybe try","Fragments":["and"]},{"Key":"try and","Fragments":["use","develop"]},{"Key":" Switching","Fragments":["on"]},{"Key":"Switching on","Fragments":["the"]},{"Key":"array lengths","Fragments":["-"]},{"Key":"lengths -","Fragments":["hadn't"]},{"Key":"- hadn't","Fragments":["thought"]},{"Key":"of structuring","Fragments":["it","the"]},{"Key":"structuring it","Fragments":["that"]},{"Key":"way, interesting","Fragments":["to"]},{"Key":"to see.","Fragments":["I"]},{"Key":"see. I","Fragments":["must"]},{"Key":"must admit","Fragments":["I'm"]},{"Key":"admit I'm","Fragments":["not"]},{"Key":"finding the","Fragments":["```compare/2```"]},{"Key":"the ```compare/2```","Fragments":["method"]},{"Key":"```compare/2``` method","Fragments":["very"]},{"Key":"method very","Fragments":["readable"]},{"Key":"very readable","Fragments":["with"]},{"Key":"with so","Fragments":["many"]},{"Key":"many arguments","Fragments":["to"]},{"Key":"internal methods.","Fragments":["Only"]},{"Key":"methods. Only","Fragments":["counting"]},{"Key":"Only counting","Fragments":["each"]},{"Key":"counting each","Fragments":["list"]},{"Key":"once is","Fragments":["a"]},{"Key":" ```is_sublist?/2```","Fragments":["is"]},{"Key":"```is_sublist?/2``` is","Fragments":["simple"]},{"Key":"and elegant.","Fragments":["Well,"]},{"Key":"elegant. Well,","Fragments":["so"]},{"Key":"Well, so","Fragments":["is"]},{"Key":"so is","Fragments":["the"]},{"Key":"the ```/4```","Fragments":["version"]},{"Key":"```/4``` version","Fragments":["when"]},{"Key":"version when","Fragments":["it"]},{"Key":"comes down","Fragments":["to","to"]},{"Key":"I thinks","Fragments":["you"]},{"Key":"thinks you","Fragments":["should"]},{"Key":"use `a","Fragments":["==="]},{"Key":"`a ===","Fragments":["b`,"]},{"Key":"=== b`,","Fragments":["otherwise"]},{"Key":"b`, otherwise","Fragments":["`[1]"]},{"Key":"otherwise `[1]","Fragments":["=="]},{"Key":"`[1] ==","Fragments":["[1.0]`"]},{"Key":"== [1.0]`","Fragments":["which"]},{"Key":"[1.0]` which","Fragments":["doesn't"]},{"Key":"seem quite","Fragments":["right","nested."]},{"Key":"quite right","Fragments":["to"]},{"Key":"right to","Fragments":["me."]},{"Key":" Elegant","Fragments":["`sublist?/2`,"]},{"Key":"Elegant `sublist?/2`,","Fragments":["though"]},{"Key":"`sublist?/2`, though","Fragments":["the"]},{"Key":"the `Stream.chunk`","Fragments":["seems"]},{"Key":"`Stream.chunk` seems","Fragments":["like"]},{"Key":"expensive structure","Fragments":["to"]},{"Key":"this calculation.","Fragments":["Ah,"]},{"Key":"calculation. Ah,","Fragments":["have"]},{"Key":"Ah, have","Fragments":["just"]},{"Key":"it locally,","Fragments":["and"]},{"Key":"locally, and","Fragments":["it"]},{"Key":"is super-fast.","Fragments":["Neat!"]},{"Key":"the nit.","Fragments":["I"]},{"Key":"at yours","Fragments":["and"]},{"Key":"yours and","Fragments":["realized"]},{"Key":"and realized","Fragments":["I"]},{"Key":"made my","Fragments":["predicate"]},{"Key":"my predicate","Fragments":["method"]},{"Key":"method end","Fragments":["in"]},{"Key":"Thanks rud,","Fragments":["I'll","this"]},{"Key":"rud, I'll","Fragments":["fix"]},{"Key":"just playing","Fragments":["with","with"]},{"Key":"with lines","Fragments":["30-37"]},{"Key":"lines 30-37","Fragments":["at"]},{"Key":"30-37 at","Fragments":["this"]},{"Key":"the extremely","Fragments":["long"]},{"Key":"extremely long","Fragments":["regex"]},{"Key":"long regex","Fragments":["here"]},{"Key":"regex here","Fragments":["and"]},{"Key":" Ugh.","Fragments":["This"]},{"Key":"Ugh. This","Fragments":["submission"]},{"Key":"This submission","Fragments":["fails"]},{"Key":"submission fails","Fragments":["the"]},{"Key":"the \"ignore","Fragments":["punctuation\""]},{"Key":"\"ignore punctuation\"","Fragments":["and"]},{"Key":"punctuation\" and","Fragments":["\"German\""]},{"Key":"and \"German\"","Fragments":["test."]},{"Key":"\"German\" test.","Fragments":["I"]},{"Key":"test. I","Fragments":["haven't"]},{"Key":"haven't figured","Fragments":["out"]},{"Key":"out quite","Fragments":["why."]},{"Key":"hand, at","Fragments":["the"]},{"Key":"time of","Fragments":["submission,"]},{"Key":"of submission,","Fragments":["there"]},{"Key":"submission, there","Fragments":["was"]},{"Key":"all. I","Fragments":["filed"]},{"Key":"I filed","Fragments":["an"]},{"Key":"filed an","Fragments":["issue"]},{"Key":"have liked","Fragments":["to"]},{"Key":"liked to","Fragments":["use"]},{"Key":"the \"\u0026\"","Fragments":["short-hand"]},{"Key":"\"\u0026\" short-hand","Fragments":["for"]},{"Key":"short-hand for","Fragments":["the","it,"]},{"Key":"to decompose","Fragments":["the"]},{"Key":"decompose the","Fragments":["tuple."]},{"Key":" ...hmm...now","Fragments":["that"]},{"Key":"...hmm...now that","Fragments":["I"]},{"Key":"it again,","Fragments":["I"]},{"Key":" Fastest","Fragments":["way"]},{"Key":"Fastest way","Fragments":["to"]},{"Key":"to green,","Fragments":["I'd"]},{"Key":"green, I'd","Fragments":["still"]},{"Key":"better (clearer","Fragments":["+"]},{"Key":"(clearer +","Fragments":["without"]},{"Key":"+ without","Fragments":["regex)"]},{"Key":"look further","Fragments":["than"]},{"Key":"just last","Fragments":["char"]},{"Key":"- weird","Fragments":["indentation"]},{"Key":"weird indentation","Fragments":["on"]},{"Key":"indentation on","Fragments":["lines"]},{"Key":"lines 3,","Fragments":["4"]},{"Key":"3, 4","Fragments":["(should"]},{"Key":"4 (should","Fragments":["be"]},{"Key":"(should be","Fragments":["same"]},{"Key":"be same","Fragments":["as"]},{"Key":"as 6,","Fragments":["7)"]},{"Key":"- 2","Fragments":["ways"]},{"Key":"2 ways","Fragments":["to"]},{"Key":"to \"Whatever.\"","Fragments":["which"]},{"Key":"\"Whatever.\" which","Fragments":["is"]},{"Key":"smell to","Fragments":["me"]},{"Key":"you've made","Fragments":["both"]},{"Key":"made both","Fragments":["a"]},{"Key":"sublist and","Fragments":["superlist"]},{"Key":"and superlist","Fragments":["helper"]},{"Key":"superlist helper","Fragments":["method"]},{"Key":"helper method","Fragments":["-"]},{"Key":"method -","Fragments":["elegant."]},{"Key":"naming standard","Fragments":["with","used"]},{"Key":"standard with","Fragments":["the"]},{"Key":"underscore -","Fragments":["is"]},{"Key":"standard you've","Fragments":["picked"]},{"Key":"you've picked","Fragments":["up","up"]},{"Key":"not crazy","Fragments":["about"]},{"Key":"crazy about","Fragments":["the"]},{"Key":"regex because","Fragments":["it's","some"]},{"Key":"read. I","Fragments":["experimented","would"]},{"Key":"I experimented","Fragments":["with"]},{"Key":"experimented with","Fragments":["iterating"]},{"Key":"with iterating","Fragments":["over"]},{"Key":"over each","Fragments":["letter"]},{"Key":"and throwing","Fragments":["out"]},{"Key":"throwing out","Fragments":["the"]},{"Key":"ones that","Fragments":["aren't"]},{"Key":"aren't allowed,","Fragments":["but"]},{"Key":"allowed, but","Fragments":["I"]},{"Key":"like iterating","Fragments":["over"]},{"Key":"that. Probably","Fragments":["a"]},{"Key":"saw this","Fragments":["naming"]},{"Key":"this naming","Fragments":["standard"]},{"Key":"standard used","Fragments":["in"]},{"Key":"the Programming","Fragments":["Elixir","Elixir"]},{"Key":"Elixir book","Fragments":["but"]},{"Key":"book but","Fragments":["now"]},{"Key":"that Dave","Fragments":["Thomas"]},{"Key":"Thomas only","Fragments":["uses"]},{"Key":"only uses","Fragments":["this"]},{"Key":"this when","Fragments":["writing"]},{"Key":"writing helper","Fragments":["functions"]},{"Key":"which have","Fragments":["the"]},{"Key":"the publicly","Fragments":["exposed"]},{"Key":"publicly exposed","Fragments":["function."]},{"Key":"exposed function.","Fragments":["I'll"]},{"Key":"some spare","Fragments":["time."]},{"Key":"Interesting solution","Fragments":["without"]},{"Key":"solution without","Fragments":["regex!"]},{"Key":"the `ends_with?/2`","Fragments":["function"]},{"Key":"`ends_with?/2` function","Fragments":["to"]},{"Key":"to archive","Fragments":["the"]},{"Key":"archive the","Fragments":["same"]},{"Key":" String.ends_with?(input,","Fragments":["\"?\")","\"?\")"]},{"Key":"# =\u003e","Fragments":["true","6","6","10"]},{"Key":"have addressed","Fragments":["some"]},{"Key":"addressed some","Fragments":["of"]},{"Key":"in iteration","Fragments":["#2."]},{"Key":"transformation function","Fragments":["of","behaves","(third","so","to"]},{"Key":"of `Enum.into/3`","Fragments":["to"]},{"Key":"`Enum.into/3` to","Fragments":["build"]},{"Key":"`HashDict` though.","Fragments":["It"]},{"Key":"It only","Fragments":["receives"]},{"Key":"only receives","Fragments":["the"]},{"Key":"receives the","Fragments":["nucleotide"]},{"Key":"nucleotide as","Fragments":["a"]},{"Key":"parameter, not","Fragments":["the"]},{"Key":"target collection","Fragments":["which"]},{"Key":"collection which","Fragments":["has"]},{"Key":"be updated.","Fragments":["As"]},{"Key":"updated. As","Fragments":["far"]},{"Key":"tell, the","Fragments":["transformation"]},{"Key":"function behaves","Fragments":["like"]},{"Key":"behaves like","Fragments":["a"]},{"Key":"map, not","Fragments":["a"]},{"Key":"expect much","Fragments":["of"]},{"Key":"seems unnatural.","Fragments":["I'll"]},{"Key":"unnatural. I'll","Fragments":["try"]},{"Key":"try breaking","Fragments":["it"]},{"Key":"left a","Fragments":["comment"]},{"Key":"version because","Fragments":["it"]},{"Key":"be relevant","Fragments":["to"]},{"Key":"the conversation","Fragments":["there."]},{"Key":"conversation there.","Fragments":["The"]},{"Key":"there. The","Fragments":["code"]},{"Key":"is here,","Fragments":["though."]},{"Key":"here, though.","Fragments":["My"]},{"Key":"though. My","Fragments":["bad."]},{"Key":"The relevant","Fragments":["sentence"]},{"Key":"relevant sentence","Fragments":["in"]},{"Key":"sentence in","Fragments":["the"]},{"Key":"for Enum.into/3","Fragments":["is"]},{"Key":"Enum.into/3 is","Fragments":["this:"]},{"Key":" Inserts","Fragments":["the"]},{"Key":"Inserts the","Fragments":["given"]},{"Key":"given enumerable","Fragments":["into"]},{"Key":"enumerable into","Fragments":["a"]},{"Key":"a collectable","Fragments":["according"]},{"Key":"collectable according","Fragments":["to"]},{"Key":"The transformation","Fragments":["function"]},{"Key":"function (third","Fragments":["argument)"]},{"Key":"(third argument)","Fragments":["operates"]},{"Key":"argument) operates","Fragments":["on"]},{"Key":"operates on","Fragments":["each"]},{"Key":"list (first","Fragments":["argument)"]},{"Key":"(first argument)","Fragments":["as"]},{"Key":"argument) as","Fragments":["it"]},{"Key":"it inserts","Fragments":["them"]},{"Key":"inserts them","Fragments":["into"]},{"Key":"the collectable","Fragments":["(second"]},{"Key":"collectable (second","Fragments":["argument)."]},{"Key":"(second argument).","Fragments":["We're"]},{"Key":"argument). We're","Fragments":["given"]},{"Key":"We're given","Fragments":["the"]},{"Key":"list, @wilfredo.","Fragments":["We"]},{"Key":"@wilfredo. We","Fragments":["want"]},{"Key":"We want","Fragments":["to"]},{"Key":"map, so","Fragments":["we"]},{"Key":"empty one.","Fragments":["The"]},{"Key":"The key","Fragments":["is"]},{"Key":"is crafting","Fragments":["the"]},{"Key":"crafting the","Fragments":["transformation"]},{"Key":"correct key","Fragments":["and"]},{"Key":"and value","Fragments":["for"]},{"Key":"is clearer","Fragments":["this"]},{"Key":"clearer this","Fragments":["way."]},{"Key":"consider experimenting","Fragments":["with"]},{"Key":"the \u0026()","Fragments":["shorthand"]},{"Key":"\u0026() shorthand","Fragments":["syntax"]},{"Key":"17 to","Fragments":["see"]},{"Key":"it feels.","Fragments":["For"]},{"Key":"feels. For","Fragments":["me,"]},{"Key":"shorthand often","Fragments":["reduces"]},{"Key":"often reduces","Fragments":["readability,"]},{"Key":"reduces readability,","Fragments":["but"]},{"Key":"but here","Fragments":["I","there"]},{"Key":"here I","Fragments":["think"]},{"Key":"might help.","Fragments":["Ymmv."]},{"Key":"I refactored","Fragments":["the","this"]},{"Key":"nucleotide counters","Fragments":["initializer"]},{"Key":"counters initializer","Fragments":["to"]},{"Key":"initializer to","Fragments":["use"]},{"Key":"use `Enum.into/3`","Fragments":["instead"]},{"Key":"`Enum.into/3` instead","Fragments":["of"]},{"Key":"the pipelined","Fragments":["map."]},{"Key":"use `count`","Fragments":["in"]},{"Key":"in `nucleotide_counts`","Fragments":["but"]},{"Key":"`nucleotide_counts` but","Fragments":["I"]},{"Key":"I doesn't","Fragments":["feel"]},{"Key":"feel \"right\"","Fragments":["to"]},{"Key":"\"right\" to","Fragments":["go"]},{"Key":"go over","Fragments":["the"]},{"Key":"strand 4","Fragments":["times"]},{"Key":"times whereas","Fragments":["a"]},{"Key":"whereas a","Fragments":["single-pass"]},{"Key":"a single-pass","Fragments":["would"]},{"Key":"single-pass would","Fragments":["suffice."]},{"Key":"so what","Fragments":["if"]},{"Key":"if all","Fragments":["you"]},{"Key":"needed below","Fragments":["line"]},{"Key":"line 29","Fragments":["was"]},{"Key":"29 was","Fragments":["this:"]},{"Key":"\u003ccode\u003edef nucleotide_counts(strand)","Fragments":["do\u003c/code"]},{"Key":" \u0026nbsp;","Fragments":["\u0026nbsp;","\u0026nbsp;","\u0026nbsp;"]},{"Key":"\u0026nbsp; \u0026nbsp;","Fragments":["\u0026nbsp;","\u0026nbsp;\u003ccode\u003eEnum.into","\u003ccode\u003eStream.chunk(b,","\u003ccode\u003e|\u003e"]},{"Key":"\u0026nbsp; \u0026nbsp;\u003ccode\u003eEnum.into","Fragments":["@ervin,"]},{"Key":"\u0026nbsp;\u003ccode\u003eEnum.into @ervin,","Fragments":["%{},"]},{"Key":"@ervin, %{},","Fragments":["\u0026{\u00261,"]},{"Key":"%{}, \u0026{\u00261,","Fragments":["count(strand,"]},{"Key":"\u0026{\u00261, count(strand,","Fragments":["\u00261)}\u003c/code\u003e"]},{"Key":" \u003ccode\u003e","Fragments":["end\u003c/code\u003e"]},{"Key":"The private","Fragments":["helper"]},{"Key":"functions go","Fragments":["away,"]},{"Key":"go away,","Fragments":["and"]},{"Key":"away, and","Fragments":["there's"]},{"Key":"pass over","Fragments":["@ervin."]},{"Key":"over @ervin.","Fragments":["How"]},{"Key":"@ervin. How","Fragments":["does"]},{"Key":"that feel","Fragments":["to"]},{"Key":"I've contemplated","Fragments":["this"]},{"Key":"contemplated this","Fragments":["solution,"]},{"Key":"solution, it","Fragments":["is"]},{"Key":"very neat","Fragments":["and"]},{"Key":"shorter but","Fragments":["it"]},{"Key":"make 4","Fragments":["passes"]},{"Key":"4 passes","Fragments":["instead"]},{"Key":"passes instead","Fragments":["of"]},{"Key":"1 over","Fragments":["the"]},{"Key":"whole strand","Fragments":["to"]},{"Key":"strand to","Fragments":["count"]},{"Key":"can't get","Fragments":["out","further."]},{"Key":"get out","Fragments":["of"]},{"Key":"head the","Fragments":["fact"]},{"Key":"real DNA","Fragments":["strand"]},{"Key":"strand contains","Fragments":["nucleotides"]},{"Key":"contains nucleotides","Fragments":["by"]},{"Key":"nucleotides by","Fragments":["the"]},{"Key":"the millions.","Fragments":[":)"]},{"Key":"I'm calling","Fragments":["the"]},{"Key":"the \"naive","Fragments":["implementation\"."]},{"Key":"\"naive implementation\".","Fragments":["I'm"]},{"Key":"implementation\". I'm","Fragments":["trying"]},{"Key":"function dispatch,","Fragments":["so,"]},{"Key":"dispatch, so,","Fragments":["\"Look"]},{"Key":"so, \"Look","Fragments":["Maw,"]},{"Key":"\"Look Maw,","Fragments":["no"]},{"Key":"Maw, no","Fragments":["conditionals.\""]},{"Key":"no conditionals.\"","Fragments":["However,"]},{"Key":"conditionals.\" However,","Fragments":["I"]},{"Key":"I sense","Fragments":["that"]},{"Key":"`reduce` a","Fragments":["lot"]},{"Key":"lot more.","Fragments":["I"]},{"Key":"more. I","Fragments":["also"]},{"Key":"my append","Fragments":["could"]},{"Key":"append could","Fragments":["possibly"]},{"Key":"possibly get","Fragments":["by"]},{"Key":"get by","Fragments":["with"]},{"Key":"by with","Fragments":["one"]},{"Key":"less `reverse`.","Fragments":["But"]},{"Key":"`reverse`. But","Fragments":["for"]},{"Key":"But for","Fragments":["now,"]},{"Key":"for now,","Fragments":["tests"]},{"Key":"now, tests","Fragments":["pass."]},{"Key":"a totally","Fragments":["fair"]},{"Key":"totally fair","Fragments":["point."]},{"Key":"fair point.","Fragments":[":^)"]},{"Key":"The questions,","Fragments":["then,"]},{"Key":"questions, then,","Fragments":["are"]},{"Key":"then, are","Fragments":["will"]},{"Key":"are will","Fragments":["you"]},{"Key":"will you","Fragments":["ever"]},{"Key":"ever really","Fragments":["need"]},{"Key":"that use-case,","Fragments":["and"]},{"Key":"use-case, and","Fragments":["how"]},{"Key":"how do","Fragments":["you"]},{"Key":"the added","Fragments":["complexity"]},{"Key":"added complexity","Fragments":["in"]},{"Key":"the meantime.","Fragments":["And"]},{"Key":"meantime. And","Fragments":["those"]},{"Key":"And those","Fragments":["are"]},{"Key":"are completely","Fragments":["subjective,"]},{"Key":"completely subjective,","Fragments":["so"]},{"Key":"subjective, so","Fragments":["I'll"]},{"Key":"I'll slowly","Fragments":["walk"]},{"Key":"slowly walk","Fragments":["away."]},{"Key":"walk away.","Fragments":[":^)"]},{"Key":"looking very","Fragments":["good"]},{"Key":"- much","Fragments":["improved"]},{"Key":"much improved","Fragments":["from"]},{"Key":"improved from","Fragments":["version"]},{"Key":"elixir 0.13.x","Fragments":["world,"]},{"Key":"0.13.x world,","Fragments":["you"]},{"Key":"world, you","Fragments":["can"]},{"Key":"use Enum.into/3","Fragments":["for"]},{"Key":"the nucleotides_counts/1","Fragments":["function."]},{"Key":"14 which","Fragments":["I"]},{"Key":"fixed here.","Fragments":["The"]},{"Key":"The pr","Fragments":["to"]},{"Key":"pr to","Fragments":["fix","fix","fix","fix"]},{"Key":"got accepted","Fragments":["today,"]},{"Key":"accepted today,","Fragments":["so"]},{"Key":"today, so","Fragments":["it"]},{"Key":"fine in","Fragments":["the"]},{"Key":"future. This","Fragments":["is"]},{"Key":"correct return","Fragments":["value:"]},{"Key":"return value:","Fragments":["\"3035551212\""]},{"Key":"of nucleotides","Fragments":["in"]},{"Key":"up duplication","Fragments":["in"]},{"Key":"slice for","Fragments":["line_number"]},{"Key":"for line_number","Fragments":["to"]},{"Key":"line_number to","Fragments":["be"]},{"Key":"all positive","Fragments":["positions."]},{"Key":"good. For","Fragments":["your"]},{"Key":"For your","Fragments":["contains?/2"]},{"Key":"your contains?/2","Fragments":["function,"]},{"Key":"contains?/2 function,","Fragments":["you"]},{"Key":"using Stream.chunk/3","Fragments":["and"]},{"Key":"Stream.chunk/3 and","Fragments":["Enum.any?"]},{"Key":"and Enum.any?","Fragments":["See"]},{"Key":"Enum.any? See","Fragments":["what"]},{"Key":"See what","Fragments":["you","you","you"]},{"Key":"Exercism keeps","Fragments":["suggesting"]},{"Key":"keeps suggesting","Fragments":["your"]},{"Key":"suggesting your","Fragments":["projects"]},{"Key":"your projects","Fragments":["for"]},{"Key":"projects for","Fragments":["me"]},{"Key":"look at.","Fragments":[":^)"]},{"Key":"solution much","Fragments":["more"]},{"Key":"own. Very","Fragments":["nice"]},{"Key":"shorten (and","Fragments":["simplify)"]},{"Key":"(and simplify)","Fragments":["append/2,"]},{"Key":"simplify) append/2,","Fragments":["but"]},{"Key":"append/2, but","Fragments":["I'm"]},{"Key":"not satisfied.","Fragments":["I"]},{"Key":"satisfied. I","Fragments":["feel"]},{"Key":"feel certain","Fragments":["I'm"]},{"Key":"certain I'm","Fragments":["missing"]},{"Key":"it though","Fragments":["and"]},{"Key":"tests took","Fragments":["0.3"]},{"Key":"took 0.3","Fragments":["seconds"]},{"Key":"0.3 seconds","Fragments":["longer"]},{"Key":"seconds longer","Fragments":["to"]},{"Key":"longer to","Fragments":["run"]},{"Key":"run even","Fragments":["when"]},{"Key":"even when","Fragments":["I"]},{"Key":"I leave","Fragments":["in"]},{"Key":"leave in","Fragments":["the"]},{"Key":"defp contains?(_,","Fragments":["[]),"]},{"Key":"contains?(_, []),","Fragments":["do:"]},{"Key":"defp contains?(full,","Fragments":["sub)"]},{"Key":"contains?(full, sub)","Fragments":["do"]},{"Key":" sub_count","Fragments":["=","\u003e"]},{"Key":"sub_count =","Fragments":["Enum.count(sub)"]},{"Key":"sub_count \u003e","Fragments":["Enum.count(full)"]},{"Key":"\u003e Enum.count(full)","Fragments":["-\u003e"]},{"Key":" Stream.chunk(full,","Fragments":["sub_count,"]},{"Key":"Stream.chunk(full, sub_count,","Fragments":["1)"]},{"Key":"|\u003e Enum.any?(\u0026(\u00261","Fragments":["==="]},{"Key":"Enum.any?(\u0026(\u00261 ===","Fragments":["sub))"]},{"Key":"you fixed","Fragments":["the"]},{"Key":"line 17!","Fragments":["(Katrina"]},{"Key":"17! (Katrina","Fragments":["accepted"]},{"Key":"(Katrina accepted","Fragments":["my"]},{"Key":"accepted my","Fragments":["pr"]},{"Key":"my pr","Fragments":["to"]},{"Key":"learned on","Fragments":["the"]},{"Key":"the twitters","Fragments":["is"]},{"Key":"twitters is","Fragments":["that"]},{"Key":"that binaries/strings","Fragments":["have"]},{"Key":"binaries/strings have","Fragments":["something"]},{"Key":"something similar","Fragments":["to"]},{"Key":"the [h|t]","Fragments":["thing"]},{"Key":"[h|t] thing","Fragments":["for"]},{"Key":"for lists.","Fragments":["That","That,"]},{"Key":"lists. That","Fragments":["means"]},{"Key":"the \"tail\"","Fragments":["left"]},{"Key":"\"tail\" left","Fragments":["over."]},{"Key":"left over.","Fragments":["You"]},{"Key":"over. You","Fragments":["can"]},{"Key":"use byte_size/1","Fragments":["in"]},{"Key":"byte_size/1 in","Fragments":["a","guard","guard"]},{"Key":"clause. The","Fragments":["combination"]},{"Key":"The combination","Fragments":["of"]},{"Key":"things opens","Fragments":["up"]},{"Key":"some nice","Fragments":["possibilities"]},{"Key":"nice possibilities","Fragments":["for"]},{"Key":"possibilities for","Fragments":["multi-clause"]},{"Key":"for multi-clause","Fragments":["functions"]},{"Key":"multi-clause functions","Fragments":["around"]},{"Key":"functions around","Fragments":["number/1."]},{"Key":"small syntactical","Fragments":["readability"]},{"Key":"syntactical readability","Fragments":["changes"]},{"Key":" First,","Fragments":["please"]},{"Key":"First, please","Fragments":["do"]},{"Key":"do remove","Fragments":["the"]},{"Key":"initial \"1\"","Fragments":["in"]},{"Key":"\"1\" in","Fragments":["the"]},{"Key":"the doctest.","Fragments":["Katrina"]},{"Key":"doctest. Katrina","Fragments":["just"]},{"Key":"Katrina just","Fragments":["merged"]},{"Key":"just merged","Fragments":["a"]},{"Key":"merged a","Fragments":["pr","pr"]},{"Key":"a pr","Fragments":["to","to"]},{"Key":"good moments","Fragments":["happening."]},{"Key":"moments happening.","Fragments":["One"]},{"Key":"happening. One","Fragments":["thing"]},{"Key":"might suggest","Fragments":["is","is"]},{"Key":"the pretty","Fragments":["function,"]},{"Key":"pretty function,","Fragments":["simply"]},{"Key":"function, simply","Fragments":["doing"]},{"Key":"simply doing","Fragments":["a"]},{"Key":"number =","Fragments":["number(raw)"]},{"Key":"= number(raw)","Fragments":["above"]},{"Key":"number(raw) above","Fragments":["the"]},{"Key":"interpolated string","Fragments":["will"]},{"Key":"string will","Fragments":["save"]},{"Key":"will save","Fragments":["doing"]},{"Key":"save doing","Fragments":["it"]},{"Key":"functions very","Fragments":["much,"]},{"Key":"very much,","Fragments":["as"]},{"Key":"much, as","Fragments":["well"]},{"Key":"learned is","Fragments":["that"]},{"Key":"way similar","Fragments":["to"]},{"Key":"to [head|tail]","Fragments":["for"]},{"Key":"[head|tail] for","Fragments":["lists."]},{"Key":"lists. That,","Fragments":["combined"]},{"Key":"That, combined","Fragments":["with"]},{"Key":"the byte_size/1","Fragments":["function"]},{"Key":"byte_size/1 function","Fragments":["available"]},{"Key":"function available","Fragments":["in"]},{"Key":"clauses means","Fragments":["that"]},{"Key":"wouldn’t have","Fragments":["to"]},{"Key":"use to_char_list,","Fragments":["and"]},{"Key":"to_char_list, and","Fragments":["you"]},{"Key":"shortcut (basically","Fragments":["the"]},{"Key":"(basically the","Fragments":["same"]},{"Key":"have there)","Fragments":["and"]},{"Key":"there) and","Fragments":["it"]},{"Key":"it slowed","Fragments":["it"]},{"Key":"slowed it","Fragments":["down."]},{"Key":"use 4","Fragments":["spaces"]},{"Key":"4 spaces","Fragments":["to"]},{"Key":"spaces to","Fragments":["indent"]},{"Key":"to indent","Fragments":["code","line"]},{"Key":"indent code","Fragments":["or"]},{"Key":"or put","Fragments":["\"```\""]},{"Key":"put \"```\"","Fragments":["on"]},{"Key":"\"```\" on","Fragments":["the"]},{"Key":"and after","Fragments":["the"]},{"Key":"Interesting. Here's","Fragments":["the"]},{"Key":"approach I","Fragments":["took."]},{"Key":"took. I'm","Fragments":["curious"]},{"Key":"it's faster","Fragments":["for"]},{"Key":"faster for","Fragments":["your"]},{"Key":"your or","Fragments":["not."]},{"Key":" \u003ccode\u003edefp","Fragments":["contained_within?(a,"]},{"Key":"\u003ccode\u003edefp contained_within?(a,","Fragments":["b)"]},{"Key":"contained_within?(a, b)","Fragments":["do\u003c/code\u003e"]},{"Key":"\u0026nbsp; \u003ccode\u003eStream.chunk(b,","Fragments":["length(a),"]},{"Key":"\u003ccode\u003eStream.chunk(b, length(a),","Fragments":["1)\u003c/code\u003e"]},{"Key":"\u0026nbsp; \u003ccode\u003e|\u003e","Fragments":["Enum.any?(fn"]},{"Key":"\u003ccode\u003e|\u003e Enum.any?(fn","Fragments":["element"]},{"Key":"Enum.any?(fn element","Fragments":["-\u003e"]},{"Key":"element -\u003e","Fragments":["element"]},{"Key":"-\u003e element","Fragments":["==="]},{"Key":"element ===","Fragments":["a"]},{"Key":"=== a","Fragments":["end)\u003c/code\u003e"]},{"Key":"how did","Fragments":["you"]},{"Key":"so good","Fragments":["in"]},{"Key":"use Enum.count/2","Fragments":["directly"]},{"Key":"Enum.count/2 directly","Fragments":["in"]},{"Key":"filter step.","Fragments":["Also,"]},{"Key":"step. Also,","Fragments":["you"]},{"Key":"with Enum.into/3","Fragments":["for"]},{"Key":"nucleotide_counts function.","Fragments":["See"]},{"Key":"function. See","Fragments":["what"]},{"Key":"Yes, the","Fragments":["doctest"]},{"Key":"doctest was","Fragments":["definitely"]},{"Key":"definitely wrong.","Fragments":["Katrina"]},{"Key":"wrong. Katrina","Fragments":["merged"]},{"Key":"Katrina merged","Fragments":["a"]},{"Key":"of days","Fragments":["ago."]},{"Key":"that binaries","Fragments":["have"]},{"Key":"binaries have","Fragments":["an"]},{"Key":"list thing","Fragments":["that"]},{"Key":"that splits","Fragments":["the"]},{"Key":"splits the","Fragments":["head"]},{"Key":"head from","Fragments":["the"]},{"Key":"the tail.","Fragments":["That"]},{"Key":"tail. That","Fragments":["and"]},{"Key":"using byte_size/1","Fragments":["in"]},{"Key":"clauses can","Fragments":["make"]},{"Key":"of trim_num","Fragments":["to","and"]},{"Key":"trim_num to","Fragments":["do"]},{"Key":"work of","Fragments":["trim_num"]},{"Key":"trim_num and","Fragments":["valid_num?"]},{"Key":"and valid_num?","Fragments":["See"]},{"Key":"valid_num? See","Fragments":["what"]},{"Key":"I'm brand","Fragments":["new"]},{"Key":"brand new","Fragments":["to"]},{"Key":"input the","Fragments":["better."]},{"Key":"the better.","Fragments":["I'm"]},{"Key":"to grok","Fragments":["the"]},{"Key":"grok the","Fragments":["idioms."]},{"Key":"the idioms.","Fragments":["Thanks!"]},{"Key":"the 'cons'","Fragments":["binary"]},{"Key":"'cons' binary","Fragments":["operator"]},{"Key":"binary operator","Fragments":["here,"]},{"Key":"operator here,","Fragments":["especially"]},{"Key":"here, especially","Fragments":["the"]},{"Key":"matching version:","Fragments":["\u003c\u003c?1,"]},{"Key":"version: \u003c\u003c?1,","Fragments":["rest::binary\u003e\u003e."]},{"Key":"One suggestion","Fragments":["I"]},{"Key":"make is","Fragments":["to"]},{"Key":"use String.replace/4","Fragments":["instead"]},{"Key":"String.replace/4 instead","Fragments":["of"]},{"Key":"of Regex.scan/3.","Fragments":["The"]},{"Key":"Regex.scan/3. The","Fragments":["return"]},{"Key":"The return","Fragments":["is"]},{"Key":"return is","Fragments":["still"]},{"Key":"string so","Fragments":["you"]},{"Key":"the flatten/String.from_char_list","Fragments":["bit."]},{"Key":"a private,","Fragments":["multi-clause"]},{"Key":"private, multi-clause","Fragments":["function"]},{"Key":"for working","Fragments":["with"]},{"Key":"numbers after","Fragments":["they"]},{"Key":"after they","Fragments":["have"]},{"Key":"been cleaned","Fragments":["up"]},{"Key":"up which","Fragments":["uses"]},{"Key":"matching binary","Fragments":["'cons'"]},{"Key":"binary 'cons'","Fragments":["above"]},{"Key":"'cons' above","Fragments":["along"]},{"Key":"above along","Fragments":["with"]},{"Key":"with byte_size/1","Fragments":["in"]},{"Key":"clauses. To","Fragments":["my"]},{"Key":"my eye,","Fragments":["that"]},{"Key":"eye, that","Fragments":["makes"]},{"Key":"the ruleset/logic","Fragments":["easier"]},{"Key":"ruleset/logic easier","Fragments":["to"]},{"Key":"follow. Curious","Fragments":["what"]},{"Key":"Curious what","Fragments":["you","anyone's"]},{"Key":"with is","Fragments":["using","relying","that"]},{"Key":"using default","Fragments":["values"]},{"Key":"values -","Fragments":["see"]},{"Key":"- see","Fragments":["how"]},{"Key":"many private","Fragments":["functions"]},{"Key":"can eliminate","Fragments":["that"]},{"Key":"yes, as","Fragments":["you"]},{"Key":"you mentioned,","Fragments":["another"]},{"Key":"mentioned, another","Fragments":["thing"]},{"Key":"another thing","Fragments":["to"]},{"Key":"is relying","Fragments":["on"]},{"Key":"on reduce","Fragments":["more."]},{"Key":"reduce more.","Fragments":["Have"]},{"Key":"more. Have","Fragments":["fun!"]},{"Key":" Primeiramente","Fragments":["parabéns"]},{"Key":"Primeiramente parabéns","Fragments":["pelo"]},{"Key":"parabéns pelo","Fragments":["teu"]},{"Key":"pelo teu","Fragments":["avanço"]},{"Key":"teu avanço","Fragments":["no"]},{"Key":"avanço no","Fragments":["desafio"]},{"Key":"no desafio","Fragments":["listOps."]},{"Key":" Não","Fragments":["há"]},{"Key":"Não há","Fragments":["duvidas"]},{"Key":"há duvidas","Fragments":["de"]},{"Key":"duvidas de","Fragments":["que"]},{"Key":"de que","Fragments":["você"]},{"Key":"que você","Fragments":["resolveu"]},{"Key":"você resolveu","Fragments":["corretamente"]},{"Key":"resolveu corretamente","Fragments":["de"]},{"Key":"corretamente de","Fragments":["acordo"]},{"Key":"de acordo","Fragments":["com"]},{"Key":"acordo com","Fragments":["o"]},{"Key":"com o","Fragments":["enunciado."]},{"Key":" Mas","Fragments":["(e"]},{"Key":"Mas (e","Fragments":["sempre"]},{"Key":"(e sempre","Fragments":["tem"]},{"Key":"sempre tem","Fragments":["um"]},{"Key":"tem um","Fragments":["mas),","doctest"]},{"Key":"um mas),","Fragments":["na"]},{"Key":"mas), na","Fragments":["documentação"]},{"Key":"na documentação","Fragments":["do"]},{"Key":"documentação do","Fragments":["Elixir,"]},{"Key":"do Elixir,","Fragments":["tem"]},{"Key":"Elixir, tem","Fragments":["um"]},{"Key":"um doctest","Fragments":["que"]},{"Key":"doctest que","Fragments":["a"]},{"Key":"que a","Fragments":["tua"]},{"Key":"a tua","Fragments":["implementação","implementação"]},{"Key":"tua implementação","Fragments":["não","falha,"]},{"Key":"implementação não","Fragments":["passa:"]},{"Key":" Este","Fragments":["doctest"]},{"Key":"Este doctest","Fragments":["aqui,"]},{"Key":"doctest aqui,","Fragments":["a"]},{"Key":"aqui, a","Fragments":["tua"]},{"Key":"implementação falha,","Fragments":["e"]},{"Key":"falha, e","Fragments":["a"]},{"Key":"e a","Fragments":["minha"]},{"Key":"a minha","Fragments":["passa:"]},{"Key":"iex\u003e Enum.concat([[1,","Fragments":["[2],"]},{"Key":"Enum.concat([[1, [2],","Fragments":["3],"]},{"Key":"[2], 3],","Fragments":["[4],"]},{"Key":"3], [4],","Fragments":["[5,"]},{"Key":"[4], [5,","Fragments":["6]])"]},{"Key":" Quando","Fragments":["tu"]},{"Key":"Quando tu","Fragments":["fizer"]},{"Key":"tu fizer","Fragments":["uma"]},{"Key":"fizer uma","Fragments":["nova"]},{"Key":"uma nova","Fragments":["implementação"]},{"Key":"nova implementação","Fragments":["que"]},{"Key":"implementação que","Fragments":["implemente"]},{"Key":"que implemente","Fragments":["o"]},{"Key":"implemente o","Fragments":["concat"]},{"Key":"o concat","Fragments":["corretamente,"]},{"Key":"concat corretamente,","Fragments":["dai"]},{"Key":"corretamente, dai","Fragments":["eu"]},{"Key":"dai eu","Fragments":["vou"]},{"Key":"eu vou","Fragments":["dar"]},{"Key":"vou dar","Fragments":["o"]},{"Key":"dar o","Fragments":["\"Looks"]},{"Key":"o \"Looks","Fragments":["good\""]},{"Key":"\"Looks good\"","Fragments":["para"]},{"Key":"good\" para","Fragments":["ti"]},{"Key":"para ti","Fragments":["lá"]},{"Key":"ti lá","Fragments":["no"]},{"Key":"lá no","Fragments":["exercism.io"]},{"Key":"the tips!","Fragments":["I"]},{"Key":"tips! I","Fragments":["hadn't"]},{"Key":"hadn't checked","Fragments":["out"]},{"Key":"out either","Fragments":["of"]},{"Key":"functions yet,","Fragments":["now"]},{"Key":"yet, now","Fragments":["I"]},{"Key":"Hi diogo,","Fragments":["thanks"]},{"Key":"diogo, thanks","Fragments":["for"]},{"Key":"not behave","Fragments":["like"]},{"Key":"behave like","Fragments":["a"]},{"Key":"a `List.flatten`.","Fragments":["Please"]},{"Key":"`List.flatten`. Please","Fragments":["give"]},{"Key":"the look","Fragments":["of"]},{"Key":"look of","Fragments":["this"]},{"Key":"lot. I","Fragments":["had"]},{"Key":"regex `\\pL`","Fragments":["sequence,"]},{"Key":"`\\pL` sequence,","Fragments":["but"]},{"Key":"sequence, but","Fragments":["now"]},{"Key":"the custom","Fragments":["is"]},{"Key":"custom is","Fragments":["in"]},{"Key":"Elixir (couldn't","Fragments":["find"]},{"Key":"(couldn't find","Fragments":["any"]},{"Key":"any resources","Fragments":["around"]},{"Key":"resources around","Fragments":["style"]},{"Key":"around style","Fragments":["other"]},{"Key":"style other","Fragments":["than"]},{"Key":"than [this](https://github.com/niftyn8/elixir_style_guide),","Fragments":["which"]},{"Key":"[this](https://github.com/niftyn8/elixir_style_guide), which","Fragments":["has"]},{"Key":"has nothing","Fragments":["to"]},{"Key":"say on","Fragments":["the"]},{"Key":"the topic),","Fragments":["but"]},{"Key":"topic), but","Fragments":["my"]},{"Key":"my tendency","Fragments":["would"]},{"Key":"tendency would","Fragments":["have"]},{"Key":"indent line","Fragments":["21."]},{"Key":"line 21.","Fragments":["When"]},{"Key":"21. When","Fragments":["I"]},{"Key":"first scanned","Fragments":["the"]},{"Key":"scanned the","Fragments":["code"]},{"Key":"trailing `and`","Fragments":["so"]},{"Key":"`and` so","Fragments":["had"]},{"Key":"so had","Fragments":["a"]},{"Key":"trouble figuring","Fragments":["out"]},{"Key":"doing at","Fragments":["a","least"]},{"Key":"a glance.","Fragments":["I"]},{"Key":"glance. I","Fragments":["find"]},{"Key":"an indent","Fragments":["helps"]},{"Key":"indent helps","Fragments":["to"]},{"Key":"visually identify","Fragments":["the"]},{"Key":"the continuation","Fragments":["of"]},{"Key":"continuation of","Fragments":["a"]},{"Key":"domain concepts","Fragments":["are","are"]},{"Key":"concepts are","Fragments":["named,","expressed"]},{"Key":"are named,","Fragments":["so"]},{"Key":"named, so","Fragments":["the","it's"]},{"Key":"top-level method","Fragments":["can"]},{"Key":"can abstract","Fragments":["away"]},{"Key":"abstract away","Fragments":["the"]},{"Key":"the `upperCasePattern`","Fragments":["variable"]},{"Key":"`upperCasePattern` variable","Fragments":["wasn't"]},{"Key":"variable wasn't","Fragments":["necessary"]},{"Key":"wasn't necessary","Fragments":["since"]},{"Key":"one place,","Fragments":["and","but"]},{"Key":"place, and","Fragments":["the"]},{"Key":"actually longer","Fragments":["than"]},{"Key":"the literal,","Fragments":["but"]},{"Key":"literal, but","Fragments":["the"]},{"Key":"it. Regexes","Fragments":["are"]},{"Key":"really hard","Fragments":["to"]},{"Key":"read, so","Fragments":["giving","I'll"]},{"Key":"so giving","Fragments":["it"]},{"Key":"name really","Fragments":["helps"]},{"Key":"really helps","Fragments":["someone"]},{"Key":"helps someone","Fragments":["to"]},{"Key":"someone to","Fragments":["understand"]},{"Key":"doing without","Fragments":["having"]},{"Key":"that shouting","Fragments":["means"]},{"Key":"shouting means","Fragments":["\"all"]},{"Key":"means \"all","Fragments":["caps\"."]},{"Key":"\"all caps\".","Fragments":["It's"]},{"Key":"caps\". It's","Fragments":["a"]},{"Key":"idea, and","Fragments":["I'll"]},{"Key":"I'll probably","Fragments":["start"]},{"Key":"probably start","Fragments":["trying"]},{"Key":"start trying","Fragments":["to"]},{"Key":"have non-obvious","Fragments":["regexes"]},{"Key":"non-obvious regexes","Fragments":["in"]},{"Key":"Finally, one","Fragments":["point"]},{"Key":"of style:","Fragments":["Elixir"]},{"Key":"style: Elixir","Fragments":["borrows"]},{"Key":"Elixir borrows","Fragments":["a"]},{"Key":"borrows a","Fragments":["lot"]},{"Key":"of conventions","Fragments":["from"]},{"Key":"conventions from","Fragments":["Ruby,"]},{"Key":"from Ruby,","Fragments":["so"]},{"Key":"Ruby, so","Fragments":["generally"]},{"Key":"so generally","Fragments":["functions"]},{"Key":"generally functions","Fragments":["are"]},{"Key":"are written","Fragments":["in"]},{"Key":"in `snake_case`","Fragments":["while"]},{"Key":"`snake_case` while","Fragments":["modules"]},{"Key":"are `CamelCase`.","Fragments":["And"]},{"Key":"`CamelCase`. And","Fragments":["there's"]},{"Key":"And there's","Fragments":["also"]},{"Key":"for naming","Fragments":["predicate"]},{"Key":"a `?`,","Fragments":["so"]},{"Key":"`?`, so","Fragments":["`is_shouting?`"]},{"Key":"so `is_shouting?`","Fragments":["would"]},{"Key":"`is_shouting?` would","Fragments":["be"]},{"Key":"idiomatic I","Fragments":["believe."]},{"Key":"this. Don't","Fragments":["like"]},{"Key":"Don't like","Fragments":["that"]},{"Key":"to `reverse`","Fragments":["in"]},{"Key":"`reverse` in","Fragments":["the"]},{"Key":"the transforms,","Fragments":["but"]},{"Key":"transforms, but","Fragments":["since"]},{"Key":"since they're","Fragments":["always"]},{"Key":"they're always","Fragments":["appended"]},{"Key":"always appended","Fragments":["backwards"]},{"Key":"appended backwards","Fragments":["to"]},{"Key":"backwards to","Fragments":["the"]},{"Key":"Thanks @cathy,","Fragments":["I'm"]},{"Key":"@cathy, I'm","Fragments":["glad"]},{"Key":"the explaining","Fragments":["variable"]},{"Key":"explaining variable","Fragments":["upperCasePattern."]},{"Key":"variable upperCasePattern.","Fragments":["I"]},{"Key":"upperCasePattern. I","Fragments":["do"]},{"Key":"a useful","Fragments":["technique"]},{"Key":"useful technique","Fragments":["to"]},{"Key":"extract out","Fragments":["expressions"]},{"Key":"out expressions","Fragments":["into"]},{"Key":"expressions into","Fragments":["variables"]},{"Key":"into variables","Fragments":["with"]},{"Key":"variables with","Fragments":["a"]},{"Key":"explains their","Fragments":["intent."]},{"Key":"and followed","Fragments":["your"]},{"Key":"followed your","Fragments":["advice"]},{"Key":"advice and","Fragments":["changed"]},{"Key":"* Nice","Fragments":["use"]},{"Key":"could eliminate","Fragments":["the"]},{"Key":"the up","Fragments":["case"]},{"Key":"up case","Fragments":["in"]},{"Key":"in `shouting?`","Fragments":["with"]},{"Key":"`shouting?` with","Fragments":["a"]},{"Key":"a broader","Fragments":["regexp."]},{"Key":"broader regexp.","Fragments":["Is"]},{"Key":"regexp. Is","Fragments":["your"]},{"Key":"your `silent?`,","Fragments":["I"]},{"Key":"`silent?`, I","Fragments":["hadn't"]},{"Key":"Great code,","Fragments":["have"]},{"Key":"code, have","Fragments":["you"]},{"Key":"`Regex.scan` method","Fragments":["instead"]},{"Key":"method instead","Fragments":["of"]},{"Key":"of `Regex.split`?","Fragments":["Maybe"]},{"Key":"`Regex.split`? Maybe","Fragments":["with"]},{"Key":"Maybe with","Fragments":["`scan`"]},{"Key":"with `scan`","Fragments":["you"]},{"Key":"`scan` you","Fragments":["can"]},{"Key":"readable regex.","Fragments":["Take"]},{"Key":"regex. Take","Fragments":["a"]},{"Key":"look also","Fragments":["at"]},{"Key":"also at","Fragments":["method"]},{"Key":"at method","Fragments":["`List.foldl`,"]},{"Key":"method `List.foldl`,","Fragments":["it"]},{"Key":"`List.foldl`, it","Fragments":["may"]},{"Key":"your Hash","Fragments":["creation"]},{"Key":"Hash creation","Fragments":["code."]},{"Key":"creation code.","Fragments":["Cheers!"]},{"Key":"very concise","Fragments":["solution!"]},{"Key":"concise solution!","Fragments":["However,"]},{"Key":"solution! However,","Fragments":["the"]},{"Key":"of named","Fragments":["abstractions"]},{"Key":"named abstractions","Fragments":["can"]},{"Key":"abstractions can","Fragments":["make"]},{"Key":"reason about","Fragments":["it","this"]},{"Key":"dive in","Fragments":["and"]},{"Key":"and mentally","Fragments":["parse"]},{"Key":"mentally parse","Fragments":["each"]},{"Key":"parse each","Fragments":["of"]},{"Key":"README talks","Fragments":["about"]},{"Key":"talks about","Fragments":["\"shouting\""]},{"Key":"about \"shouting\"","Fragments":["or"]},{"Key":"\"shouting\" or","Fragments":["\"asking"]},{"Key":"or \"asking","Fragments":["questions\","]},{"Key":"\"asking questions\",","Fragments":["but"]},{"Key":"questions\", but","Fragments":["none"]},{"Key":"but none","Fragments":["of"]},{"Key":"those domain","Fragments":["concepts"]},{"Key":"are expressed","Fragments":["directly"]},{"Key":"expressed directly","Fragments":["in"]},{"Key":"code. Do","Fragments":["you"]},{"Key":"by adopting","Fragments":["the"]},{"Key":"adopting the","Fragments":["language"]},{"Key":"Great solution.","Fragments":["All"]},{"Key":"solution. All","Fragments":["the"]},{"Key":"abstractions are","Fragments":["nicely"]},{"Key":"are nicely","Fragments":["named,"]},{"Key":"nicely named,","Fragments":["so"]},{"Key":"and reason","Fragments":["about."]},{"Key":"is [`String.ends_with?`](http://elixir-lang.org/docs/stable/elixir/String.html#ends_with?/2),","Fragments":["which"]},{"Key":"[`String.ends_with?`](http://elixir-lang.org/docs/stable/elixir/String.html#ends_with?/2), which","Fragments":["could"]},{"Key":"of `at`","Fragments":["for"]},{"Key":"`at` for","Fragments":["a"]},{"Key":" `ends_with?`","Fragments":["also"]},{"Key":"`ends_with?` also","Fragments":["gives"]},{"Key":"gives us","Fragments":["an"]},{"Key":"us an","Fragments":["indication"]},{"Key":"an indication","Fragments":["of"]},{"Key":"indication of","Fragments":["an"]},{"Key":"idiom you","Fragments":["could"]},{"Key":"to good","Fragments":["effect"]},{"Key":"good effect","Fragments":["in"]},{"Key":"effect in","Fragments":["this"]},{"Key":"this example:","Fragments":["ending"]},{"Key":"example: ending","Fragments":["predicate"]},{"Key":"the just_letters","Fragments":["function"]},{"Key":"just_letters function","Fragments":["function."]},{"Key":"for is_yelling","Fragments":["to"]},{"Key":"is_yelling to","Fragments":["call"]},{"Key":"call just_letters","Fragments":["a"]},{"Key":"just_letters a","Fragments":["single"]},{"Key":"single time","Fragments":["instead"]},{"Key":"time instead","Fragments":["of"]},{"Key":" thanks!","Fragments":["...."]},{"Key":"thanks! ....","Fragments":["I"]},{"Key":".... I","Fragments":["wil"]},{"Key":"I wil","Fragments":["try"]},{"Key":"wil try","Fragments":["to"]},{"Key":"to cal","Fragments":["`just_letters/1`"]},{"Key":"cal `just_letters/1`","Fragments":["just"]},{"Key":"`just_letters/1` just","Fragments":["once"]},{"Key":" @julien,","Fragments":["next"]},{"Key":"@julien, next","Fragments":["time"]},{"Key":"next time","Fragments":["we"]},{"Key":"we hang","Fragments":["out"]},{"Key":"hang out","Fragments":["I'd"]},{"Key":"out I'd","Fragments":["love"]},{"Key":"hear what","Fragments":["@julien"]},{"Key":"what @julien","Fragments":["is"]},{"Key":"@julien is","Fragments":["recommending."]},{"Key":"is recommending.","Fragments":["You've"]},{"Key":"recommending. You've","Fragments":["always"]},{"Key":"You've always","Fragments":["been"]},{"Key":"been nice","Fragments":["about","as"]},{"Key":"nice about","Fragments":["explaining"]},{"Key":"about explaining","Fragments":["functional"]},{"Key":"explaining functional","Fragments":["concepts"]},{"Key":"functional concepts","Fragments":["to"]},{"Key":"concepts to","Fragments":["me"]},{"Key":"in small","Fragments":["words."]},{"Key":"small words.","Fragments":[":)"]},{"Key":"Like the","Fragments":["`get_key`"]},{"Key":"the `get_key`","Fragments":["though"]},{"Key":"`get_key` though","Fragments":["the"]},{"Key":"name could","Fragments":["probably"]},{"Key":"more telling","Fragments":["if"]},{"Key":"telling if","Fragments":["you"]},{"Key":"you renamed","Fragments":["it"]},{"Key":"renamed it","Fragments":["to"]},{"Key":"something related","Fragments":["to"]},{"Key":"it's anagram","Fragments":["nature."]},{"Key":"anagram nature.","Fragments":["`sorted_chars`,"]},{"Key":"nature. `sorted_chars`,","Fragments":["perhaps?"]},{"Key":"This line","Fragments":["is"]},{"Key":"bit heavy,","Fragments":["maybe"]},{"Key":"heavy, maybe","Fragments":["consider"]},{"Key":"consider reworking","Fragments":["it?"]},{"Key":" ```target","Fragments":["=="]},{"Key":"```target ==","Fragments":["get_key(candidate)"]},{"Key":"== get_key(candidate)","Fragments":["and"]},{"Key":"get_key(candidate) and","Fragments":["downbase"]},{"Key":"and downbase","Fragments":["!="]},{"Key":"downbase !=","Fragments":["String.downcase"]},{"Key":"!= String.downcase","Fragments":["candidate```"]},{"Key":"Code is","Fragments":["very"]},{"Key":"with reusing","Fragments":["`nucleotide_counts`"]},{"Key":"reusing `nucleotide_counts`","Fragments":["in"]},{"Key":"`nucleotide_counts` in","Fragments":["the"]},{"Key":"`count`, as","Fragments":["the"]},{"Key":"the algorithms","Fragments":["are"]},{"Key":"algorithms are","Fragments":["the"]},{"Key":"same, and","Fragments":["the"]},{"Key":"is (most","Fragments":["likely)"]},{"Key":"(most likely)","Fragments":["negligible."]},{"Key":"likely) negligible.","Fragments":["What"]},{"Key":"negligible. What","Fragments":["do"]},{"Key":"The `Enum.reduce`","Fragments":["calls"]},{"Key":"`Enum.reduce` calls","Fragments":["might"]},{"Key":"calls might","Fragments":["also"]},{"Key":"the fun","Fragments":["of"]},{"Key":"fun of","Fragments":["it."]},{"Key":" @dawn","Fragments":["@dawn","count(list,"]},{"Key":"@dawn @dawn","Fragments":["is"]},{"Key":"@dawn is","Fragments":["suggesting"]},{"Key":"is suggesting","Fragments":["I"]},{"Key":"rearrange things","Fragments":["so"]},{"Key":"@dawn count(list,","Fragments":["non_neg_integer)"]},{"Key":"count(list, non_neg_integer)","Fragments":["::"]},{"Key":"non_neg_integer) ::","Fragments":["non_neg_integer"]},{"Key":"def count([],","Fragments":["acc"]},{"Key":"count([], acc","Fragments":["\\\\"]},{"Key":"acc \\\\","Fragments":["0),"]},{"Key":"\\\\ 0),","Fragments":["do:"]},{"Key":"0), do:","Fragments":["acc"]},{"Key":"def count([_|tail],","Fragments":["acc),"]},{"Key":"count([_|tail], acc),","Fragments":["do:"]},{"Key":"do: count(tail,","Fragments":["acc+1)"]},{"Key":"it. One","Fragments":["pro"]},{"Key":"One pro","Fragments":["is"]},{"Key":"pro is","Fragments":["fewer"]},{"Key":"is fewer","Fragments":["definitions,"]},{"Key":"fewer definitions,","Fragments":["as"]},{"Key":"definitions, as","Fragments":["mentioned."]},{"Key":"as mentioned.","Fragments":["One"]},{"Key":"mentioned. One","Fragments":["con"]},{"Key":"One con","Fragments":["is"]},{"Key":"con is","Fragments":["the"]},{"Key":"in signature","Fragments":["allows:"]},{"Key":"iex(2)\u003e ListOps.count([1,3,5,7],","Fragments":["4)"]},{"Key":"iex(3)\u003e ListOps.count([1,3,5,7],","Fragments":["-1)"]},{"Key":"seem right,","Fragments":["but"]},{"Key":"there may","Fragments":["be"]},{"Key":"around it.","Fragments":["I'm"]},{"Key":"The `to_unicode_list`","Fragments":["should"]},{"Key":"`to_unicode_list` should","Fragments":["probably"]},{"Key":"like `sorted_graphemes`,","Fragments":["as"]},{"Key":"`sorted_graphemes`, as","Fragments":["it's"]},{"Key":"than converting","Fragments":["to"]},{"Key":"The `Enum.filter`","Fragments":["could"]},{"Key":"`Enum.filter` could","Fragments":["maybe"]},{"Key":"maybe benefit","Fragments":["from"]},{"Key":"from `|\u003e`","Fragments":["to"]},{"Key":"`|\u003e` to","Fragments":["skip"]},{"Key":"to skip","Fragments":["a"]},{"Key":"skip a","Fragments":["bit"]},{"Key":" Succinct","Fragments":["and"]},{"Key":"Succinct and","Fragments":["to"]},{"Key":"the point,","Fragments":["I"]},{"Key":"The `match`","Fragments":["method"]},{"Key":"`match` method","Fragments":["could"]},{"Key":"of newlines,","Fragments":["maybe"]},{"Key":"newlines, maybe","Fragments":["throw","just"]},{"Key":"maybe throw","Fragments":["a","in"]},{"Key":"a `|\u003e`","Fragments":["in"]},{"Key":"`|\u003e` in","Fragments":["there"]},{"Key":"Only nit","Fragments":["I"]},{"Key":"have here:","Fragments":["Maybe"]},{"Key":"here: Maybe","Fragments":["use"]},{"Key":"Maybe use","Fragments":["`Dict.update`"]},{"Key":"use `Dict.update`","Fragments":["instead"]},{"Key":"`Dict.update` instead","Fragments":["of"]},{"Key":"of `HashDict.update`,","Fragments":["no"]},{"Key":"`HashDict.update`, no","Fragments":["reason"]},{"Key":"to restrict","Fragments":["the"]},{"Key":"restrict the","Fragments":["type"]},{"Key":"dictionary you","Fragments":["work"]},{"Key":"you work","Fragments":["on."]},{"Key":"work on.","Fragments":["Though,"]},{"Key":"on. Though,","Fragments":["duh,"]},{"Key":"Though, duh,","Fragments":["you"]},{"Key":"duh, you","Fragments":["create"]},{"Key":"create it","Fragments":["yourself"]},{"Key":"it yourself","Fragments":["in"]},{"Key":"yourself in","Fragments":["the"]},{"Key":"very next","Fragments":["line."]},{"Key":"next line.","Fragments":["Oh"]},{"Key":"line. Oh","Fragments":["well."]},{"Key":"comprehension here,","Fragments":["I"]},{"Key":"I too","Fragments":["rarely"]},{"Key":"too rarely","Fragments":["reach"]},{"Key":"rarely reach","Fragments":["for"]},{"Key":"The `sorted_str`","Fragments":["could"]},{"Key":"`sorted_str` could","Fragments":["do"]},{"Key":"few newlines,","Fragments":["maybe"]},{"Key":"just change","Fragments":["the"]},{"Key":"each `|\u003e`.","Fragments":["Helps"]},{"Key":"`|\u003e`. Helps","Fragments":["humans"]},{"Key":"Helps humans","Fragments":["read."]},{"Key":"The `anagram?`","Fragments":["method"]},{"Key":"`anagram?` method","Fragments":["should"]},{"Key":"method should","Fragments":["probably","probably"]},{"Key":"have readable","Fragments":["arguments"]},{"Key":"readable arguments","Fragments":["(subject,"]},{"Key":"arguments (subject,","Fragments":["rather"]},{"Key":"(subject, rather","Fragments":["than"]},{"Key":"than s,","Fragments":["etc.)."]},{"Key":"s, etc.).","Fragments":["In"]},{"Key":"etc.). In","Fragments":["addition,"]},{"Key":"In addition,","Fragments":["it"]},{"Key":"addition, it","Fragments":["could"]},{"Key":"more elegantly","Fragments":["implemented"]},{"Key":"elegantly implemented","Fragments":["with"]},{"Key":"multiple `anagram?`","Fragments":["methods"]},{"Key":"`anagram?` methods","Fragments":["with"]},{"Key":"with conditions","Fragments":["on"]},{"Key":"`concat` does","Fragments":["borrow"]},{"Key":"does borrow","Fragments":["from"]},{"Key":"borrow from","Fragments":["`List`,"]},{"Key":"from `List`,","Fragments":["doesn't"]},{"Key":"`List`, doesn't","Fragments":["it?"]},{"Key":"doesn't it?","Fragments":["Try"]},{"Key":"it? Try","Fragments":["and"]},{"Key":"Try and","Fragments":["rebuild"]},{"Key":"and rebuild","Fragments":["it"]},{"Key":"rebuild it","Fragments":["using"]},{"Key":"The `p`","Fragments":["at"]},{"Key":"`p` at","Fragments":["the"]},{"Key":"the `defp`","Fragments":["methods","already","already"]},{"Key":"`defp` methods","Fragments":["seems"]},{"Key":"methods seems","Fragments":["unnecessary"]},{"Key":"seems unnecessary","Fragments":["to"]},{"Key":"me, feel","Fragments":["free"]},{"Key":"Maybe extract","Fragments":["the"]},{"Key":"the \"chill","Fragments":["out\""]},{"Key":"\"chill out\"","Fragments":["condition"]},{"Key":"out\" condition","Fragments":["to"]},{"Key":"condition to","Fragments":["a"]},{"Key":"readable helper","Fragments":["method"]},{"Key":"Good structure","Fragments":["of"]},{"Key":"`hey` method.","Fragments":["The"]},{"Key":"method. The","Fragments":["`statement?`"]},{"Key":"The `statement?`","Fragments":["name"]},{"Key":"`statement?` name","Fragments":["is"]},{"Key":"an overloaded","Fragments":["term"]},{"Key":"overloaded term","Fragments":["in"]},{"Key":"in programming.","Fragments":["Maybe"]},{"Key":"programming. Maybe","Fragments":["`punctuated?`"]},{"Key":"Maybe `punctuated?`","Fragments":["could"]},{"Key":"`punctuated?` could","Fragments":["do"]},{"Key":" Bonus-nits","Fragments":["for"]},{"Key":"Bonus-nits for","Fragments":["the"]},{"Key":"Also, always","Fragments":["feel"]},{"Key":"always feel","Fragments":["free"]},{"Key":"to introduce","Fragments":["readable","the"]},{"Key":"introduce readable","Fragments":["private"]},{"Key":"readable private","Fragments":["helper"]},{"Key":"do chunks","Fragments":["of"]},{"Key":"chunks of","Fragments":["the"]},{"Key":"rather readable","Fragments":["implementation."]},{"Key":"sure importing","Fragments":["methods"]},{"Key":"importing methods","Fragments":["makes"]},{"Key":"methods makes","Fragments":["everything"]},{"Key":"makes everything","Fragments":["more"]},{"Key":"but kudos","Fragments":["for"]},{"Key":"kudos for","Fragments":["using"]},{"Key":"the `only:`","Fragments":["option."]},{"Key":"is neat,","Fragments":["maybe"]},{"Key":"neat, maybe","Fragments":["the"]},{"Key":"the `split`","Fragments":["call","and"]},{"Key":"`split` call","Fragments":["could"]},{"Key":"call could","Fragments":["be"]},{"Key":"another simple","Fragments":["private"]},{"Key":"simple private","Fragments":["method."]},{"Key":"with `do_`,","Fragments":["you"]},{"Key":"`do_`, you","Fragments":["can"]},{"Key":"easily call","Fragments":["it"]},{"Key":"it `count/2`","Fragments":["while"]},{"Key":"`count/2` while","Fragments":["leaving"]},{"Key":"while leaving","Fragments":["the"]},{"Key":"leaving the","Fragments":["published"]},{"Key":"the published","Fragments":["method"]},{"Key":"published method","Fragments":["as"]},{"Key":"as `count/1`","Fragments":["without"]},{"Key":"`count/1` without","Fragments":["confusion,"]},{"Key":"without confusion,","Fragments":["I"]},{"Key":"confusion, I","Fragments":["find."]},{"Key":"Hi @jaunita","Fragments":["thank"]},{"Key":"@jaunita thank","Fragments":["you"]},{"Key":"`split` and","Fragments":["`flat_map`"]},{"Key":"and `flat_map`","Fragments":["being"]},{"Key":"`flat_map` being","Fragments":["confuse,"]},{"Key":"being confuse,","Fragments":["I"]},{"Key":"confuse, I","Fragments":["extracted"]},{"Key":"extracted both","Fragments":["to"]},{"Key":"the `do_`,","Fragments":["I"]},{"Key":"`do_`, I","Fragments":["use"]},{"Key":"a kind","Fragments":["of","of"]},{"Key":"elixir. Give","Fragments":["a"]},{"Key":"Give a","Fragments":["look"]},{"Key":"in [Regex.replace/4](https://github.com/elixir-lang/elixir/blob/28264c67923cf59f1fa96c104812aee234da2af3/lib/elixir/lib/regex.ex#L400-L423)","Fragments":["for"]},{"Key":"[Regex.replace/4](https://github.com/elixir-lang/elixir/blob/28264c67923cf59f1fa96c104812aee234da2af3/lib/elixir/lib/regex.ex#L400-L423) for","Fragments":["instance."]},{"Key":"gone through","Fragments":["and"]},{"Key":"implemented everything","Fragments":["that"]},{"Key":"everything that","Fragments":["I","isn't","I"]},{"Key":"can with","Fragments":["reduce/3."]},{"Key":"with reduce/3.","Fragments":["I"]},{"Key":"reduce/3. I","Fragments":["suspect"]},{"Key":"suspect that","Fragments":["if"]},{"Key":"I twisted","Fragments":["my"]},{"Key":"twisted my","Fragments":["brain"]},{"Key":"brain a","Fragments":["bit"]},{"Key":"could update","Fragments":["concat/1"]},{"Key":"update concat/1","Fragments":["(or"]},{"Key":"concat/1 (or","Fragments":["maybe"]},{"Key":"(or maybe","Fragments":["concat/2)"]},{"Key":"maybe concat/2)","Fragments":["to"]},{"Key":"concat/2) to","Fragments":["use"]},{"Key":"reduce as","Fragments":["well...but"]},{"Key":"as well...but","Fragments":["I'm"]},{"Key":"well...but I'm","Fragments":["out"]},{"Key":"took care","Fragments":["to"]},{"Key":"function short-hand","Fragments":["in","for"]},{"Key":"short-hand in","Fragments":["places"]},{"Key":"in places","Fragments":["where"]},{"Key":"doesn't hinder","Fragments":["readability,"]},{"Key":"hinder readability,","Fragments":["but"]},{"Key":"to criticism","Fragments":["on"]},{"Key":"criticism on","Fragments":["those"]},{"Key":"only exception","Fragments":["to"]},{"Key":"above is","Fragments":["is"]},{"Key":"is is","Fragments":["count/1."]},{"Key":"is count/1.","Fragments":["I"]},{"Key":"count/1. I","Fragments":["really"]},{"Key":"first \u00261","Fragments":["parameter."]},{"Key":"The `stripPunctuation`","Fragments":["method"]},{"Key":"`stripPunctuation` method","Fragments":["should"]},{"Key":"whitelist of","Fragments":["allowed"]},{"Key":"of allowed","Fragments":["letters,"]},{"Key":"allowed letters,","Fragments":["rather"]},{"Key":"letters, rather","Fragments":["than"]},{"Key":"include all","Fragments":["\"bad\""]},{"Key":"all \"bad\"","Fragments":["characters"]},{"Key":"\"bad\" characters","Fragments":["you"]},{"Key":"avoid. Character","Fragments":["sets"]},{"Key":"Character sets","Fragments":["can"]},{"Key":"sets can","Fragments":["be"]},{"Key":"as `~r/[^-[:lower:][:digit:]]/`","Fragments":["which"]},{"Key":"`~r/[^-[:lower:][:digit:]]/` which","Fragments":["includes"]},{"Key":"which includes","Fragments":["everything"]},{"Key":"includes everything","Fragments":["that"]},{"Key":"a lower-case","Fragments":["letter,"]},{"Key":"lower-case letter,","Fragments":["a"]},{"Key":"a dash","Fragments":["character."]},{"Key":"On naming","Fragments":["methods:"]},{"Key":"naming methods:","Fragments":["I"]},{"Key":"methods: I","Fragments":["believe"]},{"Key":"it's customary","Fragments":["to"]},{"Key":"customary to","Fragments":["use"]},{"Key":"use `under_score`","Fragments":["naming"]},{"Key":"`under_score` naming","Fragments":["rather"]},{"Key":"naming rather","Fragments":["than"]},{"Key":"than `camelCase`","Fragments":["in"]},{"Key":"`camelCase` in","Fragments":["elixir"]},{"Key":"elixir programs.","Fragments":["Might"]},{"Key":"programs. Might","Fragments":["as"]},{"Key":"Might as","Fragments":["well"]},{"Key":"well go","Fragments":["with"]},{"Key":"flow on","Fragments":["that"]},{"Key":"Do like","Fragments":["the","the"]},{"Key":"`|\u003e` flow","Fragments":["in"]},{"Key":"flow in","Fragments":["the"]},{"Key":"`count` method,","Fragments":["maybe"]},{"Key":"method, maybe","Fragments":["throw"]},{"Key":"throw in","Fragments":["some"]},{"Key":"some newlines","Fragments":["to","for"]},{"Key":"newlines to","Fragments":["increase"]},{"Key":" @florencio,","Fragments":["good"]},{"Key":"@florencio, good","Fragments":["feedback!"]},{"Key":"good feedback!","Fragments":["I’ll"]},{"Key":"feedback! I’ll","Fragments":["play"]},{"Key":"I’ll play","Fragments":["around"]},{"Key":"The `stats`","Fragments":["and"]},{"Key":"`stats` and","Fragments":["`statscompare`"]},{"Key":"and `statscompare`","Fragments":["methods"]},{"Key":"`statscompare` methods","Fragments":["probably"]},{"Key":"methods probably","Fragments":["need"]},{"Key":"comment or","Fragments":["to,"]},{"Key":"or to,","Fragments":["telling"]},{"Key":"to, telling","Fragments":["why"]},{"Key":"telling why","Fragments":["they"]},{"Key":"to anagram","Fragments":["comparison"]},{"Key":"anagram comparison","Fragments":["which"]},{"Key":"comparison which","Fragments":["might"]},{"Key":"can pull","Fragments":["out"]},{"Key":"codepoints of","Fragments":["a"]},{"Key":"string, sort","Fragments":["it,"]},{"Key":"sort it,","Fragments":["and"]},{"Key":"another sorted","Fragments":["list"]},{"Key":"codepoints. If","Fragments":["they"]},{"Key":"If they","Fragments":["match,"]},{"Key":"they match,","Fragments":["the"]},{"Key":"match, the","Fragments":["words"]},{"Key":"are anagrams.","Fragments":["That's"]},{"Key":"anagrams. That's","Fragments":["not"]},{"Key":"elixir nit","Fragments":["per"]},{"Key":"nit per","Fragments":["se,"]},{"Key":"algorithm flow","Fragments":["a"]},{"Key":"flow a","Fragments":["lot"]},{"Key":"`defp _something`","Fragments":["naming"]},{"Key":"_something` naming","Fragments":["standard,"]},{"Key":"naming standard,","Fragments":["a"]},{"Key":"standard, a","Fragments":["simple"]},{"Key":"simple `defp","Fragments":["something`"]},{"Key":"`defp something`","Fragments":["seems"]},{"Key":"something` seems","Fragments":["more"]},{"Key":"more reasonable,","Fragments":["as"]},{"Key":"reasonable, as","Fragments":["the","long"]},{"Key":"`defp` already","Fragments":["communicates","conveys."]},{"Key":"already communicates","Fragments":["the"]},{"Key":"communicates the","Fragments":["privateness."]},{"Key":"is finished,","Fragments":["the"]},{"Key":"finished, the","Fragments":["`add_or_increment_entry`"]},{"Key":"the `add_or_increment_entry`","Fragments":["method"]},{"Key":"`add_or_increment_entry` method","Fragments":["is"]},{"Key":"is missing,","Fragments":["and"]},{"Key":"missing, and","Fragments":["isn't"]},{"Key":"isn't there","Fragments":["a"]},{"Key":"a `\u0026`","Fragments":["missing"]},{"Key":"`\u0026` missing","Fragments":["too?"]},{"Key":"quite nested.","Fragments":["Maybe"]},{"Key":"nested. Maybe","Fragments":["try"]},{"Key":"try using","Fragments":["the","pipeline"]},{"Key":"flow into","Fragments":["more"]},{"Key":"more manageable","Fragments":["chunks."]},{"Key":" Final","Fragments":["`concat`"]},{"Key":"Final `concat`","Fragments":["method"]},{"Key":"`concat` method","Fragments":["is"]},{"Key":"complex for","Fragments":["a"]},{"Key":"one-line method","Fragments":["definition."]},{"Key":"method definition.","Fragments":["Splurge"]},{"Key":"definition. Splurge","Fragments":["on"]},{"Key":"Splurge on","Fragments":["some"]},{"Key":"newlines for","Fragments":["the"]},{"Key":"the happiness","Fragments":["of"]},{"Key":"happiness of","Fragments":["future"]},{"Key":"of future","Fragments":["maintainers,"]},{"Key":"future maintainers,","Fragments":["maybe."]},{"Key":"be neat","Fragments":["functional"]},{"Key":"neat functional","Fragments":["goodness."]},{"Key":"the underscores","Fragments":["in"]},{"Key":"underscores in","Fragments":["front"]},{"Key":"methods. Seems","Fragments":["to"]},{"Key":"that's duplicating","Fragments":["information"]},{"Key":"duplicating information","Fragments":["the"]},{"Key":"information the","Fragments":["`defp`"]},{"Key":"of `match`","Fragments":["and"]},{"Key":"`match` and","Fragments":["the"]},{"Key":"that `_anagram_matcher`","Fragments":["returns"]},{"Key":"`_anagram_matcher` returns","Fragments":["a"]},{"Key":"the filter.","Fragments":["Neat."]},{"Key":"The `_make_comparable`","Fragments":["I've"]},{"Key":"`_make_comparable` I've","Fragments":["called"]},{"Key":"called `sorted_letters`","Fragments":["in"]},{"Key":"`sorted_letters` in","Fragments":["my"]},{"Key":"implementation. Focuses","Fragments":["on"]},{"Key":"Focuses on","Fragments":["different"]},{"Key":"on different","Fragments":["levels"]},{"Key":"different levels","Fragments":["of"]},{"Key":"levels of","Fragments":["the","decisions"]},{"Key":"implementation, not","Fragments":["sure"]},{"Key":"exactly which","Fragments":["is"]},{"Key":"is preferable.","Fragments":["I"]},{"Key":"preferable. I","Fragments":["guess"]},{"Key":"I leak","Fragments":["the"]},{"Key":"leak the","Fragments":["implementation"]},{"Key":"implementation through","Fragments":["the"]},{"Key":"name whereas","Fragments":["this"]},{"Key":"whereas this","Fragments":["is"]},{"Key":"is free","Fragments":["to"]},{"Key":"the comparability","Fragments":["in"]},{"Key":"comparability in","Fragments":["any"]},{"Key":"way reasonable,","Fragments":["as"]},{"Key":"be compared","Fragments":["with"]},{"Key":"compared with","Fragments":["other"]},{"Key":"other similarly","Fragments":["prepared"]},{"Key":"similarly prepared","Fragments":["words."]},{"Key":"prepared words.","Fragments":["The"]},{"Key":"words. The","Fragments":["`_make`"]},{"Key":"The `_make`","Fragments":["part"]},{"Key":"`_make` part","Fragments":["of"]},{"Key":"name can","Fragments":["probably"]},{"Key":"probably go,","Fragments":["though."]},{"Key":"Very succinct.","Fragments":["The"]},{"Key":"succinct. The","Fragments":["`filter/2`"]},{"Key":"The `filter/2`","Fragments":["should"]},{"Key":"`filter/2` should","Fragments":["probably"]},{"Key":"one-liner, it's","Fragments":["very"]},{"Key":"Not bad","Fragments":["at"]},{"Key":"all, looks","Fragments":["a"]},{"Key":"lot like","Fragments":["elixir"]},{"Key":"like elixir","Fragments":["to"]},{"Key":"An option","Fragments":["is"]},{"Key":"`defp` these","Fragments":["helper-methods"]},{"Key":"these helper-methods","Fragments":["so"]},{"Key":"helper-methods so","Fragments":["it's"]},{"Key":"method which","Fragments":["is"]},{"Key":"is accessible","Fragments":["elsewhere."]},{"Key":"A general","Fragments":["detail"]},{"Key":"general detail","Fragments":["for"]},{"Key":"detail for","Fragments":["the"]},{"Key":"the `normalize_word`,","Fragments":["do"]},{"Key":"`normalize_word`, do","Fragments":["consider"]},{"Key":"do consider","Fragments":["using"]},{"Key":"using regexp","Fragments":["character"]},{"Key":"regexp character","Fragments":["classes"]},{"Key":"classes instead","Fragments":["of"]},{"Key":"explicit blacklist.","Fragments":["Makes"]},{"Key":"blacklist. Makes","Fragments":["the"]},{"Key":"Makes the","Fragments":["code"]},{"Key":"more general,","Fragments":["readable,"]},{"Key":"general, readable,","Fragments":["and"]},{"Key":" Tiny","Fragments":["change"]},{"Key":"Tiny change","Fragments":["you"]},{"Key":"change you","Fragments":["can"]},{"Key":"``` def","Fragments":["concat([]),"]},{"Key":"def concat([]),","Fragments":["do:","do:"]},{"Key":"concat([]), do:","Fragments":["[]```","[]"]},{"Key":"That comma","Fragments":["and"]},{"Key":"comma and","Fragments":["colon"]},{"Key":"and colon","Fragments":["allows"]},{"Key":"colon allows","Fragments":["you"]},{"Key":"the `end`.","Fragments":["Always"]},{"Key":"`end`. Always","Fragments":["something."]},{"Key":" @emely,","Fragments":["it's"]},{"Key":"@emely, it's","Fragments":["certainly"]},{"Key":"it's certainly","Fragments":["true"]},{"Key":"certainly true","Fragments":["that"]},{"Key":"that ListOps.count([1,3,5,7],","Fragments":["4)"]},{"Key":"ListOps.count([1,3,5,7], 4)","Fragments":["returns"]},{"Key":"4) returns","Fragments":["8."]},{"Key":"returns 8.","Fragments":["It's"]},{"Key":"8. It's","Fragments":["also"]},{"Key":"also true","Fragments":["that"]},{"Key":"that ListOps.count([1,3,5,7])","Fragments":["still"]},{"Key":"ListOps.count([1,3,5,7]) still","Fragments":["works"]},{"Key":"still returns","Fragments":["4."]},{"Key":"returns 4.","Fragments":["From"]},{"Key":"4. From","Fragments":["the"]},{"Key":"the client's","Fragments":["perspective,"]},{"Key":"client's perspective,","Fragments":["I"]},{"Key":"perspective, I","Fragments":["feel"]},{"Key":"the assumption","Fragments":["is"]},{"Key":"assumption is","Fragments":["that"]},{"Key":"argument absolutely","Fragments":["will"]},{"Key":"absolutely will","Fragments":["alter"]},{"Key":"will alter","Fragments":["the"]},{"Key":"alter the","Fragments":["count","initial"]},{"Key":"count by","Fragments":["that"]},{"Key":"by that","Fragments":["number.","behavior."]},{"Key":"that number.","Fragments":["Which"]},{"Key":"number. Which","Fragments":["is"]},{"Key":"Which is","Fragments":["to","certainly","why"]},{"Key":"say, that","Fragments":["I"]},{"Key":"a programmer","Fragments":["would"]},{"Key":"programmer would","Fragments":["be"]},{"Key":"Let's say","Fragments":["we"]},{"Key":"say we","Fragments":["were"]},{"Key":"we were","Fragments":["using"]},{"Key":"using inject","Fragments":["in"]},{"Key":"inject in","Fragments":["ruby"]},{"Key":"ruby to","Fragments":["sum"]},{"Key":"to sum","Fragments":["an"]},{"Key":"sum an","Fragments":["array"]},{"Key":"of numbers.","Fragments":["This"]},{"Key":"numbers. This","Fragments":["works:"]},{"Key":" [1,2,3].inject(\u0026(:+))","Fragments":["#"]},{"Key":"[1,2,3].inject(\u0026(:+)) #","Fragments":["=\u003e"]},{"Key":"And let's","Fragments":["further"]},{"Key":"let's further","Fragments":["say"]},{"Key":"further say","Fragments":["that"]},{"Key":"we add","Fragments":["the"]},{"Key":"the optional","Fragments":["initial"]},{"Key":"optional initial","Fragments":["state"]},{"Key":"initial state","Fragments":["of","of"]},{"Key":"accumulator. This","Fragments":["also"]},{"Key":" [1,2,3].inject(0,","Fragments":["\u0026(:+))"]},{"Key":"[1,2,3].inject(0, \u0026(:+))","Fragments":["#"]},{"Key":"\u0026(:+)) #","Fragments":["=\u003e","=\u003e"]},{"Key":"But so","Fragments":["does"]},{"Key":"so does","Fragments":["this:"]},{"Key":" [1,2,3].inject(4,","Fragments":["\u0026(:+))"]},{"Key":"[1,2,3].inject(4, \u0026(:+))","Fragments":["#"]},{"Key":"same principle","Fragments":["as"]},{"Key":"principle as","Fragments":["adding"]},{"Key":"as adding","Fragments":["the"]},{"Key":"value to","Fragments":["the","1"]},{"Key":"function. Both","Fragments":["explicitly"]},{"Key":"Both explicitly","Fragments":["alter"]},{"Key":"explicitly alter","Fragments":["the"]},{"Key":"and therefore","Fragments":["change","trivial"]},{"Key":"therefore change","Fragments":["the"]},{"Key":" (adding","Fragments":["@emely)"]},{"Key":"the valuable","Fragments":["feedback."]},{"Key":"leading underscore,","Fragments":["I"]},{"Key":"underscore, I","Fragments":["had"]},{"Key":"had misinterpreted","Fragments":["some"]},{"Key":"misinterpreted some","Fragments":["convention"]},{"Key":"some convention","Fragments":["used"]},{"Key":"convention used","Fragments":["at"]},{"Key":"used at","Fragments":["some"]},{"Key":"Elixir book.","Fragments":["It's"]},{"Key":"book. It's","Fragments":["now"]},{"Key":"It's now","Fragments":["fixed."]},{"Key":"more calm","Fragments":["and"]},{"Key":"calm and","Fragments":["straightforward"]},{"Key":"and straightforward","Fragments":["to"]},{"Key":"straightforward to","Fragments":["me."]},{"Key":"me. Funny","Fragments":["how"]},{"Key":"Funny how","Fragments":["the"]},{"Key":"the brain","Fragments":["latches"]},{"Key":"brain latches","Fragments":["on"]},{"Key":"latches on","Fragments":["to"]},{"Key":"few submissions","Fragments":["where"]},{"Key":"submissions where","Fragments":["people"]},{"Key":"where people","Fragments":["went"]},{"Key":"people went","Fragments":["Extreme"]},{"Key":"went Extreme","Fragments":["FP."]},{"Key":"Extreme FP.","Fragments":["Which"]},{"Key":"FP. Which","Fragments":["is"]},{"Key":"use `reduce`","Fragments":["to","too."]},{"Key":"implement concat,","Fragments":["but"]},{"Key":"concat, but","Fragments":["I"]},{"Key":"did make","Fragments":["a"]},{"Key":"a concise","Fragments":["version:"]},{"Key":"def concat([first|rest])","Fragments":["do"]},{"Key":" append(first,","Fragments":["concat(rest))"]},{"Key":"simple starting","Fragments":["point"]},{"Key":"starting point","Fragments":["for"]},{"Key":"a `reduce`-based","Fragments":["version?"]},{"Key":"where you've","Fragments":["picked"]},{"Key":"`defp do_`","Fragments":["convention,"]},{"Key":"do_` convention,","Fragments":["I've"]},{"Key":"convention, I've","Fragments":["noticed"]},{"Key":"I've noticed","Fragments":["the"]},{"Key":"elixir codebase.","Fragments":["In"]},{"Key":"codebase. In","Fragments":["the"]},{"Key":"the `Regex.replace/4`","Fragments":["example"]},{"Key":"`Regex.replace/4` example","Fragments":["you"]},{"Key":"you linked,","Fragments":["the"]},{"Key":"linked, the","Fragments":["`do_replace/4`"]},{"Key":"the `do_replace/4`","Fragments":["method"]},{"Key":"`do_replace/4` method","Fragments":["also"]},{"Key":"method also","Fragments":["has"]},{"Key":"has arity","Fragments":["4,"]},{"Key":"arity 4,","Fragments":["whereas"]},{"Key":"4, whereas","Fragments":["you"]},{"Key":"whereas you","Fragments":["(potentially)"]},{"Key":"you (potentially)","Fragments":["have"]},{"Key":"(potentially) have","Fragments":["a"]},{"Key":"a `count/1`","Fragments":["and"]},{"Key":"feel myself","Fragments":["moving"]},{"Key":"myself moving","Fragments":["into"]},{"Key":"moving into","Fragments":["bikeshedding"]},{"Key":"into bikeshedding","Fragments":["territory"]},{"Key":"bikeshedding territory","Fragments":["here,"]},{"Key":"territory here,","Fragments":["so"]},{"Key":"do_count([], hash)","Fragments":["do"]},{"Key":"Can just","Fragments":["be:"]},{"Key":"do_count([], hash),","Fragments":["do:"]},{"Key":"total save","Fragments":["of"]},{"Key":"save of","Fragments":["2"]},{"Key":"of 2","Fragments":["lines."]},{"Key":"This all","Fragments":["looks"]},{"Key":"all looks","Fragments":["very"]},{"Key":"very straightforward,","Fragments":["neat."]},{"Key":"One thing,","Fragments":["the"]},{"Key":"thing, the","Fragments":["`++`"]},{"Key":"the `++`","Fragments":["method"]},{"Key":"`++` method","Fragments":["is"]},{"Key":"explicitly mentioned","Fragments":["as"]},{"Key":"mentioned as","Fragments":["something"]},{"Key":"and develop","Fragments":["without."]},{"Key":"develop without.","Fragments":["Would"]},{"Key":"without. Would","Fragments":["implementing"]},{"Key":"Would implementing","Fragments":["`concat`"]},{"Key":"without it","Fragments":["be"]},{"Key":" Methods","Fragments":["are"]},{"Key":"Methods are","Fragments":["fairly"]},{"Key":"fairly short","Fragments":["and"]},{"Key":"and well-lit,","Fragments":["I"]},{"Key":"well-lit, I","Fragments":["like"]},{"Key":"think trying","Fragments":["out"]},{"Key":"out `Stream.chunk`","Fragments":["would"]},{"Key":"`Stream.chunk` would","Fragments":["allow"]},{"Key":"to massively","Fragments":["simplify"]},{"Key":"massively simplify","Fragments":["the"]},{"Key":"having `compare`","Fragments":["within"]},{"Key":"`compare` within","Fragments":["`compare`"]},{"Key":"figured there","Fragments":["was"]},{"Key":"Regex way","Fragments":["of"]},{"Key":"of handling","Fragments":["Russin"]},{"Key":"handling Russin","Fragments":["for"]},{"Key":"Russin for","Fragments":["is_shout?"]},{"Key":"for is_shout?","Fragments":["but"]},{"Key":"is_shout? but","Fragments":["came"]},{"Key":"but came","Fragments":["to"]},{"Key":"the realization","Fragments":["to"]},{"Key":"realization to","Fragments":["test"]},{"Key":"test upcase","Fragments":["vs"]},{"Key":"upcase vs","Fragments":["downcase."]},{"Key":"vs downcase.","Fragments":["Curious"]},{"Key":"downcase. Curious","Fragments":["what"]},{"Key":"what anyone's","Fragments":["thoughts"]},{"Key":"anyone's thoughts","Fragments":["are"]},{"Key":"thoughts are","Fragments":["on"]},{"Key":"that vs","Fragments":["Regex"]},{"Key":"vs Regex","Fragments":["as"]},{"Key":"Regex as","Fragments":["I"]},{"Key":"see other's","Fragments":["have"]},{"Key":"other's have","Fragments":["opted"]},{"Key":"have opted","Fragments":["for."]},{"Key":" \"map","Fragments":["of"]},{"Key":"\"map of","Fragments":["huge"]},{"Key":"huge list\"","Fragments":["and"]},{"Key":"list\" and","Fragments":["\"concat"]},{"Key":"and \"concat","Fragments":["of"]},{"Key":"lists\" never","Fragments":["seem"]},{"Key":"never seem","Fragments":["to"]},{"Key":"to finish,","Fragments":["is"]},{"Key":"finish, is","Fragments":["there"]},{"Key":"some severely","Fragments":["underperforming"]},{"Key":"severely underperforming","Fragments":["piece"]},{"Key":"underperforming piece","Fragments":["of"]},{"Key":"First elixir","Fragments":["code"]},{"Key":"written of","Fragments":["any"]},{"Key":"any real","Fragments":["length"]},{"Key":"real length","Fragments":["that"]},{"Key":"length that","Fragments":["wasn't"]},{"Key":"wasn't basically","Fragments":["copying"]},{"Key":"basically copying","Fragments":["what"]},{"Key":"copying what","Fragments":["someone"]},{"Key":"else wrote.","Fragments":["Submitted"]},{"Key":"wrote. Submitted","Fragments":["just"]},{"Key":"Submitted just","Fragments":["to"]},{"Key":"if exercism","Fragments":["ran"]},{"Key":"exercism ran","Fragments":["a"]},{"Key":"ran a","Fragments":["different"]},{"Key":"different test","Fragments":["suite"]},{"Key":"Obviously the","Fragments":["duplicate"]},{"Key":"duplicate \"Whatever.\"","Fragments":["conditions"]},{"Key":"\"Whatever.\" conditions","Fragments":["can"]},{"Key":"conditions can","Fragments":["be"]},{"Key":"cleaned up.","Fragments":["I"]},{"Key":"using \"cond\"","Fragments":["is"]},{"Key":"\"cond\" is","Fragments":["more"]},{"Key":"more preferred,","Fragments":["or"]},{"Key":"preferred, or","Fragments":["a"]},{"Key":"guard clauses/pattern","Fragments":["matching"]},{"Key":"clauses/pattern matching","Fragments":["is"]},{"Key":"regex expert","Fragments":["I"]},{"Key":"expert I","Fragments":["could"]},{"Key":"this much","Fragments":["better."]},{"Key":"The binary_part","Fragments":["/"]},{"Key":"binary_part /","Fragments":["byte_size"]},{"Key":"/ byte_size","Fragments":["stuff"]},{"Key":"byte_size stuff","Fragments":["on"]},{"Key":"stuff on","Fragments":["the"]},{"Key":"the \"sure\"","Fragments":["clause"]},{"Key":"\"sure\" clause","Fragments":["came"]},{"Key":"clause came","Fragments":["from"]},{"Key":"help page","Fragments":["on"]},{"Key":"page on","Fragments":["String."]},{"Key":"discovered Enum.zip.","Fragments":[":)"]},{"Key":" Thinking","Fragments":["about"]},{"Key":"this .","Fragments":["."]},{"Key":". .","Fragments":["."]},{"Key":"Since Enum.zip","Fragments":["returns"]},{"Key":"Enum.zip returns","Fragments":["a"]},{"Key":"of tuples,","Fragments":["it"]},{"Key":"tuples, it","Fragments":["seems"]},{"Key":"could pipe","Fragments":["that"]},{"Key":"pipe that","Fragments":["directly"]},{"Key":"two private","Fragments":["functions."]},{"Key":"Also, after","Fragments":["a"]},{"Key":"a frustrating","Fragments":["bit,"]},{"Key":"frustrating bit,","Fragments":["I"]},{"Key":"bit, I","Fragments":["discovered"]},{"Key":"using elixir","Fragments":["v"]},{"Key":"elixir v","Fragments":["0.14.x,"]},{"Key":"v 0.14.x,","Fragments":["the"]},{"Key":"0.14.x, the","Fragments":["doctest"]},{"Key":"doctest portion","Fragments":["of"]},{"Key":"portion of","Fragments":["the"]},{"Key":"spec will","Fragments":["no"]},{"Key":"will no","Fragments":["longer"]},{"Key":"longer work","Fragments":["without"]},{"Key":"without actually","Fragments":["compiling"]},{"Key":"actually compiling","Fragments":["the"]},{"Key":"compiling the","Fragments":["module"]},{"Key":"Good call,","Fragments":["I"]},{"Key":"call, I","Fragments":["was"]},{"Key":"very familiar","Fragments":["with"]},{"Key":"stdlib back","Fragments":["when"]},{"Key":"very new","Fragments":["to"]},{"Key":"Elixir, would","Fragments":["you"]},{"Key":"you care","Fragments":["to"]},{"Key":"to complile","Fragments":["the"]},{"Key":"complile the","Fragments":["module"]},{"Key":"doctest work?","Fragments":["Thanks!"]},{"Key":"short. I","Fragments":["like"]},{"Key":"line 6","Fragments":["is","looked"]},{"Key":"6 is","Fragments":["difficult"]},{"Key":"is difficult","Fragments":["to"]},{"Key":"understand. (What","Fragments":["is"]},{"Key":"(What is","Fragments":["it"]},{"Key":"it doing?)","Fragments":["Maybe"]},{"Key":"doing?) Maybe","Fragments":["it"]},{"Key":"a meaningful","Fragments":["name"]},{"Key":"to transcribe","Fragments":["each"]},{"Key":"transcribe each","Fragments":["nucleotide"]},{"Key":"nucleotide from","Fragments":["the"]},{"Key":"case expression","Fragments":["instead","in"]},{"Key":"expression instead","Fragments":["of"]},{"Key":"of cond?","Fragments":["Should"]},{"Key":"cond? Should","Fragments":["make"]},{"Key":"Should make","Fragments":["the"]},{"Key":"Great code!","Fragments":["Easy"]},{"Key":"code! Easy","Fragments":["to"]},{"Key":"Easy to","Fragments":["see"]},{"Key":"anagrams from","Fragments":["the"]},{"Key":"could save","Fragments":["the"]},{"Key":"save the","Fragments":["value"]},{"Key":"of \"Enum.sort(String.to_char_list","Fragments":["lower_base)\""]},{"Key":"\"Enum.sort(String.to_char_list lower_base)\"","Fragments":["then"]},{"Key":"lower_base)\" then","Fragments":["you"]},{"Key":"we're all","Fragments":["pretty"]},{"Key":"all pretty","Fragments":["new"]},{"Key":"new at","Fragments":["elixir."]},{"Key":"at elixir.","Fragments":[":)"]},{"Key":"knew exactly","Fragments":["why"]},{"Key":"exactly why","Fragments":["compilation"]},{"Key":"why compilation","Fragments":["is"]},{"Key":"compilation is","Fragments":["necessary","now"]},{"Key":"for doctests","Fragments":["to"]},{"Key":"doctests to","Fragments":["work"]},{"Key":"in 0.14.x.","Fragments":["I"]},{"Key":"0.14.x. I","Fragments":["had"]},{"Key":"had just","Fragments":["banged"]},{"Key":"just banged","Fragments":["my"]},{"Key":"banged my","Fragments":["head"]},{"Key":"that wall","Fragments":["for"]},{"Key":"while, read","Fragments":["all"]},{"Key":"read all","Fragments":["the"]},{"Key":"ExUnit documentation,","Fragments":["and"]},{"Key":"documentation, and","Fragments":["finally"]},{"Key":"finally wrote","Fragments":["into"]},{"Key":"wrote into","Fragments":["the"]},{"Key":"elixir talk","Fragments":["mailing"]},{"Key":"talk mailing","Fragments":["list."]},{"Key":"mailing list.","Fragments":["One"]},{"Key":"list. One","Fragments":["of"]},{"Key":"kind people","Fragments":["there"]},{"Key":"people there","Fragments":["helped"]},{"Key":"there helped","Fragments":["me"]},{"Key":"helped me","Fragments":["out"]},{"Key":"me out","Fragments":["by"]},{"Key":"out by","Fragments":["mentioning"]},{"Key":"by mentioning","Fragments":["the"]},{"Key":"mentioning the","Fragments":["fact"]},{"Key":"that compilation","Fragments":["is"]},{"Key":"now required.","Fragments":["I"]},{"Key":"repo on","Fragments":["exercism.io's"]},{"Key":"on exercism.io's","Fragments":["github,"]},{"Key":"exercism.io's github,","Fragments":["and"]},{"Key":"github, and","Fragments":["the"]},{"Key":"doctest has","Fragments":["been"]},{"Key":"removed. So","Fragments":["there's"]},{"Key":"if to","Fragments":["check"]},{"Key":"check whether","Fragments":["two"]},{"Key":"two nucleotides","Fragments":["are"]},{"Key":"same or","Fragments":["not,"]},{"Key":"not, I","Fragments":["used"]},{"Key":"used pattern","Fragments":["matching."]},{"Key":"matching made","Fragments":["the"]},{"Key":"code short","Fragments":["and"]},{"Key":"thought line","Fragments":["6"]},{"Key":"6 looked","Fragments":["pretty"]},{"Key":"looked pretty","Fragments":["ugly,"]},{"Key":"pretty ugly,","Fragments":["but"]},{"Key":"getting something","Fragments":["out"]},{"Key":"something out","Fragments":["for"]},{"Key":"for review,","Fragments":["I"]},{"Key":"review, I","Fragments":["went"]},{"Key":"ahead with","Fragments":["it."]},{"Key":"with it.","Fragments":["Let"]},{"Key":"it. Let","Fragments":["me"]},{"Key":"with to","Fragments":["make"]},{"Key":"readable. Thank","Fragments":["you"]},{"Key":" Initializes","Fragments":["days_left"]},{"Key":"Initializes days_left","Fragments":["from"]},{"Key":"days_left from","Fragments":["the"]},{"Key":"the gigasecond,","Fragments":["then"]},{"Key":"gigasecond, then","Fragments":["subtracts"]},{"Key":"then subtracts","Fragments":["days"]},{"Key":"subtracts days","Fragments":["out"]},{"Key":"days out","Fragments":["in"]},{"Key":"in year","Fragments":["quantities,"]},{"Key":"year quantities,","Fragments":["month"]},{"Key":"quantities, month","Fragments":["quantities"]},{"Key":"month quantities","Fragments":["then"]},{"Key":"quantities then","Fragments":["days."]},{"Key":"Always starts","Fragments":["from"]},{"Key":"starts from","Fragments":["1/1"]},{"Key":"from 1/1","Fragments":["to"]},{"Key":"1/1 to","Fragments":["avoid"]},{"Key":"avoid have","Fragments":["to"]},{"Key":"to carry","Fragments":["over"]},{"Key":"carry over","Fragments":["to"]},{"Key":"over to","Fragments":["a"]},{"Key":"new year,","Fragments":["adding"]},{"Key":"year, adding","Fragments":["more"]},{"Key":"adding more","Fragments":["days"]},{"Key":"more days","Fragments":["to"]},{"Key":"days to","Fragments":["days_left"]},{"Key":"to days_left","Fragments":["to"]},{"Key":"days_left to","Fragments":["compensate."]},{"Key":"Really wanted","Fragments":["to"]},{"Key":"use structs,","Fragments":["but"]},{"Key":"structs, but","Fragments":["couldn't"]},{"Key":"couldn't really","Fragments":["make"]},{"Key":"it work,","Fragments":["it"]},{"Key":"work, it","Fragments":["just"]},{"Key":"to complicate","Fragments":["things."]},{"Key":"much just","Fragments":["playing","creates"]},{"Key":"with macros","Fragments":[":)."]},{"Key":"problem itself","Fragments":["absolutely"]},{"Key":"itself absolutely","Fragments":["does"]},{"Key":"absolutely does","Fragments":["not"]},{"Key":"call for","Fragments":["macro","`[]`"]},{"Key":"for macro","Fragments":["use"]},{"Key":"macro use","Fragments":["at"]},{"Key":"use at","Fragments":["all,"]},{"Key":"was still","Fragments":["fun","kind"]},{"Key":"still fun","Fragments":["to"]},{"Key":" score_gen()","Fragments":["pretty"]},{"Key":"score_gen() pretty","Fragments":["much"]},{"Key":"just creates","Fragments":["the"]},{"Key":"creates the","Fragments":["(not"]},{"Key":"the (not","Fragments":["used)"]},{"Key":"(not used)","Fragments":["get_score_gen_expanded"]},{"Key":"used) get_score_gen_expanded","Fragments":["function."]},{"Key":"Updated per","Fragments":["inaspic's"]},{"Key":"per inaspic's","Fragments":["feedback,"]},{"Key":"inaspic's feedback,","Fragments":["thank","thank"]},{"Key":"on inaspic's","Fragments":["feedback,"]},{"Key":"second implementation","Fragments":["I"]},{"Key":"DRY things","Fragments":["up"]},{"Key":"comprehension and","Fragments":["macros."]},{"Key":"and macros.","Fragments":["I"]},{"Key":"macros. I","Fragments":["think"]},{"Key":"actually prefer","Fragments":["the"]},{"Key":"one though,","Fragments":["as"]},{"Key":"though, as","Fragments":["it's"]},{"Key":"more legible.","Fragments":["Thoughts?"]},{"Key":"where str='","Fragments":["'"]},{"Key":"same problem","Fragments":["encountered"]},{"Key":"problem encountered","Fragments":["here:"]},{"Key":"encountered here:","Fragments":["https://groups.google.com/forum/#!topic/elixir-lang-talk/BWnyrCRaqm4"]},{"Key":"Once I","Fragments":["compiled","got"]},{"Key":"I compiled","Fragments":["the"]},{"Key":"compiled the","Fragments":["file"]},{"Key":"file as","Fragments":["suggested"]},{"Key":"link it","Fragments":["ran"]},{"Key":"it ran","Fragments":["OK."]},{"Key":"ran OK.","Fragments":["First"]},{"Key":"OK. First","Fragments":["time"]},{"Key":"time using","Fragments":["Elixir"]},{"Key":" Nested","Fragments":["ifs"]},{"Key":"Nested ifs","Fragments":["are"]},{"Key":"ifs are","Fragments":["hard"]},{"Key":"use `cond`","Fragments":["(http://elixir-lang.org/getting_started/5.html#toc_3)"]},{"Key":"`cond` (http://elixir-lang.org/getting_started/5.html#toc_3)","Fragments":["instead."]},{"Key":"also avoid","Fragments":["using"]},{"Key":"using Regexs","Fragments":["whenever"]},{"Key":"Regexs whenever","Fragments":["possible."]},{"Key":"possible. For","Fragments":["instance,"]},{"Key":"instance, `ends_in_question_mark?/1`","Fragments":["could"]},{"Key":"`ends_in_question_mark?/1` could","Fragments":["be"]},{"Key":"def ends_in_question_mark?(speech)","Fragments":["do"]},{"Key":" String.ends_with?(speed,","Fragments":["\"?\")"]},{"Key":"- There's","Fragments":["an"]},{"Key":"interesting method","Fragments":["in"]},{"Key":"called [updated](http://elixir-lang.org/docs/stable/elixir/Dict.html#update/4)","Fragments":["that"]},{"Key":"[updated](http://elixir-lang.org/docs/stable/elixir/Dict.html#update/4) that","Fragments":["can"]},{"Key":"clean your","Fragments":["#accumulate"]},{"Key":"your #accumulate","Fragments":["method"]},{"Key":"#accumulate method","Fragments":["a"]},{"Key":"method a","Fragments":["bit."]},{"Key":"- Instead","Fragments":["of"]},{"Key":"using map_reduce,","Fragments":["why"]},{"Key":"map_reduce, why","Fragments":["don't"]},{"Key":"why don't","Fragments":["you"]},{"Key":"you simply","Fragments":["use","use"]},{"Key":"simply use","Fragments":["reduce?","a"]},{"Key":"recommend you","Fragments":["to"]},{"Key":"the Pipe","Fragments":["operator."]},{"Key":"Pipe operator.","Fragments":["It"]},{"Key":"the element","Fragments":["at"]},{"Key":"element at","Fragments":["its"]},{"Key":"at its","Fragments":["left","right"]},{"Key":"its left","Fragments":["side"]},{"Key":"left side","Fragments":["and"]},{"Key":"side and","Fragments":["inputs"]},{"Key":"and inputs","Fragments":["it"]},{"Key":"inputs it","Fragments":["as"]},{"Key":"its right","Fragments":["side."]},{"Key":"right side.","Fragments":["This"]},{"Key":"side. This","Fragments":["way,"]},{"Key":"This way,","Fragments":["for"]},{"Key":"way, for","Fragments":["instance,"]},{"Key":"can rewrite","Fragments":["the"]},{"Key":"rewrite the","Fragments":["#tokens"]},{"Key":"the #tokens","Fragments":["method"]},{"Key":"#tokens method","Fragments":["as:"]},{"Key":" strip_punctuation(sentence)","Fragments":["|\u003e"]},{"Key":"strip_punctuation(sentence) |\u003e","Fragments":["String.downcase"]},{"Key":" Lance,","Fragments":["thanks"]},{"Key":"Lance, thanks","Fragments":["for"]},{"Key":"feedback! A","Fragments":["little"]},{"Key":"little birdie","Fragments":["told"]},{"Key":"birdie told","Fragments":["me"]},{"Key":"told me","Fragments":["you"]},{"Key":"me you","Fragments":["were"]},{"Key":"were dabbling","Fragments":["in"]},{"Key":"dabbling in","Fragments":["Elixir"]},{"Key":"Changed tab","Fragments":["to"]},{"Key":"tab to","Fragments":["space,"]},{"Key":"to space,","Fragments":["haven't"]},{"Key":"space, haven't","Fragments":["set"]},{"Key":"haven't set","Fragments":["up"]},{"Key":"up editor","Fragments":["properly"]},{"Key":"editor properly","Fragments":["yet."]},{"Key":" Abusing","Fragments":["reverse"]},{"Key":"Abusing reverse","Fragments":["some"]},{"Key":"reverse some","Fragments":["more..."]},{"Key":" Extremely","Fragments":["concise"]},{"Key":"Extremely concise","Fragments":["implementations."]},{"Key":"concise implementations.","Fragments":["Personally"]},{"Key":"implementations. Personally","Fragments":["I"]},{"Key":"of laying","Fragments":["out"]},{"Key":"much too","Fragments":["stingy"]},{"Key":"too stingy","Fragments":["with"]},{"Key":"stingy with","Fragments":["white"]},{"Key":"with white","Fragments":["space."]},{"Key":"white space.","Fragments":["When"]},{"Key":"space. When","Fragments":["you"]},{"Key":"multiple levels","Fragments":["of"]},{"Key":"decisions on","Fragments":["a"]},{"Key":"line I","Fragments":["at"]},{"Key":"I at","Fragments":["least"]},{"Key":"least find","Fragments":["it"]},{"Key":"grasp what","Fragments":["is"]},{"Key":"on. To","Fragments":["me"]},{"Key":"a human","Fragments":["maintaining"]},{"Key":"human maintaining","Fragments":["code,"]},{"Key":"maintaining code,","Fragments":["clearly"]},{"Key":"code, clearly","Fragments":["indenting"]},{"Key":"clearly indenting","Fragments":["nested"]},{"Key":"indenting nested","Fragments":["logic"]},{"Key":"nested logic","Fragments":["makes"]},{"Key":"logic makes","Fragments":["for"]},{"Key":"for easier","Fragments":["work."]},{"Key":"Then again,","Fragments":["thresholds"]},{"Key":"again, thresholds","Fragments":["for"]},{"Key":"thresholds for","Fragments":["complexity"]},{"Key":"for complexity","Fragments":["varies"]},{"Key":"complexity varies","Fragments":["greatly."]},{"Key":"varies greatly.","Fragments":["What"]},{"Key":"greatly. What","Fragments":["is"]},{"Key":"misunderstood how","Fragments":["concat/1"]},{"Key":"how concat/1","Fragments":["was"]},{"Key":"concat/1 was","Fragments":["supposed"]},{"Key":"work. My","Fragments":["concat"]},{"Key":"My concat","Fragments":["would"]},{"Key":"concat would","Fragments":["convert"]},{"Key":"would convert","Fragments":["```[1,[2],[3]]```"]},{"Key":"convert ```[1,[2],[3]]```","Fragments":["to"]},{"Key":"```[1,[2],[3]]``` to","Fragments":["```"]},{"Key":"to ```","Fragments":["[1,2,3]```."]},{"Key":"``` [1,2,3]```.","Fragments":["Which"]},{"Key":"[1,2,3]```. Which","Fragments":["wasn't"]},{"Key":"Which wasn't","Fragments":["the"]},{"Key":"be solving","Fragments":["at"]},{"Key":"solving at","Fragments":["all."]},{"Key":"rud, this","Fragments":["was"]},{"Key":"quick solution","Fragments":["and"]},{"Key":"wasn't happy","Fragments":["with"]},{"Key":"how clear","Fragments":["the","it"]},{"Key":"clear the","Fragments":["code"]},{"Key":"code read,","Fragments":["so"]},{"Key":"try your","Fragments":["suggestion..."]},{"Key":"not explicitly","Fragments":["pass"]},{"Key":"explicitly pass","Fragments":["`input`"]},{"Key":"pass `input`","Fragments":["to"]},{"Key":"`input` to","Fragments":["silence?/shouting?/question?"]},{"Key":"to silence?/shouting?/question?","Fragments":["in"]},{"Key":"silence?/shouting?/question? in","Fragments":["Elixir?"]},{"Key":"Elixir? Something","Fragments":["with"]},{"Key":"Something with","Fragments":["pattern"]},{"Key":"matching perhaps?","Fragments":["Couldn't"]},{"Key":"perhaps? Couldn't","Fragments":["find"]},{"Key":"Couldn't find","Fragments":["anything"]},{"Key":"Quite a","Fragments":["readable"]},{"Key":"readable solution.","Fragments":["The"]},{"Key":"The `is_anagram`","Fragments":["method"]},{"Key":"`is_anagram` method","Fragments":["might"]},{"Key":"called `is_anagram?`","Fragments":["to"]},{"Key":"`is_anagram?` to","Fragments":["make"]},{"Key":"make it's","Fragments":["behaviour"]},{"Key":"it's behaviour","Fragments":["even"]},{"Key":"behaviour even","Fragments":["clearer."]},{"Key":"The `normalize`","Fragments":["method"]},{"Key":"`normalize` method","Fragments":["does"]},{"Key":"does in","Fragments":["fact"]},{"Key":"fact normalize,","Fragments":["but"]},{"Key":"normalize, but","Fragments":["it"]},{"Key":"also extracts","Fragments":["sorted"]},{"Key":"extracts sorted","Fragments":["letters"]},{"Key":"sorted letters","Fragments":["from"]},{"Key":"letters from","Fragments":["a"]},{"Key":"string. Maybe","Fragments":["the"]},{"Key":"implementation should","Fragments":["be"]},{"Key":"be reflected","Fragments":["in"]},{"Key":"reflected in","Fragments":["the"]},{"Key":"the naming,","Fragments":["maybe"]},{"Key":"naming, maybe","Fragments":["not."]},{"Key":"maybe not.","Fragments":["What"]},{"Key":"not. What","Fragments":["is"]},{"Key":"looks great...","Fragments":["but"]},{"Key":"great... but","Fragments":["there's"]},{"Key":"total directly","Fragments":["without"]},{"Key":"directly without","Fragments":["having"]},{"Key":"calculate `square`","Fragments":["for"]},{"Key":"`square` for","Fragments":["all"]},{"Key":"all 64","Fragments":["squares..."]},{"Key":"am calculating","Fragments":["the"]},{"Key":"the remainder","Fragments":["extra"]},{"Key":"remainder extra","Fragments":["time"]},{"Key":"time potentially,","Fragments":["but"]},{"Key":"potentially, but","Fragments":["when"]},{"Key":"out I","Fragments":["realized"]},{"Key":"concatenation would","Fragments":["probably"]},{"Key":"be \u003e=","Fragments":["the"]},{"Key":"\u003e= the","Fragments":["savings"]},{"Key":"the savings","Fragments":["from"]},{"Key":"savings from","Fragments":["2-3"]},{"Key":"from 2-3","Fragments":["less"]},{"Key":"2-3 less","Fragments":["math"]},{"Key":"less math","Fragments":["operations."]},{"Key":"not optimal","Fragments":["for"]},{"Key":"optimal for","Fragments":["performance"]},{"Key":"for performance","Fragments":["as"]},{"Key":"performance as","Fragments":["it"]},{"Key":"it orders","Fragments":["the"]},{"Key":"orders the","Fragments":["letters"]},{"Key":"base string","Fragments":["for"]},{"Key":"each candidate,","Fragments":["but"]},{"Key":"candidate, but","Fragments":["I"]},{"Key":"an `is_anagram?`","Fragments":["function"]},{"Key":"`is_anagram?` function","Fragments":["that"]},{"Key":"a compromise","Fragments":["somewhere"]},{"Key":"compromise somewhere","Fragments":["that"]},{"Key":"somewhere that","Fragments":["would","said"]},{"Key":"allow for","Fragments":["a"]},{"Key":"nice descriptive","Fragments":["function"]},{"Key":"name without","Fragments":["doing"]},{"Key":"doing extra","Fragments":["work."]},{"Key":"Clean solution,","Fragments":["I"]},{"Key":"solution, I","Fragments":["like"]},{"Key":"`case` with","Fragments":["guards"]},{"Key":"top-level `compare/2`","Fragments":["function"]},{"Key":"`compare/2` function","Fragments":["to"]},{"Key":"avoid declaring","Fragments":["variables"]},{"Key":"declaring variables","Fragments":["separately"]},{"Key":"variables separately","Fragments":["for"]},{"Key":"separately for","Fragments":["the"]},{"Key":"catchall block","Fragments":["of"]},{"Key":"block of","Fragments":["`compare/2`"]},{"Key":"of `compare/2`","Fragments":["by"]},{"Key":"`compare/2` by","Fragments":["adding"]},{"Key":"a `compare(a,","Fragments":["a),"]},{"Key":"`compare(a, a),","Fragments":["do:"]},{"Key":"a), do:","Fragments":[":equal`"]},{"Key":"do: :equal`","Fragments":["clause"]},{"Key":":equal` clause","Fragments":["above"]},{"Key":"clause above","Fragments":["the"]},{"Key":"main clause,","Fragments":["but"]},{"Key":"that gains","Fragments":["you"]},{"Key":"it! On","Fragments":["the"]},{"Key":"whole really","Fragments":["clear"]},{"Key":"really clear","Fragments":["and"]},{"Key":"and readable.","Fragments":["I"]},{"Key":"dropped the","Fragments":["`@katlyn`"]},{"Key":"the `@katlyn`","Fragments":["from"]},{"Key":"`@katlyn` from","Fragments":["the"]},{"Key":"the top,","Fragments":["since"]},{"Key":"top, since","Fragments":["it's"]},{"Key":"not actually","Fragments":["used"]},{"Key":"used anywhere,","Fragments":["but"]},{"Key":"anywhere, but","Fragments":["I"]},{"Key":"suppose that's","Fragments":["more"]},{"Key":"minor quibble","Fragments":["I"]},{"Key":"quibble I","Fragments":["could"]},{"Key":"using `\u0026increment_count`","Fragments":["in"]},{"Key":"`\u0026increment_count` in","Fragments":["one"]},{"Key":"place, but","Fragments":["the"]},{"Key":"`fn` `end`","Fragments":["syntax"]},{"Key":"`end` syntax","Fragments":["for"]},{"Key":"considered inconsistent.","Fragments":["But"]},{"Key":"inconsistent. But","Fragments":["I'm"]},{"Key":"good guidelines","Fragments":["on"]},{"Key":"guidelines on","Fragments":["Elixir"]},{"Key":"style this","Fragments":["early"]},{"Key":"this early","Fragments":["in"]},{"Key":"early in","Fragments":["the"]},{"Key":"the language's","Fragments":["life,"]},{"Key":"language's life,","Fragments":["so"]},{"Key":"life, so","Fragments":["I'm"]},{"Key":"sure an","Fragments":["argument"]},{"Key":"argument could","Fragments":["be"]},{"Key":"made in","Fragments":["favour"]},{"Key":"doing passed","Fragments":["named"]},{"Key":"passed named","Fragments":["functions"]},{"Key":"functions one","Fragments":["way"]},{"Key":"and anonymous","Fragments":["functions"]},{"Key":" Exactly","Fragments":["like"]},{"Key":"Exactly like","Fragments":["this."]},{"Key":"I'd even","Fragments":["go"]},{"Key":"even go","Fragments":["a"]},{"Key":"go a","Fragments":["step"]},{"Key":"and extract","Fragments":["a"]},{"Key":"extract a","Fragments":["method"]},{"Key":"codepoints conversion.","Fragments":["Maybe"]},{"Key":"conversion. Maybe","Fragments":["another"]},{"Key":"Maybe another","Fragments":["private"]},{"Key":"another private","Fragments":["method"]},{"Key":"called `letters/1`,","Fragments":["taking"]},{"Key":"`letters/1`, taking","Fragments":["a"]},{"Key":" Were","Fragments":["my"]},{"Key":"Were my","Fragments":["comments"]},{"Key":"version any","Fragments":["inspiration?"]},{"Key":"better. Suppose","Fragments":["you"]},{"Key":"Suppose you","Fragments":["add"]},{"Key":"new type","Fragments":["in,"]},{"Key":"type in,","Fragments":["you"]},{"Key":"in, you","Fragments":["have"]},{"Key":"places as","Fragments":["oppose"]},{"Key":"as oppose","Fragments":["to"]},{"Key":"oppose to","Fragments":["one."]},{"Key":"about those","Fragments":["private"]},{"Key":"methods, first.","Fragments":["In"]},{"Key":"first. In","Fragments":["my"]},{"Key":"attempt I","Fragments":["put"]},{"Key":"put all","Fragments":["the"]},{"Key":"the ```cond```","Fragments":["block"]},{"Key":"```cond``` block","Fragments":["and"]},{"Key":"and were","Fragments":["happy."]},{"Key":"were happy.","Fragments":["But"]},{"Key":"happy. But","Fragments":["then"]},{"Key":"it struck","Fragments":["me,"]},{"Key":"struck me,","Fragments":["that"]},{"Key":"me, that","Fragments":["it"]},{"Key":"quite hard","Fragments":["to"]},{"Key":"is happening.","Fragments":["Therefore"]},{"Key":"happening. Therefore","Fragments":["I"]},{"Key":"I introduced","Fragments":["the"]},{"Key":"methods and","Fragments":["named","some"]},{"Key":"named them","Fragments":["as"]},{"Key":"as close","Fragments":["to"]},{"Key":"the README's","Fragments":["description"]},{"Key":"README's description","Fragments":["of"]},{"Key":"possible. I","Fragments":["guess"]},{"Key":"helps reading","Fragments":["the"]},{"Key":"the ```hey```","Fragments":["method"]},{"Key":"```hey``` method","Fragments":["and"]},{"Key":"check their","Fragments":["implementation"]},{"Key":"their implementation","Fragments":["when"]},{"Key":"implementation when","Fragments":["something"]},{"Key":"when something","Fragments":["is"]},{"Key":"had almost","Fragments":["the"]},{"Key":"same solution","Fragments":["and"]},{"Key":"of ```yelling?```.","Fragments":["I"]},{"Key":"```yelling?```. I","Fragments":["solved"]},{"Key":"it via","Fragments":["RegExp,"]},{"Key":"via RegExp,","Fragments":["but"]},{"Key":"RegExp, but","Fragments":["I"]},{"Key":"far easier","Fragments":["to"]},{"Key":"and understand.","Fragments":["Very"]},{"Key":"understand. Very","Fragments":["elegant"]},{"Key":"Very elegant","Fragments":["solution!"]},{"Key":"Using cond","Fragments":["along"]},{"Key":"cond along","Fragments":["with"]},{"Key":"with specific","Fragments":["classifications"]},{"Key":"specific classifications","Fragments":["functions"]},{"Key":"classifications functions","Fragments":["made"]},{"Key":"functions made","Fragments":["the"]},{"Key":"more simple,","Fragments":["but"]},{"Key":"hand now","Fragments":["the"]},{"Key":"code depends","Fragments":["on"]},{"Key":"conditions evaluated","Fragments":["(putting"]},{"Key":"evaluated (putting","Fragments":["the"]},{"Key":"(putting the","Fragments":["exclamation"]},{"Key":"the exclamation","Fragments":["condition"]},{"Key":"exclamation condition","Fragments":["before"]},{"Key":"condition before","Fragments":["the"]},{"Key":"question one,","Fragments":["for"]},{"Key":"one, for","Fragments":["instance,"]},{"Key":"instance, will","Fragments":["break"]},{"Key":"can try","Fragments":["to"]},{"Key":"boolean equation","Fragments":["in"]},{"Key":"equation in","Fragments":["line"]},{"Key":"13 to","Fragments":["17,"]},{"Key":"to 17,","Fragments":["to"]},{"Key":"17, to","Fragments":["avoid"]},{"Key":"avoid return","Fragments":["`false`."]},{"Key":"you capture","Fragments":["the"]},{"Key":"capture the","Fragments":["function","essence"]},{"Key":"function `is_anagram?/2`","Fragments":["to"]},{"Key":"`is_anagram?/2` to","Fragments":["be"]},{"Key":"of `Enum.filter/2`","Fragments":["=)"]},{"Key":"this valid_candidates","Fragments":["check"]},{"Key":"valid_candidates check","Fragments":["just"]},{"Key":"check just","Fragments":["used"]},{"Key":"replace anagram_checker_for(base)","Fragments":["by"]},{"Key":"anagram_checker_for(base) by","Fragments":["\u0026anagrams?(base,"]},{"Key":"by \u0026anagrams?(base,","Fragments":["\u00261)"]},{"Key":"1) My","Fragments":["goal"]},{"Key":"My goal","Fragments":["was"]},{"Key":"goal was","Fragments":["not"]},{"Key":"improve performance,","Fragments":["just"]},{"Key":"performance, just","Fragments":["to"]},{"Key":"to group","Fragments":["those"]},{"Key":"group those","Fragments":["2"]},{"Key":"those 2","Fragments":["simple"]},{"Key":"2 simple","Fragments":["checks."]},{"Key":"2) Yes,","Fragments":["indeed."]},{"Key":"Yes, indeed.","Fragments":["I"]},{"Key":"indeed. I","Fragments":["didn't"]},{"Key":"the *silence?*","Fragments":["function,"]},{"Key":"*silence?* function,","Fragments":["you"]},{"Key":"the piping","Fragments":["syntax","operator"]},{"Key":"piping syntax","Fragments":["instead"]},{"Key":"syntax instead","Fragments":["of"]},{"Key":"nesting calls","Fragments":["(I"]},{"Key":"calls (I","Fragments":["think"]},{"Key":"idiomatic way,","Fragments":["I'm"]},{"Key":"way, I'm","Fragments":["just"]},{"Key":"a beginner","Fragments":["though)"]},{"Key":"suite is","Fragments":["not","testing"]},{"Key":"entirely accurate","Fragments":["for"]},{"Key":"accurate for","Fragments":["this"]},{"Key":"submission pass","Fragments":["the"]},{"Key":"suite, yet","Fragments":["it"]},{"Key":"yet it","Fragments":["fails"]},{"Key":"fails mixing","Fragments":["letters"]},{"Key":"mixing letters","Fragments":["with"]},{"Key":"with numbers","Fragments":["in","(\"GO"]},{"Key":" Teenager.hey(\"U","Fragments":["WOT"]},{"Key":"Teenager.hey(\"U WOT","Fragments":["M8\")","M8\")"]},{"Key":"WOT M8\")","Fragments":["==","=="]},{"Key":"M8\") ==","Fragments":["\"Whatever.\"","\"Woah,"]},{"Key":"you fix","Fragments":["that?"]},{"Key":"feedback Daniel","Fragments":[":)"]},{"Key":"Daniel :)","Fragments":["I"]},{"Key":"it out...but","Fragments":["I"]},{"Key":"out...but I","Fragments":["think"]},{"Key":"this style.","Fragments":["It's"]},{"Key":"style. It's","Fragments":["shorter"]},{"Key":"It's shorter","Fragments":["and"]},{"Key":"quick scan","Fragments":["I"]},{"Key":"scan I","Fragments":["can"]},{"Key":"def silence?(input)","Fragments":["do"]},{"Key":" length","Fragments":["=","=="]},{"Key":"length =","Fragments":["String.strip(input)"]},{"Key":"length ==","Fragments":["0"]},{"Key":"few second","Fragments":["to"]},{"Key":"second to","Fragments":["realize"]},{"Key":"realize String.length","Fragments":["is"]},{"Key":"String.length is","Fragments":["the"]},{"Key":"String.strip(input) |\u003e","Fragments":["String.length()"]},{"Key":"|\u003e String.length()","Fragments":["=="]},{"Key":"String.length() ==","Fragments":["0"]},{"Key":"you name","Fragments":["the"]},{"Key":"and functions.","Fragments":["It's"]},{"Key":"functions. It's","Fragments":["very"]},{"Key":"suggest for","Fragments":["the"]},{"Key":"the accumulate_word_count","Fragments":["function"]},{"Key":"accumulate_word_count function","Fragments":["is"]},{"Key":"perhaps changing","Fragments":["it"]},{"Key":"use Dict.update","Fragments":["with"]},{"Key":"Dict.update with","Fragments":["the"]},{"Key":"default value.","Fragments":["Something"]},{"Key":"value. Something","Fragments":["like"]},{"Key":"defp accumulate_word_count(word,","Fragments":["counts)"]},{"Key":"accumulate_word_count(word, counts)","Fragments":["do"]},{"Key":"Dict.update(counts, word,","Fragments":["1,"]},{"Key":"1, fn(num)","Fragments":["-\u003e"]},{"Key":"fn(num) -\u003e","Fragments":["num"]},{"Key":"-\u003e num","Fragments":["+"]},{"Key":"little cleaner,","Fragments":["but...I"]},{"Key":"cleaner, but...I","Fragments":["think"]},{"Key":"but...I think","Fragments":["it"]},{"Key":"using *count*,","Fragments":["you"]},{"Key":"*count*, you","Fragments":["can"]},{"Key":"can either","Fragments":["use"]},{"Key":"either use","Fragments":["the"]},{"Key":"the folding","Fragments":["methods"]},{"Key":"folding methods","Fragments":["from"]},{"Key":"reducing ones","Fragments":["from"]},{"Key":"ones from","Fragments":["`Enum`"]},{"Key":"Also, why","Fragments":["are"]},{"Key":"you flattening","Fragments":["the"]},{"Key":"list before","Fragments":["passing"]},{"Key":"personally don't","Fragments":["think"]},{"Key":"there. Your","Fragments":["method"]},{"Key":"Your method","Fragments":["names"]},{"Key":"very clear.","Fragments":["But"]},{"Key":"I say,","Fragments":["it's"]},{"Key":"say, it's","Fragments":["personal"]},{"Key":"it's personal","Fragments":["preference."]},{"Key":"is change","Fragments":["this"]},{"Key":" current_count","Fragments":["=","="]},{"Key":"current_count =","Fragments":["res[head]","0","res[head]"]},{"Key":" unless","Fragments":["current_count,"]},{"Key":"unless current_count,","Fragments":["do:"]},{"Key":"current_count, do:","Fragments":["current_count"]},{"Key":"do: current_count","Fragments":["="]},{"Key":"= res[head]","Fragments":["||"]},{"Key":"res[head] ||","Fragments":["0"]},{"Key":"call. That","Fragments":["was"]},{"Key":"was leftover","Fragments":["from"]},{"Key":"leftover from","Fragments":["something"]},{"Key":"I test","Fragments":["out."]},{"Key":"test out.","Fragments":["Good"]},{"Key":"out. Good","Fragments":["idea."]},{"Key":"Good idea.","Fragments":["I"]},{"Key":"reduce now.","Fragments":["Thanks"]},{"Key":"now. Thanks","Fragments":[":)"]},{"Key":"and clean,","Fragments":["I"]},{"Key":"think. One","Fragments":["problem"]},{"Key":"One problem","Fragments":["is"]},{"Key":"are descriptive,","Fragments":["but"]},{"Key":"descriptive, but","Fragments":["not"]},{"Key":"not precise","Fragments":["(codepoints_of"]},{"Key":"precise (codepoints_of","Fragments":["is"]},{"Key":"(codepoints_of is","Fragments":["the"]},{"Key":"downcased codepoints","Fragments":["of)."]},{"Key":"codepoints of).","Fragments":["Another"]},{"Key":"of). Another","Fragments":["is"]},{"Key":"he codepoints","Fragments":["are"]},{"Key":"are calculated","Fragments":["for"]},{"Key":"calculated for","Fragments":["the"]},{"Key":"first condition,","Fragments":["and"]},{"Key":"condition, and","Fragments":["then"]},{"Key":"then thrown","Fragments":["away."]},{"Key":" Hello,","Fragments":["I"]},{"Key":"Hello, I","Fragments":["saw"]},{"Key":"your question","Fragments":["originally"]},{"Key":"question originally","Fragments":["on"]},{"Key":"originally on","Fragments":["the"]},{"Key":"the elixir-talk","Fragments":["mailing"]},{"Key":"elixir-talk mailing","Fragments":["list."]},{"Key":"have here","Fragments":["is"]},{"Key":"is structurally","Fragments":["identical"]},{"Key":"structurally identical","Fragments":["to"]},{"Key":"I'd done","Fragments":["a"]},{"Key":"done a","Fragments":["while"]},{"Key":"back. My","Fragments":["regex"]},{"Key":"My regex","Fragments":["is","will"]},{"Key":"bit different,","Fragments":["and"]},{"Key":"different, and","Fragments":["I'm"]},{"Key":"I'm replacing","Fragments":["with"]},{"Key":"replacing with","Fragments":["an"]},{"Key":"a space.","Fragments":["Otherwise"]},{"Key":"space. Otherwise","Fragments":["it's"]},{"Key":"Otherwise it's","Fragments":["the"]},{"Key":"same pipeline","Fragments":["of"]},{"Key":"your Dict.update","Fragments":["call,"]},{"Key":"Dict.update call,","Fragments":["you"]},{"Key":"call, you","Fragments":["can"]},{"Key":"function shorthand","Fragments":["\u0026(\u00261","in"]},{"Key":"shorthand \u0026(\u00261","Fragments":["+"]},{"Key":"1) but","Fragments":["what"]},{"Key":"is perfectly","Fragments":["valid."]},{"Key":"wouldn't worry","Fragments":["too"]},{"Key":"worry too","Fragments":["much"]},{"Key":"about changing","Fragments":["two"]},{"Key":"changing two","Fragments":["places."]},{"Key":"places. Changing","Fragments":["the"]},{"Key":"Changing the","Fragments":["*hey*"]},{"Key":"the *hey*","Fragments":["function"]},{"Key":"*hey* function","Fragments":["is"]},{"Key":"is trivial,","Fragments":["since"]},{"Key":"trivial, since","Fragments":["it's"]},{"Key":"simple mapping","Fragments":["between"]},{"Key":"between sentence","Fragments":["types"]},{"Key":"sentence types","Fragments":["and"]},{"Key":"types and","Fragments":["phrases."]},{"Key":"and phrases.","Fragments":["And"]},{"Key":"phrases. And","Fragments":["if"]},{"Key":"change *classify*","Fragments":["without"]},{"Key":"*classify* without","Fragments":["changing"]},{"Key":"changing *hey*,","Fragments":["the"]},{"Key":"*hey*, the","Fragments":["**case**"]},{"Key":"the **case**","Fragments":["statement"]},{"Key":"**case** statement","Fragments":["will"]},{"Key":"statement will","Fragments":["raise"]},{"Key":"raise an","Fragments":["error"]},{"Key":"error in","Fragments":["the","the"]},{"Key":"I organized","Fragments":["that"]},{"Key":"organized that","Fragments":["way"]},{"Key":"mostly a","Fragments":["trade-off."]},{"Key":"a trade-off.","Fragments":["I"]},{"Key":"trade-off. I","Fragments":["don't"]},{"Key":"see much","Fragments":["reason"]},{"Key":"create dedicated","Fragments":["functions"]},{"Key":"dedicated functions","Fragments":["for"]},{"Key":"simple one-liners","Fragments":["(in"]},{"Key":"one-liners (in","Fragments":["some"]},{"Key":"(in some","Fragments":["cases)."]},{"Key":"some cases).","Fragments":["But"]},{"Key":"cases). But","Fragments":["I"]},{"Key":"want a","Fragments":["way"]},{"Key":"to classify","Fragments":["phrases","a"]},{"Key":"classify phrases","Fragments":["without"]},{"Key":"phrases without","Fragments":["Bob"]},{"Key":"without Bob","Fragments":["answering"]},{"Key":"Bob answering","Fragments":["(it's"]},{"Key":"answering (it's","Fragments":["not"]},{"Key":"(it's not","Fragments":["something"]},{"Key":"that matters","Fragments":["for"]},{"Key":"suite, just","Fragments":["a"]},{"Key":"a nicety).","Fragments":["Exposing"]},{"Key":"nicety). Exposing","Fragments":["individual"]},{"Key":"Exposing individual","Fragments":["functions"]},{"Key":"each case","Fragments":["would","and"]},{"Key":"would lead","Fragments":["to"]},{"Key":"to ambiguities","Fragments":["(like"]},{"Key":"ambiguities (like","Fragments":["a"]},{"Key":"(like a","Fragments":["shout"]},{"Key":"shout ending","Fragments":["in"]},{"Key":"ending in","Fragments":["\"?\""]},{"Key":"in \"?\"","Fragments":["being"]},{"Key":"\"?\" being","Fragments":["interpreted"]},{"Key":"being interpreted","Fragments":["both"]},{"Key":"interpreted both","Fragments":["as"]},{"Key":"both as","Fragments":["a"]},{"Key":"a shouting),","Fragments":["unless"]},{"Key":"shouting), unless","Fragments":["I"]},{"Key":"I ramped","Fragments":["up"]},{"Key":"ramped up","Fragments":["the"]},{"Key":"them. Doing","Fragments":["that"]},{"Key":"Doing that","Fragments":["way"]},{"Key":"way allows","Fragments":["me"]},{"Key":"allows me","Fragments":["to"]},{"Key":"handle classification","Fragments":["more"]},{"Key":"classification more","Fragments":["easily"]},{"Key":"easily and","Fragments":["succintely."]},{"Key":"up ditching","Fragments":["out"]},{"Key":"ditching out","Fragments":["exclusive"]},{"Key":"out exclusive","Fragments":["functions"]},{"Key":"exclusive functions","Fragments":["for"]},{"Key":"just created","Fragments":["a"]},{"Key":"a classify","Fragments":["function"]},{"Key":"classify function","Fragments":["which"]},{"Key":"a atom","Fragments":["representing"]},{"Key":"atom representing","Fragments":["each"]},{"Key":"representing each","Fragments":["case."]},{"Key":"case. It","Fragments":["avoids"]},{"Key":"It avoids","Fragments":["ambiguity"]},{"Key":"avoids ambiguity","Fragments":["if"]},{"Key":"ambiguity if","Fragments":["one"]},{"Key":"if one","Fragments":["choose"]},{"Key":"one choose","Fragments":["to"]},{"Key":"choose to","Fragments":["classify"]},{"Key":"classify a","Fragments":["sentence"]},{"Key":"sentence without","Fragments":["having"]},{"Key":"having Bob","Fragments":["to"]},{"Key":"added two","Fragments":["new"]},{"Key":"two new","Fragments":["test"]},{"Key":"new test","Fragments":["cases,","case,"]},{"Key":"cases, both","Fragments":["for"]},{"Key":"for shouting:","Fragments":["one"]},{"Key":"shouting: one","Fragments":["tests"]},{"Key":"one tests","Fragments":["for"]},{"Key":"for shouts","Fragments":["that"]},{"Key":"shouts that","Fragments":["end"]},{"Key":"a interrogation","Fragments":["mark","mark\""]},{"Key":"interrogation mark","Fragments":["and"]},{"Key":"mark and","Fragments":["one"]},{"Key":"for \"censored","Fragments":["profanities\""]},{"Key":"\"censored profanities\"","Fragments":["(AKA"]},{"Key":"profanities\" (AKA","Fragments":["sentence"]},{"Key":"(AKA sentence","Fragments":["with"]},{"Key":"sentence with","Fragments":["only"]},{"Key":"\"shouting with","Fragments":["a","no"]},{"Key":"interrogation mark\"","Fragments":["do"]},{"Key":"assert Teenager.hey(\"YOU","Fragments":["DID"]},{"Key":"Teenager.hey(\"YOU DID","Fragments":["WHAT???\")"]},{"Key":"DID WHAT???\")","Fragments":["=="]},{"Key":"WHAT???\") ==","Fragments":["\"Woah,"]},{"Key":"test \"obscured","Fragments":["profanities\""]},{"Key":"\"obscured profanities\"","Fragments":["do"]},{"Key":"assert Teenager.hey(\"!@#$%\u0026*!@#?\")","Fragments":["=="]},{"Key":"Teenager.hey(\"!@#$%\u0026*!@#?\") ==","Fragments":["\"Woah,"]},{"Key":"The bigger","Fragments":["change,"]},{"Key":"bigger change,","Fragments":["I"]},{"Key":"change, I","Fragments":["added","changed"]},{"Key":"test case,","Fragments":["and"]},{"Key":"case, and","Fragments":["changed"]},{"Key":"\"shouting numbers\"","Fragments":["do","do"]},{"Key":"2, 3!\")","Fragments":["=="]},{"Key":"3!\") ==","Fragments":["\"Woah,"]},{"Key":"out!\" #","Fragments":["Remove"]},{"Key":"# Remove","Fragments":["\"GO\""]},{"Key":"Remove \"GO\"","Fragments":["in"]},{"Key":"\"GO\" in","Fragments":["the"]},{"Key":"exclamation mark,","Fragments":["mixing"]},{"Key":"mark, mixing","Fragments":["numbers\""]},{"Key":"mixing numbers\"","Fragments":["do"]},{"Key":"assert Teenager.hey(\"U","Fragments":["WOT"]},{"Key":"smaller change,","Fragments":["I"]},{"Key":"empty one,","Fragments":["inspired"]},{"Key":"one, inspired","Fragments":["both"]},{"Key":"inspired both","Fragments":["by"]},{"Key":"both by","Fragments":["a"]},{"Key":"from @theodora","Fragments":["about"]},{"Key":"@theodora about","Fragments":["the"]},{"Key":"piping operator","Fragments":["clarity"]},{"Key":"operator clarity","Fragments":["in"]},{"Key":"clarity in","Fragments":["this"]},{"Key":"from some","Fragments":["idioms"]},{"Key":"some idioms","Fragments":["I"]},{"Key":"idioms I","Fragments":["saw"]},{"Key":"saw in","Fragments":["another"]},{"Key":"another submissions.","Fragments":["It"]},{"Key":"submissions. It","Fragments":["does"]},{"Key":" glad","Fragments":["you"]},{"Key":"you found","Fragments":["this!"]},{"Key":"found this!","Fragments":["And"]},{"Key":"this! And","Fragments":["glad"]},{"Key":"And glad","Fragments":["to"]},{"Key":"you aboard","Fragments":["the"]},{"Key":"aboard the","Fragments":["Elixir"]},{"Key":"Elixir train.","Fragments":[":)"]},{"Key":"several smaller","Fragments":["things"]},{"Key":"smaller things","Fragments":["I'd"]},{"Key":"- Please","Fragments":["consider","note"]},{"Key":"Please consider","Fragments":["using"]},{"Key":"using one-line","Fragments":["functions:"]},{"Key":"one-line functions:","Fragments":["`def"]},{"Key":"functions: `def","Fragments":["foo(),"]},{"Key":"`def foo(),","Fragments":["do:"]},{"Key":"foo(), do:","Fragments":["something`"]},{"Key":"Please note","Fragments":["that"]},{"Key":"using pattern-matching,","Fragments":["you"]},{"Key":"pattern-matching, you","Fragments":["can"]},{"Key":"do line","Fragments":["14"]},{"Key":"14 in","Fragments":["the"]},{"Key":"function head:","Fragments":["`def"]},{"Key":"head: `def","Fragments":["count([head"]},{"Key":"`def count([head","Fragments":["|"]},{"Key":"count([head |","Fragments":["tail]),"]},{"Key":"| tail]),","Fragments":["do:"]},{"Key":"tail]), do:","Fragments":["...`."]},{"Key":"do: ...`.","Fragments":["Head"]},{"Key":"...`. Head","Fragments":["and"]},{"Key":"Head and","Fragments":["tail"]},{"Key":"and tail","Fragments":["will","for"]},{"Key":"tail will","Fragments":["be"]},{"Key":"be present","Fragments":["as"]},{"Key":"present as","Fragments":["variables"]},{"Key":"as variables","Fragments":["in"]},{"Key":"am pretty","Fragments":["sure"]},{"Key":"is prohibited","Fragments":["(as"]},{"Key":"prohibited (as","Fragments":["it"]},{"Key":"(as it","Fragments":["defeats"]},{"Key":"it defeats","Fragments":["the"]},{"Key":"defeats the","Fragments":["purpose"]},{"Key":"- line","Fragments":["33)."]},{"Key":"line 33).","Fragments":[":)"]},{"Key":"- For","Fragments":["extra"]},{"Key":"For extra","Fragments":["points,"]},{"Key":"extra points,","Fragments":["look"]},{"Key":"points, look","Fragments":["at"]},{"Key":"at anonymous","Fragments":["functions"]},{"Key":"functions using","Fragments":["the"]},{"Key":"notation. Think","Fragments":["ruby's"]},{"Key":"Think ruby's","Fragments":["`.each(\u0026:function)`"]},{"Key":"ruby's `.each(\u0026:function)`","Fragments":["(lines"]},{"Key":"`.each(\u0026:function)` (lines","Fragments":["20,"]},{"Key":"(lines 20,","Fragments":["47,"]},{"Key":"20, 47,","Fragments":["52)."]},{"Key":"no expert,","Fragments":["but"]},{"Key":"give my","Fragments":["best:"]},{"Key":"You defined","Fragments":["is_question?"]},{"Key":"defined is_question?","Fragments":["but"]},{"Key":"is_question? but","Fragments":["you"]},{"Key":"2. Using","Fragments":["regular","the"]},{"Key":"Using regular","Fragments":["expressions"]},{"Key":"are doing.","Fragments":["I"]},{"Key":"doing. I","Fragments":["guess"]},{"Key":"encapsulate their","Fragments":["logic"]},{"Key":"their logic","Fragments":["into"]},{"Key":"3. You","Fragments":["have"]},{"Key":"expressions for","Fragments":["the"]},{"Key":"case \"Woah,","Fragments":["chill"]},{"Key":"out!\". If","Fragments":["you"]},{"Key":"with them,","Fragments":["try"]},{"Key":"them, try","Fragments":["to"]},{"Key":"4. The","Fragments":["same"]},{"Key":"same goes","Fragments":["for"]},{"Key":"for \"Whatever.\"","Fragments":["It"]},{"Key":"\"Whatever.\" It","Fragments":["is"]},{"Key":"merge those","Fragments":["two"]},{"Key":" 5.","Fragments":["No"]},{"Key":"5. No","Fragments":["explicit"]},{"Key":"No explicit","Fragments":["return"]},{"Key":"explicit return","Fragments":["required"]},{"Key":"return required","Fragments":["in"]},{"Key":"in is_question?","Fragments":["method"]},{"Key":"didn't comment","Fragments":["in"]},{"Key":"submission, but","Fragments":["I"]},{"Key":"was kinda","Fragments":["hating"]},{"Key":"kinda hating","Fragments":["myself"]},{"Key":"hating myself","Fragments":["for"]},{"Key":"how slow","Fragments":["(when"]},{"Key":"slow (when","Fragments":["not"]},{"Key":"(when not","Fragments":["simply"]},{"Key":"not simply","Fragments":["impractical)"]},{"Key":"simply impractical)","Fragments":["were"]},{"Key":"impractical) were","Fragments":["some"]},{"Key":"were some","Fragments":["of"]},{"Key":"functions. Like,","Fragments":["dog"]},{"Key":"Like, dog","Fragments":["slow."]},{"Key":"main reason","Fragments":["being,"]},{"Key":"reason being,","Fragments":["I"]},{"Key":"being, I","Fragments":["forgot"]},{"Key":"forgot how","Fragments":["to"]},{"Key":"but figured","Fragments":["out"]},{"Key":"append to","Fragments":["one,"]},{"Key":"to one,","Fragments":["so"]},{"Key":"one, so","Fragments":["I"]},{"Key":"using *append*","Fragments":["everywhere.","in"]},{"Key":"*append* everywhere.","Fragments":["And"]},{"Key":"everywhere. And","Fragments":["the"]},{"Key":"the thing","Fragments":["is,"]},{"Key":"thing is,","Fragments":["*append*"]},{"Key":"is, *append*","Fragments":["has"]},{"Key":"*append* has","Fragments":["terrible"]},{"Key":"has terrible","Fragments":["performance,"]},{"Key":"terrible performance,","Fragments":["specially"]},{"Key":"performance, specially","Fragments":["the"]},{"Key":"doing before,","Fragments":["traversing"]},{"Key":"before, traversing","Fragments":["both"]},{"Key":"traversing both","Fragments":["lists"]},{"Key":"one (for","Fragments":["no"]},{"Key":"(for no","Fragments":["reason"]},{"Key":"reason whatsoever).","Fragments":["And"]},{"Key":"whatsoever). And","Fragments":["then"]},{"Key":"*append* in","Fragments":["each"]},{"Key":"each iteration","Fragments":["of"]},{"Key":"iteration of","Fragments":["a"]},{"Key":"a reduction,","Fragments":["was"]},{"Key":"reduction, was","Fragments":["a"]},{"Key":"a recipe","Fragments":["for"]},{"Key":"recipe for","Fragments":["disaster."]},{"Key":"remembered how","Fragments":["to"]},{"Key":"a frigging","Fragments":["*reverse*,"]},{"Key":"frigging *reverse*,","Fragments":["and"]},{"Key":"*reverse*, and","Fragments":["with"]},{"Key":"with linear","Fragments":["complexity,"]},{"Key":"linear complexity,","Fragments":["so"]},{"Key":"complexity, so","Fragments":["instead"]},{"Key":"so instead","Fragments":["of"]},{"Key":"of abusing","Fragments":["*append*"]},{"Key":"abusing *append*","Fragments":["I"]},{"Key":"*append* I","Fragments":["now"]},{"Key":"now abuse","Fragments":["*reverse*!"]},{"Key":"abuse *reverse*!","Fragments":["At"]},{"Key":"*reverse*! At","Fragments":["least"]},{"Key":"least the","Fragments":["test"]},{"Key":"suite completes","Fragments":["now."]},{"Key":"a Dict","Fragments":["in"]},{"Key":"Dict in","Fragments":["nucleotide_counts?"]},{"Key":"in nucleotide_counts?","Fragments":["Also"]},{"Key":"nucleotide_counts? Also","Fragments":["you"]},{"Key":"a duplicated","Fragments":["@antoinette"]},{"Key":"duplicated @antoinette","Fragments":["setter."]},{"Key":"very confident","Fragments":["in"]},{"Key":"second condition,","Fragments":["the"]},{"Key":"condition, the","Fragments":["one"]},{"Key":"line 6.","Fragments":["It"]},{"Key":"6. It","Fragments":["passes"]},{"Key":"It passes","Fragments":["the"]},{"Key":"tests ok,","Fragments":["but"]},{"Key":"ok, but","Fragments":["it's"]},{"Key":"recursion, but","Fragments":["I"]},{"Key":"compiler was","Fragments":["capable"]},{"Key":"was capable","Fragments":["of"]},{"Key":"optimizing this","Fragments":["cases."]},{"Key":"this cases.","Fragments":["I"]},{"Key":"cases. I","Fragments":["guess"]},{"Key":"make everything","Fragments":["tail-recursive"]},{"Key":"everything tail-recursive","Fragments":["now,"]},{"Key":"tail-recursive now,","Fragments":["but"]},{"Key":"didn't made","Fragments":["too"]},{"Key":"made too","Fragments":["much"]},{"Key":"much difference","Fragments":["in"]},{"Key":"suite running","Fragments":["time..."]},{"Key":"running time...","Fragments":["I"]},{"Key":"time... I","Fragments":["just"]},{"Key":"improved using","Fragments":["tail"]},{"Key":"using tail","Fragments":["recursion."]},{"Key":"recursion. Let","Fragments":["me"]},{"Key":"insert my","Fragments":["standard"]},{"Key":"standard tail","Fragments":["recursion"]},{"Key":"good. Minor","Fragments":["nit:"]},{"Key":"Minor nit:","Fragments":["`\u0026([...])`"]},{"Key":"nit: `\u0026([...])`","Fragments":["can"]},{"Key":"`\u0026([...])` can","Fragments":["always"]},{"Key":"can always","Fragments":["be"]},{"Key":"as `\u0026[...]`","Fragments":["since"]},{"Key":"`\u0026[...]` since","Fragments":["it's"]},{"Key":"`\u0026` should","Fragments":["apply"]},{"Key":"should apply","Fragments":["to."]},{"Key":"condition more","Fragments":["explicit,"]},{"Key":"more explicit,","Fragments":["but"]},{"Key":"my condition","Fragments":["logic"]},{"Key":"condition logic","Fragments":["is"]},{"Key":"is shaky","Fragments":["in"]},{"Key":"shaky in","Fragments":["places."]},{"Key":"for explaining","Fragments":["that,"]},{"Key":"explaining that,","Fragments":["@howell."]},{"Key":"that, @howell.","Fragments":["I've"]},{"Key":"@howell. I've","Fragments":["heard"]},{"Key":"heard a","Fragments":["bit"]},{"Key":"never worked","Fragments":["in"]},{"Key":"worked in","Fragments":["a"]},{"Key":"that natively","Fragments":["supports"]},{"Key":"natively supports","Fragments":["it."]},{"Key":"supports it.","Fragments":["I"]},{"Key":"thought a","Fragments":["bit"]},{"Key":"but mistakenly","Fragments":["thought"]},{"Key":"mistakenly thought","Fragments":["that"]},{"Key":"`count` was","Fragments":["tail-recursive"]},{"Key":"was tail-recursive","Fragments":["since"]},{"Key":"tail-recursive since","Fragments":["`count(t)`"]},{"Key":"since `count(t)`","Fragments":["is"]},{"Key":"`count(t)` is","Fragments":["the"]},{"Key":"last part","Fragments":["of"]},{"Key":"expression --","Fragments":["but"]},{"Key":"-- but","Fragments":["I"]},{"Key":"that `+`","Fragments":["is"]},{"Key":"`+` is","Fragments":["the"]},{"Key":"function call,","Fragments":["not"]},{"Key":"call, not","Fragments":["`count`,"]},{"Key":"not `count`,","Fragments":["so,"]},{"Key":"`count`, so,","Fragments":["as"]},{"Key":"so, as","Fragments":["you"]},{"Key":"you explained,","Fragments":["it's"]},{"Key":"explained, it's","Fragments":["not"]},{"Key":"I reviewed","Fragments":["my"]},{"Key":"reviewed my","Fragments":["implementations"]},{"Key":"my implementations","Fragments":["for"]},{"Key":"other methods,","Fragments":["and"]},{"Key":"all tail-recursive","Fragments":["or"]},{"Key":"tail-recursive or","Fragments":["not."]},{"Key":"not. Specifically,","Fragments":["I'm"]},{"Key":"Specifically, I'm","Fragments":["not"]},{"Key":"my `map`","Fragments":["and"]},{"Key":"`filter` implementations.","Fragments":["In"]},{"Key":"implementations. In","Fragments":["`[f.(h)"]},{"Key":"In `[f.(h)","Fragments":["|"]},{"Key":"`[f.(h) |","Fragments":["map(t,","map(t,f)]`"]},{"Key":"| map(t,","Fragments":["f)]`,"]},{"Key":"map(t, f)]`,","Fragments":["is"]},{"Key":"f)]`, is","Fragments":["there"]},{"Key":"for `[]`","Fragments":["or"]},{"Key":"`[]` or","Fragments":["`|`"]},{"Key":"or `|`","Fragments":["and"]},{"Key":"`|` and","Fragments":["which"]},{"Key":"and which","Fragments":["order"]},{"Key":"which order","Fragments":["is"]},{"Key":"is `f.(h)`","Fragments":["and"]},{"Key":"`f.(h)` and","Fragments":["`map(t,"]},{"Key":"and `map(t,","Fragments":["f)`"]},{"Key":"`map(t, f)`","Fragments":["evaluated"]},{"Key":"f)` evaluated","Fragments":["in?"]},{"Key":"recursion, do","Fragments":["you"]},{"Key":"easily reason","Fragments":["about"]},{"Key":"and ensure","Fragments":["that"]},{"Key":"recursive is","Fragments":["in"]},{"Key":"fact tail","Fragments":["recursive?"]},{"Key":"actually exactly","Fragments":["what"]},{"Key":"do. It","Fragments":["may"]},{"Key":"reverse takes","Fragments":["time"]},{"Key":"takes time","Fragments":["linearly"]},{"Key":"time linearly","Fragments":["relative"]},{"Key":"list (i.e.","Fragments":["O(n))"]},{"Key":"(i.e. O(n))","Fragments":["which"]},{"Key":"O(n)) which","Fragments":["isn't"]},{"Key":"too bad","Fragments":["in"]},{"Key":"bad in","Fragments":["this"]},{"Key":"Well `[a|b]`","Fragments":["is"]},{"Key":"`[a|b]` is","Fragments":["really"]},{"Key":"really syntactic","Fragments":["sugar"]},{"Key":"for `cons(a,b)`","Fragments":["(there"]},{"Key":"`cons(a,b)` (there","Fragments":["is"]},{"Key":"(there is","Fragments":["no"]},{"Key":"no `cons`","Fragments":["function"]},{"Key":"`cons` function","Fragments":["in"]},{"Key":"compiler treats","Fragments":["`[a|b]`"]},{"Key":"treats `[a|b]`","Fragments":["as"]},{"Key":"`[a|b]` as","Fragments":["a"]},{"Key":"call so","Fragments":["the"]},{"Key":"is apt),","Fragments":["that"]},{"Key":"apt), that","Fragments":["should"]},{"Key":"the rule","Fragments":["for"]},{"Key":"for tail","Fragments":["recursion"]},{"Key":"call must","Fragments":["be"]},{"Key":"expression. A","Fragments":["good"]},{"Key":"determine whether","Fragments":["this"]},{"Key":"whether this","Fragments":["is"]},{"Key":"a complicated","Fragments":["expression"]},{"Key":"complicated expression","Fragments":["as"]},{"Key":"expressions, each","Fragments":["of"]},{"Key":"form `VAR","Fragments":["="]},{"Key":"`VAR =","Fragments":["EXPR`"]},{"Key":"= EXPR`","Fragments":["where"]},{"Key":"EXPR` where","Fragments":["`EXPR`"]},{"Key":"where `EXPR`","Fragments":["has"]},{"Key":"`EXPR` has","Fragments":["no"]},{"Key":"no subexpressions","Fragments":["(i.e."]},{"Key":"subexpressions (i.e.","Fragments":["the"]},{"Key":"(i.e. the","Fragments":["only"]},{"Key":"only terms","Fragments":["in"]},{"Key":"it are","Fragments":["variable"]},{"Key":"are variable","Fragments":["names,"]},{"Key":"variable names,","Fragments":["function"]},{"Key":"names, function","Fragments":["names"]},{"Key":"names or","Fragments":["simple"]},{"Key":"or simple","Fragments":["values"]},{"Key":"simple values","Fragments":["(no"]},{"Key":"values (no","Fragments":["list/tuple/map/structs))."]},{"Key":"(no list/tuple/map/structs)).","Fragments":["For"]},{"Key":"list/tuple/map/structs)). For","Fragments":["example"]},{"Key":"example `[f.(h)","Fragments":["|"]},{"Key":"| map(t,f)]`","Fragments":["would"]},{"Key":"map(t,f)]` would","Fragments":["be"]},{"Key":" x1","Fragments":["="]},{"Key":"x1 =","Fragments":["f.(h)"]},{"Key":" x2","Fragments":["="]},{"Key":"x2 =","Fragments":["map(t,"]},{"Key":"= map(t,","Fragments":["f)"]},{"Key":" [x1","Fragments":["|"]},{"Key":"[x1 |","Fragments":["x2]"]},{"Key":"| x2]","Fragments":["#"]},{"Key":"x2] #","Fragments":["return"]},{"Key":"# return","Fragments":["value"]},{"Key":"When writing","Fragments":["out"]},{"Key":"the expressions","Fragments":["in"]},{"Key":"way a","Fragments":["tail"]},{"Key":"Thanks, @doyle,","Fragments":["that"]},{"Key":"@doyle, that","Fragments":["clears"]},{"Key":"clears things","Fragments":["up."]},{"Key":"rewrote `count`,","Fragments":["`map`"]},{"Key":"`count`, `map`","Fragments":["and"]},{"Key":"`filter` (the","Fragments":["three"]},{"Key":"(the three","Fragments":["functions"]},{"Key":"that were","Fragments":["not"]},{"Key":"were not","Fragments":["tail"]},{"Key":"tail recursive)","Fragments":["and"]},{"Key":"recursive) and","Fragments":["found"]},{"Key":"easily implement","Fragments":["them"]},{"Key":"and `reverse`,","Fragments":["which"]},{"Key":"`reverse`, which","Fragments":["works"]},{"Key":"out nicely","Fragments":[":)."]},{"Key":"Indeed. In","Fragments":["fact"]},{"Key":"fact in","Fragments":["Elixir's"]},{"Key":"in Elixir's","Fragments":["`Enum`"]},{"Key":"Elixir's `Enum`","Fragments":["module"]},{"Key":"module they","Fragments":["are"]},{"Key":"of reduce","Fragments":["(the","in"]},{"Key":"reduce (the","Fragments":["`Enumerable`"]},{"Key":"(the `Enumerable`","Fragments":["protocol"]},{"Key":"`Enumerable` protocol","Fragments":["really"]},{"Key":"protocol really","Fragments":["is"]},{"Key":"really is","Fragments":["just"]},{"Key":"just `reduce`","Fragments":["with"]},{"Key":"`reduce` with","Fragments":["a"]},{"Key":"few extra","Fragments":["methods"]},{"Key":"extra methods","Fragments":["and"]},{"Key":"some complication","Fragments":["for"]},{"Key":"complication for","Fragments":["efficiency)."]},{"Key":"also good","Fragments":["practice"]},{"Key":"it saves","Fragments":["you"]},{"Key":"whether something","Fragments":["is"]},{"Key":"an experienced","Fragments":["reader"]},{"Key":"experienced reader","Fragments":["as"]},{"Key":"reader as","Fragments":["well."]},{"Key":" didn't","Fragments":["find"]},{"Key":"native list","Fragments":["of"]},{"Key":"of couples","Fragments":["to"]},{"Key":"couples to","Fragments":["map"]},{"Key":"map conversion","Fragments":["function"]},{"Key":"Elixir 0.15.","Fragments":["Do"]},{"Key":"0.15. Do","Fragments":["you"]},{"Key":"than line","Fragments":["18ff?"]},{"Key":"write `\u0026([\u00261","Fragments":["|\u00262])`","|\u00262])`*"]},{"Key":"`\u0026([\u00261 |\u00262])`","Fragments":["but"]},{"Key":"|\u00262])` but","Fragments":["I"]},{"Key":"implement append","Fragments":["without"]},{"Key":"append without","Fragments":["constructing"]},{"Key":"without constructing","Fragments":["new"]},{"Key":"constructing new","Fragments":["lists."]},{"Key":"new lists.","Fragments":["Any"]},{"Key":"lists. Any","Fragments":["ideas?"]},{"Key":"module needs","Fragments":["`isupcase`"]},{"Key":"needs `isupcase`","Fragments":["and"]},{"Key":"`isupcase` and","Fragments":["`isdowncase`"]},{"Key":"and `isdowncase`","Fragments":["functions,"]},{"Key":"`isdowncase` functions,","Fragments":["but"]},{"Key":"but even","Fragments":["so,"]},{"Key":"even so,","Fragments":["I'm"]},{"Key":"so, I'm","Fragments":["sure"]},{"Key":"are better","Fragments":["ways"]},{"Key":"do this.","Fragments":["For"]},{"Key":"example, there","Fragments":["must"]},{"Key":"be info","Fragments":["in"]},{"Key":"info in","Fragments":["the"]},{"Key":"database that","Fragments":["I"]},{"Key":"can access","Fragments":["directly"]},{"Key":"access directly","Fragments":["instead"]},{"Key":"directly instead","Fragments":["of"]},{"Key":"of relying","Fragments":["on"]},{"Key":"on conversion","Fragments":["with"]},{"Key":"conversion with","Fragments":["`upcase`"]},{"Key":"with `upcase`","Fragments":["and"]},{"Key":"and `downcase`","Fragments":["and"]},{"Key":"`downcase` and","Fragments":["then"]},{"Key":"then comparing","Fragments":["to"]},{"Key":"original value.","Fragments":["At"]},{"Key":"value. At","Fragments":["least"]},{"Key":"least I","Fragments":["learned"]},{"Key":"about `Enum.any?`","Fragments":["and"]},{"Key":"`Enum.any?` and","Fragments":["`Enum.all?`"]},{"Key":"with pipelining","Fragments":["seems","but"]},{"Key":"pipelining seems","Fragments":["to"]},{"Key":"be matching","Fragments":["your"]},{"Key":"matching your","Fragments":["inputs"]},{"Key":"your inputs","Fragments":["with"]},{"Key":"inputs with","Fragments":["your"]},{"Key":"your outputs.","Fragments":["Who"]},{"Key":"outputs. Who","Fragments":["would"]},{"Key":"Who would","Fragments":["have"]},{"Key":"Hi Aaron!","Fragments":["I"]},{"Key":"Aaron! I","Fragments":["got"]},{"Key":"email notification","Fragments":["for"]},{"Key":"notification for","Fragments":["this."]},{"Key":"this. Did","Fragments":["you"]},{"Key":"or did","Fragments":["the"]},{"Key":"site do","Fragments":["that"]},{"Key":"Your doc","Fragments":["example"]},{"Key":"doc example","Fragments":["looks"]},{"Key":"example looks","Fragments":["different"]},{"Key":"looks different","Fragments":["from"]},{"Key":"is testing","Fragments":["for."]},{"Key":"testing for.","Fragments":["Unless"]},{"Key":"for. Unless","Fragments":["i'm"]},{"Key":"Unless i'm","Fragments":["reading"]},{"Key":"i'm reading","Fragments":["wrong"]},{"Key":"reading wrong","Fragments":["you"]},{"Key":"wrong you","Fragments":["receive"]},{"Key":"you receive","Fragments":["a","notifications"]},{"Key":"receive a","Fragments":["map"]},{"Key":"map of","Fragments":["integer","letters"]},{"Key":"of integer","Fragments":["scores"]},{"Key":"integer scores","Fragments":["to"]},{"Key":"scores to","Fragments":["lists"]},{"Key":"letters, and","Fragments":["should"]},{"Key":"and should","Fragments":["return"]},{"Key":"to integer","Fragments":["scores."]},{"Key":"pipelining but","Fragments":["couldn't"]},{"Key":"to work,","Fragments":["so"]},{"Key":"just split","Fragments":["everything"]},{"Key":"split everything","Fragments":["out"]},{"Key":"everything out","Fragments":["into"]},{"Key":"into seperate","Fragments":["functions."]},{"Key":"Using two","Fragments":["regexes"]},{"Key":"two regexes","Fragments":["had"]},{"Key":"regexes had","Fragments":["bothered"]},{"Key":"had bothered","Fragments":["me,"]},{"Key":"bothered me,","Fragments":["but"]},{"Key":"had issues","Fragments":["with"]},{"Key":"issues with","Fragments":["whitespace"]},{"Key":"whitespace in","Fragments":["the"]},{"Key":"result. Looking","Fragments":["at"]},{"Key":"by chus1818","Fragments":["I"]},{"Key":"chus1818 I","Fragments":["saw"]},{"Key":"that `String.split`","Fragments":["has"]},{"Key":"`String.split` has","Fragments":["a"]},{"Key":"a `trim`","Fragments":["parameter"]},{"Key":"`trim` parameter","Fragments":["which"]},{"Key":"parameter which","Fragments":["takes"]},{"Key":"site emails","Fragments":["you"]},{"Key":"emails you","Fragments":["when"]},{"Key":"I submit","Fragments":["because"]},{"Key":"submit because","Fragments":["we're"]},{"Key":"same teams","Fragments":["(dallasrb"]},{"Key":"teams (dallasrb","Fragments":["and"]},{"Key":"(dallasrb and","Fragments":["elixirdallas)."]},{"Key":"and elixirdallas).","Fragments":["I'm"]},{"Key":"elixirdallas). I'm","Fragments":["not"]},{"Key":"entirely sure","Fragments":["though."]},{"Key":"sure though.","Fragments":["It's"]},{"Key":"though. It's","Fragments":["nothing"]},{"Key":"It's nothing","Fragments":["special"]},{"Key":"nothing special","Fragments":["I"]},{"Key":"special I","Fragments":["did."]},{"Key":"It's funny","Fragments":["that"]},{"Key":"funny that","Fragments":["you"]},{"Key":"the doc.","Fragments":["I"]},{"Key":"doc. I","Fragments":["actually"]},{"Key":"didn't change","Fragments":["it"]},{"Key":"one provided","Fragments":["by"]},{"Key":"use `[h","Fragments":["|"]},{"Key":"`[h |","Fragments":["acc]`"]},{"Key":"| acc]`","Fragments":["to"]},{"Key":"acc]` to","Fragments":["construct"]},{"Key":"to construct","Fragments":["a"]},{"Key":"construct a","Fragments":["new"]},{"Key":"You're not","Fragments":["supposed"]},{"Key":"not supposed","Fragments":["to"]},{"Key":" Right.","Fragments":["After"]},{"Key":"Right. After","Fragments":["my"]},{"Key":"After my","Fragments":["last"]},{"Key":"last message,","Fragments":["I"]},{"Key":"message, I","Fragments":["noticed"]},{"Key":"noticed somewhere","Fragments":["that"]},{"Key":"that said","Fragments":["you"]},{"Key":"said you","Fragments":["receive"]},{"Key":"receive notifications","Fragments":["for"]},{"Key":"notifications for","Fragments":["team"]},{"Key":"for team","Fragments":["members."]},{"Key":"They're updated","Fragments":["things"]},{"Key":"updated things","Fragments":["since"]},{"Key":"things since","Fragments":["I"]},{"Key":"went through","Fragments":["these"]},{"Key":"through these","Fragments":["exercises."]},{"Key":"these exercises.","Fragments":["There"]},{"Key":"exercises. There","Fragments":["were"]},{"Key":"were no","Fragments":["docs"]},{"Key":"no docs","Fragments":["in"]},{"Key":"docs in","Fragments":["the"]},{"Key":"default templates","Fragments":["when"]},{"Key":"templates when","Fragments":["I"]},{"Key":"can destructure","Fragments":["the"]},{"Key":"destructure the","Fragments":["`{k,"]},{"Key":"the `{k,","Fragments":["v}`"]},{"Key":"`{k, v}`","Fragments":["right"]},{"Key":"v}` right","Fragments":["in"]},{"Key":"defp unnest(map)","Fragments":["do"]},{"Key":" Enum.flat_map","Fragments":["map,"]},{"Key":"Enum.flat_map map,","Fragments":["fn({k,"]},{"Key":"map, fn({k,","Fragments":["v})"]},{"Key":"fn({k, v})","Fragments":["-\u003e"]},{"Key":"Enum.map v,","Fragments":["\u0026({String.downcase(\u00261),"]},{"Key":"v, \u0026({String.downcase(\u00261),","Fragments":["k})"]},{"Key":"doesn't specify","Fragments":["a"]},{"Key":"specify a","Fragments":["specific"]},{"Key":"specific output","Fragments":["for"]},{"Key":"output for","Fragments":["that"]},{"Key":"that case,","Fragments":["so"]},{"Key":"case, so","Fragments":["\"Whatever\""]},{"Key":"so \"Whatever\"","Fragments":["is"]},{"Key":"\"Whatever\" is","Fragments":["the"]},{"Key":" Implementing","Fragments":["all"]},{"Key":"Implementing all","Fragments":["functions"]},{"Key":"of _reduce_","Fragments":["was"]},{"Key":"_reduce_ was","Fragments":["very"]},{"Key":"only suggestions","Fragments":["are"]},{"Key":"suggestions are","Fragments":["cosmetic"]},{"Key":"are cosmetic","Fragments":["and"]},{"Key":"cosmetic and","Fragments":["related"]},{"Key":"and related","Fragments":["to"]},{"Key":"comment of","Fragments":["yours"]},{"Key":"of yours","Fragments":["in"]},{"Key":"yours in","Fragments":["the"]},{"Key":" *there","Fragments":["must"]},{"Key":"*there must","Fragments":["be"]},{"Key":"1. For","Fragments":["this"]},{"Key":"specific case,","Fragments":["you"]},{"Key":"take out","Fragments":["the"]},{"Key":"parenthesis (`\u0026[\u00261|\u00262]`),","Fragments":["and"]},{"Key":"(`\u0026[\u00261|\u00262]`), and","Fragments":["it"]},{"Key":"2. But","Fragments":["more"]},{"Key":"But more","Fragments":["generally,"]},{"Key":"more generally,","Fragments":["for"]},{"Key":"generally, for","Fragments":["some"]},{"Key":"could benefit","Fragments":["by"]},{"Key":"benefit by","Fragments":["just"]},{"Key":"just being","Fragments":["explicit"]},{"Key":"being explicit","Fragments":["when"]},{"Key":"explicit when","Fragments":["defining"]},{"Key":"defining your","Fragments":["anonymous"]},{"Key":"your anonymous","Fragments":["functions,"]},{"Key":"functions, rather","Fragments":["than"]},{"Key":"the partial","Fragments":["application"]},{"Key":"You look","Fragments":["very"]},{"Key":" :)","Fragments":["I"]},{"Key":"the instructions,","Fragments":["I"]},{"Key":"instructions, I","Fragments":["just"]},{"Key":"two smallers","Fragments":["for"]},{"Key":"smallers for","Fragments":["solving"]},{"Key":"for solving","Fragments":["the"]},{"Key":"* Comparing","Fragments":["two"]},{"Key":"Comparing two","Fragments":["lists"]},{"Key":"of same","Fragments":["length"]},{"Key":"same length","Fragments":["to"]},{"Key":"length to","Fragments":["see"]},{"Key":"* Verifying","Fragments":["if"]},{"Key":"Verifying if","Fragments":["a","a"]},{"Key":"sublist of","Fragments":["another."]},{"Key":" Verifying","Fragments":["if"]},{"Key":"a superlist","Fragments":["of"]},{"Key":"superlist of","Fragments":["another"]},{"Key":"another it's","Fragments":["just"]},{"Key":"the inverse","Fragments":["case"]},{"Key":"inverse case","Fragments":["of"]},{"Key":"second problem,","Fragments":["and"]},{"Key":"therefore trivial","Fragments":["to"]},{"Key":"original solution","Fragments":["in","was"]},{"Key":"for algorithms","Fragments":["used,"]},{"Key":"algorithms used,","Fragments":["it"]},{"Key":"used, it","Fragments":["took"]},{"Key":"of trial","Fragments":["and"]},{"Key":"trial and","Fragments":["error"]},{"Key":"the sublist","Fragments":["problem,"]},{"Key":"sublist problem,","Fragments":["but"]},{"Key":"got it.","Fragments":["I"]},{"Key":"match multiple","Fragments":["elements"]},{"Key":"multiple elements","Fragments":["in"]},{"Key":"function declaration","Fragments":["to"]},{"Key":"OK, the","Fragments":["code"]},{"Key":"The original","Fragments":["solution"]},{"Key":"Dict functions","Fragments":["and"]},{"Key":"single map.","Fragments":["It"]},{"Key":"map. It","Fragments":["worked,"]},{"Key":"It worked,","Fragments":["it"]},{"Key":"worked, it","Fragments":["passed"]},{"Key":"it passed","Fragments":["the"]},{"Key":"passed the","Fragments":["tests,"]},{"Key":"tests, it","Fragments":["was"]},{"Key":"of reading","Fragments":["the","to"]},{"Key":"the *bonus","Fragments":["points*"]},{"Key":"*bonus points*","Fragments":["section."]},{"Key":"be fair,","Fragments":["I"]},{"Key":"fair, I","Fragments":["wanted"]},{"Key":"a excuse","Fragments":["to"]},{"Key":"excuse to","Fragments":["try"]},{"Key":"try messing","Fragments":["around"]},{"Key":"messing around","Fragments":["with"]},{"Key":"processes and","Fragments":["isolating"]},{"Key":"and isolating","Fragments":["data."]},{"Key":"isolating data.","Fragments":["In"]},{"Key":"data. In","Fragments":["the"]},{"Key":"simple \"just","Fragments":["use"]},{"Key":"\"just use","Fragments":["a"]},{"Key":"a map\"","Fragments":["solution,"]},{"Key":"map\" solution,","Fragments":["you"]},{"Key":"the possibility","Fragments":["of"]},{"Key":"possibility of","Fragments":["a"]},{"Key":"a malicious,","Fragments":["intermediary"]},{"Key":"malicious, intermediary","Fragments":["function"]},{"Key":"intermediary function","Fragments":["deleting"]},{"Key":"function deleting","Fragments":["entries"]},{"Key":"deleting entries","Fragments":["from"]},{"Key":"entries from","Fragments":["the"]},{"Key":"database before","Fragments":["passing"]},{"Key":"map forward.","Fragments":["This"]},{"Key":"forward. This","Fragments":["can't"]},{"Key":"This can't","Fragments":["happen"]},{"Key":"this agent-based","Fragments":["solution,"]},{"Key":"agent-based solution,","Fragments":["since"]},{"Key":"solution, since","Fragments":["the"]},{"Key":"process only","Fragments":["accepts"]},{"Key":"only accepts","Fragments":["a"]},{"Key":"accepts a","Fragments":["limited"]},{"Key":"limited set","Fragments":["of"]},{"Key":"of messages,","Fragments":["and"]},{"Key":"messages, and","Fragments":["the"]},{"Key":"backing map","Fragments":["is"]},{"Key":"not exposed","Fragments":["in"]},{"Key":"exposed in","Fragments":["anyway"]},{"Key":"in anyway","Fragments":["except"]},{"Key":"anyway except","Fragments":["for"]},{"Key":"new `clone`","Fragments":["method"]},{"Key":"`clone` method","Fragments":["(but"]},{"Key":"method (but","Fragments":["then"]},{"Key":"(but then","Fragments":["of"]},{"Key":"then of","Fragments":["course"]},{"Key":"a `School`","Fragments":["struct"]},{"Key":"`School` struct","Fragments":["in"]},{"Key":"struct in","Fragments":["hand,"]},{"Key":"in hand,","Fragments":["and"]},{"Key":"hand, and","Fragments":["in"]},{"Key":"world you","Fragments":["wouldn't"]},{"Key":"wouldn't trust","Fragments":["a"]},{"Key":"trust a","Fragments":["third-party"]},{"Key":"a third-party","Fragments":["returning"]},{"Key":"third-party returning","Fragments":["a"]},{"Key":"map rather","Fragments":["than"]},{"Key":"the well-defined","Fragments":["opaque"]},{"Key":"well-defined opaque","Fragments":["struct"]},{"Key":"opaque struct","Fragments":["-"]},{"Key":"struct -","Fragments":["I"]},{"Key":"want there","Fragments":["to"]},{"Key":"an `\u0026inc/1`","Fragments":["function."]},{"Key":"time getting","Fragments":["the"]},{"Key":"the russian","Fragments":["test"]},{"Key":"russian test","Fragments":["passing."]},{"Key":"test passing.","Fragments":["someone"]},{"Key":"passing. someone","Fragments":["explained"]},{"Key":"someone explained","Fragments":["it"]},{"Key":"me. but","Fragments":["i'm"]},{"Key":"but i'm","Fragments":["still"]},{"Key":"i'm still","Fragments":["getting"]},{"Key":"next implementation","Fragments":["I"]},{"Key":"using pipeline","Fragments":["but"]},{"Key":"pipeline but","Fragments":["I"]},{"Key":"better functional","Fragments":["way"]},{"Key":"the counter","Fragments":["function"]},{"Key":"Really nice,","Fragments":["readable,"]},{"Key":"nice, readable,","Fragments":["clean"]},{"Key":"readable, clean","Fragments":["solution."]},{"Key":"clean solution.","Fragments":["The"]},{"Key":"maybe `String.ends_with?/2`","Fragments":["might"]},{"Key":"`String.ends_with?/2` might","Fragments":["be"]},{"Key":"expressive than","Fragments":["using"]},{"Key":"using `last/1`","Fragments":["and"]},{"Key":"`last/1` and","Fragments":["checking"]},{"Key":"and checking","Fragments":["equality."]},{"Key":"I'm in","Fragments":["the"]},{"Key":"same boat","Fragments":["as"]},{"Key":"boat as","Fragments":["you"]},{"Key":"you RE","Fragments":["elixir"]},{"Key":"RE elixir","Fragments":["experience."]},{"Key":"about guards","Fragments":["too"]},{"Key":"guards too","Fragments":["but"]},{"Key":"apparently there","Fragments":["are"]},{"Key":"limited number","Fragments":["of"]},{"Key":"functions callable","Fragments":["in"]},{"Key":"callable in","Fragments":["them."]},{"Key":"been copied","Fragments":["from"]},{"Key":"copied from","Fragments":["other"]},{"Key":"really translate","Fragments":["well"]},{"Key":"translate well","Fragments":["into"]},{"Key":"well into","Fragments":["a"]},{"Key":"agree \u003ccode\u003eString.ends_with?/2\u003c/code\u003e","Fragments":["is"]},{"Key":"\u003ccode\u003eString.ends_with?/2\u003c/code\u003e is","Fragments":["more"]},{"Key":"more expressive.","Fragments":["I"]},{"Key":"expressive. I","Fragments":["chose"]},{"Key":"chose \u003ccode\u003eString.last/1\u003c/code\u003e","Fragments":["because"]},{"Key":"\u003ccode\u003eString.last/1\u003c/code\u003e because","Fragments":["I"]},{"Key":"the \u003ca","Fragments":["href=\"https://github.com/elixir-lang/elixir/blob/v0.15.1/lib/elixir/lib/string.ex#L1200\"\u003eimplementation\u003c/a\u003e"]},{"Key":"\u003ca href=\"https://github.com/elixir-lang/elixir/blob/v0.15.1/lib/elixir/lib/string.ex#L1200\"\u003eimplementation\u003c/a\u003e","Fragments":["of"]},{"Key":"href=\"https://github.com/elixir-lang/elixir/blob/v0.15.1/lib/elixir/lib/string.ex#L1200\"\u003eimplementation\u003c/a\u003e of","Fragments":["\u003ccode\u003eString.ends_with?/2\u003c/code\u003e."]},{"Key":"of \u003ccode\u003eString.ends_with?/2\u003c/code\u003e.","Fragments":["It"]},{"Key":"\u003ccode\u003eString.ends_with?/2\u003c/code\u003e. It","Fragments":["first"]},{"Key":"It first","Fragments":["has"]},{"Key":"first has","Fragments":["to"]},{"Key":"single suffix,","Fragments":["and"]},{"Key":"suffix, and","Fragments":["then"]},{"Key":"pass suffixes","Fragments":["of"]},{"Key":"suffixes of","Fragments":["different"]},{"Key":"code just","Fragments":["to"]},{"Key":"last character's","Fragments":["value."]},{"Key":"New to","Fragments":["functional"]},{"Key":"functional languages,","Fragments":["and"]},{"Key":"and elixir","Fragments":["in"]},{"Key":"elixir in","Fragments":["general."]},{"Key":"general. Didn't","Fragments":["think"]},{"Key":"good intro","Fragments":["problem"]},{"Key":"intro problem","Fragments":["for"]},{"Key":"* This","Fragments":["is"]},{"Key":"is subjective,","Fragments":["but"]},{"Key":"subjective, but","Fragments":["I"]},{"Key":"think `silent?`","Fragments":["is"]},{"Key":"`silent?` is","Fragments":["a"]},{"Key":"than `silence?`","Fragments":["for"]},{"Key":"`silence?` for","Fragments":["the"]},{"Key":"helper method.","Fragments":["It"]},{"Key":"naturally to","Fragments":["me."]},{"Key":"* My","Fragments":["implementation"]},{"Key":"My implementation","Fragments":["is"]},{"Key":"simpler (I","Fragments":["think),"]},{"Key":"(I think),","Fragments":["as"]},{"Key":"think), as","Fragments":["it"]},{"Key":"doesn't involve","Fragments":["tokenizing."]},{"Key":"involve tokenizing.","Fragments":["My"]},{"Key":"tokenizing. My","Fragments":["`yelling?`"]},{"Key":"My `yelling?`","Fragments":["(what"]},{"Key":"`yelling?` (what","Fragments":["I"]},{"Key":"(what I","Fragments":["called"]},{"Key":"called your","Fragments":["`shouting?`)"]},{"Key":"your `shouting?`)","Fragments":["is"]},{"Key":"`shouting?`) is","Fragments":["a"]},{"Key":"follow, I","Fragments":["think:"]},{"Key":" silent?(input)","Fragments":["-\u003e"]},{"Key":"silent?(input) -\u003e","Fragments":["\"Fine."]},{"Key":" yelling?(input)","Fragments":["-\u003e"]},{"Key":"yelling?(input) -\u003e","Fragments":["\"Woah,"]},{"Key":" question?(input)","Fragments":["-\u003e"]},{"Key":"question?(input) -\u003e","Fragments":["\"Sure.\""]},{"Key":"def yelling?(input)","Fragments":["do"]},{"Key":" String.downcase(input)","Fragments":["!="]},{"Key":"def question?(input)","Fragments":["do"]},{"Key":"def silent?(input)","Fragments":["do"]},{"Key":"* One","Fragments":["improvement"]},{"Key":"One improvement","Fragments":["your"]},{"Key":"improvement your","Fragments":["solution"]},{"Key":"solution has","Fragments":["over"]},{"Key":"has over","Fragments":["mine"]},{"Key":"over mine","Fragments":["is"]},{"Key":"of `defp`","Fragments":["to"]},{"Key":"hadn't learned","Fragments":["about"]},{"Key":"about `defp`","Fragments":["yet"]},{"Key":"`defp` yet","Fragments":["but"]},{"Key":"yet but","Fragments":["it"]},{"Key":"it definitely","Fragments":["fits","improves"]},{"Key":"definitely fits","Fragments":["here"]},{"Key":"fits here","Fragments":[":)."]},{"Key":"Actually, one","Fragments":["other"]},{"Key":"your `shouting?`","Fragments":["implementation:"]},{"Key":"`shouting?` implementation:","Fragments":["I"]},{"Key":"implementation: I","Fragments":["think"]},{"Key":"it's buggy","Fragments":["for"]},{"Key":"buggy for","Fragments":["a"]},{"Key":" Teenager.hey(\"Let's","Fragments":["go"]},{"Key":"Teenager.hey(\"Let's go","Fragments":["mAke"]},{"Key":"go mAke","Fragments":["out"]},{"Key":"mAke out","Fragments":["behind"]},{"Key":"out behind","Fragments":["the"]},{"Key":"The `A`","Fragments":["in"]},{"Key":"`A` in","Fragments":["`mAke`"]},{"Key":"in `mAke`","Fragments":["is"]},{"Key":"`mAke` is","Fragments":["a"]},{"Key":"a capitol","Fragments":["letter"]},{"Key":"capitol letter","Fragments":["that's"]},{"Key":"letter that's","Fragments":["not"]},{"Key":"it's upper","Fragments":["case,"]},{"Key":"case, it","Fragments":["regards"]},{"Key":"it regards","Fragments":["the"]},{"Key":"regards the","Fragments":["whole"]},{"Key":"as shouting","Fragments":["when"]},{"Key":"shouting when","Fragments":["that's"]},{"Key":"when that's","Fragments":["clearly"]},{"Key":"that's clearly","Fragments":["not"]},{"Key":"clearly not","Fragments":["the"]},{"Key":"people seem","Fragments":["to"]},{"Key":"the work,","Fragments":["which"]},{"Key":"work, which","Fragments":["is"]},{"Key":"this somehow","Fragments":["did"]},{"Key":"somehow did","Fragments":["not"]},{"Key":"not capture","Fragments":["the"]},{"Key":"not go","Fragments":["down"]},{"Key":"go down","Fragments":["this"]},{"Key":"the built","Fragments":["in","in"]},{"Key":"and operators.","Fragments":["It"]},{"Key":"operators. It","Fragments":["does"]},{"Key":"the huge","Fragments":["lists.","list)"]},{"Key":"lists. Running","Fragments":["the"]},{"Key":"Running the","Fragments":["test"]},{"Key":"cases will","Fragments":["cause"]},{"Key":"cause it","Fragments":["to"]},{"Key":"to hang","Fragments":["when"]},{"Key":"hang when","Fragments":["running"]},{"Key":"when running","Fragments":["the"]},{"Key":"whole test","Fragments":["suite.","suite"]},{"Key":"suite. Which","Fragments":["is"]},{"Key":"why rolling","Fragments":["your"]},{"Key":"rolling your","Fragments":["own"]},{"Key":"own recursive","Fragments":["functions"]},{"Key":"idea. It","Fragments":["doesn't"]},{"Key":"all well","Fragments":["for"]},{"Key":"for concat","Fragments":["for"]},{"Key":"for instance.","Fragments":["I"]},{"Key":"the lesson","Fragments":["that"]},{"Key":"lesson that","Fragments":["the"]},{"Key":"the write","Fragments":["of"]},{"Key":"write of","Fragments":["this"]},{"Key":"exercise wanted","Fragments":["us"]},{"Key":"wanted us","Fragments":["to"]},{"Key":"course the","Fragments":["regex"]},{"Key":"for \"chillOut\"","Fragments":["could"]},{"Key":"\"chillOut\" could","Fragments":["be"]},{"Key":"be merged","Fragments":["to"]},{"Key":"one but","Fragments":["I"]},{"Key":"I personaly","Fragments":["prefer"]},{"Key":"personaly prefer","Fragments":["multiple"]},{"Key":"prefer multiple","Fragments":["small"]},{"Key":"multiple small","Fragments":["regex"]},{"Key":"small regex","Fragments":["above"]},{"Key":"regex above","Fragments":["one"]},{"Key":"above one","Fragments":["long"]},{"Key":"one long","Fragments":["\u0026"]},{"Key":"long \u0026","Fragments":["complex"]},{"Key":"\u0026 complex","Fragments":["regex."]},{"Key":" Greetings","Fragments":["Jakob"]},{"Key":"Simplified the","Fragments":["shouting"]},{"Key":"shouting check","Fragments":["(borrowed"]},{"Key":"check (borrowed","Fragments":["from"]},{"Key":"(borrowed from","Fragments":["@jace)."]},{"Key":" Extracted","Fragments":["an"]},{"Key":"Extracted an","Fragments":["`Utterance`"]},{"Key":"an `Utterance`","Fragments":["module"]},{"Key":"`Utterance` module","Fragments":["so"]},{"Key":"module so","Fragments":["I"]},{"Key":" Accidental,","Fragments":["borked"]},{"Key":"Accidental, borked","Fragments":["submission."]},{"Key":"borked submission.","Fragments":["Please"]},{"Key":"submission. Please","Fragments":["ignore."]},{"Key":"the conventional","Fragments":["naming"]},{"Key":"conventional naming","Fragments":["seems"]},{"Key":"naming seems","Fragments":["to"]},{"Key":"be `foo?`","Fragments":["rather"]},{"Key":"`foo?` rather","Fragments":["than"]},{"Key":"the (a","Fragments":["bit"]},{"Key":"(a bit","Fragments":["redundant)"]},{"Key":"bit redundant)","Fragments":["`is_foo?`."]},{"Key":"redundant) `is_foo?`.","Fragments":["See"]},{"Key":"`is_foo?`. See","Fragments":["e.g."]},{"Key":"See e.g.","Fragments":["`String.printable?`."]},{"Key":" http://elixir-lang.org/getting_started/3.html","Fragments":["says"]},{"Key":"http://elixir-lang.org/getting_started/3.html says","Fragments":["to"]},{"Key":"prefer `and`","Fragments":["to"]},{"Key":"`and` to","Fragments":["`\u0026\u0026`"]},{"Key":"to `\u0026\u0026`","Fragments":["when"]},{"Key":"`\u0026\u0026` when","Fragments":["you"]},{"Key":"have booleans,","Fragments":["like"]},{"Key":"booleans, like","Fragments":["you"]},{"Key":" Fun","Fragments":["how"]},{"Key":"Fun how","Fragments":["you"]},{"Key":"you defined","Fragments":["`is_empty?`"]},{"Key":"defined `is_empty?`","Fragments":["with"]},{"Key":"`is_empty?` with","Fragments":["pattern"]},{"Key":"with regex,","Fragments":["so"]},{"Key":"replace everything","Fragments":["that"]},{"Key":"didn't want.","Fragments":["Feel"]},{"Key":"want. Feel","Fragments":["free"]},{"Key":"suggest a","Fragments":["better"]},{"Key":" @rickie,","Fragments":["Thank"]},{"Key":"@rickie, Thank","Fragments":["you!"]},{"Key":"call filter","Fragments":["on"]},{"Key":"tail and","Fragments":["add"]},{"Key":"that. Something","Fragments":["like"]},{"Key":"if f.(head)","Fragments":["do"]},{"Key":" [head","Fragments":["|"]},{"Key":"[head |","Fragments":["filter(tail,"]},{"Key":"filter(tail, f,","Fragments":["acc)]","acc)"]},{"Key":" filter(tail,","Fragments":["f,"]},{"Key":"the tips,","Fragments":["@scot!"]},{"Key":"tips, @scot!","Fragments":["I’m"]},{"Key":"@scot! I’m","Fragments":["still"]},{"Key":"I’m still","Fragments":["grokking"]},{"Key":"still grokking","Fragments":["how"]},{"Key":"grokking how","Fragments":["to"]},{"Key":"the direct","Fragments":["string"]},{"Key":"direct string","Fragments":["pattern"]},{"Key":"string pattern","Fragments":["matching"]},{"Key":"and byte_size/1.","Fragments":["I’ll"]},{"Key":"byte_size/1. I’ll","Fragments":["keep"]},{"Key":"I’ll keep","Fragments":["tinkering."]},{"Key":" @johnathan","Fragments":["please"]},{"Key":"@johnathan please","Fragments":["let"]},{"Key":"please let","Fragments":["me"]},{"Key":"are interested","Fragments":["in"]},{"Key":"any hints.","Fragments":["I'd"]},{"Key":"hints. I'd","Fragments":["be"]},{"Key":"change a","Fragments":["few"]},{"Key":"the test,","Fragments":["since"]},{"Key":"test, since","Fragments":["there"]},{"Key":"since there","Fragments":["were"]},{"Key":"were references","Fragments":["to"]},{"Key":"to HashDict","Fragments":["everywhere."]},{"Key":"HashDict everywhere.","Fragments":["Seems"]},{"Key":"everywhere. Seems","Fragments":["like"]},{"Key":"elixir program.","Fragments":["I"]},{"Key":"program. I","Fragments":["am"]},{"Key":"am sure","Fragments":["there"]},{"Key":"features (it's","Fragments":["just"]},{"Key":"(it's just","Fragments":["I'm"]},{"Key":"just I'm","Fragments":["not"]},{"Key":"them, yet.),","Fragments":["hopefully"]},{"Key":"yet.), hopefully","Fragments":["in"]},{"Key":"hopefully in","Fragments":["next"]},{"Key":"next few","Fragments":["iterations"]},{"Key":"few iterations","Fragments":["I"]},{"Key":"iterations I","Fragments":["will"]},{"Key":"actually take","Fragments":["advantage"]},{"Key":"first impression","Fragments":["is"]},{"Key":"impression is","Fragments":["that"]},{"Key":"am having","Fragments":["a"]},{"Key":"time understanding","Fragments":["your"]},{"Key":"understanding your","Fragments":["algorithm"]},{"Key":"algorithm mostly","Fragments":["because"]},{"Key":"mostly because","Fragments":["the"]},{"Key":"and argument","Fragments":["names"]},{"Key":"argument names","Fragments":["are"]},{"Key":"not telling","Fragments":["me"]},{"Key":"me very","Fragments":["specifically"]},{"Key":"very specifically","Fragments":["what"]},{"Key":"specifically what","Fragments":["the"]},{"Key":"be doing.","Fragments":["What"]},{"Key":"doing. What","Fragments":["do"]},{"Key":"use or","Fragments":["other"]},{"Key":"structuring the","Fragments":["code"]},{"Key":"would tell","Fragments":["the"]},{"Key":"story a","Fragments":["little"]},{"Key":"Line ~10","Fragments":["is"]},{"Key":"~10 is","Fragments":["quite"]},{"Key":"quite long","Fragments":["and"]},{"Key":"and run-on,","Fragments":["maybe"]},{"Key":"run-on, maybe","Fragments":["break"]},{"Key":"maybe break","Fragments":["that"]},{"Key":"break that","Fragments":["apart?"]},{"Key":"a 1","Fragments":["to"]},{"Key":"to 1","Fragments":["translation","if"]},{"Key":"1 translation","Fragments":["of"]},{"Key":"written to","Fragments":["me."]},{"Key":"me. I'm","Fragments":["not"]},{"Key":"me. `check`","Fragments":["seems"]},{"Key":"`check` seems","Fragments":["like"]},{"Key":"an expressive","Fragments":["name."]},{"Key":"expressive name.","Fragments":["I'm"]},{"Key":"name. I'm","Fragments":["curious"]},{"Key":"introduce the","Fragments":["constants?"]},{"Key":"the constants?","Fragments":["Usually"]},{"Key":"constants? Usually","Fragments":["constants"]},{"Key":"Usually constants","Fragments":["serve"]},{"Key":"constants serve","Fragments":["the"]},{"Key":"serve the","Fragments":["purpose"]},{"Key":"giving nice","Fragments":["names"]},{"Key":"to things,","Fragments":["but"]},{"Key":"these constants","Fragments":["are"]},{"Key":"constants are","Fragments":["more"]},{"Key":"more abbreviated","Fragments":["(a"]},{"Key":"abbreviated (a","Fragments":["tiny"]},{"Key":"(a tiny","Fragments":["bit"]},{"Key":"less readable),","Fragments":["so"]},{"Key":"readable), so","Fragments":["they"]},{"Key":"so they","Fragments":["just"]},{"Key":"a possibly","Fragments":["unnecessary"]},{"Key":"possibly unnecessary","Fragments":["level"]},{"Key":"unnecessary level","Fragments":["of"]},{"Key":"In lines","Fragments":["21"]},{"Key":"lines 21","Fragments":["through"]},{"Key":"21 through","Fragments":["23,"]},{"Key":"through 23,","Fragments":["what"]},{"Key":"23, what","Fragments":["would"]},{"Key":"about replacing","Fragments":["the"]},{"Key":"variable assignment","Fragments":["with"]},{"Key":"assignment with","Fragments":["just"]},{"Key":"and returning","Fragments":["explicitly"]},{"Key":"returning explicitly","Fragments":["the"]},{"Key":"atom that","Fragments":["matched?"]},{"Key":"that matched?","Fragments":["For"]},{"Key":"matched? For","Fragments":["example:"]},{"Key":"defp check({:equal,","Fragments":["[],"]},{"Key":"check({:equal, [],","Fragments":["[]}),"]},{"Key":"[], []}),","Fragments":["do:"]},{"Key":"[]}), do:","Fragments":["{:ok,"]},{"Key":"do: {:ok,","Fragments":[":equal}"]},{"Key":"The logic","Fragments":["in"]},{"Key":"the `next`","Fragments":["method"]},{"Key":"`next` method","Fragments":["bodies"]},{"Key":"method bodies","Fragments":["was"]},{"Key":"bodies was","Fragments":["still"]},{"Key":"still kind","Fragments":["of"]},{"Key":"at first.","Fragments":["It's"]},{"Key":"first. It's","Fragments":["a"]},{"Key":"cool algorithm,","Fragments":["but"]},{"Key":"algorithm, but","Fragments":["it"]},{"Key":"to parse.","Fragments":["I"]},{"Key":"parse. I","Fragments":["wonder"]},{"Key":"is any","Fragments":["way"]},{"Key":"maybe part","Fragments":["of"]},{"Key":"algorithm is","Fragments":["just"]},{"Key":"just kind","Fragments":["of","of"]},{"Key":"of complicated,","Fragments":["and"]},{"Key":"complicated, and","Fragments":["the"]},{"Key":"level private","Fragments":["function"]},{"Key":"things. `flatten`","Fragments":["implies"]},{"Key":"`flatten` implies","Fragments":["that"]},{"Key":"implies that","Fragments":["it's"]},{"Key":"it's flattening","Fragments":["two"]},{"Key":"flattening two","Fragments":["lists,"]},{"Key":"two lists,","Fragments":["but","but"]},{"Key":"also checking","Fragments":["at"]},{"Key":"checking at","Fragments":["each"]},{"Key":"process to","Fragments":["see"]},{"Key":"if certain","Fragments":["relationships"]},{"Key":"certain relationships","Fragments":["between"]},{"Key":"relationships between","Fragments":["the"]},{"Key":"lists have","Fragments":["been"]},{"Key":"been detected.","Fragments":["In"]},{"Key":"detected. In","Fragments":["the"]},{"Key":"the end,","Fragments":["its","although"]},{"Key":"end, its","Fragments":["purpose"]},{"Key":"the relationship","Fragments":["between"]},{"Key":"relationship between","Fragments":["the"]},{"Key":"the two.","Fragments":["So,"]},{"Key":"two. So,","Fragments":["maybe"]},{"Key":"So, maybe","Fragments":["the"]},{"Key":"least two","Fragments":["things"]},{"Key":"doesn't reflect","Fragments":["the"]},{"Key":"value are","Fragments":["part"]},{"Key":"are part","Fragments":["of"]},{"Key":"read upon","Fragments":["initial"]},{"Key":"upon initial","Fragments":["inspection."]},{"Key":"Sorry I","Fragments":["don't"]},{"Key":"more concrete","Fragments":["feedback..."]},{"Key":"concrete feedback...","Fragments":["just"]},{"Key":"feedback... just","Fragments":["kind"]},{"Key":"writing my","Fragments":["thoughts"]},{"Key":"my thoughts","Fragments":["down."]},{"Key":"Sure, rud.","Fragments":["I"]},{"Key":"rud. I","Fragments":["usually"]},{"Key":"usually actively","Fragments":["don't"]},{"Key":"actively don't","Fragments":["care"]},{"Key":"line length,","Fragments":["but"]},{"Key":"length, but","Fragments":["here"]},{"Key":"here there","Fragments":["are"]},{"Key":"separate conditions,","Fragments":["and"]},{"Key":"conditions, and","Fragments":["it'd"]},{"Key":"and it'd","Fragments":["look"]},{"Key":"it'd look","Fragments":["nice"]},{"Key":"have them","Fragments":["expressed"]},{"Key":"them expressed","Fragments":["separately,"]},{"Key":"expressed separately,","Fragments":["I"]},{"Key":"separately, I","Fragments":["think."]},{"Key":"good, any","Fragments":["specific"]},{"Key":"any specific","Fragments":["reason"]},{"Key":"functions \"String.strip\"","Fragments":["and"]},{"Key":"\"String.strip\" and","Fragments":["\"String.ends_with?\""]},{"Key":"and \"String.ends_with?\"","Fragments":["instead"]},{"Key":"\"String.ends_with?\" instead","Fragments":["of"]},{"Key":"of \"silence?\"","Fragments":["and"]},{"Key":"\"silence?\" and","Fragments":["\"question?\""]},{"Key":"can substitute","Fragments":["your"]},{"Key":"substitute your","Fragments":["list_count"]},{"Key":"your list_count","Fragments":["that"]},{"Key":"list_count that","Fragments":["has"]},{"Key":"a guard,","Fragments":["with"]},{"Key":"guard, with","Fragments":["the"]},{"Key":"defp list_count([],","Fragments":["count)"]},{"Key":"list_count([], count)","Fragments":["do"]},{"Key":"defp list_count[head|tail],","Fragments":["count)"]},{"Key":"list_count[head|tail], count)","Fragments":["do"]},{"Key":"first will","Fragments":["match"]},{"Key":"list, and","Fragments":["the","will"]},{"Key":"second will","Fragments":["match"]},{"Key":"non-empty list,","Fragments":["and"]},{"Key":"will split","Fragments":["head"]},{"Key":"split head","Fragments":["and"]},{"Key":"head and","Fragments":["tail"]},{"Key":"tail for","Fragments":["you"]},{"Key":"more 'elixir'","Fragments":["solution"]},{"Key":"'elixir' solution","Fragments":["to"]},{"Key":"simple boolean","Fragments":["'and'"]},{"Key":"boolean 'and'","Fragments":["on"]},{"Key":"'and' on","Fragments":["line"]},{"Key":"line 10,","Fragments":["perhaps"]},{"Key":"10, perhaps","Fragments":["something"]},{"Key":"perhaps something","Fragments":["with","you"]},{"Key":"something with","Fragments":["matching"]},{"Key":"with matching","Fragments":["tuples?"]},{"Key":"because some","Fragments":["people"]},{"Key":"people find","Fragments":["it"]},{"Key":"prefix a","Fragments":["convention"]},{"Key":"in elixir?","Fragments":["I"]},{"Key":"elixir? I","Fragments":["generally"]},{"Key":"just follow","Fragments":["the"]},{"Key":"ruby convention,","Fragments":["if"]},{"Key":"convention, if","Fragments":["it"]},{"Key":"it ends","Fragments":["in"]},{"Key":"ends in","Fragments":["?"]},{"Key":"in ?","Fragments":["it's"]},{"Key":"? it's","Fragments":["a"]},{"Key":"boolean return","Fragments":["value."]},{"Key":"return value.","Fragments":["question?,"]},{"Key":"value. question?,","Fragments":["silent?"]},{"Key":"question?, silent?","Fragments":["shouting?"]},{"Key":"defp is_empty?(\"\"),","Fragments":["do:"]},{"Key":"defp is_empty?(_str),","Fragments":["do:"]},{"Key":"is_empty?(_str), do:","Fragments":["false"]},{"Key":" String.strip(str)","Fragments":["=="]},{"Key":"String.strip(str) ==","Fragments":["\"\""]},{"Key":"run this","Fragments":["a"]},{"Key":"few million","Fragments":["times"]},{"Key":"million times","Fragments":["with"]},{"Key":"a timer","Fragments":["before"]},{"Key":"timer before","Fragments":["I"]},{"Key":"like. As","Fragments":["for"]},{"Key":"readability, my","Fragments":["vote"]},{"Key":"my vote","Fragments":["is"]},{"Key":"vote is","Fragments":["on"]},{"Key":"on String.strip,","Fragments":["since"]},{"Key":"String.strip, since","Fragments":["it"]},{"Key":"one method","Fragments":["definition,"]},{"Key":"method definition,","Fragments":["although"]},{"Key":"definition, although","Fragments":["the"]},{"Key":"the cascading","Fragments":["functions"]},{"Key":"cascading functions","Fragments":["is"]},{"Key":"with String.strip(input)","Fragments":["=="]},{"Key":"of regex.","Fragments":["You"]},{"Key":"regex. You","Fragments":["could"]},{"Key":"the affirmative","Fragments":["by"]},{"Key":"affirmative by","Fragments":["using"]},{"Key":"using \\s","Fragments":["which"]},{"Key":"\\s which","Fragments":["matches"]},{"Key":"which matches","Fragments":["whitespace"]},{"Key":" String.match?(input,","Fragments":["~r/^\\s*$/)"]},{"Key":"String.match?(input, ~r/^\\s*$/)","Fragments":["-\u003e"]},{"Key":"~r/^\\s*$/) -\u003e","Fragments":["\"Fine."]},{"Key":"with regex","Fragments":["is"]},{"Key":"always an","Fragments":["edge"]},{"Key":"your oop","Fragments":["style,"]},{"Key":"oop style,","Fragments":["it"]},{"Key":"style, it","Fragments":["makes"]},{"Key":"for maintainable","Fragments":["code"]},{"Key":"maintainable code","Fragments":["in"]},{"Key":"in large","Fragments":["code"]},{"Key":"large code","Fragments":["bases,"]},{"Key":"code bases,","Fragments":["but"]},{"Key":"bases, but","Fragments":["not"]},{"Key":"worth your","Fragments":["time"]},{"Key":"these little","Fragments":["exercises."]},{"Key":"on only","Fragments":["one"]},{"Key":"for upcase","Fragments":["but"]},{"Key":"but fails","Fragments":["on"]},{"Key":"on numbers","Fragments":["and"]},{"Key":"and symbols","Fragments":["which"]},{"Key":"symbols which","Fragments":["are"]},{"Key":"are 'case-less'","Fragments":["You"]},{"Key":"'case-less' You","Fragments":["can"]},{"Key":"and String.downcase(input)","Fragments":["!="]},{"Key":"match only","Fragments":["strings"]},{"Key":"only strings","Fragments":["that"]},{"Key":"are capable","Fragments":["of"]},{"Key":"being cased.","Fragments":["As"]},{"Key":"cased. As","Fragments":["it"]},{"Key":"simple character","Fragments":["translation"]},{"Key":"character translation","Fragments":["from"]},{"Key":"translation from","Fragments":["lower-\u003e"]},{"Key":"from lower-\u003e","Fragments":["upper"]},{"Key":"lower-\u003e upper","Fragments":["and"]},{"Key":"upper and","Fragments":["vice"]},{"Key":"and vice","Fragments":["versa,"]},{"Key":"vice versa,","Fragments":["it"]},{"Key":"versa, it","Fragments":["will"]},{"Key":"than opening","Fragments":["up"]},{"Key":"specs have","Fragments":["changed"]},{"Key":"have changed","Fragments":["since"]},{"Key":"changed since","Fragments":["I"]},{"Key":"it. Please","Fragments":["ignore"]},{"Key":"Please ignore","Fragments":["the"]},{"Key":"In yelling?","Fragments":["I'm"]},{"Key":"yelling? I'm","Fragments":["not"]},{"Key":"that downcases","Fragments":["the"]},{"Key":"downcases the","Fragments":["input."]},{"Key":"input. What","Fragments":["tests"]},{"Key":"What tests","Fragments":["fail"]},{"Key":"tests fail","Fragments":["if"]},{"Key":"that removed","Fragments":["you"]},{"Key":"removed you","Fragments":["can"]},{"Key":"the ,","Fragments":["do:"]},{"Key":", do:","Fragments":["form","...)"]},{"Key":"do: form","Fragments":["for"]},{"Key":"more compactness","Fragments":["I"]},{"Key":"compactness I","Fragments":["think"]},{"Key":"defp nothing?(input),","Fragments":["do:"]},{"Key":"nothing?(input), do:","Fragments":["String.strip(input)"]},{"Key":"Otherwise good","Fragments":["job!"]},{"Key":"job! (In","Fragments":["my"]},{"Key":"(In my","Fragments":["solution"]},{"Key":"added docs","Fragments":["and"]},{"Key":"doctest but","Fragments":["that"]},{"Key":"seems broken","Fragments":["in"]},{"Key":"broken in","Fragments":["latest"]},{"Key":"more Elixir","Fragments":["like"]},{"Key":"|\u003e String.replace(~r/[^\\p{L}\\d-]/u,","Fragments":["\""]},{"Key":"String.replace(~r/[^\\p{L}\\d-]/u, \"","Fragments":["\")"]},{"Key":"using Enum.reduce","Fragments":["rather"]},{"Key":"Enum.reduce rather","Fragments":["than"]},{"Key":"than recursion","Fragments":["and"]},{"Key":"for Map.update","Fragments":["to"]},{"Key":"Map.update to","Fragments":["avoid"]},{"Key":"Consider moving","Fragments":["the","the"]},{"Key":"defp is_question(input),","Fragments":["do:"]},{"Key":"is_question(input), do:","Fragments":["String.ends_with?(input,"]},{"Key":"do: String.ends_with?(input,","Fragments":["\"?\")","\"?\")`"]},{"Key":"test login","Fragments":["into"]},{"Key":"login into","Fragments":["private"]},{"Key":"defp is_blank(input),","Fragments":["do:"]},{"Key":"is_blank(input), do:","Fragments":["String.strip(input)"]},{"Key":"elixir, and","Fragments":["couldn't"]},{"Key":"figure any","Fragments":["other"]},{"Key":"other way.","Fragments":["I'll"]},{"Key":"way. I'll","Fragments":["read"]},{"Key":"I'll read","Fragments":["up"]},{"Key":"and check","Fragments":["the"]},{"Key":"modules you","Fragments":["mentioned."]},{"Key":"`Regex.scan` returns","Fragments":["a"]},{"Key":"lists, where","Fragments":["the"]},{"Key":"second member","Fragments":["of"]},{"Key":"member of","Fragments":["each"]},{"Key":"of captures,","Fragments":["so"]},{"Key":"captures, so","Fragments":["using"]},{"Key":"so using","Fragments":["it"]},{"Key":"any captures","Fragments":["and"]},{"Key":"captures and","Fragments":["flattening"]},{"Key":"and flattening","Fragments":["the"]},{"Key":"list works","Fragments":["in"]},{"Key":"case, however","Fragments":["I'd"]},{"Key":"however I'd","Fragments":["like"]},{"Key":"simpler function","Fragments":["which"]},{"Key":"just returns","Fragments":["a"]},{"Key":"The character","Fragments":["set"]},{"Key":"character set","Fragments":["also"]},{"Key":"set also","Fragments":["took"]},{"Key":"also took","Fragments":["me"]},{"Key":"get, since","Fragments":["`\\w`"]},{"Key":"since `\\w`","Fragments":["contains"]},{"Key":"`\\w` contains","Fragments":["`_`"]},{"Key":"contains `_`","Fragments":["but"]},{"Key":"`_` but","Fragments":["not"]},{"Key":"not `-`,","Fragments":["otherwise"]},{"Key":"`-`, otherwise","Fragments":["`[^\\W_]`"]},{"Key":"otherwise `[^\\W_]`","Fragments":["would"]},{"Key":"`[^\\W_]` would","Fragments":["work."]},{"Key":"docs that","Fragments":["`\\w`"]},{"Key":"as `[\\pL\\pN_]`,","Fragments":["which"]},{"Key":"`[\\pL\\pN_]`, which","Fragments":["is"]},{"Key":"what made","Fragments":["it"]},{"Key":"end, although","Fragments":["it"]},{"Key":"Changing other","Fragments":["functions"]},{"Key":"use reduce.","Fragments":["Count"]},{"Key":"reduce. Count","Fragments":["doesn't"]},{"Key":"Count doesn't","Fragments":["work"]},{"Key":"here yet,","Fragments":["because"]},{"Key":"yet, because","Fragments":["I"]},{"Key":"didn't meant","Fragments":["to"]},{"Key":"Only problem","Fragments":["I"]},{"Key":"have with","Fragments":["that"]},{"Key":"comprehension is","Fragments":["shorthand"]},{"Key":"for maps/filters,","Fragments":["so"]},{"Key":"maps/filters, so","Fragments":["it's"]},{"Key":"it's against","Fragments":["the"]},{"Key":"rules of","Fragments":["the"]},{"Key":"got down","Fragments":["to"]},{"Key":"to `concat`,","Fragments":["I"]},{"Key":"`concat`, I","Fragments":["was"]},{"Key":"done using","Fragments":["`reduce`"]},{"Key":"and `append`,","Fragments":["and"]},{"Key":"`append`, and","Fragments":["had"]},{"Key":"working solution","Fragments":["for"]},{"Key":"the \"huge","Fragments":["list"]},{"Key":"\"huge list","Fragments":["of"]},{"Key":"lists\" test,","Fragments":["which"]},{"Key":"test, which","Fragments":["timed"]},{"Key":"which timed","Fragments":["out"]},{"Key":"timed out","Fragments":["at"]},{"Key":"On reflection,","Fragments":["I"]},{"Key":"reflection, I","Fragments":["realised"]},{"Key":"that everytime","Fragments":["I"]},{"Key":"everytime I","Fragments":["was"]},{"Key":"was running","Fragments":["through"]},{"Key":"through append","Fragments":["I"]},{"Key":"append I","Fragments":["was"]},{"Key":"was taking","Fragments":["`O(a"]},{"Key":"taking `O(a","Fragments":["+"]},{"Key":"`O(a +","Fragments":["b)`"]},{"Key":"+ b)`","Fragments":["time,"]},{"Key":"b)` time,","Fragments":["and"]},{"Key":"time, and","Fragments":["I","the"]},{"Key":"this (in","Fragments":["the"]},{"Key":"(in the","Fragments":["case"]},{"Key":"huge list)","Fragments":["`n`,"]},{"Key":"list) `n`,","Fragments":["bringing"]},{"Key":"`n`, bringing","Fragments":["me"]},{"Key":"bringing me","Fragments":["up"]},{"Key":"me up","Fragments":["to"]},{"Key":"to `O(n^2)`,","Fragments":["which"]},{"Key":"`O(n^2)`, which","Fragments":["is"]},{"Key":"for `n","Fragments":["="]},{"Key":"`n =","Fragments":["1_000_000`."]},{"Key":" Instead,","Fragments":["I"]},{"Key":"Instead, I","Fragments":["just"]},{"Key":"just extended","Fragments":["what"]},{"Key":"extended what","Fragments":["I"]},{"Key":"did for","Fragments":["append,"]},{"Key":"for append,","Fragments":["and"]},{"Key":"append, and","Fragments":["brought"]},{"Key":"and brought","Fragments":["it"]},{"Key":"brought it","Fragments":["down"]},{"Key":"to `O(n)`","Fragments":["time,"]},{"Key":"`O(n)` time,","Fragments":["and"]},{"Key":"suite ran","Fragments":["in"]},{"Key":"ran in","Fragments":["a"]},{"Key":" Redefined","Fragments":["other"]},{"Key":"Redefined other","Fragments":["functions"]},{"Key":"of `reduce`.","Fragments":["Not"]},{"Key":"`reduce`. Not","Fragments":["sure"]},{"Key":"simplify `filter`","Fragments":["though."]},{"Key":"Also, `append`","Fragments":["is"]},{"Key":"of `concat`.","Fragments":["Gonna"]},{"Key":"`concat`. Gonna","Fragments":["try"]},{"Key":"Gonna try","Fragments":["to"]},{"Key":"change `concat`","Fragments":["to"]},{"Key":"`concat` to","Fragments":["use"]},{"Key":" filter","Fragments":["can"]},{"Key":"filter can","Fragments":["be"]},{"Key":"simplified like","Fragments":["so:"]},{"Key":"def filter(l,","Fragments":["f)"]},{"Key":"filter(l, f)","Fragments":["do"]},{"Key":"for i","Fragments":["\u003c-"]},{"Key":"i \u003c-","Fragments":["l,"]},{"Key":"\u003c- l,","Fragments":["f.(i),"]},{"Key":"l, f.(i),","Fragments":["do:"]},{"Key":"f.(i), do:","Fragments":["i"]},{"Key":"Thanks Chris!","Fragments":["Still"]},{"Key":"Chris! Still","Fragments":["good"]},{"Key":"Still good","Fragments":["feedback."]},{"Key":"good feedback.","Fragments":["Doctests"]},{"Key":"feedback. Doctests","Fragments":["would've"]},{"Key":"Doctests would've","Fragments":["been"]},{"Key":"would've been","Fragments":["nice"]},{"Key":"nice as","Fragments":["well,"]},{"Key":"well, that's","Fragments":["a"]},{"Key":"get into.","Fragments":["I'm"]},{"Key":"into. I'm","Fragments":["still"]},{"Key":"still adapting","Fragments":["to"]},{"Key":"adapting to","Fragments":["the"]},{"Key":"the one-line","Fragments":["style","function"]},{"Key":"one-line style","Fragments":["function"]},{"Key":"style function","Fragments":["definition"]},{"Key":"definition so","Fragments":["it"]},{"Key":"doesn't come","Fragments":["naturally,"]},{"Key":"come naturally,","Fragments":["but"]},{"Key":"naturally, but","Fragments":["I've"]},{"Key":"update with","Fragments":["it"]},{"Key":"definitely improves","Fragments":["readability."]},{"Key":"the \"specs\"","Fragments":["weren't"]},{"Key":"\"specs\" weren't","Fragments":["totally"]},{"Key":"weren't totally","Fragments":["clear"]},{"Key":"totally clear","Fragments":["and","how"]},{"Key":"took to","Fragments":["get"]},{"Key":"current form.","Fragments":["It's"]},{"Key":"It's interesting","Fragments":["to"]},{"Key":"work from","Fragments":["the"]},{"Key":"tests only,","Fragments":["rather"]},{"Key":"only, rather","Fragments":["than"]},{"Key":"than specs,","Fragments":["as"]},{"Key":"specs, as","Fragments":["it"]},{"Key":"clear how","Fragments":["to"]},{"Key":"determine what","Fragments":["was"]},{"Key":"was _actually_","Fragments":["`yelling?`."]},{"Key":"Nicely done!","Fragments":["Looks"]},{"Key":"done! Looks","Fragments":["extremely"]},{"Key":"Looks extremely","Fragments":["similar"]},{"Key":"extremely similar","Fragments":["to"]},{"Key":"initial solution,","Fragments":["just"]},{"Key":"solution, just","Fragments":["a"]},{"Key":"1. While","Fragments":["I"]},{"Key":"the succinct","Fragments":["use"]},{"Key":"succinct use","Fragments":["of"]},{"Key":"regexes for","Fragments":["`yelling?`,"]},{"Key":"for `yelling?`,","Fragments":["I"]},{"Key":"`yelling?`, I","Fragments":["wonder"]},{"Key":"clear it","Fragments":["is"]},{"Key":"most readers?","Fragments":["My"]},{"Key":"readers? My","Fragments":["first"]},{"Key":"thought when","Fragments":["I"]},{"Key":"was wrong,","Fragments":["as"]},{"Key":"wrong, as","Fragments":["I'm"]},{"Key":"a yellow","Fragments":["belt"]},{"Key":"yellow belt","Fragments":["when"]},{"Key":"belt when","Fragments":["it"]},{"Key":"to regex-fu.","Fragments":["In"]},{"Key":"regex-fu. In","Fragments":["a"]},{"Key":"a basic","Fragments":["case"]},{"Key":"basic case","Fragments":["like"]},{"Key":"recommend using","Fragments":["`String.upcase/1`"]},{"Key":"using `String.upcase/1`","Fragments":["and"]},{"Key":"`String.downcase/1` instead,","Fragments":["just"]},{"Key":"instead, just","Fragments":["for"]},{"Key":"one-line function","Fragments":["syntax"]},{"Key":"`defp question?(input),","Fragments":["do:"]},{"Key":"question?(input), do:","Fragments":["String.ends_with?(input,"]},{"Key":"Both those","Fragments":["points"]},{"Key":"those points","Fragments":["are"]},{"Key":"definitely style","Fragments":["calls,"]},{"Key":"style calls,","Fragments":["however,"]},{"Key":"calls, however,","Fragments":["so"]},{"Key":"however, so","Fragments":["YMMV."]},{"Key":" Oo...","Fragments":["that's"]},{"Key":"Oo... that's","Fragments":["a"]},{"Key":"list comprehension?","Fragments":["I"]},{"Key":"comprehension? I","Fragments":["haven't"]},{"Key":"haven't reached","Fragments":["that"]},{"Key":"reached that","Fragments":["part"]},{"Key":"the \"getting","Fragments":["started\""]},{"Key":"\"getting started\"","Fragments":["guide."]},{"Key":"started\" guide.","Fragments":["I"]},{"Key":"guide. I","Fragments":["thought"]},{"Key":"for loop","Fragments":["with"]},{"Key":"loop with","Fragments":["a"]},{"Key":"loop per","Fragments":["se,"]},{"Key":"se, they","Fragments":["don't"]},{"Key":"don't exist","Fragments":["in"]},{"Key":"exist in","Fragments":["elixir"]},{"Key":"know. They","Fragments":["are"]},{"Key":"are nice","Fragments":["constructs,"]},{"Key":"nice constructs,","Fragments":["though,"]},{"Key":"constructs, though,","Fragments":["remind"]},{"Key":"though, remind","Fragments":["of"]},{"Key":"remind of","Fragments":["one"]},{"Key":"I loved","Fragments":["about"]},{"Key":"loved about","Fragments":["python."]},{"Key":"hate regexes,","Fragments":["and"]},{"Key":"regexes, and","Fragments":["they"]},{"Key":"for German","Fragments":["is"]},{"Key":"German is","Fragments":["still"]},{"Key":"still failing,","Fragments":["and"]},{"Key":"failing, and","Fragments":["I'm"]},{"Key":"at wit's","Fragments":["end"]},{"Key":"wit's end","Fragments":["trying"]},{"Key":"end trying","Fragments":["to"]},{"Key":"determine how","Fragments":["to"]},{"Key":"to address","Fragments":["it."]},{"Key":"to [this","Fragments":["page"]},{"Key":"[this page","Fragments":["I"]},{"Key":"page I","Fragments":["found](http://www.regular-expressions.info/unicode.html),"]},{"Key":"I found](http://www.regular-expressions.info/unicode.html),","Fragments":["the"]},{"Key":"found](http://www.regular-expressions.info/unicode.html), the","Fragments":["regex"]},{"Key":"regex `/\\p{L}+/`","Fragments":["_should_"]},{"Key":"`/\\p{L}+/` _should_","Fragments":["cover"]},{"Key":"_should_ cover","Fragments":["letters"]},{"Key":"cover letters","Fragments":["in"]},{"Key":"languages including","Fragments":["those"]},{"Key":"including those","Fragments":["with"]},{"Key":"those with","Fragments":["marks"]},{"Key":"with marks","Fragments":["attached."]},{"Key":"marks attached.","Fragments":["In"]},{"Key":"attached. In","Fragments":["case"]},{"Key":"it didn't,","Fragments":["I"]},{"Key":"didn't, I","Fragments":["also"]},{"Key":"also included","Fragments":["`/\\p{M}/`"]},{"Key":"included `/\\p{M}/`","Fragments":["so"]},{"Key":"`/\\p{M}/` so","Fragments":["marks"]},{"Key":"so marks","Fragments":["that"]},{"Key":"marks that","Fragments":["modify"]},{"Key":"that modify","Fragments":["letters"]},{"Key":"modify letters","Fragments":["in"]},{"Key":"languages should","Fragments":["also"]},{"Key":"be identified","Fragments":["as"]},{"Key":"as valid.","Fragments":["But"]},{"Key":" Regex","Fragments":["issues"]},{"Key":"Regex issues","Fragments":["aside,"]},{"Key":"issues aside,","Fragments":["I"]},{"Key":"aside, I","Fragments":["really"]},{"Key":"liked how","Fragments":["the"]},{"Key":"method `count(sentence)`","Fragments":["used"]},{"Key":"`count(sentence)` used","Fragments":["the"]},{"Key":"to clearly","Fragments":["define"]},{"Key":"clearly define","Fragments":["the"]},{"Key":"process used","Fragments":["to"]},{"Key":"the words.","Fragments":["I"]},{"Key":"like `incr_count_for_word`","Fragments":["can"]},{"Key":"`incr_count_for_word` can","Fragments":["be"]},{"Key":"done more","Fragments":["easily,"]},{"Key":"more easily,","Fragments":["but"]},{"Key":"easily, but","Fragments":["the"]},{"Key":"the means","Fragments":["for"]},{"Key":"means for","Fragments":["doing"]},{"Key":"so eluded","Fragments":["me."]},{"Key":" Any/all","Fragments":["suggestions"]},{"Key":"Any/all suggestions","Fragments":["definitely"]},{"Key":"suggestions definitely","Fragments":["appreciated!"]},{"Key":"refactored this","Fragments":["a"]},{"Key":"push some","Fragments":["of"]},{"Key":"separate methods.","Fragments":["Never"]},{"Key":"methods. Never","Fragments":["mind"]},{"Key":"Never mind","Fragments":["the"]},{"Key":"the 4","Fragments":["fold"]},{"Key":"4 fold","Fragments":["line"]},{"Key":"fold line","Fragments":["count"]},{"Key":"line count","Fragments":["increase."]},{"Key":"count increase.","Fragments":["I"]},{"Key":"increase. I","Fragments":["decided"]},{"Key":"that comprehending","Fragments":["the"]},{"Key":"comprehending the","Fragments":["subtler"]},{"Key":"the subtler","Fragments":["points"]},{"Key":"subtler points","Fragments":["of"]},{"Key":"points of","Fragments":["language"]},{"Key":"a primary","Fragments":["function"]},{"Key":"primary function","Fragments":["of"]},{"Key":"a teenager,","Fragments":["no"]},{"Key":"teenager, no","Fragments":["offense"]},{"Key":"no offense","Fragments":[";-)"]},{"Key":"offense ;-)","Fragments":[","]},{"Key":";-) ,","Fragments":["and"]},{"Key":"moved that","Fragments":["to"]},{"Key":"distinct module/macro.","Fragments":["I"]},{"Key":"module/macro. I","Fragments":["really"]},{"Key":"macro syntax.","Fragments":["I'm"]},{"Key":"syntax. I'm","Fragments":["not"]},{"Key":"if ruby","Fragments":["has"]},{"Key":"ruby has","Fragments":["made"]},{"Key":"has made","Fragments":["me"]},{"Key":"me lazy","Fragments":["with"]},{"Key":"with it's","Fragments":["sugary"]},{"Key":"it's sugary","Fragments":["syntax"]},{"Key":"sugary syntax","Fragments":["or"]},{"Key":"syntax or","Fragments":["I'm"]},{"Key":"or I'm","Fragments":["outside"]},{"Key":"I'm outside","Fragments":["of"]},{"Key":"my comfort","Fragments":["zone"]},{"Key":"comfort zone","Fragments":["of"]},{"Key":"zone of","Fragments":["familiarity."]},{"Key":" Hmmm.","Fragments":["does"]},{"Key":"Hmmm. does","Fragments":["this"]},{"Key":"line 40?","Fragments":["I"]},{"Key":"40? I","Fragments":["don't"]},{"Key":"the !","Fragments":["is"]},{"Key":"! is","Fragments":["a"]},{"Key":"a yelling","Fragments":["requirement,"]},{"Key":"yelling requirement,","Fragments":["only"]},{"Key":"requirement, only","Fragments":["caps."]},{"Key":"only caps.","Fragments":["Other"]},{"Key":"caps. Other","Fragments":["reviewers"]},{"Key":"Other reviewers","Fragments":["on"]},{"Key":"reviewers on","Fragments":["here"]},{"Key":"on here","Fragments":["recommend"]},{"Key":"here recommend","Fragments":["refactoring"]},{"Key":"recommend refactoring","Fragments":["the"]},{"Key":"into defp","Fragments":["methods"]},{"Key":"defp methods","Fragments":["that"]},{"Key":"is caseless,","Fragments":["as"]},{"Key":"caseless, as","Fragments":["in"]},{"Key":"in it's","Fragments":["symbols"]},{"Key":"it's symbols","Fragments":["and"]},{"Key":"and numbers.","Fragments":["Hint:"]},{"Key":"numbers. Hint:","Fragments":["If"]},{"Key":"Hint: If","Fragments":["it"]},{"Key":"it can't","Fragments":["be"]},{"Key":"be capitalized,","Fragments":["because"]},{"Key":"capitalized, because","Fragments":["there"]},{"Key":"no case,","Fragments":["then"]},{"Key":"case, then","Fragments":["it"]},{"Key":"probably can't","Fragments":["be"]},{"Key":"Also, Capitalize","Fragments":["is"]},{"Key":"Capitalize is","Fragments":["only"]},{"Key":"first letter,","Fragments":["you"]},{"Key":"letter, you","Fragments":["want"]},{"Key":"want upcase","Fragments":["instead."]},{"Key":"upcase instead.","Fragments":["http://elixir-lang.org/docs/stable/elixir/String.html"]},{"Key":" agreeable,","Fragments":["that"]},{"Key":"agreeable, that","Fragments":["was"]},{"Key":"is excellent.","Fragments":["I"]},{"Key":"excellent. I","Fragments":["don't"]},{"Key":"any nitpicks,","Fragments":["but"]},{"Key":"nitpicks, but","Fragments":["I"]},{"Key":"I thus","Fragments":["realized"]},{"Key":"thus realized","Fragments":["how"]},{"Key":"realized how","Fragments":["I"]},{"Key":"I hosed","Fragments":["up"]},{"Key":"hosed up","Fragments":["[my"]},{"Key":"up [my","Fragments":["own"]},{"Key":"[my own","Fragments":["answer](http://exercism.io/submissions/68f420dbdc40c8cec147163d)"]},{"Key":"own answer](http://exercism.io/submissions/68f420dbdc40c8cec147163d)","Fragments":["initially."]},{"Key":"answer](http://exercism.io/submissions/68f420dbdc40c8cec147163d) initially.","Fragments":["During"]},{"Key":"initially. During","Fragments":["my"]},{"Key":"During my","Fragments":["forays"]},{"Key":"my forays","Fragments":["I"]},{"Key":"forays I","Fragments":["had"]},{"Key":"had actually","Fragments":["used"]},{"Key":"you had,","Fragments":["but"]},{"Key":"had, but","Fragments":["neglected"]},{"Key":"but neglected","Fragments":["to"]},{"Key":"neglected to","Fragments":["include"]},{"Key":"`u` option","Fragments":["on"]},{"Key":"option on","Fragments":["the"]},{"Key":"the in-place","Fragments":["function"]},{"Key":"in-place function","Fragments":["shorthand"]},{"Key":"shorthand in","Fragments":["`update_count`"]},{"Key":"in `update_count`","Fragments":["as"]},{"Key":"`update_count` as","Fragments":["well!"]},{"Key":"Interesting approach.","Fragments":["I"]},{"Key":"approach. I","Fragments":["_think_"]},{"Key":"more \"erlang-esque\"","Fragments":["style"]},{"Key":"\"erlang-esque\" style","Fragments":["that"]},{"Key":"style that","Fragments":["you"]},{"Key":"you used.","Fragments":["Your"]},{"Key":"used. Your","Fragments":["implementation"]},{"Key":"of `count/2`","Fragments":["is"]},{"Key":"`count/2` is","Fragments":["an"]},{"Key":"excellent example","Fragments":["of"]},{"Key":"of FP-style","Fragments":["list"]},{"Key":"FP-style list","Fragments":["processing"]},{"Key":"list processing","Fragments":["in"]},{"Key":"processing in","Fragments":["a"]},{"Key":"provided `count/1`","Fragments":["method"]},{"Key":"`count/1` method","Fragments":["to"]},{"Key":"2 implementations","Fragments":["with","to"]},{"Key":"implementations with","Fragments":["guards."]},{"Key":"with guards.","Fragments":["The"]},{"Key":"guards. The","Fragments":["problem"]},{"Key":"problem (when","Fragments":["I"]},{"Key":"(when I","Fragments":["saw"]},{"Key":"saw it","Fragments":["first,"]},{"Key":"it first,","Fragments":["at"]},{"Key":"first, at","Fragments":["least,"]},{"Key":"least, just","Fragments":["yesterday)"]},{"Key":"just yesterday)","Fragments":["provided"]},{"Key":"yesterday) provided","Fragments":["this"]},{"Key":"provided this","Fragments":["stub:"]},{"Key":" @sincere","Fragments":["count(String.t)","count(String.t)"]},{"Key":"@sincere count(String.t)","Fragments":["::","::"]},{"Key":"count(String.t) ::","Fragments":["map()","map()"]},{"Key":"def count(sentence)","Fragments":["do","do"]},{"Key":"spec included","Fragments":["you"]},{"Key":"included you","Fragments":["can"]},{"Key":"already of","Fragments":["type"]},{"Key":"of type","Fragments":["`String`"]},{"Key":"type `String`","Fragments":["and"]},{"Key":"so reduce","Fragments":["your"]},{"Key":"your 2","Fragments":["implementations"]},{"Key":"one. By","Fragments":["then"]},{"Key":"By then","Fragments":["adding"]},{"Key":"then adding","Fragments":["a"]},{"Key":"parameter value","Fragments":["you"]},{"Key":"value you","Fragments":["then"]},{"Key":"then end","Fragments":["up"]},{"Key":"|\u003e collect_words","Fragments":["|\u003e"]},{"Key":"collect_words |\u003e","Fragments":["count_words"]},{"Key":"defp count_words(words,","Fragments":["counts"]},{"Key":"count_words(words, counts","Fragments":["\\\\"]},{"Key":"counts \\\\","Fragments":["%{})"]},{"Key":"# ...your","Fragments":["implementation"]},{"Key":"...your implementation","Fragments":["follows,"]},{"Key":"implementation follows,","Fragments":["merely"]},{"Key":"follows, merely","Fragments":["changing"]},{"Key":"merely changing","Fragments":["count/2"]},{"Key":"changing count/2","Fragments":["to"]},{"Key":"count/2 to","Fragments":["count_words/2"]},{"Key":" Lastly,","Fragments":["I"]},{"Key":"Lastly, I","Fragments":["also"]},{"Key":"also learned","Fragments":["after"]},{"Key":"learned after","Fragments":["doing"]},{"Key":"doing my","Fragments":["own"]},{"Key":"implementation here,","Fragments":["that"]},{"Key":"here, that","Fragments":["instead"]},{"Key":"that instead","Fragments":["of"]},{"Key":"different methods","Fragments":["for"]},{"Key":"for getting/putting","Fragments":["the"]},{"Key":"getting/putting the","Fragments":["word"]},{"Key":"count values","Fragments":["(e.g."]},{"Key":"values (e.g.","Fragments":["`plus_one/2`"]},{"Key":"(e.g. `plus_one/2`","Fragments":["and"]},{"Key":"`plus_one/2` and","Fragments":["`value_of/2`,"]},{"Key":"and `value_of/2`,","Fragments":["you"]},{"Key":"`value_of/2`, you","Fragments":["can"]},{"Key":"single statement","Fragments":["by"]},{"Key":" `Map.update(counts,","Fragments":["word,"]},{"Key":"`Map.update(counts, word,","Fragments":["1,"]},{"Key":"+ 1))`","Fragments":["--"]},{"Key":"1))` --","Fragments":["adds"]},{"Key":"-- adds","Fragments":["one"]},{"Key":"adds one","Fragments":["to"]},{"Key":"the existing","Fragments":["value"]},{"Key":"existing value","Fragments":["or"]},{"Key":"value or","Fragments":["sets"]},{"Key":"or sets","Fragments":["the"]},{"Key":"sets the","Fragments":["value"]},{"Key":"if none","Fragments":["existed."]},{"Key":"Yeah I","Fragments":["didn't"]},{"Key":"realize most","Fragments":["of"]},{"Key":"were initially","Fragments":["commented"]},{"Key":"initially commented","Fragments":["out.."]},{"Key":"to defer","Fragments":["to"]},{"Key":"defer to","Fragments":["the"]},{"Key":"kind smashed","Fragments":["together,"]},{"Key":"smashed together,","Fragments":["and"]},{"Key":"together, and","Fragments":["probably"]},{"Key":"the Map.put_new","Fragments":["is"]},{"Key":"Map.put_new is","Fragments":["silently"]},{"Key":"is silently","Fragments":["dropping"]},{"Key":"silently dropping","Fragments":["keys"]},{"Key":"dropping keys","Fragments":["that"]},{"Key":"keys that","Fragments":["have"]},{"Key":"have already","Fragments":["been"]},{"Key":"been added","Fragments":["to"]},{"Key":"though we","Fragments":["are"]},{"Key":"are grabbing","Fragments":["a"]},{"Key":"grabbing a","Fragments":["count"]},{"Key":"count for","Fragments":["the"]},{"Key":"the item,","Fragments":["which"]},{"Key":"item, which","Fragments":["could"]},{"Key":"the chaining","Fragments":["in"]},{"Key":"chaining in","Fragments":["count(),"]},{"Key":"count(), nice!","Fragments":["Also"]},{"Key":"nice! Also","Fragments":["smart"]},{"Key":"Also smart","Fragments":["doing"]},{"Key":"smart doing","Fragments":["the"]},{"Key":"downcase first","Fragments":["instead"]},{"Key":"first instead","Fragments":["of"]},{"Key":"map, good","Fragments":["simplification."]},{"Key":"putting all","Fragments":["the"]},{"Key":"rules in","Fragments":["the"]},{"Key":"initial 'cond'","Fragments":["but"]},{"Key":"'cond' but","Fragments":["after"]},{"Key":"after having","Fragments":["passed"]},{"Key":"having passed","Fragments":["all"]},{"Key":"passed all","Fragments":["the"]},{"Key":"tests refactored","Fragments":["into"]},{"Key":"into separated","Fragments":["functions"]},{"Key":"separated functions","Fragments":["with"]},{"Key":"do (more","Fragments":["or"]},{"Key":"(more or","Fragments":["less)."]},{"Key":"feel there's","Fragments":["a"]},{"Key":"a gap","Fragments":["in"]},{"Key":"gap in","Fragments":["the"]},{"Key":"the concepts","Fragments":["the"]},{"Key":"concepts the","Fragments":["code"]},{"Key":"code implements","Fragments":["and"]},{"Key":"implements and","Fragments":["the"]},{"Key":"the conditions,","Fragments":["e.g."]},{"Key":"conditions, e.g.","Fragments":["\"empty?\""]},{"Key":"e.g. \"empty?\"","Fragments":["instead"]},{"Key":"\"empty?\" instead","Fragments":["of"]},{"Key":"Nice with","Fragments":["the"]},{"Key":"the Dict.update/4,","Fragments":["I'd"]},{"Key":"Dict.update/4, I'd","Fragments":["missed"]},{"Key":"I'd missed","Fragments":["that"]},{"Key":"my bad,","Fragments":["I'm"]},{"Key":"bad, I'm","Fragments":["tired."]},{"Key":"I'm tired.","Fragments":[":)"]},{"Key":"tired. :)","Fragments":["Well"]},{"Key":":) Well","Fragments":["done!"]},{"Key":"map/reduce, next","Fragments":["iteration..."]},{"Key":" Won't","Fragments":["String.match?(input,"]},{"Key":"Won't String.match?(input,","Fragments":["~r/[^\\d,"]},{"Key":"String.match?(input, ~r/[^\\d,","Fragments":["]/)"]},{"Key":"~r/[^\\d, ]/)","Fragments":["give"]},{"Key":"]/) give","Fragments":["a"]},{"Key":"a false","Fragments":["positive"]},{"Key":"false positive","Fragments":["for"]},{"Key":"positive for","Fragments":["\"H3LL\"?"]},{"Key":"for \"H3LL\"?","Fragments":["It's"]},{"Key":"\"H3LL\"? It's","Fragments":["late,"]},{"Key":"It's late,","Fragments":["I"]},{"Key":"late, I","Fragments":["could"]},{"Key":"be reading","Fragments":["it"]},{"Key":"reading it","Fragments":["wrong..."]},{"Key":"As seen","Fragments":["in"]},{"Key":"seen in","Fragments":["another"]},{"Key":"solution (but","Fragments":["not"]},{"Key":"not my","Fragments":["own...)"]},{"Key":"my own...)","Fragments":["if"]},{"Key":"own...) if","Fragments":["you"]},{"Key":"a String.strip","Fragments":["and"]},{"Key":"String.strip and","Fragments":["compare"]},{"Key":"with \"\"","Fragments":["you"]},{"Key":"\"\" you","Fragments":["don't"]},{"Key":"Is shouting","Fragments":["with"]},{"Key":"shouting with","Fragments":["numbers"]},{"Key":"numbers (\"GO","Fragments":["TO"]},{"Key":"(\"GO TO","Fragments":["H3LL!!\")"]},{"Key":"TO H3LL!!\")","Fragments":["considered"]},{"Key":"H3LL!!\") considered","Fragments":["shouting?"]},{"Key":"considered shouting?","Fragments":["There"]},{"Key":"shouting? There","Fragments":["is"]},{"Key":"but according","Fragments":["to"]},{"Key":"your rule","Fragments":["it's"]},{"Key":"rule it's","Fragments":["not."]},{"Key":"Nice naming","Fragments":["of"]},{"Key":"initial \"cond\"","Fragments":["very"]},{"Key":"\"cond\" very","Fragments":["succinct."]},{"Key":"Enum.map to","Fragments":["downcase"]},{"Key":"words, but","Fragments":["the"]},{"Key":"rest is","Fragments":["as"]},{"Key":"say not","Fragments":["that"]},{"Key":"that easily","Fragments":["readable"]},{"Key":"easily readable","Fragments":["(at"]},{"Key":"readable (at","Fragments":["least"]},{"Key":"at 2a.m.","Fragments":[":)."]},{"Key":"2a.m. :).","Fragments":["Map.put"]},{"Key":":). Map.put","Fragments":["will"]},{"Key":"Map.put will","Fragments":["update"]},{"Key":"existing key","Fragments":["with"]},{"Key":"key with","Fragments":["a"]},{"Key":"new value,","Fragments":["is"]},{"Key":"value, is","Fragments":["that"]},{"Key":"that perhaps","Fragments":["something"]},{"Key":" @eugene","Fragments":["I"]},{"Key":"@eugene I","Fragments":["thought"]},{"Key":"that \"GO","Fragments":["TO"]},{"Key":"\"GO TO","Fragments":["H3LL\""]},{"Key":"TO H3LL\"","Fragments":["would"]},{"Key":"H3LL\" would","Fragments":["be"]},{"Key":"considered shouting.","Fragments":["Where"]},{"Key":"shouting. Where","Fragments":["are"]},{"Key":"Where are","Fragments":["those"]},{"Key":"After having","Fragments":["looked"]},{"Key":"having looked","Fragments":["at"]},{"Key":"the liberty","Fragments":["of"]},{"Key":"liberty of","Fragments":["stealing"]},{"Key":"of stealing","Fragments":["a"]},{"Key":"stealing a","Fragments":["good"]},{"Key":"idea or","Fragments":["two"]},{"Key":"two resulting","Fragments":["in:"]},{"Key":"1. chaining","Fragments":["the"]},{"Key":"chaining the","Fragments":["downcase","operations"]},{"Key":"downcase before","Fragments":["the"]},{"Key":"2. chain","Fragments":["in"]},{"Key":"3. made","Fragments":["the"]},{"Key":"the add_to_map","Fragments":["into"]},{"Key":"add_to_map into","Fragments":["short"]},{"Key":"into short","Fragments":["form"]},{"Key":"form so","Fragments":["that"]},{"Key":"two declarations","Fragments":["belong"]},{"Key":"declarations belong","Fragments":["together"]},{"Key":"belong together","Fragments":["better."]},{"Key":"No map/reduce","Fragments":["yet,"]},{"Key":"map/reduce yet,","Fragments":["but"]},{"Key":"quite happy","Fragments":["with"]},{"Key":"is, and","Fragments":["feels"]},{"Key":"No problem.","Fragments":["Thanks."]},{"Key":" @phoebe","Fragments":["My"]},{"Key":"@phoebe My","Fragments":["regex"]},{"Key":"regex will","Fragments":["be"]},{"Key":"be false","Fragments":["for"]},{"Key":"string whose","Fragments":["whole"]},{"Key":"whose whole","Fragments":["set"]},{"Key":"whole set","Fragments":["of"]},{"Key":"are digits,","Fragments":["commas"]},{"Key":"digits, commas","Fragments":["or"]},{"Key":"commas or","Fragments":["a"]},{"Key":"a spaces.","Fragments":["Since"]},{"Key":"spaces. Since","Fragments":["\"H3LL\""]},{"Key":"Since \"H3LL\"","Fragments":["has"]},{"Key":"\"H3LL\" has","Fragments":["alphabetic"]},{"Key":"has alphabetic","Fragments":["characters,"]},{"Key":"alphabetic characters,","Fragments":["it"]},{"Key":"characters, it","Fragments":["will"]},{"Key":"be true,","Fragments":["and"]},{"Key":"true, and","Fragments":["thus"]},{"Key":"thus consider","Fragments":["it"]},{"Key":"3 GO!\")","Fragments":["=="]},{"Key":"GO!\") ==","Fragments":["\"Whoa,"]},{"Key":"== \"Whoa,","Fragments":["chill"]},{"Key":"\"Whoa, chill","Fragments":["out!\""]},{"Key":"Good work","Fragments":["in"]},{"Key":"in solving","Fragments":["it!"]},{"Key":"solving it!","Fragments":["You"]},{"Key":"it! You","Fragments":["should"]},{"Key":"more into","Fragments":["pattern"]},{"Key":"function headers,","Fragments":["you're"]},{"Key":"headers, you're","Fragments":["using"]},{"Key":"of `cond","Fragments":["do"]},{"Key":"`cond do","Fragments":[".."]},{"Key":"do ..","Fragments":["end`"]},{"Key":"end` where","Fragments":["pattern"]},{"Key":"matching will","Fragments":["work"]},{"Key":"well and","Fragments":["may"]},{"Key":"may lead","Fragments":["to"]},{"Key":"less lines","Fragments":["of"]},{"Key":"to count!","Fragments":["I"]},{"Key":"count! I","Fragments":["like"]},{"Key":"it! Also","Fragments":["the"]},{"Key":"`[ [h|t]|tail]`","Fragments":["notation."]},{"Key":"[h|t]|tail]` notation.","Fragments":[":)"]},{"Key":"notation. :)","Fragments":["I"]},{"Key":"something there,","Fragments":["thank"]},{"Key":"there, thank","Fragments":["you."]},{"Key":"side note","Fragments":["(I"]},{"Key":"note (I","Fragments":["can't"]},{"Key":"this since","Fragments":["I'm"]},{"Key":"the language)","Fragments":["but"]},{"Key":"language) but","Fragments":["I"]},{"Key":"the culture","Fragments":["is"]},{"Key":"culture is","Fragments":["to"]},{"Key":"name list","Fragments":["matches"]},{"Key":"list matches","Fragments":["as"]},{"Key":"matches as","Fragments":["`[h|t]`"]},{"Key":"as `[h|t]`","Fragments":["or"]},{"Key":"`[h|t]` or","Fragments":["`[head|tail]`."]},{"Key":"good! Not","Fragments":["sure"]},{"Key":"underscore naming","Fragments":["you're"]},{"Key":"naming you're","Fragments":["using."]},{"Key":"using. The","Fragments":["`defp`"]},{"Key":"The `defp`","Fragments":["and"]},{"Key":"arguments differ","Fragments":["e.g."]},{"Key":"differ e.g.","Fragments":["in"]},{"Key":"e.g. in","Fragments":["the"]},{"Key":"of `count()`","Fragments":["makes"]},{"Key":"`count()` makes","Fragments":["it"]},{"Key":"it somewhat","Fragments":["unnecessary."]},{"Key":"somewhat unnecessary.","Fragments":["What"]},{"Key":"unnecessary. What","Fragments":["was"]},{"Key":"behind using","Fragments":["it?"]},{"Key":"some real","Fragments":["difficulties"]},{"Key":"real difficulties","Fragments":["wrapping"]},{"Key":"difficulties wrapping","Fragments":["my"]},{"Key":"wrapping my","Fragments":["head"]},{"Key":"last three","Fragments":["functions."]},{"Key":"three functions.","Fragments":["My"]},{"Key":"functions. My","Fragments":["first"]},{"Key":"two attempts","Fragments":["at"]},{"Key":"at concat()","Fragments":["failed"]},{"Key":"concat() failed","Fragments":["on"]},{"Key":"failed on","Fragments":["the"]},{"Key":"list tests","Fragments":["which"]},{"Key":"tests which","Fragments":["leads"]},{"Key":"which leads","Fragments":["me"]},{"Key":"leads me","Fragments":["to"]},{"Key":"guess my","Fragments":["append()"]},{"Key":"my append()","Fragments":["is"]},{"Key":"append() is","Fragments":["non-optimal"]},{"Key":"is non-optimal","Fragments":["(even"]},{"Key":"non-optimal (even","Fragments":["though"]},{"Key":"it itself","Fragments":["succeeds"]},{"Key":"itself succeeds","Fragments":["with"]},{"Key":"succeeds with","Fragments":["large"]},{"Key":"large lists)","Fragments":["but"]},{"Key":"lists) but","Fragments":["haven't"]},{"Key":"but haven't","Fragments":["been"]},{"Key":"been able","Fragments":["to"]},{"Key":"out why","Fragments":["yet."]},{"Key":"why yet.","Fragments":["I'm"]},{"Key":"guessing it","Fragments":["may"]},{"Key":"the liberal","Fragments":["use"]},{"Key":"liberal use","Fragments":["of"]},{"Key":"of reverse()","Fragments":["in"]},{"Key":"reverse() in","Fragments":["it."]},{"Key":"in filter()","Fragments":["is"]},{"Key":"filter() is","Fragments":["bugging"]},{"Key":"is bugging","Fragments":["me"]},{"Key":"but can't","Fragments":["think"]},{"Key":"now (aside","Fragments":["from"]},{"Key":"using cond/if","Fragments":["instead"]},{"Key":"cond/if instead","Fragments":["of"]},{"Key":"of case).","Fragments":["I"]},{"Key":"case). I","Fragments":["chose"]},{"Key":"chose case","Fragments":["because"]},{"Key":"feels slightly","Fragments":["clearer"]},{"Key":"slightly clearer","Fragments":["than"]},{"Key":"clearer than","Fragments":["a"]},{"Key":"a \"cond","Fragments":["do"]},{"Key":"\"cond do","Fragments":["..."]},{"Key":"I've chosen","Fragments":["the"]},{"Key":"chosen the","Fragments":["short"]},{"Key":"form funcations","Fragments":["(..."]},{"Key":"funcations (...","Fragments":[","]},{"Key":"(... ,","Fragments":["do:"]},{"Key":"do: ...)","Fragments":["to"]},{"Key":"...) to","Fragments":["get"]},{"Key":"get clear","Fragments":["groupings."]},{"Key":" Read","Fragments":["a"]},{"Key":"Read a","Fragments":["bit"]},{"Key":"recursion (and","Fragments":["the"]},{"Key":"(and the","Fragments":["use"]},{"Key":"of accumulators)","Fragments":["and"]},{"Key":"accumulators) and","Fragments":["how"]},{"Key":"in elixir/erlang","Fragments":["to"]},{"Key":"elixir/erlang to","Fragments":["make"]},{"Key":"count efficient.","Fragments":["That"]},{"Key":"efficient. That","Fragments":["should"]},{"Key":"with `reverse`,","Fragments":["`append`"]},{"Key":"`reverse`, `append`","Fragments":["and"]},{"Key":"`concat` as","Fragments":["well."]},{"Key":"well. Also","Fragments":["experiment"]},{"Key":"Also experiment","Fragments":["with"]},{"Key":"with `[h|t]`as","Fragments":["a"]},{"Key":"`[h|t]`as a","Fragments":["construct"]},{"Key":"a construct","Fragments":["for"]},{"Key":"construct for","Fragments":["joining"]},{"Key":"solution of","Fragments":["`map`"]},{"Key":"of `map`","Fragments":["and"]},{"Key":"and `filter`,","Fragments":["I"]},{"Key":"`filter`, I","Fragments":["iddn't"]},{"Key":"I iddn't","Fragments":["even"]},{"Key":"iddn't even","Fragments":["consider"]},{"Key":"even consider","Fragments":["using"]},{"Key":"comprehensions there,","Fragments":["very"]},{"Key":"there, very","Fragments":["elegant!"]},{"Key":"Simplified `append`","Fragments":["somewhat"]},{"Key":"`append` somewhat","Fragments":["(removed"]},{"Key":"somewhat (removed","Fragments":["one"]},{"Key":"(removed one","Fragments":["call"]},{"Key":"reduce in","Fragments":["`filter`."]},{"Key":"in `filter`.","Fragments":["Are"]},{"Key":"`filter`. Are","Fragments":["lines"]},{"Key":"Are lines","Fragments":["39"]},{"Key":"lines 39","Fragments":["and"]},{"Key":"39 and","Fragments":["40"]},{"Key":"and 40","Fragments":["in"]},{"Key":"40 in","Fragments":["`append`"]},{"Key":"in `append`","Fragments":["necessary?"]},{"Key":" great","Fragments":["feedback,"]},{"Key":"great feedback,","Fragments":["thanks"]},{"Key":"I'm stuck,","Fragments":["I"]},{"Key":"stuck, I","Fragments":["pass"]},{"Key":"few test","Fragments":["cases"]},{"Key":"cases but","Fragments":["then"]},{"Key":"get further.","Fragments":["Any"]},{"Key":"further. Any","Fragments":["hint"]},{"Key":"Any hint","Fragments":["of"]},{"Key":"hint of","Fragments":["which"]},{"Key":"which direction","Fragments":["to"]},{"Key":"direction to","Fragments":["take"]},{"Key":"take to","Fragments":["move"]},{"Key":"move forward","Fragments":["would"]},{"Key":"forward would","Fragments":["be"]},{"Key":"good, nice","Fragments":["use"]},{"Key":"of `Map.get`","Fragments":["with"]},{"Key":"`Map.get` with","Fragments":["default"]},{"Key":"value set","Fragments":["to"]},{"Key":"to 0.","Fragments":["You"]},{"Key":"0. You","Fragments":["could"]},{"Key":"variables by","Fragments":["chaining"]},{"Key":"operations with","Fragments":["`|\u003e`."]},{"Key":"with `|\u003e`.","Fragments":["Not"]},{"Key":"`|\u003e`. Not","Fragments":["sure"]},{"Key":"Thanks a","Fragments":["lot!"]},{"Key":"lot! I","Fragments":["did"]},{"Key":"version which","Fragments":["is"]},{"Key":"much cleaner","Fragments":["which"]},{"Key":"cleaner which","Fragments":["you"]},{"Key":"find here","Fragments":["-\u003e"]},{"Key":"here -\u003e","Fragments":["http://exercism.io/submissions/6f3e116fe3d4fb77123e1c3b"]},{"Key":"does `|\u003e`","Fragments":["do"]},{"Key":"`|\u003e` do","Fragments":["and"]},{"Key":"do and","Fragments":["how"]},{"Key":"I apply","Fragments":["it"]},{"Key":"apply it","Fragments":["here?"]},{"Key":"comment, rickr.","Fragments":["So"]},{"Key":"rickr. So","Fragments":["far"]},{"Key":"far with","Fragments":["playing"]},{"Key":"with playing","Fragments":["around"]},{"Key":"elixir, I'm","Fragments":["still"]},{"Key":"that \"sweet","Fragments":["spot\""]},{"Key":"\"sweet spot\"","Fragments":["between"]},{"Key":"spot\" between","Fragments":["as-terse-as-possible"]},{"Key":"between as-terse-as-possible","Fragments":["functional"]},{"Key":"as-terse-as-possible functional","Fragments":["style,"]},{"Key":"style, and","Fragments":["the"]},{"Key":"explicit (but","Fragments":["easier"]},{"Key":"(but easier","Fragments":["for"]},{"Key":"to read)","Fragments":["style"]},{"Key":"read) style","Fragments":["I'd"]},{"Key":"or another","Fragments":["imperative"]},{"Key":"another imperative","Fragments":["language."]},{"Key":"way, wubba","Fragments":["lubba"]},{"Key":"wubba lubba","Fragments":["dub"]},{"Key":"lubba dub","Fragments":["dubs!"]},{"Key":"code pretty","Fragments":["fast"]},{"Key":"pretty fast","Fragments":["and"]},{"Key":"is optimal.","Fragments":["I"]},{"Key":"optimal. I","Fragments":["can't"]},{"Key":"can't put","Fragments":["regex"]},{"Key":"put regex","Fragments":["in"]},{"Key":"simple guard,","Fragments":["so"]},{"Key":"guard, so","Fragments":["cond"]},{"Key":"so cond","Fragments":["seems"]},{"Key":"cond seems","Fragments":["to"]},{"Key":"be only","Fragments":["way"]},{"Key":"problem. But","Fragments":["it's"]},{"Key":"a guess.","Fragments":["Probably"]},{"Key":"guess. Probably","Fragments":["there's"]},{"Key":"Probably there's","Fragments":["a"]},{"Key":"way, like","Fragments":["not"]},{"Key":"like not","Fragments":["using"]},{"Key":"regex but","Fragments":["modifying"]},{"Key":"but modifying","Fragments":["an"]},{"Key":"modifying an","Fragments":["argument"]},{"Key":"argument consequentially,","Fragments":["it"]},{"Key":"consequentially, it","Fragments":["may"]}],"prefix_len":2}